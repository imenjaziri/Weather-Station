
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000213f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc0  08021588  08021588  00022588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022248  08022248  00024268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08022248  08022248  00023248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022250  08022250  00024268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022250  08022250  00023250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022254  08022254  00023254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  08022258  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c94  20000268  080224c0  00024268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005efc  080224c0  00024efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023481  00000000  00000000  00024298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005500  00000000  00000000  00047719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  0004cc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001459  00000000  00000000  0004e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dcd1  00000000  00000000  0004fb09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000257b8  00000000  00000000  0007d7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001091f4  00000000  00000000  000a2f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac186  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000900c  00000000  00000000  001ac1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001b51d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021570 	.word	0x08021570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	08021570 	.word	0x08021570

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 ba09 	b.w	80010dc <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9be 	b.w	80010dc <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	468e      	mov	lr, r1
 8000dec:	4604      	mov	r4, r0
 8000dee:	4688      	mov	r8, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d14a      	bne.n	8000e8a <__udivmoddi4+0xa6>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d962      	bls.n	8000ec0 <__udivmoddi4+0xdc>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	b14e      	cbz	r6, 8000e14 <__udivmoddi4+0x30>
 8000e00:	f1c6 0320 	rsb	r3, r6, #32
 8000e04:	fa01 f806 	lsl.w	r8, r1, r6
 8000e08:	fa20 f303 	lsr.w	r3, r0, r3
 8000e0c:	40b7      	lsls	r7, r6
 8000e0e:	ea43 0808 	orr.w	r8, r3, r8
 8000e12:	40b4      	lsls	r4, r6
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x62>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e38:	f080 80ea 	bcs.w	8001010 <__udivmoddi4+0x22c>
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f240 80e7 	bls.w	8001010 <__udivmoddi4+0x22c>
 8000e42:	3902      	subs	r1, #2
 8000e44:	443b      	add	r3, r7
 8000e46:	1a9a      	subs	r2, r3, r2
 8000e48:	b2a3      	uxth	r3, r4
 8000e4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e5a:	459c      	cmp	ip, r3
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x8e>
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e64:	f080 80d6 	bcs.w	8001014 <__udivmoddi4+0x230>
 8000e68:	459c      	cmp	ip, r3
 8000e6a:	f240 80d3 	bls.w	8001014 <__udivmoddi4+0x230>
 8000e6e:	443b      	add	r3, r7
 8000e70:	3802      	subs	r0, #2
 8000e72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e76:	eba3 030c 	sub.w	r3, r3, ip
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	b11d      	cbz	r5, 8000e86 <__udivmoddi4+0xa2>
 8000e7e:	40f3      	lsrs	r3, r6
 8000e80:	2200      	movs	r2, #0
 8000e82:	e9c5 3200 	strd	r3, r2, [r5]
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d905      	bls.n	8000e9a <__udivmoddi4+0xb6>
 8000e8e:	b10d      	cbz	r5, 8000e94 <__udivmoddi4+0xb0>
 8000e90:	e9c5 0100 	strd	r0, r1, [r5]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4608      	mov	r0, r1
 8000e98:	e7f5      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000e9a:	fab3 f183 	clz	r1, r3
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d146      	bne.n	8000f30 <__udivmoddi4+0x14c>
 8000ea2:	4573      	cmp	r3, lr
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xc8>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 8105 	bhi.w	80010b6 <__udivmoddi4+0x2d2>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e5      	beq.n	8000e86 <__udivmoddi4+0xa2>
 8000eba:	e9c5 4800 	strd	r4, r8, [r5]
 8000ebe:	e7e2      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	f000 8090 	beq.w	8000fe6 <__udivmoddi4+0x202>
 8000ec6:	fab2 f682 	clz	r6, r2
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	f040 80a4 	bne.w	8001018 <__udivmoddi4+0x234>
 8000ed0:	1a8a      	subs	r2, r1, r2
 8000ed2:	0c03      	lsrs	r3, r0, #16
 8000ed4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed8:	b280      	uxth	r0, r0
 8000eda:	b2bc      	uxth	r4, r7
 8000edc:	2101      	movs	r1, #1
 8000ede:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ee2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eea:	fb04 f20c 	mul.w	r2, r4, ip
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x11e>
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ef8:	d202      	bcs.n	8000f00 <__udivmoddi4+0x11c>
 8000efa:	429a      	cmp	r2, r3
 8000efc:	f200 80e0 	bhi.w	80010c0 <__udivmoddi4+0x2dc>
 8000f00:	46c4      	mov	ip, r8
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f10:	fb02 f404 	mul.w	r4, r2, r4
 8000f14:	429c      	cmp	r4, r3
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x144>
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x142>
 8000f20:	429c      	cmp	r4, r3
 8000f22:	f200 80ca 	bhi.w	80010ba <__udivmoddi4+0x2d6>
 8000f26:	4602      	mov	r2, r0
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0x98>
 8000f30:	f1c1 0620 	rsb	r6, r1, #32
 8000f34:	408b      	lsls	r3, r1
 8000f36:	fa22 f706 	lsr.w	r7, r2, r6
 8000f3a:	431f      	orrs	r7, r3
 8000f3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f40:	fa20 f306 	lsr.w	r3, r0, r6
 8000f44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f4c:	4323      	orrs	r3, r4
 8000f4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f52:	fa1f fc87 	uxth.w	ip, r7
 8000f56:	fbbe f0f9 	udiv	r0, lr, r9
 8000f5a:	0c1c      	lsrs	r4, r3, #16
 8000f5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f68:	45a6      	cmp	lr, r4
 8000f6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6e:	d909      	bls.n	8000f84 <__udivmoddi4+0x1a0>
 8000f70:	193c      	adds	r4, r7, r4
 8000f72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f76:	f080 809c 	bcs.w	80010b2 <__udivmoddi4+0x2ce>
 8000f7a:	45a6      	cmp	lr, r4
 8000f7c:	f240 8099 	bls.w	80010b2 <__udivmoddi4+0x2ce>
 8000f80:	3802      	subs	r0, #2
 8000f82:	443c      	add	r4, r7
 8000f84:	eba4 040e 	sub.w	r4, r4, lr
 8000f88:	fa1f fe83 	uxth.w	lr, r3
 8000f8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f90:	fb09 4413 	mls	r4, r9, r3, r4
 8000f94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f9c:	45a4      	cmp	ip, r4
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x1ce>
 8000fa0:	193c      	adds	r4, r7, r4
 8000fa2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fa6:	f080 8082 	bcs.w	80010ae <__udivmoddi4+0x2ca>
 8000faa:	45a4      	cmp	ip, r4
 8000fac:	d97f      	bls.n	80010ae <__udivmoddi4+0x2ca>
 8000fae:	3b02      	subs	r3, #2
 8000fb0:	443c      	add	r4, r7
 8000fb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fb6:	eba4 040c 	sub.w	r4, r4, ip
 8000fba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fbe:	4564      	cmp	r4, ip
 8000fc0:	4673      	mov	r3, lr
 8000fc2:	46e1      	mov	r9, ip
 8000fc4:	d362      	bcc.n	800108c <__udivmoddi4+0x2a8>
 8000fc6:	d05f      	beq.n	8001088 <__udivmoddi4+0x2a4>
 8000fc8:	b15d      	cbz	r5, 8000fe2 <__udivmoddi4+0x1fe>
 8000fca:	ebb8 0203 	subs.w	r2, r8, r3
 8000fce:	eb64 0409 	sbc.w	r4, r4, r9
 8000fd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fd6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fda:	431e      	orrs	r6, r3
 8000fdc:	40cc      	lsrs	r4, r1
 8000fde:	e9c5 6400 	strd	r6, r4, [r5]
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	e74f      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000fe6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fea:	0c01      	lsrs	r1, r0, #16
 8000fec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ff0:	b280      	uxth	r0, r0
 8000ff2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	463c      	mov	r4, r7
 8000ffc:	46b8      	mov	r8, r7
 8000ffe:	46be      	mov	lr, r7
 8001000:	2620      	movs	r6, #32
 8001002:	fbb1 f1f7 	udiv	r1, r1, r7
 8001006:	eba2 0208 	sub.w	r2, r2, r8
 800100a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800100e:	e766      	b.n	8000ede <__udivmoddi4+0xfa>
 8001010:	4601      	mov	r1, r0
 8001012:	e718      	b.n	8000e46 <__udivmoddi4+0x62>
 8001014:	4610      	mov	r0, r2
 8001016:	e72c      	b.n	8000e72 <__udivmoddi4+0x8e>
 8001018:	f1c6 0220 	rsb	r2, r6, #32
 800101c:	fa2e f302 	lsr.w	r3, lr, r2
 8001020:	40b7      	lsls	r7, r6
 8001022:	40b1      	lsls	r1, r6
 8001024:	fa20 f202 	lsr.w	r2, r0, r2
 8001028:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800102c:	430a      	orrs	r2, r1
 800102e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001032:	b2bc      	uxth	r4, r7
 8001034:	fb0e 3318 	mls	r3, lr, r8, r3
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800103e:	fb08 f904 	mul.w	r9, r8, r4
 8001042:	40b0      	lsls	r0, r6
 8001044:	4589      	cmp	r9, r1
 8001046:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800104a:	b280      	uxth	r0, r0
 800104c:	d93e      	bls.n	80010cc <__udivmoddi4+0x2e8>
 800104e:	1879      	adds	r1, r7, r1
 8001050:	f108 3cff 	add.w	ip, r8, #4294967295
 8001054:	d201      	bcs.n	800105a <__udivmoddi4+0x276>
 8001056:	4589      	cmp	r9, r1
 8001058:	d81f      	bhi.n	800109a <__udivmoddi4+0x2b6>
 800105a:	eba1 0109 	sub.w	r1, r1, r9
 800105e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001062:	fb09 f804 	mul.w	r8, r9, r4
 8001066:	fb0e 1119 	mls	r1, lr, r9, r1
 800106a:	b292      	uxth	r2, r2
 800106c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001070:	4542      	cmp	r2, r8
 8001072:	d229      	bcs.n	80010c8 <__udivmoddi4+0x2e4>
 8001074:	18ba      	adds	r2, r7, r2
 8001076:	f109 31ff 	add.w	r1, r9, #4294967295
 800107a:	d2c4      	bcs.n	8001006 <__udivmoddi4+0x222>
 800107c:	4542      	cmp	r2, r8
 800107e:	d2c2      	bcs.n	8001006 <__udivmoddi4+0x222>
 8001080:	f1a9 0102 	sub.w	r1, r9, #2
 8001084:	443a      	add	r2, r7
 8001086:	e7be      	b.n	8001006 <__udivmoddi4+0x222>
 8001088:	45f0      	cmp	r8, lr
 800108a:	d29d      	bcs.n	8000fc8 <__udivmoddi4+0x1e4>
 800108c:	ebbe 0302 	subs.w	r3, lr, r2
 8001090:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001094:	3801      	subs	r0, #1
 8001096:	46e1      	mov	r9, ip
 8001098:	e796      	b.n	8000fc8 <__udivmoddi4+0x1e4>
 800109a:	eba7 0909 	sub.w	r9, r7, r9
 800109e:	4449      	add	r1, r9
 80010a0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010a8:	fb09 f804 	mul.w	r8, r9, r4
 80010ac:	e7db      	b.n	8001066 <__udivmoddi4+0x282>
 80010ae:	4673      	mov	r3, lr
 80010b0:	e77f      	b.n	8000fb2 <__udivmoddi4+0x1ce>
 80010b2:	4650      	mov	r0, sl
 80010b4:	e766      	b.n	8000f84 <__udivmoddi4+0x1a0>
 80010b6:	4608      	mov	r0, r1
 80010b8:	e6fd      	b.n	8000eb6 <__udivmoddi4+0xd2>
 80010ba:	443b      	add	r3, r7
 80010bc:	3a02      	subs	r2, #2
 80010be:	e733      	b.n	8000f28 <__udivmoddi4+0x144>
 80010c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010c4:	443b      	add	r3, r7
 80010c6:	e71c      	b.n	8000f02 <__udivmoddi4+0x11e>
 80010c8:	4649      	mov	r1, r9
 80010ca:	e79c      	b.n	8001006 <__udivmoddi4+0x222>
 80010cc:	eba1 0109 	sub.w	r1, r1, r9
 80010d0:	46c4      	mov	ip, r8
 80010d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010d6:	fb09 f804 	mul.w	r8, r9, r4
 80010da:	e7c4      	b.n	8001066 <__udivmoddi4+0x282>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <Start_SatellitePrediction_Task>:
#include "math.h"
char buff[600];
time_t timestamp;
#define ONE_SEC_IN_DAYS (1.0/86400.0)
void Start_SatellitePrediction_Task(void const * argument)
{
 80010e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e4:	b0ca      	sub	sp, #296	@ 0x128
 80010e6:	af06      	add	r7, sp, #24
 80010e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010f0:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN Start_SatellitePrediction_Task */
	const char *tle_line_1 = "1 25544U 98067A   25183.17152840  .00005361  00000-0  10070-3 0  9993";
 80010f2:	4b8f      	ldr	r3, [pc, #572]	@ (8001330 <Start_SatellitePrediction_Task+0x250>)
 80010f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	const char *tle_line_2 = "2 25544  51.6357 232.8024 0002162 321.8485 134.2034 15.50326686517486";
 80010f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001334 <Start_SatellitePrediction_Task+0x254>)
 80010fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	// Create orbit object
	predict_orbital_elements_t *iss = predict_parse_tle(tle_line_1, tle_line_2);
 80010fe:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001102:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001106:	f003 f84f 	bl	80041a8 <predict_parse_tle>
 800110a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	if (!iss) {
 800110e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001112:	2b00      	cmp	r3, #0
 8001114:	d108      	bne.n	8001128 <Start_SatellitePrediction_Task+0x48>
		HAL_UART_Transmit(&huart2,(const uint8_t *)"Failed to initialize orbit from tle!", strlen("Failed to initialize orbit from tle!"),100);
 8001116:	2364      	movs	r3, #100	@ 0x64
 8001118:	2224      	movs	r2, #36	@ 0x24
 800111a:	4987      	ldr	r1, [pc, #540]	@ (8001338 <Start_SatellitePrediction_Task+0x258>)
 800111c:	4887      	ldr	r0, [pc, #540]	@ (800133c <Start_SatellitePrediction_Task+0x25c>)
 800111e:	f013 f9fd 	bl	801451c <HAL_UART_Transmit>
		exit(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f016 fe04 	bl	8017d30 <exit>
	}

	// Create observer object
	predict_observer_t *obs = predict_create_observer("My Ground Station", 36.84*M_PI/180.0, 10.9*M_PI/180.0, 60.3);
 8001128:	ed9f 2b79 	vldr	d2, [pc, #484]	@ 8001310 <Start_SatellitePrediction_Task+0x230>
 800112c:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 8001318 <Start_SatellitePrediction_Task+0x238>
 8001130:	ed9f 0b7b 	vldr	d0, [pc, #492]	@ 8001320 <Start_SatellitePrediction_Task+0x240>
 8001134:	4882      	ldr	r0, [pc, #520]	@ (8001340 <Start_SatellitePrediction_Task+0x260>)
 8001136:	f001 fcbb 	bl	8002ab0 <predict_create_observer>
 800113a:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
	if (!obs) {
 800113e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <Start_SatellitePrediction_Task+0x72>
		HAL_UART_Transmit(&huart2,(const uint8_t *)"Failed to initialize observer!", strlen("Failed to initialize observer!"),100);
 8001146:	2364      	movs	r3, #100	@ 0x64
 8001148:	221e      	movs	r2, #30
 800114a:	497e      	ldr	r1, [pc, #504]	@ (8001344 <Start_SatellitePrediction_Task+0x264>)
 800114c:	487b      	ldr	r0, [pc, #492]	@ (800133c <Start_SatellitePrediction_Task+0x25c>)
 800114e:	f013 f9e5 	bl	801451c <HAL_UART_Transmit>
	}
	rtc_to_time_t();
 8001152:	f000 f903 	bl	800135c <rtc_to_time_t>
	predict_julian_date_t julian_time = predict_to_julian(timestamp);
 8001156:	4b7c      	ldr	r3, [pc, #496]	@ (8001348 <Start_SatellitePrediction_Task+0x268>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f001 fc3a 	bl	80029d8 <predict_to_julian>
 8001164:	ed87 0b3e 	vstr	d0, [r7, #248]	@ 0xf8
	struct predict_position iss_orbit;
	predict_orbit(iss, &iss_orbit, julian_time);
 8001168:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800116c:	ed97 0b3e 	vldr	d0, [r7, #248]	@ 0xf8
 8001170:	4619      	mov	r1, r3
 8001172:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001176:	f003 fc9f 	bl	8004ab8 <predict_orbit>
	sprintf(buff,"ISS: lat=%f, lon=%f, alt=%f\n", iss_orbit.latitude*180.0/M_PI, iss_orbit.longitude*180.0/M_PI, iss_orbit.altitude);
 800117a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b72      	ldr	r3, [pc, #456]	@ (800134c <Start_SatellitePrediction_Task+0x26c>)
 8001184:	f7ff fa48 	bl	8000618 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a365      	add	r3, pc, #404	@ (adr r3, 8001328 <Start_SatellitePrediction_Task+0x248>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fb69 	bl	800086c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4614      	mov	r4, r2
 80011a0:	461d      	mov	r5, r3
 80011a2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b68      	ldr	r3, [pc, #416]	@ (800134c <Start_SatellitePrediction_Task+0x26c>)
 80011ac:	f7ff fa34 	bl	8000618 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	a35b      	add	r3, pc, #364	@ (adr r3, 8001328 <Start_SatellitePrediction_Task+0x248>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fb55 	bl	800086c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80011ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011d2:	e9cd 0100 	strd	r0, r1, [sp]
 80011d6:	4622      	mov	r2, r4
 80011d8:	462b      	mov	r3, r5
 80011da:	495d      	ldr	r1, [pc, #372]	@ (8001350 <Start_SatellitePrediction_Task+0x270>)
 80011dc:	485d      	ldr	r0, [pc, #372]	@ (8001354 <Start_SatellitePrediction_Task+0x274>)
 80011de:	f018 fc39 	bl	8019a54 <siprintf>
	HAL_UART_Transmit(&huart2,(const uint8_t *)buff, strlen(buff),100);
 80011e2:	485c      	ldr	r0, [pc, #368]	@ (8001354 <Start_SatellitePrediction_Task+0x274>)
 80011e4:	f7ff f854 	bl	8000290 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	4959      	ldr	r1, [pc, #356]	@ (8001354 <Start_SatellitePrediction_Task+0x274>)
 80011f0:	4852      	ldr	r0, [pc, #328]	@ (800133c <Start_SatellitePrediction_Task+0x25c>)
 80011f2:	f013 f993 	bl	801451c <HAL_UART_Transmit>

	// Observe ISS
	struct predict_observation iss_obs;
	predict_observe_orbit(obs, &iss_orbit, &iss_obs);
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011fe:	4619      	mov	r1, r3
 8001200:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001204:	f001 fc88 	bl	8002b18 <predict_observe_orbit>
	sprintf(buff,"ISS: azi=%f (rate: %f), ele=%f (rate: %f)\n", iss_obs.azimuth*180.0/M_PI, iss_obs.azimuth_rate*180.0/M_PI, iss_obs.elevation*180.0/M_PI, iss_obs.elevation_rate*180.0/M_PI);
 8001208:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800120c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001210:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b4c      	ldr	r3, [pc, #304]	@ (800134c <Start_SatellitePrediction_Task+0x26c>)
 800121a:	f7ff f9fd 	bl	8000618 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	a340      	add	r3, pc, #256	@ (adr r3, 8001328 <Start_SatellitePrediction_Task+0x248>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff fb1e 	bl	800086c <__aeabi_ddiv>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4692      	mov	sl, r2
 8001236:	469b      	mov	fp, r3
 8001238:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800123c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001240:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b40      	ldr	r3, [pc, #256]	@ (800134c <Start_SatellitePrediction_Task+0x26c>)
 800124a:	f7ff f9e5 	bl	8000618 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	a334      	add	r3, pc, #208	@ (adr r3, 8001328 <Start_SatellitePrediction_Task+0x248>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff fb06 	bl	800086c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800126c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001270:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b34      	ldr	r3, [pc, #208]	@ (800134c <Start_SatellitePrediction_Task+0x26c>)
 800127a:	f7ff f9cd 	bl	8000618 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	a328      	add	r3, pc, #160	@ (adr r3, 8001328 <Start_SatellitePrediction_Task+0x248>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff faee 	bl	800086c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4690      	mov	r8, r2
 8001296:	4699      	mov	r9, r3
 8001298:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800129c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012a0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b28      	ldr	r3, [pc, #160]	@ (800134c <Start_SatellitePrediction_Task+0x26c>)
 80012aa:	f7ff f9b5 	bl	8000618 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001328 <Start_SatellitePrediction_Task+0x248>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fad6 	bl	800086c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012cc:	e9cd 4500 	strd	r4, r5, [sp]
 80012d0:	4652      	mov	r2, sl
 80012d2:	465b      	mov	r3, fp
 80012d4:	4920      	ldr	r1, [pc, #128]	@ (8001358 <Start_SatellitePrediction_Task+0x278>)
 80012d6:	481f      	ldr	r0, [pc, #124]	@ (8001354 <Start_SatellitePrediction_Task+0x274>)
 80012d8:	f018 fbbc 	bl	8019a54 <siprintf>
	HAL_UART_Transmit(&huart2,(const uint8_t *)buff, strlen(buff),100);
 80012dc:	481d      	ldr	r0, [pc, #116]	@ (8001354 <Start_SatellitePrediction_Task+0x274>)
 80012de:	f7fe ffd7 	bl	8000290 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	2364      	movs	r3, #100	@ 0x64
 80012e8:	491a      	ldr	r1, [pc, #104]	@ (8001354 <Start_SatellitePrediction_Task+0x274>)
 80012ea:	4814      	ldr	r0, [pc, #80]	@ (800133c <Start_SatellitePrediction_Task+0x25c>)
 80012ec:	f013 f916 	bl	801451c <HAL_UART_Transmit>
	// Predict ISS
	list_next_passes(obs, iss, 7, julian_time);
 80012f0:	ed97 0b3e 	vldr	d0, [r7, #248]	@ 0xf8
 80012f4:	2207      	movs	r2, #7
 80012f6:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80012fa:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80012fe:	f000 f853 	bl	80013a8 <list_next_passes>
	for(;;)
	{

		osDelay(10000);
 8001302:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001306:	f014 fd10 	bl	8015d2a <osDelay>
 800130a:	e7fa      	b.n	8001302 <Start_SatellitePrediction_Task+0x222>
 800130c:	f3af 8000 	nop.w
 8001310:	66666666 	.word	0x66666666
 8001314:	404e2666 	.word	0x404e2666
 8001318:	3d2a296b 	.word	0x3d2a296b
 800131c:	3fc859d0 	.word	0x3fc859d0
 8001320:	51462649 	.word	0x51462649
 8001324:	3fe49349 	.word	0x3fe49349
 8001328:	54442d18 	.word	0x54442d18
 800132c:	400921fb 	.word	0x400921fb
 8001330:	08021588 	.word	0x08021588
 8001334:	080215d0 	.word	0x080215d0
 8001338:	08021618 	.word	0x08021618
 800133c:	20000d8c 	.word	0x20000d8c
 8001340:	08021640 	.word	0x08021640
 8001344:	08021654 	.word	0x08021654
 8001348:	200004e0 	.word	0x200004e0
 800134c:	40668000 	.word	0x40668000
 8001350:	08021674 	.word	0x08021674
 8001354:	20000284 	.word	0x20000284
 8001358:	08021694 	.word	0x08021694

0800135c <rtc_to_time_t>:

		/* USER CODE END Start_SatellitePrediction_Task */
	}
}
time_t rtc_to_time_t()
{/*HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0
HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);*/
struct tm timeinfo;

timeinfo.tm_year = 25 + 100;      // RTC donne année depuis 2000, tm_year depuis 1900
 8001362:	237d      	movs	r3, #125	@ 0x7d
 8001364:	61bb      	str	r3, [r7, #24]
timeinfo.tm_mon  = 6;       // tm_mon : 0-11, RTC : 1-12
 8001366:	2306      	movs	r3, #6
 8001368:	617b      	str	r3, [r7, #20]
timeinfo.tm_mday = 3;
 800136a:	2303      	movs	r3, #3
 800136c:	613b      	str	r3, [r7, #16]

timeinfo.tm_hour = 10;
 800136e:	230a      	movs	r3, #10
 8001370:	60fb      	str	r3, [r7, #12]
timeinfo.tm_min  = 48;
 8001372:	2330      	movs	r3, #48	@ 0x30
 8001374:	60bb      	str	r3, [r7, #8]
timeinfo.tm_sec  = 30;
 8001376:	231e      	movs	r3, #30
 8001378:	607b      	str	r3, [r7, #4]

timeinfo.tm_isdst = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
timestamp = mktime(&timeinfo);
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4618      	mov	r0, r3
 8001382:	f018 feb9 	bl	801a0f8 <mktime>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4905      	ldr	r1, [pc, #20]	@ (80013a0 <rtc_to_time_t+0x44>)
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
return timestamp;}
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <rtc_to_time_t+0x44>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	3728      	adds	r7, #40	@ 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200004e0 	.word	0x200004e0
 80013a4:	00000000 	.word	0x00000000

080013a8 <list_next_passes>:

void list_next_passes(predict_observer_t *obs, predict_orbital_elements_t *sat, int count, predict_julian_date_t start_time) {
 80013a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ac:	b0ff      	sub	sp, #508	@ 0x1fc
 80013ae:	af10      	add	r7, sp, #64	@ 0x40
 80013b0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013b4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80013b8:	6018      	str	r0, [r3, #0]
 80013ba:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80013c2:	6019      	str	r1, [r3, #0]
 80013c4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013d2:	ed03 0b02 	vstr	d0, [r3, #-8]
	predict_julian_date_t t = start_time;
 80013d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80013de:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0

	for (int i = 0; i < count; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80013e8:	e168      	b.n	80016bc <list_next_passes+0x314>
		struct predict_observation aos = predict_next_aos(obs, sat, t);
 80013ea:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013ee:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 80013f2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013f6:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 80013fa:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013fe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001402:	ed97 0b6c 	vldr	d0, [r7, #432]	@ 0x1b0
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	6819      	ldr	r1, [r3, #0]
 800140a:	f002 f801 	bl	8003410 <predict_next_aos>
		struct predict_observation max_el = predict_at_max_elevation(obs, sat, aos.time+(60.0/86400.0)  );
 800140e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001412:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	a3b3      	add	r3, pc, #716	@ (adr r3, 80016e8 <list_next_passes+0x340>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7fe ff44 	bl	80002ac <__adddf3>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	ec43 2b17 	vmov	d7, r2, r3
 800142c:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001430:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001434:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 8001438:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800143c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001440:	eeb0 0a47 	vmov.f32	s0, s14
 8001444:	eef0 0a67 	vmov.f32	s1, s15
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	6819      	ldr	r1, [r3, #0]
 800144c:	f002 fd1a 	bl	8003e84 <predict_at_max_elevation>
		struct predict_observation los = predict_next_los(obs, sat, max_el.time+(60.0/86400.0)  );
 8001450:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001454:	a3a4      	add	r3, pc, #656	@ (adr r3, 80016e8 <list_next_passes+0x340>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7fe ff27 	bl	80002ac <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ec43 2b17 	vmov	d7, r2, r3
 8001466:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800146a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800146e:	f5a3 72c4 	sub.w	r2, r3, #392	@ 0x188
 8001472:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001476:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800147a:	eeb0 0a47 	vmov.f32	s0, s14
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	6819      	ldr	r1, [r3, #0]
 8001486:	f002 fa77 	bl	8003978 <predict_next_los>


		float elevation_deg = max_el.elevation * 180.0 / M_PI;
 800148a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b97      	ldr	r3, [pc, #604]	@ (80016f0 <list_next_passes+0x348>)
 8001494:	f7ff f8c0 	bl	8000618 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	a38f      	add	r3, pc, #572	@ (adr r3, 80016e0 <list_next_passes+0x338>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f9e1 	bl	800086c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fba9 	bl	8000c08 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

		time_t aos_t = predict_from_julian(aos.time);
 80014bc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80014c0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014c4:	ed93 7b00 	vldr	d7, [r3]
 80014c8:	eeb0 0a47 	vmov.f32	s0, s14
 80014cc:	eef0 0a67 	vmov.f32	s1, s15
 80014d0:	f001 faaa 	bl	8002a28 <predict_from_julian>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
		time_t los_t = predict_from_julian(los.time);
 80014dc:	ed97 7b4c 	vldr	d7, [r7, #304]	@ 0x130
 80014e0:	eeb0 0a47 	vmov.f32	s0, s14
 80014e4:	eef0 0a67 	vmov.f32	s1, s15
 80014e8:	f001 fa9e 	bl	8002a28 <predict_from_julian>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
		int duration = (int)(los_t - aos_t);
 80014f4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80014f8:	4611      	mov	r1, r2
 80014fa:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80014fe:	4613      	mov	r3, r2
 8001500:	1acb      	subs	r3, r1, r3
 8001502:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		struct tm aos_tm_storage, los_tm_storage;
		struct tm *aos_tm = gmtime(&aos_t);
 8001506:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800150a:	4618      	mov	r0, r3
 800150c:	f018 fb6c 	bl	8019be8 <gmtime>
 8001510:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
		if (aos_tm) memcpy(&aos_tm_storage, aos_tm, sizeof(struct tm));
 8001514:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <list_next_passes+0x184>
 800151c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001520:	2224      	movs	r2, #36	@ 0x24
 8001522:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8001526:	4618      	mov	r0, r3
 8001528:	f019 fba3 	bl	801ac72 <memcpy>
		struct tm *los_tm = gmtime(&los_t);
 800152c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8001530:	4618      	mov	r0, r3
 8001532:	f018 fb59 	bl	8019be8 <gmtime>
 8001536:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
		if (los_tm) memcpy(&los_tm_storage, los_tm, sizeof(struct tm));
 800153a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <list_next_passes+0x1aa>
 8001542:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 800154c:	4618      	mov	r0, r3
 800154e:	f019 fb90 	bl	801ac72 <memcpy>
		    "Durée   : %02d:%02d min\r\n"
		    "Max El  : %.1f°\r\n"
		    "Az AOS  : %.1f°\r\n"
		    "Az LOS  : %.1f°\r\n"
		    "--------------------------------------------------------\r\n\r\n",
		    aos_tm_storage.tm_year + 1900, aos_tm_storage.tm_mon + 1, aos_tm_storage.tm_mday,
 8001552:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001556:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800155a:	695b      	ldr	r3, [r3, #20]
		sprintf(buff,
 800155c:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
		    aos_tm_storage.tm_year + 1900, aos_tm_storage.tm_mon + 1, aos_tm_storage.tm_mday,
 8001562:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001566:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800156a:	691b      	ldr	r3, [r3, #16]
		sprintf(buff,
 800156c:	1c59      	adds	r1, r3, #1
 800156e:	61f9      	str	r1, [r7, #28]
 8001570:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001574:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001578:	68dd      	ldr	r5, [r3, #12]
 800157a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800157e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001582:	689e      	ldr	r6, [r3, #8]
 8001584:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001588:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800158c:	6858      	ldr	r0, [r3, #4]
 800158e:	61b8      	str	r0, [r7, #24]
 8001590:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001594:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001598:	681c      	ldr	r4, [r3, #0]
 800159a:	617c      	str	r4, [r7, #20]
 800159c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80015a0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	613a      	str	r2, [r7, #16]
 80015a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80015ac:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	60f9      	str	r1, [r7, #12]
 80015b4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80015b8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80015c4:	4a4b      	ldr	r2, [pc, #300]	@ (80016f4 <list_next_passes+0x34c>)
 80015c6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ca:	441a      	add	r2, r3
 80015cc:	1152      	asrs	r2, r2, #5
 80015ce:	17db      	asrs	r3, r3, #31
 80015d0:	1ad0      	subs	r0, r2, r3
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80015d8:	4b46      	ldr	r3, [pc, #280]	@ (80016f4 <list_next_passes+0x34c>)
 80015da:	fb83 1302 	smull	r1, r3, r3, r2
 80015de:	4413      	add	r3, r2
 80015e0:	1159      	asrs	r1, r3, #5
 80015e2:	17d3      	asrs	r3, r2, #31
 80015e4:	1acc      	subs	r4, r1, r3
 80015e6:	4623      	mov	r3, r4
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	1b1b      	subs	r3, r3, r4
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	1ad4      	subs	r4, r2, r3
 80015f0:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 80015f4:	f7fe ffb8 	bl	8000568 <__aeabi_f2d>
 80015f8:	4682      	mov	sl, r0
 80015fa:	468b      	mov	fp, r1
		    aos_tm_storage.tm_hour, aos_tm_storage.tm_min, aos_tm_storage.tm_sec,
		    los_tm_storage.tm_hour, los_tm_storage.tm_min, los_tm_storage.tm_sec,
		    duration / 60, duration % 60,
		    elevation_deg,
		    aos.azimuth * 180.0 / M_PI,
 80015fc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001600:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001604:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <list_next_passes+0x348>)
 800160e:	f7ff f803 	bl	8000618 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
		sprintf(buff,
 800161a:	a331      	add	r3, pc, #196	@ (adr r3, 80016e0 <list_next_passes+0x338>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff f924 	bl	800086c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4690      	mov	r8, r2
 800162a:	4699      	mov	r9, r3
		    los.azimuth * 180.0 / M_PI);
 800162c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <list_next_passes+0x348>)
 8001636:	f7fe ffef 	bl	8000618 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
		sprintf(buff,
 8001642:	a327      	add	r3, pc, #156	@ (adr r3, 80016e0 <list_next_passes+0x338>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f910 	bl	800086c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001654:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001658:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 800165c:	9408      	str	r4, [sp, #32]
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	9007      	str	r0, [sp, #28]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	9306      	str	r3, [sp, #24]
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	9105      	str	r1, [sp, #20]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	9204      	str	r2, [sp, #16]
 800166e:	697c      	ldr	r4, [r7, #20]
 8001670:	9403      	str	r4, [sp, #12]
 8001672:	69b8      	ldr	r0, [r7, #24]
 8001674:	9002      	str	r0, [sp, #8]
 8001676:	9601      	str	r6, [sp, #4]
 8001678:	9500      	str	r5, [sp, #0]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800167e:	491e      	ldr	r1, [pc, #120]	@ (80016f8 <list_next_passes+0x350>)
 8001680:	481e      	ldr	r0, [pc, #120]	@ (80016fc <list_next_passes+0x354>)
 8001682:	f018 f9e7 	bl	8019a54 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), 1000);
 8001686:	481d      	ldr	r0, [pc, #116]	@ (80016fc <list_next_passes+0x354>)
 8001688:	f7fe fe02 	bl	8000290 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001694:	4919      	ldr	r1, [pc, #100]	@ (80016fc <list_next_passes+0x354>)
 8001696:	481a      	ldr	r0, [pc, #104]	@ (8001700 <list_next_passes+0x358>)
 8001698:	f012 ff40 	bl	801451c <HAL_UART_Transmit>
		t = los.time + (60.0/86400.0)  ;
 800169c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80016a0:	a311      	add	r3, pc, #68	@ (adr r3, 80016e8 <list_next_passes+0x340>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe fe01 	bl	80002ac <__adddf3>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
	for (int i = 0; i < count; i++) {
 80016b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80016b6:	3301      	adds	r3, #1
 80016b8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80016bc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80016c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80016c4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	f6ff ae8d 	blt.w	80013ea <list_next_passes+0x42>
	}
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016de:	bf00      	nop
 80016e0:	54442d18 	.word	0x54442d18
 80016e4:	400921fb 	.word	0x400921fb
 80016e8:	16c16c17 	.word	0x16c16c17
 80016ec:	3f46c16c 	.word	0x3f46c16c
 80016f0:	40668000 	.word	0x40668000
 80016f4:	88888889 	.word	0x88888889
 80016f8:	080216c0 	.word	0x080216c0
 80016fc:	20000284 	.word	0x20000284
 8001700:	20000d8c 	.word	0x20000d8c

08001704 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <vApplicationGetIdleTaskMemory+0x2c>)
 8001714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4a06      	ldr	r2, [pc, #24]	@ (8001734 <vApplicationGetIdleTaskMemory+0x30>)
 800171a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200004f8 	.word	0x200004f8
 8001734:	20000598 	.word	0x20000598

08001738 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b09c      	sub	sp, #112	@ 0x70
 800173c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800173e:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <MX_FREERTOS_Init+0xa4>)
 8001740:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001744:	461d      	mov	r5, r3
 8001746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800174e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001752:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f014 fa9a 	bl	8015c92 <osThreadCreate>
 800175e:	4603      	mov	r3, r0
 8001760:	4a1f      	ldr	r2, [pc, #124]	@ (80017e0 <MX_FREERTOS_Init+0xa8>)
 8001762:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_FREERTOS_Init+0xac>)
 8001766:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800176a:	461d      	mov	r5, r3
 800176c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001770:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 8001778:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f014 fa87 	bl	8015c92 <osThreadCreate>
 8001784:	4603      	mov	r3, r0
 8001786:	4a18      	ldr	r2, [pc, #96]	@ (80017e8 <MX_FREERTOS_Init+0xb0>)
 8001788:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS_Task */
  osThreadDef(GPS_Task, Start_GPS_Task, osPriorityIdle, 0, 1024);
 800178a:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <MX_FREERTOS_Init+0xb4>)
 800178c:	f107 041c 	add.w	r4, r7, #28
 8001790:	461d      	mov	r5, r3
 8001792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001796:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800179a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPS_TaskHandle = osThreadCreate(osThread(GPS_Task), NULL);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f014 fa74 	bl	8015c92 <osThreadCreate>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <MX_FREERTOS_Init+0xb8>)
 80017ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of SatellitePredic */
  osThreadDef(SatellitePredic, Start_SatellitePrediction_Task, osPriorityIdle, 0, 1024);
 80017b0:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <MX_FREERTOS_Init+0xbc>)
 80017b2:	463c      	mov	r4, r7
 80017b4:	461d      	mov	r5, r3
 80017b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SatellitePredicHandle = osThreadCreate(osThread(SatellitePredic), NULL);
 80017c2:	463b      	mov	r3, r7
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f014 fa63 	bl	8015c92 <osThreadCreate>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <MX_FREERTOS_Init+0xc0>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80017d2:	bf00      	nop
 80017d4:	3770      	adds	r7, #112	@ 0x70
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bdb0      	pop	{r4, r5, r7, pc}
 80017da:	bf00      	nop
 80017dc:	080217e0 	.word	0x080217e0
 80017e0:	200004e8 	.word	0x200004e8
 80017e4:	08021808 	.word	0x08021808
 80017e8:	200004ec 	.word	0x200004ec
 80017ec:	08021830 	.word	0x08021830
 80017f0:	200004f0 	.word	0x200004f0
 80017f4:	0802185c 	.word	0x0802185c
 80017f8:	200004f4 	.word	0x200004f4

080017fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f014 fa90 	bl	8015d2a <osDelay>
 800180a:	e7fb      	b.n	8001804 <StartDefaultTask+0x8>

0800180c <Start_IHM_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IHM_Task */
__weak void Start_IHM_Task(void const * argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_IHM_Task */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001814:	2001      	movs	r0, #1
 8001816:	f014 fa88 	bl	8015d2a <osDelay>
 800181a:	e7fb      	b.n	8001814 <Start_IHM_Task+0x8>

0800181c <_gettimeofday>:
 *  Created on: Jun 23, 2025
 *      Author: ThinkPad
 */

int _gettimeofday()
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

    return 0;  // return non-zero for error
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	4a2a      	ldr	r2, [pc, #168]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184e:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	4a24      	ldr	r2, [pc, #144]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001866:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a1e      	ldr	r2, [pc, #120]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	4a18      	ldr	r2, [pc, #96]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_GPIO_Init+0xc4>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2120      	movs	r1, #32
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018aa:	f010 fc29 	bl	8012100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	480b      	ldr	r0, [pc, #44]	@ (80018f4 <MX_GPIO_Init+0xc8>)
 80018c6:	f010 fa71 	bl	8011dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018ca:	2320      	movs	r3, #32
 80018cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e4:	f010 fa62 	bl	8011dac <HAL_GPIO_Init>

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000800 	.word	0x48000800

080018f8 <GPS_Init>:
int hr=0,min=0,days=0,mon=0,yr=0;
int daychange = 0;
GPS_t GPS;

void GPS_Init()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	4903      	ldr	r1, [pc, #12]	@ (800190c <GPS_Init+0x14>)
 8001900:	4803      	ldr	r0, [pc, #12]	@ (8001910 <GPS_Init+0x18>)
 8001902:	f012 fe95 	bl	8014630 <HAL_UART_Receive_IT>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000798 	.word	0x20000798
 8001910:	20000d04 	.word	0x20000d04

08001914 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i=0;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
	calculated_check=0;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if(nmeastr[i] == '$')
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b24      	cmp	r3, #36	@ 0x24
 800192e:	d103      	bne.n	8001938 <GPS_validate+0x24>
		i++;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001936:	e00c      	b.n	8001952 <GPS_validate+0x3e>
		return 0;
 8001938:	2300      	movs	r3, #0
 800193a:	e047      	b.n	80019cc <GPS_validate+0xb8>
		calculated_check ^= nmeastr[i];// calculate the checksum
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4053      	eors	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
		i++;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <GPS_validate+0x5c>
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b2a      	cmp	r3, #42	@ 0x2a
 8001968:	d002      	beq.n	8001970 <GPS_validate+0x5c>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b4a      	cmp	r3, #74	@ 0x4a
 800196e:	dde5      	ble.n	800193c <GPS_validate+0x28>
	}

	if(i >= 75){
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b4a      	cmp	r3, #74	@ 0x4a
 8001974:	dd01      	ble.n	800197a <GPS_validate+0x66>
		return 0;// the string was too long so return an error
 8001976:	2300      	movs	r3, #0
 8001978:	e028      	b.n	80019cc <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*'){
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b2a      	cmp	r3, #42	@ 0x2a
 8001984:	d119      	bne.n	80019ba <GPS_validate+0xa6>
		check[0] = nmeastr[i+1];    //put hex chars in check string
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i+2];
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3302      	adds	r3, #2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;// no checksum separator found there for invalid

	sprintf(checkcalcstr,"%02X",calculated_check);
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	490a      	ldr	r1, [pc, #40]	@ (80019d4 <GPS_validate+0xc0>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f018 f852 	bl	8019a54 <siprintf>
	return((checkcalcstr[0] == check[0])
 80019b0:	7a3a      	ldrb	r2, [r7, #8]
 80019b2:	7b3b      	ldrb	r3, [r7, #12]
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d108      	bne.n	80019ca <GPS_validate+0xb6>
 80019b8:	e001      	b.n	80019be <GPS_validate+0xaa>
		return 0;// no checksum separator found there for invalid
 80019ba:	2300      	movs	r3, #0
 80019bc:	e006      	b.n	80019cc <GPS_validate+0xb8>
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80019be:	7a7a      	ldrb	r2, [r7, #9]
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d101      	bne.n	80019ca <GPS_validate+0xb6>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <GPS_validate+0xb8>
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	08021878 	.word	0x08021878

080019d8 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af08      	add	r7, sp, #32
 80019de:	6078      	str	r0, [r7, #4]
	if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80019e0:	2206      	movs	r2, #6
 80019e2:	4952      	ldr	r1, [pc, #328]	@ (8001b2c <GPS_parse+0x154>)
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f018 f8d0 	bl	8019b8a <strncmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d137      	bne.n	8001a60 <GPS_parse+0x88>
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80019f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b30 <GPS_parse+0x158>)
 80019f2:	9307      	str	r3, [sp, #28]
 80019f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b34 <GPS_parse+0x15c>)
 80019f6:	9306      	str	r3, [sp, #24]
 80019f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001b38 <GPS_parse+0x160>)
 80019fa:	9305      	str	r3, [sp, #20]
 80019fc:	4b4f      	ldr	r3, [pc, #316]	@ (8001b3c <GPS_parse+0x164>)
 80019fe:	9304      	str	r3, [sp, #16]
 8001a00:	4b4f      	ldr	r3, [pc, #316]	@ (8001b40 <GPS_parse+0x168>)
 8001a02:	9303      	str	r3, [sp, #12]
 8001a04:	4b4f      	ldr	r3, [pc, #316]	@ (8001b44 <GPS_parse+0x16c>)
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	4b4f      	ldr	r3, [pc, #316]	@ (8001b48 <GPS_parse+0x170>)
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b4c <GPS_parse+0x174>)
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4b4f      	ldr	r3, [pc, #316]	@ (8001b50 <GPS_parse+0x178>)
 8001a12:	4a50      	ldr	r2, [pc, #320]	@ (8001b54 <GPS_parse+0x17c>)
 8001a14:	4950      	ldr	r1, [pc, #320]	@ (8001b58 <GPS_parse+0x180>)
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f018 f83e 	bl	8019a98 <siscanf>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	dd73      	ble.n	8001b0a <GPS_parse+0x132>
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001a22:	4b4e      	ldr	r3, [pc, #312]	@ (8001b5c <GPS_parse+0x184>)
 8001a24:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a28:	4b4c      	ldr	r3, [pc, #304]	@ (8001b5c <GPS_parse+0x184>)
 8001a2a:	7e1b      	ldrb	r3, [r3, #24]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	f000 f8b9 	bl	8001ba8 <GPS_nmea_to_dec>
 8001a36:	eef0 7a40 	vmov.f32	s15, s0
 8001a3a:	4b48      	ldr	r3, [pc, #288]	@ (8001b5c <GPS_parse+0x184>)
 8001a3c:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001a40:	4b46      	ldr	r3, [pc, #280]	@ (8001b5c <GPS_parse+0x184>)
 8001a42:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a46:	4b45      	ldr	r3, [pc, #276]	@ (8001b5c <GPS_parse+0x184>)
 8001a48:	7e5b      	ldrb	r3, [r3, #25]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a50:	f000 f8aa 	bl	8001ba8 <GPS_nmea_to_dec>
 8001a54:	eef0 7a40 	vmov.f32	s15, s0
 8001a58:	4b40      	ldr	r3, [pc, #256]	@ (8001b5c <GPS_parse+0x184>)
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
			return;
 8001a5e:	e062      	b.n	8001b26 <GPS_parse+0x14e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001a60:	2206      	movs	r2, #6
 8001a62:	493f      	ldr	r1, [pc, #252]	@ (8001b60 <GPS_parse+0x188>)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f018 f890 	bl	8019b8a <strncmp>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d115      	bne.n	8001a9c <GPS_parse+0xc4>
		if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001a70:	4b3c      	ldr	r3, [pc, #240]	@ (8001b64 <GPS_parse+0x18c>)
 8001a72:	9305      	str	r3, [sp, #20]
 8001a74:	4b3c      	ldr	r3, [pc, #240]	@ (8001b68 <GPS_parse+0x190>)
 8001a76:	9304      	str	r3, [sp, #16]
 8001a78:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <GPS_parse+0x194>)
 8001a7a:	9303      	str	r3, [sp, #12]
 8001a7c:	4b31      	ldr	r3, [pc, #196]	@ (8001b44 <GPS_parse+0x16c>)
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <GPS_parse+0x170>)
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <GPS_parse+0x174>)
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <GPS_parse+0x178>)
 8001a8a:	4a32      	ldr	r2, [pc, #200]	@ (8001b54 <GPS_parse+0x17c>)
 8001a8c:	4938      	ldr	r1, [pc, #224]	@ (8001b70 <GPS_parse+0x198>)
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f018 f802 	bl	8019a98 <siscanf>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dd37      	ble.n	8001b0a <GPS_parse+0x132>
			return;
 8001a9a:	e044      	b.n	8001b26 <GPS_parse+0x14e>

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001a9c:	2206      	movs	r2, #6
 8001a9e:	4935      	ldr	r1, [pc, #212]	@ (8001b74 <GPS_parse+0x19c>)
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f018 f872 	bl	8019b8a <strncmp>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d111      	bne.n	8001ad0 <GPS_parse+0xf8>
		if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <GPS_parse+0x1a0>)
 8001aae:	9303      	str	r3, [sp, #12]
 8001ab0:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <GPS_parse+0x17c>)
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <GPS_parse+0x16c>)
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	4b23      	ldr	r3, [pc, #140]	@ (8001b48 <GPS_parse+0x170>)
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <GPS_parse+0x174>)
 8001abe:	4a24      	ldr	r2, [pc, #144]	@ (8001b50 <GPS_parse+0x178>)
 8001ac0:	492e      	ldr	r1, [pc, #184]	@ (8001b7c <GPS_parse+0x1a4>)
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f017 ffe8 	bl	8019a98 <siscanf>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	dd1d      	ble.n	8001b0a <GPS_parse+0x132>
			return;
 8001ace:	e02a      	b.n	8001b26 <GPS_parse+0x14e>
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001ad0:	2206      	movs	r2, #6
 8001ad2:	492b      	ldr	r1, [pc, #172]	@ (8001b80 <GPS_parse+0x1a8>)
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f018 f858 	bl	8019b8a <strncmp>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d114      	bne.n	8001b0a <GPS_parse+0x132>
		if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001ae0:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <GPS_parse+0x1ac>)
 8001ae2:	9305      	str	r3, [sp, #20]
 8001ae4:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <GPS_parse+0x1b0>)
 8001ae6:	9304      	str	r3, [sp, #16]
 8001ae8:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <GPS_parse+0x1b4>)
 8001aea:	9303      	str	r3, [sp, #12]
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <GPS_parse+0x194>)
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <GPS_parse+0x1b8>)
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <GPS_parse+0x1bc>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <GPS_parse+0x1c0>)
 8001afa:	4a28      	ldr	r2, [pc, #160]	@ (8001b9c <GPS_parse+0x1c4>)
 8001afc:	4928      	ldr	r1, [pc, #160]	@ (8001ba0 <GPS_parse+0x1c8>)
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f017 ffca 	bl	8019a98 <siscanf>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	dc0c      	bgt.n	8001b24 <GPS_parse+0x14c>
			return;
	}
	MyGps.alt_gps=GPS.msl_altitude;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <GPS_parse+0x184>)
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	4a25      	ldr	r2, [pc, #148]	@ (8001ba4 <GPS_parse+0x1cc>)
 8001b10:	6013      	str	r3, [r2, #0]
	MyGps.lat_gps=GPS.dec_latitude;
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <GPS_parse+0x184>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a23      	ldr	r2, [pc, #140]	@ (8001ba4 <GPS_parse+0x1cc>)
 8001b18:	6053      	str	r3, [r2, #4]
	MyGps.long_gps=GPS.dec_longitude;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <GPS_parse+0x184>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ba4 <GPS_parse+0x1cc>)
 8001b20:	6093      	str	r3, [r2, #8]
 8001b22:	e000      	b.n	8001b26 <GPS_parse+0x14e>
			return;
 8001b24:	bf00      	nop
}
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	08021880 	.word	0x08021880
 8001b30:	20000864 	.word	0x20000864
 8001b34:	20000860 	.word	0x20000860
 8001b38:	2000085c 	.word	0x2000085c
 8001b3c:	20000858 	.word	0x20000858
 8001b40:	20000854 	.word	0x20000854
 8001b44:	20000851 	.word	0x20000851
 8001b48:	20000844 	.word	0x20000844
 8001b4c:	20000850 	.word	0x20000850
 8001b50:	20000848 	.word	0x20000848
 8001b54:	2000084c 	.word	0x2000084c
 8001b58:	08021888 	.word	0x08021888
 8001b5c:	20000838 	.word	0x20000838
 8001b60:	080218b0 	.word	0x080218b0
 8001b64:	20000870 	.word	0x20000870
 8001b68:	2000086c 	.word	0x2000086c
 8001b6c:	20000868 	.word	0x20000868
 8001b70:	080218b8 	.word	0x080218b8
 8001b74:	080218d8 	.word	0x080218d8
 8001b78:	20000874 	.word	0x20000874
 8001b7c:	080218e0 	.word	0x080218e0
 8001b80:	080218fc 	.word	0x080218fc
 8001b84:	2000088c 	.word	0x2000088c
 8001b88:	20000888 	.word	0x20000888
 8001b8c:	20000885 	.word	0x20000885
 8001b90:	20000884 	.word	0x20000884
 8001b94:	20000880 	.word	0x20000880
 8001b98:	2000087c 	.word	0x2000087c
 8001b9c:	20000878 	.word	0x20000878
 8001ba0:	08021904 	.word	0x08021904
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	70fb      	strb	r3, [r7, #3]
	int degree = (int)(deg_coord/100);
 8001bb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bba:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001c3c <GPS_nmea_to_dec+0x94>
 8001bbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc6:	ee17 3a90 	vmov	r3, s15
 8001bca:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree*100;
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2264      	movs	r2, #100	@ 0x64
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8001be8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bec:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001c40 <GPS_nmea_to_dec+0x98>
 8001bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf4:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W') { // return negative
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	2b53      	cmp	r3, #83	@ 0x53
 8001c12:	d002      	beq.n	8001c1a <GPS_nmea_to_dec+0x72>
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	2b57      	cmp	r3, #87	@ 0x57
 8001c18:	d105      	bne.n	8001c26 <GPS_nmea_to_dec+0x7e>
		decimal *= -1;
 8001c1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1e:	eef1 7a67 	vneg.f32	s15, s15
 8001c22:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	ee07 3a90 	vmov	s15, r3
}
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	42c80000 	.word	0x42c80000
 8001c40:	42700000 	.word	0x42700000

08001c44 <GPS_Nmea_time>:
void GPS_Nmea_time(){
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
	uint32_t time_int = (uint32_t)GPS.utc_time;
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d40 <GPS_Nmea_time+0xfc>)
 8001c4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c54:	ee17 3a90 	vmov	r3, s15
 8001c58:	607b      	str	r3, [r7, #4]
	hr = time_int/10000 + MyGps.offset/100;   // get the hours from the 6 digit number
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a39      	ldr	r2, [pc, #228]	@ (8001d44 <GPS_Nmea_time+0x100>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0b5a      	lsrs	r2, r3, #13
 8001c64:	4b38      	ldr	r3, [pc, #224]	@ (8001d48 <GPS_Nmea_time+0x104>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	4938      	ldr	r1, [pc, #224]	@ (8001d4c <GPS_Nmea_time+0x108>)
 8001c6a:	fb81 0103 	smull	r0, r1, r1, r3
 8001c6e:	1149      	asrs	r1, r1, #5
 8001c70:	17db      	asrs	r3, r3, #31
 8001c72:	1acb      	subs	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b35      	ldr	r3, [pc, #212]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001c7a:	601a      	str	r2, [r3, #0]

	min = (time_int/100)%100 + MyGps.offset%100;  // get the minutes from the 6 digit number
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a33      	ldr	r2, [pc, #204]	@ (8001d4c <GPS_Nmea_time+0x108>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	095a      	lsrs	r2, r3, #5
 8001c86:	4b31      	ldr	r3, [pc, #196]	@ (8001d4c <GPS_Nmea_time+0x108>)
 8001c88:	fba3 1302 	umull	r1, r3, r3, r2
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	2164      	movs	r1, #100	@ 0x64
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	4a2c      	ldr	r2, [pc, #176]	@ (8001d48 <GPS_Nmea_time+0x104>)
 8001c98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c9a:	492c      	ldr	r1, [pc, #176]	@ (8001d4c <GPS_Nmea_time+0x108>)
 8001c9c:	fb81 0102 	smull	r0, r1, r1, r2
 8001ca0:	1148      	asrs	r0, r1, #5
 8001ca2:	17d1      	asrs	r1, r2, #31
 8001ca4:	1a41      	subs	r1, r0, r1
 8001ca6:	2064      	movs	r0, #100	@ 0x64
 8001ca8:	fb00 f101 	mul.w	r1, r0, r1
 8001cac:	1a51      	subs	r1, r2, r1
 8001cae:	460a      	mov	r2, r1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <GPS_Nmea_time+0x110>)
 8001cb6:	601a      	str	r2, [r3, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001cb8:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <GPS_Nmea_time+0x110>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b3b      	cmp	r3, #59	@ 0x3b
 8001cbe:	dd09      	ble.n	8001cd4 <GPS_Nmea_time+0x90>
	{
		min = min-60;
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <GPS_Nmea_time+0x110>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3b3c      	subs	r3, #60	@ 0x3c
 8001cc6:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <GPS_Nmea_time+0x110>)
 8001cc8:	6013      	str	r3, [r2, #0]
		hr++;
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001cd2:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da09      	bge.n	8001cf0 <GPS_Nmea_time+0xac>
	{
		hr=24+hr;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3318      	adds	r3, #24
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001ce4:	6013      	str	r3, [r2, #0]
		daychange--;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <GPS_Nmea_time+0x114>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	4a1a      	ldr	r2, [pc, #104]	@ (8001d58 <GPS_Nmea_time+0x114>)
 8001cee:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001cf0:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b17      	cmp	r3, #23
 8001cf6:	dd09      	ble.n	8001d0c <GPS_Nmea_time+0xc8>
	{
		hr=hr-24;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3b18      	subs	r3, #24
 8001cfe:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001d00:	6013      	str	r3, [r2, #0]
		daychange++;
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <GPS_Nmea_time+0x114>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a13      	ldr	r2, [pc, #76]	@ (8001d58 <GPS_Nmea_time+0x114>)
 8001d0a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	MyGps.hours= hr;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <GPS_Nmea_time+0x10c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <GPS_Nmea_time+0x104>)
 8001d12:	60d3      	str	r3, [r2, #12]
	MyGps.minutes= min;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <GPS_Nmea_time+0x110>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	@ (8001d48 <GPS_Nmea_time+0x104>)
 8001d1a:	6113      	str	r3, [r2, #16]
	MyGps.seconds = time_int%100;
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <GPS_Nmea_time+0x108>)
 8001d20:	fba3 1302 	umull	r1, r3, r3, r2
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	2164      	movs	r1, #100	@ 0x64
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <GPS_Nmea_time+0x104>)
 8001d32:	615a      	str	r2, [r3, #20]

}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20000838 	.word	0x20000838
 8001d44:	d1b71759 	.word	0xd1b71759
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	51eb851f 	.word	0x51eb851f
 8001d50:	20000820 	.word	0x20000820
 8001d54:	20000824 	.word	0x20000824
 8001d58:	20000834 	.word	0x20000834

08001d5c <GPS_Nmea_Date>:
void GPS_Nmea_Date(){
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	// Date in the format 280222
		days = GPS.date/10000;
 8001d60:	4b29      	ldr	r3, [pc, #164]	@ (8001e08 <GPS_Nmea_Date+0xac>)
 8001d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d64:	4a29      	ldr	r2, [pc, #164]	@ (8001e0c <GPS_Nmea_Date+0xb0>)
 8001d66:	fb82 1203 	smull	r1, r2, r2, r3
 8001d6a:	1312      	asrs	r2, r2, #12
 8001d6c:	17db      	asrs	r3, r3, #31
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4a27      	ldr	r2, [pc, #156]	@ (8001e10 <GPS_Nmea_Date+0xb4>)
 8001d72:	6013      	str	r3, [r2, #0]
		mon = (GPS.date/100)%100;
 8001d74:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <GPS_Nmea_Date+0xac>)
 8001d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d78:	4a26      	ldr	r2, [pc, #152]	@ (8001e14 <GPS_Nmea_Date+0xb8>)
 8001d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7e:	1152      	asrs	r2, r2, #5
 8001d80:	17db      	asrs	r3, r3, #31
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <GPS_Nmea_Date+0xb8>)
 8001d86:	fb83 1302 	smull	r1, r3, r3, r2
 8001d8a:	1159      	asrs	r1, r3, #5
 8001d8c:	17d3      	asrs	r3, r2, #31
 8001d8e:	1acb      	subs	r3, r1, r3
 8001d90:	2164      	movs	r1, #100	@ 0x64
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4a1f      	ldr	r2, [pc, #124]	@ (8001e18 <GPS_Nmea_Date+0xbc>)
 8001d9a:	6013      	str	r3, [r2, #0]
		yr = GPS.date%100;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <GPS_Nmea_Date+0xac>)
 8001d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001da0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <GPS_Nmea_Date+0xb8>)
 8001da2:	fb83 1302 	smull	r1, r3, r3, r2
 8001da6:	1159      	asrs	r1, r3, #5
 8001da8:	17d3      	asrs	r3, r2, #31
 8001daa:	1acb      	subs	r3, r1, r3
 8001dac:	2164      	movs	r1, #100	@ 0x64
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4a19      	ldr	r2, [pc, #100]	@ (8001e1c <GPS_Nmea_Date+0xc0>)
 8001db6:	6013      	str	r3, [r2, #0]

		days = days+daychange;
 8001db8:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <GPS_Nmea_Date+0xb4>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <GPS_Nmea_Date+0xc4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <GPS_Nmea_Date+0xb4>)
 8001dc4:	6013      	str	r3, [r2, #0]
		MyGps.day=days;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <GPS_Nmea_Date+0xb4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <GPS_Nmea_Date+0xc8>)
 8001dcc:	6193      	str	r3, [r2, #24]
		MyGps.month=mon;
 8001dce:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <GPS_Nmea_Date+0xbc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a14      	ldr	r2, [pc, #80]	@ (8001e24 <GPS_Nmea_Date+0xc8>)
 8001dd4:	61d3      	str	r3, [r2, #28]
		MyGps.year=yr;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <GPS_Nmea_Date+0xc0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a12      	ldr	r2, [pc, #72]	@ (8001e24 <GPS_Nmea_Date+0xc8>)
 8001ddc:	6213      	str	r3, [r2, #32]
		sDate.Date=days;
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <GPS_Nmea_Date+0xb4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <GPS_Nmea_Date+0xcc>)
 8001de6:	709a      	strb	r2, [r3, #2]
		sDate.Month=mon;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <GPS_Nmea_Date+0xbc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <GPS_Nmea_Date+0xcc>)
 8001df0:	705a      	strb	r2, [r3, #1]
		sDate.Year=yr;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <GPS_Nmea_Date+0xc0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <GPS_Nmea_Date+0xcc>)
 8001dfa:	70da      	strb	r2, [r3, #3]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000838 	.word	0x20000838
 8001e0c:	68db8bad 	.word	0x68db8bad
 8001e10:	20000828 	.word	0x20000828
 8001e14:	51eb851f 	.word	0x51eb851f
 8001e18:	2000082c 	.word	0x2000082c
 8001e1c:	20000830 	.word	0x20000830
 8001e20:	20000834 	.word	0x20000834
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000c88 	.word	0x20000c88

08001e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e30:	f00f fe1a 	bl	8011a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e34:	f000 f814 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e38:	f7ff fcf8 	bl	800182c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e3c:	f000 fc38 	bl	80026b0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001e40:	f000 f990 	bl	8002164 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001e44:	f000 fc04 	bl	8002650 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Reset_Flag=1;
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <main+0x30>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001e4e:	f7ff fc73 	bl	8001738 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e52:	f013 ff17 	bl	8015c84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e56:	bf00      	nop
 8001e58:	e7fd      	b.n	8001e56 <main+0x2a>
 8001e5a:	bf00      	nop
 8001e5c:	20000890 	.word	0x20000890

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b096      	sub	sp, #88	@ 0x58
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	2244      	movs	r2, #68	@ 0x44
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f017 fe83 	bl	8019b7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	463b      	mov	r3, r7
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e86:	f010 f961 	bl	801214c <HAL_PWREx_ControlVoltageScaling>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e90:	f000 f84c 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e94:	230a      	movs	r3, #10
 8001e96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f010 f996 	bl	80121f8 <HAL_RCC_OscConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001ed2:	f000 f82b 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed6:	230f      	movs	r3, #15
 8001ed8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eda:	2303      	movs	r3, #3
 8001edc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eea:	463b      	mov	r3, r7
 8001eec:	2104      	movs	r1, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f010 fd5e 	bl	80129b0 <HAL_RCC_ClockConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001efa:	f000 f817 	bl	8001f2c <Error_Handler>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3758      	adds	r7, #88	@ 0x58
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001f1a:	f00f fdc5 	bl	8011aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40001000 	.word	0x40001000

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <Error_Handler+0x8>

08001f38 <Start_GPS_Task>:
BaseType_t xHigherPriorityTaskWokenGps = pdFALSE;
uint8_t xGpsBytesSent;
uint8_t gps_message_buffer_flag;
uint8_t GPS_Valid=1;
void Start_GPS_Task(void const * argument)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	GpsMessageBufferHandle = xMessageBufferCreate(xGpsMessageBufferSizeBytes);
 8001f40:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f44:	2201      	movs	r2, #1
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f013 ffb6 	bl	8015eba <xStreamBufferGenericCreate>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <Start_GPS_Task+0x64>)
 8001f52:	6013      	str	r3, [r2, #0]
		if( GpsMessageBufferHandle != NULL )
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <Start_GPS_Task+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <Start_GPS_Task+0x30>
		{
		}
		else
		{
			HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 8001f5c:	2364      	movs	r3, #100	@ 0x64
 8001f5e:	2222      	movs	r2, #34	@ 0x22
 8001f60:	490f      	ldr	r1, [pc, #60]	@ (8001fa0 <Start_GPS_Task+0x68>)
 8001f62:	4810      	ldr	r0, [pc, #64]	@ (8001fa4 <Start_GPS_Task+0x6c>)
 8001f64:	f012 fada 	bl	801451c <HAL_UART_Transmit>
		}
		GPS_Init();
 8001f68:	f7ff fcc6 	bl	80018f8 <GPS_Init>
	for(;;)
	{
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <Start_GPS_Task+0x64>)
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f78:	490b      	ldr	r1, [pc, #44]	@ (8001fa8 <Start_GPS_Task+0x70>)
 8001f7a:	f014 f8e0 	bl	801613e <xStreamBufferReceive>
		Sentence_parse((char*)received_nmea);
 8001f7e:	480a      	ldr	r0, [pc, #40]	@ (8001fa8 <Start_GPS_Task+0x70>)
 8001f80:	f000 f87c 	bl	800207c <Sentence_parse>
		GPS_Nmea_time();
 8001f84:	f7ff fe5e 	bl	8001c44 <GPS_Nmea_time>
		GPS_Nmea_Date();
 8001f88:	f7ff fee8 	bl	8001d5c <GPS_Nmea_Date>
		RTC_SetFromGPS(&MyGps);
 8001f8c:	4807      	ldr	r0, [pc, #28]	@ (8001fac <Start_GPS_Task+0x74>)
 8001f8e:	f000 f88d 	bl	80020ac <RTC_SetFromGPS>
		/*if (GPS_Valid==0)
		{	HAL_UART_Transmit(&huart2,(const uint8_t*)"Invalid Sentence", strlen("Invalid Sentence"), 100);}*/
		osDelay(100);
 8001f92:	2064      	movs	r0, #100	@ 0x64
 8001f94:	f013 fec9 	bl	8015d2a <osDelay>
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8001f98:	bf00      	nop
 8001f9a:	e7e7      	b.n	8001f6c <Start_GPS_Task+0x34>
 8001f9c:	20000894 	.word	0x20000894
 8001fa0:	08021924 	.word	0x08021924
 8001fa4:	20000d8c 	.word	0x20000d8c
 8001fa8:	20000a8c 	.word	0x20000a8c
 8001fac:	20000000 	.word	0x20000000

08001fb0 <GPS_UART_CallBack>:
	}
}
void GPS_UART_CallBack() {
 8001fb0:	b598      	push	{r3, r4, r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001fb4:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <GPS_UART_CallBack+0xa4>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b0a      	cmp	r3, #10
 8001fba:	d010      	beq.n	8001fde <GPS_UART_CallBack+0x2e>
 8001fbc:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <GPS_UART_CallBack+0xa8>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001fc6:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <GPS_UART_CallBack+0xa8>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	b2d1      	uxtb	r1, r2
 8001fce:	4a22      	ldr	r2, [pc, #136]	@ (8002058 <GPS_UART_CallBack+0xa8>)
 8001fd0:	7011      	strb	r1, [r2, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <GPS_UART_CallBack+0xa4>)
 8001fd6:	7819      	ldrb	r1, [r3, #0]
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <GPS_UART_CallBack+0xac>)
 8001fda:	5499      	strb	r1, [r3, r2]
 8001fdc:	e032      	b.n	8002044 <GPS_UART_CallBack+0x94>
	} else {
		rx_buffer[rx_index] = '\0';
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <GPS_UART_CallBack+0xa8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <GPS_UART_CallBack+0xac>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	5499      	strb	r1, [r3, r2]
		memcpy(NMEA_ToParse,rx_buffer,rx_index);
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <GPS_UART_CallBack+0xa8>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	491a      	ldr	r1, [pc, #104]	@ (800205c <GPS_UART_CallBack+0xac>)
 8001ff2:	481b      	ldr	r0, [pc, #108]	@ (8002060 <GPS_UART_CallBack+0xb0>)
 8001ff4:	f018 fe3d 	bl	801ac72 <memcpy>
		xGpsBytesSent=xMessageBufferSendFromISR(GpsMessageBufferHandle,NMEA_ToParse,strlen((char*)NMEA_ToParse),&xHigherPriorityTaskWokenGps);
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <GPS_UART_CallBack+0xb4>)
 8001ffa:	681c      	ldr	r4, [r3, #0]
 8001ffc:	4818      	ldr	r0, [pc, #96]	@ (8002060 <GPS_UART_CallBack+0xb0>)
 8001ffe:	f7fe f947 	bl	8000290 <strlen>
 8002002:	4602      	mov	r2, r0
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <GPS_UART_CallBack+0xb8>)
 8002006:	4916      	ldr	r1, [pc, #88]	@ (8002060 <GPS_UART_CallBack+0xb0>)
 8002008:	4620      	mov	r0, r4
 800200a:	f013 ffe8 	bl	8015fde <xStreamBufferSendFromISR>
 800200e:	4603      	mov	r3, r0
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <GPS_UART_CallBack+0xbc>)
 8002014:	701a      	strb	r2, [r3, #0]
		if( xGpsBytesSent != strlen((char*)NMEA_ToParse))
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <GPS_UART_CallBack+0xbc>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461c      	mov	r4, r3
 800201c:	4810      	ldr	r0, [pc, #64]	@ (8002060 <GPS_UART_CallBack+0xb0>)
 800201e:	f7fe f937 	bl	8000290 <strlen>
 8002022:	4603      	mov	r3, r0
 8002024:	429c      	cmp	r4, r3
 8002026:	d005      	beq.n	8002034 <GPS_UART_CallBack+0x84>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"GPS Message sent different from buffer data\r\n",strlen("GPS Message sent different from buffer data\r\n"),100);
 8002028:	2364      	movs	r3, #100	@ 0x64
 800202a:	222d      	movs	r2, #45	@ 0x2d
 800202c:	4910      	ldr	r1, [pc, #64]	@ (8002070 <GPS_UART_CallBack+0xc0>)
 800202e:	4811      	ldr	r0, [pc, #68]	@ (8002074 <GPS_UART_CallBack+0xc4>)
 8002030:	f012 fa74 	bl	801451c <HAL_UART_Transmit>
		}
		memset(rx_buffer,0,sizeof(rx_buffer));
 8002034:	2280      	movs	r2, #128	@ 0x80
 8002036:	2100      	movs	r1, #0
 8002038:	4808      	ldr	r0, [pc, #32]	@ (800205c <GPS_UART_CallBack+0xac>)
 800203a:	f017 fd9e 	bl	8019b7a <memset>
		rx_index = 0;
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <GPS_UART_CallBack+0xa8>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8002044:	2201      	movs	r2, #1
 8002046:	4903      	ldr	r1, [pc, #12]	@ (8002054 <GPS_UART_CallBack+0xa4>)
 8002048:	480b      	ldr	r0, [pc, #44]	@ (8002078 <GPS_UART_CallBack+0xc8>)
 800204a:	f012 faf1 	bl	8014630 <HAL_UART_Receive_IT>
}
 800204e:	bf00      	nop
 8002050:	bd98      	pop	{r3, r4, r7, pc}
 8002052:	bf00      	nop
 8002054:	20000798 	.word	0x20000798
 8002058:	2000081c 	.word	0x2000081c
 800205c:	2000079c 	.word	0x2000079c
 8002060:	20000898 	.word	0x20000898
 8002064:	20000894 	.word	0x20000894
 8002068:	20000c80 	.word	0x20000c80
 800206c:	20000c84 	.word	0x20000c84
 8002070:	08021948 	.word	0x08021948
 8002074:	20000d8c 	.word	0x20000d8c
 8002078:	20000d04 	.word	0x20000d04

0800207c <Sentence_parse>:

void Sentence_parse(char* str){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	        if (GPS_validate(str)) {
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fc45 	bl	8001914 <GPS_validate>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <Sentence_parse+0x1c>
	            GPS_parse(str);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fca1 	bl	80019d8 <GPS_parse>
	        }
	        else GPS_Valid=0;
}
 8002096:	e002      	b.n	800209e <Sentence_parse+0x22>
	        else GPS_Valid=0;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <Sentence_parse+0x2c>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000028 	.word	0x20000028

080020ac <RTC_SetFromGPS>:
void RTC_SetFromGPS(GPS_Data *gps_rtc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]

    sTime.Hours = gps_rtc->hours;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = gps_rtc->minutes;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = gps_rtc->seconds;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]

    sDate.Year = gps_rtc->year;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	72fb      	strb	r3, [r7, #11]
    sDate.Month = gps_rtc->month;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	727b      	strb	r3, [r7, #9]
    sDate.Date = gps_rtc->day;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	72bb      	strb	r3, [r7, #10]
    sDate.WeekDay = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	723b      	strb	r3, [r7, #8]

    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	480b      	ldr	r0, [pc, #44]	@ (800213c <RTC_SetFromGPS+0x90>)
 800210e:	f011 fbe9 	bl	80138e4 <HAL_RTC_SetTime>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <RTC_SetFromGPS+0x70>
    {
        Error_Handler();
 8002118:	f7ff ff08 	bl	8001f2c <Error_Handler>
    }
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800211c:	f107 0308 	add.w	r3, r7, #8
 8002120:	2200      	movs	r2, #0
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	@ (800213c <RTC_SetFromGPS+0x90>)
 8002126:	f011 fc7a 	bl	8013a1e <HAL_RTC_SetDate>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <RTC_SetFromGPS+0x88>
    {
        Error_Handler();
 8002130:	f7ff fefc 	bl	8001f2c <Error_Handler>
    }
}
 8002134:	bf00      	nop
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000c8c 	.word	0x20000c8c

08002140 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 	if(huart->Instance==huart1.Instance)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <HAL_UART_RxCpltCallback+0x20>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d101      	bne.n	8002158 <HAL_UART_RxCpltCallback+0x18>
 	{
 		GPS_UART_CallBack();
 8002154:	f7ff ff2c 	bl	8001fb0 <GPS_UART_CallBack>
 	}
 }
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000d04 	.word	0x20000d04

08002164 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b092      	sub	sp, #72	@ 0x48
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800216a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800217a:	2300      	movs	r3, #0
 800217c:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	222c      	movs	r2, #44	@ 0x2c
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f017 fcf8 	bl	8019b7a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800218a:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <MX_RTC_Init+0x118>)
 800218c:	4a3c      	ldr	r2, [pc, #240]	@ (8002280 <MX_RTC_Init+0x11c>)
 800218e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002190:	4b3a      	ldr	r3, [pc, #232]	@ (800227c <MX_RTC_Init+0x118>)
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <MX_RTC_Init+0x118>)
 8002198:	227f      	movs	r2, #127	@ 0x7f
 800219a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800219c:	4b37      	ldr	r3, [pc, #220]	@ (800227c <MX_RTC_Init+0x118>)
 800219e:	22ff      	movs	r2, #255	@ 0xff
 80021a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021a2:	4b36      	ldr	r3, [pc, #216]	@ (800227c <MX_RTC_Init+0x118>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021a8:	4b34      	ldr	r3, [pc, #208]	@ (800227c <MX_RTC_Init+0x118>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021ae:	4b33      	ldr	r3, [pc, #204]	@ (800227c <MX_RTC_Init+0x118>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021b4:	4b31      	ldr	r3, [pc, #196]	@ (800227c <MX_RTC_Init+0x118>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021ba:	4830      	ldr	r0, [pc, #192]	@ (800227c <MX_RTC_Init+0x118>)
 80021bc:	f011 fb0a 	bl	80137d4 <HAL_RTC_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80021c6:	f7ff feb1 	bl	8001f2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 80021ca:	2310      	movs	r3, #16
 80021cc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 27;
 80021d0:	231b      	movs	r3, #27
 80021d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 30;
 80021d6:	231e      	movs	r3, #30
 80021d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021dc:	2300      	movs	r3, #0
 80021de:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80021e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021e8:	2200      	movs	r2, #0
 80021ea:	4619      	mov	r1, r3
 80021ec:	4823      	ldr	r0, [pc, #140]	@ (800227c <MX_RTC_Init+0x118>)
 80021ee:	f011 fb79 	bl	80138e4 <HAL_RTC_SetTime>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80021f8:	f7ff fe98 	bl	8001f2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80021fc:	2302      	movs	r3, #2
 80021fe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JUNE;
 8002202:	2306      	movs	r3, #6
 8002204:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 3;
 8002208:	2303      	movs	r3, #3
 800220a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 25;
 800220e:	2319      	movs	r3, #25
 8002210:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002214:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002218:	2200      	movs	r2, #0
 800221a:	4619      	mov	r1, r3
 800221c:	4817      	ldr	r0, [pc, #92]	@ (800227c <MX_RTC_Init+0x118>)
 800221e:	f011 fbfe 	bl	8013a1e <HAL_RTC_SetDate>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002228:	f7ff fe80 	bl	8001f2c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	4619      	mov	r1, r3
 8002262:	4806      	ldr	r0, [pc, #24]	@ (800227c <MX_RTC_Init+0x118>)
 8002264:	f011 fc62 	bl	8013b2c <HAL_RTC_SetAlarm>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800226e:	f7ff fe5d 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	3748      	adds	r7, #72	@ 0x48
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000c8c 	.word	0x20000c8c
 8002280:	40002800 	.word	0x40002800

08002284 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0a4      	sub	sp, #144	@ 0x90
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	2288      	movs	r2, #136	@ 0x88
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f017 fc70 	bl	8019b7a <memset>
  if(rtcHandle->Instance==RTC)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <HAL_RTC_MspInit+0x5c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d118      	bne.n	80022d6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	4618      	mov	r0, r3
 80022b8:	f010 fdd0 	bl	8012e5c <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80022c2:	f7ff fe33 	bl	8001f2c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <HAL_RTC_MspInit+0x60>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022cc:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <HAL_RTC_MspInit+0x60>)
 80022ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80022d6:	bf00      	nop
 80022d8:	3790      	adds	r7, #144	@ 0x90
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40002800 	.word	0x40002800
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_MspInit+0x4c>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <HAL_MspInit+0x4c>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_MspInit+0x4c>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_MspInit+0x4c>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <HAL_MspInit+0x4c>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002310:	6593      	str	r3, [r2, #88]	@ 0x58
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <HAL_MspInit+0x4c>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	210f      	movs	r1, #15
 8002322:	f06f 0001 	mvn.w	r0, #1
 8002326:	f00f fc97 	bl	8011c58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08e      	sub	sp, #56	@ 0x38
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002346:	4b34      	ldr	r3, [pc, #208]	@ (8002418 <HAL_InitTick+0xe0>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234a:	4a33      	ldr	r2, [pc, #204]	@ (8002418 <HAL_InitTick+0xe0>)
 800234c:	f043 0310 	orr.w	r3, r3, #16
 8002350:	6593      	str	r3, [r2, #88]	@ 0x58
 8002352:	4b31      	ldr	r3, [pc, #196]	@ (8002418 <HAL_InitTick+0xe0>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800235e:	f107 0210 	add.w	r2, r7, #16
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f010 fce5 	bl	8012d38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002378:	f010 fcb2 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 800237c:	6378      	str	r0, [r7, #52]	@ 0x34
 800237e:	e004      	b.n	800238a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002380:	f010 fcae 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 8002384:	4603      	mov	r3, r0
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800238a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238c:	4a23      	ldr	r2, [pc, #140]	@ (800241c <HAL_InitTick+0xe4>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0c9b      	lsrs	r3, r3, #18
 8002394:	3b01      	subs	r3, #1
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002398:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <HAL_InitTick+0xe8>)
 800239a:	4a22      	ldr	r2, [pc, #136]	@ (8002424 <HAL_InitTick+0xec>)
 800239c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <HAL_InitTick+0xe8>)
 80023a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002420 <HAL_InitTick+0xe8>)
 80023a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <HAL_InitTick+0xe8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <HAL_InitTick+0xe8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_InitTick+0xe8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023be:	4818      	ldr	r0, [pc, #96]	@ (8002420 <HAL_InitTick+0xe8>)
 80023c0:	f011 fd98 	bl	8013ef4 <HAL_TIM_Base_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11b      	bne.n	800240a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023d2:	4813      	ldr	r0, [pc, #76]	@ (8002420 <HAL_InitTick+0xe8>)
 80023d4:	f011 fdf0 	bl	8013fb8 <HAL_TIM_Base_Start_IT>
 80023d8:	4603      	mov	r3, r0
 80023da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d111      	bne.n	800240a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e6:	2036      	movs	r0, #54	@ 0x36
 80023e8:	f00f fc52 	bl	8011c90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b0f      	cmp	r3, #15
 80023f0:	d808      	bhi.n	8002404 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023f2:	2200      	movs	r2, #0
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	2036      	movs	r0, #54	@ 0x36
 80023f8:	f00f fc2e 	bl	8011c58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_InitTick+0xf0>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e002      	b.n	800240a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800240a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800240e:	4618      	mov	r0, r3
 8002410:	3738      	adds	r7, #56	@ 0x38
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	431bde83 	.word	0x431bde83
 8002420:	20000cb0 	.word	0x20000cb0
 8002424:	40001000 	.word	0x40001000
 8002428:	20000034 	.word	0x20000034

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <NMI_Handler+0x4>

08002434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <HardFault_Handler+0x4>

0800243c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <MemManage_Handler+0x4>

08002444 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <UsageFault_Handler+0x4>

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <USART1_IRQHandler+0x10>)
 800246a:	f012 f92d 	bl	80146c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000d04 	.word	0x20000d04

08002478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <USART2_IRQHandler+0x10>)
 800247e:	f012 f923 	bl	80146c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000d8c 	.word	0x20000d8c

0800248c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002490:	4802      	ldr	r0, [pc, #8]	@ (800249c <TIM6_DAC_IRQHandler+0x10>)
 8002492:	f011 fe01 	bl	8014098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000cb0 	.word	0x20000cb0

080024a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return 1;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_kill>:

int _kill(int pid, int sig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ba:	f018 fba3 	bl	801ac04 <__errno>
 80024be:	4603      	mov	r3, r0
 80024c0:	2216      	movs	r2, #22
 80024c2:	601a      	str	r2, [r3, #0]
  return -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_exit>:

void _exit (int status)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ffe7 	bl	80024b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024e2:	bf00      	nop
 80024e4:	e7fd      	b.n	80024e2 <_exit+0x12>

080024e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e00a      	b.n	800250e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024f8:	f3af 8000 	nop.w
 80024fc:	4601      	mov	r1, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	60ba      	str	r2, [r7, #8]
 8002504:	b2ca      	uxtb	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	dbf0      	blt.n	80024f8 <_read+0x12>
  }

  return len;
 8002516:	687b      	ldr	r3, [r7, #4]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e009      	b.n	8002546 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	60ba      	str	r2, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	dbf1      	blt.n	8002532 <_write+0x12>
  }
  return len;
 800254e:	687b      	ldr	r3, [r7, #4]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_close>:

int _close(int file)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002580:	605a      	str	r2, [r3, #4]
  return 0;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_isatty>:

int _isatty(int file)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002598:	2301      	movs	r3, #1
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c8:	4a14      	ldr	r2, [pc, #80]	@ (800261c <_sbrk+0x5c>)
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <_sbrk+0x60>)
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <_sbrk+0x64>)
 80025de:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <_sbrk+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d207      	bcs.n	8002600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f0:	f018 fb08 	bl	801ac04 <__errno>
 80025f4:	4603      	mov	r3, r0
 80025f6:	220c      	movs	r2, #12
 80025f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	e009      	b.n	8002614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002606:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <_sbrk+0x64>)
 8002610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20018000 	.word	0x20018000
 8002620:	00000400 	.word	0x00000400
 8002624:	20000d00 	.word	0x20000d00
 8002628:	20005f00 	.word	0x20005f00

0800262c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <SystemInit+0x20>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	4a05      	ldr	r2, [pc, #20]	@ (800264c <SystemInit+0x20>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002654:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 8002656:	4a15      	ldr	r2, [pc, #84]	@ (80026ac <MX_USART1_UART_Init+0x5c>)
 8002658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800265a:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 800265c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002662:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002668:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800266e:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 8002676:	2204      	movs	r2, #4
 8002678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267a:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002686:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002692:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <MX_USART1_UART_Init+0x58>)
 8002694:	f011 fef4 	bl	8014480 <HAL_UART_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800269e:	f7ff fc45 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000d04 	.word	0x20000d04
 80026ac:	40013800 	.word	0x40013800

080026b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026b4:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026b6:	4a15      	ldr	r2, [pc, #84]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80026ba:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026d6:	220c      	movs	r2, #12
 80026d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026f2:	4805      	ldr	r0, [pc, #20]	@ (8002708 <MX_USART2_UART_Init+0x58>)
 80026f4:	f011 fec4 	bl	8014480 <HAL_UART_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026fe:	f7ff fc15 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000d8c 	.word	0x20000d8c
 800270c:	40004400 	.word	0x40004400

08002710 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0ae      	sub	sp, #184	@ 0xb8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	2288      	movs	r2, #136	@ 0x88
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f017 fa22 	bl	8019b7a <memset>
  if(uartHandle->Instance==USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4b      	ldr	r2, [pc, #300]	@ (8002868 <HAL_UART_MspInit+0x158>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d145      	bne.n	80027cc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002740:	2301      	movs	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002744:	2300      	movs	r3, #0
 8002746:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4618      	mov	r0, r3
 800274e:	f010 fb85 	bl	8012e5c <HAL_RCCEx_PeriphCLKConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002758:	f7ff fbe8 	bl	8001f2c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800275c:	4b43      	ldr	r3, [pc, #268]	@ (800286c <HAL_UART_MspInit+0x15c>)
 800275e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002760:	4a42      	ldr	r2, [pc, #264]	@ (800286c <HAL_UART_MspInit+0x15c>)
 8002762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002766:	6613      	str	r3, [r2, #96]	@ 0x60
 8002768:	4b40      	ldr	r3, [pc, #256]	@ (800286c <HAL_UART_MspInit+0x15c>)
 800276a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002774:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_UART_MspInit+0x15c>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002778:	4a3c      	ldr	r2, [pc, #240]	@ (800286c <HAL_UART_MspInit+0x15c>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002780:	4b3a      	ldr	r3, [pc, #232]	@ (800286c <HAL_UART_MspInit+0x15c>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800278c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a6:	2307      	movs	r3, #7
 80027a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b6:	f00f faf9 	bl	8011dac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2105      	movs	r1, #5
 80027be:	2025      	movs	r0, #37	@ 0x25
 80027c0:	f00f fa4a 	bl	8011c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027c4:	2025      	movs	r0, #37	@ 0x25
 80027c6:	f00f fa63 	bl	8011c90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027ca:	e048      	b.n	800285e <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <HAL_UART_MspInit+0x160>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d143      	bne.n	800285e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027da:	2300      	movs	r3, #0
 80027dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4618      	mov	r0, r3
 80027e4:	f010 fb3a 	bl	8012e5c <HAL_RCCEx_PeriphCLKConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80027ee:	f7ff fb9d 	bl	8001f2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <HAL_UART_MspInit+0x15c>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_UART_MspInit+0x15c>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fe:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_UART_MspInit+0x15c>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_UART_MspInit+0x15c>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	4a17      	ldr	r2, [pc, #92]	@ (800286c <HAL_UART_MspInit+0x15c>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <HAL_UART_MspInit+0x15c>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002822:	230c      	movs	r3, #12
 8002824:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800283a:	2307      	movs	r3, #7
 800283c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002840:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002844:	4619      	mov	r1, r3
 8002846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800284a:	f00f faaf 	bl	8011dac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	2026      	movs	r0, #38	@ 0x26
 8002854:	f00f fa00 	bl	8011c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002858:	2026      	movs	r0, #38	@ 0x26
 800285a:	f00f fa19 	bl	8011c90 <HAL_NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	37b8      	adds	r7, #184	@ 0xb8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40013800 	.word	0x40013800
 800286c:	40021000 	.word	0x40021000
 8002870:	40004400 	.word	0x40004400

08002874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002878:	f7ff fed8 	bl	800262c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800287c:	480c      	ldr	r0, [pc, #48]	@ (80028b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800287e:	490d      	ldr	r1, [pc, #52]	@ (80028b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002880:	4a0d      	ldr	r2, [pc, #52]	@ (80028b8 <LoopForever+0xe>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002894:	4c0a      	ldr	r4, [pc, #40]	@ (80028c0 <LoopForever+0x16>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028a2:	f018 f9b5 	bl	801ac10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028a6:	f7ff fac1 	bl	8001e2c <main>

080028aa <LoopForever>:

LoopForever:
    b LoopForever
 80028aa:	e7fe      	b.n	80028aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80028b8:	08022258 	.word	0x08022258
  ldr r2, =_sbss
 80028bc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80028c0:	20005efc 	.word	0x20005efc

080028c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC1_2_IRQHandler>

080028c6 <mktime_utc>:
 *
 * \param timeinfo_utc Broken down time, assumed to be in UTC
 * \return Time in UTC
 **/
time_t mktime_utc(const struct tm* timeinfo_utc)
{
 80028c6:	b5b0      	push	{r4, r5, r7, lr}
 80028c8:	b0a6      	sub	sp, #152	@ 0x98
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	time_t curr_time = time(NULL);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f017 fdca 	bl	801a468 <time>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	int timezone_diff = 0; //deviation of the current timezone from UTC in seconds
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	//get UTC time, interpret resulting tm as a localtime
	struct tm timeinfo_gmt;
	gmtime_r(&curr_time, &timeinfo_gmt);
 80028e2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80028e6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f017 f999 	bl	8019c24 <gmtime_r>
	time_t time_gmt = mktime(&timeinfo_gmt);
 80028f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028f6:	4618      	mov	r0, r3
 80028f8:	f017 fbfe 	bl	801a0f8 <mktime>
 80028fc:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88

	//get localtime, interpret resulting tm as localtime
	struct tm timeinfo_local;
	localtime_r(&curr_time, &timeinfo_local);
 8002900:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002904:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f017 fa30 	bl	8019d70 <localtime_r>
	time_t time_local = mktime(&timeinfo_local);
 8002910:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002914:	4618      	mov	r0, r3
 8002916:	f017 fbef 	bl	801a0f8 <mktime>
 800291a:	e9c7 0120 	strd	r0, r1, [r7, #128]	@ 0x80

	//find the time difference between the two interpretations
	timezone_diff += difftime(time_local, time_gmt);
 800291e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002926:	f017 f955 	bl	8019bd4 <difftime>
 800292a:	ec55 4b10 	vmov	r4, r5, d0
 800292e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002932:	f7fd fe07 	bl	8000544 <__aeabi_i2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4620      	mov	r0, r4
 800293c:	4629      	mov	r1, r5
 800293e:	f7fd fcb5 	bl	80002ac <__adddf3>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f915 	bl	8000b78 <__aeabi_d2iz>
 800294e:	4603      	mov	r3, r0
 8002950:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	//hack for preventing mktime from assuming localtime: add timezone difference to the input struct.
	struct tm ret_timeinfo;
	ret_timeinfo.tm_sec = timeinfo_utc->tm_sec + timezone_diff;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
	ret_timeinfo.tm_min = timeinfo_utc->tm_min;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]
	ret_timeinfo.tm_hour = timeinfo_utc->tm_hour;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	617b      	str	r3, [r7, #20]
	ret_timeinfo.tm_mday = timeinfo_utc->tm_mday;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
	ret_timeinfo.tm_mon = timeinfo_utc->tm_mon;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	61fb      	str	r3, [r7, #28]
	ret_timeinfo.tm_year = timeinfo_utc->tm_year;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	623b      	str	r3, [r7, #32]
	ret_timeinfo.tm_isdst = timeinfo_utc->tm_isdst;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return mktime(&ret_timeinfo);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	4618      	mov	r0, r3
 800298a:	f017 fbb5 	bl	801a0f8 <mktime>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
}
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	3798      	adds	r7, #152	@ 0x98
 8002998:	46bd      	mov	sp, r7
 800299a:	bdb0      	pop	{r4, r5, r7, pc}

0800299c <get_julian_start_day>:
 * Helper function for getting the Julian day start date (1979-12-31 00:00 UTC) as time_t.
 *
 * \return Internally defined Julian start date (fixed)
 **/
time_t get_julian_start_day()
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	@ 0x28
 80029a0:	af00      	add	r7, sp, #0
	struct tm start_time;
	start_time.tm_sec = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
	start_time.tm_min = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
	start_time.tm_hour = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
	start_time.tm_mday = 31;
 80029ae:	231f      	movs	r3, #31
 80029b0:	613b      	str	r3, [r7, #16]
	start_time.tm_mon = 11;
 80029b2:	230b      	movs	r3, #11
 80029b4:	617b      	str	r3, [r7, #20]
	start_time.tm_year = 1979-1900;
 80029b6:	234f      	movs	r3, #79	@ 0x4f
 80029b8:	61bb      	str	r3, [r7, #24]
	start_time.tm_isdst = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
	return mktime_utc(&start_time);
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff80 	bl	80028c6 <mktime_utc>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
}
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	3728      	adds	r7, #40	@ 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	0000      	movs	r0, r0
	...

080029d8 <predict_to_julian>:

predict_julian_date_t predict_to_julian(time_t input_time)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	e9c7 0100 	strd	r0, r1, [r7]
	//get number of seconds since 1979-12-31 00:00:00 UTC, convert to days
	double seconds = difftime(input_time, get_julian_start_day());
 80029e2:	f7ff ffdb 	bl	800299c <get_julian_start_day>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ee:	f017 f8f1 	bl	8019bd4 <difftime>
 80029f2:	ed87 0b02 	vstr	d0, [r7, #8]
	return seconds/SECONDS_PER_DAY;
 80029f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8002a20 <predict_to_julian+0x48>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a00:	f7fd ff34 	bl	800086c <__aeabi_ddiv>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	ec43 2b17 	vmov	d7, r2, r3
}
 8002a0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a10:	eef0 0a67 	vmov.f32	s1, s15
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	f3af 8000 	nop.w
 8002a20:	00000000 	.word	0x00000000
 8002a24:	40f51800 	.word	0x40f51800

08002a28 <predict_from_julian>:

time_t predict_from_julian(predict_julian_date_t date)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b090      	sub	sp, #64	@ 0x40
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	ed87 0b00 	vstr	d0, [r7]
	double seconds_since = date*SECONDS_PER_DAY;
 8002a32:	a31d      	add	r3, pc, #116	@ (adr r3, 8002aa8 <predict_from_julian+0x80>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a3c:	f7fd fdec 	bl	8000618 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	time_t ret_time = get_julian_start_day();
 8002a48:	f7ff ffa8 	bl	800299c <get_julian_start_day>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	
	//add number of seconds since julian start day to the julian start day, get current time_t
	struct tm timeinfo;
	gmtime_r(&ret_time, &timeinfo); 
 8002a54:	f107 020c 	add.w	r2, r7, #12
 8002a58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f017 f8e0 	bl	8019c24 <gmtime_r>
	timeinfo.tm_sec += seconds_since;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fd6c 	bl	8000544 <__aeabi_i2d>
 8002a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a70:	f7fd fc1c 	bl	80002ac <__adddf3>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7fe f87c 	bl	8000b78 <__aeabi_d2iz>
 8002a80:	4603      	mov	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]
	ret_time = mktime_utc(&timeinfo);
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff1c 	bl	80028c6 <mktime_utc>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	return ret_time;
 8002a96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	3740      	adds	r7, #64	@ 0x40
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	40f51800 	.word	0x40f51800

08002ab0 <predict_create_observer>:
#include "sun.h"

void observer_calculate(const predict_observer_t *observer, double time, const double pos[3], const double vel[3], struct predict_observation *result);

predict_observer_t *predict_create_observer(const char *name, double lat, double lon, double alt)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	61f8      	str	r0, [r7, #28]
 8002ab8:	ed87 0b04 	vstr	d0, [r7, #16]
 8002abc:	ed87 1b02 	vstr	d1, [r7, #8]
 8002ac0:	ed87 2b00 	vstr	d2, [r7]
	// Allocate memory
	predict_observer_t *obs = (predict_observer_t*)malloc(sizeof(predict_observer_t));
 8002ac4:	2098      	movs	r0, #152	@ 0x98
 8002ac6:	f015 f945 	bl	8017d54 <malloc>
 8002aca:	4603      	mov	r3, r0
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
	if (obs == NULL) return NULL;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <predict_create_observer+0x28>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e019      	b.n	8002b0c <predict_create_observer+0x5c>

	strncpy(obs->name, name, 128);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	2280      	movs	r2, #128	@ 0x80
 8002adc:	69f9      	ldr	r1, [r7, #28]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f017 f865 	bl	8019bae <strncpy>
	obs->name[127] = '\0';
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	obs->latitude = lat;
 8002aec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002af2:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	obs->longitude = lon;
 8002af6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002afc:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	obs->altitude = alt;
 8002b00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b06:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	return obs;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3728      	adds	r7, #40	@ 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	0000      	movs	r0, r0
	...

08002b18 <predict_observe_orbit>:
 *
 * Calculated range, azimuth, elevation and relative velocity from the
 * given observer position.
 **/
void predict_observe_orbit(const predict_observer_t *observer, const struct predict_position *orbit, struct predict_observation *obs)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b09c      	sub	sp, #112	@ 0x70
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
	if (obs == NULL) return;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d071      	beq.n	8002c0e <predict_observe_orbit+0xf6>
	
	double julTime = orbit->time + JULIAN_TIME_DIFF;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b30:	a33d      	add	r3, pc, #244	@ (adr r3, 8002c28 <predict_observe_orbit+0x110>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f7fd fbb9 	bl	80002ac <__adddf3>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	observer_calculate(observer, julTime, orbit->position, orbit->velocity, obs);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f103 0110 	add.w	r1, r3, #16
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f86b 	bl	8002c30 <observer_calculate>

	// Calculate visibility status of the orbit: Orbit is visible if sun elevation is low enough and the orbit is above the horizon, but still in sunlight.
	obs->visible = false;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	struct predict_observation sun_obs;
	predict_observe_sun(observer, orbit->time, &sun_obs);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	ed93 7b00 	vldr	d7, [r3]
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b72:	eef0 0a67 	vmov.f32	s1, s15
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f00d fdb6 	bl	80106e8 <predict_observe_sun>
	if (!(orbit->eclipsed) && (sun_obs.elevation*180.0/M_PI < NAUTICAL_TWILIGHT_SUN_ELEVATION) && (obs->elevation*180.0/M_PI > 0)) {
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d13d      	bne.n	8002c00 <predict_observe_orbit+0xe8>
 8002b84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <predict_observe_orbit+0x108>)
 8002b8e:	f7fd fd43 	bl	8000618 <__aeabi_dmul>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	a31f      	add	r3, pc, #124	@ (adr r3, 8002c18 <predict_observe_orbit+0x100>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f7fd fe64 	bl	800086c <__aeabi_ddiv>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <predict_observe_orbit+0x10c>)
 8002bb2:	f7fd ffa3 	bl	8000afc <__aeabi_dcmplt>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d021      	beq.n	8002c00 <predict_observe_orbit+0xe8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <predict_observe_orbit+0x108>)
 8002bc8:	f7fd fd26 	bl	8000618 <__aeabi_dmul>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	a310      	add	r3, pc, #64	@ (adr r3, 8002c18 <predict_observe_orbit+0x100>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f7fd fe47 	bl	800086c <__aeabi_ddiv>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f7fd ffa3 	bl	8000b38 <__aeabi_dcmpgt>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <predict_observe_orbit+0xe8>
		obs->visible = true;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}
	obs->time = orbit->time;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	e9c1 2300 	strd	r2, r3, [r1]
 8002c0c:	e000      	b.n	8002c10 <predict_observe_orbit+0xf8>
	if (obs == NULL) return;
 8002c0e:	bf00      	nop
}
 8002c10:	3770      	adds	r7, #112	@ 0x70
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	54442d18 	.word	0x54442d18
 8002c1c:	400921fb 	.word	0x400921fb
 8002c20:	40668000 	.word	0x40668000
 8002c24:	c0280000 	.word	0xc0280000
 8002c28:	40000000 	.word	0x40000000
 8002c2c:	4142a5e7 	.word	0x4142a5e7

08002c30 <observer_calculate>:

void observer_calculate(const predict_observer_t *observer, double time, const double pos[3], const double vel[3], struct predict_observation *result)
{
 8002c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c34:	b0d6      	sub	sp, #344	@ 0x158
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 8002c3c:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8002c40:	6020      	str	r0, [r4, #0]
 8002c42:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002c46:	ed00 0b02 	vstr	d0, [r0, #-8]
 8002c4a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8002c4e:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8002c52:	6001      	str	r1, [r0, #0]
 8002c54:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8002c58:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8002c5c:	600a      	str	r2, [r1, #0]
 8002c5e:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002c62:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002c66:	6013      	str	r3, [r2, #0]
	double obs_vel[3];
	double range[3];
	double rgvel[3];
	
	geodetic_t geodetic;
	geodetic.lat = observer->latitude;
 8002c68:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002c6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002c76:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8002c7a:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8002c7e:	e9c1 2300 	strd	r2, r3, [r1]
	geodetic.lon = observer->longitude;
 8002c82:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002c86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002c90:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8002c94:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8002c98:	e9c1 2302 	strd	r2, r3, [r1, #8]
	geodetic.alt = observer->altitude / 1000.0;
 8002c9c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002ca0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	4bd0      	ldr	r3, [pc, #832]	@ (8002ff0 <observer_calculate+0x3c0>)
 8002cb0:	f7fd fddc 	bl	800086c <__aeabi_ddiv>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8002cbc:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8002cc0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	geodetic.theta = 0.0;
 8002cc4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002cc8:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Calculate_User_PosVel(time, &geodetic, obs_pos, obs_vel);
 8002cd8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002cdc:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8002ce0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ce4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002ce8:	4604      	mov	r4, r0
 8002cea:	4618      	mov	r0, r3
 8002cec:	ed14 0b02 	vldr	d0, [r4, #-8]
 8002cf0:	f00e f8ea 	bl	8010ec8 <Calculate_User_PosVel>

	vec3_sub(pos, obs_pos, range);
 8002cf4:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002cf8:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8002cfc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002d00:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	f00d fe7c 	bl	8010a02 <vec3_sub>
	vec3_sub(vel, obs_vel, rgvel);
 8002d0a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002d0e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002d12:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002d16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	f00d fe71 	bl	8010a02 <vec3_sub>
	
	double range_length = vec3_length(range);
 8002d20:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d24:	4618      	mov	r0, r3
 8002d26:	f00d fdae 	bl	8010886 <vec3_length>
 8002d2a:	ed87 0b52 	vstr	d0, [r7, #328]	@ 0x148
	double range_rate_length = vec3_dot(range, rgvel) / range_length;
 8002d2e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002d32:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f00d fded 	bl	8010918 <vec3_dot>
 8002d3e:	ec51 0b10 	vmov	r0, r1, d0
 8002d42:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8002d46:	f7fd fd91 	bl	800086c <__aeabi_ddiv>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

	double theta_dot = 2*M_PI*EARTH_ROTATIONS_PER_SIDERIAL_DAY/SECONDS_PER_DAY;
 8002d52:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002fe8 <observer_calculate+0x3b8>)
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	double sin_lat = sin(geodetic.lat);
 8002d5c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002d60:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d64:	ed93 7b00 	vldr	d7, [r3]
 8002d68:	eeb0 0a47 	vmov.f32	s0, s14
 8002d6c:	eef0 0a67 	vmov.f32	s1, s15
 8002d70:	f01b fc12 	bl	801e598 <sin>
 8002d74:	ed87 0b4c 	vstr	d0, [r7, #304]	@ 0x130
	double cos_lat = cos(geodetic.lat);
 8002d78:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002d7c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d80:	ed93 7b00 	vldr	d7, [r3]
 8002d84:	eeb0 0a47 	vmov.f32	s0, s14
 8002d88:	eef0 0a67 	vmov.f32	s1, s15
 8002d8c:	f01b fba8 	bl	801e4e0 <cos>
 8002d90:	ed87 0b4a 	vstr	d0, [r7, #296]	@ 0x128
	double sin_theta = sin(geodetic.theta);
 8002d94:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002d98:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d9c:	ed93 7b06 	vldr	d7, [r3, #24]
 8002da0:	eeb0 0a47 	vmov.f32	s0, s14
 8002da4:	eef0 0a67 	vmov.f32	s1, s15
 8002da8:	f01b fbf6 	bl	801e598 <sin>
 8002dac:	ed87 0b48 	vstr	d0, [r7, #288]	@ 0x120
	double cos_theta = cos(geodetic.theta);
 8002db0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002db4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002db8:	ed93 7b06 	vldr	d7, [r3, #24]
 8002dbc:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc0:	eef0 0a67 	vmov.f32	s1, s15
 8002dc4:	f01b fb8c 	bl	801e4e0 <cos>
 8002dc8:	ed87 0b46 	vstr	d0, [r7, #280]	@ 0x118
	
	double top_s = sin_lat*cos_theta*range[0] + sin_lat*sin_theta*range[1] - cos_lat*range[2];
 8002dcc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002dd0:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002dd4:	f7fd fc20 	bl	8000618 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002de4:	f7fd fc18 	bl	8000618 <__aeabi_dmul>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4614      	mov	r4, r2
 8002dee:	461d      	mov	r5, r3
 8002df0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002df4:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002df8:	f7fd fc0e 	bl	8000618 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e08:	f7fd fc06 	bl	8000618 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd fa4a 	bl	80002ac <__adddf3>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002e24:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002e28:	f7fd fbf6 	bl	8000618 <__aeabi_dmul>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4620      	mov	r0, r4
 8002e32:	4629      	mov	r1, r5
 8002e34:	f7fd fa38 	bl	80002a8 <__aeabi_dsub>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	double top_e = -sin_theta*range[0] + cos_theta*range[1];
 8002e40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002e4a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002e54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e58:	f7fd fbde 	bl	8000618 <__aeabi_dmul>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002e68:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002e6c:	f7fd fbd4 	bl	8000618 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4620      	mov	r0, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	f7fd fa18 	bl	80002ac <__adddf3>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	double top_z = cos_lat*cos_theta*range[0] + cos_lat*sin_theta*range[1] + sin_lat*range[2];
 8002e84:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002e88:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8002e8c:	f7fd fbc4 	bl	8000618 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002e9c:	f7fd fbbc 	bl	8000618 <__aeabi_dmul>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002eac:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8002eb0:	f7fd fbb2 	bl	8000618 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ec0:	f7fd fbaa 	bl	8000618 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f9ee 	bl	80002ac <__adddf3>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002edc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002ee0:	f7fd fb9a 	bl	8000618 <__aeabi_dmul>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4620      	mov	r0, r4
 8002eea:	4629      	mov	r1, r5
 8002eec:	f7fd f9de 	bl	80002ac <__adddf3>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100


	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8002ef8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f04:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002f08:	f7fd fb86 	bl	8000618 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f18:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002f1c:	f7fd fb7c 	bl	8000618 <__aeabi_dmul>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002f2c:	f7fd fb74 	bl	8000618 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4620      	mov	r0, r4
 8002f36:	4629      	mov	r1, r5
 8002f38:	f7fd f9b6 	bl	80002a8 <__aeabi_dsub>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002f48:	f7fd fb66 	bl	8000618 <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4690      	mov	r8, r2
 8002f52:	4699      	mov	r9, r3
						sin_lat*(sin_theta*rgvel[1] + cos_theta*range[1]*theta_dot) -
 8002f54:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f5c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f60:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002f64:	f7fd fb58 	bl	8000618 <__aeabi_dmul>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4614      	mov	r4, r2
 8002f6e:	461d      	mov	r5, r3
 8002f70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002f74:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002f78:	f7fd fb4e 	bl	8000618 <__aeabi_dmul>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002f88:	f7fd fb46 	bl	8000618 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4620      	mov	r0, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	f7fd f98a 	bl	80002ac <__adddf3>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002fa4:	f7fd fb38 	bl	8000618 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8002fac:	4640      	mov	r0, r8
 8002fae:	4649      	mov	r1, r9
 8002fb0:	f7fd f97c 	bl	80002ac <__adddf3>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4614      	mov	r4, r2
 8002fba:	461d      	mov	r5, r3
						cos_lat*rgvel[2];
 8002fbc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fc4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002fc8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002fcc:	f7fd fb24 	bl	8000618 <__aeabi_dmul>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	f7fd f966 	bl	80002a8 <__aeabi_dsub>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	e008      	b.n	8002ff4 <observer_calculate+0x3c4>
 8002fe2:	bf00      	nop
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	f6f4de84 	.word	0xf6f4de84
 8002fec:	3f131da7 	.word	0x3f131da7
 8002ff0:	408f4000 	.word	0x408f4000
 8002ff4:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
	double top_e_dot = - (sin_theta*rgvel[0] + cos_theta*range[0]*theta_dot) + 
						(cos_theta*rgvel[1] - sin_theta*range[1]*theta_dot);
 8002ff8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003000:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003004:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003008:	f7fd fb06 	bl	8000618 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4614      	mov	r4, r2
 8003012:	461d      	mov	r5, r3
 8003014:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003018:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800301c:	f7fd fafc 	bl	8000618 <__aeabi_dmul>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800302c:	f7fd faf4 	bl	8000618 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4620      	mov	r0, r4
 8003036:	4629      	mov	r1, r5
 8003038:	f7fd f936 	bl	80002a8 <__aeabi_dsub>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4690      	mov	r8, r2
 8003042:	4699      	mov	r9, r3
	double top_e_dot = - (sin_theta*rgvel[0] + cos_theta*range[0]*theta_dot) + 
 8003044:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800304c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003050:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003054:	f7fd fae0 	bl	8000618 <__aeabi_dmul>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4614      	mov	r4, r2
 800305e:	461d      	mov	r5, r3
 8003060:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003064:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003068:	f7fd fad6 	bl	8000618 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003078:	f7fd face 	bl	8000618 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f7fd f912 	bl	80002ac <__adddf3>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4640      	mov	r0, r8
 800308e:	4649      	mov	r1, r9
 8003090:	f7fd f90a 	bl	80002a8 <__aeabi_dsub>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 800309c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80030a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80030ac:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80030b0:	f7fd fab2 	bl	8000618 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fd f8f6 	bl	80002ac <__adddf3>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80030cc:	f7fd faa4 	bl	8000618 <__aeabi_dmul>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4690      	mov	r8, r2
 80030d6:	4699      	mov	r9, r3
								sin_theta*(rgvel[1] - range[0]*theta_dot) ) +
 80030d8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80030dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030e0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80030e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80030e8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80030ec:	f7fd fa94 	bl	8000618 <__aeabi_dmul>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4620      	mov	r0, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	f7fd f8d6 	bl	80002a8 <__aeabi_dsub>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003108:	f7fd fa86 	bl	8000618 <__aeabi_dmul>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 8003110:	4640      	mov	r0, r8
 8003112:	4649      	mov	r1, r9
 8003114:	f7fd f8ca 	bl	80002ac <__adddf3>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003124:	f7fd fa78 	bl	8000618 <__aeabi_dmul>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4614      	mov	r4, r2
 800312e:	461d      	mov	r5, r3
								sin_lat*rgvel[2];
 8003130:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003138:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800313c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003140:	f7fd fa6a 	bl	8000618 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd f8ae 	bl	80002ac <__adddf3>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	
	// Azimut
	double y = -top_e / top_s;
 8003158:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003162:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800316c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003170:	f7fd fb7c 	bl	800086c <__aeabi_ddiv>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	double az = atan(-top_e / top_s);
 800317c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003186:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003194:	f7fd fb6a 	bl	800086c <__aeabi_ddiv>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	ec43 2b17 	vmov	d7, r2, r3
 80031a0:	eeb0 0a47 	vmov.f32	s0, s14
 80031a4:	eef0 0a67 	vmov.f32	s1, s15
 80031a8:	f01b f802 	bl	801e1b0 <atan>
 80031ac:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150

	if (top_s > 0.0) az = az + M_PI;
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80031bc:	f7fd fcbc 	bl	8000b38 <__aeabi_dcmpgt>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <observer_calculate+0x5ac>
 80031c6:	a38d      	add	r3, pc, #564	@ (adr r3, 80033fc <observer_calculate+0x7cc>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80031d0:	f7fd f86c 	bl	80002ac <__adddf3>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	if (az < 0.0) az = az + 2*M_PI;
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80031e8:	f7fd fc88 	bl	8000afc <__aeabi_dcmplt>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <observer_calculate+0x5d8>
 80031f2:	a384      	add	r3, pc, #528	@ (adr r3, 8003404 <observer_calculate+0x7d4>)
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80031fc:	f7fd f856 	bl	80002ac <__adddf3>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150

	// Azimut rate
	double y_dot = - (top_e_dot*top_s - top_s_dot*top_e) / (top_s*top_s);
 8003208:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800320c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8003210:	f7fd fa02 	bl	8000618 <__aeabi_dmul>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4614      	mov	r4, r2
 800321a:	461d      	mov	r5, r3
 800321c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8003220:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003224:	f7fd f9f8 	bl	8000618 <__aeabi_dmul>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f7fd f83a 	bl	80002a8 <__aeabi_dsub>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4692      	mov	sl, r2
 800323a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800323e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003242:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003246:	f7fd f9e7 	bl	8000618 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4650      	mov	r0, sl
 8003250:	4659      	mov	r1, fp
 8003252:	f7fd fb0b 	bl	800086c <__aeabi_ddiv>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	double az_dot = y_dot / (1 + y*y);
 800325e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8003262:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003266:	f7fd f9d7 	bl	8000618 <__aeabi_dmul>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	4b60      	ldr	r3, [pc, #384]	@ (80033f8 <observer_calculate+0x7c8>)
 8003278:	f7fd f818 	bl	80002ac <__adddf3>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8003284:	f7fd faf2 	bl	800086c <__aeabi_ddiv>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

	// Elevation
	double x = top_z / range_length;
 8003290:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8003294:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8003298:	f7fd fae8 	bl	800086c <__aeabi_ddiv>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	double el = asin_(x);
 80032a4:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 80032a8:	f00e fb9e 	bl	80119e8 <asin_>
 80032ac:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0

	// Elevation rate
	double x_dot = (top_z_dot*range_length - range_rate_length*top_z) / (range_length * range_length);
 80032b0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80032b4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80032b8:	f7fd f9ae 	bl	8000618 <__aeabi_dmul>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 80032c8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80032cc:	f7fd f9a4 	bl	8000618 <__aeabi_dmul>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4620      	mov	r0, r4
 80032d6:	4629      	mov	r1, r5
 80032d8:	f7fc ffe6 	bl	80002a8 <__aeabi_dsub>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4614      	mov	r4, r2
 80032e2:	461d      	mov	r5, r3
 80032e4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80032e8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80032ec:	f7fd f994 	bl	8000618 <__aeabi_dmul>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4620      	mov	r0, r4
 80032f6:	4629      	mov	r1, r5
 80032f8:	f7fd fab8 	bl	800086c <__aeabi_ddiv>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	double el_dot = x_dot / sqrt( 1 - x*x );
 8003304:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003308:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800330c:	f7fd f984 	bl	8000618 <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	f04f 0000 	mov.w	r0, #0
 8003318:	4937      	ldr	r1, [pc, #220]	@ (80033f8 <observer_calculate+0x7c8>)
 800331a:	f7fc ffc5 	bl	80002a8 <__aeabi_dsub>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	ec43 2b17 	vmov	d7, r2, r3
 8003326:	eeb0 0a47 	vmov.f32	s0, s14
 800332a:	eef0 0a67 	vmov.f32	s1, s15
 800332e:	f01a ff11 	bl	801e154 <sqrt>
 8003332:	ec53 2b10 	vmov	r2, r3, d0
 8003336:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800333a:	f7fd fa97 	bl	800086c <__aeabi_ddiv>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	
	result->azimuth = az;
 8003346:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800334a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8003354:	e9c1 2302 	strd	r2, r3, [r1, #8]
	result->azimuth_rate = az_dot;
 8003358:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800335c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003366:	e9c1 2304 	strd	r2, r3, [r1, #16]
	result->elevation = el;
 800336a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800336e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003378:	e9c1 2306 	strd	r2, r3, [r1, #24]
	result->elevation_rate = el_dot;
 800337c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003380:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800338a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	result->range = range_length;
 800338e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8003392:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800339c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	result->range_rate = range_rate_length; 
 80033a0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80033a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80033ae:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	result->range_x = range[0];
 80033b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80033b6:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80033ba:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80033be:	6809      	ldr	r1, [r1, #0]
 80033c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	result->range_y = range[1];
 80033c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80033c8:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80033cc:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80033d0:	6809      	ldr	r1, [r1, #0]
 80033d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	result->range_z = range[2];
 80033d6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80033da:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 80033de:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80033e2:	6809      	ldr	r1, [r1, #0]
 80033e4:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

}
 80033e8:	bf00      	nop
 80033ea:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 80033ee:	46bd      	mov	sp, r7
 80033f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f4:	f3af 8000 	nop.w
 80033f8:	3ff00000 	.word	0x3ff00000
 80033fc:	54442d18 	.word	0x54442d18
 8003400:	400921fb 	.word	0x400921fb
 8003404:	54442d18 	.word	0x54442d18
 8003408:	401921fb 	.word	0x401921fb
 800340c:	00000000 	.word	0x00000000

08003410 <predict_next_aos>:

struct predict_observation predict_next_aos(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double start_utc)
{
 8003410:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003414:	b0dc      	sub	sp, #368	@ 0x170
 8003416:	af00      	add	r7, sp, #0
 8003418:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800341c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003420:	6018      	str	r0, [r3, #0]
 8003422:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003426:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800342a:	6019      	str	r1, [r3, #0]
 800342c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003430:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	463b      	mov	r3, r7
 8003438:	ed83 0b00 	vstr	d0, [r3]
	double curr_time = start_utc;
 800343c:	463b      	mov	r3, r7
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	struct predict_observation obs;
	double time_step = 0;
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

	struct predict_position orbit;
	predict_orbit(orbital_elements, &orbit, curr_time);
 8003452:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003456:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800345a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800345e:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8003462:	4611      	mov	r1, r2
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	f001 fb27 	bl	8004ab8 <predict_orbit>
	predict_observe_orbit(observer, &orbit, &obs);
 800346a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800346e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8003472:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003476:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	f7ff fb4c 	bl	8002b18 <predict_observe_orbit>

	//check whether AOS can happen after specified start time
	if (predict_aos_happens(orbital_elements, observer->latitude) && !predict_is_geosynchronous(orbital_elements) && !orbit.decayed) {
 8003480:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003484:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 800348e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003492:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003496:	eeb0 0a47 	vmov.f32	s0, s14
 800349a:	eef0 0a67 	vmov.f32	s1, s15
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	f001 fa82 	bl	80049a8 <predict_aos_happens>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8164 	beq.w	8003774 <predict_next_aos+0x364>
 80034ac:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80034b0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	f001 f9b7 	bl	8004828 <predict_is_geosynchronous>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8156 	beq.w	8003774 <predict_next_aos+0x364>
 80034c8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80034cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034d0:	7a1b      	ldrb	r3, [r3, #8]
 80034d2:	f083 0301 	eor.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 814b 	beq.w	8003774 <predict_next_aos+0x364>
		//Bisection method, Brent's algorithm? Given a coherent root finding algorithm,
		//can rather have one function for iterating the orbit and then let get_next_aos/los
		//specify bounding intervals for the root finding.

		//skip the rest of the pass if the satellite is currently in range, since we want the _next_ AOS.
		if (obs.elevation > 0.0) {
 80034de:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	f7fd fb25 	bl	8000b38 <__aeabi_dcmpgt>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03b      	beq.n	800356c <predict_next_aos+0x15c>
			struct predict_observation los = predict_next_los(observer, orbital_elements, curr_time);
 80034f4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80034f8:	f5a3 70ac 	sub.w	r0, r3, #344	@ 0x158
 80034fc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003500:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8003504:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003508:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800350c:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	f000 fa30 	bl	8003978 <predict_next_los>
			curr_time = los.time;
 8003518:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800351c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			curr_time += 1.0/(MINUTES_PER_DAY*1.0)*20; //skip 20 minutes. LOS might still be within the elevation threshold. (rough quickfix from predict)
 8003528:	a3ab      	add	r3, pc, #684	@ (adr r3, 80037d8 <predict_next_aos+0x3c8>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8003532:	f7fc febb 	bl	80002ac <__adddf3>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 800353e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003542:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003546:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800354a:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 800354e:	4611      	mov	r1, r2
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	f001 fab1 	bl	8004ab8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8003556:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800355a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800355e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003562:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	f7ff fad6 	bl	8002b18 <predict_observe_orbit>
		}

		//iteration until the orbit is roughly in range again, before the satellite pass
		while ((obs.elevation*180.0/M_PI < -1.0) || (obs.elevation_rate < 0)) {
 800356c:	e065      	b.n	800363a <predict_next_aos+0x22a>
			time_step = 0.00035*(obs.elevation*180.0/M_PI*((orbit.altitude/8400.0)+0.46)-2.0);
 800356e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	4b96      	ldr	r3, [pc, #600]	@ (80037d0 <predict_next_aos+0x3c0>)
 8003578:	f7fd f84e 	bl	8000618 <__aeabi_dmul>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	a386      	add	r3, pc, #536	@ (adr r3, 80037a0 <predict_next_aos+0x390>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fd f96f 	bl	800086c <__aeabi_ddiv>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800359a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800359e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80035a2:	a381      	add	r3, pc, #516	@ (adr r3, 80037a8 <predict_next_aos+0x398>)
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f7fd f960 	bl	800086c <__aeabi_ddiv>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	a37e      	add	r3, pc, #504	@ (adr r3, 80037b0 <predict_next_aos+0x3a0>)
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f7fc fe77 	bl	80002ac <__adddf3>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4640      	mov	r0, r8
 80035c4:	4649      	mov	r1, r9
 80035c6:	f7fd f827 	bl	8000618 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035da:	f7fc fe65 	bl	80002a8 <__aeabi_dsub>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	a374      	add	r3, pc, #464	@ (adr r3, 80037b8 <predict_next_aos+0x3a8>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f7fd f814 	bl	8000618 <__aeabi_dmul>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time -= time_step;
 80035f8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80035fc:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8003600:	f7fc fe52 	bl	80002a8 <__aeabi_dsub>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 800360c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003610:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003614:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003618:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 800361c:	4611      	mov	r1, r2
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	f001 fa4a 	bl	8004ab8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8003624:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8003628:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800362c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003630:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	f7ff fa6f 	bl	8002b18 <predict_observe_orbit>
		while ((obs.elevation*180.0/M_PI < -1.0) || (obs.elevation_rate < 0)) {
 800363a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	4b63      	ldr	r3, [pc, #396]	@ (80037d0 <predict_next_aos+0x3c0>)
 8003644:	f7fc ffe8 	bl	8000618 <__aeabi_dmul>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	a353      	add	r3, pc, #332	@ (adr r3, 80037a0 <predict_next_aos+0x390>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f7fd f909 	bl	800086c <__aeabi_ddiv>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	4b5b      	ldr	r3, [pc, #364]	@ (80037d4 <predict_next_aos+0x3c4>)
 8003668:	f7fd fa48 	bl	8000afc <__aeabi_dcmplt>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	f47f af7d 	bne.w	800356e <predict_next_aos+0x15e>
 8003674:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	f7fd fa3c 	bl	8000afc <__aeabi_dcmplt>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	f47f af71 	bne.w	800356e <predict_next_aos+0x15e>
		}

		//fine tune the results until the elevation is within a low enough threshold
		while (fabs(obs.elevation*180/M_PI) > AOSLOS_HORIZON_THRESHOLD) {
 800368c:	e053      	b.n	8003736 <predict_next_aos+0x326>
			time_step = obs.elevation*180.0/M_PI*sqrt(orbit.altitude)/530000.0;
 800368e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	4b4e      	ldr	r3, [pc, #312]	@ (80037d0 <predict_next_aos+0x3c0>)
 8003698:	f7fc ffbe 	bl	8000618 <__aeabi_dmul>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	a33e      	add	r3, pc, #248	@ (adr r3, 80037a0 <predict_next_aos+0x390>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f7fd f8df 	bl	800086c <__aeabi_ddiv>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4690      	mov	r8, r2
 80036b4:	4699      	mov	r9, r3
 80036b6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80036ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036be:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 80036c2:	eeb0 0a47 	vmov.f32	s0, s14
 80036c6:	eef0 0a67 	vmov.f32	s1, s15
 80036ca:	f01a fd43 	bl	801e154 <sqrt>
 80036ce:	ec53 2b10 	vmov	r2, r3, d0
 80036d2:	4640      	mov	r0, r8
 80036d4:	4649      	mov	r1, r9
 80036d6:	f7fc ff9f 	bl	8000618 <__aeabi_dmul>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	a337      	add	r3, pc, #220	@ (adr r3, 80037c0 <predict_next_aos+0x3b0>)
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f7fd f8c0 	bl	800086c <__aeabi_ddiv>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time -= time_step;
 80036f4:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80036f8:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 80036fc:	f7fc fdd4 	bl	80002a8 <__aeabi_dsub>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8003708:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800370c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003710:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003714:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8003718:	4611      	mov	r1, r2
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	f001 f9cc 	bl	8004ab8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8003720:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8003724:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8003728:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800372c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	f7ff f9f1 	bl	8002b18 <predict_observe_orbit>
		while (fabs(obs.elevation*180/M_PI) > AOSLOS_HORIZON_THRESHOLD) {
 8003736:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <predict_next_aos+0x3c0>)
 8003740:	f7fc ff6a 	bl	8000618 <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	a314      	add	r3, pc, #80	@ (adr r3, 80037a0 <predict_next_aos+0x390>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f7fd f88b 	bl	800086c <__aeabi_ddiv>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4614      	mov	r4, r2
 800375c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003760:	a319      	add	r3, pc, #100	@ (adr r3, 80037c8 <predict_next_aos+0x3b8>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	4620      	mov	r0, r4
 8003768:	4629      	mov	r1, r5
 800376a:	f7fd f9e5 	bl	8000b38 <__aeabi_dcmpgt>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d18c      	bne.n	800368e <predict_next_aos+0x27e>
		}
	}
	return obs;
 8003774:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003778:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003784:	2258      	movs	r2, #88	@ 0x58
 8003786:	4619      	mov	r1, r3
 8003788:	f017 fa73 	bl	801ac72 <memcpy>
}
 800378c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003790:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 800379a:	46bd      	mov	sp, r7
 800379c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037a0:	54442d18 	.word	0x54442d18
 80037a4:	400921fb 	.word	0x400921fb
 80037a8:	00000000 	.word	0x00000000
 80037ac:	40c06800 	.word	0x40c06800
 80037b0:	d70a3d71 	.word	0xd70a3d71
 80037b4:	3fdd70a3 	.word	0x3fdd70a3
 80037b8:	8db8bac7 	.word	0x8db8bac7
 80037bc:	3f36f006 	.word	0x3f36f006
 80037c0:	00000000 	.word	0x00000000
 80037c4:	41202ca0 	.word	0x41202ca0
 80037c8:	33333333 	.word	0x33333333
 80037cc:	3fd33333 	.word	0x3fd33333
 80037d0:	40668000 	.word	0x40668000
 80037d4:	bff00000 	.word	0xbff00000
 80037d8:	1c71c71d 	.word	0x1c71c71d
 80037dc:	3f8c71c7 	.word	0x3f8c71c7

080037e0 <step_pass>:
 * \param curr_time Time from which to start stepping
 * \param direction Either POSITIVE_DIRECTION (step from current time to pass end) or NEGATIVE_DIRECTION (step from current time to start of pass). In case of the former, the pass will be stepped until either elevation is negative or the derivative of the elevation is negative
 * \return Time for when we have stepped out of the pass
 * \copyright GPLv2+
 **/
double step_pass(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double curr_time, enum step_pass_direction direction) {
 80037e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037e4:	b0c5      	sub	sp, #276	@ 0x114
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6178      	str	r0, [r7, #20]
 80037ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037f2:	6019      	str	r1, [r3, #0]
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	ed03 0b02 	vstr	d0, [r3, #-8]
 80037fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003800:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003804:	701a      	strb	r2, [r3, #0]
	struct predict_position orbit;
	struct predict_observation obs;
	do {
		predict_orbit(orbital_elements, &orbit, curr_time);
 8003806:	f107 0310 	add.w	r3, r7, #16
 800380a:	4619      	mov	r1, r3
 800380c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003810:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003814:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003818:	ed11 0b02 	vldr	d0, [r1, #-8]
 800381c:	4611      	mov	r1, r2
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	f001 f94a 	bl	8004ab8 <predict_orbit>
		predict_observe_orbit(observer, &orbit, &obs);
 8003824:	f107 0218 	add.w	r2, r7, #24
 8003828:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800382c:	4619      	mov	r1, r3
 800382e:	6978      	ldr	r0, [r7, #20]
 8003830:	f7ff f972 	bl	8002b18 <predict_observe_orbit>

		//weird time stepping from Predict, but which magically works
		double time_step = cos(obs.elevation - 1.0)*sqrt(orbit.altitude)/25000.0;
 8003834:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	4b4c      	ldr	r3, [pc, #304]	@ (8003970 <step_pass+0x190>)
 800383e:	f7fc fd33 	bl	80002a8 <__aeabi_dsub>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	ec43 2b17 	vmov	d7, r2, r3
 800384a:	eeb0 0a47 	vmov.f32	s0, s14
 800384e:	eef0 0a67 	vmov.f32	s1, s15
 8003852:	f01a fe45 	bl	801e4e0 <cos>
 8003856:	ec59 8b10 	vmov	r8, r9, d0
 800385a:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 800385e:	eeb0 0a47 	vmov.f32	s0, s14
 8003862:	eef0 0a67 	vmov.f32	s1, s15
 8003866:	f01a fc75 	bl	801e154 <sqrt>
 800386a:	ec53 2b10 	vmov	r2, r3, d0
 800386e:	4640      	mov	r0, r8
 8003870:	4649      	mov	r1, r9
 8003872:	f7fc fed1 	bl	8000618 <__aeabi_dmul>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	a33a      	add	r3, pc, #232	@ (adr r3, 8003968 <step_pass+0x188>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fff2 	bl	800086c <__aeabi_ddiv>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
		if (((direction == POSITIVE_DIRECTION) && time_step < 0) || ((direction == NEGATIVE_DIRECTION) && time_step > 0)) {
 8003890:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003894:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <step_pass+0xd4>
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 80038aa:	f7fd f927 	bl	8000afc <__aeabi_dcmplt>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <step_pass+0xf8>
 80038b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038b8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d112      	bne.n	80038e8 <step_pass+0x108>
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 80038ce:	f7fd f933 	bl	8000b38 <__aeabi_dcmpgt>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <step_pass+0x108>
			time_step = -time_step;
 80038d8:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 80038dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80038e4:	e9c7 4542 	strd	r4, r5, [r7, #264]	@ 0x108
		}

		curr_time += time_step;
 80038e8:	f107 0310 	add.w	r3, r7, #16
 80038ec:	461e      	mov	r6, r3
 80038ee:	f107 0310 	add.w	r3, r7, #16
 80038f2:	4619      	mov	r1, r3
 80038f4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80038f8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80038fc:	f7fc fcd6 	bl	80002ac <__adddf3>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	e946 2302 	strd	r2, r3, [r6, #-8]
	} while ((obs.elevation >= 0) || ((direction == POSITIVE_DIRECTION) && (obs.elevation_rate > 0.0)));
 8003908:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	f7fd f906 	bl	8000b24 <__aeabi_dcmpge>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	f47f af73 	bne.w	8003806 <step_pass+0x26>
 8003920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003924:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <step_pass+0x166>
 800392e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	f7fd f8fd 	bl	8000b38 <__aeabi_dcmpgt>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	f47f af60 	bne.w	8003806 <step_pass+0x26>
	return curr_time;
 8003946:	f107 0310 	add.w	r3, r7, #16
 800394a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800394e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003952:	eeb0 0a47 	vmov.f32	s0, s14
 8003956:	eef0 0a67 	vmov.f32	s1, s15
 800395a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800395e:	46bd      	mov	sp, r7
 8003960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003964:	f3af 8000 	nop.w
 8003968:	00000000 	.word	0x00000000
 800396c:	40d86a00 	.word	0x40d86a00
 8003970:	3ff00000 	.word	0x3ff00000
 8003974:	00000000 	.word	0x00000000

08003978 <predict_next_los>:

struct predict_observation predict_next_los(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double start_utc)
{
 8003978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800397c:	b0dc      	sub	sp, #368	@ 0x170
 800397e:	af00      	add	r7, sp, #0
 8003980:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003984:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003988:	6018      	str	r0, [r3, #0]
 800398a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800398e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003992:	6019      	str	r1, [r3, #0]
 8003994:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003998:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	463b      	mov	r3, r7
 80039a0:	ed83 0b00 	vstr	d0, [r3]
	double curr_time = start_utc;
 80039a4:	463b      	mov	r3, r7
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	struct predict_observation obs;
	double time_step = 0;
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

	struct predict_position orbit;
	predict_orbit(orbital_elements, &orbit, curr_time);
 80039ba:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80039be:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80039c2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80039c6:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80039ca:	4611      	mov	r1, r2
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	f001 f873 	bl	8004ab8 <predict_orbit>
	predict_observe_orbit(observer, &orbit, &obs);
 80039d2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80039d6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80039da:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80039de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	f7ff f898 	bl	8002b18 <predict_observe_orbit>

	//check whether AOS/LOS can happen after specified start time
	if (predict_aos_happens(orbital_elements, observer->latitude) && !predict_is_geosynchronous(orbital_elements) && !orbit.decayed) {
 80039e8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80039ec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 80039f6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80039fa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80039fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003a02:	eef0 0a67 	vmov.f32	s1, s15
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	f000 ffce 	bl	80049a8 <predict_aos_happens>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80d9 	beq.w	8003bc6 <predict_next_los+0x24e>
 8003a14:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003a18:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	f000 ff03 	bl	8004828 <predict_is_geosynchronous>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f083 0301 	eor.w	r3, r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80cb 	beq.w	8003bc6 <predict_next_los+0x24e>
 8003a30:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003a34:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003a38:	7a1b      	ldrb	r3, [r3, #8]
 8003a3a:	f083 0301 	eor.w	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80c0 	beq.w	8003bc6 <predict_next_los+0x24e>
		//iteration algorithm from Predict, see comments in predict_next_aos().

		//iterate until next satellite pass
		if (obs.elevation < 0.0) {
 8003a46:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	f7fd f853 	bl	8000afc <__aeabi_dcmplt>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d030      	beq.n	8003abe <predict_next_los+0x146>
			struct predict_observation aos = predict_next_aos(observer, orbital_elements, curr_time);
 8003a5c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003a60:	f5a3 70ac 	sub.w	r0, r3, #344	@ 0x158
 8003a64:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003a68:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8003a6c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003a70:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003a74:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	f7ff fcc8 	bl	8003410 <predict_next_aos>
			curr_time = aos.time;
 8003a80:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003a84:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8003a90:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003a94:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003a98:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003a9c:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	f001 f808 	bl	8004ab8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8003aa8:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8003aac:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8003ab0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003ab4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	f7ff f82d 	bl	8002b18 <predict_observe_orbit>
		}

		//step through the pass
		curr_time = step_pass(observer, orbital_elements, curr_time, POSITIVE_DIRECTION);
 8003abe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003ac2:	f5a3 71b2 	sub.w	r1, r3, #356	@ 0x164
 8003ac6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003aca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ace:	2200      	movs	r2, #0
 8003ad0:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8003ad4:	6809      	ldr	r1, [r1, #0]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	f7ff fe82 	bl	80037e0 <step_pass>
 8003adc:	ed87 0b5a 	vstr	d0, [r7, #360]	@ 0x168

		//fine tune to elevation threshold
		do {
			time_step = obs.elevation*180.0/M_PI*sqrt(orbit.altitude)/502500.0;
 8003ae0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	4b49      	ldr	r3, [pc, #292]	@ (8003c10 <predict_next_los+0x298>)
 8003aea:	f7fc fd95 	bl	8000618 <__aeabi_dmul>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	a340      	add	r3, pc, #256	@ (adr r3, 8003bf8 <predict_next_los+0x280>)
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f7fc feb6 	bl	800086c <__aeabi_ddiv>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4690      	mov	r8, r2
 8003b06:	4699      	mov	r9, r3
 8003b08:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003b0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003b10:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8003b14:	eeb0 0a47 	vmov.f32	s0, s14
 8003b18:	eef0 0a67 	vmov.f32	s1, s15
 8003b1c:	f01a fb1a 	bl	801e154 <sqrt>
 8003b20:	ec53 2b10 	vmov	r2, r3, d0
 8003b24:	4640      	mov	r0, r8
 8003b26:	4649      	mov	r1, r9
 8003b28:	f7fc fd76 	bl	8000618 <__aeabi_dmul>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	a332      	add	r3, pc, #200	@ (adr r3, 8003c00 <predict_next_los+0x288>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f7fc fe97 	bl	800086c <__aeabi_ddiv>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time += time_step;
 8003b46:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8003b4a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8003b4e:	f7fc fbad 	bl	80002ac <__adddf3>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8003b5a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003b5e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003b62:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003b66:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	f000 ffa3 	bl	8004ab8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8003b72:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8003b76:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8003b7a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003b7e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	f7fe ffc8 	bl	8002b18 <predict_observe_orbit>
		} while (fabs(obs.elevation*180.0/M_PI) > AOSLOS_HORIZON_THRESHOLD);
 8003b88:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	4b1f      	ldr	r3, [pc, #124]	@ (8003c10 <predict_next_los+0x298>)
 8003b92:	f7fc fd41 	bl	8000618 <__aeabi_dmul>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	a316      	add	r3, pc, #88	@ (adr r3, 8003bf8 <predict_next_los+0x280>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f7fc fe62 	bl	800086c <__aeabi_ddiv>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4614      	mov	r4, r2
 8003bae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003bb2:	a315      	add	r3, pc, #84	@ (adr r3, 8003c08 <predict_next_los+0x290>)
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	4620      	mov	r0, r4
 8003bba:	4629      	mov	r1, r5
 8003bbc:	f7fc ffbc 	bl	8000b38 <__aeabi_dcmpgt>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d18c      	bne.n	8003ae0 <predict_next_los+0x168>
	}
	return obs;
 8003bc6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003bca:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bd6:	2258      	movs	r2, #88	@ 0x58
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f017 f84a 	bl	801ac72 <memcpy>
}
 8003bde:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003be2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8003bec:	46bd      	mov	sp, r7
 8003bee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bf2:	bf00      	nop
 8003bf4:	f3af 8000 	nop.w
 8003bf8:	54442d18 	.word	0x54442d18
 8003bfc:	400921fb 	.word	0x400921fb
 8003c00:	00000000 	.word	0x00000000
 8003c04:	411eab90 	.word	0x411eab90
 8003c08:	33333333 	.word	0x33333333
 8003c0c:	3fd33333 	.word	0x3fd33333
 8003c10:	40668000 	.word	0x40668000

08003c14 <elevation_derivative>:
 * \param orbital_elements Orbital elements for satellite
 * \param time Time
 * \return Derivative of elevation at input time
 **/
double elevation_derivative(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double time)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b0c0      	sub	sp, #256	@ 0x100
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	463b      	mov	r3, r7
 8003c20:	ed83 0b00 	vstr	d0, [r3]
	struct predict_position orbit;
	struct predict_observation observation;
	predict_orbit(orbital_elements, &orbit, time);
 8003c24:	463b      	mov	r3, r7
 8003c26:	461a      	mov	r2, r3
 8003c28:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c2c:	ed92 0b00 	vldr	d0, [r2]
 8003c30:	4619      	mov	r1, r3
 8003c32:	68b8      	ldr	r0, [r7, #8]
 8003c34:	f000 ff40 	bl	8004ab8 <predict_orbit>
	predict_observe_orbit(observer, &orbit, &observation);
 8003c38:	f107 0210 	add.w	r2, r7, #16
 8003c3c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c40:	4619      	mov	r1, r3
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7fe ff68 	bl	8002b18 <predict_observe_orbit>
	return observation.elevation_rate;
 8003c48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c4c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c50:	eeb0 0a47 	vmov.f32	s0, s14
 8003c54:	eef0 0a67 	vmov.f32	s1, s15
 8003c58:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <find_max_elevation>:
 * \param lower_time Lower time bracket
 * \param upper_time Upper time bracket
 * \return Observation of satellite for maximum elevation between lower and upper time brackets
 **/
struct predict_observation find_max_elevation(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double lower_time, double upper_time)
{
 8003c60:	b5b0      	push	{r4, r5, r7, lr}
 8003c62:	b0ce      	sub	sp, #312	@ 0x138
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003c6a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003c6e:	6018      	str	r0, [r3, #0]
 8003c70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003c74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003c78:	6019      	str	r1, [r3, #0]
 8003c7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003c7e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	ed83 0b00 	vstr	d0, [r3]
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	ed03 1b02 	vstr	d1, [r3, #-8]
	double max_ele_time_candidate = (upper_time + lower_time)/2.0;
 8003c94:	f107 0308 	add.w	r3, r7, #8
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8003ca6:	f7fc fb01 	bl	80002ac <__adddf3>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003cba:	f7fc fdd7 	bl	800086c <__aeabi_ddiv>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int iteration = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	while ((fabs(lower_time - upper_time) > MAXELE_TIME_EQUALITY_THRESHOLD) && (iteration < MAXELE_MAX_NUM_ITERATIONS)) {
 8003ccc:	e089      	b.n	8003de2 <find_max_elevation+0x182>
		max_ele_time_candidate = (upper_time + lower_time)/2.0;
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f107 0308 	add.w	r3, r7, #8
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8003ce0:	f7fc fae4 	bl	80002ac <__adddf3>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003cf4:	f7fc fdba 	bl	800086c <__aeabi_ddiv>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

		//calculate derivatives for lower, upper and candidate
		double candidate_deriv = elevation_derivative(observer, orbital_elements, max_ele_time_candidate);
 8003d00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003d04:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003d08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003d0c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d10:	ed97 0b4c 	vldr	d0, [r7, #304]	@ 0x130
 8003d14:	6811      	ldr	r1, [r2, #0]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	f7ff ff7c 	bl	8003c14 <elevation_derivative>
 8003d1c:	ed87 0b48 	vstr	d0, [r7, #288]	@ 0x120
		double lower_deriv = elevation_derivative(observer, orbital_elements, lower_time);
 8003d20:	f107 0308 	add.w	r3, r7, #8
 8003d24:	4619      	mov	r1, r3
 8003d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003d2a:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003d2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003d32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d36:	ed91 0b00 	vldr	d0, [r1]
 8003d3a:	6811      	ldr	r1, [r2, #0]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	f7ff ff69 	bl	8003c14 <elevation_derivative>
 8003d42:	ed87 0b46 	vstr	d0, [r7, #280]	@ 0x118
		double upper_deriv = elevation_derivative(observer, orbital_elements, upper_time);
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003d50:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003d54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003d58:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d5c:	ed11 0b02 	vldr	d0, [r1, #-8]
 8003d60:	6811      	ldr	r1, [r2, #0]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	f7ff ff56 	bl	8003c14 <elevation_derivative>
 8003d68:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110

		//check whether derivative has changed sign
		if (candidate_deriv*lower_deriv < 0) {
 8003d6c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003d70:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8003d74:	f7fc fc50 	bl	8000618 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	f7fc feb8 	bl	8000afc <__aeabi_dcmplt>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <find_max_elevation+0x142>
			upper_time = max_ele_time_candidate;
 8003d92:	f107 0308 	add.w	r3, r7, #8
 8003d96:	4619      	mov	r1, r3
 8003d98:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003d9c:	e941 2302 	strd	r2, r3, [r1, #-8]
 8003da0:	e01a      	b.n	8003dd8 <find_max_elevation+0x178>
		} else if (candidate_deriv*upper_deriv < 0) {
 8003da2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003da6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8003daa:	f7fc fc35 	bl	8000618 <__aeabi_dmul>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	f7fc fe9d 	bl	8000afc <__aeabi_dcmplt>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d100      	bne.n	8003dca <find_max_elevation+0x16a>
			lower_time = max_ele_time_candidate;
		} else {
			break;
 8003dc8:	e02d      	b.n	8003e26 <find_max_elevation+0x1c6>
			lower_time = max_ele_time_candidate;
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	4619      	mov	r1, r3
 8003dd0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003dd4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		iteration++;
 8003dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003ddc:	3301      	adds	r3, #1
 8003dde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	while ((fabs(lower_time - upper_time) > MAXELE_TIME_EQUALITY_THRESHOLD) && (iteration < MAXELE_MAX_NUM_ITERATIONS)) {
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4619      	mov	r1, r3
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003df4:	f7fc fa58 	bl	80002a8 <__aeabi_dsub>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	f7fc fe93 	bl	8000b38 <__aeabi_dcmpgt>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d006      	beq.n	8003e26 <find_max_elevation+0x1c6>
 8003e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003e1c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003e20:	4293      	cmp	r3, r2
 8003e22:	f77f af54 	ble.w	8003cce <find_max_elevation+0x6e>
	}

	//prepare output
	struct predict_position orbit;
	struct predict_observation observation;
	predict_orbit(orbital_elements, &orbit, max_ele_time_candidate);
 8003e26:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8003e2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e2e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003e32:	ed97 0b4c 	vldr	d0, [r7, #304]	@ 0x130
 8003e36:	4611      	mov	r1, r2
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	f000 fe3d 	bl	8004ab8 <predict_orbit>
	predict_observe_orbit(observer, &orbit, &observation);
 8003e3e:	f107 0220 	add.w	r2, r7, #32
 8003e42:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8003e46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e4a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	f7fe fe62 	bl	8002b18 <predict_observe_orbit>
	return observation;
 8003e54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	2358      	movs	r3, #88	@ 0x58
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f016 ff00 	bl	801ac72 <memcpy>
}
 8003e72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bdb0      	pop	{r4, r5, r7, pc}

08003e84 <predict_at_max_elevation>:

struct predict_observation predict_at_max_elevation(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, predict_julian_date_t start_time)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003e90:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8003e94:	6018      	str	r0, [r3, #0]
 8003e96:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003e9a:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8003e9e:	6019      	str	r1, [r3, #0]
 8003ea0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003ea4:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f107 0308 	add.w	r3, r7, #8
 8003eae:	ed03 0b02 	vstr	d0, [r3, #-8]
	struct predict_observation ret_observation = {0};
 8003eb2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003eb6:	2258      	movs	r2, #88	@ 0x58
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f015 fe5d 	bl	8019b7a <memset>

	if (predict_is_geosynchronous(orbital_elements)) {
 8003ec0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003ec4:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	f000 fcad 	bl	8004828 <predict_is_geosynchronous>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <predict_at_max_elevation+0x6a>
		return ret_observation;
 8003ed4:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003ed8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003ee4:	2258      	movs	r2, #88	@ 0x58
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f016 fec3 	bl	801ac72 <memcpy>
 8003eec:	e153      	b.n	8004196 <predict_at_max_elevation+0x312>
	}

	struct predict_position orbit;
	struct predict_observation observation;
	predict_orbit(orbital_elements, &orbit, start_time);
 8003eee:	f107 0308 	add.w	r3, r7, #8
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8003ef8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003efc:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8003f00:	ed11 0b02 	vldr	d0, [r1, #-8]
 8003f04:	4611      	mov	r1, r2
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	f000 fdd6 	bl	8004ab8 <predict_orbit>
	if (orbit.decayed) {
 8003f0c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003f10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f14:	7a1b      	ldrb	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00c      	beq.n	8003f34 <predict_at_max_elevation+0xb0>
		return ret_observation;
 8003f1a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003f1e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003f2a:	2258      	movs	r2, #88	@ 0x58
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f016 fea0 	bl	801ac72 <memcpy>
 8003f32:	e130      	b.n	8004196 <predict_at_max_elevation+0x312>
	}

	predict_observe_orbit(observer, &orbit, &observation);
 8003f34:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 8003f38:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8003f3c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003f40:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	f7fe fde7 	bl	8002b18 <predict_observe_orbit>

	//bracket the solution by approximate times for AOS and LOS of the current or next pass
	double lower_time = start_time;
 8003f4a:	f107 0308 	add.w	r3, r7, #8
 8003f4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f52:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
	double upper_time = start_time;
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f5e:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
	if (observation.elevation < 0) {
 8003f62:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003f66:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003f6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	f7fc fdc1 	bl	8000afc <__aeabi_dcmplt>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01d      	beq.n	8003fbc <predict_at_max_elevation+0x138>
		struct predict_observation aos = predict_next_aos(observer, orbital_elements, start_time);
 8003f80:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003f84:	f5a3 7044 	sub.w	r0, r3, #784	@ 0x310
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003f92:	f5a3 7247 	sub.w	r2, r3, #796	@ 0x31c
 8003f96:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003f9a:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8003f9e:	ed11 0b02 	vldr	d0, [r1, #-8]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	f7ff fa33 	bl	8003410 <predict_next_aos>
		lower_time = aos.time;
 8003faa:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003fae:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
 8003fba:	e010      	b.n	8003fde <predict_at_max_elevation+0x15a>
	} else {
		lower_time = step_pass(observer, orbital_elements, lower_time, NEGATIVE_DIRECTION);
 8003fbc:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003fc0:	f5a3 7147 	sub.w	r1, r3, #796	@ 0x31c
 8003fc4:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003fc8:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8003fcc:	2201      	movs	r2, #1
 8003fce:	ed97 0bc8 	vldr	d0, [r7, #800]	@ 0x320
 8003fd2:	6809      	ldr	r1, [r1, #0]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	f7ff fc03 	bl	80037e0 <step_pass>
 8003fda:	ed87 0bc8 	vstr	d0, [r7, #800]	@ 0x320
	}
	struct predict_observation los = predict_next_los(observer, orbital_elements, lower_time);
 8003fde:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003fe2:	f5a3 70d8 	sub.w	r0, r3, #432	@ 0x1b0
 8003fe6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003fea:	f5a3 7247 	sub.w	r2, r3, #796	@ 0x31c
 8003fee:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8003ff2:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8003ff6:	ed97 0bc8 	vldr	d0, [r7, #800]	@ 0x320
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	f7ff fcbb 	bl	8003978 <predict_next_los>
	upper_time = los.time;
 8004002:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004006:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318

	//assume that we can only have two potential local maxima along the elevation curve, and be content with that. For most cases, we will only have one, unless it is a satellite in deep space with long passes and weird effects.

	//bracket by AOS/LOS
	struct predict_observation candidate_center = find_max_elevation(observer, orbital_elements, lower_time, upper_time);
 8004012:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004016:	f5a3 7002 	sub.w	r0, r3, #520	@ 0x208
 800401a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800401e:	f5a3 7247 	sub.w	r2, r3, #796	@ 0x31c
 8004022:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004026:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 800402a:	ed97 1bc6 	vldr	d1, [r7, #792]	@ 0x318
 800402e:	ed97 0bc8 	vldr	d0, [r7, #800]	@ 0x320
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	6819      	ldr	r1, [r3, #0]
 8004036:	f7ff fe13 	bl	8003c60 <find_max_elevation>

	//bracket by a combination of the found candidate above and either AOS or LOS (will thus cover solutions within [aos, candidate] and [candidate, los])
	struct predict_observation candidate_lower = find_max_elevation(observer, orbital_elements, candidate_center.time - MAXELE_TIME_EQUALITY_THRESHOLD, upper_time);
 800403a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800403e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 800404e:	f7fc f92b 	bl	80002a8 <__aeabi_dsub>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	ec43 2b17 	vmov	d7, r2, r3
 800405a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800405e:	f5a3 7018 	sub.w	r0, r3, #608	@ 0x260
 8004062:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004066:	f5a3 7247 	sub.w	r2, r3, #796	@ 0x31c
 800406a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800406e:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8004072:	ed97 1bc6 	vldr	d1, [r7, #792]	@ 0x318
 8004076:	eeb0 0a47 	vmov.f32	s0, s14
 800407a:	eef0 0a67 	vmov.f32	s1, s15
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	6819      	ldr	r1, [r3, #0]
 8004082:	f7ff fded 	bl	8003c60 <find_max_elevation>
	struct predict_observation candidate_upper = find_max_elevation(observer, orbital_elements, lower_time, candidate_center.time + MAXELE_TIME_EQUALITY_THRESHOLD);
 8004086:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800408a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800408e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 800409a:	f7fc f907 	bl	80002ac <__adddf3>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	ec43 2b17 	vmov	d7, r2, r3
 80040a6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80040aa:	f5a3 702e 	sub.w	r0, r3, #696	@ 0x2b8
 80040ae:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80040b2:	f5a3 7247 	sub.w	r2, r3, #796	@ 0x31c
 80040b6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80040ba:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80040be:	eeb0 1a47 	vmov.f32	s2, s14
 80040c2:	eef0 1a67 	vmov.f32	s3, s15
 80040c6:	ed97 0bc8 	vldr	d0, [r7, #800]	@ 0x320
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	f7ff fdc7 	bl	8003c60 <find_max_elevation>

	//return the best candidate
	if ((candidate_center.elevation > candidate_lower.elevation) && (candidate_center.elevation > candidate_upper.elevation)) {
 80040d2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80040d6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80040da:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80040de:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80040e2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80040e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80040ea:	f7fc fd25 	bl	8000b38 <__aeabi_dcmpgt>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <predict_at_max_elevation+0x2b2>
 80040f4:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80040f8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80040fc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004100:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004104:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8004108:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800410c:	f7fc fd14 	bl	8000b38 <__aeabi_dcmpgt>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00f      	beq.n	8004136 <predict_at_max_elevation+0x2b2>
		return candidate_center;
 8004116:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800411a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004124:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	2358      	movs	r3, #88	@ 0x58
 800412e:	461a      	mov	r2, r3
 8004130:	f016 fd9f 	bl	801ac72 <memcpy>
 8004134:	e02f      	b.n	8004196 <predict_at_max_elevation+0x312>
	} else if (candidate_lower.elevation > candidate_upper.elevation) {
 8004136:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800413a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800413e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004142:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004146:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800414a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800414e:	f7fc fcf3 	bl	8000b38 <__aeabi_dcmpgt>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <predict_at_max_elevation+0x2f4>
		return candidate_lower;
 8004158:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800415c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004166:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	2358      	movs	r3, #88	@ 0x58
 8004170:	461a      	mov	r2, r3
 8004172:	f016 fd7e 	bl	801ac72 <memcpy>
 8004176:	e00e      	b.n	8004196 <predict_at_max_elevation+0x312>
	} else {
		return candidate_upper;
 8004178:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800417c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8004186:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	2358      	movs	r3, #88	@ 0x58
 8004190:	461a      	mov	r2, r3
 8004192:	f016 fd6e 	bl	801ac72 <memcpy>
	}
}
 8004196:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800419a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	f507 774a 	add.w	r7, r7, #808	@ 0x328
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <predict_parse_tle>:

//length of buffer used for extracting subsets of TLE strings for parsing
#define SUBSTRING_BUFFER_LENGTH 50

predict_orbital_elements_t* predict_parse_tle(const char *tle_line_1, const char *tle_line_2)
{
 80041a8:	b5b0      	push	{r4, r5, r7, lr}
 80041aa:	b0aa      	sub	sp, #168	@ 0xa8
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	double tempnum;
	predict_orbital_elements_t *m = (predict_orbital_elements_t*)malloc(sizeof(predict_orbital_elements_t));
 80041b2:	2078      	movs	r0, #120	@ 0x78
 80041b4:	f013 fdce 	bl	8017d54 <malloc>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	if (m == NULL) return NULL;
 80041be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <predict_parse_tle+0x22>
 80041c6:	2300      	movs	r3, #0
 80041c8:	e312      	b.n	80047f0 <predict_parse_tle+0x648>

	char substring_buffer[SUBSTRING_BUFFER_LENGTH];
	m->satellite_number = atol(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,2,6));
 80041ca:	f107 020c 	add.w	r2, r7, #12
 80041ce:	2306      	movs	r3, #6
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2302      	movs	r3, #2
 80041d4:	2132      	movs	r1, #50	@ 0x32
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f00d fb82 	bl	80118e0 <SubString>
 80041dc:	4603      	mov	r3, r0
 80041de:	4618      	mov	r0, r3
 80041e0:	f013 fda1 	bl	8017d26 <atol>
 80041e4:	4602      	mov	r2, r0
 80041e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041ea:	601a      	str	r2, [r3, #0]
	m->element_number = atol(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,64,67));
 80041ec:	f107 020c 	add.w	r2, r7, #12
 80041f0:	2343      	movs	r3, #67	@ 0x43
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2340      	movs	r3, #64	@ 0x40
 80041f6:	2132      	movs	r1, #50	@ 0x32
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f00d fb71 	bl	80118e0 <SubString>
 80041fe:	4603      	mov	r3, r0
 8004200:	4618      	mov	r0, r3
 8004202:	f013 fd90 	bl	8017d26 <atol>
 8004206:	4602      	mov	r2, r0
 8004208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800420c:	605a      	str	r2, [r3, #4]
	m->epoch_year = atoi(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,18,19));
 800420e:	f107 020c 	add.w	r2, r7, #12
 8004212:	2313      	movs	r3, #19
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	2312      	movs	r3, #18
 8004218:	2132      	movs	r1, #50	@ 0x32
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f00d fb60 	bl	80118e0 <SubString>
 8004220:	4603      	mov	r3, r0
 8004222:	4618      	mov	r0, r3
 8004224:	f013 fd7b 	bl	8017d1e <atoi>
 8004228:	4602      	mov	r2, r0
 800422a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800422e:	615a      	str	r2, [r3, #20]
	strncpy(m->designator, SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,9,16),8);
 8004230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004234:	f103 0408 	add.w	r4, r3, #8
 8004238:	f107 020c 	add.w	r2, r7, #12
 800423c:	2310      	movs	r3, #16
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2309      	movs	r3, #9
 8004242:	2132      	movs	r1, #50	@ 0x32
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f00d fb4b 	bl	80118e0 <SubString>
 800424a:	4603      	mov	r3, r0
 800424c:	2208      	movs	r2, #8
 800424e:	4619      	mov	r1, r3
 8004250:	4620      	mov	r0, r4
 8004252:	f015 fcac 	bl	8019bae <strncpy>
	m->epoch_day = atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,20,31));
 8004256:	f107 020c 	add.w	r2, r7, #12
 800425a:	231f      	movs	r3, #31
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2314      	movs	r3, #20
 8004260:	2132      	movs	r1, #50	@ 0x32
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f00d fb3c 	bl	80118e0 <SubString>
 8004268:	4603      	mov	r3, r0
 800426a:	4618      	mov	r0, r3
 800426c:	f013 fd54 	bl	8017d18 <atof>
 8004270:	eeb0 7a40 	vmov.f32	s14, s0
 8004274:	eef0 7a60 	vmov.f32	s15, s1
 8004278:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800427c:	ed83 7b06 	vstr	d7, [r3, #24]
	m->inclination = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,8,15));
 8004280:	f107 020c 	add.w	r2, r7, #12
 8004284:	230f      	movs	r3, #15
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2308      	movs	r3, #8
 800428a:	2132      	movs	r1, #50	@ 0x32
 800428c:	6838      	ldr	r0, [r7, #0]
 800428e:	f00d fb27 	bl	80118e0 <SubString>
 8004292:	4603      	mov	r3, r0
 8004294:	4618      	mov	r0, r3
 8004296:	f013 fd3f 	bl	8017d18 <atof>
 800429a:	eeb0 7a40 	vmov.f32	s14, s0
 800429e:	eef0 7a60 	vmov.f32	s15, s1
 80042a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042a6:	ed83 7b08 	vstr	d7, [r3, #32]
	m->right_ascension = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,17,24));
 80042aa:	f107 020c 	add.w	r2, r7, #12
 80042ae:	2318      	movs	r3, #24
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2311      	movs	r3, #17
 80042b4:	2132      	movs	r1, #50	@ 0x32
 80042b6:	6838      	ldr	r0, [r7, #0]
 80042b8:	f00d fb12 	bl	80118e0 <SubString>
 80042bc:	4603      	mov	r3, r0
 80042be:	4618      	mov	r0, r3
 80042c0:	f013 fd2a 	bl	8017d18 <atof>
 80042c4:	eeb0 7a40 	vmov.f32	s14, s0
 80042c8:	eef0 7a60 	vmov.f32	s15, s1
 80042cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042d0:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	m->eccentricity = 1.0e-07*atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,26,32));
 80042d4:	f107 020c 	add.w	r2, r7, #12
 80042d8:	2320      	movs	r3, #32
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	231a      	movs	r3, #26
 80042de:	2132      	movs	r1, #50	@ 0x32
 80042e0:	6838      	ldr	r0, [r7, #0]
 80042e2:	f00d fafd 	bl	80118e0 <SubString>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f013 fd15 	bl	8017d18 <atof>
 80042ee:	ec51 0b10 	vmov	r0, r1, d0
 80042f2:	f20f 4380 	addw	r3, pc, #1152	@ 0x480
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f7fc f98d 	bl	8000618 <__aeabi_dmul>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8004306:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->argument_of_perigee = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,34,41));
 800430a:	f107 020c 	add.w	r2, r7, #12
 800430e:	2329      	movs	r3, #41	@ 0x29
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2322      	movs	r3, #34	@ 0x22
 8004314:	2132      	movs	r1, #50	@ 0x32
 8004316:	6838      	ldr	r0, [r7, #0]
 8004318:	f00d fae2 	bl	80118e0 <SubString>
 800431c:	4603      	mov	r3, r0
 800431e:	4618      	mov	r0, r3
 8004320:	f013 fcfa 	bl	8017d18 <atof>
 8004324:	eeb0 7a40 	vmov.f32	s14, s0
 8004328:	eef0 7a60 	vmov.f32	s15, s1
 800432c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004330:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
	m->mean_anomaly = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,43,50));
 8004334:	f107 020c 	add.w	r2, r7, #12
 8004338:	2332      	movs	r3, #50	@ 0x32
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	232b      	movs	r3, #43	@ 0x2b
 800433e:	2132      	movs	r1, #50	@ 0x32
 8004340:	6838      	ldr	r0, [r7, #0]
 8004342:	f00d facd 	bl	80118e0 <SubString>
 8004346:	4603      	mov	r3, r0
 8004348:	4618      	mov	r0, r3
 800434a:	f013 fce5 	bl	8017d18 <atof>
 800434e:	eeb0 7a40 	vmov.f32	s14, s0
 8004352:	eef0 7a60 	vmov.f32	s15, s1
 8004356:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800435a:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
	m->mean_motion = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,52,62));
 800435e:	f107 020c 	add.w	r2, r7, #12
 8004362:	233e      	movs	r3, #62	@ 0x3e
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2334      	movs	r3, #52	@ 0x34
 8004368:	2132      	movs	r1, #50	@ 0x32
 800436a:	6838      	ldr	r0, [r7, #0]
 800436c:	f00d fab8 	bl	80118e0 <SubString>
 8004370:	4603      	mov	r3, r0
 8004372:	4618      	mov	r0, r3
 8004374:	f013 fcd0 	bl	8017d18 <atof>
 8004378:	eeb0 7a40 	vmov.f32	s14, s0
 800437c:	eef0 7a60 	vmov.f32	s15, s1
 8004380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004384:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
	m->derivative_mean_motion  = atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,33,42));
 8004388:	f107 020c 	add.w	r2, r7, #12
 800438c:	232a      	movs	r3, #42	@ 0x2a
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	2321      	movs	r3, #33	@ 0x21
 8004392:	2132      	movs	r1, #50	@ 0x32
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f00d faa3 	bl	80118e0 <SubString>
 800439a:	4603      	mov	r3, r0
 800439c:	4618      	mov	r0, r3
 800439e:	f013 fcbb 	bl	8017d18 <atof>
 80043a2:	eeb0 7a40 	vmov.f32	s14, s0
 80043a6:	eef0 7a60 	vmov.f32	s15, s1
 80043aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043ae:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
	tempnum=1.0e-5*atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,44,49));
 80043b2:	f107 020c 	add.w	r2, r7, #12
 80043b6:	2331      	movs	r3, #49	@ 0x31
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	232c      	movs	r3, #44	@ 0x2c
 80043bc:	2132      	movs	r1, #50	@ 0x32
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f00d fa8e 	bl	80118e0 <SubString>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f013 fca6 	bl	8017d18 <atof>
 80043cc:	ec51 0b10 	vmov	r0, r1, d0
 80043d0:	a3ea      	add	r3, pc, #936	@ (adr r3, 800477c <predict_parse_tle+0x5d4>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fc f91f 	bl	8000618 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	m->second_derivative_mean_motion = tempnum/pow(10.0,(tle_line_1[51]-'0'));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3333      	adds	r3, #51	@ 0x33
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	3b30      	subs	r3, #48	@ 0x30
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc f8aa 	bl	8000544 <__aeabi_i2d>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	ec43 2b11 	vmov	d1, r2, r3
 80043f8:	ed9f 0bc7 	vldr	d0, [pc, #796]	@ 8004718 <predict_parse_tle+0x570>
 80043fc:	f019 fe3a 	bl	801e074 <pow>
 8004400:	ec53 2b10 	vmov	r2, r3, d0
 8004404:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8004408:	f7fc fa30 	bl	800086c <__aeabi_ddiv>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8004414:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	tempnum=1.0e-5*atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,53,58));
 8004418:	f107 020c 	add.w	r2, r7, #12
 800441c:	233a      	movs	r3, #58	@ 0x3a
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2335      	movs	r3, #53	@ 0x35
 8004422:	2132      	movs	r1, #50	@ 0x32
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f00d fa5b 	bl	80118e0 <SubString>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	f013 fc73 	bl	8017d18 <atof>
 8004432:	ec51 0b10 	vmov	r0, r1, d0
 8004436:	a3d1      	add	r3, pc, #836	@ (adr r3, 800477c <predict_parse_tle+0x5d4>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fc f8ec 	bl	8000618 <__aeabi_dmul>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	m->bstar_drag_term = tempnum/pow(10.0,(tle_line_1[60]-'0'));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	333c      	adds	r3, #60	@ 0x3c
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	3b30      	subs	r3, #48	@ 0x30
 8004450:	4618      	mov	r0, r3
 8004452:	f7fc f877 	bl	8000544 <__aeabi_i2d>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	ec43 2b11 	vmov	d1, r2, r3
 800445e:	ed9f 0bae 	vldr	d0, [pc, #696]	@ 8004718 <predict_parse_tle+0x570>
 8004462:	f019 fe07 	bl	801e074 <pow>
 8004466:	ec53 2b10 	vmov	r2, r3, d0
 800446a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800446e:	f7fc f9fd 	bl	800086c <__aeabi_ddiv>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800447a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	m->revolutions_at_epoch = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,63,67));
 800447e:	f107 020c 	add.w	r2, r7, #12
 8004482:	2343      	movs	r3, #67	@ 0x43
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	233f      	movs	r3, #63	@ 0x3f
 8004488:	2132      	movs	r1, #50	@ 0x32
 800448a:	6838      	ldr	r0, [r7, #0]
 800448c:	f00d fa28 	bl	80118e0 <SubString>
 8004490:	4603      	mov	r3, r0
 8004492:	4618      	mov	r0, r3
 8004494:	f013 fc40 	bl	8017d18 <atof>
 8004498:	ec53 2b10 	vmov	r2, r3, d0
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f7fc fb6a 	bl	8000b78 <__aeabi_d2iz>
 80044a4:	4602      	mov	r2, r0
 80044a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044aa:	669a      	str	r2, [r3, #104]	@ 0x68

	/* Period > 225 minutes is deep space */
	double ao, xnodp, dd1, dd2, delo, a1, del1, r1;
	double temp = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 80044ac:	a3b5      	add	r3, pc, #724	@ (adr r3, 8004784 <predict_parse_tle+0x5dc>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double xno = m->mean_motion*temp*MINUTES_PER_DAY; //from old TLE struct
 80044b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044ba:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80044be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80044c2:	f7fc f8a9 	bl	8000618 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	4ba3      	ldr	r3, [pc, #652]	@ (8004760 <predict_parse_tle+0x5b8>)
 80044d4:	f7fc f8a0 	bl	8000618 <__aeabi_dmul>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	dd1=(XKE/xno);
 80044e0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80044e4:	a18e      	add	r1, pc, #568	@ (adr r1, 8004720 <predict_parse_tle+0x578>)
 80044e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ea:	f7fc f9bf 	bl	800086c <__aeabi_ddiv>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	dd2=TWO_THIRD;
 80044f6:	a38c      	add	r3, pc, #560	@ (adr r3, 8004728 <predict_parse_tle+0x580>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	a1=pow(dd1,dd2);
 8004500:	ed97 1b1c 	vldr	d1, [r7, #112]	@ 0x70
 8004504:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8004508:	f019 fdb4 	bl	801e074 <pow>
 800450c:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	r1=cos(m->inclination*M_PI/180.0);
 8004510:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004514:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004518:	a385      	add	r3, pc, #532	@ (adr r3, 8004730 <predict_parse_tle+0x588>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fc f87b 	bl	8000618 <__aeabi_dmul>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	4b8d      	ldr	r3, [pc, #564]	@ (8004764 <predict_parse_tle+0x5bc>)
 8004530:	f7fc f99c 	bl	800086c <__aeabi_ddiv>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	ec43 2b17 	vmov	d7, r2, r3
 800453c:	eeb0 0a47 	vmov.f32	s0, s14
 8004540:	eef0 0a67 	vmov.f32	s1, s15
 8004544:	f019 ffcc 	bl	801e4e0 <cos>
 8004548:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	dd1=(1.0-m->eccentricity*m->eccentricity);
 800454c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004550:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8004554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004558:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800455c:	f7fc f85c 	bl	8000618 <__aeabi_dmul>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	f04f 0000 	mov.w	r0, #0
 8004568:	497f      	ldr	r1, [pc, #508]	@ (8004768 <predict_parse_tle+0x5c0>)
 800456a:	f7fb fe9d 	bl	80002a8 <__aeabi_dsub>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp=CK2*1.5f*(r1*r1*3.0-1.0)/pow(dd1,1.5);
 8004576:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800457a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800457e:	f7fc f84b 	bl	8000618 <__aeabi_dmul>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	4b77      	ldr	r3, [pc, #476]	@ (800476c <predict_parse_tle+0x5c4>)
 8004590:	f7fc f842 	bl	8000618 <__aeabi_dmul>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	4b71      	ldr	r3, [pc, #452]	@ (8004768 <predict_parse_tle+0x5c0>)
 80045a2:	f7fb fe81 	bl	80002a8 <__aeabi_dsub>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	a362      	add	r3, pc, #392	@ (adr r3, 8004738 <predict_parse_tle+0x590>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fc f830 	bl	8000618 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4614      	mov	r4, r2
 80045be:	461d      	mov	r5, r3
 80045c0:	ed9f 1b5f 	vldr	d1, [pc, #380]	@ 8004740 <predict_parse_tle+0x598>
 80045c4:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 80045c8:	f019 fd54 	bl	801e074 <pow>
 80045cc:	ec53 2b10 	vmov	r2, r3, d0
 80045d0:	4620      	mov	r0, r4
 80045d2:	4629      	mov	r1, r5
 80045d4:	f7fc f94a 	bl	800086c <__aeabi_ddiv>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	del1=temp/(a1*a1);
 80045e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80045e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045e8:	f7fc f816 	bl	8000618 <__aeabi_dmul>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80045f4:	f7fc f93a 	bl	800086c <__aeabi_ddiv>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	ao=a1*(1.0-del1*(TWO_THIRD*.5+del1*(del1*1.654320987654321+1.0)));
 8004600:	a351      	add	r3, pc, #324	@ (adr r3, 8004748 <predict_parse_tle+0x5a0>)
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800460a:	f7fc f805 	bl	8000618 <__aeabi_dmul>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	4b53      	ldr	r3, [pc, #332]	@ (8004768 <predict_parse_tle+0x5c0>)
 800461c:	f7fb fe46 	bl	80002ac <__adddf3>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4610      	mov	r0, r2
 8004626:	4619      	mov	r1, r3
 8004628:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800462c:	f7fb fff4 	bl	8000618 <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	a345      	add	r3, pc, #276	@ (adr r3, 8004750 <predict_parse_tle+0x5a8>)
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f7fb fe35 	bl	80002ac <__adddf3>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800464e:	f7fb ffe3 	bl	8000618 <__aeabi_dmul>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	4943      	ldr	r1, [pc, #268]	@ (8004768 <predict_parse_tle+0x5c0>)
 800465c:	f7fb fe24 	bl	80002a8 <__aeabi_dsub>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004668:	f7fb ffd6 	bl	8000618 <__aeabi_dmul>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	delo=temp/(ao*ao);
 8004674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004678:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800467c:	f7fb ffcc 	bl	8000618 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004688:	f7fc f8f0 	bl	800086c <__aeabi_ddiv>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	xnodp=xno/(delo+1.0);
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	4b33      	ldr	r3, [pc, #204]	@ (8004768 <predict_parse_tle+0x5c0>)
 800469a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800469e:	f7fb fe05 	bl	80002ac <__adddf3>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046aa:	f7fc f8df 	bl	800086c <__aeabi_ddiv>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	/* Select a deep-space/near-earth ephemeris */
	if (TWO_PI/xnodp/MINUTES_PER_DAY >= 0.15625) {
 80046b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046ba:	a127      	add	r1, pc, #156	@ (adr r1, 8004758 <predict_parse_tle+0x5b0>)
 80046bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046c0:	f7fc f8d4 	bl	800086c <__aeabi_ddiv>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <predict_parse_tle+0x5b8>)
 80046d2:	f7fc f8cb 	bl	800086c <__aeabi_ddiv>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	4b23      	ldr	r3, [pc, #140]	@ (8004770 <predict_parse_tle+0x5c8>)
 80046e4:	f7fc fa1e 	bl	8000b24 <__aeabi_dcmpge>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d05d      	beq.n	80047aa <predict_parse_tle+0x602>
		m->ephemeris = EPHEMERIS_SDP4;
 80046ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		
		// Allocate memory for ephemeris data
		m->ephemeris_data = malloc(sizeof(struct _sdp4));
 80046f8:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80046fc:	f013 fb2a 	bl	8017d54 <malloc>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004708:	671a      	str	r2, [r3, #112]	@ 0x70

		if (m->ephemeris_data == NULL) {
 800470a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800470e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004710:	2b00      	cmp	r3, #0
 8004712:	d141      	bne.n	8004798 <predict_parse_tle+0x5f0>
 8004714:	e03a      	b.n	800478c <predict_parse_tle+0x5e4>
 8004716:	bf00      	nop
 8004718:	00000000 	.word	0x00000000
 800471c:	40240000 	.word	0x40240000
 8004720:	d08dcacf 	.word	0xd08dcacf
 8004724:	3fb309b5 	.word	0x3fb309b5
 8004728:	55555555 	.word	0x55555555
 800472c:	3fe55555 	.word	0x3fe55555
 8004730:	54442d18 	.word	0x54442d18
 8004734:	400921fb 	.word	0x400921fb
 8004738:	cbb15878 	.word	0xcbb15878
 800473c:	3f4a9b3a 	.word	0x3f4a9b3a
 8004740:	00000000 	.word	0x00000000
 8004744:	3ff80000 	.word	0x3ff80000
 8004748:	48b0fcd7 	.word	0x48b0fcd7
 800474c:	3ffa7819 	.word	0x3ffa7819
 8004750:	55555555 	.word	0x55555555
 8004754:	3fd55555 	.word	0x3fd55555
 8004758:	54442d18 	.word	0x54442d18
 800475c:	401921fb 	.word	0x401921fb
 8004760:	40968000 	.word	0x40968000
 8004764:	40668000 	.word	0x40668000
 8004768:	3ff00000 	.word	0x3ff00000
 800476c:	40080000 	.word	0x40080000
 8004770:	3fc40000 	.word	0x3fc40000
 8004774:	9abcaf48 	.word	0x9abcaf48
 8004778:	3e7ad7f2 	.word	0x3e7ad7f2
 800477c:	88e368f1 	.word	0x88e368f1
 8004780:	3ee4f8b5 	.word	0x3ee4f8b5
 8004784:	1fbf7384 	.word	0x1fbf7384
 8004788:	3ec96b0f 	.word	0x3ec96b0f
			predict_destroy_orbital_elements(m);
 800478c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8004790:	f000 f832 	bl	80047f8 <predict_destroy_orbital_elements>
			return NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	e02b      	b.n	80047f0 <predict_parse_tle+0x648>
		}
		// Initialize ephemeris data structure
		sdp4_init(m, (struct _sdp4*)m->ephemeris_data);
 8004798:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	4619      	mov	r1, r3
 80047a0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80047a4:	f000 fc78 	bl	8005098 <sdp4_init>
 80047a8:	e020      	b.n	80047ec <predict_parse_tle+0x644>

	} else {
		m->ephemeris = EPHEMERIS_SGP4;
 80047aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		
		// Allocate memory for ephemeris data
		m->ephemeris_data = malloc(sizeof(struct _sgp4));
 80047b4:	f44f 7090 	mov.w	r0, #288	@ 0x120
 80047b8:	f013 facc 	bl	8017d54 <malloc>
 80047bc:	4603      	mov	r3, r0
 80047be:	461a      	mov	r2, r3
 80047c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047c4:	671a      	str	r2, [r3, #112]	@ 0x70

		if (m->ephemeris_data == NULL) {
 80047c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <predict_parse_tle+0x634>
			predict_destroy_orbital_elements(m);
 80047d0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80047d4:	f000 f810 	bl	80047f8 <predict_destroy_orbital_elements>
			return NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	e009      	b.n	80047f0 <predict_parse_tle+0x648>
		}
		// Initialize ephemeris data structure
		sgp4_init(m, (struct _sgp4*)m->ephemeris_data);
 80047dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e2:	4619      	mov	r1, r3
 80047e4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80047e8:	f008 ff4e 	bl	800d688 <sgp4_init>
	}

	return m;
 80047ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	37a0      	adds	r7, #160	@ 0xa0
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bdb0      	pop	{r4, r5, r7, pc}

080047f8 <predict_destroy_orbital_elements>:

void predict_destroy_orbital_elements(predict_orbital_elements_t *m)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	if (m == NULL) return;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00c      	beq.n	8004820 <predict_destroy_orbital_elements+0x28>

	if (m->ephemeris_data != NULL) {
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <predict_destroy_orbital_elements+0x20>
		free(m->ephemeris_data);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004812:	4618      	mov	r0, r3
 8004814:	f013 faa6 	bl	8017d64 <free>
	}

	free(m);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f013 faa3 	bl	8017d64 <free>
 800481e:	e000      	b.n	8004822 <predict_destroy_orbital_elements+0x2a>
	if (m == NULL) return;
 8004820:	bf00      	nop
}
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <predict_is_geosynchronous>:

bool predict_is_geosynchronous(const predict_orbital_elements_t *m)
{
 8004828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
	return (m->mean_motion >= GEOSYNCHRONOUS_LOWER_MEAN_MOTION)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
		&& (m->mean_motion <= GEOSYNCHRONOUS_UPPER_MEAN_MOTION)
		&& (fabs(m->eccentricity) <= GEOSYNCHRONOUS_ECCENTRICITY_THRESHOLD)
		&& (fabs(m->inclination) <= GEOSYNCHRONOUS_INCLINATION_THRESHOLD_DEGREES);
 8004838:	a320      	add	r3, pc, #128	@ (adr r3, 80048bc <predict_is_geosynchronous+0x94>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fc f971 	bl	8000b24 <__aeabi_dcmpge>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d02c      	beq.n	80048a2 <predict_is_geosynchronous+0x7a>
		&& (m->mean_motion <= GEOSYNCHRONOUS_UPPER_MEAN_MOTION)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800484e:	a31d      	add	r3, pc, #116	@ (adr r3, 80048c4 <predict_is_geosynchronous+0x9c>)
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fc f95c 	bl	8000b10 <__aeabi_dcmple>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d021      	beq.n	80048a2 <predict_is_geosynchronous+0x7a>
		&& (fabs(m->eccentricity) <= GEOSYNCHRONOUS_ECCENTRICITY_THRESHOLD)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004864:	4690      	mov	r8, r2
 8004866:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800486a:	a318      	add	r3, pc, #96	@ (adr r3, 80048cc <predict_is_geosynchronous+0xa4>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	4640      	mov	r0, r8
 8004872:	4649      	mov	r1, r9
 8004874:	f7fc f94c 	bl	8000b10 <__aeabi_dcmple>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d011      	beq.n	80048a2 <predict_is_geosynchronous+0x7a>
		&& (fabs(m->inclination) <= GEOSYNCHRONOUS_INCLINATION_THRESHOLD_DEGREES);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004884:	4614      	mov	r4, r2
 8004886:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <predict_is_geosynchronous+0x90>)
 8004890:	4620      	mov	r0, r4
 8004892:	4629      	mov	r1, r5
 8004894:	f7fc f93c 	bl	8000b10 <__aeabi_dcmple>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <predict_is_geosynchronous+0x7a>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <predict_is_geosynchronous+0x7c>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	b2db      	uxtb	r3, r3
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048b4:	f3af 8000 	nop.w
 80048b8:	40518000 	.word	0x40518000
 80048bc:	cccccccd 	.word	0xcccccccd
 80048c0:	3feccccc 	.word	0x3feccccc
 80048c4:	9999999a 	.word	0x9999999a
 80048c8:	3ff19999 	.word	0x3ff19999
 80048cc:	9999999a 	.word	0x9999999a
 80048d0:	3fc99999 	.word	0x3fc99999
 80048d4:	00000000 	.word	0x00000000

080048d8 <predict_apogee>:

double predict_apogee(const predict_orbital_elements_t *m)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	double sma = 331.25*exp(log(1440.0/m->mean_motion)*(2.0/3.0));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80048e6:	f04f 0000 	mov.w	r0, #0
 80048ea:	492d      	ldr	r1, [pc, #180]	@ (80049a0 <predict_apogee+0xc8>)
 80048ec:	f7fb ffbe 	bl	800086c <__aeabi_ddiv>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	ec43 2b17 	vmov	d7, r2, r3
 80048f8:	eeb0 0a47 	vmov.f32	s0, s14
 80048fc:	eef0 0a67 	vmov.f32	s1, s15
 8004900:	f019 fb7a 	bl	801dff8 <log>
 8004904:	ec51 0b10 	vmov	r0, r1, d0
 8004908:	a31f      	add	r3, pc, #124	@ (adr r3, 8004988 <predict_apogee+0xb0>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fb fe83 	bl	8000618 <__aeabi_dmul>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	ec43 2b17 	vmov	d7, r2, r3
 800491a:	eeb0 0a47 	vmov.f32	s0, s14
 800491e:	eef0 0a67 	vmov.f32	s1, s15
 8004922:	f019 faf1 	bl	801df08 <exp>
 8004926:	ec51 0b10 	vmov	r0, r1, d0
 800492a:	a319      	add	r3, pc, #100	@ (adr r3, 8004990 <predict_apogee+0xb8>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f7fb fe72 	bl	8000618 <__aeabi_dmul>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return sma*(1.0+m->eccentricity)-EARTH_RADIUS_KM_WGS84;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	4b17      	ldr	r3, [pc, #92]	@ (80049a4 <predict_apogee+0xcc>)
 8004948:	f7fb fcb0 	bl	80002ac <__adddf3>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004958:	f7fb fe5e 	bl	8000618 <__aeabi_dmul>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	a30c      	add	r3, pc, #48	@ (adr r3, 8004998 <predict_apogee+0xc0>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f7fb fc9d 	bl	80002a8 <__aeabi_dsub>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	ec43 2b17 	vmov	d7, r2, r3
}
 8004976:	eeb0 0a47 	vmov.f32	s0, s14
 800497a:	eef0 0a67 	vmov.f32	s1, s15
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	f3af 8000 	nop.w
 8004988:	55555555 	.word	0x55555555
 800498c:	3fe55555 	.word	0x3fe55555
 8004990:	00000000 	.word	0x00000000
 8004994:	4074b400 	.word	0x4074b400
 8004998:	126e978d 	.word	0x126e978d
 800499c:	40b8ea23 	.word	0x40b8ea23
 80049a0:	40968000 	.word	0x40968000
 80049a4:	3ff00000 	.word	0x3ff00000

080049a8 <predict_aos_happens>:

	return (aodp*(1-m->eccentricity)-AE)*EARTH_RADIUS_KM_WGS84;
}

bool predict_aos_happens(const predict_orbital_elements_t *m, double latitude)
{
 80049a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049ac:	b088      	sub	sp, #32
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	ed87 0b00 	vstr	d0, [r7]
	/* This function returns true if the satellite pointed to by
	   "x" can ever rise above the horizon of the ground station. */

	double lin, apogee;

	if (m->mean_motion==0.0)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	f7fc f890 	bl	8000ae8 <__aeabi_dcmpeq>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <predict_aos_happens+0x2a>
		return false;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e060      	b.n	8004a94 <predict_aos_happens+0xec>
	else
	{
		lin = m->inclination;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

		if (lin >= 90.0) lin = 180.0-lin;
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	4b33      	ldr	r3, [pc, #204]	@ (8004ab0 <predict_aos_happens+0x108>)
 80049e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049e6:	f7fc f89d 	bl	8000b24 <__aeabi_dcmpge>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <predict_aos_happens+0x5e>
 80049f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	492e      	ldr	r1, [pc, #184]	@ (8004ab4 <predict_aos_happens+0x10c>)
 80049fa:	f7fb fc55 	bl	80002a8 <__aeabi_dsub>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	e9c7 2306 	strd	r2, r3, [r7, #24]

		apogee = predict_apogee(m);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff ff66 	bl	80048d8 <predict_apogee>
 8004a0c:	ed87 0b04 	vstr	d0, [r7, #16]

		if ((acos(EARTH_RADIUS_KM_WGS84/(apogee+EARTH_RADIUS_KM_WGS84))+(lin*M_PI/180.0)) > fabs(latitude))
 8004a10:	a323      	add	r3, pc, #140	@ (adr r3, 8004aa0 <predict_aos_happens+0xf8>)
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a1a:	f7fb fc47 	bl	80002ac <__adddf3>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	a11f      	add	r1, pc, #124	@ (adr r1, 8004aa0 <predict_aos_happens+0xf8>)
 8004a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a28:	f7fb ff20 	bl	800086c <__aeabi_ddiv>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	ec43 2b17 	vmov	d7, r2, r3
 8004a34:	eeb0 0a47 	vmov.f32	s0, s14
 8004a38:	eef0 0a67 	vmov.f32	s1, s15
 8004a3c:	f019 f9f8 	bl	801de30 <acos>
 8004a40:	ec59 8b10 	vmov	r8, r9, d0
 8004a44:	a318      	add	r3, pc, #96	@ (adr r3, 8004aa8 <predict_aos_happens+0x100>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a4e:	f7fb fde3 	bl	8000618 <__aeabi_dmul>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	4b15      	ldr	r3, [pc, #84]	@ (8004ab4 <predict_aos_happens+0x10c>)
 8004a60:	f7fb ff04 	bl	800086c <__aeabi_ddiv>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4640      	mov	r0, r8
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	f7fb fc1e 	bl	80002ac <__adddf3>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	683c      	ldr	r4, [r7, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8004a80:	4622      	mov	r2, r4
 8004a82:	462b      	mov	r3, r5
 8004a84:	f7fc f858 	bl	8000b38 <__aeabi_dcmpgt>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <predict_aos_happens+0xea>
			return true;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <predict_aos_happens+0xec>
		else
			return false;
 8004a92:	2300      	movs	r3, #0
	}
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a9e:	bf00      	nop
 8004aa0:	126e978d 	.word	0x126e978d
 8004aa4:	40b8ea23 	.word	0x40b8ea23
 8004aa8:	54442d18 	.word	0x54442d18
 8004aac:	400921fb 	.word	0x400921fb
 8004ab0:	40568000 	.word	0x40568000
 8004ab4:	40668000 	.word	0x40668000

08004ab8 <predict_orbit>:

/* This is the stuff we need to do repetitively while tracking. */
/* This is the old Calc() function. */
int predict_orbit(const predict_orbital_elements_t *orbital_elements, struct predict_position *m, double utc)
{
 8004ab8:	b5b0      	push	{r4, r5, r7, lr}
 8004aba:	b0b6      	sub	sp, #216	@ 0xd8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	ed87 0b00 	vstr	d0, [r7]
	/* Set time to now if now time is provided: */
	if (utc == 0) utc = predict_to_julian(time(NULL));
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ad2:	f7fc f809 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <predict_orbit+0x3a>
 8004adc:	2000      	movs	r0, #0
 8004ade:	f015 fcc3 	bl	801a468 <time>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f7fd ff75 	bl	80029d8 <predict_to_julian>
 8004aee:	ed87 0b00 	vstr	d0, [r7]
	
	/* Satellite position and velocity vectors */
	vec3_set(m->position, 0, 0, 0);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	3310      	adds	r3, #16
 8004af6:	ed9f 2b3a 	vldr	d2, [pc, #232]	@ 8004be0 <predict_orbit+0x128>
 8004afa:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8004be0 <predict_orbit+0x128>
 8004afe:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8004be0 <predict_orbit+0x128>
 8004b02:	4618      	mov	r0, r3
 8004b04:	f00b fe9c 	bl	8010840 <vec3_set>
	vec3_set(m->velocity, 0, 0, 0);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3328      	adds	r3, #40	@ 0x28
 8004b0c:	ed9f 2b34 	vldr	d2, [pc, #208]	@ 8004be0 <predict_orbit+0x128>
 8004b10:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8004be0 <predict_orbit+0x128>
 8004b14:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8004be0 <predict_orbit+0x128>
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f00b fe91 	bl	8010840 <vec3_set>

	m->time = utc;
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b24:	e9c1 2300 	strd	r2, r3, [r1]
	double julTime = utc + JULIAN_TIME_DIFF;
 8004b28:	a331      	add	r3, pc, #196	@ (adr r3, 8004bf0 <predict_orbit+0x138>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b32:	f7fb fbbb 	bl	80002ac <__adddf3>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

	/* Convert satellite's epoch time to Julian  */
	/* and calculate time since epoch in minutes */
	double epoch = 1000.0*orbital_elements->epoch_year + orbital_elements->epoch_day;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fb fcfe 	bl	8000544 <__aeabi_i2d>
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	4b26      	ldr	r3, [pc, #152]	@ (8004be8 <predict_orbit+0x130>)
 8004b4e:	f7fb fd63 	bl	8000618 <__aeabi_dmul>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004b60:	f7fb fba4 	bl	80002ac <__adddf3>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	double jul_epoch = Julian_Date_of_Epoch(epoch);
 8004b6c:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 8004b70:	f00c f86a 	bl	8010c48 <Julian_Date_of_Epoch>
 8004b74:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double tsince = (julTime - jul_epoch)*MINUTES_PER_DAY;
 8004b78:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8004b7c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004b80:	f7fb fb92 	bl	80002a8 <__aeabi_dsub>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	4b16      	ldr	r3, [pc, #88]	@ (8004bec <predict_orbit+0x134>)
 8004b92:	f7fb fd41 	bl	8000618 <__aeabi_dmul>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

	/* Call NORAD routines according to deep-space flag. */
	struct model_output output;
	switch (orbital_elements->ephemeris) {
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00c      	beq.n	8004bc2 <predict_orbit+0x10a>
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d115      	bne.n	8004bd8 <predict_orbit+0x120>
		case EPHEMERIS_SDP4:
			sdp4_predict((struct _sdp4*)orbital_elements->ephemeris_data, tsince, &output);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fa68 	bl	8006090 <sdp4_predict>
			break;
 8004bc0:	e01a      	b.n	8004bf8 <predict_orbit+0x140>
		case EPHEMERIS_SGP4:
			sgp4_predict((struct _sgp4*)orbital_elements->ephemeris_data, tsince, &output);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004bca:	4611      	mov	r1, r2
 8004bcc:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f009 ffc9 	bl	800eb68 <sgp4_predict>
			break;
 8004bd6:	e00f      	b.n	8004bf8 <predict_orbit+0x140>
		default:
			//Panic!
			return -1;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	e132      	b.n	8004e44 <predict_orbit+0x38c>
 8004bde:	bf00      	nop
	...
 8004be8:	408f4000 	.word	0x408f4000
 8004bec:	40968000 	.word	0x40968000
 8004bf0:	40000000 	.word	0x40000000
 8004bf4:	4142a5e7 	.word	0x4142a5e7
	}
	m->position[0] = output.pos[0];
 8004bf8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->position[1] = output.pos[1];
 8004c02:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->position[2] = output.pos[2];
 8004c0c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->velocity[0] = output.vel[0];
 8004c16:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	m->velocity[1] = output.vel[1];
 8004c20:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->velocity[2] = output.vel[2];
 8004c2a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	m->phase = output.phase;
 8004c34:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	m->argument_of_perigee = output.omgadf;
 8004c3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	m->inclination = output.xinck;
 8004c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	m->right_ascension = output.xnodek;
 8004c52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

	/* TODO: Remove? Scale position and velocity vectors to km and km/sec */
	Convert_Sat_State(m->position, m->velocity);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f103 0210 	add.w	r2, r3, #16
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3328      	adds	r3, #40	@ 0x28
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f00b ff4d 	bl	8010b08 <Convert_Sat_State>

	/* Calculate satellite Lat North, Lon East and Alt. */
	geodetic_t sat_geodetic;
	Calculate_LatLonAlt(utc, m->position, &sat_geodetic);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3310      	adds	r3, #16
 8004c72:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004c76:	4611      	mov	r1, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	ed97 0b00 	vldr	d0, [r7]
 8004c7e:	f00c fb2f 	bl	80112e0 <Calculate_LatLonAlt>

	m->latitude = sat_geodetic.lat;
 8004c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	m->longitude = sat_geodetic.lon;
 8004c8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	m->altitude = sat_geodetic.alt;
 8004c96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	// Calculate solar position
	double solar_vector[3];
	sun_predict(m->time, solar_vector);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	ed93 7b00 	vldr	d7, [r3]
 8004ca6:	f107 0310 	add.w	r3, r7, #16
 8004caa:	4618      	mov	r0, r3
 8004cac:	eeb0 0a47 	vmov.f32	s0, s14
 8004cb0:	eef0 0a67 	vmov.f32	s1, s15
 8004cb4:	f00b f980 	bl	800ffb8 <sun_predict>

	// Find eclipse depth and if sat is eclipsed
	m->eclipsed = is_eclipsed(m->position, solar_vector, &m->eclipse_depth);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f103 0010 	add.w	r0, r3, #16
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cc4:	f107 0310 	add.w	r3, r7, #16
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f000 f939 	bl	8004f40 <is_eclipsed>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	661a      	str	r2, [r3, #96]	@ 0x60

	// Calculate footprint
	m->footprint = 2.0*EARTH_RADIUS_KM_WGS84*acos(EARTH_RADIUS_KM_WGS84/(EARTH_RADIUS_KM_WGS84 + m->altitude));
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8004cdc:	a362      	add	r3, pc, #392	@ (adr r3, 8004e68 <predict_orbit+0x3b0>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f7fb fae3 	bl	80002ac <__adddf3>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	a15f      	add	r1, pc, #380	@ (adr r1, 8004e68 <predict_orbit+0x3b0>)
 8004cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cf0:	f7fb fdbc 	bl	800086c <__aeabi_ddiv>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	ec43 2b17 	vmov	d7, r2, r3
 8004cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8004d00:	eef0 0a67 	vmov.f32	s1, s15
 8004d04:	f019 f894 	bl	801de30 <acos>
 8004d08:	ec51 0b10 	vmov	r0, r1, d0
 8004d0c:	a358      	add	r3, pc, #352	@ (adr r3, 8004e70 <predict_orbit+0x3b8>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fc81 	bl	8000618 <__aeabi_dmul>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	// Calculate current number of revolutions around Earth
	double temp = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 8004d20:	a355      	add	r3, pc, #340	@ (adr r3, 8004e78 <predict_orbit+0x3c0>)
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double age = julTime - jul_epoch;
 8004d2a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8004d2e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004d32:	f7fb fab9 	bl	80002a8 <__aeabi_dsub>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	double xno = orbital_elements->mean_motion*temp*MINUTES_PER_DAY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8004d44:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8004d48:	f7fb fc66 	bl	8000618 <__aeabi_dmul>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4610      	mov	r0, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	4b41      	ldr	r3, [pc, #260]	@ (8004e60 <predict_orbit+0x3a8>)
 8004d5a:	f7fb fc5d 	bl	8000618 <__aeabi_dmul>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	double xmo = orbital_elements->mean_anomaly * M_PI / 180.0;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8004d6c:	a338      	add	r3, pc, #224	@ (adr r3, 8004e50 <predict_orbit+0x398>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f7fb fc51 	bl	8000618 <__aeabi_dmul>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	4b38      	ldr	r3, [pc, #224]	@ (8004e64 <predict_orbit+0x3ac>)
 8004d84:	f7fb fd72 	bl	800086c <__aeabi_ddiv>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	m->revolutions = (long)floor((xno*MINUTES_PER_DAY/(M_PI*2.0) + age*orbital_elements->bstar_drag_term)*age + xmo/(2.0*M_PI)) + orbital_elements->revolutions_at_epoch;
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	4b32      	ldr	r3, [pc, #200]	@ (8004e60 <predict_orbit+0x3a8>)
 8004d96:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004d9a:	f7fb fc3d 	bl	8000618 <__aeabi_dmul>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	a32c      	add	r3, pc, #176	@ (adr r3, 8004e58 <predict_orbit+0x3a0>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fd5e 	bl	800086c <__aeabi_ddiv>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8004dbe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8004dc2:	f7fb fc29 	bl	8000618 <__aeabi_dmul>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4620      	mov	r0, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7fb fa6d 	bl	80002ac <__adddf3>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8004dde:	f7fb fc1b 	bl	8000618 <__aeabi_dmul>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4614      	mov	r4, r2
 8004de8:	461d      	mov	r5, r3
 8004dea:	a31b      	add	r3, pc, #108	@ (adr r3, 8004e58 <predict_orbit+0x3a0>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004df4:	f7fb fd3a 	bl	800086c <__aeabi_ddiv>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7fb fa54 	bl	80002ac <__adddf3>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	ec43 2b17 	vmov	d7, r2, r3
 8004e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8004e10:	eef0 0a67 	vmov.f32	s1, s15
 8004e14:	f019 fcf8 	bl	801e808 <floor>
 8004e18:	ec53 2b10 	vmov	r2, r3, d0
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f7fb feaa 	bl	8000b78 <__aeabi_d2iz>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	679a      	str	r2, [r3, #120]	@ 0x78

	//calculate whether orbit is decayed
	m->decayed = predict_decayed(orbital_elements, utc);
 8004e30:	ed97 0b00 	vldr	d0, [r7]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f823 	bl	8004e80 <predict_decayed>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	721a      	strb	r2, [r3, #8]

	return 0;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	37d8      	adds	r7, #216	@ 0xd8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e4c:	f3af 8000 	nop.w
 8004e50:	54442d18 	.word	0x54442d18
 8004e54:	400921fb 	.word	0x400921fb
 8004e58:	54442d18 	.word	0x54442d18
 8004e5c:	401921fb 	.word	0x401921fb
 8004e60:	40968000 	.word	0x40968000
 8004e64:	40668000 	.word	0x40668000
 8004e68:	126e978d 	.word	0x126e978d
 8004e6c:	40b8ea23 	.word	0x40b8ea23
 8004e70:	126e978d 	.word	0x126e978d
 8004e74:	40c8ea23 	.word	0x40c8ea23
 8004e78:	1fbf7384 	.word	0x1fbf7384
 8004e7c:	3ec96b0f 	.word	0x3ec96b0f

08004e80 <predict_decayed>:

bool predict_decayed(const predict_orbital_elements_t *orbital_elements, predict_julian_date_t time)
{
 8004e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e84:	b088      	sub	sp, #32
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	ed87 0b00 	vstr	d0, [r7]
	double satepoch;
	satepoch=DayNum(1,0,orbital_elements->epoch_year)+orbital_elements->epoch_day;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	461a      	mov	r2, r3
 8004e94:	2100      	movs	r1, #0
 8004e96:	2001      	movs	r0, #1
 8004e98:	f00c f942 	bl	8011120 <DayNum>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb fb50 	bl	8000544 <__aeabi_i2d>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004eaa:	f7fb f9ff 	bl	80002ac <__adddf3>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bool has_decayed = false;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	77fb      	strb	r3, [r7, #31]
	if (satepoch + ((16.666666 - orbital_elements->mean_motion)/(10.0*fabs(orbital_elements->derivative_mean_motion))) < time)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8004ec0:	a11c      	add	r1, pc, #112	@ (adr r1, 8004f34 <predict_decayed+0xb4>)
 8004ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ec6:	f7fb f9ef 	bl	80002a8 <__aeabi_dsub>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4690      	mov	r8, r2
 8004ed0:	4699      	mov	r9, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8004ed8:	4614      	mov	r4, r2
 8004eda:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <predict_decayed+0xb0>)
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f7fb fb96 	bl	8000618 <__aeabi_dmul>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	f7fb fcba 	bl	800086c <__aeabi_ddiv>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f04:	f7fb f9d2 	bl	80002ac <__adddf3>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f10:	f7fb fe12 	bl	8000b38 <__aeabi_dcmpgt>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <predict_decayed+0x9e>
	{
		has_decayed = true;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	77fb      	strb	r3, [r7, #31]
	}
	return has_decayed;
 8004f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f2a:	bf00      	nop
 8004f2c:	f3af 8000 	nop.w
 8004f30:	40240000 	.word	0x40240000
 8004f34:	9f7b5aea 	.word	0x9f7b5aea
 8004f38:	4030aaaa 	.word	0x4030aaaa
 8004f3c:	00000000 	.word	0x00000000

08004f40 <is_eclipsed>:

	/* Calculates if a position is eclipsed.  */
bool is_eclipsed(const double pos[3], const double sol[3], double *depth)
{
 8004f40:	b5b0      	push	{r4, r5, r7, lr}
 8004f42:	b096      	sub	sp, #88	@ 0x58
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
	double Rho[3], earth[3];

	/* Determine partial eclipse */
	double sd_earth = asin_(EARTH_RADIUS_KM_WGS84 / vec3_length(pos));
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f00b fc9a 	bl	8010886 <vec3_length>
 8004f52:	ec53 2b10 	vmov	r2, r3, d0
 8004f56:	a14c      	add	r1, pc, #304	@ (adr r1, 8005088 <is_eclipsed+0x148>)
 8004f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f5c:	f7fb fc86 	bl	800086c <__aeabi_ddiv>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	ec43 2b17 	vmov	d7, r2, r3
 8004f68:	eeb0 0a47 	vmov.f32	s0, s14
 8004f6c:	eef0 0a67 	vmov.f32	s1, s15
 8004f70:	f00c fd3a 	bl	80119e8 <asin_>
 8004f74:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
	vec3_sub(sol, pos, Rho);
 8004f78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	68b8      	ldr	r0, [r7, #8]
 8004f82:	f00b fd3e 	bl	8010a02 <vec3_sub>
	double sd_sun = asin_(SOLAR_RADIUS_KM / vec3_length(Rho));
 8004f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f00b fc7b 	bl	8010886 <vec3_length>
 8004f90:	ec53 2b10 	vmov	r2, r3, d0
 8004f94:	a13e      	add	r1, pc, #248	@ (adr r1, 8005090 <is_eclipsed+0x150>)
 8004f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f9a:	f7fb fc67 	bl	800086c <__aeabi_ddiv>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	ec43 2b17 	vmov	d7, r2, r3
 8004fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8004faa:	eef0 0a67 	vmov.f32	s1, s15
 8004fae:	f00c fd1b 	bl	80119e8 <asin_>
 8004fb2:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
	vec3_mul_scalar(pos, -1, earth);
 8004fb6:	f107 0310 	add.w	r3, r7, #16
 8004fba:	4619      	mov	r1, r3
 8004fbc:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8005080 <is_eclipsed+0x140>
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f00b fce9 	bl	8010998 <vec3_mul_scalar>
	
	double delta = acos_( vec3_dot(sol, earth) / vec3_length(sol) / vec3_length(earth) );
 8004fc6:	f107 0310 	add.w	r3, r7, #16
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68b8      	ldr	r0, [r7, #8]
 8004fce:	f00b fca3 	bl	8010918 <vec3_dot>
 8004fd2:	ec55 4b10 	vmov	r4, r5, d0
 8004fd6:	68b8      	ldr	r0, [r7, #8]
 8004fd8:	f00b fc55 	bl	8010886 <vec3_length>
 8004fdc:	ec53 2b10 	vmov	r2, r3, d0
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb fc42 	bl	800086c <__aeabi_ddiv>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	461d      	mov	r5, r3
 8004ff0:	f107 0310 	add.w	r3, r7, #16
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f00b fc46 	bl	8010886 <vec3_length>
 8004ffa:	ec53 2b10 	vmov	r2, r3, d0
 8004ffe:	4620      	mov	r0, r4
 8005000:	4629      	mov	r1, r5
 8005002:	f7fb fc33 	bl	800086c <__aeabi_ddiv>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	ec43 2b17 	vmov	d7, r2, r3
 800500e:	eeb0 0a47 	vmov.f32	s0, s14
 8005012:	eef0 0a67 	vmov.f32	s1, s15
 8005016:	f00c fca7 	bl	8011968 <acos_>
 800501a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	*depth = sd_earth - sd_sun - delta;
 800501e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005022:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005026:	f7fb f93f 	bl	80002a8 <__aeabi_dsub>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4610      	mov	r0, r2
 8005030:	4619      	mov	r1, r3
 8005032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005036:	f7fb f937 	bl	80002a8 <__aeabi_dsub>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	e9c1 2300 	strd	r2, r3, [r1]

	if (sd_earth < sd_sun) return false;
 8005044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005048:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800504c:	f7fb fd56 	bl	8000afc <__aeabi_dcmplt>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <is_eclipsed+0x11a>
 8005056:	2300      	movs	r3, #0
 8005058:	e00e      	b.n	8005078 <is_eclipsed+0x138>
	else if (*depth >= 0) return true;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	f7fb fd5c 	bl	8000b24 <__aeabi_dcmpge>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <is_eclipsed+0x136>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <is_eclipsed+0x138>
	else return false;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3758      	adds	r7, #88	@ 0x58
 800507c:	46bd      	mov	sp, r7
 800507e:	bdb0      	pop	{r4, r5, r7, pc}
 8005080:	00000000 	.word	0x00000000
 8005084:	bff00000 	.word	0xbff00000
 8005088:	126e978d 	.word	0x126e978d
 800508c:	40b8ea23 	.word	0x40b8ea23
 8005090:	00000000 	.word	0x00000000
 8005094:	41253d80 	.word	0x41253d80

08005098 <sdp4_init>:
 * \copyright GPLv2+
 **/
void deep_arg_dynamic_init(const struct _sdp4 *m, deep_arg_dynamic_t *deep_dyn);

void sdp4_init(const predict_orbital_elements_t *tle, struct _sdp4 *m)
{
 8005098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800509c:	b0ba      	sub	sp, #232	@ 0xe8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80050a2:	6239      	str	r1, [r7, #32]
	m->lunarTermsDone = 0;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
	m->resonanceFlag = 0;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
	m->synchronousFlag = 0;
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]

	//Calculate old TLE field values as used in the original sdp4
	double temp_tle = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 80050b6:	a3c9      	add	r3, pc, #804	@ (adr r3, 80053dc <sdp4_init+0x344>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
	m->xnodeo = tle->right_ascension * M_PI / 180.0;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80050c6:	a3b6      	add	r3, pc, #728	@ (adr r3, 80053a0 <sdp4_init+0x308>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb faa4 	bl	8000618 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	4bba      	ldr	r3, [pc, #744]	@ (80053c8 <sdp4_init+0x330>)
 80050de:	f7fb fbc5 	bl	800086c <__aeabi_ddiv>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	6a39      	ldr	r1, [r7, #32]
 80050e8:	e9c1 23b0 	strd	r2, r3, [r1, #704]	@ 0x2c0
	m->omegao = tle->argument_of_perigee * M_PI / 180.0;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80050f2:	a3ab      	add	r3, pc, #684	@ (adr r3, 80053a0 <sdp4_init+0x308>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb fa8e 	bl	8000618 <__aeabi_dmul>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	4baf      	ldr	r3, [pc, #700]	@ (80053c8 <sdp4_init+0x330>)
 800510a:	f7fb fbaf 	bl	800086c <__aeabi_ddiv>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	6a39      	ldr	r1, [r7, #32]
 8005114:	e9c1 23b2 	strd	r2, r3, [r1, #712]	@ 0x2c8
	m->xmo = tle->mean_anomaly * M_PI / 180.0;
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800511e:	a3a0      	add	r3, pc, #640	@ (adr r3, 80053a0 <sdp4_init+0x308>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb fa78 	bl	8000618 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	4ba4      	ldr	r3, [pc, #656]	@ (80053c8 <sdp4_init+0x330>)
 8005136:	f7fb fb99 	bl	800086c <__aeabi_ddiv>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	6a39      	ldr	r1, [r7, #32]
 8005140:	e9c1 23b4 	strd	r2, r3, [r1, #720]	@ 0x2d0
	m->xincl = tle->inclination * M_PI / 180.0;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800514a:	a395      	add	r3, pc, #596	@ (adr r3, 80053a0 <sdp4_init+0x308>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f7fb fa62 	bl	8000618 <__aeabi_dmul>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4610      	mov	r0, r2
 800515a:	4619      	mov	r1, r3
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	4b99      	ldr	r3, [pc, #612]	@ (80053c8 <sdp4_init+0x330>)
 8005162:	f7fb fb83 	bl	800086c <__aeabi_ddiv>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	6a39      	ldr	r1, [r7, #32]
 800516c:	e9c1 23b6 	strd	r2, r3, [r1, #728]	@ 0x2d8
	m->eo = tle->eccentricity;
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005176:	6a39      	ldr	r1, [r7, #32]
 8005178:	e9c1 23b8 	strd	r2, r3, [r1, #736]	@ 0x2e0
	m->xno = tle->mean_motion*temp_tle*MINUTES_PER_DAY;
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8005182:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005186:	f7fb fa47 	bl	8000618 <__aeabi_dmul>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	4b8d      	ldr	r3, [pc, #564]	@ (80053cc <sdp4_init+0x334>)
 8005198:	f7fb fa3e 	bl	8000618 <__aeabi_dmul>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	6a39      	ldr	r1, [r7, #32]
 80051a2:	e9c1 23ba 	strd	r2, r3, [r1, #744]	@ 0x2e8
	m->bstar = tle->bstar_drag_term / AE;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80051ac:	6a39      	ldr	r1, [r7, #32]
 80051ae:	e9c1 23bc 	strd	r2, r3, [r1, #752]	@ 0x2f0
	m->epoch = 1000.0*tle->epoch_year + tle->epoch_day;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fb f9c4 	bl	8000544 <__aeabi_i2d>
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	4b83      	ldr	r3, [pc, #524]	@ (80053d0 <sdp4_init+0x338>)
 80051c2:	f7fb fa29 	bl	8000618 <__aeabi_dmul>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051d4:	f7fb f86a 	bl	80002ac <__adddf3>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	e9c1 23be 	strd	r2, r3, [r1, #760]	@ 0x2f8

	/* Recover original mean motion (xnodp) and   */
	/* semimajor axis (aodp) from input elements. */
	double temp1, temp2, temp3, theta4, a1, a3ovk2, ao, c2, coef, coef1, x1m5th, xhdot1, del1, delo, eeta, eta, etasq, perigee, psisq, tsi, qoms24, s4, pinvsq;

	a1=pow(XKE/m->xno,TWO_THIRD);
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	@ 0x2e8
 80051e8:	a16f      	add	r1, pc, #444	@ (adr r1, 80053a8 <sdp4_init+0x310>)
 80051ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ee:	f7fb fb3d 	bl	800086c <__aeabi_ddiv>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	ec43 2b17 	vmov	d7, r2, r3
 80051fa:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 80053b0 <sdp4_init+0x318>
 80051fe:	eeb0 0a47 	vmov.f32	s0, s14
 8005202:	eef0 0a67 	vmov.f32	s1, s15
 8005206:	f018 ff35 	bl	801e074 <pow>
 800520a:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8
	m->deep_arg.cosio=cos(m->xincl);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	ed93 7bb6 	vldr	d7, [r3, #728]	@ 0x2d8
 8005214:	eeb0 0a47 	vmov.f32	s0, s14
 8005218:	eef0 0a67 	vmov.f32	s1, s15
 800521c:	f019 f960 	bl	801e4e0 <cos>
 8005220:	eeb0 7a40 	vmov.f32	s14, s0
 8005224:	eef0 7a60 	vmov.f32	s15, s1
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
	m->deep_arg.theta2=m->deep_arg.cosio*m->deep_arg.cosio;
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800523a:	f7fb f9ed 	bl	8000618 <__aeabi_dmul>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	6a39      	ldr	r1, [r7, #32]
 8005244:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	m->x3thm1=3*m->deep_arg.theta2-1;
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	4b60      	ldr	r3, [pc, #384]	@ (80053d4 <sdp4_init+0x33c>)
 8005254:	f7fb f9e0 	bl	8000618 <__aeabi_dmul>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	4b5c      	ldr	r3, [pc, #368]	@ (80053d8 <sdp4_init+0x340>)
 8005266:	f7fb f81f 	bl	80002a8 <__aeabi_dsub>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	6a39      	ldr	r1, [r7, #32]
 8005270:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->deep_arg.eosq=m->eo*m->eo;
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	e9d3 01b8 	ldrd	r0, r1, [r3, #736]	@ 0x2e0
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8005280:	f7fb f9ca 	bl	8000618 <__aeabi_dmul>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	6a39      	ldr	r1, [r7, #32]
 800528a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	m->deep_arg.betao2=1-m->deep_arg.eosq;
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	494f      	ldr	r1, [pc, #316]	@ (80053d8 <sdp4_init+0x340>)
 800529a:	f7fb f805 	bl	80002a8 <__aeabi_dsub>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	6a39      	ldr	r1, [r7, #32]
 80052a4:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	m->deep_arg.betao=sqrt(m->deep_arg.betao2);
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80052ae:	eeb0 0a47 	vmov.f32	s0, s14
 80052b2:	eef0 0a67 	vmov.f32	s1, s15
 80052b6:	f018 ff4d 	bl	801e154 <sqrt>
 80052ba:	eeb0 7a40 	vmov.f32	s14, s0
 80052be:	eef0 7a60 	vmov.f32	s15, s1
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
	del1=1.5*CK2*m->x3thm1/(a1*a1*m->deep_arg.betao*m->deep_arg.betao2);
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80052ce:	a33a      	add	r3, pc, #232	@ (adr r3, 80053b8 <sdp4_init+0x320>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fb f9a0 	bl	8000618 <__aeabi_dmul>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4614      	mov	r4, r2
 80052de:	461d      	mov	r5, r3
 80052e0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80052e4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052e8:	f7fb f996 	bl	8000618 <__aeabi_dmul>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80052fa:	f7fb f98d 	bl	8000618 <__aeabi_dmul>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800530c:	f7fb f984 	bl	8000618 <__aeabi_dmul>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4620      	mov	r0, r4
 8005316:	4629      	mov	r1, r5
 8005318:	f7fb faa8 	bl	800086c <__aeabi_ddiv>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	ao=a1*(1-del1*(0.5*TWO_THIRD+del1*(1+134/81*del1)));
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	4b2b      	ldr	r3, [pc, #172]	@ (80053d8 <sdp4_init+0x340>)
 800532a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800532e:	f7fa ffbd 	bl	80002ac <__adddf3>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800533e:	f7fb f96b 	bl	8000618 <__aeabi_dmul>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	a31d      	add	r3, pc, #116	@ (adr r3, 80053c0 <sdp4_init+0x328>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fa ffac 	bl	80002ac <__adddf3>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4610      	mov	r0, r2
 800535a:	4619      	mov	r1, r3
 800535c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005360:	f7fb f95a 	bl	8000618 <__aeabi_dmul>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	f04f 0000 	mov.w	r0, #0
 800536c:	491a      	ldr	r1, [pc, #104]	@ (80053d8 <sdp4_init+0x340>)
 800536e:	f7fa ff9b 	bl	80002a8 <__aeabi_dsub>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800537a:	f7fb f94d 	bl	8000618 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	delo=1.5*CK2*m->x3thm1/(ao*ao*m->deep_arg.betao*m->deep_arg.betao2);
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800538c:	a30a      	add	r3, pc, #40	@ (adr r3, 80053b8 <sdp4_init+0x320>)
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fb f941 	bl	8000618 <__aeabi_dmul>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4614      	mov	r4, r2
 800539c:	461d      	mov	r5, r3
 800539e:	e021      	b.n	80053e4 <sdp4_init+0x34c>
 80053a0:	54442d18 	.word	0x54442d18
 80053a4:	400921fb 	.word	0x400921fb
 80053a8:	d08dcacf 	.word	0xd08dcacf
 80053ac:	3fb309b5 	.word	0x3fb309b5
 80053b0:	55555555 	.word	0x55555555
 80053b4:	3fe55555 	.word	0x3fe55555
 80053b8:	cbb15878 	.word	0xcbb15878
 80053bc:	3f4a9b3a 	.word	0x3f4a9b3a
 80053c0:	55555555 	.word	0x55555555
 80053c4:	3fd55555 	.word	0x3fd55555
 80053c8:	40668000 	.word	0x40668000
 80053cc:	40968000 	.word	0x40968000
 80053d0:	408f4000 	.word	0x408f4000
 80053d4:	40080000 	.word	0x40080000
 80053d8:	3ff00000 	.word	0x3ff00000
 80053dc:	1fbf7384 	.word	0x1fbf7384
 80053e0:	3ec96b0f 	.word	0x3ec96b0f
 80053e4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80053e8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80053ec:	f7fb f914 	bl	8000618 <__aeabi_dmul>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80053fe:	f7fb f90b 	bl	8000618 <__aeabi_dmul>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4610      	mov	r0, r2
 8005408:	4619      	mov	r1, r3
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8005410:	f7fb f902 	bl	8000618 <__aeabi_dmul>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4620      	mov	r0, r4
 800541a:	4629      	mov	r1, r5
 800541c:	f7fb fa26 	bl	800086c <__aeabi_ddiv>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	m->deep_arg.xnodp=m->xno/(1+delo);
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	e9d3 45ba 	ldrd	r4, r5, [r3, #744]	@ 0x2e8
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	4b3d      	ldr	r3, [pc, #244]	@ (8005528 <sdp4_init+0x490>)
 8005434:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005438:	f7fa ff38 	bl	80002ac <__adddf3>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4620      	mov	r0, r4
 8005442:	4629      	mov	r1, r5
 8005444:	f7fb fa12 	bl	800086c <__aeabi_ddiv>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	6a39      	ldr	r1, [r7, #32]
 800544e:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
	m->deep_arg.aodp=ao/(1-delo);
 8005452:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005456:	f04f 0000 	mov.w	r0, #0
 800545a:	4933      	ldr	r1, [pc, #204]	@ (8005528 <sdp4_init+0x490>)
 800545c:	f7fa ff24 	bl	80002a8 <__aeabi_dsub>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005468:	f7fb fa00 	bl	800086c <__aeabi_ddiv>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	6a39      	ldr	r1, [r7, #32]
 8005472:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	/* For perigee below 156 km, the values */
	/* of s and qoms2t are altered.         */

	s4=S_DENSITY_PARAM;
 8005476:	a326      	add	r3, pc, #152	@ (adr r3, 8005510 <sdp4_init+0x478>)
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	qoms24=QOMS2T;
 8005480:	a325      	add	r3, pc, #148	@ (adr r3, 8005518 <sdp4_init+0x480>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	perigee=(m->deep_arg.aodp*(1-m->eo)-AE)*EARTH_RADIUS_KM_WGS84;
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8005496:	f04f 0000 	mov.w	r0, #0
 800549a:	4923      	ldr	r1, [pc, #140]	@ (8005528 <sdp4_init+0x490>)
 800549c:	f7fa ff04 	bl	80002a8 <__aeabi_dsub>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f7fb f8b6 	bl	8000618 <__aeabi_dmul>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4610      	mov	r0, r2
 80054b2:	4619      	mov	r1, r3
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005528 <sdp4_init+0x490>)
 80054ba:	f7fa fef5 	bl	80002a8 <__aeabi_dsub>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	a316      	add	r3, pc, #88	@ (adr r3, 8005520 <sdp4_init+0x488>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f7fb f8a4 	bl	8000618 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (perigee<156.0)
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	4b13      	ldr	r3, [pc, #76]	@ (800552c <sdp4_init+0x494>)
 80054de:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80054e2:	f7fb fb0b 	bl	8000afc <__aeabi_dcmplt>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d062      	beq.n	80055b2 <sdp4_init+0x51a>
	{
		if (perigee<=98.0)
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005530 <sdp4_init+0x498>)
 80054f2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80054f6:	f7fb fb0b 	bl	8000b10 <__aeabi_dcmple>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <sdp4_init+0x4a0>
			s4=20.0;
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <sdp4_init+0x49c>)
 8005506:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
 800550a:	e020      	b.n	800554e <sdp4_init+0x4b6>
 800550c:	f3af 8000 	nop.w
 8005510:	0931012a 	.word	0x0931012a
 8005514:	3ff03217 	.word	0x3ff03217
 8005518:	f9b8574f 	.word	0xf9b8574f
 800551c:	3e2026c6 	.word	0x3e2026c6
 8005520:	126e978d 	.word	0x126e978d
 8005524:	40b8ea23 	.word	0x40b8ea23
 8005528:	3ff00000 	.word	0x3ff00000
 800552c:	40638000 	.word	0x40638000
 8005530:	40588000 	.word	0x40588000
 8005534:	40340000 	.word	0x40340000
		else
			s4=perigee-78.0;
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	4bc4      	ldr	r3, [pc, #784]	@ (8005850 <sdp4_init+0x7b8>)
 800553e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8005542:	f7fa feb1 	bl	80002a8 <__aeabi_dsub>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8

		qoms24=pow((120-s4)*AE/EARTH_RADIUS_KM_WGS84,4);
 800554e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	49bf      	ldr	r1, [pc, #764]	@ (8005854 <sdp4_init+0x7bc>)
 8005558:	f7fa fea6 	bl	80002a8 <__aeabi_dsub>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4610      	mov	r0, r2
 8005562:	4619      	mov	r1, r3
 8005564:	a3b2      	add	r3, pc, #712	@ (adr r3, 8005830 <sdp4_init+0x798>)
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f7fb f97f 	bl	800086c <__aeabi_ddiv>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	ec43 2b17 	vmov	d7, r2, r3
 8005576:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 8005838 <sdp4_init+0x7a0>
 800557a:	eeb0 0a47 	vmov.f32	s0, s14
 800557e:	eef0 0a67 	vmov.f32	s1, s15
 8005582:	f018 fd77 	bl	801e074 <pow>
 8005586:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
		s4=s4/EARTH_RADIUS_KM_WGS84+AE;
 800558a:	a3a9      	add	r3, pc, #676	@ (adr r3, 8005830 <sdp4_init+0x798>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8005594:	f7fb f96a 	bl	800086c <__aeabi_ddiv>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	4bac      	ldr	r3, [pc, #688]	@ (8005858 <sdp4_init+0x7c0>)
 80055a6:	f7fa fe81 	bl	80002ac <__adddf3>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	}

	pinvsq=1/(m->deep_arg.aodp*m->deep_arg.aodp*m->deep_arg.betao2*m->deep_arg.betao2);
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80055be:	f7fb f82b 	bl	8000618 <__aeabi_dmul>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80055d0:	f7fb f822 	bl	8000618 <__aeabi_dmul>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4610      	mov	r0, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80055e2:	f7fb f819 	bl	8000618 <__aeabi_dmul>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	f04f 0000 	mov.w	r0, #0
 80055ee:	499a      	ldr	r1, [pc, #616]	@ (8005858 <sdp4_init+0x7c0>)
 80055f0:	f7fb f93c 	bl	800086c <__aeabi_ddiv>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	m->deep_arg.sing=sin(m->omegao);
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	ed93 7bb2 	vldr	d7, [r3, #712]	@ 0x2c8
 8005602:	eeb0 0a47 	vmov.f32	s0, s14
 8005606:	eef0 0a67 	vmov.f32	s1, s15
 800560a:	f018 ffc5 	bl	801e598 <sin>
 800560e:	eeb0 7a40 	vmov.f32	s14, s0
 8005612:	eef0 7a60 	vmov.f32	s15, s1
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
	m->deep_arg.cosg=cos(m->omegao);
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	ed93 7bb2 	vldr	d7, [r3, #712]	@ 0x2c8
 8005622:	eeb0 0a47 	vmov.f32	s0, s14
 8005626:	eef0 0a67 	vmov.f32	s1, s15
 800562a:	f018 ff59 	bl	801e4e0 <cos>
 800562e:	eeb0 7a40 	vmov.f32	s14, s0
 8005632:	eef0 7a60 	vmov.f32	s15, s1
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
	tsi=1/(m->deep_arg.aodp-s4);
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8005642:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8005646:	f7fa fe2f 	bl	80002a8 <__aeabi_dsub>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	f04f 0000 	mov.w	r0, #0
 8005652:	4981      	ldr	r1, [pc, #516]	@ (8005858 <sdp4_init+0x7c0>)
 8005654:	f7fb f90a 	bl	800086c <__aeabi_ddiv>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	eta=m->deep_arg.aodp*m->eo*tsi;
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 800566c:	f7fa ffd4 	bl	8000618 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005678:	f7fa ffce 	bl	8000618 <__aeabi_dmul>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	etasq=eta*eta;
 8005684:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8005688:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800568c:	f7fa ffc4 	bl	8000618 <__aeabi_dmul>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	eeta=m->eo*eta;
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 800569e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80056a2:	f7fa ffb9 	bl	8000618 <__aeabi_dmul>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	psisq=fabs(1-etasq);
 80056ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	4968      	ldr	r1, [pc, #416]	@ (8005858 <sdp4_init+0x7c0>)
 80056b8:	f7fa fdf6 	bl	80002a8 <__aeabi_dsub>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4611      	mov	r1, r2
 80056c2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80056c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	coef=qoms24*pow(tsi,4);
 80056ca:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8005838 <sdp4_init+0x7a0>
 80056ce:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 80056d2:	f018 fccf 	bl	801e074 <pow>
 80056d6:	ec53 2b10 	vmov	r2, r3, d0
 80056da:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056de:	f7fa ff9b 	bl	8000618 <__aeabi_dmul>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	coef1=coef/pow(psisq,3.5);
 80056ea:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8005840 <sdp4_init+0x7a8>
 80056ee:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 80056f2:	f018 fcbf 	bl	801e074 <pow>
 80056f6:	ec53 2b10 	vmov	r2, r3, d0
 80056fa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80056fe:	f7fb f8b5 	bl	800086c <__aeabi_ddiv>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	c2=coef1*m->deep_arg.xnodp*(m->deep_arg.aodp*(1+1.5*etasq+eeta*(4+etasq))+0.75*CK2*tsi/psisq*m->x3thm1*(8+3*etasq*(8+etasq)));
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 8005710:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005714:	f7fa ff80 	bl	8000618 <__aeabi_dmul>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	4b4c      	ldr	r3, [pc, #304]	@ (800585c <sdp4_init+0x7c4>)
 800572c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005730:	f7fa ff72 	bl	8000618 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4610      	mov	r0, r2
 800573a:	4619      	mov	r1, r3
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	4b45      	ldr	r3, [pc, #276]	@ (8005858 <sdp4_init+0x7c0>)
 8005742:	f7fa fdb3 	bl	80002ac <__adddf3>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4690      	mov	r8, r2
 800574c:	4699      	mov	r9, r3
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	4b43      	ldr	r3, [pc, #268]	@ (8005860 <sdp4_init+0x7c8>)
 8005754:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005758:	f7fa fda8 	bl	80002ac <__adddf3>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4610      	mov	r0, r2
 8005762:	4619      	mov	r1, r3
 8005764:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005768:	f7fa ff56 	bl	8000618 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4640      	mov	r0, r8
 8005772:	4649      	mov	r1, r9
 8005774:	f7fa fd9a 	bl	80002ac <__adddf3>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4620      	mov	r0, r4
 800577e:	4629      	mov	r1, r5
 8005780:	f7fa ff4a 	bl	8000618 <__aeabi_dmul>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4690      	mov	r8, r2
 800578a:	4699      	mov	r9, r3
 800578c:	a32e      	add	r3, pc, #184	@ (adr r3, 8005848 <sdp4_init+0x7b0>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005796:	f7fa ff3f 	bl	8000618 <__aeabi_dmul>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80057a6:	f7fb f861 	bl	800086c <__aeabi_ddiv>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80057b8:	f7fa ff2e 	bl	8000618 <__aeabi_dmul>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4692      	mov	sl, r2
 80057c2:	469b      	mov	fp, r3
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	4b26      	ldr	r3, [pc, #152]	@ (8005864 <sdp4_init+0x7cc>)
 80057ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80057ce:	f7fa ff23 	bl	8000618 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4614      	mov	r4, r2
 80057d8:	461d      	mov	r5, r3
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	4b22      	ldr	r3, [pc, #136]	@ (8005868 <sdp4_init+0x7d0>)
 80057e0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80057e4:	f7fa fd62 	bl	80002ac <__adddf3>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa ff12 	bl	8000618 <__aeabi_dmul>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4610      	mov	r0, r2
 80057fa:	4619      	mov	r1, r3
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	4b19      	ldr	r3, [pc, #100]	@ (8005868 <sdp4_init+0x7d0>)
 8005802:	f7fa fd53 	bl	80002ac <__adddf3>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4650      	mov	r0, sl
 800580c:	4659      	mov	r1, fp
 800580e:	f7fa ff03 	bl	8000618 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4640      	mov	r0, r8
 8005818:	4649      	mov	r1, r9
 800581a:	f7fa fd47 	bl	80002ac <__adddf3>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005826:	f7fa fef7 	bl	8000618 <__aeabi_dmul>
 800582a:	4602      	mov	r2, r0
 800582c:	e01e      	b.n	800586c <sdp4_init+0x7d4>
 800582e:	bf00      	nop
 8005830:	126e978d 	.word	0x126e978d
 8005834:	40b8ea23 	.word	0x40b8ea23
 8005838:	00000000 	.word	0x00000000
 800583c:	40100000 	.word	0x40100000
 8005840:	00000000 	.word	0x00000000
 8005844:	400c0000 	.word	0x400c0000
 8005848:	cbb15878 	.word	0xcbb15878
 800584c:	3f3a9b3a 	.word	0x3f3a9b3a
 8005850:	40538000 	.word	0x40538000
 8005854:	405e0000 	.word	0x405e0000
 8005858:	3ff00000 	.word	0x3ff00000
 800585c:	3ff80000 	.word	0x3ff80000
 8005860:	40100000 	.word	0x40100000
 8005864:	40080000 	.word	0x40080000
 8005868:	40200000 	.word	0x40200000
 800586c:	460b      	mov	r3, r1
 800586e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	m->c1=m->bstar*c2;
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	e9d3 01bc 	ldrd	r0, r1, [r3, #752]	@ 0x2f0
 8005878:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800587c:	f7fa fecc 	bl	8000618 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	6a39      	ldr	r1, [r7, #32]
 8005886:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->deep_arg.sinio=sin(m->xincl);
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	ed93 7bb6 	vldr	d7, [r3, #728]	@ 0x2d8
 8005890:	eeb0 0a47 	vmov.f32	s0, s14
 8005894:	eef0 0a67 	vmov.f32	s1, s15
 8005898:	f018 fe7e 	bl	801e598 <sin>
 800589c:	eeb0 7a40 	vmov.f32	s14, s0
 80058a0:	eef0 7a60 	vmov.f32	s15, s1
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
	a3ovk2=-J3_HARMONIC_WGS72/CK2*pow(AE,3);
 80058aa:	a3d2      	add	r3, pc, #840	@ (adr r3, 8005bf4 <sdp4_init+0xb5c>)
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	m->x1mth2=1-m->deep_arg.theta2;
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80058ba:	f04f 0000 	mov.w	r0, #0
 80058be:	49c8      	ldr	r1, [pc, #800]	@ (8005be0 <sdp4_init+0xb48>)
 80058c0:	f7fa fcf2 	bl	80002a8 <__aeabi_dsub>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	6a39      	ldr	r1, [r7, #32]
 80058ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->c4=2*m->deep_arg.xnodp*coef1*m->deep_arg.aodp*m->deep_arg.betao2*(eta*(2+0.5*etasq)+m->eo*(0.5+2*etasq)-2*CK2*tsi/(m->deep_arg.aodp*psisq)*(-3*m->x3thm1*(1-2*eeta+etasq*(1.5-0.5*eeta))+0.75*m->x1mth2*(2*etasq-eeta*(1+etasq))*cos(2*m->omegao)));
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	f7fa fce8 	bl	80002ac <__adddf3>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4610      	mov	r0, r2
 80058e2:	4619      	mov	r1, r3
 80058e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80058e8:	f7fa fe96 	bl	8000618 <__aeabi_dmul>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80058fa:	f7fa fe8d 	bl	8000618 <__aeabi_dmul>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800590c:	f7fa fe84 	bl	8000618 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	4bb1      	ldr	r3, [pc, #708]	@ (8005be4 <sdp4_init+0xb4c>)
 800591e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005922:	f7fa fe79 	bl	8000618 <__aeabi_dmul>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005936:	f7fa fcb9 	bl	80002ac <__adddf3>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8005946:	f7fa fe67 	bl	8000618 <__aeabi_dmul>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4690      	mov	r8, r2
 8005950:	4699      	mov	r9, r3
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	e9d3 45b8 	ldrd	r4, r5, [r3, #736]	@ 0x2e0
 8005958:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	f7fa fca4 	bl	80002ac <__adddf3>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4610      	mov	r0, r2
 800596a:	4619      	mov	r1, r3
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	4b9c      	ldr	r3, [pc, #624]	@ (8005be4 <sdp4_init+0xb4c>)
 8005972:	f7fa fc9b 	bl	80002ac <__adddf3>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
 800597e:	f7fa fe4b 	bl	8000618 <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4640      	mov	r0, r8
 8005988:	4649      	mov	r1, r9
 800598a:	f7fa fc8f 	bl	80002ac <__adddf3>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005996:	a38a      	add	r3, pc, #552	@ (adr r3, 8005bc0 <sdp4_init+0xb28>)
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059a0:	f7fa fe3a 	bl	8000618 <__aeabi_dmul>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	461d      	mov	r5, r3
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80059b2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80059b6:	f7fa fe2f 	bl	8000618 <__aeabi_dmul>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4620      	mov	r0, r4
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fa ff53 	bl	800086c <__aeabi_ddiv>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	e9c7 2300 	strd	r2, r3, [r7]
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	4b83      	ldr	r3, [pc, #524]	@ (8005be8 <sdp4_init+0xb50>)
 80059da:	f7fa fe1d 	bl	8000618 <__aeabi_dmul>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4690      	mov	r8, r2
 80059e4:	4699      	mov	r9, r3
 80059e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	f7fa fc5d 	bl	80002ac <__adddf3>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	f04f 0000 	mov.w	r0, #0
 80059fa:	4979      	ldr	r1, [pc, #484]	@ (8005be0 <sdp4_init+0xb48>)
 80059fc:	f7fa fc54 	bl	80002a8 <__aeabi_dsub>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	461d      	mov	r5, r3
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	4b75      	ldr	r3, [pc, #468]	@ (8005be4 <sdp4_init+0xb4c>)
 8005a0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a12:	f7fa fe01 	bl	8000618 <__aeabi_dmul>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	f04f 0000 	mov.w	r0, #0
 8005a1e:	4973      	ldr	r1, [pc, #460]	@ (8005bec <sdp4_init+0xb54>)
 8005a20:	f7fa fc42 	bl	80002a8 <__aeabi_dsub>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005a30:	f7fa fdf2 	bl	8000618 <__aeabi_dmul>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	f7fa fc36 	bl	80002ac <__adddf3>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4640      	mov	r0, r8
 8005a46:	4649      	mov	r1, r9
 8005a48:	f7fa fde6 	bl	8000618 <__aeabi_dmul>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4692      	mov	sl, r2
 8005a52:	469b      	mov	fp, r3
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	4b64      	ldr	r3, [pc, #400]	@ (8005bf0 <sdp4_init+0xb58>)
 8005a60:	f7fa fdda 	bl	8000618 <__aeabi_dmul>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4690      	mov	r8, r2
 8005a6a:	4699      	mov	r9, r3
 8005a6c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	f7fa fc1a 	bl	80002ac <__adddf3>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	461d      	mov	r5, r3
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	4b56      	ldr	r3, [pc, #344]	@ (8005be0 <sdp4_init+0xb48>)
 8005a86:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005a8a:	f7fa fc0f 	bl	80002ac <__adddf3>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005a9a:	f7fa fdbd 	bl	8000618 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7fa fbff 	bl	80002a8 <__aeabi_dsub>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4640      	mov	r0, r8
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	f7fa fdb1 	bl	8000618 <__aeabi_dmul>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4614      	mov	r4, r2
 8005abc:	461d      	mov	r5, r3
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	@ 0x2c8
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	f7fa fbf0 	bl	80002ac <__adddf3>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	ec43 2b17 	vmov	d7, r2, r3
 8005ad4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ad8:	eef0 0a67 	vmov.f32	s1, s15
 8005adc:	f018 fd00 	bl	801e4e0 <cos>
 8005ae0:	ec53 2b10 	vmov	r2, r3, d0
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f7fa fd96 	bl	8000618 <__aeabi_dmul>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4650      	mov	r0, sl
 8005af2:	4659      	mov	r1, fp
 8005af4:	f7fa fbda 	bl	80002ac <__adddf3>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b00:	f7fa fd8a 	bl	8000618 <__aeabi_dmul>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b0c:	f7fa fbcc 	bl	80002a8 <__aeabi_dsub>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b18:	f7fa fd7e 	bl	8000618 <__aeabi_dmul>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	6a39      	ldr	r1, [r7, #32]
 8005b22:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	theta4=m->deep_arg.theta2*m->deep_arg.theta2;
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8005b32:	f7fa fd71 	bl	8000618 <__aeabi_dmul>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp1=3*CK2*pinvsq*m->deep_arg.xnodp;
 8005b3e:	a322      	add	r3, pc, #136	@ (adr r3, 8005bc8 <sdp4_init+0xb30>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005b48:	f7fa fd66 	bl	8000618 <__aeabi_dmul>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8005b5a:	f7fa fd5d 	bl	8000618 <__aeabi_dmul>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp2=temp1*CK2*pinvsq;
 8005b66:	a31a      	add	r3, pc, #104	@ (adr r3, 8005bd0 <sdp4_init+0xb38>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005b70:	f7fa fd52 	bl	8000618 <__aeabi_dmul>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005b7c:	f7fa fd4c 	bl	8000618 <__aeabi_dmul>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	temp3=1.25*CK4*pinvsq*pinvsq*m->deep_arg.xnodp;
 8005b88:	a313      	add	r3, pc, #76	@ (adr r3, 8005bd8 <sdp4_init+0xb40>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005b92:	f7fa fd41 	bl	8000618 <__aeabi_dmul>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8005ba2:	f7fa fd39 	bl	8000618 <__aeabi_dmul>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8005bb4:	f7fa fd30 	bl	8000618 <__aeabi_dmul>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	e01e      	b.n	8005bfc <sdp4_init+0xb64>
 8005bbe:	bf00      	nop
 8005bc0:	dd20e5a5 	.word	0xdd20e5a5
 8005bc4:	3f51bcd1 	.word	0x3f51bcd1
 8005bc8:	cbb15878 	.word	0xcbb15878
 8005bcc:	3f5a9b3a 	.word	0x3f5a9b3a
 8005bd0:	dd20e5a5 	.word	0xdd20e5a5
 8005bd4:	3f41bcd1 	.word	0x3f41bcd1
 8005bd8:	bdacda00 	.word	0xbdacda00
 8005bdc:	3eaa0bd0 	.word	0x3eaa0bd0
 8005be0:	3ff00000 	.word	0x3ff00000
 8005be4:	3fe00000 	.word	0x3fe00000
 8005be8:	c0080000 	.word	0xc0080000
 8005bec:	3ff80000 	.word	0x3ff80000
 8005bf0:	3fe80000 	.word	0x3fe80000
 8005bf4:	f3add061 	.word	0xf3add061
 8005bf8:	3f7335f7 	.word	0x3f7335f7
 8005bfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	m->deep_arg.xmdot=m->deep_arg.xnodp+0.5*temp1*m->deep_arg.betao*m->x3thm1+0.0625*temp2*m->deep_arg.betao*(13-78*m->deep_arg.theta2+137*theta4);
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	@ 0xb8
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	4bc7      	ldr	r3, [pc, #796]	@ (8005f28 <sdp4_init+0xe90>)
 8005c0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005c10:	f7fa fd02 	bl	8000618 <__aeabi_dmul>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8005c22:	f7fa fcf9 	bl	8000618 <__aeabi_dmul>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005c34:	f7fa fcf0 	bl	8000618 <__aeabi_dmul>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa fb34 	bl	80002ac <__adddf3>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4614      	mov	r4, r2
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	4bb6      	ldr	r3, [pc, #728]	@ (8005f2c <sdp4_init+0xe94>)
 8005c52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005c56:	f7fa fcdf 	bl	8000618 <__aeabi_dmul>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4610      	mov	r0, r2
 8005c60:	4619      	mov	r1, r3
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8005c68:	f7fa fcd6 	bl	8000618 <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4690      	mov	r8, r2
 8005c72:	4699      	mov	r9, r3
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	4bac      	ldr	r3, [pc, #688]	@ (8005f30 <sdp4_init+0xe98>)
 8005c80:	f7fa fcca 	bl	8000618 <__aeabi_dmul>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	f04f 0000 	mov.w	r0, #0
 8005c8c:	49a9      	ldr	r1, [pc, #676]	@ (8005f34 <sdp4_init+0xe9c>)
 8005c8e:	f7fa fb0b 	bl	80002a8 <__aeabi_dsub>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4692      	mov	sl, r2
 8005c98:	469b      	mov	fp, r3
 8005c9a:	a39f      	add	r3, pc, #636	@ (adr r3, 8005f18 <sdp4_init+0xe80>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005ca4:	f7fa fcb8 	bl	8000618 <__aeabi_dmul>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4650      	mov	r0, sl
 8005cae:	4659      	mov	r1, fp
 8005cb0:	f7fa fafc 	bl	80002ac <__adddf3>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa fcac 	bl	8000618 <__aeabi_dmul>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7fa faf0 	bl	80002ac <__adddf3>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	6a39      	ldr	r1, [r7, #32]
 8005cd2:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	x1m5th=1-5*m->deep_arg.theta2;
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	4b95      	ldr	r3, [pc, #596]	@ (8005f38 <sdp4_init+0xea0>)
 8005ce2:	f7fa fc99 	bl	8000618 <__aeabi_dmul>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	f04f 0000 	mov.w	r0, #0
 8005cee:	4993      	ldr	r1, [pc, #588]	@ (8005f3c <sdp4_init+0xea4>)
 8005cf0:	f7fa fada 	bl	80002a8 <__aeabi_dsub>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	m->deep_arg.omgdot=-0.5*temp1*x1m5th+0.0625*temp2*(7-114*m->deep_arg.theta2+395*theta4)+temp3*(3-36*m->deep_arg.theta2+49*theta4);
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	4b8f      	ldr	r3, [pc, #572]	@ (8005f40 <sdp4_init+0xea8>)
 8005d02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005d06:	f7fa fc87 	bl	8000618 <__aeabi_dmul>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005d16:	f7fa fc7f 	bl	8000618 <__aeabi_dmul>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4614      	mov	r4, r2
 8005d20:	461d      	mov	r5, r3
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	4b81      	ldr	r3, [pc, #516]	@ (8005f2c <sdp4_init+0xe94>)
 8005d28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005d2c:	f7fa fc74 	bl	8000618 <__aeabi_dmul>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4690      	mov	r8, r2
 8005d36:	4699      	mov	r9, r3
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	4b80      	ldr	r3, [pc, #512]	@ (8005f44 <sdp4_init+0xeac>)
 8005d44:	f7fa fc68 	bl	8000618 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	f04f 0000 	mov.w	r0, #0
 8005d50:	497d      	ldr	r1, [pc, #500]	@ (8005f48 <sdp4_init+0xeb0>)
 8005d52:	f7fa faa9 	bl	80002a8 <__aeabi_dsub>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4692      	mov	sl, r2
 8005d5c:	469b      	mov	fp, r3
 8005d5e:	a370      	add	r3, pc, #448	@ (adr r3, 8005f20 <sdp4_init+0xe88>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005d68:	f7fa fc56 	bl	8000618 <__aeabi_dmul>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4650      	mov	r0, sl
 8005d72:	4659      	mov	r1, fp
 8005d74:	f7fa fa9a 	bl	80002ac <__adddf3>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	4649      	mov	r1, r9
 8005d80:	f7fa fc4a 	bl	8000618 <__aeabi_dmul>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4620      	mov	r0, r4
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	f7fa fa8e 	bl	80002ac <__adddf3>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4614      	mov	r4, r2
 8005d96:	461d      	mov	r5, r3
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f4c <sdp4_init+0xeb4>)
 8005da4:	f7fa fc38 	bl	8000618 <__aeabi_dmul>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	f04f 0000 	mov.w	r0, #0
 8005db0:	4967      	ldr	r1, [pc, #412]	@ (8005f50 <sdp4_init+0xeb8>)
 8005db2:	f7fa fa79 	bl	80002a8 <__aeabi_dsub>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	4b64      	ldr	r3, [pc, #400]	@ (8005f54 <sdp4_init+0xebc>)
 8005dc4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005dc8:	f7fa fc26 	bl	8000618 <__aeabi_dmul>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4640      	mov	r0, r8
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	f7fa fa6a 	bl	80002ac <__adddf3>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005de4:	f7fa fc18 	bl	8000618 <__aeabi_dmul>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4620      	mov	r0, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa fa5c 	bl	80002ac <__adddf3>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	6a39      	ldr	r1, [r7, #32]
 8005dfa:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	xhdot1=-temp1*m->deep_arg.cosio;
 8005dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e04:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8005e10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e14:	f7fa fc00 	bl	8000618 <__aeabi_dmul>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	m->deep_arg.xnodot=xhdot1+(0.5*temp2*(4-19*m->deep_arg.theta2)+2*temp3*(3-7*m->deep_arg.theta2))*m->deep_arg.cosio;
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	4b40      	ldr	r3, [pc, #256]	@ (8005f28 <sdp4_init+0xe90>)
 8005e26:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005e2a:	f7fa fbf5 	bl	8000618 <__aeabi_dmul>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4614      	mov	r4, r2
 8005e34:	461d      	mov	r5, r3
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	4b45      	ldr	r3, [pc, #276]	@ (8005f58 <sdp4_init+0xec0>)
 8005e42:	f7fa fbe9 	bl	8000618 <__aeabi_dmul>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	f04f 0000 	mov.w	r0, #0
 8005e4e:	4943      	ldr	r1, [pc, #268]	@ (8005f5c <sdp4_init+0xec4>)
 8005e50:	f7fa fa2a 	bl	80002a8 <__aeabi_dsub>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f7fa fbdc 	bl	8000618 <__aeabi_dmul>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	f7fa fa1c 	bl	80002ac <__adddf3>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4690      	mov	r8, r2
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	4b30      	ldr	r3, [pc, #192]	@ (8005f48 <sdp4_init+0xeb0>)
 8005e88:	f7fa fbc6 	bl	8000618 <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	f04f 0000 	mov.w	r0, #0
 8005e94:	492e      	ldr	r1, [pc, #184]	@ (8005f50 <sdp4_init+0xeb8>)
 8005e96:	f7fa fa07 	bl	80002a8 <__aeabi_dsub>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	f7fa fbb9 	bl	8000618 <__aeabi_dmul>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4629      	mov	r1, r5
 8005eae:	f7fa f9fd 	bl	80002ac <__adddf3>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8005ec0:	f7fa fbaa 	bl	8000618 <__aeabi_dmul>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ed0:	f7fa f9ec 	bl	80002ac <__adddf3>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	6a39      	ldr	r1, [r7, #32]
 8005eda:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	m->xnodcf=3.5*m->deep_arg.betao2*xhdot1*m->c1;
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f60 <sdp4_init+0xec8>)
 8005eea:	f7fa fb95 	bl	8000618 <__aeabi_dmul>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005efa:	f7fa fb8d 	bl	8000618 <__aeabi_dmul>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4610      	mov	r0, r2
 8005f04:	4619      	mov	r1, r3
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005f0c:	f7fa fb84 	bl	8000618 <__aeabi_dmul>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	6a39      	ldr	r1, [r7, #32]
 8005f16:	e025      	b.n	8005f64 <sdp4_init+0xecc>
 8005f18:	00000000 	.word	0x00000000
 8005f1c:	40612000 	.word	0x40612000
 8005f20:	00000000 	.word	0x00000000
 8005f24:	4078b000 	.word	0x4078b000
 8005f28:	3fe00000 	.word	0x3fe00000
 8005f2c:	3fb00000 	.word	0x3fb00000
 8005f30:	40538000 	.word	0x40538000
 8005f34:	402a0000 	.word	0x402a0000
 8005f38:	40140000 	.word	0x40140000
 8005f3c:	3ff00000 	.word	0x3ff00000
 8005f40:	bfe00000 	.word	0xbfe00000
 8005f44:	405c8000 	.word	0x405c8000
 8005f48:	401c0000 	.word	0x401c0000
 8005f4c:	40420000 	.word	0x40420000
 8005f50:	40080000 	.word	0x40080000
 8005f54:	40488000 	.word	0x40488000
 8005f58:	40330000 	.word	0x40330000
 8005f5c:	40100000 	.word	0x40100000
 8005f60:	400c0000 	.word	0x400c0000
 8005f64:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->t2cof=1.5*m->c1;
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	4b41      	ldr	r3, [pc, #260]	@ (8006078 <sdp4_init+0xfe0>)
 8005f74:	f7fa fb50 	bl	8000618 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	6a39      	ldr	r1, [r7, #32]
 8005f7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	m->xlcof=0.125*a3ovk2*m->deep_arg.sinio*(3+5*m->deep_arg.cosio)/(1+m->deep_arg.cosio);
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005f8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8005f8e:	f7fa fb43 	bl	8000618 <__aeabi_dmul>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4610      	mov	r0, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8005fa0:	f7fa fb3a 	bl	8000618 <__aeabi_dmul>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4614      	mov	r4, r2
 8005faa:	461d      	mov	r5, r3
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	4b31      	ldr	r3, [pc, #196]	@ (800607c <sdp4_init+0xfe4>)
 8005fb8:	f7fa fb2e 	bl	8000618 <__aeabi_dmul>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006080 <sdp4_init+0xfe8>)
 8005fca:	f7fa f96f 	bl	80002ac <__adddf3>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f7fa fb1f 	bl	8000618 <__aeabi_dmul>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4614      	mov	r4, r2
 8005fe0:	461d      	mov	r5, r3
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	4b25      	ldr	r3, [pc, #148]	@ (8006084 <sdp4_init+0xfec>)
 8005fee:	f7fa f95d 	bl	80002ac <__adddf3>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7fa fc37 	bl	800086c <__aeabi_ddiv>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	6a39      	ldr	r1, [r7, #32]
 8006004:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	m->aycof=0.25*a3ovk2*m->deep_arg.sinio;
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	4b1e      	ldr	r3, [pc, #120]	@ (8006088 <sdp4_init+0xff0>)
 800600e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8006012:	f7fa fb01 	bl	8000618 <__aeabi_dmul>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8006024:	f7fa faf8 	bl	8000618 <__aeabi_dmul>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	6a39      	ldr	r1, [r7, #32]
 800602e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	m->x7thm1=7*m->deep_arg.theta2-1;
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	4b13      	ldr	r3, [pc, #76]	@ (800608c <sdp4_init+0xff4>)
 800603e:	f7fa faeb 	bl	8000618 <__aeabi_dmul>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <sdp4_init+0xfec>)
 8006050:	f7fa f92a 	bl	80002a8 <__aeabi_dsub>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	6a39      	ldr	r1, [r7, #32]
 800605a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	/* initialize Deep() */
	sdp4_deep_initialize(tle, m, &(m->deep_arg));
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	3358      	adds	r3, #88	@ 0x58
 8006062:	461a      	mov	r2, r3
 8006064:	6a39      	ldr	r1, [r7, #32]
 8006066:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006068:	f001 fa02 	bl	8007470 <sdp4_deep_initialize>
}
 800606c:	bf00      	nop
 800606e:	37e8      	adds	r7, #232	@ 0xe8
 8006070:	46bd      	mov	sp, r7
 8006072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006076:	bf00      	nop
 8006078:	3ff80000 	.word	0x3ff80000
 800607c:	40140000 	.word	0x40140000
 8006080:	40080000 	.word	0x40080000
 8006084:	3ff00000 	.word	0x3ff00000
 8006088:	3fd00000 	.word	0x3fd00000
 800608c:	401c0000 	.word	0x401c0000

08006090 <sdp4_predict>:

void sdp4_predict(const struct _sdp4 *m, double tsince, struct model_output *output)
{
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 8006098:	af00      	add	r7, sp, #0
 800609a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800609e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80060a2:	6018      	str	r0, [r3, #0]
 80060a4:	463b      	mov	r3, r7
 80060a6:	ed83 0b00 	vstr	d0, [r3]
 80060aa:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80060ae:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80060b2:	6019      	str	r1, [r3, #0]
	temp2, temp3, temp4, temp5, temp6;
	double xnodek, xinck;

	/* Initialize dynamic part of deep_arg */
	deep_arg_dynamic_t deep_dyn;
	deep_arg_dynamic_init(m, &deep_dyn);
 80060b4:	f107 0210 	add.w	r2, r7, #16
 80060b8:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80060bc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80060c0:	4611      	mov	r1, r2
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	f005 fa78 	bl	800b5b8 <deep_arg_dynamic_init>

	/* Update for secular gravity and atmospheric drag */
	xmdf=m->xmo+m->deep_arg.xmdot*tsince;
 80060c8:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80060cc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	e9d3 abb4 	ldrd	sl, fp, [r3, #720]	@ 0x2d0
 80060d6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80060da:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 80060e4:	463b      	mov	r3, r7
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f7fa fa95 	bl	8000618 <__aeabi_dmul>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4650      	mov	r0, sl
 80060f4:	4659      	mov	r1, fp
 80060f6:	f7fa f8d9 	bl	80002ac <__adddf3>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	deep_dyn.omgadf=m->omegao+m->deep_arg.omgdot*tsince;
 8006102:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006106:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	e9d3 abb2 	ldrd	sl, fp, [r3, #712]	@ 0x2c8
 8006110:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006114:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800611e:	463b      	mov	r3, r7
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f7fa fa78 	bl	8000618 <__aeabi_dmul>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4650      	mov	r0, sl
 800612e:	4659      	mov	r1, fp
 8006130:	f7fa f8bc 	bl	80002ac <__adddf3>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 800613c:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8006140:	e9c1 2302 	strd	r2, r3, [r1, #8]
	xnoddf=m->xnodeo+m->deep_arg.xnodot*tsince;
 8006144:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006148:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	e9d3 abb0 	ldrd	sl, fp, [r3, #704]	@ 0x2c0
 8006152:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006156:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 8006160:	463b      	mov	r3, r7
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f7fa fa57 	bl	8000618 <__aeabi_dmul>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4650      	mov	r0, sl
 8006170:	4659      	mov	r1, fp
 8006172:	f7fa f89b 	bl	80002ac <__adddf3>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
	tsq=tsince*tsince;
 800617e:	463b      	mov	r3, r7
 8006180:	4619      	mov	r1, r3
 8006182:	e9d1 2300 	ldrd	r2, r3, [r1]
 8006186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800618a:	f7fa fa45 	bl	8000618 <__aeabi_dmul>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
	deep_dyn.xnode=xnoddf+m->xnodcf*tsq;
 8006196:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800619a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80061a4:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 80061a8:	f7fa fa36 	bl	8000618 <__aeabi_dmul>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4610      	mov	r0, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 80061b8:	f7fa f878 	bl	80002ac <__adddf3>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80061c4:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 80061c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	tempa=1-m->c1*tsince;
 80061cc:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80061d0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80061da:	463b      	mov	r3, r7
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7fa fa1a 	bl	8000618 <__aeabi_dmul>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	f04f 0000 	mov.w	r0, #0
 80061ec:	49c4      	ldr	r1, [pc, #784]	@ (8006500 <sdp4_predict+0x470>)
 80061ee:	f7fa f85b 	bl	80002a8 <__aeabi_dsub>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
	tempe=m->bstar*m->c4*tsince;
 80061fa:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80061fe:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	e9d3 01bc 	ldrd	r0, r1, [r3, #752]	@ 0x2f0
 8006208:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800620c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006216:	f7fa f9ff 	bl	8000618 <__aeabi_dmul>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4639      	mov	r1, r7
 8006220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006224:	f7fa f9f8 	bl	8000618 <__aeabi_dmul>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	e9c7 2394 	strd	r2, r3, [r7, #592]	@ 0x250
	templ=m->t2cof*tsq;
 8006230:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006234:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800623e:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8006242:	f7fa f9e9 	bl	8000618 <__aeabi_dmul>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
	deep_dyn.xn=m->deep_arg.xnodp;
 800624e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006252:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800625c:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006260:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8006264:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	/* Update for deep-space secular effects */
	deep_dyn.xll=xmdf;
 8006268:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800626c:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8006270:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 8006274:	e9c1 2300 	strd	r2, r3, [r1]
	deep_dyn.t=tsince;
 8006278:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800627c:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8006280:	463b      	mov	r3, r7
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	sdp4_deep(m, DPSecular, &m->deep_arg, &deep_dyn);
 800628a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800628e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8006298:	f107 0310 	add.w	r3, r7, #16
 800629c:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80062a0:	f5a1 7021 	sub.w	r0, r1, #644	@ 0x284
 80062a4:	2101      	movs	r1, #1
 80062a6:	6800      	ldr	r0, [r0, #0]
 80062a8:	f005 f9b6 	bl	800b618 <sdp4_deep>

	xmdf=deep_dyn.xll;
 80062ac:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80062b0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	a=pow(XKE/deep_dyn.xn,TWO_THIRD)*tempa*tempa;
 80062bc:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80062c0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80062c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80062c8:	a187      	add	r1, pc, #540	@ (adr r1, 80064e8 <sdp4_predict+0x458>)
 80062ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ce:	f7fa facd 	bl	800086c <__aeabi_ddiv>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	ec43 2b17 	vmov	d7, r2, r3
 80062da:	ed9f 1b85 	vldr	d1, [pc, #532]	@ 80064f0 <sdp4_predict+0x460>
 80062de:	eeb0 0a47 	vmov.f32	s0, s14
 80062e2:	eef0 0a67 	vmov.f32	s1, s15
 80062e6:	f017 fec5 	bl	801e074 <pow>
 80062ea:	ec51 0b10 	vmov	r0, r1, d0
 80062ee:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 80062f2:	f7fa f991 	bl	8000618 <__aeabi_dmul>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 80062fe:	f7fa f98b 	bl	8000618 <__aeabi_dmul>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
	deep_dyn.em=deep_dyn.em-tempe;
 800630a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800630e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006312:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006316:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 800631a:	f7f9 ffc5 	bl	80002a8 <__aeabi_dsub>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006326:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 800632a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	xmam=xmdf+m->deep_arg.xnodp*templ;
 800632e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006332:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 800633c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 8006340:	f7fa f96a 	bl	8000618 <__aeabi_dmul>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800634c:	f7f9 ffae 	bl	80002ac <__adddf3>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238

	/* Update for deep-space periodic effects */
	deep_dyn.xll=xmam;
 8006358:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800635c:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8006360:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8006364:	e9c1 2300 	strd	r2, r3, [r1]

	sdp4_deep(m, DPPeriodic,&m->deep_arg, &deep_dyn);
 8006368:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800636c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8006376:	f107 0310 	add.w	r3, r7, #16
 800637a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 800637e:	f5a1 7021 	sub.w	r0, r1, #644	@ 0x284
 8006382:	2102      	movs	r1, #2
 8006384:	6800      	ldr	r0, [r0, #0]
 8006386:	f005 f947 	bl	800b618 <sdp4_deep>

	xmam=deep_dyn.xll;
 800638a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800638e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
	xl=xmam+deep_dyn.omgadf+deep_dyn.xnode;
 800639a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800639e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80063a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80063a6:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 80063aa:	f7f9 ff7f 	bl	80002ac <__adddf3>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4610      	mov	r0, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80063ba:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80063be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80063c2:	f7f9 ff73 	bl	80002ac <__adddf3>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
	beta=sqrt(1-deep_dyn.em*deep_dyn.em);
 80063ce:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80063d2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80063d6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80063da:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80063de:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80063e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80063e6:	f7fa f917 	bl	8000618 <__aeabi_dmul>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	f04f 0000 	mov.w	r0, #0
 80063f2:	4943      	ldr	r1, [pc, #268]	@ (8006500 <sdp4_predict+0x470>)
 80063f4:	f7f9 ff58 	bl	80002a8 <__aeabi_dsub>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	ec43 2b17 	vmov	d7, r2, r3
 8006400:	eeb0 0a47 	vmov.f32	s0, s14
 8006404:	eef0 0a67 	vmov.f32	s1, s15
 8006408:	f017 fea4 	bl	801e154 <sqrt>
 800640c:	ed87 0b8a 	vstr	d0, [r7, #552]	@ 0x228
	deep_dyn.xn=XKE/pow(a,1.5);
 8006410:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 80064f8 <sdp4_predict+0x468>
 8006414:	ed97 0b90 	vldr	d0, [r7, #576]	@ 0x240
 8006418:	f017 fe2c 	bl	801e074 <pow>
 800641c:	ec53 2b10 	vmov	r2, r3, d0
 8006420:	a131      	add	r1, pc, #196	@ (adr r1, 80064e8 <sdp4_predict+0x458>)
 8006422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006426:	f7fa fa21 	bl	800086c <__aeabi_ddiv>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006432:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8006436:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	/* Long period periodics */
	axn=deep_dyn.em*cos(deep_dyn.omgadf);
 800643a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800643e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006442:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8006446:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800644a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800644e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006452:	eeb0 0a47 	vmov.f32	s0, s14
 8006456:	eef0 0a67 	vmov.f32	s1, s15
 800645a:	f018 f841 	bl	801e4e0 <cos>
 800645e:	ec53 2b10 	vmov	r2, r3, d0
 8006462:	4650      	mov	r0, sl
 8006464:	4659      	mov	r1, fp
 8006466:	f7fa f8d7 	bl	8000618 <__aeabi_dmul>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
	temp=1/(a*beta*beta);
 8006472:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8006476:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 800647a:	f7fa f8cd 	bl	8000618 <__aeabi_dmul>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4610      	mov	r0, r2
 8006484:	4619      	mov	r1, r3
 8006486:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 800648a:	f7fa f8c5 	bl	8000618 <__aeabi_dmul>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	491a      	ldr	r1, [pc, #104]	@ (8006500 <sdp4_predict+0x470>)
 8006498:	f7fa f9e8 	bl	800086c <__aeabi_ddiv>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	xll=temp*m->xlcof*axn;
 80064a4:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80064a8:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80064b2:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 80064b6:	f7fa f8af 	bl	8000618 <__aeabi_dmul>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80064c2:	f7fa f8a9 	bl	8000618 <__aeabi_dmul>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	aynl=temp*m->aycof;
 80064ce:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80064d2:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80064dc:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80064e0:	e010      	b.n	8006504 <sdp4_predict+0x474>
 80064e2:	bf00      	nop
 80064e4:	f3af 8000 	nop.w
 80064e8:	d08dcacf 	.word	0xd08dcacf
 80064ec:	3fb309b5 	.word	0x3fb309b5
 80064f0:	55555555 	.word	0x55555555
 80064f4:	3fe55555 	.word	0x3fe55555
 80064f8:	00000000 	.word	0x00000000
 80064fc:	3ff80000 	.word	0x3ff80000
 8006500:	3ff00000 	.word	0x3ff00000
 8006504:	f7fa f888 	bl	8000618 <__aeabi_dmul>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
	xlt=xl+xll;
 8006510:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8006514:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8006518:	f7f9 fec8 	bl	80002ac <__adddf3>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	ayn=deep_dyn.em*sin(deep_dyn.omgadf)+aynl;
 8006524:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006528:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800652c:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8006530:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006534:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006538:	ed93 7b02 	vldr	d7, [r3, #8]
 800653c:	eeb0 0a47 	vmov.f32	s0, s14
 8006540:	eef0 0a67 	vmov.f32	s1, s15
 8006544:	f018 f828 	bl	801e598 <sin>
 8006548:	ec53 2b10 	vmov	r2, r3, d0
 800654c:	4650      	mov	r0, sl
 800654e:	4659      	mov	r1, fp
 8006550:	f7fa f862 	bl	8000618 <__aeabi_dmul>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 800655c:	f7f9 fea6 	bl	80002ac <__adddf3>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8

	/* Solve Kepler's Equation */
	capu=FMod2p(xlt-deep_dyn.xnode);
 8006568:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800656c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006570:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006574:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8006578:	f7f9 fe96 	bl	80002a8 <__aeabi_dsub>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	ec43 2b17 	vmov	d7, r2, r3
 8006584:	eeb0 0a47 	vmov.f32	s0, s14
 8006588:	eef0 0a67 	vmov.f32	s1, s15
 800658c:	f00a fa88 	bl	8010aa0 <FMod2p>
 8006590:	ed87 0b7c 	vstr	d0, [r7, #496]	@ 0x1f0
	temp2=capu;
 8006594:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8006598:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	i=0;
 800659c:	2300      	movs	r3, #0
 800659e:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c

	do
	{
		sinepw=sin(temp2);
 80065a2:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 80065a6:	f017 fff7 	bl	801e598 <sin>
 80065aa:	ed87 0b7a 	vstr	d0, [r7, #488]	@ 0x1e8
		cosepw=cos(temp2);
 80065ae:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 80065b2:	f017 ff95 	bl	801e4e0 <cos>
 80065b6:	ed87 0b78 	vstr	d0, [r7, #480]	@ 0x1e0
		temp3=axn*sinepw;
 80065ba:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80065be:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80065c2:	f7fa f829 	bl	8000618 <__aeabi_dmul>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		temp4=ayn*cosepw;
 80065ce:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80065d2:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 80065d6:	f7fa f81f 	bl	8000618 <__aeabi_dmul>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
		temp5=axn*cosepw;
 80065e2:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80065e6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80065ea:	f7fa f815 	bl	8000618 <__aeabi_dmul>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
		temp6=ayn*sinepw;
 80065f6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80065fa:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 80065fe:	f7fa f80b 	bl	8000618 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
		epw=(capu-temp4+temp3-temp2)/(1-temp5-temp6)+temp2;
 800660a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800660e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8006612:	f7f9 fe49 	bl	80002a8 <__aeabi_dsub>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4610      	mov	r0, r2
 800661c:	4619      	mov	r1, r3
 800661e:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8006622:	f7f9 fe43 	bl	80002ac <__adddf3>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4610      	mov	r0, r2
 800662c:	4619      	mov	r1, r3
 800662e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8006632:	f7f9 fe39 	bl	80002a8 <__aeabi_dsub>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4692      	mov	sl, r2
 800663c:	469b      	mov	fp, r3
 800663e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	4920      	ldr	r1, [pc, #128]	@ (80066c8 <sdp4_predict+0x638>)
 8006648:	f7f9 fe2e 	bl	80002a8 <__aeabi_dsub>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8006658:	f7f9 fe26 	bl	80002a8 <__aeabi_dsub>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4650      	mov	r0, sl
 8006662:	4659      	mov	r1, fp
 8006664:	f7fa f902 	bl	800086c <__aeabi_ddiv>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8006670:	f7f9 fe1c 	bl	80002ac <__adddf3>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8

		if (fabs(epw-temp2)<=E6A)
 800667c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8006680:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8006684:	f7f9 fe10 	bl	80002a8 <__aeabi_dsub>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4690      	mov	r8, r2
 800668e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8006692:	a30b      	add	r3, pc, #44	@ (adr r3, 80066c0 <sdp4_predict+0x630>)
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	4640      	mov	r0, r8
 800669a:	4649      	mov	r1, r9
 800669c:	f7fa fa38 	bl	8000b10 <__aeabi_dcmple>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d112      	bne.n	80066cc <sdp4_predict+0x63c>
			break;

		temp2=epw;
 80066a6:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 80066aa:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280

	} while (i++<10);
 80066ae:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 80066b8:	2b09      	cmp	r3, #9
 80066ba:	f77f af72 	ble.w	80065a2 <sdp4_predict+0x512>
 80066be:	e006      	b.n	80066ce <sdp4_predict+0x63e>
 80066c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80066c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80066c8:	3ff00000 	.word	0x3ff00000
			break;
 80066cc:	bf00      	nop

	/* Short period preliminary quantities */
	ecose=temp5+temp6;
 80066ce:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80066d2:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 80066d6:	f7f9 fde9 	bl	80002ac <__adddf3>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
	esine=temp3-temp4;
 80066e2:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80066e6:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80066ea:	f7f9 fddd 	bl	80002a8 <__aeabi_dsub>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
	elsq=axn*axn+ayn*ayn;
 80066f6:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 80066fa:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80066fe:	f7f9 ff8b 	bl	8000618 <__aeabi_dmul>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4690      	mov	r8, r2
 8006708:	4699      	mov	r9, r3
 800670a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800670e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8006712:	f7f9 ff81 	bl	8000618 <__aeabi_dmul>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4640      	mov	r0, r8
 800671c:	4649      	mov	r1, r9
 800671e:	f7f9 fdc5 	bl	80002ac <__adddf3>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
	temp=1-elsq;
 800672a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 800672e:	f04f 0000 	mov.w	r0, #0
 8006732:	49c5      	ldr	r1, [pc, #788]	@ (8006a48 <sdp4_predict+0x9b8>)
 8006734:	f7f9 fdb8 	bl	80002a8 <__aeabi_dsub>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	pl=a*temp;
 8006740:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8006744:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8006748:	f7f9 ff66 	bl	8000618 <__aeabi_dmul>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
	r=a*(1-ecose);
 8006754:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8006758:	f04f 0000 	mov.w	r0, #0
 800675c:	49ba      	ldr	r1, [pc, #744]	@ (8006a48 <sdp4_predict+0x9b8>)
 800675e:	f7f9 fda3 	bl	80002a8 <__aeabi_dsub>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 800676a:	460e      	mov	r6, r1
 800676c:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8006770:	f7f9 ff52 	bl	8000618 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9c6 2300 	strd	r2, r3, [r6]
	temp1=1/r;
 800677c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8006780:	461e      	mov	r6, r3
 8006782:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f04f 0000 	mov.w	r0, #0
 800678e:	49ae      	ldr	r1, [pc, #696]	@ (8006a48 <sdp4_predict+0x9b8>)
 8006790:	f7fa f86c 	bl	800086c <__aeabi_ddiv>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdot=XKE*sqrt(a)*esine*temp1;
 800679c:	ed97 0b90 	vldr	d0, [r7, #576]	@ 0x240
 80067a0:	f017 fcd8 	bl	801e154 <sqrt>
 80067a4:	ec51 0b10 	vmov	r0, r1, d0
 80067a8:	a3a3      	add	r3, pc, #652	@ (adr r3, 8006a38 <sdp4_predict+0x9a8>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 ff33 	bl	8000618 <__aeabi_dmul>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80067be:	f7f9 ff2b 	bl	8000618 <__aeabi_dmul>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80067ca:	460e      	mov	r6, r1
 80067cc:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 80067d0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80067d4:	f7f9 ff20 	bl	8000618 <__aeabi_dmul>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	e9c6 2300 	strd	r2, r3, [r6]
	rfdot=XKE*sqrt(pl)*temp1;
 80067e0:	ed97 0b66 	vldr	d0, [r7, #408]	@ 0x198
 80067e4:	f017 fcb6 	bl	801e154 <sqrt>
 80067e8:	ec51 0b10 	vmov	r0, r1, d0
 80067ec:	a392      	add	r3, pc, #584	@ (adr r3, 8006a38 <sdp4_predict+0x9a8>)
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	f7f9 ff11 	bl	8000618 <__aeabi_dmul>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80067fe:	460e      	mov	r6, r1
 8006800:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 8006804:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006808:	f7f9 ff06 	bl	8000618 <__aeabi_dmul>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=a*temp1;
 8006814:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8006818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800681c:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8006820:	f7f9 fefa 	bl	8000618 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	betal=sqrt(temp);
 800682c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8006830:	461e      	mov	r6, r3
 8006832:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 8006836:	f017 fc8d 	bl	801e154 <sqrt>
 800683a:	ed86 0b00 	vstr	d0, [r6]
	temp3=1/(1+betal);
 800683e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8006842:	4619      	mov	r1, r3
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	4b7f      	ldr	r3, [pc, #508]	@ (8006a48 <sdp4_predict+0x9b8>)
 800684a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800684e:	f7f9 fd2d 	bl	80002ac <__adddf3>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	f04f 0000 	mov.w	r0, #0
 800685a:	497b      	ldr	r1, [pc, #492]	@ (8006a48 <sdp4_predict+0x9b8>)
 800685c:	f7fa f806 	bl	800086c <__aeabi_ddiv>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
	cosu=temp2*(cosepw-axn+ayn*esine*temp3);
 8006868:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 800686c:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8006870:	f7f9 fd1a 	bl	80002a8 <__aeabi_dsub>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4690      	mov	r8, r2
 800687a:	4699      	mov	r9, r3
 800687c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8006880:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8006884:	f7f9 fec8 	bl	8000618 <__aeabi_dmul>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4610      	mov	r0, r2
 800688e:	4619      	mov	r1, r3
 8006890:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8006894:	f7f9 fec0 	bl	8000618 <__aeabi_dmul>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7f9 fd04 	bl	80002ac <__adddf3>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80068ac:	460e      	mov	r6, r1
 80068ae:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 80068b2:	f7f9 feb1 	bl	8000618 <__aeabi_dmul>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	e946 2302 	strd	r2, r3, [r6, #-8]
	sinu=temp2*(sinepw-ayn-axn*esine*temp3);
 80068be:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80068c2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80068c6:	f7f9 fcef 	bl	80002a8 <__aeabi_dsub>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4690      	mov	r8, r2
 80068d0:	4699      	mov	r9, r3
 80068d2:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80068d6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80068da:	f7f9 fe9d 	bl	8000618 <__aeabi_dmul>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4610      	mov	r0, r2
 80068e4:	4619      	mov	r1, r3
 80068e6:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 80068ea:	f7f9 fe95 	bl	8000618 <__aeabi_dmul>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4640      	mov	r0, r8
 80068f4:	4649      	mov	r1, r9
 80068f6:	f7f9 fcd7 	bl	80002a8 <__aeabi_dsub>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8006902:	460e      	mov	r6, r1
 8006904:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8006908:	f7f9 fe86 	bl	8000618 <__aeabi_dmul>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	e9c6 2300 	strd	r2, r3, [r6]
	u=atan2(sinu,cosu);
 8006914:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8006918:	461e      	mov	r6, r3
 800691a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800691e:	461a      	mov	r2, r3
 8006920:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8006924:	ed12 1b02 	vldr	d1, [r2, #-8]
 8006928:	ed93 0b00 	vldr	d0, [r3]
 800692c:	f017 fae8 	bl	801df00 <atan2>
 8006930:	ed06 0b02 	vstr	d0, [r6, #-8]
	sin2u=2*sinu*cosu;
 8006934:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8006938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	f7f9 fcb4 	bl	80002ac <__adddf3>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800694c:	460e      	mov	r6, r1
 800694e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8006952:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006956:	f7f9 fe5f 	bl	8000618 <__aeabi_dmul>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	e9c6 2300 	strd	r2, r3, [r6]
	cos2u=2*cosu*cosu-1;
 8006962:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8006966:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	f7f9 fc9d 	bl	80002ac <__adddf3>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4610      	mov	r0, r2
 8006978:	4619      	mov	r1, r3
 800697a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800697e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006982:	f7f9 fe49 	bl	8000618 <__aeabi_dmul>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4610      	mov	r0, r2
 800698c:	4619      	mov	r1, r3
 800698e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006992:	461e      	mov	r6, r3
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	4b2b      	ldr	r3, [pc, #172]	@ (8006a48 <sdp4_predict+0x9b8>)
 800699a:	f7f9 fc85 	bl	80002a8 <__aeabi_dsub>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp=1/pl;
 80069a6:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80069aa:	f04f 0000 	mov.w	r0, #0
 80069ae:	4926      	ldr	r1, [pc, #152]	@ (8006a48 <sdp4_predict+0x9b8>)
 80069b0:	f7f9 ff5c 	bl	800086c <__aeabi_ddiv>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	temp1=CK2*temp;
 80069bc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80069c0:	461e      	mov	r6, r3
 80069c2:	a31f      	add	r3, pc, #124	@ (adr r3, 8006a40 <sdp4_predict+0x9b0>)
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80069cc:	f7f9 fe24 	bl	8000618 <__aeabi_dmul>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=temp1*temp;
 80069d8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80069dc:	4619      	mov	r1, r3
 80069de:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 80069e2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80069e6:	f7f9 fe17 	bl	8000618 <__aeabi_dmul>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280

	/* Update for short periodics */
	rk=r*(1-1.5*temp2*betal*m->x3thm1)+0.5*temp1*m->x1mth2*cos2u;
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	4b15      	ldr	r3, [pc, #84]	@ (8006a4c <sdp4_predict+0x9bc>)
 80069f8:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 80069fc:	f7f9 fe0c 	bl	8000618 <__aeabi_dmul>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4610      	mov	r0, r2
 8006a06:	4619      	mov	r1, r3
 8006a08:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fe02 	bl	8000618 <__aeabi_dmul>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006a20:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006a2a:	f7f9 fdf5 	bl	8000618 <__aeabi_dmul>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	e00b      	b.n	8006a50 <sdp4_predict+0x9c0>
 8006a38:	d08dcacf 	.word	0xd08dcacf
 8006a3c:	3fb309b5 	.word	0x3fb309b5
 8006a40:	dd20e5a5 	.word	0xdd20e5a5
 8006a44:	3f41bcd1 	.word	0x3f41bcd1
 8006a48:	3ff00000 	.word	0x3ff00000
 8006a4c:	3ff80000 	.word	0x3ff80000
 8006a50:	49d2      	ldr	r1, [pc, #840]	@ (8006d9c <sdp4_predict+0xd0c>)
 8006a52:	f7f9 fc29 	bl	80002a8 <__aeabi_dsub>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fdd7 	bl	8000618 <__aeabi_dmul>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4690      	mov	r8, r2
 8006a70:	4699      	mov	r9, r3
 8006a72:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8006a76:	4619      	mov	r1, r3
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	4bc8      	ldr	r3, [pc, #800]	@ (8006da0 <sdp4_predict+0xd10>)
 8006a7e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006a82:	f7f9 fdc9 	bl	8000618 <__aeabi_dmul>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006a92:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a9c:	f7f9 fdbc 	bl	8000618 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006aac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ab0:	f7f9 fdb2 	bl	8000618 <__aeabi_dmul>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8006abc:	460e      	mov	r6, r1
 8006abe:	4640      	mov	r0, r8
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	f7f9 fbf3 	bl	80002ac <__adddf3>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9c6 2300 	strd	r2, r3, [r6]
	uk=u-0.25*temp2*m->x7thm1*sin2u;
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	4bb4      	ldr	r3, [pc, #720]	@ (8006da4 <sdp4_predict+0xd14>)
 8006ad4:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8006ad8:	f7f9 fd9e 	bl	8000618 <__aeabi_dmul>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006ae8:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006af2:	f7f9 fd91 	bl	8000618 <__aeabi_dmul>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4610      	mov	r0, r2
 8006afc:	4619      	mov	r1, r3
 8006afe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f7f9 fd87 	bl	8000618 <__aeabi_dmul>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8006b12:	460e      	mov	r6, r1
 8006b14:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8006b18:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006b1c:	f7f9 fbc4 	bl	80002a8 <__aeabi_dsub>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	e946 2302 	strd	r2, r3, [r6, #-8]
	xnodek=deep_dyn.xnode+1.5*temp2*m->deep_arg.cosio*sin2u;
 8006b28:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006b2c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006b30:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	4b9b      	ldr	r3, [pc, #620]	@ (8006da8 <sdp4_predict+0xd18>)
 8006b3a:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8006b3e:	f7f9 fd6b 	bl	8000618 <__aeabi_dmul>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4610      	mov	r0, r2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006b4e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8006b58:	f7f9 fd5e 	bl	8000618 <__aeabi_dmul>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4610      	mov	r0, r2
 8006b62:	4619      	mov	r1, r3
 8006b64:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fd54 	bl	8000618 <__aeabi_dmul>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8006b78:	460e      	mov	r6, r1
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	f7f9 fb95 	bl	80002ac <__adddf3>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	e9c6 2300 	strd	r2, r3, [r6]
	xinck=deep_dyn.xinc+1.5*temp2*m->deep_arg.cosio*m->deep_arg.sinio*cos2u;
 8006b8a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006b8e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006b92:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	4b83      	ldr	r3, [pc, #524]	@ (8006da8 <sdp4_predict+0xd18>)
 8006b9c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8006ba0:	f7f9 fd3a 	bl	8000618 <__aeabi_dmul>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006bb0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8006bba:	f7f9 fd2d 	bl	8000618 <__aeabi_dmul>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006bca:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8006bd4:	f7f9 fd20 	bl	8000618 <__aeabi_dmul>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006be4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006be8:	f7f9 fd16 	bl	8000618 <__aeabi_dmul>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8006bf4:	460e      	mov	r6, r1
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	4649      	mov	r1, r9
 8006bfa:	f7f9 fb57 	bl	80002ac <__adddf3>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdotk=rdot-deep_dyn.xn*temp1*m->x1mth2*sin2u;
 8006c06:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006c0a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006c0e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006c12:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8006c16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c1a:	f7f9 fcfd 	bl	8000618 <__aeabi_dmul>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006c2a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c34:	f7f9 fcf0 	bl	8000618 <__aeabi_dmul>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fce6 	bl	8000618 <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8006c54:	460e      	mov	r6, r1
 8006c56:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8006c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c5e:	f7f9 fb23 	bl	80002a8 <__aeabi_dsub>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	e9c6 2300 	strd	r2, r3, [r6]
	rfdotk=rfdot+deep_dyn.xn*temp1*(m->x1mth2*cos2u+1.5*m->x3thm1);
 8006c6a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006c6e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006c72:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006c76:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8006c7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c7e:	f7f9 fccb 	bl	8000618 <__aeabi_dmul>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4690      	mov	r8, r2
 8006c88:	4699      	mov	r9, r3
 8006c8a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006c8e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006c98:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8006c9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ca0:	f7f9 fcba 	bl	8000618 <__aeabi_dmul>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4692      	mov	sl, r2
 8006caa:	469b      	mov	fp, r3
 8006cac:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8006cb0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8006da8 <sdp4_predict+0xd18>)
 8006cc0:	f7f9 fcaa 	bl	8000618 <__aeabi_dmul>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4650      	mov	r0, sl
 8006cca:	4659      	mov	r1, fp
 8006ccc:	f7f9 faee 	bl	80002ac <__adddf3>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	f7f9 fc9e 	bl	8000618 <__aeabi_dmul>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8006ce4:	460e      	mov	r6, r1
 8006ce6:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8006cea:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006cee:	f7f9 fadd 	bl	80002ac <__adddf3>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	e946 2302 	strd	r2, r3, [r6, #-8]

	/* Orientation vectors */
	sinuk=sin(uk);
 8006cfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cfe:	461e      	mov	r6, r3
 8006d00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006d04:	ed13 0b02 	vldr	d0, [r3, #-8]
 8006d08:	f017 fc46 	bl	801e598 <sin>
 8006d0c:	ed86 0b00 	vstr	d0, [r6]
	cosuk=cos(uk);
 8006d10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d14:	461e      	mov	r6, r3
 8006d16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006d1a:	ed13 0b02 	vldr	d0, [r3, #-8]
 8006d1e:	f017 fbdf 	bl	801e4e0 <cos>
 8006d22:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinik=sin(xinck);
 8006d26:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006d2a:	461e      	mov	r6, r3
 8006d2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d30:	ed13 0b02 	vldr	d0, [r3, #-8]
 8006d34:	f017 fc30 	bl	801e598 <sin>
 8006d38:	ed86 0b00 	vstr	d0, [r6]
	cosik=cos(xinck);
 8006d3c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006d40:	461e      	mov	r6, r3
 8006d42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d46:	ed13 0b02 	vldr	d0, [r3, #-8]
 8006d4a:	f017 fbc9 	bl	801e4e0 <cos>
 8006d4e:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinnok=sin(xnodek);
 8006d52:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006d56:	461e      	mov	r6, r3
 8006d58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d5c:	ed93 0b00 	vldr	d0, [r3]
 8006d60:	f017 fc1a 	bl	801e598 <sin>
 8006d64:	ed86 0b00 	vstr	d0, [r6]
	cosnok=cos(xnodek);
 8006d68:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006d6c:	461e      	mov	r6, r3
 8006d6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d72:	ed93 0b00 	vldr	d0, [r3]
 8006d76:	f017 fbb3 	bl	801e4e0 <cos>
 8006d7a:	ed06 0b02 	vstr	d0, [r6, #-8]
	xmx=-sinnok*cosik;
 8006d7e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006d82:	681c      	ldr	r4, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006d8a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8006d8e:	461e      	mov	r6, r3
 8006d90:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006d94:	4619      	mov	r1, r3
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	e007      	b.n	8006dac <sdp4_predict+0xd1c>
 8006d9c:	3ff00000 	.word	0x3ff00000
 8006da0:	3fe00000 	.word	0x3fe00000
 8006da4:	3fd00000 	.word	0x3fd00000
 8006da8:	3ff80000 	.word	0x3ff80000
 8006dac:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006db0:	f7f9 fc32 	bl	8000618 <__aeabi_dmul>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	e9c6 2300 	strd	r2, r3, [r6]
	xmy=cosnok*cosik;
 8006dbc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8006dc0:	461c      	mov	r4, r3
 8006dc2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006dcc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dd0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006dd4:	f7f9 fc20 	bl	8000618 <__aeabi_dmul>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	e944 2302 	strd	r2, r3, [r4, #-8]
	ux=xmx*sinuk+cosnok*cosuk;
 8006de0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8006de4:	4619      	mov	r1, r3
 8006de6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df2:	f7f9 fc11 	bl	8000618 <__aeabi_dmul>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4614      	mov	r4, r2
 8006dfc:	461d      	mov	r5, r3
 8006dfe:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006e02:	4619      	mov	r1, r3
 8006e04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e0c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006e10:	f7f9 fc02 	bl	8000618 <__aeabi_dmul>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8006e1c:	460e      	mov	r6, r1
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fa43 	bl	80002ac <__adddf3>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	e9c6 2300 	strd	r2, r3, [r6]
	uy=xmy*sinuk+sinnok*cosuk;
 8006e2e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8006e32:	4619      	mov	r1, r3
 8006e34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006e40:	f7f9 fbea 	bl	8000618 <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006e50:	4619      	mov	r1, r3
 8006e52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e5e:	f7f9 fbdb 	bl	8000618 <__aeabi_dmul>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8006e6a:	460e      	mov	r6, r1
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 fa1c 	bl	80002ac <__adddf3>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	e946 2302 	strd	r2, r3, [r6, #-8]
	uz=sinik*sinuk;
 8006e7c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8006e80:	461c      	mov	r4, r3
 8006e82:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006e86:	4619      	mov	r1, r3
 8006e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e94:	f7f9 fbc0 	bl	8000618 <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	e9c4 2300 	strd	r2, r3, [r4]
	vx=xmx*cosuk-cosnok*sinuk;
 8006ea0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006eaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb2:	f7f9 fbb1 	bl	8000618 <__aeabi_dmul>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4614      	mov	r4, r2
 8006ebc:	461d      	mov	r5, r3
 8006ebe:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006ed0:	f7f9 fba2 	bl	8000618 <__aeabi_dmul>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8006edc:	460e      	mov	r6, r1
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 f9e1 	bl	80002a8 <__aeabi_dsub>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	e946 2302 	strd	r2, r3, [r6, #-8]
	vy=xmy*cosuk-sinnok*sinuk;
 8006eee:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ef8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006efc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006f00:	f7f9 fb8a 	bl	8000618 <__aeabi_dmul>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4614      	mov	r4, r2
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006f10:	4619      	mov	r1, r3
 8006f12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f1e:	f7f9 fb7b 	bl	8000618 <__aeabi_dmul>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8006f2a:	460e      	mov	r6, r1
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f7f9 f9ba 	bl	80002a8 <__aeabi_dsub>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	e9c6 2300 	strd	r2, r3, [r6]
	vz=sinik*cosuk;
 8006f3c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8006f40:	461c      	mov	r4, r3
 8006f42:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006f46:	4619      	mov	r1, r3
 8006f48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f54:	f7f9 fb60 	bl	8000618 <__aeabi_dmul>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	e944 2302 	strd	r2, r3, [r4, #-8]

	/* Position and velocity */
	output->pos[0] = rk*ux;
 8006f60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f64:	4619      	mov	r1, r3
 8006f66:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f72:	f7f9 fb51 	bl	8000618 <__aeabi_dmul>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006f7e:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8006f82:	6809      	ldr	r1, [r1, #0]
 8006f84:	e9c1 2306 	strd	r2, r3, [r1, #24]
	output->pos[1] = rk*uy;
 8006f88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8006f92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f9a:	f7f9 fb3d 	bl	8000618 <__aeabi_dmul>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006fa6:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8006faa:	6809      	ldr	r1, [r1, #0]
 8006fac:	e9c1 2308 	strd	r2, r3, [r1, #32]
	output->pos[2] = rk*uz;
 8006fb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fc2:	f7f9 fb29 	bl	8000618 <__aeabi_dmul>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8006fce:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8006fd2:	6809      	ldr	r1, [r1, #0]
 8006fd4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	output->vel[0] = rdotk*ux+rfdotk*vx;
 8006fd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fea:	f7f9 fb15 	bl	8000618 <__aeabi_dmul>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8007000:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007004:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8007008:	f7f9 fb06 	bl	8000618 <__aeabi_dmul>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4620      	mov	r0, r4
 8007012:	4629      	mov	r1, r5
 8007014:	f7f9 f94a 	bl	80002ac <__adddf3>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007020:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8007024:	6809      	ldr	r1, [r1, #0]
 8007026:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	output->vel[1] = rdotk*uy+rfdotk*vy;
 800702a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800702e:	4619      	mov	r1, r3
 8007030:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8007034:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703c:	f7f9 faec 	bl	8000618 <__aeabi_dmul>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4614      	mov	r4, r2
 8007046:	461d      	mov	r5, r3
 8007048:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800704c:	4619      	mov	r1, r3
 800704e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800705a:	f7f9 fadd 	bl	8000618 <__aeabi_dmul>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 f921 	bl	80002ac <__adddf3>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007072:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8007076:	6809      	ldr	r1, [r1, #0]
 8007078:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	output->vel[2] = rdotk*uz+rfdotk*vz;
 800707c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007080:	4619      	mov	r1, r3
 8007082:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800708e:	f7f9 fac3 	bl	8000618 <__aeabi_dmul>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4614      	mov	r4, r2
 8007098:	461d      	mov	r5, r3
 800709a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800709e:	4619      	mov	r1, r3
 80070a0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80070a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070a8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80070ac:	f7f9 fab4 	bl	8000618 <__aeabi_dmul>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4620      	mov	r0, r4
 80070b6:	4629      	mov	r1, r5
 80070b8:	f7f9 f8f8 	bl	80002ac <__adddf3>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80070c4:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 80070c8:	6809      	ldr	r1, [r1, #0]
 80070ca:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	/* Phase in radians */
	double phase=xlt-deep_dyn.xnode-deep_dyn.omgadf+TWO_PI;
 80070ce:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80070d2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80070d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80070da:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 80070de:	f7f9 f8e3 	bl	80002a8 <__aeabi_dsub>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4610      	mov	r0, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80070ee:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80070f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80070f6:	f7f9 f8d7 	bl	80002a8 <__aeabi_dsub>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4610      	mov	r0, r2
 8007100:	4619      	mov	r1, r3
 8007102:	a32b      	add	r3, pc, #172	@ (adr r3, 80071b0 <sdp4_predict+0x1120>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f8d0 	bl	80002ac <__adddf3>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278

	if (phase<0.0)
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8007120:	f7f9 fcec 	bl	8000afc <__aeabi_dcmplt>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <sdp4_predict+0x10b0>
		phase+=TWO_PI;
 800712a:	a321      	add	r3, pc, #132	@ (adr r3, 80071b0 <sdp4_predict+0x1120>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8007134:	f7f9 f8ba 	bl	80002ac <__adddf3>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278

	phase=FMod2p(phase);
 8007140:	ed97 0b9e 	vldr	d0, [r7, #632]	@ 0x278
 8007144:	f009 fcac 	bl	8010aa0 <FMod2p>
 8007148:	ed87 0b9e 	vstr	d0, [r7, #632]	@ 0x278
	output->phase = phase;
 800714c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007150:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8007154:	6819      	ldr	r1, [r3, #0]
 8007156:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 800715a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	output->omgadf = deep_dyn.omgadf;
 800715e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007162:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007166:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800716a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 800716e:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8007172:	6809      	ldr	r1, [r1, #0]
 8007174:	e9c1 2302 	strd	r2, r3, [r1, #8]
	output->xnodek = xnodek;
 8007178:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800717c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8007180:	6819      	ldr	r1, [r3, #0]
 8007182:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	output->xinck = xinck;
 800718e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007192:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8007196:	6819      	ldr	r1, [r3, #0]
 8007198:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800719c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071a0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80071a4:	bf00      	nop
 80071a6:	f507 7725 	add.w	r7, r7, #660	@ 0x294
 80071aa:	46bd      	mov	sp, r7
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	54442d18 	.word	0x54442d18
 80071b4:	401921fb 	.word	0x401921fb

080071b8 <ThetaG>:
 * \param epoch TLE epoch
 * \param deep_arg Deep arg
 * \copyright GPLv2+
 **/
double ThetaG(double epoch, deep_arg_fixed_t *deep_arg)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b092      	sub	sp, #72	@ 0x48
 80071bc:	af00      	add	r7, sp, #0
 80071be:	ed87 0b02 	vstr	d0, [r7, #8]
 80071c2:	6078      	str	r0, [r7, #4]
	double year, day, UT, jd, TU, GMST, ThetaG;

	/* Modification to support Y2K */
	/* Valid 1957 through 2056     */

	day=modf(epoch*1E-3,&year)*1E3;
 80071c4:	a3a7      	add	r3, pc, #668	@ (adr r3, 8007464 <ThetaG+0x2ac>)
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071ce:	f7f9 fa23 	bl	8000618 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	ec43 2b17 	vmov	d7, r2, r3
 80071da:	f107 0318 	add.w	r3, r7, #24
 80071de:	4618      	mov	r0, r3
 80071e0:	eeb0 0a47 	vmov.f32	s0, s14
 80071e4:	eef0 0a67 	vmov.f32	s1, s15
 80071e8:	f013 fd60 	bl	801acac <modf>
 80071ec:	ec51 0b10 	vmov	r0, r1, d0
 80071f0:	f04f 0200 	mov.w	r2, #0
 80071f4:	4b98      	ldr	r3, [pc, #608]	@ (8007458 <ThetaG+0x2a0>)
 80071f6:	f7f9 fa0f 	bl	8000618 <__aeabi_dmul>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (year<57)
 8007202:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	4b94      	ldr	r3, [pc, #592]	@ (800745c <ThetaG+0x2a4>)
 800720c:	f7f9 fc76 	bl	8000afc <__aeabi_dcmplt>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <ThetaG+0x76>
		year+=2000;
 8007216:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	4b90      	ldr	r3, [pc, #576]	@ (8007460 <ThetaG+0x2a8>)
 8007220:	f7f9 f844 	bl	80002ac <__adddf3>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800722c:	e00a      	b.n	8007244 <ThetaG+0x8c>
	else
		year+=1900;
 800722e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007232:	a36f      	add	r3, pc, #444	@ (adr r3, 80073f0 <ThetaG+0x238>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f7f9 f838 	bl	80002ac <__adddf3>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	e9c7 2306 	strd	r2, r3, [r7, #24]

	UT=modf(day,&day);
 8007244:	ed97 7b04 	vldr	d7, [r7, #16]
 8007248:	f107 0310 	add.w	r3, r7, #16
 800724c:	4618      	mov	r0, r3
 800724e:	eeb0 0a47 	vmov.f32	s0, s14
 8007252:	eef0 0a67 	vmov.f32	s1, s15
 8007256:	f013 fd29 	bl	801acac <modf>
 800725a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	jd=Julian_Date_of_Year(year)+day;
 800725e:	ed97 7b06 	vldr	d7, [r7, #24]
 8007262:	eeb0 0a47 	vmov.f32	s0, s14
 8007266:	eef0 0a67 	vmov.f32	s1, s15
 800726a:	f009 fc6d 	bl	8010b48 <Julian_Date_of_Year>
 800726e:	ec51 0b10 	vmov	r0, r1, d0
 8007272:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007276:	f7f9 f819 	bl	80002ac <__adddf3>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	TU=(jd-2451545.0)/36525;
 8007282:	a35d      	add	r3, pc, #372	@ (adr r3, 80073f8 <ThetaG+0x240>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800728c:	f7f9 f80c 	bl	80002a8 <__aeabi_dsub>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4610      	mov	r0, r2
 8007296:	4619      	mov	r1, r3
 8007298:	a359      	add	r3, pc, #356	@ (adr r3, 8007400 <ThetaG+0x248>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f9 fae5 	bl	800086c <__aeabi_ddiv>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	GMST=24110.54841+TU*(8640184.812866+TU*(0.093104-TU*6.2E-6));
 80072aa:	a357      	add	r3, pc, #348	@ (adr r3, 8007408 <ThetaG+0x250>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80072b4:	f7f9 f9b0 	bl	8000618 <__aeabi_dmul>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	a154      	add	r1, pc, #336	@ (adr r1, 8007410 <ThetaG+0x258>)
 80072be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072c2:	f7f8 fff1 	bl	80002a8 <__aeabi_dsub>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4610      	mov	r0, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80072d2:	f7f9 f9a1 	bl	8000618 <__aeabi_dmul>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4610      	mov	r0, r2
 80072dc:	4619      	mov	r1, r3
 80072de:	a34e      	add	r3, pc, #312	@ (adr r3, 8007418 <ThetaG+0x260>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f7f8 ffe2 	bl	80002ac <__adddf3>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4610      	mov	r0, r2
 80072ee:	4619      	mov	r1, r3
 80072f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80072f4:	f7f9 f990 	bl	8000618 <__aeabi_dmul>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4610      	mov	r0, r2
 80072fe:	4619      	mov	r1, r3
 8007300:	a347      	add	r3, pc, #284	@ (adr r3, 8007420 <ThetaG+0x268>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f8 ffd1 	bl	80002ac <__adddf3>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	GMST=fmod(GMST+SECONDS_PER_DAY*EARTH_ROTATIONS_PER_SIDERIAL_DAY*UT,SECONDS_PER_DAY);
 8007312:	a345      	add	r3, pc, #276	@ (adr r3, 8007428 <ThetaG+0x270>)
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800731c:	f7f9 f97c 	bl	8000618 <__aeabi_dmul>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4610      	mov	r0, r2
 8007326:	4619      	mov	r1, r3
 8007328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800732c:	f7f8 ffbe 	bl	80002ac <__adddf3>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	ec43 2b17 	vmov	d7, r2, r3
 8007338:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 8007430 <ThetaG+0x278>
 800733c:	eeb0 0a47 	vmov.f32	s0, s14
 8007340:	eef0 0a67 	vmov.f32	s1, s15
 8007344:	f016 fe28 	bl	801df98 <fmod>
 8007348:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	ThetaG = 2*M_PI*GMST/SECONDS_PER_DAY;
 800734c:	a33a      	add	r3, pc, #232	@ (adr r3, 8007438 <ThetaG+0x280>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007356:	f7f9 f95f 	bl	8000618 <__aeabi_dmul>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	4610      	mov	r0, r2
 8007360:	4619      	mov	r1, r3
 8007362:	a333      	add	r3, pc, #204	@ (adr r3, 8007430 <ThetaG+0x278>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f9 fa80 	bl	800086c <__aeabi_ddiv>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	e9c7 2308 	strd	r2, r3, [r7, #32]
	deep_arg->ds50=jd-2433281.5+UT;
 8007374:	a332      	add	r3, pc, #200	@ (adr r3, 8007440 <ThetaG+0x288>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800737e:	f7f8 ff93 	bl	80002a8 <__aeabi_dsub>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4610      	mov	r0, r2
 8007388:	4619      	mov	r1, r3
 800738a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800738e:	f7f8 ff8d 	bl	80002ac <__adddf3>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	ThetaG=FMod2p(6.3003880987*deep_arg->ds50+1.72944494);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80073a2:	a329      	add	r3, pc, #164	@ (adr r3, 8007448 <ThetaG+0x290>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f9 f936 	bl	8000618 <__aeabi_dmul>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4610      	mov	r0, r2
 80073b2:	4619      	mov	r1, r3
 80073b4:	a326      	add	r3, pc, #152	@ (adr r3, 8007450 <ThetaG+0x298>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f7f8 ff77 	bl	80002ac <__adddf3>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	ec43 2b17 	vmov	d7, r2, r3
 80073c6:	eeb0 0a47 	vmov.f32	s0, s14
 80073ca:	eef0 0a67 	vmov.f32	s1, s15
 80073ce:	f009 fb67 	bl	8010aa0 <FMod2p>
 80073d2:	ed87 0b08 	vstr	d0, [r7, #32]

	return ThetaG;
 80073d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073da:	ec43 2b17 	vmov	d7, r2, r3
}
 80073de:	eeb0 0a47 	vmov.f32	s0, s14
 80073e2:	eef0 0a67 	vmov.f32	s1, s15
 80073e6:	3748      	adds	r7, #72	@ 0x48
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	f3af 8000 	nop.w
 80073f0:	00000000 	.word	0x00000000
 80073f4:	409db000 	.word	0x409db000
 80073f8:	80000000 	.word	0x80000000
 80073fc:	4142b42c 	.word	0x4142b42c
 8007400:	00000000 	.word	0x00000000
 8007404:	40e1d5a0 	.word	0x40e1d5a0
 8007408:	05e6c9ce 	.word	0x05e6c9ce
 800740c:	3eda0133 	.word	0x3eda0133
 8007410:	eb2074eb 	.word	0xeb2074eb
 8007414:	3fb7d5a9 	.word	0x3fb7d5a9
 8007418:	1a02ff8f 	.word	0x1a02ff8f
 800741c:	41607ad7 	.word	0x41607ad7
 8007420:	192641b3 	.word	0x192641b3
 8007424:	40d78ba3 	.word	0x40d78ba3
 8007428:	e2c87b73 	.word	0xe2c87b73
 800742c:	40f526c8 	.word	0x40f526c8
 8007430:	00000000 	.word	0x00000000
 8007434:	40f51800 	.word	0x40f51800
 8007438:	54442d18 	.word	0x54442d18
 800743c:	401921fb 	.word	0x401921fb
 8007440:	c0000000 	.word	0xc0000000
 8007444:	41429080 	.word	0x41429080
 8007448:	f01018b3 	.word	0xf01018b3
 800744c:	40193398 	.word	0x40193398
 8007450:	751885de 	.word	0x751885de
 8007454:	3ffbabce 	.word	0x3ffbabce
 8007458:	408f4000 	.word	0x408f4000
 800745c:	404c8000 	.word	0x404c8000
 8007460:	409f4000 	.word	0x409f4000
 8007464:	d2f1a9fc 	.word	0xd2f1a9fc
 8007468:	3f50624d 	.word	0x3f50624d
 800746c:	00000000 	.word	0x00000000

08007470 <sdp4_deep_initialize>:

void sdp4_deep_initialize(const predict_orbital_elements_t *tle, struct _sdp4 *m, deep_arg_fixed_t *deep_arg)
{
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	f5ad 7d59 	sub.w	sp, sp, #868	@ 0x364
 8007478:	af00      	add	r7, sp, #0
 800747a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800747e:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8007482:	6018      	str	r0, [r3, #0]
 8007484:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007488:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800748c:	6019      	str	r1, [r3, #0]
 800748e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007492:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007496:	601a      	str	r2, [r3, #0]
	xno2, xnodce, xnoi, xpidot, z1, z11, z12, z13, z2,
	z21, z22, z23, z3, z31, z32, z33, ze, zn, zsing,
	zsinh, zsini, zcosg, zcosh, zcosi;

	/* Entrance for deep space initialization */
	m->thgr=ThetaG(m->epoch,deep_arg);
 8007498:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800749c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	ed93 7bbe 	vldr	d7, [r3, #760]	@ 0x2f8
 80074a6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80074aa:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	eeb0 0a47 	vmov.f32	s0, s14
 80074b4:	eef0 0a67 	vmov.f32	s1, s15
 80074b8:	f7ff fe7e 	bl	80071b8 <ThetaG>
 80074bc:	eeb0 7a40 	vmov.f32	s14, s0
 80074c0:	eef0 7a60 	vmov.f32	s15, s1
 80074c4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80074c8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	ed83 7b32 	vstr	d7, [r3, #200]	@ 0xc8
	eq=m->eo;
 80074d2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80074d6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 80074e0:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
	m->xnq=deep_arg->xnodp;
 80074e4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80074e8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80074f2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80074f6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	e9c3 0134 	strd	r0, r1, [r3, #208]	@ 0xd0
	aqnv=1/deep_arg->aodp;
 8007500:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007504:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800750e:	f04f 0000 	mov.w	r0, #0
 8007512:	49cb      	ldr	r1, [pc, #812]	@ (8007840 <sdp4_deep_initialize+0x3d0>)
 8007514:	f7f9 f9aa 	bl	800086c <__aeabi_ddiv>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
	m->xqncl=m->xincl;
 8007520:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007524:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	e9d3 01b6 	ldrd	r0, r1, [r3, #728]	@ 0x2d8
 800752e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007532:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	e9c3 0136 	strd	r0, r1, [r3, #216]	@ 0xd8
	xmao=m->xmo;
 800753c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007540:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	@ 0x2d0
 800754a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
	xpidot=deep_arg->omgdot+deep_arg->xnodot;
 800754e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007552:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800755c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007560:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800756a:	f7f8 fe9f 	bl	80002ac <__adddf3>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	e9c7 23a8 	strd	r2, r3, [r7, #672]	@ 0x2a0
	sinq=sin(m->xnodeo);
 8007576:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800757a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	ed93 7bb0 	vldr	d7, [r3, #704]	@ 0x2c0
 8007584:	eeb0 0a47 	vmov.f32	s0, s14
 8007588:	eef0 0a67 	vmov.f32	s1, s15
 800758c:	f017 f804 	bl	801e598 <sin>
 8007590:	ed87 0ba6 	vstr	d0, [r7, #664]	@ 0x298
	cosq=cos(m->xnodeo);
 8007594:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007598:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	ed93 7bb0 	vldr	d7, [r3, #704]	@ 0x2c0
 80075a2:	eeb0 0a47 	vmov.f32	s0, s14
 80075a6:	eef0 0a67 	vmov.f32	s1, s15
 80075aa:	f016 ff99 	bl	801e4e0 <cos>
 80075ae:	ed87 0ba4 	vstr	d0, [r7, #656]	@ 0x290
	m->omegaq=m->omegao;
 80075b2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80075b6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	@ 0x2c8
 80075c0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80075c4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	e9c3 0138 	strd	r0, r1, [r3, #224]	@ 0xe0

	/* Initialize lunar solar terms */
	day=deep_arg->ds50+18261.5;  /* Days since 1900 Jan 0.5 */
 80075ce:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80075d2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80075dc:	a384      	add	r3, pc, #528	@ (adr r3, 80077f0 <sdp4_deep_initialize+0x380>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f8 fe63 	bl	80002ac <__adddf3>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288

	m->preep=day;
 80075ee:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80075f2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80075f6:	6819      	ldr	r1, [r3, #0]
 80075f8:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 80075fc:	e9c1 239e 	strd	r2, r3, [r1, #632]	@ 0x278
	xnodce=4.5236020-9.2422029E-4*day;
 8007600:	a37d      	add	r3, pc, #500	@ (adr r3, 80077f8 <sdp4_deep_initialize+0x388>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 800760a:	f7f9 f805 	bl	8000618 <__aeabi_dmul>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	a17b      	add	r1, pc, #492	@ (adr r1, 8007800 <sdp4_deep_initialize+0x390>)
 8007614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007618:	f7f8 fe46 	bl	80002a8 <__aeabi_dsub>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	stem=sin(xnodce);
 8007624:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8007628:	f016 ffb6 	bl	801e598 <sin>
 800762c:	ed87 0b9e 	vstr	d0, [r7, #632]	@ 0x278
	ctem=cos(xnodce);
 8007630:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8007634:	f016 ff54 	bl	801e4e0 <cos>
 8007638:	ed87 0b9c 	vstr	d0, [r7, #624]	@ 0x270
	m->zcosil=0.91375164-0.03568096*ctem;
 800763c:	a372      	add	r3, pc, #456	@ (adr r3, 8007808 <sdp4_deep_initialize+0x398>)
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8007646:	f7f8 ffe7 	bl	8000618 <__aeabi_dmul>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	a170      	add	r1, pc, #448	@ (adr r1, 8007810 <sdp4_deep_initialize+0x3a0>)
 8007650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007654:	f7f8 fe28 	bl	80002a8 <__aeabi_dsub>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4610      	mov	r0, r2
 800765e:	4619      	mov	r1, r3
 8007660:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007664:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	e9c3 01ae 	strd	r0, r1, [r3, #696]	@ 0x2b8
	m->zsinil=sqrt(1-m->zcosil*m->zcosil);
 800766e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007672:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	e9d3 01ae 	ldrd	r0, r1, [r3, #696]	@ 0x2b8
 800767c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007680:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	@ 0x2b8
 800768a:	f7f8 ffc5 	bl	8000618 <__aeabi_dmul>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	496a      	ldr	r1, [pc, #424]	@ (8007840 <sdp4_deep_initialize+0x3d0>)
 8007698:	f7f8 fe06 	bl	80002a8 <__aeabi_dsub>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	ec43 2b17 	vmov	d7, r2, r3
 80076a4:	eeb0 0a47 	vmov.f32	s0, s14
 80076a8:	eef0 0a67 	vmov.f32	s1, s15
 80076ac:	f016 fd52 	bl	801e154 <sqrt>
 80076b0:	eeb0 7a40 	vmov.f32	s14, s0
 80076b4:	eef0 7a60 	vmov.f32	s15, s1
 80076b8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80076bc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	ed83 7bac 	vstr	d7, [r3, #688]	@ 0x2b0
	m->zsinhl=0.089683511*stem/m->zsinil;
 80076c6:	a354      	add	r3, pc, #336	@ (adr r3, 8007818 <sdp4_deep_initialize+0x3a8>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80076d0:	f7f8 ffa2 	bl	8000618 <__aeabi_dmul>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4610      	mov	r0, r2
 80076da:	4619      	mov	r1, r3
 80076dc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80076e0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 80076ea:	f7f9 f8bf 	bl	800086c <__aeabi_ddiv>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4610      	mov	r0, r2
 80076f4:	4619      	mov	r1, r3
 80076f6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80076fa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	e9c3 01a8 	strd	r0, r1, [r3, #672]	@ 0x2a0
	m->zcoshl=sqrt(1-m->zsinhl*m->zsinhl);
 8007704:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007708:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 8007712:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007716:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	@ 0x2a0
 8007720:	f7f8 ff7a 	bl	8000618 <__aeabi_dmul>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	f04f 0000 	mov.w	r0, #0
 800772c:	4944      	ldr	r1, [pc, #272]	@ (8007840 <sdp4_deep_initialize+0x3d0>)
 800772e:	f7f8 fdbb 	bl	80002a8 <__aeabi_dsub>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	ec43 2b17 	vmov	d7, r2, r3
 800773a:	eeb0 0a47 	vmov.f32	s0, s14
 800773e:	eef0 0a67 	vmov.f32	s1, s15
 8007742:	f016 fd07 	bl	801e154 <sqrt>
 8007746:	eeb0 7a40 	vmov.f32	s14, s0
 800774a:	eef0 7a60 	vmov.f32	s15, s1
 800774e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007752:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	ed83 7baa 	vstr	d7, [r3, #680]	@ 0x2a8
	c=4.7199672+0.22997150*day;
 800775c:	a330      	add	r3, pc, #192	@ (adr r3, 8007820 <sdp4_deep_initialize+0x3b0>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 8007766:	f7f8 ff57 	bl	8000618 <__aeabi_dmul>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4610      	mov	r0, r2
 8007770:	4619      	mov	r1, r3
 8007772:	a32d      	add	r3, pc, #180	@ (adr r3, 8007828 <sdp4_deep_initialize+0x3b8>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 fd98 	bl	80002ac <__adddf3>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
	gam=5.8351514+0.0019443680*day;
 8007784:	a32a      	add	r3, pc, #168	@ (adr r3, 8007830 <sdp4_deep_initialize+0x3c0>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 800778e:	f7f8 ff43 	bl	8000618 <__aeabi_dmul>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4610      	mov	r0, r2
 8007798:	4619      	mov	r1, r3
 800779a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800779e:	461c      	mov	r4, r3
 80077a0:	a325      	add	r3, pc, #148	@ (adr r3, 8007838 <sdp4_deep_initialize+0x3c8>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f8 fd81 	bl	80002ac <__adddf3>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	e9c4 2300 	strd	r2, r3, [r4]
	m->zmol=FMod2p(c-gam);
 80077b2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 80077be:	f7f8 fd73 	bl	80002a8 <__aeabi_dsub>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	ec43 2b17 	vmov	d7, r2, r3
 80077ca:	eeb0 0a47 	vmov.f32	s0, s14
 80077ce:	eef0 0a67 	vmov.f32	s1, s15
 80077d2:	f009 f965 	bl	8010aa0 <FMod2p>
 80077d6:	eeb0 7a40 	vmov.f32	s14, s0
 80077da:	eef0 7a60 	vmov.f32	s15, s1
 80077de:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80077e2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
 80077ec:	e02a      	b.n	8007844 <sdp4_deep_initialize+0x3d4>
 80077ee:	bf00      	nop
 80077f0:	00000000 	.word	0x00000000
 80077f4:	40d1d560 	.word	0x40d1d560
 80077f8:	f5bda204 	.word	0xf5bda204
 80077fc:	3f4e48eb 	.word	0x3f4e48eb
 8007800:	1f687b14 	.word	0x1f687b14
 8007804:	4012182b 	.word	0x4012182b
 8007808:	58946bb2 	.word	0x58946bb2
 800780c:	3fa244c6 	.word	0x3fa244c6
 8007810:	144eec77 	.word	0x144eec77
 8007814:	3fed3d74 	.word	0x3fed3d74
 8007818:	a2bc46dc 	.word	0xa2bc46dc
 800781c:	3fb6f57f 	.word	0x3fb6f57f
 8007820:	c3c18b50 	.word	0xc3c18b50
 8007824:	3fcd6fb4 	.word	0x3fcd6fb4
 8007828:	14e8c551 	.word	0x14e8c551
 800782c:	4012e13f 	.word	0x4012e13f
 8007830:	3e2b3c77 	.word	0x3e2b3c77
 8007834:	3f5fdb45 	.word	0x3f5fdb45
 8007838:	edb8d59f 	.word	0xedb8d59f
 800783c:	40175731 	.word	0x40175731
 8007840:	3ff00000 	.word	0x3ff00000
	zx=0.39785416*stem/m->zsinil;
 8007844:	a389      	add	r3, pc, #548	@ (adr r3, 8007a6c <sdp4_deep_initialize+0x5fc>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800784e:	f7f8 fee3 	bl	8000618 <__aeabi_dmul>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4614      	mov	r4, r2
 8007858:	461d      	mov	r5, r3
 800785a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800785e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 8007868:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 800786c:	460e      	mov	r6, r1
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f8 fffb 	bl	800086c <__aeabi_ddiv>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	e946 2302 	strd	r2, r3, [r6, #-8]
	zy=m->zcoshl*ctem+0.91744867*m->zsinhl*stem;
 800787e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007882:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 800788c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 8007890:	f7f8 fec2 	bl	8000618 <__aeabi_dmul>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4690      	mov	r8, r2
 800789a:	4699      	mov	r9, r3
 800789c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80078a0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 80078aa:	a372      	add	r3, pc, #456	@ (adr r3, 8007a74 <sdp4_deep_initialize+0x604>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f7f8 feb2 	bl	8000618 <__aeabi_dmul>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 80078c0:	f7f8 feaa 	bl	8000618 <__aeabi_dmul>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4610      	mov	r0, r2
 80078ca:	4619      	mov	r1, r3
 80078cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80078d0:	461c      	mov	r4, r3
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4640      	mov	r0, r8
 80078d8:	4649      	mov	r1, r9
 80078da:	f7f8 fce7 	bl	80002ac <__adddf3>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	e9c4 2300 	strd	r2, r3, [r4]
	zx=atan2(zx,zy);
 80078e6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80078ea:	461c      	mov	r4, r3
 80078ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80078f0:	461a      	mov	r2, r3
 80078f2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80078f6:	ed92 1b00 	vldr	d1, [r2]
 80078fa:	ed13 0b02 	vldr	d0, [r3, #-8]
 80078fe:	f016 faff 	bl	801df00 <atan2>
 8007902:	ed04 0b02 	vstr	d0, [r4, #-8]
	zx=gam+zx-xnodce;
 8007906:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800790a:	4619      	mov	r1, r3
 800790c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8007910:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007918:	f7f8 fcc8 	bl	80002ac <__adddf3>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4610      	mov	r0, r2
 8007922:	4619      	mov	r1, r3
 8007924:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8007928:	461c      	mov	r4, r3
 800792a:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 800792e:	f7f8 fcbb 	bl	80002a8 <__aeabi_dsub>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	e944 2302 	strd	r2, r3, [r4, #-8]
	m->zcosgl=cos(zx);
 800793a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800793e:	ed13 0b02 	vldr	d0, [r3, #-8]
 8007942:	f016 fdcd 	bl	801e4e0 <cos>
 8007946:	eeb0 7a40 	vmov.f32	s14, s0
 800794a:	eef0 7a60 	vmov.f32	s15, s1
 800794e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007952:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	ed83 7ba6 	vstr	d7, [r3, #664]	@ 0x298
	m->zsingl=sin(zx);
 800795c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8007960:	ed13 0b02 	vldr	d0, [r3, #-8]
 8007964:	f016 fe18 	bl	801e598 <sin>
 8007968:	eeb0 7a40 	vmov.f32	s14, s0
 800796c:	eef0 7a60 	vmov.f32	s15, s1
 8007970:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007974:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	ed83 7ba4 	vstr	d7, [r3, #656]	@ 0x290
	m->zmos=6.2565837+0.017201977*day;
 800797e:	a33f      	add	r3, pc, #252	@ (adr r3, 8007a7c <sdp4_deep_initialize+0x60c>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 8007988:	f7f8 fe46 	bl	8000618 <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4610      	mov	r0, r2
 8007992:	4619      	mov	r1, r3
 8007994:	a33b      	add	r3, pc, #236	@ (adr r3, 8007a84 <sdp4_deep_initialize+0x614>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fc87 	bl	80002ac <__adddf3>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4610      	mov	r0, r2
 80079a4:	4619      	mov	r1, r3
 80079a6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80079aa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	e9c3 013c 	strd	r0, r1, [r3, #240]	@ 0xf0
	m->zmos=FMod2p(m->zmos);
 80079b4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80079b8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 80079c2:	eeb0 0a47 	vmov.f32	s0, s14
 80079c6:	eef0 0a67 	vmov.f32	s1, s15
 80079ca:	f009 f869 	bl	8010aa0 <FMod2p>
 80079ce:	eeb0 7a40 	vmov.f32	s14, s0
 80079d2:	eef0 7a60 	vmov.f32	s15, s1
 80079d6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80079da:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	/* Do solar terms */
	zcosg=ZCOSGS;
 80079e4:	a329      	add	r3, pc, #164	@ (adr r3, 8007a8c <sdp4_deep_initialize+0x61c>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
	zsing=ZSINGS;
 80079ee:	a329      	add	r3, pc, #164	@ (adr r3, 8007a94 <sdp4_deep_initialize+0x624>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
	zcosi=ZCOSIS;
 80079f8:	a31e      	add	r3, pc, #120	@ (adr r3, 8007a74 <sdp4_deep_initialize+0x604>)
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
	zsini=ZSINIS;
 8007a02:	a31a      	add	r3, pc, #104	@ (adr r3, 8007a6c <sdp4_deep_initialize+0x5fc>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
	zcosh=cosq;
 8007a0c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8007a10:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
	zsinh= sinq;
 8007a14:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8007a18:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
	cc=C1SS;
 8007a1c:	a31f      	add	r3, pc, #124	@ (adr r3, 8007a9c <sdp4_deep_initialize+0x62c>)
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
	zn=ZNS;
 8007a26:	a31f      	add	r3, pc, #124	@ (adr r3, 8007aa4 <sdp4_deep_initialize+0x634>)
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
	ze=ZES;
 8007a30:	a31e      	add	r3, pc, #120	@ (adr r3, 8007aac <sdp4_deep_initialize+0x63c>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
	/* zmo=m->zmos; */
	xnoi=1/m->xnq;
 8007a3a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007a3e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 8007a48:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	f04f 0000 	mov.w	r0, #0
 8007a52:	4905      	ldr	r1, [pc, #20]	@ (8007a68 <sdp4_deep_initialize+0x5f8>)
 8007a54:	f7f8 ff0a 	bl	800086c <__aeabi_ddiv>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	e944 2302 	strd	r2, r3, [r4, #-8]
 8007a60:	e028      	b.n	8007ab4 <sdp4_deep_initialize+0x644>
 8007a62:	bf00      	nop
 8007a64:	f3af 8000 	nop.w
 8007a68:	3ff00000 	.word	0x3ff00000
 8007a6c:	4b71c367 	.word	0x4b71c367
 8007a70:	3fd97671 	.word	0x3fd97671
 8007a74:	502d140a 	.word	0x502d140a
 8007a78:	3fed5bbd 	.word	0x3fed5bbd
 8007a7c:	2290f0f6 	.word	0x2290f0f6
 8007a80:	3f919d65 	.word	0x3f919d65
 8007a84:	e0a0bf28 	.word	0xe0a0bf28
 8007a88:	401906bd 	.word	0x401906bd
 8007a8c:	6cce5f74 	.word	0x6cce5f74
 8007a90:	3fc8e857 	.word	0x3fc8e857
 8007a94:	0f0805b3 	.word	0x0f0805b3
 8007a98:	bfef6368 	.word	0xbfef6368
 8007a9c:	94008e71 	.word	0x94008e71
 8007aa0:	3ec90d6a 	.word	0x3ec90d6a
 8007aa4:	fe8935de 	.word	0xfe8935de
 8007aa8:	3ee90d67 	.word	0x3ee90d67
 8007aac:	78d4fdf4 	.word	0x78d4fdf4
 8007ab0:	3f9126e9 	.word	0x3f9126e9
	/* time, after Lunar terms are initialized        */

	for (;;)
	{
		/* Solar terms done again after Lunar terms are done */
		a1=zcosg*zcosh+zsing*zcosi*zsinh;
 8007ab4:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8007ab8:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8007abc:	f7f8 fdac 	bl	8000618 <__aeabi_dmul>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4690      	mov	r8, r2
 8007ac6:	4699      	mov	r9, r3
 8007ac8:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007acc:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8007ad0:	f7f8 fda2 	bl	8000618 <__aeabi_dmul>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4619      	mov	r1, r3
 8007adc:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8007ae0:	f7f8 fd9a 	bl	8000618 <__aeabi_dmul>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4619      	mov	r1, r3
 8007aec:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8007af0:	461c      	mov	r4, r3
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4640      	mov	r0, r8
 8007af8:	4649      	mov	r1, r9
 8007afa:	f7f8 fbd7 	bl	80002ac <__adddf3>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	e9c4 2300 	strd	r2, r3, [r4]
		a3=-zsing*zcosh+zcosg*zcosi*zsinh;
 8007b06:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8007b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b0c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8007b10:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b16:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8007b1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8007b1e:	f7f8 fd7b 	bl	8000618 <__aeabi_dmul>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4690      	mov	r8, r2
 8007b28:	4699      	mov	r9, r3
 8007b2a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007b2e:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8007b32:	f7f8 fd71 	bl	8000618 <__aeabi_dmul>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8007b42:	f7f8 fd69 	bl	8000618 <__aeabi_dmul>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8007b52:	461c      	mov	r4, r3
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4640      	mov	r0, r8
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	f7f8 fba6 	bl	80002ac <__adddf3>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	e944 2302 	strd	r2, r3, [r4, #-8]
		a7=-zcosg*zsinh+zsing*zcosi*zcosh;
 8007b68:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8007b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b6e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8007b72:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b78:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8007b7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007b80:	f7f8 fd4a 	bl	8000618 <__aeabi_dmul>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4690      	mov	r8, r2
 8007b8a:	4699      	mov	r9, r3
 8007b8c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007b90:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8007b94:	f7f8 fd40 	bl	8000618 <__aeabi_dmul>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8007ba4:	f7f8 fd38 	bl	8000618 <__aeabi_dmul>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4610      	mov	r0, r2
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007bb4:	461c      	mov	r4, r3
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb75 	bl	80002ac <__adddf3>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	e9c4 2300 	strd	r2, r3, [r4]
		a8=zsing*zsini;
 8007bca:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007bce:	461c      	mov	r4, r3
 8007bd0:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8007bd4:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8007bd8:	f7f8 fd1e 	bl	8000618 <__aeabi_dmul>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	e944 2302 	strd	r2, r3, [r4, #-8]
		a9=zsing*zsinh+zcosg*zcosi*zcosh;
 8007be4:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8007be8:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8007bec:	f7f8 fd14 	bl	8000618 <__aeabi_dmul>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4690      	mov	r8, r2
 8007bf6:	4699      	mov	r9, r3
 8007bf8:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007bfc:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8007c00:	f7f8 fd0a 	bl	8000618 <__aeabi_dmul>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8007c10:	f7f8 fd02 	bl	8000618 <__aeabi_dmul>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8007c20:	461c      	mov	r4, r3
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4640      	mov	r0, r8
 8007c28:	4649      	mov	r1, r9
 8007c2a:	f7f8 fb3f 	bl	80002ac <__adddf3>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	e9c4 2300 	strd	r2, r3, [r4]
		a10=zcosg*zsini;
 8007c36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8007c3a:	461c      	mov	r4, r3
 8007c3c:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8007c40:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8007c44:	f7f8 fce8 	bl	8000618 <__aeabi_dmul>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	e944 2302 	strd	r2, r3, [r4, #-8]
		a2=deep_arg->cosio*a7+deep_arg->sinio*a8;
 8007c50:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007c54:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007c5e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fcd7 	bl	8000618 <__aeabi_dmul>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4690      	mov	r8, r2
 8007c70:	4699      	mov	r9, r3
 8007c72:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007c76:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007c80:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007c84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c88:	f7f8 fcc6 	bl	8000618 <__aeabi_dmul>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4610      	mov	r0, r2
 8007c92:	4619      	mov	r1, r3
 8007c94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007c98:	461c      	mov	r4, r3
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f7f8 fb03 	bl	80002ac <__adddf3>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	e9c4 2300 	strd	r2, r3, [r4]
		a4=deep_arg->cosio*a9+deep_arg->sinio*a10;
 8007cae:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007cb2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007cbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f7f8 fca8 	bl	8000618 <__aeabi_dmul>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4690      	mov	r8, r2
 8007cce:	4699      	mov	r9, r3
 8007cd0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007cd4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007cde:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8007ce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ce6:	f7f8 fc97 	bl	8000618 <__aeabi_dmul>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4610      	mov	r0, r2
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	4649      	mov	r1, r9
 8007d00:	f7f8 fad4 	bl	80002ac <__adddf3>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	e944 2302 	strd	r2, r3, [r4, #-8]
		a5=-deep_arg->sinio*a7+deep_arg->cosio*a8;
 8007d0c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007d10:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d1c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d22:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007d2e:	f7f8 fc73 	bl	8000618 <__aeabi_dmul>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4690      	mov	r8, r2
 8007d38:	4699      	mov	r9, r3
 8007d3a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007d3e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007d48:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007d4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d50:	f7f8 fc62 	bl	8000618 <__aeabi_dmul>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007d60:	461c      	mov	r4, r3
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 fa9f 	bl	80002ac <__adddf3>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	e9c4 2300 	strd	r2, r3, [r4]
		a6=-deep_arg->sinio*a9+deep_arg->cosio*a10;
 8007d76:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007d7a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d84:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d86:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d98:	f7f8 fc3e 	bl	8000618 <__aeabi_dmul>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4690      	mov	r8, r2
 8007da2:	4699      	mov	r9, r3
 8007da4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007da8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007db2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8007db6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dba:	f7f8 fc2d 	bl	8000618 <__aeabi_dmul>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007dca:	461c      	mov	r4, r3
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fa6a 	bl	80002ac <__adddf3>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	e944 2302 	strd	r2, r3, [r4, #-8]
		x1=a1*deep_arg->cosg+a2*deep_arg->sing;
 8007de0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007de4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007dee:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fc0f 	bl	8000618 <__aeabi_dmul>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4690      	mov	r8, r2
 8007e00:	4699      	mov	r9, r3
 8007e02:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e06:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007e10:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f7f8 fbfe 	bl	8000618 <__aeabi_dmul>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4610      	mov	r0, r2
 8007e22:	4619      	mov	r1, r3
 8007e24:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8007e28:	461c      	mov	r4, r3
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4640      	mov	r0, r8
 8007e30:	4649      	mov	r1, r9
 8007e32:	f7f8 fa3b 	bl	80002ac <__adddf3>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	e9c4 2300 	strd	r2, r3, [r4]
		x2=a3*deep_arg->cosg+a4*deep_arg->sing;
 8007e3e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e42:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007e4c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8007e50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e54:	f7f8 fbe0 	bl	8000618 <__aeabi_dmul>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4690      	mov	r8, r2
 8007e5e:	4699      	mov	r9, r3
 8007e60:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007e64:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007e6e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007e72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e76:	f7f8 fbcf 	bl	8000618 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8007e86:	461c      	mov	r4, r3
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	4649      	mov	r1, r9
 8007e90:	f7f8 fa0c 	bl	80002ac <__adddf3>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	e944 2302 	strd	r2, r3, [r4, #-8]
		x3=-a1*deep_arg->sing+a2*deep_arg->cosg;
 8007e9c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	623a      	str	r2, [r7, #32]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eac:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007eb0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007eba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ebe:	f7f8 fbab 	bl	8000618 <__aeabi_dmul>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4690      	mov	r8, r2
 8007ec8:	4699      	mov	r9, r3
 8007eca:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007ece:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007ed8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 fb9a 	bl	8000618 <__aeabi_dmul>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4619      	mov	r1, r3
 8007eec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8007ef0:	461c      	mov	r4, r3
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7f8 f9d7 	bl	80002ac <__adddf3>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	e9c4 2300 	strd	r2, r3, [r4]
		x4=-a3*deep_arg->sing+a4*deep_arg->cosg;
 8007f06:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8007f0a:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8007f0e:	61ba      	str	r2, [r7, #24]
 8007f10:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8007f14:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007f1e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007f28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f2c:	f7f8 fb74 	bl	8000618 <__aeabi_dmul>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4690      	mov	r8, r2
 8007f36:	4699      	mov	r9, r3
 8007f38:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007f3c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007f46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007f4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f4e:	f7f8 fb63 	bl	8000618 <__aeabi_dmul>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4610      	mov	r0, r2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8007f5e:	461c      	mov	r4, r3
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 f9a0 	bl	80002ac <__adddf3>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	e944 2302 	strd	r2, r3, [r4, #-8]
		x5=a5*deep_arg->sing;
 8007f74:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007f78:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007f82:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8007f86:	461d      	mov	r5, r3
 8007f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007f8c:	461c      	mov	r4, r3
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007f96:	f7f8 fb3f 	bl	8000618 <__aeabi_dmul>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	e9c5 2300 	strd	r2, r3, [r5]
		x6=a6*deep_arg->sing;
 8007fa2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007fa6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007fb0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8007fb4:	461d      	mov	r5, r3
 8007fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007fba:	461c      	mov	r4, r3
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8007fc4:	f7f8 fb28 	bl	8000618 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e945 2302 	strd	r2, r3, [r5, #-8]
		x7=a5*deep_arg->cosg;
 8007fd0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8007fd4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007fde:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8007fe2:	461d      	mov	r5, r3
 8007fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8007fe8:	461c      	mov	r4, r3
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007ff2:	f7f8 fb11 	bl	8000618 <__aeabi_dmul>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	e9c5 2300 	strd	r2, r3, [r5]
		x8=a6*deep_arg->cosg;
 8007ffe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008002:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800800c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008010:	461d      	mov	r5, r3
 8008012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008016:	461c      	mov	r4, r3
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8008020:	f7f8 fafa 	bl	8000618 <__aeabi_dmul>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	e945 2302 	strd	r2, r3, [r5, #-8]
		z31=12*x1*x1-3*x3*x3;
 800802c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008030:	4619      	mov	r1, r3
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	4bd1      	ldr	r3, [pc, #836]	@ (800837c <sdp4_deep_initialize+0xf0c>)
 8008038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800803c:	f7f8 faec 	bl	8000618 <__aeabi_dmul>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4610      	mov	r0, r2
 8008046:	4619      	mov	r1, r3
 8008048:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 fae2 	bl	8000618 <__aeabi_dmul>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4690      	mov	r8, r2
 800805a:	4699      	mov	r9, r3
 800805c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008060:	4619      	mov	r1, r3
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	4bc6      	ldr	r3, [pc, #792]	@ (8008380 <sdp4_deep_initialize+0xf10>)
 8008068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800806c:	f7f8 fad4 	bl	8000618 <__aeabi_dmul>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4610      	mov	r0, r2
 8008076:	4619      	mov	r1, r3
 8008078:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 faca 	bl	8000618 <__aeabi_dmul>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4610      	mov	r0, r2
 800808a:	4619      	mov	r1, r3
 800808c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008090:	461c      	mov	r4, r3
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4640      	mov	r0, r8
 8008098:	4649      	mov	r1, r9
 800809a:	f7f8 f905 	bl	80002a8 <__aeabi_dsub>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	e9c4 2300 	strd	r2, r3, [r4]
		z32=24*x1*x2-6*x3*x4;
 80080a6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80080aa:	4619      	mov	r1, r3
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	4bb4      	ldr	r3, [pc, #720]	@ (8008384 <sdp4_deep_initialize+0xf14>)
 80080b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b6:	f7f8 faaf 	bl	8000618 <__aeabi_dmul>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4610      	mov	r0, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80080c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080ca:	f7f8 faa5 	bl	8000618 <__aeabi_dmul>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4690      	mov	r8, r2
 80080d4:	4699      	mov	r9, r3
 80080d6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80080da:	4619      	mov	r1, r3
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	4ba9      	ldr	r3, [pc, #676]	@ (8008388 <sdp4_deep_initialize+0xf18>)
 80080e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e6:	f7f8 fa97 	bl	8000618 <__aeabi_dmul>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80080f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080fa:	f7f8 fa8d 	bl	8000618 <__aeabi_dmul>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4610      	mov	r0, r2
 8008104:	4619      	mov	r1, r3
 8008106:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800810a:	461c      	mov	r4, r3
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4640      	mov	r0, r8
 8008112:	4649      	mov	r1, r9
 8008114:	f7f8 f8c8 	bl	80002a8 <__aeabi_dsub>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	e944 2302 	strd	r2, r3, [r4, #-8]
		z33=12*x2*x2-3*x4*x4;
 8008120:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008124:	4619      	mov	r1, r3
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	4b94      	ldr	r3, [pc, #592]	@ (800837c <sdp4_deep_initialize+0xf0c>)
 800812c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008130:	f7f8 fa72 	bl	8000618 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008140:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008144:	f7f8 fa68 	bl	8000618 <__aeabi_dmul>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4690      	mov	r8, r2
 800814e:	4699      	mov	r9, r3
 8008150:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008154:	4619      	mov	r1, r3
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	4b89      	ldr	r3, [pc, #548]	@ (8008380 <sdp4_deep_initialize+0xf10>)
 800815c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008160:	f7f8 fa5a 	bl	8000618 <__aeabi_dmul>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4610      	mov	r0, r2
 800816a:	4619      	mov	r1, r3
 800816c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008174:	f7f8 fa50 	bl	8000618 <__aeabi_dmul>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4610      	mov	r0, r2
 800817e:	4619      	mov	r1, r3
 8008180:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008184:	461c      	mov	r4, r3
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4640      	mov	r0, r8
 800818c:	4649      	mov	r1, r9
 800818e:	f7f8 f88b 	bl	80002a8 <__aeabi_dsub>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	e9c4 2300 	strd	r2, r3, [r4]
		z1=3*(a1*a1+a2*a2)+z31*deep_arg->eosq;
 800819a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800819e:	4619      	mov	r1, r3
 80081a0:	e9d1 2300 	ldrd	r2, r3, [r1]
 80081a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a8:	f7f8 fa36 	bl	8000618 <__aeabi_dmul>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4614      	mov	r4, r2
 80081b2:	461d      	mov	r5, r3
 80081b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80081b8:	4619      	mov	r1, r3
 80081ba:	e9d1 2300 	ldrd	r2, r3, [r1]
 80081be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c2:	f7f8 fa29 	bl	8000618 <__aeabi_dmul>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4620      	mov	r0, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7f8 f86d 	bl	80002ac <__adddf3>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4610      	mov	r0, r2
 80081d8:	4619      	mov	r1, r3
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	4b68      	ldr	r3, [pc, #416]	@ (8008380 <sdp4_deep_initialize+0xf10>)
 80081e0:	f7f8 fa1a 	bl	8000618 <__aeabi_dmul>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4690      	mov	r8, r2
 80081ea:	4699      	mov	r9, r3
 80081ec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80081f0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081fa:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f7f8 fa09 	bl	8000618 <__aeabi_dmul>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4610      	mov	r0, r2
 800820c:	4619      	mov	r1, r3
 800820e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008212:	461c      	mov	r4, r3
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4640      	mov	r0, r8
 800821a:	4649      	mov	r1, r9
 800821c:	f7f8 f846 	bl	80002ac <__adddf3>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	e944 2302 	strd	r2, r3, [r4, #-8]
		z2=6*(a1*a3+a2*a4)+z32*deep_arg->eosq;
 8008228:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800822c:	4619      	mov	r1, r3
 800822e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008232:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800823a:	f7f8 f9ed 	bl	8000618 <__aeabi_dmul>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4614      	mov	r4, r2
 8008244:	461d      	mov	r5, r3
 8008246:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800824a:	4619      	mov	r1, r3
 800824c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008250:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008258:	f7f8 f9de 	bl	8000618 <__aeabi_dmul>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f8 f822 	bl	80002ac <__adddf3>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4610      	mov	r0, r2
 800826e:	4619      	mov	r1, r3
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	4b44      	ldr	r3, [pc, #272]	@ (8008388 <sdp4_deep_initialize+0xf18>)
 8008276:	f7f8 f9cf 	bl	8000618 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4690      	mov	r8, r2
 8008280:	4699      	mov	r9, r3
 8008282:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008286:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008290:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008294:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008298:	f7f8 f9be 	bl	8000618 <__aeabi_dmul>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4610      	mov	r0, r2
 80082a2:	4619      	mov	r1, r3
 80082a4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80082a8:	461c      	mov	r4, r3
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4640      	mov	r0, r8
 80082b0:	4649      	mov	r1, r9
 80082b2:	f7f7 fffb 	bl	80002ac <__adddf3>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	e9c4 2300 	strd	r2, r3, [r4]
		z3=3*(a3*a3+a4*a4)+z33*deep_arg->eosq;
 80082be:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80082c2:	4619      	mov	r1, r3
 80082c4:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 80082c8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80082cc:	f7f8 f9a4 	bl	8000618 <__aeabi_dmul>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4614      	mov	r4, r2
 80082d6:	461d      	mov	r5, r3
 80082d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80082dc:	4619      	mov	r1, r3
 80082de:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 80082e2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80082e6:	f7f8 f997 	bl	8000618 <__aeabi_dmul>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4620      	mov	r0, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	f7f7 ffdb 	bl	80002ac <__adddf3>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4610      	mov	r0, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	f04f 0200 	mov.w	r2, #0
 8008302:	4b1f      	ldr	r3, [pc, #124]	@ (8008380 <sdp4_deep_initialize+0xf10>)
 8008304:	f7f8 f988 	bl	8000618 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4690      	mov	r8, r2
 800830e:	4699      	mov	r9, r3
 8008310:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008314:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800831e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f7f8 f977 	bl	8000618 <__aeabi_dmul>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4610      	mov	r0, r2
 8008330:	4619      	mov	r1, r3
 8008332:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008336:	461c      	mov	r4, r3
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4640      	mov	r0, r8
 800833e:	4649      	mov	r1, r9
 8008340:	f7f7 ffb4 	bl	80002ac <__adddf3>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	e944 2302 	strd	r2, r3, [r4, #-8]
		z11=-6*a1*a5+deep_arg->eosq*(-24*x1*x7-6*x3*x5);
 800834c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008350:	4619      	mov	r1, r3
 8008352:	f04f 0200 	mov.w	r2, #0
 8008356:	4b0d      	ldr	r3, [pc, #52]	@ (800838c <sdp4_deep_initialize+0xf1c>)
 8008358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835c:	f7f8 f95c 	bl	8000618 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4610      	mov	r0, r2
 8008366:	4619      	mov	r1, r3
 8008368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	f7f8 f952 	bl	8000618 <__aeabi_dmul>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	e00a      	b.n	8008390 <sdp4_deep_initialize+0xf20>
 800837a:	bf00      	nop
 800837c:	40280000 	.word	0x40280000
 8008380:	40080000 	.word	0x40080000
 8008384:	40380000 	.word	0x40380000
 8008388:	40180000 	.word	0x40180000
 800838c:	c0180000 	.word	0xc0180000
 8008390:	4692      	mov	sl, r2
 8008392:	469b      	mov	fp, r3
 8008394:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008398:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083a2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80083a6:	4619      	mov	r1, r3
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	4bd2      	ldr	r3, [pc, #840]	@ (80086f8 <sdp4_deep_initialize+0x1288>)
 80083ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b2:	f7f8 f931 	bl	8000618 <__aeabi_dmul>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4610      	mov	r0, r2
 80083bc:	4619      	mov	r1, r3
 80083be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f8 f927 	bl	8000618 <__aeabi_dmul>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4614      	mov	r4, r2
 80083d0:	461d      	mov	r5, r3
 80083d2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80083d6:	4619      	mov	r1, r3
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	4bc7      	ldr	r3, [pc, #796]	@ (80086fc <sdp4_deep_initialize+0x128c>)
 80083de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083e2:	f7f8 f919 	bl	8000618 <__aeabi_dmul>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f7f8 f90f 	bl	8000618 <__aeabi_dmul>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	f7f7 ff51 	bl	80002a8 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4640      	mov	r0, r8
 800840c:	4649      	mov	r1, r9
 800840e:	f7f8 f903 	bl	8000618 <__aeabi_dmul>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800841e:	461c      	mov	r4, r3
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4650      	mov	r0, sl
 8008426:	4659      	mov	r1, fp
 8008428:	f7f7 ff40 	bl	80002ac <__adddf3>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	e9c4 2300 	strd	r2, r3, [r4]
		z12=-6*(a1*a6+a3*a5)+deep_arg->eosq*(-24*(x2*x7+x1*x8)-6*(x3*x6+x4*x5));
 8008434:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008438:	4619      	mov	r1, r3
 800843a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800843e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008446:	f7f8 f8e7 	bl	8000618 <__aeabi_dmul>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4614      	mov	r4, r2
 8008450:	461d      	mov	r5, r3
 8008452:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008456:	4619      	mov	r1, r3
 8008458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008464:	f7f8 f8d8 	bl	8000618 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f7 ff1c 	bl	80002ac <__adddf3>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4610      	mov	r0, r2
 800847a:	4619      	mov	r1, r3
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	4b9f      	ldr	r3, [pc, #636]	@ (8008700 <sdp4_deep_initialize+0x1290>)
 8008482:	f7f8 f8c9 	bl	8000618 <__aeabi_dmul>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	e9c7 2300 	strd	r2, r3, [r7]
 800848e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008492:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800849c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80084a0:	4619      	mov	r1, r3
 80084a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80084ae:	f7f8 f8b3 	bl	8000618 <__aeabi_dmul>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4614      	mov	r4, r2
 80084b8:	461d      	mov	r5, r3
 80084ba:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80084be:	4619      	mov	r1, r3
 80084c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80084c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084cc:	f7f8 f8a4 	bl	8000618 <__aeabi_dmul>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f7f7 fee8 	bl	80002ac <__adddf3>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4610      	mov	r0, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	4b83      	ldr	r3, [pc, #524]	@ (80086f8 <sdp4_deep_initialize+0x1288>)
 80084ea:	f7f8 f895 	bl	8000618 <__aeabi_dmul>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4690      	mov	r8, r2
 80084f4:	4699      	mov	r9, r3
 80084f6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80084fa:	4619      	mov	r1, r3
 80084fc:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8008500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008508:	f7f8 f886 	bl	8000618 <__aeabi_dmul>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4614      	mov	r4, r2
 8008512:	461d      	mov	r5, r3
 8008514:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008518:	4619      	mov	r1, r3
 800851a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008526:	f7f8 f877 	bl	8000618 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4620      	mov	r0, r4
 8008530:	4629      	mov	r1, r5
 8008532:	f7f7 febb 	bl	80002ac <__adddf3>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4610      	mov	r0, r2
 800853c:	4619      	mov	r1, r3
 800853e:	f04f 0200 	mov.w	r2, #0
 8008542:	4b6e      	ldr	r3, [pc, #440]	@ (80086fc <sdp4_deep_initialize+0x128c>)
 8008544:	f7f8 f868 	bl	8000618 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f7 feaa 	bl	80002a8 <__aeabi_dsub>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4650      	mov	r0, sl
 800855a:	4659      	mov	r1, fp
 800855c:	f7f8 f85c 	bl	8000618 <__aeabi_dmul>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800856c:	461c      	mov	r4, r3
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008576:	f7f7 fe99 	bl	80002ac <__adddf3>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	e944 2302 	strd	r2, r3, [r4, #-8]
		z13=-6*a3*a6+deep_arg->eosq*(-24*x2*x8-6*x4*x6);
 8008582:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008586:	4619      	mov	r1, r3
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	4b5c      	ldr	r3, [pc, #368]	@ (8008700 <sdp4_deep_initialize+0x1290>)
 800858e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008592:	f7f8 f841 	bl	8000618 <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4610      	mov	r0, r2
 800859c:	4619      	mov	r1, r3
 800859e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80085a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085a6:	f7f8 f837 	bl	8000618 <__aeabi_dmul>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4692      	mov	sl, r2
 80085b0:	469b      	mov	fp, r3
 80085b2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80085b6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085c0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80085c4:	4619      	mov	r1, r3
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	4b4b      	ldr	r3, [pc, #300]	@ (80086f8 <sdp4_deep_initialize+0x1288>)
 80085cc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80085d0:	f7f8 f822 	bl	8000618 <__aeabi_dmul>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4610      	mov	r0, r2
 80085da:	4619      	mov	r1, r3
 80085dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80085e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085e4:	f7f8 f818 	bl	8000618 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4614      	mov	r4, r2
 80085ee:	461d      	mov	r5, r3
 80085f0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80085f4:	4619      	mov	r1, r3
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	4b40      	ldr	r3, [pc, #256]	@ (80086fc <sdp4_deep_initialize+0x128c>)
 80085fc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008600:	f7f8 f80a 	bl	8000618 <__aeabi_dmul>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4610      	mov	r0, r2
 800860a:	4619      	mov	r1, r3
 800860c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8008610:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008614:	f7f8 f800 	bl	8000618 <__aeabi_dmul>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	f7f7 fe42 	bl	80002a8 <__aeabi_dsub>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4640      	mov	r0, r8
 800862a:	4649      	mov	r1, r9
 800862c:	f7f7 fff4 	bl	8000618 <__aeabi_dmul>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4610      	mov	r0, r2
 8008636:	4619      	mov	r1, r3
 8008638:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800863c:	461c      	mov	r4, r3
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4650      	mov	r0, sl
 8008644:	4659      	mov	r1, fp
 8008646:	f7f7 fe31 	bl	80002ac <__adddf3>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	e9c4 2300 	strd	r2, r3, [r4]
		z21=6*a2*a5+deep_arg->eosq*(24*x1*x5-6*x3*x7);
 8008652:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008656:	4619      	mov	r1, r3
 8008658:	f04f 0200 	mov.w	r2, #0
 800865c:	4b27      	ldr	r3, [pc, #156]	@ (80086fc <sdp4_deep_initialize+0x128c>)
 800865e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008662:	f7f7 ffd9 	bl	8000618 <__aeabi_dmul>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4610      	mov	r0, r2
 800866c:	4619      	mov	r1, r3
 800866e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7f7 ffcf 	bl	8000618 <__aeabi_dmul>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4692      	mov	sl, r2
 8008680:	469b      	mov	fp, r3
 8008682:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008686:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008690:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008694:	4619      	mov	r1, r3
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	4b1a      	ldr	r3, [pc, #104]	@ (8008704 <sdp4_deep_initialize+0x1294>)
 800869c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a0:	f7f7 ffba 	bl	8000618 <__aeabi_dmul>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4610      	mov	r0, r2
 80086aa:	4619      	mov	r1, r3
 80086ac:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	f7f7 ffb0 	bl	8000618 <__aeabi_dmul>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4614      	mov	r4, r2
 80086be:	461d      	mov	r5, r3
 80086c0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80086c4:	4619      	mov	r1, r3
 80086c6:	f04f 0200 	mov.w	r2, #0
 80086ca:	4b0c      	ldr	r3, [pc, #48]	@ (80086fc <sdp4_deep_initialize+0x128c>)
 80086cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d0:	f7f7 ffa2 	bl	8000618 <__aeabi_dmul>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4610      	mov	r0, r2
 80086da:	4619      	mov	r1, r3
 80086dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f7f7 ff98 	bl	8000618 <__aeabi_dmul>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f7 fdda 	bl	80002a8 <__aeabi_dsub>
 80086f4:	e008      	b.n	8008708 <sdp4_deep_initialize+0x1298>
 80086f6:	bf00      	nop
 80086f8:	c0380000 	.word	0xc0380000
 80086fc:	40180000 	.word	0x40180000
 8008700:	c0180000 	.word	0xc0180000
 8008704:	40380000 	.word	0x40380000
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4640      	mov	r0, r8
 800870e:	4649      	mov	r1, r9
 8008710:	f7f7 ff82 	bl	8000618 <__aeabi_dmul>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4610      	mov	r0, r2
 800871a:	4619      	mov	r1, r3
 800871c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008720:	461c      	mov	r4, r3
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4650      	mov	r0, sl
 8008728:	4659      	mov	r1, fp
 800872a:	f7f7 fdbf 	bl	80002ac <__adddf3>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	e944 2302 	strd	r2, r3, [r4, #-8]
		z22=6*(a4*a5+a2*a6)+deep_arg->eosq*(24*(x2*x5+x1*x6)-6*(x4*x7+x3*x8));
 8008736:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800873a:	4619      	mov	r1, r3
 800873c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008748:	f7f7 ff66 	bl	8000618 <__aeabi_dmul>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4614      	mov	r4, r2
 8008752:	461d      	mov	r5, r3
 8008754:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008758:	4619      	mov	r1, r3
 800875a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800875e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008766:	f7f7 ff57 	bl	8000618 <__aeabi_dmul>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f7 fd9b 	bl	80002ac <__adddf3>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4610      	mov	r0, r2
 800877c:	4619      	mov	r1, r3
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	4bcf      	ldr	r3, [pc, #828]	@ (8008ac0 <sdp4_deep_initialize+0x1650>)
 8008784:	f7f7 ff48 	bl	8000618 <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	e9c7 2300 	strd	r2, r3, [r7]
 8008790:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008794:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800879e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80087a2:	4619      	mov	r1, r3
 80087a4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80087b0:	f7f7 ff32 	bl	8000618 <__aeabi_dmul>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	461d      	mov	r5, r3
 80087bc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80087c0:	4619      	mov	r1, r3
 80087c2:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80087c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ce:	f7f7 ff23 	bl	8000618 <__aeabi_dmul>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4620      	mov	r0, r4
 80087d8:	4629      	mov	r1, r5
 80087da:	f7f7 fd67 	bl	80002ac <__adddf3>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4610      	mov	r0, r2
 80087e4:	4619      	mov	r1, r3
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	4bb6      	ldr	r3, [pc, #728]	@ (8008ac4 <sdp4_deep_initialize+0x1654>)
 80087ec:	f7f7 ff14 	bl	8000618 <__aeabi_dmul>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4690      	mov	r8, r2
 80087f6:	4699      	mov	r9, r3
 80087f8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80087fc:	4619      	mov	r1, r3
 80087fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800880a:	f7f7 ff05 	bl	8000618 <__aeabi_dmul>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4614      	mov	r4, r2
 8008814:	461d      	mov	r5, r3
 8008816:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800881a:	4619      	mov	r1, r3
 800881c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008820:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008828:	f7f7 fef6 	bl	8000618 <__aeabi_dmul>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4620      	mov	r0, r4
 8008832:	4629      	mov	r1, r5
 8008834:	f7f7 fd3a 	bl	80002ac <__adddf3>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4610      	mov	r0, r2
 800883e:	4619      	mov	r1, r3
 8008840:	f04f 0200 	mov.w	r2, #0
 8008844:	4b9e      	ldr	r3, [pc, #632]	@ (8008ac0 <sdp4_deep_initialize+0x1650>)
 8008846:	f7f7 fee7 	bl	8000618 <__aeabi_dmul>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4640      	mov	r0, r8
 8008850:	4649      	mov	r1, r9
 8008852:	f7f7 fd29 	bl	80002a8 <__aeabi_dsub>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4650      	mov	r0, sl
 800885c:	4659      	mov	r1, fp
 800885e:	f7f7 fedb 	bl	8000618 <__aeabi_dmul>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800886e:	461c      	mov	r4, r3
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008878:	f7f7 fd18 	bl	80002ac <__adddf3>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	e9c4 2300 	strd	r2, r3, [r4]
		z23=6*a4*a6+deep_arg->eosq*(24*x2*x6-6*x4*x8);
 8008884:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8008888:	4619      	mov	r1, r3
 800888a:	f04f 0200 	mov.w	r2, #0
 800888e:	4b8c      	ldr	r3, [pc, #560]	@ (8008ac0 <sdp4_deep_initialize+0x1650>)
 8008890:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008894:	f7f7 fec0 	bl	8000618 <__aeabi_dmul>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4610      	mov	r0, r2
 800889e:	4619      	mov	r1, r3
 80088a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80088a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088a8:	f7f7 feb6 	bl	8000618 <__aeabi_dmul>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4692      	mov	sl, r2
 80088b2:	469b      	mov	fp, r3
 80088b4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80088b8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088c2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80088c6:	4619      	mov	r1, r3
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	4b7d      	ldr	r3, [pc, #500]	@ (8008ac4 <sdp4_deep_initialize+0x1654>)
 80088ce:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80088d2:	f7f7 fea1 	bl	8000618 <__aeabi_dmul>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4610      	mov	r0, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80088e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088e6:	f7f7 fe97 	bl	8000618 <__aeabi_dmul>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4614      	mov	r4, r2
 80088f0:	461d      	mov	r5, r3
 80088f2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80088f6:	4619      	mov	r1, r3
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	4b70      	ldr	r3, [pc, #448]	@ (8008ac0 <sdp4_deep_initialize+0x1650>)
 80088fe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008902:	f7f7 fe89 	bl	8000618 <__aeabi_dmul>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4610      	mov	r0, r2
 800890c:	4619      	mov	r1, r3
 800890e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008912:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008916:	f7f7 fe7f 	bl	8000618 <__aeabi_dmul>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fcc1 	bl	80002a8 <__aeabi_dsub>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f7 fe73 	bl	8000618 <__aeabi_dmul>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4610      	mov	r0, r2
 8008938:	4619      	mov	r1, r3
 800893a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800893e:	461c      	mov	r4, r3
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4650      	mov	r0, sl
 8008946:	4659      	mov	r1, fp
 8008948:	f7f7 fcb0 	bl	80002ac <__adddf3>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	e944 2302 	strd	r2, r3, [r4, #-8]
		z1=z1+z1+deep_arg->betao2*z31;
 8008954:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008958:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	f7f7 fca4 	bl	80002ac <__adddf3>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4690      	mov	r8, r2
 800896a:	4699      	mov	r9, r3
 800896c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008970:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800897a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f7f7 fe49 	bl	8000618 <__aeabi_dmul>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4610      	mov	r0, r2
 800898c:	4619      	mov	r1, r3
 800898e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008992:	461c      	mov	r4, r3
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4640      	mov	r0, r8
 800899a:	4649      	mov	r1, r9
 800899c:	f7f7 fc86 	bl	80002ac <__adddf3>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	e944 2302 	strd	r2, r3, [r4, #-8]
		z2=z2+z2+deep_arg->betao2*z32;
 80089a8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80089ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	f7f7 fc7a 	bl	80002ac <__adddf3>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4690      	mov	r8, r2
 80089be:	4699      	mov	r9, r3
 80089c0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80089c4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80089ce:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80089d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089d6:	f7f7 fe1f 	bl	8000618 <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80089e6:	461c      	mov	r4, r3
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f7 fc5c 	bl	80002ac <__adddf3>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	e9c4 2300 	strd	r2, r3, [r4]
		z3=z3+z3+deep_arg->betao2*z33;
 80089fc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008a00:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	f7f7 fc50 	bl	80002ac <__adddf3>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4690      	mov	r8, r2
 8008a12:	4699      	mov	r9, r3
 8008a14:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008a18:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008a22:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	f7f7 fdf5 	bl	8000618 <__aeabi_dmul>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008a3a:	461c      	mov	r4, r3
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f7f7 fc32 	bl	80002ac <__adddf3>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	e944 2302 	strd	r2, r3, [r4, #-8]
		s3=cc*xnoi;
 8008a50:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008a54:	461c      	mov	r4, r3
 8008a56:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a5e:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8008a62:	f7f7 fdd9 	bl	8000618 <__aeabi_dmul>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9c4 2300 	strd	r2, r3, [r4]
		s2=-0.5*s3/deep_arg->betao;
 8008a6e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008a72:	4619      	mov	r1, r3
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	4b13      	ldr	r3, [pc, #76]	@ (8008ac8 <sdp4_deep_initialize+0x1658>)
 8008a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a7e:	f7f7 fdcb 	bl	8000618 <__aeabi_dmul>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4614      	mov	r4, r2
 8008a88:	461d      	mov	r5, r3
 8008a8a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008a8e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008a98:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8008a9c:	460e      	mov	r6, r1
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7f7 fee3 	bl	800086c <__aeabi_ddiv>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	e946 2302 	strd	r2, r3, [r6, #-8]
		s4=s3*deep_arg->betao;
 8008aae:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ab2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008abc:	e006      	b.n	8008acc <sdp4_deep_initialize+0x165c>
 8008abe:	bf00      	nop
 8008ac0:	40180000 	.word	0x40180000
 8008ac4:	40380000 	.word	0x40380000
 8008ac8:	bfe00000 	.word	0xbfe00000
 8008acc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008ad0:	461d      	mov	r5, r3
 8008ad2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008ad6:	461c      	mov	r4, r3
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008ae0:	f7f7 fd9a 	bl	8000618 <__aeabi_dmul>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	e9c5 2300 	strd	r2, r3, [r5]
		s1=-15*eq*s4;
 8008aec:	f04f 0200 	mov.w	r2, #0
 8008af0:	4bc8      	ldr	r3, [pc, #800]	@ (8008e14 <sdp4_deep_initialize+0x19a4>)
 8008af2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8008af6:	f7f7 fd8f 	bl	8000618 <__aeabi_dmul>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4614      	mov	r4, r2
 8008b00:	461d      	mov	r5, r3
 8008b02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008b06:	461e      	mov	r6, r3
 8008b08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b16:	f7f7 fd7f 	bl	8000618 <__aeabi_dmul>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	e946 2302 	strd	r2, r3, [r6, #-8]
		s5=x1*x3+x2*x4;
 8008b22:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008b26:	4619      	mov	r1, r3
 8008b28:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b34:	f7f7 fd70 	bl	8000618 <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4690      	mov	r8, r2
 8008b3e:	4699      	mov	r9, r3
 8008b40:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008b44:	4619      	mov	r1, r3
 8008b46:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008b4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b4e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008b52:	f7f7 fd61 	bl	8000618 <__aeabi_dmul>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b62:	461c      	mov	r4, r3
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4640      	mov	r0, r8
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f7f7 fb9e 	bl	80002ac <__adddf3>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	e9c4 2300 	strd	r2, r3, [r4]
		s6=x2*x3+x1*x4;
 8008b78:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008b8a:	f7f7 fd45 	bl	8000618 <__aeabi_dmul>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4690      	mov	r8, r2
 8008b94:	4699      	mov	r9, r3
 8008b96:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008ba0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ba8:	f7f7 fd36 	bl	8000618 <__aeabi_dmul>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bb8:	461c      	mov	r4, r3
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	f7f7 fb73 	bl	80002ac <__adddf3>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e944 2302 	strd	r2, r3, [r4, #-8]
		s7=x2*x4-x1*x3;
 8008bce:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008bd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bdc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008be0:	f7f7 fd1a 	bl	8000618 <__aeabi_dmul>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4690      	mov	r8, r2
 8008bea:	4699      	mov	r9, r3
 8008bec:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bfe:	f7f7 fd0b 	bl	8000618 <__aeabi_dmul>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008c0e:	461c      	mov	r4, r3
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4640      	mov	r0, r8
 8008c16:	4649      	mov	r1, r9
 8008c18:	f7f7 fb46 	bl	80002a8 <__aeabi_dsub>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	e9c4 2300 	strd	r2, r3, [r4]
		se=s1*zn*s5;
 8008c24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008c28:	4619      	mov	r1, r3
 8008c2a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8008c2e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008c32:	f7f7 fcf1 	bl	8000618 <__aeabi_dmul>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4614      	mov	r4, r2
 8008c3c:	461d      	mov	r5, r3
 8008c3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008c42:	461e      	mov	r6, r3
 8008c44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	462b      	mov	r3, r5
 8008c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c52:	f7f7 fce1 	bl	8000618 <__aeabi_dmul>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	e946 2302 	strd	r2, r3, [r6, #-8]
		si=s2*zn*(z11+z13);
 8008c5e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008c62:	4619      	mov	r1, r3
 8008c64:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8008c68:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008c6c:	f7f7 fcd4 	bl	8000618 <__aeabi_dmul>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4690      	mov	r8, r2
 8008c76:	4699      	mov	r9, r3
 8008c78:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c8a:	f7f7 fb0f 	bl	80002ac <__adddf3>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4610      	mov	r0, r2
 8008c94:	4619      	mov	r1, r3
 8008c96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c9a:	461c      	mov	r4, r3
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 fcb8 	bl	8000618 <__aeabi_dmul>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	e9c4 2300 	strd	r2, r3, [r4]
		sl=-zn*s3*(z1+z3-14-6*deep_arg->eosq);
 8008cb0:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8008cba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ccc:	f7f7 fca4 	bl	8000618 <__aeabi_dmul>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4690      	mov	r8, r2
 8008cd6:	4699      	mov	r9, r3
 8008cd8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008ce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ce6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008cea:	f7f7 fadf 	bl	80002ac <__adddf3>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	4b47      	ldr	r3, [pc, #284]	@ (8008e18 <sdp4_deep_initialize+0x19a8>)
 8008cfc:	f7f7 fad4 	bl	80002a8 <__aeabi_dsub>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4614      	mov	r4, r2
 8008d06:	461d      	mov	r5, r3
 8008d08:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008d0c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d16:	f04f 0200 	mov.w	r2, #0
 8008d1a:	4b40      	ldr	r3, [pc, #256]	@ (8008e1c <sdp4_deep_initialize+0x19ac>)
 8008d1c:	f7f7 fc7c 	bl	8000618 <__aeabi_dmul>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7f7 fabe 	bl	80002a8 <__aeabi_dsub>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4610      	mov	r0, r2
 8008d32:	4619      	mov	r1, r3
 8008d34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d38:	461c      	mov	r4, r3
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4649      	mov	r1, r9
 8008d42:	f7f7 fc69 	bl	8000618 <__aeabi_dmul>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	e944 2302 	strd	r2, r3, [r4, #-8]
		sgh=s4*zn*(z31+z33-6);
 8008d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008d52:	4619      	mov	r1, r3
 8008d54:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8008d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d5c:	f7f7 fc5c 	bl	8000618 <__aeabi_dmul>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4690      	mov	r8, r2
 8008d66:	4699      	mov	r9, r3
 8008d68:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d7a:	f7f7 fa97 	bl	80002ac <__adddf3>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	4b24      	ldr	r3, [pc, #144]	@ (8008e1c <sdp4_deep_initialize+0x19ac>)
 8008d8c:	f7f7 fa8c 	bl	80002a8 <__aeabi_dsub>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4610      	mov	r0, r2
 8008d96:	4619      	mov	r1, r3
 8008d98:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008d9c:	461c      	mov	r4, r3
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	f7f7 fc37 	bl	8000618 <__aeabi_dmul>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	e9c4 2300 	strd	r2, r3, [r4]
		sh=-zn*s2*(z21+z23);
 8008db2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8008db6:	60bb      	str	r3, [r7, #8]
 8008db8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8008dbc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008dc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dce:	f7f7 fc23 	bl	8000618 <__aeabi_dmul>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4614      	mov	r4, r2
 8008dd8:	461d      	mov	r5, r3
 8008dda:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008dde:	4619      	mov	r1, r3
 8008de0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8008de4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008de8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008dec:	f7f7 fa5e 	bl	80002ac <__adddf3>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fc0e 	bl	8000618 <__aeabi_dmul>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358

		if (m->xqncl<5.2359877E-2)
 8008e04:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008e08:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 8008e12:	e005      	b.n	8008e20 <sdp4_deep_initialize+0x19b0>
 8008e14:	c02e0000 	.word	0xc02e0000
 8008e18:	402c0000 	.word	0x402c0000
 8008e1c:	40180000 	.word	0x40180000
 8008e20:	a3e8      	add	r3, pc, #928	@ (adr r3, 80091c4 <sdp4_deep_initialize+0x1d54>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fe69 	bl	8000afc <__aeabi_dcmplt>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d005      	beq.n	8008e3c <sdp4_deep_initialize+0x19cc>
			sh=0;
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358

		m->ee2=2*s1*s6;
 8008e3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e40:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	f7f7 fa30 	bl	80002ac <__adddf3>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4610      	mov	r0, r2
 8008e52:	4619      	mov	r1, r3
 8008e54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e5c:	f7f7 fbdc 	bl	8000618 <__aeabi_dmul>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4610      	mov	r0, r2
 8008e66:	4619      	mov	r1, r3
 8008e68:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008e6c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	e9c3 013e 	strd	r0, r1, [r3, #248]	@ 0xf8
		m->e3=2*s1*s7;
 8008e76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008e7a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	f7f7 fa13 	bl	80002ac <__adddf3>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fbbf 	bl	8000618 <__aeabi_dmul>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ea6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	e9c3 0140 	strd	r0, r1, [r3, #256]	@ 0x100
		m->xi2=2*s2*z12;
 8008eb0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008eb4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	f7f7 f9f6 	bl	80002ac <__adddf3>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008ecc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ed0:	f7f7 fba2 	bl	8000618 <__aeabi_dmul>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4619      	mov	r1, r3
 8008edc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ee0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	e9c3 0142 	strd	r0, r1, [r3, #264]	@ 0x108
		m->xi3=2*s2*(z13-z11);
 8008eea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008eee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	f7f7 f9d9 	bl	80002ac <__adddf3>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4614      	mov	r4, r2
 8008f00:	461d      	mov	r5, r3
 8008f02:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008f06:	4619      	mov	r1, r3
 8008f08:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f14:	f7f7 f9c8 	bl	80002a8 <__aeabi_dsub>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 fb7a 	bl	8000618 <__aeabi_dmul>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f30:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	e9c3 015a 	strd	r0, r1, [r3, #360]	@ 0x168
		m->xl2=-2*s3*z2;
 8008f3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008f3e:	4619      	mov	r1, r3
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8008f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f4c:	f7f7 fb64 	bl	8000618 <__aeabi_dmul>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4610      	mov	r0, r2
 8008f56:	4619      	mov	r1, r3
 8008f58:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f7f7 fb5a 	bl	8000618 <__aeabi_dmul>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f70:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
		m->xl3=-2*s3*(z3-z1);
 8008f7a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008f7e:	4619      	mov	r1, r3
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8008f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8c:	f7f7 fb44 	bl	8000618 <__aeabi_dmul>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4614      	mov	r4, r2
 8008f96:	461d      	mov	r5, r3
 8008f98:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8008fa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fa6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008faa:	f7f7 f97d 	bl	80002a8 <__aeabi_dsub>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	f7f7 fb2f 	bl	8000618 <__aeabi_dmul>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008fc6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	e9c3 0146 	strd	r0, r1, [r3, #280]	@ 0x118
		m->xl4=-2*s3*(-21-9*deep_arg->eosq)*ze;
 8008fd0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f04f 0200 	mov.w	r2, #0
 8008fda:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8008fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe2:	f7f7 fb19 	bl	8000618 <__aeabi_dmul>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4614      	mov	r4, r2
 8008fec:	461d      	mov	r5, r3
 8008fee:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ff2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	4b6d      	ldr	r3, [pc, #436]	@ (80091b8 <sdp4_deep_initialize+0x1d48>)
 8009002:	f7f7 fb09 	bl	8000618 <__aeabi_dmul>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	f04f 0000 	mov.w	r0, #0
 800900e:	496b      	ldr	r1, [pc, #428]	@ (80091bc <sdp4_deep_initialize+0x1d4c>)
 8009010:	f7f7 f94a 	bl	80002a8 <__aeabi_dsub>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4620      	mov	r0, r4
 800901a:	4629      	mov	r1, r5
 800901c:	f7f7 fafc 	bl	8000618 <__aeabi_dmul>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4610      	mov	r0, r2
 8009026:	4619      	mov	r1, r3
 8009028:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 800902c:	f7f7 faf4 	bl	8000618 <__aeabi_dmul>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4610      	mov	r0, r2
 8009036:	4619      	mov	r1, r3
 8009038:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800903c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	e9c3 0148 	strd	r0, r1, [r3, #288]	@ 0x120
		m->xgh2=2*s4*z32;
 8009046:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800904a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	f7f7 f92b 	bl	80002ac <__adddf3>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4610      	mov	r0, r2
 800905c:	4619      	mov	r1, r3
 800905e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009062:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009066:	f7f7 fad7 	bl	8000618 <__aeabi_dmul>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009076:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	e9c3 014a 	strd	r0, r1, [r3, #296]	@ 0x128
		m->xgh3=2*s4*(z33-z31);
 8009080:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009084:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	f7f7 f90e 	bl	80002ac <__adddf3>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4614      	mov	r4, r2
 8009096:	461d      	mov	r5, r3
 8009098:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800909c:	4619      	mov	r1, r3
 800909e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090aa:	f7f7 f8fd 	bl	80002a8 <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4620      	mov	r0, r4
 80090b4:	4629      	mov	r1, r5
 80090b6:	f7f7 faaf 	bl	8000618 <__aeabi_dmul>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4610      	mov	r0, r2
 80090c0:	4619      	mov	r1, r3
 80090c2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80090c6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	e9c3 014c 	strd	r0, r1, [r3, #304]	@ 0x130
		m->xgh4=-18*s4*ze;
 80090d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80090d4:	4619      	mov	r1, r3
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	4b39      	ldr	r3, [pc, #228]	@ (80091c0 <sdp4_deep_initialize+0x1d50>)
 80090dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e0:	f7f7 fa9a 	bl	8000618 <__aeabi_dmul>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4610      	mov	r0, r2
 80090ea:	4619      	mov	r1, r3
 80090ec:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 80090f0:	f7f7 fa92 	bl	8000618 <__aeabi_dmul>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4610      	mov	r0, r2
 80090fa:	4619      	mov	r1, r3
 80090fc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009100:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	e9c3 014e 	strd	r0, r1, [r3, #312]	@ 0x138
		m->xh2=-2*s2*z22;
 800910a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800910e:	4619      	mov	r1, r3
 8009110:	f04f 0200 	mov.w	r2, #0
 8009114:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009118:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800911c:	f7f7 fa7c 	bl	8000618 <__aeabi_dmul>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4610      	mov	r0, r2
 8009126:	4619      	mov	r1, r3
 8009128:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 fa72 	bl	8000618 <__aeabi_dmul>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4610      	mov	r0, r2
 800913a:	4619      	mov	r1, r3
 800913c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009140:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	e9c3 0150 	strd	r0, r1, [r3, #320]	@ 0x140
		m->xh3=-2*s2*(z23-z21);
 800914a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800914e:	4619      	mov	r1, r3
 8009150:	f04f 0200 	mov.w	r2, #0
 8009154:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009158:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800915c:	f7f7 fa5c 	bl	8000618 <__aeabi_dmul>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4614      	mov	r4, r2
 8009166:	461d      	mov	r5, r3
 8009168:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800916c:	4619      	mov	r1, r3
 800916e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8009172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009176:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800917a:	f7f7 f895 	bl	80002a8 <__aeabi_dsub>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4620      	mov	r0, r4
 8009184:	4629      	mov	r1, r5
 8009186:	f7f7 fa47 	bl	8000618 <__aeabi_dmul>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4610      	mov	r0, r2
 8009190:	4619      	mov	r1, r3
 8009192:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009196:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	e9c3 0152 	strd	r0, r1, [r3, #328]	@ 0x148

		//Skip lunar terms?
		if (m->lunarTermsDone) {
 80091a0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80091a4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f040 81a7 	bne.w	8009500 <sdp4_deep_initialize+0x2090>
 80091b2:	e00b      	b.n	80091cc <sdp4_deep_initialize+0x1d5c>
 80091b4:	f3af 8000 	nop.w
 80091b8:	40220000 	.word	0x40220000
 80091bc:	c0350000 	.word	0xc0350000
 80091c0:	c0320000 	.word	0xc0320000
 80091c4:	eeacd7a0 	.word	0xeeacd7a0
 80091c8:	3faacee9 	.word	0x3faacee9
			break;
		}

		/* Do lunar terms */
		m->sse=se;
 80091cc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80091d0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80091d4:	6819      	ldr	r1, [r3, #0]
 80091d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80091da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091de:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
		m->ssi=si;
 80091e2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80091e6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80091ea:	6819      	ldr	r1, [r3, #0]
 80091ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	e9c1 2356 	strd	r2, r3, [r1, #344]	@ 0x158
		m->ssl=sl;
 80091f8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80091fc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009200:	6819      	ldr	r1, [r3, #0]
 8009202:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009206:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800920a:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
		m->ssh=sh/deep_arg->sinio;
 800920e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009212:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800921c:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 8009220:	f7f7 fb24 	bl	800086c <__aeabi_ddiv>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4610      	mov	r0, r2
 800922a:	4619      	mov	r1, r3
 800922c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009230:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	e9c3 0176 	strd	r0, r1, [r3, #472]	@ 0x1d8
		m->ssg=sgh-deep_arg->cosio*m->ssh;
 800923a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800923e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009248:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800924c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 8009256:	f7f7 f9df 	bl	8000618 <__aeabi_dmul>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4610      	mov	r0, r2
 8009260:	4619      	mov	r1, r3
 8009262:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8009266:	461c      	mov	r4, r3
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009270:	f7f7 f81a 	bl	80002a8 <__aeabi_dsub>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4610      	mov	r0, r2
 800927a:	4619      	mov	r1, r3
 800927c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009280:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	e9c3 0158 	strd	r0, r1, [r3, #352]	@ 0x160
		m->se2=m->ee2;
 800928a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800928e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 8009298:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800929c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	e9c3 015c 	strd	r0, r1, [r3, #368]	@ 0x170
		m->si2=m->xi2;
 80092a6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092aa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 80092b4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092b8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	e9c3 015e 	strd	r0, r1, [r3, #376]	@ 0x178
		m->sl2=m->xl2;
 80092c2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092c6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 80092d0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092d4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	e9c3 0160 	strd	r0, r1, [r3, #384]	@ 0x180
		m->sgh2=m->xgh2;
 80092de:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092e2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 80092ec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092f0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	e9c3 0162 	strd	r0, r1, [r3, #392]	@ 0x188
		m->sh2=m->xh2;
 80092fa:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092fe:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 8009308:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800930c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	e9c3 0164 	strd	r0, r1, [r3, #400]	@ 0x190
		m->se3=m->e3;
 8009316:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800931a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 8009324:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009328:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	e9c3 0166 	strd	r0, r1, [r3, #408]	@ 0x198
		m->si3=m->xi3;
 8009332:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009336:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	@ 0x168
 8009340:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009344:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	e9c3 0168 	strd	r0, r1, [r3, #416]	@ 0x1a0
		m->sl3=m->xl3;
 800934e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009352:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	@ 0x118
 800935c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009360:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	e9c3 016a 	strd	r0, r1, [r3, #424]	@ 0x1a8
		m->sgh3=m->xgh3;
 800936a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800936e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	@ 0x130
 8009378:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800937c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	e9c3 016c 	strd	r0, r1, [r3, #432]	@ 0x1b0
		m->sh3=m->xh3;
 8009386:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800938a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 8009394:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009398:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	e9c3 016e 	strd	r0, r1, [r3, #440]	@ 0x1b8
		m->sl4=m->xl4;
 80093a2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093a6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 80093b0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093b4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	e9c3 0170 	strd	r0, r1, [r3, #448]	@ 0x1c0
		m->sgh4=m->xgh4;
 80093be:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093c2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	@ 0x138
 80093cc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093d0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	e9c3 0172 	strd	r0, r1, [r3, #456]	@ 0x1c8
		zcosg=m->zcosgl;
 80093da:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093de:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 80093e8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
		zsing=m->zsingl;
 80093ec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093f0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 80093fa:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
		zcosi=m->zcosil;
 80093fe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009402:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	@ 0x2b8
 800940c:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
		zsini=m->zsinil;
 8009410:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009414:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 800941e:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
		zcosh=m->zcoshl*cosq+m->zsinhl*sinq;
 8009422:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009426:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 8009430:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8009434:	f7f7 f8f0 	bl	8000618 <__aeabi_dmul>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4614      	mov	r4, r2
 800943e:	461d      	mov	r5, r3
 8009440:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009444:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 800944e:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8009452:	f7f7 f8e1 	bl	8000618 <__aeabi_dmul>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7f6 ff25 	bl	80002ac <__adddf3>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
		zsinh=sinq*m->zcoshl-cosq*m->zsinhl;
 800946a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800946e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 8009478:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 800947c:	f7f7 f8cc 	bl	8000618 <__aeabi_dmul>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4614      	mov	r4, r2
 8009486:	461d      	mov	r5, r3
 8009488:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800948c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 8009496:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 800949a:	f7f7 f8bd 	bl	8000618 <__aeabi_dmul>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4620      	mov	r0, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	f7f6 feff 	bl	80002a8 <__aeabi_dsub>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
		zn=ZNL;
 80094b2:	a30d      	add	r3, pc, #52	@ (adr r3, 80094e8 <sdp4_deep_initialize+0x2078>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
		cc=C1L;
 80094bc:	a30c      	add	r3, pc, #48	@ (adr r3, 80094f0 <sdp4_deep_initialize+0x2080>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
		ze=ZEL;
 80094c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80094f8 <sdp4_deep_initialize+0x2088>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
		/* zmo=m->zmol; */
		//Set lunarTermsDone flag:
		m->lunarTermsDone = true;
 80094d0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80094d4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	2301      	movs	r3, #1
 80094dc:	6013      	str	r3, [r2, #0]
		a1=zcosg*zcosh+zsing*zcosi*zsinh;
 80094de:	f7fe bae9 	b.w	8007ab4 <sdp4_deep_initialize+0x644>
 80094e2:	bf00      	nop
 80094e4:	f3af 8000 	nop.w
 80094e8:	de6329c8 	.word	0xde6329c8
 80094ec:	3f24c16a 	.word	0x3f24c16a
 80094f0:	e793194b 	.word	0xe793194b
 80094f4:	3ea0186c 	.word	0x3ea0186c
 80094f8:	5119ce07 	.word	0x5119ce07
 80094fc:	3fac1bda 	.word	0x3fac1bda
			break;
 8009500:	bf00      	nop
	}

	m->sse=m->sse+se;
 8009502:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009506:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	@ 0x150
 8009510:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009514:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009518:	f7f6 fec8 	bl	80002ac <__adddf3>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8009524:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009528:	6809      	ldr	r1, [r1, #0]
 800952a:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
	m->ssi=m->ssi+si;
 800952e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009532:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	e9d3 0156 	ldrd	r0, r1, [r3, #344]	@ 0x158
 800953c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f7f6 feb2 	bl	80002ac <__adddf3>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8009550:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009554:	6809      	ldr	r1, [r1, #0]
 8009556:	e9c1 2356 	strd	r2, r3, [r1, #344]	@ 0x158
	m->ssl=m->ssl+sl;
 800955a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800955e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 8009568:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800956c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009570:	f7f6 fe9c 	bl	80002ac <__adddf3>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800957c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009580:	6809      	ldr	r1, [r1, #0]
 8009582:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
	m->ssg=m->ssg+sgh-deep_arg->cosio/deep_arg->sinio*sh;
 8009586:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800958a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	@ 0x160
 8009594:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f7f6 fe86 	bl	80002ac <__adddf3>
 80095a0:	4602      	mov	r2, r0
 80095a2:	460b      	mov	r3, r1
 80095a4:	4614      	mov	r4, r2
 80095a6:	461d      	mov	r5, r3
 80095a8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80095ac:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80095b6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80095ba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80095c4:	f7f7 f952 	bl	800086c <__aeabi_ddiv>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4610      	mov	r0, r2
 80095ce:	4619      	mov	r1, r3
 80095d0:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 80095d4:	f7f7 f820 	bl	8000618 <__aeabi_dmul>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4620      	mov	r0, r4
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f6 fe62 	bl	80002a8 <__aeabi_dsub>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 80095ec:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 80095f0:	6809      	ldr	r1, [r1, #0]
 80095f2:	e9c1 2358 	strd	r2, r3, [r1, #352]	@ 0x160
	m->ssh=m->ssh+sh/deep_arg->sinio;
 80095f6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80095fa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	e9d3 4576 	ldrd	r4, r5, [r3, #472]	@ 0x1d8
 8009604:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009608:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009612:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 8009616:	f7f7 f929 	bl	800086c <__aeabi_ddiv>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4620      	mov	r0, r4
 8009620:	4629      	mov	r1, r5
 8009622:	f7f6 fe43 	bl	80002ac <__adddf3>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800962e:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 8009632:	6809      	ldr	r1, [r1, #0]
 8009634:	e9c1 2376 	strd	r2, r3, [r1, #472]	@ 0x1d8

	/* Geopotential resonance initialization for 12 hour orbits */
	m->resonanceFlag = 0;
 8009638:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800963c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	605a      	str	r2, [r3, #4]
	m->synchronousFlag = 0;
 8009646:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800964a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2200      	movs	r2, #0
 8009652:	609a      	str	r2, [r3, #8]

	if (!((m->xnq<0.0052359877) && (m->xnq>0.0034906585)))
 8009654:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009658:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 8009662:	2301      	movs	r3, #1
 8009664:	461c      	mov	r4, r3
 8009666:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8009a5c <sdp4_deep_initialize+0x25ec>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f7f7 fa46 	bl	8000afc <__aeabi_dcmplt>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <sdp4_deep_initialize+0x220a>
 8009676:	2300      	movs	r3, #0
 8009678:	461c      	mov	r4, r3
 800967a:	b2e3      	uxtb	r3, r4
 800967c:	f083 0301 	eor.w	r3, r3, #1
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d119      	bne.n	80096ba <sdp4_deep_initialize+0x224a>
 8009686:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800968a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 8009694:	2301      	movs	r3, #1
 8009696:	461c      	mov	r4, r3
 8009698:	a3f2      	add	r3, pc, #968	@ (adr r3, 8009a64 <sdp4_deep_initialize+0x25f4>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f7 fa4b 	bl	8000b38 <__aeabi_dcmpgt>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <sdp4_deep_initialize+0x223c>
 80096a8:	2300      	movs	r3, #0
 80096aa:	461c      	mov	r4, r3
 80096ac:	b2e3      	uxtb	r3, r4
 80096ae:	f083 0301 	eor.w	r3, r3, #1
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f001 845b 	beq.w	800af70 <sdp4_deep_initialize+0x3b00>
	{
		if ((m->xnq<0.00826) || (m->xnq>0.00924))
 80096ba:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80096be:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 80096c8:	a3e8      	add	r3, pc, #928	@ (adr r3, 8009a6c <sdp4_deep_initialize+0x25fc>)
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	f7f7 fa15 	bl	8000afc <__aeabi_dcmplt>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f041 8740 	bne.w	800b55a <sdp4_deep_initialize+0x40ea>
 80096da:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80096de:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 80096e8:	a3e2      	add	r3, pc, #904	@ (adr r3, 8009a74 <sdp4_deep_initialize+0x2604>)
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f7f7 fa23 	bl	8000b38 <__aeabi_dcmpgt>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f041 8730 	bne.w	800b55a <sdp4_deep_initialize+0x40ea>
		    return;

		if (eq<0.5)
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	4bd6      	ldr	r3, [pc, #856]	@ (8009a58 <sdp4_deep_initialize+0x25e8>)
 8009700:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009704:	f7f7 f9fa 	bl	8000afc <__aeabi_dcmplt>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	f041 8727 	bne.w	800b55e <sdp4_deep_initialize+0x40ee>
		    return;

		m->resonanceFlag = 1;
 8009710:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009714:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2201      	movs	r2, #1
 800971c:	605a      	str	r2, [r3, #4]
		eoc=eq*deep_arg->eosq;
 800971e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009722:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8009730:	460c      	mov	r4, r1
 8009732:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009736:	f7f6 ff6f 	bl	8000618 <__aeabi_dmul>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	e9c4 2300 	strd	r2, r3, [r4]
		g201=-0.306-(eq-0.64)*0.440;
 8009742:	a399      	add	r3, pc, #612	@ (adr r3, 80099a8 <sdp4_deep_initialize+0x2538>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800974c:	f7f6 fdac 	bl	80002a8 <__aeabi_dsub>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4610      	mov	r0, r2
 8009756:	4619      	mov	r1, r3
 8009758:	a395      	add	r3, pc, #596	@ (adr r3, 80099b0 <sdp4_deep_initialize+0x2540>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f7f6 ff5b 	bl	8000618 <__aeabi_dmul>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800976a:	460c      	mov	r4, r1
 800976c:	a192      	add	r1, pc, #584	@ (adr r1, 80099b8 <sdp4_deep_initialize+0x2548>)
 800976e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009772:	f7f6 fd99 	bl	80002a8 <__aeabi_dsub>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	e944 2302 	strd	r2, r3, [r4, #-8]

		if (eq<=0.65)
 800977e:	a390      	add	r3, pc, #576	@ (adr r3, 80099c0 <sdp4_deep_initialize+0x2550>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009788:	f7f7 f9c2 	bl	8000b10 <__aeabi_dcmple>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 81d2 	beq.w	8009b38 <sdp4_deep_initialize+0x26c8>
		{
			g211=3.616-13.247*eq+16.290*deep_arg->eosq;
 8009794:	a38c      	add	r3, pc, #560	@ (adr r3, 80099c8 <sdp4_deep_initialize+0x2558>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800979e:	f7f6 ff3b 	bl	8000618 <__aeabi_dmul>
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	a18a      	add	r1, pc, #552	@ (adr r1, 80099d0 <sdp4_deep_initialize+0x2560>)
 80097a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ac:	f7f6 fd7c 	bl	80002a8 <__aeabi_dsub>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4614      	mov	r4, r2
 80097b6:	461d      	mov	r5, r3
 80097b8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80097bc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097c6:	a384      	add	r3, pc, #528	@ (adr r3, 80099d8 <sdp4_deep_initialize+0x2568>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f6 ff24 	bl	8000618 <__aeabi_dmul>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4620      	mov	r0, r4
 80097d6:	4629      	mov	r1, r5
 80097d8:	f7f6 fd68 	bl	80002ac <__adddf3>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
			g310=-19.302+117.390*eq-228.419*deep_arg->eosq+156.591*eoc;
 80097e4:	a37e      	add	r3, pc, #504	@ (adr r3, 80099e0 <sdp4_deep_initialize+0x2570>)
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 80097ee:	f7f6 ff13 	bl	8000618 <__aeabi_dmul>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4610      	mov	r0, r2
 80097f8:	4619      	mov	r1, r3
 80097fa:	a37b      	add	r3, pc, #492	@ (adr r3, 80099e8 <sdp4_deep_initialize+0x2578>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f7f6 fd52 	bl	80002a8 <__aeabi_dsub>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4614      	mov	r4, r2
 800980a:	461d      	mov	r5, r3
 800980c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009810:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800981a:	a375      	add	r3, pc, #468	@ (adr r3, 80099f0 <sdp4_deep_initialize+0x2580>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	f7f6 fefa 	bl	8000618 <__aeabi_dmul>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f6 fd3c 	bl	80002a8 <__aeabi_dsub>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4614      	mov	r4, r2
 8009836:	461d      	mov	r5, r3
 8009838:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800983c:	4619      	mov	r1, r3
 800983e:	a36e      	add	r3, pc, #440	@ (adr r3, 80099f8 <sdp4_deep_initialize+0x2588>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009848:	f7f6 fee6 	bl	8000618 <__aeabi_dmul>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4620      	mov	r0, r4
 8009852:	4629      	mov	r1, r5
 8009854:	f7f6 fd2a 	bl	80002ac <__adddf3>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
			g322=-18.9068+109.7927*eq-214.6334*deep_arg->eosq+146.5816*eoc;
 8009860:	a367      	add	r3, pc, #412	@ (adr r3, 8009a00 <sdp4_deep_initialize+0x2590>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800986a:	f7f6 fed5 	bl	8000618 <__aeabi_dmul>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4610      	mov	r0, r2
 8009874:	4619      	mov	r1, r3
 8009876:	a364      	add	r3, pc, #400	@ (adr r3, 8009a08 <sdp4_deep_initialize+0x2598>)
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	f7f6 fd14 	bl	80002a8 <__aeabi_dsub>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4614      	mov	r4, r2
 8009886:	461d      	mov	r5, r3
 8009888:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800988c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009896:	a35e      	add	r3, pc, #376	@ (adr r3, 8009a10 <sdp4_deep_initialize+0x25a0>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 febc 	bl	8000618 <__aeabi_dmul>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4620      	mov	r0, r4
 80098a6:	4629      	mov	r1, r5
 80098a8:	f7f6 fcfe 	bl	80002a8 <__aeabi_dsub>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4614      	mov	r4, r2
 80098b2:	461d      	mov	r5, r3
 80098b4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80098b8:	4619      	mov	r1, r3
 80098ba:	a357      	add	r3, pc, #348	@ (adr r3, 8009a18 <sdp4_deep_initialize+0x25a8>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c4:	f7f6 fea8 	bl	8000618 <__aeabi_dmul>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4620      	mov	r0, r4
 80098ce:	4629      	mov	r1, r5
 80098d0:	f7f6 fcec 	bl	80002ac <__adddf3>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
			g410=-41.122+242.694*eq-471.094*deep_arg->eosq+313.953*eoc;
 80098dc:	a350      	add	r3, pc, #320	@ (adr r3, 8009a20 <sdp4_deep_initialize+0x25b0>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 80098e6:	f7f6 fe97 	bl	8000618 <__aeabi_dmul>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	4610      	mov	r0, r2
 80098f0:	4619      	mov	r1, r3
 80098f2:	a34d      	add	r3, pc, #308	@ (adr r3, 8009a28 <sdp4_deep_initialize+0x25b8>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fcd6 	bl	80002a8 <__aeabi_dsub>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4614      	mov	r4, r2
 8009902:	461d      	mov	r5, r3
 8009904:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009908:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009912:	a347      	add	r3, pc, #284	@ (adr r3, 8009a30 <sdp4_deep_initialize+0x25c0>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f7f6 fe7e 	bl	8000618 <__aeabi_dmul>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	4620      	mov	r0, r4
 8009922:	4629      	mov	r1, r5
 8009924:	f7f6 fcc0 	bl	80002a8 <__aeabi_dsub>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4614      	mov	r4, r2
 800992e:	461d      	mov	r5, r3
 8009930:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009934:	4619      	mov	r1, r3
 8009936:	a340      	add	r3, pc, #256	@ (adr r3, 8009a38 <sdp4_deep_initialize+0x25c8>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009940:	f7f6 fe6a 	bl	8000618 <__aeabi_dmul>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4620      	mov	r0, r4
 800994a:	4629      	mov	r1, r5
 800994c:	f7f6 fcae 	bl	80002ac <__adddf3>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
			g422=-146.407+841.880*eq-1629.014*deep_arg->eosq+1083.435 * eoc;
 8009958:	a339      	add	r3, pc, #228	@ (adr r3, 8009a40 <sdp4_deep_initialize+0x25d0>)
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009962:	f7f6 fe59 	bl	8000618 <__aeabi_dmul>
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	4610      	mov	r0, r2
 800996c:	4619      	mov	r1, r3
 800996e:	a336      	add	r3, pc, #216	@ (adr r3, 8009a48 <sdp4_deep_initialize+0x25d8>)
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	f7f6 fc98 	bl	80002a8 <__aeabi_dsub>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4614      	mov	r4, r2
 800997e:	461d      	mov	r5, r3
 8009980:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009984:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800998e:	a330      	add	r3, pc, #192	@ (adr r3, 8009a50 <sdp4_deep_initialize+0x25e0>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fe40 	bl	8000618 <__aeabi_dmul>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4620      	mov	r0, r4
 800999e:	4629      	mov	r1, r5
 80099a0:	e06c      	b.n	8009a7c <sdp4_deep_initialize+0x260c>
 80099a2:	bf00      	nop
 80099a4:	f3af 8000 	nop.w
 80099a8:	47ae147b 	.word	0x47ae147b
 80099ac:	3fe47ae1 	.word	0x3fe47ae1
 80099b0:	c28f5c29 	.word	0xc28f5c29
 80099b4:	3fdc28f5 	.word	0x3fdc28f5
 80099b8:	0624dd2f 	.word	0x0624dd2f
 80099bc:	bfd39581 	.word	0xbfd39581
 80099c0:	cccccccd 	.word	0xcccccccd
 80099c4:	3fe4cccc 	.word	0x3fe4cccc
 80099c8:	c8b43958 	.word	0xc8b43958
 80099cc:	402a7e76 	.word	0x402a7e76
 80099d0:	6872b021 	.word	0x6872b021
 80099d4:	400ced91 	.word	0x400ced91
 80099d8:	70a3d70a 	.word	0x70a3d70a
 80099dc:	40304a3d 	.word	0x40304a3d
 80099e0:	c28f5c29 	.word	0xc28f5c29
 80099e4:	405d58f5 	.word	0x405d58f5
 80099e8:	df3b645a 	.word	0xdf3b645a
 80099ec:	40334d4f 	.word	0x40334d4f
 80099f0:	72b020c5 	.word	0x72b020c5
 80099f4:	406c8d68 	.word	0x406c8d68
 80099f8:	78d4fdf4 	.word	0x78d4fdf4
 80099fc:	406392e9 	.word	0x406392e9
 8009a00:	98c7e282 	.word	0x98c7e282
 8009a04:	405b72bb 	.word	0x405b72bb
 8009a08:	0b780347 	.word	0x0b780347
 8009a0c:	4032e824 	.word	0x4032e824
 8009a10:	d013a92a 	.word	0xd013a92a
 8009a14:	406ad444 	.word	0x406ad444
 8009a18:	779a6b51 	.word	0x779a6b51
 8009a1c:	4062529c 	.word	0x4062529c
 8009a20:	3f7ced91 	.word	0x3f7ced91
 8009a24:	406e5635 	.word	0x406e5635
 8009a28:	b22d0e56 	.word	0xb22d0e56
 8009a2c:	40448f9d 	.word	0x40448f9d
 8009a30:	0624dd2f 	.word	0x0624dd2f
 8009a34:	407d7181 	.word	0x407d7181
 8009a38:	7ced9168 	.word	0x7ced9168
 8009a3c:	40739f3f 	.word	0x40739f3f
 8009a40:	3d70a3d7 	.word	0x3d70a3d7
 8009a44:	408a4f0a 	.word	0x408a4f0a
 8009a48:	24dd2f1b 	.word	0x24dd2f1b
 8009a4c:	40624d06 	.word	0x40624d06
 8009a50:	56041893 	.word	0x56041893
 8009a54:	4099740e 	.word	0x4099740e
 8009a58:	3fe00000 	.word	0x3fe00000
 8009a5c:	bef0ac80 	.word	0xbef0ac80
 8009a60:	3f757254 	.word	0x3f757254
 8009a64:	032b0b4f 	.word	0x032b0b4f
 8009a68:	3f6c9871 	.word	0x3f6c9871
 8009a6c:	6eeb7026 	.word	0x6eeb7026
 8009a70:	3f80ea9e 	.word	0x3f80ea9e
 8009a74:	ce8533b1 	.word	0xce8533b1
 8009a78:	3f82ec6b 	.word	0x3f82ec6b
 8009a7c:	f7f6 fc14 	bl	80002a8 <__aeabi_dsub>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4614      	mov	r4, r2
 8009a86:	461d      	mov	r5, r3
 8009a88:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	f20f 53a0 	addw	r3, pc, #1440	@ 0x5a0
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a9a:	f7f6 fdbd 	bl	8000618 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f7f6 fc01 	bl	80002ac <__adddf3>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
			g520=-532.114+3017.977*eq-5740*deep_arg->eosq+3708.276*eoc;
 8009ab2:	f20f 5384 	addw	r3, pc, #1412	@ 0x584
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009abe:	f7f6 fdab 	bl	8000618 <__aeabi_dmul>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f20f 5374 	addw	r3, pc, #1396	@ 0x574
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	f7f6 fbe9 	bl	80002a8 <__aeabi_dsub>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4614      	mov	r4, r2
 8009adc:	461d      	mov	r5, r3
 8009ade:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009ae2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009aec:	f20f 5358 	addw	r3, pc, #1368	@ 0x558
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fd90 	bl	8000618 <__aeabi_dmul>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	f7f6 fbd2 	bl	80002a8 <__aeabi_dsub>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4614      	mov	r4, r2
 8009b0a:	461d      	mov	r5, r3
 8009b0c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009b10:	4619      	mov	r1, r3
 8009b12:	f20f 533c 	addw	r3, pc, #1340	@ 0x53c
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b1e:	f7f6 fd7b 	bl	8000618 <__aeabi_dmul>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4620      	mov	r0, r4
 8009b28:	4629      	mov	r1, r5
 8009b2a:	f7f6 fbbf 	bl	80002ac <__adddf3>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
 8009b36:	e1b2      	b.n	8009e9e <sdp4_deep_initialize+0x2a2e>
		}

		else
		{
			g211=-72.099+331.819*eq-508.738*deep_arg->eosq+266.724*eoc;
 8009b38:	f20f 531c 	addw	r3, pc, #1308	@ 0x51c
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009b44:	f7f6 fd68 	bl	8000618 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4619      	mov	r1, r3
 8009b50:	f20f 530c 	addw	r3, pc, #1292	@ 0x50c
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 fba6 	bl	80002a8 <__aeabi_dsub>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4614      	mov	r4, r2
 8009b62:	461d      	mov	r5, r3
 8009b64:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009b68:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b72:	f20f 43f4 	addw	r3, pc, #1268	@ 0x4f4
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fd4d 	bl	8000618 <__aeabi_dmul>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4620      	mov	r0, r4
 8009b84:	4629      	mov	r1, r5
 8009b86:	f7f6 fb8f 	bl	80002a8 <__aeabi_dsub>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4614      	mov	r4, r2
 8009b90:	461d      	mov	r5, r3
 8009b92:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009b96:	4619      	mov	r1, r3
 8009b98:	f20f 43d4 	addw	r3, pc, #1236	@ 0x4d4
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba4:	f7f6 fd38 	bl	8000618 <__aeabi_dmul>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fb7c 	bl	80002ac <__adddf3>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
			g310=-346.844+1582.851*eq-2415.925*deep_arg->eosq+1246.113*eoc;
 8009bbc:	f20f 43b8 	addw	r3, pc, #1208	@ 0x4b8
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009bc8:	f7f6 fd26 	bl	8000618 <__aeabi_dmul>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f20f 43a8 	addw	r3, pc, #1192	@ 0x4a8
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 fb64 	bl	80002a8 <__aeabi_dsub>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	461d      	mov	r5, r3
 8009be8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009bec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bf6:	f20f 4390 	addw	r3, pc, #1168	@ 0x490
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 fd0b 	bl	8000618 <__aeabi_dmul>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 fb4d 	bl	80002a8 <__aeabi_dsub>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4614      	mov	r4, r2
 8009c14:	461d      	mov	r5, r3
 8009c16:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c28:	f7f6 fcf6 	bl	8000618 <__aeabi_dmul>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4620      	mov	r0, r4
 8009c32:	4629      	mov	r1, r5
 8009c34:	f7f6 fb3a 	bl	80002ac <__adddf3>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
			g322=-342.585+1554.908*eq-2366.899*deep_arg->eosq+1215.972*eoc;
 8009c40:	f20f 4354 	addw	r3, pc, #1108	@ 0x454
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009c4c:	f7f6 fce4 	bl	8000618 <__aeabi_dmul>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4610      	mov	r0, r2
 8009c56:	4619      	mov	r1, r3
 8009c58:	f20f 4344 	addw	r3, pc, #1092	@ 0x444
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	f7f6 fb22 	bl	80002a8 <__aeabi_dsub>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4614      	mov	r4, r2
 8009c6a:	461d      	mov	r5, r3
 8009c6c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c70:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c7a:	f20f 432c 	addw	r3, pc, #1068	@ 0x42c
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f7f6 fcc9 	bl	8000618 <__aeabi_dmul>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7f6 fb0b 	bl	80002a8 <__aeabi_dsub>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4614      	mov	r4, r2
 8009c98:	461d      	mov	r5, r3
 8009c9a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	f20f 430c 	addw	r3, pc, #1036	@ 0x40c
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cac:	f7f6 fcb4 	bl	8000618 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	f7f6 faf8 	bl	80002ac <__adddf3>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
			g410=-1052.797+4758.686*eq-7193.992*deep_arg->eosq+3651.957*eoc;
 8009cc4:	a3fc      	add	r3, pc, #1008	@ (adr r3, 800a0b8 <sdp4_deep_initialize+0x2c48>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009cce:	f7f6 fca3 	bl	8000618 <__aeabi_dmul>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4619      	mov	r1, r3
 8009cda:	a3f9      	add	r3, pc, #996	@ (adr r3, 800a0c0 <sdp4_deep_initialize+0x2c50>)
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	f7f6 fae2 	bl	80002a8 <__aeabi_dsub>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4614      	mov	r4, r2
 8009cea:	461d      	mov	r5, r3
 8009cec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009cf0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cfa:	a3f3      	add	r3, pc, #972	@ (adr r3, 800a0c8 <sdp4_deep_initialize+0x2c58>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f7f6 fc8a 	bl	8000618 <__aeabi_dmul>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4620      	mov	r0, r4
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f7f6 facc 	bl	80002a8 <__aeabi_dsub>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	461d      	mov	r5, r3
 8009d18:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	a3ec      	add	r3, pc, #944	@ (adr r3, 800a0d0 <sdp4_deep_initialize+0x2c60>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d28:	f7f6 fc76 	bl	8000618 <__aeabi_dmul>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4620      	mov	r0, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	f7f6 faba 	bl	80002ac <__adddf3>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
			g422=-3581.69+16178.11*eq-24462.77*deep_arg->eosq+12422.52*eoc;
 8009d40:	a3e5      	add	r3, pc, #916	@ (adr r3, 800a0d8 <sdp4_deep_initialize+0x2c68>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009d4a:	f7f6 fc65 	bl	8000618 <__aeabi_dmul>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4610      	mov	r0, r2
 8009d54:	4619      	mov	r1, r3
 8009d56:	a3e2      	add	r3, pc, #904	@ (adr r3, 800a0e0 <sdp4_deep_initialize+0x2c70>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	f7f6 faa4 	bl	80002a8 <__aeabi_dsub>
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4614      	mov	r4, r2
 8009d66:	461d      	mov	r5, r3
 8009d68:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d6c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d76:	a3dc      	add	r3, pc, #880	@ (adr r3, 800a0e8 <sdp4_deep_initialize+0x2c78>)
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f7f6 fc4c 	bl	8000618 <__aeabi_dmul>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4620      	mov	r0, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	f7f6 fa8e 	bl	80002a8 <__aeabi_dsub>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4614      	mov	r4, r2
 8009d92:	461d      	mov	r5, r3
 8009d94:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009d98:	4619      	mov	r1, r3
 8009d9a:	a3d5      	add	r3, pc, #852	@ (adr r3, 800a0f0 <sdp4_deep_initialize+0x2c80>)
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009da4:	f7f6 fc38 	bl	8000618 <__aeabi_dmul>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fa7c 	bl	80002ac <__adddf3>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320

			if (eq<=0.715)
 8009dbc:	a3ce      	add	r3, pc, #824	@ (adr r3, 800a0f8 <sdp4_deep_initialize+0x2c88>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009dc6:	f7f6 fea3 	bl	8000b10 <__aeabi_dcmple>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d028      	beq.n	8009e22 <sdp4_deep_initialize+0x29b2>
				g520=1464.74-4664.75*eq+3763.64*deep_arg->eosq;
 8009dd0:	a3cb      	add	r3, pc, #812	@ (adr r3, 800a100 <sdp4_deep_initialize+0x2c90>)
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009dda:	f7f6 fc1d 	bl	8000618 <__aeabi_dmul>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	a1c9      	add	r1, pc, #804	@ (adr r1, 800a108 <sdp4_deep_initialize+0x2c98>)
 8009de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de8:	f7f6 fa5e 	bl	80002a8 <__aeabi_dsub>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4614      	mov	r4, r2
 8009df2:	461d      	mov	r5, r3
 8009df4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009df8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e02:	a3c3      	add	r3, pc, #780	@ (adr r3, 800a110 <sdp4_deep_initialize+0x2ca0>)
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	f7f6 fc06 	bl	8000618 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7f6 fa4a 	bl	80002ac <__adddf3>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
 8009e20:	e03d      	b.n	8009e9e <sdp4_deep_initialize+0x2a2e>

			else
				g520=-5149.66+29936.92*eq-54087.36*deep_arg->eosq+31324.56*eoc;
 8009e22:	a3bd      	add	r3, pc, #756	@ (adr r3, 800a118 <sdp4_deep_initialize+0x2ca8>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009e2c:	f7f6 fbf4 	bl	8000618 <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4610      	mov	r0, r2
 8009e36:	4619      	mov	r1, r3
 8009e38:	a3b9      	add	r3, pc, #740	@ (adr r3, 800a120 <sdp4_deep_initialize+0x2cb0>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f7f6 fa33 	bl	80002a8 <__aeabi_dsub>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4614      	mov	r4, r2
 8009e48:	461d      	mov	r5, r3
 8009e4a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009e4e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e58:	a3b3      	add	r3, pc, #716	@ (adr r3, 800a128 <sdp4_deep_initialize+0x2cb8>)
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	f7f6 fbdb 	bl	8000618 <__aeabi_dmul>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 fa1d 	bl	80002a8 <__aeabi_dsub>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4614      	mov	r4, r2
 8009e74:	461d      	mov	r5, r3
 8009e76:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a130 <sdp4_deep_initialize+0x2cc0>)
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e86:	f7f6 fbc7 	bl	8000618 <__aeabi_dmul>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4620      	mov	r0, r4
 8009e90:	4629      	mov	r1, r5
 8009e92:	f7f6 fa0b 	bl	80002ac <__adddf3>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
		}

		if (eq<0.7)
 8009e9e:	a3a6      	add	r3, pc, #664	@ (adr r3, 800a138 <sdp4_deep_initialize+0x2cc8>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009ea8:	f7f6 fe28 	bl	8000afc <__aeabi_dcmplt>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 8176 	beq.w	800a1a0 <sdp4_deep_initialize+0x2d30>
		{
			g533=-919.2277+4988.61*eq-9064.77*deep_arg->eosq+5542.21*eoc;
 8009eb4:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a140 <sdp4_deep_initialize+0x2cd0>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009ebe:	f7f6 fbab 	bl	8000618 <__aeabi_dmul>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	4619      	mov	r1, r3
 8009eca:	a39f      	add	r3, pc, #636	@ (adr r3, 800a148 <sdp4_deep_initialize+0x2cd8>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	f7f6 f9ea 	bl	80002a8 <__aeabi_dsub>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	461d      	mov	r5, r3
 8009edc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009ee0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009eea:	a399      	add	r3, pc, #612	@ (adr r3, 800a150 <sdp4_deep_initialize+0x2ce0>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 fb92 	bl	8000618 <__aeabi_dmul>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 f9d4 	bl	80002a8 <__aeabi_dsub>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4614      	mov	r4, r2
 8009f06:	461d      	mov	r5, r3
 8009f08:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	a392      	add	r3, pc, #584	@ (adr r3, 800a158 <sdp4_deep_initialize+0x2ce8>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f18:	f7f6 fb7e 	bl	8000618 <__aeabi_dmul>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4620      	mov	r0, r4
 8009f22:	4629      	mov	r1, r5
 8009f24:	f7f6 f9c2 	bl	80002ac <__adddf3>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	e9c7 23c0 	strd	r2, r3, [r7, #768]	@ 0x300
			g521=-822.71072+4568.6173*eq-8491.4146*deep_arg->eosq+5337.524*eoc;
 8009f30:	a38b      	add	r3, pc, #556	@ (adr r3, 800a160 <sdp4_deep_initialize+0x2cf0>)
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009f3a:	f7f6 fb6d 	bl	8000618 <__aeabi_dmul>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4610      	mov	r0, r2
 8009f44:	4619      	mov	r1, r3
 8009f46:	a388      	add	r3, pc, #544	@ (adr r3, 800a168 <sdp4_deep_initialize+0x2cf8>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	f7f6 f9ac 	bl	80002a8 <__aeabi_dsub>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	461d      	mov	r5, r3
 8009f58:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009f5c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f66:	a382      	add	r3, pc, #520	@ (adr r3, 800a170 <sdp4_deep_initialize+0x2d00>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f7f6 fb54 	bl	8000618 <__aeabi_dmul>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 f996 	bl	80002a8 <__aeabi_dsub>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4614      	mov	r4, r2
 8009f82:	461d      	mov	r5, r3
 8009f84:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009f88:	4619      	mov	r1, r3
 8009f8a:	a37b      	add	r3, pc, #492	@ (adr r3, 800a178 <sdp4_deep_initialize+0x2d08>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f94:	f7f6 fb40 	bl	8000618 <__aeabi_dmul>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	f7f6 f984 	bl	80002ac <__adddf3>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	e9c7 23c4 	strd	r2, r3, [r7, #784]	@ 0x310
			g532=-853.666+4690.25*eq-8624.77*deep_arg->eosq+5341.4*eoc;
 8009fac:	a374      	add	r3, pc, #464	@ (adr r3, 800a180 <sdp4_deep_initialize+0x2d10>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009fb6:	f7f6 fb2f 	bl	8000618 <__aeabi_dmul>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	a371      	add	r3, pc, #452	@ (adr r3, 800a188 <sdp4_deep_initialize+0x2d18>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	f7f6 f96e 	bl	80002a8 <__aeabi_dsub>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4614      	mov	r4, r2
 8009fd2:	461d      	mov	r5, r3
 8009fd4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009fd8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fe2:	a36b      	add	r3, pc, #428	@ (adr r3, 800a190 <sdp4_deep_initialize+0x2d20>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	f7f6 fb16 	bl	8000618 <__aeabi_dmul>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 f958 	bl	80002a8 <__aeabi_dsub>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	461d      	mov	r5, r3
 800a000:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a004:	4619      	mov	r1, r3
 800a006:	a364      	add	r3, pc, #400	@ (adr r3, 800a198 <sdp4_deep_initialize+0x2d28>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a010:	f7f6 fb02 	bl	8000618 <__aeabi_dmul>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4620      	mov	r0, r4
 800a01a:	4629      	mov	r1, r5
 800a01c:	f7f6 f946 	bl	80002ac <__adddf3>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	e9c7 23c2 	strd	r2, r3, [r7, #776]	@ 0x308
 800a028:	e180      	b.n	800a32c <sdp4_deep_initialize+0x2ebc>
 800a02a:	bf00      	nop
 800a02c:	f3af 8000 	nop.w
 800a030:	70a3d70a 	.word	0x70a3d70a
 800a034:	4090edbd 	.word	0x4090edbd
 800a038:	39581062 	.word	0x39581062
 800a03c:	40a793f4 	.word	0x40a793f4
 800a040:	78d4fdf4 	.word	0x78d4fdf4
 800a044:	4080a0e9 	.word	0x4080a0e9
 800a048:	00000000 	.word	0x00000000
 800a04c:	40b66c00 	.word	0x40b66c00
 800a050:	4fdf3b64 	.word	0x4fdf3b64
 800a054:	40acf88d 	.word	0x40acf88d
 800a058:	9fbe76c9 	.word	0x9fbe76c9
 800a05c:	4074bd1a 	.word	0x4074bd1a
 800a060:	04189375 	.word	0x04189375
 800a064:	40520656 	.word	0x40520656
 800a068:	d916872b 	.word	0xd916872b
 800a06c:	407fcbce 	.word	0x407fcbce
 800a070:	810624dd 	.word	0x810624dd
 800a074:	4070ab95 	.word	0x4070ab95
 800a078:	6c8b4396 	.word	0x6c8b4396
 800a07c:	4098bb67 	.word	0x4098bb67
 800a080:	0624dd2f 	.word	0x0624dd2f
 800a084:	4075ad81 	.word	0x4075ad81
 800a088:	9999999a 	.word	0x9999999a
 800a08c:	40a2dfd9 	.word	0x40a2dfd9
 800a090:	b645a1cb 	.word	0xb645a1cb
 800a094:	40937873 	.word	0x40937873
 800a098:	cac08312 	.word	0xcac08312
 800a09c:	40984ba1 	.word	0x40984ba1
 800a0a0:	28f5c28f 	.word	0x28f5c28f
 800a0a4:	4075695c 	.word	0x4075695c
 800a0a8:	49ba5e35 	.word	0x49ba5e35
 800a0ac:	40a27dcc 	.word	0x40a27dcc
 800a0b0:	53f7ced9 	.word	0x53f7ced9
 800a0b4:	4092ffe3 	.word	0x4092ffe3
 800a0b8:	9db22d0e 	.word	0x9db22d0e
 800a0bc:	40b296af 	.word	0x40b296af
 800a0c0:	20c49ba6 	.word	0x20c49ba6
 800a0c4:	40907330 	.word	0x40907330
 800a0c8:	f3b645a2 	.word	0xf3b645a2
 800a0cc:	40bc19fd 	.word	0x40bc19fd
 800a0d0:	fbe76c8b 	.word	0xfbe76c8b
 800a0d4:	40ac87e9 	.word	0x40ac87e9
 800a0d8:	147ae148 	.word	0x147ae148
 800a0dc:	40cf990e 	.word	0x40cf990e
 800a0e0:	47ae147b 	.word	0x47ae147b
 800a0e4:	40abfb61 	.word	0x40abfb61
 800a0e8:	47ae147b 	.word	0x47ae147b
 800a0ec:	40d7e3b1 	.word	0x40d7e3b1
 800a0f0:	8f5c28f6 	.word	0x8f5c28f6
 800a0f4:	40c84342 	.word	0x40c84342
 800a0f8:	ae147ae1 	.word	0xae147ae1
 800a0fc:	3fe6e147 	.word	0x3fe6e147
 800a100:	00000000 	.word	0x00000000
 800a104:	40b238c0 	.word	0x40b238c0
 800a108:	c28f5c29 	.word	0xc28f5c29
 800a10c:	4096e2f5 	.word	0x4096e2f5
 800a110:	ae147ae1 	.word	0xae147ae1
 800a114:	40ad6747 	.word	0x40ad6747
 800a118:	e147ae14 	.word	0xe147ae14
 800a11c:	40dd3c3a 	.word	0x40dd3c3a
 800a120:	f5c28f5c 	.word	0xf5c28f5c
 800a124:	40b41da8 	.word	0x40b41da8
 800a128:	851eb852 	.word	0x851eb852
 800a12c:	40ea68eb 	.word	0x40ea68eb
 800a130:	d70a3d71 	.word	0xd70a3d71
 800a134:	40de9723 	.word	0x40de9723
 800a138:	66666666 	.word	0x66666666
 800a13c:	3fe66666 	.word	0x3fe66666
 800a140:	28f5c28f 	.word	0x28f5c28f
 800a144:	40b37c9c 	.word	0x40b37c9c
 800a148:	5460aa65 	.word	0x5460aa65
 800a14c:	408cb9d2 	.word	0x408cb9d2
 800a150:	8f5c28f6 	.word	0x8f5c28f6
 800a154:	40c1b462 	.word	0x40c1b462
 800a158:	c28f5c29 	.word	0xc28f5c29
 800a15c:	40b5a635 	.word	0x40b5a635
 800a160:	075f6fd2 	.word	0x075f6fd2
 800a164:	40b1d89e 	.word	0x40b1d89e
 800a168:	8df7a4e8 	.word	0x8df7a4e8
 800a16c:	4089b5af 	.word	0x4089b5af
 800a170:	119ce076 	.word	0x119ce076
 800a174:	40c095b5 	.word	0x40c095b5
 800a178:	24dd2f1b 	.word	0x24dd2f1b
 800a17c:	40b4d986 	.word	0x40b4d986
 800a180:	00000000 	.word	0x00000000
 800a184:	40b25240 	.word	0x40b25240
 800a188:	f7ced917 	.word	0xf7ced917
 800a18c:	408aad53 	.word	0x408aad53
 800a190:	8f5c28f6 	.word	0x8f5c28f6
 800a194:	40c0d862 	.word	0x40c0d862
 800a198:	66666666 	.word	0x66666666
 800a19c:	40b4dd66 	.word	0x40b4dd66
		}

		else
		{
			g533=-37995.78+161616.52*eq-229838.2*deep_arg->eosq+109377.94*eoc;
 800a1a0:	f20f 534c 	addw	r3, pc, #1356	@ 0x54c
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a1ac:	f7f6 fa34 	bl	8000618 <__aeabi_dmul>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f20f 533c 	addw	r3, pc, #1340	@ 0x53c
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	f7f6 f872 	bl	80002a8 <__aeabi_dsub>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	461d      	mov	r5, r3
 800a1cc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a1d0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1da:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 fa19 	bl	8000618 <__aeabi_dmul>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	f7f6 f85b 	bl	80002a8 <__aeabi_dsub>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4614      	mov	r4, r2
 800a1f8:	461d      	mov	r5, r3
 800a1fa:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a1fe:	4619      	mov	r1, r3
 800a200:	f20f 5304 	addw	r3, pc, #1284	@ 0x504
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a20c:	f7f6 fa04 	bl	8000618 <__aeabi_dmul>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	4620      	mov	r0, r4
 800a216:	4629      	mov	r1, r5
 800a218:	f7f6 f848 	bl	80002ac <__adddf3>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e9c7 23c0 	strd	r2, r3, [r7, #768]	@ 0x300
			g521 =-51752.104+218913.95*eq-309468.16*deep_arg->eosq+146349.42*eoc;
 800a224:	f20f 43e8 	addw	r3, pc, #1256	@ 0x4e8
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a230:	f7f6 f9f2 	bl	8000618 <__aeabi_dmul>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4610      	mov	r0, r2
 800a23a:	4619      	mov	r1, r3
 800a23c:	f20f 43d8 	addw	r3, pc, #1240	@ 0x4d8
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f6 f830 	bl	80002a8 <__aeabi_dsub>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	4614      	mov	r4, r2
 800a24e:	461d      	mov	r5, r3
 800a250:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a254:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a25e:	f20f 43c0 	addw	r3, pc, #1216	@ 0x4c0
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f6 f9d7 	bl	8000618 <__aeabi_dmul>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	f7f6 f819 	bl	80002a8 <__aeabi_dsub>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	4614      	mov	r4, r2
 800a27c:	461d      	mov	r5, r3
 800a27e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a282:	4619      	mov	r1, r3
 800a284:	f20f 43a0 	addw	r3, pc, #1184	@ 0x4a0
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a290:	f7f6 f9c2 	bl	8000618 <__aeabi_dmul>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4620      	mov	r0, r4
 800a29a:	4629      	mov	r1, r5
 800a29c:	f7f6 f806 	bl	80002ac <__adddf3>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	e9c7 23c4 	strd	r2, r3, [r7, #784]	@ 0x310
			g532 =-40023.88+170470.89*eq-242699.48*deep_arg->eosq+115605.82*eoc;
 800a2a8:	f20f 4384 	addw	r3, pc, #1156	@ 0x484
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a2b4:	f7f6 f9b0 	bl	8000618 <__aeabi_dmul>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4610      	mov	r0, r2
 800a2be:	4619      	mov	r1, r3
 800a2c0:	f20f 4374 	addw	r3, pc, #1140	@ 0x474
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f7f5 ffee 	bl	80002a8 <__aeabi_dsub>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	461d      	mov	r5, r3
 800a2d4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a2d8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2e2:	f20f 435c 	addw	r3, pc, #1116	@ 0x45c
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f7f6 f995 	bl	8000618 <__aeabi_dmul>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f5 ffd7 	bl	80002a8 <__aeabi_dsub>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4614      	mov	r4, r2
 800a300:	461d      	mov	r5, r3
 800a302:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a306:	4619      	mov	r1, r3
 800a308:	f20f 433c 	addw	r3, pc, #1084	@ 0x43c
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a314:	f7f6 f980 	bl	8000618 <__aeabi_dmul>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4620      	mov	r0, r4
 800a31e:	4629      	mov	r1, r5
 800a320:	f7f5 ffc4 	bl	80002ac <__adddf3>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	e9c7 23c2 	strd	r2, r3, [r7, #776]	@ 0x308
		}

		sini2=deep_arg->sinio*deep_arg->sinio;
 800a32c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a330:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a33a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a33e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a348:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 800a34c:	f7f6 f964 	bl	8000618 <__aeabi_dmul>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	e9c4 2300 	strd	r2, r3, [r4]
		f220=0.75*(1+2*deep_arg->cosio+deep_arg->theta2);
 800a358:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a35c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	f7f5 ff9f 	bl	80002ac <__adddf3>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4610      	mov	r0, r2
 800a374:	4619      	mov	r1, r3
 800a376:	f04f 0200 	mov.w	r2, #0
 800a37a:	4bd3      	ldr	r3, [pc, #844]	@ (800a6c8 <sdp4_deep_initialize+0x3258>)
 800a37c:	f7f5 ff96 	bl	80002ac <__adddf3>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4610      	mov	r0, r2
 800a386:	4619      	mov	r1, r3
 800a388:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a38c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800a396:	f7f5 ff89 	bl	80002ac <__adddf3>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	4610      	mov	r0, r2
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800a3a6:	461c      	mov	r4, r3
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	4bc7      	ldr	r3, [pc, #796]	@ (800a6cc <sdp4_deep_initialize+0x325c>)
 800a3ae:	f7f6 f933 	bl	8000618 <__aeabi_dmul>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	e944 2302 	strd	r2, r3, [r4, #-8]
		f221=1.5*sini2;
 800a3ba:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800a3be:	461c      	mov	r4, r3
 800a3c0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	f04f 0200 	mov.w	r2, #0
 800a3ca:	4bc1      	ldr	r3, [pc, #772]	@ (800a6d0 <sdp4_deep_initialize+0x3260>)
 800a3cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3d0:	f7f6 f922 	bl	8000618 <__aeabi_dmul>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	e944 2302 	strd	r2, r3, [r4, #-8]
		f321=1.875*deep_arg->sinio*(1-2*deep_arg->cosio-3*deep_arg->theta2);
 800a3dc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a3e0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a3ea:	f04f 0200 	mov.w	r2, #0
 800a3ee:	4bb9      	ldr	r3, [pc, #740]	@ (800a6d4 <sdp4_deep_initialize+0x3264>)
 800a3f0:	f7f6 f912 	bl	8000618 <__aeabi_dmul>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4614      	mov	r4, r2
 800a3fa:	461d      	mov	r5, r3
 800a3fc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a400:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	f7f5 ff4d 	bl	80002ac <__adddf3>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	f04f 0000 	mov.w	r0, #0
 800a41a:	49ab      	ldr	r1, [pc, #684]	@ (800a6c8 <sdp4_deep_initialize+0x3258>)
 800a41c:	f7f5 ff44 	bl	80002a8 <__aeabi_dsub>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4690      	mov	r8, r2
 800a426:	4699      	mov	r9, r3
 800a428:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a42c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a436:	f04f 0200 	mov.w	r2, #0
 800a43a:	4ba7      	ldr	r3, [pc, #668]	@ (800a6d8 <sdp4_deep_initialize+0x3268>)
 800a43c:	f7f6 f8ec 	bl	8000618 <__aeabi_dmul>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f7f5 ff2e 	bl	80002a8 <__aeabi_dsub>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800a454:	460e      	mov	r6, r1
 800a456:	4620      	mov	r0, r4
 800a458:	4629      	mov	r1, r5
 800a45a:	f7f6 f8dd 	bl	8000618 <__aeabi_dmul>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	e9c6 2300 	strd	r2, r3, [r6]
		f322=-1.875*deep_arg->sinio*(1+2*deep_arg->cosio-3*deep_arg->theta2);
 800a466:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a46a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	4b98      	ldr	r3, [pc, #608]	@ (800a6dc <sdp4_deep_initialize+0x326c>)
 800a47a:	f7f6 f8cd 	bl	8000618 <__aeabi_dmul>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4614      	mov	r4, r2
 800a484:	461d      	mov	r5, r3
 800a486:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a48a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	f7f5 ff08 	bl	80002ac <__adddf3>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	f04f 0200 	mov.w	r2, #0
 800a4a8:	4b87      	ldr	r3, [pc, #540]	@ (800a6c8 <sdp4_deep_initialize+0x3258>)
 800a4aa:	f7f5 feff 	bl	80002ac <__adddf3>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4690      	mov	r8, r2
 800a4b4:	4699      	mov	r9, r3
 800a4b6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a4ba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a4c4:	f04f 0200 	mov.w	r2, #0
 800a4c8:	4b83      	ldr	r3, [pc, #524]	@ (800a6d8 <sdp4_deep_initialize+0x3268>)
 800a4ca:	f7f6 f8a5 	bl	8000618 <__aeabi_dmul>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	f7f5 fee7 	bl	80002a8 <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800a4e2:	460e      	mov	r6, r1
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	f7f6 f896 	bl	8000618 <__aeabi_dmul>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	e946 2302 	strd	r2, r3, [r6, #-8]
		f441=35*sini2*f220;
 800a4f4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f04f 0200 	mov.w	r2, #0
 800a4fe:	4b78      	ldr	r3, [pc, #480]	@ (800a6e0 <sdp4_deep_initialize+0x3270>)
 800a500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a504:	f7f6 f888 	bl	8000618 <__aeabi_dmul>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800a510:	460c      	mov	r4, r1
 800a512:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800a516:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a51a:	f7f6 f87d 	bl	8000618 <__aeabi_dmul>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	e9c4 2300 	strd	r2, r3, [r4]
		f442=39.3750*sini2*sini2;
 800a526:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800a52a:	4619      	mov	r1, r3
 800a52c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a6a8 <sdp4_deep_initialize+0x3238>)
 800a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a532:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a536:	f7f6 f86f 	bl	8000618 <__aeabi_dmul>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800a542:	460c      	mov	r4, r1
 800a544:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 800a548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a54c:	f7f6 f864 	bl	8000618 <__aeabi_dmul>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	e944 2302 	strd	r2, r3, [r4, #-8]
		f522=9.84375*deep_arg->sinio*(sini2*(1-2*deep_arg->cosio-5*deep_arg->theta2)+0.33333333*(-2+4*deep_arg->cosio+6*deep_arg->theta2));
 800a558:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a55c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a566:	a352      	add	r3, pc, #328	@ (adr r3, 800a6b0 <sdp4_deep_initialize+0x3240>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f7f6 f854 	bl	8000618 <__aeabi_dmul>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4614      	mov	r4, r2
 800a576:	461d      	mov	r5, r3
 800a578:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a57c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	f7f5 fe8f 	bl	80002ac <__adddf3>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	f04f 0000 	mov.w	r0, #0
 800a596:	494c      	ldr	r1, [pc, #304]	@ (800a6c8 <sdp4_deep_initialize+0x3258>)
 800a598:	f7f5 fe86 	bl	80002a8 <__aeabi_dsub>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4690      	mov	r8, r2
 800a5a2:	4699      	mov	r9, r3
 800a5a4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a5a8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a5b2:	f04f 0200 	mov.w	r2, #0
 800a5b6:	4b4b      	ldr	r3, [pc, #300]	@ (800a6e4 <sdp4_deep_initialize+0x3274>)
 800a5b8:	f7f6 f82e 	bl	8000618 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	f7f5 fe70 	bl	80002a8 <__aeabi_dsub>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	f7f6 f81e 	bl	8000618 <__aeabi_dmul>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4690      	mov	r8, r2
 800a5e2:	4699      	mov	r9, r3
 800a5e4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a5e8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a5f2:	f04f 0200 	mov.w	r2, #0
 800a5f6:	4b3c      	ldr	r3, [pc, #240]	@ (800a6e8 <sdp4_deep_initialize+0x3278>)
 800a5f8:	f7f6 f80e 	bl	8000618 <__aeabi_dmul>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4610      	mov	r0, r2
 800a602:	4619      	mov	r1, r3
 800a604:	f04f 0200 	mov.w	r2, #0
 800a608:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a60c:	f7f5 fe4c 	bl	80002a8 <__aeabi_dsub>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	4692      	mov	sl, r2
 800a616:	469b      	mov	fp, r3
 800a618:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a61c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	4b30      	ldr	r3, [pc, #192]	@ (800a6ec <sdp4_deep_initialize+0x327c>)
 800a62c:	f7f5 fff4 	bl	8000618 <__aeabi_dmul>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4650      	mov	r0, sl
 800a636:	4659      	mov	r1, fp
 800a638:	f7f5 fe38 	bl	80002ac <__adddf3>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4610      	mov	r0, r2
 800a642:	4619      	mov	r1, r3
 800a644:	a31c      	add	r3, pc, #112	@ (adr r3, 800a6b8 <sdp4_deep_initialize+0x3248>)
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	f7f5 ffe5 	bl	8000618 <__aeabi_dmul>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4640      	mov	r0, r8
 800a654:	4649      	mov	r1, r9
 800a656:	f7f5 fe29 	bl	80002ac <__adddf3>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800a662:	460e      	mov	r6, r1
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f5 ffd6 	bl	8000618 <__aeabi_dmul>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	e9c6 2300 	strd	r2, r3, [r6]
		f523=deep_arg->sinio*(4.92187512*sini2*(-2-4*deep_arg->cosio+10*deep_arg->theta2)+6.56250012*(1+2*deep_arg->cosio-3*deep_arg->theta2));
 800a674:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a678:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800a682:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800a686:	4619      	mov	r1, r3
 800a688:	a30d      	add	r3, pc, #52	@ (adr r3, 800a6c0 <sdp4_deep_initialize+0x3250>)
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a692:	f7f5 ffc1 	bl	8000618 <__aeabi_dmul>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4690      	mov	r8, r2
 800a69c:	4699      	mov	r9, r3
 800a69e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a6a2:	e055      	b.n	800a750 <sdp4_deep_initialize+0x32e0>
 800a6a4:	f3af 8000 	nop.w
 800a6a8:	00000000 	.word	0x00000000
 800a6ac:	4043b000 	.word	0x4043b000
 800a6b0:	00000000 	.word	0x00000000
 800a6b4:	4023b000 	.word	0x4023b000
 800a6b8:	51c112da 	.word	0x51c112da
 800a6bc:	3fd55555 	.word	0x3fd55555
 800a6c0:	080d9595 	.word	0x080d9595
 800a6c4:	4013b000 	.word	0x4013b000
 800a6c8:	3ff00000 	.word	0x3ff00000
 800a6cc:	3fe80000 	.word	0x3fe80000
 800a6d0:	3ff80000 	.word	0x3ff80000
 800a6d4:	3ffe0000 	.word	0x3ffe0000
 800a6d8:	40080000 	.word	0x40080000
 800a6dc:	bffe0000 	.word	0xbffe0000
 800a6e0:	40418000 	.word	0x40418000
 800a6e4:	40140000 	.word	0x40140000
 800a6e8:	40100000 	.word	0x40100000
 800a6ec:	40180000 	.word	0x40180000
 800a6f0:	28f5c28f 	.word	0x28f5c28f
 800a6f4:	4103ba84 	.word	0x4103ba84
 800a6f8:	f5c28f5c 	.word	0xf5c28f5c
 800a6fc:	40e28d78 	.word	0x40e28d78
 800a700:	9999999a 	.word	0x9999999a
 800a704:	410c0e71 	.word	0x410c0e71
 800a708:	0a3d70a4 	.word	0x0a3d70a4
 800a70c:	40fab41f 	.word	0x40fab41f
 800a710:	9999999a 	.word	0x9999999a
 800a714:	410ab90f 	.word	0x410ab90f
 800a718:	53f7ced9 	.word	0x53f7ced9
 800a71c:	40e94503 	.word	0x40e94503
 800a720:	a3d70a3d 	.word	0xa3d70a3d
 800a724:	4112e370 	.word	0x4112e370
 800a728:	5c28f5c3 	.word	0x5c28f5c3
 800a72c:	4101dd6b 	.word	0x4101dd6b
 800a730:	1eb851ec 	.word	0x1eb851ec
 800a734:	4104cf37 	.word	0x4104cf37
 800a738:	28f5c28f 	.word	0x28f5c28f
 800a73c:	40e38afc 	.word	0x40e38afc
 800a740:	d70a3d71 	.word	0xd70a3d71
 800a744:	410da05b 	.word	0x410da05b
 800a748:	1eb851ec 	.word	0x1eb851ec
 800a74c:	40fc395d 	.word	0x40fc395d
 800a750:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a75a:	f04f 0200 	mov.w	r2, #0
 800a75e:	4bd2      	ldr	r3, [pc, #840]	@ (800aaa8 <sdp4_deep_initialize+0x3638>)
 800a760:	f7f5 ff5a 	bl	8000618 <__aeabi_dmul>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	f04f 0000 	mov.w	r0, #0
 800a76c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800a770:	f7f5 fd9a 	bl	80002a8 <__aeabi_dsub>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4692      	mov	sl, r2
 800a77a:	469b      	mov	fp, r3
 800a77c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a780:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a78a:	f04f 0200 	mov.w	r2, #0
 800a78e:	4bc7      	ldr	r3, [pc, #796]	@ (800aaac <sdp4_deep_initialize+0x363c>)
 800a790:	f7f5 ff42 	bl	8000618 <__aeabi_dmul>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4650      	mov	r0, sl
 800a79a:	4659      	mov	r1, fp
 800a79c:	f7f5 fd86 	bl	80002ac <__adddf3>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	f7f5 ff36 	bl	8000618 <__aeabi_dmul>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4690      	mov	r8, r2
 800a7b2:	4699      	mov	r9, r3
 800a7b4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a7b8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	f7f5 fd71 	bl	80002ac <__adddf3>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4610      	mov	r0, r2
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	f04f 0200 	mov.w	r2, #0
 800a7d6:	4bb6      	ldr	r3, [pc, #728]	@ (800aab0 <sdp4_deep_initialize+0x3640>)
 800a7d8:	f7f5 fd68 	bl	80002ac <__adddf3>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4692      	mov	sl, r2
 800a7e2:	469b      	mov	fp, r3
 800a7e4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a7e8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a7f2:	f04f 0200 	mov.w	r2, #0
 800a7f6:	4baf      	ldr	r3, [pc, #700]	@ (800aab4 <sdp4_deep_initialize+0x3644>)
 800a7f8:	f7f5 ff0e 	bl	8000618 <__aeabi_dmul>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4650      	mov	r0, sl
 800a802:	4659      	mov	r1, fp
 800a804:	f7f5 fd50 	bl	80002a8 <__aeabi_dsub>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	4610      	mov	r0, r2
 800a80e:	4619      	mov	r1, r3
 800a810:	a3a1      	add	r3, pc, #644	@ (adr r3, 800aa98 <sdp4_deep_initialize+0x3628>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f7f5 feff 	bl	8000618 <__aeabi_dmul>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4640      	mov	r0, r8
 800a820:	4649      	mov	r1, r9
 800a822:	f7f5 fd43 	bl	80002ac <__adddf3>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800a82e:	460e      	mov	r6, r1
 800a830:	4620      	mov	r0, r4
 800a832:	4629      	mov	r1, r5
 800a834:	f7f5 fef0 	bl	8000618 <__aeabi_dmul>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	e946 2302 	strd	r2, r3, [r6, #-8]
		f542=29.53125*deep_arg->sinio*(2-8*deep_arg->cosio+deep_arg->theta2*(-12+8*deep_arg->cosio+10*deep_arg->theta2));
 800a840:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a844:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a84e:	a394      	add	r3, pc, #592	@ (adr r3, 800aaa0 <sdp4_deep_initialize+0x3630>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 fee0 	bl	8000618 <__aeabi_dmul>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4690      	mov	r8, r2
 800a85e:	4699      	mov	r9, r3
 800a860:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a864:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a86e:	f04f 0200 	mov.w	r2, #0
 800a872:	4b91      	ldr	r3, [pc, #580]	@ (800aab8 <sdp4_deep_initialize+0x3648>)
 800a874:	f7f5 fed0 	bl	8000618 <__aeabi_dmul>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	f04f 0000 	mov.w	r0, #0
 800a880:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a884:	f7f5 fd10 	bl	80002a8 <__aeabi_dsub>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4692      	mov	sl, r2
 800a88e:	469b      	mov	fp, r3
 800a890:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a894:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800a89e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a8a2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	4b81      	ldr	r3, [pc, #516]	@ (800aab8 <sdp4_deep_initialize+0x3648>)
 800a8b2:	f7f5 feb1 	bl	8000618 <__aeabi_dmul>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	4619      	mov	r1, r3
 800a8be:	f04f 0200 	mov.w	r2, #0
 800a8c2:	4b7e      	ldr	r3, [pc, #504]	@ (800aabc <sdp4_deep_initialize+0x364c>)
 800a8c4:	f7f5 fcf0 	bl	80002a8 <__aeabi_dsub>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800a8d0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a8d4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a8de:	f04f 0200 	mov.w	r2, #0
 800a8e2:	4b72      	ldr	r3, [pc, #456]	@ (800aaac <sdp4_deep_initialize+0x363c>)
 800a8e4:	f7f5 fe98 	bl	8000618 <__aeabi_dmul>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800a8f0:	f7f5 fcdc 	bl	80002ac <__adddf3>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	f7f5 fe8c 	bl	8000618 <__aeabi_dmul>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4650      	mov	r0, sl
 800a906:	4659      	mov	r1, fp
 800a908:	f7f5 fcd0 	bl	80002ac <__adddf3>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800a914:	460c      	mov	r4, r1
 800a916:	4640      	mov	r0, r8
 800a918:	4649      	mov	r1, r9
 800a91a:	f7f5 fe7d 	bl	8000618 <__aeabi_dmul>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	e9c4 2300 	strd	r2, r3, [r4]
		f543=29.53125*deep_arg->sinio*(-2-8*deep_arg->cosio+deep_arg->theta2*(12+8*deep_arg->cosio-10*deep_arg->theta2));
 800a926:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a92a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a934:	a35a      	add	r3, pc, #360	@ (adr r3, 800aaa0 <sdp4_deep_initialize+0x3630>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f7f5 fe6d 	bl	8000618 <__aeabi_dmul>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4690      	mov	r8, r2
 800a944:	4699      	mov	r9, r3
 800a946:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a94a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	4b57      	ldr	r3, [pc, #348]	@ (800aab8 <sdp4_deep_initialize+0x3648>)
 800a95a:	f7f5 fe5d 	bl	8000618 <__aeabi_dmul>
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	f04f 0000 	mov.w	r0, #0
 800a966:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800a96a:	f7f5 fc9d 	bl	80002a8 <__aeabi_dsub>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4692      	mov	sl, r2
 800a974:	469b      	mov	fp, r3
 800a976:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a97a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800a984:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a988:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a992:	f04f 0200 	mov.w	r2, #0
 800a996:	4b48      	ldr	r3, [pc, #288]	@ (800aab8 <sdp4_deep_initialize+0x3648>)
 800a998:	f7f5 fe3e 	bl	8000618 <__aeabi_dmul>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	f04f 0200 	mov.w	r2, #0
 800a9a8:	4b44      	ldr	r3, [pc, #272]	@ (800aabc <sdp4_deep_initialize+0x364c>)
 800a9aa:	f7f5 fc7f 	bl	80002ac <__adddf3>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800a9b6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a9ba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800a9c4:	f04f 0200 	mov.w	r2, #0
 800a9c8:	4b38      	ldr	r3, [pc, #224]	@ (800aaac <sdp4_deep_initialize+0x363c>)
 800a9ca:	f7f5 fe25 	bl	8000618 <__aeabi_dmul>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800a9d6:	f7f5 fc67 	bl	80002a8 <__aeabi_dsub>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	f7f5 fe19 	bl	8000618 <__aeabi_dmul>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	4659      	mov	r1, fp
 800a9ee:	f7f5 fc5d 	bl	80002ac <__adddf3>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	4649      	mov	r1, r9
 800aa00:	f7f5 fe0a 	bl	8000618 <__aeabi_dmul>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	e944 2302 	strd	r2, r3, [r4, #-8]
		xno2=m->xnq*m->xnq;
 800aa0c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aa10:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800aa1a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aa1e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800aa28:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800aa2c:	f7f5 fdf4 	bl	8000618 <__aeabi_dmul>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	e9c4 2300 	strd	r2, r3, [r4]
		ainv2=aqnv*aqnv;
 800aa38:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800aa3c:	461c      	mov	r4, r3
 800aa3e:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800aa42:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 800aa46:	f7f5 fde7 	bl	8000618 <__aeabi_dmul>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	e944 2302 	strd	r2, r3, [r4, #-8]
		temp1=3*xno2*ainv2;
 800aa52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800aa56:	4619      	mov	r1, r3
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	4b15      	ldr	r3, [pc, #84]	@ (800aab4 <sdp4_deep_initialize+0x3644>)
 800aa5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa62:	f7f5 fdd9 	bl	8000618 <__aeabi_dmul>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800aa6e:	460c      	mov	r4, r1
 800aa70:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800aa74:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800aa78:	f7f5 fdce 	bl	8000618 <__aeabi_dmul>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT22;
 800aa84:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800aa88:	461c      	mov	r4, r3
 800aa8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800aa8e:	4619      	mov	r1, r3
 800aa90:	e016      	b.n	800aac0 <sdp4_deep_initialize+0x3650>
 800aa92:	bf00      	nop
 800aa94:	f3af 8000 	nop.w
 800aa98:	080d9595 	.word	0x080d9595
 800aa9c:	401a4000 	.word	0x401a4000
 800aaa0:	00000000 	.word	0x00000000
 800aaa4:	403d8800 	.word	0x403d8800
 800aaa8:	40100000 	.word	0x40100000
 800aaac:	40240000 	.word	0x40240000
 800aab0:	3ff00000 	.word	0x3ff00000
 800aab4:	40080000 	.word	0x40080000
 800aab8:	40200000 	.word	0x40200000
 800aabc:	40280000 	.word	0x40280000
 800aac0:	f20f 437c 	addw	r3, pc, #1148	@ 0x47c
 800aac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aacc:	f7f5 fda4 	bl	8000618 <__aeabi_dmul>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d2201=temp*f220*g201;
 800aad8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800aadc:	4619      	mov	r1, r3
 800aade:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800aae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aae6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800aaea:	f7f5 fd95 	bl	8000618 <__aeabi_dmul>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800aafa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aafe:	f7f5 fd8b 	bl	8000618 <__aeabi_dmul>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800ab0a:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ab0e:	6809      	ldr	r1, [r1, #0]
 800ab10:	e9c1 23a0 	strd	r2, r3, [r1, #640]	@ 0x280
		m->d2211=temp*f221*g211;
 800ab14:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ab18:	4619      	mov	r1, r3
 800ab1a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800ab1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab22:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ab26:	f7f5 fd77 	bl	8000618 <__aeabi_dmul>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4610      	mov	r0, r2
 800ab30:	4619      	mov	r1, r3
 800ab32:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 800ab36:	f7f5 fd6f 	bl	8000618 <__aeabi_dmul>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800ab42:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ab46:	6809      	ldr	r1, [r1, #0]
 800ab48:	e9c1 23a2 	strd	r2, r3, [r1, #648]	@ 0x288
		temp1=temp1*aqnv;
 800ab4c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ab50:	461c      	mov	r4, r3
 800ab52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ab56:	4619      	mov	r1, r3
 800ab58:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800ab5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab60:	f7f5 fd5a 	bl	8000618 <__aeabi_dmul>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT32;
 800ab6c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ab70:	461c      	mov	r4, r3
 800ab72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ab76:	4619      	mov	r1, r3
 800ab78:	a3f3      	add	r3, pc, #972	@ (adr r3, 800af48 <sdp4_deep_initialize+0x3ad8>)
 800ab7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab82:	f7f5 fd49 	bl	8000618 <__aeabi_dmul>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d3210=temp*f321*g310;
 800ab8e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ab92:	4619      	mov	r1, r3
 800ab94:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800aba0:	f7f5 fd3a 	bl	8000618 <__aeabi_dmul>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4610      	mov	r0, r2
 800abaa:	4619      	mov	r1, r3
 800abac:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800abb0:	f7f5 fd32 	bl	8000618 <__aeabi_dmul>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800abbc:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800abc0:	6809      	ldr	r1, [r1, #0]
 800abc2:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
		m->d3222=temp*f322*g322;
 800abc6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800abca:	4619      	mov	r1, r3
 800abcc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800abd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800abd8:	f7f5 fd1e 	bl	8000618 <__aeabi_dmul>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4610      	mov	r0, r2
 800abe2:	4619      	mov	r1, r3
 800abe4:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 800abe8:	f7f5 fd16 	bl	8000618 <__aeabi_dmul>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800abf4:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800abf8:	6809      	ldr	r1, [r1, #0]
 800abfa:	e9c1 237a 	strd	r2, r3, [r1, #488]	@ 0x1e8
		temp1=temp1*aqnv;
 800abfe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ac02:	461c      	mov	r4, r3
 800ac04:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ac08:	4619      	mov	r1, r3
 800ac0a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800ac0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac12:	f7f5 fd01 	bl	8000618 <__aeabi_dmul>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	e9c4 2300 	strd	r2, r3, [r4]
		temp=2*temp1*ROOT44;
 800ac1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ac22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	f7f5 fb3f 	bl	80002ac <__adddf3>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	4610      	mov	r0, r2
 800ac34:	4619      	mov	r1, r3
 800ac36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ac3a:	461c      	mov	r4, r3
 800ac3c:	a3c4      	add	r3, pc, #784	@ (adr r3, 800af50 <sdp4_deep_initialize+0x3ae0>)
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	f7f5 fce9 	bl	8000618 <__aeabi_dmul>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d4410=temp*f441*g410;
 800ac4e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ac52:	4619      	mov	r1, r3
 800ac54:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ac60:	f7f5 fcda 	bl	8000618 <__aeabi_dmul>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 800ac70:	f7f5 fcd2 	bl	8000618 <__aeabi_dmul>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800ac7c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ac80:	6809      	ldr	r1, [r1, #0]
 800ac82:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
		m->d4422=temp*f442*g422;
 800ac86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800ac90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac94:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ac98:	f7f5 fcbe 	bl	8000618 <__aeabi_dmul>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4610      	mov	r0, r2
 800aca2:	4619      	mov	r1, r3
 800aca4:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 800aca8:	f7f5 fcb6 	bl	8000618 <__aeabi_dmul>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800acb4:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800acb8:	6809      	ldr	r1, [r1, #0]
 800acba:	e9c1 237e 	strd	r2, r3, [r1, #504]	@ 0x1f8
		temp1=temp1*aqnv;
 800acbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800acc2:	461c      	mov	r4, r3
 800acc4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800acc8:	4619      	mov	r1, r3
 800acca:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800acce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd2:	f7f5 fca1 	bl	8000618 <__aeabi_dmul>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT52;
 800acde:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ace2:	461c      	mov	r4, r3
 800ace4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ace8:	4619      	mov	r1, r3
 800acea:	a39b      	add	r3, pc, #620	@ (adr r3, 800af58 <sdp4_deep_initialize+0x3ae8>)
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acf4:	f7f5 fc90 	bl	8000618 <__aeabi_dmul>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d5220=temp*f522*g520;
 800ad00:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ad04:	4619      	mov	r1, r3
 800ad06:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ad12:	f7f5 fc81 	bl	8000618 <__aeabi_dmul>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 800ad22:	f7f5 fc79 	bl	8000618 <__aeabi_dmul>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800ad2e:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ad32:	6809      	ldr	r1, [r1, #0]
 800ad34:	e9c1 2380 	strd	r2, r3, [r1, #512]	@ 0x200
		m->d5232=temp*f523*g532;
 800ad38:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800ad42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad46:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ad4a:	f7f5 fc65 	bl	8000618 <__aeabi_dmul>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	4610      	mov	r0, r2
 800ad54:	4619      	mov	r1, r3
 800ad56:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 800ad5a:	f7f5 fc5d 	bl	8000618 <__aeabi_dmul>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	460b      	mov	r3, r1
 800ad62:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800ad66:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ad6a:	6809      	ldr	r1, [r1, #0]
 800ad6c:	e9c1 2382 	strd	r2, r3, [r1, #520]	@ 0x208
		temp=2*temp1*ROOT54;
 800ad70:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ad74:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	f7f5 fa96 	bl	80002ac <__adddf3>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4610      	mov	r0, r2
 800ad86:	4619      	mov	r1, r3
 800ad88:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ad8c:	461c      	mov	r4, r3
 800ad8e:	a374      	add	r3, pc, #464	@ (adr r3, 800af60 <sdp4_deep_initialize+0x3af0>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	f7f5 fc40 	bl	8000618 <__aeabi_dmul>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d5421=temp*f542*g521;
 800ada0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ada4:	4619      	mov	r1, r3
 800ada6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800adb2:	f7f5 fc31 	bl	8000618 <__aeabi_dmul>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4610      	mov	r0, r2
 800adbc:	4619      	mov	r1, r3
 800adbe:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 800adc2:	f7f5 fc29 	bl	8000618 <__aeabi_dmul>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800adce:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800add2:	6809      	ldr	r1, [r1, #0]
 800add4:	e9c1 2384 	strd	r2, r3, [r1, #528]	@ 0x210
		m->d5433=temp*f543*g533;
 800add8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800addc:	4619      	mov	r1, r3
 800adde:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ade2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ade6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800adea:	f7f5 fc15 	bl	8000618 <__aeabi_dmul>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4610      	mov	r0, r2
 800adf4:	4619      	mov	r1, r3
 800adf6:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 800adfa:	f7f5 fc0d 	bl	8000618 <__aeabi_dmul>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800ae06:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ae0a:	6809      	ldr	r1, [r1, #0]
 800ae0c:	e9c1 2386 	strd	r2, r3, [r1, #536]	@ 0x218
		m->xlamo=xmao+m->xnodeo+m->xnodeo-m->thgr-m->thgr;
 800ae10:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae14:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	@ 0x2c0
 800ae1e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800ae22:	f7f5 fa43 	bl	80002ac <__adddf3>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae32:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	@ 0x2c0
 800ae3c:	f7f5 fa36 	bl	80002ac <__adddf3>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4610      	mov	r0, r2
 800ae46:	4619      	mov	r1, r3
 800ae48:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae4c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800ae56:	f7f5 fa27 	bl	80002a8 <__aeabi_dsub>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4610      	mov	r0, r2
 800ae60:	4619      	mov	r1, r3
 800ae62:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae66:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800ae70:	f7f5 fa1a 	bl	80002a8 <__aeabi_dsub>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800ae7c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ae80:	6809      	ldr	r1, [r1, #0]
 800ae82:	e9c1 2394 	strd	r2, r3, [r1, #592]	@ 0x250
		bfact=deep_arg->xmdot+deep_arg->xnodot+deep_arg->xnodot-THDT-THDT;
 800ae86:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae8a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800ae94:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae98:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800aea2:	f7f5 fa03 	bl	80002ac <__adddf3>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	4610      	mov	r0, r2
 800aeac:	4619      	mov	r1, r3
 800aeae:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aeb2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800aebc:	f7f5 f9f6 	bl	80002ac <__adddf3>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4610      	mov	r0, r2
 800aec6:	4619      	mov	r1, r3
 800aec8:	a327      	add	r3, pc, #156	@ (adr r3, 800af68 <sdp4_deep_initialize+0x3af8>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 f9eb 	bl	80002a8 <__aeabi_dsub>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4610      	mov	r0, r2
 800aed8:	4619      	mov	r1, r3
 800aeda:	a323      	add	r3, pc, #140	@ (adr r3, 800af68 <sdp4_deep_initialize+0x3af8>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f7f5 f9e2 	bl	80002a8 <__aeabi_dsub>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
		bfact=bfact+m->ssl+m->ssh+m->ssh;
 800aeec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aef0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800aefa:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800aefe:	f7f5 f9d5 	bl	80002ac <__adddf3>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4610      	mov	r0, r2
 800af08:	4619      	mov	r1, r3
 800af0a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af0e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800af18:	f7f5 f9c8 	bl	80002ac <__adddf3>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	4610      	mov	r0, r2
 800af22:	4619      	mov	r1, r3
 800af24:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af28:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800af32:	f7f5 f9bb 	bl	80002ac <__adddf3>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
 800af3e:	e2d9      	b.n	800b4f4 <sdp4_deep_initialize+0x4084>
 800af40:	e8fbe45d 	.word	0xe8fbe45d
 800af44:	3ebe046a 	.word	0x3ebe046a
 800af48:	5d4afd1b 	.word	0x5d4afd1b
 800af4c:	3e991834 	.word	0x3e991834
 800af50:	f68be0bd 	.word	0xf68be0bd
 800af54:	3e3fa077 	.word	0x3e3fa077
 800af58:	6f6ae289 	.word	0x6f6ae289
 800af5c:	3e7eadb3 	.word	0x3e7eadb3
 800af60:	c74bf4b7 	.word	0xc74bf4b7
 800af64:	3e22b259 	.word	0x3e22b259
 800af68:	5b2195a5 	.word	0x5b2195a5
 800af6c:	3f71ebcd 	.word	0x3f71ebcd
	}

	else
	{
		m->resonanceFlag = 1;
 800af70:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af74:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2201      	movs	r2, #1
 800af7c:	605a      	str	r2, [r3, #4]
		m->synchronousFlag = 1;
 800af7e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af82:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2201      	movs	r2, #1
 800af8a:	609a      	str	r2, [r3, #8]

		/* Synchronous resonance terms initialization */
		g200=1+deep_arg->eosq*(-2.5+0.8125*deep_arg->eosq);
 800af8c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af90:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	e9d3 4500 	ldrd	r4, r5, [r3]
 800af9a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af9e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afa8:	f04f 0200 	mov.w	r2, #0
 800afac:	4bce      	ldr	r3, [pc, #824]	@ (800b2e8 <sdp4_deep_initialize+0x3e78>)
 800afae:	f7f5 fb33 	bl	8000618 <__aeabi_dmul>
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	4610      	mov	r0, r2
 800afb8:	4619      	mov	r1, r3
 800afba:	f04f 0200 	mov.w	r2, #0
 800afbe:	4bcb      	ldr	r3, [pc, #812]	@ (800b2ec <sdp4_deep_initialize+0x3e7c>)
 800afc0:	f7f5 f972 	bl	80002a8 <__aeabi_dsub>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4620      	mov	r0, r4
 800afca:	4629      	mov	r1, r5
 800afcc:	f7f5 fb24 	bl	8000618 <__aeabi_dmul>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4610      	mov	r0, r2
 800afd6:	4619      	mov	r1, r3
 800afd8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800afdc:	461c      	mov	r4, r3
 800afde:	f04f 0200 	mov.w	r2, #0
 800afe2:	4bc3      	ldr	r3, [pc, #780]	@ (800b2f0 <sdp4_deep_initialize+0x3e80>)
 800afe4:	f7f5 f962 	bl	80002ac <__adddf3>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	e944 2302 	strd	r2, r3, [r4, #-8]
		g310=1+2*deep_arg->eosq;
 800aff0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aff4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	f7f5 f953 	bl	80002ac <__adddf3>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	4610      	mov	r0, r2
 800b00c:	4619      	mov	r1, r3
 800b00e:	f04f 0200 	mov.w	r2, #0
 800b012:	4bb7      	ldr	r3, [pc, #732]	@ (800b2f0 <sdp4_deep_initialize+0x3e80>)
 800b014:	f7f5 f94a 	bl	80002ac <__adddf3>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
		g300=1+deep_arg->eosq*(-6+6.60937*deep_arg->eosq);
 800b020:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b024:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b02e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b032:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b03c:	a3a6      	add	r3, pc, #664	@ (adr r3, 800b2d8 <sdp4_deep_initialize+0x3e68>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f7f5 fae9 	bl	8000618 <__aeabi_dmul>
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	4610      	mov	r0, r2
 800b04c:	4619      	mov	r1, r3
 800b04e:	f04f 0200 	mov.w	r2, #0
 800b052:	4ba8      	ldr	r3, [pc, #672]	@ (800b2f4 <sdp4_deep_initialize+0x3e84>)
 800b054:	f7f5 f928 	bl	80002a8 <__aeabi_dsub>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4620      	mov	r0, r4
 800b05e:	4629      	mov	r1, r5
 800b060:	f7f5 fada 	bl	8000618 <__aeabi_dmul>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4610      	mov	r0, r2
 800b06a:	4619      	mov	r1, r3
 800b06c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800b070:	461c      	mov	r4, r3
 800b072:	f04f 0200 	mov.w	r2, #0
 800b076:	4b9e      	ldr	r3, [pc, #632]	@ (800b2f0 <sdp4_deep_initialize+0x3e80>)
 800b078:	f7f5 f918 	bl	80002ac <__adddf3>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	e9c4 2300 	strd	r2, r3, [r4]
		f220=0.75*(1+deep_arg->cosio)*(1+deep_arg->cosio);
 800b084:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b088:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b092:	f04f 0200 	mov.w	r2, #0
 800b096:	4b96      	ldr	r3, [pc, #600]	@ (800b2f0 <sdp4_deep_initialize+0x3e80>)
 800b098:	f7f5 f908 	bl	80002ac <__adddf3>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f04f 0200 	mov.w	r2, #0
 800b0a8:	4b93      	ldr	r3, [pc, #588]	@ (800b2f8 <sdp4_deep_initialize+0x3e88>)
 800b0aa:	f7f5 fab5 	bl	8000618 <__aeabi_dmul>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4614      	mov	r4, r2
 800b0b4:	461d      	mov	r5, r3
 800b0b6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b0ba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b0c4:	f04f 0200 	mov.w	r2, #0
 800b0c8:	4b89      	ldr	r3, [pc, #548]	@ (800b2f0 <sdp4_deep_initialize+0x3e80>)
 800b0ca:	f7f5 f8ef 	bl	80002ac <__adddf3>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800b0d6:	460e      	mov	r6, r1
 800b0d8:	4620      	mov	r0, r4
 800b0da:	4629      	mov	r1, r5
 800b0dc:	f7f5 fa9c 	bl	8000618 <__aeabi_dmul>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	e946 2302 	strd	r2, r3, [r6, #-8]
		f311=0.9375*deep_arg->sinio*deep_arg->sinio*(1+3*deep_arg->cosio)-0.75*(1+deep_arg->cosio);
 800b0e8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b0ec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	4b80      	ldr	r3, [pc, #512]	@ (800b2fc <sdp4_deep_initialize+0x3e8c>)
 800b0fc:	f7f5 fa8c 	bl	8000618 <__aeabi_dmul>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4610      	mov	r0, r2
 800b106:	4619      	mov	r1, r3
 800b108:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b10c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b116:	f7f5 fa7f 	bl	8000618 <__aeabi_dmul>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4614      	mov	r4, r2
 800b120:	461d      	mov	r5, r3
 800b122:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b126:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b130:	f04f 0200 	mov.w	r2, #0
 800b134:	4b72      	ldr	r3, [pc, #456]	@ (800b300 <sdp4_deep_initialize+0x3e90>)
 800b136:	f7f5 fa6f 	bl	8000618 <__aeabi_dmul>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4610      	mov	r0, r2
 800b140:	4619      	mov	r1, r3
 800b142:	f04f 0200 	mov.w	r2, #0
 800b146:	4b6a      	ldr	r3, [pc, #424]	@ (800b2f0 <sdp4_deep_initialize+0x3e80>)
 800b148:	f7f5 f8b0 	bl	80002ac <__adddf3>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4620      	mov	r0, r4
 800b152:	4629      	mov	r1, r5
 800b154:	f7f5 fa60 	bl	8000618 <__aeabi_dmul>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4614      	mov	r4, r2
 800b15e:	461d      	mov	r5, r3
 800b160:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b164:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	4b5f      	ldr	r3, [pc, #380]	@ (800b2f0 <sdp4_deep_initialize+0x3e80>)
 800b174:	f7f5 f89a 	bl	80002ac <__adddf3>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4610      	mov	r0, r2
 800b17e:	4619      	mov	r1, r3
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	4b5c      	ldr	r3, [pc, #368]	@ (800b2f8 <sdp4_deep_initialize+0x3e88>)
 800b186:	f7f5 fa47 	bl	8000618 <__aeabi_dmul>
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800b192:	460e      	mov	r6, r1
 800b194:	4620      	mov	r0, r4
 800b196:	4629      	mov	r1, r5
 800b198:	f7f5 f886 	bl	80002a8 <__aeabi_dsub>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	e9c6 2300 	strd	r2, r3, [r6]
		f330=1+deep_arg->cosio;
 800b1a4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b1a8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b1b2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800b1b6:	461c      	mov	r4, r3
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	4b4c      	ldr	r3, [pc, #304]	@ (800b2f0 <sdp4_deep_initialize+0x3e80>)
 800b1be:	f7f5 f875 	bl	80002ac <__adddf3>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	e944 2302 	strd	r2, r3, [r4, #-8]
		f330=1.875*f330*f330*f330;
 800b1ca:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	f04f 0200 	mov.w	r2, #0
 800b1d4:	4b4b      	ldr	r3, [pc, #300]	@ (800b304 <sdp4_deep_initialize+0x3e94>)
 800b1d6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b1da:	f7f5 fa1d 	bl	8000618 <__aeabi_dmul>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800b1ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1ee:	f7f5 fa13 	bl	8000618 <__aeabi_dmul>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800b200:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800b204:	f7f5 fa08 	bl	8000618 <__aeabi_dmul>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->del1=3*m->xnq*m->xnq*aqnv*aqnv;
 800b210:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b214:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800b21e:	f04f 0200 	mov.w	r2, #0
 800b222:	4b37      	ldr	r3, [pc, #220]	@ (800b300 <sdp4_deep_initialize+0x3e90>)
 800b224:	f7f5 f9f8 	bl	8000618 <__aeabi_dmul>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4610      	mov	r0, r2
 800b22e:	4619      	mov	r1, r3
 800b230:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b234:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800b23e:	f7f5 f9eb 	bl	8000618 <__aeabi_dmul>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4610      	mov	r0, r2
 800b248:	4619      	mov	r1, r3
 800b24a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800b24e:	f7f5 f9e3 	bl	8000618 <__aeabi_dmul>
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	4610      	mov	r0, r2
 800b258:	4619      	mov	r1, r3
 800b25a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800b25e:	f7f5 f9db 	bl	8000618 <__aeabi_dmul>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b26a:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b26e:	6809      	ldr	r1, [r1, #0]
 800b270:	e9c1 2388 	strd	r2, r3, [r1, #544]	@ 0x220
		m->del2=2*m->del1*f220*g200*Q22;
 800b274:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b278:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	f7f5 f811 	bl	80002ac <__adddf3>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	4610      	mov	r0, r2
 800b290:	4619      	mov	r1, r3
 800b292:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800b296:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b29a:	f7f5 f9bd 	bl	8000618 <__aeabi_dmul>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800b2aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2ae:	f7f5 f9b3 	bl	8000618 <__aeabi_dmul>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	a309      	add	r3, pc, #36	@ (adr r3, 800b2e0 <sdp4_deep_initialize+0x3e70>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f7f5 f9aa 	bl	8000618 <__aeabi_dmul>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b2cc:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b2d0:	6809      	ldr	r1, [r1, #0]
 800b2d2:	e9c1 238a 	strd	r2, r3, [r1, #552]	@ 0x228
 800b2d6:	e017      	b.n	800b308 <sdp4_deep_initialize+0x3e98>
 800b2d8:	b074a772 	.word	0xb074a772
 800b2dc:	401a6ffe 	.word	0x401a6ffe
 800b2e0:	e8fbe45d 	.word	0xe8fbe45d
 800b2e4:	3ebe046a 	.word	0x3ebe046a
 800b2e8:	3fea0000 	.word	0x3fea0000
 800b2ec:	40040000 	.word	0x40040000
 800b2f0:	3ff00000 	.word	0x3ff00000
 800b2f4:	40180000 	.word	0x40180000
 800b2f8:	3fe80000 	.word	0x3fe80000
 800b2fc:	3fee0000 	.word	0x3fee0000
 800b300:	40080000 	.word	0x40080000
 800b304:	3ffe0000 	.word	0x3ffe0000
		m->del3=3*m->del1*f330*g300*Q33*aqnv;
 800b308:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b30c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800b316:	f04f 0200 	mov.w	r2, #0
 800b31a:	4ba3      	ldr	r3, [pc, #652]	@ (800b5a8 <sdp4_deep_initialize+0x4138>)
 800b31c:	f7f5 f97c 	bl	8000618 <__aeabi_dmul>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	4610      	mov	r0, r2
 800b326:	4619      	mov	r1, r3
 800b328:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800b32c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b330:	f7f5 f972 	bl	8000618 <__aeabi_dmul>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4610      	mov	r0, r2
 800b33a:	4619      	mov	r1, r3
 800b33c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	f7f5 f968 	bl	8000618 <__aeabi_dmul>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	4610      	mov	r0, r2
 800b34e:	4619      	mov	r1, r3
 800b350:	a387      	add	r3, pc, #540	@ (adr r3, 800b570 <sdp4_deep_initialize+0x4100>)
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	f7f5 f95f 	bl	8000618 <__aeabi_dmul>
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	4610      	mov	r0, r2
 800b360:	4619      	mov	r1, r3
 800b362:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800b366:	f7f5 f957 	bl	8000618 <__aeabi_dmul>
 800b36a:	4602      	mov	r2, r0
 800b36c:	460b      	mov	r3, r1
 800b36e:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b372:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b376:	6809      	ldr	r1, [r1, #0]
 800b378:	e9c1 238c 	strd	r2, r3, [r1, #560]	@ 0x230
		m->del1=m->del1*f311*g310*Q31*aqnv;
 800b37c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b380:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800b38a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f7f5 f941 	bl	8000618 <__aeabi_dmul>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	4610      	mov	r0, r2
 800b39c:	4619      	mov	r1, r3
 800b39e:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800b3a2:	f7f5 f939 	bl	8000618 <__aeabi_dmul>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	a372      	add	r3, pc, #456	@ (adr r3, 800b578 <sdp4_deep_initialize+0x4108>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f7f5 f930 	bl	8000618 <__aeabi_dmul>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4619      	mov	r1, r3
 800b3c0:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800b3c4:	f7f5 f928 	bl	8000618 <__aeabi_dmul>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b3d0:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b3d4:	6809      	ldr	r1, [r1, #0]
 800b3d6:	e9c1 2388 	strd	r2, r3, [r1, #544]	@ 0x220
		m->fasx2=0.13130908;
 800b3da:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b3de:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b3e2:	6819      	ldr	r1, [r3, #0]
 800b3e4:	a366      	add	r3, pc, #408	@ (adr r3, 800b580 <sdp4_deep_initialize+0x4110>)
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	e9c1 238e 	strd	r2, r3, [r1, #568]	@ 0x238
		m->fasx4=2.8843198;
 800b3ee:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b3f2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b3f6:	6819      	ldr	r1, [r3, #0]
 800b3f8:	a363      	add	r3, pc, #396	@ (adr r3, 800b588 <sdp4_deep_initialize+0x4118>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	e9c1 2390 	strd	r2, r3, [r1, #576]	@ 0x240
		m->fasx6=0.37448087;
 800b402:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b406:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b40a:	6819      	ldr	r1, [r3, #0]
 800b40c:	a360      	add	r3, pc, #384	@ (adr r3, 800b590 <sdp4_deep_initialize+0x4120>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	e9c1 2392 	strd	r2, r3, [r1, #584]	@ 0x248
		m->xlamo=xmao+m->xnodeo+m->omegao-m->thgr;
 800b416:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b41a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	@ 0x2c0
 800b424:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800b428:	f7f4 ff40 	bl	80002ac <__adddf3>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4610      	mov	r0, r2
 800b432:	4619      	mov	r1, r3
 800b434:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b438:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	@ 0x2c8
 800b442:	f7f4 ff33 	bl	80002ac <__adddf3>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4610      	mov	r0, r2
 800b44c:	4619      	mov	r1, r3
 800b44e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b452:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800b45c:	f7f4 ff24 	bl	80002a8 <__aeabi_dsub>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b468:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b46c:	6809      	ldr	r1, [r1, #0]
 800b46e:	e9c1 2394 	strd	r2, r3, [r1, #592]	@ 0x250
		bfact=deep_arg->xmdot+xpidot-THDT;
 800b472:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b476:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800b480:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 800b484:	f7f4 ff12 	bl	80002ac <__adddf3>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4610      	mov	r0, r2
 800b48e:	4619      	mov	r1, r3
 800b490:	a341      	add	r3, pc, #260	@ (adr r3, 800b598 <sdp4_deep_initialize+0x4128>)
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	f7f4 ff07 	bl	80002a8 <__aeabi_dsub>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
		bfact=bfact+m->ssl+m->ssg+m->ssh;
 800b4a2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b4a6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800b4b0:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800b4b4:	f7f4 fefa 	bl	80002ac <__adddf3>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4610      	mov	r0, r2
 800b4be:	4619      	mov	r1, r3
 800b4c0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b4c4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	@ 0x160
 800b4ce:	f7f4 feed 	bl	80002ac <__adddf3>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	4619      	mov	r1, r3
 800b4da:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b4de:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800b4e8:	f7f4 fee0 	bl	80002ac <__adddf3>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
	}

	m->xfact=bfact-m->xnq;
 800b4f4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b4f8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800b502:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
 800b506:	f7f4 fecf 	bl	80002a8 <__aeabi_dsub>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b512:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b516:	6809      	ldr	r1, [r1, #0]
 800b518:	e9c1 2396 	strd	r2, r3, [r1, #600]	@ 0x258

	/* Initialize integrator */
	m->stepp=720;
 800b51c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b520:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b524:	6819      	ldr	r1, [r3, #0]
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	4b20      	ldr	r3, [pc, #128]	@ (800b5ac <sdp4_deep_initialize+0x413c>)
 800b52c:	e9c1 2398 	strd	r2, r3, [r1, #608]	@ 0x260
	m->stepn=-720;
 800b530:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b534:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b538:	6819      	ldr	r1, [r3, #0]
 800b53a:	f04f 0200 	mov.w	r2, #0
 800b53e:	4b1c      	ldr	r3, [pc, #112]	@ (800b5b0 <sdp4_deep_initialize+0x4140>)
 800b540:	e9c1 239a 	strd	r2, r3, [r1, #616]	@ 0x268
	m->step2=259200;
 800b544:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b548:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b54c:	6819      	ldr	r1, [r3, #0]
 800b54e:	a314      	add	r3, pc, #80	@ (adr r3, 800b5a0 <sdp4_deep_initialize+0x4130>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	e9c1 239c 	strd	r2, r3, [r1, #624]	@ 0x270

	return;
 800b558:	e002      	b.n	800b560 <sdp4_deep_initialize+0x40f0>
		    return;
 800b55a:	bf00      	nop
 800b55c:	e000      	b.n	800b560 <sdp4_deep_initialize+0x40f0>
		    return;
 800b55e:	bf00      	nop
}
 800b560:	f507 7759 	add.w	r7, r7, #868	@ 0x364
 800b564:	46bd      	mov	sp, r7
 800b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56a:	bf00      	nop
 800b56c:	f3af 8000 	nop.w
 800b570:	fa8d3300 	.word	0xfa8d3300
 800b574:	3e8db168 	.word	0x3e8db168
 800b578:	192cb6b5 	.word	0x192cb6b5
 800b57c:	3ec200a9 	.word	0x3ec200a9
 800b580:	662248d5 	.word	0x662248d5
 800b584:	3fc0cebc 	.word	0x3fc0cebc
 800b588:	4261a460 	.word	0x4261a460
 800b58c:	40071316 	.word	0x40071316
 800b590:	9c682b0d 	.word	0x9c682b0d
 800b594:	3fd7f77e 	.word	0x3fd7f77e
 800b598:	5b2195a5 	.word	0x5b2195a5
 800b59c:	3f71ebcd 	.word	0x3f71ebcd
 800b5a0:	00000000 	.word	0x00000000
 800b5a4:	410fa400 	.word	0x410fa400
 800b5a8:	40080000 	.word	0x40080000
 800b5ac:	40868000 	.word	0x40868000
 800b5b0:	c0868000 	.word	0xc0868000
 800b5b4:	00000000 	.word	0x00000000

0800b5b8 <deep_arg_dynamic_init>:

void deep_arg_dynamic_init(const struct _sdp4 *m, deep_arg_dynamic_t *deep_dyn){
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
	deep_dyn->savtsn=1E20;
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	a312      	add	r3, pc, #72	@ (adr r3, 800b610 <deep_arg_dynamic_init+0x58>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	deep_dyn->loopFlag = 0;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	deep_dyn->epochRestartFlag = 0;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	deep_dyn->xli=m->xlamo;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	deep_dyn->xni=m->xnq;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	deep_dyn->atime=0;
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	f04f 0200 	mov.w	r2, #0
 800b5fc:	f04f 0300 	mov.w	r3, #0
 800b600:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	78b58c40 	.word	0x78b58c40
 800b614:	4415af1d 	.word	0x4415af1d

0800b618 <sdp4_deep>:

void sdp4_deep(const struct _sdp4 *m, int ientry, const deep_arg_fixed_t * deep_arg, deep_arg_dynamic_t *deep_dyn)
{
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	b0d7      	sub	sp, #348	@ 0x15c
 800b61e:	af00      	add	r7, sp, #0
 800b620:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 800b624:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800b628:	6020      	str	r0, [r4, #0]
 800b62a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 800b62e:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800b632:	6001      	str	r1, [r0, #0]
 800b634:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800b638:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800b63c:	600a      	str	r2, [r1, #0]
 800b63e:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800b642:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800b646:	6013      	str	r3, [r2, #0]
	double alfdp,
	sinis, sinok, sil, betdp, dalf, cosis, cosok, dbet, dls, f2,
	f3, xnoh, pgh, ph, sel, ses, xls, sinzf, sis, sll, sls, temp,
	x2li, x2omi, xl, xldot, xnddt,
	xndot, xomi, zf, zm,
	delt=0, ft=0;
 800b648:	f04f 0200 	mov.w	r2, #0
 800b64c:	f04f 0300 	mov.w	r3, #0
 800b650:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800b654:	f04f 0200 	mov.w	r2, #0
 800b658:	f04f 0300 	mov.w	r3, #0
 800b65c:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138


	switch (ientry)
 800b660:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b664:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d009      	beq.n	800b682 <sdp4_deep+0x6a>
 800b66e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b672:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	f001 8203 	beq.w	800ca84 <sdp4_deep+0x146c>
 800b67e:	f001 bfef 	b.w	800d660 <sdp4_deep+0x2048>
	{

		case DPSecular:  /* Entrance for deep space secular effects */

		deep_dyn->xll=deep_dyn->xll+m->ssl*deep_dyn->t;
 800b682:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b686:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b690:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b694:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800b69e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b6a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b6ac:	f7f4 ffb4 	bl	8000618 <__aeabi_dmul>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7f4 fdf8 	bl	80002ac <__adddf3>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b6c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	e9c3 0100 	strd	r0, r1, [r3]
		deep_dyn->omgadf=deep_dyn->omgadf+m->ssg*deep_dyn->t;
 800b6d2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b6d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800b6e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b6e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	@ 0x160
 800b6ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b6f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b6fc:	f7f4 ff8c 	bl	8000618 <__aeabi_dmul>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 fdd0 	bl	80002ac <__adddf3>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4610      	mov	r0, r2
 800b712:	4619      	mov	r1, r3
 800b714:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b718:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	e9c3 0102 	strd	r0, r1, [r3, #8]
		deep_dyn->xnode=deep_dyn->xnode+m->ssh*deep_dyn->t;
 800b722:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b726:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800b730:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b734:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	@ 0x1d8
 800b73e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b742:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b74c:	f7f4 ff64 	bl	8000618 <__aeabi_dmul>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4620      	mov	r0, r4
 800b756:	4629      	mov	r1, r5
 800b758:	f7f4 fda8 	bl	80002ac <__adddf3>
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	4610      	mov	r0, r2
 800b762:	4619      	mov	r1, r3
 800b764:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b768:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	e9c3 0104 	strd	r0, r1, [r3, #16]
		deep_dyn->em=m->eo+m->sse*deep_dyn->t;
 800b772:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b776:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	e9d3 45b8 	ldrd	r4, r5, [r3, #736]	@ 0x2e0
 800b780:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b784:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	@ 0x150
 800b78e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b792:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b79c:	f7f4 ff3c 	bl	8000618 <__aeabi_dmul>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f4 fd80 	bl	80002ac <__adddf3>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b7b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	e9c3 0106 	strd	r0, r1, [r3, #24]
		deep_dyn->xinc=m->xincl+m->ssi*deep_dyn->t;
 800b7c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b7c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	e9d3 45b6 	ldrd	r4, r5, [r3, #728]	@ 0x2d8
 800b7d0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b7d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	e9d3 0156 	ldrd	r0, r1, [r3, #344]	@ 0x158
 800b7de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b7e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b7ec:	f7f4 ff14 	bl	8000618 <__aeabi_dmul>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f4 fd58 	bl	80002ac <__adddf3>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4610      	mov	r0, r2
 800b802:	4619      	mov	r1, r3
 800b804:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b808:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	e9c3 0108 	strd	r0, r1, [r3, #32]

		if (deep_dyn->xinc<0)
 800b812:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b816:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b820:	f04f 0200 	mov.w	r2, #0
 800b824:	f04f 0300 	mov.w	r3, #0
 800b828:	f7f5 f968 	bl	8000afc <__aeabi_dcmplt>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d03f      	beq.n	800b8b2 <sdp4_deep+0x29a>
		{
			deep_dyn->xinc=-deep_dyn->xinc;
 800b832:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b836:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b840:	633a      	str	r2, [r7, #48]	@ 0x30
 800b842:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800b846:	637b      	str	r3, [r7, #52]	@ 0x34
 800b848:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b84c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b856:	ed83 7b08 	vstr	d7, [r3, #32]
			deep_dyn->xnode=deep_dyn->xnode+PI;
 800b85a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b85e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b868:	f20f 6310 	addw	r3, pc, #1552	@ 0x610
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7f4 fd1c 	bl	80002ac <__adddf3>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800b87c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800b880:	6809      	ldr	r1, [r1, #0]
 800b882:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->omgadf=deep_dyn->omgadf-PI;
 800b886:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b88a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b894:	f20f 53e4 	addw	r3, pc, #1508	@ 0x5e4
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	f7f4 fd04 	bl	80002a8 <__aeabi_dsub>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800b8a8:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800b8ac:	6809      	ldr	r1, [r1, #0]
 800b8ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if (!m->resonanceFlag) {
 800b8b2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b8b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f001 86cd 	beq.w	800d65e <sdp4_deep+0x2046>
			return;
		}

		do
		{
			if ((deep_dyn->atime==0) || ((deep_dyn->t>=0) && (deep_dyn->atime<0)) || ((deep_dyn->t<0) && (deep_dyn->atime>=0)))
 800b8c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b8c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800b8d2:	f04f 0200 	mov.w	r2, #0
 800b8d6:	f04f 0300 	mov.w	r3, #0
 800b8da:	f7f5 f905 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d13f      	bne.n	800b964 <sdp4_deep+0x34c>
 800b8e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b8e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	f7f5 f913 	bl	8000b24 <__aeabi_dcmpge>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00f      	beq.n	800b924 <sdp4_deep+0x30c>
 800b904:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b908:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800b912:	f04f 0200 	mov.w	r2, #0
 800b916:	f04f 0300 	mov.w	r3, #0
 800b91a:	f7f5 f8ef 	bl	8000afc <__aeabi_dcmplt>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d11f      	bne.n	800b964 <sdp4_deep+0x34c>
 800b924:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b928:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800b932:	f04f 0200 	mov.w	r2, #0
 800b936:	f04f 0300 	mov.w	r3, #0
 800b93a:	f7f5 f8df 	bl	8000afc <__aeabi_dcmplt>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d05a      	beq.n	800b9fa <sdp4_deep+0x3e2>
 800b944:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b948:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800b952:	f04f 0200 	mov.w	r2, #0
 800b956:	f04f 0300 	mov.w	r3, #0
 800b95a:	f7f5 f8e3 	bl	8000b24 <__aeabi_dcmpge>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d04a      	beq.n	800b9fa <sdp4_deep+0x3e2>
			{
				/* Epoch restart */

				if (deep_dyn->t>=0)
 800b964:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b968:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800b972:	f04f 0200 	mov.w	r2, #0
 800b976:	f04f 0300 	mov.w	r3, #0
 800b97a:	f7f5 f8d3 	bl	8000b24 <__aeabi_dcmpge>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d009      	beq.n	800b998 <sdp4_deep+0x380>
					delt=m->stepp;
 800b984:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b988:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800b992:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800b996:	e008      	b.n	800b9aa <sdp4_deep+0x392>
				else
					delt=m->stepn;
 800b998:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b99c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800b9a6:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

				deep_dyn->atime=0;
 800b9aa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b9ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800b9b2:	6819      	ldr	r1, [r3, #0]
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	f04f 0300 	mov.w	r3, #0
 800b9bc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
				deep_dyn->xni=m->xnq;
 800b9c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b9c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800b9ce:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800b9d2:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800b9d6:	6809      	ldr	r1, [r1, #0]
 800b9d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				deep_dyn->xli=m->xlamo;
 800b9dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b9e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 800b9ea:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800b9ee:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800b9f2:	6809      	ldr	r1, [r1, #0]
 800b9f4:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
 800b9f8:	e041      	b.n	800ba7e <sdp4_deep+0x466>
			}

			else
			{
				if (fabs(deep_dyn->t)>=fabs(deep_dyn->atime))
 800b9fa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800b9fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800ba08:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ba0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ba14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800ba1e:	623a      	str	r2, [r7, #32]
 800ba20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ba2e:	f7f5 f879 	bl	8000b24 <__aeabi_dcmpge>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d022      	beq.n	800ba7e <sdp4_deep+0x466>
				{
					if (deep_dyn->t>0)
 800ba38:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ba3c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800ba46:	f04f 0200 	mov.w	r2, #0
 800ba4a:	f04f 0300 	mov.w	r3, #0
 800ba4e:	f7f5 f873 	bl	8000b38 <__aeabi_dcmpgt>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d009      	beq.n	800ba6c <sdp4_deep+0x454>
						delt=m->stepp;
 800ba58:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ba5c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800ba66:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800ba6a:	e008      	b.n	800ba7e <sdp4_deep+0x466>
					else
						delt=m->stepn;
 800ba6c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ba70:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800ba7a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
				}
			}

			do
			{
				if (fabs(deep_dyn->t-deep_dyn->atime)>=m->stepp)
 800ba7e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ba82:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800ba8c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ba90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800ba9a:	f7f4 fc05 	bl	80002a8 <__aeabi_dsub>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	61ba      	str	r2, [r7, #24]
 800baa4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800baa8:	61fb      	str	r3, [r7, #28]
 800baaa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800baae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800bab8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800babc:	f7f5 f832 	bl	8000b24 <__aeabi_dcmpge>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d010      	beq.n	800bae8 <sdp4_deep+0x4d0>
				{
					deep_dyn->loopFlag = 1;
 800bac6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800baca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
					deep_dyn->epochRestartFlag = 0;
 800bad6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bada:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800bae6:	e01b      	b.n	800bb20 <sdp4_deep+0x508>
				}

				else
				{
					ft=deep_dyn->t-deep_dyn->atime;
 800bae8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800baec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800baf6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bafa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800bb04:	f7f4 fbd0 	bl	80002a8 <__aeabi_dsub>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
					deep_dyn->loopFlag = 0;
 800bb10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bb14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
				}

				if (fabs(deep_dyn->t)<fabs(deep_dyn->atime))
 800bb20:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bb24:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800bb2e:	613a      	str	r2, [r7, #16]
 800bb30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bb3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800bb44:	60ba      	str	r2, [r7, #8]
 800bb46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bb54:	f7f4 ffd2 	bl	8000afc <__aeabi_dcmplt>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d032      	beq.n	800bbc4 <sdp4_deep+0x5ac>
				{
					if (deep_dyn->t>=0)
 800bb5e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bb62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800bb6c:	f04f 0200 	mov.w	r2, #0
 800bb70:	f04f 0300 	mov.w	r3, #0
 800bb74:	f7f4 ffd6 	bl	8000b24 <__aeabi_dcmpge>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d009      	beq.n	800bb92 <sdp4_deep+0x57a>
						delt=m->stepn;
 800bb7e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bb82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800bb8c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800bb90:	e008      	b.n	800bba4 <sdp4_deep+0x58c>
					else
						delt=m->stepp;
 800bb92:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bb96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800bba0:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

					deep_dyn->loopFlag = 1;
 800bba4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bba8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
					deep_dyn->epochRestartFlag = 1;
 800bbb4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bbb8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
				}

				/* Dot terms calculated */
				if (m->synchronousFlag) {
 800bbc4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bbc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f000 8157 	beq.w	800be84 <sdp4_deep+0x86c>
					xndot=m->del1*sin(deep_dyn->xli-m->fasx2)+m->del2*sin(2*(deep_dyn->xli-m->fasx4))+m->del3*sin(3*(deep_dyn->xli-m->fasx6));
 800bbd6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bbda:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	e9d3 4588 	ldrd	r4, r5, [r3, #544]	@ 0x220
 800bbe4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bbe8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bbf2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bbf6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	@ 0x238
 800bc00:	f7f4 fb52 	bl	80002a8 <__aeabi_dsub>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	ec43 2b17 	vmov	d7, r2, r3
 800bc0c:	eeb0 0a47 	vmov.f32	s0, s14
 800bc10:	eef0 0a67 	vmov.f32	s1, s15
 800bc14:	f012 fcc0 	bl	801e598 <sin>
 800bc18:	ec53 2b10 	vmov	r2, r3, d0
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	4629      	mov	r1, r5
 800bc20:	f7f4 fcfa 	bl	8000618 <__aeabi_dmul>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	4690      	mov	r8, r2
 800bc2a:	4699      	mov	r9, r3
 800bc2c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bc30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	e9d3 458a 	ldrd	r4, r5, [r3, #552]	@ 0x228
 800bc3a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bc3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bc48:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bc4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	@ 0x240
 800bc56:	f7f4 fb27 	bl	80002a8 <__aeabi_dsub>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4610      	mov	r0, r2
 800bc60:	4619      	mov	r1, r3
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	f7f4 fb21 	bl	80002ac <__adddf3>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	ec43 2b17 	vmov	d7, r2, r3
 800bc72:	eeb0 0a47 	vmov.f32	s0, s14
 800bc76:	eef0 0a67 	vmov.f32	s1, s15
 800bc7a:	f012 fc8d 	bl	801e598 <sin>
 800bc7e:	ec53 2b10 	vmov	r2, r3, d0
 800bc82:	4620      	mov	r0, r4
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f4 fcc7 	bl	8000618 <__aeabi_dmul>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4640      	mov	r0, r8
 800bc90:	4649      	mov	r1, r9
 800bc92:	f7f4 fb0b 	bl	80002ac <__adddf3>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4690      	mov	r8, r2
 800bc9c:	4699      	mov	r9, r3
 800bc9e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bca2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	e9d3 458c 	ldrd	r4, r5, [r3, #560]	@ 0x230
 800bcac:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bcb0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bcba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bcbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800bcc8:	f7f4 faee 	bl	80002a8 <__aeabi_dsub>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	f04f 0200 	mov.w	r2, #0
 800bcd8:	4b67      	ldr	r3, [pc, #412]	@ (800be78 <sdp4_deep+0x860>)
 800bcda:	f7f4 fc9d 	bl	8000618 <__aeabi_dmul>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	ec43 2b17 	vmov	d7, r2, r3
 800bce6:	eeb0 0a47 	vmov.f32	s0, s14
 800bcea:	eef0 0a67 	vmov.f32	s1, s15
 800bcee:	f012 fc53 	bl	801e598 <sin>
 800bcf2:	ec53 2b10 	vmov	r2, r3, d0
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	f7f4 fc8d 	bl	8000618 <__aeabi_dmul>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	4640      	mov	r0, r8
 800bd04:	4649      	mov	r1, r9
 800bd06:	f7f4 fad1 	bl	80002ac <__adddf3>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
					xnddt=m->del1*cos(deep_dyn->xli-m->fasx2)+2*m->del2*cos(2*(deep_dyn->xli-m->fasx4))+3*m->del3*cos(3*(deep_dyn->xli-m->fasx6));
 800bd12:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bd16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	e9d3 4588 	ldrd	r4, r5, [r3, #544]	@ 0x220
 800bd20:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bd24:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bd2e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bd32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	@ 0x238
 800bd3c:	f7f4 fab4 	bl	80002a8 <__aeabi_dsub>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	ec43 2b17 	vmov	d7, r2, r3
 800bd48:	eeb0 0a47 	vmov.f32	s0, s14
 800bd4c:	eef0 0a67 	vmov.f32	s1, s15
 800bd50:	f012 fbc6 	bl	801e4e0 <cos>
 800bd54:	ec53 2b10 	vmov	r2, r3, d0
 800bd58:	4620      	mov	r0, r4
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	f7f4 fc5c 	bl	8000618 <__aeabi_dmul>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4690      	mov	r8, r2
 800bd66:	4699      	mov	r9, r3
 800bd68:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bd6c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	e9d3 018a 	ldrd	r0, r1, [r3, #552]	@ 0x228
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	f7f4 fa97 	bl	80002ac <__adddf3>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4614      	mov	r4, r2
 800bd84:	461d      	mov	r5, r3
 800bd86:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bd8a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bd94:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bd98:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	@ 0x240
 800bda2:	f7f4 fa81 	bl	80002a8 <__aeabi_dsub>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4610      	mov	r0, r2
 800bdac:	4619      	mov	r1, r3
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	f7f4 fa7b 	bl	80002ac <__adddf3>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	ec43 2b17 	vmov	d7, r2, r3
 800bdbe:	eeb0 0a47 	vmov.f32	s0, s14
 800bdc2:	eef0 0a67 	vmov.f32	s1, s15
 800bdc6:	f012 fb8b 	bl	801e4e0 <cos>
 800bdca:	ec53 2b10 	vmov	r2, r3, d0
 800bdce:	4620      	mov	r0, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fc21 	bl	8000618 <__aeabi_dmul>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4640      	mov	r0, r8
 800bddc:	4649      	mov	r1, r9
 800bdde:	f7f4 fa65 	bl	80002ac <__adddf3>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	4690      	mov	r8, r2
 800bde8:	4699      	mov	r9, r3
 800bdea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bdee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	@ 0x230
 800bdf8:	f04f 0200 	mov.w	r2, #0
 800bdfc:	4b1e      	ldr	r3, [pc, #120]	@ (800be78 <sdp4_deep+0x860>)
 800bdfe:	f7f4 fc0b 	bl	8000618 <__aeabi_dmul>
 800be02:	4602      	mov	r2, r0
 800be04:	460b      	mov	r3, r1
 800be06:	4614      	mov	r4, r2
 800be08:	461d      	mov	r5, r3
 800be0a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800be0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800be18:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800be1c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800be26:	f7f4 fa3f 	bl	80002a8 <__aeabi_dsub>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4610      	mov	r0, r2
 800be30:	4619      	mov	r1, r3
 800be32:	f04f 0200 	mov.w	r2, #0
 800be36:	4b10      	ldr	r3, [pc, #64]	@ (800be78 <sdp4_deep+0x860>)
 800be38:	f7f4 fbee 	bl	8000618 <__aeabi_dmul>
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	ec43 2b17 	vmov	d7, r2, r3
 800be44:	eeb0 0a47 	vmov.f32	s0, s14
 800be48:	eef0 0a67 	vmov.f32	s1, s15
 800be4c:	f012 fb48 	bl	801e4e0 <cos>
 800be50:	ec53 2b10 	vmov	r2, r3, d0
 800be54:	4620      	mov	r0, r4
 800be56:	4629      	mov	r1, r5
 800be58:	f7f4 fbde 	bl	8000618 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4640      	mov	r0, r8
 800be62:	4649      	mov	r1, r9
 800be64:	f7f4 fa22 	bl	80002ac <__adddf3>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 800be70:	f000 bc2e 	b.w	800c6d0 <sdp4_deep+0x10b8>
 800be74:	f3af 8000 	nop.w
 800be78:	40080000 	.word	0x40080000
 800be7c:	54442d18 	.word	0x54442d18
 800be80:	400921fb 	.word	0x400921fb
				}

				else
				{
					xomi=m->omegaq+deep_arg->omgdot*deep_dyn->atime;
 800be84:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800be88:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	@ 0xe0
 800be92:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800be96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800bea0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bea4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800beae:	f7f4 fbb3 	bl	8000618 <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4620      	mov	r0, r4
 800beb8:	4629      	mov	r1, r5
 800beba:	f7f4 f9f7 	bl	80002ac <__adddf3>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
					x2omi=xomi+xomi;
 800bec6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	f7f4 f9ed 	bl	80002ac <__adddf3>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
					x2li=deep_dyn->xli+deep_dyn->xli;
 800beda:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bede:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	f7f4 f9de 	bl	80002ac <__adddf3>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					xndot=m->d2201*sin(x2omi+deep_dyn->xli-G22)+m->d2211*sin(deep_dyn->xli-G22)+m->d3210*sin(xomi+deep_dyn->xli-G32)+m->d3222*sin(-xomi+deep_dyn->xli-G32)+m->d4410*sin(x2omi+x2li-G44)+m->d4422*sin(x2li-G44)+m->d5220*sin(xomi+deep_dyn->xli-G52)+m->d5232*sin(-xomi+deep_dyn->xli-G52)+m->d5421*sin(xomi+x2li-G54)+m->d5433*sin(-xomi+x2li-G54);
 800bef8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800befc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	e9d3 45a0 	ldrd	r4, r5, [r3, #640]	@ 0x280
 800bf06:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bf0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bf14:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800bf18:	f7f4 f9c8 	bl	80002ac <__adddf3>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4610      	mov	r0, r2
 800bf22:	4619      	mov	r1, r3
 800bf24:	f60f 3334 	addw	r3, pc, #2868	@ 0xb34
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	f7f4 f9bc 	bl	80002a8 <__aeabi_dsub>
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	ec43 2b17 	vmov	d7, r2, r3
 800bf38:	eeb0 0a47 	vmov.f32	s0, s14
 800bf3c:	eef0 0a67 	vmov.f32	s1, s15
 800bf40:	f012 fb2a 	bl	801e598 <sin>
 800bf44:	ec53 2b10 	vmov	r2, r3, d0
 800bf48:	4620      	mov	r0, r4
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	f7f4 fb64 	bl	8000618 <__aeabi_dmul>
 800bf50:	4602      	mov	r2, r0
 800bf52:	460b      	mov	r3, r1
 800bf54:	4690      	mov	r8, r2
 800bf56:	4699      	mov	r9, r3
 800bf58:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bf5c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	e9d3 45a2 	ldrd	r4, r5, [r3, #648]	@ 0x288
 800bf66:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bf6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bf74:	f60f 23e4 	addw	r3, pc, #2788	@ 0xae4
 800bf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7c:	f7f4 f994 	bl	80002a8 <__aeabi_dsub>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	ec43 2b17 	vmov	d7, r2, r3
 800bf88:	eeb0 0a47 	vmov.f32	s0, s14
 800bf8c:	eef0 0a67 	vmov.f32	s1, s15
 800bf90:	f012 fb02 	bl	801e598 <sin>
 800bf94:	ec53 2b10 	vmov	r2, r3, d0
 800bf98:	4620      	mov	r0, r4
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	f7f4 fb3c 	bl	8000618 <__aeabi_dmul>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	f7f4 f980 	bl	80002ac <__adddf3>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4690      	mov	r8, r2
 800bfb2:	4699      	mov	r9, r3
 800bfb4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bfb8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	e9d3 4578 	ldrd	r4, r5, [r3, #480]	@ 0x1e0
 800bfc2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800bfc6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800bfd0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800bfd4:	f7f4 f96a 	bl	80002ac <__adddf3>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4610      	mov	r0, r2
 800bfde:	4619      	mov	r1, r3
 800bfe0:	f60f 2380 	addw	r3, pc, #2688	@ 0xa80
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	f7f4 f95e 	bl	80002a8 <__aeabi_dsub>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	ec43 2b17 	vmov	d7, r2, r3
 800bff4:	eeb0 0a47 	vmov.f32	s0, s14
 800bff8:	eef0 0a67 	vmov.f32	s1, s15
 800bffc:	f012 facc 	bl	801e598 <sin>
 800c000:	ec53 2b10 	vmov	r2, r3, d0
 800c004:	4620      	mov	r0, r4
 800c006:	4629      	mov	r1, r5
 800c008:	f7f4 fb06 	bl	8000618 <__aeabi_dmul>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4640      	mov	r0, r8
 800c012:	4649      	mov	r1, r9
 800c014:	f7f4 f94a 	bl	80002ac <__adddf3>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4690      	mov	r8, r2
 800c01e:	4699      	mov	r9, r3
 800c020:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c024:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	e9d3 457a 	ldrd	r4, r5, [r3, #488]	@ 0x1e8
 800c02e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c032:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c03c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c040:	f7f4 f932 	bl	80002a8 <__aeabi_dsub>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4610      	mov	r0, r2
 800c04a:	4619      	mov	r1, r3
 800c04c:	f60f 2314 	addw	r3, pc, #2580	@ 0xa14
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f7f4 f928 	bl	80002a8 <__aeabi_dsub>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	ec43 2b17 	vmov	d7, r2, r3
 800c060:	eeb0 0a47 	vmov.f32	s0, s14
 800c064:	eef0 0a67 	vmov.f32	s1, s15
 800c068:	f012 fa96 	bl	801e598 <sin>
 800c06c:	ec53 2b10 	vmov	r2, r3, d0
 800c070:	4620      	mov	r0, r4
 800c072:	4629      	mov	r1, r5
 800c074:	f7f4 fad0 	bl	8000618 <__aeabi_dmul>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4640      	mov	r0, r8
 800c07e:	4649      	mov	r1, r9
 800c080:	f7f4 f914 	bl	80002ac <__adddf3>
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	4690      	mov	r8, r2
 800c08a:	4699      	mov	r9, r3
 800c08c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c090:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	e9d3 457c 	ldrd	r4, r5, [r3, #496]	@ 0x1f0
 800c09a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c09e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c0a2:	f7f4 f903 	bl	80002ac <__adddf3>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f60f 13bc 	addw	r3, pc, #2492	@ 0x9bc
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 f8f7 	bl	80002a8 <__aeabi_dsub>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	ec43 2b17 	vmov	d7, r2, r3
 800c0c2:	eeb0 0a47 	vmov.f32	s0, s14
 800c0c6:	eef0 0a67 	vmov.f32	s1, s15
 800c0ca:	f012 fa65 	bl	801e598 <sin>
 800c0ce:	ec53 2b10 	vmov	r2, r3, d0
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	f7f4 fa9f 	bl	8000618 <__aeabi_dmul>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	460b      	mov	r3, r1
 800c0de:	4640      	mov	r0, r8
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	f7f4 f8e3 	bl	80002ac <__adddf3>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	4690      	mov	r8, r2
 800c0ec:	4699      	mov	r9, r3
 800c0ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c0f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	@ 0x1f8
 800c0fc:	f60f 136c 	addw	r3, pc, #2412	@ 0x96c
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800c108:	f7f4 f8ce 	bl	80002a8 <__aeabi_dsub>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	ec43 2b17 	vmov	d7, r2, r3
 800c114:	eeb0 0a47 	vmov.f32	s0, s14
 800c118:	eef0 0a67 	vmov.f32	s1, s15
 800c11c:	f012 fa3c 	bl	801e598 <sin>
 800c120:	ec53 2b10 	vmov	r2, r3, d0
 800c124:	4620      	mov	r0, r4
 800c126:	4629      	mov	r1, r5
 800c128:	f7f4 fa76 	bl	8000618 <__aeabi_dmul>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	4640      	mov	r0, r8
 800c132:	4649      	mov	r1, r9
 800c134:	f7f4 f8ba 	bl	80002ac <__adddf3>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4690      	mov	r8, r2
 800c13e:	4699      	mov	r9, r3
 800c140:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c144:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	e9d3 4580 	ldrd	r4, r5, [r3, #512]	@ 0x200
 800c14e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c152:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c15c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c160:	f7f4 f8a4 	bl	80002ac <__adddf3>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4610      	mov	r0, r2
 800c16a:	4619      	mov	r1, r3
 800c16c:	f60f 1304 	addw	r3, pc, #2308	@ 0x904
 800c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c174:	f7f4 f898 	bl	80002a8 <__aeabi_dsub>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	ec43 2b17 	vmov	d7, r2, r3
 800c180:	eeb0 0a47 	vmov.f32	s0, s14
 800c184:	eef0 0a67 	vmov.f32	s1, s15
 800c188:	f012 fa06 	bl	801e598 <sin>
 800c18c:	ec53 2b10 	vmov	r2, r3, d0
 800c190:	4620      	mov	r0, r4
 800c192:	4629      	mov	r1, r5
 800c194:	f7f4 fa40 	bl	8000618 <__aeabi_dmul>
 800c198:	4602      	mov	r2, r0
 800c19a:	460b      	mov	r3, r1
 800c19c:	4640      	mov	r0, r8
 800c19e:	4649      	mov	r1, r9
 800c1a0:	f7f4 f884 	bl	80002ac <__adddf3>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4690      	mov	r8, r2
 800c1aa:	4699      	mov	r9, r3
 800c1ac:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c1b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	e9d3 4582 	ldrd	r4, r5, [r3, #520]	@ 0x208
 800c1ba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c1be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c1c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c1cc:	f7f4 f86c 	bl	80002a8 <__aeabi_dsub>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	f60f 0398 	addw	r3, pc, #2200	@ 0x898
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	f7f4 f862 	bl	80002a8 <__aeabi_dsub>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	ec43 2b17 	vmov	d7, r2, r3
 800c1ec:	eeb0 0a47 	vmov.f32	s0, s14
 800c1f0:	eef0 0a67 	vmov.f32	s1, s15
 800c1f4:	f012 f9d0 	bl	801e598 <sin>
 800c1f8:	ec53 2b10 	vmov	r2, r3, d0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	f7f4 fa0a 	bl	8000618 <__aeabi_dmul>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4640      	mov	r0, r8
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7f4 f84e 	bl	80002ac <__adddf3>
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	4690      	mov	r8, r2
 800c216:	4699      	mov	r9, r3
 800c218:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c21c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	e9d3 4584 	ldrd	r4, r5, [r3, #528]	@ 0x210
 800c226:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c22a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c22e:	f7f4 f83d 	bl	80002ac <__adddf3>
 800c232:	4602      	mov	r2, r0
 800c234:	460b      	mov	r3, r1
 800c236:	4610      	mov	r0, r2
 800c238:	4619      	mov	r1, r3
 800c23a:	f60f 0340 	addw	r3, pc, #2112	@ 0x840
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	f7f4 f831 	bl	80002a8 <__aeabi_dsub>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	ec43 2b17 	vmov	d7, r2, r3
 800c24e:	eeb0 0a47 	vmov.f32	s0, s14
 800c252:	eef0 0a67 	vmov.f32	s1, s15
 800c256:	f012 f99f 	bl	801e598 <sin>
 800c25a:	ec53 2b10 	vmov	r2, r3, d0
 800c25e:	4620      	mov	r0, r4
 800c260:	4629      	mov	r1, r5
 800c262:	f7f4 f9d9 	bl	8000618 <__aeabi_dmul>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4640      	mov	r0, r8
 800c26c:	4649      	mov	r1, r9
 800c26e:	f7f4 f81d 	bl	80002ac <__adddf3>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4690      	mov	r8, r2
 800c278:	4699      	mov	r9, r3
 800c27a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c27e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	e9d3 4586 	ldrd	r4, r5, [r3, #536]	@ 0x218
 800c288:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c28c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800c290:	f7f4 f80a 	bl	80002a8 <__aeabi_dsub>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4610      	mov	r0, r2
 800c29a:	4619      	mov	r1, r3
 800c29c:	f20f 73dc 	addw	r3, pc, #2012	@ 0x7dc
 800c2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a4:	f7f4 f800 	bl	80002a8 <__aeabi_dsub>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	ec43 2b17 	vmov	d7, r2, r3
 800c2b0:	eeb0 0a47 	vmov.f32	s0, s14
 800c2b4:	eef0 0a67 	vmov.f32	s1, s15
 800c2b8:	f012 f96e 	bl	801e598 <sin>
 800c2bc:	ec53 2b10 	vmov	r2, r3, d0
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f7f4 f9a8 	bl	8000618 <__aeabi_dmul>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	4649      	mov	r1, r9
 800c2d0:	f7f3 ffec 	bl	80002ac <__adddf3>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
					xnddt=m->d2201*cos(x2omi+deep_dyn->xli-G22)+m->d2211*cos(deep_dyn->xli-G22)+m->d3210*cos(xomi+deep_dyn->xli-G32)+m->d3222*cos(-xomi+deep_dyn->xli-G32)+m->d5220*cos(xomi+deep_dyn->xli-G52)+m->d5232*cos(-xomi+deep_dyn->xli-G52)+2*(m->d4410*cos(x2omi+x2li-G44)+m->d4422*cos(x2li-G44)+m->d5421*cos(xomi+x2li-G54)+m->d5433*cos(-xomi+x2li-G54));
 800c2dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c2e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	e9d3 45a0 	ldrd	r4, r5, [r3, #640]	@ 0x280
 800c2ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c2ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c2f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800c2fc:	f7f3 ffd6 	bl	80002ac <__adddf3>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4610      	mov	r0, r2
 800c306:	4619      	mov	r1, r3
 800c308:	f20f 7350 	addw	r3, pc, #1872	@ 0x750
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f7f3 ffca 	bl	80002a8 <__aeabi_dsub>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	ec43 2b17 	vmov	d7, r2, r3
 800c31c:	eeb0 0a47 	vmov.f32	s0, s14
 800c320:	eef0 0a67 	vmov.f32	s1, s15
 800c324:	f012 f8dc 	bl	801e4e0 <cos>
 800c328:	ec53 2b10 	vmov	r2, r3, d0
 800c32c:	4620      	mov	r0, r4
 800c32e:	4629      	mov	r1, r5
 800c330:	f7f4 f972 	bl	8000618 <__aeabi_dmul>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	4690      	mov	r8, r2
 800c33a:	4699      	mov	r9, r3
 800c33c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c340:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	e9d3 45a2 	ldrd	r4, r5, [r3, #648]	@ 0x288
 800c34a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c34e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c358:	f20f 7300 	addw	r3, pc, #1792	@ 0x700
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	f7f3 ffa2 	bl	80002a8 <__aeabi_dsub>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	ec43 2b17 	vmov	d7, r2, r3
 800c36c:	eeb0 0a47 	vmov.f32	s0, s14
 800c370:	eef0 0a67 	vmov.f32	s1, s15
 800c374:	f012 f8b4 	bl	801e4e0 <cos>
 800c378:	ec53 2b10 	vmov	r2, r3, d0
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f4 f94a 	bl	8000618 <__aeabi_dmul>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4640      	mov	r0, r8
 800c38a:	4649      	mov	r1, r9
 800c38c:	f7f3 ff8e 	bl	80002ac <__adddf3>
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	4690      	mov	r8, r2
 800c396:	4699      	mov	r9, r3
 800c398:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c39c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	e9d3 4578 	ldrd	r4, r5, [r3, #480]	@ 0x1e0
 800c3a6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c3aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c3b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c3b8:	f7f3 ff78 	bl	80002ac <__adddf3>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	f20f 639c 	addw	r3, pc, #1692	@ 0x69c
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	f7f3 ff6c 	bl	80002a8 <__aeabi_dsub>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	ec43 2b17 	vmov	d7, r2, r3
 800c3d8:	eeb0 0a47 	vmov.f32	s0, s14
 800c3dc:	eef0 0a67 	vmov.f32	s1, s15
 800c3e0:	f012 f87e 	bl	801e4e0 <cos>
 800c3e4:	ec53 2b10 	vmov	r2, r3, d0
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	f7f4 f914 	bl	8000618 <__aeabi_dmul>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	f7f3 ff58 	bl	80002ac <__adddf3>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	4690      	mov	r8, r2
 800c402:	4699      	mov	r9, r3
 800c404:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c408:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	e9d3 457a 	ldrd	r4, r5, [r3, #488]	@ 0x1e8
 800c412:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c416:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c420:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c424:	f7f3 ff40 	bl	80002a8 <__aeabi_dsub>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4610      	mov	r0, r2
 800c42e:	4619      	mov	r1, r3
 800c430:	f20f 6330 	addw	r3, pc, #1584	@ 0x630
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	f7f3 ff36 	bl	80002a8 <__aeabi_dsub>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	ec43 2b17 	vmov	d7, r2, r3
 800c444:	eeb0 0a47 	vmov.f32	s0, s14
 800c448:	eef0 0a67 	vmov.f32	s1, s15
 800c44c:	f012 f848 	bl	801e4e0 <cos>
 800c450:	ec53 2b10 	vmov	r2, r3, d0
 800c454:	4620      	mov	r0, r4
 800c456:	4629      	mov	r1, r5
 800c458:	f7f4 f8de 	bl	8000618 <__aeabi_dmul>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	4640      	mov	r0, r8
 800c462:	4649      	mov	r1, r9
 800c464:	f7f3 ff22 	bl	80002ac <__adddf3>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4690      	mov	r8, r2
 800c46e:	4699      	mov	r9, r3
 800c470:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c474:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	e9d3 4580 	ldrd	r4, r5, [r3, #512]	@ 0x200
 800c47e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c482:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c48c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c490:	f7f3 ff0c 	bl	80002ac <__adddf3>
 800c494:	4602      	mov	r2, r0
 800c496:	460b      	mov	r3, r1
 800c498:	4610      	mov	r0, r2
 800c49a:	4619      	mov	r1, r3
 800c49c:	f20f 53d4 	addw	r3, pc, #1492	@ 0x5d4
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f3 ff00 	bl	80002a8 <__aeabi_dsub>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	ec43 2b17 	vmov	d7, r2, r3
 800c4b0:	eeb0 0a47 	vmov.f32	s0, s14
 800c4b4:	eef0 0a67 	vmov.f32	s1, s15
 800c4b8:	f012 f812 	bl	801e4e0 <cos>
 800c4bc:	ec53 2b10 	vmov	r2, r3, d0
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	f7f4 f8a8 	bl	8000618 <__aeabi_dmul>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	f7f3 feec 	bl	80002ac <__adddf3>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4690      	mov	r8, r2
 800c4da:	4699      	mov	r9, r3
 800c4dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c4e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	e9d3 4582 	ldrd	r4, r5, [r3, #520]	@ 0x208
 800c4ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c4ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800c4f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c4fc:	f7f3 fed4 	bl	80002a8 <__aeabi_dsub>
 800c500:	4602      	mov	r2, r0
 800c502:	460b      	mov	r3, r1
 800c504:	4610      	mov	r0, r2
 800c506:	4619      	mov	r1, r3
 800c508:	f20f 5368 	addw	r3, pc, #1384	@ 0x568
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f7f3 feca 	bl	80002a8 <__aeabi_dsub>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	ec43 2b17 	vmov	d7, r2, r3
 800c51c:	eeb0 0a47 	vmov.f32	s0, s14
 800c520:	eef0 0a67 	vmov.f32	s1, s15
 800c524:	f011 ffdc 	bl	801e4e0 <cos>
 800c528:	ec53 2b10 	vmov	r2, r3, d0
 800c52c:	4620      	mov	r0, r4
 800c52e:	4629      	mov	r1, r5
 800c530:	f7f4 f872 	bl	8000618 <__aeabi_dmul>
 800c534:	4602      	mov	r2, r0
 800c536:	460b      	mov	r3, r1
 800c538:	4640      	mov	r0, r8
 800c53a:	4649      	mov	r1, r9
 800c53c:	f7f3 feb6 	bl	80002ac <__adddf3>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4692      	mov	sl, r2
 800c546:	469b      	mov	fp, r3
 800c548:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c54c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	e9d3 457c 	ldrd	r4, r5, [r3, #496]	@ 0x1f0
 800c556:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c55a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c55e:	f7f3 fea5 	bl	80002ac <__adddf3>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4610      	mov	r0, r2
 800c568:	4619      	mov	r1, r3
 800c56a:	f20f 5300 	addw	r3, pc, #1280	@ 0x500
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	f7f3 fe99 	bl	80002a8 <__aeabi_dsub>
 800c576:	4602      	mov	r2, r0
 800c578:	460b      	mov	r3, r1
 800c57a:	ec43 2b17 	vmov	d7, r2, r3
 800c57e:	eeb0 0a47 	vmov.f32	s0, s14
 800c582:	eef0 0a67 	vmov.f32	s1, s15
 800c586:	f011 ffab 	bl	801e4e0 <cos>
 800c58a:	ec53 2b10 	vmov	r2, r3, d0
 800c58e:	4620      	mov	r0, r4
 800c590:	4629      	mov	r1, r5
 800c592:	f7f4 f841 	bl	8000618 <__aeabi_dmul>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	4690      	mov	r8, r2
 800c59c:	4699      	mov	r9, r3
 800c59e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c5a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	@ 0x1f8
 800c5ac:	f20f 43bc 	addw	r3, pc, #1212	@ 0x4bc
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800c5b8:	f7f3 fe76 	bl	80002a8 <__aeabi_dsub>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	ec43 2b17 	vmov	d7, r2, r3
 800c5c4:	eeb0 0a47 	vmov.f32	s0, s14
 800c5c8:	eef0 0a67 	vmov.f32	s1, s15
 800c5cc:	f011 ff88 	bl	801e4e0 <cos>
 800c5d0:	ec53 2b10 	vmov	r2, r3, d0
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7f4 f81e 	bl	8000618 <__aeabi_dmul>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4640      	mov	r0, r8
 800c5e2:	4649      	mov	r1, r9
 800c5e4:	f7f3 fe62 	bl	80002ac <__adddf3>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4690      	mov	r8, r2
 800c5ee:	4699      	mov	r9, r3
 800c5f0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c5f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	e9d3 4584 	ldrd	r4, r5, [r3, #528]	@ 0x210
 800c5fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c602:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c606:	f7f3 fe51 	bl	80002ac <__adddf3>
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	4610      	mov	r0, r2
 800c610:	4619      	mov	r1, r3
 800c612:	f20f 4368 	addw	r3, pc, #1128	@ 0x468
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	f7f3 fe45 	bl	80002a8 <__aeabi_dsub>
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	ec43 2b17 	vmov	d7, r2, r3
 800c626:	eeb0 0a47 	vmov.f32	s0, s14
 800c62a:	eef0 0a67 	vmov.f32	s1, s15
 800c62e:	f011 ff57 	bl	801e4e0 <cos>
 800c632:	ec53 2b10 	vmov	r2, r3, d0
 800c636:	4620      	mov	r0, r4
 800c638:	4629      	mov	r1, r5
 800c63a:	f7f3 ffed 	bl	8000618 <__aeabi_dmul>
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	4640      	mov	r0, r8
 800c644:	4649      	mov	r1, r9
 800c646:	f7f3 fe31 	bl	80002ac <__adddf3>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4690      	mov	r8, r2
 800c650:	4699      	mov	r9, r3
 800c652:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c656:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	e9d3 4586 	ldrd	r4, r5, [r3, #536]	@ 0x218
 800c660:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c664:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800c668:	f7f3 fe1e 	bl	80002a8 <__aeabi_dsub>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	4610      	mov	r0, r2
 800c672:	4619      	mov	r1, r3
 800c674:	f20f 4304 	addw	r3, pc, #1028	@ 0x404
 800c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67c:	f7f3 fe14 	bl	80002a8 <__aeabi_dsub>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	ec43 2b17 	vmov	d7, r2, r3
 800c688:	eeb0 0a47 	vmov.f32	s0, s14
 800c68c:	eef0 0a67 	vmov.f32	s1, s15
 800c690:	f011 ff26 	bl	801e4e0 <cos>
 800c694:	ec53 2b10 	vmov	r2, r3, d0
 800c698:	4620      	mov	r0, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7f3 ffbc 	bl	8000618 <__aeabi_dmul>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4640      	mov	r0, r8
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	f7f3 fe00 	bl	80002ac <__adddf3>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	f7f3 fdf8 	bl	80002ac <__adddf3>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	4659      	mov	r1, fp
 800c6c4:	f7f3 fdf2 	bl	80002ac <__adddf3>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
				}

				xldot=deep_dyn->xni+m->xfact;
 800c6d0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c6d4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800c6de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c6e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	@ 0x258
 800c6ec:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800c6f0:	460e      	mov	r6, r1
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f7f3 fdd9 	bl	80002ac <__adddf3>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	e9c6 2300 	strd	r2, r3, [r6]
				xnddt=xnddt*xldot;
 800c702:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800c70e:	f7f3 ff83 	bl	8000618 <__aeabi_dmul>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150

				if (deep_dyn->loopFlag) {
 800c71a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c71e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d078      	beq.n	800c81e <sdp4_deep+0x1206>
					deep_dyn->xli=deep_dyn->xli+xldot*delt+xndot*m->step2;
 800c72c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c730:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	@ 0x80
 800c73a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c73e:	4619      	mov	r1, r3
 800c740:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800c744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c748:	f7f3 ff66 	bl	8000618 <__aeabi_dmul>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4620      	mov	r0, r4
 800c752:	4629      	mov	r1, r5
 800c754:	f7f3 fdaa 	bl	80002ac <__adddf3>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	4614      	mov	r4, r2
 800c75e:	461d      	mov	r5, r3
 800c760:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c764:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	@ 0x270
 800c76e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800c772:	f7f3 ff51 	bl	8000618 <__aeabi_dmul>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f3 fd95 	bl	80002ac <__adddf3>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c78a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800c78e:	6809      	ldr	r1, [r1, #0]
 800c790:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
					deep_dyn->xni=deep_dyn->xni+xndot*delt+xnddt*m->step2;
 800c794:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c798:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800c7a2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800c7a6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800c7aa:	f7f3 ff35 	bl	8000618 <__aeabi_dmul>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	f7f3 fd79 	bl	80002ac <__adddf3>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4614      	mov	r4, r2
 800c7c0:	461d      	mov	r5, r3
 800c7c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c7c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	@ 0x270
 800c7d0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800c7d4:	f7f3 ff20 	bl	8000618 <__aeabi_dmul>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4620      	mov	r0, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	f7f3 fd64 	bl	80002ac <__adddf3>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c7ec:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800c7f0:	6809      	ldr	r1, [r1, #0]
 800c7f2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
					deep_dyn->atime=deep_dyn->atime+delt;
 800c7f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c7fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800c804:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800c808:	f7f3 fd50 	bl	80002ac <__adddf3>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c814:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800c818:	6809      	ldr	r1, [r1, #0]
 800c81a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
				}
			} while (deep_dyn->loopFlag && !deep_dyn->epochRestartFlag);
 800c81e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c822:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d009      	beq.n	800c844 <sdp4_deep+0x122c>
 800c830:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c834:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f43f a91d 	beq.w	800ba7e <sdp4_deep+0x466>
		} while (deep_dyn->loopFlag && deep_dyn->epochRestartFlag);
 800c844:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c848:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c852:	2b00      	cmp	r3, #0
 800c854:	d009      	beq.n	800c86a <sdp4_deep+0x1252>
 800c856:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c85a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c864:	2b00      	cmp	r3, #0
 800c866:	f47f a82d 	bne.w	800b8c4 <sdp4_deep+0x2ac>

		deep_dyn->xn=deep_dyn->xni+xndot*ft+xnddt*ft*ft*0.5;
 800c86a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c86e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800c878:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800c87c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800c880:	f7f3 feca 	bl	8000618 <__aeabi_dmul>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4620      	mov	r0, r4
 800c88a:	4629      	mov	r1, r5
 800c88c:	f7f3 fd0e 	bl	80002ac <__adddf3>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4614      	mov	r4, r2
 800c896:	461d      	mov	r5, r3
 800c898:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800c89c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800c8a0:	f7f3 feba 	bl	8000618 <__aeabi_dmul>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800c8b0:	f7f3 feb2 	bl	8000618 <__aeabi_dmul>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4610      	mov	r0, r2
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	f04f 0200 	mov.w	r2, #0
 800c8c0:	4b65      	ldr	r3, [pc, #404]	@ (800ca58 <sdp4_deep+0x1440>)
 800c8c2:	f7f3 fea9 	bl	8000618 <__aeabi_dmul>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	f7f3 fced 	bl	80002ac <__adddf3>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c8da:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800c8de:	6809      	ldr	r1, [r1, #0]
 800c8e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		xl=deep_dyn->xli+xldot*ft+xndot*ft*ft*0.5;
 800c8e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c8e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	@ 0x80
 800c8f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800c8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c900:	f7f3 fe8a 	bl	8000618 <__aeabi_dmul>
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	4620      	mov	r0, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	f7f3 fcce 	bl	80002ac <__adddf3>
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	4614      	mov	r4, r2
 800c916:	461d      	mov	r5, r3
 800c918:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800c91c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800c920:	f7f3 fe7a 	bl	8000618 <__aeabi_dmul>
 800c924:	4602      	mov	r2, r0
 800c926:	460b      	mov	r3, r1
 800c928:	4610      	mov	r0, r2
 800c92a:	4619      	mov	r1, r3
 800c92c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800c930:	f7f3 fe72 	bl	8000618 <__aeabi_dmul>
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	4610      	mov	r0, r2
 800c93a:	4619      	mov	r1, r3
 800c93c:	f04f 0200 	mov.w	r2, #0
 800c940:	4b45      	ldr	r3, [pc, #276]	@ (800ca58 <sdp4_deep+0x1440>)
 800c942:	f7f3 fe69 	bl	8000618 <__aeabi_dmul>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800c94e:	460e      	mov	r6, r1
 800c950:	4620      	mov	r0, r4
 800c952:	4629      	mov	r1, r5
 800c954:	f7f3 fcaa 	bl	80002ac <__adddf3>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	e946 2302 	strd	r2, r3, [r6, #-8]
		temp=-deep_dyn->xnode+m->thgr+deep_dyn->t*THDT;
 800c960:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c964:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 800c96e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c972:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c97c:	f7f3 fc94 	bl	80002a8 <__aeabi_dsub>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	4614      	mov	r4, r2
 800c986:	461d      	mov	r5, r3
 800c988:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c98c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c996:	a32e      	add	r3, pc, #184	@ (adr r3, 800ca50 <sdp4_deep+0x1438>)
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	f7f3 fe3c 	bl	8000618 <__aeabi_dmul>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800c9a8:	460e      	mov	r6, r1
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	f7f3 fc7d 	bl	80002ac <__adddf3>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	e9c6 2300 	strd	r2, r3, [r6]

		if (!m->synchronousFlag) {
 800c9ba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800c9be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d11f      	bne.n	800ca0a <sdp4_deep+0x13f2>
			deep_dyn->xll=xl+temp+temp;
 800c9ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c9dc:	f7f3 fc66 	bl	80002ac <__adddf3>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	f7f3 fc5c 	bl	80002ac <__adddf3>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800c9fc:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ca00:	6809      	ldr	r1, [r1, #0]
 800ca02:	e9c1 2300 	strd	r2, r3, [r1]
		}else{
			deep_dyn->xll=xl-deep_dyn->omgadf+temp;
		}

		return;
 800ca06:	f000 be2b 	b.w	800d660 <sdp4_deep+0x2048>
			deep_dyn->xll=xl-deep_dyn->omgadf+temp;
 800ca0a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ca0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ca18:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800ca1c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ca20:	f7f3 fc42 	bl	80002a8 <__aeabi_dsub>
 800ca24:	4602      	mov	r2, r0
 800ca26:	460b      	mov	r3, r1
 800ca28:	4610      	mov	r0, r2
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	f7f3 fc3a 	bl	80002ac <__adddf3>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800ca40:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ca44:	6809      	ldr	r1, [r1, #0]
 800ca46:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 800ca4a:	f000 be09 	b.w	800d660 <sdp4_deep+0x2048>
 800ca4e:	bf00      	nop
 800ca50:	5b2195a5 	.word	0x5b2195a5
 800ca54:	3f71ebcd 	.word	0x3f71ebcd
 800ca58:	3fe00000 	.word	0x3fe00000
 800ca5c:	4261a460 	.word	0x4261a460
 800ca60:	40171316 	.word	0x40171316
 800ca64:	65b088f4 	.word	0x65b088f4
 800ca68:	3fee7a22 	.word	0x3fee7a22
 800ca6c:	744c0237 	.word	0x744c0237
 800ca70:	3ffcd2f1 	.word	0x3ffcd2f1
 800ca74:	4388ebcc 	.word	0x4388ebcc
 800ca78:	3ff0d036 	.word	0x3ff0d036
 800ca7c:	4bb50a38 	.word	0x4bb50a38
 800ca80:	4011a4c0 	.word	0x4011a4c0

		case DPPeriodic:	 /* Entrance for lunar-solar periodics */
		sinis=sin(deep_dyn->xinc);
 800ca84:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ca88:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	ed93 7b08 	vldr	d7, [r3, #32]
 800ca92:	eeb0 0a47 	vmov.f32	s0, s14
 800ca96:	eef0 0a67 	vmov.f32	s1, s15
 800ca9a:	f011 fd7d 	bl	801e598 <sin>
 800ca9e:	ed87 0b4c 	vstr	d0, [r7, #304]	@ 0x130
		cosis=cos(deep_dyn->xinc);
 800caa2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800caa6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	ed93 7b08 	vldr	d7, [r3, #32]
 800cab0:	eeb0 0a47 	vmov.f32	s0, s14
 800cab4:	eef0 0a67 	vmov.f32	s1, s15
 800cab8:	f011 fd12 	bl	801e4e0 <cos>
 800cabc:	ed87 0b4a 	vstr	d0, [r7, #296]	@ 0x128

		if (fabs(deep_dyn->savtsn-deep_dyn->t)>=30)
 800cac0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cac4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800cace:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cad2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800cadc:	f7f3 fbe4 	bl	80002a8 <__aeabi_dsub>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4692      	mov	sl, r2
 800cae6:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800caea:	f04f 0200 	mov.w	r2, #0
 800caee:	4bc2      	ldr	r3, [pc, #776]	@ (800cdf8 <sdp4_deep+0x17e0>)
 800caf0:	4650      	mov	r0, sl
 800caf2:	4659      	mov	r1, fp
 800caf4:	f7f4 f816 	bl	8000b24 <__aeabi_dcmpge>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 830a 	beq.w	800d114 <sdp4_deep+0x1afc>
		{
			deep_dyn->savtsn=deep_dyn->t;
 800cb00:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cb04:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800cb0e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800cb12:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800cb16:	6809      	ldr	r1, [r1, #0]
 800cb18:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
			zm=m->zmos+ZNS*deep_dyn->t;
 800cb1c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cb20:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	e9d3 453c 	ldrd	r4, r5, [r3, #240]	@ 0xf0
 800cb2a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cb2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cb38:	a3ab      	add	r3, pc, #684	@ (adr r3, 800cde8 <sdp4_deep+0x17d0>)
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	f7f3 fd6b 	bl	8000618 <__aeabi_dmul>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	4620      	mov	r0, r4
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7f3 fbaf 	bl	80002ac <__adddf3>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
			zf=zm+2*ZES*sin(zm);
 800cb56:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 800cb5a:	f011 fd1d 	bl	801e598 <sin>
 800cb5e:	ec51 0b10 	vmov	r0, r1, d0
 800cb62:	a3a3      	add	r3, pc, #652	@ (adr r3, 800cdf0 <sdp4_deep+0x17d8>)
 800cb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb68:	f7f3 fd56 	bl	8000618 <__aeabi_dmul>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800cb74:	f7f3 fb9a 	bl	80002ac <__adddf3>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			sinzf=sin(zf);
 800cb80:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800cb84:	f011 fd08 	bl	801e598 <sin>
 800cb88:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
			f2=0.5*sinzf*sinzf-0.25;
 800cb8c:	f04f 0200 	mov.w	r2, #0
 800cb90:	4b9a      	ldr	r3, [pc, #616]	@ (800cdfc <sdp4_deep+0x17e4>)
 800cb92:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800cb96:	f7f3 fd3f 	bl	8000618 <__aeabi_dmul>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	4610      	mov	r0, r2
 800cba0:	4619      	mov	r1, r3
 800cba2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800cba6:	f7f3 fd37 	bl	8000618 <__aeabi_dmul>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	4610      	mov	r0, r2
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	f04f 0200 	mov.w	r2, #0
 800cbb6:	4b92      	ldr	r3, [pc, #584]	@ (800ce00 <sdp4_deep+0x17e8>)
 800cbb8:	f7f3 fb76 	bl	80002a8 <__aeabi_dsub>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
			f3=-0.5*sinzf*cos(zf);
 800cbc4:	f04f 0200 	mov.w	r2, #0
 800cbc8:	4b8e      	ldr	r3, [pc, #568]	@ (800ce04 <sdp4_deep+0x17ec>)
 800cbca:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800cbce:	f7f3 fd23 	bl	8000618 <__aeabi_dmul>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4614      	mov	r4, r2
 800cbd8:	461d      	mov	r5, r3
 800cbda:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800cbde:	f011 fc7f 	bl	801e4e0 <cos>
 800cbe2:	ec53 2b10 	vmov	r2, r3, d0
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 fd15 	bl	8000618 <__aeabi_dmul>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
			ses=m->se2*f2+m->se3*f3;
 800cbf6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cbfa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	@ 0x170
 800cc04:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800cc08:	f7f3 fd06 	bl	8000618 <__aeabi_dmul>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4614      	mov	r4, r2
 800cc12:	461d      	mov	r5, r3
 800cc14:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cc18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	@ 0x198
 800cc22:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800cc26:	f7f3 fcf7 	bl	8000618 <__aeabi_dmul>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fb3b 	bl	80002ac <__adddf3>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
			sis=m->si2*f2+m->si3*f3;
 800cc3e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cc42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	@ 0x178
 800cc4c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800cc50:	f7f3 fce2 	bl	8000618 <__aeabi_dmul>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4614      	mov	r4, r2
 800cc5a:	461d      	mov	r5, r3
 800cc5c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cc60:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	@ 0x1a0
 800cc6a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800cc6e:	f7f3 fcd3 	bl	8000618 <__aeabi_dmul>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4620      	mov	r0, r4
 800cc78:	4629      	mov	r1, r5
 800cc7a:	f7f3 fb17 	bl	80002ac <__adddf3>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
			sls=m->sl2*f2+m->sl3*f3+m->sl4*sinzf;
 800cc86:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cc8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	@ 0x180
 800cc94:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800cc98:	f7f3 fcbe 	bl	8000618 <__aeabi_dmul>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4614      	mov	r4, r2
 800cca2:	461d      	mov	r5, r3
 800cca4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cca8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	e9d3 016a 	ldrd	r0, r1, [r3, #424]	@ 0x1a8
 800ccb2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800ccb6:	f7f3 fcaf 	bl	8000618 <__aeabi_dmul>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f7f3 faf3 	bl	80002ac <__adddf3>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4614      	mov	r4, r2
 800cccc:	461d      	mov	r5, r3
 800ccce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ccd2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	@ 0x1c0
 800ccdc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800cce0:	f7f3 fc9a 	bl	8000618 <__aeabi_dmul>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	4620      	mov	r0, r4
 800ccea:	4629      	mov	r1, r5
 800ccec:	f7f3 fade 	bl	80002ac <__adddf3>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
			deep_dyn->sghs=m->sgh2*f2+m->sgh3*f3+m->sgh4*sinzf;
 800ccf8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ccfc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	e9d3 0162 	ldrd	r0, r1, [r3, #392]	@ 0x188
 800cd06:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800cd0a:	f7f3 fc85 	bl	8000618 <__aeabi_dmul>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	4614      	mov	r4, r2
 800cd14:	461d      	mov	r5, r3
 800cd16:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cd1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	@ 0x1b0
 800cd24:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800cd28:	f7f3 fc76 	bl	8000618 <__aeabi_dmul>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	4620      	mov	r0, r4
 800cd32:	4629      	mov	r1, r5
 800cd34:	f7f3 faba 	bl	80002ac <__adddf3>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4614      	mov	r4, r2
 800cd3e:	461d      	mov	r5, r3
 800cd40:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cd44:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	@ 0x1c8
 800cd4e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800cd52:	f7f3 fc61 	bl	8000618 <__aeabi_dmul>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	f7f3 faa5 	bl	80002ac <__adddf3>
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800cd6a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800cd6e:	6809      	ldr	r1, [r1, #0]
 800cd70:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
			deep_dyn->shs=m->sh2*f2+m->sh3*f3;
 800cd74:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cd78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	e9d3 0164 	ldrd	r0, r1, [r3, #400]	@ 0x190
 800cd82:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800cd86:	f7f3 fc47 	bl	8000618 <__aeabi_dmul>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	4614      	mov	r4, r2
 800cd90:	461d      	mov	r5, r3
 800cd92:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cd96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	@ 0x1b8
 800cda0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800cda4:	f7f3 fc38 	bl	8000618 <__aeabi_dmul>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	460b      	mov	r3, r1
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	f7f3 fa7c 	bl	80002ac <__adddf3>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800cdbc:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800cdc0:	6809      	ldr	r1, [r1, #0]
 800cdc2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
			zm=m->zmol+ZNL*deep_dyn->t;
 800cdc6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cdca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	@ 0xe8
 800cdd4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cdd8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cde2:	e011      	b.n	800ce08 <sdp4_deep+0x17f0>
 800cde4:	f3af 8000 	nop.w
 800cde8:	fe8935de 	.word	0xfe8935de
 800cdec:	3ee90d67 	.word	0x3ee90d67
 800cdf0:	78d4fdf4 	.word	0x78d4fdf4
 800cdf4:	3fa126e9 	.word	0x3fa126e9
 800cdf8:	403e0000 	.word	0x403e0000
 800cdfc:	3fe00000 	.word	0x3fe00000
 800ce00:	3fd00000 	.word	0x3fd00000
 800ce04:	bfe00000 	.word	0xbfe00000
 800ce08:	a3be      	add	r3, pc, #760	@ (adr r3, 800d104 <sdp4_deep+0x1aec>)
 800ce0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0e:	f7f3 fc03 	bl	8000618 <__aeabi_dmul>
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	4620      	mov	r0, r4
 800ce18:	4629      	mov	r1, r5
 800ce1a:	f7f3 fa47 	bl	80002ac <__adddf3>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
			zf=zm+2*ZEL*sin(zm);
 800ce26:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 800ce2a:	f011 fbb5 	bl	801e598 <sin>
 800ce2e:	ec51 0b10 	vmov	r0, r1, d0
 800ce32:	a3b6      	add	r3, pc, #728	@ (adr r3, 800d10c <sdp4_deep+0x1af4>)
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	f7f3 fbee 	bl	8000618 <__aeabi_dmul>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800ce44:	f7f3 fa32 	bl	80002ac <__adddf3>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			sinzf=sin(zf);
 800ce50:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800ce54:	f011 fba0 	bl	801e598 <sin>
 800ce58:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
			f2=0.5*sinzf*sinzf-0.25;
 800ce5c:	f04f 0200 	mov.w	r2, #0
 800ce60:	4ba5      	ldr	r3, [pc, #660]	@ (800d0f8 <sdp4_deep+0x1ae0>)
 800ce62:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800ce66:	f7f3 fbd7 	bl	8000618 <__aeabi_dmul>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	4610      	mov	r0, r2
 800ce70:	4619      	mov	r1, r3
 800ce72:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800ce76:	f7f3 fbcf 	bl	8000618 <__aeabi_dmul>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	4610      	mov	r0, r2
 800ce80:	4619      	mov	r1, r3
 800ce82:	f04f 0200 	mov.w	r2, #0
 800ce86:	4b9d      	ldr	r3, [pc, #628]	@ (800d0fc <sdp4_deep+0x1ae4>)
 800ce88:	f7f3 fa0e 	bl	80002a8 <__aeabi_dsub>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
			f3=-0.5*sinzf*cos(zf);
 800ce94:	f04f 0200 	mov.w	r2, #0
 800ce98:	4b99      	ldr	r3, [pc, #612]	@ (800d100 <sdp4_deep+0x1ae8>)
 800ce9a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800ce9e:	f7f3 fbbb 	bl	8000618 <__aeabi_dmul>
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	4614      	mov	r4, r2
 800cea8:	461d      	mov	r5, r3
 800ceaa:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800ceae:	f011 fb17 	bl	801e4e0 <cos>
 800ceb2:	ec53 2b10 	vmov	r2, r3, d0
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	4629      	mov	r1, r5
 800ceba:	f7f3 fbad 	bl	8000618 <__aeabi_dmul>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
			sel=m->ee2*f2+m->e3*f3;
 800cec6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ceca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 800ced4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800ced8:	f7f3 fb9e 	bl	8000618 <__aeabi_dmul>
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	4614      	mov	r4, r2
 800cee2:	461d      	mov	r5, r3
 800cee4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cee8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800cef2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800cef6:	f7f3 fb8f 	bl	8000618 <__aeabi_dmul>
 800cefa:	4602      	mov	r2, r0
 800cefc:	460b      	mov	r3, r1
 800cefe:	4620      	mov	r0, r4
 800cf00:	4629      	mov	r1, r5
 800cf02:	f7f3 f9d3 	bl	80002ac <__adddf3>
 800cf06:	4602      	mov	r2, r0
 800cf08:	460b      	mov	r3, r1
 800cf0a:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			sil=m->xi2*f2+m->xi3*f3;
 800cf0e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cf12:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 800cf1c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800cf20:	f7f3 fb7a 	bl	8000618 <__aeabi_dmul>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	4614      	mov	r4, r2
 800cf2a:	461d      	mov	r5, r3
 800cf2c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cf30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	@ 0x168
 800cf3a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800cf3e:	f7f3 fb6b 	bl	8000618 <__aeabi_dmul>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	4620      	mov	r0, r4
 800cf48:	4629      	mov	r1, r5
 800cf4a:	f7f3 f9af 	bl	80002ac <__adddf3>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
			sll=m->xl2*f2+m->xl3*f3+m->xl4*sinzf;
 800cf56:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cf5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 800cf64:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800cf68:	f7f3 fb56 	bl	8000618 <__aeabi_dmul>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	460b      	mov	r3, r1
 800cf70:	4614      	mov	r4, r2
 800cf72:	461d      	mov	r5, r3
 800cf74:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cf78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	@ 0x118
 800cf82:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800cf86:	f7f3 fb47 	bl	8000618 <__aeabi_dmul>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4620      	mov	r0, r4
 800cf90:	4629      	mov	r1, r5
 800cf92:	f7f3 f98b 	bl	80002ac <__adddf3>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4614      	mov	r4, r2
 800cf9c:	461d      	mov	r5, r3
 800cf9e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cfa2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 800cfac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800cfb0:	f7f3 fb32 	bl	8000618 <__aeabi_dmul>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4620      	mov	r0, r4
 800cfba:	4629      	mov	r1, r5
 800cfbc:	f7f3 f976 	bl	80002ac <__adddf3>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
			deep_dyn->sghl=m->xgh2*f2+m->xgh3*f3+m->xgh4*sinzf;
 800cfc8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cfcc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 800cfd6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800cfda:	f7f3 fb1d 	bl	8000618 <__aeabi_dmul>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4614      	mov	r4, r2
 800cfe4:	461d      	mov	r5, r3
 800cfe6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800cfea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	@ 0x130
 800cff4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800cff8:	f7f3 fb0e 	bl	8000618 <__aeabi_dmul>
 800cffc:	4602      	mov	r2, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	4620      	mov	r0, r4
 800d002:	4629      	mov	r1, r5
 800d004:	f7f3 f952 	bl	80002ac <__adddf3>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	4614      	mov	r4, r2
 800d00e:	461d      	mov	r5, r3
 800d010:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d014:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	@ 0x138
 800d01e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800d022:	f7f3 faf9 	bl	8000618 <__aeabi_dmul>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	4620      	mov	r0, r4
 800d02c:	4629      	mov	r1, r5
 800d02e:	f7f3 f93d 	bl	80002ac <__adddf3>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d03a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d03e:	6809      	ldr	r1, [r1, #0]
 800d040:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
			deep_dyn->sh1=m->xh2*f2+m->xh3*f3;
 800d044:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d048:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 800d052:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800d056:	f7f3 fadf 	bl	8000618 <__aeabi_dmul>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	4614      	mov	r4, r2
 800d060:	461d      	mov	r5, r3
 800d062:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d066:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 800d070:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d074:	f7f3 fad0 	bl	8000618 <__aeabi_dmul>
 800d078:	4602      	mov	r2, r0
 800d07a:	460b      	mov	r3, r1
 800d07c:	4620      	mov	r0, r4
 800d07e:	4629      	mov	r1, r5
 800d080:	f7f3 f914 	bl	80002ac <__adddf3>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d08c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d090:	6809      	ldr	r1, [r1, #0]
 800d092:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
			deep_dyn->pe=ses+sel;
 800d096:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800d09a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800d09e:	f7f3 f905 	bl	80002ac <__adddf3>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d0aa:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d0ae:	6809      	ldr	r1, [r1, #0]
 800d0b0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
			deep_dyn->pinc=sis+sil;
 800d0b4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800d0b8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800d0bc:	f7f3 f8f6 	bl	80002ac <__adddf3>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d0c8:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d0cc:	6809      	ldr	r1, [r1, #0]
 800d0ce:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
			deep_dyn->pl=sls+sll;
 800d0d2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800d0d6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800d0da:	f7f3 f8e7 	bl	80002ac <__adddf3>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d0e6:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d0ea:	6809      	ldr	r1, [r1, #0]
 800d0ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800d0f0:	e010      	b.n	800d114 <sdp4_deep+0x1afc>
 800d0f2:	bf00      	nop
 800d0f4:	f3af 8000 	nop.w
 800d0f8:	3fe00000 	.word	0x3fe00000
 800d0fc:	3fd00000 	.word	0x3fd00000
 800d100:	bfe00000 	.word	0xbfe00000
 800d104:	de6329c8 	.word	0xde6329c8
 800d108:	3f24c16a 	.word	0x3f24c16a
 800d10c:	5119ce07 	.word	0x5119ce07
 800d110:	3fbc1bda 	.word	0x3fbc1bda
		}

		pgh=deep_dyn->sghs+deep_dyn->sghl;
 800d114:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d118:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 800d122:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d126:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800d130:	f7f3 f8bc 	bl	80002ac <__adddf3>
 800d134:	4602      	mov	r2, r0
 800d136:	460b      	mov	r3, r1
 800d138:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
		ph=deep_dyn->shs+deep_dyn->sh1;
 800d13c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d140:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800d14a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d14e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800d158:	f7f3 f8a8 	bl	80002ac <__adddf3>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		deep_dyn->xinc=deep_dyn->xinc+deep_dyn->pinc;
 800d164:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d168:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d172:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d176:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800d180:	f7f3 f894 	bl	80002ac <__adddf3>
 800d184:	4602      	mov	r2, r0
 800d186:	460b      	mov	r3, r1
 800d188:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d18c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d190:	6809      	ldr	r1, [r1, #0]
 800d192:	e9c1 2308 	strd	r2, r3, [r1, #32]
		deep_dyn->em=deep_dyn->em+deep_dyn->pe;
 800d196:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d19a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800d1a4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1a8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800d1b2:	f7f3 f87b 	bl	80002ac <__adddf3>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d1be:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d1c2:	6809      	ldr	r1, [r1, #0]
 800d1c4:	e9c1 2306 	strd	r2, r3, [r1, #24]

		if (m->xqncl>=0.2)
 800d1c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 800d1d6:	f20f 4398 	addw	r3, pc, #1176	@ 0x498
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f3 fca1 	bl	8000b24 <__aeabi_dcmpge>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d065      	beq.n	800d2b4 <sdp4_deep+0x1c9c>
		{
			/* Apply periodics directly */
			ph=ph/deep_arg->sinio;
 800d1e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d1f6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800d1fa:	f7f3 fb37 	bl	800086c <__aeabi_ddiv>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
			pgh=pgh-deep_arg->cosio*ph;
 800d206:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d20a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d214:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800d218:	f7f3 f9fe 	bl	8000618 <__aeabi_dmul>
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d224:	f7f3 f840 	bl	80002a8 <__aeabi_dsub>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
			deep_dyn->omgadf=deep_dyn->omgadf+pgh;
 800d230:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d234:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d23e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800d242:	f7f3 f833 	bl	80002ac <__adddf3>
 800d246:	4602      	mov	r2, r0
 800d248:	460b      	mov	r3, r1
 800d24a:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d24e:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d252:	6809      	ldr	r1, [r1, #0]
 800d254:	e9c1 2302 	strd	r2, r3, [r1, #8]
			deep_dyn->xnode=deep_dyn->xnode+ph;
 800d258:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d25c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d266:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800d26a:	f7f3 f81f 	bl	80002ac <__adddf3>
 800d26e:	4602      	mov	r2, r0
 800d270:	460b      	mov	r3, r1
 800d272:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d276:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d27a:	6809      	ldr	r1, [r1, #0]
 800d27c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
 800d280:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d284:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d28e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d292:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d29c:	f7f3 f806 	bl	80002ac <__adddf3>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d2a8:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d2ac:	6809      	ldr	r1, [r1, #0]
 800d2ae:	e9c1 2300 	strd	r2, r3, [r1]
			}

			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
			deep_dyn->omgadf=xls-deep_dyn->xll-cos(deep_dyn->xinc)*deep_dyn->xnode;
		}
		return;
 800d2b2:	e1d5      	b.n	800d660 <sdp4_deep+0x2048>
			sinok=sin(deep_dyn->xnode);
 800d2b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d2b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	ed93 7b04 	vldr	d7, [r3, #16]
 800d2c2:	eeb0 0a47 	vmov.f32	s0, s14
 800d2c6:	eef0 0a67 	vmov.f32	s1, s15
 800d2ca:	f011 f965 	bl	801e598 <sin>
 800d2ce:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
			cosok=cos(deep_dyn->xnode);
 800d2d2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d2d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	ed93 7b04 	vldr	d7, [r3, #16]
 800d2e0:	eeb0 0a47 	vmov.f32	s0, s14
 800d2e4:	eef0 0a67 	vmov.f32	s1, s15
 800d2e8:	f011 f8fa 	bl	801e4e0 <cos>
 800d2ec:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
			alfdp=sinis*sinok;
 800d2f0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800d2f4:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800d2f8:	f7f3 f98e 	bl	8000618 <__aeabi_dmul>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	460b      	mov	r3, r1
 800d300:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
			betdp=sinis*cosok;
 800d304:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800d308:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800d30c:	f7f3 f984 	bl	8000618 <__aeabi_dmul>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			dalf=ph*cosok+deep_dyn->pinc*cosis*sinok;
 800d318:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800d31c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800d320:	f7f3 f97a 	bl	8000618 <__aeabi_dmul>
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	4614      	mov	r4, r2
 800d32a:	461d      	mov	r5, r3
 800d32c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d330:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800d33a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800d33e:	f7f3 f96b 	bl	8000618 <__aeabi_dmul>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4610      	mov	r0, r2
 800d348:	4619      	mov	r1, r3
 800d34a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800d34e:	f7f3 f963 	bl	8000618 <__aeabi_dmul>
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	4620      	mov	r0, r4
 800d358:	4629      	mov	r1, r5
 800d35a:	f7f2 ffa7 	bl	80002ac <__adddf3>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			dbet=-ph*sinok+deep_dyn->pinc*cosis*cosok;
 800d366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d36a:	603b      	str	r3, [r7, #0]
 800d36c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d370:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d374:	607b      	str	r3, [r7, #4]
 800d376:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800d37a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d37e:	f7f3 f94b 	bl	8000618 <__aeabi_dmul>
 800d382:	4602      	mov	r2, r0
 800d384:	460b      	mov	r3, r1
 800d386:	4614      	mov	r4, r2
 800d388:	461d      	mov	r5, r3
 800d38a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d38e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800d398:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800d39c:	f7f3 f93c 	bl	8000618 <__aeabi_dmul>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800d3ac:	f7f3 f934 	bl	8000618 <__aeabi_dmul>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	f7f2 ff78 	bl	80002ac <__adddf3>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			alfdp=alfdp+dalf;
 800d3c4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d3c8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800d3cc:	f7f2 ff6e 	bl	80002ac <__adddf3>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
			betdp=betdp+dbet;
 800d3d8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800d3dc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800d3e0:	f7f2 ff64 	bl	80002ac <__adddf3>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			deep_dyn->xnode=FMod2p(deep_dyn->xnode);
 800d3ec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d3f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	ed93 7b04 	vldr	d7, [r3, #16]
 800d3fa:	eeb0 0a47 	vmov.f32	s0, s14
 800d3fe:	eef0 0a67 	vmov.f32	s1, s15
 800d402:	f003 fb4d 	bl	8010aa0 <FMod2p>
 800d406:	eeb0 7a40 	vmov.f32	s14, s0
 800d40a:	eef0 7a60 	vmov.f32	s15, s1
 800d40e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d412:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	ed83 7b04 	vstr	d7, [r3, #16]
			xls=deep_dyn->xll+deep_dyn->omgadf+cosis*deep_dyn->xnode;
 800d41c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d420:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d42a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d42e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d438:	f7f2 ff38 	bl	80002ac <__adddf3>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	4614      	mov	r4, r2
 800d442:	461d      	mov	r5, r3
 800d444:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d448:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d452:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800d456:	f7f3 f8df 	bl	8000618 <__aeabi_dmul>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	4620      	mov	r0, r4
 800d460:	4629      	mov	r1, r5
 800d462:	f7f2 ff23 	bl	80002ac <__adddf3>
 800d466:	4602      	mov	r2, r0
 800d468:	460b      	mov	r3, r1
 800d46a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			dls=deep_dyn->pl+pgh-deep_dyn->pinc*deep_dyn->xnode*sinis;
 800d46e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d472:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d47c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800d480:	f7f2 ff14 	bl	80002ac <__adddf3>
 800d484:	4602      	mov	r2, r0
 800d486:	460b      	mov	r3, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	461d      	mov	r5, r3
 800d48c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d490:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800d49a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d49e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d4a8:	f7f3 f8b6 	bl	8000618 <__aeabi_dmul>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800d4b8:	f7f3 f8ae 	bl	8000618 <__aeabi_dmul>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	f7f2 fef0 	bl	80002a8 <__aeabi_dsub>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			xls=xls+dls;
 800d4d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800d4d4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800d4d8:	f7f2 fee8 	bl	80002ac <__adddf3>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			xnoh=deep_dyn->xnode;
 800d4e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d4e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d4f2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			deep_dyn->xnode=atan2(alfdp,betdp);
 800d4f6:	ed97 1b28 	vldr	d1, [r7, #160]	@ 0xa0
 800d4fa:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800d4fe:	f010 fcff 	bl	801df00 <atan2>
 800d502:	eeb0 7a40 	vmov.f32	s14, s0
 800d506:	eef0 7a60 	vmov.f32	s15, s1
 800d50a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d50e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	ed83 7b04 	vstr	d7, [r3, #16]
			if (fabs(xnoh-deep_dyn->xnode)>PI)
 800d518:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d51c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d526:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800d52a:	f7f2 febd 	bl	80002a8 <__aeabi_dsub>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	4690      	mov	r8, r2
 800d534:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800d538:	a34f      	add	r3, pc, #316	@ (adr r3, 800d678 <sdp4_deep+0x2060>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	4640      	mov	r0, r8
 800d540:	4649      	mov	r1, r9
 800d542:	f7f3 faf9 	bl	8000b38 <__aeabi_dcmpgt>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d038      	beq.n	800d5be <sdp4_deep+0x1fa6>
			      if (deep_dyn->xnode<xnoh)
 800d54c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d550:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d55a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800d55e:	f7f3 faeb 	bl	8000b38 <__aeabi_dcmpgt>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d015      	beq.n	800d594 <sdp4_deep+0x1f7c>
				  deep_dyn->xnode+=TWO_PI;
 800d568:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d56c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d576:	a342      	add	r3, pc, #264	@ (adr r3, 800d680 <sdp4_deep+0x2068>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f7f2 fe96 	bl	80002ac <__adddf3>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d588:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d58c:	6809      	ldr	r1, [r1, #0]
 800d58e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d592:	e014      	b.n	800d5be <sdp4_deep+0x1fa6>
				  deep_dyn->xnode-=TWO_PI;
 800d594:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d598:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d5a2:	a337      	add	r3, pc, #220	@ (adr r3, 800d680 <sdp4_deep+0x2068>)
 800d5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a8:	f7f2 fe7e 	bl	80002a8 <__aeabi_dsub>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d5b4:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d5b8:	6809      	ldr	r1, [r1, #0]
 800d5ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
 800d5be:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5cc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d5da:	f7f2 fe67 	bl	80002ac <__adddf3>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d5e6:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d5ea:	6809      	ldr	r1, [r1, #0]
 800d5ec:	e9c1 2300 	strd	r2, r3, [r1]
			deep_dyn->omgadf=xls-deep_dyn->xll-cos(deep_dyn->xinc)*deep_dyn->xnode;
 800d5f0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800d602:	f7f2 fe51 	bl	80002a8 <__aeabi_dsub>
 800d606:	4602      	mov	r2, r0
 800d608:	460b      	mov	r3, r1
 800d60a:	4614      	mov	r4, r2
 800d60c:	461d      	mov	r5, r3
 800d60e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d612:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	ed93 7b08 	vldr	d7, [r3, #32]
 800d61c:	eeb0 0a47 	vmov.f32	s0, s14
 800d620:	eef0 0a67 	vmov.f32	s1, s15
 800d624:	f010 ff5c 	bl	801e4e0 <cos>
 800d628:	ec51 0b10 	vmov	r0, r1, d0
 800d62c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d630:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d63a:	f7f2 ffed 	bl	8000618 <__aeabi_dmul>
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	4620      	mov	r0, r4
 800d644:	4629      	mov	r1, r5
 800d646:	f7f2 fe2f 	bl	80002a8 <__aeabi_dsub>
 800d64a:	4602      	mov	r2, r0
 800d64c:	460b      	mov	r3, r1
 800d64e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d652:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d656:	6809      	ldr	r1, [r1, #0]
 800d658:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return;
 800d65c:	e000      	b.n	800d660 <sdp4_deep+0x2048>
			return;
 800d65e:	bf00      	nop
	}
}
 800d660:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800d664:	46bd      	mov	sp, r7
 800d666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66a:	bf00      	nop
 800d66c:	f3af 8000 	nop.w
 800d670:	9999999a 	.word	0x9999999a
 800d674:	3fc99999 	.word	0x3fc99999
 800d678:	54442d18 	.word	0x54442d18
 800d67c:	400921fb 	.word	0x400921fb
 800d680:	54442d18 	.word	0x54442d18
 800d684:	401921fb 	.word	0x401921fb

0800d688 <sgp4_init>:

#include "defs.h"
#include "unsorted.h"

void sgp4_init(const predict_orbital_elements_t *orbital_elements, struct _sgp4 *m)
{
 800d688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d68c:	b0c6      	sub	sp, #280	@ 0x118
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6278      	str	r0, [r7, #36]	@ 0x24
 800d692:	6239      	str	r1, [r7, #32]
	m->simpleFlag = 0;
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	2200      	movs	r2, #0
 800d698:	601a      	str	r2, [r3, #0]

	//Calculate old TLE field values as used in the original sgp4
	double temp_tle = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 800d69a:	a3cf      	add	r3, pc, #828	@ (adr r3, 800d9d8 <sgp4_init+0x350>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
	m->bstar = orbital_elements->bstar_drag_term / AE;
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800d6aa:	6a39      	ldr	r1, [r7, #32]
 800d6ac:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	m->xincl = orbital_elements->inclination * M_PI / 180.0;
 800d6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d6b6:	a3b8      	add	r3, pc, #736	@ (adr r3, 800d998 <sgp4_init+0x310>)
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	f7f2 ffac 	bl	8000618 <__aeabi_dmul>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	f04f 0200 	mov.w	r2, #0
 800d6cc:	4bbe      	ldr	r3, [pc, #760]	@ (800d9c8 <sgp4_init+0x340>)
 800d6ce:	f7f3 f8cd 	bl	800086c <__aeabi_ddiv>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	6a39      	ldr	r1, [r7, #32]
 800d6d8:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
	m->xnodeo = orbital_elements->right_ascension * M_PI / 180.0;
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800d6e2:	a3ad      	add	r3, pc, #692	@ (adr r3, 800d998 <sgp4_init+0x310>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	f7f2 ff96 	bl	8000618 <__aeabi_dmul>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	f04f 0200 	mov.w	r2, #0
 800d6f8:	4bb3      	ldr	r3, [pc, #716]	@ (800d9c8 <sgp4_init+0x340>)
 800d6fa:	f7f3 f8b7 	bl	800086c <__aeabi_ddiv>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	6a39      	ldr	r1, [r7, #32]
 800d704:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
	m->eo = orbital_elements->eccentricity;
 800d708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d70e:	6a39      	ldr	r1, [r7, #32]
 800d710:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
	m->omegao = orbital_elements->argument_of_perigee * M_PI / 180.0;
 800d714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d716:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d71a:	a39f      	add	r3, pc, #636	@ (adr r3, 800d998 <sgp4_init+0x310>)
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	f7f2 ff7a 	bl	8000618 <__aeabi_dmul>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	4610      	mov	r0, r2
 800d72a:	4619      	mov	r1, r3
 800d72c:	f04f 0200 	mov.w	r2, #0
 800d730:	4ba5      	ldr	r3, [pc, #660]	@ (800d9c8 <sgp4_init+0x340>)
 800d732:	f7f3 f89b 	bl	800086c <__aeabi_ddiv>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	6a39      	ldr	r1, [r7, #32]
 800d73c:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108
	m->xmo = orbital_elements->mean_anomaly * M_PI / 180.0;
 800d740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d742:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800d746:	a394      	add	r3, pc, #592	@ (adr r3, 800d998 <sgp4_init+0x310>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	f7f2 ff64 	bl	8000618 <__aeabi_dmul>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4610      	mov	r0, r2
 800d756:	4619      	mov	r1, r3
 800d758:	f04f 0200 	mov.w	r2, #0
 800d75c:	4b9a      	ldr	r3, [pc, #616]	@ (800d9c8 <sgp4_init+0x340>)
 800d75e:	f7f3 f885 	bl	800086c <__aeabi_ddiv>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	6a39      	ldr	r1, [r7, #32]
 800d768:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
	m->xno = orbital_elements->mean_motion*temp_tle*MINUTES_PER_DAY;
 800d76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800d772:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800d776:	f7f2 ff4f 	bl	8000618 <__aeabi_dmul>
 800d77a:	4602      	mov	r2, r0
 800d77c:	460b      	mov	r3, r1
 800d77e:	4610      	mov	r0, r2
 800d780:	4619      	mov	r1, r3
 800d782:	f04f 0200 	mov.w	r2, #0
 800d786:	4b91      	ldr	r3, [pc, #580]	@ (800d9cc <sgp4_init+0x344>)
 800d788:	f7f2 ff46 	bl	8000618 <__aeabi_dmul>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	6a39      	ldr	r1, [r7, #32]
 800d792:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
	temp3, theta2, theta4, tsi;

	/* Recover original mean motion (m->xnodp) and   */
	/* semimajor axis (m->aodp) from input elements. */

	a1=pow(XKE/m->xno,TWO_THIRD);
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 800d79c:	a180      	add	r1, pc, #512	@ (adr r1, 800d9a0 <sgp4_init+0x318>)
 800d79e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7a2:	f7f3 f863 	bl	800086c <__aeabi_ddiv>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	ec43 2b17 	vmov	d7, r2, r3
 800d7ae:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 800d9a8 <sgp4_init+0x320>
 800d7b2:	eeb0 0a47 	vmov.f32	s0, s14
 800d7b6:	eef0 0a67 	vmov.f32	s1, s15
 800d7ba:	f010 fc5b 	bl	801e074 <pow>
 800d7be:	ed87 0b3e 	vstr	d0, [r7, #248]	@ 0xf8
	m->cosio=cos(m->xincl);
 800d7c2:	6a3b      	ldr	r3, [r7, #32]
 800d7c4:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800d7c8:	eeb0 0a47 	vmov.f32	s0, s14
 800d7cc:	eef0 0a67 	vmov.f32	s1, s15
 800d7d0:	f010 fe86 	bl	801e4e0 <cos>
 800d7d4:	eeb0 7a40 	vmov.f32	s14, s0
 800d7d8:	eef0 7a60 	vmov.f32	s15, s1
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
	theta2=m->cosio*m->cosio;
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d7ee:	f7f2 ff13 	bl	8000618 <__aeabi_dmul>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	m->x3thm1=3*theta2-1.0;
 800d7fa:	f04f 0200 	mov.w	r2, #0
 800d7fe:	4b74      	ldr	r3, [pc, #464]	@ (800d9d0 <sgp4_init+0x348>)
 800d800:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800d804:	f7f2 ff08 	bl	8000618 <__aeabi_dmul>
 800d808:	4602      	mov	r2, r0
 800d80a:	460b      	mov	r3, r1
 800d80c:	4610      	mov	r0, r2
 800d80e:	4619      	mov	r1, r3
 800d810:	f04f 0200 	mov.w	r2, #0
 800d814:	4b6f      	ldr	r3, [pc, #444]	@ (800d9d4 <sgp4_init+0x34c>)
 800d816:	f7f2 fd47 	bl	80002a8 <__aeabi_dsub>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	6a39      	ldr	r1, [r7, #32]
 800d820:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	eosq=m->eo*m->eo;
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800d830:	f7f2 fef2 	bl	8000618 <__aeabi_dmul>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	betao2=1.0-eosq;
 800d83c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800d840:	f04f 0000 	mov.w	r0, #0
 800d844:	4963      	ldr	r1, [pc, #396]	@ (800d9d4 <sgp4_init+0x34c>)
 800d846:	f7f2 fd2f 	bl	80002a8 <__aeabi_dsub>
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	betao=sqrt(betao2);
 800d852:	ed97 0b38 	vldr	d0, [r7, #224]	@ 0xe0
 800d856:	f010 fc7d 	bl	801e154 <sqrt>
 800d85a:	ed87 0b36 	vstr	d0, [r7, #216]	@ 0xd8
	del1=1.5*CK2*m->x3thm1/(a1*a1*betao*betao2);
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800d864:	a352      	add	r3, pc, #328	@ (adr r3, 800d9b0 <sgp4_init+0x328>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	f7f2 fed5 	bl	8000618 <__aeabi_dmul>
 800d86e:	4602      	mov	r2, r0
 800d870:	460b      	mov	r3, r1
 800d872:	4614      	mov	r4, r2
 800d874:	461d      	mov	r5, r3
 800d876:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 800d87a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800d87e:	f7f2 fecb 	bl	8000618 <__aeabi_dmul>
 800d882:	4602      	mov	r2, r0
 800d884:	460b      	mov	r3, r1
 800d886:	4610      	mov	r0, r2
 800d888:	4619      	mov	r1, r3
 800d88a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800d88e:	f7f2 fec3 	bl	8000618 <__aeabi_dmul>
 800d892:	4602      	mov	r2, r0
 800d894:	460b      	mov	r3, r1
 800d896:	4610      	mov	r0, r2
 800d898:	4619      	mov	r1, r3
 800d89a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800d89e:	f7f2 febb 	bl	8000618 <__aeabi_dmul>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7f2 ffdf 	bl	800086c <__aeabi_ddiv>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
	ao=a1*(1.0-del1*(0.5*TWO_THIRD+del1*(1.0+134.0/81.0*del1)));
 800d8b6:	a340      	add	r3, pc, #256	@ (adr r3, 800d9b8 <sgp4_init+0x330>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800d8c0:	f7f2 feaa 	bl	8000618 <__aeabi_dmul>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	f04f 0200 	mov.w	r2, #0
 800d8d0:	4b40      	ldr	r3, [pc, #256]	@ (800d9d4 <sgp4_init+0x34c>)
 800d8d2:	f7f2 fceb 	bl	80002ac <__adddf3>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4610      	mov	r0, r2
 800d8dc:	4619      	mov	r1, r3
 800d8de:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800d8e2:	f7f2 fe99 	bl	8000618 <__aeabi_dmul>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	a334      	add	r3, pc, #208	@ (adr r3, 800d9c0 <sgp4_init+0x338>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f7f2 fcda 	bl	80002ac <__adddf3>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	4610      	mov	r0, r2
 800d8fe:	4619      	mov	r1, r3
 800d900:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800d904:	f7f2 fe88 	bl	8000618 <__aeabi_dmul>
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	f04f 0000 	mov.w	r0, #0
 800d910:	4930      	ldr	r1, [pc, #192]	@ (800d9d4 <sgp4_init+0x34c>)
 800d912:	f7f2 fcc9 	bl	80002a8 <__aeabi_dsub>
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800d91e:	f7f2 fe7b 	bl	8000618 <__aeabi_dmul>
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	delo=1.5*CK2*m->x3thm1/(ao*ao*betao*betao2);
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800d930:	a31f      	add	r3, pc, #124	@ (adr r3, 800d9b0 <sgp4_init+0x328>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fe6f 	bl	8000618 <__aeabi_dmul>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	4614      	mov	r4, r2
 800d940:	461d      	mov	r5, r3
 800d942:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800d946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d94a:	f7f2 fe65 	bl	8000618 <__aeabi_dmul>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4610      	mov	r0, r2
 800d954:	4619      	mov	r1, r3
 800d956:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800d95a:	f7f2 fe5d 	bl	8000618 <__aeabi_dmul>
 800d95e:	4602      	mov	r2, r0
 800d960:	460b      	mov	r3, r1
 800d962:	4610      	mov	r0, r2
 800d964:	4619      	mov	r1, r3
 800d966:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800d96a:	f7f2 fe55 	bl	8000618 <__aeabi_dmul>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	4620      	mov	r0, r4
 800d974:	4629      	mov	r1, r5
 800d976:	f7f2 ff79 	bl	800086c <__aeabi_ddiv>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	m->xnodp=m->xno/(1.0+delo);
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	e9d3 4546 	ldrd	r4, r5, [r3, #280]	@ 0x118
 800d988:	f04f 0200 	mov.w	r2, #0
 800d98c:	4b11      	ldr	r3, [pc, #68]	@ (800d9d4 <sgp4_init+0x34c>)
 800d98e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800d992:	f7f2 fc8b 	bl	80002ac <__adddf3>
 800d996:	e023      	b.n	800d9e0 <sgp4_init+0x358>
 800d998:	54442d18 	.word	0x54442d18
 800d99c:	400921fb 	.word	0x400921fb
 800d9a0:	d08dcacf 	.word	0xd08dcacf
 800d9a4:	3fb309b5 	.word	0x3fb309b5
 800d9a8:	55555555 	.word	0x55555555
 800d9ac:	3fe55555 	.word	0x3fe55555
 800d9b0:	cbb15878 	.word	0xcbb15878
 800d9b4:	3f4a9b3a 	.word	0x3f4a9b3a
 800d9b8:	48b0fcd7 	.word	0x48b0fcd7
 800d9bc:	3ffa7819 	.word	0x3ffa7819
 800d9c0:	55555555 	.word	0x55555555
 800d9c4:	3fd55555 	.word	0x3fd55555
 800d9c8:	40668000 	.word	0x40668000
 800d9cc:	40968000 	.word	0x40968000
 800d9d0:	40080000 	.word	0x40080000
 800d9d4:	3ff00000 	.word	0x3ff00000
 800d9d8:	1fbf7384 	.word	0x1fbf7384
 800d9dc:	3ec96b0f 	.word	0x3ec96b0f
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	4629      	mov	r1, r5
 800d9e8:	f7f2 ff40 	bl	800086c <__aeabi_ddiv>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	6a39      	ldr	r1, [r7, #32]
 800d9f2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	m->aodp=ao/(1.0-delo);
 800d9f6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800d9fa:	f04f 0000 	mov.w	r0, #0
 800d9fe:	4946      	ldr	r1, [pc, #280]	@ (800db18 <sgp4_init+0x490>)
 800da00:	f7f2 fc52 	bl	80002a8 <__aeabi_dsub>
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800da0c:	f7f2 ff2e 	bl	800086c <__aeabi_ddiv>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	6a39      	ldr	r1, [r7, #32]
 800da16:	e9c1 2302 	strd	r2, r3, [r1, #8]
	/* flag is set and the equations are truncated to linear  */
	/* variation in sqrt a and quadratic variation in mean    */
	/* anomaly.  Also, the c3 term, the delta omega term, and */
	/* the delta m term are dropped.                          */

	if ((m->aodp*(1-m->eo)/AE)<(220/EARTH_RADIUS_KM_WGS84+AE))
 800da1a:	6a3b      	ldr	r3, [r7, #32]
 800da1c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800da26:	f04f 0000 	mov.w	r0, #0
 800da2a:	493b      	ldr	r1, [pc, #236]	@ (800db18 <sgp4_init+0x490>)
 800da2c:	f7f2 fc3c 	bl	80002a8 <__aeabi_dsub>
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	4620      	mov	r0, r4
 800da36:	4629      	mov	r1, r5
 800da38:	f7f2 fdee 	bl	8000618 <__aeabi_dmul>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	4610      	mov	r0, r2
 800da42:	4619      	mov	r1, r3
 800da44:	a32c      	add	r3, pc, #176	@ (adr r3, 800daf8 <sgp4_init+0x470>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	f7f3 f857 	bl	8000afc <__aeabi_dcmplt>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d003      	beq.n	800da5c <sgp4_init+0x3d4>
		m->simpleFlag = true;
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	2201      	movs	r2, #1
 800da58:	601a      	str	r2, [r3, #0]
 800da5a:	e002      	b.n	800da62 <sgp4_init+0x3da>
	else
		m->simpleFlag = false;
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	2200      	movs	r2, #0
 800da60:	601a      	str	r2, [r3, #0]

	/* For perigees below 156 km, the      */
	/* values of s and qoms2t are altered. */

	s4=S_DENSITY_PARAM;
 800da62:	a327      	add	r3, pc, #156	@ (adr r3, 800db00 <sgp4_init+0x478>)
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	qoms24=QOMS2T;
 800da6c:	a326      	add	r3, pc, #152	@ (adr r3, 800db08 <sgp4_init+0x480>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	perigee=(m->aodp*(1-m->eo)-AE)*EARTH_RADIUS_KM_WGS84;
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800da82:	f04f 0000 	mov.w	r0, #0
 800da86:	4924      	ldr	r1, [pc, #144]	@ (800db18 <sgp4_init+0x490>)
 800da88:	f7f2 fc0e 	bl	80002a8 <__aeabi_dsub>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4620      	mov	r0, r4
 800da92:	4629      	mov	r1, r5
 800da94:	f7f2 fdc0 	bl	8000618 <__aeabi_dmul>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4610      	mov	r0, r2
 800da9e:	4619      	mov	r1, r3
 800daa0:	f04f 0200 	mov.w	r2, #0
 800daa4:	4b1c      	ldr	r3, [pc, #112]	@ (800db18 <sgp4_init+0x490>)
 800daa6:	f7f2 fbff 	bl	80002a8 <__aeabi_dsub>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4610      	mov	r0, r2
 800dab0:	4619      	mov	r1, r3
 800dab2:	a317      	add	r3, pc, #92	@ (adr r3, 800db10 <sgp4_init+0x488>)
 800dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab8:	f7f2 fdae 	bl	8000618 <__aeabi_dmul>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

	if (perigee<156.0)
 800dac4:	f04f 0200 	mov.w	r2, #0
 800dac8:	4b14      	ldr	r3, [pc, #80]	@ (800db1c <sgp4_init+0x494>)
 800daca:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800dace:	f7f3 f815 	bl	8000afc <__aeabi_dcmplt>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d064      	beq.n	800dba2 <sgp4_init+0x51a>
	{
		if (perigee<=98.0)
 800dad8:	f04f 0200 	mov.w	r2, #0
 800dadc:	4b10      	ldr	r3, [pc, #64]	@ (800db20 <sgp4_init+0x498>)
 800dade:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800dae2:	f7f3 f815 	bl	8000b10 <__aeabi_dcmple>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d01d      	beq.n	800db28 <sgp4_init+0x4a0>
		    s4=20;
 800daec:	f04f 0200 	mov.w	r2, #0
 800daf0:	4b0c      	ldr	r3, [pc, #48]	@ (800db24 <sgp4_init+0x49c>)
 800daf2:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
 800daf6:	e022      	b.n	800db3e <sgp4_init+0x4b6>
 800daf8:	5abfd69b 	.word	0x5abfd69b
 800dafc:	3ff08d48 	.word	0x3ff08d48
 800db00:	0931012a 	.word	0x0931012a
 800db04:	3ff03217 	.word	0x3ff03217
 800db08:	f9b8574f 	.word	0xf9b8574f
 800db0c:	3e2026c6 	.word	0x3e2026c6
 800db10:	126e978d 	.word	0x126e978d
 800db14:	40b8ea23 	.word	0x40b8ea23
 800db18:	3ff00000 	.word	0x3ff00000
 800db1c:	40638000 	.word	0x40638000
 800db20:	40588000 	.word	0x40588000
 800db24:	40340000 	.word	0x40340000
		else
		 s4=perigee-78.0;
 800db28:	f04f 0200 	mov.w	r2, #0
 800db2c:	4bc0      	ldr	r3, [pc, #768]	@ (800de30 <sgp4_init+0x7a8>)
 800db2e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800db32:	f7f2 fbb9 	bl	80002a8 <__aeabi_dsub>
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

		qoms24=pow((120-s4)*AE/EARTH_RADIUS_KM_WGS84,4);
 800db3e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800db42:	f04f 0000 	mov.w	r0, #0
 800db46:	49bb      	ldr	r1, [pc, #748]	@ (800de34 <sgp4_init+0x7ac>)
 800db48:	f7f2 fbae 	bl	80002a8 <__aeabi_dsub>
 800db4c:	4602      	mov	r2, r0
 800db4e:	460b      	mov	r3, r1
 800db50:	4610      	mov	r0, r2
 800db52:	4619      	mov	r1, r3
 800db54:	a3ae      	add	r3, pc, #696	@ (adr r3, 800de10 <sgp4_init+0x788>)
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	f7f2 fe87 	bl	800086c <__aeabi_ddiv>
 800db5e:	4602      	mov	r2, r0
 800db60:	460b      	mov	r3, r1
 800db62:	ec43 2b17 	vmov	d7, r2, r3
 800db66:	ed9f 1bac 	vldr	d1, [pc, #688]	@ 800de18 <sgp4_init+0x790>
 800db6a:	eeb0 0a47 	vmov.f32	s0, s14
 800db6e:	eef0 0a67 	vmov.f32	s1, s15
 800db72:	f010 fa7f 	bl	801e074 <pow>
 800db76:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
		s4=s4/EARTH_RADIUS_KM_WGS84+AE;
 800db7a:	a3a5      	add	r3, pc, #660	@ (adr r3, 800de10 <sgp4_init+0x788>)
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800db84:	f7f2 fe72 	bl	800086c <__aeabi_ddiv>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	4610      	mov	r0, r2
 800db8e:	4619      	mov	r1, r3
 800db90:	f04f 0200 	mov.w	r2, #0
 800db94:	4ba8      	ldr	r3, [pc, #672]	@ (800de38 <sgp4_init+0x7b0>)
 800db96:	f7f2 fb89 	bl	80002ac <__adddf3>
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	}

	pinvsq=1/(m->aodp*m->aodp*betao2*betao2);
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800dba8:	6a3b      	ldr	r3, [r7, #32]
 800dbaa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dbae:	f7f2 fd33 	bl	8000618 <__aeabi_dmul>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4610      	mov	r0, r2
 800dbb8:	4619      	mov	r1, r3
 800dbba:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800dbbe:	f7f2 fd2b 	bl	8000618 <__aeabi_dmul>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	4619      	mov	r1, r3
 800dbca:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800dbce:	f7f2 fd23 	bl	8000618 <__aeabi_dmul>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	f04f 0000 	mov.w	r0, #0
 800dbda:	4997      	ldr	r1, [pc, #604]	@ (800de38 <sgp4_init+0x7b0>)
 800dbdc:	f7f2 fe46 	bl	800086c <__aeabi_ddiv>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	tsi=1/(m->aodp-s4);
 800dbe8:	6a3b      	ldr	r3, [r7, #32]
 800dbea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800dbee:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800dbf2:	f7f2 fb59 	bl	80002a8 <__aeabi_dsub>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	f04f 0000 	mov.w	r0, #0
 800dbfe:	498e      	ldr	r1, [pc, #568]	@ (800de38 <sgp4_init+0x7b0>)
 800dc00:	f7f2 fe34 	bl	800086c <__aeabi_ddiv>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	m->eta=m->aodp*m->eo*tsi;
 800dc0c:	6a3b      	ldr	r3, [r7, #32]
 800dc0e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800dc12:	6a3b      	ldr	r3, [r7, #32]
 800dc14:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800dc18:	f7f2 fcfe 	bl	8000618 <__aeabi_dmul>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	460b      	mov	r3, r1
 800dc20:	4610      	mov	r0, r2
 800dc22:	4619      	mov	r1, r3
 800dc24:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800dc28:	f7f2 fcf6 	bl	8000618 <__aeabi_dmul>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	460b      	mov	r3, r1
 800dc30:	6a39      	ldr	r1, [r7, #32]
 800dc32:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	etasq=m->eta*m->eta;
 800dc36:	6a3b      	ldr	r3, [r7, #32]
 800dc38:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800dc3c:	6a3b      	ldr	r3, [r7, #32]
 800dc3e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800dc42:	f7f2 fce9 	bl	8000618 <__aeabi_dmul>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	eeta=m->eo*m->eta;
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800dc54:	6a3b      	ldr	r3, [r7, #32]
 800dc56:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800dc5a:	f7f2 fcdd 	bl	8000618 <__aeabi_dmul>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	460b      	mov	r3, r1
 800dc62:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	psisq=fabs(1-etasq);
 800dc66:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800dc6a:	f04f 0000 	mov.w	r0, #0
 800dc6e:	4972      	ldr	r1, [pc, #456]	@ (800de38 <sgp4_init+0x7b0>)
 800dc70:	f7f2 fb1a 	bl	80002a8 <__aeabi_dsub>
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	4611      	mov	r1, r2
 800dc7a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800dc7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	coef=qoms24*pow(tsi,4);
 800dc86:	ed9f 1b64 	vldr	d1, [pc, #400]	@ 800de18 <sgp4_init+0x790>
 800dc8a:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800dc8e:	f010 f9f1 	bl	801e074 <pow>
 800dc92:	ec53 2b10 	vmov	r2, r3, d0
 800dc96:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800dc9a:	f7f2 fcbd 	bl	8000618 <__aeabi_dmul>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	coef1=coef/pow(psisq,3.5);
 800dca6:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 800de20 <sgp4_init+0x798>
 800dcaa:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800dcae:	f010 f9e1 	bl	801e074 <pow>
 800dcb2:	ec53 2b10 	vmov	r2, r3, d0
 800dcb6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800dcba:	f7f2 fdd7 	bl	800086c <__aeabi_ddiv>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	c2=coef1*m->xnodp*(m->aodp*(1+1.5*etasq+eeta*(4+etasq))+0.75*CK2*tsi/psisq*m->x3thm1*(8+3*etasq*(8+etasq)));
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800dccc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800dcd0:	f7f2 fca2 	bl	8000618 <__aeabi_dmul>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800dce2:	f04f 0200 	mov.w	r2, #0
 800dce6:	4b55      	ldr	r3, [pc, #340]	@ (800de3c <sgp4_init+0x7b4>)
 800dce8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800dcec:	f7f2 fc94 	bl	8000618 <__aeabi_dmul>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4610      	mov	r0, r2
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	f04f 0200 	mov.w	r2, #0
 800dcfc:	4b4e      	ldr	r3, [pc, #312]	@ (800de38 <sgp4_init+0x7b0>)
 800dcfe:	f7f2 fad5 	bl	80002ac <__adddf3>
 800dd02:	4602      	mov	r2, r0
 800dd04:	460b      	mov	r3, r1
 800dd06:	4690      	mov	r8, r2
 800dd08:	4699      	mov	r9, r3
 800dd0a:	f04f 0200 	mov.w	r2, #0
 800dd0e:	4b4c      	ldr	r3, [pc, #304]	@ (800de40 <sgp4_init+0x7b8>)
 800dd10:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800dd14:	f7f2 faca 	bl	80002ac <__adddf3>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	4619      	mov	r1, r3
 800dd20:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800dd24:	f7f2 fc78 	bl	8000618 <__aeabi_dmul>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	4649      	mov	r1, r9
 800dd30:	f7f2 fabc 	bl	80002ac <__adddf3>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4620      	mov	r0, r4
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	f7f2 fc6c 	bl	8000618 <__aeabi_dmul>
 800dd40:	4602      	mov	r2, r0
 800dd42:	460b      	mov	r3, r1
 800dd44:	4690      	mov	r8, r2
 800dd46:	4699      	mov	r9, r3
 800dd48:	a337      	add	r3, pc, #220	@ (adr r3, 800de28 <sgp4_init+0x7a0>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800dd52:	f7f2 fc61 	bl	8000618 <__aeabi_dmul>
 800dd56:	4602      	mov	r2, r0
 800dd58:	460b      	mov	r3, r1
 800dd5a:	4610      	mov	r0, r2
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800dd62:	f7f2 fd83 	bl	800086c <__aeabi_ddiv>
 800dd66:	4602      	mov	r2, r0
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4610      	mov	r0, r2
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6a3b      	ldr	r3, [r7, #32]
 800dd70:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800dd74:	f7f2 fc50 	bl	8000618 <__aeabi_dmul>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4692      	mov	sl, r2
 800dd7e:	469b      	mov	fp, r3
 800dd80:	f04f 0200 	mov.w	r2, #0
 800dd84:	4b2f      	ldr	r3, [pc, #188]	@ (800de44 <sgp4_init+0x7bc>)
 800dd86:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800dd8a:	f7f2 fc45 	bl	8000618 <__aeabi_dmul>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	4614      	mov	r4, r2
 800dd94:	461d      	mov	r5, r3
 800dd96:	f04f 0200 	mov.w	r2, #0
 800dd9a:	4b2b      	ldr	r3, [pc, #172]	@ (800de48 <sgp4_init+0x7c0>)
 800dd9c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800dda0:	f7f2 fa84 	bl	80002ac <__adddf3>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4620      	mov	r0, r4
 800ddaa:	4629      	mov	r1, r5
 800ddac:	f7f2 fc34 	bl	8000618 <__aeabi_dmul>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	f04f 0200 	mov.w	r2, #0
 800ddbc:	4b22      	ldr	r3, [pc, #136]	@ (800de48 <sgp4_init+0x7c0>)
 800ddbe:	f7f2 fa75 	bl	80002ac <__adddf3>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	4659      	mov	r1, fp
 800ddca:	f7f2 fc25 	bl	8000618 <__aeabi_dmul>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	4649      	mov	r1, r9
 800ddd6:	f7f2 fa69 	bl	80002ac <__adddf3>
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dde2:	f7f2 fc19 	bl	8000618 <__aeabi_dmul>
 800dde6:	4602      	mov	r2, r0
 800dde8:	460b      	mov	r3, r1
 800ddea:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	m->c1=m->bstar*c2;
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800ddf4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800ddf8:	f7f2 fc0e 	bl	8000618 <__aeabi_dmul>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	460b      	mov	r3, r1
 800de00:	6a39      	ldr	r1, [r7, #32]
 800de02:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->sinio=sin(m->xincl);
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800de0c:	e01e      	b.n	800de4c <sgp4_init+0x7c4>
 800de0e:	bf00      	nop
 800de10:	126e978d 	.word	0x126e978d
 800de14:	40b8ea23 	.word	0x40b8ea23
 800de18:	00000000 	.word	0x00000000
 800de1c:	40100000 	.word	0x40100000
 800de20:	00000000 	.word	0x00000000
 800de24:	400c0000 	.word	0x400c0000
 800de28:	cbb15878 	.word	0xcbb15878
 800de2c:	3f3a9b3a 	.word	0x3f3a9b3a
 800de30:	40538000 	.word	0x40538000
 800de34:	405e0000 	.word	0x405e0000
 800de38:	3ff00000 	.word	0x3ff00000
 800de3c:	3ff80000 	.word	0x3ff80000
 800de40:	40100000 	.word	0x40100000
 800de44:	40080000 	.word	0x40080000
 800de48:	40200000 	.word	0x40200000
 800de4c:	eeb0 0a47 	vmov.f32	s0, s14
 800de50:	eef0 0a67 	vmov.f32	s1, s15
 800de54:	f010 fba0 	bl	801e598 <sin>
 800de58:	eeb0 7a40 	vmov.f32	s14, s0
 800de5c:	eef0 7a60 	vmov.f32	s15, s1
 800de60:	6a3b      	ldr	r3, [r7, #32]
 800de62:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
	a3ovk2=-J3_HARMONIC_WGS72/CK2*pow(AE,3);
 800de66:	a3ea      	add	r3, pc, #936	@ (adr r3, 800e210 <sgp4_init+0xb88>)
 800de68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	c3=coef*tsi*a3ovk2*m->xnodp*AE*m->sinio/m->eo;
 800de70:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800de74:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800de78:	f7f2 fbce 	bl	8000618 <__aeabi_dmul>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	4610      	mov	r0, r2
 800de82:	4619      	mov	r1, r3
 800de84:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800de88:	f7f2 fbc6 	bl	8000618 <__aeabi_dmul>
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	4610      	mov	r0, r2
 800de92:	4619      	mov	r1, r3
 800de94:	6a3b      	ldr	r3, [r7, #32]
 800de96:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800de9a:	f7f2 fbbd 	bl	8000618 <__aeabi_dmul>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4610      	mov	r0, r2
 800dea4:	4619      	mov	r1, r3
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800deac:	f7f2 fbb4 	bl	8000618 <__aeabi_dmul>
 800deb0:	4602      	mov	r2, r0
 800deb2:	460b      	mov	r3, r1
 800deb4:	4610      	mov	r0, r2
 800deb6:	4619      	mov	r1, r3
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800debe:	f7f2 fcd5 	bl	800086c <__aeabi_ddiv>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	m->x1mth2=1-theta2;
 800deca:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800dece:	f04f 0000 	mov.w	r0, #0
 800ded2:	49c9      	ldr	r1, [pc, #804]	@ (800e1f8 <sgp4_init+0xb70>)
 800ded4:	f7f2 f9e8 	bl	80002a8 <__aeabi_dsub>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	6a39      	ldr	r1, [r7, #32]
 800dede:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8

	m->c4=2*m->xnodp*coef1*m->aodp*betao2*(m->eta*(2+0.5*etasq)+m->eo*(0.5+2*etasq)-2*CK2*tsi/(m->aodp*psisq)*(-3*m->x3thm1*(1-2*eeta+etasq*(1.5-0.5*eeta))+0.75*m->x1mth2*(2*etasq-eeta*(1+etasq))*cos(2*m->omegao)));
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800dee8:	4602      	mov	r2, r0
 800deea:	460b      	mov	r3, r1
 800deec:	f7f2 f9de 	bl	80002ac <__adddf3>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4610      	mov	r0, r2
 800def6:	4619      	mov	r1, r3
 800def8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800defc:	f7f2 fb8c 	bl	8000618 <__aeabi_dmul>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	4610      	mov	r0, r2
 800df06:	4619      	mov	r1, r3
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800df0e:	f7f2 fb83 	bl	8000618 <__aeabi_dmul>
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	4610      	mov	r0, r2
 800df18:	4619      	mov	r1, r3
 800df1a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800df1e:	f7f2 fb7b 	bl	8000618 <__aeabi_dmul>
 800df22:	4602      	mov	r2, r0
 800df24:	460b      	mov	r3, r1
 800df26:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800df2a:	6a3b      	ldr	r3, [r7, #32]
 800df2c:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	@ 0x60
 800df30:	f04f 0200 	mov.w	r2, #0
 800df34:	4bb1      	ldr	r3, [pc, #708]	@ (800e1fc <sgp4_init+0xb74>)
 800df36:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800df3a:	f7f2 fb6d 	bl	8000618 <__aeabi_dmul>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4610      	mov	r0, r2
 800df44:	4619      	mov	r1, r3
 800df46:	f04f 0200 	mov.w	r2, #0
 800df4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800df4e:	f7f2 f9ad 	bl	80002ac <__adddf3>
 800df52:	4602      	mov	r2, r0
 800df54:	460b      	mov	r3, r1
 800df56:	4620      	mov	r0, r4
 800df58:	4629      	mov	r1, r5
 800df5a:	f7f2 fb5d 	bl	8000618 <__aeabi_dmul>
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	4690      	mov	r8, r2
 800df64:	4699      	mov	r9, r3
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	e9d3 4540 	ldrd	r4, r5, [r3, #256]	@ 0x100
 800df6c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	f7f2 f99a 	bl	80002ac <__adddf3>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4610      	mov	r0, r2
 800df7e:	4619      	mov	r1, r3
 800df80:	f04f 0200 	mov.w	r2, #0
 800df84:	4b9d      	ldr	r3, [pc, #628]	@ (800e1fc <sgp4_init+0xb74>)
 800df86:	f7f2 f991 	bl	80002ac <__adddf3>
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	4620      	mov	r0, r4
 800df90:	4629      	mov	r1, r5
 800df92:	f7f2 fb41 	bl	8000618 <__aeabi_dmul>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4640      	mov	r0, r8
 800df9c:	4649      	mov	r1, r9
 800df9e:	f7f2 f985 	bl	80002ac <__adddf3>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800dfaa:	a391      	add	r3, pc, #580	@ (adr r3, 800e1f0 <sgp4_init+0xb68>)
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800dfb4:	f7f2 fb30 	bl	8000618 <__aeabi_dmul>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4614      	mov	r4, r2
 800dfbe:	461d      	mov	r5, r3
 800dfc0:	6a3b      	ldr	r3, [r7, #32]
 800dfc2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800dfc6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800dfca:	f7f2 fb25 	bl	8000618 <__aeabi_dmul>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	f7f2 fc49 	bl	800086c <__aeabi_ddiv>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	460b      	mov	r3, r1
 800dfde:	e9c7 2300 	strd	r2, r3, [r7]
 800dfe2:	6a3b      	ldr	r3, [r7, #32]
 800dfe4:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800dfe8:	f04f 0200 	mov.w	r2, #0
 800dfec:	4b84      	ldr	r3, [pc, #528]	@ (800e200 <sgp4_init+0xb78>)
 800dfee:	f7f2 fb13 	bl	8000618 <__aeabi_dmul>
 800dff2:	4602      	mov	r2, r0
 800dff4:	460b      	mov	r3, r1
 800dff6:	4690      	mov	r8, r2
 800dff8:	4699      	mov	r9, r3
 800dffa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	f7f2 f953 	bl	80002ac <__adddf3>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	f04f 0000 	mov.w	r0, #0
 800e00e:	497a      	ldr	r1, [pc, #488]	@ (800e1f8 <sgp4_init+0xb70>)
 800e010:	f7f2 f94a 	bl	80002a8 <__aeabi_dsub>
 800e014:	4602      	mov	r2, r0
 800e016:	460b      	mov	r3, r1
 800e018:	4614      	mov	r4, r2
 800e01a:	461d      	mov	r5, r3
 800e01c:	f04f 0200 	mov.w	r2, #0
 800e020:	4b76      	ldr	r3, [pc, #472]	@ (800e1fc <sgp4_init+0xb74>)
 800e022:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e026:	f7f2 faf7 	bl	8000618 <__aeabi_dmul>
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	f04f 0000 	mov.w	r0, #0
 800e032:	4974      	ldr	r1, [pc, #464]	@ (800e204 <sgp4_init+0xb7c>)
 800e034:	f7f2 f938 	bl	80002a8 <__aeabi_dsub>
 800e038:	4602      	mov	r2, r0
 800e03a:	460b      	mov	r3, r1
 800e03c:	4610      	mov	r0, r2
 800e03e:	4619      	mov	r1, r3
 800e040:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e044:	f7f2 fae8 	bl	8000618 <__aeabi_dmul>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	4620      	mov	r0, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	f7f2 f92c 	bl	80002ac <__adddf3>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	4640      	mov	r0, r8
 800e05a:	4649      	mov	r1, r9
 800e05c:	f7f2 fadc 	bl	8000618 <__aeabi_dmul>
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	4692      	mov	sl, r2
 800e066:	469b      	mov	fp, r3
 800e068:	6a3b      	ldr	r3, [r7, #32]
 800e06a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800e06e:	f04f 0200 	mov.w	r2, #0
 800e072:	4b65      	ldr	r3, [pc, #404]	@ (800e208 <sgp4_init+0xb80>)
 800e074:	f7f2 fad0 	bl	8000618 <__aeabi_dmul>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	4690      	mov	r8, r2
 800e07e:	4699      	mov	r9, r3
 800e080:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	f7f2 f910 	bl	80002ac <__adddf3>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	4614      	mov	r4, r2
 800e092:	461d      	mov	r5, r3
 800e094:	f04f 0200 	mov.w	r2, #0
 800e098:	4b57      	ldr	r3, [pc, #348]	@ (800e1f8 <sgp4_init+0xb70>)
 800e09a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e09e:	f7f2 f905 	bl	80002ac <__adddf3>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e0ae:	f7f2 fab3 	bl	8000618 <__aeabi_dmul>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	f7f2 f8f5 	bl	80002a8 <__aeabi_dsub>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	4640      	mov	r0, r8
 800e0c4:	4649      	mov	r1, r9
 800e0c6:	f7f2 faa7 	bl	8000618 <__aeabi_dmul>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	4614      	mov	r4, r2
 800e0d0:	461d      	mov	r5, r3
 800e0d2:	6a3b      	ldr	r3, [r7, #32]
 800e0d4:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 800e0d8:	4602      	mov	r2, r0
 800e0da:	460b      	mov	r3, r1
 800e0dc:	f7f2 f8e6 	bl	80002ac <__adddf3>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	ec43 2b17 	vmov	d7, r2, r3
 800e0e8:	eeb0 0a47 	vmov.f32	s0, s14
 800e0ec:	eef0 0a67 	vmov.f32	s1, s15
 800e0f0:	f010 f9f6 	bl	801e4e0 <cos>
 800e0f4:	ec53 2b10 	vmov	r2, r3, d0
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	4629      	mov	r1, r5
 800e0fc:	f7f2 fa8c 	bl	8000618 <__aeabi_dmul>
 800e100:	4602      	mov	r2, r0
 800e102:	460b      	mov	r3, r1
 800e104:	4650      	mov	r0, sl
 800e106:	4659      	mov	r1, fp
 800e108:	f7f2 f8d0 	bl	80002ac <__adddf3>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e114:	f7f2 fa80 	bl	8000618 <__aeabi_dmul>
 800e118:	4602      	mov	r2, r0
 800e11a:	460b      	mov	r3, r1
 800e11c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e120:	f7f2 f8c2 	bl	80002a8 <__aeabi_dsub>
 800e124:	4602      	mov	r2, r0
 800e126:	460b      	mov	r3, r1
 800e128:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e12c:	f7f2 fa74 	bl	8000618 <__aeabi_dmul>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	6a39      	ldr	r1, [r7, #32]
 800e136:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->c5=2*coef1*m->aodp*betao2*(1+2.75*(etasq+eeta)+eeta*etasq);
 800e13a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e13e:	4602      	mov	r2, r0
 800e140:	460b      	mov	r3, r1
 800e142:	f7f2 f8b3 	bl	80002ac <__adddf3>
 800e146:	4602      	mov	r2, r0
 800e148:	460b      	mov	r3, r1
 800e14a:	4610      	mov	r0, r2
 800e14c:	4619      	mov	r1, r3
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e154:	f7f2 fa60 	bl	8000618 <__aeabi_dmul>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	4610      	mov	r0, r2
 800e15e:	4619      	mov	r1, r3
 800e160:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800e164:	f7f2 fa58 	bl	8000618 <__aeabi_dmul>
 800e168:	4602      	mov	r2, r0
 800e16a:	460b      	mov	r3, r1
 800e16c:	4614      	mov	r4, r2
 800e16e:	461d      	mov	r5, r3
 800e170:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e174:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e178:	f7f2 f898 	bl	80002ac <__adddf3>
 800e17c:	4602      	mov	r2, r0
 800e17e:	460b      	mov	r3, r1
 800e180:	4610      	mov	r0, r2
 800e182:	4619      	mov	r1, r3
 800e184:	f04f 0200 	mov.w	r2, #0
 800e188:	4b20      	ldr	r3, [pc, #128]	@ (800e20c <sgp4_init+0xb84>)
 800e18a:	f7f2 fa45 	bl	8000618 <__aeabi_dmul>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	4610      	mov	r0, r2
 800e194:	4619      	mov	r1, r3
 800e196:	f04f 0200 	mov.w	r2, #0
 800e19a:	4b17      	ldr	r3, [pc, #92]	@ (800e1f8 <sgp4_init+0xb70>)
 800e19c:	f7f2 f886 	bl	80002ac <__adddf3>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	4690      	mov	r8, r2
 800e1a6:	4699      	mov	r9, r3
 800e1a8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e1ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e1b0:	f7f2 fa32 	bl	8000618 <__aeabi_dmul>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	f7f2 f876 	bl	80002ac <__adddf3>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	f7f2 fa26 	bl	8000618 <__aeabi_dmul>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	6a39      	ldr	r1, [r7, #32]
 800e1d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	theta4=theta2*theta2;
 800e1d6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800e1da:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e1de:	f7f2 fa1b 	bl	8000618 <__aeabi_dmul>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800e1ea:	e015      	b.n	800e218 <sgp4_init+0xb90>
 800e1ec:	f3af 8000 	nop.w
 800e1f0:	dd20e5a5 	.word	0xdd20e5a5
 800e1f4:	3f51bcd1 	.word	0x3f51bcd1
 800e1f8:	3ff00000 	.word	0x3ff00000
 800e1fc:	3fe00000 	.word	0x3fe00000
 800e200:	c0080000 	.word	0xc0080000
 800e204:	3ff80000 	.word	0x3ff80000
 800e208:	3fe80000 	.word	0x3fe80000
 800e20c:	40060000 	.word	0x40060000
 800e210:	f3add061 	.word	0xf3add061
 800e214:	3f7335f7 	.word	0x3f7335f7
	temp1=3*CK2*pinvsq*m->xnodp;
 800e218:	a3fd      	add	r3, pc, #1012	@ (adr r3, 800e610 <sgp4_init+0xf88>)
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e222:	f7f2 f9f9 	bl	8000618 <__aeabi_dmul>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	4610      	mov	r0, r2
 800e22c:	4619      	mov	r1, r3
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800e234:	f7f2 f9f0 	bl	8000618 <__aeabi_dmul>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	temp2=temp1*CK2*pinvsq;
 800e240:	a3f5      	add	r3, pc, #980	@ (adr r3, 800e618 <sgp4_init+0xf90>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800e24a:	f7f2 f9e5 	bl	8000618 <__aeabi_dmul>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e256:	f7f2 f9df 	bl	8000618 <__aeabi_dmul>
 800e25a:	4602      	mov	r2, r0
 800e25c:	460b      	mov	r3, r1
 800e25e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp3=1.25*CK4*pinvsq*pinvsq*m->xnodp;
 800e262:	a3ef      	add	r3, pc, #956	@ (adr r3, 800e620 <sgp4_init+0xf98>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e26c:	f7f2 f9d4 	bl	8000618 <__aeabi_dmul>
 800e270:	4602      	mov	r2, r0
 800e272:	460b      	mov	r3, r1
 800e274:	4610      	mov	r0, r2
 800e276:	4619      	mov	r1, r3
 800e278:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800e27c:	f7f2 f9cc 	bl	8000618 <__aeabi_dmul>
 800e280:	4602      	mov	r2, r0
 800e282:	460b      	mov	r3, r1
 800e284:	4610      	mov	r0, r2
 800e286:	4619      	mov	r1, r3
 800e288:	6a3b      	ldr	r3, [r7, #32]
 800e28a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800e28e:	f7f2 f9c3 	bl	8000618 <__aeabi_dmul>
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	m->xmdot=m->xnodp+0.5*temp1*betao*m->x3thm1+0.0625*temp2*betao*(13-78*theta2+137*theta4);
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800e2a0:	f04f 0200 	mov.w	r2, #0
 800e2a4:	4bcc      	ldr	r3, [pc, #816]	@ (800e5d8 <sgp4_init+0xf50>)
 800e2a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800e2aa:	f7f2 f9b5 	bl	8000618 <__aeabi_dmul>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800e2ba:	f7f2 f9ad 	bl	8000618 <__aeabi_dmul>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6a3b      	ldr	r3, [r7, #32]
 800e2c8:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800e2cc:	f7f2 f9a4 	bl	8000618 <__aeabi_dmul>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	4629      	mov	r1, r5
 800e2d8:	f7f1 ffe8 	bl	80002ac <__adddf3>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4614      	mov	r4, r2
 800e2e2:	461d      	mov	r5, r3
 800e2e4:	f04f 0200 	mov.w	r2, #0
 800e2e8:	4bbc      	ldr	r3, [pc, #752]	@ (800e5dc <sgp4_init+0xf54>)
 800e2ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e2ee:	f7f2 f993 	bl	8000618 <__aeabi_dmul>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800e2fe:	f7f2 f98b 	bl	8000618 <__aeabi_dmul>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	4690      	mov	r8, r2
 800e308:	4699      	mov	r9, r3
 800e30a:	f04f 0200 	mov.w	r2, #0
 800e30e:	4bb4      	ldr	r3, [pc, #720]	@ (800e5e0 <sgp4_init+0xf58>)
 800e310:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e314:	f7f2 f980 	bl	8000618 <__aeabi_dmul>
 800e318:	4602      	mov	r2, r0
 800e31a:	460b      	mov	r3, r1
 800e31c:	f04f 0000 	mov.w	r0, #0
 800e320:	49b0      	ldr	r1, [pc, #704]	@ (800e5e4 <sgp4_init+0xf5c>)
 800e322:	f7f1 ffc1 	bl	80002a8 <__aeabi_dsub>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	4692      	mov	sl, r2
 800e32c:	469b      	mov	fp, r3
 800e32e:	a3a4      	add	r3, pc, #656	@ (adr r3, 800e5c0 <sgp4_init+0xf38>)
 800e330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e334:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800e338:	f7f2 f96e 	bl	8000618 <__aeabi_dmul>
 800e33c:	4602      	mov	r2, r0
 800e33e:	460b      	mov	r3, r1
 800e340:	4650      	mov	r0, sl
 800e342:	4659      	mov	r1, fp
 800e344:	f7f1 ffb2 	bl	80002ac <__adddf3>
 800e348:	4602      	mov	r2, r0
 800e34a:	460b      	mov	r3, r1
 800e34c:	4640      	mov	r0, r8
 800e34e:	4649      	mov	r1, r9
 800e350:	f7f2 f962 	bl	8000618 <__aeabi_dmul>
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4620      	mov	r0, r4
 800e35a:	4629      	mov	r1, r5
 800e35c:	f7f1 ffa6 	bl	80002ac <__adddf3>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	6a39      	ldr	r1, [r7, #32]
 800e366:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
	x1m5th=1-5*theta2;
 800e36a:	f04f 0200 	mov.w	r2, #0
 800e36e:	4b9e      	ldr	r3, [pc, #632]	@ (800e5e8 <sgp4_init+0xf60>)
 800e370:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e374:	f7f2 f950 	bl	8000618 <__aeabi_dmul>
 800e378:	4602      	mov	r2, r0
 800e37a:	460b      	mov	r3, r1
 800e37c:	f04f 0000 	mov.w	r0, #0
 800e380:	499a      	ldr	r1, [pc, #616]	@ (800e5ec <sgp4_init+0xf64>)
 800e382:	f7f1 ff91 	bl	80002a8 <__aeabi_dsub>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	m->omgdot=-0.5*temp1*x1m5th+0.0625*temp2*(7-114*theta2+395*theta4)+temp3*(3-36*theta2+49*theta4);
 800e38e:	f04f 0200 	mov.w	r2, #0
 800e392:	4b97      	ldr	r3, [pc, #604]	@ (800e5f0 <sgp4_init+0xf68>)
 800e394:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800e398:	f7f2 f93e 	bl	8000618 <__aeabi_dmul>
 800e39c:	4602      	mov	r2, r0
 800e39e:	460b      	mov	r3, r1
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e3a8:	f7f2 f936 	bl	8000618 <__aeabi_dmul>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	4614      	mov	r4, r2
 800e3b2:	461d      	mov	r5, r3
 800e3b4:	f04f 0200 	mov.w	r2, #0
 800e3b8:	4b88      	ldr	r3, [pc, #544]	@ (800e5dc <sgp4_init+0xf54>)
 800e3ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e3be:	f7f2 f92b 	bl	8000618 <__aeabi_dmul>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4690      	mov	r8, r2
 800e3c8:	4699      	mov	r9, r3
 800e3ca:	f04f 0200 	mov.w	r2, #0
 800e3ce:	4b89      	ldr	r3, [pc, #548]	@ (800e5f4 <sgp4_init+0xf6c>)
 800e3d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e3d4:	f7f2 f920 	bl	8000618 <__aeabi_dmul>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	460b      	mov	r3, r1
 800e3dc:	f04f 0000 	mov.w	r0, #0
 800e3e0:	4985      	ldr	r1, [pc, #532]	@ (800e5f8 <sgp4_init+0xf70>)
 800e3e2:	f7f1 ff61 	bl	80002a8 <__aeabi_dsub>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4692      	mov	sl, r2
 800e3ec:	469b      	mov	fp, r3
 800e3ee:	a376      	add	r3, pc, #472	@ (adr r3, 800e5c8 <sgp4_init+0xf40>)
 800e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800e3f8:	f7f2 f90e 	bl	8000618 <__aeabi_dmul>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	4650      	mov	r0, sl
 800e402:	4659      	mov	r1, fp
 800e404:	f7f1 ff52 	bl	80002ac <__adddf3>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f2 f902 	bl	8000618 <__aeabi_dmul>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4620      	mov	r0, r4
 800e41a:	4629      	mov	r1, r5
 800e41c:	f7f1 ff46 	bl	80002ac <__adddf3>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4614      	mov	r4, r2
 800e426:	461d      	mov	r5, r3
 800e428:	f04f 0200 	mov.w	r2, #0
 800e42c:	4b73      	ldr	r3, [pc, #460]	@ (800e5fc <sgp4_init+0xf74>)
 800e42e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e432:	f7f2 f8f1 	bl	8000618 <__aeabi_dmul>
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	f04f 0000 	mov.w	r0, #0
 800e43e:	4970      	ldr	r1, [pc, #448]	@ (800e600 <sgp4_init+0xf78>)
 800e440:	f7f1 ff32 	bl	80002a8 <__aeabi_dsub>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4690      	mov	r8, r2
 800e44a:	4699      	mov	r9, r3
 800e44c:	f04f 0200 	mov.w	r2, #0
 800e450:	4b6c      	ldr	r3, [pc, #432]	@ (800e604 <sgp4_init+0xf7c>)
 800e452:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800e456:	f7f2 f8df 	bl	8000618 <__aeabi_dmul>
 800e45a:	4602      	mov	r2, r0
 800e45c:	460b      	mov	r3, r1
 800e45e:	4640      	mov	r0, r8
 800e460:	4649      	mov	r1, r9
 800e462:	f7f1 ff23 	bl	80002ac <__adddf3>
 800e466:	4602      	mov	r2, r0
 800e468:	460b      	mov	r3, r1
 800e46a:	4610      	mov	r0, r2
 800e46c:	4619      	mov	r1, r3
 800e46e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e472:	f7f2 f8d1 	bl	8000618 <__aeabi_dmul>
 800e476:	4602      	mov	r2, r0
 800e478:	460b      	mov	r3, r1
 800e47a:	4620      	mov	r0, r4
 800e47c:	4629      	mov	r1, r5
 800e47e:	f7f1 ff15 	bl	80002ac <__adddf3>
 800e482:	4602      	mov	r2, r0
 800e484:	460b      	mov	r3, r1
 800e486:	6a39      	ldr	r1, [r7, #32]
 800e488:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	xhdot1=-temp1*m->cosio;
 800e48c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e48e:	61bb      	str	r3, [r7, #24]
 800e490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e492:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800e496:	61fb      	str	r3, [r7, #28]
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800e49e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e4a2:	f7f2 f8b9 	bl	8000618 <__aeabi_dmul>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	m->xnodot=xhdot1+(0.5*temp2*(4-19*theta2)+2*temp3*(3-7*theta2))*m->cosio;
 800e4ae:	f04f 0200 	mov.w	r2, #0
 800e4b2:	4b49      	ldr	r3, [pc, #292]	@ (800e5d8 <sgp4_init+0xf50>)
 800e4b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e4b8:	f7f2 f8ae 	bl	8000618 <__aeabi_dmul>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	4614      	mov	r4, r2
 800e4c2:	461d      	mov	r5, r3
 800e4c4:	f04f 0200 	mov.w	r2, #0
 800e4c8:	4b4f      	ldr	r3, [pc, #316]	@ (800e608 <sgp4_init+0xf80>)
 800e4ca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e4ce:	f7f2 f8a3 	bl	8000618 <__aeabi_dmul>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	f04f 0000 	mov.w	r0, #0
 800e4da:	494c      	ldr	r1, [pc, #304]	@ (800e60c <sgp4_init+0xf84>)
 800e4dc:	f7f1 fee4 	bl	80002a8 <__aeabi_dsub>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	f7f2 f896 	bl	8000618 <__aeabi_dmul>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	4614      	mov	r4, r2
 800e4f2:	461d      	mov	r5, r3
 800e4f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	f7f1 fed6 	bl	80002ac <__adddf3>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	4690      	mov	r8, r2
 800e506:	4699      	mov	r9, r3
 800e508:	f04f 0200 	mov.w	r2, #0
 800e50c:	4b3a      	ldr	r3, [pc, #232]	@ (800e5f8 <sgp4_init+0xf70>)
 800e50e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e512:	f7f2 f881 	bl	8000618 <__aeabi_dmul>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	f04f 0000 	mov.w	r0, #0
 800e51e:	4938      	ldr	r1, [pc, #224]	@ (800e600 <sgp4_init+0xf78>)
 800e520:	f7f1 fec2 	bl	80002a8 <__aeabi_dsub>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	4640      	mov	r0, r8
 800e52a:	4649      	mov	r1, r9
 800e52c:	f7f2 f874 	bl	8000618 <__aeabi_dmul>
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	4620      	mov	r0, r4
 800e536:	4629      	mov	r1, r5
 800e538:	f7f1 feb8 	bl	80002ac <__adddf3>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	4610      	mov	r0, r2
 800e542:	4619      	mov	r1, r3
 800e544:	6a3b      	ldr	r3, [r7, #32]
 800e546:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800e54a:	f7f2 f865 	bl	8000618 <__aeabi_dmul>
 800e54e:	4602      	mov	r2, r0
 800e550:	460b      	mov	r3, r1
 800e552:	4610      	mov	r0, r2
 800e554:	4619      	mov	r1, r3
 800e556:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e55a:	f7f1 fea7 	bl	80002ac <__adddf3>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	6a39      	ldr	r1, [r7, #32]
 800e564:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
	m->omgcof=m->bstar*c3*cos(m->omegao);
 800e568:	6a3b      	ldr	r3, [r7, #32]
 800e56a:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800e56e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800e572:	f7f2 f851 	bl	8000618 <__aeabi_dmul>
 800e576:	4602      	mov	r2, r0
 800e578:	460b      	mov	r3, r1
 800e57a:	4614      	mov	r4, r2
 800e57c:	461d      	mov	r5, r3
 800e57e:	6a3b      	ldr	r3, [r7, #32]
 800e580:	ed93 7b42 	vldr	d7, [r3, #264]	@ 0x108
 800e584:	eeb0 0a47 	vmov.f32	s0, s14
 800e588:	eef0 0a67 	vmov.f32	s1, s15
 800e58c:	f00f ffa8 	bl	801e4e0 <cos>
 800e590:	ec53 2b10 	vmov	r2, r3, d0
 800e594:	4620      	mov	r0, r4
 800e596:	4629      	mov	r1, r5
 800e598:	f7f2 f83e 	bl	8000618 <__aeabi_dmul>
 800e59c:	4602      	mov	r2, r0
 800e59e:	460b      	mov	r3, r1
 800e5a0:	6a39      	ldr	r1, [r7, #32]
 800e5a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	m->xmcof=-TWO_THIRD*coef*m->bstar*AE/eeta;
 800e5a6:	a30a      	add	r3, pc, #40	@ (adr r3, 800e5d0 <sgp4_init+0xf48>)
 800e5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ac:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800e5b0:	f7f2 f832 	bl	8000618 <__aeabi_dmul>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	e036      	b.n	800e628 <sgp4_init+0xfa0>
 800e5ba:	bf00      	nop
 800e5bc:	f3af 8000 	nop.w
 800e5c0:	00000000 	.word	0x00000000
 800e5c4:	40612000 	.word	0x40612000
 800e5c8:	00000000 	.word	0x00000000
 800e5cc:	4078b000 	.word	0x4078b000
 800e5d0:	55555555 	.word	0x55555555
 800e5d4:	bfe55555 	.word	0xbfe55555
 800e5d8:	3fe00000 	.word	0x3fe00000
 800e5dc:	3fb00000 	.word	0x3fb00000
 800e5e0:	40538000 	.word	0x40538000
 800e5e4:	402a0000 	.word	0x402a0000
 800e5e8:	40140000 	.word	0x40140000
 800e5ec:	3ff00000 	.word	0x3ff00000
 800e5f0:	bfe00000 	.word	0xbfe00000
 800e5f4:	405c8000 	.word	0x405c8000
 800e5f8:	401c0000 	.word	0x401c0000
 800e5fc:	40420000 	.word	0x40420000
 800e600:	40080000 	.word	0x40080000
 800e604:	40488000 	.word	0x40488000
 800e608:	40330000 	.word	0x40330000
 800e60c:	40100000 	.word	0x40100000
 800e610:	cbb15878 	.word	0xcbb15878
 800e614:	3f5a9b3a 	.word	0x3f5a9b3a
 800e618:	dd20e5a5 	.word	0xdd20e5a5
 800e61c:	3f41bcd1 	.word	0x3f41bcd1
 800e620:	bdacda00 	.word	0xbdacda00
 800e624:	3eaa0bd0 	.word	0x3eaa0bd0
 800e628:	4610      	mov	r0, r2
 800e62a:	4619      	mov	r1, r3
 800e62c:	6a3b      	ldr	r3, [r7, #32]
 800e62e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800e632:	f7f1 fff1 	bl	8000618 <__aeabi_dmul>
 800e636:	4602      	mov	r2, r0
 800e638:	460b      	mov	r3, r1
 800e63a:	4610      	mov	r0, r2
 800e63c:	4619      	mov	r1, r3
 800e63e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e642:	f7f2 f913 	bl	800086c <__aeabi_ddiv>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	6a39      	ldr	r1, [r7, #32]
 800e64c:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
	m->xnodcf=3.5*betao2*xhdot1*m->c1;
 800e650:	f04f 0200 	mov.w	r2, #0
 800e654:	4bc2      	ldr	r3, [pc, #776]	@ (800e960 <sgp4_init+0x12d8>)
 800e656:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e65a:	f7f1 ffdd 	bl	8000618 <__aeabi_dmul>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	4610      	mov	r0, r2
 800e664:	4619      	mov	r1, r3
 800e666:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e66a:	f7f1 ffd5 	bl	8000618 <__aeabi_dmul>
 800e66e:	4602      	mov	r2, r0
 800e670:	460b      	mov	r3, r1
 800e672:	4610      	mov	r0, r2
 800e674:	4619      	mov	r1, r3
 800e676:	6a3b      	ldr	r3, [r7, #32]
 800e678:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e67c:	f7f1 ffcc 	bl	8000618 <__aeabi_dmul>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	6a39      	ldr	r1, [r7, #32]
 800e686:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
	m->t2cof=1.5*m->c1;
 800e68a:	6a3b      	ldr	r3, [r7, #32]
 800e68c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800e690:	f04f 0200 	mov.w	r2, #0
 800e694:	4bb3      	ldr	r3, [pc, #716]	@ (800e964 <sgp4_init+0x12dc>)
 800e696:	f7f1 ffbf 	bl	8000618 <__aeabi_dmul>
 800e69a:	4602      	mov	r2, r0
 800e69c:	460b      	mov	r3, r1
 800e69e:	6a39      	ldr	r1, [r7, #32]
 800e6a0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	m->xlcof=0.125*a3ovk2*m->sinio*(3+5*m->cosio)/(1+m->cosio);
 800e6a4:	f04f 0200 	mov.w	r2, #0
 800e6a8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e6ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800e6b0:	f7f1 ffb2 	bl	8000618 <__aeabi_dmul>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6a3b      	ldr	r3, [r7, #32]
 800e6be:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800e6c2:	f7f1 ffa9 	bl	8000618 <__aeabi_dmul>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4614      	mov	r4, r2
 800e6cc:	461d      	mov	r5, r3
 800e6ce:	6a3b      	ldr	r3, [r7, #32]
 800e6d0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800e6d4:	f04f 0200 	mov.w	r2, #0
 800e6d8:	4ba3      	ldr	r3, [pc, #652]	@ (800e968 <sgp4_init+0x12e0>)
 800e6da:	f7f1 ff9d 	bl	8000618 <__aeabi_dmul>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	f04f 0200 	mov.w	r2, #0
 800e6ea:	4ba0      	ldr	r3, [pc, #640]	@ (800e96c <sgp4_init+0x12e4>)
 800e6ec:	f7f1 fdde 	bl	80002ac <__adddf3>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	f7f1 ff8e 	bl	8000618 <__aeabi_dmul>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4614      	mov	r4, r2
 800e702:	461d      	mov	r5, r3
 800e704:	6a3b      	ldr	r3, [r7, #32]
 800e706:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800e70a:	f04f 0200 	mov.w	r2, #0
 800e70e:	4b98      	ldr	r3, [pc, #608]	@ (800e970 <sgp4_init+0x12e8>)
 800e710:	f7f1 fdcc 	bl	80002ac <__adddf3>
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	4620      	mov	r0, r4
 800e71a:	4629      	mov	r1, r5
 800e71c:	f7f2 f8a6 	bl	800086c <__aeabi_ddiv>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	6a39      	ldr	r1, [r7, #32]
 800e726:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	m->aycof=0.25*a3ovk2*m->sinio;
 800e72a:	f04f 0200 	mov.w	r2, #0
 800e72e:	4b91      	ldr	r3, [pc, #580]	@ (800e974 <sgp4_init+0x12ec>)
 800e730:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800e734:	f7f1 ff70 	bl	8000618 <__aeabi_dmul>
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4610      	mov	r0, r2
 800e73e:	4619      	mov	r1, r3
 800e740:	6a3b      	ldr	r3, [r7, #32]
 800e742:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800e746:	f7f1 ff67 	bl	8000618 <__aeabi_dmul>
 800e74a:	4602      	mov	r2, r0
 800e74c:	460b      	mov	r3, r1
 800e74e:	6a39      	ldr	r1, [r7, #32]
 800e750:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->delmo=pow(1+m->eta*cos(m->xmo),3);
 800e754:	6a3b      	ldr	r3, [r7, #32]
 800e756:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	@ 0x60
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	ed93 7b44 	vldr	d7, [r3, #272]	@ 0x110
 800e760:	eeb0 0a47 	vmov.f32	s0, s14
 800e764:	eef0 0a67 	vmov.f32	s1, s15
 800e768:	f00f feba 	bl	801e4e0 <cos>
 800e76c:	ec53 2b10 	vmov	r2, r3, d0
 800e770:	4620      	mov	r0, r4
 800e772:	4629      	mov	r1, r5
 800e774:	f7f1 ff50 	bl	8000618 <__aeabi_dmul>
 800e778:	4602      	mov	r2, r0
 800e77a:	460b      	mov	r3, r1
 800e77c:	4610      	mov	r0, r2
 800e77e:	4619      	mov	r1, r3
 800e780:	f04f 0200 	mov.w	r2, #0
 800e784:	4b7a      	ldr	r3, [pc, #488]	@ (800e970 <sgp4_init+0x12e8>)
 800e786:	f7f1 fd91 	bl	80002ac <__adddf3>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	ec43 2b17 	vmov	d7, r2, r3
 800e792:	ed9f 1b6f 	vldr	d1, [pc, #444]	@ 800e950 <sgp4_init+0x12c8>
 800e796:	eeb0 0a47 	vmov.f32	s0, s14
 800e79a:	eef0 0a67 	vmov.f32	s1, s15
 800e79e:	f00f fc69 	bl	801e074 <pow>
 800e7a2:	eeb0 7a40 	vmov.f32	s14, s0
 800e7a6:	eef0 7a60 	vmov.f32	s15, s1
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
	m->sinmo=sin(m->xmo);
 800e7b0:	6a3b      	ldr	r3, [r7, #32]
 800e7b2:	ed93 7b44 	vldr	d7, [r3, #272]	@ 0x110
 800e7b6:	eeb0 0a47 	vmov.f32	s0, s14
 800e7ba:	eef0 0a67 	vmov.f32	s1, s15
 800e7be:	f00f feeb 	bl	801e598 <sin>
 800e7c2:	eeb0 7a40 	vmov.f32	s14, s0
 800e7c6:	eef0 7a60 	vmov.f32	s15, s1
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
	m->x7thm1=7*theta2-1;
 800e7d0:	f04f 0200 	mov.w	r2, #0
 800e7d4:	4b68      	ldr	r3, [pc, #416]	@ (800e978 <sgp4_init+0x12f0>)
 800e7d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800e7da:	f7f1 ff1d 	bl	8000618 <__aeabi_dmul>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	4610      	mov	r0, r2
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	f04f 0200 	mov.w	r2, #0
 800e7ea:	4b61      	ldr	r3, [pc, #388]	@ (800e970 <sgp4_init+0x12e8>)
 800e7ec:	f7f1 fd5c 	bl	80002a8 <__aeabi_dsub>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	6a39      	ldr	r1, [r7, #32]
 800e7f6:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8

	if (!m->simpleFlag) {
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	f040 8199 	bne.w	800eb36 <sgp4_init+0x14ae>
		c1sq=m->c1*m->c1;
 800e804:	6a3b      	ldr	r3, [r7, #32]
 800e806:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800e80a:	6a3b      	ldr	r3, [r7, #32]
 800e80c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e810:	f7f1 ff02 	bl	8000618 <__aeabi_dmul>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		m->d2=4*m->aodp*tsi*c1sq;
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e822:	f04f 0200 	mov.w	r2, #0
 800e826:	4b55      	ldr	r3, [pc, #340]	@ (800e97c <sgp4_init+0x12f4>)
 800e828:	f7f1 fef6 	bl	8000618 <__aeabi_dmul>
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	4610      	mov	r0, r2
 800e832:	4619      	mov	r1, r3
 800e834:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e838:	f7f1 feee 	bl	8000618 <__aeabi_dmul>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4610      	mov	r0, r2
 800e842:	4619      	mov	r1, r3
 800e844:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e848:	f7f1 fee6 	bl	8000618 <__aeabi_dmul>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	6a39      	ldr	r1, [r7, #32]
 800e852:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		temp=m->d2*tsi*m->c1/3;
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e85c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e860:	f7f1 feda 	bl	8000618 <__aeabi_dmul>
 800e864:	4602      	mov	r2, r0
 800e866:	460b      	mov	r3, r1
 800e868:	4610      	mov	r0, r2
 800e86a:	4619      	mov	r1, r3
 800e86c:	6a3b      	ldr	r3, [r7, #32]
 800e86e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e872:	f7f1 fed1 	bl	8000618 <__aeabi_dmul>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	4610      	mov	r0, r2
 800e87c:	4619      	mov	r1, r3
 800e87e:	f04f 0200 	mov.w	r2, #0
 800e882:	4b3a      	ldr	r3, [pc, #232]	@ (800e96c <sgp4_init+0x12e4>)
 800e884:	f7f1 fff2 	bl	800086c <__aeabi_ddiv>
 800e888:	4602      	mov	r2, r0
 800e88a:	460b      	mov	r3, r1
 800e88c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		m->d3=(17*m->aodp+s4)*temp;
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e896:	f04f 0200 	mov.w	r2, #0
 800e89a:	4b39      	ldr	r3, [pc, #228]	@ (800e980 <sgp4_init+0x12f8>)
 800e89c:	f7f1 febc 	bl	8000618 <__aeabi_dmul>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e8ac:	f7f1 fcfe 	bl	80002ac <__adddf3>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e8bc:	f7f1 feac 	bl	8000618 <__aeabi_dmul>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	6a39      	ldr	r1, [r7, #32]
 800e8c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		m->d4=0.5*temp*m->aodp*tsi*(221*m->aodp+31*s4)*m->c1;
 800e8ca:	f04f 0200 	mov.w	r2, #0
 800e8ce:	4b2d      	ldr	r3, [pc, #180]	@ (800e984 <sgp4_init+0x12fc>)
 800e8d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800e8d4:	f7f1 fea0 	bl	8000618 <__aeabi_dmul>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	460b      	mov	r3, r1
 800e8dc:	4610      	mov	r0, r2
 800e8de:	4619      	mov	r1, r3
 800e8e0:	6a3b      	ldr	r3, [r7, #32]
 800e8e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e8e6:	f7f1 fe97 	bl	8000618 <__aeabi_dmul>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	4610      	mov	r0, r2
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800e8f6:	f7f1 fe8f 	bl	8000618 <__aeabi_dmul>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	4614      	mov	r4, r2
 800e900:	461d      	mov	r5, r3
 800e902:	6a3b      	ldr	r3, [r7, #32]
 800e904:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e908:	a313      	add	r3, pc, #76	@ (adr r3, 800e958 <sgp4_init+0x12d0>)
 800e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90e:	f7f1 fe83 	bl	8000618 <__aeabi_dmul>
 800e912:	4602      	mov	r2, r0
 800e914:	460b      	mov	r3, r1
 800e916:	4690      	mov	r8, r2
 800e918:	4699      	mov	r9, r3
 800e91a:	f04f 0200 	mov.w	r2, #0
 800e91e:	4b1a      	ldr	r3, [pc, #104]	@ (800e988 <sgp4_init+0x1300>)
 800e920:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800e924:	f7f1 fe78 	bl	8000618 <__aeabi_dmul>
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	4640      	mov	r0, r8
 800e92e:	4649      	mov	r1, r9
 800e930:	f7f1 fcbc 	bl	80002ac <__adddf3>
 800e934:	4602      	mov	r2, r0
 800e936:	460b      	mov	r3, r1
 800e938:	4620      	mov	r0, r4
 800e93a:	4629      	mov	r1, r5
 800e93c:	f7f1 fe6c 	bl	8000618 <__aeabi_dmul>
 800e940:	4602      	mov	r2, r0
 800e942:	460b      	mov	r3, r1
 800e944:	4610      	mov	r0, r2
 800e946:	4619      	mov	r1, r3
 800e948:	6a3b      	ldr	r3, [r7, #32]
 800e94a:	e01f      	b.n	800e98c <sgp4_init+0x1304>
 800e94c:	f3af 8000 	nop.w
 800e950:	00000000 	.word	0x00000000
 800e954:	40080000 	.word	0x40080000
 800e958:	00000000 	.word	0x00000000
 800e95c:	406ba000 	.word	0x406ba000
 800e960:	400c0000 	.word	0x400c0000
 800e964:	3ff80000 	.word	0x3ff80000
 800e968:	40140000 	.word	0x40140000
 800e96c:	40080000 	.word	0x40080000
 800e970:	3ff00000 	.word	0x3ff00000
 800e974:	3fd00000 	.word	0x3fd00000
 800e978:	401c0000 	.word	0x401c0000
 800e97c:	40100000 	.word	0x40100000
 800e980:	40310000 	.word	0x40310000
 800e984:	3fe00000 	.word	0x3fe00000
 800e988:	403f0000 	.word	0x403f0000
 800e98c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e990:	f7f1 fe42 	bl	8000618 <__aeabi_dmul>
 800e994:	4602      	mov	r2, r0
 800e996:	460b      	mov	r3, r1
 800e998:	6a39      	ldr	r1, [r7, #32]
 800e99a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		m->t3cof=m->d2+2*c1sq;
 800e99e:	6a3b      	ldr	r3, [r7, #32]
 800e9a0:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800e9a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	f7f1 fc7e 	bl	80002ac <__adddf3>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	f7f1 fc78 	bl	80002ac <__adddf3>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	6a39      	ldr	r1, [r7, #32]
 800e9c2:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		m->t4cof=0.25*(3*m->d3+m->c1*(12*m->d2+10*c1sq));
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800e9cc:	f04f 0200 	mov.w	r2, #0
 800e9d0:	4b5f      	ldr	r3, [pc, #380]	@ (800eb50 <sgp4_init+0x14c8>)
 800e9d2:	f7f1 fe21 	bl	8000618 <__aeabi_dmul>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	460b      	mov	r3, r1
 800e9da:	4690      	mov	r8, r2
 800e9dc:	4699      	mov	r9, r3
 800e9de:	6a3b      	ldr	r3, [r7, #32]
 800e9e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800e9e4:	6a3b      	ldr	r3, [r7, #32]
 800e9e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e9ea:	f04f 0200 	mov.w	r2, #0
 800e9ee:	4b59      	ldr	r3, [pc, #356]	@ (800eb54 <sgp4_init+0x14cc>)
 800e9f0:	f7f1 fe12 	bl	8000618 <__aeabi_dmul>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	4692      	mov	sl, r2
 800e9fa:	469b      	mov	fp, r3
 800e9fc:	f04f 0200 	mov.w	r2, #0
 800ea00:	4b55      	ldr	r3, [pc, #340]	@ (800eb58 <sgp4_init+0x14d0>)
 800ea02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800ea06:	f7f1 fe07 	bl	8000618 <__aeabi_dmul>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	4650      	mov	r0, sl
 800ea10:	4659      	mov	r1, fp
 800ea12:	f7f1 fc4b 	bl	80002ac <__adddf3>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	4629      	mov	r1, r5
 800ea1e:	f7f1 fdfb 	bl	8000618 <__aeabi_dmul>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	4640      	mov	r0, r8
 800ea28:	4649      	mov	r1, r9
 800ea2a:	f7f1 fc3f 	bl	80002ac <__adddf3>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	4610      	mov	r0, r2
 800ea34:	4619      	mov	r1, r3
 800ea36:	f04f 0200 	mov.w	r2, #0
 800ea3a:	4b48      	ldr	r3, [pc, #288]	@ (800eb5c <sgp4_init+0x14d4>)
 800ea3c:	f7f1 fdec 	bl	8000618 <__aeabi_dmul>
 800ea40:	4602      	mov	r2, r0
 800ea42:	460b      	mov	r3, r1
 800ea44:	6a39      	ldr	r1, [r7, #32]
 800ea46:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		m->t5cof=0.2*(3*m->d4+12*m->c1*m->d3+6*m->d2*m->d2+15*c1sq*(2*m->d2+c1sq));
 800ea4a:	6a3b      	ldr	r3, [r7, #32]
 800ea4c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800ea50:	f04f 0200 	mov.w	r2, #0
 800ea54:	4b3e      	ldr	r3, [pc, #248]	@ (800eb50 <sgp4_init+0x14c8>)
 800ea56:	f7f1 fddf 	bl	8000618 <__aeabi_dmul>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	4614      	mov	r4, r2
 800ea60:	461d      	mov	r5, r3
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800ea68:	f04f 0200 	mov.w	r2, #0
 800ea6c:	4b39      	ldr	r3, [pc, #228]	@ (800eb54 <sgp4_init+0x14cc>)
 800ea6e:	f7f1 fdd3 	bl	8000618 <__aeabi_dmul>
 800ea72:	4602      	mov	r2, r0
 800ea74:	460b      	mov	r3, r1
 800ea76:	4610      	mov	r0, r2
 800ea78:	4619      	mov	r1, r3
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800ea80:	f7f1 fdca 	bl	8000618 <__aeabi_dmul>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	4620      	mov	r0, r4
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	f7f1 fc0e 	bl	80002ac <__adddf3>
 800ea90:	4602      	mov	r2, r0
 800ea92:	460b      	mov	r3, r1
 800ea94:	4614      	mov	r4, r2
 800ea96:	461d      	mov	r5, r3
 800ea98:	6a3b      	ldr	r3, [r7, #32]
 800ea9a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ea9e:	f04f 0200 	mov.w	r2, #0
 800eaa2:	4b2f      	ldr	r3, [pc, #188]	@ (800eb60 <sgp4_init+0x14d8>)
 800eaa4:	f7f1 fdb8 	bl	8000618 <__aeabi_dmul>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	4610      	mov	r0, r2
 800eaae:	4619      	mov	r1, r3
 800eab0:	6a3b      	ldr	r3, [r7, #32]
 800eab2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800eab6:	f7f1 fdaf 	bl	8000618 <__aeabi_dmul>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	4620      	mov	r0, r4
 800eac0:	4629      	mov	r1, r5
 800eac2:	f7f1 fbf3 	bl	80002ac <__adddf3>
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	4614      	mov	r4, r2
 800eacc:	461d      	mov	r5, r3
 800eace:	f04f 0200 	mov.w	r2, #0
 800ead2:	4b24      	ldr	r3, [pc, #144]	@ (800eb64 <sgp4_init+0x14dc>)
 800ead4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800ead8:	f7f1 fd9e 	bl	8000618 <__aeabi_dmul>
 800eadc:	4602      	mov	r2, r0
 800eade:	460b      	mov	r3, r1
 800eae0:	4690      	mov	r8, r2
 800eae2:	4699      	mov	r9, r3
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	f7f1 fbdd 	bl	80002ac <__adddf3>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	4619      	mov	r1, r3
 800eafa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800eafe:	f7f1 fbd5 	bl	80002ac <__adddf3>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	4640      	mov	r0, r8
 800eb08:	4649      	mov	r1, r9
 800eb0a:	f7f1 fd85 	bl	8000618 <__aeabi_dmul>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	460b      	mov	r3, r1
 800eb12:	4620      	mov	r0, r4
 800eb14:	4629      	mov	r1, r5
 800eb16:	f7f1 fbc9 	bl	80002ac <__adddf3>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	4610      	mov	r0, r2
 800eb20:	4619      	mov	r1, r3
 800eb22:	a309      	add	r3, pc, #36	@ (adr r3, 800eb48 <sgp4_init+0x14c0>)
 800eb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb28:	f7f1 fd76 	bl	8000618 <__aeabi_dmul>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	6a39      	ldr	r1, [r7, #32]
 800eb32:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	}
}
 800eb36:	bf00      	nop
 800eb38:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb42:	bf00      	nop
 800eb44:	f3af 8000 	nop.w
 800eb48:	9999999a 	.word	0x9999999a
 800eb4c:	3fc99999 	.word	0x3fc99999
 800eb50:	40080000 	.word	0x40080000
 800eb54:	40280000 	.word	0x40280000
 800eb58:	40240000 	.word	0x40240000
 800eb5c:	3fd00000 	.word	0x3fd00000
 800eb60:	40180000 	.word	0x40180000
 800eb64:	402e0000 	.word	0x402e0000

0800eb68 <sgp4_predict>:

void sgp4_predict(const struct _sgp4 *m, double tsince, struct model_output *output)
{
 800eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6c:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800eb76:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800eb7a:	6018      	str	r0, [r3, #0]
 800eb7c:	f107 0310 	add.w	r3, r7, #16
 800eb80:	ed03 0b02 	vstr	d0, [r3, #-8]
 800eb84:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800eb88:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800eb8c:	6019      	str	r1, [r3, #0]
	temp3, temp4, temp5, temp6;

	int i;

	/* Update for secular gravity and atmospheric drag. */
	xmdf=m->xmo+m->xmdot*tsince;
 800eb8e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800eb92:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	e9d3 ab44 	ldrd	sl, fp, [r3, #272]	@ 0x110
 800eb9c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800eba0:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 800ebaa:	f107 0310 	add.w	r3, r7, #16
 800ebae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ebb2:	f7f1 fd31 	bl	8000618 <__aeabi_dmul>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	4650      	mov	r0, sl
 800ebbc:	4659      	mov	r1, fp
 800ebbe:	f7f1 fb75 	bl	80002ac <__adddf3>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	omgadf=m->omegao+m->omgdot*tsince;
 800ebca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ebce:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	e9d3 ab42 	ldrd	sl, fp, [r3, #264]	@ 0x108
 800ebd8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ebdc:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800ebe6:	f107 0310 	add.w	r3, r7, #16
 800ebea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ebee:	f7f1 fd13 	bl	8000618 <__aeabi_dmul>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	4650      	mov	r0, sl
 800ebf8:	4659      	mov	r1, fp
 800ebfa:	f7f1 fb57 	bl	80002ac <__adddf3>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
	xnoddf=m->xnodeo+m->xnodot*tsince;
 800ec06:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ec0a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	e9d3 ab3e 	ldrd	sl, fp, [r3, #248]	@ 0xf8
 800ec14:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ec18:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 800ec22:	f107 0310 	add.w	r3, r7, #16
 800ec26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec2a:	f7f1 fcf5 	bl	8000618 <__aeabi_dmul>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	460b      	mov	r3, r1
 800ec32:	4650      	mov	r0, sl
 800ec34:	4659      	mov	r1, fp
 800ec36:	f7f1 fb39 	bl	80002ac <__adddf3>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
	omega=omgadf;
 800ec42:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800ec46:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	xmp=xmdf;
 800ec4a:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 800ec4e:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
	tsq=tsince*tsince;
 800ec52:	f107 0310 	add.w	r3, r7, #16
 800ec56:	4619      	mov	r1, r3
 800ec58:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 800ec5c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ec60:	f7f1 fcda 	bl	8000618 <__aeabi_dmul>
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
	xnode=xnoddf+m->xnodcf*tsq;
 800ec6c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ec70:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800ec7a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800ec7e:	f7f1 fccb 	bl	8000618 <__aeabi_dmul>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 800ec8a:	f7f1 fb0f 	bl	80002ac <__adddf3>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
	tempa=1-m->c1*tsince;
 800ec96:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ec9a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800eca4:	f107 0310 	add.w	r3, r7, #16
 800eca8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ecac:	f7f1 fcb4 	bl	8000618 <__aeabi_dmul>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	f04f 0000 	mov.w	r0, #0
 800ecb8:	49bf      	ldr	r1, [pc, #764]	@ (800efb8 <sgp4_predict+0x450>)
 800ecba:	f7f1 faf5 	bl	80002a8 <__aeabi_dsub>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
	tempe=m->bstar*m->c4*tsince;
 800ecc6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ecca:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800ecd4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ecd8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ece2:	f7f1 fc99 	bl	8000618 <__aeabi_dmul>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	f107 0110 	add.w	r1, r7, #16
 800ecee:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ecf2:	f7f1 fc91 	bl	8000618 <__aeabi_dmul>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
	templ=m->t2cof*tsq;
 800ecfe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ed02:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800ed0c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800ed10:	f7f1 fc82 	bl	8000618 <__aeabi_dmul>
 800ed14:	4602      	mov	r2, r0
 800ed16:	460b      	mov	r3, r1
 800ed18:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238

	if (!m->simpleFlag) {
 800ed1c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ed20:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f040 814a 	bne.w	800efc2 <sgp4_predict+0x45a>

		delomg=m->omgcof*tsince;
 800ed2e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ed32:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800ed3c:	f107 0110 	add.w	r1, r7, #16
 800ed40:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ed44:	f7f1 fc68 	bl	8000618 <__aeabi_dmul>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		delm=m->xmcof*(pow(1+m->eta*cos(xmdf),3)-m->delmo);
 800ed50:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ed54:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	e9d3 ab30 	ldrd	sl, fp, [r3, #192]	@ 0xc0
 800ed5e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ed62:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 800ed6c:	ed87 7b00 	vstr	d7, [r7]
 800ed70:	ed97 0b80 	vldr	d0, [r7, #512]	@ 0x200
 800ed74:	f00f fbb4 	bl	801e4e0 <cos>
 800ed78:	ec53 2b10 	vmov	r2, r3, d0
 800ed7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed80:	f7f1 fc4a 	bl	8000618 <__aeabi_dmul>
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	4610      	mov	r0, r2
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	f04f 0200 	mov.w	r2, #0
 800ed90:	4b89      	ldr	r3, [pc, #548]	@ (800efb8 <sgp4_predict+0x450>)
 800ed92:	f7f1 fa8b 	bl	80002ac <__adddf3>
 800ed96:	4602      	mov	r2, r0
 800ed98:	460b      	mov	r3, r1
 800ed9a:	ec43 2b17 	vmov	d7, r2, r3
 800ed9e:	ed9f 1b84 	vldr	d1, [pc, #528]	@ 800efb0 <sgp4_predict+0x448>
 800eda2:	eeb0 0a47 	vmov.f32	s0, s14
 800eda6:	eef0 0a67 	vmov.f32	s1, s15
 800edaa:	f00f f963 	bl	801e074 <pow>
 800edae:	ec51 0b10 	vmov	r0, r1, d0
 800edb2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800edb6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800edc0:	f7f1 fa72 	bl	80002a8 <__aeabi_dsub>
 800edc4:	4602      	mov	r2, r0
 800edc6:	460b      	mov	r3, r1
 800edc8:	4650      	mov	r0, sl
 800edca:	4659      	mov	r1, fp
 800edcc:	f7f1 fc24 	bl	8000618 <__aeabi_dmul>
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
		temp=delomg+delm;
 800edd8:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800eddc:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 800ede0:	f7f1 fa64 	bl	80002ac <__adddf3>
 800ede4:	4602      	mov	r2, r0
 800ede6:	460b      	mov	r3, r1
 800ede8:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
		xmp=xmdf+temp;
 800edec:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800edf0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 800edf4:	f7f1 fa5a 	bl	80002ac <__adddf3>
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
		omega=omgadf-temp;
 800ee00:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800ee04:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 800ee08:	f7f1 fa4e 	bl	80002a8 <__aeabi_dsub>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
		tcube=tsq*tsince;
 800ee14:	f107 0310 	add.w	r3, r7, #16
 800ee18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee1c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800ee20:	f7f1 fbfa 	bl	8000618 <__aeabi_dmul>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
		tfour=tsince*tcube;
 800ee2c:	f107 0310 	add.w	r3, r7, #16
 800ee30:	4619      	mov	r1, r3
 800ee32:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800ee36:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ee3a:	f7f1 fbed 	bl	8000618 <__aeabi_dmul>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
		tempa=tempa-m->d2*tsq-m->d3*tcube-m->d4*tfour;
 800ee46:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ee4a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ee54:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 800ee58:	f7f1 fbde 	bl	8000618 <__aeabi_dmul>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	460b      	mov	r3, r1
 800ee60:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 800ee64:	f7f1 fa20 	bl	80002a8 <__aeabi_dsub>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	4692      	mov	sl, r2
 800ee6e:	469b      	mov	fp, r3
 800ee70:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ee74:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800ee7e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800ee82:	f7f1 fbc9 	bl	8000618 <__aeabi_dmul>
 800ee86:	4602      	mov	r2, r0
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4650      	mov	r0, sl
 800ee8c:	4659      	mov	r1, fp
 800ee8e:	f7f1 fa0b 	bl	80002a8 <__aeabi_dsub>
 800ee92:	4602      	mov	r2, r0
 800ee94:	460b      	mov	r3, r1
 800ee96:	4692      	mov	sl, r2
 800ee98:	469b      	mov	fp, r3
 800ee9a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ee9e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800eea8:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 800eeac:	f7f1 fbb4 	bl	8000618 <__aeabi_dmul>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	4650      	mov	r0, sl
 800eeb6:	4659      	mov	r1, fp
 800eeb8:	f7f1 f9f6 	bl	80002a8 <__aeabi_dsub>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
		tempe=tempe+m->bstar*m->c5*(sin(xmp)-m->sinmo);
 800eec4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800eec8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800eed2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800eed6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800eee0:	f7f1 fb9a 	bl	8000618 <__aeabi_dmul>
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	4692      	mov	sl, r2
 800eeea:	469b      	mov	fp, r3
 800eeec:	ed97 0b88 	vldr	d0, [r7, #544]	@ 0x220
 800eef0:	f00f fb52 	bl	801e598 <sin>
 800eef4:	ec51 0b10 	vmov	r0, r1, d0
 800eef8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800eefc:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800ef06:	f7f1 f9cf 	bl	80002a8 <__aeabi_dsub>
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	4650      	mov	r0, sl
 800ef10:	4659      	mov	r1, fp
 800ef12:	f7f1 fb81 	bl	8000618 <__aeabi_dmul>
 800ef16:	4602      	mov	r2, r0
 800ef18:	460b      	mov	r3, r1
 800ef1a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 800ef1e:	f7f1 f9c5 	bl	80002ac <__adddf3>
 800ef22:	4602      	mov	r2, r0
 800ef24:	460b      	mov	r3, r1
 800ef26:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		templ=templ+m->t3cof*tcube+tfour*(m->t4cof+tsince*m->t5cof);
 800ef2a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ef2e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 800ef38:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800ef3c:	f7f1 fb6c 	bl	8000618 <__aeabi_dmul>
 800ef40:	4602      	mov	r2, r0
 800ef42:	460b      	mov	r3, r1
 800ef44:	4610      	mov	r0, r2
 800ef46:	4619      	mov	r1, r3
 800ef48:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 800ef4c:	f7f1 f9ae 	bl	80002ac <__adddf3>
 800ef50:	4602      	mov	r2, r0
 800ef52:	460b      	mov	r3, r1
 800ef54:	e9c7 2300 	strd	r2, r3, [r7]
 800ef58:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ef5c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	e9d3 ab26 	ldrd	sl, fp, [r3, #152]	@ 0x98
 800ef66:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ef6a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 800ef74:	f107 0310 	add.w	r3, r7, #16
 800ef78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef7c:	f7f1 fb4c 	bl	8000618 <__aeabi_dmul>
 800ef80:	4602      	mov	r2, r0
 800ef82:	460b      	mov	r3, r1
 800ef84:	4650      	mov	r0, sl
 800ef86:	4659      	mov	r1, fp
 800ef88:	f7f1 f990 	bl	80002ac <__adddf3>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	460b      	mov	r3, r1
 800ef90:	4610      	mov	r0, r2
 800ef92:	4619      	mov	r1, r3
 800ef94:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 800ef98:	f7f1 fb3e 	bl	8000618 <__aeabi_dmul>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800efa4:	f7f1 f982 	bl	80002ac <__adddf3>
 800efa8:	4602      	mov	r2, r0
 800efaa:	e007      	b.n	800efbc <sgp4_predict+0x454>
 800efac:	f3af 8000 	nop.w
 800efb0:	00000000 	.word	0x00000000
 800efb4:	40080000 	.word	0x40080000
 800efb8:	3ff00000 	.word	0x3ff00000
 800efbc:	460b      	mov	r3, r1
 800efbe:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
	}

	a=m->aodp*pow(tempa,2);
 800efc2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800efc6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 800efd0:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 800f2d0 <sgp4_predict+0x768>
 800efd4:	ed97 0b8a 	vldr	d0, [r7, #552]	@ 0x228
 800efd8:	f00f f84c 	bl	801e074 <pow>
 800efdc:	ec53 2b10 	vmov	r2, r3, d0
 800efe0:	4650      	mov	r0, sl
 800efe2:	4659      	mov	r1, fp
 800efe4:	f7f1 fb18 	bl	8000618 <__aeabi_dmul>
 800efe8:	4602      	mov	r2, r0
 800efea:	460b      	mov	r3, r1
 800efec:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
	e=m->eo-tempe;
 800eff0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800eff4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800effe:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 800f002:	f7f1 f951 	bl	80002a8 <__aeabi_dsub>
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
	xl=xmp+omega+xnode+m->xnodp*templ;
 800f00e:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800f012:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800f016:	f7f1 f949 	bl	80002ac <__adddf3>
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	4610      	mov	r0, r2
 800f020:	4619      	mov	r1, r3
 800f022:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800f026:	f7f1 f941 	bl	80002ac <__adddf3>
 800f02a:	4602      	mov	r2, r0
 800f02c:	460b      	mov	r3, r1
 800f02e:	4692      	mov	sl, r2
 800f030:	469b      	mov	fp, r3
 800f032:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f036:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800f040:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 800f044:	f7f1 fae8 	bl	8000618 <__aeabi_dmul>
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	4650      	mov	r0, sl
 800f04e:	4659      	mov	r1, fp
 800f050:	f7f1 f92c 	bl	80002ac <__adddf3>
 800f054:	4602      	mov	r2, r0
 800f056:	460b      	mov	r3, r1
 800f058:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
	beta=sqrt(1-e*e);
 800f05c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 800f060:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800f064:	f7f1 fad8 	bl	8000618 <__aeabi_dmul>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	f04f 0000 	mov.w	r0, #0
 800f070:	499d      	ldr	r1, [pc, #628]	@ (800f2e8 <sgp4_predict+0x780>)
 800f072:	f7f1 f919 	bl	80002a8 <__aeabi_dsub>
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	ec43 2b17 	vmov	d7, r2, r3
 800f07e:	eeb0 0a47 	vmov.f32	s0, s14
 800f082:	eef0 0a67 	vmov.f32	s1, s15
 800f086:	f00f f865 	bl	801e154 <sqrt>
 800f08a:	ed87 0b66 	vstr	d0, [r7, #408]	@ 0x198
	xn=XKE/pow(a,1.5);
 800f08e:	ed9f 1b92 	vldr	d1, [pc, #584]	@ 800f2d8 <sgp4_predict+0x770>
 800f092:	ed97 0b6c 	vldr	d0, [r7, #432]	@ 0x1b0
 800f096:	f00e ffed 	bl	801e074 <pow>
 800f09a:	ec53 2b10 	vmov	r2, r3, d0
 800f09e:	a190      	add	r1, pc, #576	@ (adr r1, 800f2e0 <sgp4_predict+0x778>)
 800f0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0a4:	f7f1 fbe2 	bl	800086c <__aeabi_ddiv>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

	/* Long period periodics */
	axn=e*cos(omega);
 800f0b0:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 800f0b4:	f00f fa14 	bl	801e4e0 <cos>
 800f0b8:	ec53 2b10 	vmov	r2, r3, d0
 800f0bc:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800f0c0:	f7f1 faaa 	bl	8000618 <__aeabi_dmul>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
	temp=1/(a*beta*beta);
 800f0cc:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 800f0d0:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800f0d4:	f7f1 faa0 	bl	8000618 <__aeabi_dmul>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	460b      	mov	r3, r1
 800f0dc:	4610      	mov	r0, r2
 800f0de:	4619      	mov	r1, r3
 800f0e0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 800f0e4:	f7f1 fa98 	bl	8000618 <__aeabi_dmul>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	f04f 0000 	mov.w	r0, #0
 800f0f0:	497d      	ldr	r1, [pc, #500]	@ (800f2e8 <sgp4_predict+0x780>)
 800f0f2:	f7f1 fbbb 	bl	800086c <__aeabi_ddiv>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	xll=temp*m->xlcof*axn;
 800f0fe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f102:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	@ 0xe0
 800f10c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800f110:	f7f1 fa82 	bl	8000618 <__aeabi_dmul>
 800f114:	4602      	mov	r2, r0
 800f116:	460b      	mov	r3, r1
 800f118:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800f11c:	f7f1 fa7c 	bl	8000618 <__aeabi_dmul>
 800f120:	4602      	mov	r2, r0
 800f122:	460b      	mov	r3, r1
 800f124:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	aynl=temp*m->aycof;
 800f128:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f12c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f136:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 800f13a:	f7f1 fa6d 	bl	8000618 <__aeabi_dmul>
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
	xlt=xl+xll;
 800f146:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800f14a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800f14e:	f7f1 f8ad 	bl	80002ac <__adddf3>
 800f152:	4602      	mov	r2, r0
 800f154:	460b      	mov	r3, r1
 800f156:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
	ayn=e*sin(omega)+aynl;
 800f15a:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 800f15e:	f00f fa1b 	bl	801e598 <sin>
 800f162:	ec51 0b10 	vmov	r0, r1, d0
 800f166:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 800f16a:	f7f1 fa55 	bl	8000618 <__aeabi_dmul>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800f176:	f7f1 f899 	bl	80002ac <__adddf3>
 800f17a:	4602      	mov	r2, r0
 800f17c:	460b      	mov	r3, r1
 800f17e:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168

	/* Solve Kepler's Equation */
	capu=FMod2p(xlt-xnode);
 800f182:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800f186:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800f18a:	f7f1 f88d 	bl	80002a8 <__aeabi_dsub>
 800f18e:	4602      	mov	r2, r0
 800f190:	460b      	mov	r3, r1
 800f192:	ec43 2b17 	vmov	d7, r2, r3
 800f196:	eeb0 0a47 	vmov.f32	s0, s14
 800f19a:	eef0 0a67 	vmov.f32	s1, s15
 800f19e:	f001 fc7f 	bl	8010aa0 <FMod2p>
 800f1a2:	ed87 0b58 	vstr	d0, [r7, #352]	@ 0x160
	temp2=capu;
 800f1a6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800f1aa:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	i=0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	do
	{
		sinepw=sin(temp2);
 800f1b4:	ed97 0b84 	vldr	d0, [r7, #528]	@ 0x210
 800f1b8:	f00f f9ee 	bl	801e598 <sin>
 800f1bc:	ed87 0b56 	vstr	d0, [r7, #344]	@ 0x158
		cosepw=cos(temp2);
 800f1c0:	ed97 0b84 	vldr	d0, [r7, #528]	@ 0x210
 800f1c4:	f00f f98c 	bl	801e4e0 <cos>
 800f1c8:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150
		temp3=axn*sinepw;
 800f1cc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800f1d0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800f1d4:	f7f1 fa20 	bl	8000618 <__aeabi_dmul>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
		temp4=ayn*cosepw;
 800f1e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f1e4:	461e      	mov	r6, r3
 800f1e6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800f1ea:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800f1ee:	f7f1 fa13 	bl	8000618 <__aeabi_dmul>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	e9c6 2300 	strd	r2, r3, [r6]
		temp5=axn*cosepw;
 800f1fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f1fe:	461e      	mov	r6, r3
 800f200:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800f204:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800f208:	f7f1 fa06 	bl	8000618 <__aeabi_dmul>
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	e946 2302 	strd	r2, r3, [r6, #-8]
		temp6=ayn*sinepw;
 800f214:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f218:	461e      	mov	r6, r3
 800f21a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800f21e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800f222:	f7f1 f9f9 	bl	8000618 <__aeabi_dmul>
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	e9c6 2300 	strd	r2, r3, [r6]
		epw=(capu-temp4+temp3-temp2)/(1-temp5-temp6)+temp2;
 800f22e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f236:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800f23a:	f7f1 f835 	bl	80002a8 <__aeabi_dsub>
 800f23e:	4602      	mov	r2, r0
 800f240:	460b      	mov	r3, r1
 800f242:	4610      	mov	r0, r2
 800f244:	4619      	mov	r1, r3
 800f246:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f24a:	f7f1 f82f 	bl	80002ac <__adddf3>
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	4610      	mov	r0, r2
 800f254:	4619      	mov	r1, r3
 800f256:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800f25a:	f7f1 f825 	bl	80002a8 <__aeabi_dsub>
 800f25e:	4602      	mov	r2, r0
 800f260:	460b      	mov	r3, r1
 800f262:	4692      	mov	sl, r2
 800f264:	469b      	mov	fp, r3
 800f266:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f26a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f26e:	f04f 0000 	mov.w	r0, #0
 800f272:	491d      	ldr	r1, [pc, #116]	@ (800f2e8 <sgp4_predict+0x780>)
 800f274:	f7f1 f818 	bl	80002a8 <__aeabi_dsub>
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4610      	mov	r0, r2
 800f27e:	4619      	mov	r1, r3
 800f280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	f7f1 f80e 	bl	80002a8 <__aeabi_dsub>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	4650      	mov	r0, sl
 800f292:	4659      	mov	r1, fp
 800f294:	f7f1 faea 	bl	800086c <__aeabi_ddiv>
 800f298:	4602      	mov	r2, r0
 800f29a:	460b      	mov	r3, r1
 800f29c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800f2a0:	460e      	mov	r6, r1
 800f2a2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800f2a6:	f7f1 f801 	bl	80002ac <__adddf3>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	e946 2302 	strd	r2, r3, [r6, #-8]

		if (fabs(epw-temp2)<= E6A)
 800f2b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800f2bc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f2c0:	f7f0 fff2 	bl	80002a8 <__aeabi_dsub>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	4690      	mov	r8, r2
 800f2ca:	e00f      	b.n	800f2ec <sgp4_predict+0x784>
 800f2cc:	f3af 8000 	nop.w
 800f2d0:	00000000 	.word	0x00000000
 800f2d4:	40000000 	.word	0x40000000
 800f2d8:	00000000 	.word	0x00000000
 800f2dc:	3ff80000 	.word	0x3ff80000
 800f2e0:	d08dcacf 	.word	0xd08dcacf
 800f2e4:	3fb309b5 	.word	0x3fb309b5
 800f2e8:	3ff00000 	.word	0x3ff00000
 800f2ec:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800f2f0:	a30d      	add	r3, pc, #52	@ (adr r3, 800f328 <sgp4_predict+0x7c0>)
 800f2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f6:	4640      	mov	r0, r8
 800f2f8:	4649      	mov	r1, r9
 800f2fa:	f7f1 fc09 	bl	8000b10 <__aeabi_dcmple>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d115      	bne.n	800f330 <sgp4_predict+0x7c8>
			break;

		temp2=epw;
 800f304:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f308:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f30c:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

	} while (i++<10);
 800f310:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f314:	1c5a      	adds	r2, r3, #1
 800f316:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 800f31a:	2b09      	cmp	r3, #9
 800f31c:	f77f af4a 	ble.w	800f1b4 <sgp4_predict+0x64c>
 800f320:	e007      	b.n	800f332 <sgp4_predict+0x7ca>
 800f322:	bf00      	nop
 800f324:	f3af 8000 	nop.w
 800f328:	a0b5ed8d 	.word	0xa0b5ed8d
 800f32c:	3eb0c6f7 	.word	0x3eb0c6f7
			break;
 800f330:	bf00      	nop

	/* Short period preliminary quantities */
	ecose=temp5+temp6;
 800f332:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f336:	461e      	mov	r6, r3
 800f338:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f33c:	4619      	mov	r1, r3
 800f33e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f34a:	f7f0 ffaf 	bl	80002ac <__adddf3>
 800f34e:	4602      	mov	r2, r0
 800f350:	460b      	mov	r3, r1
 800f352:	e9c6 2300 	strd	r2, r3, [r6]
	esine=temp3-temp4;
 800f356:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f35a:	461e      	mov	r6, r3
 800f35c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f364:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800f368:	f7f0 ff9e 	bl	80002a8 <__aeabi_dsub>
 800f36c:	4602      	mov	r2, r0
 800f36e:	460b      	mov	r3, r1
 800f370:	e946 2302 	strd	r2, r3, [r6, #-8]
	elsq=axn*axn+ayn*ayn;
 800f374:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800f378:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800f37c:	f7f1 f94c 	bl	8000618 <__aeabi_dmul>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	4690      	mov	r8, r2
 800f386:	4699      	mov	r9, r3
 800f388:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 800f38c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800f390:	f7f1 f942 	bl	8000618 <__aeabi_dmul>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800f39c:	460e      	mov	r6, r1
 800f39e:	4640      	mov	r0, r8
 800f3a0:	4649      	mov	r1, r9
 800f3a2:	f7f0 ff83 	bl	80002ac <__adddf3>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	e9c6 2300 	strd	r2, r3, [r6]
	temp=1-elsq;
 800f3ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b6:	f04f 0000 	mov.w	r0, #0
 800f3ba:	49c7      	ldr	r1, [pc, #796]	@ (800f6d8 <sgp4_predict+0xb70>)
 800f3bc:	f7f0 ff74 	bl	80002a8 <__aeabi_dsub>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	pl=a*temp;
 800f3c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f3cc:	461e      	mov	r6, r3
 800f3ce:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800f3d2:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800f3d6:	f7f1 f91f 	bl	8000618 <__aeabi_dmul>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	460b      	mov	r3, r1
 800f3de:	e946 2302 	strd	r2, r3, [r6, #-8]
	r=a*(1-ecose);
 800f3e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ea:	f04f 0000 	mov.w	r0, #0
 800f3ee:	49ba      	ldr	r1, [pc, #744]	@ (800f6d8 <sgp4_predict+0xb70>)
 800f3f0:	f7f0 ff5a 	bl	80002a8 <__aeabi_dsub>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 800f3fc:	460e      	mov	r6, r1
 800f3fe:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800f402:	f7f1 f909 	bl	8000618 <__aeabi_dmul>
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	e9c6 2300 	strd	r2, r3, [r6]
	temp1=1/r;
 800f40e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f412:	461e      	mov	r6, r3
 800f414:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41c:	f04f 0000 	mov.w	r0, #0
 800f420:	49ad      	ldr	r1, [pc, #692]	@ (800f6d8 <sgp4_predict+0xb70>)
 800f422:	f7f1 fa23 	bl	800086c <__aeabi_ddiv>
 800f426:	4602      	mov	r2, r0
 800f428:	460b      	mov	r3, r1
 800f42a:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdot=XKE*sqrt(a)*esine*temp1;
 800f42e:	ed97 0b6c 	vldr	d0, [r7, #432]	@ 0x1b0
 800f432:	f00e fe8f 	bl	801e154 <sqrt>
 800f436:	ec51 0b10 	vmov	r0, r1, d0
 800f43a:	a3a3      	add	r3, pc, #652	@ (adr r3, 800f6c8 <sgp4_predict+0xb60>)
 800f43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f440:	f7f1 f8ea 	bl	8000618 <__aeabi_dmul>
 800f444:	4602      	mov	r2, r0
 800f446:	460b      	mov	r3, r1
 800f448:	4610      	mov	r0, r2
 800f44a:	4619      	mov	r1, r3
 800f44c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f454:	f7f1 f8e0 	bl	8000618 <__aeabi_dmul>
 800f458:	4602      	mov	r2, r0
 800f45a:	460b      	mov	r3, r1
 800f45c:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800f460:	460e      	mov	r6, r1
 800f462:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 800f466:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f46a:	f7f1 f8d5 	bl	8000618 <__aeabi_dmul>
 800f46e:	4602      	mov	r2, r0
 800f470:	460b      	mov	r3, r1
 800f472:	e9c6 2300 	strd	r2, r3, [r6]
	rfdot=XKE*sqrt(pl)*temp1;
 800f476:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f47a:	ed13 0b02 	vldr	d0, [r3, #-8]
 800f47e:	f00e fe69 	bl	801e154 <sqrt>
 800f482:	ec51 0b10 	vmov	r0, r1, d0
 800f486:	a390      	add	r3, pc, #576	@ (adr r3, 800f6c8 <sgp4_predict+0xb60>)
 800f488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48c:	f7f1 f8c4 	bl	8000618 <__aeabi_dmul>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800f498:	460e      	mov	r6, r1
 800f49a:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 800f49e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f4a2:	f7f1 f8b9 	bl	8000618 <__aeabi_dmul>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=a*temp1;
 800f4ae:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f4b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f4b6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800f4ba:	f7f1 f8ad 	bl	8000618 <__aeabi_dmul>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	betal=sqrt(temp);
 800f4c6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800f4ca:	461e      	mov	r6, r3
 800f4cc:	ed97 0b72 	vldr	d0, [r7, #456]	@ 0x1c8
 800f4d0:	f00e fe40 	bl	801e154 <sqrt>
 800f4d4:	ed86 0b00 	vstr	d0, [r6]
	temp3=1/(1+betal);
 800f4d8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800f4dc:	4619      	mov	r1, r3
 800f4de:	f04f 0200 	mov.w	r2, #0
 800f4e2:	4b7d      	ldr	r3, [pc, #500]	@ (800f6d8 <sgp4_predict+0xb70>)
 800f4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4e8:	f7f0 fee0 	bl	80002ac <__adddf3>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	f04f 0000 	mov.w	r0, #0
 800f4f4:	4978      	ldr	r1, [pc, #480]	@ (800f6d8 <sgp4_predict+0xb70>)
 800f4f6:	f7f1 f9b9 	bl	800086c <__aeabi_ddiv>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	cosu=temp2*(cosepw-axn+ayn*esine*temp3);
 800f502:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800f506:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800f50a:	f7f0 fecd 	bl	80002a8 <__aeabi_dsub>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	4690      	mov	r8, r2
 800f514:	4699      	mov	r9, r3
 800f516:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f51a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f51e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800f522:	f7f1 f879 	bl	8000618 <__aeabi_dmul>
 800f526:	4602      	mov	r2, r0
 800f528:	460b      	mov	r3, r1
 800f52a:	4610      	mov	r0, r2
 800f52c:	4619      	mov	r1, r3
 800f52e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f532:	f7f1 f871 	bl	8000618 <__aeabi_dmul>
 800f536:	4602      	mov	r2, r0
 800f538:	460b      	mov	r3, r1
 800f53a:	4640      	mov	r0, r8
 800f53c:	4649      	mov	r1, r9
 800f53e:	f7f0 feb5 	bl	80002ac <__adddf3>
 800f542:	4602      	mov	r2, r0
 800f544:	460b      	mov	r3, r1
 800f546:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800f54a:	460e      	mov	r6, r1
 800f54c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800f550:	f7f1 f862 	bl	8000618 <__aeabi_dmul>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	e946 2302 	strd	r2, r3, [r6, #-8]
	sinu=temp2*(sinepw-ayn-axn*esine*temp3);
 800f55c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 800f560:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800f564:	f7f0 fea0 	bl	80002a8 <__aeabi_dsub>
 800f568:	4602      	mov	r2, r0
 800f56a:	460b      	mov	r3, r1
 800f56c:	4690      	mov	r8, r2
 800f56e:	4699      	mov	r9, r3
 800f570:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f574:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f578:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800f57c:	f7f1 f84c 	bl	8000618 <__aeabi_dmul>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4610      	mov	r0, r2
 800f586:	4619      	mov	r1, r3
 800f588:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800f58c:	f7f1 f844 	bl	8000618 <__aeabi_dmul>
 800f590:	4602      	mov	r2, r0
 800f592:	460b      	mov	r3, r1
 800f594:	4640      	mov	r0, r8
 800f596:	4649      	mov	r1, r9
 800f598:	f7f0 fe86 	bl	80002a8 <__aeabi_dsub>
 800f59c:	4602      	mov	r2, r0
 800f59e:	460b      	mov	r3, r1
 800f5a0:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800f5a4:	460e      	mov	r6, r1
 800f5a6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800f5aa:	f7f1 f835 	bl	8000618 <__aeabi_dmul>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	e9c6 2300 	strd	r2, r3, [r6]
	u=atan2(sinu,cosu);
 800f5b6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800f5ba:	461e      	mov	r6, r3
 800f5bc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800f5c6:	ed12 1b02 	vldr	d1, [r2, #-8]
 800f5ca:	ed93 0b00 	vldr	d0, [r3]
 800f5ce:	f00e fc97 	bl	801df00 <atan2>
 800f5d2:	ed06 0b02 	vstr	d0, [r6, #-8]
	sin2u=2*sinu*cosu;
 800f5d6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800f5da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5de:	4602      	mov	r2, r0
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	f7f0 fe63 	bl	80002ac <__adddf3>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 800f5ee:	460e      	mov	r6, r1
 800f5f0:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800f5f4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f5f8:	f7f1 f80e 	bl	8000618 <__aeabi_dmul>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	460b      	mov	r3, r1
 800f600:	e9c6 2300 	strd	r2, r3, [r6]
	cos2u=2*cosu*cosu-1;
 800f604:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800f608:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	f7f0 fe4c 	bl	80002ac <__adddf3>
 800f614:	4602      	mov	r2, r0
 800f616:	460b      	mov	r3, r1
 800f618:	4610      	mov	r0, r2
 800f61a:	4619      	mov	r1, r3
 800f61c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800f620:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f624:	f7f0 fff8 	bl	8000618 <__aeabi_dmul>
 800f628:	4602      	mov	r2, r0
 800f62a:	460b      	mov	r3, r1
 800f62c:	4610      	mov	r0, r2
 800f62e:	4619      	mov	r1, r3
 800f630:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800f634:	461e      	mov	r6, r3
 800f636:	f04f 0200 	mov.w	r2, #0
 800f63a:	4b27      	ldr	r3, [pc, #156]	@ (800f6d8 <sgp4_predict+0xb70>)
 800f63c:	f7f0 fe34 	bl	80002a8 <__aeabi_dsub>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp=1/pl;
 800f648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f64c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f650:	f04f 0000 	mov.w	r0, #0
 800f654:	4920      	ldr	r1, [pc, #128]	@ (800f6d8 <sgp4_predict+0xb70>)
 800f656:	f7f1 f909 	bl	800086c <__aeabi_ddiv>
 800f65a:	4602      	mov	r2, r0
 800f65c:	460b      	mov	r3, r1
 800f65e:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	temp1=CK2*temp;
 800f662:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f666:	461e      	mov	r6, r3
 800f668:	a319      	add	r3, pc, #100	@ (adr r3, 800f6d0 <sgp4_predict+0xb68>)
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 800f672:	f7f0 ffd1 	bl	8000618 <__aeabi_dmul>
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=temp1*temp;
 800f67e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f682:	4619      	mov	r1, r3
 800f684:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 800f688:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f68c:	f7f0 ffc4 	bl	8000618 <__aeabi_dmul>
 800f690:	4602      	mov	r2, r0
 800f692:	460b      	mov	r3, r1
 800f694:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

	/* Update for short periodics */
	rk=r*(1-1.5*temp2*betal*m->x3thm1)+0.5*temp1*m->x1mth2*cos2u;
 800f698:	f04f 0200 	mov.w	r2, #0
 800f69c:	4b0f      	ldr	r3, [pc, #60]	@ (800f6dc <sgp4_predict+0xb74>)
 800f69e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800f6a2:	f7f0 ffb9 	bl	8000618 <__aeabi_dmul>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	4610      	mov	r0, r2
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	f7f0 ffaf 	bl	8000618 <__aeabi_dmul>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	460b      	mov	r3, r1
 800f6be:	4610      	mov	r0, r2
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f6c6:	e00b      	b.n	800f6e0 <sgp4_predict+0xb78>
 800f6c8:	d08dcacf 	.word	0xd08dcacf
 800f6cc:	3fb309b5 	.word	0x3fb309b5
 800f6d0:	dd20e5a5 	.word	0xdd20e5a5
 800f6d4:	3f41bcd1 	.word	0x3f41bcd1
 800f6d8:	3ff00000 	.word	0x3ff00000
 800f6dc:	3ff80000 	.word	0x3ff80000
 800f6e0:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800f6ea:	f7f0 ff95 	bl	8000618 <__aeabi_dmul>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	f04f 0000 	mov.w	r0, #0
 800f6f6:	49d0      	ldr	r1, [pc, #832]	@ (800fa38 <sgp4_predict+0xed0>)
 800f6f8:	f7f0 fdd6 	bl	80002a8 <__aeabi_dsub>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
 800f700:	4610      	mov	r0, r2
 800f702:	4619      	mov	r1, r3
 800f704:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70c:	f7f0 ff84 	bl	8000618 <__aeabi_dmul>
 800f710:	4602      	mov	r2, r0
 800f712:	460b      	mov	r3, r1
 800f714:	4690      	mov	r8, r2
 800f716:	4699      	mov	r9, r3
 800f718:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f71c:	4619      	mov	r1, r3
 800f71e:	f04f 0200 	mov.w	r2, #0
 800f722:	4bc6      	ldr	r3, [pc, #792]	@ (800fa3c <sgp4_predict+0xed4>)
 800f724:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f728:	f7f0 ff76 	bl	8000618 <__aeabi_dmul>
 800f72c:	4602      	mov	r2, r0
 800f72e:	460b      	mov	r3, r1
 800f730:	4610      	mov	r0, r2
 800f732:	4619      	mov	r1, r3
 800f734:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f738:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 800f742:	f7f0 ff69 	bl	8000618 <__aeabi_dmul>
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	4610      	mov	r0, r2
 800f74c:	4619      	mov	r1, r3
 800f74e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800f752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f756:	f7f0 ff5f 	bl	8000618 <__aeabi_dmul>
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800f762:	460e      	mov	r6, r1
 800f764:	4640      	mov	r0, r8
 800f766:	4649      	mov	r1, r9
 800f768:	f7f0 fda0 	bl	80002ac <__adddf3>
 800f76c:	4602      	mov	r2, r0
 800f76e:	460b      	mov	r3, r1
 800f770:	e9c6 2300 	strd	r2, r3, [r6]
	uk=u-0.25*temp2*m->x7thm1*sin2u;
 800f774:	f04f 0200 	mov.w	r2, #0
 800f778:	4bb1      	ldr	r3, [pc, #708]	@ (800fa40 <sgp4_predict+0xed8>)
 800f77a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800f77e:	f7f0 ff4b 	bl	8000618 <__aeabi_dmul>
 800f782:	4602      	mov	r2, r0
 800f784:	460b      	mov	r3, r1
 800f786:	4610      	mov	r0, r2
 800f788:	4619      	mov	r1, r3
 800f78a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f78e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800f798:	f7f0 ff3e 	bl	8000618 <__aeabi_dmul>
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	4610      	mov	r0, r2
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	f7f0 ff34 	bl	8000618 <__aeabi_dmul>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800f7b8:	460e      	mov	r6, r1
 800f7ba:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800f7be:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f7c2:	f7f0 fd71 	bl	80002a8 <__aeabi_dsub>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	e946 2302 	strd	r2, r3, [r6, #-8]
	xnodek=xnode+1.5*temp2*m->cosio*sin2u;
 800f7ce:	f04f 0200 	mov.w	r2, #0
 800f7d2:	4b9c      	ldr	r3, [pc, #624]	@ (800fa44 <sgp4_predict+0xedc>)
 800f7d4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800f7d8:	f7f0 ff1e 	bl	8000618 <__aeabi_dmul>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	460b      	mov	r3, r1
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f7e8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800f7f2:	f7f0 ff11 	bl	8000618 <__aeabi_dmul>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	4610      	mov	r0, r2
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	f7f0 ff07 	bl	8000618 <__aeabi_dmul>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800f812:	460e      	mov	r6, r1
 800f814:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 800f818:	f7f0 fd48 	bl	80002ac <__adddf3>
 800f81c:	4602      	mov	r2, r0
 800f81e:	460b      	mov	r3, r1
 800f820:	e9c6 2300 	strd	r2, r3, [r6]
	xinck=m->xincl+1.5*temp2*m->cosio*m->sinio*cos2u;
 800f824:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f828:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	e9d3 893c 	ldrd	r8, r9, [r3, #240]	@ 0xf0
 800f832:	f04f 0200 	mov.w	r2, #0
 800f836:	4b83      	ldr	r3, [pc, #524]	@ (800fa44 <sgp4_predict+0xedc>)
 800f838:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800f83c:	f7f0 feec 	bl	8000618 <__aeabi_dmul>
 800f840:	4602      	mov	r2, r0
 800f842:	460b      	mov	r3, r1
 800f844:	4610      	mov	r0, r2
 800f846:	4619      	mov	r1, r3
 800f848:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f84c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800f856:	f7f0 fedf 	bl	8000618 <__aeabi_dmul>
 800f85a:	4602      	mov	r2, r0
 800f85c:	460b      	mov	r3, r1
 800f85e:	4610      	mov	r0, r2
 800f860:	4619      	mov	r1, r3
 800f862:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f866:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800f870:	f7f0 fed2 	bl	8000618 <__aeabi_dmul>
 800f874:	4602      	mov	r2, r0
 800f876:	460b      	mov	r3, r1
 800f878:	4610      	mov	r0, r2
 800f87a:	4619      	mov	r1, r3
 800f87c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800f880:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f884:	f7f0 fec8 	bl	8000618 <__aeabi_dmul>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800f890:	460e      	mov	r6, r1
 800f892:	4640      	mov	r0, r8
 800f894:	4649      	mov	r1, r9
 800f896:	f7f0 fd09 	bl	80002ac <__adddf3>
 800f89a:	4602      	mov	r2, r0
 800f89c:	460b      	mov	r3, r1
 800f89e:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdotk=rdot-xn*temp1*m->x1mth2*sin2u;
 800f8a2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f8a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f8aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800f8ae:	f7f0 feb3 	bl	8000618 <__aeabi_dmul>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4610      	mov	r0, r2
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f8be:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 800f8c8:	f7f0 fea6 	bl	8000618 <__aeabi_dmul>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800f8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8dc:	f7f0 fe9c 	bl	8000618 <__aeabi_dmul>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800f8e8:	460e      	mov	r6, r1
 800f8ea:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800f8ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8f2:	f7f0 fcd9 	bl	80002a8 <__aeabi_dsub>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	e9c6 2300 	strd	r2, r3, [r6]
	rfdotk=rfdot+xn*temp1*(m->x1mth2*cos2u+1.5*m->x3thm1);
 800f8fe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800f902:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f906:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800f90a:	f7f0 fe85 	bl	8000618 <__aeabi_dmul>
 800f90e:	4602      	mov	r2, r0
 800f910:	460b      	mov	r3, r1
 800f912:	4690      	mov	r8, r2
 800f914:	4699      	mov	r9, r3
 800f916:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f91a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800f924:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800f928:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f92c:	f7f0 fe74 	bl	8000618 <__aeabi_dmul>
 800f930:	4602      	mov	r2, r0
 800f932:	460b      	mov	r3, r1
 800f934:	4692      	mov	sl, r2
 800f936:	469b      	mov	fp, r3
 800f938:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f93c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800f946:	f04f 0200 	mov.w	r2, #0
 800f94a:	4b3e      	ldr	r3, [pc, #248]	@ (800fa44 <sgp4_predict+0xedc>)
 800f94c:	f7f0 fe64 	bl	8000618 <__aeabi_dmul>
 800f950:	4602      	mov	r2, r0
 800f952:	460b      	mov	r3, r1
 800f954:	4650      	mov	r0, sl
 800f956:	4659      	mov	r1, fp
 800f958:	f7f0 fca8 	bl	80002ac <__adddf3>
 800f95c:	4602      	mov	r2, r0
 800f95e:	460b      	mov	r3, r1
 800f960:	4640      	mov	r0, r8
 800f962:	4649      	mov	r1, r9
 800f964:	f7f0 fe58 	bl	8000618 <__aeabi_dmul>
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800f970:	460e      	mov	r6, r1
 800f972:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800f976:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f97a:	f7f0 fc97 	bl	80002ac <__adddf3>
 800f97e:	4602      	mov	r2, r0
 800f980:	460b      	mov	r3, r1
 800f982:	e946 2302 	strd	r2, r3, [r6, #-8]

	/* Orientation vectors */
	sinuk=sin(uk);
 800f986:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f98a:	461e      	mov	r6, r3
 800f98c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800f990:	ed13 0b02 	vldr	d0, [r3, #-8]
 800f994:	f00e fe00 	bl	801e598 <sin>
 800f998:	ed86 0b00 	vstr	d0, [r6]
	cosuk=cos(uk);
 800f99c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f9a0:	461e      	mov	r6, r3
 800f9a2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800f9a6:	ed13 0b02 	vldr	d0, [r3, #-8]
 800f9aa:	f00e fd99 	bl	801e4e0 <cos>
 800f9ae:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinik=sin(xinck);
 800f9b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f9b6:	461e      	mov	r6, r3
 800f9b8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800f9bc:	ed13 0b02 	vldr	d0, [r3, #-8]
 800f9c0:	f00e fdea 	bl	801e598 <sin>
 800f9c4:	ed86 0b00 	vstr	d0, [r6]
	cosik=cos(xinck);
 800f9c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f9cc:	461e      	mov	r6, r3
 800f9ce:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800f9d2:	ed13 0b02 	vldr	d0, [r3, #-8]
 800f9d6:	f00e fd83 	bl	801e4e0 <cos>
 800f9da:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinnok=sin(xnodek);
 800f9de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800f9e2:	461e      	mov	r6, r3
 800f9e4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800f9e8:	ed93 0b00 	vldr	d0, [r3]
 800f9ec:	f00e fdd4 	bl	801e598 <sin>
 800f9f0:	ed86 0b00 	vstr	d0, [r6]
	cosnok=cos(xnodek);
 800f9f4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800f9f8:	461e      	mov	r6, r3
 800f9fa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800f9fe:	ed93 0b00 	vldr	d0, [r3]
 800fa02:	f00e fd6d 	bl	801e4e0 <cos>
 800fa06:	ed06 0b02 	vstr	d0, [r6, #-8]
	xmx=-sinnok*cosik;
 800fa0a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800fa0e:	681c      	ldr	r4, [r3, #0]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800fa16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fa1a:	461e      	mov	r6, r3
 800fa1c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800fa20:	4619      	mov	r1, r3
 800fa22:	4622      	mov	r2, r4
 800fa24:	462b      	mov	r3, r5
 800fa26:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fa2a:	f7f0 fdf5 	bl	8000618 <__aeabi_dmul>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	e9c6 2300 	strd	r2, r3, [r6]
 800fa36:	e007      	b.n	800fa48 <sgp4_predict+0xee0>
 800fa38:	3ff00000 	.word	0x3ff00000
 800fa3c:	3fe00000 	.word	0x3fe00000
 800fa40:	3fd00000 	.word	0x3fd00000
 800fa44:	3ff80000 	.word	0x3ff80000
	xmy=cosnok*cosik;
 800fa48:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fa4c:	461c      	mov	r4, r3
 800fa4e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800fa52:	4619      	mov	r1, r3
 800fa54:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800fa58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa5c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fa60:	f7f0 fdda 	bl	8000618 <__aeabi_dmul>
 800fa64:	4602      	mov	r2, r0
 800fa66:	460b      	mov	r3, r1
 800fa68:	e944 2302 	strd	r2, r3, [r4, #-8]
	ux=xmx*sinuk+cosnok*cosuk;
 800fa6c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fa70:	4619      	mov	r1, r3
 800fa72:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa7e:	f7f0 fdcb 	bl	8000618 <__aeabi_dmul>
 800fa82:	4602      	mov	r2, r0
 800fa84:	460b      	mov	r3, r1
 800fa86:	4614      	mov	r4, r2
 800fa88:	461d      	mov	r5, r3
 800fa8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800fa8e:	4619      	mov	r1, r3
 800fa90:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fa94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa98:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fa9c:	f7f0 fdbc 	bl	8000618 <__aeabi_dmul>
 800faa0:	4602      	mov	r2, r0
 800faa2:	460b      	mov	r3, r1
 800faa4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800faa8:	460e      	mov	r6, r1
 800faaa:	4620      	mov	r0, r4
 800faac:	4629      	mov	r1, r5
 800faae:	f7f0 fbfd 	bl	80002ac <__adddf3>
 800fab2:	4602      	mov	r2, r0
 800fab4:	460b      	mov	r3, r1
 800fab6:	e9c6 2300 	strd	r2, r3, [r6]
	uy=xmy*sinuk+sinnok*cosuk;
 800faba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fabe:	4619      	mov	r1, r3
 800fac0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800facc:	f7f0 fda4 	bl	8000618 <__aeabi_dmul>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4614      	mov	r4, r2
 800fad6:	461d      	mov	r5, r3
 800fad8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800fadc:	4619      	mov	r1, r3
 800fade:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faea:	f7f0 fd95 	bl	8000618 <__aeabi_dmul>
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800faf6:	460e      	mov	r6, r1
 800faf8:	4620      	mov	r0, r4
 800fafa:	4629      	mov	r1, r5
 800fafc:	f7f0 fbd6 	bl	80002ac <__adddf3>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	e946 2302 	strd	r2, r3, [r6, #-8]
	uz=sinik*sinuk;
 800fb08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fb0c:	461c      	mov	r4, r3
 800fb0e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800fb12:	4619      	mov	r1, r3
 800fb14:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb20:	f7f0 fd7a 	bl	8000618 <__aeabi_dmul>
 800fb24:	4602      	mov	r2, r0
 800fb26:	460b      	mov	r3, r1
 800fb28:	e9c4 2300 	strd	r2, r3, [r4]
	vx=xmx*cosuk-cosnok*sinuk;
 800fb2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fb30:	4619      	mov	r1, r3
 800fb32:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fb36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb3e:	f7f0 fd6b 	bl	8000618 <__aeabi_dmul>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	4614      	mov	r4, r2
 800fb48:	461d      	mov	r5, r3
 800fb4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800fb4e:	4619      	mov	r1, r3
 800fb50:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb58:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fb5c:	f7f0 fd5c 	bl	8000618 <__aeabi_dmul>
 800fb60:	4602      	mov	r2, r0
 800fb62:	460b      	mov	r3, r1
 800fb64:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800fb68:	460e      	mov	r6, r1
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	4629      	mov	r1, r5
 800fb6e:	f7f0 fb9b 	bl	80002a8 <__aeabi_dsub>
 800fb72:	4602      	mov	r2, r0
 800fb74:	460b      	mov	r3, r1
 800fb76:	e946 2302 	strd	r2, r3, [r6, #-8]
	vy=xmy*cosuk-sinnok*sinuk;
 800fb7a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fb7e:	4619      	mov	r1, r3
 800fb80:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fb84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb88:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fb8c:	f7f0 fd44 	bl	8000618 <__aeabi_dmul>
 800fb90:	4602      	mov	r2, r0
 800fb92:	460b      	mov	r3, r1
 800fb94:	4614      	mov	r4, r2
 800fb96:	461d      	mov	r5, r3
 800fb98:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbaa:	f7f0 fd35 	bl	8000618 <__aeabi_dmul>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	f107 0120 	add.w	r1, r7, #32
 800fbb6:	460e      	mov	r6, r1
 800fbb8:	4620      	mov	r0, r4
 800fbba:	4629      	mov	r1, r5
 800fbbc:	f7f0 fb74 	bl	80002a8 <__aeabi_dsub>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	e9c6 2300 	strd	r2, r3, [r6]
	vz=sinik*cosuk;
 800fbc8:	f107 0320 	add.w	r3, r7, #32
 800fbcc:	461c      	mov	r4, r3
 800fbce:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fbd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fbdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbe0:	f7f0 fd1a 	bl	8000618 <__aeabi_dmul>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	e944 2302 	strd	r2, r3, [r4, #-8]

	/* Position and velocity */
	output->pos[0] = rk*ux;
 800fbec:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbfe:	f7f0 fd0b 	bl	8000618 <__aeabi_dmul>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fc0a:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 800fc0e:	6809      	ldr	r1, [r1, #0]
 800fc10:	e9c1 2306 	strd	r2, r3, [r1, #24]
	output->pos[1] = rk*uy;
 800fc14:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800fc18:	4619      	mov	r1, r3
 800fc1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fc1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc26:	f7f0 fcf7 	bl	8000618 <__aeabi_dmul>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fc32:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 800fc36:	6809      	ldr	r1, [r1, #0]
 800fc38:	e9c1 2308 	strd	r2, r3, [r1, #32]
	output->pos[2] = rk*uz;
 800fc3c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800fc40:	4619      	mov	r1, r3
 800fc42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc4e:	f7f0 fce3 	bl	8000618 <__aeabi_dmul>
 800fc52:	4602      	mov	r2, r0
 800fc54:	460b      	mov	r3, r1
 800fc56:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fc5a:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 800fc5e:	6809      	ldr	r1, [r1, #0]
 800fc60:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	output->vel[0] = rdotk*ux+rfdotk*vx;
 800fc64:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800fc68:	4619      	mov	r1, r3
 800fc6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc76:	f7f0 fccf 	bl	8000618 <__aeabi_dmul>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	4614      	mov	r4, r2
 800fc80:	461d      	mov	r5, r3
 800fc82:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800fc86:	4619      	mov	r1, r3
 800fc88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fc8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc90:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fc94:	f7f0 fcc0 	bl	8000618 <__aeabi_dmul>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f0 fb04 	bl	80002ac <__adddf3>
 800fca4:	4602      	mov	r2, r0
 800fca6:	460b      	mov	r3, r1
 800fca8:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fcac:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 800fcb0:	6809      	ldr	r1, [r1, #0]
 800fcb2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	output->vel[1] = rdotk*uy+rfdotk*vy;
 800fcb6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800fcba:	4619      	mov	r1, r3
 800fcbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fcc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fcc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcc8:	f7f0 fca6 	bl	8000618 <__aeabi_dmul>
 800fccc:	4602      	mov	r2, r0
 800fcce:	460b      	mov	r3, r1
 800fcd0:	4614      	mov	r4, r2
 800fcd2:	461d      	mov	r5, r3
 800fcd4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800fcd8:	4619      	mov	r1, r3
 800fcda:	f107 0320 	add.w	r3, r7, #32
 800fcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fce6:	f7f0 fc97 	bl	8000618 <__aeabi_dmul>
 800fcea:	4602      	mov	r2, r0
 800fcec:	460b      	mov	r3, r1
 800fcee:	4620      	mov	r0, r4
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	f7f0 fadb 	bl	80002ac <__adddf3>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fcfe:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 800fd02:	6809      	ldr	r1, [r1, #0]
 800fd04:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	output->vel[2] = rdotk*uz+rfdotk*vz;
 800fd08:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd1a:	f7f0 fc7d 	bl	8000618 <__aeabi_dmul>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	460b      	mov	r3, r1
 800fd22:	4614      	mov	r4, r2
 800fd24:	461d      	mov	r5, r3
 800fd26:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	f107 0320 	add.w	r3, r7, #32
 800fd30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd34:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800fd38:	f7f0 fc6e 	bl	8000618 <__aeabi_dmul>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	460b      	mov	r3, r1
 800fd40:	4620      	mov	r0, r4
 800fd42:	4629      	mov	r1, r5
 800fd44:	f7f0 fab2 	bl	80002ac <__adddf3>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fd50:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 800fd54:	6809      	ldr	r1, [r1, #0]
 800fd56:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	/* Phase in radians */
	output->phase=xlt-xnode-omgadf+TWO_PI;
 800fd5a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800fd5e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800fd62:	f7f0 faa1 	bl	80002a8 <__aeabi_dsub>
 800fd66:	4602      	mov	r2, r0
 800fd68:	460b      	mov	r3, r1
 800fd6a:	4610      	mov	r0, r2
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800fd72:	f7f0 fa99 	bl	80002a8 <__aeabi_dsub>
 800fd76:	4602      	mov	r2, r0
 800fd78:	460b      	mov	r3, r1
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	a338      	add	r3, pc, #224	@ (adr r3, 800fe60 <sgp4_predict+0x12f8>)
 800fd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd84:	f7f0 fa92 	bl	80002ac <__adddf3>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fd90:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 800fd94:	6809      	ldr	r1, [r1, #0]
 800fd96:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	if (output->phase<0.0)
 800fd9a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fd9e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800fda8:	f04f 0200 	mov.w	r2, #0
 800fdac:	f04f 0300 	mov.w	r3, #0
 800fdb0:	f7f0 fea4 	bl	8000afc <__aeabi_dcmplt>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d014      	beq.n	800fde4 <sgp4_predict+0x127c>
		output->phase+=TWO_PI;
 800fdba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fdbe:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800fdc8:	a325      	add	r3, pc, #148	@ (adr r3, 800fe60 <sgp4_predict+0x12f8>)
 800fdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdce:	f7f0 fa6d 	bl	80002ac <__adddf3>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fdda:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 800fdde:	6809      	ldr	r1, [r1, #0]
 800fde0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	output->phase=FMod2p(output->phase);
 800fde4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fde8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 800fdf2:	eeb0 0a47 	vmov.f32	s0, s14
 800fdf6:	eef0 0a67 	vmov.f32	s1, s15
 800fdfa:	f000 fe51 	bl	8010aa0 <FMod2p>
 800fdfe:	eeb0 7a40 	vmov.f32	s14, s0
 800fe02:	eef0 7a60 	vmov.f32	s15, s1
 800fe06:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe0a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

	output->xinck = xinck;
 800fe14:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe18:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800fe1c:	6819      	ldr	r1, [r3, #0]
 800fe1e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800fe22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe26:	e9c1 2300 	strd	r2, r3, [r1]
	output->omgadf = omgadf;
 800fe2a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe2e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800fe32:	6819      	ldr	r1, [r3, #0]
 800fe34:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800fe38:	e9c1 2302 	strd	r2, r3, [r1, #8]
	output->xnodek = xnodek;
 800fe3c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe40:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800fe44:	6819      	ldr	r1, [r3, #0]
 800fe46:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800fe4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4e:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 800fe52:	bf00      	nop
 800fe54:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe5e:	bf00      	nop
 800fe60:	54442d18 	.word	0x54442d18
 800fe64:	401921fb 	.word	0x401921fb

0800fe68 <Delta_ET>:
 * The function Delta_ET has been added to allow calculations on the position of the sun.  It provides the difference between UT (approximately the same as UTC) and ET (now referred to as TDT). This function is based on a least squares fit of data from 1950 to 1991 and will need to be updated periodically. Values determined using data from 1950-1991 in the 1990 Astronomical Almanac.  See DELTA_ET.WQ1 for details.
 *
 * \copyright GPLv2+
 **/
double Delta_ET(double year)
{
 800fe68:	b5b0      	push	{r4, r5, r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	ed87 0b00 	vstr	d0, [r7]
	double delta_et;

	delta_et=26.465+0.747622*(year-1950)+1.886913*sin(2*M_PI*(year-1975)/33);
 800fe72:	a332      	add	r3, pc, #200	@ (adr r3, 800ff3c <Delta_ET+0xd4>)
 800fe74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe7c:	f7f0 fa14 	bl	80002a8 <__aeabi_dsub>
 800fe80:	4602      	mov	r2, r0
 800fe82:	460b      	mov	r3, r1
 800fe84:	4610      	mov	r0, r2
 800fe86:	4619      	mov	r1, r3
 800fe88:	a32e      	add	r3, pc, #184	@ (adr r3, 800ff44 <Delta_ET+0xdc>)
 800fe8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8e:	f7f0 fbc3 	bl	8000618 <__aeabi_dmul>
 800fe92:	4602      	mov	r2, r0
 800fe94:	460b      	mov	r3, r1
 800fe96:	4610      	mov	r0, r2
 800fe98:	4619      	mov	r1, r3
 800fe9a:	a32c      	add	r3, pc, #176	@ (adr r3, 800ff4c <Delta_ET+0xe4>)
 800fe9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea0:	f7f0 fa04 	bl	80002ac <__adddf3>
 800fea4:	4602      	mov	r2, r0
 800fea6:	460b      	mov	r3, r1
 800fea8:	4614      	mov	r4, r2
 800feaa:	461d      	mov	r5, r3
 800feac:	a329      	add	r3, pc, #164	@ (adr r3, 800ff54 <Delta_ET+0xec>)
 800feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800feb6:	f7f0 f9f7 	bl	80002a8 <__aeabi_dsub>
 800feba:	4602      	mov	r2, r0
 800febc:	460b      	mov	r3, r1
 800febe:	4610      	mov	r0, r2
 800fec0:	4619      	mov	r1, r3
 800fec2:	a326      	add	r3, pc, #152	@ (adr r3, 800ff5c <Delta_ET+0xf4>)
 800fec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec8:	f7f0 fba6 	bl	8000618 <__aeabi_dmul>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	4610      	mov	r0, r2
 800fed2:	4619      	mov	r1, r3
 800fed4:	f04f 0200 	mov.w	r2, #0
 800fed8:	4b17      	ldr	r3, [pc, #92]	@ (800ff38 <Delta_ET+0xd0>)
 800feda:	f7f0 fcc7 	bl	800086c <__aeabi_ddiv>
 800fede:	4602      	mov	r2, r0
 800fee0:	460b      	mov	r3, r1
 800fee2:	ec43 2b17 	vmov	d7, r2, r3
 800fee6:	eeb0 0a47 	vmov.f32	s0, s14
 800feea:	eef0 0a67 	vmov.f32	s1, s15
 800feee:	f00e fb53 	bl	801e598 <sin>
 800fef2:	ec51 0b10 	vmov	r0, r1, d0
 800fef6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff30 <Delta_ET+0xc8>)
 800fef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefc:	f7f0 fb8c 	bl	8000618 <__aeabi_dmul>
 800ff00:	4602      	mov	r2, r0
 800ff02:	460b      	mov	r3, r1
 800ff04:	4620      	mov	r0, r4
 800ff06:	4629      	mov	r1, r5
 800ff08:	f7f0 f9d0 	bl	80002ac <__adddf3>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	460b      	mov	r3, r1
 800ff10:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return delta_et;
 800ff14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ff18:	ec43 2b17 	vmov	d7, r2, r3
}
 800ff1c:	eeb0 0a47 	vmov.f32	s0, s14
 800ff20:	eef0 0a67 	vmov.f32	s1, s15
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bdb0      	pop	{r4, r5, r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	f3af 8000 	nop.w
 800ff30:	af965b21 	.word	0xaf965b21
 800ff34:	3ffe30cb 	.word	0x3ffe30cb
 800ff38:	40408000 	.word	0x40408000
 800ff3c:	00000000 	.word	0x00000000
 800ff40:	409e7800 	.word	0x409e7800
 800ff44:	f8f8a4c2 	.word	0xf8f8a4c2
 800ff48:	3fe7ec84 	.word	0x3fe7ec84
 800ff4c:	3d70a3d7 	.word	0x3d70a3d7
 800ff50:	403a770a 	.word	0x403a770a
 800ff54:	00000000 	.word	0x00000000
 800ff58:	409edc00 	.word	0x409edc00
 800ff5c:	54442d18 	.word	0x54442d18
 800ff60:	401921fb 	.word	0x401921fb
 800ff64:	00000000 	.word	0x00000000

0800ff68 <Radians>:
 * Returns angle in radians from argument in degrees.
 *
 * \copyright GPLv2+
 **/
double Radians(double arg)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	ed87 0b00 	vstr	d0, [r7]
	/* Returns angle in radians from argument in degrees */
	return (arg*M_PI/180.0);
 800ff72:	a30e      	add	r3, pc, #56	@ (adr r3, 800ffac <Radians+0x44>)
 800ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ff7c:	f7f0 fb4c 	bl	8000618 <__aeabi_dmul>
 800ff80:	4602      	mov	r2, r0
 800ff82:	460b      	mov	r3, r1
 800ff84:	4610      	mov	r0, r2
 800ff86:	4619      	mov	r1, r3
 800ff88:	f04f 0200 	mov.w	r2, #0
 800ff8c:	4b06      	ldr	r3, [pc, #24]	@ (800ffa8 <Radians+0x40>)
 800ff8e:	f7f0 fc6d 	bl	800086c <__aeabi_ddiv>
 800ff92:	4602      	mov	r2, r0
 800ff94:	460b      	mov	r3, r1
 800ff96:	ec43 2b17 	vmov	d7, r2, r3
}
 800ff9a:	eeb0 0a47 	vmov.f32	s0, s14
 800ff9e:	eef0 0a67 	vmov.f32	s1, s15
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	40668000 	.word	0x40668000
 800ffac:	54442d18 	.word	0x54442d18
 800ffb0:	400921fb 	.word	0x400921fb
 800ffb4:	00000000 	.word	0x00000000

0800ffb8 <sun_predict>:
	/* Returns angle in degrees from argument in radians */
	return (arg*180.0/M_PI);
}

void sun_predict(double time, double position[3])
{
 800ffb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ffbc:	b09e      	sub	sp, #120	@ 0x78
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	ed87 0b02 	vstr	d0, [r7, #8]
 800ffc4:	6078      	str	r0, [r7, #4]
	double jul_utc = time + JULIAN_TIME_DIFF;
 800ffc6:	f20f 4388 	addw	r3, pc, #1160	@ 0x488
 800ffca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ffd2:	f7f0 f96b 	bl	80002ac <__adddf3>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	460b      	mov	r3, r1
 800ffda:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double mjd = jul_utc - 2415020.0;
 800ffde:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 800ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800ffea:	f7f0 f95d 	bl	80002a8 <__aeabi_dsub>
 800ffee:	4602      	mov	r2, r0
 800fff0:	460b      	mov	r3, r1
 800fff2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	double year = 1900 + mjd / 365.25;
 800fff6:	f20f 4368 	addw	r3, pc, #1128	@ 0x468
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010002:	f7f0 fc33 	bl	800086c <__aeabi_ddiv>
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	4610      	mov	r0, r2
 801000c:	4619      	mov	r1, r3
 801000e:	f20f 4358 	addw	r3, pc, #1112	@ 0x458
 8010012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010016:	f7f0 f949 	bl	80002ac <__adddf3>
 801001a:	4602      	mov	r2, r0
 801001c:	460b      	mov	r3, r1
 801001e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	double T = (mjd + Delta_ET(year) / SECONDS_PER_DAY) / 36525.0;
 8010022:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8010026:	f7ff ff1f 	bl	800fe68 <Delta_ET>
 801002a:	ec51 0b10 	vmov	r0, r1, d0
 801002e:	f20f 4340 	addw	r3, pc, #1088	@ 0x440
 8010032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010036:	f7f0 fc19 	bl	800086c <__aeabi_ddiv>
 801003a:	4602      	mov	r2, r0
 801003c:	460b      	mov	r3, r1
 801003e:	4610      	mov	r0, r2
 8010040:	4619      	mov	r1, r3
 8010042:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010046:	f7f0 f931 	bl	80002ac <__adddf3>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	4610      	mov	r0, r2
 8010050:	4619      	mov	r1, r3
 8010052:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8010056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005a:	f7f0 fc07 	bl	800086c <__aeabi_ddiv>
 801005e:	4602      	mov	r2, r0
 8010060:	460b      	mov	r3, r1
 8010062:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double M = Radians(fmod(358.47583+fmod(35999.04975*T,360.0)-(0.000150+0.0000033*T)*Sqr(T),360.0));
 8010066:	f20f 4318 	addw	r3, pc, #1048	@ 0x418
 801006a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010072:	f7f0 fad1 	bl	8000618 <__aeabi_dmul>
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	ec43 2b17 	vmov	d7, r2, r3
 801007e:	ed9f 1be4 	vldr	d1, [pc, #912]	@ 8010410 <sun_predict+0x458>
 8010082:	eeb0 0a47 	vmov.f32	s0, s14
 8010086:	eef0 0a67 	vmov.f32	s1, s15
 801008a:	f00d ff85 	bl	801df98 <fmod>
 801008e:	ec51 0b10 	vmov	r0, r1, d0
 8010092:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8010488 <sun_predict+0x4d0>)
 8010094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010098:	f7f0 f908 	bl	80002ac <__adddf3>
 801009c:	4602      	mov	r2, r0
 801009e:	460b      	mov	r3, r1
 80100a0:	4614      	mov	r4, r2
 80100a2:	461d      	mov	r5, r3
 80100a4:	a3fa      	add	r3, pc, #1000	@ (adr r3, 8010490 <sun_predict+0x4d8>)
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80100ae:	f7f0 fab3 	bl	8000618 <__aeabi_dmul>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4610      	mov	r0, r2
 80100b8:	4619      	mov	r1, r3
 80100ba:	a3f7      	add	r3, pc, #988	@ (adr r3, 8010498 <sun_predict+0x4e0>)
 80100bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c0:	f7f0 f8f4 	bl	80002ac <__adddf3>
 80100c4:	4602      	mov	r2, r0
 80100c6:	460b      	mov	r3, r1
 80100c8:	4690      	mov	r8, r2
 80100ca:	4699      	mov	r9, r3
 80100cc:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 80100d0:	f000 fcce 	bl	8010a70 <Sqr>
 80100d4:	ec53 2b10 	vmov	r2, r3, d0
 80100d8:	4640      	mov	r0, r8
 80100da:	4649      	mov	r1, r9
 80100dc:	f7f0 fa9c 	bl	8000618 <__aeabi_dmul>
 80100e0:	4602      	mov	r2, r0
 80100e2:	460b      	mov	r3, r1
 80100e4:	4620      	mov	r0, r4
 80100e6:	4629      	mov	r1, r5
 80100e8:	f7f0 f8de 	bl	80002a8 <__aeabi_dsub>
 80100ec:	4602      	mov	r2, r0
 80100ee:	460b      	mov	r3, r1
 80100f0:	ec43 2b17 	vmov	d7, r2, r3
 80100f4:	ed9f 1bc6 	vldr	d1, [pc, #792]	@ 8010410 <sun_predict+0x458>
 80100f8:	eeb0 0a47 	vmov.f32	s0, s14
 80100fc:	eef0 0a67 	vmov.f32	s1, s15
 8010100:	f00d ff4a 	bl	801df98 <fmod>
 8010104:	eeb0 7a40 	vmov.f32	s14, s0
 8010108:	eef0 7a60 	vmov.f32	s15, s1
 801010c:	eeb0 0a47 	vmov.f32	s0, s14
 8010110:	eef0 0a67 	vmov.f32	s1, s15
 8010114:	f7ff ff28 	bl	800ff68 <Radians>
 8010118:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
	double L = Radians(fmod(279.69668+fmod(36000.76892*T,360.0)+0.0003025*Sqr(T),360.0));
 801011c:	a3e0      	add	r3, pc, #896	@ (adr r3, 80104a0 <sun_predict+0x4e8>)
 801011e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010122:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010126:	f7f0 fa77 	bl	8000618 <__aeabi_dmul>
 801012a:	4602      	mov	r2, r0
 801012c:	460b      	mov	r3, r1
 801012e:	ec43 2b17 	vmov	d7, r2, r3
 8010132:	ed9f 1bb7 	vldr	d1, [pc, #732]	@ 8010410 <sun_predict+0x458>
 8010136:	eeb0 0a47 	vmov.f32	s0, s14
 801013a:	eef0 0a67 	vmov.f32	s1, s15
 801013e:	f00d ff2b 	bl	801df98 <fmod>
 8010142:	ec51 0b10 	vmov	r0, r1, d0
 8010146:	a3d8      	add	r3, pc, #864	@ (adr r3, 80104a8 <sun_predict+0x4f0>)
 8010148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014c:	f7f0 f8ae 	bl	80002ac <__adddf3>
 8010150:	4602      	mov	r2, r0
 8010152:	460b      	mov	r3, r1
 8010154:	4614      	mov	r4, r2
 8010156:	461d      	mov	r5, r3
 8010158:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 801015c:	f000 fc88 	bl	8010a70 <Sqr>
 8010160:	ec51 0b10 	vmov	r0, r1, d0
 8010164:	a3d2      	add	r3, pc, #840	@ (adr r3, 80104b0 <sun_predict+0x4f8>)
 8010166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016a:	f7f0 fa55 	bl	8000618 <__aeabi_dmul>
 801016e:	4602      	mov	r2, r0
 8010170:	460b      	mov	r3, r1
 8010172:	4620      	mov	r0, r4
 8010174:	4629      	mov	r1, r5
 8010176:	f7f0 f899 	bl	80002ac <__adddf3>
 801017a:	4602      	mov	r2, r0
 801017c:	460b      	mov	r3, r1
 801017e:	ec43 2b17 	vmov	d7, r2, r3
 8010182:	ed9f 1ba3 	vldr	d1, [pc, #652]	@ 8010410 <sun_predict+0x458>
 8010186:	eeb0 0a47 	vmov.f32	s0, s14
 801018a:	eef0 0a67 	vmov.f32	s1, s15
 801018e:	f00d ff03 	bl	801df98 <fmod>
 8010192:	eeb0 7a40 	vmov.f32	s14, s0
 8010196:	eef0 7a60 	vmov.f32	s15, s1
 801019a:	eeb0 0a47 	vmov.f32	s0, s14
 801019e:	eef0 0a67 	vmov.f32	s1, s15
 80101a2:	f7ff fee1 	bl	800ff68 <Radians>
 80101a6:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
	double e = 0.01675104-(0.0000418+0.000000126*T)*T;
 80101aa:	a3c3      	add	r3, pc, #780	@ (adr r3, 80104b8 <sun_predict+0x500>)
 80101ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80101b4:	f7f0 fa30 	bl	8000618 <__aeabi_dmul>
 80101b8:	4602      	mov	r2, r0
 80101ba:	460b      	mov	r3, r1
 80101bc:	4610      	mov	r0, r2
 80101be:	4619      	mov	r1, r3
 80101c0:	a3bf      	add	r3, pc, #764	@ (adr r3, 80104c0 <sun_predict+0x508>)
 80101c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c6:	f7f0 f871 	bl	80002ac <__adddf3>
 80101ca:	4602      	mov	r2, r0
 80101cc:	460b      	mov	r3, r1
 80101ce:	4610      	mov	r0, r2
 80101d0:	4619      	mov	r1, r3
 80101d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80101d6:	f7f0 fa1f 	bl	8000618 <__aeabi_dmul>
 80101da:	4602      	mov	r2, r0
 80101dc:	460b      	mov	r3, r1
 80101de:	a1ba      	add	r1, pc, #744	@ (adr r1, 80104c8 <sun_predict+0x510>)
 80101e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101e4:	f7f0 f860 	bl	80002a8 <__aeabi_dsub>
 80101e8:	4602      	mov	r2, r0
 80101ea:	460b      	mov	r3, r1
 80101ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double C = Radians((1.919460-(0.004789+0.000014*T)*T)*sin(M)+(0.020094-0.000100*T)*sin(2*M)+0.000293*sin(3*M));
 80101f0:	a3b7      	add	r3, pc, #732	@ (adr r3, 80104d0 <sun_predict+0x518>)
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80101fa:	f7f0 fa0d 	bl	8000618 <__aeabi_dmul>
 80101fe:	4602      	mov	r2, r0
 8010200:	460b      	mov	r3, r1
 8010202:	4610      	mov	r0, r2
 8010204:	4619      	mov	r1, r3
 8010206:	a3b4      	add	r3, pc, #720	@ (adr r3, 80104d8 <sun_predict+0x520>)
 8010208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020c:	f7f0 f84e 	bl	80002ac <__adddf3>
 8010210:	4602      	mov	r2, r0
 8010212:	460b      	mov	r3, r1
 8010214:	4610      	mov	r0, r2
 8010216:	4619      	mov	r1, r3
 8010218:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801021c:	f7f0 f9fc 	bl	8000618 <__aeabi_dmul>
 8010220:	4602      	mov	r2, r0
 8010222:	460b      	mov	r3, r1
 8010224:	a1ae      	add	r1, pc, #696	@ (adr r1, 80104e0 <sun_predict+0x528>)
 8010226:	e9d1 0100 	ldrd	r0, r1, [r1]
 801022a:	f7f0 f83d 	bl	80002a8 <__aeabi_dsub>
 801022e:	4602      	mov	r2, r0
 8010230:	460b      	mov	r3, r1
 8010232:	4614      	mov	r4, r2
 8010234:	461d      	mov	r5, r3
 8010236:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 801023a:	f00e f9ad 	bl	801e598 <sin>
 801023e:	ec53 2b10 	vmov	r2, r3, d0
 8010242:	4620      	mov	r0, r4
 8010244:	4629      	mov	r1, r5
 8010246:	f7f0 f9e7 	bl	8000618 <__aeabi_dmul>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	4614      	mov	r4, r2
 8010250:	461d      	mov	r5, r3
 8010252:	a3a5      	add	r3, pc, #660	@ (adr r3, 80104e8 <sun_predict+0x530>)
 8010254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010258:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801025c:	f7f0 f9dc 	bl	8000618 <__aeabi_dmul>
 8010260:	4602      	mov	r2, r0
 8010262:	460b      	mov	r3, r1
 8010264:	a1a2      	add	r1, pc, #648	@ (adr r1, 80104f0 <sun_predict+0x538>)
 8010266:	e9d1 0100 	ldrd	r0, r1, [r1]
 801026a:	f7f0 f81d 	bl	80002a8 <__aeabi_dsub>
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	4690      	mov	r8, r2
 8010274:	4699      	mov	r9, r3
 8010276:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	f7f0 f815 	bl	80002ac <__adddf3>
 8010282:	4602      	mov	r2, r0
 8010284:	460b      	mov	r3, r1
 8010286:	ec43 2b17 	vmov	d7, r2, r3
 801028a:	eeb0 0a47 	vmov.f32	s0, s14
 801028e:	eef0 0a67 	vmov.f32	s1, s15
 8010292:	f00e f981 	bl	801e598 <sin>
 8010296:	ec53 2b10 	vmov	r2, r3, d0
 801029a:	4640      	mov	r0, r8
 801029c:	4649      	mov	r1, r9
 801029e:	f7f0 f9bb 	bl	8000618 <__aeabi_dmul>
 80102a2:	4602      	mov	r2, r0
 80102a4:	460b      	mov	r3, r1
 80102a6:	4620      	mov	r0, r4
 80102a8:	4629      	mov	r1, r5
 80102aa:	f7ef ffff 	bl	80002ac <__adddf3>
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	4614      	mov	r4, r2
 80102b4:	461d      	mov	r5, r3
 80102b6:	f04f 0200 	mov.w	r2, #0
 80102ba:	4b63      	ldr	r3, [pc, #396]	@ (8010448 <sun_predict+0x490>)
 80102bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80102c0:	f7f0 f9aa 	bl	8000618 <__aeabi_dmul>
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	ec43 2b17 	vmov	d7, r2, r3
 80102cc:	eeb0 0a47 	vmov.f32	s0, s14
 80102d0:	eef0 0a67 	vmov.f32	s1, s15
 80102d4:	f00e f960 	bl	801e598 <sin>
 80102d8:	ec51 0b10 	vmov	r0, r1, d0
 80102dc:	a34e      	add	r3, pc, #312	@ (adr r3, 8010418 <sun_predict+0x460>)
 80102de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e2:	f7f0 f999 	bl	8000618 <__aeabi_dmul>
 80102e6:	4602      	mov	r2, r0
 80102e8:	460b      	mov	r3, r1
 80102ea:	4620      	mov	r0, r4
 80102ec:	4629      	mov	r1, r5
 80102ee:	f7ef ffdd 	bl	80002ac <__adddf3>
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	ec43 2b17 	vmov	d7, r2, r3
 80102fa:	eeb0 0a47 	vmov.f32	s0, s14
 80102fe:	eef0 0a67 	vmov.f32	s1, s15
 8010302:	f7ff fe31 	bl	800ff68 <Radians>
 8010306:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	double O = Radians(fmod(259.18-1934.142*T,360.0));
 801030a:	a345      	add	r3, pc, #276	@ (adr r3, 8010420 <sun_predict+0x468>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010314:	f7f0 f980 	bl	8000618 <__aeabi_dmul>
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	a142      	add	r1, pc, #264	@ (adr r1, 8010428 <sun_predict+0x470>)
 801031e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010322:	f7ef ffc1 	bl	80002a8 <__aeabi_dsub>
 8010326:	4602      	mov	r2, r0
 8010328:	460b      	mov	r3, r1
 801032a:	ec43 2b17 	vmov	d7, r2, r3
 801032e:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8010410 <sun_predict+0x458>
 8010332:	eeb0 0a47 	vmov.f32	s0, s14
 8010336:	eef0 0a67 	vmov.f32	s1, s15
 801033a:	f00d fe2d 	bl	801df98 <fmod>
 801033e:	eeb0 7a40 	vmov.f32	s14, s0
 8010342:	eef0 7a60 	vmov.f32	s15, s1
 8010346:	eeb0 0a47 	vmov.f32	s0, s14
 801034a:	eef0 0a67 	vmov.f32	s1, s15
 801034e:	f7ff fe0b 	bl	800ff68 <Radians>
 8010352:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double Lsa = fmod(L+C-Radians(0.00569-0.00479*sin(O)), 2*M_PI);
 8010356:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801035a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801035e:	f7ef ffa5 	bl	80002ac <__adddf3>
 8010362:	4602      	mov	r2, r0
 8010364:	460b      	mov	r3, r1
 8010366:	4614      	mov	r4, r2
 8010368:	461d      	mov	r5, r3
 801036a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 801036e:	f00e f913 	bl	801e598 <sin>
 8010372:	ec51 0b10 	vmov	r0, r1, d0
 8010376:	a32e      	add	r3, pc, #184	@ (adr r3, 8010430 <sun_predict+0x478>)
 8010378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037c:	f7f0 f94c 	bl	8000618 <__aeabi_dmul>
 8010380:	4602      	mov	r2, r0
 8010382:	460b      	mov	r3, r1
 8010384:	a12c      	add	r1, pc, #176	@ (adr r1, 8010438 <sun_predict+0x480>)
 8010386:	e9d1 0100 	ldrd	r0, r1, [r1]
 801038a:	f7ef ff8d 	bl	80002a8 <__aeabi_dsub>
 801038e:	4602      	mov	r2, r0
 8010390:	460b      	mov	r3, r1
 8010392:	ec43 2b17 	vmov	d7, r2, r3
 8010396:	eeb0 0a47 	vmov.f32	s0, s14
 801039a:	eef0 0a67 	vmov.f32	s1, s15
 801039e:	f7ff fde3 	bl	800ff68 <Radians>
 80103a2:	ec53 2b10 	vmov	r2, r3, d0
 80103a6:	4620      	mov	r0, r4
 80103a8:	4629      	mov	r1, r5
 80103aa:	f7ef ff7d 	bl	80002a8 <__aeabi_dsub>
 80103ae:	4602      	mov	r2, r0
 80103b0:	460b      	mov	r3, r1
 80103b2:	ec43 2b17 	vmov	d7, r2, r3
 80103b6:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8010440 <sun_predict+0x488>
 80103ba:	eeb0 0a47 	vmov.f32	s0, s14
 80103be:	eef0 0a67 	vmov.f32	s1, s15
 80103c2:	f00d fde9 	bl	801df98 <fmod>
 80103c6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	double nu = fmod(M+C, 2*M_PI);
 80103ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80103ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80103d2:	f7ef ff6b 	bl	80002ac <__adddf3>
 80103d6:	4602      	mov	r2, r0
 80103d8:	460b      	mov	r3, r1
 80103da:	ec43 2b17 	vmov	d7, r2, r3
 80103de:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8010440 <sun_predict+0x488>
 80103e2:	eeb0 0a47 	vmov.f32	s0, s14
 80103e6:	eef0 0a67 	vmov.f32	s1, s15
 80103ea:	f00d fdd5 	bl	801df98 <fmod>
 80103ee:	ed87 0b08 	vstr	d0, [r7, #32]
	double R = 1.0000002*(1.0-Sqr(e))/(1.0+e*cos(nu));
 80103f2:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80103f6:	f000 fb3b 	bl	8010a70 <Sqr>
 80103fa:	ec53 2b10 	vmov	r2, r3, d0
 80103fe:	f04f 0000 	mov.w	r0, #0
 8010402:	4912      	ldr	r1, [pc, #72]	@ (801044c <sun_predict+0x494>)
 8010404:	f7ef ff50 	bl	80002a8 <__aeabi_dsub>
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	e074      	b.n	80104f8 <sun_predict+0x540>
 801040e:	bf00      	nop
 8010410:	00000000 	.word	0x00000000
 8010414:	40768000 	.word	0x40768000
 8010418:	6af038e3 	.word	0x6af038e3
 801041c:	3f3333b9 	.word	0x3f3333b9
 8010420:	6872b021 	.word	0x6872b021
 8010424:	409e3891 	.word	0x409e3891
 8010428:	47ae147b 	.word	0x47ae147b
 801042c:	407032e1 	.word	0x407032e1
 8010430:	d590c0ad 	.word	0xd590c0ad
 8010434:	3f739ead 	.word	0x3f739ead
 8010438:	bea0ba1f 	.word	0xbea0ba1f
 801043c:	3f774e65 	.word	0x3f774e65
 8010440:	54442d18 	.word	0x54442d18
 8010444:	401921fb 	.word	0x401921fb
 8010448:	40080000 	.word	0x40080000
 801044c:	3ff00000 	.word	0x3ff00000
 8010450:	40000000 	.word	0x40000000
 8010454:	4142a5e7 	.word	0x4142a5e7
 8010458:	00000000 	.word	0x00000000
 801045c:	41426cd6 	.word	0x41426cd6
 8010460:	00000000 	.word	0x00000000
 8010464:	4076d400 	.word	0x4076d400
 8010468:	00000000 	.word	0x00000000
 801046c:	409db000 	.word	0x409db000
 8010470:	00000000 	.word	0x00000000
 8010474:	40f51800 	.word	0x40f51800
 8010478:	00000000 	.word	0x00000000
 801047c:	40e1d5a0 	.word	0x40e1d5a0
 8010480:	978d4fdf 	.word	0x978d4fdf
 8010484:	40e193e1 	.word	0x40e193e1
 8010488:	ffeb074a 	.word	0xffeb074a
 801048c:	4076679c 	.word	0x4076679c
 8010490:	2f9294c3 	.word	0x2f9294c3
 8010494:	3ecbaeb2 	.word	0x3ecbaeb2
 8010498:	30553261 	.word	0x30553261
 801049c:	3f23a92a 	.word	0x3f23a92a
 80104a0:	9afe1da8 	.word	0x9afe1da8
 80104a4:	40e19418 	.word	0x40e19418
 80104a8:	99ed7c70 	.word	0x99ed7c70
 80104ac:	40717b25 	.word	0x40717b25
 80104b0:	9b66f933 	.word	0x9b66f933
 80104b4:	3f33d31b 	.word	0x3f33d31b
 80104b8:	b8863b3a 	.word	0xb8863b3a
 80104bc:	3e80e953 	.word	0x3e80e953
 80104c0:	10540b1a 	.word	0x10540b1a
 80104c4:	3f05ea4d 	.word	0x3f05ea4d
 80104c8:	43e55d11 	.word	0x43e55d11
 80104cc:	3f91272f 	.word	0x3f91272f
 80104d0:	593e5fb7 	.word	0x593e5fb7
 80104d4:	3eed5c31 	.word	0x3eed5c31
 80104d8:	6616b54e 	.word	0x6616b54e
 80104dc:	3f739da1 	.word	0x3f739da1
 80104e0:	b05faebc 	.word	0xb05faebc
 80104e4:	3ffeb61b 	.word	0x3ffeb61b
 80104e8:	eb1c432d 	.word	0xeb1c432d
 80104ec:	3f1a36e2 	.word	0x3f1a36e2
 80104f0:	83621fb0 	.word	0x83621fb0
 80104f4:	3f949385 	.word	0x3f949385
 80104f8:	4610      	mov	r0, r2
 80104fa:	4619      	mov	r1, r3
 80104fc:	a377      	add	r3, pc, #476	@ (adr r3, 80106dc <sun_predict+0x724>)
 80104fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010502:	f7f0 f889 	bl	8000618 <__aeabi_dmul>
 8010506:	4602      	mov	r2, r0
 8010508:	460b      	mov	r3, r1
 801050a:	4614      	mov	r4, r2
 801050c:	461d      	mov	r5, r3
 801050e:	ed97 0b08 	vldr	d0, [r7, #32]
 8010512:	f00d ffe5 	bl	801e4e0 <cos>
 8010516:	ec51 0b10 	vmov	r0, r1, d0
 801051a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801051e:	f7f0 f87b 	bl	8000618 <__aeabi_dmul>
 8010522:	4602      	mov	r2, r0
 8010524:	460b      	mov	r3, r1
 8010526:	4610      	mov	r0, r2
 8010528:	4619      	mov	r1, r3
 801052a:	f04f 0200 	mov.w	r2, #0
 801052e:	4b6a      	ldr	r3, [pc, #424]	@ (80106d8 <sun_predict+0x720>)
 8010530:	f7ef febc 	bl	80002ac <__adddf3>
 8010534:	4602      	mov	r2, r0
 8010536:	460b      	mov	r3, r1
 8010538:	4620      	mov	r0, r4
 801053a:	4629      	mov	r1, r5
 801053c:	f7f0 f996 	bl	800086c <__aeabi_ddiv>
 8010540:	4602      	mov	r2, r0
 8010542:	460b      	mov	r3, r1
 8010544:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double eps = Radians(23.452294-(0.0130125+(0.00000164-0.000000503*T)*T)*T+0.00256*cos(O));
 8010548:	a357      	add	r3, pc, #348	@ (adr r3, 80106a8 <sun_predict+0x6f0>)
 801054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8010552:	f7f0 f861 	bl	8000618 <__aeabi_dmul>
 8010556:	4602      	mov	r2, r0
 8010558:	460b      	mov	r3, r1
 801055a:	a155      	add	r1, pc, #340	@ (adr r1, 80106b0 <sun_predict+0x6f8>)
 801055c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010560:	f7ef fea2 	bl	80002a8 <__aeabi_dsub>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	4610      	mov	r0, r2
 801056a:	4619      	mov	r1, r3
 801056c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010570:	f7f0 f852 	bl	8000618 <__aeabi_dmul>
 8010574:	4602      	mov	r2, r0
 8010576:	460b      	mov	r3, r1
 8010578:	4610      	mov	r0, r2
 801057a:	4619      	mov	r1, r3
 801057c:	a34e      	add	r3, pc, #312	@ (adr r3, 80106b8 <sun_predict+0x700>)
 801057e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010582:	f7ef fe93 	bl	80002ac <__adddf3>
 8010586:	4602      	mov	r2, r0
 8010588:	460b      	mov	r3, r1
 801058a:	4610      	mov	r0, r2
 801058c:	4619      	mov	r1, r3
 801058e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010592:	f7f0 f841 	bl	8000618 <__aeabi_dmul>
 8010596:	4602      	mov	r2, r0
 8010598:	460b      	mov	r3, r1
 801059a:	a149      	add	r1, pc, #292	@ (adr r1, 80106c0 <sun_predict+0x708>)
 801059c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105a0:	f7ef fe82 	bl	80002a8 <__aeabi_dsub>
 80105a4:	4602      	mov	r2, r0
 80105a6:	460b      	mov	r3, r1
 80105a8:	4614      	mov	r4, r2
 80105aa:	461d      	mov	r5, r3
 80105ac:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80105b0:	f00d ff96 	bl	801e4e0 <cos>
 80105b4:	ec51 0b10 	vmov	r0, r1, d0
 80105b8:	a343      	add	r3, pc, #268	@ (adr r3, 80106c8 <sun_predict+0x710>)
 80105ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105be:	f7f0 f82b 	bl	8000618 <__aeabi_dmul>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4620      	mov	r0, r4
 80105c8:	4629      	mov	r1, r5
 80105ca:	f7ef fe6f 	bl	80002ac <__adddf3>
 80105ce:	4602      	mov	r2, r0
 80105d0:	460b      	mov	r3, r1
 80105d2:	ec43 2b17 	vmov	d7, r2, r3
 80105d6:	eeb0 0a47 	vmov.f32	s0, s14
 80105da:	eef0 0a67 	vmov.f32	s1, s15
 80105de:	f7ff fcc3 	bl	800ff68 <Radians>
 80105e2:	ed87 0b04 	vstr	d0, [r7, #16]
	R = ASTRONOMICAL_UNIT_KM*R;
 80105e6:	a33a      	add	r3, pc, #232	@ (adr r3, 80106d0 <sun_predict+0x718>)
 80105e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80105f0:	f7f0 f812 	bl	8000618 <__aeabi_dmul>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	e9c7 2306 	strd	r2, r3, [r7, #24]

	position[0] = R*cos(Lsa);
 80105fc:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8010600:	f00d ff6e 	bl	801e4e0 <cos>
 8010604:	ec51 0b10 	vmov	r0, r1, d0
 8010608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801060c:	f7f0 f804 	bl	8000618 <__aeabi_dmul>
 8010610:	4602      	mov	r2, r0
 8010612:	460b      	mov	r3, r1
 8010614:	6879      	ldr	r1, [r7, #4]
 8010616:	e9c1 2300 	strd	r2, r3, [r1]
	position[1] = R*sin(Lsa)*cos(eps);
 801061a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 801061e:	f00d ffbb 	bl	801e598 <sin>
 8010622:	ec51 0b10 	vmov	r0, r1, d0
 8010626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801062a:	f7ef fff5 	bl	8000618 <__aeabi_dmul>
 801062e:	4602      	mov	r2, r0
 8010630:	460b      	mov	r3, r1
 8010632:	4690      	mov	r8, r2
 8010634:	4699      	mov	r9, r3
 8010636:	ed97 0b04 	vldr	d0, [r7, #16]
 801063a:	f00d ff51 	bl	801e4e0 <cos>
 801063e:	ec51 0b10 	vmov	r0, r1, d0
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f103 0408 	add.w	r4, r3, #8
 8010648:	4602      	mov	r2, r0
 801064a:	460b      	mov	r3, r1
 801064c:	4640      	mov	r0, r8
 801064e:	4649      	mov	r1, r9
 8010650:	f7ef ffe2 	bl	8000618 <__aeabi_dmul>
 8010654:	4602      	mov	r2, r0
 8010656:	460b      	mov	r3, r1
 8010658:	e9c4 2300 	strd	r2, r3, [r4]
	position[2] = R*sin(Lsa)*sin(eps);
 801065c:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8010660:	f00d ff9a 	bl	801e598 <sin>
 8010664:	ec51 0b10 	vmov	r0, r1, d0
 8010668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801066c:	f7ef ffd4 	bl	8000618 <__aeabi_dmul>
 8010670:	4602      	mov	r2, r0
 8010672:	460b      	mov	r3, r1
 8010674:	4690      	mov	r8, r2
 8010676:	4699      	mov	r9, r3
 8010678:	ed97 0b04 	vldr	d0, [r7, #16]
 801067c:	f00d ff8c 	bl	801e598 <sin>
 8010680:	ec51 0b10 	vmov	r0, r1, d0
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f103 0410 	add.w	r4, r3, #16
 801068a:	4602      	mov	r2, r0
 801068c:	460b      	mov	r3, r1
 801068e:	4640      	mov	r0, r8
 8010690:	4649      	mov	r1, r9
 8010692:	f7ef ffc1 	bl	8000618 <__aeabi_dmul>
 8010696:	4602      	mov	r2, r0
 8010698:	460b      	mov	r3, r1
 801069a:	e9c4 2300 	strd	r2, r3, [r4]
}
 801069e:	bf00      	nop
 80106a0:	3778      	adds	r7, #120	@ 0x78
 80106a2:	46bd      	mov	sp, r7
 80106a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80106a8:	b29227cf 	.word	0xb29227cf
 80106ac:	3ea0e0bc 	.word	0x3ea0e0bc
 80106b0:	11ce33aa 	.word	0x11ce33aa
 80106b4:	3ebb83bf 	.word	0x3ebb83bf
 80106b8:	2f837b4a 	.word	0x2f837b4a
 80106bc:	3f8aa64c 	.word	0x3f8aa64c
 80106c0:	8a222d51 	.word	0x8a222d51
 80106c4:	403773c9 	.word	0x403773c9
 80106c8:	88e368f1 	.word	0x88e368f1
 80106cc:	3f64f8b5 	.word	0x3f64f8b5
 80106d0:	5d61cac1 	.word	0x5d61cac1
 80106d4:	41a1d55d 	.word	0x41a1d55d
 80106d8:	3ff00000 	.word	0x3ff00000
 80106dc:	35afe535 	.word	0x35afe535
 80106e0:	3ff00000 	.word	0x3ff00000
 80106e4:	00000000 	.word	0x00000000

080106e8 <predict_observe_sun>:

void predict_observe_sun(const predict_observer_t *observer, double time, struct predict_observation *obs)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b0aa      	sub	sp, #168	@ 0xa8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	ed87 0b00 	vstr	d0, [r7]
 80106f4:	60b9      	str	r1, [r7, #8]

	// Find sun position
	double solar_vector[3];
	sun_predict(time, solar_vector);
 80106f6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80106fa:	4618      	mov	r0, r3
 80106fc:	ed97 0b00 	vldr	d0, [r7]
 8010700:	f7ff fc5a 	bl	800ffb8 <sun_predict>

	/* Zero vector for initializations */
	double zero_vector[3] = {0,0,0};
 8010704:	f04f 0200 	mov.w	r2, #0
 8010708:	f04f 0300 	mov.w	r3, #0
 801070c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8010710:	f04f 0200 	mov.w	r2, #0
 8010714:	f04f 0300 	mov.w	r3, #0
 8010718:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 801071c:	f04f 0200 	mov.w	r2, #0
 8010720:	f04f 0300 	mov.w	r3, #0
 8010724:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	/* Solar observed azimuth and elevation vector  */
	vector_t solar_set;

	geodetic_t geodetic;
	geodetic.lat = observer->latitude;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 801072e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	geodetic.lon = observer->longitude;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8010738:	e9c7 2306 	strd	r2, r3, [r7, #24]
	geodetic.alt = observer->altitude / 1000.0;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8010742:	f04f 0200 	mov.w	r2, #0
 8010746:	4b3c      	ldr	r3, [pc, #240]	@ (8010838 <predict_observe_sun+0x150>)
 8010748:	f7f0 f890 	bl	800086c <__aeabi_ddiv>
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	e9c7 2308 	strd	r2, r3, [r7, #32]
	geodetic.theta = 0.0;
 8010754:	f04f 0200 	mov.w	r2, #0
 8010758:	f04f 0300 	mov.w	r3, #0
 801075c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	double jul_utc = time + JULIAN_TIME_DIFF;
 8010760:	a331      	add	r3, pc, #196	@ (adr r3, 8010828 <predict_observe_sun+0x140>)
 8010762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010766:	e9d7 0100 	ldrd	r0, r1, [r7]
 801076a:	f7ef fd9f 	bl	80002ac <__adddf3>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	Calculate_Obs(jul_utc, solar_vector, zero_vector, &geodetic, &solar_set);
 8010776:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801077a:	f107 0210 	add.w	r2, r7, #16
 801077e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010782:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8010786:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 801078a:	f000 ff19 	bl	80115c0 <Calculate_Obs>

	double sun_azi = solar_set.x;
 801078e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8010792:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	double sun_ele = solar_set.y;
 8010796:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801079a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	double sun_range = 1.0+((solar_set.z-ASTRONOMICAL_UNIT_KM)/ASTRONOMICAL_UNIT_KM);
 801079e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80107a2:	a323      	add	r3, pc, #140	@ (adr r3, 8010830 <predict_observe_sun+0x148>)
 80107a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a8:	f7ef fd7e 	bl	80002a8 <__aeabi_dsub>
 80107ac:	4602      	mov	r2, r0
 80107ae:	460b      	mov	r3, r1
 80107b0:	4610      	mov	r0, r2
 80107b2:	4619      	mov	r1, r3
 80107b4:	a31e      	add	r3, pc, #120	@ (adr r3, 8010830 <predict_observe_sun+0x148>)
 80107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ba:	f7f0 f857 	bl	800086c <__aeabi_ddiv>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	4610      	mov	r0, r2
 80107c4:	4619      	mov	r1, r3
 80107c6:	f04f 0200 	mov.w	r2, #0
 80107ca:	4b1c      	ldr	r3, [pc, #112]	@ (801083c <predict_observe_sun+0x154>)
 80107cc:	f7ef fd6e 	bl	80002ac <__adddf3>
 80107d0:	4602      	mov	r2, r0
 80107d2:	460b      	mov	r3, r1
 80107d4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double sun_range_rate = 1000.0*solar_set.w;
 80107d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80107dc:	f04f 0200 	mov.w	r2, #0
 80107e0:	4b15      	ldr	r3, [pc, #84]	@ (8010838 <predict_observe_sun+0x150>)
 80107e2:	f7ef ff19 	bl	8000618 <__aeabi_dmul>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	obs->time = time;
 80107ee:	68b9      	ldr	r1, [r7, #8]
 80107f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107f4:	e9c1 2300 	strd	r2, r3, [r1]
	obs->azimuth = sun_azi;
 80107f8:	68b9      	ldr	r1, [r7, #8]
 80107fa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80107fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	obs->elevation = sun_ele;
 8010802:	68b9      	ldr	r1, [r7, #8]
 8010804:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8010808:	e9c1 2306 	strd	r2, r3, [r1, #24]
	obs->range = sun_range;
 801080c:	68b9      	ldr	r1, [r7, #8]
 801080e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8010812:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	obs->range_rate = sun_range_rate;
 8010816:	68b9      	ldr	r1, [r7, #8]
 8010818:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801081c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8010820:	bf00      	nop
 8010822:	37a8      	adds	r7, #168	@ 0xa8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	40000000 	.word	0x40000000
 801082c:	4142a5e7 	.word	0x4142a5e7
 8010830:	5d61cac1 	.word	0x5d61cac1
 8010834:	41a1d55d 	.word	0x41a1d55d
 8010838:	408f4000 	.word	0x408f4000
 801083c:	3ff00000 	.word	0x3ff00000

08010840 <vec3_set>:
#include "unsorted.h"

#include "defs.h"

void vec3_set(double v[3], double x, double y, double z)
{
 8010840:	b480      	push	{r7}
 8010842:	b089      	sub	sp, #36	@ 0x24
 8010844:	af00      	add	r7, sp, #0
 8010846:	61f8      	str	r0, [r7, #28]
 8010848:	ed87 0b04 	vstr	d0, [r7, #16]
 801084c:	ed87 1b02 	vstr	d1, [r7, #8]
 8010850:	ed87 2b00 	vstr	d2, [r7]
	v[0] = x;
 8010854:	69f9      	ldr	r1, [r7, #28]
 8010856:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801085a:	e9c1 2300 	strd	r2, r3, [r1]
	v[1] = y;
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	f103 0108 	add.w	r1, r3, #8
 8010864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010868:	e9c1 2300 	strd	r2, r3, [r1]
	v[2] = z;
 801086c:	69fb      	ldr	r3, [r7, #28]
 801086e:	f103 0110 	add.w	r1, r3, #16
 8010872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010876:	e9c1 2300 	strd	r2, r3, [r1]
}
 801087a:	bf00      	nop
 801087c:	3724      	adds	r7, #36	@ 0x24
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr

08010886 <vec3_length>:

double vec3_length(const double v[3])
{
 8010886:	b5b0      	push	{r4, r5, r7, lr}
 8010888:	b082      	sub	sp, #8
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
	return sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089a:	f7ef febd 	bl	8000618 <__aeabi_dmul>
 801089e:	4602      	mov	r2, r0
 80108a0:	460b      	mov	r3, r1
 80108a2:	4614      	mov	r4, r2
 80108a4:	461d      	mov	r5, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	3308      	adds	r3, #8
 80108aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	3308      	adds	r3, #8
 80108b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b6:	f7ef feaf 	bl	8000618 <__aeabi_dmul>
 80108ba:	4602      	mov	r2, r0
 80108bc:	460b      	mov	r3, r1
 80108be:	4620      	mov	r0, r4
 80108c0:	4629      	mov	r1, r5
 80108c2:	f7ef fcf3 	bl	80002ac <__adddf3>
 80108c6:	4602      	mov	r2, r0
 80108c8:	460b      	mov	r3, r1
 80108ca:	4614      	mov	r4, r2
 80108cc:	461d      	mov	r5, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	3310      	adds	r3, #16
 80108d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	3310      	adds	r3, #16
 80108da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108de:	f7ef fe9b 	bl	8000618 <__aeabi_dmul>
 80108e2:	4602      	mov	r2, r0
 80108e4:	460b      	mov	r3, r1
 80108e6:	4620      	mov	r0, r4
 80108e8:	4629      	mov	r1, r5
 80108ea:	f7ef fcdf 	bl	80002ac <__adddf3>
 80108ee:	4602      	mov	r2, r0
 80108f0:	460b      	mov	r3, r1
 80108f2:	ec43 2b17 	vmov	d7, r2, r3
 80108f6:	eeb0 0a47 	vmov.f32	s0, s14
 80108fa:	eef0 0a67 	vmov.f32	s1, s15
 80108fe:	f00d fc29 	bl	801e154 <sqrt>
 8010902:	eeb0 7a40 	vmov.f32	s14, s0
 8010906:	eef0 7a60 	vmov.f32	s15, s1
}
 801090a:	eeb0 0a47 	vmov.f32	s0, s14
 801090e:	eef0 0a67 	vmov.f32	s1, s15
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bdb0      	pop	{r4, r5, r7, pc}

08010918 <vec3_dot>:

double vec3_dot(const double v[3], const double u[3])
{
 8010918:	b5b0      	push	{r4, r5, r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
	return (v[0]*u[0] + v[1]*u[1] + v[2]*u[2]);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092e:	f7ef fe73 	bl	8000618 <__aeabi_dmul>
 8010932:	4602      	mov	r2, r0
 8010934:	460b      	mov	r3, r1
 8010936:	4614      	mov	r4, r2
 8010938:	461d      	mov	r5, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	3308      	adds	r3, #8
 801093e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	3308      	adds	r3, #8
 8010946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094a:	f7ef fe65 	bl	8000618 <__aeabi_dmul>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	4620      	mov	r0, r4
 8010954:	4629      	mov	r1, r5
 8010956:	f7ef fca9 	bl	80002ac <__adddf3>
 801095a:	4602      	mov	r2, r0
 801095c:	460b      	mov	r3, r1
 801095e:	4614      	mov	r4, r2
 8010960:	461d      	mov	r5, r3
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	3310      	adds	r3, #16
 8010966:	e9d3 0100 	ldrd	r0, r1, [r3]
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	3310      	adds	r3, #16
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	f7ef fe51 	bl	8000618 <__aeabi_dmul>
 8010976:	4602      	mov	r2, r0
 8010978:	460b      	mov	r3, r1
 801097a:	4620      	mov	r0, r4
 801097c:	4629      	mov	r1, r5
 801097e:	f7ef fc95 	bl	80002ac <__adddf3>
 8010982:	4602      	mov	r2, r0
 8010984:	460b      	mov	r3, r1
 8010986:	ec43 2b17 	vmov	d7, r2, r3
}
 801098a:	eeb0 0a47 	vmov.f32	s0, s14
 801098e:	eef0 0a67 	vmov.f32	s1, s15
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bdb0      	pop	{r4, r5, r7, pc}

08010998 <vec3_mul_scalar>:

void vec3_mul_scalar(const double v[3], double a, double r[3])
{
 8010998:	b590      	push	{r4, r7, lr}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	ed87 0b00 	vstr	d0, [r7]
 80109a4:	60b9      	str	r1, [r7, #8]
	r[0] = v[0]*a;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109b0:	f7ef fe32 	bl	8000618 <__aeabi_dmul>
 80109b4:	4602      	mov	r2, r0
 80109b6:	460b      	mov	r3, r1
 80109b8:	68b9      	ldr	r1, [r7, #8]
 80109ba:	e9c1 2300 	strd	r2, r3, [r1]
	r[1] = v[1]*a;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	3308      	adds	r3, #8
 80109c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	f103 0408 	add.w	r4, r3, #8
 80109cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109d0:	f7ef fe22 	bl	8000618 <__aeabi_dmul>
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	e9c4 2300 	strd	r2, r3, [r4]
	r[2] = v[2]*a;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	3310      	adds	r3, #16
 80109e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f103 0410 	add.w	r4, r3, #16
 80109ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109ee:	f7ef fe13 	bl	8000618 <__aeabi_dmul>
 80109f2:	4602      	mov	r2, r0
 80109f4:	460b      	mov	r3, r1
 80109f6:	e9c4 2300 	strd	r2, r3, [r4]
}
 80109fa:	bf00      	nop
 80109fc:	3714      	adds	r7, #20
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd90      	pop	{r4, r7, pc}

08010a02 <vec3_sub>:

void vec3_sub(const double v1[3], const double v2[3], double *r)
{
 8010a02:	b590      	push	{r4, r7, lr}
 8010a04:	b085      	sub	sp, #20
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	60f8      	str	r0, [r7, #12]
 8010a0a:	60b9      	str	r1, [r7, #8]
 8010a0c:	607a      	str	r2, [r7, #4]
	r[0] = v1[0] - v2[0];
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1a:	f7ef fc45 	bl	80002a8 <__aeabi_dsub>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	460b      	mov	r3, r1
 8010a22:	6879      	ldr	r1, [r7, #4]
 8010a24:	e9c1 2300 	strd	r2, r3, [r1]
	r[1] = v1[1] - v2[1];
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	3308      	adds	r3, #8
 8010a2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	3308      	adds	r3, #8
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	687c      	ldr	r4, [r7, #4]
 8010a3a:	3408      	adds	r4, #8
 8010a3c:	f7ef fc34 	bl	80002a8 <__aeabi_dsub>
 8010a40:	4602      	mov	r2, r0
 8010a42:	460b      	mov	r3, r1
 8010a44:	e9c4 2300 	strd	r2, r3, [r4]
	r[2] = v1[2] - v2[2];
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	3310      	adds	r3, #16
 8010a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	3310      	adds	r3, #16
 8010a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a58:	687c      	ldr	r4, [r7, #4]
 8010a5a:	3410      	adds	r4, #16
 8010a5c:	f7ef fc24 	bl	80002a8 <__aeabi_dsub>
 8010a60:	4602      	mov	r2, r0
 8010a62:	460b      	mov	r3, r1
 8010a64:	e9c4 2300 	strd	r2, r3, [r4]
}
 8010a68:	bf00      	nop
 8010a6a:	3714      	adds	r7, #20
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd90      	pop	{r4, r7, pc}

08010a70 <Sqr>:

double Sqr(double arg)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	ed87 0b00 	vstr	d0, [r7]
	/* Returns square of a double */
	return (arg*arg);
 8010a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010a82:	f7ef fdc9 	bl	8000618 <__aeabi_dmul>
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	ec43 2b17 	vmov	d7, r2, r3
}
 8010a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8010a92:	eef0 0a67 	vmov.f32	s1, s15
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	0000      	movs	r0, r0
	...

08010aa0 <FMod2p>:

double FMod2p(double x)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	ed87 0b00 	vstr	d0, [r7]
	/* Returns mod 2PI of argument */

	double ret_val = fmod(x, 2*M_PI);
 8010aaa:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8010b00 <FMod2p+0x60>
 8010aae:	ed97 0b00 	vldr	d0, [r7]
 8010ab2:	f00d fa71 	bl	801df98 <fmod>
 8010ab6:	ed87 0b02 	vstr	d0, [r7, #8]

	if (ret_val < 0.0)
 8010aba:	f04f 0200 	mov.w	r2, #0
 8010abe:	f04f 0300 	mov.w	r3, #0
 8010ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ac6:	f7f0 f819 	bl	8000afc <__aeabi_dcmplt>
 8010aca:	4603      	mov	r3, r0
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d00a      	beq.n	8010ae6 <FMod2p+0x46>
		ret_val += (2*M_PI);
 8010ad0:	a30b      	add	r3, pc, #44	@ (adr r3, 8010b00 <FMod2p+0x60>)
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ada:	f7ef fbe7 	bl	80002ac <__adddf3>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return ret_val;
 8010ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010aea:	ec43 2b17 	vmov	d7, r2, r3
}
 8010aee:	eeb0 0a47 	vmov.f32	s0, s14
 8010af2:	eef0 0a67 	vmov.f32	s1, s15
 8010af6:	3710      	adds	r7, #16
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	f3af 8000 	nop.w
 8010b00:	54442d18 	.word	0x54442d18
 8010b04:	401921fb 	.word	0x401921fb

08010b08 <Convert_Sat_State>:

void Convert_Sat_State(double pos[3], double vel[3])
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
	/* Converts the satellite's position and velocity  */
	/* vectors from normalized values to km and km/sec */ 

	vec3_mul_scalar(pos, EARTH_RADIUS_KM_WGS84, pos);
 8010b12:	6879      	ldr	r1, [r7, #4]
 8010b14:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8010b38 <Convert_Sat_State+0x30>
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f7ff ff3d 	bl	8010998 <vec3_mul_scalar>
	vec3_mul_scalar(vel, EARTH_RADIUS_KM_WGS84*MINUTES_PER_DAY/SECONDS_PER_DAY, vel);
 8010b1e:	6839      	ldr	r1, [r7, #0]
 8010b20:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8010b40 <Convert_Sat_State+0x38>
 8010b24:	6838      	ldr	r0, [r7, #0]
 8010b26:	f7ff ff37 	bl	8010998 <vec3_mul_scalar>
}
 8010b2a:	bf00      	nop
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	f3af 8000 	nop.w
 8010b38:	126e978d 	.word	0x126e978d
 8010b3c:	40b8ea23 	.word	0x40b8ea23
 8010b40:	9c31b2b8 	.word	0x9c31b2b8
 8010b44:	405a9358 	.word	0x405a9358

08010b48 <Julian_Date_of_Year>:

double Julian_Date_of_Year(double year)
{
 8010b48:	b5b0      	push	{r4, r5, r7, lr}
 8010b4a:	b088      	sub	sp, #32
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	ed87 0b00 	vstr	d0, [r7]
	/* pages 23-25. Calculate Julian Date of 0.0 Jan year */

	long A, B, i;
	double jdoy;

	year=year-1;
 8010b52:	f04f 0200 	mov.w	r2, #0
 8010b56:	4b3a      	ldr	r3, [pc, #232]	@ (8010c40 <Julian_Date_of_Year+0xf8>)
 8010b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010b5c:	f7ef fba4 	bl	80002a8 <__aeabi_dsub>
 8010b60:	4602      	mov	r2, r0
 8010b62:	460b      	mov	r3, r1
 8010b64:	e9c7 2300 	strd	r2, r3, [r7]
	i=year/100;
 8010b68:	f04f 0200 	mov.w	r2, #0
 8010b6c:	4b35      	ldr	r3, [pc, #212]	@ (8010c44 <Julian_Date_of_Year+0xfc>)
 8010b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010b72:	f7ef fe7b 	bl	800086c <__aeabi_ddiv>
 8010b76:	4602      	mov	r2, r0
 8010b78:	460b      	mov	r3, r1
 8010b7a:	4610      	mov	r0, r2
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	f7ef fffb 	bl	8000b78 <__aeabi_d2iz>
 8010b82:	4603      	mov	r3, r0
 8010b84:	61fb      	str	r3, [r7, #28]
	A=i;
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	61bb      	str	r3, [r7, #24]
	i=A/4;
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	da00      	bge.n	8010b92 <Julian_Date_of_Year+0x4a>
 8010b90:	3303      	adds	r3, #3
 8010b92:	109b      	asrs	r3, r3, #2
 8010b94:	61fb      	str	r3, [r7, #28]
	B=2-A+i;
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	f1c3 0302 	rsb	r3, r3, #2
 8010b9c:	69fa      	ldr	r2, [r7, #28]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	617b      	str	r3, [r7, #20]
	i=365.25*year;
 8010ba2:	a321      	add	r3, pc, #132	@ (adr r3, 8010c28 <Julian_Date_of_Year+0xe0>)
 8010ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010bac:	f7ef fd34 	bl	8000618 <__aeabi_dmul>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	4610      	mov	r0, r2
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	f7ef ffde 	bl	8000b78 <__aeabi_d2iz>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	61fb      	str	r3, [r7, #28]
	i+=30.6001*14;
 8010bc0:	69f8      	ldr	r0, [r7, #28]
 8010bc2:	f7ef fcbf 	bl	8000544 <__aeabi_i2d>
 8010bc6:	a31a      	add	r3, pc, #104	@ (adr r3, 8010c30 <Julian_Date_of_Year+0xe8>)
 8010bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bcc:	f7ef fb6e 	bl	80002ac <__adddf3>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	4610      	mov	r0, r2
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	f7ef ffce 	bl	8000b78 <__aeabi_d2iz>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	61fb      	str	r3, [r7, #28]
	jdoy=i+1720994.5+B;
 8010be0:	69f8      	ldr	r0, [r7, #28]
 8010be2:	f7ef fcaf 	bl	8000544 <__aeabi_i2d>
 8010be6:	a314      	add	r3, pc, #80	@ (adr r3, 8010c38 <Julian_Date_of_Year+0xf0>)
 8010be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bec:	f7ef fb5e 	bl	80002ac <__adddf3>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	4614      	mov	r4, r2
 8010bf6:	461d      	mov	r5, r3
 8010bf8:	6978      	ldr	r0, [r7, #20]
 8010bfa:	f7ef fca3 	bl	8000544 <__aeabi_i2d>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	4620      	mov	r0, r4
 8010c04:	4629      	mov	r1, r5
 8010c06:	f7ef fb51 	bl	80002ac <__adddf3>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return jdoy;
 8010c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010c16:	ec43 2b17 	vmov	d7, r2, r3
}
 8010c1a:	eeb0 0a47 	vmov.f32	s0, s14
 8010c1e:	eef0 0a67 	vmov.f32	s1, s15
 8010c22:	3720      	adds	r7, #32
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bdb0      	pop	{r4, r5, r7, pc}
 8010c28:	00000000 	.word	0x00000000
 8010c2c:	4076d400 	.word	0x4076d400
 8010c30:	226809d5 	.word	0x226809d5
 8010c34:	407ac66c 	.word	0x407ac66c
 8010c38:	80000000 	.word	0x80000000
 8010c3c:	413a42a2 	.word	0x413a42a2
 8010c40:	3ff00000 	.word	0x3ff00000
 8010c44:	40590000 	.word	0x40590000

08010c48 <Julian_Date_of_Epoch>:

double Julian_Date_of_Epoch(double epoch)
{ 
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b086      	sub	sp, #24
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	ed87 0b00 	vstr	d0, [r7]
	double year, day;

	/* Modification to support Y2K */
	/* Valid 1957 through 2056     */

	day=modf(epoch*1E-3, &year)*1E3;
 8010c52:	a332      	add	r3, pc, #200	@ (adr r3, 8010d1c <Julian_Date_of_Epoch+0xd4>)
 8010c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c5c:	f7ef fcdc 	bl	8000618 <__aeabi_dmul>
 8010c60:	4602      	mov	r2, r0
 8010c62:	460b      	mov	r3, r1
 8010c64:	ec43 2b17 	vmov	d7, r2, r3
 8010c68:	f107 0308 	add.w	r3, r7, #8
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	eeb0 0a47 	vmov.f32	s0, s14
 8010c72:	eef0 0a67 	vmov.f32	s1, s15
 8010c76:	f00a f819 	bl	801acac <modf>
 8010c7a:	ec51 0b10 	vmov	r0, r1, d0
 8010c7e:	f04f 0200 	mov.w	r2, #0
 8010c82:	4b23      	ldr	r3, [pc, #140]	@ (8010d10 <Julian_Date_of_Epoch+0xc8>)
 8010c84:	f7ef fcc8 	bl	8000618 <__aeabi_dmul>
 8010c88:	4602      	mov	r2, r0
 8010c8a:	460b      	mov	r3, r1
 8010c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (year<57)
 8010c90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c94:	f04f 0200 	mov.w	r2, #0
 8010c98:	4b1e      	ldr	r3, [pc, #120]	@ (8010d14 <Julian_Date_of_Epoch+0xcc>)
 8010c9a:	f7ef ff2f 	bl	8000afc <__aeabi_dcmplt>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00b      	beq.n	8010cbc <Julian_Date_of_Epoch+0x74>
		year=year+2000;
 8010ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ca8:	f04f 0200 	mov.w	r2, #0
 8010cac:	4b1a      	ldr	r3, [pc, #104]	@ (8010d18 <Julian_Date_of_Epoch+0xd0>)
 8010cae:	f7ef fafd 	bl	80002ac <__adddf3>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8010cba:	e00a      	b.n	8010cd2 <Julian_Date_of_Epoch+0x8a>
	else
		year=year+1900;
 8010cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010cc0:	a311      	add	r3, pc, #68	@ (adr r3, 8010d08 <Julian_Date_of_Epoch+0xc0>)
 8010cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc6:	f7ef faf1 	bl	80002ac <__adddf3>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	460b      	mov	r3, r1
 8010cce:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (Julian_Date_of_Year(year)+day);
 8010cd2:	ed97 7b02 	vldr	d7, [r7, #8]
 8010cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8010cda:	eef0 0a67 	vmov.f32	s1, s15
 8010cde:	f7ff ff33 	bl	8010b48 <Julian_Date_of_Year>
 8010ce2:	ec51 0b10 	vmov	r0, r1, d0
 8010ce6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010cea:	f7ef fadf 	bl	80002ac <__adddf3>
 8010cee:	4602      	mov	r2, r0
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	ec43 2b17 	vmov	d7, r2, r3
}
 8010cf6:	eeb0 0a47 	vmov.f32	s0, s14
 8010cfa:	eef0 0a67 	vmov.f32	s1, s15
 8010cfe:	3718      	adds	r7, #24
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	f3af 8000 	nop.w
 8010d08:	00000000 	.word	0x00000000
 8010d0c:	409db000 	.word	0x409db000
 8010d10:	408f4000 	.word	0x408f4000
 8010d14:	404c8000 	.word	0x404c8000
 8010d18:	409f4000 	.word	0x409f4000
 8010d1c:	d2f1a9fc 	.word	0xd2f1a9fc
 8010d20:	3f50624d 	.word	0x3f50624d
 8010d24:	00000000 	.word	0x00000000

08010d28 <ThetaG_JD>:

double ThetaG_JD(double jd)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b08a      	sub	sp, #40	@ 0x28
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	ed87 0b00 	vstr	d0, [r7]
	/* Reference:  The 1992 Astronomical Almanac, page B6. */

	double UT, TU, GMST;

	double dummy;
	UT=modf(jd+0.5, &dummy);
 8010d32:	f04f 0200 	mov.w	r2, #0
 8010d36:	4b62      	ldr	r3, [pc, #392]	@ (8010ec0 <ThetaG_JD+0x198>)
 8010d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d3c:	f7ef fab6 	bl	80002ac <__adddf3>
 8010d40:	4602      	mov	r2, r0
 8010d42:	460b      	mov	r3, r1
 8010d44:	ec43 2b17 	vmov	d7, r2, r3
 8010d48:	f107 0308 	add.w	r3, r7, #8
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8010d52:	eef0 0a67 	vmov.f32	s1, s15
 8010d56:	f009 ffa9 	bl	801acac <modf>
 8010d5a:	ed87 0b08 	vstr	d0, [r7, #32]
	jd = jd - UT;
 8010d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d66:	f7ef fa9f 	bl	80002a8 <__aeabi_dsub>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	e9c7 2300 	strd	r2, r3, [r7]
	TU=(jd-2451545.0)/36525;
 8010d72:	a341      	add	r3, pc, #260	@ (adr r3, 8010e78 <ThetaG_JD+0x150>)
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d7c:	f7ef fa94 	bl	80002a8 <__aeabi_dsub>
 8010d80:	4602      	mov	r2, r0
 8010d82:	460b      	mov	r3, r1
 8010d84:	4610      	mov	r0, r2
 8010d86:	4619      	mov	r1, r3
 8010d88:	a33d      	add	r3, pc, #244	@ (adr r3, 8010e80 <ThetaG_JD+0x158>)
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	f7ef fd6d 	bl	800086c <__aeabi_ddiv>
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	e9c7 2306 	strd	r2, r3, [r7, #24]
	GMST=24110.54841+TU*(8640184.812866+TU*(0.093104-TU*6.2E-6));
 8010d9a:	a33b      	add	r3, pc, #236	@ (adr r3, 8010e88 <ThetaG_JD+0x160>)
 8010d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010da4:	f7ef fc38 	bl	8000618 <__aeabi_dmul>
 8010da8:	4602      	mov	r2, r0
 8010daa:	460b      	mov	r3, r1
 8010dac:	a138      	add	r1, pc, #224	@ (adr r1, 8010e90 <ThetaG_JD+0x168>)
 8010dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010db2:	f7ef fa79 	bl	80002a8 <__aeabi_dsub>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	4610      	mov	r0, r2
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010dc2:	f7ef fc29 	bl	8000618 <__aeabi_dmul>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	460b      	mov	r3, r1
 8010dca:	4610      	mov	r0, r2
 8010dcc:	4619      	mov	r1, r3
 8010dce:	a332      	add	r3, pc, #200	@ (adr r3, 8010e98 <ThetaG_JD+0x170>)
 8010dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd4:	f7ef fa6a 	bl	80002ac <__adddf3>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	460b      	mov	r3, r1
 8010ddc:	4610      	mov	r0, r2
 8010dde:	4619      	mov	r1, r3
 8010de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010de4:	f7ef fc18 	bl	8000618 <__aeabi_dmul>
 8010de8:	4602      	mov	r2, r0
 8010dea:	460b      	mov	r3, r1
 8010dec:	4610      	mov	r0, r2
 8010dee:	4619      	mov	r1, r3
 8010df0:	a32b      	add	r3, pc, #172	@ (adr r3, 8010ea0 <ThetaG_JD+0x178>)
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	f7ef fa59 	bl	80002ac <__adddf3>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	GMST=fmod(GMST+SECONDS_PER_DAY*EARTH_ROTATIONS_PER_SIDERIAL_DAY*UT,SECONDS_PER_DAY);
 8010e02:	a329      	add	r3, pc, #164	@ (adr r3, 8010ea8 <ThetaG_JD+0x180>)
 8010e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010e0c:	f7ef fc04 	bl	8000618 <__aeabi_dmul>
 8010e10:	4602      	mov	r2, r0
 8010e12:	460b      	mov	r3, r1
 8010e14:	4610      	mov	r0, r2
 8010e16:	4619      	mov	r1, r3
 8010e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010e1c:	f7ef fa46 	bl	80002ac <__adddf3>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	ec43 2b17 	vmov	d7, r2, r3
 8010e28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010eb0 <ThetaG_JD+0x188>
 8010e2c:	eeb0 0a47 	vmov.f32	s0, s14
 8010e30:	eef0 0a67 	vmov.f32	s1, s15
 8010e34:	f00d f8b0 	bl	801df98 <fmod>
 8010e38:	ed87 0b04 	vstr	d0, [r7, #16]

	return (2*M_PI*GMST/SECONDS_PER_DAY);
 8010e3c:	a31e      	add	r3, pc, #120	@ (adr r3, 8010eb8 <ThetaG_JD+0x190>)
 8010e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010e46:	f7ef fbe7 	bl	8000618 <__aeabi_dmul>
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	4610      	mov	r0, r2
 8010e50:	4619      	mov	r1, r3
 8010e52:	a317      	add	r3, pc, #92	@ (adr r3, 8010eb0 <ThetaG_JD+0x188>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	f7ef fd08 	bl	800086c <__aeabi_ddiv>
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	460b      	mov	r3, r1
 8010e60:	ec43 2b17 	vmov	d7, r2, r3
}
 8010e64:	eeb0 0a47 	vmov.f32	s0, s14
 8010e68:	eef0 0a67 	vmov.f32	s1, s15
 8010e6c:	3728      	adds	r7, #40	@ 0x28
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	f3af 8000 	nop.w
 8010e78:	80000000 	.word	0x80000000
 8010e7c:	4142b42c 	.word	0x4142b42c
 8010e80:	00000000 	.word	0x00000000
 8010e84:	40e1d5a0 	.word	0x40e1d5a0
 8010e88:	05e6c9ce 	.word	0x05e6c9ce
 8010e8c:	3eda0133 	.word	0x3eda0133
 8010e90:	eb2074eb 	.word	0xeb2074eb
 8010e94:	3fb7d5a9 	.word	0x3fb7d5a9
 8010e98:	1a02ff8f 	.word	0x1a02ff8f
 8010e9c:	41607ad7 	.word	0x41607ad7
 8010ea0:	192641b3 	.word	0x192641b3
 8010ea4:	40d78ba3 	.word	0x40d78ba3
 8010ea8:	e2c87b73 	.word	0xe2c87b73
 8010eac:	40f526c8 	.word	0x40f526c8
 8010eb0:	00000000 	.word	0x00000000
 8010eb4:	40f51800 	.word	0x40f51800
 8010eb8:	54442d18 	.word	0x54442d18
 8010ebc:	401921fb 	.word	0x401921fb
 8010ec0:	3fe00000 	.word	0x3fe00000
 8010ec4:	00000000 	.word	0x00000000

08010ec8 <Calculate_User_PosVel>:

void Calculate_User_PosVel(double time, geodetic_t *geodetic, double obs_pos[3], double obs_vel[3])
{
 8010ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010ecc:	b08c      	sub	sp, #48	@ 0x30
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	ed87 0b04 	vstr	d0, [r7, #16]
 8010ed4:	60f8      	str	r0, [r7, #12]
 8010ed6:	60b9      	str	r1, [r7, #8]
 8010ed8:	607a      	str	r2, [r7, #4]

	/* Reference:  The 1992 Astronomical Almanac, page K11. */

	double c, sq, achcp;

	geodetic->theta=FMod2p(ThetaG_JD(time)+geodetic->lon); /* LMST */
 8010eda:	ed97 0b04 	vldr	d0, [r7, #16]
 8010ede:	f7ff ff23 	bl	8010d28 <ThetaG_JD>
 8010ee2:	ec51 0b10 	vmov	r0, r1, d0
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010eec:	f7ef f9de 	bl	80002ac <__adddf3>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	ec43 2b17 	vmov	d7, r2, r3
 8010ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8010efc:	eef0 0a67 	vmov.f32	s1, s15
 8010f00:	f7ff fdce 	bl	8010aa0 <FMod2p>
 8010f04:	eeb0 7a40 	vmov.f32	s14, s0
 8010f08:	eef0 7a60 	vmov.f32	s15, s1
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	ed83 7b06 	vstr	d7, [r3, #24]
	c=1/sqrt(1+FLATTENING_FACTOR*(FLATTENING_FACTOR-2)*Sqr(sin(geodetic->lat)));
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	ed93 7b00 	vldr	d7, [r3]
 8010f18:	eeb0 0a47 	vmov.f32	s0, s14
 8010f1c:	eef0 0a67 	vmov.f32	s1, s15
 8010f20:	f00d fb3a 	bl	801e598 <sin>
 8010f24:	eeb0 7a40 	vmov.f32	s14, s0
 8010f28:	eef0 7a60 	vmov.f32	s15, s1
 8010f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8010f30:	eef0 0a67 	vmov.f32	s1, s15
 8010f34:	f7ff fd9c 	bl	8010a70 <Sqr>
 8010f38:	ec51 0b10 	vmov	r0, r1, d0
 8010f3c:	a375      	add	r3, pc, #468	@ (adr r3, 8011114 <Calculate_User_PosVel+0x24c>)
 8010f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f42:	f7ef fb69 	bl	8000618 <__aeabi_dmul>
 8010f46:	4602      	mov	r2, r0
 8010f48:	460b      	mov	r3, r1
 8010f4a:	4610      	mov	r0, r2
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	f04f 0200 	mov.w	r2, #0
 8010f52:	4b6f      	ldr	r3, [pc, #444]	@ (8011110 <Calculate_User_PosVel+0x248>)
 8010f54:	f7ef f9aa 	bl	80002ac <__adddf3>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	460b      	mov	r3, r1
 8010f5c:	ec43 2b17 	vmov	d7, r2, r3
 8010f60:	eeb0 0a47 	vmov.f32	s0, s14
 8010f64:	eef0 0a67 	vmov.f32	s1, s15
 8010f68:	f00d f8f4 	bl	801e154 <sqrt>
 8010f6c:	ec53 2b10 	vmov	r2, r3, d0
 8010f70:	f04f 0000 	mov.w	r0, #0
 8010f74:	4966      	ldr	r1, [pc, #408]	@ (8011110 <Calculate_User_PosVel+0x248>)
 8010f76:	f7ef fc79 	bl	800086c <__aeabi_ddiv>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	sq=Sqr(1-FLATTENING_FACTOR)*c;
 8010f82:	ed9f 0b5b 	vldr	d0, [pc, #364]	@ 80110f0 <Calculate_User_PosVel+0x228>
 8010f86:	f7ff fd73 	bl	8010a70 <Sqr>
 8010f8a:	ec53 2b10 	vmov	r2, r3, d0
 8010f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8010f92:	f7ef fb41 	bl	8000618 <__aeabi_dmul>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	achcp=(EARTH_RADIUS_KM_WGS84*c+geodetic->alt)*cos(geodetic->lat);
 8010f9e:	a356      	add	r3, pc, #344	@ (adr r3, 80110f8 <Calculate_User_PosVel+0x230>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8010fa8:	f7ef fb36 	bl	8000618 <__aeabi_dmul>
 8010fac:	4602      	mov	r2, r0
 8010fae:	460b      	mov	r3, r1
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010fba:	f7ef f977 	bl	80002ac <__adddf3>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	4614      	mov	r4, r2
 8010fc4:	461d      	mov	r5, r3
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	ed93 7b00 	vldr	d7, [r3]
 8010fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8010fd0:	eef0 0a67 	vmov.f32	s1, s15
 8010fd4:	f00d fa84 	bl	801e4e0 <cos>
 8010fd8:	ec53 2b10 	vmov	r2, r3, d0
 8010fdc:	4620      	mov	r0, r4
 8010fde:	4629      	mov	r1, r5
 8010fe0:	f7ef fb1a 	bl	8000618 <__aeabi_dmul>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	obs_pos[0] = (achcp*cos(geodetic->theta)); /* kilometers */
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	ed93 7b06 	vldr	d7, [r3, #24]
 8010ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8010ff6:	eef0 0a67 	vmov.f32	s1, s15
 8010ffa:	f00d fa71 	bl	801e4e0 <cos>
 8010ffe:	ec51 0b10 	vmov	r0, r1, d0
 8011002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011006:	f7ef fb07 	bl	8000618 <__aeabi_dmul>
 801100a:	4602      	mov	r2, r0
 801100c:	460b      	mov	r3, r1
 801100e:	68b9      	ldr	r1, [r7, #8]
 8011010:	e9c1 2300 	strd	r2, r3, [r1]
	obs_pos[1] = (achcp*sin(geodetic->theta));
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	ed93 7b06 	vldr	d7, [r3, #24]
 801101a:	eeb0 0a47 	vmov.f32	s0, s14
 801101e:	eef0 0a67 	vmov.f32	s1, s15
 8011022:	f00d fab9 	bl	801e598 <sin>
 8011026:	ec51 0b10 	vmov	r0, r1, d0
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	f103 0408 	add.w	r4, r3, #8
 8011030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011034:	f7ef faf0 	bl	8000618 <__aeabi_dmul>
 8011038:	4602      	mov	r2, r0
 801103a:	460b      	mov	r3, r1
 801103c:	e9c4 2300 	strd	r2, r3, [r4]
	obs_pos[2] = ((EARTH_RADIUS_KM_WGS84*sq+geodetic->alt)*sin(geodetic->lat));
 8011040:	a32d      	add	r3, pc, #180	@ (adr r3, 80110f8 <Calculate_User_PosVel+0x230>)
 8011042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011046:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801104a:	f7ef fae5 	bl	8000618 <__aeabi_dmul>
 801104e:	4602      	mov	r2, r0
 8011050:	460b      	mov	r3, r1
 8011052:	4610      	mov	r0, r2
 8011054:	4619      	mov	r1, r3
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801105c:	f7ef f926 	bl	80002ac <__adddf3>
 8011060:	4602      	mov	r2, r0
 8011062:	460b      	mov	r3, r1
 8011064:	4690      	mov	r8, r2
 8011066:	4699      	mov	r9, r3
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	ed93 7b00 	vldr	d7, [r3]
 801106e:	eeb0 0a47 	vmov.f32	s0, s14
 8011072:	eef0 0a67 	vmov.f32	s1, s15
 8011076:	f00d fa8f 	bl	801e598 <sin>
 801107a:	ec51 0b10 	vmov	r0, r1, d0
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	f103 0410 	add.w	r4, r3, #16
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	4640      	mov	r0, r8
 801108a:	4649      	mov	r1, r9
 801108c:	f7ef fac4 	bl	8000618 <__aeabi_dmul>
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	e9c4 2300 	strd	r2, r3, [r4]
	obs_vel[0] = (-EARTH_ANGULAR_VELOCITY*obs_pos[1]); /* kilometers/second */
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	3308      	adds	r3, #8
 801109c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110a0:	a317      	add	r3, pc, #92	@ (adr r3, 8011100 <Calculate_User_PosVel+0x238>)
 80110a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a6:	f7ef fab7 	bl	8000618 <__aeabi_dmul>
 80110aa:	4602      	mov	r2, r0
 80110ac:	460b      	mov	r3, r1
 80110ae:	6879      	ldr	r1, [r7, #4]
 80110b0:	e9c1 2300 	strd	r2, r3, [r1]
	obs_vel[1] = (EARTH_ANGULAR_VELOCITY*obs_pos[0]);
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f103 0408 	add.w	r4, r3, #8
 80110c0:	a311      	add	r3, pc, #68	@ (adr r3, 8011108 <Calculate_User_PosVel+0x240>)
 80110c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c6:	f7ef faa7 	bl	8000618 <__aeabi_dmul>
 80110ca:	4602      	mov	r2, r0
 80110cc:	460b      	mov	r3, r1
 80110ce:	e9c4 2300 	strd	r2, r3, [r4]
	obs_vel[2] = (0);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f103 0110 	add.w	r1, r3, #16
 80110d8:	f04f 0200 	mov.w	r2, #0
 80110dc:	f04f 0300 	mov.w	r3, #0
 80110e0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80110e4:	bf00      	nop
 80110e6:	3730      	adds	r7, #48	@ 0x30
 80110e8:	46bd      	mov	sp, r7
 80110ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80110ee:	bf00      	nop
 80110f0:	a57b0c1f 	.word	0xa57b0c1f
 80110f4:	3fefe488 	.word	0x3fefe488
 80110f8:	126e978d 	.word	0x126e978d
 80110fc:	40b8ea23 	.word	0x40b8ea23
 8011100:	d157db65 	.word	0xd157db65
 8011104:	bf131da7 	.word	0xbf131da7
 8011108:	d157db65 	.word	0xd157db65
 801110c:	3f131da7 	.word	0x3f131da7
 8011110:	3ff00000 	.word	0x3ff00000
 8011114:	f1fe94ef 	.word	0xf1fe94ef
 8011118:	bf7b6b90 	.word	0xbf7b6b90
 801111c:	00000000 	.word	0x00000000

08011120 <DayNum>:

long DayNum(int m, int d, int y)
{
 8011120:	b5b0      	push	{r4, r5, r7, lr}
 8011122:	b08a      	sub	sp, #40	@ 0x28
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]

	long dn;
	double mm, yy;

	if (m<3) {
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2b02      	cmp	r3, #2
 8011130:	dc05      	bgt.n	801113e <DayNum+0x1e>
		y--;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	3b01      	subs	r3, #1
 8011136:	607b      	str	r3, [r7, #4]
		m+=12;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	330c      	adds	r3, #12
 801113c:	60fb      	str	r3, [r7, #12]
	}

	if (y<57)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2b38      	cmp	r3, #56	@ 0x38
 8011142:	dc02      	bgt.n	801114a <DayNum+0x2a>
		y+=100;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3364      	adds	r3, #100	@ 0x64
 8011148:	607b      	str	r3, [r7, #4]

	yy=(double)y;
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7ef f9fa 	bl	8000544 <__aeabi_i2d>
 8011150:	4602      	mov	r2, r0
 8011152:	460b      	mov	r3, r1
 8011154:	e9c7 2308 	strd	r2, r3, [r7, #32]
	mm=(double)m;
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	f7ef f9f3 	bl	8000544 <__aeabi_i2d>
 801115e:	4602      	mov	r2, r0
 8011160:	460b      	mov	r3, r1
 8011162:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dn=(long)(floor(365.25*(yy-80.0))-floor(19.0+yy/100.0)+floor(4.75+yy/400.0)-16.0);
 8011166:	f04f 0200 	mov.w	r2, #0
 801116a:	4b57      	ldr	r3, [pc, #348]	@ (80112c8 <DayNum+0x1a8>)
 801116c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011170:	f7ef f89a 	bl	80002a8 <__aeabi_dsub>
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	4610      	mov	r0, r2
 801117a:	4619      	mov	r1, r3
 801117c:	a34c      	add	r3, pc, #304	@ (adr r3, 80112b0 <DayNum+0x190>)
 801117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011182:	f7ef fa49 	bl	8000618 <__aeabi_dmul>
 8011186:	4602      	mov	r2, r0
 8011188:	460b      	mov	r3, r1
 801118a:	ec43 2b17 	vmov	d7, r2, r3
 801118e:	eeb0 0a47 	vmov.f32	s0, s14
 8011192:	eef0 0a67 	vmov.f32	s1, s15
 8011196:	f00d fb37 	bl	801e808 <floor>
 801119a:	ec55 4b10 	vmov	r4, r5, d0
 801119e:	f04f 0200 	mov.w	r2, #0
 80111a2:	4b4a      	ldr	r3, [pc, #296]	@ (80112cc <DayNum+0x1ac>)
 80111a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80111a8:	f7ef fb60 	bl	800086c <__aeabi_ddiv>
 80111ac:	4602      	mov	r2, r0
 80111ae:	460b      	mov	r3, r1
 80111b0:	4610      	mov	r0, r2
 80111b2:	4619      	mov	r1, r3
 80111b4:	f04f 0200 	mov.w	r2, #0
 80111b8:	4b45      	ldr	r3, [pc, #276]	@ (80112d0 <DayNum+0x1b0>)
 80111ba:	f7ef f877 	bl	80002ac <__adddf3>
 80111be:	4602      	mov	r2, r0
 80111c0:	460b      	mov	r3, r1
 80111c2:	ec43 2b17 	vmov	d7, r2, r3
 80111c6:	eeb0 0a47 	vmov.f32	s0, s14
 80111ca:	eef0 0a67 	vmov.f32	s1, s15
 80111ce:	f00d fb1b 	bl	801e808 <floor>
 80111d2:	ec53 2b10 	vmov	r2, r3, d0
 80111d6:	4620      	mov	r0, r4
 80111d8:	4629      	mov	r1, r5
 80111da:	f7ef f865 	bl	80002a8 <__aeabi_dsub>
 80111de:	4602      	mov	r2, r0
 80111e0:	460b      	mov	r3, r1
 80111e2:	4614      	mov	r4, r2
 80111e4:	461d      	mov	r5, r3
 80111e6:	f04f 0200 	mov.w	r2, #0
 80111ea:	4b3a      	ldr	r3, [pc, #232]	@ (80112d4 <DayNum+0x1b4>)
 80111ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80111f0:	f7ef fb3c 	bl	800086c <__aeabi_ddiv>
 80111f4:	4602      	mov	r2, r0
 80111f6:	460b      	mov	r3, r1
 80111f8:	4610      	mov	r0, r2
 80111fa:	4619      	mov	r1, r3
 80111fc:	f04f 0200 	mov.w	r2, #0
 8011200:	4b35      	ldr	r3, [pc, #212]	@ (80112d8 <DayNum+0x1b8>)
 8011202:	f7ef f853 	bl	80002ac <__adddf3>
 8011206:	4602      	mov	r2, r0
 8011208:	460b      	mov	r3, r1
 801120a:	ec43 2b17 	vmov	d7, r2, r3
 801120e:	eeb0 0a47 	vmov.f32	s0, s14
 8011212:	eef0 0a67 	vmov.f32	s1, s15
 8011216:	f00d faf7 	bl	801e808 <floor>
 801121a:	ec53 2b10 	vmov	r2, r3, d0
 801121e:	4620      	mov	r0, r4
 8011220:	4629      	mov	r1, r5
 8011222:	f7ef f843 	bl	80002ac <__adddf3>
 8011226:	4602      	mov	r2, r0
 8011228:	460b      	mov	r3, r1
 801122a:	4610      	mov	r0, r2
 801122c:	4619      	mov	r1, r3
 801122e:	f04f 0200 	mov.w	r2, #0
 8011232:	4b2a      	ldr	r3, [pc, #168]	@ (80112dc <DayNum+0x1bc>)
 8011234:	f7ef f838 	bl	80002a8 <__aeabi_dsub>
 8011238:	4602      	mov	r2, r0
 801123a:	460b      	mov	r3, r1
 801123c:	4610      	mov	r0, r2
 801123e:	4619      	mov	r1, r3
 8011240:	f7ef fc9a 	bl	8000b78 <__aeabi_d2iz>
 8011244:	4603      	mov	r3, r0
 8011246:	617b      	str	r3, [r7, #20]
	dn+=d+30*m+(long)floor(0.6*mm-0.3);
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	4613      	mov	r3, r2
 801124c:	011b      	lsls	r3, r3, #4
 801124e:	1a9b      	subs	r3, r3, r2
 8011250:	005b      	lsls	r3, r3, #1
 8011252:	461a      	mov	r2, r3
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	18d4      	adds	r4, r2, r3
 8011258:	a317      	add	r3, pc, #92	@ (adr r3, 80112b8 <DayNum+0x198>)
 801125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011262:	f7ef f9d9 	bl	8000618 <__aeabi_dmul>
 8011266:	4602      	mov	r2, r0
 8011268:	460b      	mov	r3, r1
 801126a:	4610      	mov	r0, r2
 801126c:	4619      	mov	r1, r3
 801126e:	a314      	add	r3, pc, #80	@ (adr r3, 80112c0 <DayNum+0x1a0>)
 8011270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011274:	f7ef f818 	bl	80002a8 <__aeabi_dsub>
 8011278:	4602      	mov	r2, r0
 801127a:	460b      	mov	r3, r1
 801127c:	ec43 2b17 	vmov	d7, r2, r3
 8011280:	eeb0 0a47 	vmov.f32	s0, s14
 8011284:	eef0 0a67 	vmov.f32	s1, s15
 8011288:	f00d fabe 	bl	801e808 <floor>
 801128c:	ec53 2b10 	vmov	r2, r3, d0
 8011290:	4610      	mov	r0, r2
 8011292:	4619      	mov	r1, r3
 8011294:	f7ef fc70 	bl	8000b78 <__aeabi_d2iz>
 8011298:	4603      	mov	r3, r0
 801129a:	4423      	add	r3, r4
 801129c:	697a      	ldr	r2, [r7, #20]
 801129e:	4413      	add	r3, r2
 80112a0:	617b      	str	r3, [r7, #20]
	return dn;
 80112a2:	697b      	ldr	r3, [r7, #20]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3728      	adds	r7, #40	@ 0x28
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bdb0      	pop	{r4, r5, r7, pc}
 80112ac:	f3af 8000 	nop.w
 80112b0:	00000000 	.word	0x00000000
 80112b4:	4076d400 	.word	0x4076d400
 80112b8:	33333333 	.word	0x33333333
 80112bc:	3fe33333 	.word	0x3fe33333
 80112c0:	33333333 	.word	0x33333333
 80112c4:	3fd33333 	.word	0x3fd33333
 80112c8:	40540000 	.word	0x40540000
 80112cc:	40590000 	.word	0x40590000
 80112d0:	40330000 	.word	0x40330000
 80112d4:	40790000 	.word	0x40790000
 80112d8:	40130000 	.word	0x40130000
 80112dc:	40300000 	.word	0x40300000

080112e0 <Calculate_LatLonAlt>:


void Calculate_LatLonAlt(double time, const double pos[3],  geodetic_t *geodetic)
{
 80112e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112e4:	b08c      	sub	sp, #48	@ 0x30
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80112ec:	6078      	str	r0, [r7, #4]
 80112ee:	6039      	str	r1, [r7, #0]
	/* Reference:  The 1992 Astronomical Almanac, page K12. */

	double r, e2, phi, c;
	
	//Convert to julian time:
	time += JULIAN_TIME_DIFF;
 80112f0:	a3ae      	add	r3, pc, #696	@ (adr r3, 80115ac <Calculate_LatLonAlt+0x2cc>)
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80112fa:	f7ee ffd7 	bl	80002ac <__adddf3>
 80112fe:	4602      	mov	r2, r0
 8011300:	460b      	mov	r3, r1
 8011302:	e9c7 2302 	strd	r2, r3, [r7, #8]

	geodetic->theta = atan2(pos[1], pos[0]); /* radians */
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	3308      	adds	r3, #8
 801130a:	ed93 7b00 	vldr	d7, [r3]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	ed93 6b00 	vldr	d6, [r3]
 8011314:	eeb0 1a46 	vmov.f32	s2, s12
 8011318:	eef0 1a66 	vmov.f32	s3, s13
 801131c:	eeb0 0a47 	vmov.f32	s0, s14
 8011320:	eef0 0a67 	vmov.f32	s1, s15
 8011324:	f00c fdec 	bl	801df00 <atan2>
 8011328:	eeb0 7a40 	vmov.f32	s14, s0
 801132c:	eef0 7a60 	vmov.f32	s15, s1
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	ed83 7b06 	vstr	d7, [r3, #24]
	geodetic->lon = FMod2p(geodetic->theta-ThetaG_JD(time)); /* radians */
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 801133c:	ed97 0b02 	vldr	d0, [r7, #8]
 8011340:	f7ff fcf2 	bl	8010d28 <ThetaG_JD>
 8011344:	ec53 2b10 	vmov	r2, r3, d0
 8011348:	4640      	mov	r0, r8
 801134a:	4649      	mov	r1, r9
 801134c:	f7ee ffac 	bl	80002a8 <__aeabi_dsub>
 8011350:	4602      	mov	r2, r0
 8011352:	460b      	mov	r3, r1
 8011354:	ec43 2b17 	vmov	d7, r2, r3
 8011358:	eeb0 0a47 	vmov.f32	s0, s14
 801135c:	eef0 0a67 	vmov.f32	s1, s15
 8011360:	f7ff fb9e 	bl	8010aa0 <FMod2p>
 8011364:	eeb0 7a40 	vmov.f32	s14, s0
 8011368:	eef0 7a60 	vmov.f32	s15, s1
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	ed83 7b02 	vstr	d7, [r3, #8]
	r = sqrt(Sqr(pos[0])+Sqr(pos[1]));
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	ed93 7b00 	vldr	d7, [r3]
 8011378:	eeb0 0a47 	vmov.f32	s0, s14
 801137c:	eef0 0a67 	vmov.f32	s1, s15
 8011380:	f7ff fb76 	bl	8010a70 <Sqr>
 8011384:	ec59 8b10 	vmov	r8, r9, d0
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	3308      	adds	r3, #8
 801138c:	ed93 7b00 	vldr	d7, [r3]
 8011390:	eeb0 0a47 	vmov.f32	s0, s14
 8011394:	eef0 0a67 	vmov.f32	s1, s15
 8011398:	f7ff fb6a 	bl	8010a70 <Sqr>
 801139c:	ec53 2b10 	vmov	r2, r3, d0
 80113a0:	4640      	mov	r0, r8
 80113a2:	4649      	mov	r1, r9
 80113a4:	f7ee ff82 	bl	80002ac <__adddf3>
 80113a8:	4602      	mov	r2, r0
 80113aa:	460b      	mov	r3, r1
 80113ac:	ec43 2b17 	vmov	d7, r2, r3
 80113b0:	eeb0 0a47 	vmov.f32	s0, s14
 80113b4:	eef0 0a67 	vmov.f32	s1, s15
 80113b8:	f00c fecc 	bl	801e154 <sqrt>
 80113bc:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	e2 = FLATTENING_FACTOR*(2-FLATTENING_FACTOR);
 80113c0:	a37c      	add	r3, pc, #496	@ (adr r3, 80115b4 <Calculate_LatLonAlt+0x2d4>)
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	geodetic->lat=atan2(pos[2],r); /* radians */
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	3310      	adds	r3, #16
 80113ce:	ed93 7b00 	vldr	d7, [r3]
 80113d2:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 80113d6:	eeb0 0a47 	vmov.f32	s0, s14
 80113da:	eef0 0a67 	vmov.f32	s1, s15
 80113de:	f00c fd8f 	bl	801df00 <atan2>
 80113e2:	eeb0 7a40 	vmov.f32	s14, s0
 80113e6:	eef0 7a60 	vmov.f32	s15, s1
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	ed83 7b00 	vstr	d7, [r3]

	do
	{
		phi=geodetic->lat;
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		c=1/sqrt(1-e2*Sqr(sin(phi)));
 80113fa:	ed97 0b06 	vldr	d0, [r7, #24]
 80113fe:	f00d f8cb 	bl	801e598 <sin>
 8011402:	eeb0 7a40 	vmov.f32	s14, s0
 8011406:	eef0 7a60 	vmov.f32	s15, s1
 801140a:	eeb0 0a47 	vmov.f32	s0, s14
 801140e:	eef0 0a67 	vmov.f32	s1, s15
 8011412:	f7ff fb2d 	bl	8010a70 <Sqr>
 8011416:	ec51 0b10 	vmov	r0, r1, d0
 801141a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801141e:	f7ef f8fb 	bl	8000618 <__aeabi_dmul>
 8011422:	4602      	mov	r2, r0
 8011424:	460b      	mov	r3, r1
 8011426:	f04f 0000 	mov.w	r0, #0
 801142a:	495f      	ldr	r1, [pc, #380]	@ (80115a8 <Calculate_LatLonAlt+0x2c8>)
 801142c:	f7ee ff3c 	bl	80002a8 <__aeabi_dsub>
 8011430:	4602      	mov	r2, r0
 8011432:	460b      	mov	r3, r1
 8011434:	ec43 2b17 	vmov	d7, r2, r3
 8011438:	eeb0 0a47 	vmov.f32	s0, s14
 801143c:	eef0 0a67 	vmov.f32	s1, s15
 8011440:	f00c fe88 	bl	801e154 <sqrt>
 8011444:	ec53 2b10 	vmov	r2, r3, d0
 8011448:	f04f 0000 	mov.w	r0, #0
 801144c:	4956      	ldr	r1, [pc, #344]	@ (80115a8 <Calculate_LatLonAlt+0x2c8>)
 801144e:	f7ef fa0d 	bl	800086c <__aeabi_ddiv>
 8011452:	4602      	mov	r2, r0
 8011454:	460b      	mov	r3, r1
 8011456:	e9c7 2304 	strd	r2, r3, [r7, #16]
		geodetic->lat=atan2(pos[2]+EARTH_RADIUS_KM_WGS84*c*e2*sin(phi),r);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3310      	adds	r3, #16
 801145e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011462:	a349      	add	r3, pc, #292	@ (adr r3, 8011588 <Calculate_LatLonAlt+0x2a8>)
 8011464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011468:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801146c:	f7ef f8d4 	bl	8000618 <__aeabi_dmul>
 8011470:	4602      	mov	r2, r0
 8011472:	460b      	mov	r3, r1
 8011474:	4610      	mov	r0, r2
 8011476:	4619      	mov	r1, r3
 8011478:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801147c:	f7ef f8cc 	bl	8000618 <__aeabi_dmul>
 8011480:	4602      	mov	r2, r0
 8011482:	460b      	mov	r3, r1
 8011484:	4692      	mov	sl, r2
 8011486:	469b      	mov	fp, r3
 8011488:	ed97 0b06 	vldr	d0, [r7, #24]
 801148c:	f00d f884 	bl	801e598 <sin>
 8011490:	ec53 2b10 	vmov	r2, r3, d0
 8011494:	4650      	mov	r0, sl
 8011496:	4659      	mov	r1, fp
 8011498:	f7ef f8be 	bl	8000618 <__aeabi_dmul>
 801149c:	4602      	mov	r2, r0
 801149e:	460b      	mov	r3, r1
 80114a0:	4640      	mov	r0, r8
 80114a2:	4649      	mov	r1, r9
 80114a4:	f7ee ff02 	bl	80002ac <__adddf3>
 80114a8:	4602      	mov	r2, r0
 80114aa:	460b      	mov	r3, r1
 80114ac:	ec43 2b17 	vmov	d7, r2, r3
 80114b0:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 80114b4:	eeb0 0a47 	vmov.f32	s0, s14
 80114b8:	eef0 0a67 	vmov.f32	s1, s15
 80114bc:	f00c fd20 	bl	801df00 <atan2>
 80114c0:	eeb0 7a40 	vmov.f32	s14, s0
 80114c4:	eef0 7a60 	vmov.f32	s15, s1
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	ed83 7b00 	vstr	d7, [r3]

	} while (fabs(geodetic->lat-phi)>=1E-10);
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80114d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80114d8:	f7ee fee6 	bl	80002a8 <__aeabi_dsub>
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	4614      	mov	r4, r2
 80114e2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80114e6:	a32a      	add	r3, pc, #168	@ (adr r3, 8011590 <Calculate_LatLonAlt+0x2b0>)
 80114e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ec:	4620      	mov	r0, r4
 80114ee:	4629      	mov	r1, r5
 80114f0:	f7ef fb18 	bl	8000b24 <__aeabi_dcmpge>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f47f af7a 	bne.w	80113f0 <Calculate_LatLonAlt+0x110>

	geodetic->alt=r/cos(geodetic->lat)-EARTH_RADIUS_KM_WGS84*c; /* kilometers */
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	ed93 7b00 	vldr	d7, [r3]
 8011502:	eeb0 0a47 	vmov.f32	s0, s14
 8011506:	eef0 0a67 	vmov.f32	s1, s15
 801150a:	f00c ffe9 	bl	801e4e0 <cos>
 801150e:	ec53 2b10 	vmov	r2, r3, d0
 8011512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8011516:	f7ef f9a9 	bl	800086c <__aeabi_ddiv>
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	4614      	mov	r4, r2
 8011520:	461d      	mov	r5, r3
 8011522:	a319      	add	r3, pc, #100	@ (adr r3, 8011588 <Calculate_LatLonAlt+0x2a8>)
 8011524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011528:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801152c:	f7ef f874 	bl	8000618 <__aeabi_dmul>
 8011530:	4602      	mov	r2, r0
 8011532:	460b      	mov	r3, r1
 8011534:	4620      	mov	r0, r4
 8011536:	4629      	mov	r1, r5
 8011538:	f7ee feb6 	bl	80002a8 <__aeabi_dsub>
 801153c:	4602      	mov	r2, r0
 801153e:	460b      	mov	r3, r1
 8011540:	6839      	ldr	r1, [r7, #0]
 8011542:	e9c1 2304 	strd	r2, r3, [r1, #16]

	if (geodetic->lat>PI_HALF)
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	e9d3 0100 	ldrd	r0, r1, [r3]
 801154c:	a312      	add	r3, pc, #72	@ (adr r3, 8011598 <Calculate_LatLonAlt+0x2b8>)
 801154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011552:	f7ef faf1 	bl	8000b38 <__aeabi_dcmpgt>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d100      	bne.n	801155e <Calculate_LatLonAlt+0x27e>
		geodetic->lat-= 2*M_PI;
}
 801155c:	e00c      	b.n	8011578 <Calculate_LatLonAlt+0x298>
		geodetic->lat-= 2*M_PI;
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011564:	a30e      	add	r3, pc, #56	@ (adr r3, 80115a0 <Calculate_LatLonAlt+0x2c0>)
 8011566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156a:	f7ee fe9d 	bl	80002a8 <__aeabi_dsub>
 801156e:	4602      	mov	r2, r0
 8011570:	460b      	mov	r3, r1
 8011572:	6839      	ldr	r1, [r7, #0]
 8011574:	e9c1 2300 	strd	r2, r3, [r1]
}
 8011578:	bf00      	nop
 801157a:	3730      	adds	r7, #48	@ 0x30
 801157c:	46bd      	mov	sp, r7
 801157e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011582:	bf00      	nop
 8011584:	f3af 8000 	nop.w
 8011588:	126e978d 	.word	0x126e978d
 801158c:	40b8ea23 	.word	0x40b8ea23
 8011590:	d9d7bdbb 	.word	0xd9d7bdbb
 8011594:	3ddb7cdf 	.word	0x3ddb7cdf
 8011598:	54442d18 	.word	0x54442d18
 801159c:	3ff921fb 	.word	0x3ff921fb
 80115a0:	54442d18 	.word	0x54442d18
 80115a4:	401921fb 	.word	0x401921fb
 80115a8:	3ff00000 	.word	0x3ff00000
 80115ac:	40000000 	.word	0x40000000
 80115b0:	4142a5e7 	.word	0x4142a5e7
 80115b4:	f1fe94ef 	.word	0xf1fe94ef
 80115b8:	3f7b6b90 	.word	0x3f7b6b90
 80115bc:	00000000 	.word	0x00000000

080115c0 <Calculate_Obs>:

void Calculate_Obs(double time, const double pos[3], const double vel[3], geodetic_t *geodetic, vector_t *obs_set)
{
 80115c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80115c4:	b0b4      	sub	sp, #208	@ 0xd0
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	ed87 0b06 	vstr	d0, [r7, #24]
 80115cc:	6178      	str	r0, [r7, #20]
 80115ce:	6139      	str	r1, [r7, #16]
 80115d0:	60fa      	str	r2, [r7, #12]
 80115d2:	60bb      	str	r3, [r7, #8]
	double obs_pos[3];
	double obs_vel[3];
	double range[3];
	double rgvel[3];

	Calculate_User_PosVel(time, geodetic, obs_pos, obs_vel);
 80115d4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80115d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80115dc:	4619      	mov	r1, r3
 80115de:	68f8      	ldr	r0, [r7, #12]
 80115e0:	ed97 0b06 	vldr	d0, [r7, #24]
 80115e4:	f7ff fc70 	bl	8010ec8 <Calculate_User_PosVel>

	vec3_sub(pos, obs_pos, range);
 80115e8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80115ec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80115f0:	4619      	mov	r1, r3
 80115f2:	6978      	ldr	r0, [r7, #20]
 80115f4:	f7ff fa05 	bl	8010a02 <vec3_sub>
	vec3_sub(vel, obs_vel, rgvel);
 80115f8:	f107 0220 	add.w	r2, r7, #32
 80115fc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011600:	4619      	mov	r1, r3
 8011602:	6938      	ldr	r0, [r7, #16]
 8011604:	f7ff f9fd 	bl	8010a02 <vec3_sub>
	
	double range_length = vec3_length(range);
 8011608:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801160c:	4618      	mov	r0, r3
 801160e:	f7ff f93a 	bl	8010886 <vec3_length>
 8011612:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0

	sin_lat=sin(geodetic->lat);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	ed93 7b00 	vldr	d7, [r3]
 801161c:	eeb0 0a47 	vmov.f32	s0, s14
 8011620:	eef0 0a67 	vmov.f32	s1, s15
 8011624:	f00c ffb8 	bl	801e598 <sin>
 8011628:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	cos_lat=cos(geodetic->lat);
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	ed93 7b00 	vldr	d7, [r3]
 8011632:	eeb0 0a47 	vmov.f32	s0, s14
 8011636:	eef0 0a67 	vmov.f32	s1, s15
 801163a:	f00c ff51 	bl	801e4e0 <cos>
 801163e:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
	sin_theta=sin(geodetic->theta);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	ed93 7b06 	vldr	d7, [r3, #24]
 8011648:	eeb0 0a47 	vmov.f32	s0, s14
 801164c:	eef0 0a67 	vmov.f32	s1, s15
 8011650:	f00c ffa2 	bl	801e598 <sin>
 8011654:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
	cos_theta=cos(geodetic->theta);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	ed93 7b06 	vldr	d7, [r3, #24]
 801165e:	eeb0 0a47 	vmov.f32	s0, s14
 8011662:	eef0 0a67 	vmov.f32	s1, s15
 8011666:	f00c ff3b 	bl	801e4e0 <cos>
 801166a:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0
	top_s=sin_lat*cos_theta*range[0]+sin_lat*sin_theta*range[1]-cos_lat*range[2];
 801166e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8011672:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8011676:	f7ee ffcf 	bl	8000618 <__aeabi_dmul>
 801167a:	4602      	mov	r2, r0
 801167c:	460b      	mov	r3, r1
 801167e:	4610      	mov	r0, r2
 8011680:	4619      	mov	r1, r3
 8011682:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011686:	f7ee ffc7 	bl	8000618 <__aeabi_dmul>
 801168a:	4602      	mov	r2, r0
 801168c:	460b      	mov	r3, r1
 801168e:	4690      	mov	r8, r2
 8011690:	4699      	mov	r9, r3
 8011692:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8011696:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 801169a:	f7ee ffbd 	bl	8000618 <__aeabi_dmul>
 801169e:	4602      	mov	r2, r0
 80116a0:	460b      	mov	r3, r1
 80116a2:	4610      	mov	r0, r2
 80116a4:	4619      	mov	r1, r3
 80116a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80116aa:	f7ee ffb5 	bl	8000618 <__aeabi_dmul>
 80116ae:	4602      	mov	r2, r0
 80116b0:	460b      	mov	r3, r1
 80116b2:	4640      	mov	r0, r8
 80116b4:	4649      	mov	r1, r9
 80116b6:	f7ee fdf9 	bl	80002ac <__adddf3>
 80116ba:	4602      	mov	r2, r0
 80116bc:	460b      	mov	r3, r1
 80116be:	4690      	mov	r8, r2
 80116c0:	4699      	mov	r9, r3
 80116c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80116c6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80116ca:	f7ee ffa5 	bl	8000618 <__aeabi_dmul>
 80116ce:	4602      	mov	r2, r0
 80116d0:	460b      	mov	r3, r1
 80116d2:	4640      	mov	r0, r8
 80116d4:	4649      	mov	r1, r9
 80116d6:	f7ee fde7 	bl	80002a8 <__aeabi_dsub>
 80116da:	4602      	mov	r2, r0
 80116dc:	460b      	mov	r3, r1
 80116de:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	top_e=-sin_theta*range[0]+cos_theta*range[1];
 80116e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80116e6:	603b      	str	r3, [r7, #0]
 80116e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80116f0:	607b      	str	r3, [r7, #4]
 80116f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80116f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116fa:	f7ee ff8d 	bl	8000618 <__aeabi_dmul>
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	4690      	mov	r8, r2
 8011704:	4699      	mov	r9, r3
 8011706:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801170a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801170e:	f7ee ff83 	bl	8000618 <__aeabi_dmul>
 8011712:	4602      	mov	r2, r0
 8011714:	460b      	mov	r3, r1
 8011716:	4640      	mov	r0, r8
 8011718:	4649      	mov	r1, r9
 801171a:	f7ee fdc7 	bl	80002ac <__adddf3>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	top_z=cos_lat*cos_theta*range[0]+cos_lat*sin_theta*range[1]+sin_lat*range[2];
 8011726:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801172a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801172e:	f7ee ff73 	bl	8000618 <__aeabi_dmul>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	4610      	mov	r0, r2
 8011738:	4619      	mov	r1, r3
 801173a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801173e:	f7ee ff6b 	bl	8000618 <__aeabi_dmul>
 8011742:	4602      	mov	r2, r0
 8011744:	460b      	mov	r3, r1
 8011746:	4690      	mov	r8, r2
 8011748:	4699      	mov	r9, r3
 801174a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 801174e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8011752:	f7ee ff61 	bl	8000618 <__aeabi_dmul>
 8011756:	4602      	mov	r2, r0
 8011758:	460b      	mov	r3, r1
 801175a:	4610      	mov	r0, r2
 801175c:	4619      	mov	r1, r3
 801175e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011762:	f7ee ff59 	bl	8000618 <__aeabi_dmul>
 8011766:	4602      	mov	r2, r0
 8011768:	460b      	mov	r3, r1
 801176a:	4640      	mov	r0, r8
 801176c:	4649      	mov	r1, r9
 801176e:	f7ee fd9d 	bl	80002ac <__adddf3>
 8011772:	4602      	mov	r2, r0
 8011774:	460b      	mov	r3, r1
 8011776:	4690      	mov	r8, r2
 8011778:	4699      	mov	r9, r3
 801177a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801177e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8011782:	f7ee ff49 	bl	8000618 <__aeabi_dmul>
 8011786:	4602      	mov	r2, r0
 8011788:	460b      	mov	r3, r1
 801178a:	4640      	mov	r0, r8
 801178c:	4649      	mov	r1, r9
 801178e:	f7ee fd8d 	bl	80002ac <__adddf3>
 8011792:	4602      	mov	r2, r0
 8011794:	460b      	mov	r3, r1
 8011796:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	azim=atan(-top_e/top_s); /* Azimuth */
 801179a:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 801179e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80117a2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80117a6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80117aa:	4620      	mov	r0, r4
 80117ac:	4629      	mov	r1, r5
 80117ae:	f7ef f85d 	bl	800086c <__aeabi_ddiv>
 80117b2:	4602      	mov	r2, r0
 80117b4:	460b      	mov	r3, r1
 80117b6:	ec43 2b17 	vmov	d7, r2, r3
 80117ba:	eeb0 0a47 	vmov.f32	s0, s14
 80117be:	eef0 0a67 	vmov.f32	s1, s15
 80117c2:	f00c fcf5 	bl	801e1b0 <atan>
 80117c6:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8

	if (top_s>0.0) 
 80117ca:	f04f 0200 	mov.w	r2, #0
 80117ce:	f04f 0300 	mov.w	r3, #0
 80117d2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80117d6:	f7ef f9af 	bl	8000b38 <__aeabi_dcmpgt>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d00a      	beq.n	80117f6 <Calculate_Obs+0x236>
		azim=azim+PI;
 80117e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80118d0 <Calculate_Obs+0x310>)
 80117e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80117ea:	f7ee fd5f 	bl	80002ac <__adddf3>
 80117ee:	4602      	mov	r2, r0
 80117f0:	460b      	mov	r3, r1
 80117f2:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

	if (azim<0.0)
 80117f6:	f04f 0200 	mov.w	r2, #0
 80117fa:	f04f 0300 	mov.w	r3, #0
 80117fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011802:	f7ef f97b 	bl	8000afc <__aeabi_dcmplt>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00a      	beq.n	8011822 <Calculate_Obs+0x262>
		azim = azim + 2*M_PI;
 801180c:	a332      	add	r3, pc, #200	@ (adr r3, 80118d8 <Calculate_Obs+0x318>)
 801180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011816:	f7ee fd49 	bl	80002ac <__adddf3>
 801181a:	4602      	mov	r2, r0
 801181c:	460b      	mov	r3, r1
 801181e:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

	el=asin_(top_z/range_length);
 8011822:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8011826:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 801182a:	f7ef f81f 	bl	800086c <__aeabi_ddiv>
 801182e:	4602      	mov	r2, r0
 8011830:	460b      	mov	r3, r1
 8011832:	ec43 2b17 	vmov	d7, r2, r3
 8011836:	eeb0 0a47 	vmov.f32	s0, s14
 801183a:	eef0 0a67 	vmov.f32	s1, s15
 801183e:	f000 f8d3 	bl	80119e8 <asin_>
 8011842:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
	obs_set->x=azim;	/* Azimuth (radians)   */
 8011846:	68b9      	ldr	r1, [r7, #8]
 8011848:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 801184c:	e9c1 2300 	strd	r2, r3, [r1]
	obs_set->y=el;		/* Elevation (radians) */
 8011850:	68b9      	ldr	r1, [r7, #8]
 8011852:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8011856:	e9c1 2302 	strd	r2, r3, [r1, #8]
	obs_set->z=range_length;	/* Range (kilometers)  */
 801185a:	68b9      	ldr	r1, [r7, #8]
 801185c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8011860:	e9c1 2304 	strd	r2, r3, [r1, #16]

	/* Range Rate (kilometers/second) */
	obs_set->w = vec3_dot(range, rgvel)/vec3_length(range);
 8011864:	f107 0220 	add.w	r2, r7, #32
 8011868:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801186c:	4611      	mov	r1, r2
 801186e:	4618      	mov	r0, r3
 8011870:	f7ff f852 	bl	8010918 <vec3_dot>
 8011874:	ec55 4b10 	vmov	r4, r5, d0
 8011878:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801187c:	4618      	mov	r0, r3
 801187e:	f7ff f802 	bl	8010886 <vec3_length>
 8011882:	ec53 2b10 	vmov	r2, r3, d0
 8011886:	4620      	mov	r0, r4
 8011888:	4629      	mov	r1, r5
 801188a:	f7ee ffef 	bl	800086c <__aeabi_ddiv>
 801188e:	4602      	mov	r2, r0
 8011890:	460b      	mov	r3, r1
 8011892:	68b9      	ldr	r1, [r7, #8]
 8011894:	e9c1 2306 	strd	r2, r3, [r1, #24]
	obs_set->y=el;
 8011898:	68b9      	ldr	r1, [r7, #8]
 801189a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801189e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/**** End bypass ****/

	if (obs_set->y<0.0)
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80118a8:	f04f 0200 	mov.w	r2, #0
 80118ac:	f04f 0300 	mov.w	r3, #0
 80118b0:	f7ef f924 	bl	8000afc <__aeabi_dcmplt>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d100      	bne.n	80118bc <Calculate_Obs+0x2fc>
		obs_set->y=el;  /* Reset to true elevation */
}
 80118ba:	e004      	b.n	80118c6 <Calculate_Obs+0x306>
		obs_set->y=el;  /* Reset to true elevation */
 80118bc:	68b9      	ldr	r1, [r7, #8]
 80118be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80118c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80118c6:	bf00      	nop
 80118c8:	37d0      	adds	r7, #208	@ 0xd0
 80118ca:	46bd      	mov	sp, r7
 80118cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80118d0:	54442d18 	.word	0x54442d18
 80118d4:	400921fb 	.word	0x400921fb
 80118d8:	54442d18 	.word	0x54442d18
 80118dc:	401921fb 	.word	0x401921fb

080118e0 <SubString>:
}

/* .... SGP4/SDP4 functions end .... */

char *SubString(const char *string, int buffer_length, char *output_buffer, int start, int end)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b087      	sub	sp, #28
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	607a      	str	r2, [r7, #4]
 80118ec:	603b      	str	r3, [r7, #0]

	unsigned x, y;

	if ((end >= start) && (buffer_length > end - start + 2))
 80118ee:	6a3a      	ldr	r2, [r7, #32]
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	db30      	blt.n	8011958 <SubString+0x78>
 80118f6:	6a3a      	ldr	r2, [r7, #32]
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	1ad3      	subs	r3, r2, r3
 80118fc:	3302      	adds	r3, #2
 80118fe:	68ba      	ldr	r2, [r7, #8]
 8011900:	429a      	cmp	r2, r3
 8011902:	dd29      	ble.n	8011958 <SubString+0x78>
	{
		for (x=start, y=0; x<=end && string[x]!=0; x++)
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	617b      	str	r3, [r7, #20]
 8011908:	2300      	movs	r3, #0
 801190a:	613b      	str	r3, [r7, #16]
 801190c:	e013      	b.n	8011936 <SubString+0x56>
			if (string[x]!=' ')
 801190e:	68fa      	ldr	r2, [r7, #12]
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	4413      	add	r3, r2
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	2b20      	cmp	r3, #32
 8011918:	d00a      	beq.n	8011930 <SubString+0x50>
			{
				output_buffer[y] = string[x];
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	441a      	add	r2, r3
 8011920:	6879      	ldr	r1, [r7, #4]
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	440b      	add	r3, r1
 8011926:	7812      	ldrb	r2, [r2, #0]
 8011928:	701a      	strb	r2, [r3, #0]
				y++;
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	3301      	adds	r3, #1
 801192e:	613b      	str	r3, [r7, #16]
		for (x=start, y=0; x<=end && string[x]!=0; x++)
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	3301      	adds	r3, #1
 8011934:	617b      	str	r3, [r7, #20]
 8011936:	6a3b      	ldr	r3, [r7, #32]
 8011938:	697a      	ldr	r2, [r7, #20]
 801193a:	429a      	cmp	r2, r3
 801193c:	d805      	bhi.n	801194a <SubString+0x6a>
 801193e:	68fa      	ldr	r2, [r7, #12]
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	4413      	add	r3, r2
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1e1      	bne.n	801190e <SubString+0x2e>
			}

		output_buffer[y]=0;
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	4413      	add	r3, r2
 8011950:	2200      	movs	r2, #0
 8011952:	701a      	strb	r2, [r3, #0]
		return output_buffer;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	e000      	b.n	801195a <SubString+0x7a>
	}
	else
		return NULL;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	371c      	adds	r7, #28
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr
	...

08011968 <acos_>:

double acos_(double arg)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	ed87 0b00 	vstr	d0, [r7]
	return acos(arg < -1.0 ? -1.0 : (arg > 1.0 ? 1.0 : arg));
 8011972:	f04f 0200 	mov.w	r2, #0
 8011976:	4b1a      	ldr	r3, [pc, #104]	@ (80119e0 <acos_+0x78>)
 8011978:	e9d7 0100 	ldrd	r0, r1, [r7]
 801197c:	f7ef f8be 	bl	8000afc <__aeabi_dcmplt>
 8011980:	4603      	mov	r3, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d002      	beq.n	801198c <acos_+0x24>
 8011986:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80119d0 <acos_+0x68>
 801198a:	e00e      	b.n	80119aa <acos_+0x42>
 801198c:	f04f 0200 	mov.w	r2, #0
 8011990:	4b14      	ldr	r3, [pc, #80]	@ (80119e4 <acos_+0x7c>)
 8011992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011996:	f7ef f8cf 	bl	8000b38 <__aeabi_dcmpgt>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	d002      	beq.n	80119a6 <acos_+0x3e>
 80119a0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80119d8 <acos_+0x70>
 80119a4:	e001      	b.n	80119aa <acos_+0x42>
 80119a6:	ed97 7b00 	vldr	d7, [r7]
 80119aa:	eeb0 0a47 	vmov.f32	s0, s14
 80119ae:	eef0 0a67 	vmov.f32	s1, s15
 80119b2:	f00c fa3d 	bl	801de30 <acos>
 80119b6:	eeb0 7a40 	vmov.f32	s14, s0
 80119ba:	eef0 7a60 	vmov.f32	s15, s1
}
 80119be:	eeb0 0a47 	vmov.f32	s0, s14
 80119c2:	eef0 0a67 	vmov.f32	s1, s15
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	f3af 8000 	nop.w
 80119d0:	00000000 	.word	0x00000000
 80119d4:	bff00000 	.word	0xbff00000
 80119d8:	00000000 	.word	0x00000000
 80119dc:	3ff00000 	.word	0x3ff00000
 80119e0:	bff00000 	.word	0xbff00000
 80119e4:	3ff00000 	.word	0x3ff00000

080119e8 <asin_>:

double asin_(double arg)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	ed87 0b00 	vstr	d0, [r7]
	return asin(arg < -1.0 ? -1.0 : (arg > 1.0 ? 1.0 : arg));
 80119f2:	f04f 0200 	mov.w	r2, #0
 80119f6:	4b1a      	ldr	r3, [pc, #104]	@ (8011a60 <asin_+0x78>)
 80119f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80119fc:	f7ef f87e 	bl	8000afc <__aeabi_dcmplt>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d002      	beq.n	8011a0c <asin_+0x24>
 8011a06:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8011a50 <asin_+0x68>
 8011a0a:	e00e      	b.n	8011a2a <asin_+0x42>
 8011a0c:	f04f 0200 	mov.w	r2, #0
 8011a10:	4b14      	ldr	r3, [pc, #80]	@ (8011a64 <asin_+0x7c>)
 8011a12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011a16:	f7ef f88f 	bl	8000b38 <__aeabi_dcmpgt>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d002      	beq.n	8011a26 <asin_+0x3e>
 8011a20:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011a58 <asin_+0x70>
 8011a24:	e001      	b.n	8011a2a <asin_+0x42>
 8011a26:	ed97 7b00 	vldr	d7, [r7]
 8011a2a:	eeb0 0a47 	vmov.f32	s0, s14
 8011a2e:	eef0 0a67 	vmov.f32	s1, s15
 8011a32:	f00c fa31 	bl	801de98 <asin>
 8011a36:	eeb0 7a40 	vmov.f32	s14, s0
 8011a3a:	eef0 7a60 	vmov.f32	s15, s1
}
 8011a3e:	eeb0 0a47 	vmov.f32	s0, s14
 8011a42:	eef0 0a67 	vmov.f32	s1, s15
 8011a46:	3708      	adds	r7, #8
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	f3af 8000 	nop.w
 8011a50:	00000000 	.word	0x00000000
 8011a54:	bff00000 	.word	0xbff00000
 8011a58:	00000000 	.word	0x00000000
 8011a5c:	3ff00000 	.word	0x3ff00000
 8011a60:	bff00000 	.word	0xbff00000
 8011a64:	3ff00000 	.word	0x3ff00000

08011a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011a72:	4b0c      	ldr	r3, [pc, #48]	@ (8011aa4 <HAL_Init+0x3c>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	4a0b      	ldr	r2, [pc, #44]	@ (8011aa4 <HAL_Init+0x3c>)
 8011a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011a7e:	2003      	movs	r0, #3
 8011a80:	f000 f8df 	bl	8011c42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011a84:	200f      	movs	r0, #15
 8011a86:	f7f0 fc57 	bl	8002338 <HAL_InitTick>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d002      	beq.n	8011a96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8011a90:	2301      	movs	r3, #1
 8011a92:	71fb      	strb	r3, [r7, #7]
 8011a94:	e001      	b.n	8011a9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011a96:	f7f0 fc27 	bl	80022e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	40022000 	.word	0x40022000

08011aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8011aac:	4b06      	ldr	r3, [pc, #24]	@ (8011ac8 <HAL_IncTick+0x20>)
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	4b06      	ldr	r3, [pc, #24]	@ (8011acc <HAL_IncTick+0x24>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	4a04      	ldr	r2, [pc, #16]	@ (8011acc <HAL_IncTick+0x24>)
 8011aba:	6013      	str	r3, [r2, #0]
}
 8011abc:	bf00      	nop
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop
 8011ac8:	20000038 	.word	0x20000038
 8011acc:	20000e14 	.word	0x20000e14

08011ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8011ad4:	4b03      	ldr	r3, [pc, #12]	@ (8011ae4 <HAL_GetTick+0x14>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop
 8011ae4:	20000e14 	.word	0x20000e14

08011ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f003 0307 	and.w	r3, r3, #7
 8011af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011af8:	4b0c      	ldr	r3, [pc, #48]	@ (8011b2c <__NVIC_SetPriorityGrouping+0x44>)
 8011afa:	68db      	ldr	r3, [r3, #12]
 8011afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011afe:	68ba      	ldr	r2, [r7, #8]
 8011b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8011b04:	4013      	ands	r3, r2
 8011b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8011b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011b1a:	4a04      	ldr	r2, [pc, #16]	@ (8011b2c <__NVIC_SetPriorityGrouping+0x44>)
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	60d3      	str	r3, [r2, #12]
}
 8011b20:	bf00      	nop
 8011b22:	3714      	adds	r7, #20
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	e000ed00 	.word	0xe000ed00

08011b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011b30:	b480      	push	{r7}
 8011b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011b34:	4b04      	ldr	r3, [pc, #16]	@ (8011b48 <__NVIC_GetPriorityGrouping+0x18>)
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	0a1b      	lsrs	r3, r3, #8
 8011b3a:	f003 0307 	and.w	r3, r3, #7
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr
 8011b48:	e000ed00 	.word	0xe000ed00

08011b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	4603      	mov	r3, r0
 8011b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	db0b      	blt.n	8011b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011b5e:	79fb      	ldrb	r3, [r7, #7]
 8011b60:	f003 021f 	and.w	r2, r3, #31
 8011b64:	4907      	ldr	r1, [pc, #28]	@ (8011b84 <__NVIC_EnableIRQ+0x38>)
 8011b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b6a:	095b      	lsrs	r3, r3, #5
 8011b6c:	2001      	movs	r0, #1
 8011b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8011b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8011b76:	bf00      	nop
 8011b78:	370c      	adds	r7, #12
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop
 8011b84:	e000e100 	.word	0xe000e100

08011b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	4603      	mov	r3, r0
 8011b90:	6039      	str	r1, [r7, #0]
 8011b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	db0a      	blt.n	8011bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	b2da      	uxtb	r2, r3
 8011ba0:	490c      	ldr	r1, [pc, #48]	@ (8011bd4 <__NVIC_SetPriority+0x4c>)
 8011ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ba6:	0112      	lsls	r2, r2, #4
 8011ba8:	b2d2      	uxtb	r2, r2
 8011baa:	440b      	add	r3, r1
 8011bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011bb0:	e00a      	b.n	8011bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	b2da      	uxtb	r2, r3
 8011bb6:	4908      	ldr	r1, [pc, #32]	@ (8011bd8 <__NVIC_SetPriority+0x50>)
 8011bb8:	79fb      	ldrb	r3, [r7, #7]
 8011bba:	f003 030f 	and.w	r3, r3, #15
 8011bbe:	3b04      	subs	r3, #4
 8011bc0:	0112      	lsls	r2, r2, #4
 8011bc2:	b2d2      	uxtb	r2, r2
 8011bc4:	440b      	add	r3, r1
 8011bc6:	761a      	strb	r2, [r3, #24]
}
 8011bc8:	bf00      	nop
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr
 8011bd4:	e000e100 	.word	0xe000e100
 8011bd8:	e000ed00 	.word	0xe000ed00

08011bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b089      	sub	sp, #36	@ 0x24
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f003 0307 	and.w	r3, r3, #7
 8011bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	f1c3 0307 	rsb	r3, r3, #7
 8011bf6:	2b04      	cmp	r3, #4
 8011bf8:	bf28      	it	cs
 8011bfa:	2304      	movcs	r3, #4
 8011bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011bfe:	69fb      	ldr	r3, [r7, #28]
 8011c00:	3304      	adds	r3, #4
 8011c02:	2b06      	cmp	r3, #6
 8011c04:	d902      	bls.n	8011c0c <NVIC_EncodePriority+0x30>
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	3b03      	subs	r3, #3
 8011c0a:	e000      	b.n	8011c0e <NVIC_EncodePriority+0x32>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011c10:	f04f 32ff 	mov.w	r2, #4294967295
 8011c14:	69bb      	ldr	r3, [r7, #24]
 8011c16:	fa02 f303 	lsl.w	r3, r2, r3
 8011c1a:	43da      	mvns	r2, r3
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	401a      	ands	r2, r3
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011c24:	f04f 31ff 	mov.w	r1, #4294967295
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8011c2e:	43d9      	mvns	r1, r3
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011c34:	4313      	orrs	r3, r2
         );
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3724      	adds	r7, #36	@ 0x24
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr

08011c42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011c42:	b580      	push	{r7, lr}
 8011c44:	b082      	sub	sp, #8
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7ff ff4c 	bl	8011ae8 <__NVIC_SetPriorityGrouping>
}
 8011c50:	bf00      	nop
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b086      	sub	sp, #24
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	4603      	mov	r3, r0
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
 8011c64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8011c66:	2300      	movs	r3, #0
 8011c68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011c6a:	f7ff ff61 	bl	8011b30 <__NVIC_GetPriorityGrouping>
 8011c6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	68b9      	ldr	r1, [r7, #8]
 8011c74:	6978      	ldr	r0, [r7, #20]
 8011c76:	f7ff ffb1 	bl	8011bdc <NVIC_EncodePriority>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c80:	4611      	mov	r1, r2
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7ff ff80 	bl	8011b88 <__NVIC_SetPriority>
}
 8011c88:	bf00      	nop
 8011c8a:	3718      	adds	r7, #24
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	4603      	mov	r3, r0
 8011c98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7ff ff54 	bl	8011b4c <__NVIC_EnableIRQ>
}
 8011ca4:	bf00      	nop
 8011ca6:	3708      	adds	r7, #8
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011cac:	b480      	push	{r7}
 8011cae:	b085      	sub	sp, #20
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	d008      	beq.n	8011cd6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2204      	movs	r2, #4
 8011cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	e022      	b.n	8011d1c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f022 020e 	bic.w	r2, r2, #14
 8011ce4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f022 0201 	bic.w	r2, r2, #1
 8011cf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cfa:	f003 021c 	and.w	r2, r3, #28
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d02:	2101      	movs	r1, #1
 8011d04:	fa01 f202 	lsl.w	r2, r1, r2
 8011d08:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8011d1a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3714      	adds	r7, #20
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr

08011d28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d30:	2300      	movs	r3, #0
 8011d32:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	2b02      	cmp	r3, #2
 8011d3e:	d005      	beq.n	8011d4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2204      	movs	r2, #4
 8011d44:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8011d46:	2301      	movs	r3, #1
 8011d48:	73fb      	strb	r3, [r7, #15]
 8011d4a:	e029      	b.n	8011da0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f022 020e 	bic.w	r2, r2, #14
 8011d5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f022 0201 	bic.w	r2, r2, #1
 8011d6a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d70:	f003 021c 	and.w	r2, r3, #28
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d78:	2101      	movs	r1, #1
 8011d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8011d7e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2201      	movs	r2, #1
 8011d84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d003      	beq.n	8011da0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	4798      	blx	r3
    }
  }
  return status;
 8011da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3710      	adds	r7, #16
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
	...

08011dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b087      	sub	sp, #28
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8011db6:	2300      	movs	r3, #0
 8011db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011dba:	e17f      	b.n	80120bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	2101      	movs	r1, #1
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8011dc8:	4013      	ands	r3, r2
 8011dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 8171 	beq.w	80120b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	f003 0303 	and.w	r3, r3, #3
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d005      	beq.n	8011dec <HAL_GPIO_Init+0x40>
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	f003 0303 	and.w	r3, r3, #3
 8011de8:	2b02      	cmp	r3, #2
 8011dea:	d130      	bne.n	8011e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	689b      	ldr	r3, [r3, #8]
 8011df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	005b      	lsls	r3, r3, #1
 8011df6:	2203      	movs	r2, #3
 8011df8:	fa02 f303 	lsl.w	r3, r2, r3
 8011dfc:	43db      	mvns	r3, r3
 8011dfe:	693a      	ldr	r2, [r7, #16]
 8011e00:	4013      	ands	r3, r2
 8011e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	68da      	ldr	r2, [r3, #12]
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	005b      	lsls	r3, r3, #1
 8011e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e10:	693a      	ldr	r2, [r7, #16]
 8011e12:	4313      	orrs	r3, r2
 8011e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	693a      	ldr	r2, [r7, #16]
 8011e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011e22:	2201      	movs	r2, #1
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	fa02 f303 	lsl.w	r3, r2, r3
 8011e2a:	43db      	mvns	r3, r3
 8011e2c:	693a      	ldr	r2, [r7, #16]
 8011e2e:	4013      	ands	r3, r2
 8011e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	091b      	lsrs	r3, r3, #4
 8011e38:	f003 0201 	and.w	r2, r3, #1
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e42:	693a      	ldr	r2, [r7, #16]
 8011e44:	4313      	orrs	r3, r2
 8011e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	693a      	ldr	r2, [r7, #16]
 8011e4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	f003 0303 	and.w	r3, r3, #3
 8011e56:	2b03      	cmp	r3, #3
 8011e58:	d118      	bne.n	8011e8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8011e60:	2201      	movs	r2, #1
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	fa02 f303 	lsl.w	r3, r2, r3
 8011e68:	43db      	mvns	r3, r3
 8011e6a:	693a      	ldr	r2, [r7, #16]
 8011e6c:	4013      	ands	r3, r2
 8011e6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	08db      	lsrs	r3, r3, #3
 8011e76:	f003 0201 	and.w	r2, r3, #1
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e80:	693a      	ldr	r2, [r7, #16]
 8011e82:	4313      	orrs	r3, r2
 8011e84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	693a      	ldr	r2, [r7, #16]
 8011e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	f003 0303 	and.w	r3, r3, #3
 8011e94:	2b03      	cmp	r3, #3
 8011e96:	d017      	beq.n	8011ec8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	005b      	lsls	r3, r3, #1
 8011ea2:	2203      	movs	r2, #3
 8011ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ea8:	43db      	mvns	r3, r3
 8011eaa:	693a      	ldr	r2, [r7, #16]
 8011eac:	4013      	ands	r3, r2
 8011eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	689a      	ldr	r2, [r3, #8]
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	005b      	lsls	r3, r3, #1
 8011eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8011ebc:	693a      	ldr	r2, [r7, #16]
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	693a      	ldr	r2, [r7, #16]
 8011ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	f003 0303 	and.w	r3, r3, #3
 8011ed0:	2b02      	cmp	r3, #2
 8011ed2:	d123      	bne.n	8011f1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	08da      	lsrs	r2, r3, #3
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	3208      	adds	r2, #8
 8011edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	f003 0307 	and.w	r3, r3, #7
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	220f      	movs	r2, #15
 8011eec:	fa02 f303 	lsl.w	r3, r2, r3
 8011ef0:	43db      	mvns	r3, r3
 8011ef2:	693a      	ldr	r2, [r7, #16]
 8011ef4:	4013      	ands	r3, r2
 8011ef6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	691a      	ldr	r2, [r3, #16]
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	f003 0307 	and.w	r3, r3, #7
 8011f02:	009b      	lsls	r3, r3, #2
 8011f04:	fa02 f303 	lsl.w	r3, r2, r3
 8011f08:	693a      	ldr	r2, [r7, #16]
 8011f0a:	4313      	orrs	r3, r2
 8011f0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	08da      	lsrs	r2, r3, #3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	3208      	adds	r2, #8
 8011f16:	6939      	ldr	r1, [r7, #16]
 8011f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	2203      	movs	r2, #3
 8011f28:	fa02 f303 	lsl.w	r3, r2, r3
 8011f2c:	43db      	mvns	r3, r3
 8011f2e:	693a      	ldr	r2, [r7, #16]
 8011f30:	4013      	ands	r3, r2
 8011f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	f003 0203 	and.w	r2, r3, #3
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	005b      	lsls	r3, r3, #1
 8011f40:	fa02 f303 	lsl.w	r3, r2, r3
 8011f44:	693a      	ldr	r2, [r7, #16]
 8011f46:	4313      	orrs	r3, r2
 8011f48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	693a      	ldr	r2, [r7, #16]
 8011f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f000 80ac 	beq.w	80120b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80120dc <HAL_GPIO_Init+0x330>)
 8011f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f62:	4a5e      	ldr	r2, [pc, #376]	@ (80120dc <HAL_GPIO_Init+0x330>)
 8011f64:	f043 0301 	orr.w	r3, r3, #1
 8011f68:	6613      	str	r3, [r2, #96]	@ 0x60
 8011f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80120dc <HAL_GPIO_Init+0x330>)
 8011f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f6e:	f003 0301 	and.w	r3, r3, #1
 8011f72:	60bb      	str	r3, [r7, #8]
 8011f74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8011f76:	4a5a      	ldr	r2, [pc, #360]	@ (80120e0 <HAL_GPIO_Init+0x334>)
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	089b      	lsrs	r3, r3, #2
 8011f7c:	3302      	adds	r3, #2
 8011f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	f003 0303 	and.w	r3, r3, #3
 8011f8a:	009b      	lsls	r3, r3, #2
 8011f8c:	220f      	movs	r2, #15
 8011f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011f92:	43db      	mvns	r3, r3
 8011f94:	693a      	ldr	r2, [r7, #16]
 8011f96:	4013      	ands	r3, r2
 8011f98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8011fa0:	d025      	beq.n	8011fee <HAL_GPIO_Init+0x242>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80120e4 <HAL_GPIO_Init+0x338>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d01f      	beq.n	8011fea <HAL_GPIO_Init+0x23e>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	4a4e      	ldr	r2, [pc, #312]	@ (80120e8 <HAL_GPIO_Init+0x33c>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d019      	beq.n	8011fe6 <HAL_GPIO_Init+0x23a>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80120ec <HAL_GPIO_Init+0x340>)
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d013      	beq.n	8011fe2 <HAL_GPIO_Init+0x236>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80120f0 <HAL_GPIO_Init+0x344>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d00d      	beq.n	8011fde <HAL_GPIO_Init+0x232>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80120f4 <HAL_GPIO_Init+0x348>)
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d007      	beq.n	8011fda <HAL_GPIO_Init+0x22e>
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80120f8 <HAL_GPIO_Init+0x34c>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d101      	bne.n	8011fd6 <HAL_GPIO_Init+0x22a>
 8011fd2:	2306      	movs	r3, #6
 8011fd4:	e00c      	b.n	8011ff0 <HAL_GPIO_Init+0x244>
 8011fd6:	2307      	movs	r3, #7
 8011fd8:	e00a      	b.n	8011ff0 <HAL_GPIO_Init+0x244>
 8011fda:	2305      	movs	r3, #5
 8011fdc:	e008      	b.n	8011ff0 <HAL_GPIO_Init+0x244>
 8011fde:	2304      	movs	r3, #4
 8011fe0:	e006      	b.n	8011ff0 <HAL_GPIO_Init+0x244>
 8011fe2:	2303      	movs	r3, #3
 8011fe4:	e004      	b.n	8011ff0 <HAL_GPIO_Init+0x244>
 8011fe6:	2302      	movs	r3, #2
 8011fe8:	e002      	b.n	8011ff0 <HAL_GPIO_Init+0x244>
 8011fea:	2301      	movs	r3, #1
 8011fec:	e000      	b.n	8011ff0 <HAL_GPIO_Init+0x244>
 8011fee:	2300      	movs	r3, #0
 8011ff0:	697a      	ldr	r2, [r7, #20]
 8011ff2:	f002 0203 	and.w	r2, r2, #3
 8011ff6:	0092      	lsls	r2, r2, #2
 8011ff8:	4093      	lsls	r3, r2
 8011ffa:	693a      	ldr	r2, [r7, #16]
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8012000:	4937      	ldr	r1, [pc, #220]	@ (80120e0 <HAL_GPIO_Init+0x334>)
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	089b      	lsrs	r3, r3, #2
 8012006:	3302      	adds	r3, #2
 8012008:	693a      	ldr	r2, [r7, #16]
 801200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801200e:	4b3b      	ldr	r3, [pc, #236]	@ (80120fc <HAL_GPIO_Init+0x350>)
 8012010:	689b      	ldr	r3, [r3, #8]
 8012012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	43db      	mvns	r3, r3
 8012018:	693a      	ldr	r2, [r7, #16]
 801201a:	4013      	ands	r3, r2
 801201c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012026:	2b00      	cmp	r3, #0
 8012028:	d003      	beq.n	8012032 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 801202a:	693a      	ldr	r2, [r7, #16]
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	4313      	orrs	r3, r2
 8012030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8012032:	4a32      	ldr	r2, [pc, #200]	@ (80120fc <HAL_GPIO_Init+0x350>)
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8012038:	4b30      	ldr	r3, [pc, #192]	@ (80120fc <HAL_GPIO_Init+0x350>)
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	43db      	mvns	r3, r3
 8012042:	693a      	ldr	r2, [r7, #16]
 8012044:	4013      	ands	r3, r2
 8012046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012050:	2b00      	cmp	r3, #0
 8012052:	d003      	beq.n	801205c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8012054:	693a      	ldr	r2, [r7, #16]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	4313      	orrs	r3, r2
 801205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801205c:	4a27      	ldr	r2, [pc, #156]	@ (80120fc <HAL_GPIO_Init+0x350>)
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8012062:	4b26      	ldr	r3, [pc, #152]	@ (80120fc <HAL_GPIO_Init+0x350>)
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	43db      	mvns	r3, r3
 801206c:	693a      	ldr	r2, [r7, #16]
 801206e:	4013      	ands	r3, r2
 8012070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801207a:	2b00      	cmp	r3, #0
 801207c:	d003      	beq.n	8012086 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 801207e:	693a      	ldr	r2, [r7, #16]
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	4313      	orrs	r3, r2
 8012084:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8012086:	4a1d      	ldr	r2, [pc, #116]	@ (80120fc <HAL_GPIO_Init+0x350>)
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 801208c:	4b1b      	ldr	r3, [pc, #108]	@ (80120fc <HAL_GPIO_Init+0x350>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	43db      	mvns	r3, r3
 8012096:	693a      	ldr	r2, [r7, #16]
 8012098:	4013      	ands	r3, r2
 801209a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d003      	beq.n	80120b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80120a8:	693a      	ldr	r2, [r7, #16]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	4313      	orrs	r3, r2
 80120ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80120b0:	4a12      	ldr	r2, [pc, #72]	@ (80120fc <HAL_GPIO_Init+0x350>)
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	3301      	adds	r3, #1
 80120ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	fa22 f303 	lsr.w	r3, r2, r3
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	f47f ae78 	bne.w	8011dbc <HAL_GPIO_Init+0x10>
  }
}
 80120cc:	bf00      	nop
 80120ce:	bf00      	nop
 80120d0:	371c      	adds	r7, #28
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop
 80120dc:	40021000 	.word	0x40021000
 80120e0:	40010000 	.word	0x40010000
 80120e4:	48000400 	.word	0x48000400
 80120e8:	48000800 	.word	0x48000800
 80120ec:	48000c00 	.word	0x48000c00
 80120f0:	48001000 	.word	0x48001000
 80120f4:	48001400 	.word	0x48001400
 80120f8:	48001800 	.word	0x48001800
 80120fc:	40010400 	.word	0x40010400

08012100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	460b      	mov	r3, r1
 801210a:	807b      	strh	r3, [r7, #2]
 801210c:	4613      	mov	r3, r2
 801210e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012110:	787b      	ldrb	r3, [r7, #1]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d003      	beq.n	801211e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012116:	887a      	ldrh	r2, [r7, #2]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801211c:	e002      	b.n	8012124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801211e:	887a      	ldrh	r2, [r7, #2]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012124:	bf00      	nop
 8012126:	370c      	adds	r7, #12
 8012128:	46bd      	mov	sp, r7
 801212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212e:	4770      	bx	lr

08012130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8012130:	b480      	push	{r7}
 8012132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8012134:	4b04      	ldr	r3, [pc, #16]	@ (8012148 <HAL_PWREx_GetVoltageRange+0x18>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 801213c:	4618      	mov	r0, r3
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	40007000 	.word	0x40007000

0801214c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801215a:	d130      	bne.n	80121be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801215c:	4b23      	ldr	r3, [pc, #140]	@ (80121ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8012164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012168:	d038      	beq.n	80121dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801216a:	4b20      	ldr	r3, [pc, #128]	@ (80121ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8012172:	4a1e      	ldr	r2, [pc, #120]	@ (80121ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8012174:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801217a:	4b1d      	ldr	r3, [pc, #116]	@ (80121f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2232      	movs	r2, #50	@ 0x32
 8012180:	fb02 f303 	mul.w	r3, r2, r3
 8012184:	4a1b      	ldr	r2, [pc, #108]	@ (80121f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8012186:	fba2 2303 	umull	r2, r3, r2, r3
 801218a:	0c9b      	lsrs	r3, r3, #18
 801218c:	3301      	adds	r3, #1
 801218e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8012190:	e002      	b.n	8012198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	3b01      	subs	r3, #1
 8012196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8012198:	4b14      	ldr	r3, [pc, #80]	@ (80121ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801219a:	695b      	ldr	r3, [r3, #20]
 801219c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80121a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121a4:	d102      	bne.n	80121ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d1f2      	bne.n	8012192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80121ac:	4b0f      	ldr	r3, [pc, #60]	@ (80121ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80121ae:	695b      	ldr	r3, [r3, #20]
 80121b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80121b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121b8:	d110      	bne.n	80121dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80121ba:	2303      	movs	r3, #3
 80121bc:	e00f      	b.n	80121de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80121be:	4b0b      	ldr	r3, [pc, #44]	@ (80121ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80121c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121ca:	d007      	beq.n	80121dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80121cc:	4b07      	ldr	r3, [pc, #28]	@ (80121ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80121d4:	4a05      	ldr	r2, [pc, #20]	@ (80121ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80121d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80121da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80121dc:	2300      	movs	r3, #0
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3714      	adds	r7, #20
 80121e2:	46bd      	mov	sp, r7
 80121e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e8:	4770      	bx	lr
 80121ea:	bf00      	nop
 80121ec:	40007000 	.word	0x40007000
 80121f0:	20000030 	.word	0x20000030
 80121f4:	431bde83 	.word	0x431bde83

080121f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b088      	sub	sp, #32
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d101      	bne.n	801220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012206:	2301      	movs	r3, #1
 8012208:	e3ca      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801220a:	4b97      	ldr	r3, [pc, #604]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	f003 030c 	and.w	r3, r3, #12
 8012212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012214:	4b94      	ldr	r3, [pc, #592]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	f003 0303 	and.w	r3, r3, #3
 801221c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	f003 0310 	and.w	r3, r3, #16
 8012226:	2b00      	cmp	r3, #0
 8012228:	f000 80e4 	beq.w	80123f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801222c:	69bb      	ldr	r3, [r7, #24]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d007      	beq.n	8012242 <HAL_RCC_OscConfig+0x4a>
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	2b0c      	cmp	r3, #12
 8012236:	f040 808b 	bne.w	8012350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	2b01      	cmp	r3, #1
 801223e:	f040 8087 	bne.w	8012350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8012242:	4b89      	ldr	r3, [pc, #548]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f003 0302 	and.w	r3, r3, #2
 801224a:	2b00      	cmp	r3, #0
 801224c:	d005      	beq.n	801225a <HAL_RCC_OscConfig+0x62>
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	699b      	ldr	r3, [r3, #24]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d101      	bne.n	801225a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8012256:	2301      	movs	r3, #1
 8012258:	e3a2      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6a1a      	ldr	r2, [r3, #32]
 801225e:	4b82      	ldr	r3, [pc, #520]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	f003 0308 	and.w	r3, r3, #8
 8012266:	2b00      	cmp	r3, #0
 8012268:	d004      	beq.n	8012274 <HAL_RCC_OscConfig+0x7c>
 801226a:	4b7f      	ldr	r3, [pc, #508]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012272:	e005      	b.n	8012280 <HAL_RCC_OscConfig+0x88>
 8012274:	4b7c      	ldr	r3, [pc, #496]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801227a:	091b      	lsrs	r3, r3, #4
 801227c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012280:	4293      	cmp	r3, r2
 8012282:	d223      	bcs.n	80122cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a1b      	ldr	r3, [r3, #32]
 8012288:	4618      	mov	r0, r3
 801228a:	f000 fd87 	bl	8012d9c <RCC_SetFlashLatencyFromMSIRange>
 801228e:	4603      	mov	r3, r0
 8012290:	2b00      	cmp	r3, #0
 8012292:	d001      	beq.n	8012298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8012294:	2301      	movs	r3, #1
 8012296:	e383      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012298:	4b73      	ldr	r3, [pc, #460]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4a72      	ldr	r2, [pc, #456]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801229e:	f043 0308 	orr.w	r3, r3, #8
 80122a2:	6013      	str	r3, [r2, #0]
 80122a4:	4b70      	ldr	r3, [pc, #448]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6a1b      	ldr	r3, [r3, #32]
 80122b0:	496d      	ldr	r1, [pc, #436]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122b2:	4313      	orrs	r3, r2
 80122b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80122b6:	4b6c      	ldr	r3, [pc, #432]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	69db      	ldr	r3, [r3, #28]
 80122c2:	021b      	lsls	r3, r3, #8
 80122c4:	4968      	ldr	r1, [pc, #416]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122c6:	4313      	orrs	r3, r2
 80122c8:	604b      	str	r3, [r1, #4]
 80122ca:	e025      	b.n	8012318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80122cc:	4b66      	ldr	r3, [pc, #408]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4a65      	ldr	r2, [pc, #404]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122d2:	f043 0308 	orr.w	r3, r3, #8
 80122d6:	6013      	str	r3, [r2, #0]
 80122d8:	4b63      	ldr	r3, [pc, #396]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6a1b      	ldr	r3, [r3, #32]
 80122e4:	4960      	ldr	r1, [pc, #384]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122e6:	4313      	orrs	r3, r2
 80122e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80122ea:	4b5f      	ldr	r3, [pc, #380]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	69db      	ldr	r3, [r3, #28]
 80122f6:	021b      	lsls	r3, r3, #8
 80122f8:	495b      	ldr	r1, [pc, #364]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80122fa:	4313      	orrs	r3, r2
 80122fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d109      	bne.n	8012318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6a1b      	ldr	r3, [r3, #32]
 8012308:	4618      	mov	r0, r3
 801230a:	f000 fd47 	bl	8012d9c <RCC_SetFlashLatencyFromMSIRange>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d001      	beq.n	8012318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8012314:	2301      	movs	r3, #1
 8012316:	e343      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8012318:	f000 fc4a 	bl	8012bb0 <HAL_RCC_GetSysClockFreq>
 801231c:	4602      	mov	r2, r0
 801231e:	4b52      	ldr	r3, [pc, #328]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012320:	689b      	ldr	r3, [r3, #8]
 8012322:	091b      	lsrs	r3, r3, #4
 8012324:	f003 030f 	and.w	r3, r3, #15
 8012328:	4950      	ldr	r1, [pc, #320]	@ (801246c <HAL_RCC_OscConfig+0x274>)
 801232a:	5ccb      	ldrb	r3, [r1, r3]
 801232c:	f003 031f 	and.w	r3, r3, #31
 8012330:	fa22 f303 	lsr.w	r3, r2, r3
 8012334:	4a4e      	ldr	r2, [pc, #312]	@ (8012470 <HAL_RCC_OscConfig+0x278>)
 8012336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8012338:	4b4e      	ldr	r3, [pc, #312]	@ (8012474 <HAL_RCC_OscConfig+0x27c>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4618      	mov	r0, r3
 801233e:	f7ef fffb 	bl	8002338 <HAL_InitTick>
 8012342:	4603      	mov	r3, r0
 8012344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8012346:	7bfb      	ldrb	r3, [r7, #15]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d052      	beq.n	80123f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 801234c:	7bfb      	ldrb	r3, [r7, #15]
 801234e:	e327      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	699b      	ldr	r3, [r3, #24]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d032      	beq.n	80123be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8012358:	4b43      	ldr	r3, [pc, #268]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	4a42      	ldr	r2, [pc, #264]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801235e:	f043 0301 	orr.w	r3, r3, #1
 8012362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012364:	f7ff fbb4 	bl	8011ad0 <HAL_GetTick>
 8012368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801236a:	e008      	b.n	801237e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801236c:	f7ff fbb0 	bl	8011ad0 <HAL_GetTick>
 8012370:	4602      	mov	r2, r0
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	1ad3      	subs	r3, r2, r3
 8012376:	2b02      	cmp	r3, #2
 8012378:	d901      	bls.n	801237e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 801237a:	2303      	movs	r3, #3
 801237c:	e310      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801237e:	4b3a      	ldr	r3, [pc, #232]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f003 0302 	and.w	r3, r3, #2
 8012386:	2b00      	cmp	r3, #0
 8012388:	d0f0      	beq.n	801236c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801238a:	4b37      	ldr	r3, [pc, #220]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4a36      	ldr	r2, [pc, #216]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012390:	f043 0308 	orr.w	r3, r3, #8
 8012394:	6013      	str	r3, [r2, #0]
 8012396:	4b34      	ldr	r3, [pc, #208]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6a1b      	ldr	r3, [r3, #32]
 80123a2:	4931      	ldr	r1, [pc, #196]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80123a4:	4313      	orrs	r3, r2
 80123a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80123a8:	4b2f      	ldr	r3, [pc, #188]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	69db      	ldr	r3, [r3, #28]
 80123b4:	021b      	lsls	r3, r3, #8
 80123b6:	492c      	ldr	r1, [pc, #176]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80123b8:	4313      	orrs	r3, r2
 80123ba:	604b      	str	r3, [r1, #4]
 80123bc:	e01a      	b.n	80123f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80123be:	4b2a      	ldr	r3, [pc, #168]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	4a29      	ldr	r2, [pc, #164]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80123c4:	f023 0301 	bic.w	r3, r3, #1
 80123c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80123ca:	f7ff fb81 	bl	8011ad0 <HAL_GetTick>
 80123ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80123d0:	e008      	b.n	80123e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80123d2:	f7ff fb7d 	bl	8011ad0 <HAL_GetTick>
 80123d6:	4602      	mov	r2, r0
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	1ad3      	subs	r3, r2, r3
 80123dc:	2b02      	cmp	r3, #2
 80123de:	d901      	bls.n	80123e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80123e0:	2303      	movs	r3, #3
 80123e2:	e2dd      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80123e4:	4b20      	ldr	r3, [pc, #128]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f003 0302 	and.w	r3, r3, #2
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d1f0      	bne.n	80123d2 <HAL_RCC_OscConfig+0x1da>
 80123f0:	e000      	b.n	80123f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80123f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f003 0301 	and.w	r3, r3, #1
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d074      	beq.n	80124ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	2b08      	cmp	r3, #8
 8012404:	d005      	beq.n	8012412 <HAL_RCC_OscConfig+0x21a>
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	2b0c      	cmp	r3, #12
 801240a:	d10e      	bne.n	801242a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	2b03      	cmp	r3, #3
 8012410:	d10b      	bne.n	801242a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012412:	4b15      	ldr	r3, [pc, #84]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801241a:	2b00      	cmp	r3, #0
 801241c:	d064      	beq.n	80124e8 <HAL_RCC_OscConfig+0x2f0>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	685b      	ldr	r3, [r3, #4]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d160      	bne.n	80124e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8012426:	2301      	movs	r3, #1
 8012428:	e2ba      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012432:	d106      	bne.n	8012442 <HAL_RCC_OscConfig+0x24a>
 8012434:	4b0c      	ldr	r3, [pc, #48]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	4a0b      	ldr	r2, [pc, #44]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801243a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801243e:	6013      	str	r3, [r2, #0]
 8012440:	e026      	b.n	8012490 <HAL_RCC_OscConfig+0x298>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801244a:	d115      	bne.n	8012478 <HAL_RCC_OscConfig+0x280>
 801244c:	4b06      	ldr	r3, [pc, #24]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	4a05      	ldr	r2, [pc, #20]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 8012452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012456:	6013      	str	r3, [r2, #0]
 8012458:	4b03      	ldr	r3, [pc, #12]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	4a02      	ldr	r2, [pc, #8]	@ (8012468 <HAL_RCC_OscConfig+0x270>)
 801245e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012462:	6013      	str	r3, [r2, #0]
 8012464:	e014      	b.n	8012490 <HAL_RCC_OscConfig+0x298>
 8012466:	bf00      	nop
 8012468:	40021000 	.word	0x40021000
 801246c:	0802198c 	.word	0x0802198c
 8012470:	20000030 	.word	0x20000030
 8012474:	20000034 	.word	0x20000034
 8012478:	4ba0      	ldr	r3, [pc, #640]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4a9f      	ldr	r2, [pc, #636]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 801247e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012482:	6013      	str	r3, [r2, #0]
 8012484:	4b9d      	ldr	r3, [pc, #628]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4a9c      	ldr	r2, [pc, #624]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 801248a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d013      	beq.n	80124c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012498:	f7ff fb1a 	bl	8011ad0 <HAL_GetTick>
 801249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801249e:	e008      	b.n	80124b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80124a0:	f7ff fb16 	bl	8011ad0 <HAL_GetTick>
 80124a4:	4602      	mov	r2, r0
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	1ad3      	subs	r3, r2, r3
 80124aa:	2b64      	cmp	r3, #100	@ 0x64
 80124ac:	d901      	bls.n	80124b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80124ae:	2303      	movs	r3, #3
 80124b0:	e276      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80124b2:	4b92      	ldr	r3, [pc, #584]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d0f0      	beq.n	80124a0 <HAL_RCC_OscConfig+0x2a8>
 80124be:	e014      	b.n	80124ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80124c0:	f7ff fb06 	bl	8011ad0 <HAL_GetTick>
 80124c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80124c6:	e008      	b.n	80124da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80124c8:	f7ff fb02 	bl	8011ad0 <HAL_GetTick>
 80124cc:	4602      	mov	r2, r0
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	2b64      	cmp	r3, #100	@ 0x64
 80124d4:	d901      	bls.n	80124da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80124d6:	2303      	movs	r3, #3
 80124d8:	e262      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80124da:	4b88      	ldr	r3, [pc, #544]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d1f0      	bne.n	80124c8 <HAL_RCC_OscConfig+0x2d0>
 80124e6:	e000      	b.n	80124ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80124e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f003 0302 	and.w	r3, r3, #2
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d060      	beq.n	80125b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	2b04      	cmp	r3, #4
 80124fa:	d005      	beq.n	8012508 <HAL_RCC_OscConfig+0x310>
 80124fc:	69bb      	ldr	r3, [r7, #24]
 80124fe:	2b0c      	cmp	r3, #12
 8012500:	d119      	bne.n	8012536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	2b02      	cmp	r3, #2
 8012506:	d116      	bne.n	8012536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012508:	4b7c      	ldr	r3, [pc, #496]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012510:	2b00      	cmp	r3, #0
 8012512:	d005      	beq.n	8012520 <HAL_RCC_OscConfig+0x328>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d101      	bne.n	8012520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 801251c:	2301      	movs	r3, #1
 801251e:	e23f      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012520:	4b76      	ldr	r3, [pc, #472]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	691b      	ldr	r3, [r3, #16]
 801252c:	061b      	lsls	r3, r3, #24
 801252e:	4973      	ldr	r1, [pc, #460]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012530:	4313      	orrs	r3, r2
 8012532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012534:	e040      	b.n	80125b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d023      	beq.n	8012586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801253e:	4b6f      	ldr	r3, [pc, #444]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	4a6e      	ldr	r2, [pc, #440]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801254a:	f7ff fac1 	bl	8011ad0 <HAL_GetTick>
 801254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012550:	e008      	b.n	8012564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012552:	f7ff fabd 	bl	8011ad0 <HAL_GetTick>
 8012556:	4602      	mov	r2, r0
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	1ad3      	subs	r3, r2, r3
 801255c:	2b02      	cmp	r3, #2
 801255e:	d901      	bls.n	8012564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8012560:	2303      	movs	r3, #3
 8012562:	e21d      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012564:	4b65      	ldr	r3, [pc, #404]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801256c:	2b00      	cmp	r3, #0
 801256e:	d0f0      	beq.n	8012552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012570:	4b62      	ldr	r3, [pc, #392]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	691b      	ldr	r3, [r3, #16]
 801257c:	061b      	lsls	r3, r3, #24
 801257e:	495f      	ldr	r1, [pc, #380]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012580:	4313      	orrs	r3, r2
 8012582:	604b      	str	r3, [r1, #4]
 8012584:	e018      	b.n	80125b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012586:	4b5d      	ldr	r3, [pc, #372]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	4a5c      	ldr	r2, [pc, #368]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 801258c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012592:	f7ff fa9d 	bl	8011ad0 <HAL_GetTick>
 8012596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012598:	e008      	b.n	80125ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801259a:	f7ff fa99 	bl	8011ad0 <HAL_GetTick>
 801259e:	4602      	mov	r2, r0
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	2b02      	cmp	r3, #2
 80125a6:	d901      	bls.n	80125ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80125a8:	2303      	movs	r3, #3
 80125aa:	e1f9      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80125ac:	4b53      	ldr	r3, [pc, #332]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d1f0      	bne.n	801259a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	f003 0308 	and.w	r3, r3, #8
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d03c      	beq.n	801263e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	695b      	ldr	r3, [r3, #20]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d01c      	beq.n	8012606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80125cc:	4b4b      	ldr	r3, [pc, #300]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80125ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80125d2:	4a4a      	ldr	r2, [pc, #296]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80125d4:	f043 0301 	orr.w	r3, r3, #1
 80125d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80125dc:	f7ff fa78 	bl	8011ad0 <HAL_GetTick>
 80125e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80125e2:	e008      	b.n	80125f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80125e4:	f7ff fa74 	bl	8011ad0 <HAL_GetTick>
 80125e8:	4602      	mov	r2, r0
 80125ea:	693b      	ldr	r3, [r7, #16]
 80125ec:	1ad3      	subs	r3, r2, r3
 80125ee:	2b02      	cmp	r3, #2
 80125f0:	d901      	bls.n	80125f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80125f2:	2303      	movs	r3, #3
 80125f4:	e1d4      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80125f6:	4b41      	ldr	r3, [pc, #260]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80125f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80125fc:	f003 0302 	and.w	r3, r3, #2
 8012600:	2b00      	cmp	r3, #0
 8012602:	d0ef      	beq.n	80125e4 <HAL_RCC_OscConfig+0x3ec>
 8012604:	e01b      	b.n	801263e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012606:	4b3d      	ldr	r3, [pc, #244]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801260c:	4a3b      	ldr	r2, [pc, #236]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 801260e:	f023 0301 	bic.w	r3, r3, #1
 8012612:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012616:	f7ff fa5b 	bl	8011ad0 <HAL_GetTick>
 801261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801261c:	e008      	b.n	8012630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801261e:	f7ff fa57 	bl	8011ad0 <HAL_GetTick>
 8012622:	4602      	mov	r2, r0
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	2b02      	cmp	r3, #2
 801262a:	d901      	bls.n	8012630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 801262c:	2303      	movs	r3, #3
 801262e:	e1b7      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8012630:	4b32      	ldr	r3, [pc, #200]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012636:	f003 0302 	and.w	r3, r3, #2
 801263a:	2b00      	cmp	r3, #0
 801263c:	d1ef      	bne.n	801261e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f003 0304 	and.w	r3, r3, #4
 8012646:	2b00      	cmp	r3, #0
 8012648:	f000 80a6 	beq.w	8012798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801264c:	2300      	movs	r3, #0
 801264e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8012650:	4b2a      	ldr	r3, [pc, #168]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012658:	2b00      	cmp	r3, #0
 801265a:	d10d      	bne.n	8012678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801265c:	4b27      	ldr	r3, [pc, #156]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 801265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012660:	4a26      	ldr	r2, [pc, #152]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 8012662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012666:	6593      	str	r3, [r2, #88]	@ 0x58
 8012668:	4b24      	ldr	r3, [pc, #144]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 801266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801266c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012670:	60bb      	str	r3, [r7, #8]
 8012672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012674:	2301      	movs	r3, #1
 8012676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012678:	4b21      	ldr	r3, [pc, #132]	@ (8012700 <HAL_RCC_OscConfig+0x508>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012680:	2b00      	cmp	r3, #0
 8012682:	d118      	bne.n	80126b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012684:	4b1e      	ldr	r3, [pc, #120]	@ (8012700 <HAL_RCC_OscConfig+0x508>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	4a1d      	ldr	r2, [pc, #116]	@ (8012700 <HAL_RCC_OscConfig+0x508>)
 801268a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801268e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012690:	f7ff fa1e 	bl	8011ad0 <HAL_GetTick>
 8012694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012696:	e008      	b.n	80126aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012698:	f7ff fa1a 	bl	8011ad0 <HAL_GetTick>
 801269c:	4602      	mov	r2, r0
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	2b02      	cmp	r3, #2
 80126a4:	d901      	bls.n	80126aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80126a6:	2303      	movs	r3, #3
 80126a8:	e17a      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80126aa:	4b15      	ldr	r3, [pc, #84]	@ (8012700 <HAL_RCC_OscConfig+0x508>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d0f0      	beq.n	8012698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	689b      	ldr	r3, [r3, #8]
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d108      	bne.n	80126d0 <HAL_RCC_OscConfig+0x4d8>
 80126be:	4b0f      	ldr	r3, [pc, #60]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80126c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126c4:	4a0d      	ldr	r2, [pc, #52]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80126c6:	f043 0301 	orr.w	r3, r3, #1
 80126ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80126ce:	e029      	b.n	8012724 <HAL_RCC_OscConfig+0x52c>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	689b      	ldr	r3, [r3, #8]
 80126d4:	2b05      	cmp	r3, #5
 80126d6:	d115      	bne.n	8012704 <HAL_RCC_OscConfig+0x50c>
 80126d8:	4b08      	ldr	r3, [pc, #32]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80126da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126de:	4a07      	ldr	r2, [pc, #28]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80126e0:	f043 0304 	orr.w	r3, r3, #4
 80126e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80126e8:	4b04      	ldr	r3, [pc, #16]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80126ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126ee:	4a03      	ldr	r2, [pc, #12]	@ (80126fc <HAL_RCC_OscConfig+0x504>)
 80126f0:	f043 0301 	orr.w	r3, r3, #1
 80126f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80126f8:	e014      	b.n	8012724 <HAL_RCC_OscConfig+0x52c>
 80126fa:	bf00      	nop
 80126fc:	40021000 	.word	0x40021000
 8012700:	40007000 	.word	0x40007000
 8012704:	4b9c      	ldr	r3, [pc, #624]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801270a:	4a9b      	ldr	r2, [pc, #620]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801270c:	f023 0301 	bic.w	r3, r3, #1
 8012710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8012714:	4b98      	ldr	r3, [pc, #608]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801271a:	4a97      	ldr	r2, [pc, #604]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801271c:	f023 0304 	bic.w	r3, r3, #4
 8012720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	689b      	ldr	r3, [r3, #8]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d016      	beq.n	801275a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801272c:	f7ff f9d0 	bl	8011ad0 <HAL_GetTick>
 8012730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012732:	e00a      	b.n	801274a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012734:	f7ff f9cc 	bl	8011ad0 <HAL_GetTick>
 8012738:	4602      	mov	r2, r0
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012742:	4293      	cmp	r3, r2
 8012744:	d901      	bls.n	801274a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8012746:	2303      	movs	r3, #3
 8012748:	e12a      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801274a:	4b8b      	ldr	r3, [pc, #556]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012750:	f003 0302 	and.w	r3, r3, #2
 8012754:	2b00      	cmp	r3, #0
 8012756:	d0ed      	beq.n	8012734 <HAL_RCC_OscConfig+0x53c>
 8012758:	e015      	b.n	8012786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801275a:	f7ff f9b9 	bl	8011ad0 <HAL_GetTick>
 801275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8012760:	e00a      	b.n	8012778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012762:	f7ff f9b5 	bl	8011ad0 <HAL_GetTick>
 8012766:	4602      	mov	r2, r0
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	1ad3      	subs	r3, r2, r3
 801276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012770:	4293      	cmp	r3, r2
 8012772:	d901      	bls.n	8012778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8012774:	2303      	movs	r3, #3
 8012776:	e113      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8012778:	4b7f      	ldr	r3, [pc, #508]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801277e:	f003 0302 	and.w	r3, r3, #2
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1ed      	bne.n	8012762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012786:	7ffb      	ldrb	r3, [r7, #31]
 8012788:	2b01      	cmp	r3, #1
 801278a:	d105      	bne.n	8012798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801278c:	4b7a      	ldr	r3, [pc, #488]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012790:	4a79      	ldr	r2, [pc, #484]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012796:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801279c:	2b00      	cmp	r3, #0
 801279e:	f000 80fe 	beq.w	801299e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127a6:	2b02      	cmp	r3, #2
 80127a8:	f040 80d0 	bne.w	801294c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80127ac:	4b72      	ldr	r3, [pc, #456]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 80127ae:	68db      	ldr	r3, [r3, #12]
 80127b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	f003 0203 	and.w	r2, r3, #3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127bc:	429a      	cmp	r2, r3
 80127be:	d130      	bne.n	8012822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127ca:	3b01      	subs	r3, #1
 80127cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d127      	bne.n	8012822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80127dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80127de:	429a      	cmp	r2, r3
 80127e0:	d11f      	bne.n	8012822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80127ec:	2a07      	cmp	r2, #7
 80127ee:	bf14      	ite	ne
 80127f0:	2201      	movne	r2, #1
 80127f2:	2200      	moveq	r2, #0
 80127f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80127f6:	4293      	cmp	r3, r2
 80127f8:	d113      	bne.n	8012822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012804:	085b      	lsrs	r3, r3, #1
 8012806:	3b01      	subs	r3, #1
 8012808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801280a:	429a      	cmp	r2, r3
 801280c:	d109      	bne.n	8012822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012818:	085b      	lsrs	r3, r3, #1
 801281a:	3b01      	subs	r3, #1
 801281c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801281e:	429a      	cmp	r2, r3
 8012820:	d06e      	beq.n	8012900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	2b0c      	cmp	r3, #12
 8012826:	d069      	beq.n	80128fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8012828:	4b53      	ldr	r3, [pc, #332]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012830:	2b00      	cmp	r3, #0
 8012832:	d105      	bne.n	8012840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8012834:	4b50      	ldr	r3, [pc, #320]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801283c:	2b00      	cmp	r3, #0
 801283e:	d001      	beq.n	8012844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8012840:	2301      	movs	r3, #1
 8012842:	e0ad      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8012844:	4b4c      	ldr	r3, [pc, #304]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4a4b      	ldr	r2, [pc, #300]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801284a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801284e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8012850:	f7ff f93e 	bl	8011ad0 <HAL_GetTick>
 8012854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012856:	e008      	b.n	801286a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012858:	f7ff f93a 	bl	8011ad0 <HAL_GetTick>
 801285c:	4602      	mov	r2, r0
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	1ad3      	subs	r3, r2, r3
 8012862:	2b02      	cmp	r3, #2
 8012864:	d901      	bls.n	801286a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8012866:	2303      	movs	r3, #3
 8012868:	e09a      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801286a:	4b43      	ldr	r3, [pc, #268]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1f0      	bne.n	8012858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012876:	4b40      	ldr	r3, [pc, #256]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012878:	68da      	ldr	r2, [r3, #12]
 801287a:	4b40      	ldr	r3, [pc, #256]	@ (801297c <HAL_RCC_OscConfig+0x784>)
 801287c:	4013      	ands	r3, r2
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012886:	3a01      	subs	r2, #1
 8012888:	0112      	lsls	r2, r2, #4
 801288a:	4311      	orrs	r1, r2
 801288c:	687a      	ldr	r2, [r7, #4]
 801288e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012890:	0212      	lsls	r2, r2, #8
 8012892:	4311      	orrs	r1, r2
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012898:	0852      	lsrs	r2, r2, #1
 801289a:	3a01      	subs	r2, #1
 801289c:	0552      	lsls	r2, r2, #21
 801289e:	4311      	orrs	r1, r2
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80128a4:	0852      	lsrs	r2, r2, #1
 80128a6:	3a01      	subs	r2, #1
 80128a8:	0652      	lsls	r2, r2, #25
 80128aa:	4311      	orrs	r1, r2
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80128b0:	0912      	lsrs	r2, r2, #4
 80128b2:	0452      	lsls	r2, r2, #17
 80128b4:	430a      	orrs	r2, r1
 80128b6:	4930      	ldr	r1, [pc, #192]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 80128b8:	4313      	orrs	r3, r2
 80128ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80128bc:	4b2e      	ldr	r3, [pc, #184]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4a2d      	ldr	r2, [pc, #180]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 80128c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80128c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80128c8:	4b2b      	ldr	r3, [pc, #172]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	4a2a      	ldr	r2, [pc, #168]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 80128ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80128d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80128d4:	f7ff f8fc 	bl	8011ad0 <HAL_GetTick>
 80128d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80128da:	e008      	b.n	80128ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80128dc:	f7ff f8f8 	bl	8011ad0 <HAL_GetTick>
 80128e0:	4602      	mov	r2, r0
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	1ad3      	subs	r3, r2, r3
 80128e6:	2b02      	cmp	r3, #2
 80128e8:	d901      	bls.n	80128ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80128ea:	2303      	movs	r3, #3
 80128ec:	e058      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80128ee:	4b22      	ldr	r3, [pc, #136]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d0f0      	beq.n	80128dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80128fa:	e050      	b.n	801299e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80128fc:	2301      	movs	r3, #1
 80128fe:	e04f      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012900:	4b1d      	ldr	r3, [pc, #116]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012908:	2b00      	cmp	r3, #0
 801290a:	d148      	bne.n	801299e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801290c:	4b1a      	ldr	r3, [pc, #104]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4a19      	ldr	r2, [pc, #100]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8012918:	4b17      	ldr	r3, [pc, #92]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	4a16      	ldr	r2, [pc, #88]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 801291e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012924:	f7ff f8d4 	bl	8011ad0 <HAL_GetTick>
 8012928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801292a:	e008      	b.n	801293e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801292c:	f7ff f8d0 	bl	8011ad0 <HAL_GetTick>
 8012930:	4602      	mov	r2, r0
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	1ad3      	subs	r3, r2, r3
 8012936:	2b02      	cmp	r3, #2
 8012938:	d901      	bls.n	801293e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 801293a:	2303      	movs	r3, #3
 801293c:	e030      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801293e:	4b0e      	ldr	r3, [pc, #56]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012946:	2b00      	cmp	r3, #0
 8012948:	d0f0      	beq.n	801292c <HAL_RCC_OscConfig+0x734>
 801294a:	e028      	b.n	801299e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801294c:	69bb      	ldr	r3, [r7, #24]
 801294e:	2b0c      	cmp	r3, #12
 8012950:	d023      	beq.n	801299a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012952:	4b09      	ldr	r3, [pc, #36]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a08      	ldr	r2, [pc, #32]	@ (8012978 <HAL_RCC_OscConfig+0x780>)
 8012958:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801295c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801295e:	f7ff f8b7 	bl	8011ad0 <HAL_GetTick>
 8012962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012964:	e00c      	b.n	8012980 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012966:	f7ff f8b3 	bl	8011ad0 <HAL_GetTick>
 801296a:	4602      	mov	r2, r0
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	1ad3      	subs	r3, r2, r3
 8012970:	2b02      	cmp	r3, #2
 8012972:	d905      	bls.n	8012980 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8012974:	2303      	movs	r3, #3
 8012976:	e013      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
 8012978:	40021000 	.word	0x40021000
 801297c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012980:	4b09      	ldr	r3, [pc, #36]	@ (80129a8 <HAL_RCC_OscConfig+0x7b0>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1ec      	bne.n	8012966 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801298c:	4b06      	ldr	r3, [pc, #24]	@ (80129a8 <HAL_RCC_OscConfig+0x7b0>)
 801298e:	68da      	ldr	r2, [r3, #12]
 8012990:	4905      	ldr	r1, [pc, #20]	@ (80129a8 <HAL_RCC_OscConfig+0x7b0>)
 8012992:	4b06      	ldr	r3, [pc, #24]	@ (80129ac <HAL_RCC_OscConfig+0x7b4>)
 8012994:	4013      	ands	r3, r2
 8012996:	60cb      	str	r3, [r1, #12]
 8012998:	e001      	b.n	801299e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801299a:	2301      	movs	r3, #1
 801299c:	e000      	b.n	80129a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3720      	adds	r7, #32
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}
 80129a8:	40021000 	.word	0x40021000
 80129ac:	feeefffc 	.word	0xfeeefffc

080129b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d101      	bne.n	80129c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80129c0:	2301      	movs	r3, #1
 80129c2:	e0e7      	b.n	8012b94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80129c4:	4b75      	ldr	r3, [pc, #468]	@ (8012b9c <HAL_RCC_ClockConfig+0x1ec>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f003 0307 	and.w	r3, r3, #7
 80129cc:	683a      	ldr	r2, [r7, #0]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d910      	bls.n	80129f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80129d2:	4b72      	ldr	r3, [pc, #456]	@ (8012b9c <HAL_RCC_ClockConfig+0x1ec>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f023 0207 	bic.w	r2, r3, #7
 80129da:	4970      	ldr	r1, [pc, #448]	@ (8012b9c <HAL_RCC_ClockConfig+0x1ec>)
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	4313      	orrs	r3, r2
 80129e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80129e2:	4b6e      	ldr	r3, [pc, #440]	@ (8012b9c <HAL_RCC_ClockConfig+0x1ec>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f003 0307 	and.w	r3, r3, #7
 80129ea:	683a      	ldr	r2, [r7, #0]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d001      	beq.n	80129f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80129f0:	2301      	movs	r3, #1
 80129f2:	e0cf      	b.n	8012b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f003 0302 	and.w	r3, r3, #2
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d010      	beq.n	8012a22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	689a      	ldr	r2, [r3, #8]
 8012a04:	4b66      	ldr	r3, [pc, #408]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a06:	689b      	ldr	r3, [r3, #8]
 8012a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d908      	bls.n	8012a22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012a10:	4b63      	ldr	r3, [pc, #396]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a12:	689b      	ldr	r3, [r3, #8]
 8012a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	689b      	ldr	r3, [r3, #8]
 8012a1c:	4960      	ldr	r1, [pc, #384]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a1e:	4313      	orrs	r3, r2
 8012a20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f003 0301 	and.w	r3, r3, #1
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d04c      	beq.n	8012ac8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	2b03      	cmp	r3, #3
 8012a34:	d107      	bne.n	8012a46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012a36:	4b5a      	ldr	r3, [pc, #360]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d121      	bne.n	8012a86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8012a42:	2301      	movs	r3, #1
 8012a44:	e0a6      	b.n	8012b94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	2b02      	cmp	r3, #2
 8012a4c:	d107      	bne.n	8012a5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012a4e:	4b54      	ldr	r3, [pc, #336]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d115      	bne.n	8012a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e09a      	b.n	8012b94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d107      	bne.n	8012a76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8012a66:	4b4e      	ldr	r3, [pc, #312]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f003 0302 	and.w	r3, r3, #2
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d109      	bne.n	8012a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8012a72:	2301      	movs	r3, #1
 8012a74:	e08e      	b.n	8012b94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012a76:	4b4a      	ldr	r3, [pc, #296]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d101      	bne.n	8012a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8012a82:	2301      	movs	r3, #1
 8012a84:	e086      	b.n	8012b94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012a86:	4b46      	ldr	r3, [pc, #280]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a88:	689b      	ldr	r3, [r3, #8]
 8012a8a:	f023 0203 	bic.w	r2, r3, #3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	4943      	ldr	r1, [pc, #268]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012a94:	4313      	orrs	r3, r2
 8012a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a98:	f7ff f81a 	bl	8011ad0 <HAL_GetTick>
 8012a9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012a9e:	e00a      	b.n	8012ab6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012aa0:	f7ff f816 	bl	8011ad0 <HAL_GetTick>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	1ad3      	subs	r3, r2, r3
 8012aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d901      	bls.n	8012ab6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8012ab2:	2303      	movs	r3, #3
 8012ab4:	e06e      	b.n	8012b94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012ab8:	689b      	ldr	r3, [r3, #8]
 8012aba:	f003 020c 	and.w	r2, r3, #12
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d1eb      	bne.n	8012aa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f003 0302 	and.w	r3, r3, #2
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d010      	beq.n	8012af6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	689a      	ldr	r2, [r3, #8]
 8012ad8:	4b31      	ldr	r3, [pc, #196]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012ada:	689b      	ldr	r3, [r3, #8]
 8012adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d208      	bcs.n	8012af6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	689b      	ldr	r3, [r3, #8]
 8012af0:	492b      	ldr	r1, [pc, #172]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012af2:	4313      	orrs	r3, r2
 8012af4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012af6:	4b29      	ldr	r3, [pc, #164]	@ (8012b9c <HAL_RCC_ClockConfig+0x1ec>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f003 0307 	and.w	r3, r3, #7
 8012afe:	683a      	ldr	r2, [r7, #0]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d210      	bcs.n	8012b26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012b04:	4b25      	ldr	r3, [pc, #148]	@ (8012b9c <HAL_RCC_ClockConfig+0x1ec>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f023 0207 	bic.w	r2, r3, #7
 8012b0c:	4923      	ldr	r1, [pc, #140]	@ (8012b9c <HAL_RCC_ClockConfig+0x1ec>)
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	4313      	orrs	r3, r2
 8012b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012b14:	4b21      	ldr	r3, [pc, #132]	@ (8012b9c <HAL_RCC_ClockConfig+0x1ec>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f003 0307 	and.w	r3, r3, #7
 8012b1c:	683a      	ldr	r2, [r7, #0]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d001      	beq.n	8012b26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8012b22:	2301      	movs	r3, #1
 8012b24:	e036      	b.n	8012b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	f003 0304 	and.w	r3, r3, #4
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d008      	beq.n	8012b44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012b32:	4b1b      	ldr	r3, [pc, #108]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012b34:	689b      	ldr	r3, [r3, #8]
 8012b36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	68db      	ldr	r3, [r3, #12]
 8012b3e:	4918      	ldr	r1, [pc, #96]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012b40:	4313      	orrs	r3, r2
 8012b42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f003 0308 	and.w	r3, r3, #8
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d009      	beq.n	8012b64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012b50:	4b13      	ldr	r3, [pc, #76]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012b52:	689b      	ldr	r3, [r3, #8]
 8012b54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	691b      	ldr	r3, [r3, #16]
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	4910      	ldr	r1, [pc, #64]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012b60:	4313      	orrs	r3, r2
 8012b62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8012b64:	f000 f824 	bl	8012bb0 <HAL_RCC_GetSysClockFreq>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	091b      	lsrs	r3, r3, #4
 8012b70:	f003 030f 	and.w	r3, r3, #15
 8012b74:	490b      	ldr	r1, [pc, #44]	@ (8012ba4 <HAL_RCC_ClockConfig+0x1f4>)
 8012b76:	5ccb      	ldrb	r3, [r1, r3]
 8012b78:	f003 031f 	and.w	r3, r3, #31
 8012b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8012b80:	4a09      	ldr	r2, [pc, #36]	@ (8012ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8012b82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8012b84:	4b09      	ldr	r3, [pc, #36]	@ (8012bac <HAL_RCC_ClockConfig+0x1fc>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7ef fbd5 	bl	8002338 <HAL_InitTick>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	72fb      	strb	r3, [r7, #11]

  return status;
 8012b92:	7afb      	ldrb	r3, [r7, #11]
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	40022000 	.word	0x40022000
 8012ba0:	40021000 	.word	0x40021000
 8012ba4:	0802198c 	.word	0x0802198c
 8012ba8:	20000030 	.word	0x20000030
 8012bac:	20000034 	.word	0x20000034

08012bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b089      	sub	sp, #36	@ 0x24
 8012bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	61fb      	str	r3, [r7, #28]
 8012bba:	2300      	movs	r3, #0
 8012bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012bc0:	689b      	ldr	r3, [r3, #8]
 8012bc2:	f003 030c 	and.w	r3, r3, #12
 8012bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	f003 0303 	and.w	r3, r3, #3
 8012bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8012bd2:	693b      	ldr	r3, [r7, #16]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d005      	beq.n	8012be4 <HAL_RCC_GetSysClockFreq+0x34>
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	2b0c      	cmp	r3, #12
 8012bdc:	d121      	bne.n	8012c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d11e      	bne.n	8012c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8012be4:	4b34      	ldr	r3, [pc, #208]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f003 0308 	and.w	r3, r3, #8
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d107      	bne.n	8012c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8012bf0:	4b31      	ldr	r3, [pc, #196]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012bf6:	0a1b      	lsrs	r3, r3, #8
 8012bf8:	f003 030f 	and.w	r3, r3, #15
 8012bfc:	61fb      	str	r3, [r7, #28]
 8012bfe:	e005      	b.n	8012c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8012c00:	4b2d      	ldr	r3, [pc, #180]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	091b      	lsrs	r3, r3, #4
 8012c06:	f003 030f 	and.w	r3, r3, #15
 8012c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8012c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8012cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8012c0e:	69fb      	ldr	r3, [r7, #28]
 8012c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d10d      	bne.n	8012c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8012c20:	e00a      	b.n	8012c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	2b04      	cmp	r3, #4
 8012c26:	d102      	bne.n	8012c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8012c28:	4b25      	ldr	r3, [pc, #148]	@ (8012cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8012c2a:	61bb      	str	r3, [r7, #24]
 8012c2c:	e004      	b.n	8012c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	2b08      	cmp	r3, #8
 8012c32:	d101      	bne.n	8012c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8012c34:	4b23      	ldr	r3, [pc, #140]	@ (8012cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8012c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	2b0c      	cmp	r3, #12
 8012c3c:	d134      	bne.n	8012ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8012c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	f003 0303 	and.w	r3, r3, #3
 8012c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	2b02      	cmp	r3, #2
 8012c4c:	d003      	beq.n	8012c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d003      	beq.n	8012c5c <HAL_RCC_GetSysClockFreq+0xac>
 8012c54:	e005      	b.n	8012c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8012c56:	4b1a      	ldr	r3, [pc, #104]	@ (8012cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8012c58:	617b      	str	r3, [r7, #20]
      break;
 8012c5a:	e005      	b.n	8012c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8012c5c:	4b19      	ldr	r3, [pc, #100]	@ (8012cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8012c5e:	617b      	str	r3, [r7, #20]
      break;
 8012c60:	e002      	b.n	8012c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	617b      	str	r3, [r7, #20]
      break;
 8012c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8012c68:	4b13      	ldr	r3, [pc, #76]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012c6a:	68db      	ldr	r3, [r3, #12]
 8012c6c:	091b      	lsrs	r3, r3, #4
 8012c6e:	f003 0307 	and.w	r3, r3, #7
 8012c72:	3301      	adds	r3, #1
 8012c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8012c76:	4b10      	ldr	r3, [pc, #64]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012c78:	68db      	ldr	r3, [r3, #12]
 8012c7a:	0a1b      	lsrs	r3, r3, #8
 8012c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012c80:	697a      	ldr	r2, [r7, #20]
 8012c82:	fb03 f202 	mul.w	r2, r3, r2
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8012c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8012cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	0e5b      	lsrs	r3, r3, #25
 8012c94:	f003 0303 	and.w	r3, r3, #3
 8012c98:	3301      	adds	r3, #1
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8012c9e:	697a      	ldr	r2, [r7, #20]
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8012ca8:	69bb      	ldr	r3, [r7, #24]
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3724      	adds	r7, #36	@ 0x24
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr
 8012cb6:	bf00      	nop
 8012cb8:	40021000 	.word	0x40021000
 8012cbc:	080219a4 	.word	0x080219a4
 8012cc0:	00f42400 	.word	0x00f42400
 8012cc4:	007a1200 	.word	0x007a1200

08012cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012ccc:	4b03      	ldr	r3, [pc, #12]	@ (8012cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8012cce:	681b      	ldr	r3, [r3, #0]
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr
 8012cda:	bf00      	nop
 8012cdc:	20000030 	.word	0x20000030

08012ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8012ce4:	f7ff fff0 	bl	8012cc8 <HAL_RCC_GetHCLKFreq>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	4b06      	ldr	r3, [pc, #24]	@ (8012d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012cec:	689b      	ldr	r3, [r3, #8]
 8012cee:	0a1b      	lsrs	r3, r3, #8
 8012cf0:	f003 0307 	and.w	r3, r3, #7
 8012cf4:	4904      	ldr	r1, [pc, #16]	@ (8012d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012cf6:	5ccb      	ldrb	r3, [r1, r3]
 8012cf8:	f003 031f 	and.w	r3, r3, #31
 8012cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	40021000 	.word	0x40021000
 8012d08:	0802199c 	.word	0x0802199c

08012d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8012d10:	f7ff ffda 	bl	8012cc8 <HAL_RCC_GetHCLKFreq>
 8012d14:	4602      	mov	r2, r0
 8012d16:	4b06      	ldr	r3, [pc, #24]	@ (8012d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	0adb      	lsrs	r3, r3, #11
 8012d1c:	f003 0307 	and.w	r3, r3, #7
 8012d20:	4904      	ldr	r1, [pc, #16]	@ (8012d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012d22:	5ccb      	ldrb	r3, [r1, r3]
 8012d24:	f003 031f 	and.w	r3, r3, #31
 8012d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	40021000 	.word	0x40021000
 8012d34:	0802199c 	.word	0x0802199c

08012d38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	220f      	movs	r2, #15
 8012d46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8012d48:	4b12      	ldr	r3, [pc, #72]	@ (8012d94 <HAL_RCC_GetClockConfig+0x5c>)
 8012d4a:	689b      	ldr	r3, [r3, #8]
 8012d4c:	f003 0203 	and.w	r2, r3, #3
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8012d54:	4b0f      	ldr	r3, [pc, #60]	@ (8012d94 <HAL_RCC_GetClockConfig+0x5c>)
 8012d56:	689b      	ldr	r3, [r3, #8]
 8012d58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8012d60:	4b0c      	ldr	r3, [pc, #48]	@ (8012d94 <HAL_RCC_GetClockConfig+0x5c>)
 8012d62:	689b      	ldr	r3, [r3, #8]
 8012d64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8012d6c:	4b09      	ldr	r3, [pc, #36]	@ (8012d94 <HAL_RCC_GetClockConfig+0x5c>)
 8012d6e:	689b      	ldr	r3, [r3, #8]
 8012d70:	08db      	lsrs	r3, r3, #3
 8012d72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8012d7a:	4b07      	ldr	r3, [pc, #28]	@ (8012d98 <HAL_RCC_GetClockConfig+0x60>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	f003 0207 	and.w	r2, r3, #7
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	601a      	str	r2, [r3, #0]
}
 8012d86:	bf00      	nop
 8012d88:	370c      	adds	r7, #12
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d90:	4770      	bx	lr
 8012d92:	bf00      	nop
 8012d94:	40021000 	.word	0x40021000
 8012d98:	40022000 	.word	0x40022000

08012d9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b086      	sub	sp, #24
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8012da4:	2300      	movs	r3, #0
 8012da6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8012da8:	4b2a      	ldr	r3, [pc, #168]	@ (8012e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d003      	beq.n	8012dbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8012db4:	f7ff f9bc 	bl	8012130 <HAL_PWREx_GetVoltageRange>
 8012db8:	6178      	str	r0, [r7, #20]
 8012dba:	e014      	b.n	8012de6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8012dbc:	4b25      	ldr	r3, [pc, #148]	@ (8012e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012dc0:	4a24      	ldr	r2, [pc, #144]	@ (8012e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8012dc8:	4b22      	ldr	r3, [pc, #136]	@ (8012e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012dd0:	60fb      	str	r3, [r7, #12]
 8012dd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8012dd4:	f7ff f9ac 	bl	8012130 <HAL_PWREx_GetVoltageRange>
 8012dd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8012dda:	4b1e      	ldr	r3, [pc, #120]	@ (8012e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012dde:	4a1d      	ldr	r2, [pc, #116]	@ (8012e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012de4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012dec:	d10b      	bne.n	8012e06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b80      	cmp	r3, #128	@ 0x80
 8012df2:	d919      	bls.n	8012e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2ba0      	cmp	r3, #160	@ 0xa0
 8012df8:	d902      	bls.n	8012e00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8012dfa:	2302      	movs	r3, #2
 8012dfc:	613b      	str	r3, [r7, #16]
 8012dfe:	e013      	b.n	8012e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012e00:	2301      	movs	r3, #1
 8012e02:	613b      	str	r3, [r7, #16]
 8012e04:	e010      	b.n	8012e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2b80      	cmp	r3, #128	@ 0x80
 8012e0a:	d902      	bls.n	8012e12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8012e0c:	2303      	movs	r3, #3
 8012e0e:	613b      	str	r3, [r7, #16]
 8012e10:	e00a      	b.n	8012e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2b80      	cmp	r3, #128	@ 0x80
 8012e16:	d102      	bne.n	8012e1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8012e18:	2302      	movs	r3, #2
 8012e1a:	613b      	str	r3, [r7, #16]
 8012e1c:	e004      	b.n	8012e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2b70      	cmp	r3, #112	@ 0x70
 8012e22:	d101      	bne.n	8012e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012e24:	2301      	movs	r3, #1
 8012e26:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8012e28:	4b0b      	ldr	r3, [pc, #44]	@ (8012e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	f023 0207 	bic.w	r2, r3, #7
 8012e30:	4909      	ldr	r1, [pc, #36]	@ (8012e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	4313      	orrs	r3, r2
 8012e36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8012e38:	4b07      	ldr	r3, [pc, #28]	@ (8012e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	f003 0307 	and.w	r3, r3, #7
 8012e40:	693a      	ldr	r2, [r7, #16]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d001      	beq.n	8012e4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8012e46:	2301      	movs	r3, #1
 8012e48:	e000      	b.n	8012e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3718      	adds	r7, #24
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	40021000 	.word	0x40021000
 8012e58:	40022000 	.word	0x40022000

08012e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b086      	sub	sp, #24
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012e64:	2300      	movs	r3, #0
 8012e66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012e68:	2300      	movs	r3, #0
 8012e6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d041      	beq.n	8012efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012e7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8012e80:	d02a      	beq.n	8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012e82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8012e86:	d824      	bhi.n	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012e88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012e8c:	d008      	beq.n	8012ea0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8012e8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012e92:	d81e      	bhi.n	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d00a      	beq.n	8012eae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8012e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012e9c:	d010      	beq.n	8012ec0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012e9e:	e018      	b.n	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8012ea0:	4b86      	ldr	r3, [pc, #536]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	4a85      	ldr	r2, [pc, #532]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012eaa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8012eac:	e015      	b.n	8012eda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	3304      	adds	r3, #4
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f000 fabb 	bl	8013430 <RCCEx_PLLSAI1_Config>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8012ebe:	e00c      	b.n	8012eda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	3320      	adds	r3, #32
 8012ec4:	2100      	movs	r1, #0
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f000 fba6 	bl	8013618 <RCCEx_PLLSAI2_Config>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8012ed0:	e003      	b.n	8012eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	74fb      	strb	r3, [r7, #19]
      break;
 8012ed6:	e000      	b.n	8012eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8012ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012eda:	7cfb      	ldrb	r3, [r7, #19]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d10b      	bne.n	8012ef8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012ee0:	4b76      	ldr	r3, [pc, #472]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012ee6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012eee:	4973      	ldr	r1, [pc, #460]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012ef0:	4313      	orrs	r3, r2
 8012ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8012ef6:	e001      	b.n	8012efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ef8:	7cfb      	ldrb	r3, [r7, #19]
 8012efa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d041      	beq.n	8012f8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012f10:	d02a      	beq.n	8012f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8012f12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012f16:	d824      	bhi.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8012f18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012f1c:	d008      	beq.n	8012f30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8012f1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012f22:	d81e      	bhi.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00a      	beq.n	8012f3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8012f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012f2c:	d010      	beq.n	8012f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8012f2e:	e018      	b.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8012f30:	4b62      	ldr	r3, [pc, #392]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012f32:	68db      	ldr	r3, [r3, #12]
 8012f34:	4a61      	ldr	r2, [pc, #388]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012f3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8012f3c:	e015      	b.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	3304      	adds	r3, #4
 8012f42:	2100      	movs	r1, #0
 8012f44:	4618      	mov	r0, r3
 8012f46:	f000 fa73 	bl	8013430 <RCCEx_PLLSAI1_Config>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8012f4e:	e00c      	b.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	3320      	adds	r3, #32
 8012f54:	2100      	movs	r1, #0
 8012f56:	4618      	mov	r0, r3
 8012f58:	f000 fb5e 	bl	8013618 <RCCEx_PLLSAI2_Config>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8012f60:	e003      	b.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012f62:	2301      	movs	r3, #1
 8012f64:	74fb      	strb	r3, [r7, #19]
      break;
 8012f66:	e000      	b.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8012f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012f6a:	7cfb      	ldrb	r3, [r7, #19]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d10b      	bne.n	8012f88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8012f70:	4b52      	ldr	r3, [pc, #328]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012f76:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f7e:	494f      	ldr	r1, [pc, #316]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012f80:	4313      	orrs	r3, r2
 8012f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8012f86:	e001      	b.n	8012f8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f88:	7cfb      	ldrb	r3, [r7, #19]
 8012f8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	f000 80a0 	beq.w	80130da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8012f9e:	4b47      	ldr	r3, [pc, #284]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d101      	bne.n	8012fae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8012faa:	2301      	movs	r3, #1
 8012fac:	e000      	b.n	8012fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8012fae:	2300      	movs	r3, #0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00d      	beq.n	8012fd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012fb4:	4b41      	ldr	r3, [pc, #260]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fb8:	4a40      	ldr	r2, [pc, #256]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8012fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8012fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012fc8:	60bb      	str	r3, [r7, #8]
 8012fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80130c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80130c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8012fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012fdc:	f7fe fd78 	bl	8011ad0 <HAL_GetTick>
 8012fe0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8012fe2:	e009      	b.n	8012ff8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012fe4:	f7fe fd74 	bl	8011ad0 <HAL_GetTick>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	1ad3      	subs	r3, r2, r3
 8012fee:	2b02      	cmp	r3, #2
 8012ff0:	d902      	bls.n	8012ff8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8012ff2:	2303      	movs	r3, #3
 8012ff4:	74fb      	strb	r3, [r7, #19]
        break;
 8012ff6:	e005      	b.n	8013004 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8012ff8:	4b31      	ldr	r3, [pc, #196]	@ (80130c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013000:	2b00      	cmp	r3, #0
 8013002:	d0ef      	beq.n	8012fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8013004:	7cfb      	ldrb	r3, [r7, #19]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d15c      	bne.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801300a:	4b2c      	ldr	r3, [pc, #176]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013010:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013014:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d01f      	beq.n	801305c <HAL_RCCEx_PeriphCLKConfig+0x200>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013022:	697a      	ldr	r2, [r7, #20]
 8013024:	429a      	cmp	r2, r3
 8013026:	d019      	beq.n	801305c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8013028:	4b24      	ldr	r3, [pc, #144]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801302e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013032:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013034:	4b21      	ldr	r3, [pc, #132]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801303a:	4a20      	ldr	r2, [pc, #128]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801303c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013044:	4b1d      	ldr	r3, [pc, #116]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801304a:	4a1c      	ldr	r2, [pc, #112]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801304c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8013054:	4a19      	ldr	r2, [pc, #100]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	f003 0301 	and.w	r3, r3, #1
 8013062:	2b00      	cmp	r3, #0
 8013064:	d016      	beq.n	8013094 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013066:	f7fe fd33 	bl	8011ad0 <HAL_GetTick>
 801306a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801306c:	e00b      	b.n	8013086 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801306e:	f7fe fd2f 	bl	8011ad0 <HAL_GetTick>
 8013072:	4602      	mov	r2, r0
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	1ad3      	subs	r3, r2, r3
 8013078:	f241 3288 	movw	r2, #5000	@ 0x1388
 801307c:	4293      	cmp	r3, r2
 801307e:	d902      	bls.n	8013086 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8013080:	2303      	movs	r3, #3
 8013082:	74fb      	strb	r3, [r7, #19]
            break;
 8013084:	e006      	b.n	8013094 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013086:	4b0d      	ldr	r3, [pc, #52]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801308c:	f003 0302 	and.w	r3, r3, #2
 8013090:	2b00      	cmp	r3, #0
 8013092:	d0ec      	beq.n	801306e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8013094:	7cfb      	ldrb	r3, [r7, #19]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d10c      	bne.n	80130b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801309a:	4b08      	ldr	r3, [pc, #32]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80130a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80130aa:	4904      	ldr	r1, [pc, #16]	@ (80130bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80130ac:	4313      	orrs	r3, r2
 80130ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80130b2:	e009      	b.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80130b4:	7cfb      	ldrb	r3, [r7, #19]
 80130b6:	74bb      	strb	r3, [r7, #18]
 80130b8:	e006      	b.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80130ba:	bf00      	nop
 80130bc:	40021000 	.word	0x40021000
 80130c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130c4:	7cfb      	ldrb	r3, [r7, #19]
 80130c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80130c8:	7c7b      	ldrb	r3, [r7, #17]
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	d105      	bne.n	80130da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80130ce:	4b9e      	ldr	r3, [pc, #632]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80130d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130d2:	4a9d      	ldr	r2, [pc, #628]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80130d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80130d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	f003 0301 	and.w	r3, r3, #1
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d00a      	beq.n	80130fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80130e6:	4b98      	ldr	r3, [pc, #608]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80130e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80130ec:	f023 0203 	bic.w	r2, r3, #3
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130f4:	4994      	ldr	r1, [pc, #592]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80130f6:	4313      	orrs	r3, r2
 80130f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	f003 0302 	and.w	r3, r3, #2
 8013104:	2b00      	cmp	r3, #0
 8013106:	d00a      	beq.n	801311e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013108:	4b8f      	ldr	r3, [pc, #572]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801310e:	f023 020c 	bic.w	r2, r3, #12
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013116:	498c      	ldr	r1, [pc, #560]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013118:	4313      	orrs	r3, r2
 801311a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	f003 0304 	and.w	r3, r3, #4
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00a      	beq.n	8013140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801312a:	4b87      	ldr	r3, [pc, #540]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013130:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013138:	4983      	ldr	r1, [pc, #524]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801313a:	4313      	orrs	r3, r2
 801313c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f003 0308 	and.w	r3, r3, #8
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00a      	beq.n	8013162 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801314c:	4b7e      	ldr	r3, [pc, #504]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013152:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801315a:	497b      	ldr	r1, [pc, #492]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801315c:	4313      	orrs	r3, r2
 801315e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	f003 0310 	and.w	r3, r3, #16
 801316a:	2b00      	cmp	r3, #0
 801316c:	d00a      	beq.n	8013184 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801316e:	4b76      	ldr	r3, [pc, #472]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801317c:	4972      	ldr	r1, [pc, #456]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801317e:	4313      	orrs	r3, r2
 8013180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	f003 0320 	and.w	r3, r3, #32
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00a      	beq.n	80131a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013190:	4b6d      	ldr	r3, [pc, #436]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013196:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801319e:	496a      	ldr	r1, [pc, #424]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80131a0:	4313      	orrs	r3, r2
 80131a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00a      	beq.n	80131c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80131b2:	4b65      	ldr	r3, [pc, #404]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80131b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80131b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80131c0:	4961      	ldr	r1, [pc, #388]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80131c2:	4313      	orrs	r3, r2
 80131c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d00a      	beq.n	80131ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80131d4:	4b5c      	ldr	r3, [pc, #368]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80131d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80131da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80131e2:	4959      	ldr	r1, [pc, #356]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80131e4:	4313      	orrs	r3, r2
 80131e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00a      	beq.n	801320c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80131f6:	4b54      	ldr	r3, [pc, #336]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80131f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80131fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013204:	4950      	ldr	r1, [pc, #320]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013206:	4313      	orrs	r3, r2
 8013208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013214:	2b00      	cmp	r3, #0
 8013216:	d00a      	beq.n	801322e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8013218:	4b4b      	ldr	r3, [pc, #300]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801321e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013226:	4948      	ldr	r1, [pc, #288]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013228:	4313      	orrs	r3, r2
 801322a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013236:	2b00      	cmp	r3, #0
 8013238:	d00a      	beq.n	8013250 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801323a:	4b43      	ldr	r3, [pc, #268]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013240:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013248:	493f      	ldr	r1, [pc, #252]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801324a:	4313      	orrs	r3, r2
 801324c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013258:	2b00      	cmp	r3, #0
 801325a:	d028      	beq.n	80132ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801325c:	4b3a      	ldr	r3, [pc, #232]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801326a:	4937      	ldr	r1, [pc, #220]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801326c:	4313      	orrs	r3, r2
 801326e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801327a:	d106      	bne.n	801328a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801327c:	4b32      	ldr	r3, [pc, #200]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	4a31      	ldr	r2, [pc, #196]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013286:	60d3      	str	r3, [r2, #12]
 8013288:	e011      	b.n	80132ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801328e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013292:	d10c      	bne.n	80132ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	3304      	adds	r3, #4
 8013298:	2101      	movs	r1, #1
 801329a:	4618      	mov	r0, r3
 801329c:	f000 f8c8 	bl	8013430 <RCCEx_PLLSAI1_Config>
 80132a0:	4603      	mov	r3, r0
 80132a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80132a4:	7cfb      	ldrb	r3, [r7, #19]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d001      	beq.n	80132ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80132aa:	7cfb      	ldrb	r3, [r7, #19]
 80132ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d028      	beq.n	801330c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80132ba:	4b23      	ldr	r3, [pc, #140]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80132bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80132c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132c8:	491f      	ldr	r1, [pc, #124]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80132ca:	4313      	orrs	r3, r2
 80132cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80132d8:	d106      	bne.n	80132e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80132da:	4b1b      	ldr	r3, [pc, #108]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80132dc:	68db      	ldr	r3, [r3, #12]
 80132de:	4a1a      	ldr	r2, [pc, #104]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80132e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80132e4:	60d3      	str	r3, [r2, #12]
 80132e6:	e011      	b.n	801330c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80132f0:	d10c      	bne.n	801330c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	3304      	adds	r3, #4
 80132f6:	2101      	movs	r1, #1
 80132f8:	4618      	mov	r0, r3
 80132fa:	f000 f899 	bl	8013430 <RCCEx_PLLSAI1_Config>
 80132fe:	4603      	mov	r3, r0
 8013300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8013302:	7cfb      	ldrb	r3, [r7, #19]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d001      	beq.n	801330c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8013308:	7cfb      	ldrb	r3, [r7, #19]
 801330a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013314:	2b00      	cmp	r3, #0
 8013316:	d02b      	beq.n	8013370 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013318:	4b0b      	ldr	r3, [pc, #44]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801331e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013326:	4908      	ldr	r1, [pc, #32]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013328:	4313      	orrs	r3, r2
 801332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013336:	d109      	bne.n	801334c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8013338:	4b03      	ldr	r3, [pc, #12]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801333a:	68db      	ldr	r3, [r3, #12]
 801333c:	4a02      	ldr	r2, [pc, #8]	@ (8013348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801333e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013342:	60d3      	str	r3, [r2, #12]
 8013344:	e014      	b.n	8013370 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8013346:	bf00      	nop
 8013348:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013350:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013354:	d10c      	bne.n	8013370 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	3304      	adds	r3, #4
 801335a:	2101      	movs	r1, #1
 801335c:	4618      	mov	r0, r3
 801335e:	f000 f867 	bl	8013430 <RCCEx_PLLSAI1_Config>
 8013362:	4603      	mov	r3, r0
 8013364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8013366:	7cfb      	ldrb	r3, [r7, #19]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d001      	beq.n	8013370 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 801336c:	7cfb      	ldrb	r3, [r7, #19]
 801336e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013378:	2b00      	cmp	r3, #0
 801337a:	d02f      	beq.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801337c:	4b2b      	ldr	r3, [pc, #172]	@ (801342c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013382:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801338a:	4928      	ldr	r1, [pc, #160]	@ (801342c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801338c:	4313      	orrs	r3, r2
 801338e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801339a:	d10d      	bne.n	80133b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	3304      	adds	r3, #4
 80133a0:	2102      	movs	r1, #2
 80133a2:	4618      	mov	r0, r3
 80133a4:	f000 f844 	bl	8013430 <RCCEx_PLLSAI1_Config>
 80133a8:	4603      	mov	r3, r0
 80133aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80133ac:	7cfb      	ldrb	r3, [r7, #19]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d014      	beq.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80133b2:	7cfb      	ldrb	r3, [r7, #19]
 80133b4:	74bb      	strb	r3, [r7, #18]
 80133b6:	e011      	b.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80133bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80133c0:	d10c      	bne.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	3320      	adds	r3, #32
 80133c6:	2102      	movs	r1, #2
 80133c8:	4618      	mov	r0, r3
 80133ca:	f000 f925 	bl	8013618 <RCCEx_PLLSAI2_Config>
 80133ce:	4603      	mov	r3, r0
 80133d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80133d2:	7cfb      	ldrb	r3, [r7, #19]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d001      	beq.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80133d8:	7cfb      	ldrb	r3, [r7, #19]
 80133da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d00a      	beq.n	80133fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80133e8:	4b10      	ldr	r3, [pc, #64]	@ (801342c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80133ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80133ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133f6:	490d      	ldr	r1, [pc, #52]	@ (801342c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80133f8:	4313      	orrs	r3, r2
 80133fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013406:	2b00      	cmp	r3, #0
 8013408:	d00b      	beq.n	8013422 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801340a:	4b08      	ldr	r3, [pc, #32]	@ (801342c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013410:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801341a:	4904      	ldr	r1, [pc, #16]	@ (801342c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801341c:	4313      	orrs	r3, r2
 801341e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8013422:	7cbb      	ldrb	r3, [r7, #18]
}
 8013424:	4618      	mov	r0, r3
 8013426:	3718      	adds	r7, #24
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	40021000 	.word	0x40021000

08013430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801343a:	2300      	movs	r3, #0
 801343c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801343e:	4b75      	ldr	r3, [pc, #468]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	f003 0303 	and.w	r3, r3, #3
 8013446:	2b00      	cmp	r3, #0
 8013448:	d018      	beq.n	801347c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801344a:	4b72      	ldr	r3, [pc, #456]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 801344c:	68db      	ldr	r3, [r3, #12]
 801344e:	f003 0203 	and.w	r2, r3, #3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	429a      	cmp	r2, r3
 8013458:	d10d      	bne.n	8013476 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
       ||
 801345e:	2b00      	cmp	r3, #0
 8013460:	d009      	beq.n	8013476 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8013462:	4b6c      	ldr	r3, [pc, #432]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013464:	68db      	ldr	r3, [r3, #12]
 8013466:	091b      	lsrs	r3, r3, #4
 8013468:	f003 0307 	and.w	r3, r3, #7
 801346c:	1c5a      	adds	r2, r3, #1
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	685b      	ldr	r3, [r3, #4]
       ||
 8013472:	429a      	cmp	r2, r3
 8013474:	d047      	beq.n	8013506 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8013476:	2301      	movs	r3, #1
 8013478:	73fb      	strb	r3, [r7, #15]
 801347a:	e044      	b.n	8013506 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2b03      	cmp	r3, #3
 8013482:	d018      	beq.n	80134b6 <RCCEx_PLLSAI1_Config+0x86>
 8013484:	2b03      	cmp	r3, #3
 8013486:	d825      	bhi.n	80134d4 <RCCEx_PLLSAI1_Config+0xa4>
 8013488:	2b01      	cmp	r3, #1
 801348a:	d002      	beq.n	8013492 <RCCEx_PLLSAI1_Config+0x62>
 801348c:	2b02      	cmp	r3, #2
 801348e:	d009      	beq.n	80134a4 <RCCEx_PLLSAI1_Config+0x74>
 8013490:	e020      	b.n	80134d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8013492:	4b60      	ldr	r3, [pc, #384]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	f003 0302 	and.w	r3, r3, #2
 801349a:	2b00      	cmp	r3, #0
 801349c:	d11d      	bne.n	80134da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801349e:	2301      	movs	r3, #1
 80134a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80134a2:	e01a      	b.n	80134da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80134a4:	4b5b      	ldr	r3, [pc, #364]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d116      	bne.n	80134de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80134b0:	2301      	movs	r3, #1
 80134b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80134b4:	e013      	b.n	80134de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80134b6:	4b57      	ldr	r3, [pc, #348]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d10f      	bne.n	80134e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80134c2:	4b54      	ldr	r3, [pc, #336]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d109      	bne.n	80134e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80134ce:	2301      	movs	r3, #1
 80134d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80134d2:	e006      	b.n	80134e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80134d4:	2301      	movs	r3, #1
 80134d6:	73fb      	strb	r3, [r7, #15]
      break;
 80134d8:	e004      	b.n	80134e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80134da:	bf00      	nop
 80134dc:	e002      	b.n	80134e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80134de:	bf00      	nop
 80134e0:	e000      	b.n	80134e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80134e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80134e4:	7bfb      	ldrb	r3, [r7, #15]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d10d      	bne.n	8013506 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80134ea:	4b4a      	ldr	r3, [pc, #296]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80134ec:	68db      	ldr	r3, [r3, #12]
 80134ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6819      	ldr	r1, [r3, #0]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	3b01      	subs	r3, #1
 80134fc:	011b      	lsls	r3, r3, #4
 80134fe:	430b      	orrs	r3, r1
 8013500:	4944      	ldr	r1, [pc, #272]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013502:	4313      	orrs	r3, r2
 8013504:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8013506:	7bfb      	ldrb	r3, [r7, #15]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d17d      	bne.n	8013608 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801350c:	4b41      	ldr	r3, [pc, #260]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4a40      	ldr	r2, [pc, #256]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013512:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013518:	f7fe fada 	bl	8011ad0 <HAL_GetTick>
 801351c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801351e:	e009      	b.n	8013534 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8013520:	f7fe fad6 	bl	8011ad0 <HAL_GetTick>
 8013524:	4602      	mov	r2, r0
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	1ad3      	subs	r3, r2, r3
 801352a:	2b02      	cmp	r3, #2
 801352c:	d902      	bls.n	8013534 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801352e:	2303      	movs	r3, #3
 8013530:	73fb      	strb	r3, [r7, #15]
        break;
 8013532:	e005      	b.n	8013540 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8013534:	4b37      	ldr	r3, [pc, #220]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801353c:	2b00      	cmp	r3, #0
 801353e:	d1ef      	bne.n	8013520 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8013540:	7bfb      	ldrb	r3, [r7, #15]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d160      	bne.n	8013608 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d111      	bne.n	8013570 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801354c:	4b31      	ldr	r3, [pc, #196]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 801354e:	691b      	ldr	r3, [r3, #16]
 8013550:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8013554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	6892      	ldr	r2, [r2, #8]
 801355c:	0211      	lsls	r1, r2, #8
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	68d2      	ldr	r2, [r2, #12]
 8013562:	0912      	lsrs	r2, r2, #4
 8013564:	0452      	lsls	r2, r2, #17
 8013566:	430a      	orrs	r2, r1
 8013568:	492a      	ldr	r1, [pc, #168]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 801356a:	4313      	orrs	r3, r2
 801356c:	610b      	str	r3, [r1, #16]
 801356e:	e027      	b.n	80135c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	2b01      	cmp	r3, #1
 8013574:	d112      	bne.n	801359c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8013576:	4b27      	ldr	r3, [pc, #156]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013578:	691b      	ldr	r3, [r3, #16]
 801357a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 801357e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8013582:	687a      	ldr	r2, [r7, #4]
 8013584:	6892      	ldr	r2, [r2, #8]
 8013586:	0211      	lsls	r1, r2, #8
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	6912      	ldr	r2, [r2, #16]
 801358c:	0852      	lsrs	r2, r2, #1
 801358e:	3a01      	subs	r2, #1
 8013590:	0552      	lsls	r2, r2, #21
 8013592:	430a      	orrs	r2, r1
 8013594:	491f      	ldr	r1, [pc, #124]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013596:	4313      	orrs	r3, r2
 8013598:	610b      	str	r3, [r1, #16]
 801359a:	e011      	b.n	80135c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801359c:	4b1d      	ldr	r3, [pc, #116]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 801359e:	691b      	ldr	r3, [r3, #16]
 80135a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80135a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	6892      	ldr	r2, [r2, #8]
 80135ac:	0211      	lsls	r1, r2, #8
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	6952      	ldr	r2, [r2, #20]
 80135b2:	0852      	lsrs	r2, r2, #1
 80135b4:	3a01      	subs	r2, #1
 80135b6:	0652      	lsls	r2, r2, #25
 80135b8:	430a      	orrs	r2, r1
 80135ba:	4916      	ldr	r1, [pc, #88]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80135bc:	4313      	orrs	r3, r2
 80135be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80135c0:	4b14      	ldr	r3, [pc, #80]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	4a13      	ldr	r2, [pc, #76]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80135c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80135ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80135cc:	f7fe fa80 	bl	8011ad0 <HAL_GetTick>
 80135d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80135d2:	e009      	b.n	80135e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80135d4:	f7fe fa7c 	bl	8011ad0 <HAL_GetTick>
 80135d8:	4602      	mov	r2, r0
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	1ad3      	subs	r3, r2, r3
 80135de:	2b02      	cmp	r3, #2
 80135e0:	d902      	bls.n	80135e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80135e2:	2303      	movs	r3, #3
 80135e4:	73fb      	strb	r3, [r7, #15]
          break;
 80135e6:	e005      	b.n	80135f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80135e8:	4b0a      	ldr	r3, [pc, #40]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d0ef      	beq.n	80135d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80135f4:	7bfb      	ldrb	r3, [r7, #15]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d106      	bne.n	8013608 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80135fa:	4b06      	ldr	r3, [pc, #24]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80135fc:	691a      	ldr	r2, [r3, #16]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	699b      	ldr	r3, [r3, #24]
 8013602:	4904      	ldr	r1, [pc, #16]	@ (8013614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8013604:	4313      	orrs	r3, r2
 8013606:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8013608:	7bfb      	ldrb	r3, [r7, #15]
}
 801360a:	4618      	mov	r0, r3
 801360c:	3710      	adds	r7, #16
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	40021000 	.word	0x40021000

08013618 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013622:	2300      	movs	r3, #0
 8013624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8013626:	4b6a      	ldr	r3, [pc, #424]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8013628:	68db      	ldr	r3, [r3, #12]
 801362a:	f003 0303 	and.w	r3, r3, #3
 801362e:	2b00      	cmp	r3, #0
 8013630:	d018      	beq.n	8013664 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8013632:	4b67      	ldr	r3, [pc, #412]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8013634:	68db      	ldr	r3, [r3, #12]
 8013636:	f003 0203 	and.w	r2, r3, #3
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	429a      	cmp	r2, r3
 8013640:	d10d      	bne.n	801365e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
       ||
 8013646:	2b00      	cmp	r3, #0
 8013648:	d009      	beq.n	801365e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 801364a:	4b61      	ldr	r3, [pc, #388]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	091b      	lsrs	r3, r3, #4
 8013650:	f003 0307 	and.w	r3, r3, #7
 8013654:	1c5a      	adds	r2, r3, #1
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	685b      	ldr	r3, [r3, #4]
       ||
 801365a:	429a      	cmp	r2, r3
 801365c:	d047      	beq.n	80136ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801365e:	2301      	movs	r3, #1
 8013660:	73fb      	strb	r3, [r7, #15]
 8013662:	e044      	b.n	80136ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	2b03      	cmp	r3, #3
 801366a:	d018      	beq.n	801369e <RCCEx_PLLSAI2_Config+0x86>
 801366c:	2b03      	cmp	r3, #3
 801366e:	d825      	bhi.n	80136bc <RCCEx_PLLSAI2_Config+0xa4>
 8013670:	2b01      	cmp	r3, #1
 8013672:	d002      	beq.n	801367a <RCCEx_PLLSAI2_Config+0x62>
 8013674:	2b02      	cmp	r3, #2
 8013676:	d009      	beq.n	801368c <RCCEx_PLLSAI2_Config+0x74>
 8013678:	e020      	b.n	80136bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801367a:	4b55      	ldr	r3, [pc, #340]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f003 0302 	and.w	r3, r3, #2
 8013682:	2b00      	cmp	r3, #0
 8013684:	d11d      	bne.n	80136c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8013686:	2301      	movs	r3, #1
 8013688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801368a:	e01a      	b.n	80136c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801368c:	4b50      	ldr	r3, [pc, #320]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013694:	2b00      	cmp	r3, #0
 8013696:	d116      	bne.n	80136c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8013698:	2301      	movs	r3, #1
 801369a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801369c:	e013      	b.n	80136c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801369e:	4b4c      	ldr	r3, [pc, #304]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d10f      	bne.n	80136ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80136aa:	4b49      	ldr	r3, [pc, #292]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d109      	bne.n	80136ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80136b6:	2301      	movs	r3, #1
 80136b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80136ba:	e006      	b.n	80136ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80136bc:	2301      	movs	r3, #1
 80136be:	73fb      	strb	r3, [r7, #15]
      break;
 80136c0:	e004      	b.n	80136cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80136c2:	bf00      	nop
 80136c4:	e002      	b.n	80136cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80136c6:	bf00      	nop
 80136c8:	e000      	b.n	80136cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80136ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80136cc:	7bfb      	ldrb	r3, [r7, #15]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d10d      	bne.n	80136ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80136d2:	4b3f      	ldr	r3, [pc, #252]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80136d4:	68db      	ldr	r3, [r3, #12]
 80136d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6819      	ldr	r1, [r3, #0]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	3b01      	subs	r3, #1
 80136e4:	011b      	lsls	r3, r3, #4
 80136e6:	430b      	orrs	r3, r1
 80136e8:	4939      	ldr	r1, [pc, #228]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80136ea:	4313      	orrs	r3, r2
 80136ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80136ee:	7bfb      	ldrb	r3, [r7, #15]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d167      	bne.n	80137c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80136f4:	4b36      	ldr	r3, [pc, #216]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	4a35      	ldr	r2, [pc, #212]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80136fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80136fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013700:	f7fe f9e6 	bl	8011ad0 <HAL_GetTick>
 8013704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8013706:	e009      	b.n	801371c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8013708:	f7fe f9e2 	bl	8011ad0 <HAL_GetTick>
 801370c:	4602      	mov	r2, r0
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	1ad3      	subs	r3, r2, r3
 8013712:	2b02      	cmp	r3, #2
 8013714:	d902      	bls.n	801371c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8013716:	2303      	movs	r3, #3
 8013718:	73fb      	strb	r3, [r7, #15]
        break;
 801371a:	e005      	b.n	8013728 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801371c:	4b2c      	ldr	r3, [pc, #176]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013724:	2b00      	cmp	r3, #0
 8013726:	d1ef      	bne.n	8013708 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8013728:	7bfb      	ldrb	r3, [r7, #15]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d14a      	bne.n	80137c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d111      	bne.n	8013758 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8013734:	4b26      	ldr	r3, [pc, #152]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8013736:	695b      	ldr	r3, [r3, #20]
 8013738:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 801373c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	6892      	ldr	r2, [r2, #8]
 8013744:	0211      	lsls	r1, r2, #8
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	68d2      	ldr	r2, [r2, #12]
 801374a:	0912      	lsrs	r2, r2, #4
 801374c:	0452      	lsls	r2, r2, #17
 801374e:	430a      	orrs	r2, r1
 8013750:	491f      	ldr	r1, [pc, #124]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8013752:	4313      	orrs	r3, r2
 8013754:	614b      	str	r3, [r1, #20]
 8013756:	e011      	b.n	801377c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8013758:	4b1d      	ldr	r3, [pc, #116]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801375a:	695b      	ldr	r3, [r3, #20]
 801375c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8013760:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	6892      	ldr	r2, [r2, #8]
 8013768:	0211      	lsls	r1, r2, #8
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	6912      	ldr	r2, [r2, #16]
 801376e:	0852      	lsrs	r2, r2, #1
 8013770:	3a01      	subs	r2, #1
 8013772:	0652      	lsls	r2, r2, #25
 8013774:	430a      	orrs	r2, r1
 8013776:	4916      	ldr	r1, [pc, #88]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8013778:	4313      	orrs	r3, r2
 801377a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801377c:	4b14      	ldr	r3, [pc, #80]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4a13      	ldr	r2, [pc, #76]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8013782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013786:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013788:	f7fe f9a2 	bl	8011ad0 <HAL_GetTick>
 801378c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801378e:	e009      	b.n	80137a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8013790:	f7fe f99e 	bl	8011ad0 <HAL_GetTick>
 8013794:	4602      	mov	r2, r0
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	2b02      	cmp	r3, #2
 801379c:	d902      	bls.n	80137a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 801379e:	2303      	movs	r3, #3
 80137a0:	73fb      	strb	r3, [r7, #15]
          break;
 80137a2:	e005      	b.n	80137b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80137a4:	4b0a      	ldr	r3, [pc, #40]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d0ef      	beq.n	8013790 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80137b0:	7bfb      	ldrb	r3, [r7, #15]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d106      	bne.n	80137c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80137b6:	4b06      	ldr	r3, [pc, #24]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80137b8:	695a      	ldr	r2, [r3, #20]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	695b      	ldr	r3, [r3, #20]
 80137be:	4904      	ldr	r1, [pc, #16]	@ (80137d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80137c0:	4313      	orrs	r3, r2
 80137c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80137c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3710      	adds	r7, #16
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	40021000 	.word	0x40021000

080137d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80137dc:	2301      	movs	r3, #1
 80137de:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d079      	beq.n	80138da <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2200      	movs	r2, #0
 80137f6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f7ee fd42 	bl	8002284 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2202      	movs	r2, #2
 8013804:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	68db      	ldr	r3, [r3, #12]
 801380e:	f003 0310 	and.w	r3, r3, #16
 8013812:	2b10      	cmp	r3, #16
 8013814:	d058      	beq.n	80138c8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	22ca      	movs	r2, #202	@ 0xca
 801381c:	625a      	str	r2, [r3, #36]	@ 0x24
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2253      	movs	r2, #83	@ 0x53
 8013824:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f000 fad2 	bl	8013dd0 <RTC_EnterInitMode>
 801382c:	4603      	mov	r3, r0
 801382e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8013830:	7bfb      	ldrb	r3, [r7, #15]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d127      	bne.n	8013886 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	689b      	ldr	r3, [r3, #8]
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	6812      	ldr	r2, [r2, #0]
 8013840:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013848:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	6899      	ldr	r1, [r3, #8]
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	685a      	ldr	r2, [r3, #4]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	691b      	ldr	r3, [r3, #16]
 8013858:	431a      	orrs	r2, r3
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	699b      	ldr	r3, [r3, #24]
 801385e:	431a      	orrs	r2, r3
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	430a      	orrs	r2, r1
 8013866:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	68d2      	ldr	r2, [r2, #12]
 8013870:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	6919      	ldr	r1, [r3, #16]
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	689b      	ldr	r3, [r3, #8]
 801387c:	041a      	lsls	r2, r3, #16
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	430a      	orrs	r2, r1
 8013884:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f000 fad6 	bl	8013e38 <RTC_ExitInitMode>
 801388c:	4603      	mov	r3, r0
 801388e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8013890:	7bfb      	ldrb	r3, [r7, #15]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d113      	bne.n	80138be <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f022 0203 	bic.w	r2, r2, #3
 80138a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	69da      	ldr	r2, [r3, #28]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	695b      	ldr	r3, [r3, #20]
 80138b4:	431a      	orrs	r2, r3
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	430a      	orrs	r2, r1
 80138bc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	22ff      	movs	r2, #255	@ 0xff
 80138c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80138c6:	e001      	b.n	80138cc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80138c8:	2300      	movs	r3, #0
 80138ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80138cc:	7bfb      	ldrb	r3, [r7, #15]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2201      	movs	r2, #1
 80138d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80138da:	7bfb      	ldrb	r3, [r7, #15]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3710      	adds	r7, #16
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80138e4:	b590      	push	{r4, r7, lr}
 80138e6:	b087      	sub	sp, #28
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d101      	bne.n	80138fe <HAL_RTC_SetTime+0x1a>
 80138fa:	2302      	movs	r3, #2
 80138fc:	e08b      	b.n	8013a16 <HAL_RTC_SetTime+0x132>
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2201      	movs	r2, #1
 8013902:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2202      	movs	r2, #2
 801390a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	22ca      	movs	r2, #202	@ 0xca
 8013914:	625a      	str	r2, [r3, #36]	@ 0x24
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2253      	movs	r2, #83	@ 0x53
 801391c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	f000 fa56 	bl	8013dd0 <RTC_EnterInitMode>
 8013924:	4603      	mov	r3, r0
 8013926:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8013928:	7cfb      	ldrb	r3, [r7, #19]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d163      	bne.n	80139f6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d126      	bne.n	8013982 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	689b      	ldr	r3, [r3, #8]
 801393a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801393e:	2b00      	cmp	r3, #0
 8013940:	d102      	bne.n	8013948 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	2200      	movs	r2, #0
 8013946:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	4618      	mov	r0, r3
 801394e:	f000 fab1 	bl	8013eb4 <RTC_ByteToBcd2>
 8013952:	4603      	mov	r3, r0
 8013954:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	785b      	ldrb	r3, [r3, #1]
 801395a:	4618      	mov	r0, r3
 801395c:	f000 faaa 	bl	8013eb4 <RTC_ByteToBcd2>
 8013960:	4603      	mov	r3, r0
 8013962:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8013964:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	789b      	ldrb	r3, [r3, #2]
 801396a:	4618      	mov	r0, r3
 801396c:	f000 faa2 	bl	8013eb4 <RTC_ByteToBcd2>
 8013970:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013972:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	78db      	ldrb	r3, [r3, #3]
 801397a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801397c:	4313      	orrs	r3, r2
 801397e:	617b      	str	r3, [r7, #20]
 8013980:	e018      	b.n	80139b4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	689b      	ldr	r3, [r3, #8]
 8013988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801398c:	2b00      	cmp	r3, #0
 801398e:	d102      	bne.n	8013996 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	2200      	movs	r2, #0
 8013994:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	785b      	ldrb	r3, [r3, #1]
 80139a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80139a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80139a4:	68ba      	ldr	r2, [r7, #8]
 80139a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80139a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	78db      	ldrb	r3, [r3, #3]
 80139ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80139b0:	4313      	orrs	r3, r2
 80139b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80139be:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80139c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	689a      	ldr	r2, [r3, #8]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80139d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	6899      	ldr	r1, [r3, #8]
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	68da      	ldr	r2, [r3, #12]
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	691b      	ldr	r3, [r3, #16]
 80139e2:	431a      	orrs	r2, r3
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	430a      	orrs	r2, r1
 80139ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	f000 fa23 	bl	8013e38 <RTC_ExitInitMode>
 80139f2:	4603      	mov	r3, r0
 80139f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	22ff      	movs	r2, #255	@ 0xff
 80139fc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80139fe:	7cfb      	ldrb	r3, [r7, #19]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d103      	bne.n	8013a0c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2201      	movs	r2, #1
 8013a08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8013a14:	7cfb      	ldrb	r3, [r7, #19]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	371c      	adds	r7, #28
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd90      	pop	{r4, r7, pc}

08013a1e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8013a1e:	b590      	push	{r4, r7, lr}
 8013a20:	b087      	sub	sp, #28
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	60f8      	str	r0, [r7, #12]
 8013a26:	60b9      	str	r1, [r7, #8]
 8013a28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d101      	bne.n	8013a38 <HAL_RTC_SetDate+0x1a>
 8013a34:	2302      	movs	r3, #2
 8013a36:	e075      	b.n	8013b24 <HAL_RTC_SetDate+0x106>
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2202      	movs	r2, #2
 8013a44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d10e      	bne.n	8013a6c <HAL_RTC_SetDate+0x4e>
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	785b      	ldrb	r3, [r3, #1]
 8013a52:	f003 0310 	and.w	r3, r3, #16
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d008      	beq.n	8013a6c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	785b      	ldrb	r3, [r3, #1]
 8013a5e:	f023 0310 	bic.w	r3, r3, #16
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	330a      	adds	r3, #10
 8013a66:	b2da      	uxtb	r2, r3
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d11c      	bne.n	8013aac <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	78db      	ldrb	r3, [r3, #3]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f000 fa1c 	bl	8013eb4 <RTC_ByteToBcd2>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	785b      	ldrb	r3, [r3, #1]
 8013a84:	4618      	mov	r0, r3
 8013a86:	f000 fa15 	bl	8013eb4 <RTC_ByteToBcd2>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8013a8e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	789b      	ldrb	r3, [r3, #2]
 8013a94:	4618      	mov	r0, r3
 8013a96:	f000 fa0d 	bl	8013eb4 <RTC_ByteToBcd2>
 8013a9a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013a9c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8013aa6:	4313      	orrs	r3, r2
 8013aa8:	617b      	str	r3, [r7, #20]
 8013aaa:	e00e      	b.n	8013aca <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	78db      	ldrb	r3, [r3, #3]
 8013ab0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	785b      	ldrb	r3, [r3, #1]
 8013ab6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8013ab8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8013aba:	68ba      	ldr	r2, [r7, #8]
 8013abc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8013abe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8013ac6:	4313      	orrs	r3, r2
 8013ac8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	22ca      	movs	r2, #202	@ 0xca
 8013ad0:	625a      	str	r2, [r3, #36]	@ 0x24
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	2253      	movs	r2, #83	@ 0x53
 8013ad8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013ada:	68f8      	ldr	r0, [r7, #12]
 8013adc:	f000 f978 	bl	8013dd0 <RTC_EnterInitMode>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8013ae4:	7cfb      	ldrb	r3, [r7, #19]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d10c      	bne.n	8013b04 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013af4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013af8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f000 f99c 	bl	8013e38 <RTC_ExitInitMode>
 8013b00:	4603      	mov	r3, r0
 8013b02:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	22ff      	movs	r2, #255	@ 0xff
 8013b0a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8013b0c:	7cfb      	ldrb	r3, [r7, #19]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d103      	bne.n	8013b1a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	2201      	movs	r2, #1
 8013b16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8013b22:	7cfb      	ldrb	r3, [r7, #19]
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	371c      	adds	r7, #28
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd90      	pop	{r4, r7, pc}

08013b2c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8013b2c:	b590      	push	{r4, r7, lr}
 8013b2e:	b089      	sub	sp, #36	@ 0x24
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	60f8      	str	r0, [r7, #12]
 8013b34:	60b9      	str	r1, [r7, #8]
 8013b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d101      	bne.n	8013b46 <HAL_RTC_SetAlarm+0x1a>
 8013b42:	2302      	movs	r3, #2
 8013b44:	e11b      	b.n	8013d7e <HAL_RTC_SetAlarm+0x252>
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2201      	movs	r2, #1
 8013b4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	2202      	movs	r2, #2
 8013b52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d137      	bne.n	8013bcc <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	689b      	ldr	r3, [r3, #8]
 8013b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d102      	bne.n	8013b70 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	781b      	ldrb	r3, [r3, #0]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f000 f99d 	bl	8013eb4 <RTC_ByteToBcd2>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	785b      	ldrb	r3, [r3, #1]
 8013b82:	4618      	mov	r0, r3
 8013b84:	f000 f996 	bl	8013eb4 <RTC_ByteToBcd2>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8013b8c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	789b      	ldrb	r3, [r3, #2]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f000 f98e 	bl	8013eb4 <RTC_ByteToBcd2>
 8013b98:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8013b9a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	78db      	ldrb	r3, [r3, #3]
 8013ba2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8013ba4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f000 f980 	bl	8013eb4 <RTC_ByteToBcd2>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8013bb8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8013bc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8013bc6:	4313      	orrs	r3, r2
 8013bc8:	61fb      	str	r3, [r7, #28]
 8013bca:	e023      	b.n	8013c14 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	689b      	ldr	r3, [r3, #8]
 8013bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d102      	bne.n	8013be0 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	785b      	ldrb	r3, [r3, #1]
 8013bea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8013bec:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8013bee:	68ba      	ldr	r2, [r7, #8]
 8013bf0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8013bf2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	78db      	ldrb	r3, [r3, #3]
 8013bf8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8013bfa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013c02:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8013c04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8013c0a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8013c10:	4313      	orrs	r3, r2
 8013c12:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	685a      	ldr	r2, [r3, #4]
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	69db      	ldr	r3, [r3, #28]
 8013c1c:	4313      	orrs	r3, r2
 8013c1e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	22ca      	movs	r2, #202	@ 0xca
 8013c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2253      	movs	r2, #83	@ 0x53
 8013c2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c38:	d14a      	bne.n	8013cd0 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	689a      	ldr	r2, [r3, #8]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013c48:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	b2da      	uxtb	r2, r3
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8013c5a:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	689a      	ldr	r2, [r3, #8]
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8013c6a:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8013c6c:	f7fd ff30 	bl	8011ad0 <HAL_GetTick>
 8013c70:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8013c72:	e015      	b.n	8013ca0 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013c74:	f7fd ff2c 	bl	8011ad0 <HAL_GetTick>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	1ad3      	subs	r3, r2, r3
 8013c7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013c82:	d90d      	bls.n	8013ca0 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	22ff      	movs	r2, #255	@ 0xff
 8013c8a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	2203      	movs	r2, #3
 8013c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	2200      	movs	r2, #0
 8013c98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8013c9c:	2303      	movs	r3, #3
 8013c9e:	e06e      	b.n	8013d7e <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	68db      	ldr	r3, [r3, #12]
 8013ca6:	f003 0301 	and.w	r3, r3, #1
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d0e2      	beq.n	8013c74 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	69fa      	ldr	r2, [r7, #28]
 8013cb4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	69ba      	ldr	r2, [r7, #24]
 8013cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	689a      	ldr	r2, [r3, #8]
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013ccc:	609a      	str	r2, [r3, #8]
 8013cce:	e049      	b.n	8013d64 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	689a      	ldr	r2, [r3, #8]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8013cde:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	68db      	ldr	r3, [r3, #12]
 8013ce6:	b2da      	uxtb	r2, r3
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8013cf0:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	689a      	ldr	r2, [r3, #8]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013d00:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8013d02:	f7fd fee5 	bl	8011ad0 <HAL_GetTick>
 8013d06:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8013d08:	e015      	b.n	8013d36 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013d0a:	f7fd fee1 	bl	8011ad0 <HAL_GetTick>
 8013d0e:	4602      	mov	r2, r0
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013d18:	d90d      	bls.n	8013d36 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	22ff      	movs	r2, #255	@ 0xff
 8013d20:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2203      	movs	r2, #3
 8013d26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8013d32:	2303      	movs	r3, #3
 8013d34:	e023      	b.n	8013d7e <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	f003 0302 	and.w	r3, r3, #2
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d0e2      	beq.n	8013d0a <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	69fa      	ldr	r2, [r7, #28]
 8013d4a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	69ba      	ldr	r2, [r7, #24]
 8013d52:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	689a      	ldr	r2, [r3, #8]
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013d62:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	22ff      	movs	r2, #255	@ 0xff
 8013d6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2201      	movs	r2, #1
 8013d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2200      	movs	r2, #0
 8013d78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8013d7c:	2300      	movs	r3, #0
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3724      	adds	r7, #36	@ 0x24
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd90      	pop	{r4, r7, pc}
	...

08013d88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4a0d      	ldr	r2, [pc, #52]	@ (8013dcc <HAL_RTC_WaitForSynchro+0x44>)
 8013d96:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8013d98:	f7fd fe9a 	bl	8011ad0 <HAL_GetTick>
 8013d9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013d9e:	e009      	b.n	8013db4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013da0:	f7fd fe96 	bl	8011ad0 <HAL_GetTick>
 8013da4:	4602      	mov	r2, r0
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	1ad3      	subs	r3, r2, r3
 8013daa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013dae:	d901      	bls.n	8013db4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8013db0:	2303      	movs	r3, #3
 8013db2:	e007      	b.n	8013dc4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	68db      	ldr	r3, [r3, #12]
 8013dba:	f003 0320 	and.w	r3, r3, #32
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d0ee      	beq.n	8013da0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	0003ff5f 	.word	0x0003ff5f

08013dd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	68db      	ldr	r3, [r3, #12]
 8013de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d120      	bne.n	8013e2c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	f04f 32ff 	mov.w	r2, #4294967295
 8013df2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8013df4:	f7fd fe6c 	bl	8011ad0 <HAL_GetTick>
 8013df8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013dfa:	e00d      	b.n	8013e18 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8013dfc:	f7fd fe68 	bl	8011ad0 <HAL_GetTick>
 8013e00:	4602      	mov	r2, r0
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	1ad3      	subs	r3, r2, r3
 8013e06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013e0a:	d905      	bls.n	8013e18 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8013e0c:	2303      	movs	r3, #3
 8013e0e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2203      	movs	r2, #3
 8013e14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	68db      	ldr	r3, [r3, #12]
 8013e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d102      	bne.n	8013e2c <RTC_EnterInitMode+0x5c>
 8013e26:	7bfb      	ldrb	r3, [r7, #15]
 8013e28:	2b03      	cmp	r3, #3
 8013e2a:	d1e7      	bne.n	8013dfc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8013e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3710      	adds	r7, #16
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}
	...

08013e38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013e40:	2300      	movs	r3, #0
 8013e42:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8013e44:	4b1a      	ldr	r3, [pc, #104]	@ (8013eb0 <RTC_ExitInitMode+0x78>)
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	4a19      	ldr	r2, [pc, #100]	@ (8013eb0 <RTC_ExitInitMode+0x78>)
 8013e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013e4e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8013e50:	4b17      	ldr	r3, [pc, #92]	@ (8013eb0 <RTC_ExitInitMode+0x78>)
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	f003 0320 	and.w	r3, r3, #32
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d10c      	bne.n	8013e76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7ff ff93 	bl	8013d88 <HAL_RTC_WaitForSynchro>
 8013e62:	4603      	mov	r3, r0
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d01e      	beq.n	8013ea6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2203      	movs	r2, #3
 8013e6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8013e70:	2303      	movs	r3, #3
 8013e72:	73fb      	strb	r3, [r7, #15]
 8013e74:	e017      	b.n	8013ea6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013e76:	4b0e      	ldr	r3, [pc, #56]	@ (8013eb0 <RTC_ExitInitMode+0x78>)
 8013e78:	689b      	ldr	r3, [r3, #8]
 8013e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8013eb0 <RTC_ExitInitMode+0x78>)
 8013e7c:	f023 0320 	bic.w	r3, r3, #32
 8013e80:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f7ff ff80 	bl	8013d88 <HAL_RTC_WaitForSynchro>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d005      	beq.n	8013e9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2203      	movs	r2, #3
 8013e92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8013e96:	2303      	movs	r3, #3
 8013e98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013e9a:	4b05      	ldr	r3, [pc, #20]	@ (8013eb0 <RTC_ExitInitMode+0x78>)
 8013e9c:	689b      	ldr	r3, [r3, #8]
 8013e9e:	4a04      	ldr	r2, [pc, #16]	@ (8013eb0 <RTC_ExitInitMode+0x78>)
 8013ea0:	f043 0320 	orr.w	r3, r3, #32
 8013ea4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8013ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3710      	adds	r7, #16
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	40002800 	.word	0x40002800

08013eb4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	b085      	sub	sp, #20
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	4603      	mov	r3, r0
 8013ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8013ec2:	79fb      	ldrb	r3, [r7, #7]
 8013ec4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8013ec6:	e005      	b.n	8013ed4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8013ece:	7afb      	ldrb	r3, [r7, #11]
 8013ed0:	3b0a      	subs	r3, #10
 8013ed2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8013ed4:	7afb      	ldrb	r3, [r7, #11]
 8013ed6:	2b09      	cmp	r3, #9
 8013ed8:	d8f6      	bhi.n	8013ec8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	b2db      	uxtb	r3, r3
 8013ede:	011b      	lsls	r3, r3, #4
 8013ee0:	b2da      	uxtb	r2, r3
 8013ee2:	7afb      	ldrb	r3, [r7, #11]
 8013ee4:	4313      	orrs	r3, r2
 8013ee6:	b2db      	uxtb	r3, r3
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3714      	adds	r7, #20
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr

08013ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d101      	bne.n	8013f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013f02:	2301      	movs	r3, #1
 8013f04:	e049      	b.n	8013f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d106      	bne.n	8013f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2200      	movs	r2, #0
 8013f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f000 f841 	bl	8013fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2202      	movs	r2, #2
 8013f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	681a      	ldr	r2, [r3, #0]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	3304      	adds	r3, #4
 8013f30:	4619      	mov	r1, r3
 8013f32:	4610      	mov	r0, r2
 8013f34:	f000 f9e0 	bl	80142f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2201      	movs	r2, #1
 8013f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2201      	movs	r2, #1
 8013f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2201      	movs	r2, #1
 8013f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2201      	movs	r2, #1
 8013f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2201      	movs	r2, #1
 8013f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2201      	movs	r2, #1
 8013f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2201      	movs	r2, #1
 8013f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3708      	adds	r7, #8
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}

08013fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8013fa2:	b480      	push	{r7}
 8013fa4:	b083      	sub	sp, #12
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013faa:	bf00      	nop
 8013fac:	370c      	adds	r7, #12
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr
	...

08013fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b085      	sub	sp, #20
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	2b01      	cmp	r3, #1
 8013fca:	d001      	beq.n	8013fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	e04f      	b.n	8014070 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2202      	movs	r2, #2
 8013fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	68da      	ldr	r2, [r3, #12]
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	f042 0201 	orr.w	r2, r2, #1
 8013fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4a23      	ldr	r2, [pc, #140]	@ (801407c <HAL_TIM_Base_Start_IT+0xc4>)
 8013fee:	4293      	cmp	r3, r2
 8013ff0:	d01d      	beq.n	801402e <HAL_TIM_Base_Start_IT+0x76>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ffa:	d018      	beq.n	801402e <HAL_TIM_Base_Start_IT+0x76>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	4a1f      	ldr	r2, [pc, #124]	@ (8014080 <HAL_TIM_Base_Start_IT+0xc8>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d013      	beq.n	801402e <HAL_TIM_Base_Start_IT+0x76>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4a1e      	ldr	r2, [pc, #120]	@ (8014084 <HAL_TIM_Base_Start_IT+0xcc>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d00e      	beq.n	801402e <HAL_TIM_Base_Start_IT+0x76>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	4a1c      	ldr	r2, [pc, #112]	@ (8014088 <HAL_TIM_Base_Start_IT+0xd0>)
 8014016:	4293      	cmp	r3, r2
 8014018:	d009      	beq.n	801402e <HAL_TIM_Base_Start_IT+0x76>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	4a1b      	ldr	r2, [pc, #108]	@ (801408c <HAL_TIM_Base_Start_IT+0xd4>)
 8014020:	4293      	cmp	r3, r2
 8014022:	d004      	beq.n	801402e <HAL_TIM_Base_Start_IT+0x76>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4a19      	ldr	r2, [pc, #100]	@ (8014090 <HAL_TIM_Base_Start_IT+0xd8>)
 801402a:	4293      	cmp	r3, r2
 801402c:	d115      	bne.n	801405a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	689a      	ldr	r2, [r3, #8]
 8014034:	4b17      	ldr	r3, [pc, #92]	@ (8014094 <HAL_TIM_Base_Start_IT+0xdc>)
 8014036:	4013      	ands	r3, r2
 8014038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2b06      	cmp	r3, #6
 801403e:	d015      	beq.n	801406c <HAL_TIM_Base_Start_IT+0xb4>
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014046:	d011      	beq.n	801406c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	f042 0201 	orr.w	r2, r2, #1
 8014056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014058:	e008      	b.n	801406c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	f042 0201 	orr.w	r2, r2, #1
 8014068:	601a      	str	r2, [r3, #0]
 801406a:	e000      	b.n	801406e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801406c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801406e:	2300      	movs	r3, #0
}
 8014070:	4618      	mov	r0, r3
 8014072:	3714      	adds	r7, #20
 8014074:	46bd      	mov	sp, r7
 8014076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407a:	4770      	bx	lr
 801407c:	40012c00 	.word	0x40012c00
 8014080:	40000400 	.word	0x40000400
 8014084:	40000800 	.word	0x40000800
 8014088:	40000c00 	.word	0x40000c00
 801408c:	40013400 	.word	0x40013400
 8014090:	40014000 	.word	0x40014000
 8014094:	00010007 	.word	0x00010007

08014098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	68db      	ldr	r3, [r3, #12]
 80140a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	691b      	ldr	r3, [r3, #16]
 80140ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	f003 0302 	and.w	r3, r3, #2
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d020      	beq.n	80140fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	f003 0302 	and.w	r3, r3, #2
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d01b      	beq.n	80140fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f06f 0202 	mvn.w	r2, #2
 80140cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2201      	movs	r2, #1
 80140d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	699b      	ldr	r3, [r3, #24]
 80140da:	f003 0303 	and.w	r3, r3, #3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d003      	beq.n	80140ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f000 f8e9 	bl	80142ba <HAL_TIM_IC_CaptureCallback>
 80140e8:	e005      	b.n	80140f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 f8db 	bl	80142a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f000 f8ec 	bl	80142ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2200      	movs	r2, #0
 80140fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	f003 0304 	and.w	r3, r3, #4
 8014102:	2b00      	cmp	r3, #0
 8014104:	d020      	beq.n	8014148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	f003 0304 	and.w	r3, r3, #4
 801410c:	2b00      	cmp	r3, #0
 801410e:	d01b      	beq.n	8014148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f06f 0204 	mvn.w	r2, #4
 8014118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2202      	movs	r2, #2
 801411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	699b      	ldr	r3, [r3, #24]
 8014126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801412a:	2b00      	cmp	r3, #0
 801412c:	d003      	beq.n	8014136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 f8c3 	bl	80142ba <HAL_TIM_IC_CaptureCallback>
 8014134:	e005      	b.n	8014142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f000 f8b5 	bl	80142a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f000 f8c6 	bl	80142ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2200      	movs	r2, #0
 8014146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	f003 0308 	and.w	r3, r3, #8
 801414e:	2b00      	cmp	r3, #0
 8014150:	d020      	beq.n	8014194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f003 0308 	and.w	r3, r3, #8
 8014158:	2b00      	cmp	r3, #0
 801415a:	d01b      	beq.n	8014194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	f06f 0208 	mvn.w	r2, #8
 8014164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	2204      	movs	r2, #4
 801416a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	69db      	ldr	r3, [r3, #28]
 8014172:	f003 0303 	and.w	r3, r3, #3
 8014176:	2b00      	cmp	r3, #0
 8014178:	d003      	beq.n	8014182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f000 f89d 	bl	80142ba <HAL_TIM_IC_CaptureCallback>
 8014180:	e005      	b.n	801418e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 f88f 	bl	80142a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f000 f8a0 	bl	80142ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2200      	movs	r2, #0
 8014192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	f003 0310 	and.w	r3, r3, #16
 801419a:	2b00      	cmp	r3, #0
 801419c:	d020      	beq.n	80141e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	f003 0310 	and.w	r3, r3, #16
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d01b      	beq.n	80141e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	f06f 0210 	mvn.w	r2, #16
 80141b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2208      	movs	r2, #8
 80141b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	69db      	ldr	r3, [r3, #28]
 80141be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d003      	beq.n	80141ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f000 f877 	bl	80142ba <HAL_TIM_IC_CaptureCallback>
 80141cc:	e005      	b.n	80141da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f000 f869 	bl	80142a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f000 f87a 	bl	80142ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2200      	movs	r2, #0
 80141de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	f003 0301 	and.w	r3, r3, #1
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d00c      	beq.n	8014204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	f003 0301 	and.w	r3, r3, #1
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d007      	beq.n	8014204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	f06f 0201 	mvn.w	r2, #1
 80141fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7ed fe82 	bl	8001f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801420a:	2b00      	cmp	r3, #0
 801420c:	d104      	bne.n	8014218 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8014214:	2b00      	cmp	r3, #0
 8014216:	d00c      	beq.n	8014232 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801421e:	2b00      	cmp	r3, #0
 8014220:	d007      	beq.n	8014232 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f000 f913 	bl	8014458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014238:	2b00      	cmp	r3, #0
 801423a:	d00c      	beq.n	8014256 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014242:	2b00      	cmp	r3, #0
 8014244:	d007      	beq.n	8014256 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801424e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 f90b 	bl	801446c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801425c:	2b00      	cmp	r3, #0
 801425e:	d00c      	beq.n	801427a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014266:	2b00      	cmp	r3, #0
 8014268:	d007      	beq.n	801427a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8014272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f000 f834 	bl	80142e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	f003 0320 	and.w	r3, r3, #32
 8014280:	2b00      	cmp	r3, #0
 8014282:	d00c      	beq.n	801429e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	f003 0320 	and.w	r3, r3, #32
 801428a:	2b00      	cmp	r3, #0
 801428c:	d007      	beq.n	801429e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	f06f 0220 	mvn.w	r2, #32
 8014296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f000 f8d3 	bl	8014444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801429e:	bf00      	nop
 80142a0:	3710      	adds	r7, #16
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80142a6:	b480      	push	{r7}
 80142a8:	b083      	sub	sp, #12
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80142ae:	bf00      	nop
 80142b0:	370c      	adds	r7, #12
 80142b2:	46bd      	mov	sp, r7
 80142b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b8:	4770      	bx	lr

080142ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80142ba:	b480      	push	{r7}
 80142bc:	b083      	sub	sp, #12
 80142be:	af00      	add	r7, sp, #0
 80142c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80142c2:	bf00      	nop
 80142c4:	370c      	adds	r7, #12
 80142c6:	46bd      	mov	sp, r7
 80142c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142cc:	4770      	bx	lr

080142ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80142ce:	b480      	push	{r7}
 80142d0:	b083      	sub	sp, #12
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80142d6:	bf00      	nop
 80142d8:	370c      	adds	r7, #12
 80142da:	46bd      	mov	sp, r7
 80142dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e0:	4770      	bx	lr

080142e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80142e2:	b480      	push	{r7}
 80142e4:	b083      	sub	sp, #12
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80142ea:	bf00      	nop
 80142ec:	370c      	adds	r7, #12
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr
	...

080142f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80142f8:	b480      	push	{r7}
 80142fa:	b085      	sub	sp, #20
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	4a46      	ldr	r2, [pc, #280]	@ (8014424 <TIM_Base_SetConfig+0x12c>)
 801430c:	4293      	cmp	r3, r2
 801430e:	d013      	beq.n	8014338 <TIM_Base_SetConfig+0x40>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014316:	d00f      	beq.n	8014338 <TIM_Base_SetConfig+0x40>
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	4a43      	ldr	r2, [pc, #268]	@ (8014428 <TIM_Base_SetConfig+0x130>)
 801431c:	4293      	cmp	r3, r2
 801431e:	d00b      	beq.n	8014338 <TIM_Base_SetConfig+0x40>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	4a42      	ldr	r2, [pc, #264]	@ (801442c <TIM_Base_SetConfig+0x134>)
 8014324:	4293      	cmp	r3, r2
 8014326:	d007      	beq.n	8014338 <TIM_Base_SetConfig+0x40>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	4a41      	ldr	r2, [pc, #260]	@ (8014430 <TIM_Base_SetConfig+0x138>)
 801432c:	4293      	cmp	r3, r2
 801432e:	d003      	beq.n	8014338 <TIM_Base_SetConfig+0x40>
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	4a40      	ldr	r2, [pc, #256]	@ (8014434 <TIM_Base_SetConfig+0x13c>)
 8014334:	4293      	cmp	r3, r2
 8014336:	d108      	bne.n	801434a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801433e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	68fa      	ldr	r2, [r7, #12]
 8014346:	4313      	orrs	r3, r2
 8014348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	4a35      	ldr	r2, [pc, #212]	@ (8014424 <TIM_Base_SetConfig+0x12c>)
 801434e:	4293      	cmp	r3, r2
 8014350:	d01f      	beq.n	8014392 <TIM_Base_SetConfig+0x9a>
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014358:	d01b      	beq.n	8014392 <TIM_Base_SetConfig+0x9a>
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	4a32      	ldr	r2, [pc, #200]	@ (8014428 <TIM_Base_SetConfig+0x130>)
 801435e:	4293      	cmp	r3, r2
 8014360:	d017      	beq.n	8014392 <TIM_Base_SetConfig+0x9a>
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	4a31      	ldr	r2, [pc, #196]	@ (801442c <TIM_Base_SetConfig+0x134>)
 8014366:	4293      	cmp	r3, r2
 8014368:	d013      	beq.n	8014392 <TIM_Base_SetConfig+0x9a>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	4a30      	ldr	r2, [pc, #192]	@ (8014430 <TIM_Base_SetConfig+0x138>)
 801436e:	4293      	cmp	r3, r2
 8014370:	d00f      	beq.n	8014392 <TIM_Base_SetConfig+0x9a>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	4a2f      	ldr	r2, [pc, #188]	@ (8014434 <TIM_Base_SetConfig+0x13c>)
 8014376:	4293      	cmp	r3, r2
 8014378:	d00b      	beq.n	8014392 <TIM_Base_SetConfig+0x9a>
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	4a2e      	ldr	r2, [pc, #184]	@ (8014438 <TIM_Base_SetConfig+0x140>)
 801437e:	4293      	cmp	r3, r2
 8014380:	d007      	beq.n	8014392 <TIM_Base_SetConfig+0x9a>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	4a2d      	ldr	r2, [pc, #180]	@ (801443c <TIM_Base_SetConfig+0x144>)
 8014386:	4293      	cmp	r3, r2
 8014388:	d003      	beq.n	8014392 <TIM_Base_SetConfig+0x9a>
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	4a2c      	ldr	r2, [pc, #176]	@ (8014440 <TIM_Base_SetConfig+0x148>)
 801438e:	4293      	cmp	r3, r2
 8014390:	d108      	bne.n	80143a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	68fa      	ldr	r2, [r7, #12]
 80143a0:	4313      	orrs	r3, r2
 80143a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	695b      	ldr	r3, [r3, #20]
 80143ae:	4313      	orrs	r3, r2
 80143b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	68fa      	ldr	r2, [r7, #12]
 80143b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	689a      	ldr	r2, [r3, #8]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	681a      	ldr	r2, [r3, #0]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	4a16      	ldr	r2, [pc, #88]	@ (8014424 <TIM_Base_SetConfig+0x12c>)
 80143cc:	4293      	cmp	r3, r2
 80143ce:	d00f      	beq.n	80143f0 <TIM_Base_SetConfig+0xf8>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	4a18      	ldr	r2, [pc, #96]	@ (8014434 <TIM_Base_SetConfig+0x13c>)
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d00b      	beq.n	80143f0 <TIM_Base_SetConfig+0xf8>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	4a17      	ldr	r2, [pc, #92]	@ (8014438 <TIM_Base_SetConfig+0x140>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d007      	beq.n	80143f0 <TIM_Base_SetConfig+0xf8>
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	4a16      	ldr	r2, [pc, #88]	@ (801443c <TIM_Base_SetConfig+0x144>)
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d003      	beq.n	80143f0 <TIM_Base_SetConfig+0xf8>
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	4a15      	ldr	r2, [pc, #84]	@ (8014440 <TIM_Base_SetConfig+0x148>)
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d103      	bne.n	80143f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	691a      	ldr	r2, [r3, #16]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2201      	movs	r2, #1
 80143fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	691b      	ldr	r3, [r3, #16]
 8014402:	f003 0301 	and.w	r3, r3, #1
 8014406:	2b01      	cmp	r3, #1
 8014408:	d105      	bne.n	8014416 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	691b      	ldr	r3, [r3, #16]
 801440e:	f023 0201 	bic.w	r2, r3, #1
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	611a      	str	r2, [r3, #16]
  }
}
 8014416:	bf00      	nop
 8014418:	3714      	adds	r7, #20
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr
 8014422:	bf00      	nop
 8014424:	40012c00 	.word	0x40012c00
 8014428:	40000400 	.word	0x40000400
 801442c:	40000800 	.word	0x40000800
 8014430:	40000c00 	.word	0x40000c00
 8014434:	40013400 	.word	0x40013400
 8014438:	40014000 	.word	0x40014000
 801443c:	40014400 	.word	0x40014400
 8014440:	40014800 	.word	0x40014800

08014444 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801444c:	bf00      	nop
 801444e:	370c      	adds	r7, #12
 8014450:	46bd      	mov	sp, r7
 8014452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014456:	4770      	bx	lr

08014458 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014458:	b480      	push	{r7}
 801445a:	b083      	sub	sp, #12
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014460:	bf00      	nop
 8014462:	370c      	adds	r7, #12
 8014464:	46bd      	mov	sp, r7
 8014466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446a:	4770      	bx	lr

0801446c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801446c:	b480      	push	{r7}
 801446e:	b083      	sub	sp, #12
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014474:	bf00      	nop
 8014476:	370c      	adds	r7, #12
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b082      	sub	sp, #8
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d101      	bne.n	8014492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801448e:	2301      	movs	r3, #1
 8014490:	e040      	b.n	8014514 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014496:	2b00      	cmp	r3, #0
 8014498:	d106      	bne.n	80144a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2200      	movs	r2, #0
 801449e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7ee f934 	bl	8002710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2224      	movs	r2, #36	@ 0x24
 80144ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	681a      	ldr	r2, [r3, #0]
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f022 0201 	bic.w	r2, r2, #1
 80144bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d002      	beq.n	80144cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f000 fedc 	bl	8015284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f000 fc21 	bl	8014d14 <UART_SetConfig>
 80144d2:	4603      	mov	r3, r0
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d101      	bne.n	80144dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80144d8:	2301      	movs	r3, #1
 80144da:	e01b      	b.n	8014514 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	685a      	ldr	r2, [r3, #4]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80144ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	689a      	ldr	r2, [r3, #8]
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80144fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	681a      	ldr	r2, [r3, #0]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	f042 0201 	orr.w	r2, r2, #1
 801450a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f000 ff5b 	bl	80153c8 <UART_CheckIdleState>
 8014512:	4603      	mov	r3, r0
}
 8014514:	4618      	mov	r0, r3
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}

0801451c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b08a      	sub	sp, #40	@ 0x28
 8014520:	af02      	add	r7, sp, #8
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	603b      	str	r3, [r7, #0]
 8014528:	4613      	mov	r3, r2
 801452a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014530:	2b20      	cmp	r3, #32
 8014532:	d177      	bne.n	8014624 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d002      	beq.n	8014540 <HAL_UART_Transmit+0x24>
 801453a:	88fb      	ldrh	r3, [r7, #6]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d101      	bne.n	8014544 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8014540:	2301      	movs	r3, #1
 8014542:	e070      	b.n	8014626 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	2200      	movs	r2, #0
 8014548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2221      	movs	r2, #33	@ 0x21
 8014550:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014552:	f7fd fabd 	bl	8011ad0 <HAL_GetTick>
 8014556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	88fa      	ldrh	r2, [r7, #6]
 801455c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	88fa      	ldrh	r2, [r7, #6]
 8014564:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	689b      	ldr	r3, [r3, #8]
 801456c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014570:	d108      	bne.n	8014584 <HAL_UART_Transmit+0x68>
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	691b      	ldr	r3, [r3, #16]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d104      	bne.n	8014584 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801457a:	2300      	movs	r3, #0
 801457c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	61bb      	str	r3, [r7, #24]
 8014582:	e003      	b.n	801458c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014588:	2300      	movs	r3, #0
 801458a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801458c:	e02f      	b.n	80145ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	2200      	movs	r2, #0
 8014596:	2180      	movs	r1, #128	@ 0x80
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f000 ffbd 	bl	8015518 <UART_WaitOnFlagUntilTimeout>
 801459e:	4603      	mov	r3, r0
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d004      	beq.n	80145ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	2220      	movs	r2, #32
 80145a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80145aa:	2303      	movs	r3, #3
 80145ac:	e03b      	b.n	8014626 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80145ae:	69fb      	ldr	r3, [r7, #28]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d10b      	bne.n	80145cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	881a      	ldrh	r2, [r3, #0]
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80145c0:	b292      	uxth	r2, r2
 80145c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	3302      	adds	r3, #2
 80145c8:	61bb      	str	r3, [r7, #24]
 80145ca:	e007      	b.n	80145dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80145cc:	69fb      	ldr	r3, [r7, #28]
 80145ce:	781a      	ldrb	r2, [r3, #0]
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80145d6:	69fb      	ldr	r3, [r7, #28]
 80145d8:	3301      	adds	r3, #1
 80145da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	3b01      	subs	r3, #1
 80145e6:	b29a      	uxth	r2, r3
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d1c9      	bne.n	801458e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	9300      	str	r3, [sp, #0]
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	2200      	movs	r2, #0
 8014602:	2140      	movs	r1, #64	@ 0x40
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f000 ff87 	bl	8015518 <UART_WaitOnFlagUntilTimeout>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d004      	beq.n	801461a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2220      	movs	r2, #32
 8014614:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8014616:	2303      	movs	r3, #3
 8014618:	e005      	b.n	8014626 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	2220      	movs	r2, #32
 801461e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8014620:	2300      	movs	r3, #0
 8014622:	e000      	b.n	8014626 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8014624:	2302      	movs	r3, #2
  }
}
 8014626:	4618      	mov	r0, r3
 8014628:	3720      	adds	r7, #32
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
	...

08014630 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b08a      	sub	sp, #40	@ 0x28
 8014634:	af00      	add	r7, sp, #0
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	60b9      	str	r1, [r7, #8]
 801463a:	4613      	mov	r3, r2
 801463c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014644:	2b20      	cmp	r3, #32
 8014646:	d137      	bne.n	80146b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d002      	beq.n	8014654 <HAL_UART_Receive_IT+0x24>
 801464e:	88fb      	ldrh	r3, [r7, #6]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d101      	bne.n	8014658 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014654:	2301      	movs	r3, #1
 8014656:	e030      	b.n	80146ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2200      	movs	r2, #0
 801465c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	4a18      	ldr	r2, [pc, #96]	@ (80146c4 <HAL_UART_Receive_IT+0x94>)
 8014664:	4293      	cmp	r3, r2
 8014666:	d01f      	beq.n	80146a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014672:	2b00      	cmp	r3, #0
 8014674:	d018      	beq.n	80146a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	e853 3f00 	ldrex	r3, [r3]
 8014682:	613b      	str	r3, [r7, #16]
   return(result);
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801468a:	627b      	str	r3, [r7, #36]	@ 0x24
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	461a      	mov	r2, r3
 8014692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014694:	623b      	str	r3, [r7, #32]
 8014696:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014698:	69f9      	ldr	r1, [r7, #28]
 801469a:	6a3a      	ldr	r2, [r7, #32]
 801469c:	e841 2300 	strex	r3, r2, [r1]
 80146a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d1e6      	bne.n	8014676 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80146a8:	88fb      	ldrh	r3, [r7, #6]
 80146aa:	461a      	mov	r2, r3
 80146ac:	68b9      	ldr	r1, [r7, #8]
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f000 ffa0 	bl	80155f4 <UART_Start_Receive_IT>
 80146b4:	4603      	mov	r3, r0
 80146b6:	e000      	b.n	80146ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80146b8:	2302      	movs	r3, #2
  }
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3728      	adds	r7, #40	@ 0x28
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	40008000 	.word	0x40008000

080146c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b0ba      	sub	sp, #232	@ 0xe8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	69db      	ldr	r3, [r3, #28]
 80146d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80146ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80146f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80146f6:	4013      	ands	r3, r2
 80146f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80146fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8014700:	2b00      	cmp	r3, #0
 8014702:	d115      	bne.n	8014730 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8014704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014708:	f003 0320 	and.w	r3, r3, #32
 801470c:	2b00      	cmp	r3, #0
 801470e:	d00f      	beq.n	8014730 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8014710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014714:	f003 0320 	and.w	r3, r3, #32
 8014718:	2b00      	cmp	r3, #0
 801471a:	d009      	beq.n	8014730 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014720:	2b00      	cmp	r3, #0
 8014722:	f000 82ca 	beq.w	8014cba <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	4798      	blx	r3
      }
      return;
 801472e:	e2c4      	b.n	8014cba <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8014730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8014734:	2b00      	cmp	r3, #0
 8014736:	f000 8117 	beq.w	8014968 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801473a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801473e:	f003 0301 	and.w	r3, r3, #1
 8014742:	2b00      	cmp	r3, #0
 8014744:	d106      	bne.n	8014754 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8014746:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801474a:	4b85      	ldr	r3, [pc, #532]	@ (8014960 <HAL_UART_IRQHandler+0x298>)
 801474c:	4013      	ands	r3, r2
 801474e:	2b00      	cmp	r3, #0
 8014750:	f000 810a 	beq.w	8014968 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014758:	f003 0301 	and.w	r3, r3, #1
 801475c:	2b00      	cmp	r3, #0
 801475e:	d011      	beq.n	8014784 <HAL_UART_IRQHandler+0xbc>
 8014760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014768:	2b00      	cmp	r3, #0
 801476a:	d00b      	beq.n	8014784 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2201      	movs	r2, #1
 8014772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801477a:	f043 0201 	orr.w	r2, r3, #1
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014788:	f003 0302 	and.w	r3, r3, #2
 801478c:	2b00      	cmp	r3, #0
 801478e:	d011      	beq.n	80147b4 <HAL_UART_IRQHandler+0xec>
 8014790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014794:	f003 0301 	and.w	r3, r3, #1
 8014798:	2b00      	cmp	r3, #0
 801479a:	d00b      	beq.n	80147b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	2202      	movs	r2, #2
 80147a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80147aa:	f043 0204 	orr.w	r2, r3, #4
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80147b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80147b8:	f003 0304 	and.w	r3, r3, #4
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d011      	beq.n	80147e4 <HAL_UART_IRQHandler+0x11c>
 80147c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80147c4:	f003 0301 	and.w	r3, r3, #1
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d00b      	beq.n	80147e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	2204      	movs	r2, #4
 80147d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80147da:	f043 0202 	orr.w	r2, r3, #2
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80147e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80147e8:	f003 0308 	and.w	r3, r3, #8
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d017      	beq.n	8014820 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80147f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80147f4:	f003 0320 	and.w	r3, r3, #32
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d105      	bne.n	8014808 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80147fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014800:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8014804:	2b00      	cmp	r3, #0
 8014806:	d00b      	beq.n	8014820 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	2208      	movs	r2, #8
 801480e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014816:	f043 0208 	orr.w	r2, r3, #8
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014828:	2b00      	cmp	r3, #0
 801482a:	d012      	beq.n	8014852 <HAL_UART_IRQHandler+0x18a>
 801482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014830:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014834:	2b00      	cmp	r3, #0
 8014836:	d00c      	beq.n	8014852 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014848:	f043 0220 	orr.w	r2, r3, #32
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014858:	2b00      	cmp	r3, #0
 801485a:	f000 8230 	beq.w	8014cbe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801485e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014862:	f003 0320 	and.w	r3, r3, #32
 8014866:	2b00      	cmp	r3, #0
 8014868:	d00d      	beq.n	8014886 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801486a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801486e:	f003 0320 	and.w	r3, r3, #32
 8014872:	2b00      	cmp	r3, #0
 8014874:	d007      	beq.n	8014886 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801487a:	2b00      	cmp	r3, #0
 801487c:	d003      	beq.n	8014886 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801488c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	689b      	ldr	r3, [r3, #8]
 8014896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801489a:	2b40      	cmp	r3, #64	@ 0x40
 801489c:	d005      	beq.n	80148aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801489e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80148a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d04f      	beq.n	801494a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f000 ff68 	bl	8015780 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	689b      	ldr	r3, [r3, #8]
 80148b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80148ba:	2b40      	cmp	r3, #64	@ 0x40
 80148bc:	d141      	bne.n	8014942 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	3308      	adds	r3, #8
 80148c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80148cc:	e853 3f00 	ldrex	r3, [r3]
 80148d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80148d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80148d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80148dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	3308      	adds	r3, #8
 80148e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80148ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80148ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80148f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80148fa:	e841 2300 	strex	r3, r2, [r1]
 80148fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8014902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014906:	2b00      	cmp	r3, #0
 8014908:	d1d9      	bne.n	80148be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801490e:	2b00      	cmp	r3, #0
 8014910:	d013      	beq.n	801493a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014916:	4a13      	ldr	r2, [pc, #76]	@ (8014964 <HAL_UART_IRQHandler+0x29c>)
 8014918:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801491e:	4618      	mov	r0, r3
 8014920:	f7fd fa02 	bl	8011d28 <HAL_DMA_Abort_IT>
 8014924:	4603      	mov	r3, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	d017      	beq.n	801495a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014930:	687a      	ldr	r2, [r7, #4]
 8014932:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8014934:	4610      	mov	r0, r2
 8014936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014938:	e00f      	b.n	801495a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 f9d4 	bl	8014ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014940:	e00b      	b.n	801495a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f000 f9d0 	bl	8014ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014948:	e007      	b.n	801495a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 f9cc 	bl	8014ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2200      	movs	r2, #0
 8014954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8014958:	e1b1      	b.n	8014cbe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801495a:	bf00      	nop
    return;
 801495c:	e1af      	b.n	8014cbe <HAL_UART_IRQHandler+0x5f6>
 801495e:	bf00      	nop
 8014960:	04000120 	.word	0x04000120
 8014964:	08015849 	.word	0x08015849

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801496c:	2b01      	cmp	r3, #1
 801496e:	f040 816a 	bne.w	8014c46 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014976:	f003 0310 	and.w	r3, r3, #16
 801497a:	2b00      	cmp	r3, #0
 801497c:	f000 8163 	beq.w	8014c46 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014984:	f003 0310 	and.w	r3, r3, #16
 8014988:	2b00      	cmp	r3, #0
 801498a:	f000 815c 	beq.w	8014c46 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2210      	movs	r2, #16
 8014994:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	689b      	ldr	r3, [r3, #8]
 801499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80149a0:	2b40      	cmp	r3, #64	@ 0x40
 80149a2:	f040 80d4 	bne.w	8014b4e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80149b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	f000 80ad 	beq.w	8014b16 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80149c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80149c6:	429a      	cmp	r2, r3
 80149c8:	f080 80a5 	bcs.w	8014b16 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80149d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	f003 0320 	and.w	r3, r3, #32
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	f040 8086 	bne.w	8014af4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80149f4:	e853 3f00 	ldrex	r3, [r3]
 80149f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80149fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014a04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8014a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014a16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014a22:	e841 2300 	strex	r3, r2, [r1]
 8014a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8014a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d1da      	bne.n	80149e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	3308      	adds	r3, #8
 8014a38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a3c:	e853 3f00 	ldrex	r3, [r3]
 8014a40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8014a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014a44:	f023 0301 	bic.w	r3, r3, #1
 8014a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	3308      	adds	r3, #8
 8014a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014a56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8014a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8014a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014a62:	e841 2300 	strex	r3, r2, [r1]
 8014a66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d1e1      	bne.n	8014a32 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	3308      	adds	r3, #8
 8014a74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a78:	e853 3f00 	ldrex	r3, [r3]
 8014a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8014a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	3308      	adds	r3, #8
 8014a8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8014a92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014a94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014a98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014a9a:	e841 2300 	strex	r3, r2, [r1]
 8014a9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d1e3      	bne.n	8014a6e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2220      	movs	r2, #32
 8014aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014abc:	e853 3f00 	ldrex	r3, [r3]
 8014ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014ac4:	f023 0310 	bic.w	r3, r3, #16
 8014ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014ad8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014ade:	e841 2300 	strex	r3, r2, [r1]
 8014ae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d1e4      	bne.n	8014ab4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7fd f8dc 	bl	8011cac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2202      	movs	r2, #2
 8014af8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	1ad3      	subs	r3, r2, r3
 8014b0a:	b29b      	uxth	r3, r3
 8014b0c:	4619      	mov	r1, r3
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f000 f8f4 	bl	8014cfc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8014b14:	e0d5      	b.n	8014cc2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8014b1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014b20:	429a      	cmp	r2, r3
 8014b22:	f040 80ce 	bne.w	8014cc2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f003 0320 	and.w	r3, r3, #32
 8014b32:	2b20      	cmp	r3, #32
 8014b34:	f040 80c5 	bne.w	8014cc2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2202      	movs	r2, #2
 8014b3c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8014b44:	4619      	mov	r1, r3
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f000 f8d8 	bl	8014cfc <HAL_UARTEx_RxEventCallback>
      return;
 8014b4c:	e0b9      	b.n	8014cc2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014b5a:	b29b      	uxth	r3, r3
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014b68:	b29b      	uxth	r3, r3
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	f000 80ab 	beq.w	8014cc6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8014b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	f000 80a6 	beq.w	8014cc6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b82:	e853 3f00 	ldrex	r3, [r3]
 8014b86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	461a      	mov	r2, r3
 8014b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8014b9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ba0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ba4:	e841 2300 	strex	r3, r2, [r1]
 8014ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d1e4      	bne.n	8014b7a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	3308      	adds	r3, #8
 8014bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bba:	e853 3f00 	ldrex	r3, [r3]
 8014bbe:	623b      	str	r3, [r7, #32]
   return(result);
 8014bc0:	6a3b      	ldr	r3, [r7, #32]
 8014bc2:	f023 0301 	bic.w	r3, r3, #1
 8014bc6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	3308      	adds	r3, #8
 8014bd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014bd4:	633a      	str	r2, [r7, #48]	@ 0x30
 8014bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014bdc:	e841 2300 	strex	r3, r2, [r1]
 8014be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d1e3      	bne.n	8014bb0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2220      	movs	r2, #32
 8014bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c02:	693b      	ldr	r3, [r7, #16]
 8014c04:	e853 3f00 	ldrex	r3, [r3]
 8014c08:	60fb      	str	r3, [r7, #12]
   return(result);
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	f023 0310 	bic.w	r3, r3, #16
 8014c10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	461a      	mov	r2, r3
 8014c1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014c1e:	61fb      	str	r3, [r7, #28]
 8014c20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c22:	69b9      	ldr	r1, [r7, #24]
 8014c24:	69fa      	ldr	r2, [r7, #28]
 8014c26:	e841 2300 	strex	r3, r2, [r1]
 8014c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d1e4      	bne.n	8014bfc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	2202      	movs	r2, #2
 8014c36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f000 f85c 	bl	8014cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014c44:	e03f      	b.n	8014cc6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d00e      	beq.n	8014c70 <HAL_UART_IRQHandler+0x5a8>
 8014c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d008      	beq.n	8014c70 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8014c66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f000 ffe9 	bl	8015c40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014c6e:	e02d      	b.n	8014ccc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8014c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d00e      	beq.n	8014c9a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8014c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d008      	beq.n	8014c9a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d01c      	beq.n	8014cca <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	4798      	blx	r3
    }
    return;
 8014c98:	e017      	b.n	8014cca <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d012      	beq.n	8014ccc <HAL_UART_IRQHandler+0x604>
 8014ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d00c      	beq.n	8014ccc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f000 fdde 	bl	8015874 <UART_EndTransmit_IT>
    return;
 8014cb8:	e008      	b.n	8014ccc <HAL_UART_IRQHandler+0x604>
      return;
 8014cba:	bf00      	nop
 8014cbc:	e006      	b.n	8014ccc <HAL_UART_IRQHandler+0x604>
    return;
 8014cbe:	bf00      	nop
 8014cc0:	e004      	b.n	8014ccc <HAL_UART_IRQHandler+0x604>
      return;
 8014cc2:	bf00      	nop
 8014cc4:	e002      	b.n	8014ccc <HAL_UART_IRQHandler+0x604>
      return;
 8014cc6:	bf00      	nop
 8014cc8:	e000      	b.n	8014ccc <HAL_UART_IRQHandler+0x604>
    return;
 8014cca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8014ccc:	37e8      	adds	r7, #232	@ 0xe8
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop

08014cd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014cdc:	bf00      	nop
 8014cde:	370c      	adds	r7, #12
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr

08014ce8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b083      	sub	sp, #12
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014cf0:	bf00      	nop
 8014cf2:	370c      	adds	r7, #12
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr

08014cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	460b      	mov	r3, r1
 8014d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014d08:	bf00      	nop
 8014d0a:	370c      	adds	r7, #12
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014d18:	b08a      	sub	sp, #40	@ 0x28
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	689a      	ldr	r2, [r3, #8]
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	691b      	ldr	r3, [r3, #16]
 8014d2c:	431a      	orrs	r2, r3
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	695b      	ldr	r3, [r3, #20]
 8014d32:	431a      	orrs	r2, r3
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	69db      	ldr	r3, [r3, #28]
 8014d38:	4313      	orrs	r3, r2
 8014d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	4ba4      	ldr	r3, [pc, #656]	@ (8014fd4 <UART_SetConfig+0x2c0>)
 8014d44:	4013      	ands	r3, r2
 8014d46:	68fa      	ldr	r2, [r7, #12]
 8014d48:	6812      	ldr	r2, [r2, #0]
 8014d4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d4c:	430b      	orrs	r3, r1
 8014d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	68da      	ldr	r2, [r3, #12]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	430a      	orrs	r2, r1
 8014d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	699b      	ldr	r3, [r3, #24]
 8014d6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	4a99      	ldr	r2, [pc, #612]	@ (8014fd8 <UART_SetConfig+0x2c4>)
 8014d72:	4293      	cmp	r3, r2
 8014d74:	d004      	beq.n	8014d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	6a1b      	ldr	r3, [r3, #32]
 8014d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d7c:	4313      	orrs	r3, r2
 8014d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	689b      	ldr	r3, [r3, #8]
 8014d86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d90:	430a      	orrs	r2, r1
 8014d92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	4a90      	ldr	r2, [pc, #576]	@ (8014fdc <UART_SetConfig+0x2c8>)
 8014d9a:	4293      	cmp	r3, r2
 8014d9c:	d126      	bne.n	8014dec <UART_SetConfig+0xd8>
 8014d9e:	4b90      	ldr	r3, [pc, #576]	@ (8014fe0 <UART_SetConfig+0x2cc>)
 8014da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014da4:	f003 0303 	and.w	r3, r3, #3
 8014da8:	2b03      	cmp	r3, #3
 8014daa:	d81b      	bhi.n	8014de4 <UART_SetConfig+0xd0>
 8014dac:	a201      	add	r2, pc, #4	@ (adr r2, 8014db4 <UART_SetConfig+0xa0>)
 8014dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014db2:	bf00      	nop
 8014db4:	08014dc5 	.word	0x08014dc5
 8014db8:	08014dd5 	.word	0x08014dd5
 8014dbc:	08014dcd 	.word	0x08014dcd
 8014dc0:	08014ddd 	.word	0x08014ddd
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dca:	e116      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014dcc:	2302      	movs	r3, #2
 8014dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dd2:	e112      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014dd4:	2304      	movs	r3, #4
 8014dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dda:	e10e      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014ddc:	2308      	movs	r3, #8
 8014dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014de2:	e10a      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014de4:	2310      	movs	r3, #16
 8014de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dea:	e106      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	4a7c      	ldr	r2, [pc, #496]	@ (8014fe4 <UART_SetConfig+0x2d0>)
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d138      	bne.n	8014e68 <UART_SetConfig+0x154>
 8014df6:	4b7a      	ldr	r3, [pc, #488]	@ (8014fe0 <UART_SetConfig+0x2cc>)
 8014df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014dfc:	f003 030c 	and.w	r3, r3, #12
 8014e00:	2b0c      	cmp	r3, #12
 8014e02:	d82d      	bhi.n	8014e60 <UART_SetConfig+0x14c>
 8014e04:	a201      	add	r2, pc, #4	@ (adr r2, 8014e0c <UART_SetConfig+0xf8>)
 8014e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e0a:	bf00      	nop
 8014e0c:	08014e41 	.word	0x08014e41
 8014e10:	08014e61 	.word	0x08014e61
 8014e14:	08014e61 	.word	0x08014e61
 8014e18:	08014e61 	.word	0x08014e61
 8014e1c:	08014e51 	.word	0x08014e51
 8014e20:	08014e61 	.word	0x08014e61
 8014e24:	08014e61 	.word	0x08014e61
 8014e28:	08014e61 	.word	0x08014e61
 8014e2c:	08014e49 	.word	0x08014e49
 8014e30:	08014e61 	.word	0x08014e61
 8014e34:	08014e61 	.word	0x08014e61
 8014e38:	08014e61 	.word	0x08014e61
 8014e3c:	08014e59 	.word	0x08014e59
 8014e40:	2300      	movs	r3, #0
 8014e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e46:	e0d8      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014e48:	2302      	movs	r3, #2
 8014e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e4e:	e0d4      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014e50:	2304      	movs	r3, #4
 8014e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e56:	e0d0      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014e58:	2308      	movs	r3, #8
 8014e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e5e:	e0cc      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014e60:	2310      	movs	r3, #16
 8014e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e66:	e0c8      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	4a5e      	ldr	r2, [pc, #376]	@ (8014fe8 <UART_SetConfig+0x2d4>)
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d125      	bne.n	8014ebe <UART_SetConfig+0x1aa>
 8014e72:	4b5b      	ldr	r3, [pc, #364]	@ (8014fe0 <UART_SetConfig+0x2cc>)
 8014e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014e7c:	2b30      	cmp	r3, #48	@ 0x30
 8014e7e:	d016      	beq.n	8014eae <UART_SetConfig+0x19a>
 8014e80:	2b30      	cmp	r3, #48	@ 0x30
 8014e82:	d818      	bhi.n	8014eb6 <UART_SetConfig+0x1a2>
 8014e84:	2b20      	cmp	r3, #32
 8014e86:	d00a      	beq.n	8014e9e <UART_SetConfig+0x18a>
 8014e88:	2b20      	cmp	r3, #32
 8014e8a:	d814      	bhi.n	8014eb6 <UART_SetConfig+0x1a2>
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d002      	beq.n	8014e96 <UART_SetConfig+0x182>
 8014e90:	2b10      	cmp	r3, #16
 8014e92:	d008      	beq.n	8014ea6 <UART_SetConfig+0x192>
 8014e94:	e00f      	b.n	8014eb6 <UART_SetConfig+0x1a2>
 8014e96:	2300      	movs	r3, #0
 8014e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e9c:	e0ad      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014e9e:	2302      	movs	r3, #2
 8014ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ea4:	e0a9      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014ea6:	2304      	movs	r3, #4
 8014ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014eac:	e0a5      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014eae:	2308      	movs	r3, #8
 8014eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014eb4:	e0a1      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014eb6:	2310      	movs	r3, #16
 8014eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ebc:	e09d      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8014fec <UART_SetConfig+0x2d8>)
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d125      	bne.n	8014f14 <UART_SetConfig+0x200>
 8014ec8:	4b45      	ldr	r3, [pc, #276]	@ (8014fe0 <UART_SetConfig+0x2cc>)
 8014eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ece:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8014ed4:	d016      	beq.n	8014f04 <UART_SetConfig+0x1f0>
 8014ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8014ed8:	d818      	bhi.n	8014f0c <UART_SetConfig+0x1f8>
 8014eda:	2b80      	cmp	r3, #128	@ 0x80
 8014edc:	d00a      	beq.n	8014ef4 <UART_SetConfig+0x1e0>
 8014ede:	2b80      	cmp	r3, #128	@ 0x80
 8014ee0:	d814      	bhi.n	8014f0c <UART_SetConfig+0x1f8>
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d002      	beq.n	8014eec <UART_SetConfig+0x1d8>
 8014ee6:	2b40      	cmp	r3, #64	@ 0x40
 8014ee8:	d008      	beq.n	8014efc <UART_SetConfig+0x1e8>
 8014eea:	e00f      	b.n	8014f0c <UART_SetConfig+0x1f8>
 8014eec:	2300      	movs	r3, #0
 8014eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ef2:	e082      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014ef4:	2302      	movs	r3, #2
 8014ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014efa:	e07e      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014efc:	2304      	movs	r3, #4
 8014efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f02:	e07a      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014f04:	2308      	movs	r3, #8
 8014f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f0a:	e076      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014f0c:	2310      	movs	r3, #16
 8014f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f12:	e072      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	4a35      	ldr	r2, [pc, #212]	@ (8014ff0 <UART_SetConfig+0x2dc>)
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	d12a      	bne.n	8014f74 <UART_SetConfig+0x260>
 8014f1e:	4b30      	ldr	r3, [pc, #192]	@ (8014fe0 <UART_SetConfig+0x2cc>)
 8014f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014f24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014f28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014f2c:	d01a      	beq.n	8014f64 <UART_SetConfig+0x250>
 8014f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014f32:	d81b      	bhi.n	8014f6c <UART_SetConfig+0x258>
 8014f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f38:	d00c      	beq.n	8014f54 <UART_SetConfig+0x240>
 8014f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f3e:	d815      	bhi.n	8014f6c <UART_SetConfig+0x258>
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d003      	beq.n	8014f4c <UART_SetConfig+0x238>
 8014f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014f48:	d008      	beq.n	8014f5c <UART_SetConfig+0x248>
 8014f4a:	e00f      	b.n	8014f6c <UART_SetConfig+0x258>
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f52:	e052      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014f54:	2302      	movs	r3, #2
 8014f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f5a:	e04e      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014f5c:	2304      	movs	r3, #4
 8014f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f62:	e04a      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014f64:	2308      	movs	r3, #8
 8014f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f6a:	e046      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014f6c:	2310      	movs	r3, #16
 8014f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014f72:	e042      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4a17      	ldr	r2, [pc, #92]	@ (8014fd8 <UART_SetConfig+0x2c4>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d13a      	bne.n	8014ff4 <UART_SetConfig+0x2e0>
 8014f7e:	4b18      	ldr	r3, [pc, #96]	@ (8014fe0 <UART_SetConfig+0x2cc>)
 8014f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8014f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014f8c:	d01a      	beq.n	8014fc4 <UART_SetConfig+0x2b0>
 8014f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014f92:	d81b      	bhi.n	8014fcc <UART_SetConfig+0x2b8>
 8014f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014f98:	d00c      	beq.n	8014fb4 <UART_SetConfig+0x2a0>
 8014f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014f9e:	d815      	bhi.n	8014fcc <UART_SetConfig+0x2b8>
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d003      	beq.n	8014fac <UART_SetConfig+0x298>
 8014fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014fa8:	d008      	beq.n	8014fbc <UART_SetConfig+0x2a8>
 8014faa:	e00f      	b.n	8014fcc <UART_SetConfig+0x2b8>
 8014fac:	2300      	movs	r3, #0
 8014fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fb2:	e022      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014fb4:	2302      	movs	r3, #2
 8014fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fba:	e01e      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014fbc:	2304      	movs	r3, #4
 8014fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fc2:	e01a      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014fc4:	2308      	movs	r3, #8
 8014fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fca:	e016      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014fcc:	2310      	movs	r3, #16
 8014fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014fd2:	e012      	b.n	8014ffa <UART_SetConfig+0x2e6>
 8014fd4:	efff69f3 	.word	0xefff69f3
 8014fd8:	40008000 	.word	0x40008000
 8014fdc:	40013800 	.word	0x40013800
 8014fe0:	40021000 	.word	0x40021000
 8014fe4:	40004400 	.word	0x40004400
 8014fe8:	40004800 	.word	0x40004800
 8014fec:	40004c00 	.word	0x40004c00
 8014ff0:	40005000 	.word	0x40005000
 8014ff4:	2310      	movs	r3, #16
 8014ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	4a9f      	ldr	r2, [pc, #636]	@ (801527c <UART_SetConfig+0x568>)
 8015000:	4293      	cmp	r3, r2
 8015002:	d17a      	bne.n	80150fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015004:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015008:	2b08      	cmp	r3, #8
 801500a:	d824      	bhi.n	8015056 <UART_SetConfig+0x342>
 801500c:	a201      	add	r2, pc, #4	@ (adr r2, 8015014 <UART_SetConfig+0x300>)
 801500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015012:	bf00      	nop
 8015014:	08015039 	.word	0x08015039
 8015018:	08015057 	.word	0x08015057
 801501c:	08015041 	.word	0x08015041
 8015020:	08015057 	.word	0x08015057
 8015024:	08015047 	.word	0x08015047
 8015028:	08015057 	.word	0x08015057
 801502c:	08015057 	.word	0x08015057
 8015030:	08015057 	.word	0x08015057
 8015034:	0801504f 	.word	0x0801504f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015038:	f7fd fe52 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 801503c:	61f8      	str	r0, [r7, #28]
        break;
 801503e:	e010      	b.n	8015062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015040:	4b8f      	ldr	r3, [pc, #572]	@ (8015280 <UART_SetConfig+0x56c>)
 8015042:	61fb      	str	r3, [r7, #28]
        break;
 8015044:	e00d      	b.n	8015062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015046:	f7fd fdb3 	bl	8012bb0 <HAL_RCC_GetSysClockFreq>
 801504a:	61f8      	str	r0, [r7, #28]
        break;
 801504c:	e009      	b.n	8015062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801504e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015052:	61fb      	str	r3, [r7, #28]
        break;
 8015054:	e005      	b.n	8015062 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8015056:	2300      	movs	r3, #0
 8015058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801505a:	2301      	movs	r3, #1
 801505c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015062:	69fb      	ldr	r3, [r7, #28]
 8015064:	2b00      	cmp	r3, #0
 8015066:	f000 80fb 	beq.w	8015260 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	685a      	ldr	r2, [r3, #4]
 801506e:	4613      	mov	r3, r2
 8015070:	005b      	lsls	r3, r3, #1
 8015072:	4413      	add	r3, r2
 8015074:	69fa      	ldr	r2, [r7, #28]
 8015076:	429a      	cmp	r2, r3
 8015078:	d305      	bcc.n	8015086 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015080:	69fa      	ldr	r2, [r7, #28]
 8015082:	429a      	cmp	r2, r3
 8015084:	d903      	bls.n	801508e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8015086:	2301      	movs	r3, #1
 8015088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801508c:	e0e8      	b.n	8015260 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801508e:	69fb      	ldr	r3, [r7, #28]
 8015090:	2200      	movs	r2, #0
 8015092:	461c      	mov	r4, r3
 8015094:	4615      	mov	r5, r2
 8015096:	f04f 0200 	mov.w	r2, #0
 801509a:	f04f 0300 	mov.w	r3, #0
 801509e:	022b      	lsls	r3, r5, #8
 80150a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80150a4:	0222      	lsls	r2, r4, #8
 80150a6:	68f9      	ldr	r1, [r7, #12]
 80150a8:	6849      	ldr	r1, [r1, #4]
 80150aa:	0849      	lsrs	r1, r1, #1
 80150ac:	2000      	movs	r0, #0
 80150ae:	4688      	mov	r8, r1
 80150b0:	4681      	mov	r9, r0
 80150b2:	eb12 0a08 	adds.w	sl, r2, r8
 80150b6:	eb43 0b09 	adc.w	fp, r3, r9
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	2200      	movs	r2, #0
 80150c0:	603b      	str	r3, [r7, #0]
 80150c2:	607a      	str	r2, [r7, #4]
 80150c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150c8:	4650      	mov	r0, sl
 80150ca:	4659      	mov	r1, fp
 80150cc:	f7eb fe3c 	bl	8000d48 <__aeabi_uldivmod>
 80150d0:	4602      	mov	r2, r0
 80150d2:	460b      	mov	r3, r1
 80150d4:	4613      	mov	r3, r2
 80150d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80150d8:	69bb      	ldr	r3, [r7, #24]
 80150da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80150de:	d308      	bcc.n	80150f2 <UART_SetConfig+0x3de>
 80150e0:	69bb      	ldr	r3, [r7, #24]
 80150e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80150e6:	d204      	bcs.n	80150f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	69ba      	ldr	r2, [r7, #24]
 80150ee:	60da      	str	r2, [r3, #12]
 80150f0:	e0b6      	b.n	8015260 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80150f2:	2301      	movs	r3, #1
 80150f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80150f8:	e0b2      	b.n	8015260 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	69db      	ldr	r3, [r3, #28]
 80150fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015102:	d15e      	bne.n	80151c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8015104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015108:	2b08      	cmp	r3, #8
 801510a:	d828      	bhi.n	801515e <UART_SetConfig+0x44a>
 801510c:	a201      	add	r2, pc, #4	@ (adr r2, 8015114 <UART_SetConfig+0x400>)
 801510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015112:	bf00      	nop
 8015114:	08015139 	.word	0x08015139
 8015118:	08015141 	.word	0x08015141
 801511c:	08015149 	.word	0x08015149
 8015120:	0801515f 	.word	0x0801515f
 8015124:	0801514f 	.word	0x0801514f
 8015128:	0801515f 	.word	0x0801515f
 801512c:	0801515f 	.word	0x0801515f
 8015130:	0801515f 	.word	0x0801515f
 8015134:	08015157 	.word	0x08015157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015138:	f7fd fdd2 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 801513c:	61f8      	str	r0, [r7, #28]
        break;
 801513e:	e014      	b.n	801516a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015140:	f7fd fde4 	bl	8012d0c <HAL_RCC_GetPCLK2Freq>
 8015144:	61f8      	str	r0, [r7, #28]
        break;
 8015146:	e010      	b.n	801516a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015148:	4b4d      	ldr	r3, [pc, #308]	@ (8015280 <UART_SetConfig+0x56c>)
 801514a:	61fb      	str	r3, [r7, #28]
        break;
 801514c:	e00d      	b.n	801516a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801514e:	f7fd fd2f 	bl	8012bb0 <HAL_RCC_GetSysClockFreq>
 8015152:	61f8      	str	r0, [r7, #28]
        break;
 8015154:	e009      	b.n	801516a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801515a:	61fb      	str	r3, [r7, #28]
        break;
 801515c:	e005      	b.n	801516a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 801515e:	2300      	movs	r3, #0
 8015160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015162:	2301      	movs	r3, #1
 8015164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801516a:	69fb      	ldr	r3, [r7, #28]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d077      	beq.n	8015260 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015170:	69fb      	ldr	r3, [r7, #28]
 8015172:	005a      	lsls	r2, r3, #1
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	085b      	lsrs	r3, r3, #1
 801517a:	441a      	add	r2, r3
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	fbb2 f3f3 	udiv	r3, r2, r3
 8015184:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015186:	69bb      	ldr	r3, [r7, #24]
 8015188:	2b0f      	cmp	r3, #15
 801518a:	d916      	bls.n	80151ba <UART_SetConfig+0x4a6>
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015192:	d212      	bcs.n	80151ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015194:	69bb      	ldr	r3, [r7, #24]
 8015196:	b29b      	uxth	r3, r3
 8015198:	f023 030f 	bic.w	r3, r3, #15
 801519c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801519e:	69bb      	ldr	r3, [r7, #24]
 80151a0:	085b      	lsrs	r3, r3, #1
 80151a2:	b29b      	uxth	r3, r3
 80151a4:	f003 0307 	and.w	r3, r3, #7
 80151a8:	b29a      	uxth	r2, r3
 80151aa:	8afb      	ldrh	r3, [r7, #22]
 80151ac:	4313      	orrs	r3, r2
 80151ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	8afa      	ldrh	r2, [r7, #22]
 80151b6:	60da      	str	r2, [r3, #12]
 80151b8:	e052      	b.n	8015260 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80151ba:	2301      	movs	r3, #1
 80151bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80151c0:	e04e      	b.n	8015260 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80151c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80151c6:	2b08      	cmp	r3, #8
 80151c8:	d827      	bhi.n	801521a <UART_SetConfig+0x506>
 80151ca:	a201      	add	r2, pc, #4	@ (adr r2, 80151d0 <UART_SetConfig+0x4bc>)
 80151cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151d0:	080151f5 	.word	0x080151f5
 80151d4:	080151fd 	.word	0x080151fd
 80151d8:	08015205 	.word	0x08015205
 80151dc:	0801521b 	.word	0x0801521b
 80151e0:	0801520b 	.word	0x0801520b
 80151e4:	0801521b 	.word	0x0801521b
 80151e8:	0801521b 	.word	0x0801521b
 80151ec:	0801521b 	.word	0x0801521b
 80151f0:	08015213 	.word	0x08015213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80151f4:	f7fd fd74 	bl	8012ce0 <HAL_RCC_GetPCLK1Freq>
 80151f8:	61f8      	str	r0, [r7, #28]
        break;
 80151fa:	e014      	b.n	8015226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80151fc:	f7fd fd86 	bl	8012d0c <HAL_RCC_GetPCLK2Freq>
 8015200:	61f8      	str	r0, [r7, #28]
        break;
 8015202:	e010      	b.n	8015226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015204:	4b1e      	ldr	r3, [pc, #120]	@ (8015280 <UART_SetConfig+0x56c>)
 8015206:	61fb      	str	r3, [r7, #28]
        break;
 8015208:	e00d      	b.n	8015226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801520a:	f7fd fcd1 	bl	8012bb0 <HAL_RCC_GetSysClockFreq>
 801520e:	61f8      	str	r0, [r7, #28]
        break;
 8015210:	e009      	b.n	8015226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015216:	61fb      	str	r3, [r7, #28]
        break;
 8015218:	e005      	b.n	8015226 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 801521a:	2300      	movs	r3, #0
 801521c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801521e:	2301      	movs	r3, #1
 8015220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015224:	bf00      	nop
    }

    if (pclk != 0U)
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d019      	beq.n	8015260 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	085a      	lsrs	r2, r3, #1
 8015232:	69fb      	ldr	r3, [r7, #28]
 8015234:	441a      	add	r2, r3
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	fbb2 f3f3 	udiv	r3, r2, r3
 801523e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015240:	69bb      	ldr	r3, [r7, #24]
 8015242:	2b0f      	cmp	r3, #15
 8015244:	d909      	bls.n	801525a <UART_SetConfig+0x546>
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801524c:	d205      	bcs.n	801525a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	b29a      	uxth	r2, r3
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	60da      	str	r2, [r3, #12]
 8015258:	e002      	b.n	8015260 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801525a:	2301      	movs	r3, #1
 801525c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	2200      	movs	r2, #0
 8015264:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2200      	movs	r2, #0
 801526a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801526c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8015270:	4618      	mov	r0, r3
 8015272:	3728      	adds	r7, #40	@ 0x28
 8015274:	46bd      	mov	sp, r7
 8015276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801527a:	bf00      	nop
 801527c:	40008000 	.word	0x40008000
 8015280:	00f42400 	.word	0x00f42400

08015284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015284:	b480      	push	{r7}
 8015286:	b083      	sub	sp, #12
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015290:	f003 0308 	and.w	r3, r3, #8
 8015294:	2b00      	cmp	r3, #0
 8015296:	d00a      	beq.n	80152ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	685b      	ldr	r3, [r3, #4]
 801529e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	430a      	orrs	r2, r1
 80152ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152b2:	f003 0301 	and.w	r3, r3, #1
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d00a      	beq.n	80152d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	430a      	orrs	r2, r1
 80152ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152d4:	f003 0302 	and.w	r3, r3, #2
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d00a      	beq.n	80152f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	430a      	orrs	r2, r1
 80152f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152f6:	f003 0304 	and.w	r3, r3, #4
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d00a      	beq.n	8015314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	430a      	orrs	r2, r1
 8015312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015318:	f003 0310 	and.w	r3, r3, #16
 801531c:	2b00      	cmp	r3, #0
 801531e:	d00a      	beq.n	8015336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	689b      	ldr	r3, [r3, #8]
 8015326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	430a      	orrs	r2, r1
 8015334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801533a:	f003 0320 	and.w	r3, r3, #32
 801533e:	2b00      	cmp	r3, #0
 8015340:	d00a      	beq.n	8015358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	689b      	ldr	r3, [r3, #8]
 8015348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	430a      	orrs	r2, r1
 8015356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801535c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015360:	2b00      	cmp	r3, #0
 8015362:	d01a      	beq.n	801539a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	430a      	orrs	r2, r1
 8015378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801537e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015382:	d10a      	bne.n	801539a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	685b      	ldr	r3, [r3, #4]
 801538a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	430a      	orrs	r2, r1
 8015398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801539e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d00a      	beq.n	80153bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	430a      	orrs	r2, r1
 80153ba:	605a      	str	r2, [r3, #4]
  }
}
 80153bc:	bf00      	nop
 80153be:	370c      	adds	r7, #12
 80153c0:	46bd      	mov	sp, r7
 80153c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c6:	4770      	bx	lr

080153c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b098      	sub	sp, #96	@ 0x60
 80153cc:	af02      	add	r7, sp, #8
 80153ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80153d8:	f7fc fb7a 	bl	8011ad0 <HAL_GetTick>
 80153dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	f003 0308 	and.w	r3, r3, #8
 80153e8:	2b08      	cmp	r3, #8
 80153ea:	d12e      	bne.n	801544a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80153ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80153f4:	2200      	movs	r2, #0
 80153f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 f88c 	bl	8015518 <UART_WaitOnFlagUntilTimeout>
 8015400:	4603      	mov	r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	d021      	beq.n	801544a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801540c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801540e:	e853 3f00 	ldrex	r3, [r3]
 8015412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801541a:	653b      	str	r3, [r7, #80]	@ 0x50
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	461a      	mov	r2, r3
 8015422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015424:	647b      	str	r3, [r7, #68]	@ 0x44
 8015426:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801542a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801542c:	e841 2300 	strex	r3, r2, [r1]
 8015430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015434:	2b00      	cmp	r3, #0
 8015436:	d1e6      	bne.n	8015406 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2220      	movs	r2, #32
 801543c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2200      	movs	r2, #0
 8015442:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015446:	2303      	movs	r3, #3
 8015448:	e062      	b.n	8015510 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	f003 0304 	and.w	r3, r3, #4
 8015454:	2b04      	cmp	r3, #4
 8015456:	d149      	bne.n	80154ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801545c:	9300      	str	r3, [sp, #0]
 801545e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015460:	2200      	movs	r2, #0
 8015462:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f000 f856 	bl	8015518 <UART_WaitOnFlagUntilTimeout>
 801546c:	4603      	mov	r3, r0
 801546e:	2b00      	cmp	r3, #0
 8015470:	d03c      	beq.n	80154ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801547a:	e853 3f00 	ldrex	r3, [r3]
 801547e:	623b      	str	r3, [r7, #32]
   return(result);
 8015480:	6a3b      	ldr	r3, [r7, #32]
 8015482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	461a      	mov	r2, r3
 801548e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015490:	633b      	str	r3, [r7, #48]	@ 0x30
 8015492:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015498:	e841 2300 	strex	r3, r2, [r1]
 801549c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d1e6      	bne.n	8015472 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	3308      	adds	r3, #8
 80154aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	e853 3f00 	ldrex	r3, [r3]
 80154b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	f023 0301 	bic.w	r3, r3, #1
 80154ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	3308      	adds	r3, #8
 80154c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80154c4:	61fa      	str	r2, [r7, #28]
 80154c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154c8:	69b9      	ldr	r1, [r7, #24]
 80154ca:	69fa      	ldr	r2, [r7, #28]
 80154cc:	e841 2300 	strex	r3, r2, [r1]
 80154d0:	617b      	str	r3, [r7, #20]
   return(result);
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d1e5      	bne.n	80154a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2220      	movs	r2, #32
 80154dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2200      	movs	r2, #0
 80154e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80154e8:	2303      	movs	r3, #3
 80154ea:	e011      	b.n	8015510 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2220      	movs	r2, #32
 80154f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2220      	movs	r2, #32
 80154f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2200      	movs	r2, #0
 80154fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2200      	movs	r2, #0
 8015504:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2200      	movs	r2, #0
 801550a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801550e:	2300      	movs	r3, #0
}
 8015510:	4618      	mov	r0, r3
 8015512:	3758      	adds	r7, #88	@ 0x58
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	603b      	str	r3, [r7, #0]
 8015524:	4613      	mov	r3, r2
 8015526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015528:	e04f      	b.n	80155ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801552a:	69bb      	ldr	r3, [r7, #24]
 801552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015530:	d04b      	beq.n	80155ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015532:	f7fc facd 	bl	8011ad0 <HAL_GetTick>
 8015536:	4602      	mov	r2, r0
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	1ad3      	subs	r3, r2, r3
 801553c:	69ba      	ldr	r2, [r7, #24]
 801553e:	429a      	cmp	r2, r3
 8015540:	d302      	bcc.n	8015548 <UART_WaitOnFlagUntilTimeout+0x30>
 8015542:	69bb      	ldr	r3, [r7, #24]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d101      	bne.n	801554c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015548:	2303      	movs	r3, #3
 801554a:	e04e      	b.n	80155ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	f003 0304 	and.w	r3, r3, #4
 8015556:	2b00      	cmp	r3, #0
 8015558:	d037      	beq.n	80155ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	2b80      	cmp	r3, #128	@ 0x80
 801555e:	d034      	beq.n	80155ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	2b40      	cmp	r3, #64	@ 0x40
 8015564:	d031      	beq.n	80155ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	69db      	ldr	r3, [r3, #28]
 801556c:	f003 0308 	and.w	r3, r3, #8
 8015570:	2b08      	cmp	r3, #8
 8015572:	d110      	bne.n	8015596 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	2208      	movs	r2, #8
 801557a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801557c:	68f8      	ldr	r0, [r7, #12]
 801557e:	f000 f8ff 	bl	8015780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2208      	movs	r2, #8
 8015586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2200      	movs	r2, #0
 801558e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8015592:	2301      	movs	r3, #1
 8015594:	e029      	b.n	80155ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	69db      	ldr	r3, [r3, #28]
 801559c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80155a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80155a4:	d111      	bne.n	80155ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80155ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f000 f8e5 	bl	8015780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	2220      	movs	r2, #32
 80155ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2200      	movs	r2, #0
 80155c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80155c6:	2303      	movs	r3, #3
 80155c8:	e00f      	b.n	80155ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	69da      	ldr	r2, [r3, #28]
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	4013      	ands	r3, r2
 80155d4:	68ba      	ldr	r2, [r7, #8]
 80155d6:	429a      	cmp	r2, r3
 80155d8:	bf0c      	ite	eq
 80155da:	2301      	moveq	r3, #1
 80155dc:	2300      	movne	r3, #0
 80155de:	b2db      	uxtb	r3, r3
 80155e0:	461a      	mov	r2, r3
 80155e2:	79fb      	ldrb	r3, [r7, #7]
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d0a0      	beq.n	801552a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80155e8:	2300      	movs	r3, #0
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3710      	adds	r7, #16
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}
	...

080155f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80155f4:	b480      	push	{r7}
 80155f6:	b097      	sub	sp, #92	@ 0x5c
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	4613      	mov	r3, r2
 8015600:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	68ba      	ldr	r2, [r7, #8]
 8015606:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	88fa      	ldrh	r2, [r7, #6]
 801560c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	88fa      	ldrh	r2, [r7, #6]
 8015614:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2200      	movs	r2, #0
 801561c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	689b      	ldr	r3, [r3, #8]
 8015622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015626:	d10e      	bne.n	8015646 <UART_Start_Receive_IT+0x52>
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	691b      	ldr	r3, [r3, #16]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d105      	bne.n	801563c <UART_Start_Receive_IT+0x48>
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015636:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801563a:	e02d      	b.n	8015698 <UART_Start_Receive_IT+0xa4>
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	22ff      	movs	r2, #255	@ 0xff
 8015640:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015644:	e028      	b.n	8015698 <UART_Start_Receive_IT+0xa4>
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	689b      	ldr	r3, [r3, #8]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d10d      	bne.n	801566a <UART_Start_Receive_IT+0x76>
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	691b      	ldr	r3, [r3, #16]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d104      	bne.n	8015660 <UART_Start_Receive_IT+0x6c>
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	22ff      	movs	r2, #255	@ 0xff
 801565a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801565e:	e01b      	b.n	8015698 <UART_Start_Receive_IT+0xa4>
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	227f      	movs	r2, #127	@ 0x7f
 8015664:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015668:	e016      	b.n	8015698 <UART_Start_Receive_IT+0xa4>
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	689b      	ldr	r3, [r3, #8]
 801566e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015672:	d10d      	bne.n	8015690 <UART_Start_Receive_IT+0x9c>
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	691b      	ldr	r3, [r3, #16]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d104      	bne.n	8015686 <UART_Start_Receive_IT+0x92>
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	227f      	movs	r2, #127	@ 0x7f
 8015680:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015684:	e008      	b.n	8015698 <UART_Start_Receive_IT+0xa4>
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	223f      	movs	r2, #63	@ 0x3f
 801568a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801568e:	e003      	b.n	8015698 <UART_Start_Receive_IT+0xa4>
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	2200      	movs	r2, #0
 8015694:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2200      	movs	r2, #0
 801569c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2222      	movs	r2, #34	@ 0x22
 80156a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	3308      	adds	r3, #8
 80156ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156b2:	e853 3f00 	ldrex	r3, [r3]
 80156b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80156b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ba:	f043 0301 	orr.w	r3, r3, #1
 80156be:	657b      	str	r3, [r7, #84]	@ 0x54
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	3308      	adds	r3, #8
 80156c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80156c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80156ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80156ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80156d0:	e841 2300 	strex	r3, r2, [r1]
 80156d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80156d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d1e5      	bne.n	80156a8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80156e4:	d107      	bne.n	80156f6 <UART_Start_Receive_IT+0x102>
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	691b      	ldr	r3, [r3, #16]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d103      	bne.n	80156f6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	4a21      	ldr	r2, [pc, #132]	@ (8015778 <UART_Start_Receive_IT+0x184>)
 80156f2:	669a      	str	r2, [r3, #104]	@ 0x68
 80156f4:	e002      	b.n	80156fc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	4a20      	ldr	r2, [pc, #128]	@ (801577c <UART_Start_Receive_IT+0x188>)
 80156fa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	691b      	ldr	r3, [r3, #16]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d019      	beq.n	8015738 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801570c:	e853 3f00 	ldrex	r3, [r3]
 8015710:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015714:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8015718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	461a      	mov	r2, r3
 8015720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015722:	637b      	str	r3, [r7, #52]	@ 0x34
 8015724:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015726:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015728:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801572a:	e841 2300 	strex	r3, r2, [r1]
 801572e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8015730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015732:	2b00      	cmp	r3, #0
 8015734:	d1e6      	bne.n	8015704 <UART_Start_Receive_IT+0x110>
 8015736:	e018      	b.n	801576a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	e853 3f00 	ldrex	r3, [r3]
 8015744:	613b      	str	r3, [r7, #16]
   return(result);
 8015746:	693b      	ldr	r3, [r7, #16]
 8015748:	f043 0320 	orr.w	r3, r3, #32
 801574c:	653b      	str	r3, [r7, #80]	@ 0x50
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	461a      	mov	r2, r3
 8015754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015756:	623b      	str	r3, [r7, #32]
 8015758:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801575a:	69f9      	ldr	r1, [r7, #28]
 801575c:	6a3a      	ldr	r2, [r7, #32]
 801575e:	e841 2300 	strex	r3, r2, [r1]
 8015762:	61bb      	str	r3, [r7, #24]
   return(result);
 8015764:	69bb      	ldr	r3, [r7, #24]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d1e6      	bne.n	8015738 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801576a:	2300      	movs	r3, #0
}
 801576c:	4618      	mov	r0, r3
 801576e:	375c      	adds	r7, #92	@ 0x5c
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr
 8015778:	08015a85 	.word	0x08015a85
 801577c:	080158c9 	.word	0x080158c9

08015780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015780:	b480      	push	{r7}
 8015782:	b095      	sub	sp, #84	@ 0x54
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801578e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015790:	e853 3f00 	ldrex	r3, [r3]
 8015794:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801579c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	461a      	mov	r2, r3
 80157a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80157a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80157ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80157ae:	e841 2300 	strex	r3, r2, [r1]
 80157b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80157b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d1e6      	bne.n	8015788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	3308      	adds	r3, #8
 80157c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157c2:	6a3b      	ldr	r3, [r7, #32]
 80157c4:	e853 3f00 	ldrex	r3, [r3]
 80157c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80157ca:	69fb      	ldr	r3, [r7, #28]
 80157cc:	f023 0301 	bic.w	r3, r3, #1
 80157d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	3308      	adds	r3, #8
 80157d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80157da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80157dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80157e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157e2:	e841 2300 	strex	r3, r2, [r1]
 80157e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80157e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d1e5      	bne.n	80157ba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	d118      	bne.n	8015828 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	e853 3f00 	ldrex	r3, [r3]
 8015802:	60bb      	str	r3, [r7, #8]
   return(result);
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	f023 0310 	bic.w	r3, r3, #16
 801580a:	647b      	str	r3, [r7, #68]	@ 0x44
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	461a      	mov	r2, r3
 8015812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015814:	61bb      	str	r3, [r7, #24]
 8015816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015818:	6979      	ldr	r1, [r7, #20]
 801581a:	69ba      	ldr	r2, [r7, #24]
 801581c:	e841 2300 	strex	r3, r2, [r1]
 8015820:	613b      	str	r3, [r7, #16]
   return(result);
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d1e6      	bne.n	80157f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	2220      	movs	r2, #32
 801582c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2200      	movs	r2, #0
 8015834:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2200      	movs	r2, #0
 801583a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801583c:	bf00      	nop
 801583e:	3754      	adds	r7, #84	@ 0x54
 8015840:	46bd      	mov	sp, r7
 8015842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015846:	4770      	bx	lr

08015848 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b084      	sub	sp, #16
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	2200      	movs	r2, #0
 801585a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	2200      	movs	r2, #0
 8015862:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015866:	68f8      	ldr	r0, [r7, #12]
 8015868:	f7ff fa3e 	bl	8014ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801586c:	bf00      	nop
 801586e:	3710      	adds	r7, #16
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b088      	sub	sp, #32
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	e853 3f00 	ldrex	r3, [r3]
 8015888:	60bb      	str	r3, [r7, #8]
   return(result);
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015890:	61fb      	str	r3, [r7, #28]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	461a      	mov	r2, r3
 8015898:	69fb      	ldr	r3, [r7, #28]
 801589a:	61bb      	str	r3, [r7, #24]
 801589c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801589e:	6979      	ldr	r1, [r7, #20]
 80158a0:	69ba      	ldr	r2, [r7, #24]
 80158a2:	e841 2300 	strex	r3, r2, [r1]
 80158a6:	613b      	str	r3, [r7, #16]
   return(result);
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d1e6      	bne.n	801587c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2220      	movs	r2, #32
 80158b2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	2200      	movs	r2, #0
 80158b8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f7ff fa0a 	bl	8014cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80158c0:	bf00      	nop
 80158c2:	3720      	adds	r7, #32
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}

080158c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b09c      	sub	sp, #112	@ 0x70
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80158d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80158e0:	2b22      	cmp	r3, #34	@ 0x22
 80158e2:	f040 80be 	bne.w	8015a62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80158ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80158f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80158f4:	b2d9      	uxtb	r1, r3
 80158f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80158fa:	b2da      	uxtb	r2, r3
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015900:	400a      	ands	r2, r1
 8015902:	b2d2      	uxtb	r2, r2
 8015904:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801590a:	1c5a      	adds	r2, r3, #1
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015916:	b29b      	uxth	r3, r3
 8015918:	3b01      	subs	r3, #1
 801591a:	b29a      	uxth	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015928:	b29b      	uxth	r3, r3
 801592a:	2b00      	cmp	r3, #0
 801592c:	f040 80a3 	bne.w	8015a76 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015938:	e853 3f00 	ldrex	r3, [r3]
 801593c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801593e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	461a      	mov	r2, r3
 801594c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801594e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015950:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015952:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015954:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015956:	e841 2300 	strex	r3, r2, [r1]
 801595a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801595c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801595e:	2b00      	cmp	r3, #0
 8015960:	d1e6      	bne.n	8015930 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	3308      	adds	r3, #8
 8015968:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801596a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801596c:	e853 3f00 	ldrex	r3, [r3]
 8015970:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015974:	f023 0301 	bic.w	r3, r3, #1
 8015978:	667b      	str	r3, [r7, #100]	@ 0x64
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	3308      	adds	r3, #8
 8015980:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015982:	647a      	str	r2, [r7, #68]	@ 0x44
 8015984:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015986:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015988:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801598a:	e841 2300 	strex	r3, r2, [r1]
 801598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015992:	2b00      	cmp	r3, #0
 8015994:	d1e5      	bne.n	8015962 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2220      	movs	r2, #32
 801599a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	2200      	movs	r2, #0
 80159a2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2200      	movs	r2, #0
 80159a8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	4a34      	ldr	r2, [pc, #208]	@ (8015a80 <UART_RxISR_8BIT+0x1b8>)
 80159b0:	4293      	cmp	r3, r2
 80159b2:	d01f      	beq.n	80159f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	685b      	ldr	r3, [r3, #4]
 80159ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d018      	beq.n	80159f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ca:	e853 3f00 	ldrex	r3, [r3]
 80159ce:	623b      	str	r3, [r7, #32]
   return(result);
 80159d0:	6a3b      	ldr	r3, [r7, #32]
 80159d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80159d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	461a      	mov	r2, r3
 80159de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80159e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80159e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80159e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80159e8:	e841 2300 	strex	r3, r2, [r1]
 80159ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80159ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d1e6      	bne.n	80159c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d12e      	bne.n	8015a5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	2200      	movs	r2, #0
 8015a00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	e853 3f00 	ldrex	r3, [r3]
 8015a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	f023 0310 	bic.w	r3, r3, #16
 8015a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015a20:	61fb      	str	r3, [r7, #28]
 8015a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a24:	69b9      	ldr	r1, [r7, #24]
 8015a26:	69fa      	ldr	r2, [r7, #28]
 8015a28:	e841 2300 	strex	r3, r2, [r1]
 8015a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8015a2e:	697b      	ldr	r3, [r7, #20]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d1e6      	bne.n	8015a02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	69db      	ldr	r3, [r3, #28]
 8015a3a:	f003 0310 	and.w	r3, r3, #16
 8015a3e:	2b10      	cmp	r3, #16
 8015a40:	d103      	bne.n	8015a4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	2210      	movs	r2, #16
 8015a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015a50:	4619      	mov	r1, r3
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f7ff f952 	bl	8014cfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015a58:	e00d      	b.n	8015a76 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8015a5a:	6878      	ldr	r0, [r7, #4]
 8015a5c:	f7ec fb70 	bl	8002140 <HAL_UART_RxCpltCallback>
}
 8015a60:	e009      	b.n	8015a76 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	8b1b      	ldrh	r3, [r3, #24]
 8015a68:	b29a      	uxth	r2, r3
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	f042 0208 	orr.w	r2, r2, #8
 8015a72:	b292      	uxth	r2, r2
 8015a74:	831a      	strh	r2, [r3, #24]
}
 8015a76:	bf00      	nop
 8015a78:	3770      	adds	r7, #112	@ 0x70
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	40008000 	.word	0x40008000

08015a84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b09c      	sub	sp, #112	@ 0x70
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015a92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015a9c:	2b22      	cmp	r3, #34	@ 0x22
 8015a9e:	f040 80be 	bne.w	8015c1e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015aa8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015ab2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8015ab6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8015aba:	4013      	ands	r3, r2
 8015abc:	b29a      	uxth	r2, r3
 8015abe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015ac0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ac6:	1c9a      	adds	r2, r3, #2
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015ad2:	b29b      	uxth	r3, r3
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	b29a      	uxth	r2, r3
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015ae4:	b29b      	uxth	r3, r3
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	f040 80a3 	bne.w	8015c32 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015af4:	e853 3f00 	ldrex	r3, [r3]
 8015af8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8015afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015b00:	667b      	str	r3, [r7, #100]	@ 0x64
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	461a      	mov	r2, r3
 8015b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015b0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8015b0c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015b10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015b12:	e841 2300 	strex	r3, r2, [r1]
 8015b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8015b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d1e6      	bne.n	8015aec <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	3308      	adds	r3, #8
 8015b24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b28:	e853 3f00 	ldrex	r3, [r3]
 8015b2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b30:	f023 0301 	bic.w	r3, r3, #1
 8015b34:	663b      	str	r3, [r7, #96]	@ 0x60
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	3308      	adds	r3, #8
 8015b3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015b3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8015b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015b44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015b46:	e841 2300 	strex	r3, r2, [r1]
 8015b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d1e5      	bne.n	8015b1e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2220      	movs	r2, #32
 8015b56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2200      	movs	r2, #0
 8015b64:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	4a34      	ldr	r2, [pc, #208]	@ (8015c3c <UART_RxISR_16BIT+0x1b8>)
 8015b6c:	4293      	cmp	r3, r2
 8015b6e:	d01f      	beq.n	8015bb0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	685b      	ldr	r3, [r3, #4]
 8015b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d018      	beq.n	8015bb0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b84:	6a3b      	ldr	r3, [r7, #32]
 8015b86:	e853 3f00 	ldrex	r3, [r3]
 8015b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8015b8c:	69fb      	ldr	r3, [r7, #28]
 8015b8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8015b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	461a      	mov	r2, r3
 8015b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015b9e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ba4:	e841 2300 	strex	r3, r2, [r1]
 8015ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d1e6      	bne.n	8015b7e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d12e      	bne.n	8015c16 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2200      	movs	r2, #0
 8015bbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	e853 3f00 	ldrex	r3, [r3]
 8015bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	f023 0310 	bic.w	r3, r3, #16
 8015bd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	461a      	mov	r2, r3
 8015bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015bdc:	61bb      	str	r3, [r7, #24]
 8015bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015be0:	6979      	ldr	r1, [r7, #20]
 8015be2:	69ba      	ldr	r2, [r7, #24]
 8015be4:	e841 2300 	strex	r3, r2, [r1]
 8015be8:	613b      	str	r3, [r7, #16]
   return(result);
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1e6      	bne.n	8015bbe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	69db      	ldr	r3, [r3, #28]
 8015bf6:	f003 0310 	and.w	r3, r3, #16
 8015bfa:	2b10      	cmp	r3, #16
 8015bfc:	d103      	bne.n	8015c06 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	2210      	movs	r2, #16
 8015c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015c0c:	4619      	mov	r1, r3
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f7ff f874 	bl	8014cfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015c14:	e00d      	b.n	8015c32 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f7ec fa92 	bl	8002140 <HAL_UART_RxCpltCallback>
}
 8015c1c:	e009      	b.n	8015c32 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	8b1b      	ldrh	r3, [r3, #24]
 8015c24:	b29a      	uxth	r2, r3
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	f042 0208 	orr.w	r2, r2, #8
 8015c2e:	b292      	uxth	r2, r2
 8015c30:	831a      	strh	r2, [r3, #24]
}
 8015c32:	bf00      	nop
 8015c34:	3770      	adds	r7, #112	@ 0x70
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	40008000 	.word	0x40008000

08015c40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015c40:	b480      	push	{r7}
 8015c42:	b083      	sub	sp, #12
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015c48:	bf00      	nop
 8015c4a:	370c      	adds	r7, #12
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr

08015c54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b085      	sub	sp, #20
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c66:	2b84      	cmp	r3, #132	@ 0x84
 8015c68:	d005      	beq.n	8015c76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8015c6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	4413      	add	r3, r2
 8015c72:	3303      	adds	r3, #3
 8015c74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015c76:	68fb      	ldr	r3, [r7, #12]
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3714      	adds	r7, #20
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c82:	4770      	bx	lr

08015c84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015c88:	f000 fe4e 	bl	8016928 <vTaskStartScheduler>
  
  return osOK;
 8015c8c:	2300      	movs	r3, #0
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	bd80      	pop	{r7, pc}

08015c92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8015c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c94:	b089      	sub	sp, #36	@ 0x24
 8015c96:	af04      	add	r7, sp, #16
 8015c98:	6078      	str	r0, [r7, #4]
 8015c9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	695b      	ldr	r3, [r3, #20]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d020      	beq.n	8015ce6 <osThreadCreate+0x54>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	699b      	ldr	r3, [r3, #24]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d01c      	beq.n	8015ce6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	685c      	ldr	r4, [r3, #4]
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	691e      	ldr	r6, [r3, #16]
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7ff ffc8 	bl	8015c54 <makeFreeRtosPriority>
 8015cc4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	695b      	ldr	r3, [r3, #20]
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015cce:	9202      	str	r2, [sp, #8]
 8015cd0:	9301      	str	r3, [sp, #4]
 8015cd2:	9100      	str	r1, [sp, #0]
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	4632      	mov	r2, r6
 8015cd8:	4629      	mov	r1, r5
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f000 fc3f 	bl	801655e <xTaskCreateStatic>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	60fb      	str	r3, [r7, #12]
 8015ce4:	e01c      	b.n	8015d20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	685c      	ldr	r4, [r3, #4]
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015cf2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7ff ffaa 	bl	8015c54 <makeFreeRtosPriority>
 8015d00:	4602      	mov	r2, r0
 8015d02:	f107 030c 	add.w	r3, r7, #12
 8015d06:	9301      	str	r3, [sp, #4]
 8015d08:	9200      	str	r2, [sp, #0]
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	4632      	mov	r2, r6
 8015d0e:	4629      	mov	r1, r5
 8015d10:	4620      	mov	r0, r4
 8015d12:	f000 fc84 	bl	801661e <xTaskCreate>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b01      	cmp	r3, #1
 8015d1a:	d001      	beq.n	8015d20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	e000      	b.n	8015d22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015d20:	68fb      	ldr	r3, [r7, #12]
}
 8015d22:	4618      	mov	r0, r3
 8015d24:	3714      	adds	r7, #20
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015d2a:	b580      	push	{r7, lr}
 8015d2c:	b084      	sub	sp, #16
 8015d2e:	af00      	add	r7, sp, #0
 8015d30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d001      	beq.n	8015d40 <osDelay+0x16>
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	e000      	b.n	8015d42 <osDelay+0x18>
 8015d40:	2301      	movs	r3, #1
 8015d42:	4618      	mov	r0, r3
 8015d44:	f000 fdba 	bl	80168bc <vTaskDelay>
  
  return osOK;
 8015d48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3710      	adds	r7, #16
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}

08015d52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015d52:	b480      	push	{r7}
 8015d54:	b083      	sub	sp, #12
 8015d56:	af00      	add	r7, sp, #0
 8015d58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f103 0208 	add.w	r2, r3, #8
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f04f 32ff 	mov.w	r2, #4294967295
 8015d6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f103 0208 	add.w	r2, r3, #8
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f103 0208 	add.w	r2, r3, #8
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2200      	movs	r2, #0
 8015d84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015d86:	bf00      	nop
 8015d88:	370c      	adds	r7, #12
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d90:	4770      	bx	lr

08015d92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015d92:	b480      	push	{r7}
 8015d94:	b083      	sub	sp, #12
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015da0:	bf00      	nop
 8015da2:	370c      	adds	r7, #12
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr

08015dac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015dac:	b480      	push	{r7}
 8015dae:	b085      	sub	sp, #20
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	685b      	ldr	r3, [r3, #4]
 8015dba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	68fa      	ldr	r2, [r7, #12]
 8015dc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	689a      	ldr	r2, [r3, #8]
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	689b      	ldr	r3, [r3, #8]
 8015dce:	683a      	ldr	r2, [r7, #0]
 8015dd0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	683a      	ldr	r2, [r7, #0]
 8015dd6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	687a      	ldr	r2, [r7, #4]
 8015ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	1c5a      	adds	r2, r3, #1
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	601a      	str	r2, [r3, #0]
}
 8015de8:	bf00      	nop
 8015dea:	3714      	adds	r7, #20
 8015dec:	46bd      	mov	sp, r7
 8015dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df2:	4770      	bx	lr

08015df4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015df4:	b480      	push	{r7}
 8015df6:	b085      	sub	sp, #20
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015e04:	68bb      	ldr	r3, [r7, #8]
 8015e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e0a:	d103      	bne.n	8015e14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	691b      	ldr	r3, [r3, #16]
 8015e10:	60fb      	str	r3, [r7, #12]
 8015e12:	e00c      	b.n	8015e2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	3308      	adds	r3, #8
 8015e18:	60fb      	str	r3, [r7, #12]
 8015e1a:	e002      	b.n	8015e22 <vListInsert+0x2e>
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	685b      	ldr	r3, [r3, #4]
 8015e20:	60fb      	str	r3, [r7, #12]
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	68ba      	ldr	r2, [r7, #8]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d2f6      	bcs.n	8015e1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	685a      	ldr	r2, [r3, #4]
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015e36:	683b      	ldr	r3, [r7, #0]
 8015e38:	685b      	ldr	r3, [r3, #4]
 8015e3a:	683a      	ldr	r2, [r7, #0]
 8015e3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	68fa      	ldr	r2, [r7, #12]
 8015e42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	683a      	ldr	r2, [r7, #0]
 8015e48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	687a      	ldr	r2, [r7, #4]
 8015e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	1c5a      	adds	r2, r3, #1
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	601a      	str	r2, [r3, #0]
}
 8015e5a:	bf00      	nop
 8015e5c:	3714      	adds	r7, #20
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e64:	4770      	bx	lr

08015e66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015e66:	b480      	push	{r7}
 8015e68:	b085      	sub	sp, #20
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	691b      	ldr	r3, [r3, #16]
 8015e72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	685b      	ldr	r3, [r3, #4]
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	6892      	ldr	r2, [r2, #8]
 8015e7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	689b      	ldr	r3, [r3, #8]
 8015e82:	687a      	ldr	r2, [r7, #4]
 8015e84:	6852      	ldr	r2, [r2, #4]
 8015e86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d103      	bne.n	8015e9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	689a      	ldr	r2, [r3, #8]
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	1e5a      	subs	r2, r3, #1
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	681b      	ldr	r3, [r3, #0]
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3714      	adds	r7, #20
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb8:	4770      	bx	lr

08015eba <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8015eba:	b580      	push	{r7, lr}
 8015ebc:	b08c      	sub	sp, #48	@ 0x30
 8015ebe:	af02      	add	r7, sp, #8
 8015ec0:	60f8      	str	r0, [r7, #12]
 8015ec2:	60b9      	str	r1, [r7, #8]
 8015ec4:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2b01      	cmp	r3, #1
 8015eca:	d111      	bne.n	8015ef0 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8015ecc:	2301      	movs	r3, #1
 8015ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2b04      	cmp	r3, #4
 8015ed6:	d81d      	bhi.n	8015f14 <xStreamBufferGenericCreate+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015edc:	f383 8811 	msr	BASEPRI, r3
 8015ee0:	f3bf 8f6f 	isb	sy
 8015ee4:	f3bf 8f4f 	dsb	sy
 8015ee8:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015eea:	bf00      	nop
 8015eec:	bf00      	nop
 8015eee:	e7fd      	b.n	8015eec <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10b      	bne.n	8015f14 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8015efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f00:	f383 8811 	msr	BASEPRI, r3
 8015f04:	f3bf 8f6f 	isb	sy
 8015f08:	f3bf 8f4f 	dsb	sy
 8015f0c:	61bb      	str	r3, [r7, #24]
}
 8015f0e:	bf00      	nop
 8015f10:	bf00      	nop
 8015f12:	e7fd      	b.n	8015f10 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8015f14:	68ba      	ldr	r2, [r7, #8]
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d90b      	bls.n	8015f34 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8015f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f20:	f383 8811 	msr	BASEPRI, r3
 8015f24:	f3bf 8f6f 	isb	sy
 8015f28:	f3bf 8f4f 	dsb	sy
 8015f2c:	617b      	str	r3, [r7, #20]
}
 8015f2e:	bf00      	nop
 8015f30:	bf00      	nop
 8015f32:	e7fd      	b.n	8015f30 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d101      	bne.n	8015f3e <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	3301      	adds	r3, #1
 8015f42:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	3320      	adds	r3, #32
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f001 fcf7 	bl	801793c <pvPortMalloc>
 8015f4e:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8015f50:	6a3b      	ldr	r3, [r7, #32]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d00a      	beq.n	8015f6c <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8015f56:	6a3b      	ldr	r3, [r7, #32]
 8015f58:	f103 0120 	add.w	r1, r3, #32
 8015f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f60:	9300      	str	r3, [sp, #0]
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	68fa      	ldr	r2, [r7, #12]
 8015f66:	6a38      	ldr	r0, [r7, #32]
 8015f68:	f000 fac5 	bl	80164f6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8015f6c:	6a3b      	ldr	r3, [r7, #32]
	}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3728      	adds	r7, #40	@ 0x28
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}

08015f76 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8015f76:	b480      	push	{r7}
 8015f78:	b087      	sub	sp, #28
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8015f82:	693b      	ldr	r3, [r7, #16]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d10b      	bne.n	8015fa0 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8015f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f8c:	f383 8811 	msr	BASEPRI, r3
 8015f90:	f3bf 8f6f 	isb	sy
 8015f94:	f3bf 8f4f 	dsb	sy
 8015f98:	60fb      	str	r3, [r7, #12]
}
 8015f9a:	bf00      	nop
 8015f9c:	bf00      	nop
 8015f9e:	e7fd      	b.n	8015f9c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	689a      	ldr	r2, [r3, #8]
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	4413      	add	r3, r2
 8015faa:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	685b      	ldr	r3, [r3, #4]
 8015fb0:	697a      	ldr	r2, [r7, #20]
 8015fb2:	1ad3      	subs	r3, r2, r3
 8015fb4:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	3b01      	subs	r3, #1
 8015fba:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	697a      	ldr	r2, [r7, #20]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d304      	bcc.n	8015fd0 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8015fc6:	693b      	ldr	r3, [r7, #16]
 8015fc8:	689b      	ldr	r3, [r3, #8]
 8015fca:	697a      	ldr	r2, [r7, #20]
 8015fcc:	1ad3      	subs	r3, r2, r3
 8015fce:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8015fd0:	697b      	ldr	r3, [r7, #20]
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	371c      	adds	r7, #28
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fdc:	4770      	bx	lr

08015fde <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015fde:	b580      	push	{r7, lr}
 8015fe0:	b090      	sub	sp, #64	@ 0x40
 8015fe2:	af02      	add	r7, sp, #8
 8015fe4:	60f8      	str	r0, [r7, #12]
 8015fe6:	60b9      	str	r1, [r7, #8]
 8015fe8:	607a      	str	r2, [r7, #4]
 8015fea:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d10b      	bne.n	8016012 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8015ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ffe:	f383 8811 	msr	BASEPRI, r3
 8016002:	f3bf 8f6f 	isb	sy
 8016006:	f3bf 8f4f 	dsb	sy
 801600a:	623b      	str	r3, [r7, #32]
}
 801600c:	bf00      	nop
 801600e:	bf00      	nop
 8016010:	e7fd      	b.n	801600e <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8016012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016014:	2b00      	cmp	r3, #0
 8016016:	d10b      	bne.n	8016030 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8016018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801601c:	f383 8811 	msr	BASEPRI, r3
 8016020:	f3bf 8f6f 	isb	sy
 8016024:	f3bf 8f4f 	dsb	sy
 8016028:	61fb      	str	r3, [r7, #28]
}
 801602a:	bf00      	nop
 801602c:	bf00      	nop
 801602e:	e7fd      	b.n	801602c <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8016030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016032:	7f1b      	ldrb	r3, [r3, #28]
 8016034:	f003 0301 	and.w	r3, r3, #1
 8016038:	2b00      	cmp	r3, #0
 801603a:	d002      	beq.n	8016042 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 801603c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801603e:	3304      	adds	r3, #4
 8016040:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8016042:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016044:	f7ff ff97 	bl	8015f76 <xStreamBufferSpacesAvailable>
 8016048:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 801604a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	68b9      	ldr	r1, [r7, #8]
 8016054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016056:	f000 f835 	bl	80160c4 <prvWriteMessageToBuffer>
 801605a:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 801605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801605e:	2b00      	cmp	r3, #0
 8016060:	d02b      	beq.n	80160ba <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8016062:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016064:	f000 fa27 	bl	80164b6 <prvBytesInBuffer>
 8016068:	4602      	mov	r2, r0
 801606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801606c:	68db      	ldr	r3, [r3, #12]
 801606e:	429a      	cmp	r2, r3
 8016070:	d323      	bcc.n	80160ba <xStreamBufferSendFromISR+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016072:	f3ef 8211 	mrs	r2, BASEPRI
 8016076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801607a:	f383 8811 	msr	BASEPRI, r3
 801607e:	f3bf 8f6f 	isb	sy
 8016082:	f3bf 8f4f 	dsb	sy
 8016086:	61ba      	str	r2, [r7, #24]
 8016088:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801608a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 801608c:	627b      	str	r3, [r7, #36]	@ 0x24
 801608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016090:	691b      	ldr	r3, [r3, #16]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d00b      	beq.n	80160ae <xStreamBufferSendFromISR+0xd0>
 8016096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016098:	6918      	ldr	r0, [r3, #16]
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	9300      	str	r3, [sp, #0]
 801609e:	2300      	movs	r3, #0
 80160a0:	2200      	movs	r2, #0
 80160a2:	2100      	movs	r1, #0
 80160a4:	f001 f882 	bl	80171ac <xTaskGenericNotifyFromISR>
 80160a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160aa:	2200      	movs	r2, #0
 80160ac:	611a      	str	r2, [r3, #16]
 80160ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80160b8:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80160ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3738      	adds	r7, #56	@ 0x38
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b086      	sub	sp, #24
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	60f8      	str	r0, [r7, #12]
 80160cc:	60b9      	str	r1, [r7, #8]
 80160ce:	607a      	str	r2, [r7, #4]
 80160d0:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d102      	bne.n	80160de <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80160d8:	2300      	movs	r3, #0
 80160da:	617b      	str	r3, [r7, #20]
 80160dc:	e01d      	b.n	801611a <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	7f1b      	ldrb	r3, [r3, #28]
 80160e2:	f003 0301 	and.w	r3, r3, #1
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d108      	bne.n	80160fc <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80160ea:	2301      	movs	r3, #1
 80160ec:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80160ee:	687a      	ldr	r2, [r7, #4]
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	4293      	cmp	r3, r2
 80160f4:	bf28      	it	cs
 80160f6:	4613      	movcs	r3, r2
 80160f8:	607b      	str	r3, [r7, #4]
 80160fa:	e00e      	b.n	801611a <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80160fc:	683a      	ldr	r2, [r7, #0]
 80160fe:	6a3b      	ldr	r3, [r7, #32]
 8016100:	429a      	cmp	r2, r3
 8016102:	d308      	bcc.n	8016116 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8016104:	2301      	movs	r3, #1
 8016106:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8016108:	1d3b      	adds	r3, r7, #4
 801610a:	2204      	movs	r2, #4
 801610c:	4619      	mov	r1, r3
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f000 f8df 	bl	80162d2 <prvWriteBytesToBuffer>
 8016114:	e001      	b.n	801611a <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8016116:	2300      	movs	r3, #0
 8016118:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 801611a:	697b      	ldr	r3, [r7, #20]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d007      	beq.n	8016130 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	461a      	mov	r2, r3
 8016124:	68b9      	ldr	r1, [r7, #8]
 8016126:	68f8      	ldr	r0, [r7, #12]
 8016128:	f000 f8d3 	bl	80162d2 <prvWriteBytesToBuffer>
 801612c:	6138      	str	r0, [r7, #16]
 801612e:	e001      	b.n	8016134 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8016130:	2300      	movs	r3, #0
 8016132:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8016134:	693b      	ldr	r3, [r7, #16]
}
 8016136:	4618      	mov	r0, r3
 8016138:	3718      	adds	r7, #24
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}

0801613e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 801613e:	b580      	push	{r7, lr}
 8016140:	b08e      	sub	sp, #56	@ 0x38
 8016142:	af02      	add	r7, sp, #8
 8016144:	60f8      	str	r0, [r7, #12]
 8016146:	60b9      	str	r1, [r7, #8]
 8016148:	607a      	str	r2, [r7, #4]
 801614a:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8016150:	2300      	movs	r3, #0
 8016152:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d10b      	bne.n	8016172 <xStreamBufferReceive+0x34>
	__asm volatile
 801615a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801615e:	f383 8811 	msr	BASEPRI, r3
 8016162:	f3bf 8f6f 	isb	sy
 8016166:	f3bf 8f4f 	dsb	sy
 801616a:	61fb      	str	r3, [r7, #28]
}
 801616c:	bf00      	nop
 801616e:	bf00      	nop
 8016170:	e7fd      	b.n	801616e <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8016172:	6a3b      	ldr	r3, [r7, #32]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d10b      	bne.n	8016190 <xStreamBufferReceive+0x52>
	__asm volatile
 8016178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801617c:	f383 8811 	msr	BASEPRI, r3
 8016180:	f3bf 8f6f 	isb	sy
 8016184:	f3bf 8f4f 	dsb	sy
 8016188:	61bb      	str	r3, [r7, #24]
}
 801618a:	bf00      	nop
 801618c:	bf00      	nop
 801618e:	e7fd      	b.n	801618c <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8016190:	6a3b      	ldr	r3, [r7, #32]
 8016192:	7f1b      	ldrb	r3, [r3, #28]
 8016194:	f003 0301 	and.w	r3, r3, #1
 8016198:	2b00      	cmp	r3, #0
 801619a:	d002      	beq.n	80161a2 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 801619c:	2304      	movs	r3, #4
 801619e:	627b      	str	r3, [r7, #36]	@ 0x24
 80161a0:	e001      	b.n	80161a6 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80161a2:	2300      	movs	r3, #0
 80161a4:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d035      	beq.n	8016218 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80161ac:	f001 faa4 	bl	80176f8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80161b0:	6a38      	ldr	r0, [r7, #32]
 80161b2:	f000 f980 	bl	80164b6 <prvBytesInBuffer>
 80161b6:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80161b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80161ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161bc:	429a      	cmp	r2, r3
 80161be:	d817      	bhi.n	80161f0 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80161c0:	2000      	movs	r0, #0
 80161c2:	f001 f8d9 	bl	8017378 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80161c6:	6a3b      	ldr	r3, [r7, #32]
 80161c8:	691b      	ldr	r3, [r3, #16]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d00b      	beq.n	80161e6 <xStreamBufferReceive+0xa8>
	__asm volatile
 80161ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161d2:	f383 8811 	msr	BASEPRI, r3
 80161d6:	f3bf 8f6f 	isb	sy
 80161da:	f3bf 8f4f 	dsb	sy
 80161de:	617b      	str	r3, [r7, #20]
}
 80161e0:	bf00      	nop
 80161e2:	bf00      	nop
 80161e4:	e7fd      	b.n	80161e2 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80161e6:	f000 feaf 	bl	8016f48 <xTaskGetCurrentTaskHandle>
 80161ea:	4602      	mov	r2, r0
 80161ec:	6a3b      	ldr	r3, [r7, #32]
 80161ee:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80161f0:	f001 fab4 	bl	801775c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80161f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80161f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161f8:	429a      	cmp	r2, r3
 80161fa:	d811      	bhi.n	8016220 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	2200      	movs	r2, #0
 8016200:	2100      	movs	r1, #0
 8016202:	2000      	movs	r0, #0
 8016204:	f000 feb0 	bl	8016f68 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8016208:	6a3b      	ldr	r3, [r7, #32]
 801620a:	2200      	movs	r2, #0
 801620c:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 801620e:	6a38      	ldr	r0, [r7, #32]
 8016210:	f000 f951 	bl	80164b6 <prvBytesInBuffer>
 8016214:	62b8      	str	r0, [r7, #40]	@ 0x28
 8016216:	e003      	b.n	8016220 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8016218:	6a38      	ldr	r0, [r7, #32]
 801621a:	f000 f94c 	bl	80164b6 <prvBytesInBuffer>
 801621e:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8016220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016224:	429a      	cmp	r2, r3
 8016226:	d91d      	bls.n	8016264 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8016228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	68b9      	ldr	r1, [r7, #8]
 8016232:	6a38      	ldr	r0, [r7, #32]
 8016234:	f000 f81b 	bl	801626e <prvReadMessageFromBuffer>
 8016238:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 801623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801623c:	2b00      	cmp	r3, #0
 801623e:	d011      	beq.n	8016264 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8016240:	f000 fbdc 	bl	80169fc <vTaskSuspendAll>
 8016244:	6a3b      	ldr	r3, [r7, #32]
 8016246:	695b      	ldr	r3, [r3, #20]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d009      	beq.n	8016260 <xStreamBufferReceive+0x122>
 801624c:	6a3b      	ldr	r3, [r7, #32]
 801624e:	6958      	ldr	r0, [r3, #20]
 8016250:	2300      	movs	r3, #0
 8016252:	2200      	movs	r2, #0
 8016254:	2100      	movs	r1, #0
 8016256:	f000 fee7 	bl	8017028 <xTaskGenericNotify>
 801625a:	6a3b      	ldr	r3, [r7, #32]
 801625c:	2200      	movs	r2, #0
 801625e:	615a      	str	r2, [r3, #20]
 8016260:	f000 fbda 	bl	8016a18 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8016264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8016266:	4618      	mov	r0, r3
 8016268:	3730      	adds	r7, #48	@ 0x30
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 801626e:	b580      	push	{r7, lr}
 8016270:	b088      	sub	sp, #32
 8016272:	af00      	add	r7, sp, #0
 8016274:	60f8      	str	r0, [r7, #12]
 8016276:	60b9      	str	r1, [r7, #8]
 8016278:	607a      	str	r2, [r7, #4]
 801627a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 801627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801627e:	2b00      	cmp	r3, #0
 8016280:	d019      	beq.n	80162b6 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8016288:	f107 0110 	add.w	r1, r7, #16
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016290:	68f8      	ldr	r0, [r7, #12]
 8016292:	f000 f893 	bl	80163bc <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8016296:	693b      	ldr	r3, [r7, #16]
 8016298:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 801629a:	683a      	ldr	r2, [r7, #0]
 801629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801629e:	1ad3      	subs	r3, r2, r3
 80162a0:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80162a2:	69fa      	ldr	r2, [r7, #28]
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d907      	bls.n	80162ba <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	69ba      	ldr	r2, [r7, #24]
 80162ae:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80162b0:	2300      	movs	r3, #0
 80162b2:	61fb      	str	r3, [r7, #28]
 80162b4:	e001      	b.n	80162ba <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	69fa      	ldr	r2, [r7, #28]
 80162be:	68b9      	ldr	r1, [r7, #8]
 80162c0:	68f8      	ldr	r0, [r7, #12]
 80162c2:	f000 f87b 	bl	80163bc <prvReadBytesFromBuffer>
 80162c6:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80162c8:	697b      	ldr	r3, [r7, #20]
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3720      	adds	r7, #32
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}

080162d2 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80162d2:	b580      	push	{r7, lr}
 80162d4:	b08a      	sub	sp, #40	@ 0x28
 80162d6:	af00      	add	r7, sp, #0
 80162d8:	60f8      	str	r0, [r7, #12]
 80162da:	60b9      	str	r1, [r7, #8]
 80162dc:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d10b      	bne.n	80162fc <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 80162e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162e8:	f383 8811 	msr	BASEPRI, r3
 80162ec:	f3bf 8f6f 	isb	sy
 80162f0:	f3bf 8f4f 	dsb	sy
 80162f4:	61fb      	str	r3, [r7, #28]
}
 80162f6:	bf00      	nop
 80162f8:	bf00      	nop
 80162fa:	e7fd      	b.n	80162f8 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	689a      	ldr	r2, [r3, #8]
 8016306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016308:	1ad3      	subs	r3, r2, r3
 801630a:	687a      	ldr	r2, [r7, #4]
 801630c:	4293      	cmp	r3, r2
 801630e:	bf28      	it	cs
 8016310:	4613      	movcs	r3, r2
 8016312:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8016314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016316:	6a3b      	ldr	r3, [r7, #32]
 8016318:	441a      	add	r2, r3
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	689b      	ldr	r3, [r3, #8]
 801631e:	429a      	cmp	r2, r3
 8016320:	d90b      	bls.n	801633a <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8016322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016326:	f383 8811 	msr	BASEPRI, r3
 801632a:	f3bf 8f6f 	isb	sy
 801632e:	f3bf 8f4f 	dsb	sy
 8016332:	61bb      	str	r3, [r7, #24]
}
 8016334:	bf00      	nop
 8016336:	bf00      	nop
 8016338:	e7fd      	b.n	8016336 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	699a      	ldr	r2, [r3, #24]
 801633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016340:	4413      	add	r3, r2
 8016342:	6a3a      	ldr	r2, [r7, #32]
 8016344:	68b9      	ldr	r1, [r7, #8]
 8016346:	4618      	mov	r0, r3
 8016348:	f004 fc93 	bl	801ac72 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 801634c:	687a      	ldr	r2, [r7, #4]
 801634e:	6a3b      	ldr	r3, [r7, #32]
 8016350:	429a      	cmp	r2, r3
 8016352:	d91d      	bls.n	8016390 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8016354:	687a      	ldr	r2, [r7, #4]
 8016356:	6a3b      	ldr	r3, [r7, #32]
 8016358:	1ad2      	subs	r2, r2, r3
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	689b      	ldr	r3, [r3, #8]
 801635e:	429a      	cmp	r2, r3
 8016360:	d90b      	bls.n	801637a <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8016362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016366:	f383 8811 	msr	BASEPRI, r3
 801636a:	f3bf 8f6f 	isb	sy
 801636e:	f3bf 8f4f 	dsb	sy
 8016372:	617b      	str	r3, [r7, #20]
}
 8016374:	bf00      	nop
 8016376:	bf00      	nop
 8016378:	e7fd      	b.n	8016376 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	6998      	ldr	r0, [r3, #24]
 801637e:	68ba      	ldr	r2, [r7, #8]
 8016380:	6a3b      	ldr	r3, [r7, #32]
 8016382:	18d1      	adds	r1, r2, r3
 8016384:	687a      	ldr	r2, [r7, #4]
 8016386:	6a3b      	ldr	r3, [r7, #32]
 8016388:	1ad3      	subs	r3, r2, r3
 801638a:	461a      	mov	r2, r3
 801638c:	f004 fc71 	bl	801ac72 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8016390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	4413      	add	r3, r2
 8016396:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	689b      	ldr	r3, [r3, #8]
 801639c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801639e:	429a      	cmp	r2, r3
 80163a0:	d304      	bcc.n	80163ac <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	689b      	ldr	r3, [r3, #8]
 80163a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163a8:	1ad3      	subs	r3, r2, r3
 80163aa:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163b0:	605a      	str	r2, [r3, #4]

	return xCount;
 80163b2:	687b      	ldr	r3, [r7, #4]
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	3728      	adds	r7, #40	@ 0x28
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b08a      	sub	sp, #40	@ 0x28
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	60f8      	str	r0, [r7, #12]
 80163c4:	60b9      	str	r1, [r7, #8]
 80163c6:	607a      	str	r2, [r7, #4]
 80163c8:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80163ca:	687a      	ldr	r2, [r7, #4]
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	4293      	cmp	r3, r2
 80163d0:	bf28      	it	cs
 80163d2:	4613      	movcs	r3, r2
 80163d4:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80163d6:	6a3b      	ldr	r3, [r7, #32]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d067      	beq.n	80164ac <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	689a      	ldr	r2, [r3, #8]
 80163e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e8:	1ad3      	subs	r3, r2, r3
 80163ea:	6a3a      	ldr	r2, [r7, #32]
 80163ec:	4293      	cmp	r3, r2
 80163ee:	bf28      	it	cs
 80163f0:	4613      	movcs	r3, r2
 80163f2:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80163f4:	69fa      	ldr	r2, [r7, #28]
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d90b      	bls.n	8016414 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80163fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016400:	f383 8811 	msr	BASEPRI, r3
 8016404:	f3bf 8f6f 	isb	sy
 8016408:	f3bf 8f4f 	dsb	sy
 801640c:	61bb      	str	r3, [r7, #24]
}
 801640e:	bf00      	nop
 8016410:	bf00      	nop
 8016412:	e7fd      	b.n	8016410 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8016414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016416:	69fb      	ldr	r3, [r7, #28]
 8016418:	441a      	add	r2, r3
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	689b      	ldr	r3, [r3, #8]
 801641e:	429a      	cmp	r2, r3
 8016420:	d90b      	bls.n	801643a <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8016422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016426:	f383 8811 	msr	BASEPRI, r3
 801642a:	f3bf 8f6f 	isb	sy
 801642e:	f3bf 8f4f 	dsb	sy
 8016432:	617b      	str	r3, [r7, #20]
}
 8016434:	bf00      	nop
 8016436:	bf00      	nop
 8016438:	e7fd      	b.n	8016436 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	699a      	ldr	r2, [r3, #24]
 801643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016440:	4413      	add	r3, r2
 8016442:	69fa      	ldr	r2, [r7, #28]
 8016444:	4619      	mov	r1, r3
 8016446:	68b8      	ldr	r0, [r7, #8]
 8016448:	f004 fc13 	bl	801ac72 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 801644c:	6a3a      	ldr	r2, [r7, #32]
 801644e:	69fb      	ldr	r3, [r7, #28]
 8016450:	429a      	cmp	r2, r3
 8016452:	d91a      	bls.n	801648a <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8016454:	6a3a      	ldr	r2, [r7, #32]
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	429a      	cmp	r2, r3
 801645a:	d90b      	bls.n	8016474 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 801645c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016460:	f383 8811 	msr	BASEPRI, r3
 8016464:	f3bf 8f6f 	isb	sy
 8016468:	f3bf 8f4f 	dsb	sy
 801646c:	613b      	str	r3, [r7, #16]
}
 801646e:	bf00      	nop
 8016470:	bf00      	nop
 8016472:	e7fd      	b.n	8016470 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8016474:	68ba      	ldr	r2, [r7, #8]
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	18d0      	adds	r0, r2, r3
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	6999      	ldr	r1, [r3, #24]
 801647e:	6a3a      	ldr	r2, [r7, #32]
 8016480:	69fb      	ldr	r3, [r7, #28]
 8016482:	1ad3      	subs	r3, r2, r3
 8016484:	461a      	mov	r2, r3
 8016486:	f004 fbf4 	bl	801ac72 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 801648a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801648c:	6a3b      	ldr	r3, [r7, #32]
 801648e:	4413      	add	r3, r2
 8016490:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	689b      	ldr	r3, [r3, #8]
 8016496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016498:	429a      	cmp	r2, r3
 801649a:	d304      	bcc.n	80164a6 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	689b      	ldr	r3, [r3, #8]
 80164a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164a2:	1ad3      	subs	r3, r2, r3
 80164a4:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164aa:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80164ac:	6a3b      	ldr	r3, [r7, #32]
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	3728      	adds	r7, #40	@ 0x28
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}

080164b6 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80164b6:	b480      	push	{r7}
 80164b8:	b085      	sub	sp, #20
 80164ba:	af00      	add	r7, sp, #0
 80164bc:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	689a      	ldr	r2, [r3, #8]
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	4413      	add	r3, r2
 80164c8:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	68fa      	ldr	r2, [r7, #12]
 80164d0:	1ad3      	subs	r3, r2, r3
 80164d2:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	689b      	ldr	r3, [r3, #8]
 80164d8:	68fa      	ldr	r2, [r7, #12]
 80164da:	429a      	cmp	r2, r3
 80164dc:	d304      	bcc.n	80164e8 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	689b      	ldr	r3, [r3, #8]
 80164e2:	68fa      	ldr	r2, [r7, #12]
 80164e4:	1ad3      	subs	r3, r2, r3
 80164e6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80164e8:	68fb      	ldr	r3, [r7, #12]
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3714      	adds	r7, #20
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr

080164f6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	b086      	sub	sp, #24
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	60f8      	str	r0, [r7, #12]
 80164fe:	60b9      	str	r1, [r7, #8]
 8016500:	607a      	str	r2, [r7, #4]
 8016502:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8016504:	2355      	movs	r3, #85	@ 0x55
 8016506:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8016508:	687a      	ldr	r2, [r7, #4]
 801650a:	6979      	ldr	r1, [r7, #20]
 801650c:	68b8      	ldr	r0, [r7, #8]
 801650e:	f003 fb34 	bl	8019b7a <memset>
 8016512:	4602      	mov	r2, r0
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	4293      	cmp	r3, r2
 8016518:	d00b      	beq.n	8016532 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 801651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801651e:	f383 8811 	msr	BASEPRI, r3
 8016522:	f3bf 8f6f 	isb	sy
 8016526:	f3bf 8f4f 	dsb	sy
 801652a:	613b      	str	r3, [r7, #16]
}
 801652c:	bf00      	nop
 801652e:	bf00      	nop
 8016530:	e7fd      	b.n	801652e <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8016532:	2220      	movs	r2, #32
 8016534:	2100      	movs	r1, #0
 8016536:	68f8      	ldr	r0, [r7, #12]
 8016538:	f003 fb1f 	bl	8019b7a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	68ba      	ldr	r2, [r7, #8]
 8016540:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	683a      	ldr	r2, [r7, #0]
 801654c:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016554:	771a      	strb	r2, [r3, #28]
}
 8016556:	bf00      	nop
 8016558:	3718      	adds	r7, #24
 801655a:	46bd      	mov	sp, r7
 801655c:	bd80      	pop	{r7, pc}

0801655e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801655e:	b580      	push	{r7, lr}
 8016560:	b08e      	sub	sp, #56	@ 0x38
 8016562:	af04      	add	r7, sp, #16
 8016564:	60f8      	str	r0, [r7, #12]
 8016566:	60b9      	str	r1, [r7, #8]
 8016568:	607a      	str	r2, [r7, #4]
 801656a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801656c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801656e:	2b00      	cmp	r3, #0
 8016570:	d10b      	bne.n	801658a <xTaskCreateStatic+0x2c>
	__asm volatile
 8016572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016576:	f383 8811 	msr	BASEPRI, r3
 801657a:	f3bf 8f6f 	isb	sy
 801657e:	f3bf 8f4f 	dsb	sy
 8016582:	623b      	str	r3, [r7, #32]
}
 8016584:	bf00      	nop
 8016586:	bf00      	nop
 8016588:	e7fd      	b.n	8016586 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801658c:	2b00      	cmp	r3, #0
 801658e:	d10b      	bne.n	80165a8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8016590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016594:	f383 8811 	msr	BASEPRI, r3
 8016598:	f3bf 8f6f 	isb	sy
 801659c:	f3bf 8f4f 	dsb	sy
 80165a0:	61fb      	str	r3, [r7, #28]
}
 80165a2:	bf00      	nop
 80165a4:	bf00      	nop
 80165a6:	e7fd      	b.n	80165a4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80165a8:	23a0      	movs	r3, #160	@ 0xa0
 80165aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80165b0:	d00b      	beq.n	80165ca <xTaskCreateStatic+0x6c>
	__asm volatile
 80165b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165b6:	f383 8811 	msr	BASEPRI, r3
 80165ba:	f3bf 8f6f 	isb	sy
 80165be:	f3bf 8f4f 	dsb	sy
 80165c2:	61bb      	str	r3, [r7, #24]
}
 80165c4:	bf00      	nop
 80165c6:	bf00      	nop
 80165c8:	e7fd      	b.n	80165c6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80165ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80165cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d01e      	beq.n	8016610 <xTaskCreateStatic+0xb2>
 80165d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d01b      	beq.n	8016610 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80165d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165da:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80165dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80165e0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80165e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e4:	2202      	movs	r2, #2
 80165e6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80165ea:	2300      	movs	r3, #0
 80165ec:	9303      	str	r3, [sp, #12]
 80165ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f0:	9302      	str	r3, [sp, #8]
 80165f2:	f107 0314 	add.w	r3, r7, #20
 80165f6:	9301      	str	r3, [sp, #4]
 80165f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165fa:	9300      	str	r3, [sp, #0]
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	687a      	ldr	r2, [r7, #4]
 8016600:	68b9      	ldr	r1, [r7, #8]
 8016602:	68f8      	ldr	r0, [r7, #12]
 8016604:	f000 f850 	bl	80166a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016608:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801660a:	f000 f8ed 	bl	80167e8 <prvAddNewTaskToReadyList>
 801660e:	e001      	b.n	8016614 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8016610:	2300      	movs	r3, #0
 8016612:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016614:	697b      	ldr	r3, [r7, #20]
	}
 8016616:	4618      	mov	r0, r3
 8016618:	3728      	adds	r7, #40	@ 0x28
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}

0801661e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801661e:	b580      	push	{r7, lr}
 8016620:	b08c      	sub	sp, #48	@ 0x30
 8016622:	af04      	add	r7, sp, #16
 8016624:	60f8      	str	r0, [r7, #12]
 8016626:	60b9      	str	r1, [r7, #8]
 8016628:	603b      	str	r3, [r7, #0]
 801662a:	4613      	mov	r3, r2
 801662c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801662e:	88fb      	ldrh	r3, [r7, #6]
 8016630:	009b      	lsls	r3, r3, #2
 8016632:	4618      	mov	r0, r3
 8016634:	f001 f982 	bl	801793c <pvPortMalloc>
 8016638:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d00e      	beq.n	801665e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016640:	20a0      	movs	r0, #160	@ 0xa0
 8016642:	f001 f97b 	bl	801793c <pvPortMalloc>
 8016646:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016648:	69fb      	ldr	r3, [r7, #28]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d003      	beq.n	8016656 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801664e:	69fb      	ldr	r3, [r7, #28]
 8016650:	697a      	ldr	r2, [r7, #20]
 8016652:	631a      	str	r2, [r3, #48]	@ 0x30
 8016654:	e005      	b.n	8016662 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016656:	6978      	ldr	r0, [r7, #20]
 8016658:	f001 fa3e 	bl	8017ad8 <vPortFree>
 801665c:	e001      	b.n	8016662 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801665e:	2300      	movs	r3, #0
 8016660:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016662:	69fb      	ldr	r3, [r7, #28]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d017      	beq.n	8016698 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016668:	69fb      	ldr	r3, [r7, #28]
 801666a:	2200      	movs	r2, #0
 801666c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016670:	88fa      	ldrh	r2, [r7, #6]
 8016672:	2300      	movs	r3, #0
 8016674:	9303      	str	r3, [sp, #12]
 8016676:	69fb      	ldr	r3, [r7, #28]
 8016678:	9302      	str	r3, [sp, #8]
 801667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801667c:	9301      	str	r3, [sp, #4]
 801667e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016680:	9300      	str	r3, [sp, #0]
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	68b9      	ldr	r1, [r7, #8]
 8016686:	68f8      	ldr	r0, [r7, #12]
 8016688:	f000 f80e 	bl	80166a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801668c:	69f8      	ldr	r0, [r7, #28]
 801668e:	f000 f8ab 	bl	80167e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016692:	2301      	movs	r3, #1
 8016694:	61bb      	str	r3, [r7, #24]
 8016696:	e002      	b.n	801669e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016698:	f04f 33ff 	mov.w	r3, #4294967295
 801669c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801669e:	69bb      	ldr	r3, [r7, #24]
	}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3720      	adds	r7, #32
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}

080166a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b088      	sub	sp, #32
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	60f8      	str	r0, [r7, #12]
 80166b0:	60b9      	str	r1, [r7, #8]
 80166b2:	607a      	str	r2, [r7, #4]
 80166b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80166b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80166c0:	3b01      	subs	r3, #1
 80166c2:	009b      	lsls	r3, r3, #2
 80166c4:	4413      	add	r3, r2
 80166c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80166c8:	69bb      	ldr	r3, [r7, #24]
 80166ca:	f023 0307 	bic.w	r3, r3, #7
 80166ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80166d0:	69bb      	ldr	r3, [r7, #24]
 80166d2:	f003 0307 	and.w	r3, r3, #7
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d00b      	beq.n	80166f2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80166da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166de:	f383 8811 	msr	BASEPRI, r3
 80166e2:	f3bf 8f6f 	isb	sy
 80166e6:	f3bf 8f4f 	dsb	sy
 80166ea:	617b      	str	r3, [r7, #20]
}
 80166ec:	bf00      	nop
 80166ee:	bf00      	nop
 80166f0:	e7fd      	b.n	80166ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d01f      	beq.n	8016738 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80166f8:	2300      	movs	r3, #0
 80166fa:	61fb      	str	r3, [r7, #28]
 80166fc:	e012      	b.n	8016724 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80166fe:	68ba      	ldr	r2, [r7, #8]
 8016700:	69fb      	ldr	r3, [r7, #28]
 8016702:	4413      	add	r3, r2
 8016704:	7819      	ldrb	r1, [r3, #0]
 8016706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016708:	69fb      	ldr	r3, [r7, #28]
 801670a:	4413      	add	r3, r2
 801670c:	3334      	adds	r3, #52	@ 0x34
 801670e:	460a      	mov	r2, r1
 8016710:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016712:	68ba      	ldr	r2, [r7, #8]
 8016714:	69fb      	ldr	r3, [r7, #28]
 8016716:	4413      	add	r3, r2
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d006      	beq.n	801672c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801671e:	69fb      	ldr	r3, [r7, #28]
 8016720:	3301      	adds	r3, #1
 8016722:	61fb      	str	r3, [r7, #28]
 8016724:	69fb      	ldr	r3, [r7, #28]
 8016726:	2b0f      	cmp	r3, #15
 8016728:	d9e9      	bls.n	80166fe <prvInitialiseNewTask+0x56>
 801672a:	e000      	b.n	801672e <prvInitialiseNewTask+0x86>
			{
				break;
 801672c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016730:	2200      	movs	r2, #0
 8016732:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016736:	e003      	b.n	8016740 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801673a:	2200      	movs	r2, #0
 801673c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016742:	2b06      	cmp	r3, #6
 8016744:	d901      	bls.n	801674a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016746:	2306      	movs	r3, #6
 8016748:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801674c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801674e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016754:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016758:	2200      	movs	r2, #0
 801675a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801675c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801675e:	3304      	adds	r3, #4
 8016760:	4618      	mov	r0, r3
 8016762:	f7ff fb16 	bl	8015d92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016768:	3318      	adds	r3, #24
 801676a:	4618      	mov	r0, r3
 801676c:	f7ff fb11 	bl	8015d92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016774:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016778:	f1c3 0207 	rsb	r2, r3, #7
 801677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801677e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016784:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016788:	2200      	movs	r2, #0
 801678a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016790:	2200      	movs	r2, #0
 8016792:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016798:	334c      	adds	r3, #76	@ 0x4c
 801679a:	224c      	movs	r2, #76	@ 0x4c
 801679c:	2100      	movs	r1, #0
 801679e:	4618      	mov	r0, r3
 80167a0:	f003 f9eb 	bl	8019b7a <memset>
 80167a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167a6:	4a0d      	ldr	r2, [pc, #52]	@ (80167dc <prvInitialiseNewTask+0x134>)
 80167a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80167aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167ac:	4a0c      	ldr	r2, [pc, #48]	@ (80167e0 <prvInitialiseNewTask+0x138>)
 80167ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80167b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167b2:	4a0c      	ldr	r2, [pc, #48]	@ (80167e4 <prvInitialiseNewTask+0x13c>)
 80167b4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80167b6:	683a      	ldr	r2, [r7, #0]
 80167b8:	68f9      	ldr	r1, [r7, #12]
 80167ba:	69b8      	ldr	r0, [r7, #24]
 80167bc:	f000 fe68 	bl	8017490 <pxPortInitialiseStack>
 80167c0:	4602      	mov	r2, r0
 80167c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80167c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d002      	beq.n	80167d2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80167cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80167d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80167d2:	bf00      	nop
 80167d4:	3720      	adds	r7, #32
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd80      	pop	{r7, pc}
 80167da:	bf00      	nop
 80167dc:	20005d94 	.word	0x20005d94
 80167e0:	20005dfc 	.word	0x20005dfc
 80167e4:	20005e64 	.word	0x20005e64

080167e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80167f0:	f000 ff82 	bl	80176f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80167f4:	4b2a      	ldr	r3, [pc, #168]	@ (80168a0 <prvAddNewTaskToReadyList+0xb8>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	3301      	adds	r3, #1
 80167fa:	4a29      	ldr	r2, [pc, #164]	@ (80168a0 <prvAddNewTaskToReadyList+0xb8>)
 80167fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80167fe:	4b29      	ldr	r3, [pc, #164]	@ (80168a4 <prvAddNewTaskToReadyList+0xbc>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d109      	bne.n	801681a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016806:	4a27      	ldr	r2, [pc, #156]	@ (80168a4 <prvAddNewTaskToReadyList+0xbc>)
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801680c:	4b24      	ldr	r3, [pc, #144]	@ (80168a0 <prvAddNewTaskToReadyList+0xb8>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2b01      	cmp	r3, #1
 8016812:	d110      	bne.n	8016836 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016814:	f000 fad4 	bl	8016dc0 <prvInitialiseTaskLists>
 8016818:	e00d      	b.n	8016836 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801681a:	4b23      	ldr	r3, [pc, #140]	@ (80168a8 <prvAddNewTaskToReadyList+0xc0>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d109      	bne.n	8016836 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016822:	4b20      	ldr	r3, [pc, #128]	@ (80168a4 <prvAddNewTaskToReadyList+0xbc>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801682c:	429a      	cmp	r2, r3
 801682e:	d802      	bhi.n	8016836 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016830:	4a1c      	ldr	r2, [pc, #112]	@ (80168a4 <prvAddNewTaskToReadyList+0xbc>)
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016836:	4b1d      	ldr	r3, [pc, #116]	@ (80168ac <prvAddNewTaskToReadyList+0xc4>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	3301      	adds	r3, #1
 801683c:	4a1b      	ldr	r2, [pc, #108]	@ (80168ac <prvAddNewTaskToReadyList+0xc4>)
 801683e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016844:	2201      	movs	r2, #1
 8016846:	409a      	lsls	r2, r3
 8016848:	4b19      	ldr	r3, [pc, #100]	@ (80168b0 <prvAddNewTaskToReadyList+0xc8>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	4313      	orrs	r3, r2
 801684e:	4a18      	ldr	r2, [pc, #96]	@ (80168b0 <prvAddNewTaskToReadyList+0xc8>)
 8016850:	6013      	str	r3, [r2, #0]
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016856:	4613      	mov	r3, r2
 8016858:	009b      	lsls	r3, r3, #2
 801685a:	4413      	add	r3, r2
 801685c:	009b      	lsls	r3, r3, #2
 801685e:	4a15      	ldr	r2, [pc, #84]	@ (80168b4 <prvAddNewTaskToReadyList+0xcc>)
 8016860:	441a      	add	r2, r3
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	3304      	adds	r3, #4
 8016866:	4619      	mov	r1, r3
 8016868:	4610      	mov	r0, r2
 801686a:	f7ff fa9f 	bl	8015dac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801686e:	f000 ff75 	bl	801775c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016872:	4b0d      	ldr	r3, [pc, #52]	@ (80168a8 <prvAddNewTaskToReadyList+0xc0>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d00e      	beq.n	8016898 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801687a:	4b0a      	ldr	r3, [pc, #40]	@ (80168a4 <prvAddNewTaskToReadyList+0xbc>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016884:	429a      	cmp	r2, r3
 8016886:	d207      	bcs.n	8016898 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016888:	4b0b      	ldr	r3, [pc, #44]	@ (80168b8 <prvAddNewTaskToReadyList+0xd0>)
 801688a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801688e:	601a      	str	r2, [r3, #0]
 8016890:	f3bf 8f4f 	dsb	sy
 8016894:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016898:	bf00      	nop
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	20000f18 	.word	0x20000f18
 80168a4:	20000e18 	.word	0x20000e18
 80168a8:	20000f24 	.word	0x20000f24
 80168ac:	20000f34 	.word	0x20000f34
 80168b0:	20000f20 	.word	0x20000f20
 80168b4:	20000e1c 	.word	0x20000e1c
 80168b8:	e000ed04 	.word	0xe000ed04

080168bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b084      	sub	sp, #16
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80168c4:	2300      	movs	r3, #0
 80168c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d018      	beq.n	8016900 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80168ce:	4b14      	ldr	r3, [pc, #80]	@ (8016920 <vTaskDelay+0x64>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d00b      	beq.n	80168ee <vTaskDelay+0x32>
	__asm volatile
 80168d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168da:	f383 8811 	msr	BASEPRI, r3
 80168de:	f3bf 8f6f 	isb	sy
 80168e2:	f3bf 8f4f 	dsb	sy
 80168e6:	60bb      	str	r3, [r7, #8]
}
 80168e8:	bf00      	nop
 80168ea:	bf00      	nop
 80168ec:	e7fd      	b.n	80168ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80168ee:	f000 f885 	bl	80169fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80168f2:	2100      	movs	r1, #0
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f000 fd65 	bl	80173c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80168fa:	f000 f88d 	bl	8016a18 <xTaskResumeAll>
 80168fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d107      	bne.n	8016916 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8016906:	4b07      	ldr	r3, [pc, #28]	@ (8016924 <vTaskDelay+0x68>)
 8016908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801690c:	601a      	str	r2, [r3, #0]
 801690e:	f3bf 8f4f 	dsb	sy
 8016912:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016916:	bf00      	nop
 8016918:	3710      	adds	r7, #16
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	20000f40 	.word	0x20000f40
 8016924:	e000ed04 	.word	0xe000ed04

08016928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b08a      	sub	sp, #40	@ 0x28
 801692c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801692e:	2300      	movs	r3, #0
 8016930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016932:	2300      	movs	r3, #0
 8016934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016936:	463a      	mov	r2, r7
 8016938:	1d39      	adds	r1, r7, #4
 801693a:	f107 0308 	add.w	r3, r7, #8
 801693e:	4618      	mov	r0, r3
 8016940:	f7ea fee0 	bl	8001704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016944:	6839      	ldr	r1, [r7, #0]
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	68ba      	ldr	r2, [r7, #8]
 801694a:	9202      	str	r2, [sp, #8]
 801694c:	9301      	str	r3, [sp, #4]
 801694e:	2300      	movs	r3, #0
 8016950:	9300      	str	r3, [sp, #0]
 8016952:	2300      	movs	r3, #0
 8016954:	460a      	mov	r2, r1
 8016956:	4921      	ldr	r1, [pc, #132]	@ (80169dc <vTaskStartScheduler+0xb4>)
 8016958:	4821      	ldr	r0, [pc, #132]	@ (80169e0 <vTaskStartScheduler+0xb8>)
 801695a:	f7ff fe00 	bl	801655e <xTaskCreateStatic>
 801695e:	4603      	mov	r3, r0
 8016960:	4a20      	ldr	r2, [pc, #128]	@ (80169e4 <vTaskStartScheduler+0xbc>)
 8016962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016964:	4b1f      	ldr	r3, [pc, #124]	@ (80169e4 <vTaskStartScheduler+0xbc>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d002      	beq.n	8016972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801696c:	2301      	movs	r3, #1
 801696e:	617b      	str	r3, [r7, #20]
 8016970:	e001      	b.n	8016976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016972:	2300      	movs	r3, #0
 8016974:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016976:	697b      	ldr	r3, [r7, #20]
 8016978:	2b01      	cmp	r3, #1
 801697a:	d11b      	bne.n	80169b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 801697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016980:	f383 8811 	msr	BASEPRI, r3
 8016984:	f3bf 8f6f 	isb	sy
 8016988:	f3bf 8f4f 	dsb	sy
 801698c:	613b      	str	r3, [r7, #16]
}
 801698e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016990:	4b15      	ldr	r3, [pc, #84]	@ (80169e8 <vTaskStartScheduler+0xc0>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	334c      	adds	r3, #76	@ 0x4c
 8016996:	4a15      	ldr	r2, [pc, #84]	@ (80169ec <vTaskStartScheduler+0xc4>)
 8016998:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801699a:	4b15      	ldr	r3, [pc, #84]	@ (80169f0 <vTaskStartScheduler+0xc8>)
 801699c:	f04f 32ff 	mov.w	r2, #4294967295
 80169a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80169a2:	4b14      	ldr	r3, [pc, #80]	@ (80169f4 <vTaskStartScheduler+0xcc>)
 80169a4:	2201      	movs	r2, #1
 80169a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80169a8:	4b13      	ldr	r3, [pc, #76]	@ (80169f8 <vTaskStartScheduler+0xd0>)
 80169aa:	2200      	movs	r2, #0
 80169ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80169ae:	f000 fdff 	bl	80175b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80169b2:	e00f      	b.n	80169d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169ba:	d10b      	bne.n	80169d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80169bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169c0:	f383 8811 	msr	BASEPRI, r3
 80169c4:	f3bf 8f6f 	isb	sy
 80169c8:	f3bf 8f4f 	dsb	sy
 80169cc:	60fb      	str	r3, [r7, #12]
}
 80169ce:	bf00      	nop
 80169d0:	bf00      	nop
 80169d2:	e7fd      	b.n	80169d0 <vTaskStartScheduler+0xa8>
}
 80169d4:	bf00      	nop
 80169d6:	3718      	adds	r7, #24
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}
 80169dc:	08021978 	.word	0x08021978
 80169e0:	08016d91 	.word	0x08016d91
 80169e4:	20000f3c 	.word	0x20000f3c
 80169e8:	20000e18 	.word	0x20000e18
 80169ec:	200001c0 	.word	0x200001c0
 80169f0:	20000f38 	.word	0x20000f38
 80169f4:	20000f24 	.word	0x20000f24
 80169f8:	20000f1c 	.word	0x20000f1c

080169fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80169fc:	b480      	push	{r7}
 80169fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016a00:	4b04      	ldr	r3, [pc, #16]	@ (8016a14 <vTaskSuspendAll+0x18>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	3301      	adds	r3, #1
 8016a06:	4a03      	ldr	r2, [pc, #12]	@ (8016a14 <vTaskSuspendAll+0x18>)
 8016a08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016a0a:	bf00      	nop
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a12:	4770      	bx	lr
 8016a14:	20000f40 	.word	0x20000f40

08016a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016a22:	2300      	movs	r3, #0
 8016a24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016a26:	4b42      	ldr	r3, [pc, #264]	@ (8016b30 <xTaskResumeAll+0x118>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d10b      	bne.n	8016a46 <xTaskResumeAll+0x2e>
	__asm volatile
 8016a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a32:	f383 8811 	msr	BASEPRI, r3
 8016a36:	f3bf 8f6f 	isb	sy
 8016a3a:	f3bf 8f4f 	dsb	sy
 8016a3e:	603b      	str	r3, [r7, #0]
}
 8016a40:	bf00      	nop
 8016a42:	bf00      	nop
 8016a44:	e7fd      	b.n	8016a42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016a46:	f000 fe57 	bl	80176f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016a4a:	4b39      	ldr	r3, [pc, #228]	@ (8016b30 <xTaskResumeAll+0x118>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	3b01      	subs	r3, #1
 8016a50:	4a37      	ldr	r2, [pc, #220]	@ (8016b30 <xTaskResumeAll+0x118>)
 8016a52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a54:	4b36      	ldr	r3, [pc, #216]	@ (8016b30 <xTaskResumeAll+0x118>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d161      	bne.n	8016b20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016a5c:	4b35      	ldr	r3, [pc, #212]	@ (8016b34 <xTaskResumeAll+0x11c>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d05d      	beq.n	8016b20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016a64:	e02e      	b.n	8016ac4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a66:	4b34      	ldr	r3, [pc, #208]	@ (8016b38 <xTaskResumeAll+0x120>)
 8016a68:	68db      	ldr	r3, [r3, #12]
 8016a6a:	68db      	ldr	r3, [r3, #12]
 8016a6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	3318      	adds	r3, #24
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7ff f9f7 	bl	8015e66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	3304      	adds	r3, #4
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f7ff f9f2 	bl	8015e66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a86:	2201      	movs	r2, #1
 8016a88:	409a      	lsls	r2, r3
 8016a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8016b3c <xTaskResumeAll+0x124>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	4313      	orrs	r3, r2
 8016a90:	4a2a      	ldr	r2, [pc, #168]	@ (8016b3c <xTaskResumeAll+0x124>)
 8016a92:	6013      	str	r3, [r2, #0]
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a98:	4613      	mov	r3, r2
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	4413      	add	r3, r2
 8016a9e:	009b      	lsls	r3, r3, #2
 8016aa0:	4a27      	ldr	r2, [pc, #156]	@ (8016b40 <xTaskResumeAll+0x128>)
 8016aa2:	441a      	add	r2, r3
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	3304      	adds	r3, #4
 8016aa8:	4619      	mov	r1, r3
 8016aaa:	4610      	mov	r0, r2
 8016aac:	f7ff f97e 	bl	8015dac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ab4:	4b23      	ldr	r3, [pc, #140]	@ (8016b44 <xTaskResumeAll+0x12c>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d302      	bcc.n	8016ac4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016abe:	4b22      	ldr	r3, [pc, #136]	@ (8016b48 <xTaskResumeAll+0x130>)
 8016ac0:	2201      	movs	r2, #1
 8016ac2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8016b38 <xTaskResumeAll+0x120>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d1cc      	bne.n	8016a66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d001      	beq.n	8016ad6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016ad2:	f000 fa19 	bl	8016f08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8016b4c <xTaskResumeAll+0x134>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d010      	beq.n	8016b04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016ae2:	f000 f837 	bl	8016b54 <xTaskIncrementTick>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d002      	beq.n	8016af2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016aec:	4b16      	ldr	r3, [pc, #88]	@ (8016b48 <xTaskResumeAll+0x130>)
 8016aee:	2201      	movs	r2, #1
 8016af0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	3b01      	subs	r3, #1
 8016af6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d1f1      	bne.n	8016ae2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016afe:	4b13      	ldr	r3, [pc, #76]	@ (8016b4c <xTaskResumeAll+0x134>)
 8016b00:	2200      	movs	r2, #0
 8016b02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016b04:	4b10      	ldr	r3, [pc, #64]	@ (8016b48 <xTaskResumeAll+0x130>)
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d009      	beq.n	8016b20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016b10:	4b0f      	ldr	r3, [pc, #60]	@ (8016b50 <xTaskResumeAll+0x138>)
 8016b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016b16:	601a      	str	r2, [r3, #0]
 8016b18:	f3bf 8f4f 	dsb	sy
 8016b1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016b20:	f000 fe1c 	bl	801775c <vPortExitCritical>

	return xAlreadyYielded;
 8016b24:	68bb      	ldr	r3, [r7, #8]
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3710      	adds	r7, #16
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}
 8016b2e:	bf00      	nop
 8016b30:	20000f40 	.word	0x20000f40
 8016b34:	20000f18 	.word	0x20000f18
 8016b38:	20000ed8 	.word	0x20000ed8
 8016b3c:	20000f20 	.word	0x20000f20
 8016b40:	20000e1c 	.word	0x20000e1c
 8016b44:	20000e18 	.word	0x20000e18
 8016b48:	20000f2c 	.word	0x20000f2c
 8016b4c:	20000f28 	.word	0x20000f28
 8016b50:	e000ed04 	.word	0xe000ed04

08016b54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b086      	sub	sp, #24
 8016b58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8016c9c <xTaskIncrementTick+0x148>)
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	f040 808f 	bne.w	8016c86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016b68:	4b4d      	ldr	r3, [pc, #308]	@ (8016ca0 <xTaskIncrementTick+0x14c>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016b70:	4a4b      	ldr	r2, [pc, #300]	@ (8016ca0 <xTaskIncrementTick+0x14c>)
 8016b72:	693b      	ldr	r3, [r7, #16]
 8016b74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016b76:	693b      	ldr	r3, [r7, #16]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d121      	bne.n	8016bc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8016b7c:	4b49      	ldr	r3, [pc, #292]	@ (8016ca4 <xTaskIncrementTick+0x150>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d00b      	beq.n	8016b9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8016b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b8a:	f383 8811 	msr	BASEPRI, r3
 8016b8e:	f3bf 8f6f 	isb	sy
 8016b92:	f3bf 8f4f 	dsb	sy
 8016b96:	603b      	str	r3, [r7, #0]
}
 8016b98:	bf00      	nop
 8016b9a:	bf00      	nop
 8016b9c:	e7fd      	b.n	8016b9a <xTaskIncrementTick+0x46>
 8016b9e:	4b41      	ldr	r3, [pc, #260]	@ (8016ca4 <xTaskIncrementTick+0x150>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	60fb      	str	r3, [r7, #12]
 8016ba4:	4b40      	ldr	r3, [pc, #256]	@ (8016ca8 <xTaskIncrementTick+0x154>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	4a3e      	ldr	r2, [pc, #248]	@ (8016ca4 <xTaskIncrementTick+0x150>)
 8016baa:	6013      	str	r3, [r2, #0]
 8016bac:	4a3e      	ldr	r2, [pc, #248]	@ (8016ca8 <xTaskIncrementTick+0x154>)
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	6013      	str	r3, [r2, #0]
 8016bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8016cac <xTaskIncrementTick+0x158>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	3301      	adds	r3, #1
 8016bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8016cac <xTaskIncrementTick+0x158>)
 8016bba:	6013      	str	r3, [r2, #0]
 8016bbc:	f000 f9a4 	bl	8016f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8016cb0 <xTaskIncrementTick+0x15c>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	693a      	ldr	r2, [r7, #16]
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d348      	bcc.n	8016c5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016bca:	4b36      	ldr	r3, [pc, #216]	@ (8016ca4 <xTaskIncrementTick+0x150>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d104      	bne.n	8016bde <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016bd4:	4b36      	ldr	r3, [pc, #216]	@ (8016cb0 <xTaskIncrementTick+0x15c>)
 8016bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8016bda:	601a      	str	r2, [r3, #0]
					break;
 8016bdc:	e03e      	b.n	8016c5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bde:	4b31      	ldr	r3, [pc, #196]	@ (8016ca4 <xTaskIncrementTick+0x150>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	68db      	ldr	r3, [r3, #12]
 8016be4:	68db      	ldr	r3, [r3, #12]
 8016be6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016bee:	693a      	ldr	r2, [r7, #16]
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d203      	bcs.n	8016bfe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8016cb0 <xTaskIncrementTick+0x15c>)
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016bfc:	e02e      	b.n	8016c5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	3304      	adds	r3, #4
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7ff f92f 	bl	8015e66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d004      	beq.n	8016c1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	3318      	adds	r3, #24
 8016c14:	4618      	mov	r0, r3
 8016c16:	f7ff f926 	bl	8015e66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c1e:	2201      	movs	r2, #1
 8016c20:	409a      	lsls	r2, r3
 8016c22:	4b24      	ldr	r3, [pc, #144]	@ (8016cb4 <xTaskIncrementTick+0x160>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	4313      	orrs	r3, r2
 8016c28:	4a22      	ldr	r2, [pc, #136]	@ (8016cb4 <xTaskIncrementTick+0x160>)
 8016c2a:	6013      	str	r3, [r2, #0]
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c30:	4613      	mov	r3, r2
 8016c32:	009b      	lsls	r3, r3, #2
 8016c34:	4413      	add	r3, r2
 8016c36:	009b      	lsls	r3, r3, #2
 8016c38:	4a1f      	ldr	r2, [pc, #124]	@ (8016cb8 <xTaskIncrementTick+0x164>)
 8016c3a:	441a      	add	r2, r3
 8016c3c:	68bb      	ldr	r3, [r7, #8]
 8016c3e:	3304      	adds	r3, #4
 8016c40:	4619      	mov	r1, r3
 8016c42:	4610      	mov	r0, r2
 8016c44:	f7ff f8b2 	bl	8015dac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8016cbc <xTaskIncrementTick+0x168>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d3b9      	bcc.n	8016bca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8016c56:	2301      	movs	r3, #1
 8016c58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016c5a:	e7b6      	b.n	8016bca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016c5c:	4b17      	ldr	r3, [pc, #92]	@ (8016cbc <xTaskIncrementTick+0x168>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c62:	4915      	ldr	r1, [pc, #84]	@ (8016cb8 <xTaskIncrementTick+0x164>)
 8016c64:	4613      	mov	r3, r2
 8016c66:	009b      	lsls	r3, r3, #2
 8016c68:	4413      	add	r3, r2
 8016c6a:	009b      	lsls	r3, r3, #2
 8016c6c:	440b      	add	r3, r1
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	2b01      	cmp	r3, #1
 8016c72:	d901      	bls.n	8016c78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016c74:	2301      	movs	r3, #1
 8016c76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016c78:	4b11      	ldr	r3, [pc, #68]	@ (8016cc0 <xTaskIncrementTick+0x16c>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d007      	beq.n	8016c90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016c80:	2301      	movs	r3, #1
 8016c82:	617b      	str	r3, [r7, #20]
 8016c84:	e004      	b.n	8016c90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016c86:	4b0f      	ldr	r3, [pc, #60]	@ (8016cc4 <xTaskIncrementTick+0x170>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	3301      	adds	r3, #1
 8016c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8016cc4 <xTaskIncrementTick+0x170>)
 8016c8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016c90:	697b      	ldr	r3, [r7, #20]
}
 8016c92:	4618      	mov	r0, r3
 8016c94:	3718      	adds	r7, #24
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}
 8016c9a:	bf00      	nop
 8016c9c:	20000f40 	.word	0x20000f40
 8016ca0:	20000f1c 	.word	0x20000f1c
 8016ca4:	20000ed0 	.word	0x20000ed0
 8016ca8:	20000ed4 	.word	0x20000ed4
 8016cac:	20000f30 	.word	0x20000f30
 8016cb0:	20000f38 	.word	0x20000f38
 8016cb4:	20000f20 	.word	0x20000f20
 8016cb8:	20000e1c 	.word	0x20000e1c
 8016cbc:	20000e18 	.word	0x20000e18
 8016cc0:	20000f2c 	.word	0x20000f2c
 8016cc4:	20000f28 	.word	0x20000f28

08016cc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016cc8:	b480      	push	{r7}
 8016cca:	b087      	sub	sp, #28
 8016ccc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016cce:	4b2a      	ldr	r3, [pc, #168]	@ (8016d78 <vTaskSwitchContext+0xb0>)
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d003      	beq.n	8016cde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016cd6:	4b29      	ldr	r3, [pc, #164]	@ (8016d7c <vTaskSwitchContext+0xb4>)
 8016cd8:	2201      	movs	r2, #1
 8016cda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016cdc:	e045      	b.n	8016d6a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8016cde:	4b27      	ldr	r3, [pc, #156]	@ (8016d7c <vTaskSwitchContext+0xb4>)
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ce4:	4b26      	ldr	r3, [pc, #152]	@ (8016d80 <vTaskSwitchContext+0xb8>)
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	fab3 f383 	clz	r3, r3
 8016cf0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016cf2:	7afb      	ldrb	r3, [r7, #11]
 8016cf4:	f1c3 031f 	rsb	r3, r3, #31
 8016cf8:	617b      	str	r3, [r7, #20]
 8016cfa:	4922      	ldr	r1, [pc, #136]	@ (8016d84 <vTaskSwitchContext+0xbc>)
 8016cfc:	697a      	ldr	r2, [r7, #20]
 8016cfe:	4613      	mov	r3, r2
 8016d00:	009b      	lsls	r3, r3, #2
 8016d02:	4413      	add	r3, r2
 8016d04:	009b      	lsls	r3, r3, #2
 8016d06:	440b      	add	r3, r1
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d10b      	bne.n	8016d26 <vTaskSwitchContext+0x5e>
	__asm volatile
 8016d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d12:	f383 8811 	msr	BASEPRI, r3
 8016d16:	f3bf 8f6f 	isb	sy
 8016d1a:	f3bf 8f4f 	dsb	sy
 8016d1e:	607b      	str	r3, [r7, #4]
}
 8016d20:	bf00      	nop
 8016d22:	bf00      	nop
 8016d24:	e7fd      	b.n	8016d22 <vTaskSwitchContext+0x5a>
 8016d26:	697a      	ldr	r2, [r7, #20]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	009b      	lsls	r3, r3, #2
 8016d2c:	4413      	add	r3, r2
 8016d2e:	009b      	lsls	r3, r3, #2
 8016d30:	4a14      	ldr	r2, [pc, #80]	@ (8016d84 <vTaskSwitchContext+0xbc>)
 8016d32:	4413      	add	r3, r2
 8016d34:	613b      	str	r3, [r7, #16]
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	685b      	ldr	r3, [r3, #4]
 8016d3a:	685a      	ldr	r2, [r3, #4]
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	605a      	str	r2, [r3, #4]
 8016d40:	693b      	ldr	r3, [r7, #16]
 8016d42:	685a      	ldr	r2, [r3, #4]
 8016d44:	693b      	ldr	r3, [r7, #16]
 8016d46:	3308      	adds	r3, #8
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	d104      	bne.n	8016d56 <vTaskSwitchContext+0x8e>
 8016d4c:	693b      	ldr	r3, [r7, #16]
 8016d4e:	685b      	ldr	r3, [r3, #4]
 8016d50:	685a      	ldr	r2, [r3, #4]
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	605a      	str	r2, [r3, #4]
 8016d56:	693b      	ldr	r3, [r7, #16]
 8016d58:	685b      	ldr	r3, [r3, #4]
 8016d5a:	68db      	ldr	r3, [r3, #12]
 8016d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8016d88 <vTaskSwitchContext+0xc0>)
 8016d5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016d60:	4b09      	ldr	r3, [pc, #36]	@ (8016d88 <vTaskSwitchContext+0xc0>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	334c      	adds	r3, #76	@ 0x4c
 8016d66:	4a09      	ldr	r2, [pc, #36]	@ (8016d8c <vTaskSwitchContext+0xc4>)
 8016d68:	6013      	str	r3, [r2, #0]
}
 8016d6a:	bf00      	nop
 8016d6c:	371c      	adds	r7, #28
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d74:	4770      	bx	lr
 8016d76:	bf00      	nop
 8016d78:	20000f40 	.word	0x20000f40
 8016d7c:	20000f2c 	.word	0x20000f2c
 8016d80:	20000f20 	.word	0x20000f20
 8016d84:	20000e1c 	.word	0x20000e1c
 8016d88:	20000e18 	.word	0x20000e18
 8016d8c:	200001c0 	.word	0x200001c0

08016d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b082      	sub	sp, #8
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016d98:	f000 f852 	bl	8016e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016d9c:	4b06      	ldr	r3, [pc, #24]	@ (8016db8 <prvIdleTask+0x28>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	2b01      	cmp	r3, #1
 8016da2:	d9f9      	bls.n	8016d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016da4:	4b05      	ldr	r3, [pc, #20]	@ (8016dbc <prvIdleTask+0x2c>)
 8016da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016daa:	601a      	str	r2, [r3, #0]
 8016dac:	f3bf 8f4f 	dsb	sy
 8016db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016db4:	e7f0      	b.n	8016d98 <prvIdleTask+0x8>
 8016db6:	bf00      	nop
 8016db8:	20000e1c 	.word	0x20000e1c
 8016dbc:	e000ed04 	.word	0xe000ed04

08016dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b082      	sub	sp, #8
 8016dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	607b      	str	r3, [r7, #4]
 8016dca:	e00c      	b.n	8016de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016dcc:	687a      	ldr	r2, [r7, #4]
 8016dce:	4613      	mov	r3, r2
 8016dd0:	009b      	lsls	r3, r3, #2
 8016dd2:	4413      	add	r3, r2
 8016dd4:	009b      	lsls	r3, r3, #2
 8016dd6:	4a12      	ldr	r2, [pc, #72]	@ (8016e20 <prvInitialiseTaskLists+0x60>)
 8016dd8:	4413      	add	r3, r2
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7fe ffb9 	bl	8015d52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	3301      	adds	r3, #1
 8016de4:	607b      	str	r3, [r7, #4]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	2b06      	cmp	r3, #6
 8016dea:	d9ef      	bls.n	8016dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016dec:	480d      	ldr	r0, [pc, #52]	@ (8016e24 <prvInitialiseTaskLists+0x64>)
 8016dee:	f7fe ffb0 	bl	8015d52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016df2:	480d      	ldr	r0, [pc, #52]	@ (8016e28 <prvInitialiseTaskLists+0x68>)
 8016df4:	f7fe ffad 	bl	8015d52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016df8:	480c      	ldr	r0, [pc, #48]	@ (8016e2c <prvInitialiseTaskLists+0x6c>)
 8016dfa:	f7fe ffaa 	bl	8015d52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016dfe:	480c      	ldr	r0, [pc, #48]	@ (8016e30 <prvInitialiseTaskLists+0x70>)
 8016e00:	f7fe ffa7 	bl	8015d52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016e04:	480b      	ldr	r0, [pc, #44]	@ (8016e34 <prvInitialiseTaskLists+0x74>)
 8016e06:	f7fe ffa4 	bl	8015d52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8016e38 <prvInitialiseTaskLists+0x78>)
 8016e0c:	4a05      	ldr	r2, [pc, #20]	@ (8016e24 <prvInitialiseTaskLists+0x64>)
 8016e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016e10:	4b0a      	ldr	r3, [pc, #40]	@ (8016e3c <prvInitialiseTaskLists+0x7c>)
 8016e12:	4a05      	ldr	r2, [pc, #20]	@ (8016e28 <prvInitialiseTaskLists+0x68>)
 8016e14:	601a      	str	r2, [r3, #0]
}
 8016e16:	bf00      	nop
 8016e18:	3708      	adds	r7, #8
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	bf00      	nop
 8016e20:	20000e1c 	.word	0x20000e1c
 8016e24:	20000ea8 	.word	0x20000ea8
 8016e28:	20000ebc 	.word	0x20000ebc
 8016e2c:	20000ed8 	.word	0x20000ed8
 8016e30:	20000eec 	.word	0x20000eec
 8016e34:	20000f04 	.word	0x20000f04
 8016e38:	20000ed0 	.word	0x20000ed0
 8016e3c:	20000ed4 	.word	0x20000ed4

08016e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b082      	sub	sp, #8
 8016e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e46:	e019      	b.n	8016e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016e48:	f000 fc56 	bl	80176f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e4c:	4b10      	ldr	r3, [pc, #64]	@ (8016e90 <prvCheckTasksWaitingTermination+0x50>)
 8016e4e:	68db      	ldr	r3, [r3, #12]
 8016e50:	68db      	ldr	r3, [r3, #12]
 8016e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	3304      	adds	r3, #4
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7ff f804 	bl	8015e66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8016e94 <prvCheckTasksWaitingTermination+0x54>)
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	3b01      	subs	r3, #1
 8016e64:	4a0b      	ldr	r2, [pc, #44]	@ (8016e94 <prvCheckTasksWaitingTermination+0x54>)
 8016e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016e68:	4b0b      	ldr	r3, [pc, #44]	@ (8016e98 <prvCheckTasksWaitingTermination+0x58>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	3b01      	subs	r3, #1
 8016e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8016e98 <prvCheckTasksWaitingTermination+0x58>)
 8016e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016e72:	f000 fc73 	bl	801775c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016e76:	6878      	ldr	r0, [r7, #4]
 8016e78:	f000 f810 	bl	8016e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e7c:	4b06      	ldr	r3, [pc, #24]	@ (8016e98 <prvCheckTasksWaitingTermination+0x58>)
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d1e1      	bne.n	8016e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016e84:	bf00      	nop
 8016e86:	bf00      	nop
 8016e88:	3708      	adds	r7, #8
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}
 8016e8e:	bf00      	nop
 8016e90:	20000eec 	.word	0x20000eec
 8016e94:	20000f18 	.word	0x20000f18
 8016e98:	20000f00 	.word	0x20000f00

08016e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b084      	sub	sp, #16
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	334c      	adds	r3, #76	@ 0x4c
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f003 fdf5 	bl	801aa98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d108      	bne.n	8016eca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f000 fe0b 	bl	8017ad8 <vPortFree>
				vPortFree( pxTCB );
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f000 fe08 	bl	8017ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016ec8:	e019      	b.n	8016efe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8016ed0:	2b01      	cmp	r3, #1
 8016ed2:	d103      	bne.n	8016edc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f000 fdff 	bl	8017ad8 <vPortFree>
	}
 8016eda:	e010      	b.n	8016efe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8016ee2:	2b02      	cmp	r3, #2
 8016ee4:	d00b      	beq.n	8016efe <prvDeleteTCB+0x62>
	__asm volatile
 8016ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016eea:	f383 8811 	msr	BASEPRI, r3
 8016eee:	f3bf 8f6f 	isb	sy
 8016ef2:	f3bf 8f4f 	dsb	sy
 8016ef6:	60fb      	str	r3, [r7, #12]
}
 8016ef8:	bf00      	nop
 8016efa:	bf00      	nop
 8016efc:	e7fd      	b.n	8016efa <prvDeleteTCB+0x5e>
	}
 8016efe:	bf00      	nop
 8016f00:	3710      	adds	r7, #16
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}
	...

08016f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016f08:	b480      	push	{r7}
 8016f0a:	b083      	sub	sp, #12
 8016f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8016f40 <prvResetNextTaskUnblockTime+0x38>)
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d104      	bne.n	8016f22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016f18:	4b0a      	ldr	r3, [pc, #40]	@ (8016f44 <prvResetNextTaskUnblockTime+0x3c>)
 8016f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016f20:	e008      	b.n	8016f34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f22:	4b07      	ldr	r3, [pc, #28]	@ (8016f40 <prvResetNextTaskUnblockTime+0x38>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	68db      	ldr	r3, [r3, #12]
 8016f28:	68db      	ldr	r3, [r3, #12]
 8016f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	4a04      	ldr	r2, [pc, #16]	@ (8016f44 <prvResetNextTaskUnblockTime+0x3c>)
 8016f32:	6013      	str	r3, [r2, #0]
}
 8016f34:	bf00      	nop
 8016f36:	370c      	adds	r7, #12
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3e:	4770      	bx	lr
 8016f40:	20000ed0 	.word	0x20000ed0
 8016f44:	20000f38 	.word	0x20000f38

08016f48 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016f48:	b480      	push	{r7}
 8016f4a:	b083      	sub	sp, #12
 8016f4c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016f4e:	4b05      	ldr	r3, [pc, #20]	@ (8016f64 <xTaskGetCurrentTaskHandle+0x1c>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016f54:	687b      	ldr	r3, [r7, #4]
	}
 8016f56:	4618      	mov	r0, r3
 8016f58:	370c      	adds	r7, #12
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f60:	4770      	bx	lr
 8016f62:	bf00      	nop
 8016f64:	20000e18 	.word	0x20000e18

08016f68 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b086      	sub	sp, #24
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	60f8      	str	r0, [r7, #12]
 8016f70:	60b9      	str	r1, [r7, #8]
 8016f72:	607a      	str	r2, [r7, #4]
 8016f74:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8016f76:	f000 fbbf 	bl	80176f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016f7a:	4b29      	ldr	r3, [pc, #164]	@ (8017020 <xTaskNotifyWait+0xb8>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	2b02      	cmp	r3, #2
 8016f86:	d01c      	beq.n	8016fc2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8016f88:	4b25      	ldr	r3, [pc, #148]	@ (8017020 <xTaskNotifyWait+0xb8>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8016f90:	68fa      	ldr	r2, [r7, #12]
 8016f92:	43d2      	mvns	r2, r2
 8016f94:	400a      	ands	r2, r1
 8016f96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016f9a:	4b21      	ldr	r3, [pc, #132]	@ (8017020 <xTaskNotifyWait+0xb8>)
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	2201      	movs	r2, #1
 8016fa0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d00b      	beq.n	8016fc2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016faa:	2101      	movs	r1, #1
 8016fac:	6838      	ldr	r0, [r7, #0]
 8016fae:	f000 fa09 	bl	80173c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8016fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8017024 <xTaskNotifyWait+0xbc>)
 8016fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016fb8:	601a      	str	r2, [r3, #0]
 8016fba:	f3bf 8f4f 	dsb	sy
 8016fbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016fc2:	f000 fbcb 	bl	801775c <vPortExitCritical>

		taskENTER_CRITICAL();
 8016fc6:	f000 fb97 	bl	80176f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d005      	beq.n	8016fdc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8016fd0:	4b13      	ldr	r3, [pc, #76]	@ (8017020 <xTaskNotifyWait+0xb8>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016fdc:	4b10      	ldr	r3, [pc, #64]	@ (8017020 <xTaskNotifyWait+0xb8>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8016fe4:	b2db      	uxtb	r3, r3
 8016fe6:	2b02      	cmp	r3, #2
 8016fe8:	d002      	beq.n	8016ff0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8016fea:	2300      	movs	r3, #0
 8016fec:	617b      	str	r3, [r7, #20]
 8016fee:	e00a      	b.n	8017006 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8016ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8017020 <xTaskNotifyWait+0xb8>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8016ff8:	68ba      	ldr	r2, [r7, #8]
 8016ffa:	43d2      	mvns	r2, r2
 8016ffc:	400a      	ands	r2, r1
 8016ffe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8017002:	2301      	movs	r3, #1
 8017004:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017006:	4b06      	ldr	r3, [pc, #24]	@ (8017020 <xTaskNotifyWait+0xb8>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	2200      	movs	r2, #0
 801700c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8017010:	f000 fba4 	bl	801775c <vPortExitCritical>

		return xReturn;
 8017014:	697b      	ldr	r3, [r7, #20]
	}
 8017016:	4618      	mov	r0, r3
 8017018:	3718      	adds	r7, #24
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}
 801701e:	bf00      	nop
 8017020:	20000e18 	.word	0x20000e18
 8017024:	e000ed04 	.word	0xe000ed04

08017028 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8017028:	b580      	push	{r7, lr}
 801702a:	b08a      	sub	sp, #40	@ 0x28
 801702c:	af00      	add	r7, sp, #0
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	603b      	str	r3, [r7, #0]
 8017034:	4613      	mov	r3, r2
 8017036:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8017038:	2301      	movs	r3, #1
 801703a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d10b      	bne.n	801705a <xTaskGenericNotify+0x32>
	__asm volatile
 8017042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017046:	f383 8811 	msr	BASEPRI, r3
 801704a:	f3bf 8f6f 	isb	sy
 801704e:	f3bf 8f4f 	dsb	sy
 8017052:	61bb      	str	r3, [r7, #24]
}
 8017054:	bf00      	nop
 8017056:	bf00      	nop
 8017058:	e7fd      	b.n	8017056 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801705e:	f000 fb4b 	bl	80176f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d004      	beq.n	8017072 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017068:	6a3b      	ldr	r3, [r7, #32]
 801706a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017072:	6a3b      	ldr	r3, [r7, #32]
 8017074:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8017078:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801707a:	6a3b      	ldr	r3, [r7, #32]
 801707c:	2202      	movs	r2, #2
 801707e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8017082:	79fb      	ldrb	r3, [r7, #7]
 8017084:	2b04      	cmp	r3, #4
 8017086:	d82e      	bhi.n	80170e6 <xTaskGenericNotify+0xbe>
 8017088:	a201      	add	r2, pc, #4	@ (adr r2, 8017090 <xTaskGenericNotify+0x68>)
 801708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801708e:	bf00      	nop
 8017090:	0801710b 	.word	0x0801710b
 8017094:	080170a5 	.word	0x080170a5
 8017098:	080170b7 	.word	0x080170b7
 801709c:	080170c7 	.word	0x080170c7
 80170a0:	080170d1 	.word	0x080170d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80170a4:	6a3b      	ldr	r3, [r7, #32]
 80170a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	431a      	orrs	r2, r3
 80170ae:	6a3b      	ldr	r3, [r7, #32]
 80170b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80170b4:	e02c      	b.n	8017110 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80170b6:	6a3b      	ldr	r3, [r7, #32]
 80170b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80170bc:	1c5a      	adds	r2, r3, #1
 80170be:	6a3b      	ldr	r3, [r7, #32]
 80170c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80170c4:	e024      	b.n	8017110 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80170c6:	6a3b      	ldr	r3, [r7, #32]
 80170c8:	68ba      	ldr	r2, [r7, #8]
 80170ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80170ce:	e01f      	b.n	8017110 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80170d0:	7ffb      	ldrb	r3, [r7, #31]
 80170d2:	2b02      	cmp	r3, #2
 80170d4:	d004      	beq.n	80170e0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80170d6:	6a3b      	ldr	r3, [r7, #32]
 80170d8:	68ba      	ldr	r2, [r7, #8]
 80170da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80170de:	e017      	b.n	8017110 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80170e0:	2300      	movs	r3, #0
 80170e2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80170e4:	e014      	b.n	8017110 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80170e6:	6a3b      	ldr	r3, [r7, #32]
 80170e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80170ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170f0:	d00d      	beq.n	801710e <xTaskGenericNotify+0xe6>
	__asm volatile
 80170f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170f6:	f383 8811 	msr	BASEPRI, r3
 80170fa:	f3bf 8f6f 	isb	sy
 80170fe:	f3bf 8f4f 	dsb	sy
 8017102:	617b      	str	r3, [r7, #20]
}
 8017104:	bf00      	nop
 8017106:	bf00      	nop
 8017108:	e7fd      	b.n	8017106 <xTaskGenericNotify+0xde>
					break;
 801710a:	bf00      	nop
 801710c:	e000      	b.n	8017110 <xTaskGenericNotify+0xe8>

					break;
 801710e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017110:	7ffb      	ldrb	r3, [r7, #31]
 8017112:	2b01      	cmp	r3, #1
 8017114:	d13a      	bne.n	801718c <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017116:	6a3b      	ldr	r3, [r7, #32]
 8017118:	3304      	adds	r3, #4
 801711a:	4618      	mov	r0, r3
 801711c:	f7fe fea3 	bl	8015e66 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8017120:	6a3b      	ldr	r3, [r7, #32]
 8017122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017124:	2201      	movs	r2, #1
 8017126:	409a      	lsls	r2, r3
 8017128:	4b1c      	ldr	r3, [pc, #112]	@ (801719c <xTaskGenericNotify+0x174>)
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	4313      	orrs	r3, r2
 801712e:	4a1b      	ldr	r2, [pc, #108]	@ (801719c <xTaskGenericNotify+0x174>)
 8017130:	6013      	str	r3, [r2, #0]
 8017132:	6a3b      	ldr	r3, [r7, #32]
 8017134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017136:	4613      	mov	r3, r2
 8017138:	009b      	lsls	r3, r3, #2
 801713a:	4413      	add	r3, r2
 801713c:	009b      	lsls	r3, r3, #2
 801713e:	4a18      	ldr	r2, [pc, #96]	@ (80171a0 <xTaskGenericNotify+0x178>)
 8017140:	441a      	add	r2, r3
 8017142:	6a3b      	ldr	r3, [r7, #32]
 8017144:	3304      	adds	r3, #4
 8017146:	4619      	mov	r1, r3
 8017148:	4610      	mov	r0, r2
 801714a:	f7fe fe2f 	bl	8015dac <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801714e:	6a3b      	ldr	r3, [r7, #32]
 8017150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017152:	2b00      	cmp	r3, #0
 8017154:	d00b      	beq.n	801716e <xTaskGenericNotify+0x146>
	__asm volatile
 8017156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801715a:	f383 8811 	msr	BASEPRI, r3
 801715e:	f3bf 8f6f 	isb	sy
 8017162:	f3bf 8f4f 	dsb	sy
 8017166:	613b      	str	r3, [r7, #16]
}
 8017168:	bf00      	nop
 801716a:	bf00      	nop
 801716c:	e7fd      	b.n	801716a <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801716e:	6a3b      	ldr	r3, [r7, #32]
 8017170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017172:	4b0c      	ldr	r3, [pc, #48]	@ (80171a4 <xTaskGenericNotify+0x17c>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017178:	429a      	cmp	r2, r3
 801717a:	d907      	bls.n	801718c <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801717c:	4b0a      	ldr	r3, [pc, #40]	@ (80171a8 <xTaskGenericNotify+0x180>)
 801717e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017182:	601a      	str	r2, [r3, #0]
 8017184:	f3bf 8f4f 	dsb	sy
 8017188:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801718c:	f000 fae6 	bl	801775c <vPortExitCritical>

		return xReturn;
 8017190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8017192:	4618      	mov	r0, r3
 8017194:	3728      	adds	r7, #40	@ 0x28
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}
 801719a:	bf00      	nop
 801719c:	20000f20 	.word	0x20000f20
 80171a0:	20000e1c 	.word	0x20000e1c
 80171a4:	20000e18 	.word	0x20000e18
 80171a8:	e000ed04 	.word	0xe000ed04

080171ac <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b08e      	sub	sp, #56	@ 0x38
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	60f8      	str	r0, [r7, #12]
 80171b4:	60b9      	str	r1, [r7, #8]
 80171b6:	603b      	str	r3, [r7, #0]
 80171b8:	4613      	mov	r3, r2
 80171ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80171bc:	2301      	movs	r3, #1
 80171be:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d10b      	bne.n	80171de <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80171c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171ca:	f383 8811 	msr	BASEPRI, r3
 80171ce:	f3bf 8f6f 	isb	sy
 80171d2:	f3bf 8f4f 	dsb	sy
 80171d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80171d8:	bf00      	nop
 80171da:	bf00      	nop
 80171dc:	e7fd      	b.n	80171da <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80171de:	f000 fb6b 	bl	80178b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80171e6:	f3ef 8211 	mrs	r2, BASEPRI
 80171ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171ee:	f383 8811 	msr	BASEPRI, r3
 80171f2:	f3bf 8f6f 	isb	sy
 80171f6:	f3bf 8f4f 	dsb	sy
 80171fa:	623a      	str	r2, [r7, #32]
 80171fc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80171fe:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017200:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d004      	beq.n	8017212 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801720a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801720e:	683b      	ldr	r3, [r7, #0]
 8017210:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017214:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8017218:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801721e:	2202      	movs	r2, #2
 8017220:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8017224:	79fb      	ldrb	r3, [r7, #7]
 8017226:	2b04      	cmp	r3, #4
 8017228:	d82e      	bhi.n	8017288 <xTaskGenericNotifyFromISR+0xdc>
 801722a:	a201      	add	r2, pc, #4	@ (adr r2, 8017230 <xTaskGenericNotifyFromISR+0x84>)
 801722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017230:	080172ad 	.word	0x080172ad
 8017234:	08017245 	.word	0x08017245
 8017238:	08017257 	.word	0x08017257
 801723c:	08017267 	.word	0x08017267
 8017240:	08017271 	.word	0x08017271
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017246:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801724a:	68bb      	ldr	r3, [r7, #8]
 801724c:	431a      	orrs	r2, r3
 801724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017250:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8017254:	e02d      	b.n	80172b2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801725c:	1c5a      	adds	r2, r3, #1
 801725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017260:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8017264:	e025      	b.n	80172b2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017268:	68ba      	ldr	r2, [r7, #8]
 801726a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801726e:	e020      	b.n	80172b2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017270:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017274:	2b02      	cmp	r3, #2
 8017276:	d004      	beq.n	8017282 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801727a:	68ba      	ldr	r2, [r7, #8]
 801727c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017280:	e017      	b.n	80172b2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8017282:	2300      	movs	r3, #0
 8017284:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8017286:	e014      	b.n	80172b2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801728a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017292:	d00d      	beq.n	80172b0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8017294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017298:	f383 8811 	msr	BASEPRI, r3
 801729c:	f3bf 8f6f 	isb	sy
 80172a0:	f3bf 8f4f 	dsb	sy
 80172a4:	61bb      	str	r3, [r7, #24]
}
 80172a6:	bf00      	nop
 80172a8:	bf00      	nop
 80172aa:	e7fd      	b.n	80172a8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80172ac:	bf00      	nop
 80172ae:	e000      	b.n	80172b2 <xTaskGenericNotifyFromISR+0x106>
					break;
 80172b0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80172b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80172b6:	2b01      	cmp	r3, #1
 80172b8:	d146      	bne.n	8017348 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80172ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d00b      	beq.n	80172da <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80172c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172c6:	f383 8811 	msr	BASEPRI, r3
 80172ca:	f3bf 8f6f 	isb	sy
 80172ce:	f3bf 8f4f 	dsb	sy
 80172d2:	617b      	str	r3, [r7, #20]
}
 80172d4:	bf00      	nop
 80172d6:	bf00      	nop
 80172d8:	e7fd      	b.n	80172d6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80172da:	4b21      	ldr	r3, [pc, #132]	@ (8017360 <xTaskGenericNotifyFromISR+0x1b4>)
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d11c      	bne.n	801731c <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80172e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172e4:	3304      	adds	r3, #4
 80172e6:	4618      	mov	r0, r3
 80172e8:	f7fe fdbd 	bl	8015e66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80172ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172f0:	2201      	movs	r2, #1
 80172f2:	409a      	lsls	r2, r3
 80172f4:	4b1b      	ldr	r3, [pc, #108]	@ (8017364 <xTaskGenericNotifyFromISR+0x1b8>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	4313      	orrs	r3, r2
 80172fa:	4a1a      	ldr	r2, [pc, #104]	@ (8017364 <xTaskGenericNotifyFromISR+0x1b8>)
 80172fc:	6013      	str	r3, [r2, #0]
 80172fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017302:	4613      	mov	r3, r2
 8017304:	009b      	lsls	r3, r3, #2
 8017306:	4413      	add	r3, r2
 8017308:	009b      	lsls	r3, r3, #2
 801730a:	4a17      	ldr	r2, [pc, #92]	@ (8017368 <xTaskGenericNotifyFromISR+0x1bc>)
 801730c:	441a      	add	r2, r3
 801730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017310:	3304      	adds	r3, #4
 8017312:	4619      	mov	r1, r3
 8017314:	4610      	mov	r0, r2
 8017316:	f7fe fd49 	bl	8015dac <vListInsertEnd>
 801731a:	e005      	b.n	8017328 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801731e:	3318      	adds	r3, #24
 8017320:	4619      	mov	r1, r3
 8017322:	4812      	ldr	r0, [pc, #72]	@ (801736c <xTaskGenericNotifyFromISR+0x1c0>)
 8017324:	f7fe fd42 	bl	8015dac <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801732a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801732c:	4b10      	ldr	r3, [pc, #64]	@ (8017370 <xTaskGenericNotifyFromISR+0x1c4>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017332:	429a      	cmp	r2, r3
 8017334:	d908      	bls.n	8017348 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017338:	2b00      	cmp	r3, #0
 801733a:	d002      	beq.n	8017342 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801733c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801733e:	2201      	movs	r2, #1
 8017340:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017342:	4b0c      	ldr	r3, [pc, #48]	@ (8017374 <xTaskGenericNotifyFromISR+0x1c8>)
 8017344:	2201      	movs	r2, #1
 8017346:	601a      	str	r2, [r3, #0]
 8017348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801734a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801734c:	693b      	ldr	r3, [r7, #16]
 801734e:	f383 8811 	msr	BASEPRI, r3
}
 8017352:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8017354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8017356:	4618      	mov	r0, r3
 8017358:	3738      	adds	r7, #56	@ 0x38
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}
 801735e:	bf00      	nop
 8017360:	20000f40 	.word	0x20000f40
 8017364:	20000f20 	.word	0x20000f20
 8017368:	20000e1c 	.word	0x20000e1c
 801736c:	20000ed8 	.word	0x20000ed8
 8017370:	20000e18 	.word	0x20000e18
 8017374:	20000f2c 	.word	0x20000f2c

08017378 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8017378:	b580      	push	{r7, lr}
 801737a:	b084      	sub	sp, #16
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d102      	bne.n	801738c <xTaskNotifyStateClear+0x14>
 8017386:	4b0e      	ldr	r3, [pc, #56]	@ (80173c0 <xTaskNotifyStateClear+0x48>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	e000      	b.n	801738e <xTaskNotifyStateClear+0x16>
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8017390:	f000 f9b2 	bl	80176f8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 801739a:	b2db      	uxtb	r3, r3
 801739c:	2b02      	cmp	r3, #2
 801739e:	d106      	bne.n	80173ae <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80173a0:	68bb      	ldr	r3, [r7, #8]
 80173a2:	2200      	movs	r2, #0
 80173a4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 80173a8:	2301      	movs	r3, #1
 80173aa:	60fb      	str	r3, [r7, #12]
 80173ac:	e001      	b.n	80173b2 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80173ae:	2300      	movs	r3, #0
 80173b0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80173b2:	f000 f9d3 	bl	801775c <vPortExitCritical>

		return xReturn;
 80173b6:	68fb      	ldr	r3, [r7, #12]
	}
 80173b8:	4618      	mov	r0, r3
 80173ba:	3710      	adds	r7, #16
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}
 80173c0:	20000e18 	.word	0x20000e18

080173c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b084      	sub	sp, #16
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
 80173cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80173ce:	4b29      	ldr	r3, [pc, #164]	@ (8017474 <prvAddCurrentTaskToDelayedList+0xb0>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80173d4:	4b28      	ldr	r3, [pc, #160]	@ (8017478 <prvAddCurrentTaskToDelayedList+0xb4>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	3304      	adds	r3, #4
 80173da:	4618      	mov	r0, r3
 80173dc:	f7fe fd43 	bl	8015e66 <uxListRemove>
 80173e0:	4603      	mov	r3, r0
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d10b      	bne.n	80173fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80173e6:	4b24      	ldr	r3, [pc, #144]	@ (8017478 <prvAddCurrentTaskToDelayedList+0xb4>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173ec:	2201      	movs	r2, #1
 80173ee:	fa02 f303 	lsl.w	r3, r2, r3
 80173f2:	43da      	mvns	r2, r3
 80173f4:	4b21      	ldr	r3, [pc, #132]	@ (801747c <prvAddCurrentTaskToDelayedList+0xb8>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	4013      	ands	r3, r2
 80173fa:	4a20      	ldr	r2, [pc, #128]	@ (801747c <prvAddCurrentTaskToDelayedList+0xb8>)
 80173fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017404:	d10a      	bne.n	801741c <prvAddCurrentTaskToDelayedList+0x58>
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d007      	beq.n	801741c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801740c:	4b1a      	ldr	r3, [pc, #104]	@ (8017478 <prvAddCurrentTaskToDelayedList+0xb4>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	3304      	adds	r3, #4
 8017412:	4619      	mov	r1, r3
 8017414:	481a      	ldr	r0, [pc, #104]	@ (8017480 <prvAddCurrentTaskToDelayedList+0xbc>)
 8017416:	f7fe fcc9 	bl	8015dac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801741a:	e026      	b.n	801746a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801741c:	68fa      	ldr	r2, [r7, #12]
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	4413      	add	r3, r2
 8017422:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017424:	4b14      	ldr	r3, [pc, #80]	@ (8017478 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	68ba      	ldr	r2, [r7, #8]
 801742a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801742c:	68ba      	ldr	r2, [r7, #8]
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	429a      	cmp	r2, r3
 8017432:	d209      	bcs.n	8017448 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017434:	4b13      	ldr	r3, [pc, #76]	@ (8017484 <prvAddCurrentTaskToDelayedList+0xc0>)
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	4b0f      	ldr	r3, [pc, #60]	@ (8017478 <prvAddCurrentTaskToDelayedList+0xb4>)
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	3304      	adds	r3, #4
 801743e:	4619      	mov	r1, r3
 8017440:	4610      	mov	r0, r2
 8017442:	f7fe fcd7 	bl	8015df4 <vListInsert>
}
 8017446:	e010      	b.n	801746a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017448:	4b0f      	ldr	r3, [pc, #60]	@ (8017488 <prvAddCurrentTaskToDelayedList+0xc4>)
 801744a:	681a      	ldr	r2, [r3, #0]
 801744c:	4b0a      	ldr	r3, [pc, #40]	@ (8017478 <prvAddCurrentTaskToDelayedList+0xb4>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	3304      	adds	r3, #4
 8017452:	4619      	mov	r1, r3
 8017454:	4610      	mov	r0, r2
 8017456:	f7fe fccd 	bl	8015df4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801745a:	4b0c      	ldr	r3, [pc, #48]	@ (801748c <prvAddCurrentTaskToDelayedList+0xc8>)
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	68ba      	ldr	r2, [r7, #8]
 8017460:	429a      	cmp	r2, r3
 8017462:	d202      	bcs.n	801746a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017464:	4a09      	ldr	r2, [pc, #36]	@ (801748c <prvAddCurrentTaskToDelayedList+0xc8>)
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	6013      	str	r3, [r2, #0]
}
 801746a:	bf00      	nop
 801746c:	3710      	adds	r7, #16
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}
 8017472:	bf00      	nop
 8017474:	20000f1c 	.word	0x20000f1c
 8017478:	20000e18 	.word	0x20000e18
 801747c:	20000f20 	.word	0x20000f20
 8017480:	20000f04 	.word	0x20000f04
 8017484:	20000ed4 	.word	0x20000ed4
 8017488:	20000ed0 	.word	0x20000ed0
 801748c:	20000f38 	.word	0x20000f38

08017490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017490:	b480      	push	{r7}
 8017492:	b085      	sub	sp, #20
 8017494:	af00      	add	r7, sp, #0
 8017496:	60f8      	str	r0, [r7, #12]
 8017498:	60b9      	str	r1, [r7, #8]
 801749a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	3b04      	subs	r3, #4
 80174a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80174a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	3b04      	subs	r3, #4
 80174ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	f023 0201 	bic.w	r2, r3, #1
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	3b04      	subs	r3, #4
 80174be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80174c0:	4a0c      	ldr	r2, [pc, #48]	@ (80174f4 <pxPortInitialiseStack+0x64>)
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	3b14      	subs	r3, #20
 80174ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	3b04      	subs	r3, #4
 80174d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	f06f 0202 	mvn.w	r2, #2
 80174de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	3b20      	subs	r3, #32
 80174e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80174e6:	68fb      	ldr	r3, [r7, #12]
}
 80174e8:	4618      	mov	r0, r3
 80174ea:	3714      	adds	r7, #20
 80174ec:	46bd      	mov	sp, r7
 80174ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f2:	4770      	bx	lr
 80174f4:	080174f9 	.word	0x080174f9

080174f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80174f8:	b480      	push	{r7}
 80174fa:	b085      	sub	sp, #20
 80174fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80174fe:	2300      	movs	r3, #0
 8017500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017502:	4b13      	ldr	r3, [pc, #76]	@ (8017550 <prvTaskExitError+0x58>)
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801750a:	d00b      	beq.n	8017524 <prvTaskExitError+0x2c>
	__asm volatile
 801750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017510:	f383 8811 	msr	BASEPRI, r3
 8017514:	f3bf 8f6f 	isb	sy
 8017518:	f3bf 8f4f 	dsb	sy
 801751c:	60fb      	str	r3, [r7, #12]
}
 801751e:	bf00      	nop
 8017520:	bf00      	nop
 8017522:	e7fd      	b.n	8017520 <prvTaskExitError+0x28>
	__asm volatile
 8017524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017528:	f383 8811 	msr	BASEPRI, r3
 801752c:	f3bf 8f6f 	isb	sy
 8017530:	f3bf 8f4f 	dsb	sy
 8017534:	60bb      	str	r3, [r7, #8]
}
 8017536:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017538:	bf00      	nop
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d0fc      	beq.n	801753a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017540:	bf00      	nop
 8017542:	bf00      	nop
 8017544:	3714      	adds	r7, #20
 8017546:	46bd      	mov	sp, r7
 8017548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop
 8017550:	2000003c 	.word	0x2000003c
	...

08017560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017560:	4b07      	ldr	r3, [pc, #28]	@ (8017580 <pxCurrentTCBConst2>)
 8017562:	6819      	ldr	r1, [r3, #0]
 8017564:	6808      	ldr	r0, [r1, #0]
 8017566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801756a:	f380 8809 	msr	PSP, r0
 801756e:	f3bf 8f6f 	isb	sy
 8017572:	f04f 0000 	mov.w	r0, #0
 8017576:	f380 8811 	msr	BASEPRI, r0
 801757a:	4770      	bx	lr
 801757c:	f3af 8000 	nop.w

08017580 <pxCurrentTCBConst2>:
 8017580:	20000e18 	.word	0x20000e18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017584:	bf00      	nop
 8017586:	bf00      	nop

08017588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017588:	4808      	ldr	r0, [pc, #32]	@ (80175ac <prvPortStartFirstTask+0x24>)
 801758a:	6800      	ldr	r0, [r0, #0]
 801758c:	6800      	ldr	r0, [r0, #0]
 801758e:	f380 8808 	msr	MSP, r0
 8017592:	f04f 0000 	mov.w	r0, #0
 8017596:	f380 8814 	msr	CONTROL, r0
 801759a:	b662      	cpsie	i
 801759c:	b661      	cpsie	f
 801759e:	f3bf 8f4f 	dsb	sy
 80175a2:	f3bf 8f6f 	isb	sy
 80175a6:	df00      	svc	0
 80175a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80175aa:	bf00      	nop
 80175ac:	e000ed08 	.word	0xe000ed08

080175b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b086      	sub	sp, #24
 80175b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80175b6:	4b47      	ldr	r3, [pc, #284]	@ (80176d4 <xPortStartScheduler+0x124>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	4a47      	ldr	r2, [pc, #284]	@ (80176d8 <xPortStartScheduler+0x128>)
 80175bc:	4293      	cmp	r3, r2
 80175be:	d10b      	bne.n	80175d8 <xPortStartScheduler+0x28>
	__asm volatile
 80175c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175c4:	f383 8811 	msr	BASEPRI, r3
 80175c8:	f3bf 8f6f 	isb	sy
 80175cc:	f3bf 8f4f 	dsb	sy
 80175d0:	60fb      	str	r3, [r7, #12]
}
 80175d2:	bf00      	nop
 80175d4:	bf00      	nop
 80175d6:	e7fd      	b.n	80175d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80175d8:	4b3e      	ldr	r3, [pc, #248]	@ (80176d4 <xPortStartScheduler+0x124>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	4a3f      	ldr	r2, [pc, #252]	@ (80176dc <xPortStartScheduler+0x12c>)
 80175de:	4293      	cmp	r3, r2
 80175e0:	d10b      	bne.n	80175fa <xPortStartScheduler+0x4a>
	__asm volatile
 80175e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175e6:	f383 8811 	msr	BASEPRI, r3
 80175ea:	f3bf 8f6f 	isb	sy
 80175ee:	f3bf 8f4f 	dsb	sy
 80175f2:	613b      	str	r3, [r7, #16]
}
 80175f4:	bf00      	nop
 80175f6:	bf00      	nop
 80175f8:	e7fd      	b.n	80175f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80175fa:	4b39      	ldr	r3, [pc, #228]	@ (80176e0 <xPortStartScheduler+0x130>)
 80175fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80175fe:	697b      	ldr	r3, [r7, #20]
 8017600:	781b      	ldrb	r3, [r3, #0]
 8017602:	b2db      	uxtb	r3, r3
 8017604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	22ff      	movs	r2, #255	@ 0xff
 801760a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801760c:	697b      	ldr	r3, [r7, #20]
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	b2db      	uxtb	r3, r3
 8017612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017614:	78fb      	ldrb	r3, [r7, #3]
 8017616:	b2db      	uxtb	r3, r3
 8017618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801761c:	b2da      	uxtb	r2, r3
 801761e:	4b31      	ldr	r3, [pc, #196]	@ (80176e4 <xPortStartScheduler+0x134>)
 8017620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017622:	4b31      	ldr	r3, [pc, #196]	@ (80176e8 <xPortStartScheduler+0x138>)
 8017624:	2207      	movs	r2, #7
 8017626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017628:	e009      	b.n	801763e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801762a:	4b2f      	ldr	r3, [pc, #188]	@ (80176e8 <xPortStartScheduler+0x138>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	3b01      	subs	r3, #1
 8017630:	4a2d      	ldr	r2, [pc, #180]	@ (80176e8 <xPortStartScheduler+0x138>)
 8017632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017634:	78fb      	ldrb	r3, [r7, #3]
 8017636:	b2db      	uxtb	r3, r3
 8017638:	005b      	lsls	r3, r3, #1
 801763a:	b2db      	uxtb	r3, r3
 801763c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801763e:	78fb      	ldrb	r3, [r7, #3]
 8017640:	b2db      	uxtb	r3, r3
 8017642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017646:	2b80      	cmp	r3, #128	@ 0x80
 8017648:	d0ef      	beq.n	801762a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801764a:	4b27      	ldr	r3, [pc, #156]	@ (80176e8 <xPortStartScheduler+0x138>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	f1c3 0307 	rsb	r3, r3, #7
 8017652:	2b04      	cmp	r3, #4
 8017654:	d00b      	beq.n	801766e <xPortStartScheduler+0xbe>
	__asm volatile
 8017656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801765a:	f383 8811 	msr	BASEPRI, r3
 801765e:	f3bf 8f6f 	isb	sy
 8017662:	f3bf 8f4f 	dsb	sy
 8017666:	60bb      	str	r3, [r7, #8]
}
 8017668:	bf00      	nop
 801766a:	bf00      	nop
 801766c:	e7fd      	b.n	801766a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801766e:	4b1e      	ldr	r3, [pc, #120]	@ (80176e8 <xPortStartScheduler+0x138>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	021b      	lsls	r3, r3, #8
 8017674:	4a1c      	ldr	r2, [pc, #112]	@ (80176e8 <xPortStartScheduler+0x138>)
 8017676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017678:	4b1b      	ldr	r3, [pc, #108]	@ (80176e8 <xPortStartScheduler+0x138>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017680:	4a19      	ldr	r2, [pc, #100]	@ (80176e8 <xPortStartScheduler+0x138>)
 8017682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	b2da      	uxtb	r2, r3
 8017688:	697b      	ldr	r3, [r7, #20]
 801768a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801768c:	4b17      	ldr	r3, [pc, #92]	@ (80176ec <xPortStartScheduler+0x13c>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	4a16      	ldr	r2, [pc, #88]	@ (80176ec <xPortStartScheduler+0x13c>)
 8017692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8017696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017698:	4b14      	ldr	r3, [pc, #80]	@ (80176ec <xPortStartScheduler+0x13c>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	4a13      	ldr	r2, [pc, #76]	@ (80176ec <xPortStartScheduler+0x13c>)
 801769e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80176a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80176a4:	f000 f8da 	bl	801785c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80176a8:	4b11      	ldr	r3, [pc, #68]	@ (80176f0 <xPortStartScheduler+0x140>)
 80176aa:	2200      	movs	r2, #0
 80176ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80176ae:	f000 f8f9 	bl	80178a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80176b2:	4b10      	ldr	r3, [pc, #64]	@ (80176f4 <xPortStartScheduler+0x144>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	4a0f      	ldr	r2, [pc, #60]	@ (80176f4 <xPortStartScheduler+0x144>)
 80176b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80176bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80176be:	f7ff ff63 	bl	8017588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80176c2:	f7ff fb01 	bl	8016cc8 <vTaskSwitchContext>
	prvTaskExitError();
 80176c6:	f7ff ff17 	bl	80174f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80176ca:	2300      	movs	r3, #0
}
 80176cc:	4618      	mov	r0, r3
 80176ce:	3718      	adds	r7, #24
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}
 80176d4:	e000ed00 	.word	0xe000ed00
 80176d8:	410fc271 	.word	0x410fc271
 80176dc:	410fc270 	.word	0x410fc270
 80176e0:	e000e400 	.word	0xe000e400
 80176e4:	20000f44 	.word	0x20000f44
 80176e8:	20000f48 	.word	0x20000f48
 80176ec:	e000ed20 	.word	0xe000ed20
 80176f0:	2000003c 	.word	0x2000003c
 80176f4:	e000ef34 	.word	0xe000ef34

080176f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80176f8:	b480      	push	{r7}
 80176fa:	b083      	sub	sp, #12
 80176fc:	af00      	add	r7, sp, #0
	__asm volatile
 80176fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017702:	f383 8811 	msr	BASEPRI, r3
 8017706:	f3bf 8f6f 	isb	sy
 801770a:	f3bf 8f4f 	dsb	sy
 801770e:	607b      	str	r3, [r7, #4]
}
 8017710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017712:	4b10      	ldr	r3, [pc, #64]	@ (8017754 <vPortEnterCritical+0x5c>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	3301      	adds	r3, #1
 8017718:	4a0e      	ldr	r2, [pc, #56]	@ (8017754 <vPortEnterCritical+0x5c>)
 801771a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801771c:	4b0d      	ldr	r3, [pc, #52]	@ (8017754 <vPortEnterCritical+0x5c>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	2b01      	cmp	r3, #1
 8017722:	d110      	bne.n	8017746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017724:	4b0c      	ldr	r3, [pc, #48]	@ (8017758 <vPortEnterCritical+0x60>)
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	b2db      	uxtb	r3, r3
 801772a:	2b00      	cmp	r3, #0
 801772c:	d00b      	beq.n	8017746 <vPortEnterCritical+0x4e>
	__asm volatile
 801772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017732:	f383 8811 	msr	BASEPRI, r3
 8017736:	f3bf 8f6f 	isb	sy
 801773a:	f3bf 8f4f 	dsb	sy
 801773e:	603b      	str	r3, [r7, #0]
}
 8017740:	bf00      	nop
 8017742:	bf00      	nop
 8017744:	e7fd      	b.n	8017742 <vPortEnterCritical+0x4a>
	}
}
 8017746:	bf00      	nop
 8017748:	370c      	adds	r7, #12
 801774a:	46bd      	mov	sp, r7
 801774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017750:	4770      	bx	lr
 8017752:	bf00      	nop
 8017754:	2000003c 	.word	0x2000003c
 8017758:	e000ed04 	.word	0xe000ed04

0801775c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801775c:	b480      	push	{r7}
 801775e:	b083      	sub	sp, #12
 8017760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017762:	4b12      	ldr	r3, [pc, #72]	@ (80177ac <vPortExitCritical+0x50>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d10b      	bne.n	8017782 <vPortExitCritical+0x26>
	__asm volatile
 801776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801776e:	f383 8811 	msr	BASEPRI, r3
 8017772:	f3bf 8f6f 	isb	sy
 8017776:	f3bf 8f4f 	dsb	sy
 801777a:	607b      	str	r3, [r7, #4]
}
 801777c:	bf00      	nop
 801777e:	bf00      	nop
 8017780:	e7fd      	b.n	801777e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017782:	4b0a      	ldr	r3, [pc, #40]	@ (80177ac <vPortExitCritical+0x50>)
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	3b01      	subs	r3, #1
 8017788:	4a08      	ldr	r2, [pc, #32]	@ (80177ac <vPortExitCritical+0x50>)
 801778a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801778c:	4b07      	ldr	r3, [pc, #28]	@ (80177ac <vPortExitCritical+0x50>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d105      	bne.n	80177a0 <vPortExitCritical+0x44>
 8017794:	2300      	movs	r3, #0
 8017796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	f383 8811 	msr	BASEPRI, r3
}
 801779e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80177a0:	bf00      	nop
 80177a2:	370c      	adds	r7, #12
 80177a4:	46bd      	mov	sp, r7
 80177a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177aa:	4770      	bx	lr
 80177ac:	2000003c 	.word	0x2000003c

080177b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80177b0:	f3ef 8009 	mrs	r0, PSP
 80177b4:	f3bf 8f6f 	isb	sy
 80177b8:	4b15      	ldr	r3, [pc, #84]	@ (8017810 <pxCurrentTCBConst>)
 80177ba:	681a      	ldr	r2, [r3, #0]
 80177bc:	f01e 0f10 	tst.w	lr, #16
 80177c0:	bf08      	it	eq
 80177c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80177c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ca:	6010      	str	r0, [r2, #0]
 80177cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80177d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80177d4:	f380 8811 	msr	BASEPRI, r0
 80177d8:	f3bf 8f4f 	dsb	sy
 80177dc:	f3bf 8f6f 	isb	sy
 80177e0:	f7ff fa72 	bl	8016cc8 <vTaskSwitchContext>
 80177e4:	f04f 0000 	mov.w	r0, #0
 80177e8:	f380 8811 	msr	BASEPRI, r0
 80177ec:	bc09      	pop	{r0, r3}
 80177ee:	6819      	ldr	r1, [r3, #0]
 80177f0:	6808      	ldr	r0, [r1, #0]
 80177f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f6:	f01e 0f10 	tst.w	lr, #16
 80177fa:	bf08      	it	eq
 80177fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017800:	f380 8809 	msr	PSP, r0
 8017804:	f3bf 8f6f 	isb	sy
 8017808:	4770      	bx	lr
 801780a:	bf00      	nop
 801780c:	f3af 8000 	nop.w

08017810 <pxCurrentTCBConst>:
 8017810:	20000e18 	.word	0x20000e18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017814:	bf00      	nop
 8017816:	bf00      	nop

08017818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b082      	sub	sp, #8
 801781c:	af00      	add	r7, sp, #0
	__asm volatile
 801781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017822:	f383 8811 	msr	BASEPRI, r3
 8017826:	f3bf 8f6f 	isb	sy
 801782a:	f3bf 8f4f 	dsb	sy
 801782e:	607b      	str	r3, [r7, #4]
}
 8017830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017832:	f7ff f98f 	bl	8016b54 <xTaskIncrementTick>
 8017836:	4603      	mov	r3, r0
 8017838:	2b00      	cmp	r3, #0
 801783a:	d003      	beq.n	8017844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801783c:	4b06      	ldr	r3, [pc, #24]	@ (8017858 <SysTick_Handler+0x40>)
 801783e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017842:	601a      	str	r2, [r3, #0]
 8017844:	2300      	movs	r3, #0
 8017846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	f383 8811 	msr	BASEPRI, r3
}
 801784e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017850:	bf00      	nop
 8017852:	3708      	adds	r7, #8
 8017854:	46bd      	mov	sp, r7
 8017856:	bd80      	pop	{r7, pc}
 8017858:	e000ed04 	.word	0xe000ed04

0801785c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801785c:	b480      	push	{r7}
 801785e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017860:	4b0b      	ldr	r3, [pc, #44]	@ (8017890 <vPortSetupTimerInterrupt+0x34>)
 8017862:	2200      	movs	r2, #0
 8017864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017866:	4b0b      	ldr	r3, [pc, #44]	@ (8017894 <vPortSetupTimerInterrupt+0x38>)
 8017868:	2200      	movs	r2, #0
 801786a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801786c:	4b0a      	ldr	r3, [pc, #40]	@ (8017898 <vPortSetupTimerInterrupt+0x3c>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	4a0a      	ldr	r2, [pc, #40]	@ (801789c <vPortSetupTimerInterrupt+0x40>)
 8017872:	fba2 2303 	umull	r2, r3, r2, r3
 8017876:	099b      	lsrs	r3, r3, #6
 8017878:	4a09      	ldr	r2, [pc, #36]	@ (80178a0 <vPortSetupTimerInterrupt+0x44>)
 801787a:	3b01      	subs	r3, #1
 801787c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801787e:	4b04      	ldr	r3, [pc, #16]	@ (8017890 <vPortSetupTimerInterrupt+0x34>)
 8017880:	2207      	movs	r2, #7
 8017882:	601a      	str	r2, [r3, #0]
}
 8017884:	bf00      	nop
 8017886:	46bd      	mov	sp, r7
 8017888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788c:	4770      	bx	lr
 801788e:	bf00      	nop
 8017890:	e000e010 	.word	0xe000e010
 8017894:	e000e018 	.word	0xe000e018
 8017898:	20000030 	.word	0x20000030
 801789c:	10624dd3 	.word	0x10624dd3
 80178a0:	e000e014 	.word	0xe000e014

080178a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80178a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80178b4 <vPortEnableVFP+0x10>
 80178a8:	6801      	ldr	r1, [r0, #0]
 80178aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80178ae:	6001      	str	r1, [r0, #0]
 80178b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80178b2:	bf00      	nop
 80178b4:	e000ed88 	.word	0xe000ed88

080178b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80178b8:	b480      	push	{r7}
 80178ba:	b085      	sub	sp, #20
 80178bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80178be:	f3ef 8305 	mrs	r3, IPSR
 80178c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	2b0f      	cmp	r3, #15
 80178c8:	d915      	bls.n	80178f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80178ca:	4a18      	ldr	r2, [pc, #96]	@ (801792c <vPortValidateInterruptPriority+0x74>)
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	4413      	add	r3, r2
 80178d0:	781b      	ldrb	r3, [r3, #0]
 80178d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80178d4:	4b16      	ldr	r3, [pc, #88]	@ (8017930 <vPortValidateInterruptPriority+0x78>)
 80178d6:	781b      	ldrb	r3, [r3, #0]
 80178d8:	7afa      	ldrb	r2, [r7, #11]
 80178da:	429a      	cmp	r2, r3
 80178dc:	d20b      	bcs.n	80178f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80178de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178e2:	f383 8811 	msr	BASEPRI, r3
 80178e6:	f3bf 8f6f 	isb	sy
 80178ea:	f3bf 8f4f 	dsb	sy
 80178ee:	607b      	str	r3, [r7, #4]
}
 80178f0:	bf00      	nop
 80178f2:	bf00      	nop
 80178f4:	e7fd      	b.n	80178f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80178f6:	4b0f      	ldr	r3, [pc, #60]	@ (8017934 <vPortValidateInterruptPriority+0x7c>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80178fe:	4b0e      	ldr	r3, [pc, #56]	@ (8017938 <vPortValidateInterruptPriority+0x80>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	429a      	cmp	r2, r3
 8017904:	d90b      	bls.n	801791e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8017906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801790a:	f383 8811 	msr	BASEPRI, r3
 801790e:	f3bf 8f6f 	isb	sy
 8017912:	f3bf 8f4f 	dsb	sy
 8017916:	603b      	str	r3, [r7, #0]
}
 8017918:	bf00      	nop
 801791a:	bf00      	nop
 801791c:	e7fd      	b.n	801791a <vPortValidateInterruptPriority+0x62>
	}
 801791e:	bf00      	nop
 8017920:	3714      	adds	r7, #20
 8017922:	46bd      	mov	sp, r7
 8017924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop
 801792c:	e000e3f0 	.word	0xe000e3f0
 8017930:	20000f44 	.word	0x20000f44
 8017934:	e000ed0c 	.word	0xe000ed0c
 8017938:	20000f48 	.word	0x20000f48

0801793c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b08a      	sub	sp, #40	@ 0x28
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017944:	2300      	movs	r3, #0
 8017946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017948:	f7ff f858 	bl	80169fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801794c:	4b5c      	ldr	r3, [pc, #368]	@ (8017ac0 <pvPortMalloc+0x184>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d101      	bne.n	8017958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017954:	f000 f924 	bl	8017ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017958:	4b5a      	ldr	r3, [pc, #360]	@ (8017ac4 <pvPortMalloc+0x188>)
 801795a:	681a      	ldr	r2, [r3, #0]
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	4013      	ands	r3, r2
 8017960:	2b00      	cmp	r3, #0
 8017962:	f040 8095 	bne.w	8017a90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d01e      	beq.n	80179aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801796c:	2208      	movs	r2, #8
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	4413      	add	r3, r2
 8017972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	f003 0307 	and.w	r3, r3, #7
 801797a:	2b00      	cmp	r3, #0
 801797c:	d015      	beq.n	80179aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	f023 0307 	bic.w	r3, r3, #7
 8017984:	3308      	adds	r3, #8
 8017986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	f003 0307 	and.w	r3, r3, #7
 801798e:	2b00      	cmp	r3, #0
 8017990:	d00b      	beq.n	80179aa <pvPortMalloc+0x6e>
	__asm volatile
 8017992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017996:	f383 8811 	msr	BASEPRI, r3
 801799a:	f3bf 8f6f 	isb	sy
 801799e:	f3bf 8f4f 	dsb	sy
 80179a2:	617b      	str	r3, [r7, #20]
}
 80179a4:	bf00      	nop
 80179a6:	bf00      	nop
 80179a8:	e7fd      	b.n	80179a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d06f      	beq.n	8017a90 <pvPortMalloc+0x154>
 80179b0:	4b45      	ldr	r3, [pc, #276]	@ (8017ac8 <pvPortMalloc+0x18c>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	687a      	ldr	r2, [r7, #4]
 80179b6:	429a      	cmp	r2, r3
 80179b8:	d86a      	bhi.n	8017a90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80179ba:	4b44      	ldr	r3, [pc, #272]	@ (8017acc <pvPortMalloc+0x190>)
 80179bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80179be:	4b43      	ldr	r3, [pc, #268]	@ (8017acc <pvPortMalloc+0x190>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80179c4:	e004      	b.n	80179d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80179c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80179ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80179d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179d2:	685b      	ldr	r3, [r3, #4]
 80179d4:	687a      	ldr	r2, [r7, #4]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d903      	bls.n	80179e2 <pvPortMalloc+0xa6>
 80179da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d1f1      	bne.n	80179c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80179e2:	4b37      	ldr	r3, [pc, #220]	@ (8017ac0 <pvPortMalloc+0x184>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179e8:	429a      	cmp	r2, r3
 80179ea:	d051      	beq.n	8017a90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80179ec:	6a3b      	ldr	r3, [r7, #32]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	2208      	movs	r2, #8
 80179f2:	4413      	add	r3, r2
 80179f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80179f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179f8:	681a      	ldr	r2, [r3, #0]
 80179fa:	6a3b      	ldr	r3, [r7, #32]
 80179fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80179fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a00:	685a      	ldr	r2, [r3, #4]
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	1ad2      	subs	r2, r2, r3
 8017a06:	2308      	movs	r3, #8
 8017a08:	005b      	lsls	r3, r3, #1
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	d920      	bls.n	8017a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	4413      	add	r3, r2
 8017a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017a16:	69bb      	ldr	r3, [r7, #24]
 8017a18:	f003 0307 	and.w	r3, r3, #7
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d00b      	beq.n	8017a38 <pvPortMalloc+0xfc>
	__asm volatile
 8017a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a24:	f383 8811 	msr	BASEPRI, r3
 8017a28:	f3bf 8f6f 	isb	sy
 8017a2c:	f3bf 8f4f 	dsb	sy
 8017a30:	613b      	str	r3, [r7, #16]
}
 8017a32:	bf00      	nop
 8017a34:	bf00      	nop
 8017a36:	e7fd      	b.n	8017a34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a3a:	685a      	ldr	r2, [r3, #4]
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	1ad2      	subs	r2, r2, r3
 8017a40:	69bb      	ldr	r3, [r7, #24]
 8017a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a46:	687a      	ldr	r2, [r7, #4]
 8017a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017a4a:	69b8      	ldr	r0, [r7, #24]
 8017a4c:	f000 f90a 	bl	8017c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017a50:	4b1d      	ldr	r3, [pc, #116]	@ (8017ac8 <pvPortMalloc+0x18c>)
 8017a52:	681a      	ldr	r2, [r3, #0]
 8017a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a56:	685b      	ldr	r3, [r3, #4]
 8017a58:	1ad3      	subs	r3, r2, r3
 8017a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8017ac8 <pvPortMalloc+0x18c>)
 8017a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8017ac8 <pvPortMalloc+0x18c>)
 8017a60:	681a      	ldr	r2, [r3, #0]
 8017a62:	4b1b      	ldr	r3, [pc, #108]	@ (8017ad0 <pvPortMalloc+0x194>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	429a      	cmp	r2, r3
 8017a68:	d203      	bcs.n	8017a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017a6a:	4b17      	ldr	r3, [pc, #92]	@ (8017ac8 <pvPortMalloc+0x18c>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	4a18      	ldr	r2, [pc, #96]	@ (8017ad0 <pvPortMalloc+0x194>)
 8017a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a74:	685a      	ldr	r2, [r3, #4]
 8017a76:	4b13      	ldr	r3, [pc, #76]	@ (8017ac4 <pvPortMalloc+0x188>)
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	431a      	orrs	r2, r3
 8017a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a82:	2200      	movs	r2, #0
 8017a84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017a86:	4b13      	ldr	r3, [pc, #76]	@ (8017ad4 <pvPortMalloc+0x198>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	3301      	adds	r3, #1
 8017a8c:	4a11      	ldr	r2, [pc, #68]	@ (8017ad4 <pvPortMalloc+0x198>)
 8017a8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017a90:	f7fe ffc2 	bl	8016a18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017a94:	69fb      	ldr	r3, [r7, #28]
 8017a96:	f003 0307 	and.w	r3, r3, #7
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d00b      	beq.n	8017ab6 <pvPortMalloc+0x17a>
	__asm volatile
 8017a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017aa2:	f383 8811 	msr	BASEPRI, r3
 8017aa6:	f3bf 8f6f 	isb	sy
 8017aaa:	f3bf 8f4f 	dsb	sy
 8017aae:	60fb      	str	r3, [r7, #12]
}
 8017ab0:	bf00      	nop
 8017ab2:	bf00      	nop
 8017ab4:	e7fd      	b.n	8017ab2 <pvPortMalloc+0x176>
	return pvReturn;
 8017ab6:	69fb      	ldr	r3, [r7, #28]
}
 8017ab8:	4618      	mov	r0, r3
 8017aba:	3728      	adds	r7, #40	@ 0x28
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}
 8017ac0:	20005d74 	.word	0x20005d74
 8017ac4:	20005d88 	.word	0x20005d88
 8017ac8:	20005d78 	.word	0x20005d78
 8017acc:	20005d6c 	.word	0x20005d6c
 8017ad0:	20005d7c 	.word	0x20005d7c
 8017ad4:	20005d80 	.word	0x20005d80

08017ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b086      	sub	sp, #24
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d04f      	beq.n	8017b8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017aea:	2308      	movs	r3, #8
 8017aec:	425b      	negs	r3, r3
 8017aee:	697a      	ldr	r2, [r7, #20]
 8017af0:	4413      	add	r3, r2
 8017af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	685a      	ldr	r2, [r3, #4]
 8017afc:	4b25      	ldr	r3, [pc, #148]	@ (8017b94 <vPortFree+0xbc>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	4013      	ands	r3, r2
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d10b      	bne.n	8017b1e <vPortFree+0x46>
	__asm volatile
 8017b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b0a:	f383 8811 	msr	BASEPRI, r3
 8017b0e:	f3bf 8f6f 	isb	sy
 8017b12:	f3bf 8f4f 	dsb	sy
 8017b16:	60fb      	str	r3, [r7, #12]
}
 8017b18:	bf00      	nop
 8017b1a:	bf00      	nop
 8017b1c:	e7fd      	b.n	8017b1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017b1e:	693b      	ldr	r3, [r7, #16]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d00b      	beq.n	8017b3e <vPortFree+0x66>
	__asm volatile
 8017b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b2a:	f383 8811 	msr	BASEPRI, r3
 8017b2e:	f3bf 8f6f 	isb	sy
 8017b32:	f3bf 8f4f 	dsb	sy
 8017b36:	60bb      	str	r3, [r7, #8]
}
 8017b38:	bf00      	nop
 8017b3a:	bf00      	nop
 8017b3c:	e7fd      	b.n	8017b3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017b3e:	693b      	ldr	r3, [r7, #16]
 8017b40:	685a      	ldr	r2, [r3, #4]
 8017b42:	4b14      	ldr	r3, [pc, #80]	@ (8017b94 <vPortFree+0xbc>)
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	4013      	ands	r3, r2
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d01e      	beq.n	8017b8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017b4c:	693b      	ldr	r3, [r7, #16]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d11a      	bne.n	8017b8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017b54:	693b      	ldr	r3, [r7, #16]
 8017b56:	685a      	ldr	r2, [r3, #4]
 8017b58:	4b0e      	ldr	r3, [pc, #56]	@ (8017b94 <vPortFree+0xbc>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	43db      	mvns	r3, r3
 8017b5e:	401a      	ands	r2, r3
 8017b60:	693b      	ldr	r3, [r7, #16]
 8017b62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017b64:	f7fe ff4a 	bl	80169fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	685a      	ldr	r2, [r3, #4]
 8017b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8017b98 <vPortFree+0xc0>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	4413      	add	r3, r2
 8017b72:	4a09      	ldr	r2, [pc, #36]	@ (8017b98 <vPortFree+0xc0>)
 8017b74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017b76:	6938      	ldr	r0, [r7, #16]
 8017b78:	f000 f874 	bl	8017c64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017b7c:	4b07      	ldr	r3, [pc, #28]	@ (8017b9c <vPortFree+0xc4>)
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	3301      	adds	r3, #1
 8017b82:	4a06      	ldr	r2, [pc, #24]	@ (8017b9c <vPortFree+0xc4>)
 8017b84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017b86:	f7fe ff47 	bl	8016a18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017b8a:	bf00      	nop
 8017b8c:	3718      	adds	r7, #24
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	20005d88 	.word	0x20005d88
 8017b98:	20005d78 	.word	0x20005d78
 8017b9c:	20005d84 	.word	0x20005d84

08017ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017ba0:	b480      	push	{r7}
 8017ba2:	b085      	sub	sp, #20
 8017ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017ba6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8017baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017bac:	4b27      	ldr	r3, [pc, #156]	@ (8017c4c <prvHeapInit+0xac>)
 8017bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	f003 0307 	and.w	r3, r3, #7
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d00c      	beq.n	8017bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	3307      	adds	r3, #7
 8017bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	f023 0307 	bic.w	r3, r3, #7
 8017bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017bc8:	68ba      	ldr	r2, [r7, #8]
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	1ad3      	subs	r3, r2, r3
 8017bce:	4a1f      	ldr	r2, [pc, #124]	@ (8017c4c <prvHeapInit+0xac>)
 8017bd0:	4413      	add	r3, r2
 8017bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8017c50 <prvHeapInit+0xb0>)
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017bde:	4b1c      	ldr	r3, [pc, #112]	@ (8017c50 <prvHeapInit+0xb0>)
 8017be0:	2200      	movs	r2, #0
 8017be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	68ba      	ldr	r2, [r7, #8]
 8017be8:	4413      	add	r3, r2
 8017bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017bec:	2208      	movs	r2, #8
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	1a9b      	subs	r3, r3, r2
 8017bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	f023 0307 	bic.w	r3, r3, #7
 8017bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	4a15      	ldr	r2, [pc, #84]	@ (8017c54 <prvHeapInit+0xb4>)
 8017c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017c02:	4b14      	ldr	r3, [pc, #80]	@ (8017c54 <prvHeapInit+0xb4>)
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	2200      	movs	r2, #0
 8017c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017c0a:	4b12      	ldr	r3, [pc, #72]	@ (8017c54 <prvHeapInit+0xb4>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	2200      	movs	r2, #0
 8017c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	68fa      	ldr	r2, [r7, #12]
 8017c1a:	1ad2      	subs	r2, r2, r3
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017c20:	4b0c      	ldr	r3, [pc, #48]	@ (8017c54 <prvHeapInit+0xb4>)
 8017c22:	681a      	ldr	r2, [r3, #0]
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017c28:	683b      	ldr	r3, [r7, #0]
 8017c2a:	685b      	ldr	r3, [r3, #4]
 8017c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8017c58 <prvHeapInit+0xb8>)
 8017c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017c30:	683b      	ldr	r3, [r7, #0]
 8017c32:	685b      	ldr	r3, [r3, #4]
 8017c34:	4a09      	ldr	r2, [pc, #36]	@ (8017c5c <prvHeapInit+0xbc>)
 8017c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017c38:	4b09      	ldr	r3, [pc, #36]	@ (8017c60 <prvHeapInit+0xc0>)
 8017c3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017c3e:	601a      	str	r2, [r3, #0]
}
 8017c40:	bf00      	nop
 8017c42:	3714      	adds	r7, #20
 8017c44:	46bd      	mov	sp, r7
 8017c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4a:	4770      	bx	lr
 8017c4c:	20000f4c 	.word	0x20000f4c
 8017c50:	20005d6c 	.word	0x20005d6c
 8017c54:	20005d74 	.word	0x20005d74
 8017c58:	20005d7c 	.word	0x20005d7c
 8017c5c:	20005d78 	.word	0x20005d78
 8017c60:	20005d88 	.word	0x20005d88

08017c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017c64:	b480      	push	{r7}
 8017c66:	b085      	sub	sp, #20
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017c6c:	4b28      	ldr	r3, [pc, #160]	@ (8017d10 <prvInsertBlockIntoFreeList+0xac>)
 8017c6e:	60fb      	str	r3, [r7, #12]
 8017c70:	e002      	b.n	8017c78 <prvInsertBlockIntoFreeList+0x14>
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	60fb      	str	r3, [r7, #12]
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	687a      	ldr	r2, [r7, #4]
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d8f7      	bhi.n	8017c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	68ba      	ldr	r2, [r7, #8]
 8017c8c:	4413      	add	r3, r2
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	429a      	cmp	r2, r3
 8017c92:	d108      	bne.n	8017ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	685a      	ldr	r2, [r3, #4]
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	441a      	add	r2, r3
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	68ba      	ldr	r2, [r7, #8]
 8017cb0:	441a      	add	r2, r3
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d118      	bne.n	8017cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	681a      	ldr	r2, [r3, #0]
 8017cbe:	4b15      	ldr	r3, [pc, #84]	@ (8017d14 <prvInsertBlockIntoFreeList+0xb0>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	d00d      	beq.n	8017ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	685a      	ldr	r2, [r3, #4]
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	685b      	ldr	r3, [r3, #4]
 8017cd0:	441a      	add	r2, r3
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	681a      	ldr	r2, [r3, #0]
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	601a      	str	r2, [r3, #0]
 8017ce0:	e008      	b.n	8017cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8017d14 <prvInsertBlockIntoFreeList+0xb0>)
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	601a      	str	r2, [r3, #0]
 8017cea:	e003      	b.n	8017cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	681a      	ldr	r2, [r3, #0]
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017cf4:	68fa      	ldr	r2, [r7, #12]
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	429a      	cmp	r2, r3
 8017cfa:	d002      	beq.n	8017d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	687a      	ldr	r2, [r7, #4]
 8017d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017d02:	bf00      	nop
 8017d04:	3714      	adds	r7, #20
 8017d06:	46bd      	mov	sp, r7
 8017d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0c:	4770      	bx	lr
 8017d0e:	bf00      	nop
 8017d10:	20005d6c 	.word	0x20005d6c
 8017d14:	20005d74 	.word	0x20005d74

08017d18 <atof>:
 8017d18:	2100      	movs	r1, #0
 8017d1a:	f000 bee3 	b.w	8018ae4 <strtod>

08017d1e <atoi>:
 8017d1e:	220a      	movs	r2, #10
 8017d20:	2100      	movs	r1, #0
 8017d22:	f000 bf67 	b.w	8018bf4 <strtol>

08017d26 <atol>:
 8017d26:	220a      	movs	r2, #10
 8017d28:	2100      	movs	r1, #0
 8017d2a:	f000 bf63 	b.w	8018bf4 <strtol>
	...

08017d30 <exit>:
 8017d30:	b508      	push	{r3, lr}
 8017d32:	4b06      	ldr	r3, [pc, #24]	@ (8017d4c <exit+0x1c>)
 8017d34:	4604      	mov	r4, r0
 8017d36:	b113      	cbz	r3, 8017d3e <exit+0xe>
 8017d38:	2100      	movs	r1, #0
 8017d3a:	f3af 8000 	nop.w
 8017d3e:	4b04      	ldr	r3, [pc, #16]	@ (8017d50 <exit+0x20>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	b103      	cbz	r3, 8017d46 <exit+0x16>
 8017d44:	4798      	blx	r3
 8017d46:	4620      	mov	r0, r4
 8017d48:	f7ea fbc2 	bl	80024d0 <_exit>
 8017d4c:	00000000 	.word	0x00000000
 8017d50:	20005ecc 	.word	0x20005ecc

08017d54 <malloc>:
 8017d54:	4b02      	ldr	r3, [pc, #8]	@ (8017d60 <malloc+0xc>)
 8017d56:	4601      	mov	r1, r0
 8017d58:	6818      	ldr	r0, [r3, #0]
 8017d5a:	f000 b82d 	b.w	8017db8 <_malloc_r>
 8017d5e:	bf00      	nop
 8017d60:	200001c0 	.word	0x200001c0

08017d64 <free>:
 8017d64:	4b02      	ldr	r3, [pc, #8]	@ (8017d70 <free+0xc>)
 8017d66:	4601      	mov	r1, r0
 8017d68:	6818      	ldr	r0, [r3, #0]
 8017d6a:	f003 be71 	b.w	801ba50 <_free_r>
 8017d6e:	bf00      	nop
 8017d70:	200001c0 	.word	0x200001c0

08017d74 <sbrk_aligned>:
 8017d74:	b570      	push	{r4, r5, r6, lr}
 8017d76:	4e0f      	ldr	r6, [pc, #60]	@ (8017db4 <sbrk_aligned+0x40>)
 8017d78:	460c      	mov	r4, r1
 8017d7a:	6831      	ldr	r1, [r6, #0]
 8017d7c:	4605      	mov	r5, r0
 8017d7e:	b911      	cbnz	r1, 8017d86 <sbrk_aligned+0x12>
 8017d80:	f002 ff1e 	bl	801abc0 <_sbrk_r>
 8017d84:	6030      	str	r0, [r6, #0]
 8017d86:	4621      	mov	r1, r4
 8017d88:	4628      	mov	r0, r5
 8017d8a:	f002 ff19 	bl	801abc0 <_sbrk_r>
 8017d8e:	1c43      	adds	r3, r0, #1
 8017d90:	d103      	bne.n	8017d9a <sbrk_aligned+0x26>
 8017d92:	f04f 34ff 	mov.w	r4, #4294967295
 8017d96:	4620      	mov	r0, r4
 8017d98:	bd70      	pop	{r4, r5, r6, pc}
 8017d9a:	1cc4      	adds	r4, r0, #3
 8017d9c:	f024 0403 	bic.w	r4, r4, #3
 8017da0:	42a0      	cmp	r0, r4
 8017da2:	d0f8      	beq.n	8017d96 <sbrk_aligned+0x22>
 8017da4:	1a21      	subs	r1, r4, r0
 8017da6:	4628      	mov	r0, r5
 8017da8:	f002 ff0a 	bl	801abc0 <_sbrk_r>
 8017dac:	3001      	adds	r0, #1
 8017dae:	d1f2      	bne.n	8017d96 <sbrk_aligned+0x22>
 8017db0:	e7ef      	b.n	8017d92 <sbrk_aligned+0x1e>
 8017db2:	bf00      	nop
 8017db4:	20005d8c 	.word	0x20005d8c

08017db8 <_malloc_r>:
 8017db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017dbc:	1ccd      	adds	r5, r1, #3
 8017dbe:	f025 0503 	bic.w	r5, r5, #3
 8017dc2:	3508      	adds	r5, #8
 8017dc4:	2d0c      	cmp	r5, #12
 8017dc6:	bf38      	it	cc
 8017dc8:	250c      	movcc	r5, #12
 8017dca:	2d00      	cmp	r5, #0
 8017dcc:	4606      	mov	r6, r0
 8017dce:	db01      	blt.n	8017dd4 <_malloc_r+0x1c>
 8017dd0:	42a9      	cmp	r1, r5
 8017dd2:	d904      	bls.n	8017dde <_malloc_r+0x26>
 8017dd4:	230c      	movs	r3, #12
 8017dd6:	6033      	str	r3, [r6, #0]
 8017dd8:	2000      	movs	r0, #0
 8017dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017eb4 <_malloc_r+0xfc>
 8017de2:	f000 f869 	bl	8017eb8 <__malloc_lock>
 8017de6:	f8d8 3000 	ldr.w	r3, [r8]
 8017dea:	461c      	mov	r4, r3
 8017dec:	bb44      	cbnz	r4, 8017e40 <_malloc_r+0x88>
 8017dee:	4629      	mov	r1, r5
 8017df0:	4630      	mov	r0, r6
 8017df2:	f7ff ffbf 	bl	8017d74 <sbrk_aligned>
 8017df6:	1c43      	adds	r3, r0, #1
 8017df8:	4604      	mov	r4, r0
 8017dfa:	d158      	bne.n	8017eae <_malloc_r+0xf6>
 8017dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8017e00:	4627      	mov	r7, r4
 8017e02:	2f00      	cmp	r7, #0
 8017e04:	d143      	bne.n	8017e8e <_malloc_r+0xd6>
 8017e06:	2c00      	cmp	r4, #0
 8017e08:	d04b      	beq.n	8017ea2 <_malloc_r+0xea>
 8017e0a:	6823      	ldr	r3, [r4, #0]
 8017e0c:	4639      	mov	r1, r7
 8017e0e:	4630      	mov	r0, r6
 8017e10:	eb04 0903 	add.w	r9, r4, r3
 8017e14:	f002 fed4 	bl	801abc0 <_sbrk_r>
 8017e18:	4581      	cmp	r9, r0
 8017e1a:	d142      	bne.n	8017ea2 <_malloc_r+0xea>
 8017e1c:	6821      	ldr	r1, [r4, #0]
 8017e1e:	1a6d      	subs	r5, r5, r1
 8017e20:	4629      	mov	r1, r5
 8017e22:	4630      	mov	r0, r6
 8017e24:	f7ff ffa6 	bl	8017d74 <sbrk_aligned>
 8017e28:	3001      	adds	r0, #1
 8017e2a:	d03a      	beq.n	8017ea2 <_malloc_r+0xea>
 8017e2c:	6823      	ldr	r3, [r4, #0]
 8017e2e:	442b      	add	r3, r5
 8017e30:	6023      	str	r3, [r4, #0]
 8017e32:	f8d8 3000 	ldr.w	r3, [r8]
 8017e36:	685a      	ldr	r2, [r3, #4]
 8017e38:	bb62      	cbnz	r2, 8017e94 <_malloc_r+0xdc>
 8017e3a:	f8c8 7000 	str.w	r7, [r8]
 8017e3e:	e00f      	b.n	8017e60 <_malloc_r+0xa8>
 8017e40:	6822      	ldr	r2, [r4, #0]
 8017e42:	1b52      	subs	r2, r2, r5
 8017e44:	d420      	bmi.n	8017e88 <_malloc_r+0xd0>
 8017e46:	2a0b      	cmp	r2, #11
 8017e48:	d917      	bls.n	8017e7a <_malloc_r+0xc2>
 8017e4a:	1961      	adds	r1, r4, r5
 8017e4c:	42a3      	cmp	r3, r4
 8017e4e:	6025      	str	r5, [r4, #0]
 8017e50:	bf18      	it	ne
 8017e52:	6059      	strne	r1, [r3, #4]
 8017e54:	6863      	ldr	r3, [r4, #4]
 8017e56:	bf08      	it	eq
 8017e58:	f8c8 1000 	streq.w	r1, [r8]
 8017e5c:	5162      	str	r2, [r4, r5]
 8017e5e:	604b      	str	r3, [r1, #4]
 8017e60:	4630      	mov	r0, r6
 8017e62:	f000 f82f 	bl	8017ec4 <__malloc_unlock>
 8017e66:	f104 000b 	add.w	r0, r4, #11
 8017e6a:	1d23      	adds	r3, r4, #4
 8017e6c:	f020 0007 	bic.w	r0, r0, #7
 8017e70:	1ac2      	subs	r2, r0, r3
 8017e72:	bf1c      	itt	ne
 8017e74:	1a1b      	subne	r3, r3, r0
 8017e76:	50a3      	strne	r3, [r4, r2]
 8017e78:	e7af      	b.n	8017dda <_malloc_r+0x22>
 8017e7a:	6862      	ldr	r2, [r4, #4]
 8017e7c:	42a3      	cmp	r3, r4
 8017e7e:	bf0c      	ite	eq
 8017e80:	f8c8 2000 	streq.w	r2, [r8]
 8017e84:	605a      	strne	r2, [r3, #4]
 8017e86:	e7eb      	b.n	8017e60 <_malloc_r+0xa8>
 8017e88:	4623      	mov	r3, r4
 8017e8a:	6864      	ldr	r4, [r4, #4]
 8017e8c:	e7ae      	b.n	8017dec <_malloc_r+0x34>
 8017e8e:	463c      	mov	r4, r7
 8017e90:	687f      	ldr	r7, [r7, #4]
 8017e92:	e7b6      	b.n	8017e02 <_malloc_r+0x4a>
 8017e94:	461a      	mov	r2, r3
 8017e96:	685b      	ldr	r3, [r3, #4]
 8017e98:	42a3      	cmp	r3, r4
 8017e9a:	d1fb      	bne.n	8017e94 <_malloc_r+0xdc>
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	6053      	str	r3, [r2, #4]
 8017ea0:	e7de      	b.n	8017e60 <_malloc_r+0xa8>
 8017ea2:	230c      	movs	r3, #12
 8017ea4:	6033      	str	r3, [r6, #0]
 8017ea6:	4630      	mov	r0, r6
 8017ea8:	f000 f80c 	bl	8017ec4 <__malloc_unlock>
 8017eac:	e794      	b.n	8017dd8 <_malloc_r+0x20>
 8017eae:	6005      	str	r5, [r0, #0]
 8017eb0:	e7d6      	b.n	8017e60 <_malloc_r+0xa8>
 8017eb2:	bf00      	nop
 8017eb4:	20005d90 	.word	0x20005d90

08017eb8 <__malloc_lock>:
 8017eb8:	4801      	ldr	r0, [pc, #4]	@ (8017ec0 <__malloc_lock+0x8>)
 8017eba:	f002 becf 	b.w	801ac5c <__retarget_lock_acquire_recursive>
 8017ebe:	bf00      	nop
 8017ec0:	20005efa 	.word	0x20005efa

08017ec4 <__malloc_unlock>:
 8017ec4:	4801      	ldr	r0, [pc, #4]	@ (8017ecc <__malloc_unlock+0x8>)
 8017ec6:	f002 becb 	b.w	801ac60 <__retarget_lock_release_recursive>
 8017eca:	bf00      	nop
 8017ecc:	20005efa 	.word	0x20005efa

08017ed0 <sulp>:
 8017ed0:	b570      	push	{r4, r5, r6, lr}
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	460d      	mov	r5, r1
 8017ed6:	ec45 4b10 	vmov	d0, r4, r5
 8017eda:	4616      	mov	r6, r2
 8017edc:	f004 fcfe 	bl	801c8dc <__ulp>
 8017ee0:	ec51 0b10 	vmov	r0, r1, d0
 8017ee4:	b17e      	cbz	r6, 8017f06 <sulp+0x36>
 8017ee6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017eea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	dd09      	ble.n	8017f06 <sulp+0x36>
 8017ef2:	051b      	lsls	r3, r3, #20
 8017ef4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8017ef8:	2400      	movs	r4, #0
 8017efa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8017efe:	4622      	mov	r2, r4
 8017f00:	462b      	mov	r3, r5
 8017f02:	f7e8 fb89 	bl	8000618 <__aeabi_dmul>
 8017f06:	ec41 0b10 	vmov	d0, r0, r1
 8017f0a:	bd70      	pop	{r4, r5, r6, pc}
 8017f0c:	0000      	movs	r0, r0
	...

08017f10 <_strtod_l>:
 8017f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f14:	b09f      	sub	sp, #124	@ 0x7c
 8017f16:	460c      	mov	r4, r1
 8017f18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8017f1e:	9005      	str	r0, [sp, #20]
 8017f20:	f04f 0a00 	mov.w	sl, #0
 8017f24:	f04f 0b00 	mov.w	fp, #0
 8017f28:	460a      	mov	r2, r1
 8017f2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8017f2c:	7811      	ldrb	r1, [r2, #0]
 8017f2e:	292b      	cmp	r1, #43	@ 0x2b
 8017f30:	d04a      	beq.n	8017fc8 <_strtod_l+0xb8>
 8017f32:	d838      	bhi.n	8017fa6 <_strtod_l+0x96>
 8017f34:	290d      	cmp	r1, #13
 8017f36:	d832      	bhi.n	8017f9e <_strtod_l+0x8e>
 8017f38:	2908      	cmp	r1, #8
 8017f3a:	d832      	bhi.n	8017fa2 <_strtod_l+0x92>
 8017f3c:	2900      	cmp	r1, #0
 8017f3e:	d03b      	beq.n	8017fb8 <_strtod_l+0xa8>
 8017f40:	2200      	movs	r2, #0
 8017f42:	920e      	str	r2, [sp, #56]	@ 0x38
 8017f44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8017f46:	782a      	ldrb	r2, [r5, #0]
 8017f48:	2a30      	cmp	r2, #48	@ 0x30
 8017f4a:	f040 80b2 	bne.w	80180b2 <_strtod_l+0x1a2>
 8017f4e:	786a      	ldrb	r2, [r5, #1]
 8017f50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017f54:	2a58      	cmp	r2, #88	@ 0x58
 8017f56:	d16e      	bne.n	8018036 <_strtod_l+0x126>
 8017f58:	9302      	str	r3, [sp, #8]
 8017f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f5c:	9301      	str	r3, [sp, #4]
 8017f5e:	ab1a      	add	r3, sp, #104	@ 0x68
 8017f60:	9300      	str	r3, [sp, #0]
 8017f62:	4a8f      	ldr	r2, [pc, #572]	@ (80181a0 <_strtod_l+0x290>)
 8017f64:	9805      	ldr	r0, [sp, #20]
 8017f66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8017f68:	a919      	add	r1, sp, #100	@ 0x64
 8017f6a:	f003 fe23 	bl	801bbb4 <__gethex>
 8017f6e:	f010 060f 	ands.w	r6, r0, #15
 8017f72:	4604      	mov	r4, r0
 8017f74:	d005      	beq.n	8017f82 <_strtod_l+0x72>
 8017f76:	2e06      	cmp	r6, #6
 8017f78:	d128      	bne.n	8017fcc <_strtod_l+0xbc>
 8017f7a:	3501      	adds	r5, #1
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	9519      	str	r5, [sp, #100]	@ 0x64
 8017f80:	930e      	str	r3, [sp, #56]	@ 0x38
 8017f82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	f040 858e 	bne.w	8018aa6 <_strtod_l+0xb96>
 8017f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f8c:	b1cb      	cbz	r3, 8017fc2 <_strtod_l+0xb2>
 8017f8e:	4652      	mov	r2, sl
 8017f90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8017f94:	ec43 2b10 	vmov	d0, r2, r3
 8017f98:	b01f      	add	sp, #124	@ 0x7c
 8017f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f9e:	2920      	cmp	r1, #32
 8017fa0:	d1ce      	bne.n	8017f40 <_strtod_l+0x30>
 8017fa2:	3201      	adds	r2, #1
 8017fa4:	e7c1      	b.n	8017f2a <_strtod_l+0x1a>
 8017fa6:	292d      	cmp	r1, #45	@ 0x2d
 8017fa8:	d1ca      	bne.n	8017f40 <_strtod_l+0x30>
 8017faa:	2101      	movs	r1, #1
 8017fac:	910e      	str	r1, [sp, #56]	@ 0x38
 8017fae:	1c51      	adds	r1, r2, #1
 8017fb0:	9119      	str	r1, [sp, #100]	@ 0x64
 8017fb2:	7852      	ldrb	r2, [r2, #1]
 8017fb4:	2a00      	cmp	r2, #0
 8017fb6:	d1c5      	bne.n	8017f44 <_strtod_l+0x34>
 8017fb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017fba:	9419      	str	r4, [sp, #100]	@ 0x64
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	f040 8570 	bne.w	8018aa2 <_strtod_l+0xb92>
 8017fc2:	4652      	mov	r2, sl
 8017fc4:	465b      	mov	r3, fp
 8017fc6:	e7e5      	b.n	8017f94 <_strtod_l+0x84>
 8017fc8:	2100      	movs	r1, #0
 8017fca:	e7ef      	b.n	8017fac <_strtod_l+0x9c>
 8017fcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017fce:	b13a      	cbz	r2, 8017fe0 <_strtod_l+0xd0>
 8017fd0:	2135      	movs	r1, #53	@ 0x35
 8017fd2:	a81c      	add	r0, sp, #112	@ 0x70
 8017fd4:	f004 fd7c 	bl	801cad0 <__copybits>
 8017fd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017fda:	9805      	ldr	r0, [sp, #20]
 8017fdc:	f004 f952 	bl	801c284 <_Bfree>
 8017fe0:	3e01      	subs	r6, #1
 8017fe2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017fe4:	2e04      	cmp	r6, #4
 8017fe6:	d806      	bhi.n	8017ff6 <_strtod_l+0xe6>
 8017fe8:	e8df f006 	tbb	[pc, r6]
 8017fec:	201d0314 	.word	0x201d0314
 8017ff0:	14          	.byte	0x14
 8017ff1:	00          	.byte	0x00
 8017ff2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8017ff6:	05e1      	lsls	r1, r4, #23
 8017ff8:	bf48      	it	mi
 8017ffa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018002:	0d1b      	lsrs	r3, r3, #20
 8018004:	051b      	lsls	r3, r3, #20
 8018006:	2b00      	cmp	r3, #0
 8018008:	d1bb      	bne.n	8017f82 <_strtod_l+0x72>
 801800a:	f002 fdfb 	bl	801ac04 <__errno>
 801800e:	2322      	movs	r3, #34	@ 0x22
 8018010:	6003      	str	r3, [r0, #0]
 8018012:	e7b6      	b.n	8017f82 <_strtod_l+0x72>
 8018014:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8018018:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801801c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018020:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018024:	e7e7      	b.n	8017ff6 <_strtod_l+0xe6>
 8018026:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80181a8 <_strtod_l+0x298>
 801802a:	e7e4      	b.n	8017ff6 <_strtod_l+0xe6>
 801802c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018030:	f04f 3aff 	mov.w	sl, #4294967295
 8018034:	e7df      	b.n	8017ff6 <_strtod_l+0xe6>
 8018036:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018038:	1c5a      	adds	r2, r3, #1
 801803a:	9219      	str	r2, [sp, #100]	@ 0x64
 801803c:	785b      	ldrb	r3, [r3, #1]
 801803e:	2b30      	cmp	r3, #48	@ 0x30
 8018040:	d0f9      	beq.n	8018036 <_strtod_l+0x126>
 8018042:	2b00      	cmp	r3, #0
 8018044:	d09d      	beq.n	8017f82 <_strtod_l+0x72>
 8018046:	2301      	movs	r3, #1
 8018048:	2700      	movs	r7, #0
 801804a:	9308      	str	r3, [sp, #32]
 801804c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801804e:	930c      	str	r3, [sp, #48]	@ 0x30
 8018050:	970b      	str	r7, [sp, #44]	@ 0x2c
 8018052:	46b9      	mov	r9, r7
 8018054:	220a      	movs	r2, #10
 8018056:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8018058:	7805      	ldrb	r5, [r0, #0]
 801805a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801805e:	b2d9      	uxtb	r1, r3
 8018060:	2909      	cmp	r1, #9
 8018062:	d928      	bls.n	80180b6 <_strtod_l+0x1a6>
 8018064:	494f      	ldr	r1, [pc, #316]	@ (80181a4 <_strtod_l+0x294>)
 8018066:	2201      	movs	r2, #1
 8018068:	f001 fd8f 	bl	8019b8a <strncmp>
 801806c:	2800      	cmp	r0, #0
 801806e:	d032      	beq.n	80180d6 <_strtod_l+0x1c6>
 8018070:	2000      	movs	r0, #0
 8018072:	462a      	mov	r2, r5
 8018074:	900a      	str	r0, [sp, #40]	@ 0x28
 8018076:	464d      	mov	r5, r9
 8018078:	4603      	mov	r3, r0
 801807a:	2a65      	cmp	r2, #101	@ 0x65
 801807c:	d001      	beq.n	8018082 <_strtod_l+0x172>
 801807e:	2a45      	cmp	r2, #69	@ 0x45
 8018080:	d114      	bne.n	80180ac <_strtod_l+0x19c>
 8018082:	b91d      	cbnz	r5, 801808c <_strtod_l+0x17c>
 8018084:	9a08      	ldr	r2, [sp, #32]
 8018086:	4302      	orrs	r2, r0
 8018088:	d096      	beq.n	8017fb8 <_strtod_l+0xa8>
 801808a:	2500      	movs	r5, #0
 801808c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801808e:	1c62      	adds	r2, r4, #1
 8018090:	9219      	str	r2, [sp, #100]	@ 0x64
 8018092:	7862      	ldrb	r2, [r4, #1]
 8018094:	2a2b      	cmp	r2, #43	@ 0x2b
 8018096:	d07a      	beq.n	801818e <_strtod_l+0x27e>
 8018098:	2a2d      	cmp	r2, #45	@ 0x2d
 801809a:	d07e      	beq.n	801819a <_strtod_l+0x28a>
 801809c:	f04f 0c00 	mov.w	ip, #0
 80180a0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80180a4:	2909      	cmp	r1, #9
 80180a6:	f240 8085 	bls.w	80181b4 <_strtod_l+0x2a4>
 80180aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80180ac:	f04f 0800 	mov.w	r8, #0
 80180b0:	e0a5      	b.n	80181fe <_strtod_l+0x2ee>
 80180b2:	2300      	movs	r3, #0
 80180b4:	e7c8      	b.n	8018048 <_strtod_l+0x138>
 80180b6:	f1b9 0f08 	cmp.w	r9, #8
 80180ba:	bfd8      	it	le
 80180bc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80180be:	f100 0001 	add.w	r0, r0, #1
 80180c2:	bfda      	itte	le
 80180c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80180c8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80180ca:	fb02 3707 	mlagt	r7, r2, r7, r3
 80180ce:	f109 0901 	add.w	r9, r9, #1
 80180d2:	9019      	str	r0, [sp, #100]	@ 0x64
 80180d4:	e7bf      	b.n	8018056 <_strtod_l+0x146>
 80180d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80180d8:	1c5a      	adds	r2, r3, #1
 80180da:	9219      	str	r2, [sp, #100]	@ 0x64
 80180dc:	785a      	ldrb	r2, [r3, #1]
 80180de:	f1b9 0f00 	cmp.w	r9, #0
 80180e2:	d03b      	beq.n	801815c <_strtod_l+0x24c>
 80180e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80180e6:	464d      	mov	r5, r9
 80180e8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80180ec:	2b09      	cmp	r3, #9
 80180ee:	d912      	bls.n	8018116 <_strtod_l+0x206>
 80180f0:	2301      	movs	r3, #1
 80180f2:	e7c2      	b.n	801807a <_strtod_l+0x16a>
 80180f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80180f6:	1c5a      	adds	r2, r3, #1
 80180f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80180fa:	785a      	ldrb	r2, [r3, #1]
 80180fc:	3001      	adds	r0, #1
 80180fe:	2a30      	cmp	r2, #48	@ 0x30
 8018100:	d0f8      	beq.n	80180f4 <_strtod_l+0x1e4>
 8018102:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8018106:	2b08      	cmp	r3, #8
 8018108:	f200 84d2 	bhi.w	8018ab0 <_strtod_l+0xba0>
 801810c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801810e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018110:	2000      	movs	r0, #0
 8018112:	930c      	str	r3, [sp, #48]	@ 0x30
 8018114:	4605      	mov	r5, r0
 8018116:	3a30      	subs	r2, #48	@ 0x30
 8018118:	f100 0301 	add.w	r3, r0, #1
 801811c:	d018      	beq.n	8018150 <_strtod_l+0x240>
 801811e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018120:	4419      	add	r1, r3
 8018122:	910a      	str	r1, [sp, #40]	@ 0x28
 8018124:	462e      	mov	r6, r5
 8018126:	f04f 0e0a 	mov.w	lr, #10
 801812a:	1c71      	adds	r1, r6, #1
 801812c:	eba1 0c05 	sub.w	ip, r1, r5
 8018130:	4563      	cmp	r3, ip
 8018132:	dc15      	bgt.n	8018160 <_strtod_l+0x250>
 8018134:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8018138:	182b      	adds	r3, r5, r0
 801813a:	2b08      	cmp	r3, #8
 801813c:	f105 0501 	add.w	r5, r5, #1
 8018140:	4405      	add	r5, r0
 8018142:	dc1a      	bgt.n	801817a <_strtod_l+0x26a>
 8018144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018146:	230a      	movs	r3, #10
 8018148:	fb03 2301 	mla	r3, r3, r1, r2
 801814c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801814e:	2300      	movs	r3, #0
 8018150:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018152:	1c51      	adds	r1, r2, #1
 8018154:	9119      	str	r1, [sp, #100]	@ 0x64
 8018156:	7852      	ldrb	r2, [r2, #1]
 8018158:	4618      	mov	r0, r3
 801815a:	e7c5      	b.n	80180e8 <_strtod_l+0x1d8>
 801815c:	4648      	mov	r0, r9
 801815e:	e7ce      	b.n	80180fe <_strtod_l+0x1ee>
 8018160:	2e08      	cmp	r6, #8
 8018162:	dc05      	bgt.n	8018170 <_strtod_l+0x260>
 8018164:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8018166:	fb0e f606 	mul.w	r6, lr, r6
 801816a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801816c:	460e      	mov	r6, r1
 801816e:	e7dc      	b.n	801812a <_strtod_l+0x21a>
 8018170:	2910      	cmp	r1, #16
 8018172:	bfd8      	it	le
 8018174:	fb0e f707 	mulle.w	r7, lr, r7
 8018178:	e7f8      	b.n	801816c <_strtod_l+0x25c>
 801817a:	2b0f      	cmp	r3, #15
 801817c:	bfdc      	itt	le
 801817e:	230a      	movle	r3, #10
 8018180:	fb03 2707 	mlale	r7, r3, r7, r2
 8018184:	e7e3      	b.n	801814e <_strtod_l+0x23e>
 8018186:	2300      	movs	r3, #0
 8018188:	930a      	str	r3, [sp, #40]	@ 0x28
 801818a:	2301      	movs	r3, #1
 801818c:	e77a      	b.n	8018084 <_strtod_l+0x174>
 801818e:	f04f 0c00 	mov.w	ip, #0
 8018192:	1ca2      	adds	r2, r4, #2
 8018194:	9219      	str	r2, [sp, #100]	@ 0x64
 8018196:	78a2      	ldrb	r2, [r4, #2]
 8018198:	e782      	b.n	80180a0 <_strtod_l+0x190>
 801819a:	f04f 0c01 	mov.w	ip, #1
 801819e:	e7f8      	b.n	8018192 <_strtod_l+0x282>
 80181a0:	08021c80 	.word	0x08021c80
 80181a4:	080219d4 	.word	0x080219d4
 80181a8:	7ff00000 	.word	0x7ff00000
 80181ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80181ae:	1c51      	adds	r1, r2, #1
 80181b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80181b2:	7852      	ldrb	r2, [r2, #1]
 80181b4:	2a30      	cmp	r2, #48	@ 0x30
 80181b6:	d0f9      	beq.n	80181ac <_strtod_l+0x29c>
 80181b8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80181bc:	2908      	cmp	r1, #8
 80181be:	f63f af75 	bhi.w	80180ac <_strtod_l+0x19c>
 80181c2:	3a30      	subs	r2, #48	@ 0x30
 80181c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80181c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80181c8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80181ca:	f04f 080a 	mov.w	r8, #10
 80181ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80181d0:	1c56      	adds	r6, r2, #1
 80181d2:	9619      	str	r6, [sp, #100]	@ 0x64
 80181d4:	7852      	ldrb	r2, [r2, #1]
 80181d6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80181da:	f1be 0f09 	cmp.w	lr, #9
 80181de:	d939      	bls.n	8018254 <_strtod_l+0x344>
 80181e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80181e2:	1a76      	subs	r6, r6, r1
 80181e4:	2e08      	cmp	r6, #8
 80181e6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80181ea:	dc03      	bgt.n	80181f4 <_strtod_l+0x2e4>
 80181ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80181ee:	4588      	cmp	r8, r1
 80181f0:	bfa8      	it	ge
 80181f2:	4688      	movge	r8, r1
 80181f4:	f1bc 0f00 	cmp.w	ip, #0
 80181f8:	d001      	beq.n	80181fe <_strtod_l+0x2ee>
 80181fa:	f1c8 0800 	rsb	r8, r8, #0
 80181fe:	2d00      	cmp	r5, #0
 8018200:	d14e      	bne.n	80182a0 <_strtod_l+0x390>
 8018202:	9908      	ldr	r1, [sp, #32]
 8018204:	4308      	orrs	r0, r1
 8018206:	f47f aebc 	bne.w	8017f82 <_strtod_l+0x72>
 801820a:	2b00      	cmp	r3, #0
 801820c:	f47f aed4 	bne.w	8017fb8 <_strtod_l+0xa8>
 8018210:	2a69      	cmp	r2, #105	@ 0x69
 8018212:	d028      	beq.n	8018266 <_strtod_l+0x356>
 8018214:	dc25      	bgt.n	8018262 <_strtod_l+0x352>
 8018216:	2a49      	cmp	r2, #73	@ 0x49
 8018218:	d025      	beq.n	8018266 <_strtod_l+0x356>
 801821a:	2a4e      	cmp	r2, #78	@ 0x4e
 801821c:	f47f aecc 	bne.w	8017fb8 <_strtod_l+0xa8>
 8018220:	499a      	ldr	r1, [pc, #616]	@ (801848c <_strtod_l+0x57c>)
 8018222:	a819      	add	r0, sp, #100	@ 0x64
 8018224:	f003 fee8 	bl	801bff8 <__match>
 8018228:	2800      	cmp	r0, #0
 801822a:	f43f aec5 	beq.w	8017fb8 <_strtod_l+0xa8>
 801822e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018230:	781b      	ldrb	r3, [r3, #0]
 8018232:	2b28      	cmp	r3, #40	@ 0x28
 8018234:	d12e      	bne.n	8018294 <_strtod_l+0x384>
 8018236:	4996      	ldr	r1, [pc, #600]	@ (8018490 <_strtod_l+0x580>)
 8018238:	aa1c      	add	r2, sp, #112	@ 0x70
 801823a:	a819      	add	r0, sp, #100	@ 0x64
 801823c:	f003 fef0 	bl	801c020 <__hexnan>
 8018240:	2805      	cmp	r0, #5
 8018242:	d127      	bne.n	8018294 <_strtod_l+0x384>
 8018244:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018246:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801824a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801824e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018252:	e696      	b.n	8017f82 <_strtod_l+0x72>
 8018254:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018256:	fb08 2101 	mla	r1, r8, r1, r2
 801825a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801825e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018260:	e7b5      	b.n	80181ce <_strtod_l+0x2be>
 8018262:	2a6e      	cmp	r2, #110	@ 0x6e
 8018264:	e7da      	b.n	801821c <_strtod_l+0x30c>
 8018266:	498b      	ldr	r1, [pc, #556]	@ (8018494 <_strtod_l+0x584>)
 8018268:	a819      	add	r0, sp, #100	@ 0x64
 801826a:	f003 fec5 	bl	801bff8 <__match>
 801826e:	2800      	cmp	r0, #0
 8018270:	f43f aea2 	beq.w	8017fb8 <_strtod_l+0xa8>
 8018274:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018276:	4988      	ldr	r1, [pc, #544]	@ (8018498 <_strtod_l+0x588>)
 8018278:	3b01      	subs	r3, #1
 801827a:	a819      	add	r0, sp, #100	@ 0x64
 801827c:	9319      	str	r3, [sp, #100]	@ 0x64
 801827e:	f003 febb 	bl	801bff8 <__match>
 8018282:	b910      	cbnz	r0, 801828a <_strtod_l+0x37a>
 8018284:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018286:	3301      	adds	r3, #1
 8018288:	9319      	str	r3, [sp, #100]	@ 0x64
 801828a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80184a8 <_strtod_l+0x598>
 801828e:	f04f 0a00 	mov.w	sl, #0
 8018292:	e676      	b.n	8017f82 <_strtod_l+0x72>
 8018294:	4881      	ldr	r0, [pc, #516]	@ (801849c <_strtod_l+0x58c>)
 8018296:	f002 fcfb 	bl	801ac90 <nan>
 801829a:	ec5b ab10 	vmov	sl, fp, d0
 801829e:	e670      	b.n	8017f82 <_strtod_l+0x72>
 80182a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80182a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80182a4:	eba8 0303 	sub.w	r3, r8, r3
 80182a8:	f1b9 0f00 	cmp.w	r9, #0
 80182ac:	bf08      	it	eq
 80182ae:	46a9      	moveq	r9, r5
 80182b0:	2d10      	cmp	r5, #16
 80182b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80182b4:	462c      	mov	r4, r5
 80182b6:	bfa8      	it	ge
 80182b8:	2410      	movge	r4, #16
 80182ba:	f7e8 f933 	bl	8000524 <__aeabi_ui2d>
 80182be:	2d09      	cmp	r5, #9
 80182c0:	4682      	mov	sl, r0
 80182c2:	468b      	mov	fp, r1
 80182c4:	dc13      	bgt.n	80182ee <_strtod_l+0x3de>
 80182c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	f43f ae5a 	beq.w	8017f82 <_strtod_l+0x72>
 80182ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182d0:	dd78      	ble.n	80183c4 <_strtod_l+0x4b4>
 80182d2:	2b16      	cmp	r3, #22
 80182d4:	dc5f      	bgt.n	8018396 <_strtod_l+0x486>
 80182d6:	4972      	ldr	r1, [pc, #456]	@ (80184a0 <_strtod_l+0x590>)
 80182d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80182dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182e0:	4652      	mov	r2, sl
 80182e2:	465b      	mov	r3, fp
 80182e4:	f7e8 f998 	bl	8000618 <__aeabi_dmul>
 80182e8:	4682      	mov	sl, r0
 80182ea:	468b      	mov	fp, r1
 80182ec:	e649      	b.n	8017f82 <_strtod_l+0x72>
 80182ee:	4b6c      	ldr	r3, [pc, #432]	@ (80184a0 <_strtod_l+0x590>)
 80182f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80182f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80182f8:	f7e8 f98e 	bl	8000618 <__aeabi_dmul>
 80182fc:	4682      	mov	sl, r0
 80182fe:	4638      	mov	r0, r7
 8018300:	468b      	mov	fp, r1
 8018302:	f7e8 f90f 	bl	8000524 <__aeabi_ui2d>
 8018306:	4602      	mov	r2, r0
 8018308:	460b      	mov	r3, r1
 801830a:	4650      	mov	r0, sl
 801830c:	4659      	mov	r1, fp
 801830e:	f7e7 ffcd 	bl	80002ac <__adddf3>
 8018312:	2d0f      	cmp	r5, #15
 8018314:	4682      	mov	sl, r0
 8018316:	468b      	mov	fp, r1
 8018318:	ddd5      	ble.n	80182c6 <_strtod_l+0x3b6>
 801831a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801831c:	1b2c      	subs	r4, r5, r4
 801831e:	441c      	add	r4, r3
 8018320:	2c00      	cmp	r4, #0
 8018322:	f340 8093 	ble.w	801844c <_strtod_l+0x53c>
 8018326:	f014 030f 	ands.w	r3, r4, #15
 801832a:	d00a      	beq.n	8018342 <_strtod_l+0x432>
 801832c:	495c      	ldr	r1, [pc, #368]	@ (80184a0 <_strtod_l+0x590>)
 801832e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018332:	4652      	mov	r2, sl
 8018334:	465b      	mov	r3, fp
 8018336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801833a:	f7e8 f96d 	bl	8000618 <__aeabi_dmul>
 801833e:	4682      	mov	sl, r0
 8018340:	468b      	mov	fp, r1
 8018342:	f034 040f 	bics.w	r4, r4, #15
 8018346:	d073      	beq.n	8018430 <_strtod_l+0x520>
 8018348:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801834c:	dd49      	ble.n	80183e2 <_strtod_l+0x4d2>
 801834e:	2400      	movs	r4, #0
 8018350:	46a0      	mov	r8, r4
 8018352:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018354:	46a1      	mov	r9, r4
 8018356:	9a05      	ldr	r2, [sp, #20]
 8018358:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80184a8 <_strtod_l+0x598>
 801835c:	2322      	movs	r3, #34	@ 0x22
 801835e:	6013      	str	r3, [r2, #0]
 8018360:	f04f 0a00 	mov.w	sl, #0
 8018364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018366:	2b00      	cmp	r3, #0
 8018368:	f43f ae0b 	beq.w	8017f82 <_strtod_l+0x72>
 801836c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801836e:	9805      	ldr	r0, [sp, #20]
 8018370:	f003 ff88 	bl	801c284 <_Bfree>
 8018374:	9805      	ldr	r0, [sp, #20]
 8018376:	4649      	mov	r1, r9
 8018378:	f003 ff84 	bl	801c284 <_Bfree>
 801837c:	9805      	ldr	r0, [sp, #20]
 801837e:	4641      	mov	r1, r8
 8018380:	f003 ff80 	bl	801c284 <_Bfree>
 8018384:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018386:	9805      	ldr	r0, [sp, #20]
 8018388:	f003 ff7c 	bl	801c284 <_Bfree>
 801838c:	9805      	ldr	r0, [sp, #20]
 801838e:	4621      	mov	r1, r4
 8018390:	f003 ff78 	bl	801c284 <_Bfree>
 8018394:	e5f5      	b.n	8017f82 <_strtod_l+0x72>
 8018396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018398:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801839c:	4293      	cmp	r3, r2
 801839e:	dbbc      	blt.n	801831a <_strtod_l+0x40a>
 80183a0:	4c3f      	ldr	r4, [pc, #252]	@ (80184a0 <_strtod_l+0x590>)
 80183a2:	f1c5 050f 	rsb	r5, r5, #15
 80183a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80183aa:	4652      	mov	r2, sl
 80183ac:	465b      	mov	r3, fp
 80183ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80183b2:	f7e8 f931 	bl	8000618 <__aeabi_dmul>
 80183b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80183b8:	1b5d      	subs	r5, r3, r5
 80183ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80183be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80183c2:	e78f      	b.n	80182e4 <_strtod_l+0x3d4>
 80183c4:	3316      	adds	r3, #22
 80183c6:	dba8      	blt.n	801831a <_strtod_l+0x40a>
 80183c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80183ca:	eba3 0808 	sub.w	r8, r3, r8
 80183ce:	4b34      	ldr	r3, [pc, #208]	@ (80184a0 <_strtod_l+0x590>)
 80183d0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80183d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80183d8:	4650      	mov	r0, sl
 80183da:	4659      	mov	r1, fp
 80183dc:	f7e8 fa46 	bl	800086c <__aeabi_ddiv>
 80183e0:	e782      	b.n	80182e8 <_strtod_l+0x3d8>
 80183e2:	2300      	movs	r3, #0
 80183e4:	4f2f      	ldr	r7, [pc, #188]	@ (80184a4 <_strtod_l+0x594>)
 80183e6:	1124      	asrs	r4, r4, #4
 80183e8:	4650      	mov	r0, sl
 80183ea:	4659      	mov	r1, fp
 80183ec:	461e      	mov	r6, r3
 80183ee:	2c01      	cmp	r4, #1
 80183f0:	dc21      	bgt.n	8018436 <_strtod_l+0x526>
 80183f2:	b10b      	cbz	r3, 80183f8 <_strtod_l+0x4e8>
 80183f4:	4682      	mov	sl, r0
 80183f6:	468b      	mov	fp, r1
 80183f8:	492a      	ldr	r1, [pc, #168]	@ (80184a4 <_strtod_l+0x594>)
 80183fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80183fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8018402:	4652      	mov	r2, sl
 8018404:	465b      	mov	r3, fp
 8018406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801840a:	f7e8 f905 	bl	8000618 <__aeabi_dmul>
 801840e:	4b26      	ldr	r3, [pc, #152]	@ (80184a8 <_strtod_l+0x598>)
 8018410:	460a      	mov	r2, r1
 8018412:	400b      	ands	r3, r1
 8018414:	4925      	ldr	r1, [pc, #148]	@ (80184ac <_strtod_l+0x59c>)
 8018416:	428b      	cmp	r3, r1
 8018418:	4682      	mov	sl, r0
 801841a:	d898      	bhi.n	801834e <_strtod_l+0x43e>
 801841c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8018420:	428b      	cmp	r3, r1
 8018422:	bf86      	itte	hi
 8018424:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80184b0 <_strtod_l+0x5a0>
 8018428:	f04f 3aff 	movhi.w	sl, #4294967295
 801842c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8018430:	2300      	movs	r3, #0
 8018432:	9308      	str	r3, [sp, #32]
 8018434:	e076      	b.n	8018524 <_strtod_l+0x614>
 8018436:	07e2      	lsls	r2, r4, #31
 8018438:	d504      	bpl.n	8018444 <_strtod_l+0x534>
 801843a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801843e:	f7e8 f8eb 	bl	8000618 <__aeabi_dmul>
 8018442:	2301      	movs	r3, #1
 8018444:	3601      	adds	r6, #1
 8018446:	1064      	asrs	r4, r4, #1
 8018448:	3708      	adds	r7, #8
 801844a:	e7d0      	b.n	80183ee <_strtod_l+0x4de>
 801844c:	d0f0      	beq.n	8018430 <_strtod_l+0x520>
 801844e:	4264      	negs	r4, r4
 8018450:	f014 020f 	ands.w	r2, r4, #15
 8018454:	d00a      	beq.n	801846c <_strtod_l+0x55c>
 8018456:	4b12      	ldr	r3, [pc, #72]	@ (80184a0 <_strtod_l+0x590>)
 8018458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801845c:	4650      	mov	r0, sl
 801845e:	4659      	mov	r1, fp
 8018460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018464:	f7e8 fa02 	bl	800086c <__aeabi_ddiv>
 8018468:	4682      	mov	sl, r0
 801846a:	468b      	mov	fp, r1
 801846c:	1124      	asrs	r4, r4, #4
 801846e:	d0df      	beq.n	8018430 <_strtod_l+0x520>
 8018470:	2c1f      	cmp	r4, #31
 8018472:	dd1f      	ble.n	80184b4 <_strtod_l+0x5a4>
 8018474:	2400      	movs	r4, #0
 8018476:	46a0      	mov	r8, r4
 8018478:	940b      	str	r4, [sp, #44]	@ 0x2c
 801847a:	46a1      	mov	r9, r4
 801847c:	9a05      	ldr	r2, [sp, #20]
 801847e:	2322      	movs	r3, #34	@ 0x22
 8018480:	f04f 0a00 	mov.w	sl, #0
 8018484:	f04f 0b00 	mov.w	fp, #0
 8018488:	6013      	str	r3, [r2, #0]
 801848a:	e76b      	b.n	8018364 <_strtod_l+0x454>
 801848c:	080219e3 	.word	0x080219e3
 8018490:	08021c6c 	.word	0x08021c6c
 8018494:	080219db 	.word	0x080219db
 8018498:	08021b11 	.word	0x08021b11
 801849c:	08021b0d 	.word	0x08021b0d
 80184a0:	08021eb8 	.word	0x08021eb8
 80184a4:	08021e90 	.word	0x08021e90
 80184a8:	7ff00000 	.word	0x7ff00000
 80184ac:	7ca00000 	.word	0x7ca00000
 80184b0:	7fefffff 	.word	0x7fefffff
 80184b4:	f014 0310 	ands.w	r3, r4, #16
 80184b8:	bf18      	it	ne
 80184ba:	236a      	movne	r3, #106	@ 0x6a
 80184bc:	4ea9      	ldr	r6, [pc, #676]	@ (8018764 <_strtod_l+0x854>)
 80184be:	9308      	str	r3, [sp, #32]
 80184c0:	4650      	mov	r0, sl
 80184c2:	4659      	mov	r1, fp
 80184c4:	2300      	movs	r3, #0
 80184c6:	07e7      	lsls	r7, r4, #31
 80184c8:	d504      	bpl.n	80184d4 <_strtod_l+0x5c4>
 80184ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80184ce:	f7e8 f8a3 	bl	8000618 <__aeabi_dmul>
 80184d2:	2301      	movs	r3, #1
 80184d4:	1064      	asrs	r4, r4, #1
 80184d6:	f106 0608 	add.w	r6, r6, #8
 80184da:	d1f4      	bne.n	80184c6 <_strtod_l+0x5b6>
 80184dc:	b10b      	cbz	r3, 80184e2 <_strtod_l+0x5d2>
 80184de:	4682      	mov	sl, r0
 80184e0:	468b      	mov	fp, r1
 80184e2:	9b08      	ldr	r3, [sp, #32]
 80184e4:	b1b3      	cbz	r3, 8018514 <_strtod_l+0x604>
 80184e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80184ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	4659      	mov	r1, fp
 80184f2:	dd0f      	ble.n	8018514 <_strtod_l+0x604>
 80184f4:	2b1f      	cmp	r3, #31
 80184f6:	dd56      	ble.n	80185a6 <_strtod_l+0x696>
 80184f8:	2b34      	cmp	r3, #52	@ 0x34
 80184fa:	bfde      	ittt	le
 80184fc:	f04f 33ff 	movle.w	r3, #4294967295
 8018500:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8018504:	4093      	lslle	r3, r2
 8018506:	f04f 0a00 	mov.w	sl, #0
 801850a:	bfcc      	ite	gt
 801850c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018510:	ea03 0b01 	andle.w	fp, r3, r1
 8018514:	2200      	movs	r2, #0
 8018516:	2300      	movs	r3, #0
 8018518:	4650      	mov	r0, sl
 801851a:	4659      	mov	r1, fp
 801851c:	f7e8 fae4 	bl	8000ae8 <__aeabi_dcmpeq>
 8018520:	2800      	cmp	r0, #0
 8018522:	d1a7      	bne.n	8018474 <_strtod_l+0x564>
 8018524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018526:	9300      	str	r3, [sp, #0]
 8018528:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801852a:	9805      	ldr	r0, [sp, #20]
 801852c:	462b      	mov	r3, r5
 801852e:	464a      	mov	r2, r9
 8018530:	f003 ff10 	bl	801c354 <__s2b>
 8018534:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018536:	2800      	cmp	r0, #0
 8018538:	f43f af09 	beq.w	801834e <_strtod_l+0x43e>
 801853c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801853e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018540:	2a00      	cmp	r2, #0
 8018542:	eba3 0308 	sub.w	r3, r3, r8
 8018546:	bfa8      	it	ge
 8018548:	2300      	movge	r3, #0
 801854a:	9312      	str	r3, [sp, #72]	@ 0x48
 801854c:	2400      	movs	r4, #0
 801854e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018552:	9316      	str	r3, [sp, #88]	@ 0x58
 8018554:	46a0      	mov	r8, r4
 8018556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018558:	9805      	ldr	r0, [sp, #20]
 801855a:	6859      	ldr	r1, [r3, #4]
 801855c:	f003 fe52 	bl	801c204 <_Balloc>
 8018560:	4681      	mov	r9, r0
 8018562:	2800      	cmp	r0, #0
 8018564:	f43f aef7 	beq.w	8018356 <_strtod_l+0x446>
 8018568:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801856a:	691a      	ldr	r2, [r3, #16]
 801856c:	3202      	adds	r2, #2
 801856e:	f103 010c 	add.w	r1, r3, #12
 8018572:	0092      	lsls	r2, r2, #2
 8018574:	300c      	adds	r0, #12
 8018576:	f002 fb7c 	bl	801ac72 <memcpy>
 801857a:	ec4b ab10 	vmov	d0, sl, fp
 801857e:	9805      	ldr	r0, [sp, #20]
 8018580:	aa1c      	add	r2, sp, #112	@ 0x70
 8018582:	a91b      	add	r1, sp, #108	@ 0x6c
 8018584:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8018588:	f004 fa18 	bl	801c9bc <__d2b>
 801858c:	901a      	str	r0, [sp, #104]	@ 0x68
 801858e:	2800      	cmp	r0, #0
 8018590:	f43f aee1 	beq.w	8018356 <_strtod_l+0x446>
 8018594:	9805      	ldr	r0, [sp, #20]
 8018596:	2101      	movs	r1, #1
 8018598:	f003 ff72 	bl	801c480 <__i2b>
 801859c:	4680      	mov	r8, r0
 801859e:	b948      	cbnz	r0, 80185b4 <_strtod_l+0x6a4>
 80185a0:	f04f 0800 	mov.w	r8, #0
 80185a4:	e6d7      	b.n	8018356 <_strtod_l+0x446>
 80185a6:	f04f 32ff 	mov.w	r2, #4294967295
 80185aa:	fa02 f303 	lsl.w	r3, r2, r3
 80185ae:	ea03 0a0a 	and.w	sl, r3, sl
 80185b2:	e7af      	b.n	8018514 <_strtod_l+0x604>
 80185b4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80185b6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80185b8:	2d00      	cmp	r5, #0
 80185ba:	bfab      	itete	ge
 80185bc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80185be:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80185c0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80185c2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80185c4:	bfac      	ite	ge
 80185c6:	18ef      	addge	r7, r5, r3
 80185c8:	1b5e      	sublt	r6, r3, r5
 80185ca:	9b08      	ldr	r3, [sp, #32]
 80185cc:	1aed      	subs	r5, r5, r3
 80185ce:	4415      	add	r5, r2
 80185d0:	4b65      	ldr	r3, [pc, #404]	@ (8018768 <_strtod_l+0x858>)
 80185d2:	3d01      	subs	r5, #1
 80185d4:	429d      	cmp	r5, r3
 80185d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80185da:	da50      	bge.n	801867e <_strtod_l+0x76e>
 80185dc:	1b5b      	subs	r3, r3, r5
 80185de:	2b1f      	cmp	r3, #31
 80185e0:	eba2 0203 	sub.w	r2, r2, r3
 80185e4:	f04f 0101 	mov.w	r1, #1
 80185e8:	dc3d      	bgt.n	8018666 <_strtod_l+0x756>
 80185ea:	fa01 f303 	lsl.w	r3, r1, r3
 80185ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80185f0:	2300      	movs	r3, #0
 80185f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80185f4:	18bd      	adds	r5, r7, r2
 80185f6:	9b08      	ldr	r3, [sp, #32]
 80185f8:	42af      	cmp	r7, r5
 80185fa:	4416      	add	r6, r2
 80185fc:	441e      	add	r6, r3
 80185fe:	463b      	mov	r3, r7
 8018600:	bfa8      	it	ge
 8018602:	462b      	movge	r3, r5
 8018604:	42b3      	cmp	r3, r6
 8018606:	bfa8      	it	ge
 8018608:	4633      	movge	r3, r6
 801860a:	2b00      	cmp	r3, #0
 801860c:	bfc2      	ittt	gt
 801860e:	1aed      	subgt	r5, r5, r3
 8018610:	1af6      	subgt	r6, r6, r3
 8018612:	1aff      	subgt	r7, r7, r3
 8018614:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018616:	2b00      	cmp	r3, #0
 8018618:	dd16      	ble.n	8018648 <_strtod_l+0x738>
 801861a:	4641      	mov	r1, r8
 801861c:	9805      	ldr	r0, [sp, #20]
 801861e:	461a      	mov	r2, r3
 8018620:	f003 ffe6 	bl	801c5f0 <__pow5mult>
 8018624:	4680      	mov	r8, r0
 8018626:	2800      	cmp	r0, #0
 8018628:	d0ba      	beq.n	80185a0 <_strtod_l+0x690>
 801862a:	4601      	mov	r1, r0
 801862c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801862e:	9805      	ldr	r0, [sp, #20]
 8018630:	f003 ff3c 	bl	801c4ac <__multiply>
 8018634:	900a      	str	r0, [sp, #40]	@ 0x28
 8018636:	2800      	cmp	r0, #0
 8018638:	f43f ae8d 	beq.w	8018356 <_strtod_l+0x446>
 801863c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801863e:	9805      	ldr	r0, [sp, #20]
 8018640:	f003 fe20 	bl	801c284 <_Bfree>
 8018644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018646:	931a      	str	r3, [sp, #104]	@ 0x68
 8018648:	2d00      	cmp	r5, #0
 801864a:	dc1d      	bgt.n	8018688 <_strtod_l+0x778>
 801864c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801864e:	2b00      	cmp	r3, #0
 8018650:	dd23      	ble.n	801869a <_strtod_l+0x78a>
 8018652:	4649      	mov	r1, r9
 8018654:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018656:	9805      	ldr	r0, [sp, #20]
 8018658:	f003 ffca 	bl	801c5f0 <__pow5mult>
 801865c:	4681      	mov	r9, r0
 801865e:	b9e0      	cbnz	r0, 801869a <_strtod_l+0x78a>
 8018660:	f04f 0900 	mov.w	r9, #0
 8018664:	e677      	b.n	8018356 <_strtod_l+0x446>
 8018666:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801866a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801866e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8018672:	35e2      	adds	r5, #226	@ 0xe2
 8018674:	fa01 f305 	lsl.w	r3, r1, r5
 8018678:	9310      	str	r3, [sp, #64]	@ 0x40
 801867a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801867c:	e7ba      	b.n	80185f4 <_strtod_l+0x6e4>
 801867e:	2300      	movs	r3, #0
 8018680:	9310      	str	r3, [sp, #64]	@ 0x40
 8018682:	2301      	movs	r3, #1
 8018684:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018686:	e7b5      	b.n	80185f4 <_strtod_l+0x6e4>
 8018688:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801868a:	9805      	ldr	r0, [sp, #20]
 801868c:	462a      	mov	r2, r5
 801868e:	f004 f809 	bl	801c6a4 <__lshift>
 8018692:	901a      	str	r0, [sp, #104]	@ 0x68
 8018694:	2800      	cmp	r0, #0
 8018696:	d1d9      	bne.n	801864c <_strtod_l+0x73c>
 8018698:	e65d      	b.n	8018356 <_strtod_l+0x446>
 801869a:	2e00      	cmp	r6, #0
 801869c:	dd07      	ble.n	80186ae <_strtod_l+0x79e>
 801869e:	4649      	mov	r1, r9
 80186a0:	9805      	ldr	r0, [sp, #20]
 80186a2:	4632      	mov	r2, r6
 80186a4:	f003 fffe 	bl	801c6a4 <__lshift>
 80186a8:	4681      	mov	r9, r0
 80186aa:	2800      	cmp	r0, #0
 80186ac:	d0d8      	beq.n	8018660 <_strtod_l+0x750>
 80186ae:	2f00      	cmp	r7, #0
 80186b0:	dd08      	ble.n	80186c4 <_strtod_l+0x7b4>
 80186b2:	4641      	mov	r1, r8
 80186b4:	9805      	ldr	r0, [sp, #20]
 80186b6:	463a      	mov	r2, r7
 80186b8:	f003 fff4 	bl	801c6a4 <__lshift>
 80186bc:	4680      	mov	r8, r0
 80186be:	2800      	cmp	r0, #0
 80186c0:	f43f ae49 	beq.w	8018356 <_strtod_l+0x446>
 80186c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80186c6:	9805      	ldr	r0, [sp, #20]
 80186c8:	464a      	mov	r2, r9
 80186ca:	f004 f873 	bl	801c7b4 <__mdiff>
 80186ce:	4604      	mov	r4, r0
 80186d0:	2800      	cmp	r0, #0
 80186d2:	f43f ae40 	beq.w	8018356 <_strtod_l+0x446>
 80186d6:	68c3      	ldr	r3, [r0, #12]
 80186d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80186da:	2300      	movs	r3, #0
 80186dc:	60c3      	str	r3, [r0, #12]
 80186de:	4641      	mov	r1, r8
 80186e0:	f004 f84c 	bl	801c77c <__mcmp>
 80186e4:	2800      	cmp	r0, #0
 80186e6:	da45      	bge.n	8018774 <_strtod_l+0x864>
 80186e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80186ea:	ea53 030a 	orrs.w	r3, r3, sl
 80186ee:	d16b      	bne.n	80187c8 <_strtod_l+0x8b8>
 80186f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d167      	bne.n	80187c8 <_strtod_l+0x8b8>
 80186f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80186fc:	0d1b      	lsrs	r3, r3, #20
 80186fe:	051b      	lsls	r3, r3, #20
 8018700:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018704:	d960      	bls.n	80187c8 <_strtod_l+0x8b8>
 8018706:	6963      	ldr	r3, [r4, #20]
 8018708:	b913      	cbnz	r3, 8018710 <_strtod_l+0x800>
 801870a:	6923      	ldr	r3, [r4, #16]
 801870c:	2b01      	cmp	r3, #1
 801870e:	dd5b      	ble.n	80187c8 <_strtod_l+0x8b8>
 8018710:	4621      	mov	r1, r4
 8018712:	2201      	movs	r2, #1
 8018714:	9805      	ldr	r0, [sp, #20]
 8018716:	f003 ffc5 	bl	801c6a4 <__lshift>
 801871a:	4641      	mov	r1, r8
 801871c:	4604      	mov	r4, r0
 801871e:	f004 f82d 	bl	801c77c <__mcmp>
 8018722:	2800      	cmp	r0, #0
 8018724:	dd50      	ble.n	80187c8 <_strtod_l+0x8b8>
 8018726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801872a:	9a08      	ldr	r2, [sp, #32]
 801872c:	0d1b      	lsrs	r3, r3, #20
 801872e:	051b      	lsls	r3, r3, #20
 8018730:	2a00      	cmp	r2, #0
 8018732:	d06a      	beq.n	801880a <_strtod_l+0x8fa>
 8018734:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018738:	d867      	bhi.n	801880a <_strtod_l+0x8fa>
 801873a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801873e:	f67f ae9d 	bls.w	801847c <_strtod_l+0x56c>
 8018742:	4b0a      	ldr	r3, [pc, #40]	@ (801876c <_strtod_l+0x85c>)
 8018744:	4650      	mov	r0, sl
 8018746:	4659      	mov	r1, fp
 8018748:	2200      	movs	r2, #0
 801874a:	f7e7 ff65 	bl	8000618 <__aeabi_dmul>
 801874e:	4b08      	ldr	r3, [pc, #32]	@ (8018770 <_strtod_l+0x860>)
 8018750:	400b      	ands	r3, r1
 8018752:	4682      	mov	sl, r0
 8018754:	468b      	mov	fp, r1
 8018756:	2b00      	cmp	r3, #0
 8018758:	f47f ae08 	bne.w	801836c <_strtod_l+0x45c>
 801875c:	9a05      	ldr	r2, [sp, #20]
 801875e:	2322      	movs	r3, #34	@ 0x22
 8018760:	6013      	str	r3, [r2, #0]
 8018762:	e603      	b.n	801836c <_strtod_l+0x45c>
 8018764:	08021c98 	.word	0x08021c98
 8018768:	fffffc02 	.word	0xfffffc02
 801876c:	39500000 	.word	0x39500000
 8018770:	7ff00000 	.word	0x7ff00000
 8018774:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8018778:	d165      	bne.n	8018846 <_strtod_l+0x936>
 801877a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801877c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018780:	b35a      	cbz	r2, 80187da <_strtod_l+0x8ca>
 8018782:	4a9f      	ldr	r2, [pc, #636]	@ (8018a00 <_strtod_l+0xaf0>)
 8018784:	4293      	cmp	r3, r2
 8018786:	d12b      	bne.n	80187e0 <_strtod_l+0x8d0>
 8018788:	9b08      	ldr	r3, [sp, #32]
 801878a:	4651      	mov	r1, sl
 801878c:	b303      	cbz	r3, 80187d0 <_strtod_l+0x8c0>
 801878e:	4b9d      	ldr	r3, [pc, #628]	@ (8018a04 <_strtod_l+0xaf4>)
 8018790:	465a      	mov	r2, fp
 8018792:	4013      	ands	r3, r2
 8018794:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018798:	f04f 32ff 	mov.w	r2, #4294967295
 801879c:	d81b      	bhi.n	80187d6 <_strtod_l+0x8c6>
 801879e:	0d1b      	lsrs	r3, r3, #20
 80187a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80187a4:	fa02 f303 	lsl.w	r3, r2, r3
 80187a8:	4299      	cmp	r1, r3
 80187aa:	d119      	bne.n	80187e0 <_strtod_l+0x8d0>
 80187ac:	4b96      	ldr	r3, [pc, #600]	@ (8018a08 <_strtod_l+0xaf8>)
 80187ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d102      	bne.n	80187ba <_strtod_l+0x8aa>
 80187b4:	3101      	adds	r1, #1
 80187b6:	f43f adce 	beq.w	8018356 <_strtod_l+0x446>
 80187ba:	4b92      	ldr	r3, [pc, #584]	@ (8018a04 <_strtod_l+0xaf4>)
 80187bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80187be:	401a      	ands	r2, r3
 80187c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80187c4:	f04f 0a00 	mov.w	sl, #0
 80187c8:	9b08      	ldr	r3, [sp, #32]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d1b9      	bne.n	8018742 <_strtod_l+0x832>
 80187ce:	e5cd      	b.n	801836c <_strtod_l+0x45c>
 80187d0:	f04f 33ff 	mov.w	r3, #4294967295
 80187d4:	e7e8      	b.n	80187a8 <_strtod_l+0x898>
 80187d6:	4613      	mov	r3, r2
 80187d8:	e7e6      	b.n	80187a8 <_strtod_l+0x898>
 80187da:	ea53 030a 	orrs.w	r3, r3, sl
 80187de:	d0a2      	beq.n	8018726 <_strtod_l+0x816>
 80187e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80187e2:	b1db      	cbz	r3, 801881c <_strtod_l+0x90c>
 80187e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80187e6:	4213      	tst	r3, r2
 80187e8:	d0ee      	beq.n	80187c8 <_strtod_l+0x8b8>
 80187ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187ec:	9a08      	ldr	r2, [sp, #32]
 80187ee:	4650      	mov	r0, sl
 80187f0:	4659      	mov	r1, fp
 80187f2:	b1bb      	cbz	r3, 8018824 <_strtod_l+0x914>
 80187f4:	f7ff fb6c 	bl	8017ed0 <sulp>
 80187f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80187fc:	ec53 2b10 	vmov	r2, r3, d0
 8018800:	f7e7 fd54 	bl	80002ac <__adddf3>
 8018804:	4682      	mov	sl, r0
 8018806:	468b      	mov	fp, r1
 8018808:	e7de      	b.n	80187c8 <_strtod_l+0x8b8>
 801880a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801880e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018812:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018816:	f04f 3aff 	mov.w	sl, #4294967295
 801881a:	e7d5      	b.n	80187c8 <_strtod_l+0x8b8>
 801881c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801881e:	ea13 0f0a 	tst.w	r3, sl
 8018822:	e7e1      	b.n	80187e8 <_strtod_l+0x8d8>
 8018824:	f7ff fb54 	bl	8017ed0 <sulp>
 8018828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801882c:	ec53 2b10 	vmov	r2, r3, d0
 8018830:	f7e7 fd3a 	bl	80002a8 <__aeabi_dsub>
 8018834:	2200      	movs	r2, #0
 8018836:	2300      	movs	r3, #0
 8018838:	4682      	mov	sl, r0
 801883a:	468b      	mov	fp, r1
 801883c:	f7e8 f954 	bl	8000ae8 <__aeabi_dcmpeq>
 8018840:	2800      	cmp	r0, #0
 8018842:	d0c1      	beq.n	80187c8 <_strtod_l+0x8b8>
 8018844:	e61a      	b.n	801847c <_strtod_l+0x56c>
 8018846:	4641      	mov	r1, r8
 8018848:	4620      	mov	r0, r4
 801884a:	f004 f90f 	bl	801ca6c <__ratio>
 801884e:	ec57 6b10 	vmov	r6, r7, d0
 8018852:	2200      	movs	r2, #0
 8018854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018858:	4630      	mov	r0, r6
 801885a:	4639      	mov	r1, r7
 801885c:	f7e8 f958 	bl	8000b10 <__aeabi_dcmple>
 8018860:	2800      	cmp	r0, #0
 8018862:	d06f      	beq.n	8018944 <_strtod_l+0xa34>
 8018864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018866:	2b00      	cmp	r3, #0
 8018868:	d17a      	bne.n	8018960 <_strtod_l+0xa50>
 801886a:	f1ba 0f00 	cmp.w	sl, #0
 801886e:	d158      	bne.n	8018922 <_strtod_l+0xa12>
 8018870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018876:	2b00      	cmp	r3, #0
 8018878:	d15a      	bne.n	8018930 <_strtod_l+0xa20>
 801887a:	4b64      	ldr	r3, [pc, #400]	@ (8018a0c <_strtod_l+0xafc>)
 801887c:	2200      	movs	r2, #0
 801887e:	4630      	mov	r0, r6
 8018880:	4639      	mov	r1, r7
 8018882:	f7e8 f93b 	bl	8000afc <__aeabi_dcmplt>
 8018886:	2800      	cmp	r0, #0
 8018888:	d159      	bne.n	801893e <_strtod_l+0xa2e>
 801888a:	4630      	mov	r0, r6
 801888c:	4639      	mov	r1, r7
 801888e:	4b60      	ldr	r3, [pc, #384]	@ (8018a10 <_strtod_l+0xb00>)
 8018890:	2200      	movs	r2, #0
 8018892:	f7e7 fec1 	bl	8000618 <__aeabi_dmul>
 8018896:	4606      	mov	r6, r0
 8018898:	460f      	mov	r7, r1
 801889a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801889e:	9606      	str	r6, [sp, #24]
 80188a0:	9307      	str	r3, [sp, #28]
 80188a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80188a6:	4d57      	ldr	r5, [pc, #348]	@ (8018a04 <_strtod_l+0xaf4>)
 80188a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80188ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188ae:	401d      	ands	r5, r3
 80188b0:	4b58      	ldr	r3, [pc, #352]	@ (8018a14 <_strtod_l+0xb04>)
 80188b2:	429d      	cmp	r5, r3
 80188b4:	f040 80b2 	bne.w	8018a1c <_strtod_l+0xb0c>
 80188b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80188be:	ec4b ab10 	vmov	d0, sl, fp
 80188c2:	f004 f80b 	bl	801c8dc <__ulp>
 80188c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80188ca:	ec51 0b10 	vmov	r0, r1, d0
 80188ce:	f7e7 fea3 	bl	8000618 <__aeabi_dmul>
 80188d2:	4652      	mov	r2, sl
 80188d4:	465b      	mov	r3, fp
 80188d6:	f7e7 fce9 	bl	80002ac <__adddf3>
 80188da:	460b      	mov	r3, r1
 80188dc:	4949      	ldr	r1, [pc, #292]	@ (8018a04 <_strtod_l+0xaf4>)
 80188de:	4a4e      	ldr	r2, [pc, #312]	@ (8018a18 <_strtod_l+0xb08>)
 80188e0:	4019      	ands	r1, r3
 80188e2:	4291      	cmp	r1, r2
 80188e4:	4682      	mov	sl, r0
 80188e6:	d942      	bls.n	801896e <_strtod_l+0xa5e>
 80188e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80188ea:	4b47      	ldr	r3, [pc, #284]	@ (8018a08 <_strtod_l+0xaf8>)
 80188ec:	429a      	cmp	r2, r3
 80188ee:	d103      	bne.n	80188f8 <_strtod_l+0x9e8>
 80188f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80188f2:	3301      	adds	r3, #1
 80188f4:	f43f ad2f 	beq.w	8018356 <_strtod_l+0x446>
 80188f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8018a08 <_strtod_l+0xaf8>
 80188fc:	f04f 3aff 	mov.w	sl, #4294967295
 8018900:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018902:	9805      	ldr	r0, [sp, #20]
 8018904:	f003 fcbe 	bl	801c284 <_Bfree>
 8018908:	9805      	ldr	r0, [sp, #20]
 801890a:	4649      	mov	r1, r9
 801890c:	f003 fcba 	bl	801c284 <_Bfree>
 8018910:	9805      	ldr	r0, [sp, #20]
 8018912:	4641      	mov	r1, r8
 8018914:	f003 fcb6 	bl	801c284 <_Bfree>
 8018918:	9805      	ldr	r0, [sp, #20]
 801891a:	4621      	mov	r1, r4
 801891c:	f003 fcb2 	bl	801c284 <_Bfree>
 8018920:	e619      	b.n	8018556 <_strtod_l+0x646>
 8018922:	f1ba 0f01 	cmp.w	sl, #1
 8018926:	d103      	bne.n	8018930 <_strtod_l+0xa20>
 8018928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801892a:	2b00      	cmp	r3, #0
 801892c:	f43f ada6 	beq.w	801847c <_strtod_l+0x56c>
 8018930:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80189e0 <_strtod_l+0xad0>
 8018934:	4f35      	ldr	r7, [pc, #212]	@ (8018a0c <_strtod_l+0xafc>)
 8018936:	ed8d 7b06 	vstr	d7, [sp, #24]
 801893a:	2600      	movs	r6, #0
 801893c:	e7b1      	b.n	80188a2 <_strtod_l+0x992>
 801893e:	4f34      	ldr	r7, [pc, #208]	@ (8018a10 <_strtod_l+0xb00>)
 8018940:	2600      	movs	r6, #0
 8018942:	e7aa      	b.n	801889a <_strtod_l+0x98a>
 8018944:	4b32      	ldr	r3, [pc, #200]	@ (8018a10 <_strtod_l+0xb00>)
 8018946:	4630      	mov	r0, r6
 8018948:	4639      	mov	r1, r7
 801894a:	2200      	movs	r2, #0
 801894c:	f7e7 fe64 	bl	8000618 <__aeabi_dmul>
 8018950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018952:	4606      	mov	r6, r0
 8018954:	460f      	mov	r7, r1
 8018956:	2b00      	cmp	r3, #0
 8018958:	d09f      	beq.n	801889a <_strtod_l+0x98a>
 801895a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801895e:	e7a0      	b.n	80188a2 <_strtod_l+0x992>
 8018960:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80189e8 <_strtod_l+0xad8>
 8018964:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018968:	ec57 6b17 	vmov	r6, r7, d7
 801896c:	e799      	b.n	80188a2 <_strtod_l+0x992>
 801896e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018972:	9b08      	ldr	r3, [sp, #32]
 8018974:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8018978:	2b00      	cmp	r3, #0
 801897a:	d1c1      	bne.n	8018900 <_strtod_l+0x9f0>
 801897c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018980:	0d1b      	lsrs	r3, r3, #20
 8018982:	051b      	lsls	r3, r3, #20
 8018984:	429d      	cmp	r5, r3
 8018986:	d1bb      	bne.n	8018900 <_strtod_l+0x9f0>
 8018988:	4630      	mov	r0, r6
 801898a:	4639      	mov	r1, r7
 801898c:	f7e8 f9f4 	bl	8000d78 <__aeabi_d2lz>
 8018990:	f7e7 fe14 	bl	80005bc <__aeabi_l2d>
 8018994:	4602      	mov	r2, r0
 8018996:	460b      	mov	r3, r1
 8018998:	4630      	mov	r0, r6
 801899a:	4639      	mov	r1, r7
 801899c:	f7e7 fc84 	bl	80002a8 <__aeabi_dsub>
 80189a0:	460b      	mov	r3, r1
 80189a2:	4602      	mov	r2, r0
 80189a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80189a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80189ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80189ae:	ea46 060a 	orr.w	r6, r6, sl
 80189b2:	431e      	orrs	r6, r3
 80189b4:	d06f      	beq.n	8018a96 <_strtod_l+0xb86>
 80189b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80189f0 <_strtod_l+0xae0>)
 80189b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189bc:	f7e8 f89e 	bl	8000afc <__aeabi_dcmplt>
 80189c0:	2800      	cmp	r0, #0
 80189c2:	f47f acd3 	bne.w	801836c <_strtod_l+0x45c>
 80189c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80189f8 <_strtod_l+0xae8>)
 80189c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80189d0:	f7e8 f8b2 	bl	8000b38 <__aeabi_dcmpgt>
 80189d4:	2800      	cmp	r0, #0
 80189d6:	d093      	beq.n	8018900 <_strtod_l+0x9f0>
 80189d8:	e4c8      	b.n	801836c <_strtod_l+0x45c>
 80189da:	bf00      	nop
 80189dc:	f3af 8000 	nop.w
 80189e0:	00000000 	.word	0x00000000
 80189e4:	bff00000 	.word	0xbff00000
 80189e8:	00000000 	.word	0x00000000
 80189ec:	3ff00000 	.word	0x3ff00000
 80189f0:	94a03595 	.word	0x94a03595
 80189f4:	3fdfffff 	.word	0x3fdfffff
 80189f8:	35afe535 	.word	0x35afe535
 80189fc:	3fe00000 	.word	0x3fe00000
 8018a00:	000fffff 	.word	0x000fffff
 8018a04:	7ff00000 	.word	0x7ff00000
 8018a08:	7fefffff 	.word	0x7fefffff
 8018a0c:	3ff00000 	.word	0x3ff00000
 8018a10:	3fe00000 	.word	0x3fe00000
 8018a14:	7fe00000 	.word	0x7fe00000
 8018a18:	7c9fffff 	.word	0x7c9fffff
 8018a1c:	9b08      	ldr	r3, [sp, #32]
 8018a1e:	b323      	cbz	r3, 8018a6a <_strtod_l+0xb5a>
 8018a20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8018a24:	d821      	bhi.n	8018a6a <_strtod_l+0xb5a>
 8018a26:	a328      	add	r3, pc, #160	@ (adr r3, 8018ac8 <_strtod_l+0xbb8>)
 8018a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a2c:	4630      	mov	r0, r6
 8018a2e:	4639      	mov	r1, r7
 8018a30:	f7e8 f86e 	bl	8000b10 <__aeabi_dcmple>
 8018a34:	b1a0      	cbz	r0, 8018a60 <_strtod_l+0xb50>
 8018a36:	4639      	mov	r1, r7
 8018a38:	4630      	mov	r0, r6
 8018a3a:	f7e8 f8c5 	bl	8000bc8 <__aeabi_d2uiz>
 8018a3e:	2801      	cmp	r0, #1
 8018a40:	bf38      	it	cc
 8018a42:	2001      	movcc	r0, #1
 8018a44:	f7e7 fd6e 	bl	8000524 <__aeabi_ui2d>
 8018a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a4a:	4606      	mov	r6, r0
 8018a4c:	460f      	mov	r7, r1
 8018a4e:	b9fb      	cbnz	r3, 8018a90 <_strtod_l+0xb80>
 8018a50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018a54:	9014      	str	r0, [sp, #80]	@ 0x50
 8018a56:	9315      	str	r3, [sp, #84]	@ 0x54
 8018a58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8018a5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018a60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018a62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8018a66:	1b5b      	subs	r3, r3, r5
 8018a68:	9311      	str	r3, [sp, #68]	@ 0x44
 8018a6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018a6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8018a72:	f003 ff33 	bl	801c8dc <__ulp>
 8018a76:	4650      	mov	r0, sl
 8018a78:	ec53 2b10 	vmov	r2, r3, d0
 8018a7c:	4659      	mov	r1, fp
 8018a7e:	f7e7 fdcb 	bl	8000618 <__aeabi_dmul>
 8018a82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8018a86:	f7e7 fc11 	bl	80002ac <__adddf3>
 8018a8a:	4682      	mov	sl, r0
 8018a8c:	468b      	mov	fp, r1
 8018a8e:	e770      	b.n	8018972 <_strtod_l+0xa62>
 8018a90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8018a94:	e7e0      	b.n	8018a58 <_strtod_l+0xb48>
 8018a96:	a30e      	add	r3, pc, #56	@ (adr r3, 8018ad0 <_strtod_l+0xbc0>)
 8018a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a9c:	f7e8 f82e 	bl	8000afc <__aeabi_dcmplt>
 8018aa0:	e798      	b.n	80189d4 <_strtod_l+0xac4>
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	930e      	str	r3, [sp, #56]	@ 0x38
 8018aa6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018aa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018aaa:	6013      	str	r3, [r2, #0]
 8018aac:	f7ff ba6d 	b.w	8017f8a <_strtod_l+0x7a>
 8018ab0:	2a65      	cmp	r2, #101	@ 0x65
 8018ab2:	f43f ab68 	beq.w	8018186 <_strtod_l+0x276>
 8018ab6:	2a45      	cmp	r2, #69	@ 0x45
 8018ab8:	f43f ab65 	beq.w	8018186 <_strtod_l+0x276>
 8018abc:	2301      	movs	r3, #1
 8018abe:	f7ff bba0 	b.w	8018202 <_strtod_l+0x2f2>
 8018ac2:	bf00      	nop
 8018ac4:	f3af 8000 	nop.w
 8018ac8:	ffc00000 	.word	0xffc00000
 8018acc:	41dfffff 	.word	0x41dfffff
 8018ad0:	94a03595 	.word	0x94a03595
 8018ad4:	3fcfffff 	.word	0x3fcfffff

08018ad8 <_strtod_r>:
 8018ad8:	4b01      	ldr	r3, [pc, #4]	@ (8018ae0 <_strtod_r+0x8>)
 8018ada:	f7ff ba19 	b.w	8017f10 <_strtod_l>
 8018ade:	bf00      	nop
 8018ae0:	20000054 	.word	0x20000054

08018ae4 <strtod>:
 8018ae4:	460a      	mov	r2, r1
 8018ae6:	4601      	mov	r1, r0
 8018ae8:	4802      	ldr	r0, [pc, #8]	@ (8018af4 <strtod+0x10>)
 8018aea:	4b03      	ldr	r3, [pc, #12]	@ (8018af8 <strtod+0x14>)
 8018aec:	6800      	ldr	r0, [r0, #0]
 8018aee:	f7ff ba0f 	b.w	8017f10 <_strtod_l>
 8018af2:	bf00      	nop
 8018af4:	200001c0 	.word	0x200001c0
 8018af8:	20000054 	.word	0x20000054

08018afc <_strtol_l.isra.0>:
 8018afc:	2b24      	cmp	r3, #36	@ 0x24
 8018afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b02:	4686      	mov	lr, r0
 8018b04:	4690      	mov	r8, r2
 8018b06:	d801      	bhi.n	8018b0c <_strtol_l.isra.0+0x10>
 8018b08:	2b01      	cmp	r3, #1
 8018b0a:	d106      	bne.n	8018b1a <_strtol_l.isra.0+0x1e>
 8018b0c:	f002 f87a 	bl	801ac04 <__errno>
 8018b10:	2316      	movs	r3, #22
 8018b12:	6003      	str	r3, [r0, #0]
 8018b14:	2000      	movs	r0, #0
 8018b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b1a:	4834      	ldr	r0, [pc, #208]	@ (8018bec <_strtol_l.isra.0+0xf0>)
 8018b1c:	460d      	mov	r5, r1
 8018b1e:	462a      	mov	r2, r5
 8018b20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b24:	5d06      	ldrb	r6, [r0, r4]
 8018b26:	f016 0608 	ands.w	r6, r6, #8
 8018b2a:	d1f8      	bne.n	8018b1e <_strtol_l.isra.0+0x22>
 8018b2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8018b2e:	d110      	bne.n	8018b52 <_strtol_l.isra.0+0x56>
 8018b30:	782c      	ldrb	r4, [r5, #0]
 8018b32:	2601      	movs	r6, #1
 8018b34:	1c95      	adds	r5, r2, #2
 8018b36:	f033 0210 	bics.w	r2, r3, #16
 8018b3a:	d115      	bne.n	8018b68 <_strtol_l.isra.0+0x6c>
 8018b3c:	2c30      	cmp	r4, #48	@ 0x30
 8018b3e:	d10d      	bne.n	8018b5c <_strtol_l.isra.0+0x60>
 8018b40:	782a      	ldrb	r2, [r5, #0]
 8018b42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018b46:	2a58      	cmp	r2, #88	@ 0x58
 8018b48:	d108      	bne.n	8018b5c <_strtol_l.isra.0+0x60>
 8018b4a:	786c      	ldrb	r4, [r5, #1]
 8018b4c:	3502      	adds	r5, #2
 8018b4e:	2310      	movs	r3, #16
 8018b50:	e00a      	b.n	8018b68 <_strtol_l.isra.0+0x6c>
 8018b52:	2c2b      	cmp	r4, #43	@ 0x2b
 8018b54:	bf04      	itt	eq
 8018b56:	782c      	ldrbeq	r4, [r5, #0]
 8018b58:	1c95      	addeq	r5, r2, #2
 8018b5a:	e7ec      	b.n	8018b36 <_strtol_l.isra.0+0x3a>
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d1f6      	bne.n	8018b4e <_strtol_l.isra.0+0x52>
 8018b60:	2c30      	cmp	r4, #48	@ 0x30
 8018b62:	bf14      	ite	ne
 8018b64:	230a      	movne	r3, #10
 8018b66:	2308      	moveq	r3, #8
 8018b68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018b6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018b70:	2200      	movs	r2, #0
 8018b72:	fbbc f9f3 	udiv	r9, ip, r3
 8018b76:	4610      	mov	r0, r2
 8018b78:	fb03 ca19 	mls	sl, r3, r9, ip
 8018b7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018b80:	2f09      	cmp	r7, #9
 8018b82:	d80f      	bhi.n	8018ba4 <_strtol_l.isra.0+0xa8>
 8018b84:	463c      	mov	r4, r7
 8018b86:	42a3      	cmp	r3, r4
 8018b88:	dd1b      	ble.n	8018bc2 <_strtol_l.isra.0+0xc6>
 8018b8a:	1c57      	adds	r7, r2, #1
 8018b8c:	d007      	beq.n	8018b9e <_strtol_l.isra.0+0xa2>
 8018b8e:	4581      	cmp	r9, r0
 8018b90:	d314      	bcc.n	8018bbc <_strtol_l.isra.0+0xc0>
 8018b92:	d101      	bne.n	8018b98 <_strtol_l.isra.0+0x9c>
 8018b94:	45a2      	cmp	sl, r4
 8018b96:	db11      	blt.n	8018bbc <_strtol_l.isra.0+0xc0>
 8018b98:	fb00 4003 	mla	r0, r0, r3, r4
 8018b9c:	2201      	movs	r2, #1
 8018b9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ba2:	e7eb      	b.n	8018b7c <_strtol_l.isra.0+0x80>
 8018ba4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018ba8:	2f19      	cmp	r7, #25
 8018baa:	d801      	bhi.n	8018bb0 <_strtol_l.isra.0+0xb4>
 8018bac:	3c37      	subs	r4, #55	@ 0x37
 8018bae:	e7ea      	b.n	8018b86 <_strtol_l.isra.0+0x8a>
 8018bb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018bb4:	2f19      	cmp	r7, #25
 8018bb6:	d804      	bhi.n	8018bc2 <_strtol_l.isra.0+0xc6>
 8018bb8:	3c57      	subs	r4, #87	@ 0x57
 8018bba:	e7e4      	b.n	8018b86 <_strtol_l.isra.0+0x8a>
 8018bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8018bc0:	e7ed      	b.n	8018b9e <_strtol_l.isra.0+0xa2>
 8018bc2:	1c53      	adds	r3, r2, #1
 8018bc4:	d108      	bne.n	8018bd8 <_strtol_l.isra.0+0xdc>
 8018bc6:	2322      	movs	r3, #34	@ 0x22
 8018bc8:	f8ce 3000 	str.w	r3, [lr]
 8018bcc:	4660      	mov	r0, ip
 8018bce:	f1b8 0f00 	cmp.w	r8, #0
 8018bd2:	d0a0      	beq.n	8018b16 <_strtol_l.isra.0+0x1a>
 8018bd4:	1e69      	subs	r1, r5, #1
 8018bd6:	e006      	b.n	8018be6 <_strtol_l.isra.0+0xea>
 8018bd8:	b106      	cbz	r6, 8018bdc <_strtol_l.isra.0+0xe0>
 8018bda:	4240      	negs	r0, r0
 8018bdc:	f1b8 0f00 	cmp.w	r8, #0
 8018be0:	d099      	beq.n	8018b16 <_strtol_l.isra.0+0x1a>
 8018be2:	2a00      	cmp	r2, #0
 8018be4:	d1f6      	bne.n	8018bd4 <_strtol_l.isra.0+0xd8>
 8018be6:	f8c8 1000 	str.w	r1, [r8]
 8018bea:	e794      	b.n	8018b16 <_strtol_l.isra.0+0x1a>
 8018bec:	08021cc1 	.word	0x08021cc1

08018bf0 <_strtol_r>:
 8018bf0:	f7ff bf84 	b.w	8018afc <_strtol_l.isra.0>

08018bf4 <strtol>:
 8018bf4:	4613      	mov	r3, r2
 8018bf6:	460a      	mov	r2, r1
 8018bf8:	4601      	mov	r1, r0
 8018bfa:	4802      	ldr	r0, [pc, #8]	@ (8018c04 <strtol+0x10>)
 8018bfc:	6800      	ldr	r0, [r0, #0]
 8018bfe:	f7ff bf7d 	b.w	8018afc <_strtol_l.isra.0>
 8018c02:	bf00      	nop
 8018c04:	200001c0 	.word	0x200001c0

08018c08 <__cvt>:
 8018c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018c0c:	ec57 6b10 	vmov	r6, r7, d0
 8018c10:	2f00      	cmp	r7, #0
 8018c12:	460c      	mov	r4, r1
 8018c14:	4619      	mov	r1, r3
 8018c16:	463b      	mov	r3, r7
 8018c18:	bfbb      	ittet	lt
 8018c1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8018c1e:	461f      	movlt	r7, r3
 8018c20:	2300      	movge	r3, #0
 8018c22:	232d      	movlt	r3, #45	@ 0x2d
 8018c24:	700b      	strb	r3, [r1, #0]
 8018c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018c28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8018c2c:	4691      	mov	r9, r2
 8018c2e:	f023 0820 	bic.w	r8, r3, #32
 8018c32:	bfbc      	itt	lt
 8018c34:	4632      	movlt	r2, r6
 8018c36:	4616      	movlt	r6, r2
 8018c38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018c3c:	d005      	beq.n	8018c4a <__cvt+0x42>
 8018c3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8018c42:	d100      	bne.n	8018c46 <__cvt+0x3e>
 8018c44:	3401      	adds	r4, #1
 8018c46:	2102      	movs	r1, #2
 8018c48:	e000      	b.n	8018c4c <__cvt+0x44>
 8018c4a:	2103      	movs	r1, #3
 8018c4c:	ab03      	add	r3, sp, #12
 8018c4e:	9301      	str	r3, [sp, #4]
 8018c50:	ab02      	add	r3, sp, #8
 8018c52:	9300      	str	r3, [sp, #0]
 8018c54:	ec47 6b10 	vmov	d0, r6, r7
 8018c58:	4653      	mov	r3, sl
 8018c5a:	4622      	mov	r2, r4
 8018c5c:	f002 f928 	bl	801aeb0 <_dtoa_r>
 8018c60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8018c64:	4605      	mov	r5, r0
 8018c66:	d119      	bne.n	8018c9c <__cvt+0x94>
 8018c68:	f019 0f01 	tst.w	r9, #1
 8018c6c:	d00e      	beq.n	8018c8c <__cvt+0x84>
 8018c6e:	eb00 0904 	add.w	r9, r0, r4
 8018c72:	2200      	movs	r2, #0
 8018c74:	2300      	movs	r3, #0
 8018c76:	4630      	mov	r0, r6
 8018c78:	4639      	mov	r1, r7
 8018c7a:	f7e7 ff35 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c7e:	b108      	cbz	r0, 8018c84 <__cvt+0x7c>
 8018c80:	f8cd 900c 	str.w	r9, [sp, #12]
 8018c84:	2230      	movs	r2, #48	@ 0x30
 8018c86:	9b03      	ldr	r3, [sp, #12]
 8018c88:	454b      	cmp	r3, r9
 8018c8a:	d31e      	bcc.n	8018cca <__cvt+0xc2>
 8018c8c:	9b03      	ldr	r3, [sp, #12]
 8018c8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018c90:	1b5b      	subs	r3, r3, r5
 8018c92:	4628      	mov	r0, r5
 8018c94:	6013      	str	r3, [r2, #0]
 8018c96:	b004      	add	sp, #16
 8018c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018ca0:	eb00 0904 	add.w	r9, r0, r4
 8018ca4:	d1e5      	bne.n	8018c72 <__cvt+0x6a>
 8018ca6:	7803      	ldrb	r3, [r0, #0]
 8018ca8:	2b30      	cmp	r3, #48	@ 0x30
 8018caa:	d10a      	bne.n	8018cc2 <__cvt+0xba>
 8018cac:	2200      	movs	r2, #0
 8018cae:	2300      	movs	r3, #0
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	4639      	mov	r1, r7
 8018cb4:	f7e7 ff18 	bl	8000ae8 <__aeabi_dcmpeq>
 8018cb8:	b918      	cbnz	r0, 8018cc2 <__cvt+0xba>
 8018cba:	f1c4 0401 	rsb	r4, r4, #1
 8018cbe:	f8ca 4000 	str.w	r4, [sl]
 8018cc2:	f8da 3000 	ldr.w	r3, [sl]
 8018cc6:	4499      	add	r9, r3
 8018cc8:	e7d3      	b.n	8018c72 <__cvt+0x6a>
 8018cca:	1c59      	adds	r1, r3, #1
 8018ccc:	9103      	str	r1, [sp, #12]
 8018cce:	701a      	strb	r2, [r3, #0]
 8018cd0:	e7d9      	b.n	8018c86 <__cvt+0x7e>

08018cd2 <__exponent>:
 8018cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018cd4:	2900      	cmp	r1, #0
 8018cd6:	bfba      	itte	lt
 8018cd8:	4249      	neglt	r1, r1
 8018cda:	232d      	movlt	r3, #45	@ 0x2d
 8018cdc:	232b      	movge	r3, #43	@ 0x2b
 8018cde:	2909      	cmp	r1, #9
 8018ce0:	7002      	strb	r2, [r0, #0]
 8018ce2:	7043      	strb	r3, [r0, #1]
 8018ce4:	dd29      	ble.n	8018d3a <__exponent+0x68>
 8018ce6:	f10d 0307 	add.w	r3, sp, #7
 8018cea:	461d      	mov	r5, r3
 8018cec:	270a      	movs	r7, #10
 8018cee:	461a      	mov	r2, r3
 8018cf0:	fbb1 f6f7 	udiv	r6, r1, r7
 8018cf4:	fb07 1416 	mls	r4, r7, r6, r1
 8018cf8:	3430      	adds	r4, #48	@ 0x30
 8018cfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018cfe:	460c      	mov	r4, r1
 8018d00:	2c63      	cmp	r4, #99	@ 0x63
 8018d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8018d06:	4631      	mov	r1, r6
 8018d08:	dcf1      	bgt.n	8018cee <__exponent+0x1c>
 8018d0a:	3130      	adds	r1, #48	@ 0x30
 8018d0c:	1e94      	subs	r4, r2, #2
 8018d0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018d12:	1c41      	adds	r1, r0, #1
 8018d14:	4623      	mov	r3, r4
 8018d16:	42ab      	cmp	r3, r5
 8018d18:	d30a      	bcc.n	8018d30 <__exponent+0x5e>
 8018d1a:	f10d 0309 	add.w	r3, sp, #9
 8018d1e:	1a9b      	subs	r3, r3, r2
 8018d20:	42ac      	cmp	r4, r5
 8018d22:	bf88      	it	hi
 8018d24:	2300      	movhi	r3, #0
 8018d26:	3302      	adds	r3, #2
 8018d28:	4403      	add	r3, r0
 8018d2a:	1a18      	subs	r0, r3, r0
 8018d2c:	b003      	add	sp, #12
 8018d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018d34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018d38:	e7ed      	b.n	8018d16 <__exponent+0x44>
 8018d3a:	2330      	movs	r3, #48	@ 0x30
 8018d3c:	3130      	adds	r1, #48	@ 0x30
 8018d3e:	7083      	strb	r3, [r0, #2]
 8018d40:	70c1      	strb	r1, [r0, #3]
 8018d42:	1d03      	adds	r3, r0, #4
 8018d44:	e7f1      	b.n	8018d2a <__exponent+0x58>
	...

08018d48 <_printf_float>:
 8018d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4c:	b08d      	sub	sp, #52	@ 0x34
 8018d4e:	460c      	mov	r4, r1
 8018d50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018d54:	4616      	mov	r6, r2
 8018d56:	461f      	mov	r7, r3
 8018d58:	4605      	mov	r5, r0
 8018d5a:	f001 fe89 	bl	801aa70 <_localeconv_r>
 8018d5e:	6803      	ldr	r3, [r0, #0]
 8018d60:	9304      	str	r3, [sp, #16]
 8018d62:	4618      	mov	r0, r3
 8018d64:	f7e7 fa94 	bl	8000290 <strlen>
 8018d68:	2300      	movs	r3, #0
 8018d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8018d70:	9005      	str	r0, [sp, #20]
 8018d72:	3307      	adds	r3, #7
 8018d74:	f023 0307 	bic.w	r3, r3, #7
 8018d78:	f103 0208 	add.w	r2, r3, #8
 8018d7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018d80:	f8d4 b000 	ldr.w	fp, [r4]
 8018d84:	f8c8 2000 	str.w	r2, [r8]
 8018d88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018d8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018d90:	9307      	str	r3, [sp, #28]
 8018d92:	f8cd 8018 	str.w	r8, [sp, #24]
 8018d96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8018d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8019010 <_printf_float+0x2c8>)
 8018da0:	f04f 32ff 	mov.w	r2, #4294967295
 8018da4:	f7e7 fed2 	bl	8000b4c <__aeabi_dcmpun>
 8018da8:	bb70      	cbnz	r0, 8018e08 <_printf_float+0xc0>
 8018daa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018dae:	4b98      	ldr	r3, [pc, #608]	@ (8019010 <_printf_float+0x2c8>)
 8018db0:	f04f 32ff 	mov.w	r2, #4294967295
 8018db4:	f7e7 feac 	bl	8000b10 <__aeabi_dcmple>
 8018db8:	bb30      	cbnz	r0, 8018e08 <_printf_float+0xc0>
 8018dba:	2200      	movs	r2, #0
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	4640      	mov	r0, r8
 8018dc0:	4649      	mov	r1, r9
 8018dc2:	f7e7 fe9b 	bl	8000afc <__aeabi_dcmplt>
 8018dc6:	b110      	cbz	r0, 8018dce <_printf_float+0x86>
 8018dc8:	232d      	movs	r3, #45	@ 0x2d
 8018dca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018dce:	4a91      	ldr	r2, [pc, #580]	@ (8019014 <_printf_float+0x2cc>)
 8018dd0:	4b91      	ldr	r3, [pc, #580]	@ (8019018 <_printf_float+0x2d0>)
 8018dd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018dd6:	bf8c      	ite	hi
 8018dd8:	4690      	movhi	r8, r2
 8018dda:	4698      	movls	r8, r3
 8018ddc:	2303      	movs	r3, #3
 8018dde:	6123      	str	r3, [r4, #16]
 8018de0:	f02b 0304 	bic.w	r3, fp, #4
 8018de4:	6023      	str	r3, [r4, #0]
 8018de6:	f04f 0900 	mov.w	r9, #0
 8018dea:	9700      	str	r7, [sp, #0]
 8018dec:	4633      	mov	r3, r6
 8018dee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018df0:	4621      	mov	r1, r4
 8018df2:	4628      	mov	r0, r5
 8018df4:	f000 f9d2 	bl	801919c <_printf_common>
 8018df8:	3001      	adds	r0, #1
 8018dfa:	f040 808d 	bne.w	8018f18 <_printf_float+0x1d0>
 8018dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8018e02:	b00d      	add	sp, #52	@ 0x34
 8018e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e08:	4642      	mov	r2, r8
 8018e0a:	464b      	mov	r3, r9
 8018e0c:	4640      	mov	r0, r8
 8018e0e:	4649      	mov	r1, r9
 8018e10:	f7e7 fe9c 	bl	8000b4c <__aeabi_dcmpun>
 8018e14:	b140      	cbz	r0, 8018e28 <_printf_float+0xe0>
 8018e16:	464b      	mov	r3, r9
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	bfbc      	itt	lt
 8018e1c:	232d      	movlt	r3, #45	@ 0x2d
 8018e1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018e22:	4a7e      	ldr	r2, [pc, #504]	@ (801901c <_printf_float+0x2d4>)
 8018e24:	4b7e      	ldr	r3, [pc, #504]	@ (8019020 <_printf_float+0x2d8>)
 8018e26:	e7d4      	b.n	8018dd2 <_printf_float+0x8a>
 8018e28:	6863      	ldr	r3, [r4, #4]
 8018e2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8018e2e:	9206      	str	r2, [sp, #24]
 8018e30:	1c5a      	adds	r2, r3, #1
 8018e32:	d13b      	bne.n	8018eac <_printf_float+0x164>
 8018e34:	2306      	movs	r3, #6
 8018e36:	6063      	str	r3, [r4, #4]
 8018e38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	6022      	str	r2, [r4, #0]
 8018e40:	9303      	str	r3, [sp, #12]
 8018e42:	ab0a      	add	r3, sp, #40	@ 0x28
 8018e44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8018e48:	ab09      	add	r3, sp, #36	@ 0x24
 8018e4a:	9300      	str	r3, [sp, #0]
 8018e4c:	6861      	ldr	r1, [r4, #4]
 8018e4e:	ec49 8b10 	vmov	d0, r8, r9
 8018e52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018e56:	4628      	mov	r0, r5
 8018e58:	f7ff fed6 	bl	8018c08 <__cvt>
 8018e5c:	9b06      	ldr	r3, [sp, #24]
 8018e5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e60:	2b47      	cmp	r3, #71	@ 0x47
 8018e62:	4680      	mov	r8, r0
 8018e64:	d129      	bne.n	8018eba <_printf_float+0x172>
 8018e66:	1cc8      	adds	r0, r1, #3
 8018e68:	db02      	blt.n	8018e70 <_printf_float+0x128>
 8018e6a:	6863      	ldr	r3, [r4, #4]
 8018e6c:	4299      	cmp	r1, r3
 8018e6e:	dd41      	ble.n	8018ef4 <_printf_float+0x1ac>
 8018e70:	f1aa 0a02 	sub.w	sl, sl, #2
 8018e74:	fa5f fa8a 	uxtb.w	sl, sl
 8018e78:	3901      	subs	r1, #1
 8018e7a:	4652      	mov	r2, sl
 8018e7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8018e80:	9109      	str	r1, [sp, #36]	@ 0x24
 8018e82:	f7ff ff26 	bl	8018cd2 <__exponent>
 8018e86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e88:	1813      	adds	r3, r2, r0
 8018e8a:	2a01      	cmp	r2, #1
 8018e8c:	4681      	mov	r9, r0
 8018e8e:	6123      	str	r3, [r4, #16]
 8018e90:	dc02      	bgt.n	8018e98 <_printf_float+0x150>
 8018e92:	6822      	ldr	r2, [r4, #0]
 8018e94:	07d2      	lsls	r2, r2, #31
 8018e96:	d501      	bpl.n	8018e9c <_printf_float+0x154>
 8018e98:	3301      	adds	r3, #1
 8018e9a:	6123      	str	r3, [r4, #16]
 8018e9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d0a2      	beq.n	8018dea <_printf_float+0xa2>
 8018ea4:	232d      	movs	r3, #45	@ 0x2d
 8018ea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018eaa:	e79e      	b.n	8018dea <_printf_float+0xa2>
 8018eac:	9a06      	ldr	r2, [sp, #24]
 8018eae:	2a47      	cmp	r2, #71	@ 0x47
 8018eb0:	d1c2      	bne.n	8018e38 <_printf_float+0xf0>
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d1c0      	bne.n	8018e38 <_printf_float+0xf0>
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	e7bd      	b.n	8018e36 <_printf_float+0xee>
 8018eba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018ebe:	d9db      	bls.n	8018e78 <_printf_float+0x130>
 8018ec0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8018ec4:	d118      	bne.n	8018ef8 <_printf_float+0x1b0>
 8018ec6:	2900      	cmp	r1, #0
 8018ec8:	6863      	ldr	r3, [r4, #4]
 8018eca:	dd0b      	ble.n	8018ee4 <_printf_float+0x19c>
 8018ecc:	6121      	str	r1, [r4, #16]
 8018ece:	b913      	cbnz	r3, 8018ed6 <_printf_float+0x18e>
 8018ed0:	6822      	ldr	r2, [r4, #0]
 8018ed2:	07d0      	lsls	r0, r2, #31
 8018ed4:	d502      	bpl.n	8018edc <_printf_float+0x194>
 8018ed6:	3301      	adds	r3, #1
 8018ed8:	440b      	add	r3, r1
 8018eda:	6123      	str	r3, [r4, #16]
 8018edc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018ede:	f04f 0900 	mov.w	r9, #0
 8018ee2:	e7db      	b.n	8018e9c <_printf_float+0x154>
 8018ee4:	b913      	cbnz	r3, 8018eec <_printf_float+0x1a4>
 8018ee6:	6822      	ldr	r2, [r4, #0]
 8018ee8:	07d2      	lsls	r2, r2, #31
 8018eea:	d501      	bpl.n	8018ef0 <_printf_float+0x1a8>
 8018eec:	3302      	adds	r3, #2
 8018eee:	e7f4      	b.n	8018eda <_printf_float+0x192>
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	e7f2      	b.n	8018eda <_printf_float+0x192>
 8018ef4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8018ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018efa:	4299      	cmp	r1, r3
 8018efc:	db05      	blt.n	8018f0a <_printf_float+0x1c2>
 8018efe:	6823      	ldr	r3, [r4, #0]
 8018f00:	6121      	str	r1, [r4, #16]
 8018f02:	07d8      	lsls	r0, r3, #31
 8018f04:	d5ea      	bpl.n	8018edc <_printf_float+0x194>
 8018f06:	1c4b      	adds	r3, r1, #1
 8018f08:	e7e7      	b.n	8018eda <_printf_float+0x192>
 8018f0a:	2900      	cmp	r1, #0
 8018f0c:	bfd4      	ite	le
 8018f0e:	f1c1 0202 	rsble	r2, r1, #2
 8018f12:	2201      	movgt	r2, #1
 8018f14:	4413      	add	r3, r2
 8018f16:	e7e0      	b.n	8018eda <_printf_float+0x192>
 8018f18:	6823      	ldr	r3, [r4, #0]
 8018f1a:	055a      	lsls	r2, r3, #21
 8018f1c:	d407      	bmi.n	8018f2e <_printf_float+0x1e6>
 8018f1e:	6923      	ldr	r3, [r4, #16]
 8018f20:	4642      	mov	r2, r8
 8018f22:	4631      	mov	r1, r6
 8018f24:	4628      	mov	r0, r5
 8018f26:	47b8      	blx	r7
 8018f28:	3001      	adds	r0, #1
 8018f2a:	d12b      	bne.n	8018f84 <_printf_float+0x23c>
 8018f2c:	e767      	b.n	8018dfe <_printf_float+0xb6>
 8018f2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018f32:	f240 80dd 	bls.w	80190f0 <_printf_float+0x3a8>
 8018f36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8018f3a:	2200      	movs	r2, #0
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	f7e7 fdd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8018f42:	2800      	cmp	r0, #0
 8018f44:	d033      	beq.n	8018fae <_printf_float+0x266>
 8018f46:	4a37      	ldr	r2, [pc, #220]	@ (8019024 <_printf_float+0x2dc>)
 8018f48:	2301      	movs	r3, #1
 8018f4a:	4631      	mov	r1, r6
 8018f4c:	4628      	mov	r0, r5
 8018f4e:	47b8      	blx	r7
 8018f50:	3001      	adds	r0, #1
 8018f52:	f43f af54 	beq.w	8018dfe <_printf_float+0xb6>
 8018f56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018f5a:	4543      	cmp	r3, r8
 8018f5c:	db02      	blt.n	8018f64 <_printf_float+0x21c>
 8018f5e:	6823      	ldr	r3, [r4, #0]
 8018f60:	07d8      	lsls	r0, r3, #31
 8018f62:	d50f      	bpl.n	8018f84 <_printf_float+0x23c>
 8018f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018f68:	4631      	mov	r1, r6
 8018f6a:	4628      	mov	r0, r5
 8018f6c:	47b8      	blx	r7
 8018f6e:	3001      	adds	r0, #1
 8018f70:	f43f af45 	beq.w	8018dfe <_printf_float+0xb6>
 8018f74:	f04f 0900 	mov.w	r9, #0
 8018f78:	f108 38ff 	add.w	r8, r8, #4294967295
 8018f7c:	f104 0a1a 	add.w	sl, r4, #26
 8018f80:	45c8      	cmp	r8, r9
 8018f82:	dc09      	bgt.n	8018f98 <_printf_float+0x250>
 8018f84:	6823      	ldr	r3, [r4, #0]
 8018f86:	079b      	lsls	r3, r3, #30
 8018f88:	f100 8103 	bmi.w	8019192 <_printf_float+0x44a>
 8018f8c:	68e0      	ldr	r0, [r4, #12]
 8018f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018f90:	4298      	cmp	r0, r3
 8018f92:	bfb8      	it	lt
 8018f94:	4618      	movlt	r0, r3
 8018f96:	e734      	b.n	8018e02 <_printf_float+0xba>
 8018f98:	2301      	movs	r3, #1
 8018f9a:	4652      	mov	r2, sl
 8018f9c:	4631      	mov	r1, r6
 8018f9e:	4628      	mov	r0, r5
 8018fa0:	47b8      	blx	r7
 8018fa2:	3001      	adds	r0, #1
 8018fa4:	f43f af2b 	beq.w	8018dfe <_printf_float+0xb6>
 8018fa8:	f109 0901 	add.w	r9, r9, #1
 8018fac:	e7e8      	b.n	8018f80 <_printf_float+0x238>
 8018fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	dc39      	bgt.n	8019028 <_printf_float+0x2e0>
 8018fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8019024 <_printf_float+0x2dc>)
 8018fb6:	2301      	movs	r3, #1
 8018fb8:	4631      	mov	r1, r6
 8018fba:	4628      	mov	r0, r5
 8018fbc:	47b8      	blx	r7
 8018fbe:	3001      	adds	r0, #1
 8018fc0:	f43f af1d 	beq.w	8018dfe <_printf_float+0xb6>
 8018fc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018fc8:	ea59 0303 	orrs.w	r3, r9, r3
 8018fcc:	d102      	bne.n	8018fd4 <_printf_float+0x28c>
 8018fce:	6823      	ldr	r3, [r4, #0]
 8018fd0:	07d9      	lsls	r1, r3, #31
 8018fd2:	d5d7      	bpl.n	8018f84 <_printf_float+0x23c>
 8018fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018fd8:	4631      	mov	r1, r6
 8018fda:	4628      	mov	r0, r5
 8018fdc:	47b8      	blx	r7
 8018fde:	3001      	adds	r0, #1
 8018fe0:	f43f af0d 	beq.w	8018dfe <_printf_float+0xb6>
 8018fe4:	f04f 0a00 	mov.w	sl, #0
 8018fe8:	f104 0b1a 	add.w	fp, r4, #26
 8018fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fee:	425b      	negs	r3, r3
 8018ff0:	4553      	cmp	r3, sl
 8018ff2:	dc01      	bgt.n	8018ff8 <_printf_float+0x2b0>
 8018ff4:	464b      	mov	r3, r9
 8018ff6:	e793      	b.n	8018f20 <_printf_float+0x1d8>
 8018ff8:	2301      	movs	r3, #1
 8018ffa:	465a      	mov	r2, fp
 8018ffc:	4631      	mov	r1, r6
 8018ffe:	4628      	mov	r0, r5
 8019000:	47b8      	blx	r7
 8019002:	3001      	adds	r0, #1
 8019004:	f43f aefb 	beq.w	8018dfe <_printf_float+0xb6>
 8019008:	f10a 0a01 	add.w	sl, sl, #1
 801900c:	e7ee      	b.n	8018fec <_printf_float+0x2a4>
 801900e:	bf00      	nop
 8019010:	7fefffff 	.word	0x7fefffff
 8019014:	080219da 	.word	0x080219da
 8019018:	080219d6 	.word	0x080219d6
 801901c:	080219e2 	.word	0x080219e2
 8019020:	080219de 	.word	0x080219de
 8019024:	08021c64 	.word	0x08021c64
 8019028:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801902a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801902e:	4553      	cmp	r3, sl
 8019030:	bfa8      	it	ge
 8019032:	4653      	movge	r3, sl
 8019034:	2b00      	cmp	r3, #0
 8019036:	4699      	mov	r9, r3
 8019038:	dc36      	bgt.n	80190a8 <_printf_float+0x360>
 801903a:	f04f 0b00 	mov.w	fp, #0
 801903e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019042:	f104 021a 	add.w	r2, r4, #26
 8019046:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019048:	9306      	str	r3, [sp, #24]
 801904a:	eba3 0309 	sub.w	r3, r3, r9
 801904e:	455b      	cmp	r3, fp
 8019050:	dc31      	bgt.n	80190b6 <_printf_float+0x36e>
 8019052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019054:	459a      	cmp	sl, r3
 8019056:	dc3a      	bgt.n	80190ce <_printf_float+0x386>
 8019058:	6823      	ldr	r3, [r4, #0]
 801905a:	07da      	lsls	r2, r3, #31
 801905c:	d437      	bmi.n	80190ce <_printf_float+0x386>
 801905e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019060:	ebaa 0903 	sub.w	r9, sl, r3
 8019064:	9b06      	ldr	r3, [sp, #24]
 8019066:	ebaa 0303 	sub.w	r3, sl, r3
 801906a:	4599      	cmp	r9, r3
 801906c:	bfa8      	it	ge
 801906e:	4699      	movge	r9, r3
 8019070:	f1b9 0f00 	cmp.w	r9, #0
 8019074:	dc33      	bgt.n	80190de <_printf_float+0x396>
 8019076:	f04f 0800 	mov.w	r8, #0
 801907a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801907e:	f104 0b1a 	add.w	fp, r4, #26
 8019082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019084:	ebaa 0303 	sub.w	r3, sl, r3
 8019088:	eba3 0309 	sub.w	r3, r3, r9
 801908c:	4543      	cmp	r3, r8
 801908e:	f77f af79 	ble.w	8018f84 <_printf_float+0x23c>
 8019092:	2301      	movs	r3, #1
 8019094:	465a      	mov	r2, fp
 8019096:	4631      	mov	r1, r6
 8019098:	4628      	mov	r0, r5
 801909a:	47b8      	blx	r7
 801909c:	3001      	adds	r0, #1
 801909e:	f43f aeae 	beq.w	8018dfe <_printf_float+0xb6>
 80190a2:	f108 0801 	add.w	r8, r8, #1
 80190a6:	e7ec      	b.n	8019082 <_printf_float+0x33a>
 80190a8:	4642      	mov	r2, r8
 80190aa:	4631      	mov	r1, r6
 80190ac:	4628      	mov	r0, r5
 80190ae:	47b8      	blx	r7
 80190b0:	3001      	adds	r0, #1
 80190b2:	d1c2      	bne.n	801903a <_printf_float+0x2f2>
 80190b4:	e6a3      	b.n	8018dfe <_printf_float+0xb6>
 80190b6:	2301      	movs	r3, #1
 80190b8:	4631      	mov	r1, r6
 80190ba:	4628      	mov	r0, r5
 80190bc:	9206      	str	r2, [sp, #24]
 80190be:	47b8      	blx	r7
 80190c0:	3001      	adds	r0, #1
 80190c2:	f43f ae9c 	beq.w	8018dfe <_printf_float+0xb6>
 80190c6:	9a06      	ldr	r2, [sp, #24]
 80190c8:	f10b 0b01 	add.w	fp, fp, #1
 80190cc:	e7bb      	b.n	8019046 <_printf_float+0x2fe>
 80190ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80190d2:	4631      	mov	r1, r6
 80190d4:	4628      	mov	r0, r5
 80190d6:	47b8      	blx	r7
 80190d8:	3001      	adds	r0, #1
 80190da:	d1c0      	bne.n	801905e <_printf_float+0x316>
 80190dc:	e68f      	b.n	8018dfe <_printf_float+0xb6>
 80190de:	9a06      	ldr	r2, [sp, #24]
 80190e0:	464b      	mov	r3, r9
 80190e2:	4442      	add	r2, r8
 80190e4:	4631      	mov	r1, r6
 80190e6:	4628      	mov	r0, r5
 80190e8:	47b8      	blx	r7
 80190ea:	3001      	adds	r0, #1
 80190ec:	d1c3      	bne.n	8019076 <_printf_float+0x32e>
 80190ee:	e686      	b.n	8018dfe <_printf_float+0xb6>
 80190f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80190f4:	f1ba 0f01 	cmp.w	sl, #1
 80190f8:	dc01      	bgt.n	80190fe <_printf_float+0x3b6>
 80190fa:	07db      	lsls	r3, r3, #31
 80190fc:	d536      	bpl.n	801916c <_printf_float+0x424>
 80190fe:	2301      	movs	r3, #1
 8019100:	4642      	mov	r2, r8
 8019102:	4631      	mov	r1, r6
 8019104:	4628      	mov	r0, r5
 8019106:	47b8      	blx	r7
 8019108:	3001      	adds	r0, #1
 801910a:	f43f ae78 	beq.w	8018dfe <_printf_float+0xb6>
 801910e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019112:	4631      	mov	r1, r6
 8019114:	4628      	mov	r0, r5
 8019116:	47b8      	blx	r7
 8019118:	3001      	adds	r0, #1
 801911a:	f43f ae70 	beq.w	8018dfe <_printf_float+0xb6>
 801911e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8019122:	2200      	movs	r2, #0
 8019124:	2300      	movs	r3, #0
 8019126:	f10a 3aff 	add.w	sl, sl, #4294967295
 801912a:	f7e7 fcdd 	bl	8000ae8 <__aeabi_dcmpeq>
 801912e:	b9c0      	cbnz	r0, 8019162 <_printf_float+0x41a>
 8019130:	4653      	mov	r3, sl
 8019132:	f108 0201 	add.w	r2, r8, #1
 8019136:	4631      	mov	r1, r6
 8019138:	4628      	mov	r0, r5
 801913a:	47b8      	blx	r7
 801913c:	3001      	adds	r0, #1
 801913e:	d10c      	bne.n	801915a <_printf_float+0x412>
 8019140:	e65d      	b.n	8018dfe <_printf_float+0xb6>
 8019142:	2301      	movs	r3, #1
 8019144:	465a      	mov	r2, fp
 8019146:	4631      	mov	r1, r6
 8019148:	4628      	mov	r0, r5
 801914a:	47b8      	blx	r7
 801914c:	3001      	adds	r0, #1
 801914e:	f43f ae56 	beq.w	8018dfe <_printf_float+0xb6>
 8019152:	f108 0801 	add.w	r8, r8, #1
 8019156:	45d0      	cmp	r8, sl
 8019158:	dbf3      	blt.n	8019142 <_printf_float+0x3fa>
 801915a:	464b      	mov	r3, r9
 801915c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019160:	e6df      	b.n	8018f22 <_printf_float+0x1da>
 8019162:	f04f 0800 	mov.w	r8, #0
 8019166:	f104 0b1a 	add.w	fp, r4, #26
 801916a:	e7f4      	b.n	8019156 <_printf_float+0x40e>
 801916c:	2301      	movs	r3, #1
 801916e:	4642      	mov	r2, r8
 8019170:	e7e1      	b.n	8019136 <_printf_float+0x3ee>
 8019172:	2301      	movs	r3, #1
 8019174:	464a      	mov	r2, r9
 8019176:	4631      	mov	r1, r6
 8019178:	4628      	mov	r0, r5
 801917a:	47b8      	blx	r7
 801917c:	3001      	adds	r0, #1
 801917e:	f43f ae3e 	beq.w	8018dfe <_printf_float+0xb6>
 8019182:	f108 0801 	add.w	r8, r8, #1
 8019186:	68e3      	ldr	r3, [r4, #12]
 8019188:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801918a:	1a5b      	subs	r3, r3, r1
 801918c:	4543      	cmp	r3, r8
 801918e:	dcf0      	bgt.n	8019172 <_printf_float+0x42a>
 8019190:	e6fc      	b.n	8018f8c <_printf_float+0x244>
 8019192:	f04f 0800 	mov.w	r8, #0
 8019196:	f104 0919 	add.w	r9, r4, #25
 801919a:	e7f4      	b.n	8019186 <_printf_float+0x43e>

0801919c <_printf_common>:
 801919c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191a0:	4616      	mov	r6, r2
 80191a2:	4698      	mov	r8, r3
 80191a4:	688a      	ldr	r2, [r1, #8]
 80191a6:	690b      	ldr	r3, [r1, #16]
 80191a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80191ac:	4293      	cmp	r3, r2
 80191ae:	bfb8      	it	lt
 80191b0:	4613      	movlt	r3, r2
 80191b2:	6033      	str	r3, [r6, #0]
 80191b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80191b8:	4607      	mov	r7, r0
 80191ba:	460c      	mov	r4, r1
 80191bc:	b10a      	cbz	r2, 80191c2 <_printf_common+0x26>
 80191be:	3301      	adds	r3, #1
 80191c0:	6033      	str	r3, [r6, #0]
 80191c2:	6823      	ldr	r3, [r4, #0]
 80191c4:	0699      	lsls	r1, r3, #26
 80191c6:	bf42      	ittt	mi
 80191c8:	6833      	ldrmi	r3, [r6, #0]
 80191ca:	3302      	addmi	r3, #2
 80191cc:	6033      	strmi	r3, [r6, #0]
 80191ce:	6825      	ldr	r5, [r4, #0]
 80191d0:	f015 0506 	ands.w	r5, r5, #6
 80191d4:	d106      	bne.n	80191e4 <_printf_common+0x48>
 80191d6:	f104 0a19 	add.w	sl, r4, #25
 80191da:	68e3      	ldr	r3, [r4, #12]
 80191dc:	6832      	ldr	r2, [r6, #0]
 80191de:	1a9b      	subs	r3, r3, r2
 80191e0:	42ab      	cmp	r3, r5
 80191e2:	dc26      	bgt.n	8019232 <_printf_common+0x96>
 80191e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80191e8:	6822      	ldr	r2, [r4, #0]
 80191ea:	3b00      	subs	r3, #0
 80191ec:	bf18      	it	ne
 80191ee:	2301      	movne	r3, #1
 80191f0:	0692      	lsls	r2, r2, #26
 80191f2:	d42b      	bmi.n	801924c <_printf_common+0xb0>
 80191f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80191f8:	4641      	mov	r1, r8
 80191fa:	4638      	mov	r0, r7
 80191fc:	47c8      	blx	r9
 80191fe:	3001      	adds	r0, #1
 8019200:	d01e      	beq.n	8019240 <_printf_common+0xa4>
 8019202:	6823      	ldr	r3, [r4, #0]
 8019204:	6922      	ldr	r2, [r4, #16]
 8019206:	f003 0306 	and.w	r3, r3, #6
 801920a:	2b04      	cmp	r3, #4
 801920c:	bf02      	ittt	eq
 801920e:	68e5      	ldreq	r5, [r4, #12]
 8019210:	6833      	ldreq	r3, [r6, #0]
 8019212:	1aed      	subeq	r5, r5, r3
 8019214:	68a3      	ldr	r3, [r4, #8]
 8019216:	bf0c      	ite	eq
 8019218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801921c:	2500      	movne	r5, #0
 801921e:	4293      	cmp	r3, r2
 8019220:	bfc4      	itt	gt
 8019222:	1a9b      	subgt	r3, r3, r2
 8019224:	18ed      	addgt	r5, r5, r3
 8019226:	2600      	movs	r6, #0
 8019228:	341a      	adds	r4, #26
 801922a:	42b5      	cmp	r5, r6
 801922c:	d11a      	bne.n	8019264 <_printf_common+0xc8>
 801922e:	2000      	movs	r0, #0
 8019230:	e008      	b.n	8019244 <_printf_common+0xa8>
 8019232:	2301      	movs	r3, #1
 8019234:	4652      	mov	r2, sl
 8019236:	4641      	mov	r1, r8
 8019238:	4638      	mov	r0, r7
 801923a:	47c8      	blx	r9
 801923c:	3001      	adds	r0, #1
 801923e:	d103      	bne.n	8019248 <_printf_common+0xac>
 8019240:	f04f 30ff 	mov.w	r0, #4294967295
 8019244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019248:	3501      	adds	r5, #1
 801924a:	e7c6      	b.n	80191da <_printf_common+0x3e>
 801924c:	18e1      	adds	r1, r4, r3
 801924e:	1c5a      	adds	r2, r3, #1
 8019250:	2030      	movs	r0, #48	@ 0x30
 8019252:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019256:	4422      	add	r2, r4
 8019258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801925c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019260:	3302      	adds	r3, #2
 8019262:	e7c7      	b.n	80191f4 <_printf_common+0x58>
 8019264:	2301      	movs	r3, #1
 8019266:	4622      	mov	r2, r4
 8019268:	4641      	mov	r1, r8
 801926a:	4638      	mov	r0, r7
 801926c:	47c8      	blx	r9
 801926e:	3001      	adds	r0, #1
 8019270:	d0e6      	beq.n	8019240 <_printf_common+0xa4>
 8019272:	3601      	adds	r6, #1
 8019274:	e7d9      	b.n	801922a <_printf_common+0x8e>
	...

08019278 <_printf_i>:
 8019278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801927c:	7e0f      	ldrb	r7, [r1, #24]
 801927e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019280:	2f78      	cmp	r7, #120	@ 0x78
 8019282:	4691      	mov	r9, r2
 8019284:	4680      	mov	r8, r0
 8019286:	460c      	mov	r4, r1
 8019288:	469a      	mov	sl, r3
 801928a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801928e:	d807      	bhi.n	80192a0 <_printf_i+0x28>
 8019290:	2f62      	cmp	r7, #98	@ 0x62
 8019292:	d80a      	bhi.n	80192aa <_printf_i+0x32>
 8019294:	2f00      	cmp	r7, #0
 8019296:	f000 80d1 	beq.w	801943c <_printf_i+0x1c4>
 801929a:	2f58      	cmp	r7, #88	@ 0x58
 801929c:	f000 80b8 	beq.w	8019410 <_printf_i+0x198>
 80192a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80192a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80192a8:	e03a      	b.n	8019320 <_printf_i+0xa8>
 80192aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80192ae:	2b15      	cmp	r3, #21
 80192b0:	d8f6      	bhi.n	80192a0 <_printf_i+0x28>
 80192b2:	a101      	add	r1, pc, #4	@ (adr r1, 80192b8 <_printf_i+0x40>)
 80192b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80192b8:	08019311 	.word	0x08019311
 80192bc:	08019325 	.word	0x08019325
 80192c0:	080192a1 	.word	0x080192a1
 80192c4:	080192a1 	.word	0x080192a1
 80192c8:	080192a1 	.word	0x080192a1
 80192cc:	080192a1 	.word	0x080192a1
 80192d0:	08019325 	.word	0x08019325
 80192d4:	080192a1 	.word	0x080192a1
 80192d8:	080192a1 	.word	0x080192a1
 80192dc:	080192a1 	.word	0x080192a1
 80192e0:	080192a1 	.word	0x080192a1
 80192e4:	08019423 	.word	0x08019423
 80192e8:	0801934f 	.word	0x0801934f
 80192ec:	080193dd 	.word	0x080193dd
 80192f0:	080192a1 	.word	0x080192a1
 80192f4:	080192a1 	.word	0x080192a1
 80192f8:	08019445 	.word	0x08019445
 80192fc:	080192a1 	.word	0x080192a1
 8019300:	0801934f 	.word	0x0801934f
 8019304:	080192a1 	.word	0x080192a1
 8019308:	080192a1 	.word	0x080192a1
 801930c:	080193e5 	.word	0x080193e5
 8019310:	6833      	ldr	r3, [r6, #0]
 8019312:	1d1a      	adds	r2, r3, #4
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	6032      	str	r2, [r6, #0]
 8019318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801931c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019320:	2301      	movs	r3, #1
 8019322:	e09c      	b.n	801945e <_printf_i+0x1e6>
 8019324:	6833      	ldr	r3, [r6, #0]
 8019326:	6820      	ldr	r0, [r4, #0]
 8019328:	1d19      	adds	r1, r3, #4
 801932a:	6031      	str	r1, [r6, #0]
 801932c:	0606      	lsls	r6, r0, #24
 801932e:	d501      	bpl.n	8019334 <_printf_i+0xbc>
 8019330:	681d      	ldr	r5, [r3, #0]
 8019332:	e003      	b.n	801933c <_printf_i+0xc4>
 8019334:	0645      	lsls	r5, r0, #25
 8019336:	d5fb      	bpl.n	8019330 <_printf_i+0xb8>
 8019338:	f9b3 5000 	ldrsh.w	r5, [r3]
 801933c:	2d00      	cmp	r5, #0
 801933e:	da03      	bge.n	8019348 <_printf_i+0xd0>
 8019340:	232d      	movs	r3, #45	@ 0x2d
 8019342:	426d      	negs	r5, r5
 8019344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019348:	4858      	ldr	r0, [pc, #352]	@ (80194ac <_printf_i+0x234>)
 801934a:	230a      	movs	r3, #10
 801934c:	e011      	b.n	8019372 <_printf_i+0xfa>
 801934e:	6821      	ldr	r1, [r4, #0]
 8019350:	6833      	ldr	r3, [r6, #0]
 8019352:	0608      	lsls	r0, r1, #24
 8019354:	f853 5b04 	ldr.w	r5, [r3], #4
 8019358:	d402      	bmi.n	8019360 <_printf_i+0xe8>
 801935a:	0649      	lsls	r1, r1, #25
 801935c:	bf48      	it	mi
 801935e:	b2ad      	uxthmi	r5, r5
 8019360:	2f6f      	cmp	r7, #111	@ 0x6f
 8019362:	4852      	ldr	r0, [pc, #328]	@ (80194ac <_printf_i+0x234>)
 8019364:	6033      	str	r3, [r6, #0]
 8019366:	bf14      	ite	ne
 8019368:	230a      	movne	r3, #10
 801936a:	2308      	moveq	r3, #8
 801936c:	2100      	movs	r1, #0
 801936e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019372:	6866      	ldr	r6, [r4, #4]
 8019374:	60a6      	str	r6, [r4, #8]
 8019376:	2e00      	cmp	r6, #0
 8019378:	db05      	blt.n	8019386 <_printf_i+0x10e>
 801937a:	6821      	ldr	r1, [r4, #0]
 801937c:	432e      	orrs	r6, r5
 801937e:	f021 0104 	bic.w	r1, r1, #4
 8019382:	6021      	str	r1, [r4, #0]
 8019384:	d04b      	beq.n	801941e <_printf_i+0x1a6>
 8019386:	4616      	mov	r6, r2
 8019388:	fbb5 f1f3 	udiv	r1, r5, r3
 801938c:	fb03 5711 	mls	r7, r3, r1, r5
 8019390:	5dc7      	ldrb	r7, [r0, r7]
 8019392:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019396:	462f      	mov	r7, r5
 8019398:	42bb      	cmp	r3, r7
 801939a:	460d      	mov	r5, r1
 801939c:	d9f4      	bls.n	8019388 <_printf_i+0x110>
 801939e:	2b08      	cmp	r3, #8
 80193a0:	d10b      	bne.n	80193ba <_printf_i+0x142>
 80193a2:	6823      	ldr	r3, [r4, #0]
 80193a4:	07df      	lsls	r7, r3, #31
 80193a6:	d508      	bpl.n	80193ba <_printf_i+0x142>
 80193a8:	6923      	ldr	r3, [r4, #16]
 80193aa:	6861      	ldr	r1, [r4, #4]
 80193ac:	4299      	cmp	r1, r3
 80193ae:	bfde      	ittt	le
 80193b0:	2330      	movle	r3, #48	@ 0x30
 80193b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80193b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80193ba:	1b92      	subs	r2, r2, r6
 80193bc:	6122      	str	r2, [r4, #16]
 80193be:	f8cd a000 	str.w	sl, [sp]
 80193c2:	464b      	mov	r3, r9
 80193c4:	aa03      	add	r2, sp, #12
 80193c6:	4621      	mov	r1, r4
 80193c8:	4640      	mov	r0, r8
 80193ca:	f7ff fee7 	bl	801919c <_printf_common>
 80193ce:	3001      	adds	r0, #1
 80193d0:	d14a      	bne.n	8019468 <_printf_i+0x1f0>
 80193d2:	f04f 30ff 	mov.w	r0, #4294967295
 80193d6:	b004      	add	sp, #16
 80193d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193dc:	6823      	ldr	r3, [r4, #0]
 80193de:	f043 0320 	orr.w	r3, r3, #32
 80193e2:	6023      	str	r3, [r4, #0]
 80193e4:	4832      	ldr	r0, [pc, #200]	@ (80194b0 <_printf_i+0x238>)
 80193e6:	2778      	movs	r7, #120	@ 0x78
 80193e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80193ec:	6823      	ldr	r3, [r4, #0]
 80193ee:	6831      	ldr	r1, [r6, #0]
 80193f0:	061f      	lsls	r7, r3, #24
 80193f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80193f6:	d402      	bmi.n	80193fe <_printf_i+0x186>
 80193f8:	065f      	lsls	r7, r3, #25
 80193fa:	bf48      	it	mi
 80193fc:	b2ad      	uxthmi	r5, r5
 80193fe:	6031      	str	r1, [r6, #0]
 8019400:	07d9      	lsls	r1, r3, #31
 8019402:	bf44      	itt	mi
 8019404:	f043 0320 	orrmi.w	r3, r3, #32
 8019408:	6023      	strmi	r3, [r4, #0]
 801940a:	b11d      	cbz	r5, 8019414 <_printf_i+0x19c>
 801940c:	2310      	movs	r3, #16
 801940e:	e7ad      	b.n	801936c <_printf_i+0xf4>
 8019410:	4826      	ldr	r0, [pc, #152]	@ (80194ac <_printf_i+0x234>)
 8019412:	e7e9      	b.n	80193e8 <_printf_i+0x170>
 8019414:	6823      	ldr	r3, [r4, #0]
 8019416:	f023 0320 	bic.w	r3, r3, #32
 801941a:	6023      	str	r3, [r4, #0]
 801941c:	e7f6      	b.n	801940c <_printf_i+0x194>
 801941e:	4616      	mov	r6, r2
 8019420:	e7bd      	b.n	801939e <_printf_i+0x126>
 8019422:	6833      	ldr	r3, [r6, #0]
 8019424:	6825      	ldr	r5, [r4, #0]
 8019426:	6961      	ldr	r1, [r4, #20]
 8019428:	1d18      	adds	r0, r3, #4
 801942a:	6030      	str	r0, [r6, #0]
 801942c:	062e      	lsls	r6, r5, #24
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	d501      	bpl.n	8019436 <_printf_i+0x1be>
 8019432:	6019      	str	r1, [r3, #0]
 8019434:	e002      	b.n	801943c <_printf_i+0x1c4>
 8019436:	0668      	lsls	r0, r5, #25
 8019438:	d5fb      	bpl.n	8019432 <_printf_i+0x1ba>
 801943a:	8019      	strh	r1, [r3, #0]
 801943c:	2300      	movs	r3, #0
 801943e:	6123      	str	r3, [r4, #16]
 8019440:	4616      	mov	r6, r2
 8019442:	e7bc      	b.n	80193be <_printf_i+0x146>
 8019444:	6833      	ldr	r3, [r6, #0]
 8019446:	1d1a      	adds	r2, r3, #4
 8019448:	6032      	str	r2, [r6, #0]
 801944a:	681e      	ldr	r6, [r3, #0]
 801944c:	6862      	ldr	r2, [r4, #4]
 801944e:	2100      	movs	r1, #0
 8019450:	4630      	mov	r0, r6
 8019452:	f7e6 fecd 	bl	80001f0 <memchr>
 8019456:	b108      	cbz	r0, 801945c <_printf_i+0x1e4>
 8019458:	1b80      	subs	r0, r0, r6
 801945a:	6060      	str	r0, [r4, #4]
 801945c:	6863      	ldr	r3, [r4, #4]
 801945e:	6123      	str	r3, [r4, #16]
 8019460:	2300      	movs	r3, #0
 8019462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019466:	e7aa      	b.n	80193be <_printf_i+0x146>
 8019468:	6923      	ldr	r3, [r4, #16]
 801946a:	4632      	mov	r2, r6
 801946c:	4649      	mov	r1, r9
 801946e:	4640      	mov	r0, r8
 8019470:	47d0      	blx	sl
 8019472:	3001      	adds	r0, #1
 8019474:	d0ad      	beq.n	80193d2 <_printf_i+0x15a>
 8019476:	6823      	ldr	r3, [r4, #0]
 8019478:	079b      	lsls	r3, r3, #30
 801947a:	d413      	bmi.n	80194a4 <_printf_i+0x22c>
 801947c:	68e0      	ldr	r0, [r4, #12]
 801947e:	9b03      	ldr	r3, [sp, #12]
 8019480:	4298      	cmp	r0, r3
 8019482:	bfb8      	it	lt
 8019484:	4618      	movlt	r0, r3
 8019486:	e7a6      	b.n	80193d6 <_printf_i+0x15e>
 8019488:	2301      	movs	r3, #1
 801948a:	4632      	mov	r2, r6
 801948c:	4649      	mov	r1, r9
 801948e:	4640      	mov	r0, r8
 8019490:	47d0      	blx	sl
 8019492:	3001      	adds	r0, #1
 8019494:	d09d      	beq.n	80193d2 <_printf_i+0x15a>
 8019496:	3501      	adds	r5, #1
 8019498:	68e3      	ldr	r3, [r4, #12]
 801949a:	9903      	ldr	r1, [sp, #12]
 801949c:	1a5b      	subs	r3, r3, r1
 801949e:	42ab      	cmp	r3, r5
 80194a0:	dcf2      	bgt.n	8019488 <_printf_i+0x210>
 80194a2:	e7eb      	b.n	801947c <_printf_i+0x204>
 80194a4:	2500      	movs	r5, #0
 80194a6:	f104 0619 	add.w	r6, r4, #25
 80194aa:	e7f5      	b.n	8019498 <_printf_i+0x220>
 80194ac:	080219e6 	.word	0x080219e6
 80194b0:	080219f7 	.word	0x080219f7

080194b4 <_scanf_float>:
 80194b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b8:	b087      	sub	sp, #28
 80194ba:	4691      	mov	r9, r2
 80194bc:	9303      	str	r3, [sp, #12]
 80194be:	688b      	ldr	r3, [r1, #8]
 80194c0:	1e5a      	subs	r2, r3, #1
 80194c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80194c6:	bf81      	itttt	hi
 80194c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80194cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80194d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80194d4:	608b      	strhi	r3, [r1, #8]
 80194d6:	680b      	ldr	r3, [r1, #0]
 80194d8:	460a      	mov	r2, r1
 80194da:	f04f 0500 	mov.w	r5, #0
 80194de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80194e2:	f842 3b1c 	str.w	r3, [r2], #28
 80194e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80194ea:	4680      	mov	r8, r0
 80194ec:	460c      	mov	r4, r1
 80194ee:	bf98      	it	ls
 80194f0:	f04f 0b00 	movls.w	fp, #0
 80194f4:	9201      	str	r2, [sp, #4]
 80194f6:	4616      	mov	r6, r2
 80194f8:	46aa      	mov	sl, r5
 80194fa:	462f      	mov	r7, r5
 80194fc:	9502      	str	r5, [sp, #8]
 80194fe:	68a2      	ldr	r2, [r4, #8]
 8019500:	b15a      	cbz	r2, 801951a <_scanf_float+0x66>
 8019502:	f8d9 3000 	ldr.w	r3, [r9]
 8019506:	781b      	ldrb	r3, [r3, #0]
 8019508:	2b4e      	cmp	r3, #78	@ 0x4e
 801950a:	d863      	bhi.n	80195d4 <_scanf_float+0x120>
 801950c:	2b40      	cmp	r3, #64	@ 0x40
 801950e:	d83b      	bhi.n	8019588 <_scanf_float+0xd4>
 8019510:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019514:	b2c8      	uxtb	r0, r1
 8019516:	280e      	cmp	r0, #14
 8019518:	d939      	bls.n	801958e <_scanf_float+0xda>
 801951a:	b11f      	cbz	r7, 8019524 <_scanf_float+0x70>
 801951c:	6823      	ldr	r3, [r4, #0]
 801951e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019522:	6023      	str	r3, [r4, #0]
 8019524:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019528:	f1ba 0f01 	cmp.w	sl, #1
 801952c:	f200 8114 	bhi.w	8019758 <_scanf_float+0x2a4>
 8019530:	9b01      	ldr	r3, [sp, #4]
 8019532:	429e      	cmp	r6, r3
 8019534:	f200 8105 	bhi.w	8019742 <_scanf_float+0x28e>
 8019538:	2001      	movs	r0, #1
 801953a:	b007      	add	sp, #28
 801953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019540:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8019544:	2a0d      	cmp	r2, #13
 8019546:	d8e8      	bhi.n	801951a <_scanf_float+0x66>
 8019548:	a101      	add	r1, pc, #4	@ (adr r1, 8019550 <_scanf_float+0x9c>)
 801954a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801954e:	bf00      	nop
 8019550:	08019699 	.word	0x08019699
 8019554:	0801951b 	.word	0x0801951b
 8019558:	0801951b 	.word	0x0801951b
 801955c:	0801951b 	.word	0x0801951b
 8019560:	080196f5 	.word	0x080196f5
 8019564:	080196cf 	.word	0x080196cf
 8019568:	0801951b 	.word	0x0801951b
 801956c:	0801951b 	.word	0x0801951b
 8019570:	080196a7 	.word	0x080196a7
 8019574:	0801951b 	.word	0x0801951b
 8019578:	0801951b 	.word	0x0801951b
 801957c:	0801951b 	.word	0x0801951b
 8019580:	0801951b 	.word	0x0801951b
 8019584:	08019663 	.word	0x08019663
 8019588:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801958c:	e7da      	b.n	8019544 <_scanf_float+0x90>
 801958e:	290e      	cmp	r1, #14
 8019590:	d8c3      	bhi.n	801951a <_scanf_float+0x66>
 8019592:	a001      	add	r0, pc, #4	@ (adr r0, 8019598 <_scanf_float+0xe4>)
 8019594:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019598:	08019653 	.word	0x08019653
 801959c:	0801951b 	.word	0x0801951b
 80195a0:	08019653 	.word	0x08019653
 80195a4:	080196e3 	.word	0x080196e3
 80195a8:	0801951b 	.word	0x0801951b
 80195ac:	080195f5 	.word	0x080195f5
 80195b0:	08019639 	.word	0x08019639
 80195b4:	08019639 	.word	0x08019639
 80195b8:	08019639 	.word	0x08019639
 80195bc:	08019639 	.word	0x08019639
 80195c0:	08019639 	.word	0x08019639
 80195c4:	08019639 	.word	0x08019639
 80195c8:	08019639 	.word	0x08019639
 80195cc:	08019639 	.word	0x08019639
 80195d0:	08019639 	.word	0x08019639
 80195d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80195d6:	d809      	bhi.n	80195ec <_scanf_float+0x138>
 80195d8:	2b60      	cmp	r3, #96	@ 0x60
 80195da:	d8b1      	bhi.n	8019540 <_scanf_float+0x8c>
 80195dc:	2b54      	cmp	r3, #84	@ 0x54
 80195de:	d07b      	beq.n	80196d8 <_scanf_float+0x224>
 80195e0:	2b59      	cmp	r3, #89	@ 0x59
 80195e2:	d19a      	bne.n	801951a <_scanf_float+0x66>
 80195e4:	2d07      	cmp	r5, #7
 80195e6:	d198      	bne.n	801951a <_scanf_float+0x66>
 80195e8:	2508      	movs	r5, #8
 80195ea:	e02f      	b.n	801964c <_scanf_float+0x198>
 80195ec:	2b74      	cmp	r3, #116	@ 0x74
 80195ee:	d073      	beq.n	80196d8 <_scanf_float+0x224>
 80195f0:	2b79      	cmp	r3, #121	@ 0x79
 80195f2:	e7f6      	b.n	80195e2 <_scanf_float+0x12e>
 80195f4:	6821      	ldr	r1, [r4, #0]
 80195f6:	05c8      	lsls	r0, r1, #23
 80195f8:	d51e      	bpl.n	8019638 <_scanf_float+0x184>
 80195fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80195fe:	6021      	str	r1, [r4, #0]
 8019600:	3701      	adds	r7, #1
 8019602:	f1bb 0f00 	cmp.w	fp, #0
 8019606:	d003      	beq.n	8019610 <_scanf_float+0x15c>
 8019608:	3201      	adds	r2, #1
 801960a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801960e:	60a2      	str	r2, [r4, #8]
 8019610:	68a3      	ldr	r3, [r4, #8]
 8019612:	3b01      	subs	r3, #1
 8019614:	60a3      	str	r3, [r4, #8]
 8019616:	6923      	ldr	r3, [r4, #16]
 8019618:	3301      	adds	r3, #1
 801961a:	6123      	str	r3, [r4, #16]
 801961c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019620:	3b01      	subs	r3, #1
 8019622:	2b00      	cmp	r3, #0
 8019624:	f8c9 3004 	str.w	r3, [r9, #4]
 8019628:	f340 8082 	ble.w	8019730 <_scanf_float+0x27c>
 801962c:	f8d9 3000 	ldr.w	r3, [r9]
 8019630:	3301      	adds	r3, #1
 8019632:	f8c9 3000 	str.w	r3, [r9]
 8019636:	e762      	b.n	80194fe <_scanf_float+0x4a>
 8019638:	eb1a 0105 	adds.w	r1, sl, r5
 801963c:	f47f af6d 	bne.w	801951a <_scanf_float+0x66>
 8019640:	6822      	ldr	r2, [r4, #0]
 8019642:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8019646:	6022      	str	r2, [r4, #0]
 8019648:	460d      	mov	r5, r1
 801964a:	468a      	mov	sl, r1
 801964c:	f806 3b01 	strb.w	r3, [r6], #1
 8019650:	e7de      	b.n	8019610 <_scanf_float+0x15c>
 8019652:	6822      	ldr	r2, [r4, #0]
 8019654:	0610      	lsls	r0, r2, #24
 8019656:	f57f af60 	bpl.w	801951a <_scanf_float+0x66>
 801965a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801965e:	6022      	str	r2, [r4, #0]
 8019660:	e7f4      	b.n	801964c <_scanf_float+0x198>
 8019662:	f1ba 0f00 	cmp.w	sl, #0
 8019666:	d10c      	bne.n	8019682 <_scanf_float+0x1ce>
 8019668:	b977      	cbnz	r7, 8019688 <_scanf_float+0x1d4>
 801966a:	6822      	ldr	r2, [r4, #0]
 801966c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019670:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019674:	d108      	bne.n	8019688 <_scanf_float+0x1d4>
 8019676:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801967a:	6022      	str	r2, [r4, #0]
 801967c:	f04f 0a01 	mov.w	sl, #1
 8019680:	e7e4      	b.n	801964c <_scanf_float+0x198>
 8019682:	f1ba 0f02 	cmp.w	sl, #2
 8019686:	d050      	beq.n	801972a <_scanf_float+0x276>
 8019688:	2d01      	cmp	r5, #1
 801968a:	d002      	beq.n	8019692 <_scanf_float+0x1de>
 801968c:	2d04      	cmp	r5, #4
 801968e:	f47f af44 	bne.w	801951a <_scanf_float+0x66>
 8019692:	3501      	adds	r5, #1
 8019694:	b2ed      	uxtb	r5, r5
 8019696:	e7d9      	b.n	801964c <_scanf_float+0x198>
 8019698:	f1ba 0f01 	cmp.w	sl, #1
 801969c:	f47f af3d 	bne.w	801951a <_scanf_float+0x66>
 80196a0:	f04f 0a02 	mov.w	sl, #2
 80196a4:	e7d2      	b.n	801964c <_scanf_float+0x198>
 80196a6:	b975      	cbnz	r5, 80196c6 <_scanf_float+0x212>
 80196a8:	2f00      	cmp	r7, #0
 80196aa:	f47f af37 	bne.w	801951c <_scanf_float+0x68>
 80196ae:	6822      	ldr	r2, [r4, #0]
 80196b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80196b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80196b8:	f040 8103 	bne.w	80198c2 <_scanf_float+0x40e>
 80196bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80196c0:	6022      	str	r2, [r4, #0]
 80196c2:	2501      	movs	r5, #1
 80196c4:	e7c2      	b.n	801964c <_scanf_float+0x198>
 80196c6:	2d03      	cmp	r5, #3
 80196c8:	d0e3      	beq.n	8019692 <_scanf_float+0x1de>
 80196ca:	2d05      	cmp	r5, #5
 80196cc:	e7df      	b.n	801968e <_scanf_float+0x1da>
 80196ce:	2d02      	cmp	r5, #2
 80196d0:	f47f af23 	bne.w	801951a <_scanf_float+0x66>
 80196d4:	2503      	movs	r5, #3
 80196d6:	e7b9      	b.n	801964c <_scanf_float+0x198>
 80196d8:	2d06      	cmp	r5, #6
 80196da:	f47f af1e 	bne.w	801951a <_scanf_float+0x66>
 80196de:	2507      	movs	r5, #7
 80196e0:	e7b4      	b.n	801964c <_scanf_float+0x198>
 80196e2:	6822      	ldr	r2, [r4, #0]
 80196e4:	0591      	lsls	r1, r2, #22
 80196e6:	f57f af18 	bpl.w	801951a <_scanf_float+0x66>
 80196ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80196ee:	6022      	str	r2, [r4, #0]
 80196f0:	9702      	str	r7, [sp, #8]
 80196f2:	e7ab      	b.n	801964c <_scanf_float+0x198>
 80196f4:	6822      	ldr	r2, [r4, #0]
 80196f6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80196fa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80196fe:	d005      	beq.n	801970c <_scanf_float+0x258>
 8019700:	0550      	lsls	r0, r2, #21
 8019702:	f57f af0a 	bpl.w	801951a <_scanf_float+0x66>
 8019706:	2f00      	cmp	r7, #0
 8019708:	f000 80db 	beq.w	80198c2 <_scanf_float+0x40e>
 801970c:	0591      	lsls	r1, r2, #22
 801970e:	bf58      	it	pl
 8019710:	9902      	ldrpl	r1, [sp, #8]
 8019712:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019716:	bf58      	it	pl
 8019718:	1a79      	subpl	r1, r7, r1
 801971a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801971e:	bf58      	it	pl
 8019720:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019724:	6022      	str	r2, [r4, #0]
 8019726:	2700      	movs	r7, #0
 8019728:	e790      	b.n	801964c <_scanf_float+0x198>
 801972a:	f04f 0a03 	mov.w	sl, #3
 801972e:	e78d      	b.n	801964c <_scanf_float+0x198>
 8019730:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019734:	4649      	mov	r1, r9
 8019736:	4640      	mov	r0, r8
 8019738:	4798      	blx	r3
 801973a:	2800      	cmp	r0, #0
 801973c:	f43f aedf 	beq.w	80194fe <_scanf_float+0x4a>
 8019740:	e6eb      	b.n	801951a <_scanf_float+0x66>
 8019742:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019746:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801974a:	464a      	mov	r2, r9
 801974c:	4640      	mov	r0, r8
 801974e:	4798      	blx	r3
 8019750:	6923      	ldr	r3, [r4, #16]
 8019752:	3b01      	subs	r3, #1
 8019754:	6123      	str	r3, [r4, #16]
 8019756:	e6eb      	b.n	8019530 <_scanf_float+0x7c>
 8019758:	1e6b      	subs	r3, r5, #1
 801975a:	2b06      	cmp	r3, #6
 801975c:	d824      	bhi.n	80197a8 <_scanf_float+0x2f4>
 801975e:	2d02      	cmp	r5, #2
 8019760:	d836      	bhi.n	80197d0 <_scanf_float+0x31c>
 8019762:	9b01      	ldr	r3, [sp, #4]
 8019764:	429e      	cmp	r6, r3
 8019766:	f67f aee7 	bls.w	8019538 <_scanf_float+0x84>
 801976a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801976e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019772:	464a      	mov	r2, r9
 8019774:	4640      	mov	r0, r8
 8019776:	4798      	blx	r3
 8019778:	6923      	ldr	r3, [r4, #16]
 801977a:	3b01      	subs	r3, #1
 801977c:	6123      	str	r3, [r4, #16]
 801977e:	e7f0      	b.n	8019762 <_scanf_float+0x2ae>
 8019780:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019784:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8019788:	464a      	mov	r2, r9
 801978a:	4640      	mov	r0, r8
 801978c:	4798      	blx	r3
 801978e:	6923      	ldr	r3, [r4, #16]
 8019790:	3b01      	subs	r3, #1
 8019792:	6123      	str	r3, [r4, #16]
 8019794:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019798:	fa5f fa8a 	uxtb.w	sl, sl
 801979c:	f1ba 0f02 	cmp.w	sl, #2
 80197a0:	d1ee      	bne.n	8019780 <_scanf_float+0x2cc>
 80197a2:	3d03      	subs	r5, #3
 80197a4:	b2ed      	uxtb	r5, r5
 80197a6:	1b76      	subs	r6, r6, r5
 80197a8:	6823      	ldr	r3, [r4, #0]
 80197aa:	05da      	lsls	r2, r3, #23
 80197ac:	d530      	bpl.n	8019810 <_scanf_float+0x35c>
 80197ae:	055b      	lsls	r3, r3, #21
 80197b0:	d511      	bpl.n	80197d6 <_scanf_float+0x322>
 80197b2:	9b01      	ldr	r3, [sp, #4]
 80197b4:	429e      	cmp	r6, r3
 80197b6:	f67f aebf 	bls.w	8019538 <_scanf_float+0x84>
 80197ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80197be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80197c2:	464a      	mov	r2, r9
 80197c4:	4640      	mov	r0, r8
 80197c6:	4798      	blx	r3
 80197c8:	6923      	ldr	r3, [r4, #16]
 80197ca:	3b01      	subs	r3, #1
 80197cc:	6123      	str	r3, [r4, #16]
 80197ce:	e7f0      	b.n	80197b2 <_scanf_float+0x2fe>
 80197d0:	46aa      	mov	sl, r5
 80197d2:	46b3      	mov	fp, r6
 80197d4:	e7de      	b.n	8019794 <_scanf_float+0x2e0>
 80197d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80197da:	6923      	ldr	r3, [r4, #16]
 80197dc:	2965      	cmp	r1, #101	@ 0x65
 80197de:	f103 33ff 	add.w	r3, r3, #4294967295
 80197e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80197e6:	6123      	str	r3, [r4, #16]
 80197e8:	d00c      	beq.n	8019804 <_scanf_float+0x350>
 80197ea:	2945      	cmp	r1, #69	@ 0x45
 80197ec:	d00a      	beq.n	8019804 <_scanf_float+0x350>
 80197ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80197f2:	464a      	mov	r2, r9
 80197f4:	4640      	mov	r0, r8
 80197f6:	4798      	blx	r3
 80197f8:	6923      	ldr	r3, [r4, #16]
 80197fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80197fe:	3b01      	subs	r3, #1
 8019800:	1eb5      	subs	r5, r6, #2
 8019802:	6123      	str	r3, [r4, #16]
 8019804:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019808:	464a      	mov	r2, r9
 801980a:	4640      	mov	r0, r8
 801980c:	4798      	blx	r3
 801980e:	462e      	mov	r6, r5
 8019810:	6822      	ldr	r2, [r4, #0]
 8019812:	f012 0210 	ands.w	r2, r2, #16
 8019816:	d001      	beq.n	801981c <_scanf_float+0x368>
 8019818:	2000      	movs	r0, #0
 801981a:	e68e      	b.n	801953a <_scanf_float+0x86>
 801981c:	7032      	strb	r2, [r6, #0]
 801981e:	6823      	ldr	r3, [r4, #0]
 8019820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8019824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019828:	d125      	bne.n	8019876 <_scanf_float+0x3c2>
 801982a:	9b02      	ldr	r3, [sp, #8]
 801982c:	429f      	cmp	r7, r3
 801982e:	d00a      	beq.n	8019846 <_scanf_float+0x392>
 8019830:	1bda      	subs	r2, r3, r7
 8019832:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8019836:	429e      	cmp	r6, r3
 8019838:	bf28      	it	cs
 801983a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801983e:	4922      	ldr	r1, [pc, #136]	@ (80198c8 <_scanf_float+0x414>)
 8019840:	4630      	mov	r0, r6
 8019842:	f000 f907 	bl	8019a54 <siprintf>
 8019846:	9901      	ldr	r1, [sp, #4]
 8019848:	2200      	movs	r2, #0
 801984a:	4640      	mov	r0, r8
 801984c:	f7ff f944 	bl	8018ad8 <_strtod_r>
 8019850:	9b03      	ldr	r3, [sp, #12]
 8019852:	6821      	ldr	r1, [r4, #0]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	f011 0f02 	tst.w	r1, #2
 801985a:	ec57 6b10 	vmov	r6, r7, d0
 801985e:	f103 0204 	add.w	r2, r3, #4
 8019862:	d015      	beq.n	8019890 <_scanf_float+0x3dc>
 8019864:	9903      	ldr	r1, [sp, #12]
 8019866:	600a      	str	r2, [r1, #0]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	e9c3 6700 	strd	r6, r7, [r3]
 801986e:	68e3      	ldr	r3, [r4, #12]
 8019870:	3301      	adds	r3, #1
 8019872:	60e3      	str	r3, [r4, #12]
 8019874:	e7d0      	b.n	8019818 <_scanf_float+0x364>
 8019876:	9b04      	ldr	r3, [sp, #16]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d0e4      	beq.n	8019846 <_scanf_float+0x392>
 801987c:	9905      	ldr	r1, [sp, #20]
 801987e:	230a      	movs	r3, #10
 8019880:	3101      	adds	r1, #1
 8019882:	4640      	mov	r0, r8
 8019884:	f7ff f9b4 	bl	8018bf0 <_strtol_r>
 8019888:	9b04      	ldr	r3, [sp, #16]
 801988a:	9e05      	ldr	r6, [sp, #20]
 801988c:	1ac2      	subs	r2, r0, r3
 801988e:	e7d0      	b.n	8019832 <_scanf_float+0x37e>
 8019890:	f011 0f04 	tst.w	r1, #4
 8019894:	9903      	ldr	r1, [sp, #12]
 8019896:	600a      	str	r2, [r1, #0]
 8019898:	d1e6      	bne.n	8019868 <_scanf_float+0x3b4>
 801989a:	681d      	ldr	r5, [r3, #0]
 801989c:	4632      	mov	r2, r6
 801989e:	463b      	mov	r3, r7
 80198a0:	4630      	mov	r0, r6
 80198a2:	4639      	mov	r1, r7
 80198a4:	f7e7 f952 	bl	8000b4c <__aeabi_dcmpun>
 80198a8:	b128      	cbz	r0, 80198b6 <_scanf_float+0x402>
 80198aa:	4808      	ldr	r0, [pc, #32]	@ (80198cc <_scanf_float+0x418>)
 80198ac:	f001 f9f8 	bl	801aca0 <nanf>
 80198b0:	ed85 0a00 	vstr	s0, [r5]
 80198b4:	e7db      	b.n	801986e <_scanf_float+0x3ba>
 80198b6:	4630      	mov	r0, r6
 80198b8:	4639      	mov	r1, r7
 80198ba:	f7e7 f9a5 	bl	8000c08 <__aeabi_d2f>
 80198be:	6028      	str	r0, [r5, #0]
 80198c0:	e7d5      	b.n	801986e <_scanf_float+0x3ba>
 80198c2:	2700      	movs	r7, #0
 80198c4:	e62e      	b.n	8019524 <_scanf_float+0x70>
 80198c6:	bf00      	nop
 80198c8:	08021a08 	.word	0x08021a08
 80198cc:	08021b0d 	.word	0x08021b0d

080198d0 <std>:
 80198d0:	2300      	movs	r3, #0
 80198d2:	b510      	push	{r4, lr}
 80198d4:	4604      	mov	r4, r0
 80198d6:	e9c0 3300 	strd	r3, r3, [r0]
 80198da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80198de:	6083      	str	r3, [r0, #8]
 80198e0:	8181      	strh	r1, [r0, #12]
 80198e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80198e4:	81c2      	strh	r2, [r0, #14]
 80198e6:	6183      	str	r3, [r0, #24]
 80198e8:	4619      	mov	r1, r3
 80198ea:	2208      	movs	r2, #8
 80198ec:	305c      	adds	r0, #92	@ 0x5c
 80198ee:	f000 f944 	bl	8019b7a <memset>
 80198f2:	4b0d      	ldr	r3, [pc, #52]	@ (8019928 <std+0x58>)
 80198f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80198f6:	4b0d      	ldr	r3, [pc, #52]	@ (801992c <std+0x5c>)
 80198f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80198fa:	4b0d      	ldr	r3, [pc, #52]	@ (8019930 <std+0x60>)
 80198fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80198fe:	4b0d      	ldr	r3, [pc, #52]	@ (8019934 <std+0x64>)
 8019900:	6323      	str	r3, [r4, #48]	@ 0x30
 8019902:	4b0d      	ldr	r3, [pc, #52]	@ (8019938 <std+0x68>)
 8019904:	6224      	str	r4, [r4, #32]
 8019906:	429c      	cmp	r4, r3
 8019908:	d006      	beq.n	8019918 <std+0x48>
 801990a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801990e:	4294      	cmp	r4, r2
 8019910:	d002      	beq.n	8019918 <std+0x48>
 8019912:	33d0      	adds	r3, #208	@ 0xd0
 8019914:	429c      	cmp	r4, r3
 8019916:	d105      	bne.n	8019924 <std+0x54>
 8019918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801991c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019920:	f001 b99a 	b.w	801ac58 <__retarget_lock_init_recursive>
 8019924:	bd10      	pop	{r4, pc}
 8019926:	bf00      	nop
 8019928:	08019af1 	.word	0x08019af1
 801992c:	08019b17 	.word	0x08019b17
 8019930:	08019b4f 	.word	0x08019b4f
 8019934:	08019b73 	.word	0x08019b73
 8019938:	20005d94 	.word	0x20005d94

0801993c <stdio_exit_handler>:
 801993c:	4a02      	ldr	r2, [pc, #8]	@ (8019948 <stdio_exit_handler+0xc>)
 801993e:	4903      	ldr	r1, [pc, #12]	@ (801994c <stdio_exit_handler+0x10>)
 8019940:	4803      	ldr	r0, [pc, #12]	@ (8019950 <stdio_exit_handler+0x14>)
 8019942:	f000 b869 	b.w	8019a18 <_fwalk_sglue>
 8019946:	bf00      	nop
 8019948:	20000040 	.word	0x20000040
 801994c:	0801d659 	.word	0x0801d659
 8019950:	200001c4 	.word	0x200001c4

08019954 <cleanup_stdio>:
 8019954:	6841      	ldr	r1, [r0, #4]
 8019956:	4b0c      	ldr	r3, [pc, #48]	@ (8019988 <cleanup_stdio+0x34>)
 8019958:	4299      	cmp	r1, r3
 801995a:	b510      	push	{r4, lr}
 801995c:	4604      	mov	r4, r0
 801995e:	d001      	beq.n	8019964 <cleanup_stdio+0x10>
 8019960:	f003 fe7a 	bl	801d658 <_fflush_r>
 8019964:	68a1      	ldr	r1, [r4, #8]
 8019966:	4b09      	ldr	r3, [pc, #36]	@ (801998c <cleanup_stdio+0x38>)
 8019968:	4299      	cmp	r1, r3
 801996a:	d002      	beq.n	8019972 <cleanup_stdio+0x1e>
 801996c:	4620      	mov	r0, r4
 801996e:	f003 fe73 	bl	801d658 <_fflush_r>
 8019972:	68e1      	ldr	r1, [r4, #12]
 8019974:	4b06      	ldr	r3, [pc, #24]	@ (8019990 <cleanup_stdio+0x3c>)
 8019976:	4299      	cmp	r1, r3
 8019978:	d004      	beq.n	8019984 <cleanup_stdio+0x30>
 801997a:	4620      	mov	r0, r4
 801997c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019980:	f003 be6a 	b.w	801d658 <_fflush_r>
 8019984:	bd10      	pop	{r4, pc}
 8019986:	bf00      	nop
 8019988:	20005d94 	.word	0x20005d94
 801998c:	20005dfc 	.word	0x20005dfc
 8019990:	20005e64 	.word	0x20005e64

08019994 <global_stdio_init.part.0>:
 8019994:	b510      	push	{r4, lr}
 8019996:	4b0b      	ldr	r3, [pc, #44]	@ (80199c4 <global_stdio_init.part.0+0x30>)
 8019998:	4c0b      	ldr	r4, [pc, #44]	@ (80199c8 <global_stdio_init.part.0+0x34>)
 801999a:	4a0c      	ldr	r2, [pc, #48]	@ (80199cc <global_stdio_init.part.0+0x38>)
 801999c:	601a      	str	r2, [r3, #0]
 801999e:	4620      	mov	r0, r4
 80199a0:	2200      	movs	r2, #0
 80199a2:	2104      	movs	r1, #4
 80199a4:	f7ff ff94 	bl	80198d0 <std>
 80199a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80199ac:	2201      	movs	r2, #1
 80199ae:	2109      	movs	r1, #9
 80199b0:	f7ff ff8e 	bl	80198d0 <std>
 80199b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80199b8:	2202      	movs	r2, #2
 80199ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199be:	2112      	movs	r1, #18
 80199c0:	f7ff bf86 	b.w	80198d0 <std>
 80199c4:	20005ecc 	.word	0x20005ecc
 80199c8:	20005d94 	.word	0x20005d94
 80199cc:	0801993d 	.word	0x0801993d

080199d0 <__sfp_lock_acquire>:
 80199d0:	4801      	ldr	r0, [pc, #4]	@ (80199d8 <__sfp_lock_acquire+0x8>)
 80199d2:	f001 b943 	b.w	801ac5c <__retarget_lock_acquire_recursive>
 80199d6:	bf00      	nop
 80199d8:	20005efb 	.word	0x20005efb

080199dc <__sfp_lock_release>:
 80199dc:	4801      	ldr	r0, [pc, #4]	@ (80199e4 <__sfp_lock_release+0x8>)
 80199de:	f001 b93f 	b.w	801ac60 <__retarget_lock_release_recursive>
 80199e2:	bf00      	nop
 80199e4:	20005efb 	.word	0x20005efb

080199e8 <__sinit>:
 80199e8:	b510      	push	{r4, lr}
 80199ea:	4604      	mov	r4, r0
 80199ec:	f7ff fff0 	bl	80199d0 <__sfp_lock_acquire>
 80199f0:	6a23      	ldr	r3, [r4, #32]
 80199f2:	b11b      	cbz	r3, 80199fc <__sinit+0x14>
 80199f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199f8:	f7ff bff0 	b.w	80199dc <__sfp_lock_release>
 80199fc:	4b04      	ldr	r3, [pc, #16]	@ (8019a10 <__sinit+0x28>)
 80199fe:	6223      	str	r3, [r4, #32]
 8019a00:	4b04      	ldr	r3, [pc, #16]	@ (8019a14 <__sinit+0x2c>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d1f5      	bne.n	80199f4 <__sinit+0xc>
 8019a08:	f7ff ffc4 	bl	8019994 <global_stdio_init.part.0>
 8019a0c:	e7f2      	b.n	80199f4 <__sinit+0xc>
 8019a0e:	bf00      	nop
 8019a10:	08019955 	.word	0x08019955
 8019a14:	20005ecc 	.word	0x20005ecc

08019a18 <_fwalk_sglue>:
 8019a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a1c:	4607      	mov	r7, r0
 8019a1e:	4688      	mov	r8, r1
 8019a20:	4614      	mov	r4, r2
 8019a22:	2600      	movs	r6, #0
 8019a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019a28:	f1b9 0901 	subs.w	r9, r9, #1
 8019a2c:	d505      	bpl.n	8019a3a <_fwalk_sglue+0x22>
 8019a2e:	6824      	ldr	r4, [r4, #0]
 8019a30:	2c00      	cmp	r4, #0
 8019a32:	d1f7      	bne.n	8019a24 <_fwalk_sglue+0xc>
 8019a34:	4630      	mov	r0, r6
 8019a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a3a:	89ab      	ldrh	r3, [r5, #12]
 8019a3c:	2b01      	cmp	r3, #1
 8019a3e:	d907      	bls.n	8019a50 <_fwalk_sglue+0x38>
 8019a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019a44:	3301      	adds	r3, #1
 8019a46:	d003      	beq.n	8019a50 <_fwalk_sglue+0x38>
 8019a48:	4629      	mov	r1, r5
 8019a4a:	4638      	mov	r0, r7
 8019a4c:	47c0      	blx	r8
 8019a4e:	4306      	orrs	r6, r0
 8019a50:	3568      	adds	r5, #104	@ 0x68
 8019a52:	e7e9      	b.n	8019a28 <_fwalk_sglue+0x10>

08019a54 <siprintf>:
 8019a54:	b40e      	push	{r1, r2, r3}
 8019a56:	b510      	push	{r4, lr}
 8019a58:	b09d      	sub	sp, #116	@ 0x74
 8019a5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019a5c:	9002      	str	r0, [sp, #8]
 8019a5e:	9006      	str	r0, [sp, #24]
 8019a60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019a64:	480a      	ldr	r0, [pc, #40]	@ (8019a90 <siprintf+0x3c>)
 8019a66:	9107      	str	r1, [sp, #28]
 8019a68:	9104      	str	r1, [sp, #16]
 8019a6a:	490a      	ldr	r1, [pc, #40]	@ (8019a94 <siprintf+0x40>)
 8019a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a70:	9105      	str	r1, [sp, #20]
 8019a72:	2400      	movs	r4, #0
 8019a74:	a902      	add	r1, sp, #8
 8019a76:	6800      	ldr	r0, [r0, #0]
 8019a78:	9301      	str	r3, [sp, #4]
 8019a7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019a7c:	f003 f94e 	bl	801cd1c <_svfiprintf_r>
 8019a80:	9b02      	ldr	r3, [sp, #8]
 8019a82:	701c      	strb	r4, [r3, #0]
 8019a84:	b01d      	add	sp, #116	@ 0x74
 8019a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a8a:	b003      	add	sp, #12
 8019a8c:	4770      	bx	lr
 8019a8e:	bf00      	nop
 8019a90:	200001c0 	.word	0x200001c0
 8019a94:	ffff0208 	.word	0xffff0208

08019a98 <siscanf>:
 8019a98:	b40e      	push	{r1, r2, r3}
 8019a9a:	b570      	push	{r4, r5, r6, lr}
 8019a9c:	b09d      	sub	sp, #116	@ 0x74
 8019a9e:	ac21      	add	r4, sp, #132	@ 0x84
 8019aa0:	2500      	movs	r5, #0
 8019aa2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8019aa6:	f854 6b04 	ldr.w	r6, [r4], #4
 8019aaa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019aae:	951b      	str	r5, [sp, #108]	@ 0x6c
 8019ab0:	9002      	str	r0, [sp, #8]
 8019ab2:	9006      	str	r0, [sp, #24]
 8019ab4:	f7e6 fbec 	bl	8000290 <strlen>
 8019ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8019ae8 <siscanf+0x50>)
 8019aba:	9003      	str	r0, [sp, #12]
 8019abc:	9007      	str	r0, [sp, #28]
 8019abe:	480b      	ldr	r0, [pc, #44]	@ (8019aec <siscanf+0x54>)
 8019ac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ac6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019aca:	4632      	mov	r2, r6
 8019acc:	4623      	mov	r3, r4
 8019ace:	a902      	add	r1, sp, #8
 8019ad0:	6800      	ldr	r0, [r0, #0]
 8019ad2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8019ad4:	9514      	str	r5, [sp, #80]	@ 0x50
 8019ad6:	9401      	str	r4, [sp, #4]
 8019ad8:	f003 fa76 	bl	801cfc8 <__ssvfiscanf_r>
 8019adc:	b01d      	add	sp, #116	@ 0x74
 8019ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ae2:	b003      	add	sp, #12
 8019ae4:	4770      	bx	lr
 8019ae6:	bf00      	nop
 8019ae8:	08019b13 	.word	0x08019b13
 8019aec:	200001c0 	.word	0x200001c0

08019af0 <__sread>:
 8019af0:	b510      	push	{r4, lr}
 8019af2:	460c      	mov	r4, r1
 8019af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019af8:	f001 f850 	bl	801ab9c <_read_r>
 8019afc:	2800      	cmp	r0, #0
 8019afe:	bfab      	itete	ge
 8019b00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019b02:	89a3      	ldrhlt	r3, [r4, #12]
 8019b04:	181b      	addge	r3, r3, r0
 8019b06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019b0a:	bfac      	ite	ge
 8019b0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019b0e:	81a3      	strhlt	r3, [r4, #12]
 8019b10:	bd10      	pop	{r4, pc}

08019b12 <__seofread>:
 8019b12:	2000      	movs	r0, #0
 8019b14:	4770      	bx	lr

08019b16 <__swrite>:
 8019b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b1a:	461f      	mov	r7, r3
 8019b1c:	898b      	ldrh	r3, [r1, #12]
 8019b1e:	05db      	lsls	r3, r3, #23
 8019b20:	4605      	mov	r5, r0
 8019b22:	460c      	mov	r4, r1
 8019b24:	4616      	mov	r6, r2
 8019b26:	d505      	bpl.n	8019b34 <__swrite+0x1e>
 8019b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b2c:	2302      	movs	r3, #2
 8019b2e:	2200      	movs	r2, #0
 8019b30:	f001 f822 	bl	801ab78 <_lseek_r>
 8019b34:	89a3      	ldrh	r3, [r4, #12]
 8019b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019b3e:	81a3      	strh	r3, [r4, #12]
 8019b40:	4632      	mov	r2, r6
 8019b42:	463b      	mov	r3, r7
 8019b44:	4628      	mov	r0, r5
 8019b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b4a:	f001 b849 	b.w	801abe0 <_write_r>

08019b4e <__sseek>:
 8019b4e:	b510      	push	{r4, lr}
 8019b50:	460c      	mov	r4, r1
 8019b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b56:	f001 f80f 	bl	801ab78 <_lseek_r>
 8019b5a:	1c43      	adds	r3, r0, #1
 8019b5c:	89a3      	ldrh	r3, [r4, #12]
 8019b5e:	bf15      	itete	ne
 8019b60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019b62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019b66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019b6a:	81a3      	strheq	r3, [r4, #12]
 8019b6c:	bf18      	it	ne
 8019b6e:	81a3      	strhne	r3, [r4, #12]
 8019b70:	bd10      	pop	{r4, pc}

08019b72 <__sclose>:
 8019b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b76:	f000 bf7f 	b.w	801aa78 <_close_r>

08019b7a <memset>:
 8019b7a:	4402      	add	r2, r0
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	4293      	cmp	r3, r2
 8019b80:	d100      	bne.n	8019b84 <memset+0xa>
 8019b82:	4770      	bx	lr
 8019b84:	f803 1b01 	strb.w	r1, [r3], #1
 8019b88:	e7f9      	b.n	8019b7e <memset+0x4>

08019b8a <strncmp>:
 8019b8a:	b510      	push	{r4, lr}
 8019b8c:	b16a      	cbz	r2, 8019baa <strncmp+0x20>
 8019b8e:	3901      	subs	r1, #1
 8019b90:	1884      	adds	r4, r0, r2
 8019b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	d103      	bne.n	8019ba6 <strncmp+0x1c>
 8019b9e:	42a0      	cmp	r0, r4
 8019ba0:	d001      	beq.n	8019ba6 <strncmp+0x1c>
 8019ba2:	2a00      	cmp	r2, #0
 8019ba4:	d1f5      	bne.n	8019b92 <strncmp+0x8>
 8019ba6:	1ad0      	subs	r0, r2, r3
 8019ba8:	bd10      	pop	{r4, pc}
 8019baa:	4610      	mov	r0, r2
 8019bac:	e7fc      	b.n	8019ba8 <strncmp+0x1e>

08019bae <strncpy>:
 8019bae:	b510      	push	{r4, lr}
 8019bb0:	3901      	subs	r1, #1
 8019bb2:	4603      	mov	r3, r0
 8019bb4:	b132      	cbz	r2, 8019bc4 <strncpy+0x16>
 8019bb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019bba:	f803 4b01 	strb.w	r4, [r3], #1
 8019bbe:	3a01      	subs	r2, #1
 8019bc0:	2c00      	cmp	r4, #0
 8019bc2:	d1f7      	bne.n	8019bb4 <strncpy+0x6>
 8019bc4:	441a      	add	r2, r3
 8019bc6:	2100      	movs	r1, #0
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	d100      	bne.n	8019bce <strncpy+0x20>
 8019bcc:	bd10      	pop	{r4, pc}
 8019bce:	f803 1b01 	strb.w	r1, [r3], #1
 8019bd2:	e7f9      	b.n	8019bc8 <strncpy+0x1a>

08019bd4 <difftime>:
 8019bd4:	1a80      	subs	r0, r0, r2
 8019bd6:	b508      	push	{r3, lr}
 8019bd8:	eb61 0103 	sbc.w	r1, r1, r3
 8019bdc:	f7e6 fcee 	bl	80005bc <__aeabi_l2d>
 8019be0:	ec41 0b10 	vmov	d0, r0, r1
 8019be4:	bd08      	pop	{r3, pc}
	...

08019be8 <gmtime>:
 8019be8:	b538      	push	{r3, r4, r5, lr}
 8019bea:	4b0b      	ldr	r3, [pc, #44]	@ (8019c18 <gmtime+0x30>)
 8019bec:	681d      	ldr	r5, [r3, #0]
 8019bee:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8019bf0:	4604      	mov	r4, r0
 8019bf2:	b953      	cbnz	r3, 8019c0a <gmtime+0x22>
 8019bf4:	2024      	movs	r0, #36	@ 0x24
 8019bf6:	f7fe f8ad 	bl	8017d54 <malloc>
 8019bfa:	4602      	mov	r2, r0
 8019bfc:	6368      	str	r0, [r5, #52]	@ 0x34
 8019bfe:	b920      	cbnz	r0, 8019c0a <gmtime+0x22>
 8019c00:	4b06      	ldr	r3, [pc, #24]	@ (8019c1c <gmtime+0x34>)
 8019c02:	4807      	ldr	r0, [pc, #28]	@ (8019c20 <gmtime+0x38>)
 8019c04:	213d      	movs	r1, #61	@ 0x3d
 8019c06:	f001 f8a3 	bl	801ad50 <__assert_func>
 8019c0a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c12:	f000 b807 	b.w	8019c24 <gmtime_r>
 8019c16:	bf00      	nop
 8019c18:	200001c0 	.word	0x200001c0
 8019c1c:	08021a0d 	.word	0x08021a0d
 8019c20:	08021a24 	.word	0x08021a24

08019c24 <gmtime_r>:
 8019c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c28:	4a4d      	ldr	r2, [pc, #308]	@ (8019d60 <gmtime_r+0x13c>)
 8019c2a:	460c      	mov	r4, r1
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8019c32:	f7e7 f839 	bl	8000ca8 <__aeabi_ldivmod>
 8019c36:	2a00      	cmp	r2, #0
 8019c38:	bfbc      	itt	lt
 8019c3a:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8019c3e:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8019c42:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8019c46:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8019c4a:	fbb2 f3f1 	udiv	r3, r2, r1
 8019c4e:	fb01 2213 	mls	r2, r1, r3, r2
 8019c52:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8019c56:	bfac      	ite	ge
 8019c58:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8019c5c:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8019c60:	60a3      	str	r3, [r4, #8]
 8019c62:	fbb2 f3f1 	udiv	r3, r2, r1
 8019c66:	fb01 2213 	mls	r2, r1, r3, r2
 8019c6a:	6063      	str	r3, [r4, #4]
 8019c6c:	6022      	str	r2, [r4, #0]
 8019c6e:	1cc3      	adds	r3, r0, #3
 8019c70:	2207      	movs	r2, #7
 8019c72:	fb93 f2f2 	sdiv	r2, r3, r2
 8019c76:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8019c7a:	1a9b      	subs	r3, r3, r2
 8019c7c:	4939      	ldr	r1, [pc, #228]	@ (8019d64 <gmtime_r+0x140>)
 8019c7e:	d555      	bpl.n	8019d2c <gmtime_r+0x108>
 8019c80:	3307      	adds	r3, #7
 8019c82:	61a3      	str	r3, [r4, #24]
 8019c84:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 8019c88:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8019c8c:	fb93 f1f1 	sdiv	r1, r3, r1
 8019c90:	4b35      	ldr	r3, [pc, #212]	@ (8019d68 <gmtime_r+0x144>)
 8019c92:	fb03 0001 	mla	r0, r3, r1, r0
 8019c96:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8019c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8019c9e:	4403      	add	r3, r0
 8019ca0:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8019ca4:	fbb0 f2fc 	udiv	r2, r0, ip
 8019ca8:	1a9b      	subs	r3, r3, r2
 8019caa:	f240 176d 	movw	r7, #365	@ 0x16d
 8019cae:	4a2f      	ldr	r2, [pc, #188]	@ (8019d6c <gmtime_r+0x148>)
 8019cb0:	fbb0 f2f2 	udiv	r2, r0, r2
 8019cb4:	2664      	movs	r6, #100	@ 0x64
 8019cb6:	1a9b      	subs	r3, r3, r2
 8019cb8:	fbb3 f2f7 	udiv	r2, r3, r7
 8019cbc:	fbb3 f3fc 	udiv	r3, r3, ip
 8019cc0:	fbb2 f5f6 	udiv	r5, r2, r6
 8019cc4:	1aeb      	subs	r3, r5, r3
 8019cc6:	4403      	add	r3, r0
 8019cc8:	fb07 3312 	mls	r3, r7, r2, r3
 8019ccc:	2099      	movs	r0, #153	@ 0x99
 8019cce:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8019cd2:	3702      	adds	r7, #2
 8019cd4:	f103 0e01 	add.w	lr, r3, #1
 8019cd8:	fbb7 fcf0 	udiv	ip, r7, r0
 8019cdc:	fb00 f00c 	mul.w	r0, r0, ip
 8019ce0:	3002      	adds	r0, #2
 8019ce2:	f04f 0805 	mov.w	r8, #5
 8019ce6:	fbb0 f0f8 	udiv	r0, r0, r8
 8019cea:	ebae 0000 	sub.w	r0, lr, r0
 8019cee:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8019cf2:	4577      	cmp	r7, lr
 8019cf4:	bf8c      	ite	hi
 8019cf6:	f06f 0709 	mvnhi.w	r7, #9
 8019cfa:	2702      	movls	r7, #2
 8019cfc:	4467      	add	r7, ip
 8019cfe:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8019d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d06:	2f01      	cmp	r7, #1
 8019d08:	bf98      	it	ls
 8019d0a:	3101      	addls	r1, #1
 8019d0c:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8019d10:	d312      	bcc.n	8019d38 <gmtime_r+0x114>
 8019d12:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8019d16:	61e3      	str	r3, [r4, #28]
 8019d18:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	60e0      	str	r0, [r4, #12]
 8019d20:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8019d24:	6223      	str	r3, [r4, #32]
 8019d26:	4620      	mov	r0, r4
 8019d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d2c:	2800      	cmp	r0, #0
 8019d2e:	61a3      	str	r3, [r4, #24]
 8019d30:	dba8      	blt.n	8019c84 <gmtime_r+0x60>
 8019d32:	fb90 f1f1 	sdiv	r1, r0, r1
 8019d36:	e7ab      	b.n	8019c90 <gmtime_r+0x6c>
 8019d38:	f012 0f03 	tst.w	r2, #3
 8019d3c:	d102      	bne.n	8019d44 <gmtime_r+0x120>
 8019d3e:	fb06 2515 	mls	r5, r6, r5, r2
 8019d42:	b95d      	cbnz	r5, 8019d5c <gmtime_r+0x138>
 8019d44:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8019d48:	fbb2 f6f5 	udiv	r6, r2, r5
 8019d4c:	fb05 2216 	mls	r2, r5, r6, r2
 8019d50:	fab2 f282 	clz	r2, r2
 8019d54:	0952      	lsrs	r2, r2, #5
 8019d56:	333b      	adds	r3, #59	@ 0x3b
 8019d58:	4413      	add	r3, r2
 8019d5a:	e7dc      	b.n	8019d16 <gmtime_r+0xf2>
 8019d5c:	2201      	movs	r2, #1
 8019d5e:	e7fa      	b.n	8019d56 <gmtime_r+0x132>
 8019d60:	00015180 	.word	0x00015180
 8019d64:	00023ab1 	.word	0x00023ab1
 8019d68:	fffdc54f 	.word	0xfffdc54f
 8019d6c:	00023ab0 	.word	0x00023ab0

08019d70 <localtime_r>:
 8019d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d74:	460c      	mov	r4, r1
 8019d76:	4607      	mov	r7, r0
 8019d78:	f003 fd36 	bl	801d7e8 <__gettzinfo>
 8019d7c:	4621      	mov	r1, r4
 8019d7e:	4605      	mov	r5, r0
 8019d80:	4638      	mov	r0, r7
 8019d82:	f7ff ff4f 	bl	8019c24 <gmtime_r>
 8019d86:	6943      	ldr	r3, [r0, #20]
 8019d88:	0799      	lsls	r1, r3, #30
 8019d8a:	4604      	mov	r4, r0
 8019d8c:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 8019d90:	d106      	bne.n	8019da0 <localtime_r+0x30>
 8019d92:	2264      	movs	r2, #100	@ 0x64
 8019d94:	fb98 f3f2 	sdiv	r3, r8, r2
 8019d98:	fb02 8313 	mls	r3, r2, r3, r8
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d171      	bne.n	8019e84 <localtime_r+0x114>
 8019da0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019da4:	fb98 f3f2 	sdiv	r3, r8, r2
 8019da8:	fb02 8313 	mls	r3, r2, r3, r8
 8019dac:	fab3 f383 	clz	r3, r3
 8019db0:	095b      	lsrs	r3, r3, #5
 8019db2:	425e      	negs	r6, r3
 8019db4:	4b64      	ldr	r3, [pc, #400]	@ (8019f48 <localtime_r+0x1d8>)
 8019db6:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 8019dba:	441e      	add	r6, r3
 8019dbc:	f000 fc24 	bl	801a608 <__tz_lock>
 8019dc0:	f000 fc2e 	bl	801a620 <_tzset_unlocked>
 8019dc4:	4b61      	ldr	r3, [pc, #388]	@ (8019f4c <localtime_r+0x1dc>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d06a      	beq.n	8019ea2 <localtime_r+0x132>
 8019dcc:	686b      	ldr	r3, [r5, #4]
 8019dce:	4543      	cmp	r3, r8
 8019dd0:	d15a      	bne.n	8019e88 <localtime_r+0x118>
 8019dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019dd6:	682f      	ldr	r7, [r5, #0]
 8019dd8:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8019ddc:	2f00      	cmp	r7, #0
 8019dde:	d15b      	bne.n	8019e98 <localtime_r+0x128>
 8019de0:	4282      	cmp	r2, r0
 8019de2:	eb73 0101 	sbcs.w	r1, r3, r1
 8019de6:	db5e      	blt.n	8019ea6 <localtime_r+0x136>
 8019de8:	2301      	movs	r3, #1
 8019dea:	6223      	str	r3, [r4, #32]
 8019dec:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8019dee:	6861      	ldr	r1, [r4, #4]
 8019df0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8019df4:	fb93 f0f2 	sdiv	r0, r3, r2
 8019df8:	fb02 3310 	mls	r3, r2, r0, r3
 8019dfc:	223c      	movs	r2, #60	@ 0x3c
 8019dfe:	fb93 f5f2 	sdiv	r5, r3, r2
 8019e02:	fb02 3215 	mls	r2, r2, r5, r3
 8019e06:	6823      	ldr	r3, [r4, #0]
 8019e08:	1a9b      	subs	r3, r3, r2
 8019e0a:	68a2      	ldr	r2, [r4, #8]
 8019e0c:	6023      	str	r3, [r4, #0]
 8019e0e:	1b49      	subs	r1, r1, r5
 8019e10:	1a12      	subs	r2, r2, r0
 8019e12:	2b3b      	cmp	r3, #59	@ 0x3b
 8019e14:	6061      	str	r1, [r4, #4]
 8019e16:	60a2      	str	r2, [r4, #8]
 8019e18:	dd51      	ble.n	8019ebe <localtime_r+0x14e>
 8019e1a:	3101      	adds	r1, #1
 8019e1c:	6061      	str	r1, [r4, #4]
 8019e1e:	3b3c      	subs	r3, #60	@ 0x3c
 8019e20:	6023      	str	r3, [r4, #0]
 8019e22:	6863      	ldr	r3, [r4, #4]
 8019e24:	2b3b      	cmp	r3, #59	@ 0x3b
 8019e26:	dd50      	ble.n	8019eca <localtime_r+0x15a>
 8019e28:	3201      	adds	r2, #1
 8019e2a:	60a2      	str	r2, [r4, #8]
 8019e2c:	3b3c      	subs	r3, #60	@ 0x3c
 8019e2e:	6063      	str	r3, [r4, #4]
 8019e30:	68a3      	ldr	r3, [r4, #8]
 8019e32:	2b17      	cmp	r3, #23
 8019e34:	dd4f      	ble.n	8019ed6 <localtime_r+0x166>
 8019e36:	69e2      	ldr	r2, [r4, #28]
 8019e38:	3201      	adds	r2, #1
 8019e3a:	61e2      	str	r2, [r4, #28]
 8019e3c:	69a2      	ldr	r2, [r4, #24]
 8019e3e:	3201      	adds	r2, #1
 8019e40:	2a07      	cmp	r2, #7
 8019e42:	bfa8      	it	ge
 8019e44:	2200      	movge	r2, #0
 8019e46:	61a2      	str	r2, [r4, #24]
 8019e48:	68e2      	ldr	r2, [r4, #12]
 8019e4a:	3b18      	subs	r3, #24
 8019e4c:	3201      	adds	r2, #1
 8019e4e:	60a3      	str	r3, [r4, #8]
 8019e50:	6923      	ldr	r3, [r4, #16]
 8019e52:	60e2      	str	r2, [r4, #12]
 8019e54:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8019e58:	428a      	cmp	r2, r1
 8019e5a:	dd0e      	ble.n	8019e7a <localtime_r+0x10a>
 8019e5c:	2b0b      	cmp	r3, #11
 8019e5e:	eba2 0201 	sub.w	r2, r2, r1
 8019e62:	60e2      	str	r2, [r4, #12]
 8019e64:	f103 0201 	add.w	r2, r3, #1
 8019e68:	bf09      	itett	eq
 8019e6a:	6963      	ldreq	r3, [r4, #20]
 8019e6c:	6122      	strne	r2, [r4, #16]
 8019e6e:	2200      	moveq	r2, #0
 8019e70:	3301      	addeq	r3, #1
 8019e72:	bf02      	ittt	eq
 8019e74:	6122      	streq	r2, [r4, #16]
 8019e76:	6163      	streq	r3, [r4, #20]
 8019e78:	61e2      	streq	r2, [r4, #28]
 8019e7a:	f000 fbcb 	bl	801a614 <__tz_unlock>
 8019e7e:	4620      	mov	r0, r4
 8019e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e84:	2301      	movs	r3, #1
 8019e86:	e794      	b.n	8019db2 <localtime_r+0x42>
 8019e88:	4640      	mov	r0, r8
 8019e8a:	f000 fb09 	bl	801a4a0 <__tzcalc_limits>
 8019e8e:	2800      	cmp	r0, #0
 8019e90:	d19f      	bne.n	8019dd2 <localtime_r+0x62>
 8019e92:	f04f 33ff 	mov.w	r3, #4294967295
 8019e96:	e004      	b.n	8019ea2 <localtime_r+0x132>
 8019e98:	4282      	cmp	r2, r0
 8019e9a:	eb73 0101 	sbcs.w	r1, r3, r1
 8019e9e:	da02      	bge.n	8019ea6 <localtime_r+0x136>
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	6223      	str	r3, [r4, #32]
 8019ea4:	e009      	b.n	8019eba <localtime_r+0x14a>
 8019ea6:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8019eaa:	4282      	cmp	r2, r0
 8019eac:	418b      	sbcs	r3, r1
 8019eae:	bfb4      	ite	lt
 8019eb0:	2301      	movlt	r3, #1
 8019eb2:	2300      	movge	r3, #0
 8019eb4:	6223      	str	r3, [r4, #32]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d198      	bne.n	8019dec <localtime_r+0x7c>
 8019eba:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8019ebc:	e797      	b.n	8019dee <localtime_r+0x7e>
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	daaf      	bge.n	8019e22 <localtime_r+0xb2>
 8019ec2:	3901      	subs	r1, #1
 8019ec4:	6061      	str	r1, [r4, #4]
 8019ec6:	333c      	adds	r3, #60	@ 0x3c
 8019ec8:	e7aa      	b.n	8019e20 <localtime_r+0xb0>
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	dab0      	bge.n	8019e30 <localtime_r+0xc0>
 8019ece:	3a01      	subs	r2, #1
 8019ed0:	60a2      	str	r2, [r4, #8]
 8019ed2:	333c      	adds	r3, #60	@ 0x3c
 8019ed4:	e7ab      	b.n	8019e2e <localtime_r+0xbe>
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	dacf      	bge.n	8019e7a <localtime_r+0x10a>
 8019eda:	69e2      	ldr	r2, [r4, #28]
 8019edc:	3a01      	subs	r2, #1
 8019ede:	61e2      	str	r2, [r4, #28]
 8019ee0:	69a2      	ldr	r2, [r4, #24]
 8019ee2:	3a01      	subs	r2, #1
 8019ee4:	bf48      	it	mi
 8019ee6:	2206      	movmi	r2, #6
 8019ee8:	61a2      	str	r2, [r4, #24]
 8019eea:	68e2      	ldr	r2, [r4, #12]
 8019eec:	3318      	adds	r3, #24
 8019eee:	3a01      	subs	r2, #1
 8019ef0:	60e2      	str	r2, [r4, #12]
 8019ef2:	60a3      	str	r3, [r4, #8]
 8019ef4:	2a00      	cmp	r2, #0
 8019ef6:	d1c0      	bne.n	8019e7a <localtime_r+0x10a>
 8019ef8:	6923      	ldr	r3, [r4, #16]
 8019efa:	3b01      	subs	r3, #1
 8019efc:	d405      	bmi.n	8019f0a <localtime_r+0x19a>
 8019efe:	6123      	str	r3, [r4, #16]
 8019f00:	6923      	ldr	r3, [r4, #16]
 8019f02:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019f06:	60e3      	str	r3, [r4, #12]
 8019f08:	e7b7      	b.n	8019e7a <localtime_r+0x10a>
 8019f0a:	230b      	movs	r3, #11
 8019f0c:	6123      	str	r3, [r4, #16]
 8019f0e:	6963      	ldr	r3, [r4, #20]
 8019f10:	1e5a      	subs	r2, r3, #1
 8019f12:	6162      	str	r2, [r4, #20]
 8019f14:	0792      	lsls	r2, r2, #30
 8019f16:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8019f1a:	d105      	bne.n	8019f28 <localtime_r+0x1b8>
 8019f1c:	2164      	movs	r1, #100	@ 0x64
 8019f1e:	fb93 f2f1 	sdiv	r2, r3, r1
 8019f22:	fb01 3212 	mls	r2, r1, r2, r3
 8019f26:	b962      	cbnz	r2, 8019f42 <localtime_r+0x1d2>
 8019f28:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8019f2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8019f30:	fb02 3311 	mls	r3, r2, r1, r3
 8019f34:	fab3 f383 	clz	r3, r3
 8019f38:	095b      	lsrs	r3, r3, #5
 8019f3a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8019f3e:	61e3      	str	r3, [r4, #28]
 8019f40:	e7de      	b.n	8019f00 <localtime_r+0x190>
 8019f42:	2301      	movs	r3, #1
 8019f44:	e7f9      	b.n	8019f3a <localtime_r+0x1ca>
 8019f46:	bf00      	nop
 8019f48:	08021e24 	.word	0x08021e24
 8019f4c:	20005ef0 	.word	0x20005ef0

08019f50 <validate_structure>:
 8019f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f52:	6801      	ldr	r1, [r0, #0]
 8019f54:	293b      	cmp	r1, #59	@ 0x3b
 8019f56:	4604      	mov	r4, r0
 8019f58:	d911      	bls.n	8019f7e <validate_structure+0x2e>
 8019f5a:	223c      	movs	r2, #60	@ 0x3c
 8019f5c:	4668      	mov	r0, sp
 8019f5e:	f000 ff15 	bl	801ad8c <div>
 8019f62:	9a01      	ldr	r2, [sp, #4]
 8019f64:	6863      	ldr	r3, [r4, #4]
 8019f66:	9900      	ldr	r1, [sp, #0]
 8019f68:	2a00      	cmp	r2, #0
 8019f6a:	440b      	add	r3, r1
 8019f6c:	6063      	str	r3, [r4, #4]
 8019f6e:	bfbb      	ittet	lt
 8019f70:	323c      	addlt	r2, #60	@ 0x3c
 8019f72:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8019f76:	6022      	strge	r2, [r4, #0]
 8019f78:	6022      	strlt	r2, [r4, #0]
 8019f7a:	bfb8      	it	lt
 8019f7c:	6063      	strlt	r3, [r4, #4]
 8019f7e:	6861      	ldr	r1, [r4, #4]
 8019f80:	293b      	cmp	r1, #59	@ 0x3b
 8019f82:	d911      	bls.n	8019fa8 <validate_structure+0x58>
 8019f84:	223c      	movs	r2, #60	@ 0x3c
 8019f86:	4668      	mov	r0, sp
 8019f88:	f000 ff00 	bl	801ad8c <div>
 8019f8c:	9a01      	ldr	r2, [sp, #4]
 8019f8e:	68a3      	ldr	r3, [r4, #8]
 8019f90:	9900      	ldr	r1, [sp, #0]
 8019f92:	2a00      	cmp	r2, #0
 8019f94:	440b      	add	r3, r1
 8019f96:	60a3      	str	r3, [r4, #8]
 8019f98:	bfbb      	ittet	lt
 8019f9a:	323c      	addlt	r2, #60	@ 0x3c
 8019f9c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8019fa0:	6062      	strge	r2, [r4, #4]
 8019fa2:	6062      	strlt	r2, [r4, #4]
 8019fa4:	bfb8      	it	lt
 8019fa6:	60a3      	strlt	r3, [r4, #8]
 8019fa8:	68a1      	ldr	r1, [r4, #8]
 8019faa:	2917      	cmp	r1, #23
 8019fac:	d911      	bls.n	8019fd2 <validate_structure+0x82>
 8019fae:	2218      	movs	r2, #24
 8019fb0:	4668      	mov	r0, sp
 8019fb2:	f000 feeb 	bl	801ad8c <div>
 8019fb6:	9a01      	ldr	r2, [sp, #4]
 8019fb8:	68e3      	ldr	r3, [r4, #12]
 8019fba:	9900      	ldr	r1, [sp, #0]
 8019fbc:	2a00      	cmp	r2, #0
 8019fbe:	440b      	add	r3, r1
 8019fc0:	60e3      	str	r3, [r4, #12]
 8019fc2:	bfbb      	ittet	lt
 8019fc4:	3218      	addlt	r2, #24
 8019fc6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8019fca:	60a2      	strge	r2, [r4, #8]
 8019fcc:	60a2      	strlt	r2, [r4, #8]
 8019fce:	bfb8      	it	lt
 8019fd0:	60e3      	strlt	r3, [r4, #12]
 8019fd2:	6921      	ldr	r1, [r4, #16]
 8019fd4:	290b      	cmp	r1, #11
 8019fd6:	d911      	bls.n	8019ffc <validate_structure+0xac>
 8019fd8:	220c      	movs	r2, #12
 8019fda:	4668      	mov	r0, sp
 8019fdc:	f000 fed6 	bl	801ad8c <div>
 8019fe0:	9a01      	ldr	r2, [sp, #4]
 8019fe2:	6963      	ldr	r3, [r4, #20]
 8019fe4:	9900      	ldr	r1, [sp, #0]
 8019fe6:	2a00      	cmp	r2, #0
 8019fe8:	440b      	add	r3, r1
 8019fea:	6163      	str	r3, [r4, #20]
 8019fec:	bfbb      	ittet	lt
 8019fee:	320c      	addlt	r2, #12
 8019ff0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8019ff4:	6122      	strge	r2, [r4, #16]
 8019ff6:	6122      	strlt	r2, [r4, #16]
 8019ff8:	bfb8      	it	lt
 8019ffa:	6163      	strlt	r3, [r4, #20]
 8019ffc:	6963      	ldr	r3, [r4, #20]
 8019ffe:	079a      	lsls	r2, r3, #30
 801a000:	d11c      	bne.n	801a03c <validate_structure+0xec>
 801a002:	2164      	movs	r1, #100	@ 0x64
 801a004:	fb93 f2f1 	sdiv	r2, r3, r1
 801a008:	fb01 3212 	mls	r2, r1, r2, r3
 801a00c:	b9c2      	cbnz	r2, 801a040 <validate_structure+0xf0>
 801a00e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 801a012:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801a016:	fb93 f1f2 	sdiv	r1, r3, r2
 801a01a:	fb02 3311 	mls	r3, r2, r1, r3
 801a01e:	2b00      	cmp	r3, #0
 801a020:	bf0c      	ite	eq
 801a022:	231d      	moveq	r3, #29
 801a024:	231c      	movne	r3, #28
 801a026:	68e2      	ldr	r2, [r4, #12]
 801a028:	2a00      	cmp	r2, #0
 801a02a:	dc0b      	bgt.n	801a044 <validate_structure+0xf4>
 801a02c:	4d31      	ldr	r5, [pc, #196]	@ (801a0f4 <validate_structure+0x1a4>)
 801a02e:	200b      	movs	r0, #11
 801a030:	2164      	movs	r1, #100	@ 0x64
 801a032:	68e6      	ldr	r6, [r4, #12]
 801a034:	2e00      	cmp	r6, #0
 801a036:	dd30      	ble.n	801a09a <validate_structure+0x14a>
 801a038:	b003      	add	sp, #12
 801a03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a03c:	231c      	movs	r3, #28
 801a03e:	e7f2      	b.n	801a026 <validate_structure+0xd6>
 801a040:	231d      	movs	r3, #29
 801a042:	e7f0      	b.n	801a026 <validate_structure+0xd6>
 801a044:	4d2b      	ldr	r5, [pc, #172]	@ (801a0f4 <validate_structure+0x1a4>)
 801a046:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801a04a:	2a01      	cmp	r2, #1
 801a04c:	bf14      	ite	ne
 801a04e:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 801a052:	4618      	moveq	r0, r3
 801a054:	4281      	cmp	r1, r0
 801a056:	ddef      	ble.n	801a038 <validate_structure+0xe8>
 801a058:	3201      	adds	r2, #1
 801a05a:	1a09      	subs	r1, r1, r0
 801a05c:	2a0c      	cmp	r2, #12
 801a05e:	60e1      	str	r1, [r4, #12]
 801a060:	6122      	str	r2, [r4, #16]
 801a062:	d1f0      	bne.n	801a046 <validate_structure+0xf6>
 801a064:	6963      	ldr	r3, [r4, #20]
 801a066:	2100      	movs	r1, #0
 801a068:	1c5a      	adds	r2, r3, #1
 801a06a:	6121      	str	r1, [r4, #16]
 801a06c:	0791      	lsls	r1, r2, #30
 801a06e:	6162      	str	r2, [r4, #20]
 801a070:	d13c      	bne.n	801a0ec <validate_structure+0x19c>
 801a072:	2164      	movs	r1, #100	@ 0x64
 801a074:	fb92 f0f1 	sdiv	r0, r2, r1
 801a078:	fb01 2210 	mls	r2, r1, r0, r2
 801a07c:	2a00      	cmp	r2, #0
 801a07e:	d137      	bne.n	801a0f0 <validate_structure+0x1a0>
 801a080:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 801a084:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801a088:	fb93 f1f2 	sdiv	r1, r3, r2
 801a08c:	fb02 3311 	mls	r3, r2, r1, r3
 801a090:	2b00      	cmp	r3, #0
 801a092:	bf0c      	ite	eq
 801a094:	231d      	moveq	r3, #29
 801a096:	231c      	movne	r3, #28
 801a098:	e7d5      	b.n	801a046 <validate_structure+0xf6>
 801a09a:	6922      	ldr	r2, [r4, #16]
 801a09c:	3a01      	subs	r2, #1
 801a09e:	6122      	str	r2, [r4, #16]
 801a0a0:	3201      	adds	r2, #1
 801a0a2:	d116      	bne.n	801a0d2 <validate_structure+0x182>
 801a0a4:	6963      	ldr	r3, [r4, #20]
 801a0a6:	1e5a      	subs	r2, r3, #1
 801a0a8:	0797      	lsls	r7, r2, #30
 801a0aa:	e9c4 0204 	strd	r0, r2, [r4, #16]
 801a0ae:	d119      	bne.n	801a0e4 <validate_structure+0x194>
 801a0b0:	fb92 f7f1 	sdiv	r7, r2, r1
 801a0b4:	fb01 2217 	mls	r2, r1, r7, r2
 801a0b8:	b9b2      	cbnz	r2, 801a0e8 <validate_structure+0x198>
 801a0ba:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801a0be:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801a0c2:	fb93 f7f2 	sdiv	r7, r3, r2
 801a0c6:	fb02 3317 	mls	r3, r2, r7, r3
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	bf0c      	ite	eq
 801a0ce:	231d      	moveq	r3, #29
 801a0d0:	231c      	movne	r3, #28
 801a0d2:	6922      	ldr	r2, [r4, #16]
 801a0d4:	2a01      	cmp	r2, #1
 801a0d6:	bf14      	ite	ne
 801a0d8:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 801a0dc:	461a      	moveq	r2, r3
 801a0de:	4432      	add	r2, r6
 801a0e0:	60e2      	str	r2, [r4, #12]
 801a0e2:	e7a6      	b.n	801a032 <validate_structure+0xe2>
 801a0e4:	231c      	movs	r3, #28
 801a0e6:	e7f4      	b.n	801a0d2 <validate_structure+0x182>
 801a0e8:	231d      	movs	r3, #29
 801a0ea:	e7f2      	b.n	801a0d2 <validate_structure+0x182>
 801a0ec:	231c      	movs	r3, #28
 801a0ee:	e7aa      	b.n	801a046 <validate_structure+0xf6>
 801a0f0:	231d      	movs	r3, #29
 801a0f2:	e7a8      	b.n	801a046 <validate_structure+0xf6>
 801a0f4:	08021df4 	.word	0x08021df4

0801a0f8 <mktime>:
 801a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0fc:	b085      	sub	sp, #20
 801a0fe:	4607      	mov	r7, r0
 801a100:	f003 fb72 	bl	801d7e8 <__gettzinfo>
 801a104:	4681      	mov	r9, r0
 801a106:	4638      	mov	r0, r7
 801a108:	f7ff ff22 	bl	8019f50 <validate_structure>
 801a10c:	e9d7 4300 	ldrd	r4, r3, [r7]
 801a110:	223c      	movs	r2, #60	@ 0x3c
 801a112:	fb02 4403 	mla	r4, r2, r3, r4
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	697d      	ldr	r5, [r7, #20]
 801a11a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801a11e:	fb02 4403 	mla	r4, r2, r3, r4
 801a122:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 801a126:	4ac3      	ldr	r2, [pc, #780]	@ (801a434 <mktime+0x33c>)
 801a128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801a12c:	3e01      	subs	r6, #1
 801a12e:	2b01      	cmp	r3, #1
 801a130:	4416      	add	r6, r2
 801a132:	dd11      	ble.n	801a158 <mktime+0x60>
 801a134:	07a9      	lsls	r1, r5, #30
 801a136:	d10f      	bne.n	801a158 <mktime+0x60>
 801a138:	2264      	movs	r2, #100	@ 0x64
 801a13a:	fb95 f3f2 	sdiv	r3, r5, r2
 801a13e:	fb02 5313 	mls	r3, r2, r3, r5
 801a142:	b943      	cbnz	r3, 801a156 <mktime+0x5e>
 801a144:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 801a148:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801a14c:	fb93 f1f2 	sdiv	r1, r3, r2
 801a150:	fb02 3311 	mls	r3, r2, r1, r3
 801a154:	b903      	cbnz	r3, 801a158 <mktime+0x60>
 801a156:	3601      	adds	r6, #1
 801a158:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 801a15c:	3310      	adds	r3, #16
 801a15e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801a162:	4293      	cmp	r3, r2
 801a164:	61fe      	str	r6, [r7, #28]
 801a166:	f200 8170 	bhi.w	801a44a <mktime+0x352>
 801a16a:	2d46      	cmp	r5, #70	@ 0x46
 801a16c:	f340 80b6 	ble.w	801a2dc <mktime+0x1e4>
 801a170:	2346      	movs	r3, #70	@ 0x46
 801a172:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801a176:	2164      	movs	r1, #100	@ 0x64
 801a178:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801a17c:	079a      	lsls	r2, r3, #30
 801a17e:	f040 80a7 	bne.w	801a2d0 <mktime+0x1d8>
 801a182:	fb93 f2f1 	sdiv	r2, r3, r1
 801a186:	fb01 3212 	mls	r2, r1, r2, r3
 801a18a:	2a00      	cmp	r2, #0
 801a18c:	f040 80a3 	bne.w	801a2d6 <mktime+0x1de>
 801a190:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801a194:	fb92 fef0 	sdiv	lr, r2, r0
 801a198:	fb00 221e 	mls	r2, r0, lr, r2
 801a19c:	2a00      	cmp	r2, #0
 801a19e:	bf0c      	ite	eq
 801a1a0:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801a1a4:	4662      	movne	r2, ip
 801a1a6:	3301      	adds	r3, #1
 801a1a8:	429d      	cmp	r5, r3
 801a1aa:	4416      	add	r6, r2
 801a1ac:	d1e6      	bne.n	801a17c <mktime+0x84>
 801a1ae:	4ba2      	ldr	r3, [pc, #648]	@ (801a438 <mktime+0x340>)
 801a1b0:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801a1b4:	fbc6 4803 	smlal	r4, r8, r6, r3
 801a1b8:	f000 fa26 	bl	801a608 <__tz_lock>
 801a1bc:	f000 fa30 	bl	801a620 <_tzset_unlocked>
 801a1c0:	4b9e      	ldr	r3, [pc, #632]	@ (801a43c <mktime+0x344>)
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	f000 8147 	beq.w	801a458 <mktime+0x360>
 801a1ca:	f8d7 a020 	ldr.w	sl, [r7, #32]
 801a1ce:	6978      	ldr	r0, [r7, #20]
 801a1d0:	4653      	mov	r3, sl
 801a1d2:	2b01      	cmp	r3, #1
 801a1d4:	bfa8      	it	ge
 801a1d6:	2301      	movge	r3, #1
 801a1d8:	9301      	str	r3, [sp, #4]
 801a1da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a1de:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801a1e2:	4283      	cmp	r3, r0
 801a1e4:	f040 80bd 	bne.w	801a362 <mktime+0x26a>
 801a1e8:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 801a1ec:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 801a1f0:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 801a1f4:	1a13      	subs	r3, r2, r0
 801a1f6:	9303      	str	r3, [sp, #12]
 801a1f8:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 801a1fc:	9302      	str	r3, [sp, #8]
 801a1fe:	9a02      	ldr	r2, [sp, #8]
 801a200:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801a204:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 801a208:	ebb2 0e03 	subs.w	lr, r2, r3
 801a20c:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 801a210:	4574      	cmp	r4, lr
 801a212:	eb78 0201 	sbcs.w	r2, r8, r1
 801a216:	f280 80c7 	bge.w	801a3a8 <mktime+0x2b0>
 801a21a:	f8d9 2000 	ldr.w	r2, [r9]
 801a21e:	2a00      	cmp	r2, #0
 801a220:	f000 80d0 	beq.w	801a3c4 <mktime+0x2cc>
 801a224:	9a03      	ldr	r2, [sp, #12]
 801a226:	4294      	cmp	r4, r2
 801a228:	eb78 020b 	sbcs.w	r2, r8, fp
 801a22c:	f2c0 8111 	blt.w	801a452 <mktime+0x35a>
 801a230:	4574      	cmp	r4, lr
 801a232:	eb78 0101 	sbcs.w	r1, r8, r1
 801a236:	bfb4      	ite	lt
 801a238:	f04f 0b01 	movlt.w	fp, #1
 801a23c:	f04f 0b00 	movge.w	fp, #0
 801a240:	f1ba 0f00 	cmp.w	sl, #0
 801a244:	f2c0 8094 	blt.w	801a370 <mktime+0x278>
 801a248:	9a01      	ldr	r2, [sp, #4]
 801a24a:	ea82 0a0b 	eor.w	sl, r2, fp
 801a24e:	f1ba 0f01 	cmp.w	sl, #1
 801a252:	f040 808d 	bne.w	801a370 <mktime+0x278>
 801a256:	f1bb 0f00 	cmp.w	fp, #0
 801a25a:	f000 80c2 	beq.w	801a3e2 <mktime+0x2ea>
 801a25e:	1a1b      	subs	r3, r3, r0
 801a260:	683a      	ldr	r2, [r7, #0]
 801a262:	441a      	add	r2, r3
 801a264:	191c      	adds	r4, r3, r4
 801a266:	603a      	str	r2, [r7, #0]
 801a268:	4638      	mov	r0, r7
 801a26a:	68fa      	ldr	r2, [r7, #12]
 801a26c:	9201      	str	r2, [sp, #4]
 801a26e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801a272:	f7ff fe6d 	bl	8019f50 <validate_structure>
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	9a01      	ldr	r2, [sp, #4]
 801a27a:	1a9b      	subs	r3, r3, r2
 801a27c:	d078      	beq.n	801a370 <mktime+0x278>
 801a27e:	2b01      	cmp	r3, #1
 801a280:	f300 80b1 	bgt.w	801a3e6 <mktime+0x2ee>
 801a284:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a288:	bfa8      	it	ge
 801a28a:	469a      	movge	sl, r3
 801a28c:	69fb      	ldr	r3, [r7, #28]
 801a28e:	eb1a 0303 	adds.w	r3, sl, r3
 801a292:	4456      	add	r6, sl
 801a294:	f140 80b0 	bpl.w	801a3f8 <mktime+0x300>
 801a298:	1e6b      	subs	r3, r5, #1
 801a29a:	0799      	lsls	r1, r3, #30
 801a29c:	f040 80a6 	bne.w	801a3ec <mktime+0x2f4>
 801a2a0:	2264      	movs	r2, #100	@ 0x64
 801a2a2:	fb93 f1f2 	sdiv	r1, r3, r2
 801a2a6:	fb02 3311 	mls	r3, r2, r1, r3
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	f040 80a1 	bne.w	801a3f2 <mktime+0x2fa>
 801a2b0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801a2b4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 801a2b8:	fb95 f2f3 	sdiv	r2, r5, r3
 801a2bc:	fb03 5512 	mls	r5, r3, r2, r5
 801a2c0:	2d00      	cmp	r5, #0
 801a2c2:	f240 136d 	movw	r3, #365	@ 0x16d
 801a2c6:	bf18      	it	ne
 801a2c8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 801a2cc:	61fb      	str	r3, [r7, #28]
 801a2ce:	e04f      	b.n	801a370 <mktime+0x278>
 801a2d0:	f240 126d 	movw	r2, #365	@ 0x16d
 801a2d4:	e767      	b.n	801a1a6 <mktime+0xae>
 801a2d6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801a2da:	e764      	b.n	801a1a6 <mktime+0xae>
 801a2dc:	f43f af67 	beq.w	801a1ae <mktime+0xb6>
 801a2e0:	2345      	movs	r3, #69	@ 0x45
 801a2e2:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801a2e6:	2164      	movs	r1, #100	@ 0x64
 801a2e8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801a2ec:	e012      	b.n	801a314 <mktime+0x21c>
 801a2ee:	bb62      	cbnz	r2, 801a34a <mktime+0x252>
 801a2f0:	fb93 f2f1 	sdiv	r2, r3, r1
 801a2f4:	fb01 3212 	mls	r2, r1, r2, r3
 801a2f8:	bb52      	cbnz	r2, 801a350 <mktime+0x258>
 801a2fa:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801a2fe:	fb92 fef0 	sdiv	lr, r2, r0
 801a302:	fb00 221e 	mls	r2, r0, lr, r2
 801a306:	2a00      	cmp	r2, #0
 801a308:	bf0c      	ite	eq
 801a30a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801a30e:	4662      	movne	r2, ip
 801a310:	1ab6      	subs	r6, r6, r2
 801a312:	3b01      	subs	r3, #1
 801a314:	429d      	cmp	r5, r3
 801a316:	f003 0203 	and.w	r2, r3, #3
 801a31a:	dbe8      	blt.n	801a2ee <mktime+0x1f6>
 801a31c:	b9da      	cbnz	r2, 801a356 <mktime+0x25e>
 801a31e:	2264      	movs	r2, #100	@ 0x64
 801a320:	fb95 f3f2 	sdiv	r3, r5, r2
 801a324:	fb02 5313 	mls	r3, r2, r3, r5
 801a328:	b9c3      	cbnz	r3, 801a35c <mktime+0x264>
 801a32a:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 801a32e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801a332:	fb93 f1f2 	sdiv	r1, r3, r2
 801a336:	fb02 3311 	mls	r3, r2, r1, r3
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	f240 136d 	movw	r3, #365	@ 0x16d
 801a340:	bf08      	it	eq
 801a342:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 801a346:	1af6      	subs	r6, r6, r3
 801a348:	e731      	b.n	801a1ae <mktime+0xb6>
 801a34a:	f240 126d 	movw	r2, #365	@ 0x16d
 801a34e:	e7df      	b.n	801a310 <mktime+0x218>
 801a350:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801a354:	e7dc      	b.n	801a310 <mktime+0x218>
 801a356:	f240 136d 	movw	r3, #365	@ 0x16d
 801a35a:	e7f4      	b.n	801a346 <mktime+0x24e>
 801a35c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 801a360:	e7f1      	b.n	801a346 <mktime+0x24e>
 801a362:	f000 f89d 	bl	801a4a0 <__tzcalc_limits>
 801a366:	2800      	cmp	r0, #0
 801a368:	f47f af3e 	bne.w	801a1e8 <mktime+0xf0>
 801a36c:	f8dd b004 	ldr.w	fp, [sp, #4]
 801a370:	f1bb 0f01 	cmp.w	fp, #1
 801a374:	d172      	bne.n	801a45c <mktime+0x364>
 801a376:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 801a37a:	191c      	adds	r4, r3, r4
 801a37c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801a380:	f04f 0b01 	mov.w	fp, #1
 801a384:	f000 f946 	bl	801a614 <__tz_unlock>
 801a388:	3604      	adds	r6, #4
 801a38a:	2307      	movs	r3, #7
 801a38c:	fb96 f3f3 	sdiv	r3, r6, r3
 801a390:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a394:	1af6      	subs	r6, r6, r3
 801a396:	d456      	bmi.n	801a446 <mktime+0x34e>
 801a398:	f8c7 b020 	str.w	fp, [r7, #32]
 801a39c:	61be      	str	r6, [r7, #24]
 801a39e:	4620      	mov	r0, r4
 801a3a0:	4641      	mov	r1, r8
 801a3a2:	b005      	add	sp, #20
 801a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3a8:	9a02      	ldr	r2, [sp, #8]
 801a3aa:	1a12      	subs	r2, r2, r0
 801a3ac:	9202      	str	r2, [sp, #8]
 801a3ae:	ea4f 72e0 	mov.w	r2, r0, asr #31
 801a3b2:	eb6c 0c02 	sbc.w	ip, ip, r2
 801a3b6:	9a02      	ldr	r2, [sp, #8]
 801a3b8:	4294      	cmp	r4, r2
 801a3ba:	eb78 0c0c 	sbcs.w	ip, r8, ip
 801a3be:	f6bf af2c 	bge.w	801a21a <mktime+0x122>
 801a3c2:	e7d3      	b.n	801a36c <mktime+0x274>
 801a3c4:	9a03      	ldr	r2, [sp, #12]
 801a3c6:	4294      	cmp	r4, r2
 801a3c8:	eb78 020b 	sbcs.w	r2, r8, fp
 801a3cc:	f6ff af30 	blt.w	801a230 <mktime+0x138>
 801a3d0:	f1ba 0f00 	cmp.w	sl, #0
 801a3d4:	dbcf      	blt.n	801a376 <mktime+0x27e>
 801a3d6:	f04f 0b01 	mov.w	fp, #1
 801a3da:	e735      	b.n	801a248 <mktime+0x150>
 801a3dc:	f04f 0b00 	mov.w	fp, #0
 801a3e0:	e732      	b.n	801a248 <mktime+0x150>
 801a3e2:	1ac3      	subs	r3, r0, r3
 801a3e4:	e73c      	b.n	801a260 <mktime+0x168>
 801a3e6:	f04f 3aff 	mov.w	sl, #4294967295
 801a3ea:	e74f      	b.n	801a28c <mktime+0x194>
 801a3ec:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 801a3f0:	e76c      	b.n	801a2cc <mktime+0x1d4>
 801a3f2:	f240 136d 	movw	r3, #365	@ 0x16d
 801a3f6:	e769      	b.n	801a2cc <mktime+0x1d4>
 801a3f8:	07aa      	lsls	r2, r5, #30
 801a3fa:	d117      	bne.n	801a42c <mktime+0x334>
 801a3fc:	2164      	movs	r1, #100	@ 0x64
 801a3fe:	fb95 f2f1 	sdiv	r2, r5, r1
 801a402:	fb01 5212 	mls	r2, r1, r2, r5
 801a406:	b9da      	cbnz	r2, 801a440 <mktime+0x348>
 801a408:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801a40c:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 801a410:	fb95 f1f2 	sdiv	r1, r5, r2
 801a414:	fb02 5511 	mls	r5, r2, r1, r5
 801a418:	2d00      	cmp	r5, #0
 801a41a:	f240 126d 	movw	r2, #365	@ 0x16d
 801a41e:	bf08      	it	eq
 801a420:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801a424:	4293      	cmp	r3, r2
 801a426:	bfa8      	it	ge
 801a428:	1a9b      	subge	r3, r3, r2
 801a42a:	e74f      	b.n	801a2cc <mktime+0x1d4>
 801a42c:	f240 126d 	movw	r2, #365	@ 0x16d
 801a430:	e7f8      	b.n	801a424 <mktime+0x32c>
 801a432:	bf00      	nop
 801a434:	08021dc4 	.word	0x08021dc4
 801a438:	00015180 	.word	0x00015180
 801a43c:	20005ef0 	.word	0x20005ef0
 801a440:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801a444:	e7ee      	b.n	801a424 <mktime+0x32c>
 801a446:	3607      	adds	r6, #7
 801a448:	e7a6      	b.n	801a398 <mktime+0x2a0>
 801a44a:	f04f 34ff 	mov.w	r4, #4294967295
 801a44e:	46a0      	mov	r8, r4
 801a450:	e7a5      	b.n	801a39e <mktime+0x2a6>
 801a452:	f1ba 0f00 	cmp.w	sl, #0
 801a456:	dac1      	bge.n	801a3dc <mktime+0x2e4>
 801a458:	f04f 0b00 	mov.w	fp, #0
 801a45c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801a460:	191c      	adds	r4, r3, r4
 801a462:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801a466:	e78d      	b.n	801a384 <mktime+0x28c>

0801a468 <time>:
 801a468:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 801a46a:	4b0c      	ldr	r3, [pc, #48]	@ (801a49c <time+0x34>)
 801a46c:	f04f 36ff 	mov.w	r6, #4294967295
 801a470:	f04f 37ff 	mov.w	r7, #4294967295
 801a474:	4669      	mov	r1, sp
 801a476:	4604      	mov	r4, r0
 801a478:	2200      	movs	r2, #0
 801a47a:	6818      	ldr	r0, [r3, #0]
 801a47c:	e9cd 6700 	strd	r6, r7, [sp]
 801a480:	f000 fb68 	bl	801ab54 <_gettimeofday_r>
 801a484:	2800      	cmp	r0, #0
 801a486:	bfb8      	it	lt
 801a488:	e9cd 6700 	strdlt	r6, r7, [sp]
 801a48c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a490:	b10c      	cbz	r4, 801a496 <time+0x2e>
 801a492:	e9c4 0100 	strd	r0, r1, [r4]
 801a496:	b004      	add	sp, #16
 801a498:	bdd0      	pop	{r4, r6, r7, pc}
 801a49a:	bf00      	nop
 801a49c:	200001c0 	.word	0x200001c0

0801a4a0 <__tzcalc_limits>:
 801a4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4a4:	4604      	mov	r4, r0
 801a4a6:	f003 f99f 	bl	801d7e8 <__gettzinfo>
 801a4aa:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 801a4ae:	429c      	cmp	r4, r3
 801a4b0:	f340 80a3 	ble.w	801a5fa <__tzcalc_limits+0x15a>
 801a4b4:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 801a4b8:	1865      	adds	r5, r4, r1
 801a4ba:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 801a4be:	f240 126d 	movw	r2, #365	@ 0x16d
 801a4c2:	10ad      	asrs	r5, r5, #2
 801a4c4:	fb02 5503 	mla	r5, r2, r3, r5
 801a4c8:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 801a4cc:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 801a4d0:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 801a4d4:	fb93 f3f2 	sdiv	r3, r3, r2
 801a4d8:	441d      	add	r5, r3
 801a4da:	19a3      	adds	r3, r4, r6
 801a4dc:	4e48      	ldr	r6, [pc, #288]	@ (801a600 <__tzcalc_limits+0x160>)
 801a4de:	6044      	str	r4, [r0, #4]
 801a4e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801a4e4:	4601      	mov	r1, r0
 801a4e6:	fbb3 f3f2 	udiv	r3, r3, r2
 801a4ea:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 801a4ee:	441d      	add	r5, r3
 801a4f0:	7a0b      	ldrb	r3, [r1, #8]
 801a4f2:	f8d1 c014 	ldr.w	ip, [r1, #20]
 801a4f6:	2b4a      	cmp	r3, #74	@ 0x4a
 801a4f8:	d138      	bne.n	801a56c <__tzcalc_limits+0xcc>
 801a4fa:	07a2      	lsls	r2, r4, #30
 801a4fc:	eb05 030c 	add.w	r3, r5, ip
 801a500:	d106      	bne.n	801a510 <__tzcalc_limits+0x70>
 801a502:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 801a506:	fb94 f2fe 	sdiv	r2, r4, lr
 801a50a:	fb0e 4212 	mls	r2, lr, r2, r4
 801a50e:	b932      	cbnz	r2, 801a51e <__tzcalc_limits+0x7e>
 801a510:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 801a514:	fb94 f2fe 	sdiv	r2, r4, lr
 801a518:	fb0e 4212 	mls	r2, lr, r2, r4
 801a51c:	bb1a      	cbnz	r2, 801a566 <__tzcalc_limits+0xc6>
 801a51e:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 801a522:	bfd4      	ite	le
 801a524:	f04f 0c00 	movle.w	ip, #0
 801a528:	f04f 0c01 	movgt.w	ip, #1
 801a52c:	4463      	add	r3, ip
 801a52e:	3b01      	subs	r3, #1
 801a530:	698a      	ldr	r2, [r1, #24]
 801a532:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 801a536:	fbc3 2c06 	smlal	r2, ip, r3, r6
 801a53a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801a53c:	18d2      	adds	r2, r2, r3
 801a53e:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 801a542:	e9c1 2308 	strd	r2, r3, [r1, #32]
 801a546:	3128      	adds	r1, #40	@ 0x28
 801a548:	428f      	cmp	r7, r1
 801a54a:	d1d1      	bne.n	801a4f0 <__tzcalc_limits+0x50>
 801a54c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 801a550:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 801a554:	428c      	cmp	r4, r1
 801a556:	4193      	sbcs	r3, r2
 801a558:	bfb4      	ite	lt
 801a55a:	2301      	movlt	r3, #1
 801a55c:	2300      	movge	r3, #0
 801a55e:	6003      	str	r3, [r0, #0]
 801a560:	2001      	movs	r0, #1
 801a562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a566:	f04f 0c00 	mov.w	ip, #0
 801a56a:	e7df      	b.n	801a52c <__tzcalc_limits+0x8c>
 801a56c:	2b44      	cmp	r3, #68	@ 0x44
 801a56e:	d102      	bne.n	801a576 <__tzcalc_limits+0xd6>
 801a570:	eb05 030c 	add.w	r3, r5, ip
 801a574:	e7dc      	b.n	801a530 <__tzcalc_limits+0x90>
 801a576:	07a3      	lsls	r3, r4, #30
 801a578:	d105      	bne.n	801a586 <__tzcalc_limits+0xe6>
 801a57a:	2264      	movs	r2, #100	@ 0x64
 801a57c:	fb94 f3f2 	sdiv	r3, r4, r2
 801a580:	fb02 4313 	mls	r3, r2, r3, r4
 801a584:	bb93      	cbnz	r3, 801a5ec <__tzcalc_limits+0x14c>
 801a586:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801a58a:	fb94 f3f2 	sdiv	r3, r4, r2
 801a58e:	fb02 4313 	mls	r3, r2, r3, r4
 801a592:	fab3 f383 	clz	r3, r3
 801a596:	095b      	lsrs	r3, r3, #5
 801a598:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801a604 <__tzcalc_limits+0x164>
 801a59c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801a5a0:	425b      	negs	r3, r3
 801a5a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801a5a6:	462a      	mov	r2, r5
 801a5a8:	f04f 0800 	mov.w	r8, #0
 801a5ac:	4473      	add	r3, lr
 801a5ae:	f108 0801 	add.w	r8, r8, #1
 801a5b2:	45c1      	cmp	r9, r8
 801a5b4:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 801a5b8:	dc1a      	bgt.n	801a5f0 <__tzcalc_limits+0x150>
 801a5ba:	f102 0804 	add.w	r8, r2, #4
 801a5be:	2307      	movs	r3, #7
 801a5c0:	fb98 f3f3 	sdiv	r3, r8, r3
 801a5c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a5c8:	eba8 0303 	sub.w	r3, r8, r3
 801a5cc:	ebbc 0c03 	subs.w	ip, ip, r3
 801a5d0:	690b      	ldr	r3, [r1, #16]
 801a5d2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a5d6:	bf48      	it	mi
 801a5d8:	f10c 0c07 	addmi.w	ip, ip, #7
 801a5dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a5e0:	449c      	add	ip, r3
 801a5e2:	45f4      	cmp	ip, lr
 801a5e4:	da06      	bge.n	801a5f4 <__tzcalc_limits+0x154>
 801a5e6:	eb02 030c 	add.w	r3, r2, ip
 801a5ea:	e7a1      	b.n	801a530 <__tzcalc_limits+0x90>
 801a5ec:	2301      	movs	r3, #1
 801a5ee:	e7d3      	b.n	801a598 <__tzcalc_limits+0xf8>
 801a5f0:	4472      	add	r2, lr
 801a5f2:	e7dc      	b.n	801a5ae <__tzcalc_limits+0x10e>
 801a5f4:	f1ac 0c07 	sub.w	ip, ip, #7
 801a5f8:	e7f3      	b.n	801a5e2 <__tzcalc_limits+0x142>
 801a5fa:	2000      	movs	r0, #0
 801a5fc:	e7b1      	b.n	801a562 <__tzcalc_limits+0xc2>
 801a5fe:	bf00      	nop
 801a600:	00015180 	.word	0x00015180
 801a604:	08021e20 	.word	0x08021e20

0801a608 <__tz_lock>:
 801a608:	4801      	ldr	r0, [pc, #4]	@ (801a610 <__tz_lock+0x8>)
 801a60a:	f000 bb26 	b.w	801ac5a <__retarget_lock_acquire>
 801a60e:	bf00      	nop
 801a610:	20005ef8 	.word	0x20005ef8

0801a614 <__tz_unlock>:
 801a614:	4801      	ldr	r0, [pc, #4]	@ (801a61c <__tz_unlock+0x8>)
 801a616:	f000 bb22 	b.w	801ac5e <__retarget_lock_release>
 801a61a:	bf00      	nop
 801a61c:	20005ef8 	.word	0x20005ef8

0801a620 <_tzset_unlocked>:
 801a620:	4b01      	ldr	r3, [pc, #4]	@ (801a628 <_tzset_unlocked+0x8>)
 801a622:	6818      	ldr	r0, [r3, #0]
 801a624:	f000 b802 	b.w	801a62c <_tzset_unlocked_r>
 801a628:	200001c0 	.word	0x200001c0

0801a62c <_tzset_unlocked_r>:
 801a62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a630:	b08d      	sub	sp, #52	@ 0x34
 801a632:	4607      	mov	r7, r0
 801a634:	f003 f8d8 	bl	801d7e8 <__gettzinfo>
 801a638:	49bc      	ldr	r1, [pc, #752]	@ (801a92c <_tzset_unlocked_r+0x300>)
 801a63a:	4dbd      	ldr	r5, [pc, #756]	@ (801a930 <_tzset_unlocked_r+0x304>)
 801a63c:	4604      	mov	r4, r0
 801a63e:	4638      	mov	r0, r7
 801a640:	f001 fdc6 	bl	801c1d0 <_getenv_r>
 801a644:	4606      	mov	r6, r0
 801a646:	bb10      	cbnz	r0, 801a68e <_tzset_unlocked_r+0x62>
 801a648:	4bba      	ldr	r3, [pc, #744]	@ (801a934 <_tzset_unlocked_r+0x308>)
 801a64a:	4abb      	ldr	r2, [pc, #748]	@ (801a938 <_tzset_unlocked_r+0x30c>)
 801a64c:	6018      	str	r0, [r3, #0]
 801a64e:	4bbb      	ldr	r3, [pc, #748]	@ (801a93c <_tzset_unlocked_r+0x310>)
 801a650:	62a0      	str	r0, [r4, #40]	@ 0x28
 801a652:	6018      	str	r0, [r3, #0]
 801a654:	4bba      	ldr	r3, [pc, #744]	@ (801a940 <_tzset_unlocked_r+0x314>)
 801a656:	6520      	str	r0, [r4, #80]	@ 0x50
 801a658:	e9c3 2200 	strd	r2, r2, [r3]
 801a65c:	214a      	movs	r1, #74	@ 0x4a
 801a65e:	2200      	movs	r2, #0
 801a660:	2300      	movs	r3, #0
 801a662:	e9c4 0003 	strd	r0, r0, [r4, #12]
 801a666:	e9c4 0005 	strd	r0, r0, [r4, #20]
 801a66a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 801a66e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801a672:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801a676:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801a67a:	6828      	ldr	r0, [r5, #0]
 801a67c:	7221      	strb	r1, [r4, #8]
 801a67e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801a682:	f7fd fb6f 	bl	8017d64 <free>
 801a686:	602e      	str	r6, [r5, #0]
 801a688:	b00d      	add	sp, #52	@ 0x34
 801a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a68e:	6829      	ldr	r1, [r5, #0]
 801a690:	2900      	cmp	r1, #0
 801a692:	f040 808e 	bne.w	801a7b2 <_tzset_unlocked_r+0x186>
 801a696:	6828      	ldr	r0, [r5, #0]
 801a698:	f7fd fb64 	bl	8017d64 <free>
 801a69c:	4630      	mov	r0, r6
 801a69e:	f7e5 fdf7 	bl	8000290 <strlen>
 801a6a2:	1c41      	adds	r1, r0, #1
 801a6a4:	4638      	mov	r0, r7
 801a6a6:	f7fd fb87 	bl	8017db8 <_malloc_r>
 801a6aa:	6028      	str	r0, [r5, #0]
 801a6ac:	2800      	cmp	r0, #0
 801a6ae:	f040 8086 	bne.w	801a7be <_tzset_unlocked_r+0x192>
 801a6b2:	4aa2      	ldr	r2, [pc, #648]	@ (801a93c <_tzset_unlocked_r+0x310>)
 801a6b4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 801a940 <_tzset_unlocked_r+0x314>
 801a6b8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 801a934 <_tzset_unlocked_r+0x308>
 801a6bc:	2300      	movs	r3, #0
 801a6be:	6013      	str	r3, [r2, #0]
 801a6c0:	4aa0      	ldr	r2, [pc, #640]	@ (801a944 <_tzset_unlocked_r+0x318>)
 801a6c2:	f8ca 3000 	str.w	r3, [sl]
 801a6c6:	2000      	movs	r0, #0
 801a6c8:	2100      	movs	r1, #0
 801a6ca:	e9c8 2200 	strd	r2, r2, [r8]
 801a6ce:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801a6d2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801a6d6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801a6da:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 801a6de:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 801a6e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 801a6e6:	224a      	movs	r2, #74	@ 0x4a
 801a6e8:	7222      	strb	r2, [r4, #8]
 801a6ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a6ec:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 801a6f0:	6523      	str	r3, [r4, #80]	@ 0x50
 801a6f2:	7833      	ldrb	r3, [r6, #0]
 801a6f4:	2b3a      	cmp	r3, #58	@ 0x3a
 801a6f6:	bf08      	it	eq
 801a6f8:	3601      	addeq	r6, #1
 801a6fa:	7833      	ldrb	r3, [r6, #0]
 801a6fc:	2b3c      	cmp	r3, #60	@ 0x3c
 801a6fe:	d162      	bne.n	801a7c6 <_tzset_unlocked_r+0x19a>
 801a700:	1c75      	adds	r5, r6, #1
 801a702:	4a91      	ldr	r2, [pc, #580]	@ (801a948 <_tzset_unlocked_r+0x31c>)
 801a704:	4991      	ldr	r1, [pc, #580]	@ (801a94c <_tzset_unlocked_r+0x320>)
 801a706:	ab0a      	add	r3, sp, #40	@ 0x28
 801a708:	4628      	mov	r0, r5
 801a70a:	f7ff f9c5 	bl	8019a98 <siscanf>
 801a70e:	2800      	cmp	r0, #0
 801a710:	ddba      	ble.n	801a688 <_tzset_unlocked_r+0x5c>
 801a712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a714:	1eda      	subs	r2, r3, #3
 801a716:	2a07      	cmp	r2, #7
 801a718:	d8b6      	bhi.n	801a688 <_tzset_unlocked_r+0x5c>
 801a71a:	5ceb      	ldrb	r3, [r5, r3]
 801a71c:	2b3e      	cmp	r3, #62	@ 0x3e
 801a71e:	d1b3      	bne.n	801a688 <_tzset_unlocked_r+0x5c>
 801a720:	3602      	adds	r6, #2
 801a722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a724:	18f5      	adds	r5, r6, r3
 801a726:	5cf3      	ldrb	r3, [r6, r3]
 801a728:	2b2d      	cmp	r3, #45	@ 0x2d
 801a72a:	d15a      	bne.n	801a7e2 <_tzset_unlocked_r+0x1b6>
 801a72c:	3501      	adds	r5, #1
 801a72e:	f04f 39ff 	mov.w	r9, #4294967295
 801a732:	2300      	movs	r3, #0
 801a734:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a738:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a73c:	af08      	add	r7, sp, #32
 801a73e:	ab0a      	add	r3, sp, #40	@ 0x28
 801a740:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801a744:	9303      	str	r3, [sp, #12]
 801a746:	f10d 031e 	add.w	r3, sp, #30
 801a74a:	9300      	str	r3, [sp, #0]
 801a74c:	4980      	ldr	r1, [pc, #512]	@ (801a950 <_tzset_unlocked_r+0x324>)
 801a74e:	ab0a      	add	r3, sp, #40	@ 0x28
 801a750:	aa07      	add	r2, sp, #28
 801a752:	4628      	mov	r0, r5
 801a754:	f7ff f9a0 	bl	8019a98 <siscanf>
 801a758:	2800      	cmp	r0, #0
 801a75a:	dd95      	ble.n	801a688 <_tzset_unlocked_r+0x5c>
 801a75c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801a760:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801a764:	223c      	movs	r2, #60	@ 0x3c
 801a766:	fb02 6603 	mla	r6, r2, r3, r6
 801a76a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801a76e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801a772:	fb02 6603 	mla	r6, r2, r3, r6
 801a776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a778:	fb09 f606 	mul.w	r6, r9, r6
 801a77c:	eb05 0903 	add.w	r9, r5, r3
 801a780:	5ceb      	ldrb	r3, [r5, r3]
 801a782:	2b3c      	cmp	r3, #60	@ 0x3c
 801a784:	f040 80ee 	bne.w	801a964 <_tzset_unlocked_r+0x338>
 801a788:	f109 0501 	add.w	r5, r9, #1
 801a78c:	4a71      	ldr	r2, [pc, #452]	@ (801a954 <_tzset_unlocked_r+0x328>)
 801a78e:	496f      	ldr	r1, [pc, #444]	@ (801a94c <_tzset_unlocked_r+0x320>)
 801a790:	ab0a      	add	r3, sp, #40	@ 0x28
 801a792:	4628      	mov	r0, r5
 801a794:	f7ff f980 	bl	8019a98 <siscanf>
 801a798:	2800      	cmp	r0, #0
 801a79a:	dc28      	bgt.n	801a7ee <_tzset_unlocked_r+0x1c2>
 801a79c:	f899 3001 	ldrb.w	r3, [r9, #1]
 801a7a0:	2b3e      	cmp	r3, #62	@ 0x3e
 801a7a2:	d124      	bne.n	801a7ee <_tzset_unlocked_r+0x1c2>
 801a7a4:	4b68      	ldr	r3, [pc, #416]	@ (801a948 <_tzset_unlocked_r+0x31c>)
 801a7a6:	62a6      	str	r6, [r4, #40]	@ 0x28
 801a7a8:	e9c8 3300 	strd	r3, r3, [r8]
 801a7ac:	f8ca 6000 	str.w	r6, [sl]
 801a7b0:	e76a      	b.n	801a688 <_tzset_unlocked_r+0x5c>
 801a7b2:	f7e5 fd0d 	bl	80001d0 <strcmp>
 801a7b6:	2800      	cmp	r0, #0
 801a7b8:	f47f af6d 	bne.w	801a696 <_tzset_unlocked_r+0x6a>
 801a7bc:	e764      	b.n	801a688 <_tzset_unlocked_r+0x5c>
 801a7be:	4631      	mov	r1, r6
 801a7c0:	f000 fa4f 	bl	801ac62 <strcpy>
 801a7c4:	e775      	b.n	801a6b2 <_tzset_unlocked_r+0x86>
 801a7c6:	4a60      	ldr	r2, [pc, #384]	@ (801a948 <_tzset_unlocked_r+0x31c>)
 801a7c8:	4963      	ldr	r1, [pc, #396]	@ (801a958 <_tzset_unlocked_r+0x32c>)
 801a7ca:	ab0a      	add	r3, sp, #40	@ 0x28
 801a7cc:	4630      	mov	r0, r6
 801a7ce:	f7ff f963 	bl	8019a98 <siscanf>
 801a7d2:	2800      	cmp	r0, #0
 801a7d4:	f77f af58 	ble.w	801a688 <_tzset_unlocked_r+0x5c>
 801a7d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a7da:	3b03      	subs	r3, #3
 801a7dc:	2b07      	cmp	r3, #7
 801a7de:	d9a0      	bls.n	801a722 <_tzset_unlocked_r+0xf6>
 801a7e0:	e752      	b.n	801a688 <_tzset_unlocked_r+0x5c>
 801a7e2:	2b2b      	cmp	r3, #43	@ 0x2b
 801a7e4:	bf08      	it	eq
 801a7e6:	3501      	addeq	r5, #1
 801a7e8:	f04f 0901 	mov.w	r9, #1
 801a7ec:	e7a1      	b.n	801a732 <_tzset_unlocked_r+0x106>
 801a7ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a7f0:	1eda      	subs	r2, r3, #3
 801a7f2:	2a07      	cmp	r2, #7
 801a7f4:	f63f af48 	bhi.w	801a688 <_tzset_unlocked_r+0x5c>
 801a7f8:	5ceb      	ldrb	r3, [r5, r3]
 801a7fa:	2b3e      	cmp	r3, #62	@ 0x3e
 801a7fc:	f47f af44 	bne.w	801a688 <_tzset_unlocked_r+0x5c>
 801a800:	f109 0902 	add.w	r9, r9, #2
 801a804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a806:	eb09 0503 	add.w	r5, r9, r3
 801a80a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a80e:	2b2d      	cmp	r3, #45	@ 0x2d
 801a810:	f040 80b7 	bne.w	801a982 <_tzset_unlocked_r+0x356>
 801a814:	3501      	adds	r5, #1
 801a816:	f04f 39ff 	mov.w	r9, #4294967295
 801a81a:	2300      	movs	r3, #0
 801a81c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a820:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a824:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a828:	930a      	str	r3, [sp, #40]	@ 0x28
 801a82a:	ab0a      	add	r3, sp, #40	@ 0x28
 801a82c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801a830:	9301      	str	r3, [sp, #4]
 801a832:	f10d 031e 	add.w	r3, sp, #30
 801a836:	9300      	str	r3, [sp, #0]
 801a838:	4945      	ldr	r1, [pc, #276]	@ (801a950 <_tzset_unlocked_r+0x324>)
 801a83a:	ab0a      	add	r3, sp, #40	@ 0x28
 801a83c:	aa07      	add	r2, sp, #28
 801a83e:	4628      	mov	r0, r5
 801a840:	f7ff f92a 	bl	8019a98 <siscanf>
 801a844:	2800      	cmp	r0, #0
 801a846:	f300 80a2 	bgt.w	801a98e <_tzset_unlocked_r+0x362>
 801a84a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 801a84e:	9304      	str	r3, [sp, #16]
 801a850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a852:	4627      	mov	r7, r4
 801a854:	441d      	add	r5, r3
 801a856:	f04f 0b00 	mov.w	fp, #0
 801a85a:	782b      	ldrb	r3, [r5, #0]
 801a85c:	2b2c      	cmp	r3, #44	@ 0x2c
 801a85e:	bf08      	it	eq
 801a860:	3501      	addeq	r5, #1
 801a862:	f895 9000 	ldrb.w	r9, [r5]
 801a866:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 801a86a:	f040 80a3 	bne.w	801a9b4 <_tzset_unlocked_r+0x388>
 801a86e:	ab0a      	add	r3, sp, #40	@ 0x28
 801a870:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 801a874:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801a878:	aa09      	add	r2, sp, #36	@ 0x24
 801a87a:	9200      	str	r2, [sp, #0]
 801a87c:	4937      	ldr	r1, [pc, #220]	@ (801a95c <_tzset_unlocked_r+0x330>)
 801a87e:	9303      	str	r3, [sp, #12]
 801a880:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 801a884:	4628      	mov	r0, r5
 801a886:	f7ff f907 	bl	8019a98 <siscanf>
 801a88a:	2803      	cmp	r0, #3
 801a88c:	f47f aefc 	bne.w	801a688 <_tzset_unlocked_r+0x5c>
 801a890:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801a894:	1e4b      	subs	r3, r1, #1
 801a896:	2b0b      	cmp	r3, #11
 801a898:	f63f aef6 	bhi.w	801a688 <_tzset_unlocked_r+0x5c>
 801a89c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801a8a0:	1e53      	subs	r3, r2, #1
 801a8a2:	2b04      	cmp	r3, #4
 801a8a4:	f63f aef0 	bhi.w	801a688 <_tzset_unlocked_r+0x5c>
 801a8a8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801a8ac:	2b06      	cmp	r3, #6
 801a8ae:	f63f aeeb 	bhi.w	801a688 <_tzset_unlocked_r+0x5c>
 801a8b2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801a8b6:	f887 9008 	strb.w	r9, [r7, #8]
 801a8ba:	617b      	str	r3, [r7, #20]
 801a8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a8be:	eb05 0903 	add.w	r9, r5, r3
 801a8c2:	2500      	movs	r5, #0
 801a8c4:	f04f 0302 	mov.w	r3, #2
 801a8c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a8cc:	f8ad 501e 	strh.w	r5, [sp, #30]
 801a8d0:	f8ad 5020 	strh.w	r5, [sp, #32]
 801a8d4:	950a      	str	r5, [sp, #40]	@ 0x28
 801a8d6:	f899 3000 	ldrb.w	r3, [r9]
 801a8da:	2b2f      	cmp	r3, #47	@ 0x2f
 801a8dc:	f040 8096 	bne.w	801aa0c <_tzset_unlocked_r+0x3e0>
 801a8e0:	ab0a      	add	r3, sp, #40	@ 0x28
 801a8e2:	aa08      	add	r2, sp, #32
 801a8e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801a8e8:	f10d 021e 	add.w	r2, sp, #30
 801a8ec:	9200      	str	r2, [sp, #0]
 801a8ee:	491c      	ldr	r1, [pc, #112]	@ (801a960 <_tzset_unlocked_r+0x334>)
 801a8f0:	9303      	str	r3, [sp, #12]
 801a8f2:	aa07      	add	r2, sp, #28
 801a8f4:	4648      	mov	r0, r9
 801a8f6:	f7ff f8cf 	bl	8019a98 <siscanf>
 801a8fa:	42a8      	cmp	r0, r5
 801a8fc:	f300 8086 	bgt.w	801aa0c <_tzset_unlocked_r+0x3e0>
 801a900:	214a      	movs	r1, #74	@ 0x4a
 801a902:	2200      	movs	r2, #0
 801a904:	2300      	movs	r3, #0
 801a906:	e9c4 5503 	strd	r5, r5, [r4, #12]
 801a90a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a90e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801a912:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 801a916:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 801a91a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801a91e:	7221      	strb	r1, [r4, #8]
 801a920:	62a5      	str	r5, [r4, #40]	@ 0x28
 801a922:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801a926:	6525      	str	r5, [r4, #80]	@ 0x50
 801a928:	e6ae      	b.n	801a688 <_tzset_unlocked_r+0x5c>
 801a92a:	bf00      	nop
 801a92c:	08021a7c 	.word	0x08021a7c
 801a930:	20005ed0 	.word	0x20005ed0
 801a934:	20005eec 	.word	0x20005eec
 801a938:	08021a7f 	.word	0x08021a7f
 801a93c:	20005ef0 	.word	0x20005ef0
 801a940:	2000004c 	.word	0x2000004c
 801a944:	08021b0d 	.word	0x08021b0d
 801a948:	20005ee0 	.word	0x20005ee0
 801a94c:	08021a83 	.word	0x08021a83
 801a950:	08021ab8 	.word	0x08021ab8
 801a954:	20005ed4 	.word	0x20005ed4
 801a958:	08021a96 	.word	0x08021a96
 801a95c:	08021aa4 	.word	0x08021aa4
 801a960:	08021ab7 	.word	0x08021ab7
 801a964:	4a3e      	ldr	r2, [pc, #248]	@ (801aa60 <_tzset_unlocked_r+0x434>)
 801a966:	493f      	ldr	r1, [pc, #252]	@ (801aa64 <_tzset_unlocked_r+0x438>)
 801a968:	ab0a      	add	r3, sp, #40	@ 0x28
 801a96a:	4648      	mov	r0, r9
 801a96c:	f7ff f894 	bl	8019a98 <siscanf>
 801a970:	2800      	cmp	r0, #0
 801a972:	f77f af17 	ble.w	801a7a4 <_tzset_unlocked_r+0x178>
 801a976:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a978:	3b03      	subs	r3, #3
 801a97a:	2b07      	cmp	r3, #7
 801a97c:	f67f af42 	bls.w	801a804 <_tzset_unlocked_r+0x1d8>
 801a980:	e682      	b.n	801a688 <_tzset_unlocked_r+0x5c>
 801a982:	2b2b      	cmp	r3, #43	@ 0x2b
 801a984:	bf08      	it	eq
 801a986:	3501      	addeq	r5, #1
 801a988:	f04f 0901 	mov.w	r9, #1
 801a98c:	e745      	b.n	801a81a <_tzset_unlocked_r+0x1ee>
 801a98e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a992:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a996:	213c      	movs	r1, #60	@ 0x3c
 801a998:	fb01 3302 	mla	r3, r1, r2, r3
 801a99c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801a9a0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801a9a4:	fb01 3302 	mla	r3, r1, r2, r3
 801a9a8:	fb09 f303 	mul.w	r3, r9, r3
 801a9ac:	e74f      	b.n	801a84e <_tzset_unlocked_r+0x222>
 801a9ae:	f04f 0b01 	mov.w	fp, #1
 801a9b2:	e752      	b.n	801a85a <_tzset_unlocked_r+0x22e>
 801a9b4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 801a9b8:	bf06      	itte	eq
 801a9ba:	3501      	addeq	r5, #1
 801a9bc:	464b      	moveq	r3, r9
 801a9be:	2344      	movne	r3, #68	@ 0x44
 801a9c0:	220a      	movs	r2, #10
 801a9c2:	a90b      	add	r1, sp, #44	@ 0x2c
 801a9c4:	4628      	mov	r0, r5
 801a9c6:	9305      	str	r3, [sp, #20]
 801a9c8:	f002 f936 	bl	801cc38 <strtoul>
 801a9cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 801a9d0:	9b05      	ldr	r3, [sp, #20]
 801a9d2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 801a9d6:	45a9      	cmp	r9, r5
 801a9d8:	d114      	bne.n	801aa04 <_tzset_unlocked_r+0x3d8>
 801a9da:	234d      	movs	r3, #77	@ 0x4d
 801a9dc:	f1bb 0f00 	cmp.w	fp, #0
 801a9e0:	d107      	bne.n	801a9f2 <_tzset_unlocked_r+0x3c6>
 801a9e2:	7223      	strb	r3, [r4, #8]
 801a9e4:	2103      	movs	r1, #3
 801a9e6:	2302      	movs	r3, #2
 801a9e8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 801a9ec:	f8c4 b014 	str.w	fp, [r4, #20]
 801a9f0:	e767      	b.n	801a8c2 <_tzset_unlocked_r+0x296>
 801a9f2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 801a9f6:	220b      	movs	r2, #11
 801a9f8:	2301      	movs	r3, #1
 801a9fa:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 801a9fe:	2300      	movs	r3, #0
 801aa00:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801aa02:	e75e      	b.n	801a8c2 <_tzset_unlocked_r+0x296>
 801aa04:	b280      	uxth	r0, r0
 801aa06:	723b      	strb	r3, [r7, #8]
 801aa08:	6178      	str	r0, [r7, #20]
 801aa0a:	e75a      	b.n	801a8c2 <_tzset_unlocked_r+0x296>
 801aa0c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801aa10:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801aa14:	213c      	movs	r1, #60	@ 0x3c
 801aa16:	fb01 3302 	mla	r3, r1, r2, r3
 801aa1a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801aa1e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801aa22:	fb01 3302 	mla	r3, r1, r2, r3
 801aa26:	61bb      	str	r3, [r7, #24]
 801aa28:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801aa2a:	3728      	adds	r7, #40	@ 0x28
 801aa2c:	444d      	add	r5, r9
 801aa2e:	f1bb 0f00 	cmp.w	fp, #0
 801aa32:	d0bc      	beq.n	801a9ae <_tzset_unlocked_r+0x382>
 801aa34:	9b04      	ldr	r3, [sp, #16]
 801aa36:	6523      	str	r3, [r4, #80]	@ 0x50
 801aa38:	4b0b      	ldr	r3, [pc, #44]	@ (801aa68 <_tzset_unlocked_r+0x43c>)
 801aa3a:	f8c8 3000 	str.w	r3, [r8]
 801aa3e:	6860      	ldr	r0, [r4, #4]
 801aa40:	4b07      	ldr	r3, [pc, #28]	@ (801aa60 <_tzset_unlocked_r+0x434>)
 801aa42:	62a6      	str	r6, [r4, #40]	@ 0x28
 801aa44:	f8c8 3004 	str.w	r3, [r8, #4]
 801aa48:	f7ff fd2a 	bl	801a4a0 <__tzcalc_limits>
 801aa4c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801aa4e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801aa50:	f8ca 2000 	str.w	r2, [sl]
 801aa54:	1a9b      	subs	r3, r3, r2
 801aa56:	4a05      	ldr	r2, [pc, #20]	@ (801aa6c <_tzset_unlocked_r+0x440>)
 801aa58:	bf18      	it	ne
 801aa5a:	2301      	movne	r3, #1
 801aa5c:	6013      	str	r3, [r2, #0]
 801aa5e:	e613      	b.n	801a688 <_tzset_unlocked_r+0x5c>
 801aa60:	20005ed4 	.word	0x20005ed4
 801aa64:	08021a96 	.word	0x08021a96
 801aa68:	20005ee0 	.word	0x20005ee0
 801aa6c:	20005ef0 	.word	0x20005ef0

0801aa70 <_localeconv_r>:
 801aa70:	4800      	ldr	r0, [pc, #0]	@ (801aa74 <_localeconv_r+0x4>)
 801aa72:	4770      	bx	lr
 801aa74:	20000144 	.word	0x20000144

0801aa78 <_close_r>:
 801aa78:	b538      	push	{r3, r4, r5, lr}
 801aa7a:	4d06      	ldr	r5, [pc, #24]	@ (801aa94 <_close_r+0x1c>)
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	4604      	mov	r4, r0
 801aa80:	4608      	mov	r0, r1
 801aa82:	602b      	str	r3, [r5, #0]
 801aa84:	f7e7 fd68 	bl	8002558 <_close>
 801aa88:	1c43      	adds	r3, r0, #1
 801aa8a:	d102      	bne.n	801aa92 <_close_r+0x1a>
 801aa8c:	682b      	ldr	r3, [r5, #0]
 801aa8e:	b103      	cbz	r3, 801aa92 <_close_r+0x1a>
 801aa90:	6023      	str	r3, [r4, #0]
 801aa92:	bd38      	pop	{r3, r4, r5, pc}
 801aa94:	20005ef4 	.word	0x20005ef4

0801aa98 <_reclaim_reent>:
 801aa98:	4b2d      	ldr	r3, [pc, #180]	@ (801ab50 <_reclaim_reent+0xb8>)
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	4283      	cmp	r3, r0
 801aa9e:	b570      	push	{r4, r5, r6, lr}
 801aaa0:	4604      	mov	r4, r0
 801aaa2:	d053      	beq.n	801ab4c <_reclaim_reent+0xb4>
 801aaa4:	69c3      	ldr	r3, [r0, #28]
 801aaa6:	b31b      	cbz	r3, 801aaf0 <_reclaim_reent+0x58>
 801aaa8:	68db      	ldr	r3, [r3, #12]
 801aaaa:	b163      	cbz	r3, 801aac6 <_reclaim_reent+0x2e>
 801aaac:	2500      	movs	r5, #0
 801aaae:	69e3      	ldr	r3, [r4, #28]
 801aab0:	68db      	ldr	r3, [r3, #12]
 801aab2:	5959      	ldr	r1, [r3, r5]
 801aab4:	b9b1      	cbnz	r1, 801aae4 <_reclaim_reent+0x4c>
 801aab6:	3504      	adds	r5, #4
 801aab8:	2d80      	cmp	r5, #128	@ 0x80
 801aaba:	d1f8      	bne.n	801aaae <_reclaim_reent+0x16>
 801aabc:	69e3      	ldr	r3, [r4, #28]
 801aabe:	4620      	mov	r0, r4
 801aac0:	68d9      	ldr	r1, [r3, #12]
 801aac2:	f000 ffc5 	bl	801ba50 <_free_r>
 801aac6:	69e3      	ldr	r3, [r4, #28]
 801aac8:	6819      	ldr	r1, [r3, #0]
 801aaca:	b111      	cbz	r1, 801aad2 <_reclaim_reent+0x3a>
 801aacc:	4620      	mov	r0, r4
 801aace:	f000 ffbf 	bl	801ba50 <_free_r>
 801aad2:	69e3      	ldr	r3, [r4, #28]
 801aad4:	689d      	ldr	r5, [r3, #8]
 801aad6:	b15d      	cbz	r5, 801aaf0 <_reclaim_reent+0x58>
 801aad8:	4629      	mov	r1, r5
 801aada:	4620      	mov	r0, r4
 801aadc:	682d      	ldr	r5, [r5, #0]
 801aade:	f000 ffb7 	bl	801ba50 <_free_r>
 801aae2:	e7f8      	b.n	801aad6 <_reclaim_reent+0x3e>
 801aae4:	680e      	ldr	r6, [r1, #0]
 801aae6:	4620      	mov	r0, r4
 801aae8:	f000 ffb2 	bl	801ba50 <_free_r>
 801aaec:	4631      	mov	r1, r6
 801aaee:	e7e1      	b.n	801aab4 <_reclaim_reent+0x1c>
 801aaf0:	6961      	ldr	r1, [r4, #20]
 801aaf2:	b111      	cbz	r1, 801aafa <_reclaim_reent+0x62>
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	f000 ffab 	bl	801ba50 <_free_r>
 801aafa:	69e1      	ldr	r1, [r4, #28]
 801aafc:	b111      	cbz	r1, 801ab04 <_reclaim_reent+0x6c>
 801aafe:	4620      	mov	r0, r4
 801ab00:	f000 ffa6 	bl	801ba50 <_free_r>
 801ab04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ab06:	b111      	cbz	r1, 801ab0e <_reclaim_reent+0x76>
 801ab08:	4620      	mov	r0, r4
 801ab0a:	f000 ffa1 	bl	801ba50 <_free_r>
 801ab0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ab10:	b111      	cbz	r1, 801ab18 <_reclaim_reent+0x80>
 801ab12:	4620      	mov	r0, r4
 801ab14:	f000 ff9c 	bl	801ba50 <_free_r>
 801ab18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801ab1a:	b111      	cbz	r1, 801ab22 <_reclaim_reent+0x8a>
 801ab1c:	4620      	mov	r0, r4
 801ab1e:	f000 ff97 	bl	801ba50 <_free_r>
 801ab22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801ab24:	b111      	cbz	r1, 801ab2c <_reclaim_reent+0x94>
 801ab26:	4620      	mov	r0, r4
 801ab28:	f000 ff92 	bl	801ba50 <_free_r>
 801ab2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801ab2e:	b111      	cbz	r1, 801ab36 <_reclaim_reent+0x9e>
 801ab30:	4620      	mov	r0, r4
 801ab32:	f000 ff8d 	bl	801ba50 <_free_r>
 801ab36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ab38:	b111      	cbz	r1, 801ab40 <_reclaim_reent+0xa8>
 801ab3a:	4620      	mov	r0, r4
 801ab3c:	f000 ff88 	bl	801ba50 <_free_r>
 801ab40:	6a23      	ldr	r3, [r4, #32]
 801ab42:	b11b      	cbz	r3, 801ab4c <_reclaim_reent+0xb4>
 801ab44:	4620      	mov	r0, r4
 801ab46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab4a:	4718      	bx	r3
 801ab4c:	bd70      	pop	{r4, r5, r6, pc}
 801ab4e:	bf00      	nop
 801ab50:	200001c0 	.word	0x200001c0

0801ab54 <_gettimeofday_r>:
 801ab54:	b538      	push	{r3, r4, r5, lr}
 801ab56:	4d07      	ldr	r5, [pc, #28]	@ (801ab74 <_gettimeofday_r+0x20>)
 801ab58:	2300      	movs	r3, #0
 801ab5a:	4604      	mov	r4, r0
 801ab5c:	4608      	mov	r0, r1
 801ab5e:	4611      	mov	r1, r2
 801ab60:	602b      	str	r3, [r5, #0]
 801ab62:	f7e6 fe5b 	bl	800181c <_gettimeofday>
 801ab66:	1c43      	adds	r3, r0, #1
 801ab68:	d102      	bne.n	801ab70 <_gettimeofday_r+0x1c>
 801ab6a:	682b      	ldr	r3, [r5, #0]
 801ab6c:	b103      	cbz	r3, 801ab70 <_gettimeofday_r+0x1c>
 801ab6e:	6023      	str	r3, [r4, #0]
 801ab70:	bd38      	pop	{r3, r4, r5, pc}
 801ab72:	bf00      	nop
 801ab74:	20005ef4 	.word	0x20005ef4

0801ab78 <_lseek_r>:
 801ab78:	b538      	push	{r3, r4, r5, lr}
 801ab7a:	4d07      	ldr	r5, [pc, #28]	@ (801ab98 <_lseek_r+0x20>)
 801ab7c:	4604      	mov	r4, r0
 801ab7e:	4608      	mov	r0, r1
 801ab80:	4611      	mov	r1, r2
 801ab82:	2200      	movs	r2, #0
 801ab84:	602a      	str	r2, [r5, #0]
 801ab86:	461a      	mov	r2, r3
 801ab88:	f7e7 fd0d 	bl	80025a6 <_lseek>
 801ab8c:	1c43      	adds	r3, r0, #1
 801ab8e:	d102      	bne.n	801ab96 <_lseek_r+0x1e>
 801ab90:	682b      	ldr	r3, [r5, #0]
 801ab92:	b103      	cbz	r3, 801ab96 <_lseek_r+0x1e>
 801ab94:	6023      	str	r3, [r4, #0]
 801ab96:	bd38      	pop	{r3, r4, r5, pc}
 801ab98:	20005ef4 	.word	0x20005ef4

0801ab9c <_read_r>:
 801ab9c:	b538      	push	{r3, r4, r5, lr}
 801ab9e:	4d07      	ldr	r5, [pc, #28]	@ (801abbc <_read_r+0x20>)
 801aba0:	4604      	mov	r4, r0
 801aba2:	4608      	mov	r0, r1
 801aba4:	4611      	mov	r1, r2
 801aba6:	2200      	movs	r2, #0
 801aba8:	602a      	str	r2, [r5, #0]
 801abaa:	461a      	mov	r2, r3
 801abac:	f7e7 fc9b 	bl	80024e6 <_read>
 801abb0:	1c43      	adds	r3, r0, #1
 801abb2:	d102      	bne.n	801abba <_read_r+0x1e>
 801abb4:	682b      	ldr	r3, [r5, #0]
 801abb6:	b103      	cbz	r3, 801abba <_read_r+0x1e>
 801abb8:	6023      	str	r3, [r4, #0]
 801abba:	bd38      	pop	{r3, r4, r5, pc}
 801abbc:	20005ef4 	.word	0x20005ef4

0801abc0 <_sbrk_r>:
 801abc0:	b538      	push	{r3, r4, r5, lr}
 801abc2:	4d06      	ldr	r5, [pc, #24]	@ (801abdc <_sbrk_r+0x1c>)
 801abc4:	2300      	movs	r3, #0
 801abc6:	4604      	mov	r4, r0
 801abc8:	4608      	mov	r0, r1
 801abca:	602b      	str	r3, [r5, #0]
 801abcc:	f7e7 fcf8 	bl	80025c0 <_sbrk>
 801abd0:	1c43      	adds	r3, r0, #1
 801abd2:	d102      	bne.n	801abda <_sbrk_r+0x1a>
 801abd4:	682b      	ldr	r3, [r5, #0]
 801abd6:	b103      	cbz	r3, 801abda <_sbrk_r+0x1a>
 801abd8:	6023      	str	r3, [r4, #0]
 801abda:	bd38      	pop	{r3, r4, r5, pc}
 801abdc:	20005ef4 	.word	0x20005ef4

0801abe0 <_write_r>:
 801abe0:	b538      	push	{r3, r4, r5, lr}
 801abe2:	4d07      	ldr	r5, [pc, #28]	@ (801ac00 <_write_r+0x20>)
 801abe4:	4604      	mov	r4, r0
 801abe6:	4608      	mov	r0, r1
 801abe8:	4611      	mov	r1, r2
 801abea:	2200      	movs	r2, #0
 801abec:	602a      	str	r2, [r5, #0]
 801abee:	461a      	mov	r2, r3
 801abf0:	f7e7 fc96 	bl	8002520 <_write>
 801abf4:	1c43      	adds	r3, r0, #1
 801abf6:	d102      	bne.n	801abfe <_write_r+0x1e>
 801abf8:	682b      	ldr	r3, [r5, #0]
 801abfa:	b103      	cbz	r3, 801abfe <_write_r+0x1e>
 801abfc:	6023      	str	r3, [r4, #0]
 801abfe:	bd38      	pop	{r3, r4, r5, pc}
 801ac00:	20005ef4 	.word	0x20005ef4

0801ac04 <__errno>:
 801ac04:	4b01      	ldr	r3, [pc, #4]	@ (801ac0c <__errno+0x8>)
 801ac06:	6818      	ldr	r0, [r3, #0]
 801ac08:	4770      	bx	lr
 801ac0a:	bf00      	nop
 801ac0c:	200001c0 	.word	0x200001c0

0801ac10 <__libc_init_array>:
 801ac10:	b570      	push	{r4, r5, r6, lr}
 801ac12:	4d0d      	ldr	r5, [pc, #52]	@ (801ac48 <__libc_init_array+0x38>)
 801ac14:	4c0d      	ldr	r4, [pc, #52]	@ (801ac4c <__libc_init_array+0x3c>)
 801ac16:	1b64      	subs	r4, r4, r5
 801ac18:	10a4      	asrs	r4, r4, #2
 801ac1a:	2600      	movs	r6, #0
 801ac1c:	42a6      	cmp	r6, r4
 801ac1e:	d109      	bne.n	801ac34 <__libc_init_array+0x24>
 801ac20:	4d0b      	ldr	r5, [pc, #44]	@ (801ac50 <__libc_init_array+0x40>)
 801ac22:	4c0c      	ldr	r4, [pc, #48]	@ (801ac54 <__libc_init_array+0x44>)
 801ac24:	f006 fca4 	bl	8021570 <_init>
 801ac28:	1b64      	subs	r4, r4, r5
 801ac2a:	10a4      	asrs	r4, r4, #2
 801ac2c:	2600      	movs	r6, #0
 801ac2e:	42a6      	cmp	r6, r4
 801ac30:	d105      	bne.n	801ac3e <__libc_init_array+0x2e>
 801ac32:	bd70      	pop	{r4, r5, r6, pc}
 801ac34:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac38:	4798      	blx	r3
 801ac3a:	3601      	adds	r6, #1
 801ac3c:	e7ee      	b.n	801ac1c <__libc_init_array+0xc>
 801ac3e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac42:	4798      	blx	r3
 801ac44:	3601      	adds	r6, #1
 801ac46:	e7f2      	b.n	801ac2e <__libc_init_array+0x1e>
 801ac48:	08022250 	.word	0x08022250
 801ac4c:	08022250 	.word	0x08022250
 801ac50:	08022250 	.word	0x08022250
 801ac54:	08022254 	.word	0x08022254

0801ac58 <__retarget_lock_init_recursive>:
 801ac58:	4770      	bx	lr

0801ac5a <__retarget_lock_acquire>:
 801ac5a:	4770      	bx	lr

0801ac5c <__retarget_lock_acquire_recursive>:
 801ac5c:	4770      	bx	lr

0801ac5e <__retarget_lock_release>:
 801ac5e:	4770      	bx	lr

0801ac60 <__retarget_lock_release_recursive>:
 801ac60:	4770      	bx	lr

0801ac62 <strcpy>:
 801ac62:	4603      	mov	r3, r0
 801ac64:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac68:	f803 2b01 	strb.w	r2, [r3], #1
 801ac6c:	2a00      	cmp	r2, #0
 801ac6e:	d1f9      	bne.n	801ac64 <strcpy+0x2>
 801ac70:	4770      	bx	lr

0801ac72 <memcpy>:
 801ac72:	440a      	add	r2, r1
 801ac74:	4291      	cmp	r1, r2
 801ac76:	f100 33ff 	add.w	r3, r0, #4294967295
 801ac7a:	d100      	bne.n	801ac7e <memcpy+0xc>
 801ac7c:	4770      	bx	lr
 801ac7e:	b510      	push	{r4, lr}
 801ac80:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac84:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ac88:	4291      	cmp	r1, r2
 801ac8a:	d1f9      	bne.n	801ac80 <memcpy+0xe>
 801ac8c:	bd10      	pop	{r4, pc}
	...

0801ac90 <nan>:
 801ac90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ac98 <nan+0x8>
 801ac94:	4770      	bx	lr
 801ac96:	bf00      	nop
 801ac98:	00000000 	.word	0x00000000
 801ac9c:	7ff80000 	.word	0x7ff80000

0801aca0 <nanf>:
 801aca0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801aca8 <nanf+0x8>
 801aca4:	4770      	bx	lr
 801aca6:	bf00      	nop
 801aca8:	7fc00000 	.word	0x7fc00000

0801acac <modf>:
 801acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acae:	ec55 4b10 	vmov	r4, r5, d0
 801acb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801acb6:	f2a3 32ff 	subw	r2, r3, #1023	@ 0x3ff
 801acba:	2a13      	cmp	r2, #19
 801acbc:	4606      	mov	r6, r0
 801acbe:	462f      	mov	r7, r5
 801acc0:	dc21      	bgt.n	801ad06 <modf+0x5a>
 801acc2:	2a00      	cmp	r2, #0
 801acc4:	da07      	bge.n	801acd6 <modf+0x2a>
 801acc6:	2200      	movs	r2, #0
 801acc8:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 801accc:	e9c0 2300 	strd	r2, r3, [r0]
 801acd0:	ec45 4b10 	vmov	d0, r4, r5
 801acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acd6:	481d      	ldr	r0, [pc, #116]	@ (801ad4c <modf+0xa0>)
 801acd8:	4110      	asrs	r0, r2
 801acda:	ea05 0300 	and.w	r3, r5, r0
 801acde:	4323      	orrs	r3, r4
 801ace0:	d105      	bne.n	801acee <modf+0x42>
 801ace2:	e9c6 4500 	strd	r4, r5, [r6]
 801ace6:	f007 4500 	and.w	r5, r7, #2147483648	@ 0x80000000
 801acea:	461c      	mov	r4, r3
 801acec:	e7f0      	b.n	801acd0 <modf+0x24>
 801acee:	2200      	movs	r2, #0
 801acf0:	ea25 0300 	bic.w	r3, r5, r0
 801acf4:	4620      	mov	r0, r4
 801acf6:	4629      	mov	r1, r5
 801acf8:	e9c6 2300 	strd	r2, r3, [r6]
 801acfc:	f7e5 fad4 	bl	80002a8 <__aeabi_dsub>
 801ad00:	4604      	mov	r4, r0
 801ad02:	460d      	mov	r5, r1
 801ad04:	e7e4      	b.n	801acd0 <modf+0x24>
 801ad06:	2a33      	cmp	r2, #51	@ 0x33
 801ad08:	dd13      	ble.n	801ad32 <modf+0x86>
 801ad0a:	ed86 0b00 	vstr	d0, [r6]
 801ad0e:	f002 fd6f 	bl	801d7f0 <__fpclassifyd>
 801ad12:	b950      	cbnz	r0, 801ad2a <modf+0x7e>
 801ad14:	4622      	mov	r2, r4
 801ad16:	462b      	mov	r3, r5
 801ad18:	4620      	mov	r0, r4
 801ad1a:	4629      	mov	r1, r5
 801ad1c:	f7e5 fac6 	bl	80002ac <__adddf3>
 801ad20:	4604      	mov	r4, r0
 801ad22:	460d      	mov	r5, r1
 801ad24:	e9c6 4500 	strd	r4, r5, [r6]
 801ad28:	e7d2      	b.n	801acd0 <modf+0x24>
 801ad2a:	2400      	movs	r4, #0
 801ad2c:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 801ad30:	e7ce      	b.n	801acd0 <modf+0x24>
 801ad32:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801ad36:	f04f 30ff 	mov.w	r0, #4294967295
 801ad3a:	40d8      	lsrs	r0, r3
 801ad3c:	ea14 0300 	ands.w	r3, r4, r0
 801ad40:	d0cf      	beq.n	801ace2 <modf+0x36>
 801ad42:	462b      	mov	r3, r5
 801ad44:	ea24 0200 	bic.w	r2, r4, r0
 801ad48:	e7d4      	b.n	801acf4 <modf+0x48>
 801ad4a:	bf00      	nop
 801ad4c:	000fffff 	.word	0x000fffff

0801ad50 <__assert_func>:
 801ad50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ad52:	4614      	mov	r4, r2
 801ad54:	461a      	mov	r2, r3
 801ad56:	4b09      	ldr	r3, [pc, #36]	@ (801ad7c <__assert_func+0x2c>)
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	4605      	mov	r5, r0
 801ad5c:	68d8      	ldr	r0, [r3, #12]
 801ad5e:	b14c      	cbz	r4, 801ad74 <__assert_func+0x24>
 801ad60:	4b07      	ldr	r3, [pc, #28]	@ (801ad80 <__assert_func+0x30>)
 801ad62:	9100      	str	r1, [sp, #0]
 801ad64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ad68:	4906      	ldr	r1, [pc, #24]	@ (801ad84 <__assert_func+0x34>)
 801ad6a:	462b      	mov	r3, r5
 801ad6c:	f002 fc9c 	bl	801d6a8 <fiprintf>
 801ad70:	f002 fd62 	bl	801d838 <abort>
 801ad74:	4b04      	ldr	r3, [pc, #16]	@ (801ad88 <__assert_func+0x38>)
 801ad76:	461c      	mov	r4, r3
 801ad78:	e7f3      	b.n	801ad62 <__assert_func+0x12>
 801ad7a:	bf00      	nop
 801ad7c:	200001c0 	.word	0x200001c0
 801ad80:	08021ad2 	.word	0x08021ad2
 801ad84:	08021adf 	.word	0x08021adf
 801ad88:	08021b0d 	.word	0x08021b0d

0801ad8c <div>:
 801ad8c:	b510      	push	{r4, lr}
 801ad8e:	fb91 f4f2 	sdiv	r4, r1, r2
 801ad92:	fb02 1114 	mls	r1, r2, r4, r1
 801ad96:	6004      	str	r4, [r0, #0]
 801ad98:	6041      	str	r1, [r0, #4]
 801ad9a:	bd10      	pop	{r4, pc}

0801ad9c <quorem>:
 801ad9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada0:	6903      	ldr	r3, [r0, #16]
 801ada2:	690c      	ldr	r4, [r1, #16]
 801ada4:	42a3      	cmp	r3, r4
 801ada6:	4607      	mov	r7, r0
 801ada8:	db7e      	blt.n	801aea8 <quorem+0x10c>
 801adaa:	3c01      	subs	r4, #1
 801adac:	f101 0814 	add.w	r8, r1, #20
 801adb0:	00a3      	lsls	r3, r4, #2
 801adb2:	f100 0514 	add.w	r5, r0, #20
 801adb6:	9300      	str	r3, [sp, #0]
 801adb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801adbc:	9301      	str	r3, [sp, #4]
 801adbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801adc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801adc6:	3301      	adds	r3, #1
 801adc8:	429a      	cmp	r2, r3
 801adca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801adce:	fbb2 f6f3 	udiv	r6, r2, r3
 801add2:	d32e      	bcc.n	801ae32 <quorem+0x96>
 801add4:	f04f 0a00 	mov.w	sl, #0
 801add8:	46c4      	mov	ip, r8
 801adda:	46ae      	mov	lr, r5
 801addc:	46d3      	mov	fp, sl
 801adde:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ade2:	b298      	uxth	r0, r3
 801ade4:	fb06 a000 	mla	r0, r6, r0, sl
 801ade8:	0c02      	lsrs	r2, r0, #16
 801adea:	0c1b      	lsrs	r3, r3, #16
 801adec:	fb06 2303 	mla	r3, r6, r3, r2
 801adf0:	f8de 2000 	ldr.w	r2, [lr]
 801adf4:	b280      	uxth	r0, r0
 801adf6:	b292      	uxth	r2, r2
 801adf8:	1a12      	subs	r2, r2, r0
 801adfa:	445a      	add	r2, fp
 801adfc:	f8de 0000 	ldr.w	r0, [lr]
 801ae00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ae04:	b29b      	uxth	r3, r3
 801ae06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ae0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ae0e:	b292      	uxth	r2, r2
 801ae10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ae14:	45e1      	cmp	r9, ip
 801ae16:	f84e 2b04 	str.w	r2, [lr], #4
 801ae1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ae1e:	d2de      	bcs.n	801adde <quorem+0x42>
 801ae20:	9b00      	ldr	r3, [sp, #0]
 801ae22:	58eb      	ldr	r3, [r5, r3]
 801ae24:	b92b      	cbnz	r3, 801ae32 <quorem+0x96>
 801ae26:	9b01      	ldr	r3, [sp, #4]
 801ae28:	3b04      	subs	r3, #4
 801ae2a:	429d      	cmp	r5, r3
 801ae2c:	461a      	mov	r2, r3
 801ae2e:	d32f      	bcc.n	801ae90 <quorem+0xf4>
 801ae30:	613c      	str	r4, [r7, #16]
 801ae32:	4638      	mov	r0, r7
 801ae34:	f001 fca2 	bl	801c77c <__mcmp>
 801ae38:	2800      	cmp	r0, #0
 801ae3a:	db25      	blt.n	801ae88 <quorem+0xec>
 801ae3c:	4629      	mov	r1, r5
 801ae3e:	2000      	movs	r0, #0
 801ae40:	f858 2b04 	ldr.w	r2, [r8], #4
 801ae44:	f8d1 c000 	ldr.w	ip, [r1]
 801ae48:	fa1f fe82 	uxth.w	lr, r2
 801ae4c:	fa1f f38c 	uxth.w	r3, ip
 801ae50:	eba3 030e 	sub.w	r3, r3, lr
 801ae54:	4403      	add	r3, r0
 801ae56:	0c12      	lsrs	r2, r2, #16
 801ae58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ae5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ae60:	b29b      	uxth	r3, r3
 801ae62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ae66:	45c1      	cmp	r9, r8
 801ae68:	f841 3b04 	str.w	r3, [r1], #4
 801ae6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ae70:	d2e6      	bcs.n	801ae40 <quorem+0xa4>
 801ae72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ae76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ae7a:	b922      	cbnz	r2, 801ae86 <quorem+0xea>
 801ae7c:	3b04      	subs	r3, #4
 801ae7e:	429d      	cmp	r5, r3
 801ae80:	461a      	mov	r2, r3
 801ae82:	d30b      	bcc.n	801ae9c <quorem+0x100>
 801ae84:	613c      	str	r4, [r7, #16]
 801ae86:	3601      	adds	r6, #1
 801ae88:	4630      	mov	r0, r6
 801ae8a:	b003      	add	sp, #12
 801ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae90:	6812      	ldr	r2, [r2, #0]
 801ae92:	3b04      	subs	r3, #4
 801ae94:	2a00      	cmp	r2, #0
 801ae96:	d1cb      	bne.n	801ae30 <quorem+0x94>
 801ae98:	3c01      	subs	r4, #1
 801ae9a:	e7c6      	b.n	801ae2a <quorem+0x8e>
 801ae9c:	6812      	ldr	r2, [r2, #0]
 801ae9e:	3b04      	subs	r3, #4
 801aea0:	2a00      	cmp	r2, #0
 801aea2:	d1ef      	bne.n	801ae84 <quorem+0xe8>
 801aea4:	3c01      	subs	r4, #1
 801aea6:	e7ea      	b.n	801ae7e <quorem+0xe2>
 801aea8:	2000      	movs	r0, #0
 801aeaa:	e7ee      	b.n	801ae8a <quorem+0xee>
 801aeac:	0000      	movs	r0, r0
	...

0801aeb0 <_dtoa_r>:
 801aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeb4:	69c7      	ldr	r7, [r0, #28]
 801aeb6:	b097      	sub	sp, #92	@ 0x5c
 801aeb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 801aebc:	ec55 4b10 	vmov	r4, r5, d0
 801aec0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801aec2:	9107      	str	r1, [sp, #28]
 801aec4:	4681      	mov	r9, r0
 801aec6:	920c      	str	r2, [sp, #48]	@ 0x30
 801aec8:	9311      	str	r3, [sp, #68]	@ 0x44
 801aeca:	b97f      	cbnz	r7, 801aeec <_dtoa_r+0x3c>
 801aecc:	2010      	movs	r0, #16
 801aece:	f7fc ff41 	bl	8017d54 <malloc>
 801aed2:	4602      	mov	r2, r0
 801aed4:	f8c9 001c 	str.w	r0, [r9, #28]
 801aed8:	b920      	cbnz	r0, 801aee4 <_dtoa_r+0x34>
 801aeda:	4ba9      	ldr	r3, [pc, #676]	@ (801b180 <_dtoa_r+0x2d0>)
 801aedc:	21ef      	movs	r1, #239	@ 0xef
 801aede:	48a9      	ldr	r0, [pc, #676]	@ (801b184 <_dtoa_r+0x2d4>)
 801aee0:	f7ff ff36 	bl	801ad50 <__assert_func>
 801aee4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801aee8:	6007      	str	r7, [r0, #0]
 801aeea:	60c7      	str	r7, [r0, #12]
 801aeec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801aef0:	6819      	ldr	r1, [r3, #0]
 801aef2:	b159      	cbz	r1, 801af0c <_dtoa_r+0x5c>
 801aef4:	685a      	ldr	r2, [r3, #4]
 801aef6:	604a      	str	r2, [r1, #4]
 801aef8:	2301      	movs	r3, #1
 801aefa:	4093      	lsls	r3, r2
 801aefc:	608b      	str	r3, [r1, #8]
 801aefe:	4648      	mov	r0, r9
 801af00:	f001 f9c0 	bl	801c284 <_Bfree>
 801af04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801af08:	2200      	movs	r2, #0
 801af0a:	601a      	str	r2, [r3, #0]
 801af0c:	1e2b      	subs	r3, r5, #0
 801af0e:	bfb9      	ittee	lt
 801af10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801af14:	9305      	strlt	r3, [sp, #20]
 801af16:	2300      	movge	r3, #0
 801af18:	6033      	strge	r3, [r6, #0]
 801af1a:	9f05      	ldr	r7, [sp, #20]
 801af1c:	4b9a      	ldr	r3, [pc, #616]	@ (801b188 <_dtoa_r+0x2d8>)
 801af1e:	bfbc      	itt	lt
 801af20:	2201      	movlt	r2, #1
 801af22:	6032      	strlt	r2, [r6, #0]
 801af24:	43bb      	bics	r3, r7
 801af26:	d112      	bne.n	801af4e <_dtoa_r+0x9e>
 801af28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801af2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801af2e:	6013      	str	r3, [r2, #0]
 801af30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801af34:	4323      	orrs	r3, r4
 801af36:	f000 855a 	beq.w	801b9ee <_dtoa_r+0xb3e>
 801af3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801af3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801b19c <_dtoa_r+0x2ec>
 801af40:	2b00      	cmp	r3, #0
 801af42:	f000 855c 	beq.w	801b9fe <_dtoa_r+0xb4e>
 801af46:	f10a 0303 	add.w	r3, sl, #3
 801af4a:	f000 bd56 	b.w	801b9fa <_dtoa_r+0xb4a>
 801af4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 801af52:	2200      	movs	r2, #0
 801af54:	ec51 0b17 	vmov	r0, r1, d7
 801af58:	2300      	movs	r3, #0
 801af5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801af5e:	f7e5 fdc3 	bl	8000ae8 <__aeabi_dcmpeq>
 801af62:	4680      	mov	r8, r0
 801af64:	b158      	cbz	r0, 801af7e <_dtoa_r+0xce>
 801af66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801af68:	2301      	movs	r3, #1
 801af6a:	6013      	str	r3, [r2, #0]
 801af6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801af6e:	b113      	cbz	r3, 801af76 <_dtoa_r+0xc6>
 801af70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801af72:	4b86      	ldr	r3, [pc, #536]	@ (801b18c <_dtoa_r+0x2dc>)
 801af74:	6013      	str	r3, [r2, #0]
 801af76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801b1a0 <_dtoa_r+0x2f0>
 801af7a:	f000 bd40 	b.w	801b9fe <_dtoa_r+0xb4e>
 801af7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801af82:	aa14      	add	r2, sp, #80	@ 0x50
 801af84:	a915      	add	r1, sp, #84	@ 0x54
 801af86:	4648      	mov	r0, r9
 801af88:	f001 fd18 	bl	801c9bc <__d2b>
 801af8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801af90:	9002      	str	r0, [sp, #8]
 801af92:	2e00      	cmp	r6, #0
 801af94:	d078      	beq.n	801b088 <_dtoa_r+0x1d8>
 801af96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801af98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801af9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801afa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801afa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801afa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801afac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801afb0:	4619      	mov	r1, r3
 801afb2:	2200      	movs	r2, #0
 801afb4:	4b76      	ldr	r3, [pc, #472]	@ (801b190 <_dtoa_r+0x2e0>)
 801afb6:	f7e5 f977 	bl	80002a8 <__aeabi_dsub>
 801afba:	a36b      	add	r3, pc, #428	@ (adr r3, 801b168 <_dtoa_r+0x2b8>)
 801afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc0:	f7e5 fb2a 	bl	8000618 <__aeabi_dmul>
 801afc4:	a36a      	add	r3, pc, #424	@ (adr r3, 801b170 <_dtoa_r+0x2c0>)
 801afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afca:	f7e5 f96f 	bl	80002ac <__adddf3>
 801afce:	4604      	mov	r4, r0
 801afd0:	4630      	mov	r0, r6
 801afd2:	460d      	mov	r5, r1
 801afd4:	f7e5 fab6 	bl	8000544 <__aeabi_i2d>
 801afd8:	a367      	add	r3, pc, #412	@ (adr r3, 801b178 <_dtoa_r+0x2c8>)
 801afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afde:	f7e5 fb1b 	bl	8000618 <__aeabi_dmul>
 801afe2:	4602      	mov	r2, r0
 801afe4:	460b      	mov	r3, r1
 801afe6:	4620      	mov	r0, r4
 801afe8:	4629      	mov	r1, r5
 801afea:	f7e5 f95f 	bl	80002ac <__adddf3>
 801afee:	4604      	mov	r4, r0
 801aff0:	460d      	mov	r5, r1
 801aff2:	f7e5 fdc1 	bl	8000b78 <__aeabi_d2iz>
 801aff6:	2200      	movs	r2, #0
 801aff8:	4607      	mov	r7, r0
 801affa:	2300      	movs	r3, #0
 801affc:	4620      	mov	r0, r4
 801affe:	4629      	mov	r1, r5
 801b000:	f7e5 fd7c 	bl	8000afc <__aeabi_dcmplt>
 801b004:	b140      	cbz	r0, 801b018 <_dtoa_r+0x168>
 801b006:	4638      	mov	r0, r7
 801b008:	f7e5 fa9c 	bl	8000544 <__aeabi_i2d>
 801b00c:	4622      	mov	r2, r4
 801b00e:	462b      	mov	r3, r5
 801b010:	f7e5 fd6a 	bl	8000ae8 <__aeabi_dcmpeq>
 801b014:	b900      	cbnz	r0, 801b018 <_dtoa_r+0x168>
 801b016:	3f01      	subs	r7, #1
 801b018:	2f16      	cmp	r7, #22
 801b01a:	d852      	bhi.n	801b0c2 <_dtoa_r+0x212>
 801b01c:	4b5d      	ldr	r3, [pc, #372]	@ (801b194 <_dtoa_r+0x2e4>)
 801b01e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b026:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b02a:	f7e5 fd67 	bl	8000afc <__aeabi_dcmplt>
 801b02e:	2800      	cmp	r0, #0
 801b030:	d049      	beq.n	801b0c6 <_dtoa_r+0x216>
 801b032:	3f01      	subs	r7, #1
 801b034:	2300      	movs	r3, #0
 801b036:	9310      	str	r3, [sp, #64]	@ 0x40
 801b038:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b03a:	1b9b      	subs	r3, r3, r6
 801b03c:	1e5a      	subs	r2, r3, #1
 801b03e:	bf45      	ittet	mi
 801b040:	f1c3 0301 	rsbmi	r3, r3, #1
 801b044:	9300      	strmi	r3, [sp, #0]
 801b046:	2300      	movpl	r3, #0
 801b048:	2300      	movmi	r3, #0
 801b04a:	9206      	str	r2, [sp, #24]
 801b04c:	bf54      	ite	pl
 801b04e:	9300      	strpl	r3, [sp, #0]
 801b050:	9306      	strmi	r3, [sp, #24]
 801b052:	2f00      	cmp	r7, #0
 801b054:	db39      	blt.n	801b0ca <_dtoa_r+0x21a>
 801b056:	9b06      	ldr	r3, [sp, #24]
 801b058:	970d      	str	r7, [sp, #52]	@ 0x34
 801b05a:	443b      	add	r3, r7
 801b05c:	9306      	str	r3, [sp, #24]
 801b05e:	2300      	movs	r3, #0
 801b060:	9308      	str	r3, [sp, #32]
 801b062:	9b07      	ldr	r3, [sp, #28]
 801b064:	2b09      	cmp	r3, #9
 801b066:	d863      	bhi.n	801b130 <_dtoa_r+0x280>
 801b068:	2b05      	cmp	r3, #5
 801b06a:	bfc4      	itt	gt
 801b06c:	3b04      	subgt	r3, #4
 801b06e:	9307      	strgt	r3, [sp, #28]
 801b070:	9b07      	ldr	r3, [sp, #28]
 801b072:	f1a3 0302 	sub.w	r3, r3, #2
 801b076:	bfcc      	ite	gt
 801b078:	2400      	movgt	r4, #0
 801b07a:	2401      	movle	r4, #1
 801b07c:	2b03      	cmp	r3, #3
 801b07e:	d863      	bhi.n	801b148 <_dtoa_r+0x298>
 801b080:	e8df f003 	tbb	[pc, r3]
 801b084:	2b375452 	.word	0x2b375452
 801b088:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801b08c:	441e      	add	r6, r3
 801b08e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b092:	2b20      	cmp	r3, #32
 801b094:	bfc1      	itttt	gt
 801b096:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b09a:	409f      	lslgt	r7, r3
 801b09c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b0a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b0a4:	bfd6      	itet	le
 801b0a6:	f1c3 0320 	rsble	r3, r3, #32
 801b0aa:	ea47 0003 	orrgt.w	r0, r7, r3
 801b0ae:	fa04 f003 	lslle.w	r0, r4, r3
 801b0b2:	f7e5 fa37 	bl	8000524 <__aeabi_ui2d>
 801b0b6:	2201      	movs	r2, #1
 801b0b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b0bc:	3e01      	subs	r6, #1
 801b0be:	9212      	str	r2, [sp, #72]	@ 0x48
 801b0c0:	e776      	b.n	801afb0 <_dtoa_r+0x100>
 801b0c2:	2301      	movs	r3, #1
 801b0c4:	e7b7      	b.n	801b036 <_dtoa_r+0x186>
 801b0c6:	9010      	str	r0, [sp, #64]	@ 0x40
 801b0c8:	e7b6      	b.n	801b038 <_dtoa_r+0x188>
 801b0ca:	9b00      	ldr	r3, [sp, #0]
 801b0cc:	1bdb      	subs	r3, r3, r7
 801b0ce:	9300      	str	r3, [sp, #0]
 801b0d0:	427b      	negs	r3, r7
 801b0d2:	9308      	str	r3, [sp, #32]
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801b0d8:	e7c3      	b.n	801b062 <_dtoa_r+0x1b2>
 801b0da:	2301      	movs	r3, #1
 801b0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0e0:	eb07 0b03 	add.w	fp, r7, r3
 801b0e4:	f10b 0301 	add.w	r3, fp, #1
 801b0e8:	2b01      	cmp	r3, #1
 801b0ea:	9303      	str	r3, [sp, #12]
 801b0ec:	bfb8      	it	lt
 801b0ee:	2301      	movlt	r3, #1
 801b0f0:	e006      	b.n	801b100 <_dtoa_r+0x250>
 801b0f2:	2301      	movs	r3, #1
 801b0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	dd28      	ble.n	801b14e <_dtoa_r+0x29e>
 801b0fc:	469b      	mov	fp, r3
 801b0fe:	9303      	str	r3, [sp, #12]
 801b100:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801b104:	2100      	movs	r1, #0
 801b106:	2204      	movs	r2, #4
 801b108:	f102 0514 	add.w	r5, r2, #20
 801b10c:	429d      	cmp	r5, r3
 801b10e:	d926      	bls.n	801b15e <_dtoa_r+0x2ae>
 801b110:	6041      	str	r1, [r0, #4]
 801b112:	4648      	mov	r0, r9
 801b114:	f001 f876 	bl	801c204 <_Balloc>
 801b118:	4682      	mov	sl, r0
 801b11a:	2800      	cmp	r0, #0
 801b11c:	d142      	bne.n	801b1a4 <_dtoa_r+0x2f4>
 801b11e:	4b1e      	ldr	r3, [pc, #120]	@ (801b198 <_dtoa_r+0x2e8>)
 801b120:	4602      	mov	r2, r0
 801b122:	f240 11af 	movw	r1, #431	@ 0x1af
 801b126:	e6da      	b.n	801aede <_dtoa_r+0x2e>
 801b128:	2300      	movs	r3, #0
 801b12a:	e7e3      	b.n	801b0f4 <_dtoa_r+0x244>
 801b12c:	2300      	movs	r3, #0
 801b12e:	e7d5      	b.n	801b0dc <_dtoa_r+0x22c>
 801b130:	2401      	movs	r4, #1
 801b132:	2300      	movs	r3, #0
 801b134:	9307      	str	r3, [sp, #28]
 801b136:	9409      	str	r4, [sp, #36]	@ 0x24
 801b138:	f04f 3bff 	mov.w	fp, #4294967295
 801b13c:	2200      	movs	r2, #0
 801b13e:	f8cd b00c 	str.w	fp, [sp, #12]
 801b142:	2312      	movs	r3, #18
 801b144:	920c      	str	r2, [sp, #48]	@ 0x30
 801b146:	e7db      	b.n	801b100 <_dtoa_r+0x250>
 801b148:	2301      	movs	r3, #1
 801b14a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b14c:	e7f4      	b.n	801b138 <_dtoa_r+0x288>
 801b14e:	f04f 0b01 	mov.w	fp, #1
 801b152:	f8cd b00c 	str.w	fp, [sp, #12]
 801b156:	465b      	mov	r3, fp
 801b158:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801b15c:	e7d0      	b.n	801b100 <_dtoa_r+0x250>
 801b15e:	3101      	adds	r1, #1
 801b160:	0052      	lsls	r2, r2, #1
 801b162:	e7d1      	b.n	801b108 <_dtoa_r+0x258>
 801b164:	f3af 8000 	nop.w
 801b168:	636f4361 	.word	0x636f4361
 801b16c:	3fd287a7 	.word	0x3fd287a7
 801b170:	8b60c8b3 	.word	0x8b60c8b3
 801b174:	3fc68a28 	.word	0x3fc68a28
 801b178:	509f79fb 	.word	0x509f79fb
 801b17c:	3fd34413 	.word	0x3fd34413
 801b180:	08021a0d 	.word	0x08021a0d
 801b184:	08021b1b 	.word	0x08021b1b
 801b188:	7ff00000 	.word	0x7ff00000
 801b18c:	08021c65 	.word	0x08021c65
 801b190:	3ff80000 	.word	0x3ff80000
 801b194:	08021eb8 	.word	0x08021eb8
 801b198:	08021b73 	.word	0x08021b73
 801b19c:	08021b17 	.word	0x08021b17
 801b1a0:	08021c64 	.word	0x08021c64
 801b1a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b1a8:	6018      	str	r0, [r3, #0]
 801b1aa:	9b03      	ldr	r3, [sp, #12]
 801b1ac:	2b0e      	cmp	r3, #14
 801b1ae:	f200 80a1 	bhi.w	801b2f4 <_dtoa_r+0x444>
 801b1b2:	2c00      	cmp	r4, #0
 801b1b4:	f000 809e 	beq.w	801b2f4 <_dtoa_r+0x444>
 801b1b8:	2f00      	cmp	r7, #0
 801b1ba:	dd33      	ble.n	801b224 <_dtoa_r+0x374>
 801b1bc:	4b9c      	ldr	r3, [pc, #624]	@ (801b430 <_dtoa_r+0x580>)
 801b1be:	f007 020f 	and.w	r2, r7, #15
 801b1c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b1c6:	ed93 7b00 	vldr	d7, [r3]
 801b1ca:	05f8      	lsls	r0, r7, #23
 801b1cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801b1d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801b1d4:	d516      	bpl.n	801b204 <_dtoa_r+0x354>
 801b1d6:	4b97      	ldr	r3, [pc, #604]	@ (801b434 <_dtoa_r+0x584>)
 801b1d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b1dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b1e0:	f7e5 fb44 	bl	800086c <__aeabi_ddiv>
 801b1e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b1e8:	f004 040f 	and.w	r4, r4, #15
 801b1ec:	2603      	movs	r6, #3
 801b1ee:	4d91      	ldr	r5, [pc, #580]	@ (801b434 <_dtoa_r+0x584>)
 801b1f0:	b954      	cbnz	r4, 801b208 <_dtoa_r+0x358>
 801b1f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b1f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b1fa:	f7e5 fb37 	bl	800086c <__aeabi_ddiv>
 801b1fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b202:	e028      	b.n	801b256 <_dtoa_r+0x3a6>
 801b204:	2602      	movs	r6, #2
 801b206:	e7f2      	b.n	801b1ee <_dtoa_r+0x33e>
 801b208:	07e1      	lsls	r1, r4, #31
 801b20a:	d508      	bpl.n	801b21e <_dtoa_r+0x36e>
 801b20c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b210:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b214:	f7e5 fa00 	bl	8000618 <__aeabi_dmul>
 801b218:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b21c:	3601      	adds	r6, #1
 801b21e:	1064      	asrs	r4, r4, #1
 801b220:	3508      	adds	r5, #8
 801b222:	e7e5      	b.n	801b1f0 <_dtoa_r+0x340>
 801b224:	f000 80af 	beq.w	801b386 <_dtoa_r+0x4d6>
 801b228:	427c      	negs	r4, r7
 801b22a:	4b81      	ldr	r3, [pc, #516]	@ (801b430 <_dtoa_r+0x580>)
 801b22c:	4d81      	ldr	r5, [pc, #516]	@ (801b434 <_dtoa_r+0x584>)
 801b22e:	f004 020f 	and.w	r2, r4, #15
 801b232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b23a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b23e:	f7e5 f9eb 	bl	8000618 <__aeabi_dmul>
 801b242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b246:	1124      	asrs	r4, r4, #4
 801b248:	2300      	movs	r3, #0
 801b24a:	2602      	movs	r6, #2
 801b24c:	2c00      	cmp	r4, #0
 801b24e:	f040 808f 	bne.w	801b370 <_dtoa_r+0x4c0>
 801b252:	2b00      	cmp	r3, #0
 801b254:	d1d3      	bne.n	801b1fe <_dtoa_r+0x34e>
 801b256:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b258:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	f000 8094 	beq.w	801b38a <_dtoa_r+0x4da>
 801b262:	4b75      	ldr	r3, [pc, #468]	@ (801b438 <_dtoa_r+0x588>)
 801b264:	2200      	movs	r2, #0
 801b266:	4620      	mov	r0, r4
 801b268:	4629      	mov	r1, r5
 801b26a:	f7e5 fc47 	bl	8000afc <__aeabi_dcmplt>
 801b26e:	2800      	cmp	r0, #0
 801b270:	f000 808b 	beq.w	801b38a <_dtoa_r+0x4da>
 801b274:	9b03      	ldr	r3, [sp, #12]
 801b276:	2b00      	cmp	r3, #0
 801b278:	f000 8087 	beq.w	801b38a <_dtoa_r+0x4da>
 801b27c:	f1bb 0f00 	cmp.w	fp, #0
 801b280:	dd34      	ble.n	801b2ec <_dtoa_r+0x43c>
 801b282:	4620      	mov	r0, r4
 801b284:	4b6d      	ldr	r3, [pc, #436]	@ (801b43c <_dtoa_r+0x58c>)
 801b286:	2200      	movs	r2, #0
 801b288:	4629      	mov	r1, r5
 801b28a:	f7e5 f9c5 	bl	8000618 <__aeabi_dmul>
 801b28e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b292:	f107 38ff 	add.w	r8, r7, #4294967295
 801b296:	3601      	adds	r6, #1
 801b298:	465c      	mov	r4, fp
 801b29a:	4630      	mov	r0, r6
 801b29c:	f7e5 f952 	bl	8000544 <__aeabi_i2d>
 801b2a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b2a4:	f7e5 f9b8 	bl	8000618 <__aeabi_dmul>
 801b2a8:	4b65      	ldr	r3, [pc, #404]	@ (801b440 <_dtoa_r+0x590>)
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	f7e4 fffe 	bl	80002ac <__adddf3>
 801b2b0:	4605      	mov	r5, r0
 801b2b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801b2b6:	2c00      	cmp	r4, #0
 801b2b8:	d16a      	bne.n	801b390 <_dtoa_r+0x4e0>
 801b2ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b2be:	4b61      	ldr	r3, [pc, #388]	@ (801b444 <_dtoa_r+0x594>)
 801b2c0:	2200      	movs	r2, #0
 801b2c2:	f7e4 fff1 	bl	80002a8 <__aeabi_dsub>
 801b2c6:	4602      	mov	r2, r0
 801b2c8:	460b      	mov	r3, r1
 801b2ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b2ce:	462a      	mov	r2, r5
 801b2d0:	4633      	mov	r3, r6
 801b2d2:	f7e5 fc31 	bl	8000b38 <__aeabi_dcmpgt>
 801b2d6:	2800      	cmp	r0, #0
 801b2d8:	f040 8298 	bne.w	801b80c <_dtoa_r+0x95c>
 801b2dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b2e0:	462a      	mov	r2, r5
 801b2e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801b2e6:	f7e5 fc09 	bl	8000afc <__aeabi_dcmplt>
 801b2ea:	bb38      	cbnz	r0, 801b33c <_dtoa_r+0x48c>
 801b2ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801b2f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801b2f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	f2c0 8157 	blt.w	801b5aa <_dtoa_r+0x6fa>
 801b2fc:	2f0e      	cmp	r7, #14
 801b2fe:	f300 8154 	bgt.w	801b5aa <_dtoa_r+0x6fa>
 801b302:	4b4b      	ldr	r3, [pc, #300]	@ (801b430 <_dtoa_r+0x580>)
 801b304:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b308:	ed93 7b00 	vldr	d7, [r3]
 801b30c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b30e:	2b00      	cmp	r3, #0
 801b310:	ed8d 7b00 	vstr	d7, [sp]
 801b314:	f280 80e5 	bge.w	801b4e2 <_dtoa_r+0x632>
 801b318:	9b03      	ldr	r3, [sp, #12]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	f300 80e1 	bgt.w	801b4e2 <_dtoa_r+0x632>
 801b320:	d10c      	bne.n	801b33c <_dtoa_r+0x48c>
 801b322:	4b48      	ldr	r3, [pc, #288]	@ (801b444 <_dtoa_r+0x594>)
 801b324:	2200      	movs	r2, #0
 801b326:	ec51 0b17 	vmov	r0, r1, d7
 801b32a:	f7e5 f975 	bl	8000618 <__aeabi_dmul>
 801b32e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b332:	f7e5 fbf7 	bl	8000b24 <__aeabi_dcmpge>
 801b336:	2800      	cmp	r0, #0
 801b338:	f000 8266 	beq.w	801b808 <_dtoa_r+0x958>
 801b33c:	2400      	movs	r4, #0
 801b33e:	4625      	mov	r5, r4
 801b340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b342:	4656      	mov	r6, sl
 801b344:	ea6f 0803 	mvn.w	r8, r3
 801b348:	2700      	movs	r7, #0
 801b34a:	4621      	mov	r1, r4
 801b34c:	4648      	mov	r0, r9
 801b34e:	f000 ff99 	bl	801c284 <_Bfree>
 801b352:	2d00      	cmp	r5, #0
 801b354:	f000 80bd 	beq.w	801b4d2 <_dtoa_r+0x622>
 801b358:	b12f      	cbz	r7, 801b366 <_dtoa_r+0x4b6>
 801b35a:	42af      	cmp	r7, r5
 801b35c:	d003      	beq.n	801b366 <_dtoa_r+0x4b6>
 801b35e:	4639      	mov	r1, r7
 801b360:	4648      	mov	r0, r9
 801b362:	f000 ff8f 	bl	801c284 <_Bfree>
 801b366:	4629      	mov	r1, r5
 801b368:	4648      	mov	r0, r9
 801b36a:	f000 ff8b 	bl	801c284 <_Bfree>
 801b36e:	e0b0      	b.n	801b4d2 <_dtoa_r+0x622>
 801b370:	07e2      	lsls	r2, r4, #31
 801b372:	d505      	bpl.n	801b380 <_dtoa_r+0x4d0>
 801b374:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b378:	f7e5 f94e 	bl	8000618 <__aeabi_dmul>
 801b37c:	3601      	adds	r6, #1
 801b37e:	2301      	movs	r3, #1
 801b380:	1064      	asrs	r4, r4, #1
 801b382:	3508      	adds	r5, #8
 801b384:	e762      	b.n	801b24c <_dtoa_r+0x39c>
 801b386:	2602      	movs	r6, #2
 801b388:	e765      	b.n	801b256 <_dtoa_r+0x3a6>
 801b38a:	9c03      	ldr	r4, [sp, #12]
 801b38c:	46b8      	mov	r8, r7
 801b38e:	e784      	b.n	801b29a <_dtoa_r+0x3ea>
 801b390:	4b27      	ldr	r3, [pc, #156]	@ (801b430 <_dtoa_r+0x580>)
 801b392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b39c:	4454      	add	r4, sl
 801b39e:	2900      	cmp	r1, #0
 801b3a0:	d054      	beq.n	801b44c <_dtoa_r+0x59c>
 801b3a2:	4929      	ldr	r1, [pc, #164]	@ (801b448 <_dtoa_r+0x598>)
 801b3a4:	2000      	movs	r0, #0
 801b3a6:	f7e5 fa61 	bl	800086c <__aeabi_ddiv>
 801b3aa:	4633      	mov	r3, r6
 801b3ac:	462a      	mov	r2, r5
 801b3ae:	f7e4 ff7b 	bl	80002a8 <__aeabi_dsub>
 801b3b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b3b6:	4656      	mov	r6, sl
 801b3b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b3bc:	f7e5 fbdc 	bl	8000b78 <__aeabi_d2iz>
 801b3c0:	4605      	mov	r5, r0
 801b3c2:	f7e5 f8bf 	bl	8000544 <__aeabi_i2d>
 801b3c6:	4602      	mov	r2, r0
 801b3c8:	460b      	mov	r3, r1
 801b3ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b3ce:	f7e4 ff6b 	bl	80002a8 <__aeabi_dsub>
 801b3d2:	3530      	adds	r5, #48	@ 0x30
 801b3d4:	4602      	mov	r2, r0
 801b3d6:	460b      	mov	r3, r1
 801b3d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b3dc:	f806 5b01 	strb.w	r5, [r6], #1
 801b3e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b3e4:	f7e5 fb8a 	bl	8000afc <__aeabi_dcmplt>
 801b3e8:	2800      	cmp	r0, #0
 801b3ea:	d172      	bne.n	801b4d2 <_dtoa_r+0x622>
 801b3ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b3f0:	4911      	ldr	r1, [pc, #68]	@ (801b438 <_dtoa_r+0x588>)
 801b3f2:	2000      	movs	r0, #0
 801b3f4:	f7e4 ff58 	bl	80002a8 <__aeabi_dsub>
 801b3f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b3fc:	f7e5 fb7e 	bl	8000afc <__aeabi_dcmplt>
 801b400:	2800      	cmp	r0, #0
 801b402:	f040 80b4 	bne.w	801b56e <_dtoa_r+0x6be>
 801b406:	42a6      	cmp	r6, r4
 801b408:	f43f af70 	beq.w	801b2ec <_dtoa_r+0x43c>
 801b40c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b410:	4b0a      	ldr	r3, [pc, #40]	@ (801b43c <_dtoa_r+0x58c>)
 801b412:	2200      	movs	r2, #0
 801b414:	f7e5 f900 	bl	8000618 <__aeabi_dmul>
 801b418:	4b08      	ldr	r3, [pc, #32]	@ (801b43c <_dtoa_r+0x58c>)
 801b41a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b41e:	2200      	movs	r2, #0
 801b420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b424:	f7e5 f8f8 	bl	8000618 <__aeabi_dmul>
 801b428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b42c:	e7c4      	b.n	801b3b8 <_dtoa_r+0x508>
 801b42e:	bf00      	nop
 801b430:	08021eb8 	.word	0x08021eb8
 801b434:	08021e90 	.word	0x08021e90
 801b438:	3ff00000 	.word	0x3ff00000
 801b43c:	40240000 	.word	0x40240000
 801b440:	401c0000 	.word	0x401c0000
 801b444:	40140000 	.word	0x40140000
 801b448:	3fe00000 	.word	0x3fe00000
 801b44c:	4631      	mov	r1, r6
 801b44e:	4628      	mov	r0, r5
 801b450:	f7e5 f8e2 	bl	8000618 <__aeabi_dmul>
 801b454:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b458:	9413      	str	r4, [sp, #76]	@ 0x4c
 801b45a:	4656      	mov	r6, sl
 801b45c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b460:	f7e5 fb8a 	bl	8000b78 <__aeabi_d2iz>
 801b464:	4605      	mov	r5, r0
 801b466:	f7e5 f86d 	bl	8000544 <__aeabi_i2d>
 801b46a:	4602      	mov	r2, r0
 801b46c:	460b      	mov	r3, r1
 801b46e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b472:	f7e4 ff19 	bl	80002a8 <__aeabi_dsub>
 801b476:	3530      	adds	r5, #48	@ 0x30
 801b478:	f806 5b01 	strb.w	r5, [r6], #1
 801b47c:	4602      	mov	r2, r0
 801b47e:	460b      	mov	r3, r1
 801b480:	42a6      	cmp	r6, r4
 801b482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b486:	f04f 0200 	mov.w	r2, #0
 801b48a:	d124      	bne.n	801b4d6 <_dtoa_r+0x626>
 801b48c:	4baf      	ldr	r3, [pc, #700]	@ (801b74c <_dtoa_r+0x89c>)
 801b48e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b492:	f7e4 ff0b 	bl	80002ac <__adddf3>
 801b496:	4602      	mov	r2, r0
 801b498:	460b      	mov	r3, r1
 801b49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b49e:	f7e5 fb4b 	bl	8000b38 <__aeabi_dcmpgt>
 801b4a2:	2800      	cmp	r0, #0
 801b4a4:	d163      	bne.n	801b56e <_dtoa_r+0x6be>
 801b4a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b4aa:	49a8      	ldr	r1, [pc, #672]	@ (801b74c <_dtoa_r+0x89c>)
 801b4ac:	2000      	movs	r0, #0
 801b4ae:	f7e4 fefb 	bl	80002a8 <__aeabi_dsub>
 801b4b2:	4602      	mov	r2, r0
 801b4b4:	460b      	mov	r3, r1
 801b4b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b4ba:	f7e5 fb1f 	bl	8000afc <__aeabi_dcmplt>
 801b4be:	2800      	cmp	r0, #0
 801b4c0:	f43f af14 	beq.w	801b2ec <_dtoa_r+0x43c>
 801b4c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b4c6:	1e73      	subs	r3, r6, #1
 801b4c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b4ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b4ce:	2b30      	cmp	r3, #48	@ 0x30
 801b4d0:	d0f8      	beq.n	801b4c4 <_dtoa_r+0x614>
 801b4d2:	4647      	mov	r7, r8
 801b4d4:	e03b      	b.n	801b54e <_dtoa_r+0x69e>
 801b4d6:	4b9e      	ldr	r3, [pc, #632]	@ (801b750 <_dtoa_r+0x8a0>)
 801b4d8:	f7e5 f89e 	bl	8000618 <__aeabi_dmul>
 801b4dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b4e0:	e7bc      	b.n	801b45c <_dtoa_r+0x5ac>
 801b4e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b4e6:	4656      	mov	r6, sl
 801b4e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	4629      	mov	r1, r5
 801b4f0:	f7e5 f9bc 	bl	800086c <__aeabi_ddiv>
 801b4f4:	f7e5 fb40 	bl	8000b78 <__aeabi_d2iz>
 801b4f8:	4680      	mov	r8, r0
 801b4fa:	f7e5 f823 	bl	8000544 <__aeabi_i2d>
 801b4fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b502:	f7e5 f889 	bl	8000618 <__aeabi_dmul>
 801b506:	4602      	mov	r2, r0
 801b508:	460b      	mov	r3, r1
 801b50a:	4620      	mov	r0, r4
 801b50c:	4629      	mov	r1, r5
 801b50e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801b512:	f7e4 fec9 	bl	80002a8 <__aeabi_dsub>
 801b516:	f806 4b01 	strb.w	r4, [r6], #1
 801b51a:	9d03      	ldr	r5, [sp, #12]
 801b51c:	eba6 040a 	sub.w	r4, r6, sl
 801b520:	42a5      	cmp	r5, r4
 801b522:	4602      	mov	r2, r0
 801b524:	460b      	mov	r3, r1
 801b526:	d133      	bne.n	801b590 <_dtoa_r+0x6e0>
 801b528:	f7e4 fec0 	bl	80002ac <__adddf3>
 801b52c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b530:	4604      	mov	r4, r0
 801b532:	460d      	mov	r5, r1
 801b534:	f7e5 fb00 	bl	8000b38 <__aeabi_dcmpgt>
 801b538:	b9c0      	cbnz	r0, 801b56c <_dtoa_r+0x6bc>
 801b53a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b53e:	4620      	mov	r0, r4
 801b540:	4629      	mov	r1, r5
 801b542:	f7e5 fad1 	bl	8000ae8 <__aeabi_dcmpeq>
 801b546:	b110      	cbz	r0, 801b54e <_dtoa_r+0x69e>
 801b548:	f018 0f01 	tst.w	r8, #1
 801b54c:	d10e      	bne.n	801b56c <_dtoa_r+0x6bc>
 801b54e:	9902      	ldr	r1, [sp, #8]
 801b550:	4648      	mov	r0, r9
 801b552:	f000 fe97 	bl	801c284 <_Bfree>
 801b556:	2300      	movs	r3, #0
 801b558:	7033      	strb	r3, [r6, #0]
 801b55a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b55c:	3701      	adds	r7, #1
 801b55e:	601f      	str	r7, [r3, #0]
 801b560:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b562:	2b00      	cmp	r3, #0
 801b564:	f000 824b 	beq.w	801b9fe <_dtoa_r+0xb4e>
 801b568:	601e      	str	r6, [r3, #0]
 801b56a:	e248      	b.n	801b9fe <_dtoa_r+0xb4e>
 801b56c:	46b8      	mov	r8, r7
 801b56e:	4633      	mov	r3, r6
 801b570:	461e      	mov	r6, r3
 801b572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b576:	2a39      	cmp	r2, #57	@ 0x39
 801b578:	d106      	bne.n	801b588 <_dtoa_r+0x6d8>
 801b57a:	459a      	cmp	sl, r3
 801b57c:	d1f8      	bne.n	801b570 <_dtoa_r+0x6c0>
 801b57e:	2230      	movs	r2, #48	@ 0x30
 801b580:	f108 0801 	add.w	r8, r8, #1
 801b584:	f88a 2000 	strb.w	r2, [sl]
 801b588:	781a      	ldrb	r2, [r3, #0]
 801b58a:	3201      	adds	r2, #1
 801b58c:	701a      	strb	r2, [r3, #0]
 801b58e:	e7a0      	b.n	801b4d2 <_dtoa_r+0x622>
 801b590:	4b6f      	ldr	r3, [pc, #444]	@ (801b750 <_dtoa_r+0x8a0>)
 801b592:	2200      	movs	r2, #0
 801b594:	f7e5 f840 	bl	8000618 <__aeabi_dmul>
 801b598:	2200      	movs	r2, #0
 801b59a:	2300      	movs	r3, #0
 801b59c:	4604      	mov	r4, r0
 801b59e:	460d      	mov	r5, r1
 801b5a0:	f7e5 faa2 	bl	8000ae8 <__aeabi_dcmpeq>
 801b5a4:	2800      	cmp	r0, #0
 801b5a6:	d09f      	beq.n	801b4e8 <_dtoa_r+0x638>
 801b5a8:	e7d1      	b.n	801b54e <_dtoa_r+0x69e>
 801b5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b5ac:	2a00      	cmp	r2, #0
 801b5ae:	f000 80ea 	beq.w	801b786 <_dtoa_r+0x8d6>
 801b5b2:	9a07      	ldr	r2, [sp, #28]
 801b5b4:	2a01      	cmp	r2, #1
 801b5b6:	f300 80cd 	bgt.w	801b754 <_dtoa_r+0x8a4>
 801b5ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b5bc:	2a00      	cmp	r2, #0
 801b5be:	f000 80c1 	beq.w	801b744 <_dtoa_r+0x894>
 801b5c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b5c6:	9c08      	ldr	r4, [sp, #32]
 801b5c8:	9e00      	ldr	r6, [sp, #0]
 801b5ca:	9a00      	ldr	r2, [sp, #0]
 801b5cc:	441a      	add	r2, r3
 801b5ce:	9200      	str	r2, [sp, #0]
 801b5d0:	9a06      	ldr	r2, [sp, #24]
 801b5d2:	2101      	movs	r1, #1
 801b5d4:	441a      	add	r2, r3
 801b5d6:	4648      	mov	r0, r9
 801b5d8:	9206      	str	r2, [sp, #24]
 801b5da:	f000 ff51 	bl	801c480 <__i2b>
 801b5de:	4605      	mov	r5, r0
 801b5e0:	b166      	cbz	r6, 801b5fc <_dtoa_r+0x74c>
 801b5e2:	9b06      	ldr	r3, [sp, #24]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	dd09      	ble.n	801b5fc <_dtoa_r+0x74c>
 801b5e8:	42b3      	cmp	r3, r6
 801b5ea:	9a00      	ldr	r2, [sp, #0]
 801b5ec:	bfa8      	it	ge
 801b5ee:	4633      	movge	r3, r6
 801b5f0:	1ad2      	subs	r2, r2, r3
 801b5f2:	9200      	str	r2, [sp, #0]
 801b5f4:	9a06      	ldr	r2, [sp, #24]
 801b5f6:	1af6      	subs	r6, r6, r3
 801b5f8:	1ad3      	subs	r3, r2, r3
 801b5fa:	9306      	str	r3, [sp, #24]
 801b5fc:	9b08      	ldr	r3, [sp, #32]
 801b5fe:	b30b      	cbz	r3, 801b644 <_dtoa_r+0x794>
 801b600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b602:	2b00      	cmp	r3, #0
 801b604:	f000 80c6 	beq.w	801b794 <_dtoa_r+0x8e4>
 801b608:	2c00      	cmp	r4, #0
 801b60a:	f000 80c0 	beq.w	801b78e <_dtoa_r+0x8de>
 801b60e:	4629      	mov	r1, r5
 801b610:	4622      	mov	r2, r4
 801b612:	4648      	mov	r0, r9
 801b614:	f000 ffec 	bl	801c5f0 <__pow5mult>
 801b618:	9a02      	ldr	r2, [sp, #8]
 801b61a:	4601      	mov	r1, r0
 801b61c:	4605      	mov	r5, r0
 801b61e:	4648      	mov	r0, r9
 801b620:	f000 ff44 	bl	801c4ac <__multiply>
 801b624:	9902      	ldr	r1, [sp, #8]
 801b626:	4680      	mov	r8, r0
 801b628:	4648      	mov	r0, r9
 801b62a:	f000 fe2b 	bl	801c284 <_Bfree>
 801b62e:	9b08      	ldr	r3, [sp, #32]
 801b630:	1b1b      	subs	r3, r3, r4
 801b632:	9308      	str	r3, [sp, #32]
 801b634:	f000 80b1 	beq.w	801b79a <_dtoa_r+0x8ea>
 801b638:	9a08      	ldr	r2, [sp, #32]
 801b63a:	4641      	mov	r1, r8
 801b63c:	4648      	mov	r0, r9
 801b63e:	f000 ffd7 	bl	801c5f0 <__pow5mult>
 801b642:	9002      	str	r0, [sp, #8]
 801b644:	2101      	movs	r1, #1
 801b646:	4648      	mov	r0, r9
 801b648:	f000 ff1a 	bl	801c480 <__i2b>
 801b64c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b64e:	4604      	mov	r4, r0
 801b650:	2b00      	cmp	r3, #0
 801b652:	f000 81d8 	beq.w	801ba06 <_dtoa_r+0xb56>
 801b656:	461a      	mov	r2, r3
 801b658:	4601      	mov	r1, r0
 801b65a:	4648      	mov	r0, r9
 801b65c:	f000 ffc8 	bl	801c5f0 <__pow5mult>
 801b660:	9b07      	ldr	r3, [sp, #28]
 801b662:	2b01      	cmp	r3, #1
 801b664:	4604      	mov	r4, r0
 801b666:	f300 809f 	bgt.w	801b7a8 <_dtoa_r+0x8f8>
 801b66a:	9b04      	ldr	r3, [sp, #16]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	f040 8097 	bne.w	801b7a0 <_dtoa_r+0x8f0>
 801b672:	9b05      	ldr	r3, [sp, #20]
 801b674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b678:	2b00      	cmp	r3, #0
 801b67a:	f040 8093 	bne.w	801b7a4 <_dtoa_r+0x8f4>
 801b67e:	9b05      	ldr	r3, [sp, #20]
 801b680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b684:	0d1b      	lsrs	r3, r3, #20
 801b686:	051b      	lsls	r3, r3, #20
 801b688:	b133      	cbz	r3, 801b698 <_dtoa_r+0x7e8>
 801b68a:	9b00      	ldr	r3, [sp, #0]
 801b68c:	3301      	adds	r3, #1
 801b68e:	9300      	str	r3, [sp, #0]
 801b690:	9b06      	ldr	r3, [sp, #24]
 801b692:	3301      	adds	r3, #1
 801b694:	9306      	str	r3, [sp, #24]
 801b696:	2301      	movs	r3, #1
 801b698:	9308      	str	r3, [sp, #32]
 801b69a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	f000 81b8 	beq.w	801ba12 <_dtoa_r+0xb62>
 801b6a2:	6923      	ldr	r3, [r4, #16]
 801b6a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b6a8:	6918      	ldr	r0, [r3, #16]
 801b6aa:	f000 fe9d 	bl	801c3e8 <__hi0bits>
 801b6ae:	f1c0 0020 	rsb	r0, r0, #32
 801b6b2:	9b06      	ldr	r3, [sp, #24]
 801b6b4:	4418      	add	r0, r3
 801b6b6:	f010 001f 	ands.w	r0, r0, #31
 801b6ba:	f000 8082 	beq.w	801b7c2 <_dtoa_r+0x912>
 801b6be:	f1c0 0320 	rsb	r3, r0, #32
 801b6c2:	2b04      	cmp	r3, #4
 801b6c4:	dd73      	ble.n	801b7ae <_dtoa_r+0x8fe>
 801b6c6:	9b00      	ldr	r3, [sp, #0]
 801b6c8:	f1c0 001c 	rsb	r0, r0, #28
 801b6cc:	4403      	add	r3, r0
 801b6ce:	9300      	str	r3, [sp, #0]
 801b6d0:	9b06      	ldr	r3, [sp, #24]
 801b6d2:	4403      	add	r3, r0
 801b6d4:	4406      	add	r6, r0
 801b6d6:	9306      	str	r3, [sp, #24]
 801b6d8:	9b00      	ldr	r3, [sp, #0]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	dd05      	ble.n	801b6ea <_dtoa_r+0x83a>
 801b6de:	9902      	ldr	r1, [sp, #8]
 801b6e0:	461a      	mov	r2, r3
 801b6e2:	4648      	mov	r0, r9
 801b6e4:	f000 ffde 	bl	801c6a4 <__lshift>
 801b6e8:	9002      	str	r0, [sp, #8]
 801b6ea:	9b06      	ldr	r3, [sp, #24]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	dd05      	ble.n	801b6fc <_dtoa_r+0x84c>
 801b6f0:	4621      	mov	r1, r4
 801b6f2:	461a      	mov	r2, r3
 801b6f4:	4648      	mov	r0, r9
 801b6f6:	f000 ffd5 	bl	801c6a4 <__lshift>
 801b6fa:	4604      	mov	r4, r0
 801b6fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d061      	beq.n	801b7c6 <_dtoa_r+0x916>
 801b702:	9802      	ldr	r0, [sp, #8]
 801b704:	4621      	mov	r1, r4
 801b706:	f001 f839 	bl	801c77c <__mcmp>
 801b70a:	2800      	cmp	r0, #0
 801b70c:	da5b      	bge.n	801b7c6 <_dtoa_r+0x916>
 801b70e:	2300      	movs	r3, #0
 801b710:	9902      	ldr	r1, [sp, #8]
 801b712:	220a      	movs	r2, #10
 801b714:	4648      	mov	r0, r9
 801b716:	f000 fdd7 	bl	801c2c8 <__multadd>
 801b71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b71c:	9002      	str	r0, [sp, #8]
 801b71e:	f107 38ff 	add.w	r8, r7, #4294967295
 801b722:	2b00      	cmp	r3, #0
 801b724:	f000 8177 	beq.w	801ba16 <_dtoa_r+0xb66>
 801b728:	4629      	mov	r1, r5
 801b72a:	2300      	movs	r3, #0
 801b72c:	220a      	movs	r2, #10
 801b72e:	4648      	mov	r0, r9
 801b730:	f000 fdca 	bl	801c2c8 <__multadd>
 801b734:	f1bb 0f00 	cmp.w	fp, #0
 801b738:	4605      	mov	r5, r0
 801b73a:	dc6f      	bgt.n	801b81c <_dtoa_r+0x96c>
 801b73c:	9b07      	ldr	r3, [sp, #28]
 801b73e:	2b02      	cmp	r3, #2
 801b740:	dc49      	bgt.n	801b7d6 <_dtoa_r+0x926>
 801b742:	e06b      	b.n	801b81c <_dtoa_r+0x96c>
 801b744:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b746:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b74a:	e73c      	b.n	801b5c6 <_dtoa_r+0x716>
 801b74c:	3fe00000 	.word	0x3fe00000
 801b750:	40240000 	.word	0x40240000
 801b754:	9b03      	ldr	r3, [sp, #12]
 801b756:	1e5c      	subs	r4, r3, #1
 801b758:	9b08      	ldr	r3, [sp, #32]
 801b75a:	42a3      	cmp	r3, r4
 801b75c:	db09      	blt.n	801b772 <_dtoa_r+0x8c2>
 801b75e:	1b1c      	subs	r4, r3, r4
 801b760:	9b03      	ldr	r3, [sp, #12]
 801b762:	2b00      	cmp	r3, #0
 801b764:	f6bf af30 	bge.w	801b5c8 <_dtoa_r+0x718>
 801b768:	9b00      	ldr	r3, [sp, #0]
 801b76a:	9a03      	ldr	r2, [sp, #12]
 801b76c:	1a9e      	subs	r6, r3, r2
 801b76e:	2300      	movs	r3, #0
 801b770:	e72b      	b.n	801b5ca <_dtoa_r+0x71a>
 801b772:	9b08      	ldr	r3, [sp, #32]
 801b774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b776:	9408      	str	r4, [sp, #32]
 801b778:	1ae3      	subs	r3, r4, r3
 801b77a:	441a      	add	r2, r3
 801b77c:	9e00      	ldr	r6, [sp, #0]
 801b77e:	9b03      	ldr	r3, [sp, #12]
 801b780:	920d      	str	r2, [sp, #52]	@ 0x34
 801b782:	2400      	movs	r4, #0
 801b784:	e721      	b.n	801b5ca <_dtoa_r+0x71a>
 801b786:	9c08      	ldr	r4, [sp, #32]
 801b788:	9e00      	ldr	r6, [sp, #0]
 801b78a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b78c:	e728      	b.n	801b5e0 <_dtoa_r+0x730>
 801b78e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b792:	e751      	b.n	801b638 <_dtoa_r+0x788>
 801b794:	9a08      	ldr	r2, [sp, #32]
 801b796:	9902      	ldr	r1, [sp, #8]
 801b798:	e750      	b.n	801b63c <_dtoa_r+0x78c>
 801b79a:	f8cd 8008 	str.w	r8, [sp, #8]
 801b79e:	e751      	b.n	801b644 <_dtoa_r+0x794>
 801b7a0:	2300      	movs	r3, #0
 801b7a2:	e779      	b.n	801b698 <_dtoa_r+0x7e8>
 801b7a4:	9b04      	ldr	r3, [sp, #16]
 801b7a6:	e777      	b.n	801b698 <_dtoa_r+0x7e8>
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	9308      	str	r3, [sp, #32]
 801b7ac:	e779      	b.n	801b6a2 <_dtoa_r+0x7f2>
 801b7ae:	d093      	beq.n	801b6d8 <_dtoa_r+0x828>
 801b7b0:	9a00      	ldr	r2, [sp, #0]
 801b7b2:	331c      	adds	r3, #28
 801b7b4:	441a      	add	r2, r3
 801b7b6:	9200      	str	r2, [sp, #0]
 801b7b8:	9a06      	ldr	r2, [sp, #24]
 801b7ba:	441a      	add	r2, r3
 801b7bc:	441e      	add	r6, r3
 801b7be:	9206      	str	r2, [sp, #24]
 801b7c0:	e78a      	b.n	801b6d8 <_dtoa_r+0x828>
 801b7c2:	4603      	mov	r3, r0
 801b7c4:	e7f4      	b.n	801b7b0 <_dtoa_r+0x900>
 801b7c6:	9b03      	ldr	r3, [sp, #12]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	46b8      	mov	r8, r7
 801b7cc:	dc20      	bgt.n	801b810 <_dtoa_r+0x960>
 801b7ce:	469b      	mov	fp, r3
 801b7d0:	9b07      	ldr	r3, [sp, #28]
 801b7d2:	2b02      	cmp	r3, #2
 801b7d4:	dd1e      	ble.n	801b814 <_dtoa_r+0x964>
 801b7d6:	f1bb 0f00 	cmp.w	fp, #0
 801b7da:	f47f adb1 	bne.w	801b340 <_dtoa_r+0x490>
 801b7de:	4621      	mov	r1, r4
 801b7e0:	465b      	mov	r3, fp
 801b7e2:	2205      	movs	r2, #5
 801b7e4:	4648      	mov	r0, r9
 801b7e6:	f000 fd6f 	bl	801c2c8 <__multadd>
 801b7ea:	4601      	mov	r1, r0
 801b7ec:	4604      	mov	r4, r0
 801b7ee:	9802      	ldr	r0, [sp, #8]
 801b7f0:	f000 ffc4 	bl	801c77c <__mcmp>
 801b7f4:	2800      	cmp	r0, #0
 801b7f6:	f77f ada3 	ble.w	801b340 <_dtoa_r+0x490>
 801b7fa:	4656      	mov	r6, sl
 801b7fc:	2331      	movs	r3, #49	@ 0x31
 801b7fe:	f806 3b01 	strb.w	r3, [r6], #1
 801b802:	f108 0801 	add.w	r8, r8, #1
 801b806:	e59f      	b.n	801b348 <_dtoa_r+0x498>
 801b808:	9c03      	ldr	r4, [sp, #12]
 801b80a:	46b8      	mov	r8, r7
 801b80c:	4625      	mov	r5, r4
 801b80e:	e7f4      	b.n	801b7fa <_dtoa_r+0x94a>
 801b810:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b816:	2b00      	cmp	r3, #0
 801b818:	f000 8101 	beq.w	801ba1e <_dtoa_r+0xb6e>
 801b81c:	2e00      	cmp	r6, #0
 801b81e:	dd05      	ble.n	801b82c <_dtoa_r+0x97c>
 801b820:	4629      	mov	r1, r5
 801b822:	4632      	mov	r2, r6
 801b824:	4648      	mov	r0, r9
 801b826:	f000 ff3d 	bl	801c6a4 <__lshift>
 801b82a:	4605      	mov	r5, r0
 801b82c:	9b08      	ldr	r3, [sp, #32]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d05c      	beq.n	801b8ec <_dtoa_r+0xa3c>
 801b832:	6869      	ldr	r1, [r5, #4]
 801b834:	4648      	mov	r0, r9
 801b836:	f000 fce5 	bl	801c204 <_Balloc>
 801b83a:	4606      	mov	r6, r0
 801b83c:	b928      	cbnz	r0, 801b84a <_dtoa_r+0x99a>
 801b83e:	4b82      	ldr	r3, [pc, #520]	@ (801ba48 <_dtoa_r+0xb98>)
 801b840:	4602      	mov	r2, r0
 801b842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b846:	f7ff bb4a 	b.w	801aede <_dtoa_r+0x2e>
 801b84a:	692a      	ldr	r2, [r5, #16]
 801b84c:	3202      	adds	r2, #2
 801b84e:	0092      	lsls	r2, r2, #2
 801b850:	f105 010c 	add.w	r1, r5, #12
 801b854:	300c      	adds	r0, #12
 801b856:	f7ff fa0c 	bl	801ac72 <memcpy>
 801b85a:	2201      	movs	r2, #1
 801b85c:	4631      	mov	r1, r6
 801b85e:	4648      	mov	r0, r9
 801b860:	f000 ff20 	bl	801c6a4 <__lshift>
 801b864:	f10a 0301 	add.w	r3, sl, #1
 801b868:	9300      	str	r3, [sp, #0]
 801b86a:	eb0a 030b 	add.w	r3, sl, fp
 801b86e:	9308      	str	r3, [sp, #32]
 801b870:	9b04      	ldr	r3, [sp, #16]
 801b872:	f003 0301 	and.w	r3, r3, #1
 801b876:	462f      	mov	r7, r5
 801b878:	9306      	str	r3, [sp, #24]
 801b87a:	4605      	mov	r5, r0
 801b87c:	9b00      	ldr	r3, [sp, #0]
 801b87e:	9802      	ldr	r0, [sp, #8]
 801b880:	4621      	mov	r1, r4
 801b882:	f103 3bff 	add.w	fp, r3, #4294967295
 801b886:	f7ff fa89 	bl	801ad9c <quorem>
 801b88a:	4603      	mov	r3, r0
 801b88c:	3330      	adds	r3, #48	@ 0x30
 801b88e:	9003      	str	r0, [sp, #12]
 801b890:	4639      	mov	r1, r7
 801b892:	9802      	ldr	r0, [sp, #8]
 801b894:	9309      	str	r3, [sp, #36]	@ 0x24
 801b896:	f000 ff71 	bl	801c77c <__mcmp>
 801b89a:	462a      	mov	r2, r5
 801b89c:	9004      	str	r0, [sp, #16]
 801b89e:	4621      	mov	r1, r4
 801b8a0:	4648      	mov	r0, r9
 801b8a2:	f000 ff87 	bl	801c7b4 <__mdiff>
 801b8a6:	68c2      	ldr	r2, [r0, #12]
 801b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8aa:	4606      	mov	r6, r0
 801b8ac:	bb02      	cbnz	r2, 801b8f0 <_dtoa_r+0xa40>
 801b8ae:	4601      	mov	r1, r0
 801b8b0:	9802      	ldr	r0, [sp, #8]
 801b8b2:	f000 ff63 	bl	801c77c <__mcmp>
 801b8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8b8:	4602      	mov	r2, r0
 801b8ba:	4631      	mov	r1, r6
 801b8bc:	4648      	mov	r0, r9
 801b8be:	920c      	str	r2, [sp, #48]	@ 0x30
 801b8c0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b8c2:	f000 fcdf 	bl	801c284 <_Bfree>
 801b8c6:	9b07      	ldr	r3, [sp, #28]
 801b8c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b8ca:	9e00      	ldr	r6, [sp, #0]
 801b8cc:	ea42 0103 	orr.w	r1, r2, r3
 801b8d0:	9b06      	ldr	r3, [sp, #24]
 801b8d2:	4319      	orrs	r1, r3
 801b8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8d6:	d10d      	bne.n	801b8f4 <_dtoa_r+0xa44>
 801b8d8:	2b39      	cmp	r3, #57	@ 0x39
 801b8da:	d027      	beq.n	801b92c <_dtoa_r+0xa7c>
 801b8dc:	9a04      	ldr	r2, [sp, #16]
 801b8de:	2a00      	cmp	r2, #0
 801b8e0:	dd01      	ble.n	801b8e6 <_dtoa_r+0xa36>
 801b8e2:	9b03      	ldr	r3, [sp, #12]
 801b8e4:	3331      	adds	r3, #49	@ 0x31
 801b8e6:	f88b 3000 	strb.w	r3, [fp]
 801b8ea:	e52e      	b.n	801b34a <_dtoa_r+0x49a>
 801b8ec:	4628      	mov	r0, r5
 801b8ee:	e7b9      	b.n	801b864 <_dtoa_r+0x9b4>
 801b8f0:	2201      	movs	r2, #1
 801b8f2:	e7e2      	b.n	801b8ba <_dtoa_r+0xa0a>
 801b8f4:	9904      	ldr	r1, [sp, #16]
 801b8f6:	2900      	cmp	r1, #0
 801b8f8:	db04      	blt.n	801b904 <_dtoa_r+0xa54>
 801b8fa:	9807      	ldr	r0, [sp, #28]
 801b8fc:	4301      	orrs	r1, r0
 801b8fe:	9806      	ldr	r0, [sp, #24]
 801b900:	4301      	orrs	r1, r0
 801b902:	d120      	bne.n	801b946 <_dtoa_r+0xa96>
 801b904:	2a00      	cmp	r2, #0
 801b906:	ddee      	ble.n	801b8e6 <_dtoa_r+0xa36>
 801b908:	9902      	ldr	r1, [sp, #8]
 801b90a:	9300      	str	r3, [sp, #0]
 801b90c:	2201      	movs	r2, #1
 801b90e:	4648      	mov	r0, r9
 801b910:	f000 fec8 	bl	801c6a4 <__lshift>
 801b914:	4621      	mov	r1, r4
 801b916:	9002      	str	r0, [sp, #8]
 801b918:	f000 ff30 	bl	801c77c <__mcmp>
 801b91c:	2800      	cmp	r0, #0
 801b91e:	9b00      	ldr	r3, [sp, #0]
 801b920:	dc02      	bgt.n	801b928 <_dtoa_r+0xa78>
 801b922:	d1e0      	bne.n	801b8e6 <_dtoa_r+0xa36>
 801b924:	07da      	lsls	r2, r3, #31
 801b926:	d5de      	bpl.n	801b8e6 <_dtoa_r+0xa36>
 801b928:	2b39      	cmp	r3, #57	@ 0x39
 801b92a:	d1da      	bne.n	801b8e2 <_dtoa_r+0xa32>
 801b92c:	2339      	movs	r3, #57	@ 0x39
 801b92e:	f88b 3000 	strb.w	r3, [fp]
 801b932:	4633      	mov	r3, r6
 801b934:	461e      	mov	r6, r3
 801b936:	3b01      	subs	r3, #1
 801b938:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b93c:	2a39      	cmp	r2, #57	@ 0x39
 801b93e:	d04e      	beq.n	801b9de <_dtoa_r+0xb2e>
 801b940:	3201      	adds	r2, #1
 801b942:	701a      	strb	r2, [r3, #0]
 801b944:	e501      	b.n	801b34a <_dtoa_r+0x49a>
 801b946:	2a00      	cmp	r2, #0
 801b948:	dd03      	ble.n	801b952 <_dtoa_r+0xaa2>
 801b94a:	2b39      	cmp	r3, #57	@ 0x39
 801b94c:	d0ee      	beq.n	801b92c <_dtoa_r+0xa7c>
 801b94e:	3301      	adds	r3, #1
 801b950:	e7c9      	b.n	801b8e6 <_dtoa_r+0xa36>
 801b952:	9a00      	ldr	r2, [sp, #0]
 801b954:	9908      	ldr	r1, [sp, #32]
 801b956:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b95a:	428a      	cmp	r2, r1
 801b95c:	d028      	beq.n	801b9b0 <_dtoa_r+0xb00>
 801b95e:	9902      	ldr	r1, [sp, #8]
 801b960:	2300      	movs	r3, #0
 801b962:	220a      	movs	r2, #10
 801b964:	4648      	mov	r0, r9
 801b966:	f000 fcaf 	bl	801c2c8 <__multadd>
 801b96a:	42af      	cmp	r7, r5
 801b96c:	9002      	str	r0, [sp, #8]
 801b96e:	f04f 0300 	mov.w	r3, #0
 801b972:	f04f 020a 	mov.w	r2, #10
 801b976:	4639      	mov	r1, r7
 801b978:	4648      	mov	r0, r9
 801b97a:	d107      	bne.n	801b98c <_dtoa_r+0xadc>
 801b97c:	f000 fca4 	bl	801c2c8 <__multadd>
 801b980:	4607      	mov	r7, r0
 801b982:	4605      	mov	r5, r0
 801b984:	9b00      	ldr	r3, [sp, #0]
 801b986:	3301      	adds	r3, #1
 801b988:	9300      	str	r3, [sp, #0]
 801b98a:	e777      	b.n	801b87c <_dtoa_r+0x9cc>
 801b98c:	f000 fc9c 	bl	801c2c8 <__multadd>
 801b990:	4629      	mov	r1, r5
 801b992:	4607      	mov	r7, r0
 801b994:	2300      	movs	r3, #0
 801b996:	220a      	movs	r2, #10
 801b998:	4648      	mov	r0, r9
 801b99a:	f000 fc95 	bl	801c2c8 <__multadd>
 801b99e:	4605      	mov	r5, r0
 801b9a0:	e7f0      	b.n	801b984 <_dtoa_r+0xad4>
 801b9a2:	f1bb 0f00 	cmp.w	fp, #0
 801b9a6:	bfcc      	ite	gt
 801b9a8:	465e      	movgt	r6, fp
 801b9aa:	2601      	movle	r6, #1
 801b9ac:	4456      	add	r6, sl
 801b9ae:	2700      	movs	r7, #0
 801b9b0:	9902      	ldr	r1, [sp, #8]
 801b9b2:	9300      	str	r3, [sp, #0]
 801b9b4:	2201      	movs	r2, #1
 801b9b6:	4648      	mov	r0, r9
 801b9b8:	f000 fe74 	bl	801c6a4 <__lshift>
 801b9bc:	4621      	mov	r1, r4
 801b9be:	9002      	str	r0, [sp, #8]
 801b9c0:	f000 fedc 	bl	801c77c <__mcmp>
 801b9c4:	2800      	cmp	r0, #0
 801b9c6:	dcb4      	bgt.n	801b932 <_dtoa_r+0xa82>
 801b9c8:	d102      	bne.n	801b9d0 <_dtoa_r+0xb20>
 801b9ca:	9b00      	ldr	r3, [sp, #0]
 801b9cc:	07db      	lsls	r3, r3, #31
 801b9ce:	d4b0      	bmi.n	801b932 <_dtoa_r+0xa82>
 801b9d0:	4633      	mov	r3, r6
 801b9d2:	461e      	mov	r6, r3
 801b9d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b9d8:	2a30      	cmp	r2, #48	@ 0x30
 801b9da:	d0fa      	beq.n	801b9d2 <_dtoa_r+0xb22>
 801b9dc:	e4b5      	b.n	801b34a <_dtoa_r+0x49a>
 801b9de:	459a      	cmp	sl, r3
 801b9e0:	d1a8      	bne.n	801b934 <_dtoa_r+0xa84>
 801b9e2:	2331      	movs	r3, #49	@ 0x31
 801b9e4:	f108 0801 	add.w	r8, r8, #1
 801b9e8:	f88a 3000 	strb.w	r3, [sl]
 801b9ec:	e4ad      	b.n	801b34a <_dtoa_r+0x49a>
 801b9ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b9f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801ba4c <_dtoa_r+0xb9c>
 801b9f4:	b11b      	cbz	r3, 801b9fe <_dtoa_r+0xb4e>
 801b9f6:	f10a 0308 	add.w	r3, sl, #8
 801b9fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b9fc:	6013      	str	r3, [r2, #0]
 801b9fe:	4650      	mov	r0, sl
 801ba00:	b017      	add	sp, #92	@ 0x5c
 801ba02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba06:	9b07      	ldr	r3, [sp, #28]
 801ba08:	2b01      	cmp	r3, #1
 801ba0a:	f77f ae2e 	ble.w	801b66a <_dtoa_r+0x7ba>
 801ba0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ba10:	9308      	str	r3, [sp, #32]
 801ba12:	2001      	movs	r0, #1
 801ba14:	e64d      	b.n	801b6b2 <_dtoa_r+0x802>
 801ba16:	f1bb 0f00 	cmp.w	fp, #0
 801ba1a:	f77f aed9 	ble.w	801b7d0 <_dtoa_r+0x920>
 801ba1e:	4656      	mov	r6, sl
 801ba20:	9802      	ldr	r0, [sp, #8]
 801ba22:	4621      	mov	r1, r4
 801ba24:	f7ff f9ba 	bl	801ad9c <quorem>
 801ba28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801ba2c:	f806 3b01 	strb.w	r3, [r6], #1
 801ba30:	eba6 020a 	sub.w	r2, r6, sl
 801ba34:	4593      	cmp	fp, r2
 801ba36:	ddb4      	ble.n	801b9a2 <_dtoa_r+0xaf2>
 801ba38:	9902      	ldr	r1, [sp, #8]
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	220a      	movs	r2, #10
 801ba3e:	4648      	mov	r0, r9
 801ba40:	f000 fc42 	bl	801c2c8 <__multadd>
 801ba44:	9002      	str	r0, [sp, #8]
 801ba46:	e7eb      	b.n	801ba20 <_dtoa_r+0xb70>
 801ba48:	08021b73 	.word	0x08021b73
 801ba4c:	08021b0e 	.word	0x08021b0e

0801ba50 <_free_r>:
 801ba50:	b538      	push	{r3, r4, r5, lr}
 801ba52:	4605      	mov	r5, r0
 801ba54:	2900      	cmp	r1, #0
 801ba56:	d041      	beq.n	801badc <_free_r+0x8c>
 801ba58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba5c:	1f0c      	subs	r4, r1, #4
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	bfb8      	it	lt
 801ba62:	18e4      	addlt	r4, r4, r3
 801ba64:	f7fc fa28 	bl	8017eb8 <__malloc_lock>
 801ba68:	4a1d      	ldr	r2, [pc, #116]	@ (801bae0 <_free_r+0x90>)
 801ba6a:	6813      	ldr	r3, [r2, #0]
 801ba6c:	b933      	cbnz	r3, 801ba7c <_free_r+0x2c>
 801ba6e:	6063      	str	r3, [r4, #4]
 801ba70:	6014      	str	r4, [r2, #0]
 801ba72:	4628      	mov	r0, r5
 801ba74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba78:	f7fc ba24 	b.w	8017ec4 <__malloc_unlock>
 801ba7c:	42a3      	cmp	r3, r4
 801ba7e:	d908      	bls.n	801ba92 <_free_r+0x42>
 801ba80:	6820      	ldr	r0, [r4, #0]
 801ba82:	1821      	adds	r1, r4, r0
 801ba84:	428b      	cmp	r3, r1
 801ba86:	bf01      	itttt	eq
 801ba88:	6819      	ldreq	r1, [r3, #0]
 801ba8a:	685b      	ldreq	r3, [r3, #4]
 801ba8c:	1809      	addeq	r1, r1, r0
 801ba8e:	6021      	streq	r1, [r4, #0]
 801ba90:	e7ed      	b.n	801ba6e <_free_r+0x1e>
 801ba92:	461a      	mov	r2, r3
 801ba94:	685b      	ldr	r3, [r3, #4]
 801ba96:	b10b      	cbz	r3, 801ba9c <_free_r+0x4c>
 801ba98:	42a3      	cmp	r3, r4
 801ba9a:	d9fa      	bls.n	801ba92 <_free_r+0x42>
 801ba9c:	6811      	ldr	r1, [r2, #0]
 801ba9e:	1850      	adds	r0, r2, r1
 801baa0:	42a0      	cmp	r0, r4
 801baa2:	d10b      	bne.n	801babc <_free_r+0x6c>
 801baa4:	6820      	ldr	r0, [r4, #0]
 801baa6:	4401      	add	r1, r0
 801baa8:	1850      	adds	r0, r2, r1
 801baaa:	4283      	cmp	r3, r0
 801baac:	6011      	str	r1, [r2, #0]
 801baae:	d1e0      	bne.n	801ba72 <_free_r+0x22>
 801bab0:	6818      	ldr	r0, [r3, #0]
 801bab2:	685b      	ldr	r3, [r3, #4]
 801bab4:	6053      	str	r3, [r2, #4]
 801bab6:	4408      	add	r0, r1
 801bab8:	6010      	str	r0, [r2, #0]
 801baba:	e7da      	b.n	801ba72 <_free_r+0x22>
 801babc:	d902      	bls.n	801bac4 <_free_r+0x74>
 801babe:	230c      	movs	r3, #12
 801bac0:	602b      	str	r3, [r5, #0]
 801bac2:	e7d6      	b.n	801ba72 <_free_r+0x22>
 801bac4:	6820      	ldr	r0, [r4, #0]
 801bac6:	1821      	adds	r1, r4, r0
 801bac8:	428b      	cmp	r3, r1
 801baca:	bf04      	itt	eq
 801bacc:	6819      	ldreq	r1, [r3, #0]
 801bace:	685b      	ldreq	r3, [r3, #4]
 801bad0:	6063      	str	r3, [r4, #4]
 801bad2:	bf04      	itt	eq
 801bad4:	1809      	addeq	r1, r1, r0
 801bad6:	6021      	streq	r1, [r4, #0]
 801bad8:	6054      	str	r4, [r2, #4]
 801bada:	e7ca      	b.n	801ba72 <_free_r+0x22>
 801badc:	bd38      	pop	{r3, r4, r5, pc}
 801bade:	bf00      	nop
 801bae0:	20005d90 	.word	0x20005d90

0801bae4 <rshift>:
 801bae4:	6903      	ldr	r3, [r0, #16]
 801bae6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801baea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801baee:	ea4f 1261 	mov.w	r2, r1, asr #5
 801baf2:	f100 0414 	add.w	r4, r0, #20
 801baf6:	dd45      	ble.n	801bb84 <rshift+0xa0>
 801baf8:	f011 011f 	ands.w	r1, r1, #31
 801bafc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801bb00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801bb04:	d10c      	bne.n	801bb20 <rshift+0x3c>
 801bb06:	f100 0710 	add.w	r7, r0, #16
 801bb0a:	4629      	mov	r1, r5
 801bb0c:	42b1      	cmp	r1, r6
 801bb0e:	d334      	bcc.n	801bb7a <rshift+0x96>
 801bb10:	1a9b      	subs	r3, r3, r2
 801bb12:	009b      	lsls	r3, r3, #2
 801bb14:	1eea      	subs	r2, r5, #3
 801bb16:	4296      	cmp	r6, r2
 801bb18:	bf38      	it	cc
 801bb1a:	2300      	movcc	r3, #0
 801bb1c:	4423      	add	r3, r4
 801bb1e:	e015      	b.n	801bb4c <rshift+0x68>
 801bb20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801bb24:	f1c1 0820 	rsb	r8, r1, #32
 801bb28:	40cf      	lsrs	r7, r1
 801bb2a:	f105 0e04 	add.w	lr, r5, #4
 801bb2e:	46a1      	mov	r9, r4
 801bb30:	4576      	cmp	r6, lr
 801bb32:	46f4      	mov	ip, lr
 801bb34:	d815      	bhi.n	801bb62 <rshift+0x7e>
 801bb36:	1a9a      	subs	r2, r3, r2
 801bb38:	0092      	lsls	r2, r2, #2
 801bb3a:	3a04      	subs	r2, #4
 801bb3c:	3501      	adds	r5, #1
 801bb3e:	42ae      	cmp	r6, r5
 801bb40:	bf38      	it	cc
 801bb42:	2200      	movcc	r2, #0
 801bb44:	18a3      	adds	r3, r4, r2
 801bb46:	50a7      	str	r7, [r4, r2]
 801bb48:	b107      	cbz	r7, 801bb4c <rshift+0x68>
 801bb4a:	3304      	adds	r3, #4
 801bb4c:	1b1a      	subs	r2, r3, r4
 801bb4e:	42a3      	cmp	r3, r4
 801bb50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801bb54:	bf08      	it	eq
 801bb56:	2300      	moveq	r3, #0
 801bb58:	6102      	str	r2, [r0, #16]
 801bb5a:	bf08      	it	eq
 801bb5c:	6143      	streq	r3, [r0, #20]
 801bb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb62:	f8dc c000 	ldr.w	ip, [ip]
 801bb66:	fa0c fc08 	lsl.w	ip, ip, r8
 801bb6a:	ea4c 0707 	orr.w	r7, ip, r7
 801bb6e:	f849 7b04 	str.w	r7, [r9], #4
 801bb72:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bb76:	40cf      	lsrs	r7, r1
 801bb78:	e7da      	b.n	801bb30 <rshift+0x4c>
 801bb7a:	f851 cb04 	ldr.w	ip, [r1], #4
 801bb7e:	f847 cf04 	str.w	ip, [r7, #4]!
 801bb82:	e7c3      	b.n	801bb0c <rshift+0x28>
 801bb84:	4623      	mov	r3, r4
 801bb86:	e7e1      	b.n	801bb4c <rshift+0x68>

0801bb88 <__hexdig_fun>:
 801bb88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801bb8c:	2b09      	cmp	r3, #9
 801bb8e:	d802      	bhi.n	801bb96 <__hexdig_fun+0xe>
 801bb90:	3820      	subs	r0, #32
 801bb92:	b2c0      	uxtb	r0, r0
 801bb94:	4770      	bx	lr
 801bb96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801bb9a:	2b05      	cmp	r3, #5
 801bb9c:	d801      	bhi.n	801bba2 <__hexdig_fun+0x1a>
 801bb9e:	3847      	subs	r0, #71	@ 0x47
 801bba0:	e7f7      	b.n	801bb92 <__hexdig_fun+0xa>
 801bba2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801bba6:	2b05      	cmp	r3, #5
 801bba8:	d801      	bhi.n	801bbae <__hexdig_fun+0x26>
 801bbaa:	3827      	subs	r0, #39	@ 0x27
 801bbac:	e7f1      	b.n	801bb92 <__hexdig_fun+0xa>
 801bbae:	2000      	movs	r0, #0
 801bbb0:	4770      	bx	lr
	...

0801bbb4 <__gethex>:
 801bbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbb8:	b085      	sub	sp, #20
 801bbba:	468a      	mov	sl, r1
 801bbbc:	9302      	str	r3, [sp, #8]
 801bbbe:	680b      	ldr	r3, [r1, #0]
 801bbc0:	9001      	str	r0, [sp, #4]
 801bbc2:	4690      	mov	r8, r2
 801bbc4:	1c9c      	adds	r4, r3, #2
 801bbc6:	46a1      	mov	r9, r4
 801bbc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801bbcc:	2830      	cmp	r0, #48	@ 0x30
 801bbce:	d0fa      	beq.n	801bbc6 <__gethex+0x12>
 801bbd0:	eba9 0303 	sub.w	r3, r9, r3
 801bbd4:	f1a3 0b02 	sub.w	fp, r3, #2
 801bbd8:	f7ff ffd6 	bl	801bb88 <__hexdig_fun>
 801bbdc:	4605      	mov	r5, r0
 801bbde:	2800      	cmp	r0, #0
 801bbe0:	d168      	bne.n	801bcb4 <__gethex+0x100>
 801bbe2:	49a0      	ldr	r1, [pc, #640]	@ (801be64 <__gethex+0x2b0>)
 801bbe4:	2201      	movs	r2, #1
 801bbe6:	4648      	mov	r0, r9
 801bbe8:	f7fd ffcf 	bl	8019b8a <strncmp>
 801bbec:	4607      	mov	r7, r0
 801bbee:	2800      	cmp	r0, #0
 801bbf0:	d167      	bne.n	801bcc2 <__gethex+0x10e>
 801bbf2:	f899 0001 	ldrb.w	r0, [r9, #1]
 801bbf6:	4626      	mov	r6, r4
 801bbf8:	f7ff ffc6 	bl	801bb88 <__hexdig_fun>
 801bbfc:	2800      	cmp	r0, #0
 801bbfe:	d062      	beq.n	801bcc6 <__gethex+0x112>
 801bc00:	4623      	mov	r3, r4
 801bc02:	7818      	ldrb	r0, [r3, #0]
 801bc04:	2830      	cmp	r0, #48	@ 0x30
 801bc06:	4699      	mov	r9, r3
 801bc08:	f103 0301 	add.w	r3, r3, #1
 801bc0c:	d0f9      	beq.n	801bc02 <__gethex+0x4e>
 801bc0e:	f7ff ffbb 	bl	801bb88 <__hexdig_fun>
 801bc12:	fab0 f580 	clz	r5, r0
 801bc16:	096d      	lsrs	r5, r5, #5
 801bc18:	f04f 0b01 	mov.w	fp, #1
 801bc1c:	464a      	mov	r2, r9
 801bc1e:	4616      	mov	r6, r2
 801bc20:	3201      	adds	r2, #1
 801bc22:	7830      	ldrb	r0, [r6, #0]
 801bc24:	f7ff ffb0 	bl	801bb88 <__hexdig_fun>
 801bc28:	2800      	cmp	r0, #0
 801bc2a:	d1f8      	bne.n	801bc1e <__gethex+0x6a>
 801bc2c:	498d      	ldr	r1, [pc, #564]	@ (801be64 <__gethex+0x2b0>)
 801bc2e:	2201      	movs	r2, #1
 801bc30:	4630      	mov	r0, r6
 801bc32:	f7fd ffaa 	bl	8019b8a <strncmp>
 801bc36:	2800      	cmp	r0, #0
 801bc38:	d13f      	bne.n	801bcba <__gethex+0x106>
 801bc3a:	b944      	cbnz	r4, 801bc4e <__gethex+0x9a>
 801bc3c:	1c74      	adds	r4, r6, #1
 801bc3e:	4622      	mov	r2, r4
 801bc40:	4616      	mov	r6, r2
 801bc42:	3201      	adds	r2, #1
 801bc44:	7830      	ldrb	r0, [r6, #0]
 801bc46:	f7ff ff9f 	bl	801bb88 <__hexdig_fun>
 801bc4a:	2800      	cmp	r0, #0
 801bc4c:	d1f8      	bne.n	801bc40 <__gethex+0x8c>
 801bc4e:	1ba4      	subs	r4, r4, r6
 801bc50:	00a7      	lsls	r7, r4, #2
 801bc52:	7833      	ldrb	r3, [r6, #0]
 801bc54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801bc58:	2b50      	cmp	r3, #80	@ 0x50
 801bc5a:	d13e      	bne.n	801bcda <__gethex+0x126>
 801bc5c:	7873      	ldrb	r3, [r6, #1]
 801bc5e:	2b2b      	cmp	r3, #43	@ 0x2b
 801bc60:	d033      	beq.n	801bcca <__gethex+0x116>
 801bc62:	2b2d      	cmp	r3, #45	@ 0x2d
 801bc64:	d034      	beq.n	801bcd0 <__gethex+0x11c>
 801bc66:	1c71      	adds	r1, r6, #1
 801bc68:	2400      	movs	r4, #0
 801bc6a:	7808      	ldrb	r0, [r1, #0]
 801bc6c:	f7ff ff8c 	bl	801bb88 <__hexdig_fun>
 801bc70:	1e43      	subs	r3, r0, #1
 801bc72:	b2db      	uxtb	r3, r3
 801bc74:	2b18      	cmp	r3, #24
 801bc76:	d830      	bhi.n	801bcda <__gethex+0x126>
 801bc78:	f1a0 0210 	sub.w	r2, r0, #16
 801bc7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801bc80:	f7ff ff82 	bl	801bb88 <__hexdig_fun>
 801bc84:	f100 3cff 	add.w	ip, r0, #4294967295
 801bc88:	fa5f fc8c 	uxtb.w	ip, ip
 801bc8c:	f1bc 0f18 	cmp.w	ip, #24
 801bc90:	f04f 030a 	mov.w	r3, #10
 801bc94:	d91e      	bls.n	801bcd4 <__gethex+0x120>
 801bc96:	b104      	cbz	r4, 801bc9a <__gethex+0xe6>
 801bc98:	4252      	negs	r2, r2
 801bc9a:	4417      	add	r7, r2
 801bc9c:	f8ca 1000 	str.w	r1, [sl]
 801bca0:	b1ed      	cbz	r5, 801bcde <__gethex+0x12a>
 801bca2:	f1bb 0f00 	cmp.w	fp, #0
 801bca6:	bf0c      	ite	eq
 801bca8:	2506      	moveq	r5, #6
 801bcaa:	2500      	movne	r5, #0
 801bcac:	4628      	mov	r0, r5
 801bcae:	b005      	add	sp, #20
 801bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcb4:	2500      	movs	r5, #0
 801bcb6:	462c      	mov	r4, r5
 801bcb8:	e7b0      	b.n	801bc1c <__gethex+0x68>
 801bcba:	2c00      	cmp	r4, #0
 801bcbc:	d1c7      	bne.n	801bc4e <__gethex+0x9a>
 801bcbe:	4627      	mov	r7, r4
 801bcc0:	e7c7      	b.n	801bc52 <__gethex+0x9e>
 801bcc2:	464e      	mov	r6, r9
 801bcc4:	462f      	mov	r7, r5
 801bcc6:	2501      	movs	r5, #1
 801bcc8:	e7c3      	b.n	801bc52 <__gethex+0x9e>
 801bcca:	2400      	movs	r4, #0
 801bccc:	1cb1      	adds	r1, r6, #2
 801bcce:	e7cc      	b.n	801bc6a <__gethex+0xb6>
 801bcd0:	2401      	movs	r4, #1
 801bcd2:	e7fb      	b.n	801bccc <__gethex+0x118>
 801bcd4:	fb03 0002 	mla	r0, r3, r2, r0
 801bcd8:	e7ce      	b.n	801bc78 <__gethex+0xc4>
 801bcda:	4631      	mov	r1, r6
 801bcdc:	e7de      	b.n	801bc9c <__gethex+0xe8>
 801bcde:	eba6 0309 	sub.w	r3, r6, r9
 801bce2:	3b01      	subs	r3, #1
 801bce4:	4629      	mov	r1, r5
 801bce6:	2b07      	cmp	r3, #7
 801bce8:	dc0a      	bgt.n	801bd00 <__gethex+0x14c>
 801bcea:	9801      	ldr	r0, [sp, #4]
 801bcec:	f000 fa8a 	bl	801c204 <_Balloc>
 801bcf0:	4604      	mov	r4, r0
 801bcf2:	b940      	cbnz	r0, 801bd06 <__gethex+0x152>
 801bcf4:	4b5c      	ldr	r3, [pc, #368]	@ (801be68 <__gethex+0x2b4>)
 801bcf6:	4602      	mov	r2, r0
 801bcf8:	21e4      	movs	r1, #228	@ 0xe4
 801bcfa:	485c      	ldr	r0, [pc, #368]	@ (801be6c <__gethex+0x2b8>)
 801bcfc:	f7ff f828 	bl	801ad50 <__assert_func>
 801bd00:	3101      	adds	r1, #1
 801bd02:	105b      	asrs	r3, r3, #1
 801bd04:	e7ef      	b.n	801bce6 <__gethex+0x132>
 801bd06:	f100 0a14 	add.w	sl, r0, #20
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	4655      	mov	r5, sl
 801bd0e:	469b      	mov	fp, r3
 801bd10:	45b1      	cmp	r9, r6
 801bd12:	d337      	bcc.n	801bd84 <__gethex+0x1d0>
 801bd14:	f845 bb04 	str.w	fp, [r5], #4
 801bd18:	eba5 050a 	sub.w	r5, r5, sl
 801bd1c:	10ad      	asrs	r5, r5, #2
 801bd1e:	6125      	str	r5, [r4, #16]
 801bd20:	4658      	mov	r0, fp
 801bd22:	f000 fb61 	bl	801c3e8 <__hi0bits>
 801bd26:	016d      	lsls	r5, r5, #5
 801bd28:	f8d8 6000 	ldr.w	r6, [r8]
 801bd2c:	1a2d      	subs	r5, r5, r0
 801bd2e:	42b5      	cmp	r5, r6
 801bd30:	dd54      	ble.n	801bddc <__gethex+0x228>
 801bd32:	1bad      	subs	r5, r5, r6
 801bd34:	4629      	mov	r1, r5
 801bd36:	4620      	mov	r0, r4
 801bd38:	f000 feed 	bl	801cb16 <__any_on>
 801bd3c:	4681      	mov	r9, r0
 801bd3e:	b178      	cbz	r0, 801bd60 <__gethex+0x1ac>
 801bd40:	1e6b      	subs	r3, r5, #1
 801bd42:	1159      	asrs	r1, r3, #5
 801bd44:	f003 021f 	and.w	r2, r3, #31
 801bd48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801bd4c:	f04f 0901 	mov.w	r9, #1
 801bd50:	fa09 f202 	lsl.w	r2, r9, r2
 801bd54:	420a      	tst	r2, r1
 801bd56:	d003      	beq.n	801bd60 <__gethex+0x1ac>
 801bd58:	454b      	cmp	r3, r9
 801bd5a:	dc36      	bgt.n	801bdca <__gethex+0x216>
 801bd5c:	f04f 0902 	mov.w	r9, #2
 801bd60:	4629      	mov	r1, r5
 801bd62:	4620      	mov	r0, r4
 801bd64:	f7ff febe 	bl	801bae4 <rshift>
 801bd68:	442f      	add	r7, r5
 801bd6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bd6e:	42bb      	cmp	r3, r7
 801bd70:	da42      	bge.n	801bdf8 <__gethex+0x244>
 801bd72:	9801      	ldr	r0, [sp, #4]
 801bd74:	4621      	mov	r1, r4
 801bd76:	f000 fa85 	bl	801c284 <_Bfree>
 801bd7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	6013      	str	r3, [r2, #0]
 801bd80:	25a3      	movs	r5, #163	@ 0xa3
 801bd82:	e793      	b.n	801bcac <__gethex+0xf8>
 801bd84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801bd88:	2a2e      	cmp	r2, #46	@ 0x2e
 801bd8a:	d012      	beq.n	801bdb2 <__gethex+0x1fe>
 801bd8c:	2b20      	cmp	r3, #32
 801bd8e:	d104      	bne.n	801bd9a <__gethex+0x1e6>
 801bd90:	f845 bb04 	str.w	fp, [r5], #4
 801bd94:	f04f 0b00 	mov.w	fp, #0
 801bd98:	465b      	mov	r3, fp
 801bd9a:	7830      	ldrb	r0, [r6, #0]
 801bd9c:	9303      	str	r3, [sp, #12]
 801bd9e:	f7ff fef3 	bl	801bb88 <__hexdig_fun>
 801bda2:	9b03      	ldr	r3, [sp, #12]
 801bda4:	f000 000f 	and.w	r0, r0, #15
 801bda8:	4098      	lsls	r0, r3
 801bdaa:	ea4b 0b00 	orr.w	fp, fp, r0
 801bdae:	3304      	adds	r3, #4
 801bdb0:	e7ae      	b.n	801bd10 <__gethex+0x15c>
 801bdb2:	45b1      	cmp	r9, r6
 801bdb4:	d8ea      	bhi.n	801bd8c <__gethex+0x1d8>
 801bdb6:	492b      	ldr	r1, [pc, #172]	@ (801be64 <__gethex+0x2b0>)
 801bdb8:	9303      	str	r3, [sp, #12]
 801bdba:	2201      	movs	r2, #1
 801bdbc:	4630      	mov	r0, r6
 801bdbe:	f7fd fee4 	bl	8019b8a <strncmp>
 801bdc2:	9b03      	ldr	r3, [sp, #12]
 801bdc4:	2800      	cmp	r0, #0
 801bdc6:	d1e1      	bne.n	801bd8c <__gethex+0x1d8>
 801bdc8:	e7a2      	b.n	801bd10 <__gethex+0x15c>
 801bdca:	1ea9      	subs	r1, r5, #2
 801bdcc:	4620      	mov	r0, r4
 801bdce:	f000 fea2 	bl	801cb16 <__any_on>
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	d0c2      	beq.n	801bd5c <__gethex+0x1a8>
 801bdd6:	f04f 0903 	mov.w	r9, #3
 801bdda:	e7c1      	b.n	801bd60 <__gethex+0x1ac>
 801bddc:	da09      	bge.n	801bdf2 <__gethex+0x23e>
 801bdde:	1b75      	subs	r5, r6, r5
 801bde0:	4621      	mov	r1, r4
 801bde2:	9801      	ldr	r0, [sp, #4]
 801bde4:	462a      	mov	r2, r5
 801bde6:	f000 fc5d 	bl	801c6a4 <__lshift>
 801bdea:	1b7f      	subs	r7, r7, r5
 801bdec:	4604      	mov	r4, r0
 801bdee:	f100 0a14 	add.w	sl, r0, #20
 801bdf2:	f04f 0900 	mov.w	r9, #0
 801bdf6:	e7b8      	b.n	801bd6a <__gethex+0x1b6>
 801bdf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801bdfc:	42bd      	cmp	r5, r7
 801bdfe:	dd6f      	ble.n	801bee0 <__gethex+0x32c>
 801be00:	1bed      	subs	r5, r5, r7
 801be02:	42ae      	cmp	r6, r5
 801be04:	dc34      	bgt.n	801be70 <__gethex+0x2bc>
 801be06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801be0a:	2b02      	cmp	r3, #2
 801be0c:	d022      	beq.n	801be54 <__gethex+0x2a0>
 801be0e:	2b03      	cmp	r3, #3
 801be10:	d024      	beq.n	801be5c <__gethex+0x2a8>
 801be12:	2b01      	cmp	r3, #1
 801be14:	d115      	bne.n	801be42 <__gethex+0x28e>
 801be16:	42ae      	cmp	r6, r5
 801be18:	d113      	bne.n	801be42 <__gethex+0x28e>
 801be1a:	2e01      	cmp	r6, #1
 801be1c:	d10b      	bne.n	801be36 <__gethex+0x282>
 801be1e:	9a02      	ldr	r2, [sp, #8]
 801be20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801be24:	6013      	str	r3, [r2, #0]
 801be26:	2301      	movs	r3, #1
 801be28:	6123      	str	r3, [r4, #16]
 801be2a:	f8ca 3000 	str.w	r3, [sl]
 801be2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801be30:	2562      	movs	r5, #98	@ 0x62
 801be32:	601c      	str	r4, [r3, #0]
 801be34:	e73a      	b.n	801bcac <__gethex+0xf8>
 801be36:	1e71      	subs	r1, r6, #1
 801be38:	4620      	mov	r0, r4
 801be3a:	f000 fe6c 	bl	801cb16 <__any_on>
 801be3e:	2800      	cmp	r0, #0
 801be40:	d1ed      	bne.n	801be1e <__gethex+0x26a>
 801be42:	9801      	ldr	r0, [sp, #4]
 801be44:	4621      	mov	r1, r4
 801be46:	f000 fa1d 	bl	801c284 <_Bfree>
 801be4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801be4c:	2300      	movs	r3, #0
 801be4e:	6013      	str	r3, [r2, #0]
 801be50:	2550      	movs	r5, #80	@ 0x50
 801be52:	e72b      	b.n	801bcac <__gethex+0xf8>
 801be54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801be56:	2b00      	cmp	r3, #0
 801be58:	d1f3      	bne.n	801be42 <__gethex+0x28e>
 801be5a:	e7e0      	b.n	801be1e <__gethex+0x26a>
 801be5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d1dd      	bne.n	801be1e <__gethex+0x26a>
 801be62:	e7ee      	b.n	801be42 <__gethex+0x28e>
 801be64:	080219d4 	.word	0x080219d4
 801be68:	08021b73 	.word	0x08021b73
 801be6c:	08021b84 	.word	0x08021b84
 801be70:	1e6f      	subs	r7, r5, #1
 801be72:	f1b9 0f00 	cmp.w	r9, #0
 801be76:	d130      	bne.n	801beda <__gethex+0x326>
 801be78:	b127      	cbz	r7, 801be84 <__gethex+0x2d0>
 801be7a:	4639      	mov	r1, r7
 801be7c:	4620      	mov	r0, r4
 801be7e:	f000 fe4a 	bl	801cb16 <__any_on>
 801be82:	4681      	mov	r9, r0
 801be84:	117a      	asrs	r2, r7, #5
 801be86:	2301      	movs	r3, #1
 801be88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801be8c:	f007 071f 	and.w	r7, r7, #31
 801be90:	40bb      	lsls	r3, r7
 801be92:	4213      	tst	r3, r2
 801be94:	4629      	mov	r1, r5
 801be96:	4620      	mov	r0, r4
 801be98:	bf18      	it	ne
 801be9a:	f049 0902 	orrne.w	r9, r9, #2
 801be9e:	f7ff fe21 	bl	801bae4 <rshift>
 801bea2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801bea6:	1b76      	subs	r6, r6, r5
 801bea8:	2502      	movs	r5, #2
 801beaa:	f1b9 0f00 	cmp.w	r9, #0
 801beae:	d047      	beq.n	801bf40 <__gethex+0x38c>
 801beb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801beb4:	2b02      	cmp	r3, #2
 801beb6:	d015      	beq.n	801bee4 <__gethex+0x330>
 801beb8:	2b03      	cmp	r3, #3
 801beba:	d017      	beq.n	801beec <__gethex+0x338>
 801bebc:	2b01      	cmp	r3, #1
 801bebe:	d109      	bne.n	801bed4 <__gethex+0x320>
 801bec0:	f019 0f02 	tst.w	r9, #2
 801bec4:	d006      	beq.n	801bed4 <__gethex+0x320>
 801bec6:	f8da 3000 	ldr.w	r3, [sl]
 801beca:	ea49 0903 	orr.w	r9, r9, r3
 801bece:	f019 0f01 	tst.w	r9, #1
 801bed2:	d10e      	bne.n	801bef2 <__gethex+0x33e>
 801bed4:	f045 0510 	orr.w	r5, r5, #16
 801bed8:	e032      	b.n	801bf40 <__gethex+0x38c>
 801beda:	f04f 0901 	mov.w	r9, #1
 801bede:	e7d1      	b.n	801be84 <__gethex+0x2d0>
 801bee0:	2501      	movs	r5, #1
 801bee2:	e7e2      	b.n	801beaa <__gethex+0x2f6>
 801bee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bee6:	f1c3 0301 	rsb	r3, r3, #1
 801beea:	930f      	str	r3, [sp, #60]	@ 0x3c
 801beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d0f0      	beq.n	801bed4 <__gethex+0x320>
 801bef2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bef6:	f104 0314 	add.w	r3, r4, #20
 801befa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801befe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801bf02:	f04f 0c00 	mov.w	ip, #0
 801bf06:	4618      	mov	r0, r3
 801bf08:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801bf10:	d01b      	beq.n	801bf4a <__gethex+0x396>
 801bf12:	3201      	adds	r2, #1
 801bf14:	6002      	str	r2, [r0, #0]
 801bf16:	2d02      	cmp	r5, #2
 801bf18:	f104 0314 	add.w	r3, r4, #20
 801bf1c:	d13c      	bne.n	801bf98 <__gethex+0x3e4>
 801bf1e:	f8d8 2000 	ldr.w	r2, [r8]
 801bf22:	3a01      	subs	r2, #1
 801bf24:	42b2      	cmp	r2, r6
 801bf26:	d109      	bne.n	801bf3c <__gethex+0x388>
 801bf28:	1171      	asrs	r1, r6, #5
 801bf2a:	2201      	movs	r2, #1
 801bf2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bf30:	f006 061f 	and.w	r6, r6, #31
 801bf34:	fa02 f606 	lsl.w	r6, r2, r6
 801bf38:	421e      	tst	r6, r3
 801bf3a:	d13a      	bne.n	801bfb2 <__gethex+0x3fe>
 801bf3c:	f045 0520 	orr.w	r5, r5, #32
 801bf40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf42:	601c      	str	r4, [r3, #0]
 801bf44:	9b02      	ldr	r3, [sp, #8]
 801bf46:	601f      	str	r7, [r3, #0]
 801bf48:	e6b0      	b.n	801bcac <__gethex+0xf8>
 801bf4a:	4299      	cmp	r1, r3
 801bf4c:	f843 cc04 	str.w	ip, [r3, #-4]
 801bf50:	d8d9      	bhi.n	801bf06 <__gethex+0x352>
 801bf52:	68a3      	ldr	r3, [r4, #8]
 801bf54:	459b      	cmp	fp, r3
 801bf56:	db17      	blt.n	801bf88 <__gethex+0x3d4>
 801bf58:	6861      	ldr	r1, [r4, #4]
 801bf5a:	9801      	ldr	r0, [sp, #4]
 801bf5c:	3101      	adds	r1, #1
 801bf5e:	f000 f951 	bl	801c204 <_Balloc>
 801bf62:	4681      	mov	r9, r0
 801bf64:	b918      	cbnz	r0, 801bf6e <__gethex+0x3ba>
 801bf66:	4b1a      	ldr	r3, [pc, #104]	@ (801bfd0 <__gethex+0x41c>)
 801bf68:	4602      	mov	r2, r0
 801bf6a:	2184      	movs	r1, #132	@ 0x84
 801bf6c:	e6c5      	b.n	801bcfa <__gethex+0x146>
 801bf6e:	6922      	ldr	r2, [r4, #16]
 801bf70:	3202      	adds	r2, #2
 801bf72:	f104 010c 	add.w	r1, r4, #12
 801bf76:	0092      	lsls	r2, r2, #2
 801bf78:	300c      	adds	r0, #12
 801bf7a:	f7fe fe7a 	bl	801ac72 <memcpy>
 801bf7e:	4621      	mov	r1, r4
 801bf80:	9801      	ldr	r0, [sp, #4]
 801bf82:	f000 f97f 	bl	801c284 <_Bfree>
 801bf86:	464c      	mov	r4, r9
 801bf88:	6923      	ldr	r3, [r4, #16]
 801bf8a:	1c5a      	adds	r2, r3, #1
 801bf8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bf90:	6122      	str	r2, [r4, #16]
 801bf92:	2201      	movs	r2, #1
 801bf94:	615a      	str	r2, [r3, #20]
 801bf96:	e7be      	b.n	801bf16 <__gethex+0x362>
 801bf98:	6922      	ldr	r2, [r4, #16]
 801bf9a:	455a      	cmp	r2, fp
 801bf9c:	dd0b      	ble.n	801bfb6 <__gethex+0x402>
 801bf9e:	2101      	movs	r1, #1
 801bfa0:	4620      	mov	r0, r4
 801bfa2:	f7ff fd9f 	bl	801bae4 <rshift>
 801bfa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bfaa:	3701      	adds	r7, #1
 801bfac:	42bb      	cmp	r3, r7
 801bfae:	f6ff aee0 	blt.w	801bd72 <__gethex+0x1be>
 801bfb2:	2501      	movs	r5, #1
 801bfb4:	e7c2      	b.n	801bf3c <__gethex+0x388>
 801bfb6:	f016 061f 	ands.w	r6, r6, #31
 801bfba:	d0fa      	beq.n	801bfb2 <__gethex+0x3fe>
 801bfbc:	4453      	add	r3, sl
 801bfbe:	f1c6 0620 	rsb	r6, r6, #32
 801bfc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801bfc6:	f000 fa0f 	bl	801c3e8 <__hi0bits>
 801bfca:	42b0      	cmp	r0, r6
 801bfcc:	dbe7      	blt.n	801bf9e <__gethex+0x3ea>
 801bfce:	e7f0      	b.n	801bfb2 <__gethex+0x3fe>
 801bfd0:	08021b73 	.word	0x08021b73

0801bfd4 <L_shift>:
 801bfd4:	f1c2 0208 	rsb	r2, r2, #8
 801bfd8:	0092      	lsls	r2, r2, #2
 801bfda:	b570      	push	{r4, r5, r6, lr}
 801bfdc:	f1c2 0620 	rsb	r6, r2, #32
 801bfe0:	6843      	ldr	r3, [r0, #4]
 801bfe2:	6804      	ldr	r4, [r0, #0]
 801bfe4:	fa03 f506 	lsl.w	r5, r3, r6
 801bfe8:	432c      	orrs	r4, r5
 801bfea:	40d3      	lsrs	r3, r2
 801bfec:	6004      	str	r4, [r0, #0]
 801bfee:	f840 3f04 	str.w	r3, [r0, #4]!
 801bff2:	4288      	cmp	r0, r1
 801bff4:	d3f4      	bcc.n	801bfe0 <L_shift+0xc>
 801bff6:	bd70      	pop	{r4, r5, r6, pc}

0801bff8 <__match>:
 801bff8:	b530      	push	{r4, r5, lr}
 801bffa:	6803      	ldr	r3, [r0, #0]
 801bffc:	3301      	adds	r3, #1
 801bffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c002:	b914      	cbnz	r4, 801c00a <__match+0x12>
 801c004:	6003      	str	r3, [r0, #0]
 801c006:	2001      	movs	r0, #1
 801c008:	bd30      	pop	{r4, r5, pc}
 801c00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c00e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801c012:	2d19      	cmp	r5, #25
 801c014:	bf98      	it	ls
 801c016:	3220      	addls	r2, #32
 801c018:	42a2      	cmp	r2, r4
 801c01a:	d0f0      	beq.n	801bffe <__match+0x6>
 801c01c:	2000      	movs	r0, #0
 801c01e:	e7f3      	b.n	801c008 <__match+0x10>

0801c020 <__hexnan>:
 801c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c024:	680b      	ldr	r3, [r1, #0]
 801c026:	6801      	ldr	r1, [r0, #0]
 801c028:	115e      	asrs	r6, r3, #5
 801c02a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c02e:	f013 031f 	ands.w	r3, r3, #31
 801c032:	b087      	sub	sp, #28
 801c034:	bf18      	it	ne
 801c036:	3604      	addne	r6, #4
 801c038:	2500      	movs	r5, #0
 801c03a:	1f37      	subs	r7, r6, #4
 801c03c:	4682      	mov	sl, r0
 801c03e:	4690      	mov	r8, r2
 801c040:	9301      	str	r3, [sp, #4]
 801c042:	f846 5c04 	str.w	r5, [r6, #-4]
 801c046:	46b9      	mov	r9, r7
 801c048:	463c      	mov	r4, r7
 801c04a:	9502      	str	r5, [sp, #8]
 801c04c:	46ab      	mov	fp, r5
 801c04e:	784a      	ldrb	r2, [r1, #1]
 801c050:	1c4b      	adds	r3, r1, #1
 801c052:	9303      	str	r3, [sp, #12]
 801c054:	b342      	cbz	r2, 801c0a8 <__hexnan+0x88>
 801c056:	4610      	mov	r0, r2
 801c058:	9105      	str	r1, [sp, #20]
 801c05a:	9204      	str	r2, [sp, #16]
 801c05c:	f7ff fd94 	bl	801bb88 <__hexdig_fun>
 801c060:	2800      	cmp	r0, #0
 801c062:	d151      	bne.n	801c108 <__hexnan+0xe8>
 801c064:	9a04      	ldr	r2, [sp, #16]
 801c066:	9905      	ldr	r1, [sp, #20]
 801c068:	2a20      	cmp	r2, #32
 801c06a:	d818      	bhi.n	801c09e <__hexnan+0x7e>
 801c06c:	9b02      	ldr	r3, [sp, #8]
 801c06e:	459b      	cmp	fp, r3
 801c070:	dd13      	ble.n	801c09a <__hexnan+0x7a>
 801c072:	454c      	cmp	r4, r9
 801c074:	d206      	bcs.n	801c084 <__hexnan+0x64>
 801c076:	2d07      	cmp	r5, #7
 801c078:	dc04      	bgt.n	801c084 <__hexnan+0x64>
 801c07a:	462a      	mov	r2, r5
 801c07c:	4649      	mov	r1, r9
 801c07e:	4620      	mov	r0, r4
 801c080:	f7ff ffa8 	bl	801bfd4 <L_shift>
 801c084:	4544      	cmp	r4, r8
 801c086:	d952      	bls.n	801c12e <__hexnan+0x10e>
 801c088:	2300      	movs	r3, #0
 801c08a:	f1a4 0904 	sub.w	r9, r4, #4
 801c08e:	f844 3c04 	str.w	r3, [r4, #-4]
 801c092:	f8cd b008 	str.w	fp, [sp, #8]
 801c096:	464c      	mov	r4, r9
 801c098:	461d      	mov	r5, r3
 801c09a:	9903      	ldr	r1, [sp, #12]
 801c09c:	e7d7      	b.n	801c04e <__hexnan+0x2e>
 801c09e:	2a29      	cmp	r2, #41	@ 0x29
 801c0a0:	d157      	bne.n	801c152 <__hexnan+0x132>
 801c0a2:	3102      	adds	r1, #2
 801c0a4:	f8ca 1000 	str.w	r1, [sl]
 801c0a8:	f1bb 0f00 	cmp.w	fp, #0
 801c0ac:	d051      	beq.n	801c152 <__hexnan+0x132>
 801c0ae:	454c      	cmp	r4, r9
 801c0b0:	d206      	bcs.n	801c0c0 <__hexnan+0xa0>
 801c0b2:	2d07      	cmp	r5, #7
 801c0b4:	dc04      	bgt.n	801c0c0 <__hexnan+0xa0>
 801c0b6:	462a      	mov	r2, r5
 801c0b8:	4649      	mov	r1, r9
 801c0ba:	4620      	mov	r0, r4
 801c0bc:	f7ff ff8a 	bl	801bfd4 <L_shift>
 801c0c0:	4544      	cmp	r4, r8
 801c0c2:	d936      	bls.n	801c132 <__hexnan+0x112>
 801c0c4:	f1a8 0204 	sub.w	r2, r8, #4
 801c0c8:	4623      	mov	r3, r4
 801c0ca:	f853 1b04 	ldr.w	r1, [r3], #4
 801c0ce:	f842 1f04 	str.w	r1, [r2, #4]!
 801c0d2:	429f      	cmp	r7, r3
 801c0d4:	d2f9      	bcs.n	801c0ca <__hexnan+0xaa>
 801c0d6:	1b3b      	subs	r3, r7, r4
 801c0d8:	f023 0303 	bic.w	r3, r3, #3
 801c0dc:	3304      	adds	r3, #4
 801c0de:	3401      	adds	r4, #1
 801c0e0:	3e03      	subs	r6, #3
 801c0e2:	42b4      	cmp	r4, r6
 801c0e4:	bf88      	it	hi
 801c0e6:	2304      	movhi	r3, #4
 801c0e8:	4443      	add	r3, r8
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	f843 2b04 	str.w	r2, [r3], #4
 801c0f0:	429f      	cmp	r7, r3
 801c0f2:	d2fb      	bcs.n	801c0ec <__hexnan+0xcc>
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	b91b      	cbnz	r3, 801c100 <__hexnan+0xe0>
 801c0f8:	4547      	cmp	r7, r8
 801c0fa:	d128      	bne.n	801c14e <__hexnan+0x12e>
 801c0fc:	2301      	movs	r3, #1
 801c0fe:	603b      	str	r3, [r7, #0]
 801c100:	2005      	movs	r0, #5
 801c102:	b007      	add	sp, #28
 801c104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c108:	3501      	adds	r5, #1
 801c10a:	2d08      	cmp	r5, #8
 801c10c:	f10b 0b01 	add.w	fp, fp, #1
 801c110:	dd06      	ble.n	801c120 <__hexnan+0x100>
 801c112:	4544      	cmp	r4, r8
 801c114:	d9c1      	bls.n	801c09a <__hexnan+0x7a>
 801c116:	2300      	movs	r3, #0
 801c118:	f844 3c04 	str.w	r3, [r4, #-4]
 801c11c:	2501      	movs	r5, #1
 801c11e:	3c04      	subs	r4, #4
 801c120:	6822      	ldr	r2, [r4, #0]
 801c122:	f000 000f 	and.w	r0, r0, #15
 801c126:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801c12a:	6020      	str	r0, [r4, #0]
 801c12c:	e7b5      	b.n	801c09a <__hexnan+0x7a>
 801c12e:	2508      	movs	r5, #8
 801c130:	e7b3      	b.n	801c09a <__hexnan+0x7a>
 801c132:	9b01      	ldr	r3, [sp, #4]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d0dd      	beq.n	801c0f4 <__hexnan+0xd4>
 801c138:	f1c3 0320 	rsb	r3, r3, #32
 801c13c:	f04f 32ff 	mov.w	r2, #4294967295
 801c140:	40da      	lsrs	r2, r3
 801c142:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801c146:	4013      	ands	r3, r2
 801c148:	f846 3c04 	str.w	r3, [r6, #-4]
 801c14c:	e7d2      	b.n	801c0f4 <__hexnan+0xd4>
 801c14e:	3f04      	subs	r7, #4
 801c150:	e7d0      	b.n	801c0f4 <__hexnan+0xd4>
 801c152:	2004      	movs	r0, #4
 801c154:	e7d5      	b.n	801c102 <__hexnan+0xe2>
	...

0801c158 <_findenv_r>:
 801c158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c15c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801c1cc <_findenv_r+0x74>
 801c160:	4606      	mov	r6, r0
 801c162:	4689      	mov	r9, r1
 801c164:	4617      	mov	r7, r2
 801c166:	f001 fb83 	bl	801d870 <__env_lock>
 801c16a:	f8da 4000 	ldr.w	r4, [sl]
 801c16e:	b134      	cbz	r4, 801c17e <_findenv_r+0x26>
 801c170:	464b      	mov	r3, r9
 801c172:	4698      	mov	r8, r3
 801c174:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c178:	b13a      	cbz	r2, 801c18a <_findenv_r+0x32>
 801c17a:	2a3d      	cmp	r2, #61	@ 0x3d
 801c17c:	d1f9      	bne.n	801c172 <_findenv_r+0x1a>
 801c17e:	4630      	mov	r0, r6
 801c180:	f001 fb7c 	bl	801d87c <__env_unlock>
 801c184:	2000      	movs	r0, #0
 801c186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c18a:	eba8 0809 	sub.w	r8, r8, r9
 801c18e:	46a3      	mov	fp, r4
 801c190:	f854 0b04 	ldr.w	r0, [r4], #4
 801c194:	2800      	cmp	r0, #0
 801c196:	d0f2      	beq.n	801c17e <_findenv_r+0x26>
 801c198:	4642      	mov	r2, r8
 801c19a:	4649      	mov	r1, r9
 801c19c:	f7fd fcf5 	bl	8019b8a <strncmp>
 801c1a0:	2800      	cmp	r0, #0
 801c1a2:	d1f4      	bne.n	801c18e <_findenv_r+0x36>
 801c1a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c1a8:	eb03 0508 	add.w	r5, r3, r8
 801c1ac:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c1b0:	2b3d      	cmp	r3, #61	@ 0x3d
 801c1b2:	d1ec      	bne.n	801c18e <_findenv_r+0x36>
 801c1b4:	f8da 3000 	ldr.w	r3, [sl]
 801c1b8:	ebab 0303 	sub.w	r3, fp, r3
 801c1bc:	109b      	asrs	r3, r3, #2
 801c1be:	4630      	mov	r0, r6
 801c1c0:	603b      	str	r3, [r7, #0]
 801c1c2:	f001 fb5b 	bl	801d87c <__env_unlock>
 801c1c6:	1c68      	adds	r0, r5, #1
 801c1c8:	e7dd      	b.n	801c186 <_findenv_r+0x2e>
 801c1ca:	bf00      	nop
 801c1cc:	2000002c 	.word	0x2000002c

0801c1d0 <_getenv_r>:
 801c1d0:	b507      	push	{r0, r1, r2, lr}
 801c1d2:	aa01      	add	r2, sp, #4
 801c1d4:	f7ff ffc0 	bl	801c158 <_findenv_r>
 801c1d8:	b003      	add	sp, #12
 801c1da:	f85d fb04 	ldr.w	pc, [sp], #4

0801c1de <__ascii_mbtowc>:
 801c1de:	b082      	sub	sp, #8
 801c1e0:	b901      	cbnz	r1, 801c1e4 <__ascii_mbtowc+0x6>
 801c1e2:	a901      	add	r1, sp, #4
 801c1e4:	b142      	cbz	r2, 801c1f8 <__ascii_mbtowc+0x1a>
 801c1e6:	b14b      	cbz	r3, 801c1fc <__ascii_mbtowc+0x1e>
 801c1e8:	7813      	ldrb	r3, [r2, #0]
 801c1ea:	600b      	str	r3, [r1, #0]
 801c1ec:	7812      	ldrb	r2, [r2, #0]
 801c1ee:	1e10      	subs	r0, r2, #0
 801c1f0:	bf18      	it	ne
 801c1f2:	2001      	movne	r0, #1
 801c1f4:	b002      	add	sp, #8
 801c1f6:	4770      	bx	lr
 801c1f8:	4610      	mov	r0, r2
 801c1fa:	e7fb      	b.n	801c1f4 <__ascii_mbtowc+0x16>
 801c1fc:	f06f 0001 	mvn.w	r0, #1
 801c200:	e7f8      	b.n	801c1f4 <__ascii_mbtowc+0x16>
	...

0801c204 <_Balloc>:
 801c204:	b570      	push	{r4, r5, r6, lr}
 801c206:	69c6      	ldr	r6, [r0, #28]
 801c208:	4604      	mov	r4, r0
 801c20a:	460d      	mov	r5, r1
 801c20c:	b976      	cbnz	r6, 801c22c <_Balloc+0x28>
 801c20e:	2010      	movs	r0, #16
 801c210:	f7fb fda0 	bl	8017d54 <malloc>
 801c214:	4602      	mov	r2, r0
 801c216:	61e0      	str	r0, [r4, #28]
 801c218:	b920      	cbnz	r0, 801c224 <_Balloc+0x20>
 801c21a:	4b18      	ldr	r3, [pc, #96]	@ (801c27c <_Balloc+0x78>)
 801c21c:	4818      	ldr	r0, [pc, #96]	@ (801c280 <_Balloc+0x7c>)
 801c21e:	216b      	movs	r1, #107	@ 0x6b
 801c220:	f7fe fd96 	bl	801ad50 <__assert_func>
 801c224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c228:	6006      	str	r6, [r0, #0]
 801c22a:	60c6      	str	r6, [r0, #12]
 801c22c:	69e6      	ldr	r6, [r4, #28]
 801c22e:	68f3      	ldr	r3, [r6, #12]
 801c230:	b183      	cbz	r3, 801c254 <_Balloc+0x50>
 801c232:	69e3      	ldr	r3, [r4, #28]
 801c234:	68db      	ldr	r3, [r3, #12]
 801c236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c23a:	b9b8      	cbnz	r0, 801c26c <_Balloc+0x68>
 801c23c:	2101      	movs	r1, #1
 801c23e:	fa01 f605 	lsl.w	r6, r1, r5
 801c242:	1d72      	adds	r2, r6, #5
 801c244:	0092      	lsls	r2, r2, #2
 801c246:	4620      	mov	r0, r4
 801c248:	f001 fafd 	bl	801d846 <_calloc_r>
 801c24c:	b160      	cbz	r0, 801c268 <_Balloc+0x64>
 801c24e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c252:	e00e      	b.n	801c272 <_Balloc+0x6e>
 801c254:	2221      	movs	r2, #33	@ 0x21
 801c256:	2104      	movs	r1, #4
 801c258:	4620      	mov	r0, r4
 801c25a:	f001 faf4 	bl	801d846 <_calloc_r>
 801c25e:	69e3      	ldr	r3, [r4, #28]
 801c260:	60f0      	str	r0, [r6, #12]
 801c262:	68db      	ldr	r3, [r3, #12]
 801c264:	2b00      	cmp	r3, #0
 801c266:	d1e4      	bne.n	801c232 <_Balloc+0x2e>
 801c268:	2000      	movs	r0, #0
 801c26a:	bd70      	pop	{r4, r5, r6, pc}
 801c26c:	6802      	ldr	r2, [r0, #0]
 801c26e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c272:	2300      	movs	r3, #0
 801c274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c278:	e7f7      	b.n	801c26a <_Balloc+0x66>
 801c27a:	bf00      	nop
 801c27c:	08021a0d 	.word	0x08021a0d
 801c280:	08021be4 	.word	0x08021be4

0801c284 <_Bfree>:
 801c284:	b570      	push	{r4, r5, r6, lr}
 801c286:	69c6      	ldr	r6, [r0, #28]
 801c288:	4605      	mov	r5, r0
 801c28a:	460c      	mov	r4, r1
 801c28c:	b976      	cbnz	r6, 801c2ac <_Bfree+0x28>
 801c28e:	2010      	movs	r0, #16
 801c290:	f7fb fd60 	bl	8017d54 <malloc>
 801c294:	4602      	mov	r2, r0
 801c296:	61e8      	str	r0, [r5, #28]
 801c298:	b920      	cbnz	r0, 801c2a4 <_Bfree+0x20>
 801c29a:	4b09      	ldr	r3, [pc, #36]	@ (801c2c0 <_Bfree+0x3c>)
 801c29c:	4809      	ldr	r0, [pc, #36]	@ (801c2c4 <_Bfree+0x40>)
 801c29e:	218f      	movs	r1, #143	@ 0x8f
 801c2a0:	f7fe fd56 	bl	801ad50 <__assert_func>
 801c2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c2a8:	6006      	str	r6, [r0, #0]
 801c2aa:	60c6      	str	r6, [r0, #12]
 801c2ac:	b13c      	cbz	r4, 801c2be <_Bfree+0x3a>
 801c2ae:	69eb      	ldr	r3, [r5, #28]
 801c2b0:	6862      	ldr	r2, [r4, #4]
 801c2b2:	68db      	ldr	r3, [r3, #12]
 801c2b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c2b8:	6021      	str	r1, [r4, #0]
 801c2ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c2be:	bd70      	pop	{r4, r5, r6, pc}
 801c2c0:	08021a0d 	.word	0x08021a0d
 801c2c4:	08021be4 	.word	0x08021be4

0801c2c8 <__multadd>:
 801c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2cc:	690d      	ldr	r5, [r1, #16]
 801c2ce:	4607      	mov	r7, r0
 801c2d0:	460c      	mov	r4, r1
 801c2d2:	461e      	mov	r6, r3
 801c2d4:	f101 0c14 	add.w	ip, r1, #20
 801c2d8:	2000      	movs	r0, #0
 801c2da:	f8dc 3000 	ldr.w	r3, [ip]
 801c2de:	b299      	uxth	r1, r3
 801c2e0:	fb02 6101 	mla	r1, r2, r1, r6
 801c2e4:	0c1e      	lsrs	r6, r3, #16
 801c2e6:	0c0b      	lsrs	r3, r1, #16
 801c2e8:	fb02 3306 	mla	r3, r2, r6, r3
 801c2ec:	b289      	uxth	r1, r1
 801c2ee:	3001      	adds	r0, #1
 801c2f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c2f4:	4285      	cmp	r5, r0
 801c2f6:	f84c 1b04 	str.w	r1, [ip], #4
 801c2fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c2fe:	dcec      	bgt.n	801c2da <__multadd+0x12>
 801c300:	b30e      	cbz	r6, 801c346 <__multadd+0x7e>
 801c302:	68a3      	ldr	r3, [r4, #8]
 801c304:	42ab      	cmp	r3, r5
 801c306:	dc19      	bgt.n	801c33c <__multadd+0x74>
 801c308:	6861      	ldr	r1, [r4, #4]
 801c30a:	4638      	mov	r0, r7
 801c30c:	3101      	adds	r1, #1
 801c30e:	f7ff ff79 	bl	801c204 <_Balloc>
 801c312:	4680      	mov	r8, r0
 801c314:	b928      	cbnz	r0, 801c322 <__multadd+0x5a>
 801c316:	4602      	mov	r2, r0
 801c318:	4b0c      	ldr	r3, [pc, #48]	@ (801c34c <__multadd+0x84>)
 801c31a:	480d      	ldr	r0, [pc, #52]	@ (801c350 <__multadd+0x88>)
 801c31c:	21ba      	movs	r1, #186	@ 0xba
 801c31e:	f7fe fd17 	bl	801ad50 <__assert_func>
 801c322:	6922      	ldr	r2, [r4, #16]
 801c324:	3202      	adds	r2, #2
 801c326:	f104 010c 	add.w	r1, r4, #12
 801c32a:	0092      	lsls	r2, r2, #2
 801c32c:	300c      	adds	r0, #12
 801c32e:	f7fe fca0 	bl	801ac72 <memcpy>
 801c332:	4621      	mov	r1, r4
 801c334:	4638      	mov	r0, r7
 801c336:	f7ff ffa5 	bl	801c284 <_Bfree>
 801c33a:	4644      	mov	r4, r8
 801c33c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c340:	3501      	adds	r5, #1
 801c342:	615e      	str	r6, [r3, #20]
 801c344:	6125      	str	r5, [r4, #16]
 801c346:	4620      	mov	r0, r4
 801c348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c34c:	08021b73 	.word	0x08021b73
 801c350:	08021be4 	.word	0x08021be4

0801c354 <__s2b>:
 801c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c358:	460c      	mov	r4, r1
 801c35a:	4615      	mov	r5, r2
 801c35c:	461f      	mov	r7, r3
 801c35e:	2209      	movs	r2, #9
 801c360:	3308      	adds	r3, #8
 801c362:	4606      	mov	r6, r0
 801c364:	fb93 f3f2 	sdiv	r3, r3, r2
 801c368:	2100      	movs	r1, #0
 801c36a:	2201      	movs	r2, #1
 801c36c:	429a      	cmp	r2, r3
 801c36e:	db09      	blt.n	801c384 <__s2b+0x30>
 801c370:	4630      	mov	r0, r6
 801c372:	f7ff ff47 	bl	801c204 <_Balloc>
 801c376:	b940      	cbnz	r0, 801c38a <__s2b+0x36>
 801c378:	4602      	mov	r2, r0
 801c37a:	4b19      	ldr	r3, [pc, #100]	@ (801c3e0 <__s2b+0x8c>)
 801c37c:	4819      	ldr	r0, [pc, #100]	@ (801c3e4 <__s2b+0x90>)
 801c37e:	21d3      	movs	r1, #211	@ 0xd3
 801c380:	f7fe fce6 	bl	801ad50 <__assert_func>
 801c384:	0052      	lsls	r2, r2, #1
 801c386:	3101      	adds	r1, #1
 801c388:	e7f0      	b.n	801c36c <__s2b+0x18>
 801c38a:	9b08      	ldr	r3, [sp, #32]
 801c38c:	6143      	str	r3, [r0, #20]
 801c38e:	2d09      	cmp	r5, #9
 801c390:	f04f 0301 	mov.w	r3, #1
 801c394:	6103      	str	r3, [r0, #16]
 801c396:	dd16      	ble.n	801c3c6 <__s2b+0x72>
 801c398:	f104 0909 	add.w	r9, r4, #9
 801c39c:	46c8      	mov	r8, r9
 801c39e:	442c      	add	r4, r5
 801c3a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c3a4:	4601      	mov	r1, r0
 801c3a6:	3b30      	subs	r3, #48	@ 0x30
 801c3a8:	220a      	movs	r2, #10
 801c3aa:	4630      	mov	r0, r6
 801c3ac:	f7ff ff8c 	bl	801c2c8 <__multadd>
 801c3b0:	45a0      	cmp	r8, r4
 801c3b2:	d1f5      	bne.n	801c3a0 <__s2b+0x4c>
 801c3b4:	f1a5 0408 	sub.w	r4, r5, #8
 801c3b8:	444c      	add	r4, r9
 801c3ba:	1b2d      	subs	r5, r5, r4
 801c3bc:	1963      	adds	r3, r4, r5
 801c3be:	42bb      	cmp	r3, r7
 801c3c0:	db04      	blt.n	801c3cc <__s2b+0x78>
 801c3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3c6:	340a      	adds	r4, #10
 801c3c8:	2509      	movs	r5, #9
 801c3ca:	e7f6      	b.n	801c3ba <__s2b+0x66>
 801c3cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c3d0:	4601      	mov	r1, r0
 801c3d2:	3b30      	subs	r3, #48	@ 0x30
 801c3d4:	220a      	movs	r2, #10
 801c3d6:	4630      	mov	r0, r6
 801c3d8:	f7ff ff76 	bl	801c2c8 <__multadd>
 801c3dc:	e7ee      	b.n	801c3bc <__s2b+0x68>
 801c3de:	bf00      	nop
 801c3e0:	08021b73 	.word	0x08021b73
 801c3e4:	08021be4 	.word	0x08021be4

0801c3e8 <__hi0bits>:
 801c3e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c3ec:	4603      	mov	r3, r0
 801c3ee:	bf36      	itet	cc
 801c3f0:	0403      	lslcc	r3, r0, #16
 801c3f2:	2000      	movcs	r0, #0
 801c3f4:	2010      	movcc	r0, #16
 801c3f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c3fa:	bf3c      	itt	cc
 801c3fc:	021b      	lslcc	r3, r3, #8
 801c3fe:	3008      	addcc	r0, #8
 801c400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c404:	bf3c      	itt	cc
 801c406:	011b      	lslcc	r3, r3, #4
 801c408:	3004      	addcc	r0, #4
 801c40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c40e:	bf3c      	itt	cc
 801c410:	009b      	lslcc	r3, r3, #2
 801c412:	3002      	addcc	r0, #2
 801c414:	2b00      	cmp	r3, #0
 801c416:	db05      	blt.n	801c424 <__hi0bits+0x3c>
 801c418:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c41c:	f100 0001 	add.w	r0, r0, #1
 801c420:	bf08      	it	eq
 801c422:	2020      	moveq	r0, #32
 801c424:	4770      	bx	lr

0801c426 <__lo0bits>:
 801c426:	6803      	ldr	r3, [r0, #0]
 801c428:	4602      	mov	r2, r0
 801c42a:	f013 0007 	ands.w	r0, r3, #7
 801c42e:	d00b      	beq.n	801c448 <__lo0bits+0x22>
 801c430:	07d9      	lsls	r1, r3, #31
 801c432:	d421      	bmi.n	801c478 <__lo0bits+0x52>
 801c434:	0798      	lsls	r0, r3, #30
 801c436:	bf49      	itett	mi
 801c438:	085b      	lsrmi	r3, r3, #1
 801c43a:	089b      	lsrpl	r3, r3, #2
 801c43c:	2001      	movmi	r0, #1
 801c43e:	6013      	strmi	r3, [r2, #0]
 801c440:	bf5c      	itt	pl
 801c442:	6013      	strpl	r3, [r2, #0]
 801c444:	2002      	movpl	r0, #2
 801c446:	4770      	bx	lr
 801c448:	b299      	uxth	r1, r3
 801c44a:	b909      	cbnz	r1, 801c450 <__lo0bits+0x2a>
 801c44c:	0c1b      	lsrs	r3, r3, #16
 801c44e:	2010      	movs	r0, #16
 801c450:	b2d9      	uxtb	r1, r3
 801c452:	b909      	cbnz	r1, 801c458 <__lo0bits+0x32>
 801c454:	3008      	adds	r0, #8
 801c456:	0a1b      	lsrs	r3, r3, #8
 801c458:	0719      	lsls	r1, r3, #28
 801c45a:	bf04      	itt	eq
 801c45c:	091b      	lsreq	r3, r3, #4
 801c45e:	3004      	addeq	r0, #4
 801c460:	0799      	lsls	r1, r3, #30
 801c462:	bf04      	itt	eq
 801c464:	089b      	lsreq	r3, r3, #2
 801c466:	3002      	addeq	r0, #2
 801c468:	07d9      	lsls	r1, r3, #31
 801c46a:	d403      	bmi.n	801c474 <__lo0bits+0x4e>
 801c46c:	085b      	lsrs	r3, r3, #1
 801c46e:	f100 0001 	add.w	r0, r0, #1
 801c472:	d003      	beq.n	801c47c <__lo0bits+0x56>
 801c474:	6013      	str	r3, [r2, #0]
 801c476:	4770      	bx	lr
 801c478:	2000      	movs	r0, #0
 801c47a:	4770      	bx	lr
 801c47c:	2020      	movs	r0, #32
 801c47e:	4770      	bx	lr

0801c480 <__i2b>:
 801c480:	b510      	push	{r4, lr}
 801c482:	460c      	mov	r4, r1
 801c484:	2101      	movs	r1, #1
 801c486:	f7ff febd 	bl	801c204 <_Balloc>
 801c48a:	4602      	mov	r2, r0
 801c48c:	b928      	cbnz	r0, 801c49a <__i2b+0x1a>
 801c48e:	4b05      	ldr	r3, [pc, #20]	@ (801c4a4 <__i2b+0x24>)
 801c490:	4805      	ldr	r0, [pc, #20]	@ (801c4a8 <__i2b+0x28>)
 801c492:	f240 1145 	movw	r1, #325	@ 0x145
 801c496:	f7fe fc5b 	bl	801ad50 <__assert_func>
 801c49a:	2301      	movs	r3, #1
 801c49c:	6144      	str	r4, [r0, #20]
 801c49e:	6103      	str	r3, [r0, #16]
 801c4a0:	bd10      	pop	{r4, pc}
 801c4a2:	bf00      	nop
 801c4a4:	08021b73 	.word	0x08021b73
 801c4a8:	08021be4 	.word	0x08021be4

0801c4ac <__multiply>:
 801c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4b0:	4617      	mov	r7, r2
 801c4b2:	690a      	ldr	r2, [r1, #16]
 801c4b4:	693b      	ldr	r3, [r7, #16]
 801c4b6:	429a      	cmp	r2, r3
 801c4b8:	bfa8      	it	ge
 801c4ba:	463b      	movge	r3, r7
 801c4bc:	4689      	mov	r9, r1
 801c4be:	bfa4      	itt	ge
 801c4c0:	460f      	movge	r7, r1
 801c4c2:	4699      	movge	r9, r3
 801c4c4:	693d      	ldr	r5, [r7, #16]
 801c4c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c4ca:	68bb      	ldr	r3, [r7, #8]
 801c4cc:	6879      	ldr	r1, [r7, #4]
 801c4ce:	eb05 060a 	add.w	r6, r5, sl
 801c4d2:	42b3      	cmp	r3, r6
 801c4d4:	b085      	sub	sp, #20
 801c4d6:	bfb8      	it	lt
 801c4d8:	3101      	addlt	r1, #1
 801c4da:	f7ff fe93 	bl	801c204 <_Balloc>
 801c4de:	b930      	cbnz	r0, 801c4ee <__multiply+0x42>
 801c4e0:	4602      	mov	r2, r0
 801c4e2:	4b41      	ldr	r3, [pc, #260]	@ (801c5e8 <__multiply+0x13c>)
 801c4e4:	4841      	ldr	r0, [pc, #260]	@ (801c5ec <__multiply+0x140>)
 801c4e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c4ea:	f7fe fc31 	bl	801ad50 <__assert_func>
 801c4ee:	f100 0414 	add.w	r4, r0, #20
 801c4f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801c4f6:	4623      	mov	r3, r4
 801c4f8:	2200      	movs	r2, #0
 801c4fa:	4573      	cmp	r3, lr
 801c4fc:	d320      	bcc.n	801c540 <__multiply+0x94>
 801c4fe:	f107 0814 	add.w	r8, r7, #20
 801c502:	f109 0114 	add.w	r1, r9, #20
 801c506:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801c50a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801c50e:	9302      	str	r3, [sp, #8]
 801c510:	1beb      	subs	r3, r5, r7
 801c512:	3b15      	subs	r3, #21
 801c514:	f023 0303 	bic.w	r3, r3, #3
 801c518:	3304      	adds	r3, #4
 801c51a:	3715      	adds	r7, #21
 801c51c:	42bd      	cmp	r5, r7
 801c51e:	bf38      	it	cc
 801c520:	2304      	movcc	r3, #4
 801c522:	9301      	str	r3, [sp, #4]
 801c524:	9b02      	ldr	r3, [sp, #8]
 801c526:	9103      	str	r1, [sp, #12]
 801c528:	428b      	cmp	r3, r1
 801c52a:	d80c      	bhi.n	801c546 <__multiply+0x9a>
 801c52c:	2e00      	cmp	r6, #0
 801c52e:	dd03      	ble.n	801c538 <__multiply+0x8c>
 801c530:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801c534:	2b00      	cmp	r3, #0
 801c536:	d055      	beq.n	801c5e4 <__multiply+0x138>
 801c538:	6106      	str	r6, [r0, #16]
 801c53a:	b005      	add	sp, #20
 801c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c540:	f843 2b04 	str.w	r2, [r3], #4
 801c544:	e7d9      	b.n	801c4fa <__multiply+0x4e>
 801c546:	f8b1 a000 	ldrh.w	sl, [r1]
 801c54a:	f1ba 0f00 	cmp.w	sl, #0
 801c54e:	d01f      	beq.n	801c590 <__multiply+0xe4>
 801c550:	46c4      	mov	ip, r8
 801c552:	46a1      	mov	r9, r4
 801c554:	2700      	movs	r7, #0
 801c556:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c55a:	f8d9 3000 	ldr.w	r3, [r9]
 801c55e:	fa1f fb82 	uxth.w	fp, r2
 801c562:	b29b      	uxth	r3, r3
 801c564:	fb0a 330b 	mla	r3, sl, fp, r3
 801c568:	443b      	add	r3, r7
 801c56a:	f8d9 7000 	ldr.w	r7, [r9]
 801c56e:	0c12      	lsrs	r2, r2, #16
 801c570:	0c3f      	lsrs	r7, r7, #16
 801c572:	fb0a 7202 	mla	r2, sl, r2, r7
 801c576:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801c57a:	b29b      	uxth	r3, r3
 801c57c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c580:	4565      	cmp	r5, ip
 801c582:	f849 3b04 	str.w	r3, [r9], #4
 801c586:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801c58a:	d8e4      	bhi.n	801c556 <__multiply+0xaa>
 801c58c:	9b01      	ldr	r3, [sp, #4]
 801c58e:	50e7      	str	r7, [r4, r3]
 801c590:	9b03      	ldr	r3, [sp, #12]
 801c592:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c596:	3104      	adds	r1, #4
 801c598:	f1b9 0f00 	cmp.w	r9, #0
 801c59c:	d020      	beq.n	801c5e0 <__multiply+0x134>
 801c59e:	6823      	ldr	r3, [r4, #0]
 801c5a0:	4647      	mov	r7, r8
 801c5a2:	46a4      	mov	ip, r4
 801c5a4:	f04f 0a00 	mov.w	sl, #0
 801c5a8:	f8b7 b000 	ldrh.w	fp, [r7]
 801c5ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801c5b0:	fb09 220b 	mla	r2, r9, fp, r2
 801c5b4:	4452      	add	r2, sl
 801c5b6:	b29b      	uxth	r3, r3
 801c5b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c5bc:	f84c 3b04 	str.w	r3, [ip], #4
 801c5c0:	f857 3b04 	ldr.w	r3, [r7], #4
 801c5c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c5c8:	f8bc 3000 	ldrh.w	r3, [ip]
 801c5cc:	fb09 330a 	mla	r3, r9, sl, r3
 801c5d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801c5d4:	42bd      	cmp	r5, r7
 801c5d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c5da:	d8e5      	bhi.n	801c5a8 <__multiply+0xfc>
 801c5dc:	9a01      	ldr	r2, [sp, #4]
 801c5de:	50a3      	str	r3, [r4, r2]
 801c5e0:	3404      	adds	r4, #4
 801c5e2:	e79f      	b.n	801c524 <__multiply+0x78>
 801c5e4:	3e01      	subs	r6, #1
 801c5e6:	e7a1      	b.n	801c52c <__multiply+0x80>
 801c5e8:	08021b73 	.word	0x08021b73
 801c5ec:	08021be4 	.word	0x08021be4

0801c5f0 <__pow5mult>:
 801c5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5f4:	4615      	mov	r5, r2
 801c5f6:	f012 0203 	ands.w	r2, r2, #3
 801c5fa:	4607      	mov	r7, r0
 801c5fc:	460e      	mov	r6, r1
 801c5fe:	d007      	beq.n	801c610 <__pow5mult+0x20>
 801c600:	4c25      	ldr	r4, [pc, #148]	@ (801c698 <__pow5mult+0xa8>)
 801c602:	3a01      	subs	r2, #1
 801c604:	2300      	movs	r3, #0
 801c606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c60a:	f7ff fe5d 	bl	801c2c8 <__multadd>
 801c60e:	4606      	mov	r6, r0
 801c610:	10ad      	asrs	r5, r5, #2
 801c612:	d03d      	beq.n	801c690 <__pow5mult+0xa0>
 801c614:	69fc      	ldr	r4, [r7, #28]
 801c616:	b97c      	cbnz	r4, 801c638 <__pow5mult+0x48>
 801c618:	2010      	movs	r0, #16
 801c61a:	f7fb fb9b 	bl	8017d54 <malloc>
 801c61e:	4602      	mov	r2, r0
 801c620:	61f8      	str	r0, [r7, #28]
 801c622:	b928      	cbnz	r0, 801c630 <__pow5mult+0x40>
 801c624:	4b1d      	ldr	r3, [pc, #116]	@ (801c69c <__pow5mult+0xac>)
 801c626:	481e      	ldr	r0, [pc, #120]	@ (801c6a0 <__pow5mult+0xb0>)
 801c628:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c62c:	f7fe fb90 	bl	801ad50 <__assert_func>
 801c630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c634:	6004      	str	r4, [r0, #0]
 801c636:	60c4      	str	r4, [r0, #12]
 801c638:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c63c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c640:	b94c      	cbnz	r4, 801c656 <__pow5mult+0x66>
 801c642:	f240 2171 	movw	r1, #625	@ 0x271
 801c646:	4638      	mov	r0, r7
 801c648:	f7ff ff1a 	bl	801c480 <__i2b>
 801c64c:	2300      	movs	r3, #0
 801c64e:	f8c8 0008 	str.w	r0, [r8, #8]
 801c652:	4604      	mov	r4, r0
 801c654:	6003      	str	r3, [r0, #0]
 801c656:	f04f 0900 	mov.w	r9, #0
 801c65a:	07eb      	lsls	r3, r5, #31
 801c65c:	d50a      	bpl.n	801c674 <__pow5mult+0x84>
 801c65e:	4631      	mov	r1, r6
 801c660:	4622      	mov	r2, r4
 801c662:	4638      	mov	r0, r7
 801c664:	f7ff ff22 	bl	801c4ac <__multiply>
 801c668:	4631      	mov	r1, r6
 801c66a:	4680      	mov	r8, r0
 801c66c:	4638      	mov	r0, r7
 801c66e:	f7ff fe09 	bl	801c284 <_Bfree>
 801c672:	4646      	mov	r6, r8
 801c674:	106d      	asrs	r5, r5, #1
 801c676:	d00b      	beq.n	801c690 <__pow5mult+0xa0>
 801c678:	6820      	ldr	r0, [r4, #0]
 801c67a:	b938      	cbnz	r0, 801c68c <__pow5mult+0x9c>
 801c67c:	4622      	mov	r2, r4
 801c67e:	4621      	mov	r1, r4
 801c680:	4638      	mov	r0, r7
 801c682:	f7ff ff13 	bl	801c4ac <__multiply>
 801c686:	6020      	str	r0, [r4, #0]
 801c688:	f8c0 9000 	str.w	r9, [r0]
 801c68c:	4604      	mov	r4, r0
 801c68e:	e7e4      	b.n	801c65a <__pow5mult+0x6a>
 801c690:	4630      	mov	r0, r6
 801c692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c696:	bf00      	nop
 801c698:	08021e84 	.word	0x08021e84
 801c69c:	08021a0d 	.word	0x08021a0d
 801c6a0:	08021be4 	.word	0x08021be4

0801c6a4 <__lshift>:
 801c6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6a8:	460c      	mov	r4, r1
 801c6aa:	6849      	ldr	r1, [r1, #4]
 801c6ac:	6923      	ldr	r3, [r4, #16]
 801c6ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c6b2:	68a3      	ldr	r3, [r4, #8]
 801c6b4:	4607      	mov	r7, r0
 801c6b6:	4691      	mov	r9, r2
 801c6b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c6bc:	f108 0601 	add.w	r6, r8, #1
 801c6c0:	42b3      	cmp	r3, r6
 801c6c2:	db0b      	blt.n	801c6dc <__lshift+0x38>
 801c6c4:	4638      	mov	r0, r7
 801c6c6:	f7ff fd9d 	bl	801c204 <_Balloc>
 801c6ca:	4605      	mov	r5, r0
 801c6cc:	b948      	cbnz	r0, 801c6e2 <__lshift+0x3e>
 801c6ce:	4602      	mov	r2, r0
 801c6d0:	4b28      	ldr	r3, [pc, #160]	@ (801c774 <__lshift+0xd0>)
 801c6d2:	4829      	ldr	r0, [pc, #164]	@ (801c778 <__lshift+0xd4>)
 801c6d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c6d8:	f7fe fb3a 	bl	801ad50 <__assert_func>
 801c6dc:	3101      	adds	r1, #1
 801c6de:	005b      	lsls	r3, r3, #1
 801c6e0:	e7ee      	b.n	801c6c0 <__lshift+0x1c>
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	f100 0114 	add.w	r1, r0, #20
 801c6e8:	f100 0210 	add.w	r2, r0, #16
 801c6ec:	4618      	mov	r0, r3
 801c6ee:	4553      	cmp	r3, sl
 801c6f0:	db33      	blt.n	801c75a <__lshift+0xb6>
 801c6f2:	6920      	ldr	r0, [r4, #16]
 801c6f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c6f8:	f104 0314 	add.w	r3, r4, #20
 801c6fc:	f019 091f 	ands.w	r9, r9, #31
 801c700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c708:	d02b      	beq.n	801c762 <__lshift+0xbe>
 801c70a:	f1c9 0e20 	rsb	lr, r9, #32
 801c70e:	468a      	mov	sl, r1
 801c710:	2200      	movs	r2, #0
 801c712:	6818      	ldr	r0, [r3, #0]
 801c714:	fa00 f009 	lsl.w	r0, r0, r9
 801c718:	4310      	orrs	r0, r2
 801c71a:	f84a 0b04 	str.w	r0, [sl], #4
 801c71e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c722:	459c      	cmp	ip, r3
 801c724:	fa22 f20e 	lsr.w	r2, r2, lr
 801c728:	d8f3      	bhi.n	801c712 <__lshift+0x6e>
 801c72a:	ebac 0304 	sub.w	r3, ip, r4
 801c72e:	3b15      	subs	r3, #21
 801c730:	f023 0303 	bic.w	r3, r3, #3
 801c734:	3304      	adds	r3, #4
 801c736:	f104 0015 	add.w	r0, r4, #21
 801c73a:	4560      	cmp	r0, ip
 801c73c:	bf88      	it	hi
 801c73e:	2304      	movhi	r3, #4
 801c740:	50ca      	str	r2, [r1, r3]
 801c742:	b10a      	cbz	r2, 801c748 <__lshift+0xa4>
 801c744:	f108 0602 	add.w	r6, r8, #2
 801c748:	3e01      	subs	r6, #1
 801c74a:	4638      	mov	r0, r7
 801c74c:	612e      	str	r6, [r5, #16]
 801c74e:	4621      	mov	r1, r4
 801c750:	f7ff fd98 	bl	801c284 <_Bfree>
 801c754:	4628      	mov	r0, r5
 801c756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c75a:	f842 0f04 	str.w	r0, [r2, #4]!
 801c75e:	3301      	adds	r3, #1
 801c760:	e7c5      	b.n	801c6ee <__lshift+0x4a>
 801c762:	3904      	subs	r1, #4
 801c764:	f853 2b04 	ldr.w	r2, [r3], #4
 801c768:	f841 2f04 	str.w	r2, [r1, #4]!
 801c76c:	459c      	cmp	ip, r3
 801c76e:	d8f9      	bhi.n	801c764 <__lshift+0xc0>
 801c770:	e7ea      	b.n	801c748 <__lshift+0xa4>
 801c772:	bf00      	nop
 801c774:	08021b73 	.word	0x08021b73
 801c778:	08021be4 	.word	0x08021be4

0801c77c <__mcmp>:
 801c77c:	690a      	ldr	r2, [r1, #16]
 801c77e:	4603      	mov	r3, r0
 801c780:	6900      	ldr	r0, [r0, #16]
 801c782:	1a80      	subs	r0, r0, r2
 801c784:	b530      	push	{r4, r5, lr}
 801c786:	d10e      	bne.n	801c7a6 <__mcmp+0x2a>
 801c788:	3314      	adds	r3, #20
 801c78a:	3114      	adds	r1, #20
 801c78c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c79c:	4295      	cmp	r5, r2
 801c79e:	d003      	beq.n	801c7a8 <__mcmp+0x2c>
 801c7a0:	d205      	bcs.n	801c7ae <__mcmp+0x32>
 801c7a2:	f04f 30ff 	mov.w	r0, #4294967295
 801c7a6:	bd30      	pop	{r4, r5, pc}
 801c7a8:	42a3      	cmp	r3, r4
 801c7aa:	d3f3      	bcc.n	801c794 <__mcmp+0x18>
 801c7ac:	e7fb      	b.n	801c7a6 <__mcmp+0x2a>
 801c7ae:	2001      	movs	r0, #1
 801c7b0:	e7f9      	b.n	801c7a6 <__mcmp+0x2a>
	...

0801c7b4 <__mdiff>:
 801c7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b8:	4689      	mov	r9, r1
 801c7ba:	4606      	mov	r6, r0
 801c7bc:	4611      	mov	r1, r2
 801c7be:	4648      	mov	r0, r9
 801c7c0:	4614      	mov	r4, r2
 801c7c2:	f7ff ffdb 	bl	801c77c <__mcmp>
 801c7c6:	1e05      	subs	r5, r0, #0
 801c7c8:	d112      	bne.n	801c7f0 <__mdiff+0x3c>
 801c7ca:	4629      	mov	r1, r5
 801c7cc:	4630      	mov	r0, r6
 801c7ce:	f7ff fd19 	bl	801c204 <_Balloc>
 801c7d2:	4602      	mov	r2, r0
 801c7d4:	b928      	cbnz	r0, 801c7e2 <__mdiff+0x2e>
 801c7d6:	4b3f      	ldr	r3, [pc, #252]	@ (801c8d4 <__mdiff+0x120>)
 801c7d8:	f240 2137 	movw	r1, #567	@ 0x237
 801c7dc:	483e      	ldr	r0, [pc, #248]	@ (801c8d8 <__mdiff+0x124>)
 801c7de:	f7fe fab7 	bl	801ad50 <__assert_func>
 801c7e2:	2301      	movs	r3, #1
 801c7e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c7e8:	4610      	mov	r0, r2
 801c7ea:	b003      	add	sp, #12
 801c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7f0:	bfbc      	itt	lt
 801c7f2:	464b      	movlt	r3, r9
 801c7f4:	46a1      	movlt	r9, r4
 801c7f6:	4630      	mov	r0, r6
 801c7f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c7fc:	bfba      	itte	lt
 801c7fe:	461c      	movlt	r4, r3
 801c800:	2501      	movlt	r5, #1
 801c802:	2500      	movge	r5, #0
 801c804:	f7ff fcfe 	bl	801c204 <_Balloc>
 801c808:	4602      	mov	r2, r0
 801c80a:	b918      	cbnz	r0, 801c814 <__mdiff+0x60>
 801c80c:	4b31      	ldr	r3, [pc, #196]	@ (801c8d4 <__mdiff+0x120>)
 801c80e:	f240 2145 	movw	r1, #581	@ 0x245
 801c812:	e7e3      	b.n	801c7dc <__mdiff+0x28>
 801c814:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c818:	6926      	ldr	r6, [r4, #16]
 801c81a:	60c5      	str	r5, [r0, #12]
 801c81c:	f109 0310 	add.w	r3, r9, #16
 801c820:	f109 0514 	add.w	r5, r9, #20
 801c824:	f104 0e14 	add.w	lr, r4, #20
 801c828:	f100 0b14 	add.w	fp, r0, #20
 801c82c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c830:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c834:	9301      	str	r3, [sp, #4]
 801c836:	46d9      	mov	r9, fp
 801c838:	f04f 0c00 	mov.w	ip, #0
 801c83c:	9b01      	ldr	r3, [sp, #4]
 801c83e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c842:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c846:	9301      	str	r3, [sp, #4]
 801c848:	fa1f f38a 	uxth.w	r3, sl
 801c84c:	4619      	mov	r1, r3
 801c84e:	b283      	uxth	r3, r0
 801c850:	1acb      	subs	r3, r1, r3
 801c852:	0c00      	lsrs	r0, r0, #16
 801c854:	4463      	add	r3, ip
 801c856:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c85a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c85e:	b29b      	uxth	r3, r3
 801c860:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c864:	4576      	cmp	r6, lr
 801c866:	f849 3b04 	str.w	r3, [r9], #4
 801c86a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c86e:	d8e5      	bhi.n	801c83c <__mdiff+0x88>
 801c870:	1b33      	subs	r3, r6, r4
 801c872:	3b15      	subs	r3, #21
 801c874:	f023 0303 	bic.w	r3, r3, #3
 801c878:	3415      	adds	r4, #21
 801c87a:	3304      	adds	r3, #4
 801c87c:	42a6      	cmp	r6, r4
 801c87e:	bf38      	it	cc
 801c880:	2304      	movcc	r3, #4
 801c882:	441d      	add	r5, r3
 801c884:	445b      	add	r3, fp
 801c886:	461e      	mov	r6, r3
 801c888:	462c      	mov	r4, r5
 801c88a:	4544      	cmp	r4, r8
 801c88c:	d30e      	bcc.n	801c8ac <__mdiff+0xf8>
 801c88e:	f108 0103 	add.w	r1, r8, #3
 801c892:	1b49      	subs	r1, r1, r5
 801c894:	f021 0103 	bic.w	r1, r1, #3
 801c898:	3d03      	subs	r5, #3
 801c89a:	45a8      	cmp	r8, r5
 801c89c:	bf38      	it	cc
 801c89e:	2100      	movcc	r1, #0
 801c8a0:	440b      	add	r3, r1
 801c8a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c8a6:	b191      	cbz	r1, 801c8ce <__mdiff+0x11a>
 801c8a8:	6117      	str	r7, [r2, #16]
 801c8aa:	e79d      	b.n	801c7e8 <__mdiff+0x34>
 801c8ac:	f854 1b04 	ldr.w	r1, [r4], #4
 801c8b0:	46e6      	mov	lr, ip
 801c8b2:	0c08      	lsrs	r0, r1, #16
 801c8b4:	fa1c fc81 	uxtah	ip, ip, r1
 801c8b8:	4471      	add	r1, lr
 801c8ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c8be:	b289      	uxth	r1, r1
 801c8c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c8c4:	f846 1b04 	str.w	r1, [r6], #4
 801c8c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c8cc:	e7dd      	b.n	801c88a <__mdiff+0xd6>
 801c8ce:	3f01      	subs	r7, #1
 801c8d0:	e7e7      	b.n	801c8a2 <__mdiff+0xee>
 801c8d2:	bf00      	nop
 801c8d4:	08021b73 	.word	0x08021b73
 801c8d8:	08021be4 	.word	0x08021be4

0801c8dc <__ulp>:
 801c8dc:	b082      	sub	sp, #8
 801c8de:	ed8d 0b00 	vstr	d0, [sp]
 801c8e2:	9a01      	ldr	r2, [sp, #4]
 801c8e4:	4b0f      	ldr	r3, [pc, #60]	@ (801c924 <__ulp+0x48>)
 801c8e6:	4013      	ands	r3, r2
 801c8e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	dc08      	bgt.n	801c902 <__ulp+0x26>
 801c8f0:	425b      	negs	r3, r3
 801c8f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801c8f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c8fa:	da04      	bge.n	801c906 <__ulp+0x2a>
 801c8fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c900:	4113      	asrs	r3, r2
 801c902:	2200      	movs	r2, #0
 801c904:	e008      	b.n	801c918 <__ulp+0x3c>
 801c906:	f1a2 0314 	sub.w	r3, r2, #20
 801c90a:	2b1e      	cmp	r3, #30
 801c90c:	bfda      	itte	le
 801c90e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801c912:	40da      	lsrle	r2, r3
 801c914:	2201      	movgt	r2, #1
 801c916:	2300      	movs	r3, #0
 801c918:	4619      	mov	r1, r3
 801c91a:	4610      	mov	r0, r2
 801c91c:	ec41 0b10 	vmov	d0, r0, r1
 801c920:	b002      	add	sp, #8
 801c922:	4770      	bx	lr
 801c924:	7ff00000 	.word	0x7ff00000

0801c928 <__b2d>:
 801c928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c92c:	6906      	ldr	r6, [r0, #16]
 801c92e:	f100 0814 	add.w	r8, r0, #20
 801c932:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c936:	1f37      	subs	r7, r6, #4
 801c938:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c93c:	4610      	mov	r0, r2
 801c93e:	f7ff fd53 	bl	801c3e8 <__hi0bits>
 801c942:	f1c0 0320 	rsb	r3, r0, #32
 801c946:	280a      	cmp	r0, #10
 801c948:	600b      	str	r3, [r1, #0]
 801c94a:	491b      	ldr	r1, [pc, #108]	@ (801c9b8 <__b2d+0x90>)
 801c94c:	dc15      	bgt.n	801c97a <__b2d+0x52>
 801c94e:	f1c0 0c0b 	rsb	ip, r0, #11
 801c952:	fa22 f30c 	lsr.w	r3, r2, ip
 801c956:	45b8      	cmp	r8, r7
 801c958:	ea43 0501 	orr.w	r5, r3, r1
 801c95c:	bf34      	ite	cc
 801c95e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c962:	2300      	movcs	r3, #0
 801c964:	3015      	adds	r0, #21
 801c966:	fa02 f000 	lsl.w	r0, r2, r0
 801c96a:	fa23 f30c 	lsr.w	r3, r3, ip
 801c96e:	4303      	orrs	r3, r0
 801c970:	461c      	mov	r4, r3
 801c972:	ec45 4b10 	vmov	d0, r4, r5
 801c976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c97a:	45b8      	cmp	r8, r7
 801c97c:	bf3a      	itte	cc
 801c97e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c982:	f1a6 0708 	subcc.w	r7, r6, #8
 801c986:	2300      	movcs	r3, #0
 801c988:	380b      	subs	r0, #11
 801c98a:	d012      	beq.n	801c9b2 <__b2d+0x8a>
 801c98c:	f1c0 0120 	rsb	r1, r0, #32
 801c990:	fa23 f401 	lsr.w	r4, r3, r1
 801c994:	4082      	lsls	r2, r0
 801c996:	4322      	orrs	r2, r4
 801c998:	4547      	cmp	r7, r8
 801c99a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801c99e:	bf8c      	ite	hi
 801c9a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c9a4:	2200      	movls	r2, #0
 801c9a6:	4083      	lsls	r3, r0
 801c9a8:	40ca      	lsrs	r2, r1
 801c9aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c9ae:	4313      	orrs	r3, r2
 801c9b0:	e7de      	b.n	801c970 <__b2d+0x48>
 801c9b2:	ea42 0501 	orr.w	r5, r2, r1
 801c9b6:	e7db      	b.n	801c970 <__b2d+0x48>
 801c9b8:	3ff00000 	.word	0x3ff00000

0801c9bc <__d2b>:
 801c9bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c9c0:	460f      	mov	r7, r1
 801c9c2:	2101      	movs	r1, #1
 801c9c4:	ec59 8b10 	vmov	r8, r9, d0
 801c9c8:	4616      	mov	r6, r2
 801c9ca:	f7ff fc1b 	bl	801c204 <_Balloc>
 801c9ce:	4604      	mov	r4, r0
 801c9d0:	b930      	cbnz	r0, 801c9e0 <__d2b+0x24>
 801c9d2:	4602      	mov	r2, r0
 801c9d4:	4b23      	ldr	r3, [pc, #140]	@ (801ca64 <__d2b+0xa8>)
 801c9d6:	4824      	ldr	r0, [pc, #144]	@ (801ca68 <__d2b+0xac>)
 801c9d8:	f240 310f 	movw	r1, #783	@ 0x30f
 801c9dc:	f7fe f9b8 	bl	801ad50 <__assert_func>
 801c9e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c9e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c9e8:	b10d      	cbz	r5, 801c9ee <__d2b+0x32>
 801c9ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c9ee:	9301      	str	r3, [sp, #4]
 801c9f0:	f1b8 0300 	subs.w	r3, r8, #0
 801c9f4:	d023      	beq.n	801ca3e <__d2b+0x82>
 801c9f6:	4668      	mov	r0, sp
 801c9f8:	9300      	str	r3, [sp, #0]
 801c9fa:	f7ff fd14 	bl	801c426 <__lo0bits>
 801c9fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ca02:	b1d0      	cbz	r0, 801ca3a <__d2b+0x7e>
 801ca04:	f1c0 0320 	rsb	r3, r0, #32
 801ca08:	fa02 f303 	lsl.w	r3, r2, r3
 801ca0c:	430b      	orrs	r3, r1
 801ca0e:	40c2      	lsrs	r2, r0
 801ca10:	6163      	str	r3, [r4, #20]
 801ca12:	9201      	str	r2, [sp, #4]
 801ca14:	9b01      	ldr	r3, [sp, #4]
 801ca16:	61a3      	str	r3, [r4, #24]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	bf0c      	ite	eq
 801ca1c:	2201      	moveq	r2, #1
 801ca1e:	2202      	movne	r2, #2
 801ca20:	6122      	str	r2, [r4, #16]
 801ca22:	b1a5      	cbz	r5, 801ca4e <__d2b+0x92>
 801ca24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ca28:	4405      	add	r5, r0
 801ca2a:	603d      	str	r5, [r7, #0]
 801ca2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ca30:	6030      	str	r0, [r6, #0]
 801ca32:	4620      	mov	r0, r4
 801ca34:	b003      	add	sp, #12
 801ca36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ca3a:	6161      	str	r1, [r4, #20]
 801ca3c:	e7ea      	b.n	801ca14 <__d2b+0x58>
 801ca3e:	a801      	add	r0, sp, #4
 801ca40:	f7ff fcf1 	bl	801c426 <__lo0bits>
 801ca44:	9b01      	ldr	r3, [sp, #4]
 801ca46:	6163      	str	r3, [r4, #20]
 801ca48:	3020      	adds	r0, #32
 801ca4a:	2201      	movs	r2, #1
 801ca4c:	e7e8      	b.n	801ca20 <__d2b+0x64>
 801ca4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ca52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ca56:	6038      	str	r0, [r7, #0]
 801ca58:	6918      	ldr	r0, [r3, #16]
 801ca5a:	f7ff fcc5 	bl	801c3e8 <__hi0bits>
 801ca5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ca62:	e7e5      	b.n	801ca30 <__d2b+0x74>
 801ca64:	08021b73 	.word	0x08021b73
 801ca68:	08021be4 	.word	0x08021be4

0801ca6c <__ratio>:
 801ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca70:	b085      	sub	sp, #20
 801ca72:	e9cd 1000 	strd	r1, r0, [sp]
 801ca76:	a902      	add	r1, sp, #8
 801ca78:	f7ff ff56 	bl	801c928 <__b2d>
 801ca7c:	9800      	ldr	r0, [sp, #0]
 801ca7e:	a903      	add	r1, sp, #12
 801ca80:	ec55 4b10 	vmov	r4, r5, d0
 801ca84:	f7ff ff50 	bl	801c928 <__b2d>
 801ca88:	9b01      	ldr	r3, [sp, #4]
 801ca8a:	6919      	ldr	r1, [r3, #16]
 801ca8c:	9b00      	ldr	r3, [sp, #0]
 801ca8e:	691b      	ldr	r3, [r3, #16]
 801ca90:	1ac9      	subs	r1, r1, r3
 801ca92:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801ca96:	1a9b      	subs	r3, r3, r2
 801ca98:	ec5b ab10 	vmov	sl, fp, d0
 801ca9c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	bfce      	itee	gt
 801caa4:	462a      	movgt	r2, r5
 801caa6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801caaa:	465a      	movle	r2, fp
 801caac:	462f      	mov	r7, r5
 801caae:	46d9      	mov	r9, fp
 801cab0:	bfcc      	ite	gt
 801cab2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801cab6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801caba:	464b      	mov	r3, r9
 801cabc:	4652      	mov	r2, sl
 801cabe:	4620      	mov	r0, r4
 801cac0:	4639      	mov	r1, r7
 801cac2:	f7e3 fed3 	bl	800086c <__aeabi_ddiv>
 801cac6:	ec41 0b10 	vmov	d0, r0, r1
 801caca:	b005      	add	sp, #20
 801cacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cad0 <__copybits>:
 801cad0:	3901      	subs	r1, #1
 801cad2:	b570      	push	{r4, r5, r6, lr}
 801cad4:	1149      	asrs	r1, r1, #5
 801cad6:	6914      	ldr	r4, [r2, #16]
 801cad8:	3101      	adds	r1, #1
 801cada:	f102 0314 	add.w	r3, r2, #20
 801cade:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cae2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801cae6:	1f05      	subs	r5, r0, #4
 801cae8:	42a3      	cmp	r3, r4
 801caea:	d30c      	bcc.n	801cb06 <__copybits+0x36>
 801caec:	1aa3      	subs	r3, r4, r2
 801caee:	3b11      	subs	r3, #17
 801caf0:	f023 0303 	bic.w	r3, r3, #3
 801caf4:	3211      	adds	r2, #17
 801caf6:	42a2      	cmp	r2, r4
 801caf8:	bf88      	it	hi
 801cafa:	2300      	movhi	r3, #0
 801cafc:	4418      	add	r0, r3
 801cafe:	2300      	movs	r3, #0
 801cb00:	4288      	cmp	r0, r1
 801cb02:	d305      	bcc.n	801cb10 <__copybits+0x40>
 801cb04:	bd70      	pop	{r4, r5, r6, pc}
 801cb06:	f853 6b04 	ldr.w	r6, [r3], #4
 801cb0a:	f845 6f04 	str.w	r6, [r5, #4]!
 801cb0e:	e7eb      	b.n	801cae8 <__copybits+0x18>
 801cb10:	f840 3b04 	str.w	r3, [r0], #4
 801cb14:	e7f4      	b.n	801cb00 <__copybits+0x30>

0801cb16 <__any_on>:
 801cb16:	f100 0214 	add.w	r2, r0, #20
 801cb1a:	6900      	ldr	r0, [r0, #16]
 801cb1c:	114b      	asrs	r3, r1, #5
 801cb1e:	4298      	cmp	r0, r3
 801cb20:	b510      	push	{r4, lr}
 801cb22:	db11      	blt.n	801cb48 <__any_on+0x32>
 801cb24:	dd0a      	ble.n	801cb3c <__any_on+0x26>
 801cb26:	f011 011f 	ands.w	r1, r1, #31
 801cb2a:	d007      	beq.n	801cb3c <__any_on+0x26>
 801cb2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cb30:	fa24 f001 	lsr.w	r0, r4, r1
 801cb34:	fa00 f101 	lsl.w	r1, r0, r1
 801cb38:	428c      	cmp	r4, r1
 801cb3a:	d10b      	bne.n	801cb54 <__any_on+0x3e>
 801cb3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb40:	4293      	cmp	r3, r2
 801cb42:	d803      	bhi.n	801cb4c <__any_on+0x36>
 801cb44:	2000      	movs	r0, #0
 801cb46:	bd10      	pop	{r4, pc}
 801cb48:	4603      	mov	r3, r0
 801cb4a:	e7f7      	b.n	801cb3c <__any_on+0x26>
 801cb4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cb50:	2900      	cmp	r1, #0
 801cb52:	d0f5      	beq.n	801cb40 <__any_on+0x2a>
 801cb54:	2001      	movs	r0, #1
 801cb56:	e7f6      	b.n	801cb46 <__any_on+0x30>

0801cb58 <_strtoul_l.isra.0>:
 801cb58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cb5c:	4e34      	ldr	r6, [pc, #208]	@ (801cc30 <_strtoul_l.isra.0+0xd8>)
 801cb5e:	4686      	mov	lr, r0
 801cb60:	460d      	mov	r5, r1
 801cb62:	4628      	mov	r0, r5
 801cb64:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cb68:	5d37      	ldrb	r7, [r6, r4]
 801cb6a:	f017 0708 	ands.w	r7, r7, #8
 801cb6e:	d1f8      	bne.n	801cb62 <_strtoul_l.isra.0+0xa>
 801cb70:	2c2d      	cmp	r4, #45	@ 0x2d
 801cb72:	d110      	bne.n	801cb96 <_strtoul_l.isra.0+0x3e>
 801cb74:	782c      	ldrb	r4, [r5, #0]
 801cb76:	2701      	movs	r7, #1
 801cb78:	1c85      	adds	r5, r0, #2
 801cb7a:	f033 0010 	bics.w	r0, r3, #16
 801cb7e:	d115      	bne.n	801cbac <_strtoul_l.isra.0+0x54>
 801cb80:	2c30      	cmp	r4, #48	@ 0x30
 801cb82:	d10d      	bne.n	801cba0 <_strtoul_l.isra.0+0x48>
 801cb84:	7828      	ldrb	r0, [r5, #0]
 801cb86:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801cb8a:	2858      	cmp	r0, #88	@ 0x58
 801cb8c:	d108      	bne.n	801cba0 <_strtoul_l.isra.0+0x48>
 801cb8e:	786c      	ldrb	r4, [r5, #1]
 801cb90:	3502      	adds	r5, #2
 801cb92:	2310      	movs	r3, #16
 801cb94:	e00a      	b.n	801cbac <_strtoul_l.isra.0+0x54>
 801cb96:	2c2b      	cmp	r4, #43	@ 0x2b
 801cb98:	bf04      	itt	eq
 801cb9a:	782c      	ldrbeq	r4, [r5, #0]
 801cb9c:	1c85      	addeq	r5, r0, #2
 801cb9e:	e7ec      	b.n	801cb7a <_strtoul_l.isra.0+0x22>
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d1f6      	bne.n	801cb92 <_strtoul_l.isra.0+0x3a>
 801cba4:	2c30      	cmp	r4, #48	@ 0x30
 801cba6:	bf14      	ite	ne
 801cba8:	230a      	movne	r3, #10
 801cbaa:	2308      	moveq	r3, #8
 801cbac:	f04f 38ff 	mov.w	r8, #4294967295
 801cbb0:	2600      	movs	r6, #0
 801cbb2:	fbb8 f8f3 	udiv	r8, r8, r3
 801cbb6:	fb03 f908 	mul.w	r9, r3, r8
 801cbba:	ea6f 0909 	mvn.w	r9, r9
 801cbbe:	4630      	mov	r0, r6
 801cbc0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801cbc4:	f1bc 0f09 	cmp.w	ip, #9
 801cbc8:	d810      	bhi.n	801cbec <_strtoul_l.isra.0+0x94>
 801cbca:	4664      	mov	r4, ip
 801cbcc:	42a3      	cmp	r3, r4
 801cbce:	dd1e      	ble.n	801cc0e <_strtoul_l.isra.0+0xb6>
 801cbd0:	f1b6 3fff 	cmp.w	r6, #4294967295
 801cbd4:	d007      	beq.n	801cbe6 <_strtoul_l.isra.0+0x8e>
 801cbd6:	4580      	cmp	r8, r0
 801cbd8:	d316      	bcc.n	801cc08 <_strtoul_l.isra.0+0xb0>
 801cbda:	d101      	bne.n	801cbe0 <_strtoul_l.isra.0+0x88>
 801cbdc:	45a1      	cmp	r9, r4
 801cbde:	db13      	blt.n	801cc08 <_strtoul_l.isra.0+0xb0>
 801cbe0:	fb00 4003 	mla	r0, r0, r3, r4
 801cbe4:	2601      	movs	r6, #1
 801cbe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cbea:	e7e9      	b.n	801cbc0 <_strtoul_l.isra.0+0x68>
 801cbec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801cbf0:	f1bc 0f19 	cmp.w	ip, #25
 801cbf4:	d801      	bhi.n	801cbfa <_strtoul_l.isra.0+0xa2>
 801cbf6:	3c37      	subs	r4, #55	@ 0x37
 801cbf8:	e7e8      	b.n	801cbcc <_strtoul_l.isra.0+0x74>
 801cbfa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801cbfe:	f1bc 0f19 	cmp.w	ip, #25
 801cc02:	d804      	bhi.n	801cc0e <_strtoul_l.isra.0+0xb6>
 801cc04:	3c57      	subs	r4, #87	@ 0x57
 801cc06:	e7e1      	b.n	801cbcc <_strtoul_l.isra.0+0x74>
 801cc08:	f04f 36ff 	mov.w	r6, #4294967295
 801cc0c:	e7eb      	b.n	801cbe6 <_strtoul_l.isra.0+0x8e>
 801cc0e:	1c73      	adds	r3, r6, #1
 801cc10:	d106      	bne.n	801cc20 <_strtoul_l.isra.0+0xc8>
 801cc12:	2322      	movs	r3, #34	@ 0x22
 801cc14:	f8ce 3000 	str.w	r3, [lr]
 801cc18:	4630      	mov	r0, r6
 801cc1a:	b932      	cbnz	r2, 801cc2a <_strtoul_l.isra.0+0xd2>
 801cc1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc20:	b107      	cbz	r7, 801cc24 <_strtoul_l.isra.0+0xcc>
 801cc22:	4240      	negs	r0, r0
 801cc24:	2a00      	cmp	r2, #0
 801cc26:	d0f9      	beq.n	801cc1c <_strtoul_l.isra.0+0xc4>
 801cc28:	b106      	cbz	r6, 801cc2c <_strtoul_l.isra.0+0xd4>
 801cc2a:	1e69      	subs	r1, r5, #1
 801cc2c:	6011      	str	r1, [r2, #0]
 801cc2e:	e7f5      	b.n	801cc1c <_strtoul_l.isra.0+0xc4>
 801cc30:	08021cc1 	.word	0x08021cc1

0801cc34 <_strtoul_r>:
 801cc34:	f7ff bf90 	b.w	801cb58 <_strtoul_l.isra.0>

0801cc38 <strtoul>:
 801cc38:	4613      	mov	r3, r2
 801cc3a:	460a      	mov	r2, r1
 801cc3c:	4601      	mov	r1, r0
 801cc3e:	4802      	ldr	r0, [pc, #8]	@ (801cc48 <strtoul+0x10>)
 801cc40:	6800      	ldr	r0, [r0, #0]
 801cc42:	f7ff bf89 	b.w	801cb58 <_strtoul_l.isra.0>
 801cc46:	bf00      	nop
 801cc48:	200001c0 	.word	0x200001c0

0801cc4c <__ascii_wctomb>:
 801cc4c:	4603      	mov	r3, r0
 801cc4e:	4608      	mov	r0, r1
 801cc50:	b141      	cbz	r1, 801cc64 <__ascii_wctomb+0x18>
 801cc52:	2aff      	cmp	r2, #255	@ 0xff
 801cc54:	d904      	bls.n	801cc60 <__ascii_wctomb+0x14>
 801cc56:	228a      	movs	r2, #138	@ 0x8a
 801cc58:	601a      	str	r2, [r3, #0]
 801cc5a:	f04f 30ff 	mov.w	r0, #4294967295
 801cc5e:	4770      	bx	lr
 801cc60:	700a      	strb	r2, [r1, #0]
 801cc62:	2001      	movs	r0, #1
 801cc64:	4770      	bx	lr

0801cc66 <__ssputs_r>:
 801cc66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc6a:	688e      	ldr	r6, [r1, #8]
 801cc6c:	461f      	mov	r7, r3
 801cc6e:	42be      	cmp	r6, r7
 801cc70:	680b      	ldr	r3, [r1, #0]
 801cc72:	4682      	mov	sl, r0
 801cc74:	460c      	mov	r4, r1
 801cc76:	4690      	mov	r8, r2
 801cc78:	d82d      	bhi.n	801ccd6 <__ssputs_r+0x70>
 801cc7a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cc7e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801cc82:	d026      	beq.n	801ccd2 <__ssputs_r+0x6c>
 801cc84:	6965      	ldr	r5, [r4, #20]
 801cc86:	6909      	ldr	r1, [r1, #16]
 801cc88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc8c:	eba3 0901 	sub.w	r9, r3, r1
 801cc90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cc94:	1c7b      	adds	r3, r7, #1
 801cc96:	444b      	add	r3, r9
 801cc98:	106d      	asrs	r5, r5, #1
 801cc9a:	429d      	cmp	r5, r3
 801cc9c:	bf38      	it	cc
 801cc9e:	461d      	movcc	r5, r3
 801cca0:	0553      	lsls	r3, r2, #21
 801cca2:	d527      	bpl.n	801ccf4 <__ssputs_r+0x8e>
 801cca4:	4629      	mov	r1, r5
 801cca6:	f7fb f887 	bl	8017db8 <_malloc_r>
 801ccaa:	4606      	mov	r6, r0
 801ccac:	b360      	cbz	r0, 801cd08 <__ssputs_r+0xa2>
 801ccae:	6921      	ldr	r1, [r4, #16]
 801ccb0:	464a      	mov	r2, r9
 801ccb2:	f7fd ffde 	bl	801ac72 <memcpy>
 801ccb6:	89a3      	ldrh	r3, [r4, #12]
 801ccb8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ccbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ccc0:	81a3      	strh	r3, [r4, #12]
 801ccc2:	6126      	str	r6, [r4, #16]
 801ccc4:	6165      	str	r5, [r4, #20]
 801ccc6:	444e      	add	r6, r9
 801ccc8:	eba5 0509 	sub.w	r5, r5, r9
 801cccc:	6026      	str	r6, [r4, #0]
 801ccce:	60a5      	str	r5, [r4, #8]
 801ccd0:	463e      	mov	r6, r7
 801ccd2:	42be      	cmp	r6, r7
 801ccd4:	d900      	bls.n	801ccd8 <__ssputs_r+0x72>
 801ccd6:	463e      	mov	r6, r7
 801ccd8:	6820      	ldr	r0, [r4, #0]
 801ccda:	4632      	mov	r2, r6
 801ccdc:	4641      	mov	r1, r8
 801ccde:	f000 fd68 	bl	801d7b2 <memmove>
 801cce2:	68a3      	ldr	r3, [r4, #8]
 801cce4:	1b9b      	subs	r3, r3, r6
 801cce6:	60a3      	str	r3, [r4, #8]
 801cce8:	6823      	ldr	r3, [r4, #0]
 801ccea:	4433      	add	r3, r6
 801ccec:	6023      	str	r3, [r4, #0]
 801ccee:	2000      	movs	r0, #0
 801ccf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccf4:	462a      	mov	r2, r5
 801ccf6:	f000 fdc7 	bl	801d888 <_realloc_r>
 801ccfa:	4606      	mov	r6, r0
 801ccfc:	2800      	cmp	r0, #0
 801ccfe:	d1e0      	bne.n	801ccc2 <__ssputs_r+0x5c>
 801cd00:	6921      	ldr	r1, [r4, #16]
 801cd02:	4650      	mov	r0, sl
 801cd04:	f7fe fea4 	bl	801ba50 <_free_r>
 801cd08:	230c      	movs	r3, #12
 801cd0a:	f8ca 3000 	str.w	r3, [sl]
 801cd0e:	89a3      	ldrh	r3, [r4, #12]
 801cd10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cd14:	81a3      	strh	r3, [r4, #12]
 801cd16:	f04f 30ff 	mov.w	r0, #4294967295
 801cd1a:	e7e9      	b.n	801ccf0 <__ssputs_r+0x8a>

0801cd1c <_svfiprintf_r>:
 801cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd20:	4698      	mov	r8, r3
 801cd22:	898b      	ldrh	r3, [r1, #12]
 801cd24:	061b      	lsls	r3, r3, #24
 801cd26:	b09d      	sub	sp, #116	@ 0x74
 801cd28:	4607      	mov	r7, r0
 801cd2a:	460d      	mov	r5, r1
 801cd2c:	4614      	mov	r4, r2
 801cd2e:	d510      	bpl.n	801cd52 <_svfiprintf_r+0x36>
 801cd30:	690b      	ldr	r3, [r1, #16]
 801cd32:	b973      	cbnz	r3, 801cd52 <_svfiprintf_r+0x36>
 801cd34:	2140      	movs	r1, #64	@ 0x40
 801cd36:	f7fb f83f 	bl	8017db8 <_malloc_r>
 801cd3a:	6028      	str	r0, [r5, #0]
 801cd3c:	6128      	str	r0, [r5, #16]
 801cd3e:	b930      	cbnz	r0, 801cd4e <_svfiprintf_r+0x32>
 801cd40:	230c      	movs	r3, #12
 801cd42:	603b      	str	r3, [r7, #0]
 801cd44:	f04f 30ff 	mov.w	r0, #4294967295
 801cd48:	b01d      	add	sp, #116	@ 0x74
 801cd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd4e:	2340      	movs	r3, #64	@ 0x40
 801cd50:	616b      	str	r3, [r5, #20]
 801cd52:	2300      	movs	r3, #0
 801cd54:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd56:	2320      	movs	r3, #32
 801cd58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cd5c:	f8cd 800c 	str.w	r8, [sp, #12]
 801cd60:	2330      	movs	r3, #48	@ 0x30
 801cd62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801cf00 <_svfiprintf_r+0x1e4>
 801cd66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cd6a:	f04f 0901 	mov.w	r9, #1
 801cd6e:	4623      	mov	r3, r4
 801cd70:	469a      	mov	sl, r3
 801cd72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd76:	b10a      	cbz	r2, 801cd7c <_svfiprintf_r+0x60>
 801cd78:	2a25      	cmp	r2, #37	@ 0x25
 801cd7a:	d1f9      	bne.n	801cd70 <_svfiprintf_r+0x54>
 801cd7c:	ebba 0b04 	subs.w	fp, sl, r4
 801cd80:	d00b      	beq.n	801cd9a <_svfiprintf_r+0x7e>
 801cd82:	465b      	mov	r3, fp
 801cd84:	4622      	mov	r2, r4
 801cd86:	4629      	mov	r1, r5
 801cd88:	4638      	mov	r0, r7
 801cd8a:	f7ff ff6c 	bl	801cc66 <__ssputs_r>
 801cd8e:	3001      	adds	r0, #1
 801cd90:	f000 80a7 	beq.w	801cee2 <_svfiprintf_r+0x1c6>
 801cd94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd96:	445a      	add	r2, fp
 801cd98:	9209      	str	r2, [sp, #36]	@ 0x24
 801cd9a:	f89a 3000 	ldrb.w	r3, [sl]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	f000 809f 	beq.w	801cee2 <_svfiprintf_r+0x1c6>
 801cda4:	2300      	movs	r3, #0
 801cda6:	f04f 32ff 	mov.w	r2, #4294967295
 801cdaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cdae:	f10a 0a01 	add.w	sl, sl, #1
 801cdb2:	9304      	str	r3, [sp, #16]
 801cdb4:	9307      	str	r3, [sp, #28]
 801cdb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cdba:	931a      	str	r3, [sp, #104]	@ 0x68
 801cdbc:	4654      	mov	r4, sl
 801cdbe:	2205      	movs	r2, #5
 801cdc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdc4:	484e      	ldr	r0, [pc, #312]	@ (801cf00 <_svfiprintf_r+0x1e4>)
 801cdc6:	f7e3 fa13 	bl	80001f0 <memchr>
 801cdca:	9a04      	ldr	r2, [sp, #16]
 801cdcc:	b9d8      	cbnz	r0, 801ce06 <_svfiprintf_r+0xea>
 801cdce:	06d0      	lsls	r0, r2, #27
 801cdd0:	bf44      	itt	mi
 801cdd2:	2320      	movmi	r3, #32
 801cdd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cdd8:	0711      	lsls	r1, r2, #28
 801cdda:	bf44      	itt	mi
 801cddc:	232b      	movmi	r3, #43	@ 0x2b
 801cdde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cde2:	f89a 3000 	ldrb.w	r3, [sl]
 801cde6:	2b2a      	cmp	r3, #42	@ 0x2a
 801cde8:	d015      	beq.n	801ce16 <_svfiprintf_r+0xfa>
 801cdea:	9a07      	ldr	r2, [sp, #28]
 801cdec:	4654      	mov	r4, sl
 801cdee:	2000      	movs	r0, #0
 801cdf0:	f04f 0c0a 	mov.w	ip, #10
 801cdf4:	4621      	mov	r1, r4
 801cdf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cdfa:	3b30      	subs	r3, #48	@ 0x30
 801cdfc:	2b09      	cmp	r3, #9
 801cdfe:	d94b      	bls.n	801ce98 <_svfiprintf_r+0x17c>
 801ce00:	b1b0      	cbz	r0, 801ce30 <_svfiprintf_r+0x114>
 801ce02:	9207      	str	r2, [sp, #28]
 801ce04:	e014      	b.n	801ce30 <_svfiprintf_r+0x114>
 801ce06:	eba0 0308 	sub.w	r3, r0, r8
 801ce0a:	fa09 f303 	lsl.w	r3, r9, r3
 801ce0e:	4313      	orrs	r3, r2
 801ce10:	9304      	str	r3, [sp, #16]
 801ce12:	46a2      	mov	sl, r4
 801ce14:	e7d2      	b.n	801cdbc <_svfiprintf_r+0xa0>
 801ce16:	9b03      	ldr	r3, [sp, #12]
 801ce18:	1d19      	adds	r1, r3, #4
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	9103      	str	r1, [sp, #12]
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	bfbb      	ittet	lt
 801ce22:	425b      	neglt	r3, r3
 801ce24:	f042 0202 	orrlt.w	r2, r2, #2
 801ce28:	9307      	strge	r3, [sp, #28]
 801ce2a:	9307      	strlt	r3, [sp, #28]
 801ce2c:	bfb8      	it	lt
 801ce2e:	9204      	strlt	r2, [sp, #16]
 801ce30:	7823      	ldrb	r3, [r4, #0]
 801ce32:	2b2e      	cmp	r3, #46	@ 0x2e
 801ce34:	d10a      	bne.n	801ce4c <_svfiprintf_r+0x130>
 801ce36:	7863      	ldrb	r3, [r4, #1]
 801ce38:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce3a:	d132      	bne.n	801cea2 <_svfiprintf_r+0x186>
 801ce3c:	9b03      	ldr	r3, [sp, #12]
 801ce3e:	1d1a      	adds	r2, r3, #4
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	9203      	str	r2, [sp, #12]
 801ce44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ce48:	3402      	adds	r4, #2
 801ce4a:	9305      	str	r3, [sp, #20]
 801ce4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cf10 <_svfiprintf_r+0x1f4>
 801ce50:	7821      	ldrb	r1, [r4, #0]
 801ce52:	2203      	movs	r2, #3
 801ce54:	4650      	mov	r0, sl
 801ce56:	f7e3 f9cb 	bl	80001f0 <memchr>
 801ce5a:	b138      	cbz	r0, 801ce6c <_svfiprintf_r+0x150>
 801ce5c:	9b04      	ldr	r3, [sp, #16]
 801ce5e:	eba0 000a 	sub.w	r0, r0, sl
 801ce62:	2240      	movs	r2, #64	@ 0x40
 801ce64:	4082      	lsls	r2, r0
 801ce66:	4313      	orrs	r3, r2
 801ce68:	3401      	adds	r4, #1
 801ce6a:	9304      	str	r3, [sp, #16]
 801ce6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce70:	4824      	ldr	r0, [pc, #144]	@ (801cf04 <_svfiprintf_r+0x1e8>)
 801ce72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ce76:	2206      	movs	r2, #6
 801ce78:	f7e3 f9ba 	bl	80001f0 <memchr>
 801ce7c:	2800      	cmp	r0, #0
 801ce7e:	d036      	beq.n	801ceee <_svfiprintf_r+0x1d2>
 801ce80:	4b21      	ldr	r3, [pc, #132]	@ (801cf08 <_svfiprintf_r+0x1ec>)
 801ce82:	bb1b      	cbnz	r3, 801cecc <_svfiprintf_r+0x1b0>
 801ce84:	9b03      	ldr	r3, [sp, #12]
 801ce86:	3307      	adds	r3, #7
 801ce88:	f023 0307 	bic.w	r3, r3, #7
 801ce8c:	3308      	adds	r3, #8
 801ce8e:	9303      	str	r3, [sp, #12]
 801ce90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce92:	4433      	add	r3, r6
 801ce94:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce96:	e76a      	b.n	801cd6e <_svfiprintf_r+0x52>
 801ce98:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce9c:	460c      	mov	r4, r1
 801ce9e:	2001      	movs	r0, #1
 801cea0:	e7a8      	b.n	801cdf4 <_svfiprintf_r+0xd8>
 801cea2:	2300      	movs	r3, #0
 801cea4:	3401      	adds	r4, #1
 801cea6:	9305      	str	r3, [sp, #20]
 801cea8:	4619      	mov	r1, r3
 801ceaa:	f04f 0c0a 	mov.w	ip, #10
 801ceae:	4620      	mov	r0, r4
 801ceb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ceb4:	3a30      	subs	r2, #48	@ 0x30
 801ceb6:	2a09      	cmp	r2, #9
 801ceb8:	d903      	bls.n	801cec2 <_svfiprintf_r+0x1a6>
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d0c6      	beq.n	801ce4c <_svfiprintf_r+0x130>
 801cebe:	9105      	str	r1, [sp, #20]
 801cec0:	e7c4      	b.n	801ce4c <_svfiprintf_r+0x130>
 801cec2:	fb0c 2101 	mla	r1, ip, r1, r2
 801cec6:	4604      	mov	r4, r0
 801cec8:	2301      	movs	r3, #1
 801ceca:	e7f0      	b.n	801ceae <_svfiprintf_r+0x192>
 801cecc:	ab03      	add	r3, sp, #12
 801cece:	9300      	str	r3, [sp, #0]
 801ced0:	462a      	mov	r2, r5
 801ced2:	4b0e      	ldr	r3, [pc, #56]	@ (801cf0c <_svfiprintf_r+0x1f0>)
 801ced4:	a904      	add	r1, sp, #16
 801ced6:	4638      	mov	r0, r7
 801ced8:	f7fb ff36 	bl	8018d48 <_printf_float>
 801cedc:	1c42      	adds	r2, r0, #1
 801cede:	4606      	mov	r6, r0
 801cee0:	d1d6      	bne.n	801ce90 <_svfiprintf_r+0x174>
 801cee2:	89ab      	ldrh	r3, [r5, #12]
 801cee4:	065b      	lsls	r3, r3, #25
 801cee6:	f53f af2d 	bmi.w	801cd44 <_svfiprintf_r+0x28>
 801ceea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ceec:	e72c      	b.n	801cd48 <_svfiprintf_r+0x2c>
 801ceee:	ab03      	add	r3, sp, #12
 801cef0:	9300      	str	r3, [sp, #0]
 801cef2:	462a      	mov	r2, r5
 801cef4:	4b05      	ldr	r3, [pc, #20]	@ (801cf0c <_svfiprintf_r+0x1f0>)
 801cef6:	a904      	add	r1, sp, #16
 801cef8:	4638      	mov	r0, r7
 801cefa:	f7fc f9bd 	bl	8019278 <_printf_i>
 801cefe:	e7ed      	b.n	801cedc <_svfiprintf_r+0x1c0>
 801cf00:	08021c3d 	.word	0x08021c3d
 801cf04:	08021c47 	.word	0x08021c47
 801cf08:	08018d49 	.word	0x08018d49
 801cf0c:	0801cc67 	.word	0x0801cc67
 801cf10:	08021c43 	.word	0x08021c43

0801cf14 <_sungetc_r>:
 801cf14:	b538      	push	{r3, r4, r5, lr}
 801cf16:	1c4b      	adds	r3, r1, #1
 801cf18:	4614      	mov	r4, r2
 801cf1a:	d103      	bne.n	801cf24 <_sungetc_r+0x10>
 801cf1c:	f04f 35ff 	mov.w	r5, #4294967295
 801cf20:	4628      	mov	r0, r5
 801cf22:	bd38      	pop	{r3, r4, r5, pc}
 801cf24:	8993      	ldrh	r3, [r2, #12]
 801cf26:	f023 0320 	bic.w	r3, r3, #32
 801cf2a:	8193      	strh	r3, [r2, #12]
 801cf2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cf2e:	6852      	ldr	r2, [r2, #4]
 801cf30:	b2cd      	uxtb	r5, r1
 801cf32:	b18b      	cbz	r3, 801cf58 <_sungetc_r+0x44>
 801cf34:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cf36:	4293      	cmp	r3, r2
 801cf38:	dd08      	ble.n	801cf4c <_sungetc_r+0x38>
 801cf3a:	6823      	ldr	r3, [r4, #0]
 801cf3c:	1e5a      	subs	r2, r3, #1
 801cf3e:	6022      	str	r2, [r4, #0]
 801cf40:	f803 5c01 	strb.w	r5, [r3, #-1]
 801cf44:	6863      	ldr	r3, [r4, #4]
 801cf46:	3301      	adds	r3, #1
 801cf48:	6063      	str	r3, [r4, #4]
 801cf4a:	e7e9      	b.n	801cf20 <_sungetc_r+0xc>
 801cf4c:	4621      	mov	r1, r4
 801cf4e:	f000 fbf6 	bl	801d73e <__submore>
 801cf52:	2800      	cmp	r0, #0
 801cf54:	d0f1      	beq.n	801cf3a <_sungetc_r+0x26>
 801cf56:	e7e1      	b.n	801cf1c <_sungetc_r+0x8>
 801cf58:	6921      	ldr	r1, [r4, #16]
 801cf5a:	6823      	ldr	r3, [r4, #0]
 801cf5c:	b151      	cbz	r1, 801cf74 <_sungetc_r+0x60>
 801cf5e:	4299      	cmp	r1, r3
 801cf60:	d208      	bcs.n	801cf74 <_sungetc_r+0x60>
 801cf62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801cf66:	42a9      	cmp	r1, r5
 801cf68:	d104      	bne.n	801cf74 <_sungetc_r+0x60>
 801cf6a:	3b01      	subs	r3, #1
 801cf6c:	3201      	adds	r2, #1
 801cf6e:	6023      	str	r3, [r4, #0]
 801cf70:	6062      	str	r2, [r4, #4]
 801cf72:	e7d5      	b.n	801cf20 <_sungetc_r+0xc>
 801cf74:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801cf78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cf7c:	6363      	str	r3, [r4, #52]	@ 0x34
 801cf7e:	2303      	movs	r3, #3
 801cf80:	63a3      	str	r3, [r4, #56]	@ 0x38
 801cf82:	4623      	mov	r3, r4
 801cf84:	f803 5f46 	strb.w	r5, [r3, #70]!
 801cf88:	6023      	str	r3, [r4, #0]
 801cf8a:	2301      	movs	r3, #1
 801cf8c:	e7dc      	b.n	801cf48 <_sungetc_r+0x34>

0801cf8e <__ssrefill_r>:
 801cf8e:	b510      	push	{r4, lr}
 801cf90:	460c      	mov	r4, r1
 801cf92:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801cf94:	b169      	cbz	r1, 801cfb2 <__ssrefill_r+0x24>
 801cf96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cf9a:	4299      	cmp	r1, r3
 801cf9c:	d001      	beq.n	801cfa2 <__ssrefill_r+0x14>
 801cf9e:	f7fe fd57 	bl	801ba50 <_free_r>
 801cfa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cfa4:	6063      	str	r3, [r4, #4]
 801cfa6:	2000      	movs	r0, #0
 801cfa8:	6360      	str	r0, [r4, #52]	@ 0x34
 801cfaa:	b113      	cbz	r3, 801cfb2 <__ssrefill_r+0x24>
 801cfac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cfae:	6023      	str	r3, [r4, #0]
 801cfb0:	bd10      	pop	{r4, pc}
 801cfb2:	6923      	ldr	r3, [r4, #16]
 801cfb4:	6023      	str	r3, [r4, #0]
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	6063      	str	r3, [r4, #4]
 801cfba:	89a3      	ldrh	r3, [r4, #12]
 801cfbc:	f043 0320 	orr.w	r3, r3, #32
 801cfc0:	81a3      	strh	r3, [r4, #12]
 801cfc2:	f04f 30ff 	mov.w	r0, #4294967295
 801cfc6:	e7f3      	b.n	801cfb0 <__ssrefill_r+0x22>

0801cfc8 <__ssvfiscanf_r>:
 801cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfcc:	460c      	mov	r4, r1
 801cfce:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801cfd2:	2100      	movs	r1, #0
 801cfd4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801cfd8:	49a6      	ldr	r1, [pc, #664]	@ (801d274 <__ssvfiscanf_r+0x2ac>)
 801cfda:	91a0      	str	r1, [sp, #640]	@ 0x280
 801cfdc:	f10d 0804 	add.w	r8, sp, #4
 801cfe0:	49a5      	ldr	r1, [pc, #660]	@ (801d278 <__ssvfiscanf_r+0x2b0>)
 801cfe2:	4fa6      	ldr	r7, [pc, #664]	@ (801d27c <__ssvfiscanf_r+0x2b4>)
 801cfe4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801cfe8:	4606      	mov	r6, r0
 801cfea:	91a1      	str	r1, [sp, #644]	@ 0x284
 801cfec:	9300      	str	r3, [sp, #0]
 801cfee:	f892 9000 	ldrb.w	r9, [r2]
 801cff2:	f1b9 0f00 	cmp.w	r9, #0
 801cff6:	f000 8158 	beq.w	801d2aa <__ssvfiscanf_r+0x2e2>
 801cffa:	f817 3009 	ldrb.w	r3, [r7, r9]
 801cffe:	f013 0308 	ands.w	r3, r3, #8
 801d002:	f102 0501 	add.w	r5, r2, #1
 801d006:	d019      	beq.n	801d03c <__ssvfiscanf_r+0x74>
 801d008:	6863      	ldr	r3, [r4, #4]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	dd0f      	ble.n	801d02e <__ssvfiscanf_r+0x66>
 801d00e:	6823      	ldr	r3, [r4, #0]
 801d010:	781a      	ldrb	r2, [r3, #0]
 801d012:	5cba      	ldrb	r2, [r7, r2]
 801d014:	0712      	lsls	r2, r2, #28
 801d016:	d401      	bmi.n	801d01c <__ssvfiscanf_r+0x54>
 801d018:	462a      	mov	r2, r5
 801d01a:	e7e8      	b.n	801cfee <__ssvfiscanf_r+0x26>
 801d01c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d01e:	3201      	adds	r2, #1
 801d020:	9245      	str	r2, [sp, #276]	@ 0x114
 801d022:	6862      	ldr	r2, [r4, #4]
 801d024:	3301      	adds	r3, #1
 801d026:	3a01      	subs	r2, #1
 801d028:	6062      	str	r2, [r4, #4]
 801d02a:	6023      	str	r3, [r4, #0]
 801d02c:	e7ec      	b.n	801d008 <__ssvfiscanf_r+0x40>
 801d02e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d030:	4621      	mov	r1, r4
 801d032:	4630      	mov	r0, r6
 801d034:	4798      	blx	r3
 801d036:	2800      	cmp	r0, #0
 801d038:	d0e9      	beq.n	801d00e <__ssvfiscanf_r+0x46>
 801d03a:	e7ed      	b.n	801d018 <__ssvfiscanf_r+0x50>
 801d03c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801d040:	f040 8085 	bne.w	801d14e <__ssvfiscanf_r+0x186>
 801d044:	9341      	str	r3, [sp, #260]	@ 0x104
 801d046:	9343      	str	r3, [sp, #268]	@ 0x10c
 801d048:	7853      	ldrb	r3, [r2, #1]
 801d04a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d04c:	bf02      	ittt	eq
 801d04e:	2310      	moveq	r3, #16
 801d050:	1c95      	addeq	r5, r2, #2
 801d052:	9341      	streq	r3, [sp, #260]	@ 0x104
 801d054:	220a      	movs	r2, #10
 801d056:	46aa      	mov	sl, r5
 801d058:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801d05c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801d060:	2b09      	cmp	r3, #9
 801d062:	d91e      	bls.n	801d0a2 <__ssvfiscanf_r+0xda>
 801d064:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801d280 <__ssvfiscanf_r+0x2b8>
 801d068:	2203      	movs	r2, #3
 801d06a:	4658      	mov	r0, fp
 801d06c:	f7e3 f8c0 	bl	80001f0 <memchr>
 801d070:	b138      	cbz	r0, 801d082 <__ssvfiscanf_r+0xba>
 801d072:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d074:	eba0 000b 	sub.w	r0, r0, fp
 801d078:	2301      	movs	r3, #1
 801d07a:	4083      	lsls	r3, r0
 801d07c:	4313      	orrs	r3, r2
 801d07e:	9341      	str	r3, [sp, #260]	@ 0x104
 801d080:	4655      	mov	r5, sl
 801d082:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d086:	2b78      	cmp	r3, #120	@ 0x78
 801d088:	d806      	bhi.n	801d098 <__ssvfiscanf_r+0xd0>
 801d08a:	2b57      	cmp	r3, #87	@ 0x57
 801d08c:	d810      	bhi.n	801d0b0 <__ssvfiscanf_r+0xe8>
 801d08e:	2b25      	cmp	r3, #37	@ 0x25
 801d090:	d05d      	beq.n	801d14e <__ssvfiscanf_r+0x186>
 801d092:	d857      	bhi.n	801d144 <__ssvfiscanf_r+0x17c>
 801d094:	2b00      	cmp	r3, #0
 801d096:	d075      	beq.n	801d184 <__ssvfiscanf_r+0x1bc>
 801d098:	2303      	movs	r3, #3
 801d09a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d09c:	230a      	movs	r3, #10
 801d09e:	9342      	str	r3, [sp, #264]	@ 0x108
 801d0a0:	e088      	b.n	801d1b4 <__ssvfiscanf_r+0x1ec>
 801d0a2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801d0a4:	fb02 1103 	mla	r1, r2, r3, r1
 801d0a8:	3930      	subs	r1, #48	@ 0x30
 801d0aa:	9143      	str	r1, [sp, #268]	@ 0x10c
 801d0ac:	4655      	mov	r5, sl
 801d0ae:	e7d2      	b.n	801d056 <__ssvfiscanf_r+0x8e>
 801d0b0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801d0b4:	2a20      	cmp	r2, #32
 801d0b6:	d8ef      	bhi.n	801d098 <__ssvfiscanf_r+0xd0>
 801d0b8:	a101      	add	r1, pc, #4	@ (adr r1, 801d0c0 <__ssvfiscanf_r+0xf8>)
 801d0ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d0be:	bf00      	nop
 801d0c0:	0801d193 	.word	0x0801d193
 801d0c4:	0801d099 	.word	0x0801d099
 801d0c8:	0801d099 	.word	0x0801d099
 801d0cc:	0801d1ed 	.word	0x0801d1ed
 801d0d0:	0801d099 	.word	0x0801d099
 801d0d4:	0801d099 	.word	0x0801d099
 801d0d8:	0801d099 	.word	0x0801d099
 801d0dc:	0801d099 	.word	0x0801d099
 801d0e0:	0801d099 	.word	0x0801d099
 801d0e4:	0801d099 	.word	0x0801d099
 801d0e8:	0801d099 	.word	0x0801d099
 801d0ec:	0801d203 	.word	0x0801d203
 801d0f0:	0801d1e9 	.word	0x0801d1e9
 801d0f4:	0801d14b 	.word	0x0801d14b
 801d0f8:	0801d14b 	.word	0x0801d14b
 801d0fc:	0801d14b 	.word	0x0801d14b
 801d100:	0801d099 	.word	0x0801d099
 801d104:	0801d1a5 	.word	0x0801d1a5
 801d108:	0801d099 	.word	0x0801d099
 801d10c:	0801d099 	.word	0x0801d099
 801d110:	0801d099 	.word	0x0801d099
 801d114:	0801d099 	.word	0x0801d099
 801d118:	0801d213 	.word	0x0801d213
 801d11c:	0801d1ad 	.word	0x0801d1ad
 801d120:	0801d18b 	.word	0x0801d18b
 801d124:	0801d099 	.word	0x0801d099
 801d128:	0801d099 	.word	0x0801d099
 801d12c:	0801d20f 	.word	0x0801d20f
 801d130:	0801d099 	.word	0x0801d099
 801d134:	0801d1e9 	.word	0x0801d1e9
 801d138:	0801d099 	.word	0x0801d099
 801d13c:	0801d099 	.word	0x0801d099
 801d140:	0801d193 	.word	0x0801d193
 801d144:	3b45      	subs	r3, #69	@ 0x45
 801d146:	2b02      	cmp	r3, #2
 801d148:	d8a6      	bhi.n	801d098 <__ssvfiscanf_r+0xd0>
 801d14a:	2305      	movs	r3, #5
 801d14c:	e031      	b.n	801d1b2 <__ssvfiscanf_r+0x1ea>
 801d14e:	6863      	ldr	r3, [r4, #4]
 801d150:	2b00      	cmp	r3, #0
 801d152:	dd0d      	ble.n	801d170 <__ssvfiscanf_r+0x1a8>
 801d154:	6823      	ldr	r3, [r4, #0]
 801d156:	781a      	ldrb	r2, [r3, #0]
 801d158:	454a      	cmp	r2, r9
 801d15a:	f040 80a6 	bne.w	801d2aa <__ssvfiscanf_r+0x2e2>
 801d15e:	3301      	adds	r3, #1
 801d160:	6862      	ldr	r2, [r4, #4]
 801d162:	6023      	str	r3, [r4, #0]
 801d164:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801d166:	3a01      	subs	r2, #1
 801d168:	3301      	adds	r3, #1
 801d16a:	6062      	str	r2, [r4, #4]
 801d16c:	9345      	str	r3, [sp, #276]	@ 0x114
 801d16e:	e753      	b.n	801d018 <__ssvfiscanf_r+0x50>
 801d170:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d172:	4621      	mov	r1, r4
 801d174:	4630      	mov	r0, r6
 801d176:	4798      	blx	r3
 801d178:	2800      	cmp	r0, #0
 801d17a:	d0eb      	beq.n	801d154 <__ssvfiscanf_r+0x18c>
 801d17c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d17e:	2800      	cmp	r0, #0
 801d180:	f040 808b 	bne.w	801d29a <__ssvfiscanf_r+0x2d2>
 801d184:	f04f 30ff 	mov.w	r0, #4294967295
 801d188:	e08b      	b.n	801d2a2 <__ssvfiscanf_r+0x2da>
 801d18a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d18c:	f042 0220 	orr.w	r2, r2, #32
 801d190:	9241      	str	r2, [sp, #260]	@ 0x104
 801d192:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d198:	9241      	str	r2, [sp, #260]	@ 0x104
 801d19a:	2210      	movs	r2, #16
 801d19c:	2b6e      	cmp	r3, #110	@ 0x6e
 801d19e:	9242      	str	r2, [sp, #264]	@ 0x108
 801d1a0:	d902      	bls.n	801d1a8 <__ssvfiscanf_r+0x1e0>
 801d1a2:	e005      	b.n	801d1b0 <__ssvfiscanf_r+0x1e8>
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	9342      	str	r3, [sp, #264]	@ 0x108
 801d1a8:	2303      	movs	r3, #3
 801d1aa:	e002      	b.n	801d1b2 <__ssvfiscanf_r+0x1ea>
 801d1ac:	2308      	movs	r3, #8
 801d1ae:	9342      	str	r3, [sp, #264]	@ 0x108
 801d1b0:	2304      	movs	r3, #4
 801d1b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d1b4:	6863      	ldr	r3, [r4, #4]
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	dd39      	ble.n	801d22e <__ssvfiscanf_r+0x266>
 801d1ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d1bc:	0659      	lsls	r1, r3, #25
 801d1be:	d404      	bmi.n	801d1ca <__ssvfiscanf_r+0x202>
 801d1c0:	6823      	ldr	r3, [r4, #0]
 801d1c2:	781a      	ldrb	r2, [r3, #0]
 801d1c4:	5cba      	ldrb	r2, [r7, r2]
 801d1c6:	0712      	lsls	r2, r2, #28
 801d1c8:	d438      	bmi.n	801d23c <__ssvfiscanf_r+0x274>
 801d1ca:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801d1cc:	2b02      	cmp	r3, #2
 801d1ce:	dc47      	bgt.n	801d260 <__ssvfiscanf_r+0x298>
 801d1d0:	466b      	mov	r3, sp
 801d1d2:	4622      	mov	r2, r4
 801d1d4:	a941      	add	r1, sp, #260	@ 0x104
 801d1d6:	4630      	mov	r0, r6
 801d1d8:	f000 f86c 	bl	801d2b4 <_scanf_chars>
 801d1dc:	2801      	cmp	r0, #1
 801d1de:	d064      	beq.n	801d2aa <__ssvfiscanf_r+0x2e2>
 801d1e0:	2802      	cmp	r0, #2
 801d1e2:	f47f af19 	bne.w	801d018 <__ssvfiscanf_r+0x50>
 801d1e6:	e7c9      	b.n	801d17c <__ssvfiscanf_r+0x1b4>
 801d1e8:	220a      	movs	r2, #10
 801d1ea:	e7d7      	b.n	801d19c <__ssvfiscanf_r+0x1d4>
 801d1ec:	4629      	mov	r1, r5
 801d1ee:	4640      	mov	r0, r8
 801d1f0:	f000 fa6c 	bl	801d6cc <__sccl>
 801d1f4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d1fa:	9341      	str	r3, [sp, #260]	@ 0x104
 801d1fc:	4605      	mov	r5, r0
 801d1fe:	2301      	movs	r3, #1
 801d200:	e7d7      	b.n	801d1b2 <__ssvfiscanf_r+0x1ea>
 801d202:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d208:	9341      	str	r3, [sp, #260]	@ 0x104
 801d20a:	2300      	movs	r3, #0
 801d20c:	e7d1      	b.n	801d1b2 <__ssvfiscanf_r+0x1ea>
 801d20e:	2302      	movs	r3, #2
 801d210:	e7cf      	b.n	801d1b2 <__ssvfiscanf_r+0x1ea>
 801d212:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801d214:	06c3      	lsls	r3, r0, #27
 801d216:	f53f aeff 	bmi.w	801d018 <__ssvfiscanf_r+0x50>
 801d21a:	9b00      	ldr	r3, [sp, #0]
 801d21c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d21e:	1d19      	adds	r1, r3, #4
 801d220:	9100      	str	r1, [sp, #0]
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	07c0      	lsls	r0, r0, #31
 801d226:	bf4c      	ite	mi
 801d228:	801a      	strhmi	r2, [r3, #0]
 801d22a:	601a      	strpl	r2, [r3, #0]
 801d22c:	e6f4      	b.n	801d018 <__ssvfiscanf_r+0x50>
 801d22e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d230:	4621      	mov	r1, r4
 801d232:	4630      	mov	r0, r6
 801d234:	4798      	blx	r3
 801d236:	2800      	cmp	r0, #0
 801d238:	d0bf      	beq.n	801d1ba <__ssvfiscanf_r+0x1f2>
 801d23a:	e79f      	b.n	801d17c <__ssvfiscanf_r+0x1b4>
 801d23c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d23e:	3201      	adds	r2, #1
 801d240:	9245      	str	r2, [sp, #276]	@ 0x114
 801d242:	6862      	ldr	r2, [r4, #4]
 801d244:	3a01      	subs	r2, #1
 801d246:	2a00      	cmp	r2, #0
 801d248:	6062      	str	r2, [r4, #4]
 801d24a:	dd02      	ble.n	801d252 <__ssvfiscanf_r+0x28a>
 801d24c:	3301      	adds	r3, #1
 801d24e:	6023      	str	r3, [r4, #0]
 801d250:	e7b6      	b.n	801d1c0 <__ssvfiscanf_r+0x1f8>
 801d252:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d254:	4621      	mov	r1, r4
 801d256:	4630      	mov	r0, r6
 801d258:	4798      	blx	r3
 801d25a:	2800      	cmp	r0, #0
 801d25c:	d0b0      	beq.n	801d1c0 <__ssvfiscanf_r+0x1f8>
 801d25e:	e78d      	b.n	801d17c <__ssvfiscanf_r+0x1b4>
 801d260:	2b04      	cmp	r3, #4
 801d262:	dc0f      	bgt.n	801d284 <__ssvfiscanf_r+0x2bc>
 801d264:	466b      	mov	r3, sp
 801d266:	4622      	mov	r2, r4
 801d268:	a941      	add	r1, sp, #260	@ 0x104
 801d26a:	4630      	mov	r0, r6
 801d26c:	f000 f87c 	bl	801d368 <_scanf_i>
 801d270:	e7b4      	b.n	801d1dc <__ssvfiscanf_r+0x214>
 801d272:	bf00      	nop
 801d274:	0801cf15 	.word	0x0801cf15
 801d278:	0801cf8f 	.word	0x0801cf8f
 801d27c:	08021cc1 	.word	0x08021cc1
 801d280:	08021c43 	.word	0x08021c43
 801d284:	4b0a      	ldr	r3, [pc, #40]	@ (801d2b0 <__ssvfiscanf_r+0x2e8>)
 801d286:	2b00      	cmp	r3, #0
 801d288:	f43f aec6 	beq.w	801d018 <__ssvfiscanf_r+0x50>
 801d28c:	466b      	mov	r3, sp
 801d28e:	4622      	mov	r2, r4
 801d290:	a941      	add	r1, sp, #260	@ 0x104
 801d292:	4630      	mov	r0, r6
 801d294:	f7fc f90e 	bl	80194b4 <_scanf_float>
 801d298:	e7a0      	b.n	801d1dc <__ssvfiscanf_r+0x214>
 801d29a:	89a3      	ldrh	r3, [r4, #12]
 801d29c:	065b      	lsls	r3, r3, #25
 801d29e:	f53f af71 	bmi.w	801d184 <__ssvfiscanf_r+0x1bc>
 801d2a2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801d2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2aa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d2ac:	e7f9      	b.n	801d2a2 <__ssvfiscanf_r+0x2da>
 801d2ae:	bf00      	nop
 801d2b0:	080194b5 	.word	0x080194b5

0801d2b4 <_scanf_chars>:
 801d2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2b8:	4615      	mov	r5, r2
 801d2ba:	688a      	ldr	r2, [r1, #8]
 801d2bc:	4680      	mov	r8, r0
 801d2be:	460c      	mov	r4, r1
 801d2c0:	b932      	cbnz	r2, 801d2d0 <_scanf_chars+0x1c>
 801d2c2:	698a      	ldr	r2, [r1, #24]
 801d2c4:	2a00      	cmp	r2, #0
 801d2c6:	bf14      	ite	ne
 801d2c8:	f04f 32ff 	movne.w	r2, #4294967295
 801d2cc:	2201      	moveq	r2, #1
 801d2ce:	608a      	str	r2, [r1, #8]
 801d2d0:	6822      	ldr	r2, [r4, #0]
 801d2d2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801d364 <_scanf_chars+0xb0>
 801d2d6:	06d1      	lsls	r1, r2, #27
 801d2d8:	bf5f      	itttt	pl
 801d2da:	681a      	ldrpl	r2, [r3, #0]
 801d2dc:	1d11      	addpl	r1, r2, #4
 801d2de:	6019      	strpl	r1, [r3, #0]
 801d2e0:	6816      	ldrpl	r6, [r2, #0]
 801d2e2:	2700      	movs	r7, #0
 801d2e4:	69a0      	ldr	r0, [r4, #24]
 801d2e6:	b188      	cbz	r0, 801d30c <_scanf_chars+0x58>
 801d2e8:	2801      	cmp	r0, #1
 801d2ea:	d107      	bne.n	801d2fc <_scanf_chars+0x48>
 801d2ec:	682b      	ldr	r3, [r5, #0]
 801d2ee:	781a      	ldrb	r2, [r3, #0]
 801d2f0:	6963      	ldr	r3, [r4, #20]
 801d2f2:	5c9b      	ldrb	r3, [r3, r2]
 801d2f4:	b953      	cbnz	r3, 801d30c <_scanf_chars+0x58>
 801d2f6:	2f00      	cmp	r7, #0
 801d2f8:	d031      	beq.n	801d35e <_scanf_chars+0xaa>
 801d2fa:	e022      	b.n	801d342 <_scanf_chars+0x8e>
 801d2fc:	2802      	cmp	r0, #2
 801d2fe:	d120      	bne.n	801d342 <_scanf_chars+0x8e>
 801d300:	682b      	ldr	r3, [r5, #0]
 801d302:	781b      	ldrb	r3, [r3, #0]
 801d304:	f819 3003 	ldrb.w	r3, [r9, r3]
 801d308:	071b      	lsls	r3, r3, #28
 801d30a:	d41a      	bmi.n	801d342 <_scanf_chars+0x8e>
 801d30c:	6823      	ldr	r3, [r4, #0]
 801d30e:	06da      	lsls	r2, r3, #27
 801d310:	bf5e      	ittt	pl
 801d312:	682b      	ldrpl	r3, [r5, #0]
 801d314:	781b      	ldrbpl	r3, [r3, #0]
 801d316:	f806 3b01 	strbpl.w	r3, [r6], #1
 801d31a:	682a      	ldr	r2, [r5, #0]
 801d31c:	686b      	ldr	r3, [r5, #4]
 801d31e:	3201      	adds	r2, #1
 801d320:	602a      	str	r2, [r5, #0]
 801d322:	68a2      	ldr	r2, [r4, #8]
 801d324:	3b01      	subs	r3, #1
 801d326:	3a01      	subs	r2, #1
 801d328:	606b      	str	r3, [r5, #4]
 801d32a:	3701      	adds	r7, #1
 801d32c:	60a2      	str	r2, [r4, #8]
 801d32e:	b142      	cbz	r2, 801d342 <_scanf_chars+0x8e>
 801d330:	2b00      	cmp	r3, #0
 801d332:	dcd7      	bgt.n	801d2e4 <_scanf_chars+0x30>
 801d334:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d338:	4629      	mov	r1, r5
 801d33a:	4640      	mov	r0, r8
 801d33c:	4798      	blx	r3
 801d33e:	2800      	cmp	r0, #0
 801d340:	d0d0      	beq.n	801d2e4 <_scanf_chars+0x30>
 801d342:	6823      	ldr	r3, [r4, #0]
 801d344:	f013 0310 	ands.w	r3, r3, #16
 801d348:	d105      	bne.n	801d356 <_scanf_chars+0xa2>
 801d34a:	68e2      	ldr	r2, [r4, #12]
 801d34c:	3201      	adds	r2, #1
 801d34e:	60e2      	str	r2, [r4, #12]
 801d350:	69a2      	ldr	r2, [r4, #24]
 801d352:	b102      	cbz	r2, 801d356 <_scanf_chars+0xa2>
 801d354:	7033      	strb	r3, [r6, #0]
 801d356:	6923      	ldr	r3, [r4, #16]
 801d358:	443b      	add	r3, r7
 801d35a:	6123      	str	r3, [r4, #16]
 801d35c:	2000      	movs	r0, #0
 801d35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d362:	bf00      	nop
 801d364:	08021cc1 	.word	0x08021cc1

0801d368 <_scanf_i>:
 801d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d36c:	4698      	mov	r8, r3
 801d36e:	4b74      	ldr	r3, [pc, #464]	@ (801d540 <_scanf_i+0x1d8>)
 801d370:	460c      	mov	r4, r1
 801d372:	4682      	mov	sl, r0
 801d374:	4616      	mov	r6, r2
 801d376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d37a:	b087      	sub	sp, #28
 801d37c:	ab03      	add	r3, sp, #12
 801d37e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801d382:	4b70      	ldr	r3, [pc, #448]	@ (801d544 <_scanf_i+0x1dc>)
 801d384:	69a1      	ldr	r1, [r4, #24]
 801d386:	4a70      	ldr	r2, [pc, #448]	@ (801d548 <_scanf_i+0x1e0>)
 801d388:	2903      	cmp	r1, #3
 801d38a:	bf08      	it	eq
 801d38c:	461a      	moveq	r2, r3
 801d38e:	68a3      	ldr	r3, [r4, #8]
 801d390:	9201      	str	r2, [sp, #4]
 801d392:	1e5a      	subs	r2, r3, #1
 801d394:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d398:	bf88      	it	hi
 801d39a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d39e:	4627      	mov	r7, r4
 801d3a0:	bf82      	ittt	hi
 801d3a2:	eb03 0905 	addhi.w	r9, r3, r5
 801d3a6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d3aa:	60a3      	strhi	r3, [r4, #8]
 801d3ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 801d3b0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801d3b4:	bf98      	it	ls
 801d3b6:	f04f 0900 	movls.w	r9, #0
 801d3ba:	6023      	str	r3, [r4, #0]
 801d3bc:	463d      	mov	r5, r7
 801d3be:	f04f 0b00 	mov.w	fp, #0
 801d3c2:	6831      	ldr	r1, [r6, #0]
 801d3c4:	ab03      	add	r3, sp, #12
 801d3c6:	7809      	ldrb	r1, [r1, #0]
 801d3c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801d3cc:	2202      	movs	r2, #2
 801d3ce:	f7e2 ff0f 	bl	80001f0 <memchr>
 801d3d2:	b328      	cbz	r0, 801d420 <_scanf_i+0xb8>
 801d3d4:	f1bb 0f01 	cmp.w	fp, #1
 801d3d8:	d159      	bne.n	801d48e <_scanf_i+0x126>
 801d3da:	6862      	ldr	r2, [r4, #4]
 801d3dc:	b92a      	cbnz	r2, 801d3ea <_scanf_i+0x82>
 801d3de:	6822      	ldr	r2, [r4, #0]
 801d3e0:	2108      	movs	r1, #8
 801d3e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d3e6:	6061      	str	r1, [r4, #4]
 801d3e8:	6022      	str	r2, [r4, #0]
 801d3ea:	6822      	ldr	r2, [r4, #0]
 801d3ec:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801d3f0:	6022      	str	r2, [r4, #0]
 801d3f2:	68a2      	ldr	r2, [r4, #8]
 801d3f4:	1e51      	subs	r1, r2, #1
 801d3f6:	60a1      	str	r1, [r4, #8]
 801d3f8:	b192      	cbz	r2, 801d420 <_scanf_i+0xb8>
 801d3fa:	6832      	ldr	r2, [r6, #0]
 801d3fc:	1c51      	adds	r1, r2, #1
 801d3fe:	6031      	str	r1, [r6, #0]
 801d400:	7812      	ldrb	r2, [r2, #0]
 801d402:	f805 2b01 	strb.w	r2, [r5], #1
 801d406:	6872      	ldr	r2, [r6, #4]
 801d408:	3a01      	subs	r2, #1
 801d40a:	2a00      	cmp	r2, #0
 801d40c:	6072      	str	r2, [r6, #4]
 801d40e:	dc07      	bgt.n	801d420 <_scanf_i+0xb8>
 801d410:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801d414:	4631      	mov	r1, r6
 801d416:	4650      	mov	r0, sl
 801d418:	4790      	blx	r2
 801d41a:	2800      	cmp	r0, #0
 801d41c:	f040 8085 	bne.w	801d52a <_scanf_i+0x1c2>
 801d420:	f10b 0b01 	add.w	fp, fp, #1
 801d424:	f1bb 0f03 	cmp.w	fp, #3
 801d428:	d1cb      	bne.n	801d3c2 <_scanf_i+0x5a>
 801d42a:	6863      	ldr	r3, [r4, #4]
 801d42c:	b90b      	cbnz	r3, 801d432 <_scanf_i+0xca>
 801d42e:	230a      	movs	r3, #10
 801d430:	6063      	str	r3, [r4, #4]
 801d432:	6863      	ldr	r3, [r4, #4]
 801d434:	4945      	ldr	r1, [pc, #276]	@ (801d54c <_scanf_i+0x1e4>)
 801d436:	6960      	ldr	r0, [r4, #20]
 801d438:	1ac9      	subs	r1, r1, r3
 801d43a:	f000 f947 	bl	801d6cc <__sccl>
 801d43e:	f04f 0b00 	mov.w	fp, #0
 801d442:	68a3      	ldr	r3, [r4, #8]
 801d444:	6822      	ldr	r2, [r4, #0]
 801d446:	2b00      	cmp	r3, #0
 801d448:	d03d      	beq.n	801d4c6 <_scanf_i+0x15e>
 801d44a:	6831      	ldr	r1, [r6, #0]
 801d44c:	6960      	ldr	r0, [r4, #20]
 801d44e:	f891 c000 	ldrb.w	ip, [r1]
 801d452:	f810 000c 	ldrb.w	r0, [r0, ip]
 801d456:	2800      	cmp	r0, #0
 801d458:	d035      	beq.n	801d4c6 <_scanf_i+0x15e>
 801d45a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801d45e:	d124      	bne.n	801d4aa <_scanf_i+0x142>
 801d460:	0510      	lsls	r0, r2, #20
 801d462:	d522      	bpl.n	801d4aa <_scanf_i+0x142>
 801d464:	f10b 0b01 	add.w	fp, fp, #1
 801d468:	f1b9 0f00 	cmp.w	r9, #0
 801d46c:	d003      	beq.n	801d476 <_scanf_i+0x10e>
 801d46e:	3301      	adds	r3, #1
 801d470:	f109 39ff 	add.w	r9, r9, #4294967295
 801d474:	60a3      	str	r3, [r4, #8]
 801d476:	6873      	ldr	r3, [r6, #4]
 801d478:	3b01      	subs	r3, #1
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	6073      	str	r3, [r6, #4]
 801d47e:	dd1b      	ble.n	801d4b8 <_scanf_i+0x150>
 801d480:	6833      	ldr	r3, [r6, #0]
 801d482:	3301      	adds	r3, #1
 801d484:	6033      	str	r3, [r6, #0]
 801d486:	68a3      	ldr	r3, [r4, #8]
 801d488:	3b01      	subs	r3, #1
 801d48a:	60a3      	str	r3, [r4, #8]
 801d48c:	e7d9      	b.n	801d442 <_scanf_i+0xda>
 801d48e:	f1bb 0f02 	cmp.w	fp, #2
 801d492:	d1ae      	bne.n	801d3f2 <_scanf_i+0x8a>
 801d494:	6822      	ldr	r2, [r4, #0]
 801d496:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801d49a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801d49e:	d1c4      	bne.n	801d42a <_scanf_i+0xc2>
 801d4a0:	2110      	movs	r1, #16
 801d4a2:	6061      	str	r1, [r4, #4]
 801d4a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801d4a8:	e7a2      	b.n	801d3f0 <_scanf_i+0x88>
 801d4aa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801d4ae:	6022      	str	r2, [r4, #0]
 801d4b0:	780b      	ldrb	r3, [r1, #0]
 801d4b2:	f805 3b01 	strb.w	r3, [r5], #1
 801d4b6:	e7de      	b.n	801d476 <_scanf_i+0x10e>
 801d4b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d4bc:	4631      	mov	r1, r6
 801d4be:	4650      	mov	r0, sl
 801d4c0:	4798      	blx	r3
 801d4c2:	2800      	cmp	r0, #0
 801d4c4:	d0df      	beq.n	801d486 <_scanf_i+0x11e>
 801d4c6:	6823      	ldr	r3, [r4, #0]
 801d4c8:	05d9      	lsls	r1, r3, #23
 801d4ca:	d50d      	bpl.n	801d4e8 <_scanf_i+0x180>
 801d4cc:	42bd      	cmp	r5, r7
 801d4ce:	d909      	bls.n	801d4e4 <_scanf_i+0x17c>
 801d4d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d4d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d4d8:	4632      	mov	r2, r6
 801d4da:	4650      	mov	r0, sl
 801d4dc:	4798      	blx	r3
 801d4de:	f105 39ff 	add.w	r9, r5, #4294967295
 801d4e2:	464d      	mov	r5, r9
 801d4e4:	42bd      	cmp	r5, r7
 801d4e6:	d028      	beq.n	801d53a <_scanf_i+0x1d2>
 801d4e8:	6822      	ldr	r2, [r4, #0]
 801d4ea:	f012 0210 	ands.w	r2, r2, #16
 801d4ee:	d113      	bne.n	801d518 <_scanf_i+0x1b0>
 801d4f0:	702a      	strb	r2, [r5, #0]
 801d4f2:	6863      	ldr	r3, [r4, #4]
 801d4f4:	9e01      	ldr	r6, [sp, #4]
 801d4f6:	4639      	mov	r1, r7
 801d4f8:	4650      	mov	r0, sl
 801d4fa:	47b0      	blx	r6
 801d4fc:	f8d8 3000 	ldr.w	r3, [r8]
 801d500:	6821      	ldr	r1, [r4, #0]
 801d502:	1d1a      	adds	r2, r3, #4
 801d504:	f8c8 2000 	str.w	r2, [r8]
 801d508:	f011 0f20 	tst.w	r1, #32
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	d00f      	beq.n	801d530 <_scanf_i+0x1c8>
 801d510:	6018      	str	r0, [r3, #0]
 801d512:	68e3      	ldr	r3, [r4, #12]
 801d514:	3301      	adds	r3, #1
 801d516:	60e3      	str	r3, [r4, #12]
 801d518:	6923      	ldr	r3, [r4, #16]
 801d51a:	1bed      	subs	r5, r5, r7
 801d51c:	445d      	add	r5, fp
 801d51e:	442b      	add	r3, r5
 801d520:	6123      	str	r3, [r4, #16]
 801d522:	2000      	movs	r0, #0
 801d524:	b007      	add	sp, #28
 801d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d52a:	f04f 0b00 	mov.w	fp, #0
 801d52e:	e7ca      	b.n	801d4c6 <_scanf_i+0x15e>
 801d530:	07ca      	lsls	r2, r1, #31
 801d532:	bf4c      	ite	mi
 801d534:	8018      	strhmi	r0, [r3, #0]
 801d536:	6018      	strpl	r0, [r3, #0]
 801d538:	e7eb      	b.n	801d512 <_scanf_i+0x1aa>
 801d53a:	2001      	movs	r0, #1
 801d53c:	e7f2      	b.n	801d524 <_scanf_i+0x1bc>
 801d53e:	bf00      	nop
 801d540:	08021980 	.word	0x08021980
 801d544:	08018bf1 	.word	0x08018bf1
 801d548:	0801cc35 	.word	0x0801cc35
 801d54c:	08021c5e 	.word	0x08021c5e

0801d550 <__sflush_r>:
 801d550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d558:	0716      	lsls	r6, r2, #28
 801d55a:	4605      	mov	r5, r0
 801d55c:	460c      	mov	r4, r1
 801d55e:	d454      	bmi.n	801d60a <__sflush_r+0xba>
 801d560:	684b      	ldr	r3, [r1, #4]
 801d562:	2b00      	cmp	r3, #0
 801d564:	dc02      	bgt.n	801d56c <__sflush_r+0x1c>
 801d566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d568:	2b00      	cmp	r3, #0
 801d56a:	dd48      	ble.n	801d5fe <__sflush_r+0xae>
 801d56c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d56e:	2e00      	cmp	r6, #0
 801d570:	d045      	beq.n	801d5fe <__sflush_r+0xae>
 801d572:	2300      	movs	r3, #0
 801d574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d578:	682f      	ldr	r7, [r5, #0]
 801d57a:	6a21      	ldr	r1, [r4, #32]
 801d57c:	602b      	str	r3, [r5, #0]
 801d57e:	d030      	beq.n	801d5e2 <__sflush_r+0x92>
 801d580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d582:	89a3      	ldrh	r3, [r4, #12]
 801d584:	0759      	lsls	r1, r3, #29
 801d586:	d505      	bpl.n	801d594 <__sflush_r+0x44>
 801d588:	6863      	ldr	r3, [r4, #4]
 801d58a:	1ad2      	subs	r2, r2, r3
 801d58c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d58e:	b10b      	cbz	r3, 801d594 <__sflush_r+0x44>
 801d590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d592:	1ad2      	subs	r2, r2, r3
 801d594:	2300      	movs	r3, #0
 801d596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d598:	6a21      	ldr	r1, [r4, #32]
 801d59a:	4628      	mov	r0, r5
 801d59c:	47b0      	blx	r6
 801d59e:	1c43      	adds	r3, r0, #1
 801d5a0:	89a3      	ldrh	r3, [r4, #12]
 801d5a2:	d106      	bne.n	801d5b2 <__sflush_r+0x62>
 801d5a4:	6829      	ldr	r1, [r5, #0]
 801d5a6:	291d      	cmp	r1, #29
 801d5a8:	d82b      	bhi.n	801d602 <__sflush_r+0xb2>
 801d5aa:	4a2a      	ldr	r2, [pc, #168]	@ (801d654 <__sflush_r+0x104>)
 801d5ac:	40ca      	lsrs	r2, r1
 801d5ae:	07d6      	lsls	r6, r2, #31
 801d5b0:	d527      	bpl.n	801d602 <__sflush_r+0xb2>
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	6062      	str	r2, [r4, #4]
 801d5b6:	04d9      	lsls	r1, r3, #19
 801d5b8:	6922      	ldr	r2, [r4, #16]
 801d5ba:	6022      	str	r2, [r4, #0]
 801d5bc:	d504      	bpl.n	801d5c8 <__sflush_r+0x78>
 801d5be:	1c42      	adds	r2, r0, #1
 801d5c0:	d101      	bne.n	801d5c6 <__sflush_r+0x76>
 801d5c2:	682b      	ldr	r3, [r5, #0]
 801d5c4:	b903      	cbnz	r3, 801d5c8 <__sflush_r+0x78>
 801d5c6:	6560      	str	r0, [r4, #84]	@ 0x54
 801d5c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d5ca:	602f      	str	r7, [r5, #0]
 801d5cc:	b1b9      	cbz	r1, 801d5fe <__sflush_r+0xae>
 801d5ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d5d2:	4299      	cmp	r1, r3
 801d5d4:	d002      	beq.n	801d5dc <__sflush_r+0x8c>
 801d5d6:	4628      	mov	r0, r5
 801d5d8:	f7fe fa3a 	bl	801ba50 <_free_r>
 801d5dc:	2300      	movs	r3, #0
 801d5de:	6363      	str	r3, [r4, #52]	@ 0x34
 801d5e0:	e00d      	b.n	801d5fe <__sflush_r+0xae>
 801d5e2:	2301      	movs	r3, #1
 801d5e4:	4628      	mov	r0, r5
 801d5e6:	47b0      	blx	r6
 801d5e8:	4602      	mov	r2, r0
 801d5ea:	1c50      	adds	r0, r2, #1
 801d5ec:	d1c9      	bne.n	801d582 <__sflush_r+0x32>
 801d5ee:	682b      	ldr	r3, [r5, #0]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d0c6      	beq.n	801d582 <__sflush_r+0x32>
 801d5f4:	2b1d      	cmp	r3, #29
 801d5f6:	d001      	beq.n	801d5fc <__sflush_r+0xac>
 801d5f8:	2b16      	cmp	r3, #22
 801d5fa:	d11e      	bne.n	801d63a <__sflush_r+0xea>
 801d5fc:	602f      	str	r7, [r5, #0]
 801d5fe:	2000      	movs	r0, #0
 801d600:	e022      	b.n	801d648 <__sflush_r+0xf8>
 801d602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d606:	b21b      	sxth	r3, r3
 801d608:	e01b      	b.n	801d642 <__sflush_r+0xf2>
 801d60a:	690f      	ldr	r7, [r1, #16]
 801d60c:	2f00      	cmp	r7, #0
 801d60e:	d0f6      	beq.n	801d5fe <__sflush_r+0xae>
 801d610:	0793      	lsls	r3, r2, #30
 801d612:	680e      	ldr	r6, [r1, #0]
 801d614:	bf08      	it	eq
 801d616:	694b      	ldreq	r3, [r1, #20]
 801d618:	600f      	str	r7, [r1, #0]
 801d61a:	bf18      	it	ne
 801d61c:	2300      	movne	r3, #0
 801d61e:	eba6 0807 	sub.w	r8, r6, r7
 801d622:	608b      	str	r3, [r1, #8]
 801d624:	f1b8 0f00 	cmp.w	r8, #0
 801d628:	dde9      	ble.n	801d5fe <__sflush_r+0xae>
 801d62a:	6a21      	ldr	r1, [r4, #32]
 801d62c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d62e:	4643      	mov	r3, r8
 801d630:	463a      	mov	r2, r7
 801d632:	4628      	mov	r0, r5
 801d634:	47b0      	blx	r6
 801d636:	2800      	cmp	r0, #0
 801d638:	dc08      	bgt.n	801d64c <__sflush_r+0xfc>
 801d63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d63e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d642:	81a3      	strh	r3, [r4, #12]
 801d644:	f04f 30ff 	mov.w	r0, #4294967295
 801d648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d64c:	4407      	add	r7, r0
 801d64e:	eba8 0800 	sub.w	r8, r8, r0
 801d652:	e7e7      	b.n	801d624 <__sflush_r+0xd4>
 801d654:	20400001 	.word	0x20400001

0801d658 <_fflush_r>:
 801d658:	b538      	push	{r3, r4, r5, lr}
 801d65a:	690b      	ldr	r3, [r1, #16]
 801d65c:	4605      	mov	r5, r0
 801d65e:	460c      	mov	r4, r1
 801d660:	b913      	cbnz	r3, 801d668 <_fflush_r+0x10>
 801d662:	2500      	movs	r5, #0
 801d664:	4628      	mov	r0, r5
 801d666:	bd38      	pop	{r3, r4, r5, pc}
 801d668:	b118      	cbz	r0, 801d672 <_fflush_r+0x1a>
 801d66a:	6a03      	ldr	r3, [r0, #32]
 801d66c:	b90b      	cbnz	r3, 801d672 <_fflush_r+0x1a>
 801d66e:	f7fc f9bb 	bl	80199e8 <__sinit>
 801d672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d0f3      	beq.n	801d662 <_fflush_r+0xa>
 801d67a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d67c:	07d0      	lsls	r0, r2, #31
 801d67e:	d404      	bmi.n	801d68a <_fflush_r+0x32>
 801d680:	0599      	lsls	r1, r3, #22
 801d682:	d402      	bmi.n	801d68a <_fflush_r+0x32>
 801d684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d686:	f7fd fae9 	bl	801ac5c <__retarget_lock_acquire_recursive>
 801d68a:	4628      	mov	r0, r5
 801d68c:	4621      	mov	r1, r4
 801d68e:	f7ff ff5f 	bl	801d550 <__sflush_r>
 801d692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d694:	07da      	lsls	r2, r3, #31
 801d696:	4605      	mov	r5, r0
 801d698:	d4e4      	bmi.n	801d664 <_fflush_r+0xc>
 801d69a:	89a3      	ldrh	r3, [r4, #12]
 801d69c:	059b      	lsls	r3, r3, #22
 801d69e:	d4e1      	bmi.n	801d664 <_fflush_r+0xc>
 801d6a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d6a2:	f7fd fadd 	bl	801ac60 <__retarget_lock_release_recursive>
 801d6a6:	e7dd      	b.n	801d664 <_fflush_r+0xc>

0801d6a8 <fiprintf>:
 801d6a8:	b40e      	push	{r1, r2, r3}
 801d6aa:	b503      	push	{r0, r1, lr}
 801d6ac:	4601      	mov	r1, r0
 801d6ae:	ab03      	add	r3, sp, #12
 801d6b0:	4805      	ldr	r0, [pc, #20]	@ (801d6c8 <fiprintf+0x20>)
 801d6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6b6:	6800      	ldr	r0, [r0, #0]
 801d6b8:	9301      	str	r3, [sp, #4]
 801d6ba:	f000 f93d 	bl	801d938 <_vfiprintf_r>
 801d6be:	b002      	add	sp, #8
 801d6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d6c4:	b003      	add	sp, #12
 801d6c6:	4770      	bx	lr
 801d6c8:	200001c0 	.word	0x200001c0

0801d6cc <__sccl>:
 801d6cc:	b570      	push	{r4, r5, r6, lr}
 801d6ce:	780b      	ldrb	r3, [r1, #0]
 801d6d0:	4604      	mov	r4, r0
 801d6d2:	2b5e      	cmp	r3, #94	@ 0x5e
 801d6d4:	bf0b      	itete	eq
 801d6d6:	784b      	ldrbeq	r3, [r1, #1]
 801d6d8:	1c4a      	addne	r2, r1, #1
 801d6da:	1c8a      	addeq	r2, r1, #2
 801d6dc:	2100      	movne	r1, #0
 801d6de:	bf08      	it	eq
 801d6e0:	2101      	moveq	r1, #1
 801d6e2:	3801      	subs	r0, #1
 801d6e4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801d6e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801d6ec:	42a8      	cmp	r0, r5
 801d6ee:	d1fb      	bne.n	801d6e8 <__sccl+0x1c>
 801d6f0:	b90b      	cbnz	r3, 801d6f6 <__sccl+0x2a>
 801d6f2:	1e50      	subs	r0, r2, #1
 801d6f4:	bd70      	pop	{r4, r5, r6, pc}
 801d6f6:	f081 0101 	eor.w	r1, r1, #1
 801d6fa:	54e1      	strb	r1, [r4, r3]
 801d6fc:	4610      	mov	r0, r2
 801d6fe:	4602      	mov	r2, r0
 801d700:	f812 5b01 	ldrb.w	r5, [r2], #1
 801d704:	2d2d      	cmp	r5, #45	@ 0x2d
 801d706:	d005      	beq.n	801d714 <__sccl+0x48>
 801d708:	2d5d      	cmp	r5, #93	@ 0x5d
 801d70a:	d016      	beq.n	801d73a <__sccl+0x6e>
 801d70c:	2d00      	cmp	r5, #0
 801d70e:	d0f1      	beq.n	801d6f4 <__sccl+0x28>
 801d710:	462b      	mov	r3, r5
 801d712:	e7f2      	b.n	801d6fa <__sccl+0x2e>
 801d714:	7846      	ldrb	r6, [r0, #1]
 801d716:	2e5d      	cmp	r6, #93	@ 0x5d
 801d718:	d0fa      	beq.n	801d710 <__sccl+0x44>
 801d71a:	42b3      	cmp	r3, r6
 801d71c:	dcf8      	bgt.n	801d710 <__sccl+0x44>
 801d71e:	3002      	adds	r0, #2
 801d720:	461a      	mov	r2, r3
 801d722:	3201      	adds	r2, #1
 801d724:	4296      	cmp	r6, r2
 801d726:	54a1      	strb	r1, [r4, r2]
 801d728:	dcfb      	bgt.n	801d722 <__sccl+0x56>
 801d72a:	1af2      	subs	r2, r6, r3
 801d72c:	3a01      	subs	r2, #1
 801d72e:	1c5d      	adds	r5, r3, #1
 801d730:	42b3      	cmp	r3, r6
 801d732:	bfa8      	it	ge
 801d734:	2200      	movge	r2, #0
 801d736:	18ab      	adds	r3, r5, r2
 801d738:	e7e1      	b.n	801d6fe <__sccl+0x32>
 801d73a:	4610      	mov	r0, r2
 801d73c:	e7da      	b.n	801d6f4 <__sccl+0x28>

0801d73e <__submore>:
 801d73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d742:	460c      	mov	r4, r1
 801d744:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801d746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d74a:	4299      	cmp	r1, r3
 801d74c:	d11d      	bne.n	801d78a <__submore+0x4c>
 801d74e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801d752:	f7fa fb31 	bl	8017db8 <_malloc_r>
 801d756:	b918      	cbnz	r0, 801d760 <__submore+0x22>
 801d758:	f04f 30ff 	mov.w	r0, #4294967295
 801d75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d764:	63a3      	str	r3, [r4, #56]	@ 0x38
 801d766:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801d76a:	6360      	str	r0, [r4, #52]	@ 0x34
 801d76c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801d770:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801d774:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801d778:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801d77c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801d780:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801d784:	6020      	str	r0, [r4, #0]
 801d786:	2000      	movs	r0, #0
 801d788:	e7e8      	b.n	801d75c <__submore+0x1e>
 801d78a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801d78c:	0077      	lsls	r7, r6, #1
 801d78e:	463a      	mov	r2, r7
 801d790:	f000 f87a 	bl	801d888 <_realloc_r>
 801d794:	4605      	mov	r5, r0
 801d796:	2800      	cmp	r0, #0
 801d798:	d0de      	beq.n	801d758 <__submore+0x1a>
 801d79a:	eb00 0806 	add.w	r8, r0, r6
 801d79e:	4601      	mov	r1, r0
 801d7a0:	4632      	mov	r2, r6
 801d7a2:	4640      	mov	r0, r8
 801d7a4:	f7fd fa65 	bl	801ac72 <memcpy>
 801d7a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801d7ac:	f8c4 8000 	str.w	r8, [r4]
 801d7b0:	e7e9      	b.n	801d786 <__submore+0x48>

0801d7b2 <memmove>:
 801d7b2:	4288      	cmp	r0, r1
 801d7b4:	b510      	push	{r4, lr}
 801d7b6:	eb01 0402 	add.w	r4, r1, r2
 801d7ba:	d902      	bls.n	801d7c2 <memmove+0x10>
 801d7bc:	4284      	cmp	r4, r0
 801d7be:	4623      	mov	r3, r4
 801d7c0:	d807      	bhi.n	801d7d2 <memmove+0x20>
 801d7c2:	1e43      	subs	r3, r0, #1
 801d7c4:	42a1      	cmp	r1, r4
 801d7c6:	d008      	beq.n	801d7da <memmove+0x28>
 801d7c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d7cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d7d0:	e7f8      	b.n	801d7c4 <memmove+0x12>
 801d7d2:	4402      	add	r2, r0
 801d7d4:	4601      	mov	r1, r0
 801d7d6:	428a      	cmp	r2, r1
 801d7d8:	d100      	bne.n	801d7dc <memmove+0x2a>
 801d7da:	bd10      	pop	{r4, pc}
 801d7dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d7e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d7e4:	e7f7      	b.n	801d7d6 <memmove+0x24>
	...

0801d7e8 <__gettzinfo>:
 801d7e8:	4800      	ldr	r0, [pc, #0]	@ (801d7ec <__gettzinfo+0x4>)
 801d7ea:	4770      	bx	lr
 801d7ec:	20000210 	.word	0x20000210

0801d7f0 <__fpclassifyd>:
 801d7f0:	ec51 0b10 	vmov	r0, r1, d0
 801d7f4:	460b      	mov	r3, r1
 801d7f6:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 801d7fa:	b510      	push	{r4, lr}
 801d7fc:	d104      	bne.n	801d808 <__fpclassifyd+0x18>
 801d7fe:	2800      	cmp	r0, #0
 801d800:	bf0c      	ite	eq
 801d802:	2002      	moveq	r0, #2
 801d804:	2003      	movne	r0, #3
 801d806:	bd10      	pop	{r4, pc}
 801d808:	4a09      	ldr	r2, [pc, #36]	@ (801d830 <__fpclassifyd+0x40>)
 801d80a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 801d80e:	4294      	cmp	r4, r2
 801d810:	d908      	bls.n	801d824 <__fpclassifyd+0x34>
 801d812:	4a08      	ldr	r2, [pc, #32]	@ (801d834 <__fpclassifyd+0x44>)
 801d814:	4213      	tst	r3, r2
 801d816:	d007      	beq.n	801d828 <__fpclassifyd+0x38>
 801d818:	4291      	cmp	r1, r2
 801d81a:	d107      	bne.n	801d82c <__fpclassifyd+0x3c>
 801d81c:	fab0 f080 	clz	r0, r0
 801d820:	0940      	lsrs	r0, r0, #5
 801d822:	e7f0      	b.n	801d806 <__fpclassifyd+0x16>
 801d824:	2004      	movs	r0, #4
 801d826:	e7ee      	b.n	801d806 <__fpclassifyd+0x16>
 801d828:	2003      	movs	r0, #3
 801d82a:	e7ec      	b.n	801d806 <__fpclassifyd+0x16>
 801d82c:	2000      	movs	r0, #0
 801d82e:	e7ea      	b.n	801d806 <__fpclassifyd+0x16>
 801d830:	7fdfffff 	.word	0x7fdfffff
 801d834:	7ff00000 	.word	0x7ff00000

0801d838 <abort>:
 801d838:	b508      	push	{r3, lr}
 801d83a:	2006      	movs	r0, #6
 801d83c:	f000 fa50 	bl	801dce0 <raise>
 801d840:	2001      	movs	r0, #1
 801d842:	f7e4 fe45 	bl	80024d0 <_exit>

0801d846 <_calloc_r>:
 801d846:	b570      	push	{r4, r5, r6, lr}
 801d848:	fba1 5402 	umull	r5, r4, r1, r2
 801d84c:	b934      	cbnz	r4, 801d85c <_calloc_r+0x16>
 801d84e:	4629      	mov	r1, r5
 801d850:	f7fa fab2 	bl	8017db8 <_malloc_r>
 801d854:	4606      	mov	r6, r0
 801d856:	b928      	cbnz	r0, 801d864 <_calloc_r+0x1e>
 801d858:	4630      	mov	r0, r6
 801d85a:	bd70      	pop	{r4, r5, r6, pc}
 801d85c:	220c      	movs	r2, #12
 801d85e:	6002      	str	r2, [r0, #0]
 801d860:	2600      	movs	r6, #0
 801d862:	e7f9      	b.n	801d858 <_calloc_r+0x12>
 801d864:	462a      	mov	r2, r5
 801d866:	4621      	mov	r1, r4
 801d868:	f7fc f987 	bl	8019b7a <memset>
 801d86c:	e7f4      	b.n	801d858 <_calloc_r+0x12>
	...

0801d870 <__env_lock>:
 801d870:	4801      	ldr	r0, [pc, #4]	@ (801d878 <__env_lock+0x8>)
 801d872:	f7fd b9f3 	b.w	801ac5c <__retarget_lock_acquire_recursive>
 801d876:	bf00      	nop
 801d878:	20005ef9 	.word	0x20005ef9

0801d87c <__env_unlock>:
 801d87c:	4801      	ldr	r0, [pc, #4]	@ (801d884 <__env_unlock+0x8>)
 801d87e:	f7fd b9ef 	b.w	801ac60 <__retarget_lock_release_recursive>
 801d882:	bf00      	nop
 801d884:	20005ef9 	.word	0x20005ef9

0801d888 <_realloc_r>:
 801d888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d88c:	4607      	mov	r7, r0
 801d88e:	4614      	mov	r4, r2
 801d890:	460d      	mov	r5, r1
 801d892:	b921      	cbnz	r1, 801d89e <_realloc_r+0x16>
 801d894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d898:	4611      	mov	r1, r2
 801d89a:	f7fa ba8d 	b.w	8017db8 <_malloc_r>
 801d89e:	b92a      	cbnz	r2, 801d8ac <_realloc_r+0x24>
 801d8a0:	f7fe f8d6 	bl	801ba50 <_free_r>
 801d8a4:	4625      	mov	r5, r4
 801d8a6:	4628      	mov	r0, r5
 801d8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8ac:	f000 fa34 	bl	801dd18 <_malloc_usable_size_r>
 801d8b0:	4284      	cmp	r4, r0
 801d8b2:	4606      	mov	r6, r0
 801d8b4:	d802      	bhi.n	801d8bc <_realloc_r+0x34>
 801d8b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d8ba:	d8f4      	bhi.n	801d8a6 <_realloc_r+0x1e>
 801d8bc:	4621      	mov	r1, r4
 801d8be:	4638      	mov	r0, r7
 801d8c0:	f7fa fa7a 	bl	8017db8 <_malloc_r>
 801d8c4:	4680      	mov	r8, r0
 801d8c6:	b908      	cbnz	r0, 801d8cc <_realloc_r+0x44>
 801d8c8:	4645      	mov	r5, r8
 801d8ca:	e7ec      	b.n	801d8a6 <_realloc_r+0x1e>
 801d8cc:	42b4      	cmp	r4, r6
 801d8ce:	4622      	mov	r2, r4
 801d8d0:	4629      	mov	r1, r5
 801d8d2:	bf28      	it	cs
 801d8d4:	4632      	movcs	r2, r6
 801d8d6:	f7fd f9cc 	bl	801ac72 <memcpy>
 801d8da:	4629      	mov	r1, r5
 801d8dc:	4638      	mov	r0, r7
 801d8de:	f7fe f8b7 	bl	801ba50 <_free_r>
 801d8e2:	e7f1      	b.n	801d8c8 <_realloc_r+0x40>

0801d8e4 <__sfputc_r>:
 801d8e4:	6893      	ldr	r3, [r2, #8]
 801d8e6:	3b01      	subs	r3, #1
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	b410      	push	{r4}
 801d8ec:	6093      	str	r3, [r2, #8]
 801d8ee:	da08      	bge.n	801d902 <__sfputc_r+0x1e>
 801d8f0:	6994      	ldr	r4, [r2, #24]
 801d8f2:	42a3      	cmp	r3, r4
 801d8f4:	db01      	blt.n	801d8fa <__sfputc_r+0x16>
 801d8f6:	290a      	cmp	r1, #10
 801d8f8:	d103      	bne.n	801d902 <__sfputc_r+0x1e>
 801d8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8fe:	f000 b933 	b.w	801db68 <__swbuf_r>
 801d902:	6813      	ldr	r3, [r2, #0]
 801d904:	1c58      	adds	r0, r3, #1
 801d906:	6010      	str	r0, [r2, #0]
 801d908:	7019      	strb	r1, [r3, #0]
 801d90a:	4608      	mov	r0, r1
 801d90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d910:	4770      	bx	lr

0801d912 <__sfputs_r>:
 801d912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d914:	4606      	mov	r6, r0
 801d916:	460f      	mov	r7, r1
 801d918:	4614      	mov	r4, r2
 801d91a:	18d5      	adds	r5, r2, r3
 801d91c:	42ac      	cmp	r4, r5
 801d91e:	d101      	bne.n	801d924 <__sfputs_r+0x12>
 801d920:	2000      	movs	r0, #0
 801d922:	e007      	b.n	801d934 <__sfputs_r+0x22>
 801d924:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d928:	463a      	mov	r2, r7
 801d92a:	4630      	mov	r0, r6
 801d92c:	f7ff ffda 	bl	801d8e4 <__sfputc_r>
 801d930:	1c43      	adds	r3, r0, #1
 801d932:	d1f3      	bne.n	801d91c <__sfputs_r+0xa>
 801d934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d938 <_vfiprintf_r>:
 801d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d93c:	460d      	mov	r5, r1
 801d93e:	b09d      	sub	sp, #116	@ 0x74
 801d940:	4614      	mov	r4, r2
 801d942:	4698      	mov	r8, r3
 801d944:	4606      	mov	r6, r0
 801d946:	b118      	cbz	r0, 801d950 <_vfiprintf_r+0x18>
 801d948:	6a03      	ldr	r3, [r0, #32]
 801d94a:	b90b      	cbnz	r3, 801d950 <_vfiprintf_r+0x18>
 801d94c:	f7fc f84c 	bl	80199e8 <__sinit>
 801d950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d952:	07d9      	lsls	r1, r3, #31
 801d954:	d405      	bmi.n	801d962 <_vfiprintf_r+0x2a>
 801d956:	89ab      	ldrh	r3, [r5, #12]
 801d958:	059a      	lsls	r2, r3, #22
 801d95a:	d402      	bmi.n	801d962 <_vfiprintf_r+0x2a>
 801d95c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d95e:	f7fd f97d 	bl	801ac5c <__retarget_lock_acquire_recursive>
 801d962:	89ab      	ldrh	r3, [r5, #12]
 801d964:	071b      	lsls	r3, r3, #28
 801d966:	d501      	bpl.n	801d96c <_vfiprintf_r+0x34>
 801d968:	692b      	ldr	r3, [r5, #16]
 801d96a:	b99b      	cbnz	r3, 801d994 <_vfiprintf_r+0x5c>
 801d96c:	4629      	mov	r1, r5
 801d96e:	4630      	mov	r0, r6
 801d970:	f000 f938 	bl	801dbe4 <__swsetup_r>
 801d974:	b170      	cbz	r0, 801d994 <_vfiprintf_r+0x5c>
 801d976:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d978:	07dc      	lsls	r4, r3, #31
 801d97a:	d504      	bpl.n	801d986 <_vfiprintf_r+0x4e>
 801d97c:	f04f 30ff 	mov.w	r0, #4294967295
 801d980:	b01d      	add	sp, #116	@ 0x74
 801d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d986:	89ab      	ldrh	r3, [r5, #12]
 801d988:	0598      	lsls	r0, r3, #22
 801d98a:	d4f7      	bmi.n	801d97c <_vfiprintf_r+0x44>
 801d98c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d98e:	f7fd f967 	bl	801ac60 <__retarget_lock_release_recursive>
 801d992:	e7f3      	b.n	801d97c <_vfiprintf_r+0x44>
 801d994:	2300      	movs	r3, #0
 801d996:	9309      	str	r3, [sp, #36]	@ 0x24
 801d998:	2320      	movs	r3, #32
 801d99a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d99e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d9a2:	2330      	movs	r3, #48	@ 0x30
 801d9a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801db54 <_vfiprintf_r+0x21c>
 801d9a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d9ac:	f04f 0901 	mov.w	r9, #1
 801d9b0:	4623      	mov	r3, r4
 801d9b2:	469a      	mov	sl, r3
 801d9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9b8:	b10a      	cbz	r2, 801d9be <_vfiprintf_r+0x86>
 801d9ba:	2a25      	cmp	r2, #37	@ 0x25
 801d9bc:	d1f9      	bne.n	801d9b2 <_vfiprintf_r+0x7a>
 801d9be:	ebba 0b04 	subs.w	fp, sl, r4
 801d9c2:	d00b      	beq.n	801d9dc <_vfiprintf_r+0xa4>
 801d9c4:	465b      	mov	r3, fp
 801d9c6:	4622      	mov	r2, r4
 801d9c8:	4629      	mov	r1, r5
 801d9ca:	4630      	mov	r0, r6
 801d9cc:	f7ff ffa1 	bl	801d912 <__sfputs_r>
 801d9d0:	3001      	adds	r0, #1
 801d9d2:	f000 80a7 	beq.w	801db24 <_vfiprintf_r+0x1ec>
 801d9d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d9d8:	445a      	add	r2, fp
 801d9da:	9209      	str	r2, [sp, #36]	@ 0x24
 801d9dc:	f89a 3000 	ldrb.w	r3, [sl]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	f000 809f 	beq.w	801db24 <_vfiprintf_r+0x1ec>
 801d9e6:	2300      	movs	r3, #0
 801d9e8:	f04f 32ff 	mov.w	r2, #4294967295
 801d9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d9f0:	f10a 0a01 	add.w	sl, sl, #1
 801d9f4:	9304      	str	r3, [sp, #16]
 801d9f6:	9307      	str	r3, [sp, #28]
 801d9f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d9fc:	931a      	str	r3, [sp, #104]	@ 0x68
 801d9fe:	4654      	mov	r4, sl
 801da00:	2205      	movs	r2, #5
 801da02:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da06:	4853      	ldr	r0, [pc, #332]	@ (801db54 <_vfiprintf_r+0x21c>)
 801da08:	f7e2 fbf2 	bl	80001f0 <memchr>
 801da0c:	9a04      	ldr	r2, [sp, #16]
 801da0e:	b9d8      	cbnz	r0, 801da48 <_vfiprintf_r+0x110>
 801da10:	06d1      	lsls	r1, r2, #27
 801da12:	bf44      	itt	mi
 801da14:	2320      	movmi	r3, #32
 801da16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801da1a:	0713      	lsls	r3, r2, #28
 801da1c:	bf44      	itt	mi
 801da1e:	232b      	movmi	r3, #43	@ 0x2b
 801da20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801da24:	f89a 3000 	ldrb.w	r3, [sl]
 801da28:	2b2a      	cmp	r3, #42	@ 0x2a
 801da2a:	d015      	beq.n	801da58 <_vfiprintf_r+0x120>
 801da2c:	9a07      	ldr	r2, [sp, #28]
 801da2e:	4654      	mov	r4, sl
 801da30:	2000      	movs	r0, #0
 801da32:	f04f 0c0a 	mov.w	ip, #10
 801da36:	4621      	mov	r1, r4
 801da38:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da3c:	3b30      	subs	r3, #48	@ 0x30
 801da3e:	2b09      	cmp	r3, #9
 801da40:	d94b      	bls.n	801dada <_vfiprintf_r+0x1a2>
 801da42:	b1b0      	cbz	r0, 801da72 <_vfiprintf_r+0x13a>
 801da44:	9207      	str	r2, [sp, #28]
 801da46:	e014      	b.n	801da72 <_vfiprintf_r+0x13a>
 801da48:	eba0 0308 	sub.w	r3, r0, r8
 801da4c:	fa09 f303 	lsl.w	r3, r9, r3
 801da50:	4313      	orrs	r3, r2
 801da52:	9304      	str	r3, [sp, #16]
 801da54:	46a2      	mov	sl, r4
 801da56:	e7d2      	b.n	801d9fe <_vfiprintf_r+0xc6>
 801da58:	9b03      	ldr	r3, [sp, #12]
 801da5a:	1d19      	adds	r1, r3, #4
 801da5c:	681b      	ldr	r3, [r3, #0]
 801da5e:	9103      	str	r1, [sp, #12]
 801da60:	2b00      	cmp	r3, #0
 801da62:	bfbb      	ittet	lt
 801da64:	425b      	neglt	r3, r3
 801da66:	f042 0202 	orrlt.w	r2, r2, #2
 801da6a:	9307      	strge	r3, [sp, #28]
 801da6c:	9307      	strlt	r3, [sp, #28]
 801da6e:	bfb8      	it	lt
 801da70:	9204      	strlt	r2, [sp, #16]
 801da72:	7823      	ldrb	r3, [r4, #0]
 801da74:	2b2e      	cmp	r3, #46	@ 0x2e
 801da76:	d10a      	bne.n	801da8e <_vfiprintf_r+0x156>
 801da78:	7863      	ldrb	r3, [r4, #1]
 801da7a:	2b2a      	cmp	r3, #42	@ 0x2a
 801da7c:	d132      	bne.n	801dae4 <_vfiprintf_r+0x1ac>
 801da7e:	9b03      	ldr	r3, [sp, #12]
 801da80:	1d1a      	adds	r2, r3, #4
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	9203      	str	r2, [sp, #12]
 801da86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801da8a:	3402      	adds	r4, #2
 801da8c:	9305      	str	r3, [sp, #20]
 801da8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801db64 <_vfiprintf_r+0x22c>
 801da92:	7821      	ldrb	r1, [r4, #0]
 801da94:	2203      	movs	r2, #3
 801da96:	4650      	mov	r0, sl
 801da98:	f7e2 fbaa 	bl	80001f0 <memchr>
 801da9c:	b138      	cbz	r0, 801daae <_vfiprintf_r+0x176>
 801da9e:	9b04      	ldr	r3, [sp, #16]
 801daa0:	eba0 000a 	sub.w	r0, r0, sl
 801daa4:	2240      	movs	r2, #64	@ 0x40
 801daa6:	4082      	lsls	r2, r0
 801daa8:	4313      	orrs	r3, r2
 801daaa:	3401      	adds	r4, #1
 801daac:	9304      	str	r3, [sp, #16]
 801daae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dab2:	4829      	ldr	r0, [pc, #164]	@ (801db58 <_vfiprintf_r+0x220>)
 801dab4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dab8:	2206      	movs	r2, #6
 801daba:	f7e2 fb99 	bl	80001f0 <memchr>
 801dabe:	2800      	cmp	r0, #0
 801dac0:	d03f      	beq.n	801db42 <_vfiprintf_r+0x20a>
 801dac2:	4b26      	ldr	r3, [pc, #152]	@ (801db5c <_vfiprintf_r+0x224>)
 801dac4:	bb1b      	cbnz	r3, 801db0e <_vfiprintf_r+0x1d6>
 801dac6:	9b03      	ldr	r3, [sp, #12]
 801dac8:	3307      	adds	r3, #7
 801daca:	f023 0307 	bic.w	r3, r3, #7
 801dace:	3308      	adds	r3, #8
 801dad0:	9303      	str	r3, [sp, #12]
 801dad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dad4:	443b      	add	r3, r7
 801dad6:	9309      	str	r3, [sp, #36]	@ 0x24
 801dad8:	e76a      	b.n	801d9b0 <_vfiprintf_r+0x78>
 801dada:	fb0c 3202 	mla	r2, ip, r2, r3
 801dade:	460c      	mov	r4, r1
 801dae0:	2001      	movs	r0, #1
 801dae2:	e7a8      	b.n	801da36 <_vfiprintf_r+0xfe>
 801dae4:	2300      	movs	r3, #0
 801dae6:	3401      	adds	r4, #1
 801dae8:	9305      	str	r3, [sp, #20]
 801daea:	4619      	mov	r1, r3
 801daec:	f04f 0c0a 	mov.w	ip, #10
 801daf0:	4620      	mov	r0, r4
 801daf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801daf6:	3a30      	subs	r2, #48	@ 0x30
 801daf8:	2a09      	cmp	r2, #9
 801dafa:	d903      	bls.n	801db04 <_vfiprintf_r+0x1cc>
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d0c6      	beq.n	801da8e <_vfiprintf_r+0x156>
 801db00:	9105      	str	r1, [sp, #20]
 801db02:	e7c4      	b.n	801da8e <_vfiprintf_r+0x156>
 801db04:	fb0c 2101 	mla	r1, ip, r1, r2
 801db08:	4604      	mov	r4, r0
 801db0a:	2301      	movs	r3, #1
 801db0c:	e7f0      	b.n	801daf0 <_vfiprintf_r+0x1b8>
 801db0e:	ab03      	add	r3, sp, #12
 801db10:	9300      	str	r3, [sp, #0]
 801db12:	462a      	mov	r2, r5
 801db14:	4b12      	ldr	r3, [pc, #72]	@ (801db60 <_vfiprintf_r+0x228>)
 801db16:	a904      	add	r1, sp, #16
 801db18:	4630      	mov	r0, r6
 801db1a:	f7fb f915 	bl	8018d48 <_printf_float>
 801db1e:	4607      	mov	r7, r0
 801db20:	1c78      	adds	r0, r7, #1
 801db22:	d1d6      	bne.n	801dad2 <_vfiprintf_r+0x19a>
 801db24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801db26:	07d9      	lsls	r1, r3, #31
 801db28:	d405      	bmi.n	801db36 <_vfiprintf_r+0x1fe>
 801db2a:	89ab      	ldrh	r3, [r5, #12]
 801db2c:	059a      	lsls	r2, r3, #22
 801db2e:	d402      	bmi.n	801db36 <_vfiprintf_r+0x1fe>
 801db30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801db32:	f7fd f895 	bl	801ac60 <__retarget_lock_release_recursive>
 801db36:	89ab      	ldrh	r3, [r5, #12]
 801db38:	065b      	lsls	r3, r3, #25
 801db3a:	f53f af1f 	bmi.w	801d97c <_vfiprintf_r+0x44>
 801db3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db40:	e71e      	b.n	801d980 <_vfiprintf_r+0x48>
 801db42:	ab03      	add	r3, sp, #12
 801db44:	9300      	str	r3, [sp, #0]
 801db46:	462a      	mov	r2, r5
 801db48:	4b05      	ldr	r3, [pc, #20]	@ (801db60 <_vfiprintf_r+0x228>)
 801db4a:	a904      	add	r1, sp, #16
 801db4c:	4630      	mov	r0, r6
 801db4e:	f7fb fb93 	bl	8019278 <_printf_i>
 801db52:	e7e4      	b.n	801db1e <_vfiprintf_r+0x1e6>
 801db54:	08021c3d 	.word	0x08021c3d
 801db58:	08021c47 	.word	0x08021c47
 801db5c:	08018d49 	.word	0x08018d49
 801db60:	0801d913 	.word	0x0801d913
 801db64:	08021c43 	.word	0x08021c43

0801db68 <__swbuf_r>:
 801db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db6a:	460e      	mov	r6, r1
 801db6c:	4614      	mov	r4, r2
 801db6e:	4605      	mov	r5, r0
 801db70:	b118      	cbz	r0, 801db7a <__swbuf_r+0x12>
 801db72:	6a03      	ldr	r3, [r0, #32]
 801db74:	b90b      	cbnz	r3, 801db7a <__swbuf_r+0x12>
 801db76:	f7fb ff37 	bl	80199e8 <__sinit>
 801db7a:	69a3      	ldr	r3, [r4, #24]
 801db7c:	60a3      	str	r3, [r4, #8]
 801db7e:	89a3      	ldrh	r3, [r4, #12]
 801db80:	071a      	lsls	r2, r3, #28
 801db82:	d501      	bpl.n	801db88 <__swbuf_r+0x20>
 801db84:	6923      	ldr	r3, [r4, #16]
 801db86:	b943      	cbnz	r3, 801db9a <__swbuf_r+0x32>
 801db88:	4621      	mov	r1, r4
 801db8a:	4628      	mov	r0, r5
 801db8c:	f000 f82a 	bl	801dbe4 <__swsetup_r>
 801db90:	b118      	cbz	r0, 801db9a <__swbuf_r+0x32>
 801db92:	f04f 37ff 	mov.w	r7, #4294967295
 801db96:	4638      	mov	r0, r7
 801db98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db9a:	6823      	ldr	r3, [r4, #0]
 801db9c:	6922      	ldr	r2, [r4, #16]
 801db9e:	1a98      	subs	r0, r3, r2
 801dba0:	6963      	ldr	r3, [r4, #20]
 801dba2:	b2f6      	uxtb	r6, r6
 801dba4:	4283      	cmp	r3, r0
 801dba6:	4637      	mov	r7, r6
 801dba8:	dc05      	bgt.n	801dbb6 <__swbuf_r+0x4e>
 801dbaa:	4621      	mov	r1, r4
 801dbac:	4628      	mov	r0, r5
 801dbae:	f7ff fd53 	bl	801d658 <_fflush_r>
 801dbb2:	2800      	cmp	r0, #0
 801dbb4:	d1ed      	bne.n	801db92 <__swbuf_r+0x2a>
 801dbb6:	68a3      	ldr	r3, [r4, #8]
 801dbb8:	3b01      	subs	r3, #1
 801dbba:	60a3      	str	r3, [r4, #8]
 801dbbc:	6823      	ldr	r3, [r4, #0]
 801dbbe:	1c5a      	adds	r2, r3, #1
 801dbc0:	6022      	str	r2, [r4, #0]
 801dbc2:	701e      	strb	r6, [r3, #0]
 801dbc4:	6962      	ldr	r2, [r4, #20]
 801dbc6:	1c43      	adds	r3, r0, #1
 801dbc8:	429a      	cmp	r2, r3
 801dbca:	d004      	beq.n	801dbd6 <__swbuf_r+0x6e>
 801dbcc:	89a3      	ldrh	r3, [r4, #12]
 801dbce:	07db      	lsls	r3, r3, #31
 801dbd0:	d5e1      	bpl.n	801db96 <__swbuf_r+0x2e>
 801dbd2:	2e0a      	cmp	r6, #10
 801dbd4:	d1df      	bne.n	801db96 <__swbuf_r+0x2e>
 801dbd6:	4621      	mov	r1, r4
 801dbd8:	4628      	mov	r0, r5
 801dbda:	f7ff fd3d 	bl	801d658 <_fflush_r>
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	d0d9      	beq.n	801db96 <__swbuf_r+0x2e>
 801dbe2:	e7d6      	b.n	801db92 <__swbuf_r+0x2a>

0801dbe4 <__swsetup_r>:
 801dbe4:	b538      	push	{r3, r4, r5, lr}
 801dbe6:	4b29      	ldr	r3, [pc, #164]	@ (801dc8c <__swsetup_r+0xa8>)
 801dbe8:	4605      	mov	r5, r0
 801dbea:	6818      	ldr	r0, [r3, #0]
 801dbec:	460c      	mov	r4, r1
 801dbee:	b118      	cbz	r0, 801dbf8 <__swsetup_r+0x14>
 801dbf0:	6a03      	ldr	r3, [r0, #32]
 801dbf2:	b90b      	cbnz	r3, 801dbf8 <__swsetup_r+0x14>
 801dbf4:	f7fb fef8 	bl	80199e8 <__sinit>
 801dbf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbfc:	0719      	lsls	r1, r3, #28
 801dbfe:	d422      	bmi.n	801dc46 <__swsetup_r+0x62>
 801dc00:	06da      	lsls	r2, r3, #27
 801dc02:	d407      	bmi.n	801dc14 <__swsetup_r+0x30>
 801dc04:	2209      	movs	r2, #9
 801dc06:	602a      	str	r2, [r5, #0]
 801dc08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc0c:	81a3      	strh	r3, [r4, #12]
 801dc0e:	f04f 30ff 	mov.w	r0, #4294967295
 801dc12:	e033      	b.n	801dc7c <__swsetup_r+0x98>
 801dc14:	0758      	lsls	r0, r3, #29
 801dc16:	d512      	bpl.n	801dc3e <__swsetup_r+0x5a>
 801dc18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dc1a:	b141      	cbz	r1, 801dc2e <__swsetup_r+0x4a>
 801dc1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dc20:	4299      	cmp	r1, r3
 801dc22:	d002      	beq.n	801dc2a <__swsetup_r+0x46>
 801dc24:	4628      	mov	r0, r5
 801dc26:	f7fd ff13 	bl	801ba50 <_free_r>
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	6363      	str	r3, [r4, #52]	@ 0x34
 801dc2e:	89a3      	ldrh	r3, [r4, #12]
 801dc30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dc34:	81a3      	strh	r3, [r4, #12]
 801dc36:	2300      	movs	r3, #0
 801dc38:	6063      	str	r3, [r4, #4]
 801dc3a:	6923      	ldr	r3, [r4, #16]
 801dc3c:	6023      	str	r3, [r4, #0]
 801dc3e:	89a3      	ldrh	r3, [r4, #12]
 801dc40:	f043 0308 	orr.w	r3, r3, #8
 801dc44:	81a3      	strh	r3, [r4, #12]
 801dc46:	6923      	ldr	r3, [r4, #16]
 801dc48:	b94b      	cbnz	r3, 801dc5e <__swsetup_r+0x7a>
 801dc4a:	89a3      	ldrh	r3, [r4, #12]
 801dc4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dc50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dc54:	d003      	beq.n	801dc5e <__swsetup_r+0x7a>
 801dc56:	4621      	mov	r1, r4
 801dc58:	4628      	mov	r0, r5
 801dc5a:	f000 f88b 	bl	801dd74 <__smakebuf_r>
 801dc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc62:	f013 0201 	ands.w	r2, r3, #1
 801dc66:	d00a      	beq.n	801dc7e <__swsetup_r+0x9a>
 801dc68:	2200      	movs	r2, #0
 801dc6a:	60a2      	str	r2, [r4, #8]
 801dc6c:	6962      	ldr	r2, [r4, #20]
 801dc6e:	4252      	negs	r2, r2
 801dc70:	61a2      	str	r2, [r4, #24]
 801dc72:	6922      	ldr	r2, [r4, #16]
 801dc74:	b942      	cbnz	r2, 801dc88 <__swsetup_r+0xa4>
 801dc76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dc7a:	d1c5      	bne.n	801dc08 <__swsetup_r+0x24>
 801dc7c:	bd38      	pop	{r3, r4, r5, pc}
 801dc7e:	0799      	lsls	r1, r3, #30
 801dc80:	bf58      	it	pl
 801dc82:	6962      	ldrpl	r2, [r4, #20]
 801dc84:	60a2      	str	r2, [r4, #8]
 801dc86:	e7f4      	b.n	801dc72 <__swsetup_r+0x8e>
 801dc88:	2000      	movs	r0, #0
 801dc8a:	e7f7      	b.n	801dc7c <__swsetup_r+0x98>
 801dc8c:	200001c0 	.word	0x200001c0

0801dc90 <_raise_r>:
 801dc90:	291f      	cmp	r1, #31
 801dc92:	b538      	push	{r3, r4, r5, lr}
 801dc94:	4605      	mov	r5, r0
 801dc96:	460c      	mov	r4, r1
 801dc98:	d904      	bls.n	801dca4 <_raise_r+0x14>
 801dc9a:	2316      	movs	r3, #22
 801dc9c:	6003      	str	r3, [r0, #0]
 801dc9e:	f04f 30ff 	mov.w	r0, #4294967295
 801dca2:	bd38      	pop	{r3, r4, r5, pc}
 801dca4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dca6:	b112      	cbz	r2, 801dcae <_raise_r+0x1e>
 801dca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dcac:	b94b      	cbnz	r3, 801dcc2 <_raise_r+0x32>
 801dcae:	4628      	mov	r0, r5
 801dcb0:	f000 f830 	bl	801dd14 <_getpid_r>
 801dcb4:	4622      	mov	r2, r4
 801dcb6:	4601      	mov	r1, r0
 801dcb8:	4628      	mov	r0, r5
 801dcba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dcbe:	f000 b817 	b.w	801dcf0 <_kill_r>
 801dcc2:	2b01      	cmp	r3, #1
 801dcc4:	d00a      	beq.n	801dcdc <_raise_r+0x4c>
 801dcc6:	1c59      	adds	r1, r3, #1
 801dcc8:	d103      	bne.n	801dcd2 <_raise_r+0x42>
 801dcca:	2316      	movs	r3, #22
 801dccc:	6003      	str	r3, [r0, #0]
 801dcce:	2001      	movs	r0, #1
 801dcd0:	e7e7      	b.n	801dca2 <_raise_r+0x12>
 801dcd2:	2100      	movs	r1, #0
 801dcd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dcd8:	4620      	mov	r0, r4
 801dcda:	4798      	blx	r3
 801dcdc:	2000      	movs	r0, #0
 801dcde:	e7e0      	b.n	801dca2 <_raise_r+0x12>

0801dce0 <raise>:
 801dce0:	4b02      	ldr	r3, [pc, #8]	@ (801dcec <raise+0xc>)
 801dce2:	4601      	mov	r1, r0
 801dce4:	6818      	ldr	r0, [r3, #0]
 801dce6:	f7ff bfd3 	b.w	801dc90 <_raise_r>
 801dcea:	bf00      	nop
 801dcec:	200001c0 	.word	0x200001c0

0801dcf0 <_kill_r>:
 801dcf0:	b538      	push	{r3, r4, r5, lr}
 801dcf2:	4d07      	ldr	r5, [pc, #28]	@ (801dd10 <_kill_r+0x20>)
 801dcf4:	2300      	movs	r3, #0
 801dcf6:	4604      	mov	r4, r0
 801dcf8:	4608      	mov	r0, r1
 801dcfa:	4611      	mov	r1, r2
 801dcfc:	602b      	str	r3, [r5, #0]
 801dcfe:	f7e4 fbd7 	bl	80024b0 <_kill>
 801dd02:	1c43      	adds	r3, r0, #1
 801dd04:	d102      	bne.n	801dd0c <_kill_r+0x1c>
 801dd06:	682b      	ldr	r3, [r5, #0]
 801dd08:	b103      	cbz	r3, 801dd0c <_kill_r+0x1c>
 801dd0a:	6023      	str	r3, [r4, #0]
 801dd0c:	bd38      	pop	{r3, r4, r5, pc}
 801dd0e:	bf00      	nop
 801dd10:	20005ef4 	.word	0x20005ef4

0801dd14 <_getpid_r>:
 801dd14:	f7e4 bbc4 	b.w	80024a0 <_getpid>

0801dd18 <_malloc_usable_size_r>:
 801dd18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd1c:	1f18      	subs	r0, r3, #4
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	bfbc      	itt	lt
 801dd22:	580b      	ldrlt	r3, [r1, r0]
 801dd24:	18c0      	addlt	r0, r0, r3
 801dd26:	4770      	bx	lr

0801dd28 <__swhatbuf_r>:
 801dd28:	b570      	push	{r4, r5, r6, lr}
 801dd2a:	460c      	mov	r4, r1
 801dd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd30:	2900      	cmp	r1, #0
 801dd32:	b096      	sub	sp, #88	@ 0x58
 801dd34:	4615      	mov	r5, r2
 801dd36:	461e      	mov	r6, r3
 801dd38:	da0d      	bge.n	801dd56 <__swhatbuf_r+0x2e>
 801dd3a:	89a3      	ldrh	r3, [r4, #12]
 801dd3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dd40:	f04f 0100 	mov.w	r1, #0
 801dd44:	bf14      	ite	ne
 801dd46:	2340      	movne	r3, #64	@ 0x40
 801dd48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dd4c:	2000      	movs	r0, #0
 801dd4e:	6031      	str	r1, [r6, #0]
 801dd50:	602b      	str	r3, [r5, #0]
 801dd52:	b016      	add	sp, #88	@ 0x58
 801dd54:	bd70      	pop	{r4, r5, r6, pc}
 801dd56:	466a      	mov	r2, sp
 801dd58:	f000 f848 	bl	801ddec <_fstat_r>
 801dd5c:	2800      	cmp	r0, #0
 801dd5e:	dbec      	blt.n	801dd3a <__swhatbuf_r+0x12>
 801dd60:	9901      	ldr	r1, [sp, #4]
 801dd62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dd66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dd6a:	4259      	negs	r1, r3
 801dd6c:	4159      	adcs	r1, r3
 801dd6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dd72:	e7eb      	b.n	801dd4c <__swhatbuf_r+0x24>

0801dd74 <__smakebuf_r>:
 801dd74:	898b      	ldrh	r3, [r1, #12]
 801dd76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dd78:	079d      	lsls	r5, r3, #30
 801dd7a:	4606      	mov	r6, r0
 801dd7c:	460c      	mov	r4, r1
 801dd7e:	d507      	bpl.n	801dd90 <__smakebuf_r+0x1c>
 801dd80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dd84:	6023      	str	r3, [r4, #0]
 801dd86:	6123      	str	r3, [r4, #16]
 801dd88:	2301      	movs	r3, #1
 801dd8a:	6163      	str	r3, [r4, #20]
 801dd8c:	b003      	add	sp, #12
 801dd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd90:	ab01      	add	r3, sp, #4
 801dd92:	466a      	mov	r2, sp
 801dd94:	f7ff ffc8 	bl	801dd28 <__swhatbuf_r>
 801dd98:	9f00      	ldr	r7, [sp, #0]
 801dd9a:	4605      	mov	r5, r0
 801dd9c:	4639      	mov	r1, r7
 801dd9e:	4630      	mov	r0, r6
 801dda0:	f7fa f80a 	bl	8017db8 <_malloc_r>
 801dda4:	b948      	cbnz	r0, 801ddba <__smakebuf_r+0x46>
 801dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ddaa:	059a      	lsls	r2, r3, #22
 801ddac:	d4ee      	bmi.n	801dd8c <__smakebuf_r+0x18>
 801ddae:	f023 0303 	bic.w	r3, r3, #3
 801ddb2:	f043 0302 	orr.w	r3, r3, #2
 801ddb6:	81a3      	strh	r3, [r4, #12]
 801ddb8:	e7e2      	b.n	801dd80 <__smakebuf_r+0xc>
 801ddba:	89a3      	ldrh	r3, [r4, #12]
 801ddbc:	6020      	str	r0, [r4, #0]
 801ddbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ddc2:	81a3      	strh	r3, [r4, #12]
 801ddc4:	9b01      	ldr	r3, [sp, #4]
 801ddc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ddca:	b15b      	cbz	r3, 801dde4 <__smakebuf_r+0x70>
 801ddcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ddd0:	4630      	mov	r0, r6
 801ddd2:	f000 f81d 	bl	801de10 <_isatty_r>
 801ddd6:	b128      	cbz	r0, 801dde4 <__smakebuf_r+0x70>
 801ddd8:	89a3      	ldrh	r3, [r4, #12]
 801ddda:	f023 0303 	bic.w	r3, r3, #3
 801ddde:	f043 0301 	orr.w	r3, r3, #1
 801dde2:	81a3      	strh	r3, [r4, #12]
 801dde4:	89a3      	ldrh	r3, [r4, #12]
 801dde6:	431d      	orrs	r5, r3
 801dde8:	81a5      	strh	r5, [r4, #12]
 801ddea:	e7cf      	b.n	801dd8c <__smakebuf_r+0x18>

0801ddec <_fstat_r>:
 801ddec:	b538      	push	{r3, r4, r5, lr}
 801ddee:	4d07      	ldr	r5, [pc, #28]	@ (801de0c <_fstat_r+0x20>)
 801ddf0:	2300      	movs	r3, #0
 801ddf2:	4604      	mov	r4, r0
 801ddf4:	4608      	mov	r0, r1
 801ddf6:	4611      	mov	r1, r2
 801ddf8:	602b      	str	r3, [r5, #0]
 801ddfa:	f7e4 fbb9 	bl	8002570 <_fstat>
 801ddfe:	1c43      	adds	r3, r0, #1
 801de00:	d102      	bne.n	801de08 <_fstat_r+0x1c>
 801de02:	682b      	ldr	r3, [r5, #0]
 801de04:	b103      	cbz	r3, 801de08 <_fstat_r+0x1c>
 801de06:	6023      	str	r3, [r4, #0]
 801de08:	bd38      	pop	{r3, r4, r5, pc}
 801de0a:	bf00      	nop
 801de0c:	20005ef4 	.word	0x20005ef4

0801de10 <_isatty_r>:
 801de10:	b538      	push	{r3, r4, r5, lr}
 801de12:	4d06      	ldr	r5, [pc, #24]	@ (801de2c <_isatty_r+0x1c>)
 801de14:	2300      	movs	r3, #0
 801de16:	4604      	mov	r4, r0
 801de18:	4608      	mov	r0, r1
 801de1a:	602b      	str	r3, [r5, #0]
 801de1c:	f7e4 fbb8 	bl	8002590 <_isatty>
 801de20:	1c43      	adds	r3, r0, #1
 801de22:	d102      	bne.n	801de2a <_isatty_r+0x1a>
 801de24:	682b      	ldr	r3, [r5, #0]
 801de26:	b103      	cbz	r3, 801de2a <_isatty_r+0x1a>
 801de28:	6023      	str	r3, [r4, #0]
 801de2a:	bd38      	pop	{r3, r4, r5, pc}
 801de2c:	20005ef4 	.word	0x20005ef4

0801de30 <acos>:
 801de30:	b538      	push	{r3, r4, r5, lr}
 801de32:	ed2d 8b02 	vpush	{d8}
 801de36:	ec55 4b10 	vmov	r4, r5, d0
 801de3a:	f000 fee5 	bl	801ec08 <__ieee754_acos>
 801de3e:	4622      	mov	r2, r4
 801de40:	462b      	mov	r3, r5
 801de42:	4620      	mov	r0, r4
 801de44:	4629      	mov	r1, r5
 801de46:	eeb0 8a40 	vmov.f32	s16, s0
 801de4a:	eef0 8a60 	vmov.f32	s17, s1
 801de4e:	f7e2 fe7d 	bl	8000b4c <__aeabi_dcmpun>
 801de52:	b9a8      	cbnz	r0, 801de80 <acos+0x50>
 801de54:	ec45 4b10 	vmov	d0, r4, r5
 801de58:	f000 fb96 	bl	801e588 <fabs>
 801de5c:	4b0c      	ldr	r3, [pc, #48]	@ (801de90 <acos+0x60>)
 801de5e:	ec51 0b10 	vmov	r0, r1, d0
 801de62:	2200      	movs	r2, #0
 801de64:	f7e2 fe68 	bl	8000b38 <__aeabi_dcmpgt>
 801de68:	b150      	cbz	r0, 801de80 <acos+0x50>
 801de6a:	f7fc fecb 	bl	801ac04 <__errno>
 801de6e:	ecbd 8b02 	vpop	{d8}
 801de72:	2321      	movs	r3, #33	@ 0x21
 801de74:	6003      	str	r3, [r0, #0]
 801de76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de7a:	4806      	ldr	r0, [pc, #24]	@ (801de94 <acos+0x64>)
 801de7c:	f7fc bf08 	b.w	801ac90 <nan>
 801de80:	eeb0 0a48 	vmov.f32	s0, s16
 801de84:	eef0 0a68 	vmov.f32	s1, s17
 801de88:	ecbd 8b02 	vpop	{d8}
 801de8c:	bd38      	pop	{r3, r4, r5, pc}
 801de8e:	bf00      	nop
 801de90:	3ff00000 	.word	0x3ff00000
 801de94:	08021b0d 	.word	0x08021b0d

0801de98 <asin>:
 801de98:	b538      	push	{r3, r4, r5, lr}
 801de9a:	ed2d 8b02 	vpush	{d8}
 801de9e:	ec55 4b10 	vmov	r4, r5, d0
 801dea2:	f001 f90d 	bl	801f0c0 <__ieee754_asin>
 801dea6:	4622      	mov	r2, r4
 801dea8:	462b      	mov	r3, r5
 801deaa:	4620      	mov	r0, r4
 801deac:	4629      	mov	r1, r5
 801deae:	eeb0 8a40 	vmov.f32	s16, s0
 801deb2:	eef0 8a60 	vmov.f32	s17, s1
 801deb6:	f7e2 fe49 	bl	8000b4c <__aeabi_dcmpun>
 801deba:	b9a8      	cbnz	r0, 801dee8 <asin+0x50>
 801debc:	ec45 4b10 	vmov	d0, r4, r5
 801dec0:	f000 fb62 	bl	801e588 <fabs>
 801dec4:	4b0c      	ldr	r3, [pc, #48]	@ (801def8 <asin+0x60>)
 801dec6:	ec51 0b10 	vmov	r0, r1, d0
 801deca:	2200      	movs	r2, #0
 801decc:	f7e2 fe34 	bl	8000b38 <__aeabi_dcmpgt>
 801ded0:	b150      	cbz	r0, 801dee8 <asin+0x50>
 801ded2:	f7fc fe97 	bl	801ac04 <__errno>
 801ded6:	ecbd 8b02 	vpop	{d8}
 801deda:	2321      	movs	r3, #33	@ 0x21
 801dedc:	6003      	str	r3, [r0, #0]
 801dede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dee2:	4806      	ldr	r0, [pc, #24]	@ (801defc <asin+0x64>)
 801dee4:	f7fc bed4 	b.w	801ac90 <nan>
 801dee8:	eeb0 0a48 	vmov.f32	s0, s16
 801deec:	eef0 0a68 	vmov.f32	s1, s17
 801def0:	ecbd 8b02 	vpop	{d8}
 801def4:	bd38      	pop	{r3, r4, r5, pc}
 801def6:	bf00      	nop
 801def8:	3ff00000 	.word	0x3ff00000
 801defc:	08021b0d 	.word	0x08021b0d

0801df00 <atan2>:
 801df00:	f001 bae2 	b.w	801f4c8 <__ieee754_atan2>
 801df04:	0000      	movs	r0, r0
	...

0801df08 <exp>:
 801df08:	b538      	push	{r3, r4, r5, lr}
 801df0a:	ed2d 8b02 	vpush	{d8}
 801df0e:	ec55 4b10 	vmov	r4, r5, d0
 801df12:	f001 fba1 	bl	801f658 <__ieee754_exp>
 801df16:	eeb0 8a40 	vmov.f32	s16, s0
 801df1a:	eef0 8a60 	vmov.f32	s17, s1
 801df1e:	ec45 4b10 	vmov	d0, r4, r5
 801df22:	f000 fb8d 	bl	801e640 <finite>
 801df26:	b168      	cbz	r0, 801df44 <exp+0x3c>
 801df28:	a317      	add	r3, pc, #92	@ (adr r3, 801df88 <exp+0x80>)
 801df2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df2e:	4620      	mov	r0, r4
 801df30:	4629      	mov	r1, r5
 801df32:	f7e2 fe01 	bl	8000b38 <__aeabi_dcmpgt>
 801df36:	b160      	cbz	r0, 801df52 <exp+0x4a>
 801df38:	f7fc fe64 	bl	801ac04 <__errno>
 801df3c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 801df78 <exp+0x70>
 801df40:	2322      	movs	r3, #34	@ 0x22
 801df42:	6003      	str	r3, [r0, #0]
 801df44:	eeb0 0a48 	vmov.f32	s0, s16
 801df48:	eef0 0a68 	vmov.f32	s1, s17
 801df4c:	ecbd 8b02 	vpop	{d8}
 801df50:	bd38      	pop	{r3, r4, r5, pc}
 801df52:	a30f      	add	r3, pc, #60	@ (adr r3, 801df90 <exp+0x88>)
 801df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df58:	4620      	mov	r0, r4
 801df5a:	4629      	mov	r1, r5
 801df5c:	f7e2 fdce 	bl	8000afc <__aeabi_dcmplt>
 801df60:	2800      	cmp	r0, #0
 801df62:	d0ef      	beq.n	801df44 <exp+0x3c>
 801df64:	f7fc fe4e 	bl	801ac04 <__errno>
 801df68:	2322      	movs	r3, #34	@ 0x22
 801df6a:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 801df80 <exp+0x78>
 801df6e:	6003      	str	r3, [r0, #0]
 801df70:	e7e8      	b.n	801df44 <exp+0x3c>
 801df72:	bf00      	nop
 801df74:	f3af 8000 	nop.w
 801df78:	00000000 	.word	0x00000000
 801df7c:	7ff00000 	.word	0x7ff00000
	...
 801df88:	fefa39ef 	.word	0xfefa39ef
 801df8c:	40862e42 	.word	0x40862e42
 801df90:	d52d3051 	.word	0xd52d3051
 801df94:	c0874910 	.word	0xc0874910

0801df98 <fmod>:
 801df98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df9a:	ed2d 8b02 	vpush	{d8}
 801df9e:	ec57 6b10 	vmov	r6, r7, d0
 801dfa2:	ec55 4b11 	vmov	r4, r5, d1
 801dfa6:	f001 fcd1 	bl	801f94c <__ieee754_fmod>
 801dfaa:	4622      	mov	r2, r4
 801dfac:	462b      	mov	r3, r5
 801dfae:	4630      	mov	r0, r6
 801dfb0:	4639      	mov	r1, r7
 801dfb2:	eeb0 8a40 	vmov.f32	s16, s0
 801dfb6:	eef0 8a60 	vmov.f32	s17, s1
 801dfba:	f7e2 fdc7 	bl	8000b4c <__aeabi_dcmpun>
 801dfbe:	b990      	cbnz	r0, 801dfe6 <fmod+0x4e>
 801dfc0:	2200      	movs	r2, #0
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	4620      	mov	r0, r4
 801dfc6:	4629      	mov	r1, r5
 801dfc8:	f7e2 fd8e 	bl	8000ae8 <__aeabi_dcmpeq>
 801dfcc:	b158      	cbz	r0, 801dfe6 <fmod+0x4e>
 801dfce:	f7fc fe19 	bl	801ac04 <__errno>
 801dfd2:	2321      	movs	r3, #33	@ 0x21
 801dfd4:	6003      	str	r3, [r0, #0]
 801dfd6:	2200      	movs	r2, #0
 801dfd8:	2300      	movs	r3, #0
 801dfda:	4610      	mov	r0, r2
 801dfdc:	4619      	mov	r1, r3
 801dfde:	f7e2 fc45 	bl	800086c <__aeabi_ddiv>
 801dfe2:	ec41 0b18 	vmov	d8, r0, r1
 801dfe6:	eeb0 0a48 	vmov.f32	s0, s16
 801dfea:	eef0 0a68 	vmov.f32	s1, s17
 801dfee:	ecbd 8b02 	vpop	{d8}
 801dff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dff4:	0000      	movs	r0, r0
	...

0801dff8 <log>:
 801dff8:	b538      	push	{r3, r4, r5, lr}
 801dffa:	ed2d 8b02 	vpush	{d8}
 801dffe:	ec55 4b10 	vmov	r4, r5, d0
 801e002:	f001 fdad 	bl	801fb60 <__ieee754_log>
 801e006:	4622      	mov	r2, r4
 801e008:	462b      	mov	r3, r5
 801e00a:	4620      	mov	r0, r4
 801e00c:	4629      	mov	r1, r5
 801e00e:	eeb0 8a40 	vmov.f32	s16, s0
 801e012:	eef0 8a60 	vmov.f32	s17, s1
 801e016:	f7e2 fd99 	bl	8000b4c <__aeabi_dcmpun>
 801e01a:	b998      	cbnz	r0, 801e044 <log+0x4c>
 801e01c:	2200      	movs	r2, #0
 801e01e:	2300      	movs	r3, #0
 801e020:	4620      	mov	r0, r4
 801e022:	4629      	mov	r1, r5
 801e024:	f7e2 fd88 	bl	8000b38 <__aeabi_dcmpgt>
 801e028:	b960      	cbnz	r0, 801e044 <log+0x4c>
 801e02a:	2200      	movs	r2, #0
 801e02c:	2300      	movs	r3, #0
 801e02e:	4620      	mov	r0, r4
 801e030:	4629      	mov	r1, r5
 801e032:	f7e2 fd59 	bl	8000ae8 <__aeabi_dcmpeq>
 801e036:	b160      	cbz	r0, 801e052 <log+0x5a>
 801e038:	f7fc fde4 	bl	801ac04 <__errno>
 801e03c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 801e068 <log+0x70>
 801e040:	2322      	movs	r3, #34	@ 0x22
 801e042:	6003      	str	r3, [r0, #0]
 801e044:	eeb0 0a48 	vmov.f32	s0, s16
 801e048:	eef0 0a68 	vmov.f32	s1, s17
 801e04c:	ecbd 8b02 	vpop	{d8}
 801e050:	bd38      	pop	{r3, r4, r5, pc}
 801e052:	f7fc fdd7 	bl	801ac04 <__errno>
 801e056:	ecbd 8b02 	vpop	{d8}
 801e05a:	2321      	movs	r3, #33	@ 0x21
 801e05c:	6003      	str	r3, [r0, #0]
 801e05e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e062:	4803      	ldr	r0, [pc, #12]	@ (801e070 <log+0x78>)
 801e064:	f7fc be14 	b.w	801ac90 <nan>
 801e068:	00000000 	.word	0x00000000
 801e06c:	fff00000 	.word	0xfff00000
 801e070:	08021b0d 	.word	0x08021b0d

0801e074 <pow>:
 801e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e076:	ed2d 8b02 	vpush	{d8}
 801e07a:	eeb0 8a40 	vmov.f32	s16, s0
 801e07e:	eef0 8a60 	vmov.f32	s17, s1
 801e082:	ec55 4b11 	vmov	r4, r5, d1
 801e086:	f001 ff23 	bl	801fed0 <__ieee754_pow>
 801e08a:	4622      	mov	r2, r4
 801e08c:	462b      	mov	r3, r5
 801e08e:	4620      	mov	r0, r4
 801e090:	4629      	mov	r1, r5
 801e092:	ec57 6b10 	vmov	r6, r7, d0
 801e096:	f7e2 fd59 	bl	8000b4c <__aeabi_dcmpun>
 801e09a:	2800      	cmp	r0, #0
 801e09c:	d13b      	bne.n	801e116 <pow+0xa2>
 801e09e:	ec51 0b18 	vmov	r0, r1, d8
 801e0a2:	2200      	movs	r2, #0
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	f7e2 fd1f 	bl	8000ae8 <__aeabi_dcmpeq>
 801e0aa:	b1b8      	cbz	r0, 801e0dc <pow+0x68>
 801e0ac:	2200      	movs	r2, #0
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	4620      	mov	r0, r4
 801e0b2:	4629      	mov	r1, r5
 801e0b4:	f7e2 fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 801e0b8:	2800      	cmp	r0, #0
 801e0ba:	d146      	bne.n	801e14a <pow+0xd6>
 801e0bc:	ec45 4b10 	vmov	d0, r4, r5
 801e0c0:	f000 fabe 	bl	801e640 <finite>
 801e0c4:	b338      	cbz	r0, 801e116 <pow+0xa2>
 801e0c6:	2200      	movs	r2, #0
 801e0c8:	2300      	movs	r3, #0
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	4629      	mov	r1, r5
 801e0ce:	f7e2 fd15 	bl	8000afc <__aeabi_dcmplt>
 801e0d2:	b300      	cbz	r0, 801e116 <pow+0xa2>
 801e0d4:	f7fc fd96 	bl	801ac04 <__errno>
 801e0d8:	2322      	movs	r3, #34	@ 0x22
 801e0da:	e01b      	b.n	801e114 <pow+0xa0>
 801e0dc:	ec47 6b10 	vmov	d0, r6, r7
 801e0e0:	f000 faae 	bl	801e640 <finite>
 801e0e4:	b9e0      	cbnz	r0, 801e120 <pow+0xac>
 801e0e6:	eeb0 0a48 	vmov.f32	s0, s16
 801e0ea:	eef0 0a68 	vmov.f32	s1, s17
 801e0ee:	f000 faa7 	bl	801e640 <finite>
 801e0f2:	b1a8      	cbz	r0, 801e120 <pow+0xac>
 801e0f4:	ec45 4b10 	vmov	d0, r4, r5
 801e0f8:	f000 faa2 	bl	801e640 <finite>
 801e0fc:	b180      	cbz	r0, 801e120 <pow+0xac>
 801e0fe:	4632      	mov	r2, r6
 801e100:	463b      	mov	r3, r7
 801e102:	4630      	mov	r0, r6
 801e104:	4639      	mov	r1, r7
 801e106:	f7e2 fd21 	bl	8000b4c <__aeabi_dcmpun>
 801e10a:	2800      	cmp	r0, #0
 801e10c:	d0e2      	beq.n	801e0d4 <pow+0x60>
 801e10e:	f7fc fd79 	bl	801ac04 <__errno>
 801e112:	2321      	movs	r3, #33	@ 0x21
 801e114:	6003      	str	r3, [r0, #0]
 801e116:	ecbd 8b02 	vpop	{d8}
 801e11a:	ec47 6b10 	vmov	d0, r6, r7
 801e11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e120:	2200      	movs	r2, #0
 801e122:	2300      	movs	r3, #0
 801e124:	4630      	mov	r0, r6
 801e126:	4639      	mov	r1, r7
 801e128:	f7e2 fcde 	bl	8000ae8 <__aeabi_dcmpeq>
 801e12c:	2800      	cmp	r0, #0
 801e12e:	d0f2      	beq.n	801e116 <pow+0xa2>
 801e130:	eeb0 0a48 	vmov.f32	s0, s16
 801e134:	eef0 0a68 	vmov.f32	s1, s17
 801e138:	f000 fa82 	bl	801e640 <finite>
 801e13c:	2800      	cmp	r0, #0
 801e13e:	d0ea      	beq.n	801e116 <pow+0xa2>
 801e140:	ec45 4b10 	vmov	d0, r4, r5
 801e144:	f000 fa7c 	bl	801e640 <finite>
 801e148:	e7c3      	b.n	801e0d2 <pow+0x5e>
 801e14a:	4f01      	ldr	r7, [pc, #4]	@ (801e150 <pow+0xdc>)
 801e14c:	2600      	movs	r6, #0
 801e14e:	e7e2      	b.n	801e116 <pow+0xa2>
 801e150:	3ff00000 	.word	0x3ff00000

0801e154 <sqrt>:
 801e154:	b538      	push	{r3, r4, r5, lr}
 801e156:	ed2d 8b02 	vpush	{d8}
 801e15a:	ec55 4b10 	vmov	r4, r5, d0
 801e15e:	f000 fa7b 	bl	801e658 <__ieee754_sqrt>
 801e162:	4622      	mov	r2, r4
 801e164:	462b      	mov	r3, r5
 801e166:	4620      	mov	r0, r4
 801e168:	4629      	mov	r1, r5
 801e16a:	eeb0 8a40 	vmov.f32	s16, s0
 801e16e:	eef0 8a60 	vmov.f32	s17, s1
 801e172:	f7e2 fceb 	bl	8000b4c <__aeabi_dcmpun>
 801e176:	b990      	cbnz	r0, 801e19e <sqrt+0x4a>
 801e178:	2200      	movs	r2, #0
 801e17a:	2300      	movs	r3, #0
 801e17c:	4620      	mov	r0, r4
 801e17e:	4629      	mov	r1, r5
 801e180:	f7e2 fcbc 	bl	8000afc <__aeabi_dcmplt>
 801e184:	b158      	cbz	r0, 801e19e <sqrt+0x4a>
 801e186:	f7fc fd3d 	bl	801ac04 <__errno>
 801e18a:	2321      	movs	r3, #33	@ 0x21
 801e18c:	6003      	str	r3, [r0, #0]
 801e18e:	2200      	movs	r2, #0
 801e190:	2300      	movs	r3, #0
 801e192:	4610      	mov	r0, r2
 801e194:	4619      	mov	r1, r3
 801e196:	f7e2 fb69 	bl	800086c <__aeabi_ddiv>
 801e19a:	ec41 0b18 	vmov	d8, r0, r1
 801e19e:	eeb0 0a48 	vmov.f32	s0, s16
 801e1a2:	eef0 0a68 	vmov.f32	s1, s17
 801e1a6:	ecbd 8b02 	vpop	{d8}
 801e1aa:	bd38      	pop	{r3, r4, r5, pc}
 801e1ac:	0000      	movs	r0, r0
	...

0801e1b0 <atan>:
 801e1b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1b4:	ec55 4b10 	vmov	r4, r5, d0
 801e1b8:	4bbf      	ldr	r3, [pc, #764]	@ (801e4b8 <atan+0x308>)
 801e1ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801e1be:	429e      	cmp	r6, r3
 801e1c0:	46ab      	mov	fp, r5
 801e1c2:	d918      	bls.n	801e1f6 <atan+0x46>
 801e1c4:	4bbd      	ldr	r3, [pc, #756]	@ (801e4bc <atan+0x30c>)
 801e1c6:	429e      	cmp	r6, r3
 801e1c8:	d801      	bhi.n	801e1ce <atan+0x1e>
 801e1ca:	d109      	bne.n	801e1e0 <atan+0x30>
 801e1cc:	b144      	cbz	r4, 801e1e0 <atan+0x30>
 801e1ce:	4622      	mov	r2, r4
 801e1d0:	462b      	mov	r3, r5
 801e1d2:	4620      	mov	r0, r4
 801e1d4:	4629      	mov	r1, r5
 801e1d6:	f7e2 f869 	bl	80002ac <__adddf3>
 801e1da:	4604      	mov	r4, r0
 801e1dc:	460d      	mov	r5, r1
 801e1de:	e006      	b.n	801e1ee <atan+0x3e>
 801e1e0:	f1bb 0f00 	cmp.w	fp, #0
 801e1e4:	f340 812b 	ble.w	801e43e <atan+0x28e>
 801e1e8:	a597      	add	r5, pc, #604	@ (adr r5, 801e448 <atan+0x298>)
 801e1ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e1ee:	ec45 4b10 	vmov	d0, r4, r5
 801e1f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1f6:	4bb2      	ldr	r3, [pc, #712]	@ (801e4c0 <atan+0x310>)
 801e1f8:	429e      	cmp	r6, r3
 801e1fa:	d813      	bhi.n	801e224 <atan+0x74>
 801e1fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e200:	429e      	cmp	r6, r3
 801e202:	d80c      	bhi.n	801e21e <atan+0x6e>
 801e204:	a392      	add	r3, pc, #584	@ (adr r3, 801e450 <atan+0x2a0>)
 801e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e20a:	4620      	mov	r0, r4
 801e20c:	4629      	mov	r1, r5
 801e20e:	f7e2 f84d 	bl	80002ac <__adddf3>
 801e212:	4bac      	ldr	r3, [pc, #688]	@ (801e4c4 <atan+0x314>)
 801e214:	2200      	movs	r2, #0
 801e216:	f7e2 fc8f 	bl	8000b38 <__aeabi_dcmpgt>
 801e21a:	2800      	cmp	r0, #0
 801e21c:	d1e7      	bne.n	801e1ee <atan+0x3e>
 801e21e:	f04f 3aff 	mov.w	sl, #4294967295
 801e222:	e029      	b.n	801e278 <atan+0xc8>
 801e224:	f000 f9b0 	bl	801e588 <fabs>
 801e228:	4ba7      	ldr	r3, [pc, #668]	@ (801e4c8 <atan+0x318>)
 801e22a:	429e      	cmp	r6, r3
 801e22c:	ec55 4b10 	vmov	r4, r5, d0
 801e230:	f200 80bc 	bhi.w	801e3ac <atan+0x1fc>
 801e234:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e238:	429e      	cmp	r6, r3
 801e23a:	f200 809e 	bhi.w	801e37a <atan+0x1ca>
 801e23e:	4622      	mov	r2, r4
 801e240:	462b      	mov	r3, r5
 801e242:	4620      	mov	r0, r4
 801e244:	4629      	mov	r1, r5
 801e246:	f7e2 f831 	bl	80002ac <__adddf3>
 801e24a:	4b9e      	ldr	r3, [pc, #632]	@ (801e4c4 <atan+0x314>)
 801e24c:	2200      	movs	r2, #0
 801e24e:	f7e2 f82b 	bl	80002a8 <__aeabi_dsub>
 801e252:	2200      	movs	r2, #0
 801e254:	4606      	mov	r6, r0
 801e256:	460f      	mov	r7, r1
 801e258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e25c:	4620      	mov	r0, r4
 801e25e:	4629      	mov	r1, r5
 801e260:	f7e2 f824 	bl	80002ac <__adddf3>
 801e264:	4602      	mov	r2, r0
 801e266:	460b      	mov	r3, r1
 801e268:	4630      	mov	r0, r6
 801e26a:	4639      	mov	r1, r7
 801e26c:	f7e2 fafe 	bl	800086c <__aeabi_ddiv>
 801e270:	f04f 0a00 	mov.w	sl, #0
 801e274:	4604      	mov	r4, r0
 801e276:	460d      	mov	r5, r1
 801e278:	4622      	mov	r2, r4
 801e27a:	462b      	mov	r3, r5
 801e27c:	4620      	mov	r0, r4
 801e27e:	4629      	mov	r1, r5
 801e280:	f7e2 f9ca 	bl	8000618 <__aeabi_dmul>
 801e284:	4602      	mov	r2, r0
 801e286:	460b      	mov	r3, r1
 801e288:	4680      	mov	r8, r0
 801e28a:	4689      	mov	r9, r1
 801e28c:	f7e2 f9c4 	bl	8000618 <__aeabi_dmul>
 801e290:	a371      	add	r3, pc, #452	@ (adr r3, 801e458 <atan+0x2a8>)
 801e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e296:	4606      	mov	r6, r0
 801e298:	460f      	mov	r7, r1
 801e29a:	f7e2 f9bd 	bl	8000618 <__aeabi_dmul>
 801e29e:	a370      	add	r3, pc, #448	@ (adr r3, 801e460 <atan+0x2b0>)
 801e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a4:	f7e2 f802 	bl	80002ac <__adddf3>
 801e2a8:	4632      	mov	r2, r6
 801e2aa:	463b      	mov	r3, r7
 801e2ac:	f7e2 f9b4 	bl	8000618 <__aeabi_dmul>
 801e2b0:	a36d      	add	r3, pc, #436	@ (adr r3, 801e468 <atan+0x2b8>)
 801e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2b6:	f7e1 fff9 	bl	80002ac <__adddf3>
 801e2ba:	4632      	mov	r2, r6
 801e2bc:	463b      	mov	r3, r7
 801e2be:	f7e2 f9ab 	bl	8000618 <__aeabi_dmul>
 801e2c2:	a36b      	add	r3, pc, #428	@ (adr r3, 801e470 <atan+0x2c0>)
 801e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2c8:	f7e1 fff0 	bl	80002ac <__adddf3>
 801e2cc:	4632      	mov	r2, r6
 801e2ce:	463b      	mov	r3, r7
 801e2d0:	f7e2 f9a2 	bl	8000618 <__aeabi_dmul>
 801e2d4:	a368      	add	r3, pc, #416	@ (adr r3, 801e478 <atan+0x2c8>)
 801e2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2da:	f7e1 ffe7 	bl	80002ac <__adddf3>
 801e2de:	4632      	mov	r2, r6
 801e2e0:	463b      	mov	r3, r7
 801e2e2:	f7e2 f999 	bl	8000618 <__aeabi_dmul>
 801e2e6:	a366      	add	r3, pc, #408	@ (adr r3, 801e480 <atan+0x2d0>)
 801e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2ec:	f7e1 ffde 	bl	80002ac <__adddf3>
 801e2f0:	4642      	mov	r2, r8
 801e2f2:	464b      	mov	r3, r9
 801e2f4:	f7e2 f990 	bl	8000618 <__aeabi_dmul>
 801e2f8:	a363      	add	r3, pc, #396	@ (adr r3, 801e488 <atan+0x2d8>)
 801e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2fe:	4680      	mov	r8, r0
 801e300:	4689      	mov	r9, r1
 801e302:	4630      	mov	r0, r6
 801e304:	4639      	mov	r1, r7
 801e306:	f7e2 f987 	bl	8000618 <__aeabi_dmul>
 801e30a:	a361      	add	r3, pc, #388	@ (adr r3, 801e490 <atan+0x2e0>)
 801e30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e310:	f7e1 ffca 	bl	80002a8 <__aeabi_dsub>
 801e314:	4632      	mov	r2, r6
 801e316:	463b      	mov	r3, r7
 801e318:	f7e2 f97e 	bl	8000618 <__aeabi_dmul>
 801e31c:	a35e      	add	r3, pc, #376	@ (adr r3, 801e498 <atan+0x2e8>)
 801e31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e322:	f7e1 ffc1 	bl	80002a8 <__aeabi_dsub>
 801e326:	4632      	mov	r2, r6
 801e328:	463b      	mov	r3, r7
 801e32a:	f7e2 f975 	bl	8000618 <__aeabi_dmul>
 801e32e:	a35c      	add	r3, pc, #368	@ (adr r3, 801e4a0 <atan+0x2f0>)
 801e330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e334:	f7e1 ffb8 	bl	80002a8 <__aeabi_dsub>
 801e338:	4632      	mov	r2, r6
 801e33a:	463b      	mov	r3, r7
 801e33c:	f7e2 f96c 	bl	8000618 <__aeabi_dmul>
 801e340:	a359      	add	r3, pc, #356	@ (adr r3, 801e4a8 <atan+0x2f8>)
 801e342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e346:	f7e1 ffaf 	bl	80002a8 <__aeabi_dsub>
 801e34a:	4632      	mov	r2, r6
 801e34c:	463b      	mov	r3, r7
 801e34e:	f7e2 f963 	bl	8000618 <__aeabi_dmul>
 801e352:	4602      	mov	r2, r0
 801e354:	460b      	mov	r3, r1
 801e356:	4640      	mov	r0, r8
 801e358:	4649      	mov	r1, r9
 801e35a:	f7e1 ffa7 	bl	80002ac <__adddf3>
 801e35e:	4622      	mov	r2, r4
 801e360:	462b      	mov	r3, r5
 801e362:	f7e2 f959 	bl	8000618 <__aeabi_dmul>
 801e366:	f1ba 3fff 	cmp.w	sl, #4294967295
 801e36a:	4602      	mov	r2, r0
 801e36c:	460b      	mov	r3, r1
 801e36e:	d148      	bne.n	801e402 <atan+0x252>
 801e370:	4620      	mov	r0, r4
 801e372:	4629      	mov	r1, r5
 801e374:	f7e1 ff98 	bl	80002a8 <__aeabi_dsub>
 801e378:	e72f      	b.n	801e1da <atan+0x2a>
 801e37a:	4b52      	ldr	r3, [pc, #328]	@ (801e4c4 <atan+0x314>)
 801e37c:	2200      	movs	r2, #0
 801e37e:	4620      	mov	r0, r4
 801e380:	4629      	mov	r1, r5
 801e382:	f7e1 ff91 	bl	80002a8 <__aeabi_dsub>
 801e386:	4b4f      	ldr	r3, [pc, #316]	@ (801e4c4 <atan+0x314>)
 801e388:	4606      	mov	r6, r0
 801e38a:	460f      	mov	r7, r1
 801e38c:	2200      	movs	r2, #0
 801e38e:	4620      	mov	r0, r4
 801e390:	4629      	mov	r1, r5
 801e392:	f7e1 ff8b 	bl	80002ac <__adddf3>
 801e396:	4602      	mov	r2, r0
 801e398:	460b      	mov	r3, r1
 801e39a:	4630      	mov	r0, r6
 801e39c:	4639      	mov	r1, r7
 801e39e:	f7e2 fa65 	bl	800086c <__aeabi_ddiv>
 801e3a2:	f04f 0a01 	mov.w	sl, #1
 801e3a6:	4604      	mov	r4, r0
 801e3a8:	460d      	mov	r5, r1
 801e3aa:	e765      	b.n	801e278 <atan+0xc8>
 801e3ac:	4b47      	ldr	r3, [pc, #284]	@ (801e4cc <atan+0x31c>)
 801e3ae:	429e      	cmp	r6, r3
 801e3b0:	d21c      	bcs.n	801e3ec <atan+0x23c>
 801e3b2:	4b47      	ldr	r3, [pc, #284]	@ (801e4d0 <atan+0x320>)
 801e3b4:	2200      	movs	r2, #0
 801e3b6:	4620      	mov	r0, r4
 801e3b8:	4629      	mov	r1, r5
 801e3ba:	f7e1 ff75 	bl	80002a8 <__aeabi_dsub>
 801e3be:	4b44      	ldr	r3, [pc, #272]	@ (801e4d0 <atan+0x320>)
 801e3c0:	4606      	mov	r6, r0
 801e3c2:	460f      	mov	r7, r1
 801e3c4:	2200      	movs	r2, #0
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	4629      	mov	r1, r5
 801e3ca:	f7e2 f925 	bl	8000618 <__aeabi_dmul>
 801e3ce:	4b3d      	ldr	r3, [pc, #244]	@ (801e4c4 <atan+0x314>)
 801e3d0:	2200      	movs	r2, #0
 801e3d2:	f7e1 ff6b 	bl	80002ac <__adddf3>
 801e3d6:	4602      	mov	r2, r0
 801e3d8:	460b      	mov	r3, r1
 801e3da:	4630      	mov	r0, r6
 801e3dc:	4639      	mov	r1, r7
 801e3de:	f7e2 fa45 	bl	800086c <__aeabi_ddiv>
 801e3e2:	f04f 0a02 	mov.w	sl, #2
 801e3e6:	4604      	mov	r4, r0
 801e3e8:	460d      	mov	r5, r1
 801e3ea:	e745      	b.n	801e278 <atan+0xc8>
 801e3ec:	4622      	mov	r2, r4
 801e3ee:	462b      	mov	r3, r5
 801e3f0:	4938      	ldr	r1, [pc, #224]	@ (801e4d4 <atan+0x324>)
 801e3f2:	2000      	movs	r0, #0
 801e3f4:	f7e2 fa3a 	bl	800086c <__aeabi_ddiv>
 801e3f8:	f04f 0a03 	mov.w	sl, #3
 801e3fc:	4604      	mov	r4, r0
 801e3fe:	460d      	mov	r5, r1
 801e400:	e73a      	b.n	801e278 <atan+0xc8>
 801e402:	4b35      	ldr	r3, [pc, #212]	@ (801e4d8 <atan+0x328>)
 801e404:	4e35      	ldr	r6, [pc, #212]	@ (801e4dc <atan+0x32c>)
 801e406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e40e:	f7e1 ff4b 	bl	80002a8 <__aeabi_dsub>
 801e412:	4622      	mov	r2, r4
 801e414:	462b      	mov	r3, r5
 801e416:	f7e1 ff47 	bl	80002a8 <__aeabi_dsub>
 801e41a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801e41e:	4602      	mov	r2, r0
 801e420:	460b      	mov	r3, r1
 801e422:	e9d6 0100 	ldrd	r0, r1, [r6]
 801e426:	f7e1 ff3f 	bl	80002a8 <__aeabi_dsub>
 801e42a:	f1bb 0f00 	cmp.w	fp, #0
 801e42e:	4604      	mov	r4, r0
 801e430:	460d      	mov	r5, r1
 801e432:	f6bf aedc 	bge.w	801e1ee <atan+0x3e>
 801e436:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e43a:	461d      	mov	r5, r3
 801e43c:	e6d7      	b.n	801e1ee <atan+0x3e>
 801e43e:	a51c      	add	r5, pc, #112	@ (adr r5, 801e4b0 <atan+0x300>)
 801e440:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e444:	e6d3      	b.n	801e1ee <atan+0x3e>
 801e446:	bf00      	nop
 801e448:	54442d18 	.word	0x54442d18
 801e44c:	3ff921fb 	.word	0x3ff921fb
 801e450:	8800759c 	.word	0x8800759c
 801e454:	7e37e43c 	.word	0x7e37e43c
 801e458:	e322da11 	.word	0xe322da11
 801e45c:	3f90ad3a 	.word	0x3f90ad3a
 801e460:	24760deb 	.word	0x24760deb
 801e464:	3fa97b4b 	.word	0x3fa97b4b
 801e468:	a0d03d51 	.word	0xa0d03d51
 801e46c:	3fb10d66 	.word	0x3fb10d66
 801e470:	c54c206e 	.word	0xc54c206e
 801e474:	3fb745cd 	.word	0x3fb745cd
 801e478:	920083ff 	.word	0x920083ff
 801e47c:	3fc24924 	.word	0x3fc24924
 801e480:	5555550d 	.word	0x5555550d
 801e484:	3fd55555 	.word	0x3fd55555
 801e488:	2c6a6c2f 	.word	0x2c6a6c2f
 801e48c:	bfa2b444 	.word	0xbfa2b444
 801e490:	52defd9a 	.word	0x52defd9a
 801e494:	3fadde2d 	.word	0x3fadde2d
 801e498:	af749a6d 	.word	0xaf749a6d
 801e49c:	3fb3b0f2 	.word	0x3fb3b0f2
 801e4a0:	fe231671 	.word	0xfe231671
 801e4a4:	3fbc71c6 	.word	0x3fbc71c6
 801e4a8:	9998ebc4 	.word	0x9998ebc4
 801e4ac:	3fc99999 	.word	0x3fc99999
 801e4b0:	54442d18 	.word	0x54442d18
 801e4b4:	bff921fb 	.word	0xbff921fb
 801e4b8:	440fffff 	.word	0x440fffff
 801e4bc:	7ff00000 	.word	0x7ff00000
 801e4c0:	3fdbffff 	.word	0x3fdbffff
 801e4c4:	3ff00000 	.word	0x3ff00000
 801e4c8:	3ff2ffff 	.word	0x3ff2ffff
 801e4cc:	40038000 	.word	0x40038000
 801e4d0:	3ff80000 	.word	0x3ff80000
 801e4d4:	bff00000 	.word	0xbff00000
 801e4d8:	08021f80 	.word	0x08021f80
 801e4dc:	08021fa0 	.word	0x08021fa0

0801e4e0 <cos>:
 801e4e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e4e2:	ec53 2b10 	vmov	r2, r3, d0
 801e4e6:	4826      	ldr	r0, [pc, #152]	@ (801e580 <cos+0xa0>)
 801e4e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e4ec:	4281      	cmp	r1, r0
 801e4ee:	d806      	bhi.n	801e4fe <cos+0x1e>
 801e4f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e578 <cos+0x98>
 801e4f4:	b005      	add	sp, #20
 801e4f6:	f85d eb04 	ldr.w	lr, [sp], #4
 801e4fa:	f000 ba01 	b.w	801e900 <__kernel_cos>
 801e4fe:	4821      	ldr	r0, [pc, #132]	@ (801e584 <cos+0xa4>)
 801e500:	4281      	cmp	r1, r0
 801e502:	d908      	bls.n	801e516 <cos+0x36>
 801e504:	4610      	mov	r0, r2
 801e506:	4619      	mov	r1, r3
 801e508:	f7e1 fece 	bl	80002a8 <__aeabi_dsub>
 801e50c:	ec41 0b10 	vmov	d0, r0, r1
 801e510:	b005      	add	sp, #20
 801e512:	f85d fb04 	ldr.w	pc, [sp], #4
 801e516:	4668      	mov	r0, sp
 801e518:	f002 fa26 	bl	8020968 <__ieee754_rem_pio2>
 801e51c:	f000 0003 	and.w	r0, r0, #3
 801e520:	2801      	cmp	r0, #1
 801e522:	d00b      	beq.n	801e53c <cos+0x5c>
 801e524:	2802      	cmp	r0, #2
 801e526:	d015      	beq.n	801e554 <cos+0x74>
 801e528:	b9d8      	cbnz	r0, 801e562 <cos+0x82>
 801e52a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e52e:	ed9d 0b00 	vldr	d0, [sp]
 801e532:	f000 f9e5 	bl	801e900 <__kernel_cos>
 801e536:	ec51 0b10 	vmov	r0, r1, d0
 801e53a:	e7e7      	b.n	801e50c <cos+0x2c>
 801e53c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e540:	ed9d 0b00 	vldr	d0, [sp]
 801e544:	f000 faa4 	bl	801ea90 <__kernel_sin>
 801e548:	ec53 2b10 	vmov	r2, r3, d0
 801e54c:	4610      	mov	r0, r2
 801e54e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e552:	e7db      	b.n	801e50c <cos+0x2c>
 801e554:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e558:	ed9d 0b00 	vldr	d0, [sp]
 801e55c:	f000 f9d0 	bl	801e900 <__kernel_cos>
 801e560:	e7f2      	b.n	801e548 <cos+0x68>
 801e562:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e566:	ed9d 0b00 	vldr	d0, [sp]
 801e56a:	2001      	movs	r0, #1
 801e56c:	f000 fa90 	bl	801ea90 <__kernel_sin>
 801e570:	e7e1      	b.n	801e536 <cos+0x56>
 801e572:	bf00      	nop
 801e574:	f3af 8000 	nop.w
	...
 801e580:	3fe921fb 	.word	0x3fe921fb
 801e584:	7fefffff 	.word	0x7fefffff

0801e588 <fabs>:
 801e588:	ec51 0b10 	vmov	r0, r1, d0
 801e58c:	4602      	mov	r2, r0
 801e58e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e592:	ec43 2b10 	vmov	d0, r2, r3
 801e596:	4770      	bx	lr

0801e598 <sin>:
 801e598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e59a:	ec53 2b10 	vmov	r2, r3, d0
 801e59e:	4826      	ldr	r0, [pc, #152]	@ (801e638 <sin+0xa0>)
 801e5a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e5a4:	4281      	cmp	r1, r0
 801e5a6:	d807      	bhi.n	801e5b8 <sin+0x20>
 801e5a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e630 <sin+0x98>
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	b005      	add	sp, #20
 801e5b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e5b4:	f000 ba6c 	b.w	801ea90 <__kernel_sin>
 801e5b8:	4820      	ldr	r0, [pc, #128]	@ (801e63c <sin+0xa4>)
 801e5ba:	4281      	cmp	r1, r0
 801e5bc:	d908      	bls.n	801e5d0 <sin+0x38>
 801e5be:	4610      	mov	r0, r2
 801e5c0:	4619      	mov	r1, r3
 801e5c2:	f7e1 fe71 	bl	80002a8 <__aeabi_dsub>
 801e5c6:	ec41 0b10 	vmov	d0, r0, r1
 801e5ca:	b005      	add	sp, #20
 801e5cc:	f85d fb04 	ldr.w	pc, [sp], #4
 801e5d0:	4668      	mov	r0, sp
 801e5d2:	f002 f9c9 	bl	8020968 <__ieee754_rem_pio2>
 801e5d6:	f000 0003 	and.w	r0, r0, #3
 801e5da:	2801      	cmp	r0, #1
 801e5dc:	d00c      	beq.n	801e5f8 <sin+0x60>
 801e5de:	2802      	cmp	r0, #2
 801e5e0:	d011      	beq.n	801e606 <sin+0x6e>
 801e5e2:	b9e8      	cbnz	r0, 801e620 <sin+0x88>
 801e5e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e5e8:	ed9d 0b00 	vldr	d0, [sp]
 801e5ec:	2001      	movs	r0, #1
 801e5ee:	f000 fa4f 	bl	801ea90 <__kernel_sin>
 801e5f2:	ec51 0b10 	vmov	r0, r1, d0
 801e5f6:	e7e6      	b.n	801e5c6 <sin+0x2e>
 801e5f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e5fc:	ed9d 0b00 	vldr	d0, [sp]
 801e600:	f000 f97e 	bl	801e900 <__kernel_cos>
 801e604:	e7f5      	b.n	801e5f2 <sin+0x5a>
 801e606:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e60a:	ed9d 0b00 	vldr	d0, [sp]
 801e60e:	2001      	movs	r0, #1
 801e610:	f000 fa3e 	bl	801ea90 <__kernel_sin>
 801e614:	ec53 2b10 	vmov	r2, r3, d0
 801e618:	4610      	mov	r0, r2
 801e61a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e61e:	e7d2      	b.n	801e5c6 <sin+0x2e>
 801e620:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e624:	ed9d 0b00 	vldr	d0, [sp]
 801e628:	f000 f96a 	bl	801e900 <__kernel_cos>
 801e62c:	e7f2      	b.n	801e614 <sin+0x7c>
 801e62e:	bf00      	nop
	...
 801e638:	3fe921fb 	.word	0x3fe921fb
 801e63c:	7fefffff 	.word	0x7fefffff

0801e640 <finite>:
 801e640:	b082      	sub	sp, #8
 801e642:	ed8d 0b00 	vstr	d0, [sp]
 801e646:	9801      	ldr	r0, [sp, #4]
 801e648:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801e64c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e650:	0fc0      	lsrs	r0, r0, #31
 801e652:	b002      	add	sp, #8
 801e654:	4770      	bx	lr
	...

0801e658 <__ieee754_sqrt>:
 801e658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e65c:	4a66      	ldr	r2, [pc, #408]	@ (801e7f8 <__ieee754_sqrt+0x1a0>)
 801e65e:	ec55 4b10 	vmov	r4, r5, d0
 801e662:	43aa      	bics	r2, r5
 801e664:	462b      	mov	r3, r5
 801e666:	4621      	mov	r1, r4
 801e668:	d110      	bne.n	801e68c <__ieee754_sqrt+0x34>
 801e66a:	4622      	mov	r2, r4
 801e66c:	4620      	mov	r0, r4
 801e66e:	4629      	mov	r1, r5
 801e670:	f7e1 ffd2 	bl	8000618 <__aeabi_dmul>
 801e674:	4602      	mov	r2, r0
 801e676:	460b      	mov	r3, r1
 801e678:	4620      	mov	r0, r4
 801e67a:	4629      	mov	r1, r5
 801e67c:	f7e1 fe16 	bl	80002ac <__adddf3>
 801e680:	4604      	mov	r4, r0
 801e682:	460d      	mov	r5, r1
 801e684:	ec45 4b10 	vmov	d0, r4, r5
 801e688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e68c:	2d00      	cmp	r5, #0
 801e68e:	dc0e      	bgt.n	801e6ae <__ieee754_sqrt+0x56>
 801e690:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e694:	4322      	orrs	r2, r4
 801e696:	d0f5      	beq.n	801e684 <__ieee754_sqrt+0x2c>
 801e698:	b19d      	cbz	r5, 801e6c2 <__ieee754_sqrt+0x6a>
 801e69a:	4622      	mov	r2, r4
 801e69c:	4620      	mov	r0, r4
 801e69e:	4629      	mov	r1, r5
 801e6a0:	f7e1 fe02 	bl	80002a8 <__aeabi_dsub>
 801e6a4:	4602      	mov	r2, r0
 801e6a6:	460b      	mov	r3, r1
 801e6a8:	f7e2 f8e0 	bl	800086c <__aeabi_ddiv>
 801e6ac:	e7e8      	b.n	801e680 <__ieee754_sqrt+0x28>
 801e6ae:	152a      	asrs	r2, r5, #20
 801e6b0:	d115      	bne.n	801e6de <__ieee754_sqrt+0x86>
 801e6b2:	2000      	movs	r0, #0
 801e6b4:	e009      	b.n	801e6ca <__ieee754_sqrt+0x72>
 801e6b6:	0acb      	lsrs	r3, r1, #11
 801e6b8:	3a15      	subs	r2, #21
 801e6ba:	0549      	lsls	r1, r1, #21
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d0fa      	beq.n	801e6b6 <__ieee754_sqrt+0x5e>
 801e6c0:	e7f7      	b.n	801e6b2 <__ieee754_sqrt+0x5a>
 801e6c2:	462a      	mov	r2, r5
 801e6c4:	e7fa      	b.n	801e6bc <__ieee754_sqrt+0x64>
 801e6c6:	005b      	lsls	r3, r3, #1
 801e6c8:	3001      	adds	r0, #1
 801e6ca:	02dc      	lsls	r4, r3, #11
 801e6cc:	d5fb      	bpl.n	801e6c6 <__ieee754_sqrt+0x6e>
 801e6ce:	1e44      	subs	r4, r0, #1
 801e6d0:	1b12      	subs	r2, r2, r4
 801e6d2:	f1c0 0420 	rsb	r4, r0, #32
 801e6d6:	fa21 f404 	lsr.w	r4, r1, r4
 801e6da:	4323      	orrs	r3, r4
 801e6dc:	4081      	lsls	r1, r0
 801e6de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e6e2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801e6e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e6ea:	07d2      	lsls	r2, r2, #31
 801e6ec:	bf5c      	itt	pl
 801e6ee:	005b      	lslpl	r3, r3, #1
 801e6f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801e6f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e6f8:	bf58      	it	pl
 801e6fa:	0049      	lslpl	r1, r1, #1
 801e6fc:	2600      	movs	r6, #0
 801e6fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801e702:	107f      	asrs	r7, r7, #1
 801e704:	0049      	lsls	r1, r1, #1
 801e706:	2016      	movs	r0, #22
 801e708:	4632      	mov	r2, r6
 801e70a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801e70e:	1915      	adds	r5, r2, r4
 801e710:	429d      	cmp	r5, r3
 801e712:	bfde      	ittt	le
 801e714:	192a      	addle	r2, r5, r4
 801e716:	1b5b      	suble	r3, r3, r5
 801e718:	1936      	addle	r6, r6, r4
 801e71a:	0fcd      	lsrs	r5, r1, #31
 801e71c:	3801      	subs	r0, #1
 801e71e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801e722:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e726:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801e72a:	d1f0      	bne.n	801e70e <__ieee754_sqrt+0xb6>
 801e72c:	4605      	mov	r5, r0
 801e72e:	2420      	movs	r4, #32
 801e730:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801e734:	4293      	cmp	r3, r2
 801e736:	eb0c 0e00 	add.w	lr, ip, r0
 801e73a:	dc02      	bgt.n	801e742 <__ieee754_sqrt+0xea>
 801e73c:	d113      	bne.n	801e766 <__ieee754_sqrt+0x10e>
 801e73e:	458e      	cmp	lr, r1
 801e740:	d811      	bhi.n	801e766 <__ieee754_sqrt+0x10e>
 801e742:	f1be 0f00 	cmp.w	lr, #0
 801e746:	eb0e 000c 	add.w	r0, lr, ip
 801e74a:	da3f      	bge.n	801e7cc <__ieee754_sqrt+0x174>
 801e74c:	2800      	cmp	r0, #0
 801e74e:	db3d      	blt.n	801e7cc <__ieee754_sqrt+0x174>
 801e750:	f102 0801 	add.w	r8, r2, #1
 801e754:	1a9b      	subs	r3, r3, r2
 801e756:	458e      	cmp	lr, r1
 801e758:	bf88      	it	hi
 801e75a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801e75e:	eba1 010e 	sub.w	r1, r1, lr
 801e762:	4465      	add	r5, ip
 801e764:	4642      	mov	r2, r8
 801e766:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801e76a:	3c01      	subs	r4, #1
 801e76c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801e770:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e774:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801e778:	d1dc      	bne.n	801e734 <__ieee754_sqrt+0xdc>
 801e77a:	4319      	orrs	r1, r3
 801e77c:	d01b      	beq.n	801e7b6 <__ieee754_sqrt+0x15e>
 801e77e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801e7fc <__ieee754_sqrt+0x1a4>
 801e782:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 801e800 <__ieee754_sqrt+0x1a8>
 801e786:	e9da 0100 	ldrd	r0, r1, [sl]
 801e78a:	e9db 2300 	ldrd	r2, r3, [fp]
 801e78e:	f7e1 fd8b 	bl	80002a8 <__aeabi_dsub>
 801e792:	e9da 8900 	ldrd	r8, r9, [sl]
 801e796:	4602      	mov	r2, r0
 801e798:	460b      	mov	r3, r1
 801e79a:	4640      	mov	r0, r8
 801e79c:	4649      	mov	r1, r9
 801e79e:	f7e2 f9b7 	bl	8000b10 <__aeabi_dcmple>
 801e7a2:	b140      	cbz	r0, 801e7b6 <__ieee754_sqrt+0x15e>
 801e7a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 801e7a8:	e9da 0100 	ldrd	r0, r1, [sl]
 801e7ac:	e9db 2300 	ldrd	r2, r3, [fp]
 801e7b0:	d10e      	bne.n	801e7d0 <__ieee754_sqrt+0x178>
 801e7b2:	3601      	adds	r6, #1
 801e7b4:	4625      	mov	r5, r4
 801e7b6:	1073      	asrs	r3, r6, #1
 801e7b8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801e7bc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801e7c0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801e7c4:	086b      	lsrs	r3, r5, #1
 801e7c6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801e7ca:	e759      	b.n	801e680 <__ieee754_sqrt+0x28>
 801e7cc:	4690      	mov	r8, r2
 801e7ce:	e7c1      	b.n	801e754 <__ieee754_sqrt+0xfc>
 801e7d0:	f7e1 fd6c 	bl	80002ac <__adddf3>
 801e7d4:	e9da 8900 	ldrd	r8, r9, [sl]
 801e7d8:	4602      	mov	r2, r0
 801e7da:	460b      	mov	r3, r1
 801e7dc:	4640      	mov	r0, r8
 801e7de:	4649      	mov	r1, r9
 801e7e0:	f7e2 f98c 	bl	8000afc <__aeabi_dcmplt>
 801e7e4:	b120      	cbz	r0, 801e7f0 <__ieee754_sqrt+0x198>
 801e7e6:	1cab      	adds	r3, r5, #2
 801e7e8:	bf08      	it	eq
 801e7ea:	3601      	addeq	r6, #1
 801e7ec:	3502      	adds	r5, #2
 801e7ee:	e7e2      	b.n	801e7b6 <__ieee754_sqrt+0x15e>
 801e7f0:	1c6b      	adds	r3, r5, #1
 801e7f2:	f023 0501 	bic.w	r5, r3, #1
 801e7f6:	e7de      	b.n	801e7b6 <__ieee754_sqrt+0x15e>
 801e7f8:	7ff00000 	.word	0x7ff00000
 801e7fc:	08021fc8 	.word	0x08021fc8
 801e800:	08021fc0 	.word	0x08021fc0
 801e804:	00000000 	.word	0x00000000

0801e808 <floor>:
 801e808:	ec51 0b10 	vmov	r0, r1, d0
 801e80c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e814:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e818:	2e13      	cmp	r6, #19
 801e81a:	460c      	mov	r4, r1
 801e81c:	4605      	mov	r5, r0
 801e81e:	4680      	mov	r8, r0
 801e820:	dc34      	bgt.n	801e88c <floor+0x84>
 801e822:	2e00      	cmp	r6, #0
 801e824:	da17      	bge.n	801e856 <floor+0x4e>
 801e826:	a332      	add	r3, pc, #200	@ (adr r3, 801e8f0 <floor+0xe8>)
 801e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e82c:	f7e1 fd3e 	bl	80002ac <__adddf3>
 801e830:	2200      	movs	r2, #0
 801e832:	2300      	movs	r3, #0
 801e834:	f7e2 f980 	bl	8000b38 <__aeabi_dcmpgt>
 801e838:	b150      	cbz	r0, 801e850 <floor+0x48>
 801e83a:	2c00      	cmp	r4, #0
 801e83c:	da55      	bge.n	801e8ea <floor+0xe2>
 801e83e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e842:	432c      	orrs	r4, r5
 801e844:	2500      	movs	r5, #0
 801e846:	42ac      	cmp	r4, r5
 801e848:	4c2b      	ldr	r4, [pc, #172]	@ (801e8f8 <floor+0xf0>)
 801e84a:	bf08      	it	eq
 801e84c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e850:	4621      	mov	r1, r4
 801e852:	4628      	mov	r0, r5
 801e854:	e023      	b.n	801e89e <floor+0x96>
 801e856:	4f29      	ldr	r7, [pc, #164]	@ (801e8fc <floor+0xf4>)
 801e858:	4137      	asrs	r7, r6
 801e85a:	ea01 0307 	and.w	r3, r1, r7
 801e85e:	4303      	orrs	r3, r0
 801e860:	d01d      	beq.n	801e89e <floor+0x96>
 801e862:	a323      	add	r3, pc, #140	@ (adr r3, 801e8f0 <floor+0xe8>)
 801e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e868:	f7e1 fd20 	bl	80002ac <__adddf3>
 801e86c:	2200      	movs	r2, #0
 801e86e:	2300      	movs	r3, #0
 801e870:	f7e2 f962 	bl	8000b38 <__aeabi_dcmpgt>
 801e874:	2800      	cmp	r0, #0
 801e876:	d0eb      	beq.n	801e850 <floor+0x48>
 801e878:	2c00      	cmp	r4, #0
 801e87a:	bfbe      	ittt	lt
 801e87c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e880:	4133      	asrlt	r3, r6
 801e882:	18e4      	addlt	r4, r4, r3
 801e884:	ea24 0407 	bic.w	r4, r4, r7
 801e888:	2500      	movs	r5, #0
 801e88a:	e7e1      	b.n	801e850 <floor+0x48>
 801e88c:	2e33      	cmp	r6, #51	@ 0x33
 801e88e:	dd0a      	ble.n	801e8a6 <floor+0x9e>
 801e890:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e894:	d103      	bne.n	801e89e <floor+0x96>
 801e896:	4602      	mov	r2, r0
 801e898:	460b      	mov	r3, r1
 801e89a:	f7e1 fd07 	bl	80002ac <__adddf3>
 801e89e:	ec41 0b10 	vmov	d0, r0, r1
 801e8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e8aa:	f04f 37ff 	mov.w	r7, #4294967295
 801e8ae:	40df      	lsrs	r7, r3
 801e8b0:	4207      	tst	r7, r0
 801e8b2:	d0f4      	beq.n	801e89e <floor+0x96>
 801e8b4:	a30e      	add	r3, pc, #56	@ (adr r3, 801e8f0 <floor+0xe8>)
 801e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ba:	f7e1 fcf7 	bl	80002ac <__adddf3>
 801e8be:	2200      	movs	r2, #0
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	f7e2 f939 	bl	8000b38 <__aeabi_dcmpgt>
 801e8c6:	2800      	cmp	r0, #0
 801e8c8:	d0c2      	beq.n	801e850 <floor+0x48>
 801e8ca:	2c00      	cmp	r4, #0
 801e8cc:	da0a      	bge.n	801e8e4 <floor+0xdc>
 801e8ce:	2e14      	cmp	r6, #20
 801e8d0:	d101      	bne.n	801e8d6 <floor+0xce>
 801e8d2:	3401      	adds	r4, #1
 801e8d4:	e006      	b.n	801e8e4 <floor+0xdc>
 801e8d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e8da:	2301      	movs	r3, #1
 801e8dc:	40b3      	lsls	r3, r6
 801e8de:	441d      	add	r5, r3
 801e8e0:	4545      	cmp	r5, r8
 801e8e2:	d3f6      	bcc.n	801e8d2 <floor+0xca>
 801e8e4:	ea25 0507 	bic.w	r5, r5, r7
 801e8e8:	e7b2      	b.n	801e850 <floor+0x48>
 801e8ea:	2500      	movs	r5, #0
 801e8ec:	462c      	mov	r4, r5
 801e8ee:	e7af      	b.n	801e850 <floor+0x48>
 801e8f0:	8800759c 	.word	0x8800759c
 801e8f4:	7e37e43c 	.word	0x7e37e43c
 801e8f8:	bff00000 	.word	0xbff00000
 801e8fc:	000fffff 	.word	0x000fffff

0801e900 <__kernel_cos>:
 801e900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e904:	ec57 6b10 	vmov	r6, r7, d0
 801e908:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e90c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e910:	ed8d 1b00 	vstr	d1, [sp]
 801e914:	d206      	bcs.n	801e924 <__kernel_cos+0x24>
 801e916:	4630      	mov	r0, r6
 801e918:	4639      	mov	r1, r7
 801e91a:	f7e2 f92d 	bl	8000b78 <__aeabi_d2iz>
 801e91e:	2800      	cmp	r0, #0
 801e920:	f000 8088 	beq.w	801ea34 <__kernel_cos+0x134>
 801e924:	4632      	mov	r2, r6
 801e926:	463b      	mov	r3, r7
 801e928:	4630      	mov	r0, r6
 801e92a:	4639      	mov	r1, r7
 801e92c:	f7e1 fe74 	bl	8000618 <__aeabi_dmul>
 801e930:	4b51      	ldr	r3, [pc, #324]	@ (801ea78 <__kernel_cos+0x178>)
 801e932:	2200      	movs	r2, #0
 801e934:	4604      	mov	r4, r0
 801e936:	460d      	mov	r5, r1
 801e938:	f7e1 fe6e 	bl	8000618 <__aeabi_dmul>
 801e93c:	a340      	add	r3, pc, #256	@ (adr r3, 801ea40 <__kernel_cos+0x140>)
 801e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e942:	4682      	mov	sl, r0
 801e944:	468b      	mov	fp, r1
 801e946:	4620      	mov	r0, r4
 801e948:	4629      	mov	r1, r5
 801e94a:	f7e1 fe65 	bl	8000618 <__aeabi_dmul>
 801e94e:	a33e      	add	r3, pc, #248	@ (adr r3, 801ea48 <__kernel_cos+0x148>)
 801e950:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e954:	f7e1 fcaa 	bl	80002ac <__adddf3>
 801e958:	4622      	mov	r2, r4
 801e95a:	462b      	mov	r3, r5
 801e95c:	f7e1 fe5c 	bl	8000618 <__aeabi_dmul>
 801e960:	a33b      	add	r3, pc, #236	@ (adr r3, 801ea50 <__kernel_cos+0x150>)
 801e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e966:	f7e1 fc9f 	bl	80002a8 <__aeabi_dsub>
 801e96a:	4622      	mov	r2, r4
 801e96c:	462b      	mov	r3, r5
 801e96e:	f7e1 fe53 	bl	8000618 <__aeabi_dmul>
 801e972:	a339      	add	r3, pc, #228	@ (adr r3, 801ea58 <__kernel_cos+0x158>)
 801e974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e978:	f7e1 fc98 	bl	80002ac <__adddf3>
 801e97c:	4622      	mov	r2, r4
 801e97e:	462b      	mov	r3, r5
 801e980:	f7e1 fe4a 	bl	8000618 <__aeabi_dmul>
 801e984:	a336      	add	r3, pc, #216	@ (adr r3, 801ea60 <__kernel_cos+0x160>)
 801e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e98a:	f7e1 fc8d 	bl	80002a8 <__aeabi_dsub>
 801e98e:	4622      	mov	r2, r4
 801e990:	462b      	mov	r3, r5
 801e992:	f7e1 fe41 	bl	8000618 <__aeabi_dmul>
 801e996:	a334      	add	r3, pc, #208	@ (adr r3, 801ea68 <__kernel_cos+0x168>)
 801e998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e99c:	f7e1 fc86 	bl	80002ac <__adddf3>
 801e9a0:	4622      	mov	r2, r4
 801e9a2:	462b      	mov	r3, r5
 801e9a4:	f7e1 fe38 	bl	8000618 <__aeabi_dmul>
 801e9a8:	4622      	mov	r2, r4
 801e9aa:	462b      	mov	r3, r5
 801e9ac:	f7e1 fe34 	bl	8000618 <__aeabi_dmul>
 801e9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e9b4:	4604      	mov	r4, r0
 801e9b6:	460d      	mov	r5, r1
 801e9b8:	4630      	mov	r0, r6
 801e9ba:	4639      	mov	r1, r7
 801e9bc:	f7e1 fe2c 	bl	8000618 <__aeabi_dmul>
 801e9c0:	460b      	mov	r3, r1
 801e9c2:	4602      	mov	r2, r0
 801e9c4:	4629      	mov	r1, r5
 801e9c6:	4620      	mov	r0, r4
 801e9c8:	f7e1 fc6e 	bl	80002a8 <__aeabi_dsub>
 801e9cc:	4b2b      	ldr	r3, [pc, #172]	@ (801ea7c <__kernel_cos+0x17c>)
 801e9ce:	4598      	cmp	r8, r3
 801e9d0:	4606      	mov	r6, r0
 801e9d2:	460f      	mov	r7, r1
 801e9d4:	d810      	bhi.n	801e9f8 <__kernel_cos+0xf8>
 801e9d6:	4602      	mov	r2, r0
 801e9d8:	460b      	mov	r3, r1
 801e9da:	4650      	mov	r0, sl
 801e9dc:	4659      	mov	r1, fp
 801e9de:	f7e1 fc63 	bl	80002a8 <__aeabi_dsub>
 801e9e2:	460b      	mov	r3, r1
 801e9e4:	4926      	ldr	r1, [pc, #152]	@ (801ea80 <__kernel_cos+0x180>)
 801e9e6:	4602      	mov	r2, r0
 801e9e8:	2000      	movs	r0, #0
 801e9ea:	f7e1 fc5d 	bl	80002a8 <__aeabi_dsub>
 801e9ee:	ec41 0b10 	vmov	d0, r0, r1
 801e9f2:	b003      	add	sp, #12
 801e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9f8:	4b22      	ldr	r3, [pc, #136]	@ (801ea84 <__kernel_cos+0x184>)
 801e9fa:	4921      	ldr	r1, [pc, #132]	@ (801ea80 <__kernel_cos+0x180>)
 801e9fc:	4598      	cmp	r8, r3
 801e9fe:	bf8c      	ite	hi
 801ea00:	4d21      	ldrhi	r5, [pc, #132]	@ (801ea88 <__kernel_cos+0x188>)
 801ea02:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801ea06:	2400      	movs	r4, #0
 801ea08:	4622      	mov	r2, r4
 801ea0a:	462b      	mov	r3, r5
 801ea0c:	2000      	movs	r0, #0
 801ea0e:	f7e1 fc4b 	bl	80002a8 <__aeabi_dsub>
 801ea12:	4622      	mov	r2, r4
 801ea14:	4680      	mov	r8, r0
 801ea16:	4689      	mov	r9, r1
 801ea18:	462b      	mov	r3, r5
 801ea1a:	4650      	mov	r0, sl
 801ea1c:	4659      	mov	r1, fp
 801ea1e:	f7e1 fc43 	bl	80002a8 <__aeabi_dsub>
 801ea22:	4632      	mov	r2, r6
 801ea24:	463b      	mov	r3, r7
 801ea26:	f7e1 fc3f 	bl	80002a8 <__aeabi_dsub>
 801ea2a:	4602      	mov	r2, r0
 801ea2c:	460b      	mov	r3, r1
 801ea2e:	4640      	mov	r0, r8
 801ea30:	4649      	mov	r1, r9
 801ea32:	e7da      	b.n	801e9ea <__kernel_cos+0xea>
 801ea34:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801ea70 <__kernel_cos+0x170>
 801ea38:	e7db      	b.n	801e9f2 <__kernel_cos+0xf2>
 801ea3a:	bf00      	nop
 801ea3c:	f3af 8000 	nop.w
 801ea40:	be8838d4 	.word	0xbe8838d4
 801ea44:	bda8fae9 	.word	0xbda8fae9
 801ea48:	bdb4b1c4 	.word	0xbdb4b1c4
 801ea4c:	3e21ee9e 	.word	0x3e21ee9e
 801ea50:	809c52ad 	.word	0x809c52ad
 801ea54:	3e927e4f 	.word	0x3e927e4f
 801ea58:	19cb1590 	.word	0x19cb1590
 801ea5c:	3efa01a0 	.word	0x3efa01a0
 801ea60:	16c15177 	.word	0x16c15177
 801ea64:	3f56c16c 	.word	0x3f56c16c
 801ea68:	5555554c 	.word	0x5555554c
 801ea6c:	3fa55555 	.word	0x3fa55555
 801ea70:	00000000 	.word	0x00000000
 801ea74:	3ff00000 	.word	0x3ff00000
 801ea78:	3fe00000 	.word	0x3fe00000
 801ea7c:	3fd33332 	.word	0x3fd33332
 801ea80:	3ff00000 	.word	0x3ff00000
 801ea84:	3fe90000 	.word	0x3fe90000
 801ea88:	3fd20000 	.word	0x3fd20000
 801ea8c:	00000000 	.word	0x00000000

0801ea90 <__kernel_sin>:
 801ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea94:	ec55 4b10 	vmov	r4, r5, d0
 801ea98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801ea9c:	b085      	sub	sp, #20
 801ea9e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801eaa2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801eaa6:	4680      	mov	r8, r0
 801eaa8:	d205      	bcs.n	801eab6 <__kernel_sin+0x26>
 801eaaa:	4620      	mov	r0, r4
 801eaac:	4629      	mov	r1, r5
 801eaae:	f7e2 f863 	bl	8000b78 <__aeabi_d2iz>
 801eab2:	2800      	cmp	r0, #0
 801eab4:	d052      	beq.n	801eb5c <__kernel_sin+0xcc>
 801eab6:	4622      	mov	r2, r4
 801eab8:	462b      	mov	r3, r5
 801eaba:	4620      	mov	r0, r4
 801eabc:	4629      	mov	r1, r5
 801eabe:	f7e1 fdab 	bl	8000618 <__aeabi_dmul>
 801eac2:	4682      	mov	sl, r0
 801eac4:	468b      	mov	fp, r1
 801eac6:	4602      	mov	r2, r0
 801eac8:	460b      	mov	r3, r1
 801eaca:	4620      	mov	r0, r4
 801eacc:	4629      	mov	r1, r5
 801eace:	f7e1 fda3 	bl	8000618 <__aeabi_dmul>
 801ead2:	a342      	add	r3, pc, #264	@ (adr r3, 801ebdc <__kernel_sin+0x14c>)
 801ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ead8:	e9cd 0100 	strd	r0, r1, [sp]
 801eadc:	4650      	mov	r0, sl
 801eade:	4659      	mov	r1, fp
 801eae0:	f7e1 fd9a 	bl	8000618 <__aeabi_dmul>
 801eae4:	a33f      	add	r3, pc, #252	@ (adr r3, 801ebe4 <__kernel_sin+0x154>)
 801eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaea:	f7e1 fbdd 	bl	80002a8 <__aeabi_dsub>
 801eaee:	4652      	mov	r2, sl
 801eaf0:	465b      	mov	r3, fp
 801eaf2:	f7e1 fd91 	bl	8000618 <__aeabi_dmul>
 801eaf6:	a33d      	add	r3, pc, #244	@ (adr r3, 801ebec <__kernel_sin+0x15c>)
 801eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eafc:	f7e1 fbd6 	bl	80002ac <__adddf3>
 801eb00:	4652      	mov	r2, sl
 801eb02:	465b      	mov	r3, fp
 801eb04:	f7e1 fd88 	bl	8000618 <__aeabi_dmul>
 801eb08:	a33a      	add	r3, pc, #232	@ (adr r3, 801ebf4 <__kernel_sin+0x164>)
 801eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb0e:	f7e1 fbcb 	bl	80002a8 <__aeabi_dsub>
 801eb12:	4652      	mov	r2, sl
 801eb14:	465b      	mov	r3, fp
 801eb16:	f7e1 fd7f 	bl	8000618 <__aeabi_dmul>
 801eb1a:	a338      	add	r3, pc, #224	@ (adr r3, 801ebfc <__kernel_sin+0x16c>)
 801eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb20:	f7e1 fbc4 	bl	80002ac <__adddf3>
 801eb24:	4606      	mov	r6, r0
 801eb26:	460f      	mov	r7, r1
 801eb28:	f1b8 0f00 	cmp.w	r8, #0
 801eb2c:	d11b      	bne.n	801eb66 <__kernel_sin+0xd6>
 801eb2e:	4602      	mov	r2, r0
 801eb30:	460b      	mov	r3, r1
 801eb32:	4650      	mov	r0, sl
 801eb34:	4659      	mov	r1, fp
 801eb36:	f7e1 fd6f 	bl	8000618 <__aeabi_dmul>
 801eb3a:	a325      	add	r3, pc, #148	@ (adr r3, 801ebd0 <__kernel_sin+0x140>)
 801eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb40:	f7e1 fbb2 	bl	80002a8 <__aeabi_dsub>
 801eb44:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eb48:	f7e1 fd66 	bl	8000618 <__aeabi_dmul>
 801eb4c:	4602      	mov	r2, r0
 801eb4e:	460b      	mov	r3, r1
 801eb50:	4620      	mov	r0, r4
 801eb52:	4629      	mov	r1, r5
 801eb54:	f7e1 fbaa 	bl	80002ac <__adddf3>
 801eb58:	4604      	mov	r4, r0
 801eb5a:	460d      	mov	r5, r1
 801eb5c:	ec45 4b10 	vmov	d0, r4, r5
 801eb60:	b005      	add	sp, #20
 801eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb6a:	4b1b      	ldr	r3, [pc, #108]	@ (801ebd8 <__kernel_sin+0x148>)
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	f7e1 fd53 	bl	8000618 <__aeabi_dmul>
 801eb72:	4632      	mov	r2, r6
 801eb74:	4680      	mov	r8, r0
 801eb76:	4689      	mov	r9, r1
 801eb78:	463b      	mov	r3, r7
 801eb7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801eb7e:	f7e1 fd4b 	bl	8000618 <__aeabi_dmul>
 801eb82:	4602      	mov	r2, r0
 801eb84:	460b      	mov	r3, r1
 801eb86:	4640      	mov	r0, r8
 801eb88:	4649      	mov	r1, r9
 801eb8a:	f7e1 fb8d 	bl	80002a8 <__aeabi_dsub>
 801eb8e:	4652      	mov	r2, sl
 801eb90:	465b      	mov	r3, fp
 801eb92:	f7e1 fd41 	bl	8000618 <__aeabi_dmul>
 801eb96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eb9a:	f7e1 fb85 	bl	80002a8 <__aeabi_dsub>
 801eb9e:	a30c      	add	r3, pc, #48	@ (adr r3, 801ebd0 <__kernel_sin+0x140>)
 801eba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba4:	4606      	mov	r6, r0
 801eba6:	460f      	mov	r7, r1
 801eba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ebac:	f7e1 fd34 	bl	8000618 <__aeabi_dmul>
 801ebb0:	4602      	mov	r2, r0
 801ebb2:	460b      	mov	r3, r1
 801ebb4:	4630      	mov	r0, r6
 801ebb6:	4639      	mov	r1, r7
 801ebb8:	f7e1 fb78 	bl	80002ac <__adddf3>
 801ebbc:	4602      	mov	r2, r0
 801ebbe:	460b      	mov	r3, r1
 801ebc0:	4620      	mov	r0, r4
 801ebc2:	4629      	mov	r1, r5
 801ebc4:	f7e1 fb70 	bl	80002a8 <__aeabi_dsub>
 801ebc8:	e7c6      	b.n	801eb58 <__kernel_sin+0xc8>
 801ebca:	bf00      	nop
 801ebcc:	f3af 8000 	nop.w
 801ebd0:	55555549 	.word	0x55555549
 801ebd4:	3fc55555 	.word	0x3fc55555
 801ebd8:	3fe00000 	.word	0x3fe00000
 801ebdc:	5acfd57c 	.word	0x5acfd57c
 801ebe0:	3de5d93a 	.word	0x3de5d93a
 801ebe4:	8a2b9ceb 	.word	0x8a2b9ceb
 801ebe8:	3e5ae5e6 	.word	0x3e5ae5e6
 801ebec:	57b1fe7d 	.word	0x57b1fe7d
 801ebf0:	3ec71de3 	.word	0x3ec71de3
 801ebf4:	19c161d5 	.word	0x19c161d5
 801ebf8:	3f2a01a0 	.word	0x3f2a01a0
 801ebfc:	1110f8a6 	.word	0x1110f8a6
 801ec00:	3f811111 	.word	0x3f811111
 801ec04:	00000000 	.word	0x00000000

0801ec08 <__ieee754_acos>:
 801ec08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec0c:	ec55 4b10 	vmov	r4, r5, d0
 801ec10:	49b7      	ldr	r1, [pc, #732]	@ (801eef0 <__ieee754_acos+0x2e8>)
 801ec12:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801ec16:	428b      	cmp	r3, r1
 801ec18:	d919      	bls.n	801ec4e <__ieee754_acos+0x46>
 801ec1a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801ec1e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801ec22:	4323      	orrs	r3, r4
 801ec24:	d106      	bne.n	801ec34 <__ieee754_acos+0x2c>
 801ec26:	2d00      	cmp	r5, #0
 801ec28:	f340 8210 	ble.w	801f04c <__ieee754_acos+0x444>
 801ec2c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801ee80 <__ieee754_acos+0x278>
 801ec30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec34:	4622      	mov	r2, r4
 801ec36:	462b      	mov	r3, r5
 801ec38:	4620      	mov	r0, r4
 801ec3a:	4629      	mov	r1, r5
 801ec3c:	f7e1 fb34 	bl	80002a8 <__aeabi_dsub>
 801ec40:	4602      	mov	r2, r0
 801ec42:	460b      	mov	r3, r1
 801ec44:	f7e1 fe12 	bl	800086c <__aeabi_ddiv>
 801ec48:	ec41 0b10 	vmov	d0, r0, r1
 801ec4c:	e7f0      	b.n	801ec30 <__ieee754_acos+0x28>
 801ec4e:	49a9      	ldr	r1, [pc, #676]	@ (801eef4 <__ieee754_acos+0x2ec>)
 801ec50:	428b      	cmp	r3, r1
 801ec52:	f200 8085 	bhi.w	801ed60 <__ieee754_acos+0x158>
 801ec56:	4aa8      	ldr	r2, [pc, #672]	@ (801eef8 <__ieee754_acos+0x2f0>)
 801ec58:	4293      	cmp	r3, r2
 801ec5a:	f240 81fa 	bls.w	801f052 <__ieee754_acos+0x44a>
 801ec5e:	4622      	mov	r2, r4
 801ec60:	462b      	mov	r3, r5
 801ec62:	4620      	mov	r0, r4
 801ec64:	4629      	mov	r1, r5
 801ec66:	f7e1 fcd7 	bl	8000618 <__aeabi_dmul>
 801ec6a:	a387      	add	r3, pc, #540	@ (adr r3, 801ee88 <__ieee754_acos+0x280>)
 801ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec70:	4606      	mov	r6, r0
 801ec72:	460f      	mov	r7, r1
 801ec74:	f7e1 fcd0 	bl	8000618 <__aeabi_dmul>
 801ec78:	a385      	add	r3, pc, #532	@ (adr r3, 801ee90 <__ieee754_acos+0x288>)
 801ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec7e:	f7e1 fb15 	bl	80002ac <__adddf3>
 801ec82:	4632      	mov	r2, r6
 801ec84:	463b      	mov	r3, r7
 801ec86:	f7e1 fcc7 	bl	8000618 <__aeabi_dmul>
 801ec8a:	a383      	add	r3, pc, #524	@ (adr r3, 801ee98 <__ieee754_acos+0x290>)
 801ec8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec90:	f7e1 fb0a 	bl	80002a8 <__aeabi_dsub>
 801ec94:	4632      	mov	r2, r6
 801ec96:	463b      	mov	r3, r7
 801ec98:	f7e1 fcbe 	bl	8000618 <__aeabi_dmul>
 801ec9c:	a380      	add	r3, pc, #512	@ (adr r3, 801eea0 <__ieee754_acos+0x298>)
 801ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eca2:	f7e1 fb03 	bl	80002ac <__adddf3>
 801eca6:	4632      	mov	r2, r6
 801eca8:	463b      	mov	r3, r7
 801ecaa:	f7e1 fcb5 	bl	8000618 <__aeabi_dmul>
 801ecae:	a37e      	add	r3, pc, #504	@ (adr r3, 801eea8 <__ieee754_acos+0x2a0>)
 801ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecb4:	f7e1 faf8 	bl	80002a8 <__aeabi_dsub>
 801ecb8:	4632      	mov	r2, r6
 801ecba:	463b      	mov	r3, r7
 801ecbc:	f7e1 fcac 	bl	8000618 <__aeabi_dmul>
 801ecc0:	a37b      	add	r3, pc, #492	@ (adr r3, 801eeb0 <__ieee754_acos+0x2a8>)
 801ecc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecc6:	f7e1 faf1 	bl	80002ac <__adddf3>
 801ecca:	4632      	mov	r2, r6
 801eccc:	463b      	mov	r3, r7
 801ecce:	f7e1 fca3 	bl	8000618 <__aeabi_dmul>
 801ecd2:	a379      	add	r3, pc, #484	@ (adr r3, 801eeb8 <__ieee754_acos+0x2b0>)
 801ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecd8:	4680      	mov	r8, r0
 801ecda:	4689      	mov	r9, r1
 801ecdc:	4630      	mov	r0, r6
 801ecde:	4639      	mov	r1, r7
 801ece0:	f7e1 fc9a 	bl	8000618 <__aeabi_dmul>
 801ece4:	a376      	add	r3, pc, #472	@ (adr r3, 801eec0 <__ieee754_acos+0x2b8>)
 801ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecea:	f7e1 fadd 	bl	80002a8 <__aeabi_dsub>
 801ecee:	4632      	mov	r2, r6
 801ecf0:	463b      	mov	r3, r7
 801ecf2:	f7e1 fc91 	bl	8000618 <__aeabi_dmul>
 801ecf6:	a374      	add	r3, pc, #464	@ (adr r3, 801eec8 <__ieee754_acos+0x2c0>)
 801ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecfc:	f7e1 fad6 	bl	80002ac <__adddf3>
 801ed00:	4632      	mov	r2, r6
 801ed02:	463b      	mov	r3, r7
 801ed04:	f7e1 fc88 	bl	8000618 <__aeabi_dmul>
 801ed08:	a371      	add	r3, pc, #452	@ (adr r3, 801eed0 <__ieee754_acos+0x2c8>)
 801ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed0e:	f7e1 facb 	bl	80002a8 <__aeabi_dsub>
 801ed12:	4632      	mov	r2, r6
 801ed14:	463b      	mov	r3, r7
 801ed16:	f7e1 fc7f 	bl	8000618 <__aeabi_dmul>
 801ed1a:	4b78      	ldr	r3, [pc, #480]	@ (801eefc <__ieee754_acos+0x2f4>)
 801ed1c:	2200      	movs	r2, #0
 801ed1e:	f7e1 fac5 	bl	80002ac <__adddf3>
 801ed22:	4602      	mov	r2, r0
 801ed24:	460b      	mov	r3, r1
 801ed26:	4640      	mov	r0, r8
 801ed28:	4649      	mov	r1, r9
 801ed2a:	f7e1 fd9f 	bl	800086c <__aeabi_ddiv>
 801ed2e:	4622      	mov	r2, r4
 801ed30:	462b      	mov	r3, r5
 801ed32:	f7e1 fc71 	bl	8000618 <__aeabi_dmul>
 801ed36:	4602      	mov	r2, r0
 801ed38:	460b      	mov	r3, r1
 801ed3a:	a167      	add	r1, pc, #412	@ (adr r1, 801eed8 <__ieee754_acos+0x2d0>)
 801ed3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed40:	f7e1 fab2 	bl	80002a8 <__aeabi_dsub>
 801ed44:	4602      	mov	r2, r0
 801ed46:	460b      	mov	r3, r1
 801ed48:	4620      	mov	r0, r4
 801ed4a:	4629      	mov	r1, r5
 801ed4c:	f7e1 faac 	bl	80002a8 <__aeabi_dsub>
 801ed50:	4602      	mov	r2, r0
 801ed52:	460b      	mov	r3, r1
 801ed54:	a162      	add	r1, pc, #392	@ (adr r1, 801eee0 <__ieee754_acos+0x2d8>)
 801ed56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed5a:	f7e1 faa5 	bl	80002a8 <__aeabi_dsub>
 801ed5e:	e773      	b.n	801ec48 <__ieee754_acos+0x40>
 801ed60:	2d00      	cmp	r5, #0
 801ed62:	f280 80cf 	bge.w	801ef04 <__ieee754_acos+0x2fc>
 801ed66:	4b65      	ldr	r3, [pc, #404]	@ (801eefc <__ieee754_acos+0x2f4>)
 801ed68:	2200      	movs	r2, #0
 801ed6a:	4620      	mov	r0, r4
 801ed6c:	4629      	mov	r1, r5
 801ed6e:	f7e1 fa9d 	bl	80002ac <__adddf3>
 801ed72:	4b63      	ldr	r3, [pc, #396]	@ (801ef00 <__ieee754_acos+0x2f8>)
 801ed74:	2200      	movs	r2, #0
 801ed76:	f7e1 fc4f 	bl	8000618 <__aeabi_dmul>
 801ed7a:	a343      	add	r3, pc, #268	@ (adr r3, 801ee88 <__ieee754_acos+0x280>)
 801ed7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed80:	4604      	mov	r4, r0
 801ed82:	460d      	mov	r5, r1
 801ed84:	f7e1 fc48 	bl	8000618 <__aeabi_dmul>
 801ed88:	a341      	add	r3, pc, #260	@ (adr r3, 801ee90 <__ieee754_acos+0x288>)
 801ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed8e:	f7e1 fa8d 	bl	80002ac <__adddf3>
 801ed92:	4622      	mov	r2, r4
 801ed94:	462b      	mov	r3, r5
 801ed96:	f7e1 fc3f 	bl	8000618 <__aeabi_dmul>
 801ed9a:	a33f      	add	r3, pc, #252	@ (adr r3, 801ee98 <__ieee754_acos+0x290>)
 801ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eda0:	f7e1 fa82 	bl	80002a8 <__aeabi_dsub>
 801eda4:	4622      	mov	r2, r4
 801eda6:	462b      	mov	r3, r5
 801eda8:	f7e1 fc36 	bl	8000618 <__aeabi_dmul>
 801edac:	a33c      	add	r3, pc, #240	@ (adr r3, 801eea0 <__ieee754_acos+0x298>)
 801edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edb2:	f7e1 fa7b 	bl	80002ac <__adddf3>
 801edb6:	4622      	mov	r2, r4
 801edb8:	462b      	mov	r3, r5
 801edba:	f7e1 fc2d 	bl	8000618 <__aeabi_dmul>
 801edbe:	a33a      	add	r3, pc, #232	@ (adr r3, 801eea8 <__ieee754_acos+0x2a0>)
 801edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edc4:	f7e1 fa70 	bl	80002a8 <__aeabi_dsub>
 801edc8:	4622      	mov	r2, r4
 801edca:	462b      	mov	r3, r5
 801edcc:	f7e1 fc24 	bl	8000618 <__aeabi_dmul>
 801edd0:	a337      	add	r3, pc, #220	@ (adr r3, 801eeb0 <__ieee754_acos+0x2a8>)
 801edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edd6:	f7e1 fa69 	bl	80002ac <__adddf3>
 801edda:	4622      	mov	r2, r4
 801eddc:	462b      	mov	r3, r5
 801edde:	f7e1 fc1b 	bl	8000618 <__aeabi_dmul>
 801ede2:	a335      	add	r3, pc, #212	@ (adr r3, 801eeb8 <__ieee754_acos+0x2b0>)
 801ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ede8:	4606      	mov	r6, r0
 801edea:	460f      	mov	r7, r1
 801edec:	4620      	mov	r0, r4
 801edee:	4629      	mov	r1, r5
 801edf0:	f7e1 fc12 	bl	8000618 <__aeabi_dmul>
 801edf4:	a332      	add	r3, pc, #200	@ (adr r3, 801eec0 <__ieee754_acos+0x2b8>)
 801edf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edfa:	f7e1 fa55 	bl	80002a8 <__aeabi_dsub>
 801edfe:	4622      	mov	r2, r4
 801ee00:	462b      	mov	r3, r5
 801ee02:	f7e1 fc09 	bl	8000618 <__aeabi_dmul>
 801ee06:	a330      	add	r3, pc, #192	@ (adr r3, 801eec8 <__ieee754_acos+0x2c0>)
 801ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee0c:	f7e1 fa4e 	bl	80002ac <__adddf3>
 801ee10:	4622      	mov	r2, r4
 801ee12:	462b      	mov	r3, r5
 801ee14:	f7e1 fc00 	bl	8000618 <__aeabi_dmul>
 801ee18:	a32d      	add	r3, pc, #180	@ (adr r3, 801eed0 <__ieee754_acos+0x2c8>)
 801ee1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee1e:	f7e1 fa43 	bl	80002a8 <__aeabi_dsub>
 801ee22:	4622      	mov	r2, r4
 801ee24:	462b      	mov	r3, r5
 801ee26:	f7e1 fbf7 	bl	8000618 <__aeabi_dmul>
 801ee2a:	4b34      	ldr	r3, [pc, #208]	@ (801eefc <__ieee754_acos+0x2f4>)
 801ee2c:	2200      	movs	r2, #0
 801ee2e:	f7e1 fa3d 	bl	80002ac <__adddf3>
 801ee32:	ec45 4b10 	vmov	d0, r4, r5
 801ee36:	4680      	mov	r8, r0
 801ee38:	4689      	mov	r9, r1
 801ee3a:	f7ff fc0d 	bl	801e658 <__ieee754_sqrt>
 801ee3e:	ec55 4b10 	vmov	r4, r5, d0
 801ee42:	4642      	mov	r2, r8
 801ee44:	464b      	mov	r3, r9
 801ee46:	4630      	mov	r0, r6
 801ee48:	4639      	mov	r1, r7
 801ee4a:	f7e1 fd0f 	bl	800086c <__aeabi_ddiv>
 801ee4e:	4622      	mov	r2, r4
 801ee50:	462b      	mov	r3, r5
 801ee52:	f7e1 fbe1 	bl	8000618 <__aeabi_dmul>
 801ee56:	a320      	add	r3, pc, #128	@ (adr r3, 801eed8 <__ieee754_acos+0x2d0>)
 801ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee5c:	f7e1 fa24 	bl	80002a8 <__aeabi_dsub>
 801ee60:	4622      	mov	r2, r4
 801ee62:	462b      	mov	r3, r5
 801ee64:	f7e1 fa22 	bl	80002ac <__adddf3>
 801ee68:	4602      	mov	r2, r0
 801ee6a:	460b      	mov	r3, r1
 801ee6c:	f7e1 fa1e 	bl	80002ac <__adddf3>
 801ee70:	4602      	mov	r2, r0
 801ee72:	460b      	mov	r3, r1
 801ee74:	a11c      	add	r1, pc, #112	@ (adr r1, 801eee8 <__ieee754_acos+0x2e0>)
 801ee76:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee7a:	e76e      	b.n	801ed5a <__ieee754_acos+0x152>
 801ee7c:	f3af 8000 	nop.w
	...
 801ee88:	0dfdf709 	.word	0x0dfdf709
 801ee8c:	3f023de1 	.word	0x3f023de1
 801ee90:	7501b288 	.word	0x7501b288
 801ee94:	3f49efe0 	.word	0x3f49efe0
 801ee98:	b5688f3b 	.word	0xb5688f3b
 801ee9c:	3fa48228 	.word	0x3fa48228
 801eea0:	0e884455 	.word	0x0e884455
 801eea4:	3fc9c155 	.word	0x3fc9c155
 801eea8:	03eb6f7d 	.word	0x03eb6f7d
 801eeac:	3fd4d612 	.word	0x3fd4d612
 801eeb0:	55555555 	.word	0x55555555
 801eeb4:	3fc55555 	.word	0x3fc55555
 801eeb8:	b12e9282 	.word	0xb12e9282
 801eebc:	3fb3b8c5 	.word	0x3fb3b8c5
 801eec0:	1b8d0159 	.word	0x1b8d0159
 801eec4:	3fe6066c 	.word	0x3fe6066c
 801eec8:	9c598ac8 	.word	0x9c598ac8
 801eecc:	40002ae5 	.word	0x40002ae5
 801eed0:	1c8a2d4b 	.word	0x1c8a2d4b
 801eed4:	40033a27 	.word	0x40033a27
 801eed8:	33145c07 	.word	0x33145c07
 801eedc:	3c91a626 	.word	0x3c91a626
 801eee0:	54442d18 	.word	0x54442d18
 801eee4:	3ff921fb 	.word	0x3ff921fb
 801eee8:	54442d18 	.word	0x54442d18
 801eeec:	400921fb 	.word	0x400921fb
 801eef0:	3fefffff 	.word	0x3fefffff
 801eef4:	3fdfffff 	.word	0x3fdfffff
 801eef8:	3c600000 	.word	0x3c600000
 801eefc:	3ff00000 	.word	0x3ff00000
 801ef00:	3fe00000 	.word	0x3fe00000
 801ef04:	4622      	mov	r2, r4
 801ef06:	462b      	mov	r3, r5
 801ef08:	496b      	ldr	r1, [pc, #428]	@ (801f0b8 <__ieee754_acos+0x4b0>)
 801ef0a:	2000      	movs	r0, #0
 801ef0c:	f7e1 f9cc 	bl	80002a8 <__aeabi_dsub>
 801ef10:	4b6a      	ldr	r3, [pc, #424]	@ (801f0bc <__ieee754_acos+0x4b4>)
 801ef12:	2200      	movs	r2, #0
 801ef14:	f7e1 fb80 	bl	8000618 <__aeabi_dmul>
 801ef18:	4604      	mov	r4, r0
 801ef1a:	460d      	mov	r5, r1
 801ef1c:	ec45 4b10 	vmov	d0, r4, r5
 801ef20:	f7ff fb9a 	bl	801e658 <__ieee754_sqrt>
 801ef24:	a34c      	add	r3, pc, #304	@ (adr r3, 801f058 <__ieee754_acos+0x450>)
 801ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef2a:	4620      	mov	r0, r4
 801ef2c:	4629      	mov	r1, r5
 801ef2e:	ec59 8b10 	vmov	r8, r9, d0
 801ef32:	f7e1 fb71 	bl	8000618 <__aeabi_dmul>
 801ef36:	a34a      	add	r3, pc, #296	@ (adr r3, 801f060 <__ieee754_acos+0x458>)
 801ef38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef3c:	f7e1 f9b6 	bl	80002ac <__adddf3>
 801ef40:	4622      	mov	r2, r4
 801ef42:	462b      	mov	r3, r5
 801ef44:	f7e1 fb68 	bl	8000618 <__aeabi_dmul>
 801ef48:	a347      	add	r3, pc, #284	@ (adr r3, 801f068 <__ieee754_acos+0x460>)
 801ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef4e:	f7e1 f9ab 	bl	80002a8 <__aeabi_dsub>
 801ef52:	4622      	mov	r2, r4
 801ef54:	462b      	mov	r3, r5
 801ef56:	f7e1 fb5f 	bl	8000618 <__aeabi_dmul>
 801ef5a:	a345      	add	r3, pc, #276	@ (adr r3, 801f070 <__ieee754_acos+0x468>)
 801ef5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef60:	f7e1 f9a4 	bl	80002ac <__adddf3>
 801ef64:	4622      	mov	r2, r4
 801ef66:	462b      	mov	r3, r5
 801ef68:	f7e1 fb56 	bl	8000618 <__aeabi_dmul>
 801ef6c:	a342      	add	r3, pc, #264	@ (adr r3, 801f078 <__ieee754_acos+0x470>)
 801ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef72:	f7e1 f999 	bl	80002a8 <__aeabi_dsub>
 801ef76:	4622      	mov	r2, r4
 801ef78:	462b      	mov	r3, r5
 801ef7a:	f7e1 fb4d 	bl	8000618 <__aeabi_dmul>
 801ef7e:	a340      	add	r3, pc, #256	@ (adr r3, 801f080 <__ieee754_acos+0x478>)
 801ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef84:	f7e1 f992 	bl	80002ac <__adddf3>
 801ef88:	4622      	mov	r2, r4
 801ef8a:	462b      	mov	r3, r5
 801ef8c:	f7e1 fb44 	bl	8000618 <__aeabi_dmul>
 801ef90:	a33d      	add	r3, pc, #244	@ (adr r3, 801f088 <__ieee754_acos+0x480>)
 801ef92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef96:	4682      	mov	sl, r0
 801ef98:	468b      	mov	fp, r1
 801ef9a:	4620      	mov	r0, r4
 801ef9c:	4629      	mov	r1, r5
 801ef9e:	f7e1 fb3b 	bl	8000618 <__aeabi_dmul>
 801efa2:	a33b      	add	r3, pc, #236	@ (adr r3, 801f090 <__ieee754_acos+0x488>)
 801efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efa8:	f7e1 f97e 	bl	80002a8 <__aeabi_dsub>
 801efac:	4622      	mov	r2, r4
 801efae:	462b      	mov	r3, r5
 801efb0:	f7e1 fb32 	bl	8000618 <__aeabi_dmul>
 801efb4:	a338      	add	r3, pc, #224	@ (adr r3, 801f098 <__ieee754_acos+0x490>)
 801efb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efba:	f7e1 f977 	bl	80002ac <__adddf3>
 801efbe:	4622      	mov	r2, r4
 801efc0:	462b      	mov	r3, r5
 801efc2:	f7e1 fb29 	bl	8000618 <__aeabi_dmul>
 801efc6:	a336      	add	r3, pc, #216	@ (adr r3, 801f0a0 <__ieee754_acos+0x498>)
 801efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efcc:	f7e1 f96c 	bl	80002a8 <__aeabi_dsub>
 801efd0:	4622      	mov	r2, r4
 801efd2:	462b      	mov	r3, r5
 801efd4:	f7e1 fb20 	bl	8000618 <__aeabi_dmul>
 801efd8:	4b37      	ldr	r3, [pc, #220]	@ (801f0b8 <__ieee754_acos+0x4b0>)
 801efda:	2200      	movs	r2, #0
 801efdc:	f7e1 f966 	bl	80002ac <__adddf3>
 801efe0:	4602      	mov	r2, r0
 801efe2:	460b      	mov	r3, r1
 801efe4:	4650      	mov	r0, sl
 801efe6:	4659      	mov	r1, fp
 801efe8:	f7e1 fc40 	bl	800086c <__aeabi_ddiv>
 801efec:	4642      	mov	r2, r8
 801efee:	464b      	mov	r3, r9
 801eff0:	f7e1 fb12 	bl	8000618 <__aeabi_dmul>
 801eff4:	2600      	movs	r6, #0
 801eff6:	4682      	mov	sl, r0
 801eff8:	468b      	mov	fp, r1
 801effa:	4632      	mov	r2, r6
 801effc:	464b      	mov	r3, r9
 801effe:	4630      	mov	r0, r6
 801f000:	4649      	mov	r1, r9
 801f002:	f7e1 fb09 	bl	8000618 <__aeabi_dmul>
 801f006:	4602      	mov	r2, r0
 801f008:	460b      	mov	r3, r1
 801f00a:	4620      	mov	r0, r4
 801f00c:	4629      	mov	r1, r5
 801f00e:	f7e1 f94b 	bl	80002a8 <__aeabi_dsub>
 801f012:	4632      	mov	r2, r6
 801f014:	4604      	mov	r4, r0
 801f016:	460d      	mov	r5, r1
 801f018:	464b      	mov	r3, r9
 801f01a:	4640      	mov	r0, r8
 801f01c:	4649      	mov	r1, r9
 801f01e:	f7e1 f945 	bl	80002ac <__adddf3>
 801f022:	4602      	mov	r2, r0
 801f024:	460b      	mov	r3, r1
 801f026:	4620      	mov	r0, r4
 801f028:	4629      	mov	r1, r5
 801f02a:	f7e1 fc1f 	bl	800086c <__aeabi_ddiv>
 801f02e:	4602      	mov	r2, r0
 801f030:	460b      	mov	r3, r1
 801f032:	4650      	mov	r0, sl
 801f034:	4659      	mov	r1, fp
 801f036:	f7e1 f939 	bl	80002ac <__adddf3>
 801f03a:	4632      	mov	r2, r6
 801f03c:	464b      	mov	r3, r9
 801f03e:	f7e1 f935 	bl	80002ac <__adddf3>
 801f042:	4602      	mov	r2, r0
 801f044:	460b      	mov	r3, r1
 801f046:	f7e1 f931 	bl	80002ac <__adddf3>
 801f04a:	e5fd      	b.n	801ec48 <__ieee754_acos+0x40>
 801f04c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801f0a8 <__ieee754_acos+0x4a0>
 801f050:	e5ee      	b.n	801ec30 <__ieee754_acos+0x28>
 801f052:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f0b0 <__ieee754_acos+0x4a8>
 801f056:	e5eb      	b.n	801ec30 <__ieee754_acos+0x28>
 801f058:	0dfdf709 	.word	0x0dfdf709
 801f05c:	3f023de1 	.word	0x3f023de1
 801f060:	7501b288 	.word	0x7501b288
 801f064:	3f49efe0 	.word	0x3f49efe0
 801f068:	b5688f3b 	.word	0xb5688f3b
 801f06c:	3fa48228 	.word	0x3fa48228
 801f070:	0e884455 	.word	0x0e884455
 801f074:	3fc9c155 	.word	0x3fc9c155
 801f078:	03eb6f7d 	.word	0x03eb6f7d
 801f07c:	3fd4d612 	.word	0x3fd4d612
 801f080:	55555555 	.word	0x55555555
 801f084:	3fc55555 	.word	0x3fc55555
 801f088:	b12e9282 	.word	0xb12e9282
 801f08c:	3fb3b8c5 	.word	0x3fb3b8c5
 801f090:	1b8d0159 	.word	0x1b8d0159
 801f094:	3fe6066c 	.word	0x3fe6066c
 801f098:	9c598ac8 	.word	0x9c598ac8
 801f09c:	40002ae5 	.word	0x40002ae5
 801f0a0:	1c8a2d4b 	.word	0x1c8a2d4b
 801f0a4:	40033a27 	.word	0x40033a27
 801f0a8:	54442d18 	.word	0x54442d18
 801f0ac:	400921fb 	.word	0x400921fb
 801f0b0:	54442d18 	.word	0x54442d18
 801f0b4:	3ff921fb 	.word	0x3ff921fb
 801f0b8:	3ff00000 	.word	0x3ff00000
 801f0bc:	3fe00000 	.word	0x3fe00000

0801f0c0 <__ieee754_asin>:
 801f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0c4:	ec55 4b10 	vmov	r4, r5, d0
 801f0c8:	4bc7      	ldr	r3, [pc, #796]	@ (801f3e8 <__ieee754_asin+0x328>)
 801f0ca:	b087      	sub	sp, #28
 801f0cc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801f0d0:	429e      	cmp	r6, r3
 801f0d2:	9501      	str	r5, [sp, #4]
 801f0d4:	d92d      	bls.n	801f132 <__ieee754_asin+0x72>
 801f0d6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 801f0da:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 801f0de:	4326      	orrs	r6, r4
 801f0e0:	d116      	bne.n	801f110 <__ieee754_asin+0x50>
 801f0e2:	a3a7      	add	r3, pc, #668	@ (adr r3, 801f380 <__ieee754_asin+0x2c0>)
 801f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0e8:	4620      	mov	r0, r4
 801f0ea:	4629      	mov	r1, r5
 801f0ec:	f7e1 fa94 	bl	8000618 <__aeabi_dmul>
 801f0f0:	a3a5      	add	r3, pc, #660	@ (adr r3, 801f388 <__ieee754_asin+0x2c8>)
 801f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0f6:	4606      	mov	r6, r0
 801f0f8:	460f      	mov	r7, r1
 801f0fa:	4620      	mov	r0, r4
 801f0fc:	4629      	mov	r1, r5
 801f0fe:	f7e1 fa8b 	bl	8000618 <__aeabi_dmul>
 801f102:	4602      	mov	r2, r0
 801f104:	460b      	mov	r3, r1
 801f106:	4630      	mov	r0, r6
 801f108:	4639      	mov	r1, r7
 801f10a:	f7e1 f8cf 	bl	80002ac <__adddf3>
 801f10e:	e009      	b.n	801f124 <__ieee754_asin+0x64>
 801f110:	4622      	mov	r2, r4
 801f112:	462b      	mov	r3, r5
 801f114:	4620      	mov	r0, r4
 801f116:	4629      	mov	r1, r5
 801f118:	f7e1 f8c6 	bl	80002a8 <__aeabi_dsub>
 801f11c:	4602      	mov	r2, r0
 801f11e:	460b      	mov	r3, r1
 801f120:	f7e1 fba4 	bl	800086c <__aeabi_ddiv>
 801f124:	4604      	mov	r4, r0
 801f126:	460d      	mov	r5, r1
 801f128:	ec45 4b10 	vmov	d0, r4, r5
 801f12c:	b007      	add	sp, #28
 801f12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f132:	4bae      	ldr	r3, [pc, #696]	@ (801f3ec <__ieee754_asin+0x32c>)
 801f134:	429e      	cmp	r6, r3
 801f136:	d810      	bhi.n	801f15a <__ieee754_asin+0x9a>
 801f138:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 801f13c:	f080 80ad 	bcs.w	801f29a <__ieee754_asin+0x1da>
 801f140:	a393      	add	r3, pc, #588	@ (adr r3, 801f390 <__ieee754_asin+0x2d0>)
 801f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f146:	4620      	mov	r0, r4
 801f148:	4629      	mov	r1, r5
 801f14a:	f7e1 f8af 	bl	80002ac <__adddf3>
 801f14e:	4ba8      	ldr	r3, [pc, #672]	@ (801f3f0 <__ieee754_asin+0x330>)
 801f150:	2200      	movs	r2, #0
 801f152:	f7e1 fcf1 	bl	8000b38 <__aeabi_dcmpgt>
 801f156:	2800      	cmp	r0, #0
 801f158:	d1e6      	bne.n	801f128 <__ieee754_asin+0x68>
 801f15a:	ec45 4b10 	vmov	d0, r4, r5
 801f15e:	f7ff fa13 	bl	801e588 <fabs>
 801f162:	49a3      	ldr	r1, [pc, #652]	@ (801f3f0 <__ieee754_asin+0x330>)
 801f164:	ec53 2b10 	vmov	r2, r3, d0
 801f168:	2000      	movs	r0, #0
 801f16a:	f7e1 f89d 	bl	80002a8 <__aeabi_dsub>
 801f16e:	4ba1      	ldr	r3, [pc, #644]	@ (801f3f4 <__ieee754_asin+0x334>)
 801f170:	2200      	movs	r2, #0
 801f172:	f7e1 fa51 	bl	8000618 <__aeabi_dmul>
 801f176:	a388      	add	r3, pc, #544	@ (adr r3, 801f398 <__ieee754_asin+0x2d8>)
 801f178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f17c:	4604      	mov	r4, r0
 801f17e:	460d      	mov	r5, r1
 801f180:	f7e1 fa4a 	bl	8000618 <__aeabi_dmul>
 801f184:	a386      	add	r3, pc, #536	@ (adr r3, 801f3a0 <__ieee754_asin+0x2e0>)
 801f186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f18a:	f7e1 f88f 	bl	80002ac <__adddf3>
 801f18e:	4622      	mov	r2, r4
 801f190:	462b      	mov	r3, r5
 801f192:	f7e1 fa41 	bl	8000618 <__aeabi_dmul>
 801f196:	a384      	add	r3, pc, #528	@ (adr r3, 801f3a8 <__ieee754_asin+0x2e8>)
 801f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f19c:	f7e1 f884 	bl	80002a8 <__aeabi_dsub>
 801f1a0:	4622      	mov	r2, r4
 801f1a2:	462b      	mov	r3, r5
 801f1a4:	f7e1 fa38 	bl	8000618 <__aeabi_dmul>
 801f1a8:	a381      	add	r3, pc, #516	@ (adr r3, 801f3b0 <__ieee754_asin+0x2f0>)
 801f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ae:	f7e1 f87d 	bl	80002ac <__adddf3>
 801f1b2:	4622      	mov	r2, r4
 801f1b4:	462b      	mov	r3, r5
 801f1b6:	f7e1 fa2f 	bl	8000618 <__aeabi_dmul>
 801f1ba:	a37f      	add	r3, pc, #508	@ (adr r3, 801f3b8 <__ieee754_asin+0x2f8>)
 801f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1c0:	f7e1 f872 	bl	80002a8 <__aeabi_dsub>
 801f1c4:	4622      	mov	r2, r4
 801f1c6:	462b      	mov	r3, r5
 801f1c8:	f7e1 fa26 	bl	8000618 <__aeabi_dmul>
 801f1cc:	a37c      	add	r3, pc, #496	@ (adr r3, 801f3c0 <__ieee754_asin+0x300>)
 801f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1d2:	f7e1 f86b 	bl	80002ac <__adddf3>
 801f1d6:	4622      	mov	r2, r4
 801f1d8:	462b      	mov	r3, r5
 801f1da:	f7e1 fa1d 	bl	8000618 <__aeabi_dmul>
 801f1de:	a37a      	add	r3, pc, #488	@ (adr r3, 801f3c8 <__ieee754_asin+0x308>)
 801f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1e8:	4620      	mov	r0, r4
 801f1ea:	4629      	mov	r1, r5
 801f1ec:	f7e1 fa14 	bl	8000618 <__aeabi_dmul>
 801f1f0:	a377      	add	r3, pc, #476	@ (adr r3, 801f3d0 <__ieee754_asin+0x310>)
 801f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1f6:	f7e1 f857 	bl	80002a8 <__aeabi_dsub>
 801f1fa:	4622      	mov	r2, r4
 801f1fc:	462b      	mov	r3, r5
 801f1fe:	f7e1 fa0b 	bl	8000618 <__aeabi_dmul>
 801f202:	a375      	add	r3, pc, #468	@ (adr r3, 801f3d8 <__ieee754_asin+0x318>)
 801f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f208:	f7e1 f850 	bl	80002ac <__adddf3>
 801f20c:	4622      	mov	r2, r4
 801f20e:	462b      	mov	r3, r5
 801f210:	f7e1 fa02 	bl	8000618 <__aeabi_dmul>
 801f214:	a372      	add	r3, pc, #456	@ (adr r3, 801f3e0 <__ieee754_asin+0x320>)
 801f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f21a:	f7e1 f845 	bl	80002a8 <__aeabi_dsub>
 801f21e:	4622      	mov	r2, r4
 801f220:	462b      	mov	r3, r5
 801f222:	f7e1 f9f9 	bl	8000618 <__aeabi_dmul>
 801f226:	4b72      	ldr	r3, [pc, #456]	@ (801f3f0 <__ieee754_asin+0x330>)
 801f228:	2200      	movs	r2, #0
 801f22a:	f7e1 f83f 	bl	80002ac <__adddf3>
 801f22e:	ec45 4b10 	vmov	d0, r4, r5
 801f232:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f236:	f7ff fa0f 	bl	801e658 <__ieee754_sqrt>
 801f23a:	4b6f      	ldr	r3, [pc, #444]	@ (801f3f8 <__ieee754_asin+0x338>)
 801f23c:	429e      	cmp	r6, r3
 801f23e:	ec5b ab10 	vmov	sl, fp, d0
 801f242:	f240 80db 	bls.w	801f3fc <__ieee754_asin+0x33c>
 801f246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f24a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f24e:	f7e1 fb0d 	bl	800086c <__aeabi_ddiv>
 801f252:	4652      	mov	r2, sl
 801f254:	465b      	mov	r3, fp
 801f256:	f7e1 f9df 	bl	8000618 <__aeabi_dmul>
 801f25a:	4652      	mov	r2, sl
 801f25c:	465b      	mov	r3, fp
 801f25e:	f7e1 f825 	bl	80002ac <__adddf3>
 801f262:	4602      	mov	r2, r0
 801f264:	460b      	mov	r3, r1
 801f266:	f7e1 f821 	bl	80002ac <__adddf3>
 801f26a:	a347      	add	r3, pc, #284	@ (adr r3, 801f388 <__ieee754_asin+0x2c8>)
 801f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f270:	f7e1 f81a 	bl	80002a8 <__aeabi_dsub>
 801f274:	4602      	mov	r2, r0
 801f276:	460b      	mov	r3, r1
 801f278:	a141      	add	r1, pc, #260	@ (adr r1, 801f380 <__ieee754_asin+0x2c0>)
 801f27a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f27e:	f7e1 f813 	bl	80002a8 <__aeabi_dsub>
 801f282:	9b01      	ldr	r3, [sp, #4]
 801f284:	2b00      	cmp	r3, #0
 801f286:	bfdc      	itt	le
 801f288:	4602      	movle	r2, r0
 801f28a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801f28e:	4604      	mov	r4, r0
 801f290:	460d      	mov	r5, r1
 801f292:	bfdc      	itt	le
 801f294:	4614      	movle	r4, r2
 801f296:	461d      	movle	r5, r3
 801f298:	e746      	b.n	801f128 <__ieee754_asin+0x68>
 801f29a:	4622      	mov	r2, r4
 801f29c:	462b      	mov	r3, r5
 801f29e:	4620      	mov	r0, r4
 801f2a0:	4629      	mov	r1, r5
 801f2a2:	f7e1 f9b9 	bl	8000618 <__aeabi_dmul>
 801f2a6:	a33c      	add	r3, pc, #240	@ (adr r3, 801f398 <__ieee754_asin+0x2d8>)
 801f2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ac:	4606      	mov	r6, r0
 801f2ae:	460f      	mov	r7, r1
 801f2b0:	f7e1 f9b2 	bl	8000618 <__aeabi_dmul>
 801f2b4:	a33a      	add	r3, pc, #232	@ (adr r3, 801f3a0 <__ieee754_asin+0x2e0>)
 801f2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ba:	f7e0 fff7 	bl	80002ac <__adddf3>
 801f2be:	4632      	mov	r2, r6
 801f2c0:	463b      	mov	r3, r7
 801f2c2:	f7e1 f9a9 	bl	8000618 <__aeabi_dmul>
 801f2c6:	a338      	add	r3, pc, #224	@ (adr r3, 801f3a8 <__ieee754_asin+0x2e8>)
 801f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2cc:	f7e0 ffec 	bl	80002a8 <__aeabi_dsub>
 801f2d0:	4632      	mov	r2, r6
 801f2d2:	463b      	mov	r3, r7
 801f2d4:	f7e1 f9a0 	bl	8000618 <__aeabi_dmul>
 801f2d8:	a335      	add	r3, pc, #212	@ (adr r3, 801f3b0 <__ieee754_asin+0x2f0>)
 801f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2de:	f7e0 ffe5 	bl	80002ac <__adddf3>
 801f2e2:	4632      	mov	r2, r6
 801f2e4:	463b      	mov	r3, r7
 801f2e6:	f7e1 f997 	bl	8000618 <__aeabi_dmul>
 801f2ea:	a333      	add	r3, pc, #204	@ (adr r3, 801f3b8 <__ieee754_asin+0x2f8>)
 801f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2f0:	f7e0 ffda 	bl	80002a8 <__aeabi_dsub>
 801f2f4:	4632      	mov	r2, r6
 801f2f6:	463b      	mov	r3, r7
 801f2f8:	f7e1 f98e 	bl	8000618 <__aeabi_dmul>
 801f2fc:	a330      	add	r3, pc, #192	@ (adr r3, 801f3c0 <__ieee754_asin+0x300>)
 801f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f302:	f7e0 ffd3 	bl	80002ac <__adddf3>
 801f306:	4632      	mov	r2, r6
 801f308:	463b      	mov	r3, r7
 801f30a:	f7e1 f985 	bl	8000618 <__aeabi_dmul>
 801f30e:	a32e      	add	r3, pc, #184	@ (adr r3, 801f3c8 <__ieee754_asin+0x308>)
 801f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f314:	4680      	mov	r8, r0
 801f316:	4689      	mov	r9, r1
 801f318:	4630      	mov	r0, r6
 801f31a:	4639      	mov	r1, r7
 801f31c:	f7e1 f97c 	bl	8000618 <__aeabi_dmul>
 801f320:	a32b      	add	r3, pc, #172	@ (adr r3, 801f3d0 <__ieee754_asin+0x310>)
 801f322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f326:	f7e0 ffbf 	bl	80002a8 <__aeabi_dsub>
 801f32a:	4632      	mov	r2, r6
 801f32c:	463b      	mov	r3, r7
 801f32e:	f7e1 f973 	bl	8000618 <__aeabi_dmul>
 801f332:	a329      	add	r3, pc, #164	@ (adr r3, 801f3d8 <__ieee754_asin+0x318>)
 801f334:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f338:	f7e0 ffb8 	bl	80002ac <__adddf3>
 801f33c:	4632      	mov	r2, r6
 801f33e:	463b      	mov	r3, r7
 801f340:	f7e1 f96a 	bl	8000618 <__aeabi_dmul>
 801f344:	a326      	add	r3, pc, #152	@ (adr r3, 801f3e0 <__ieee754_asin+0x320>)
 801f346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f34a:	f7e0 ffad 	bl	80002a8 <__aeabi_dsub>
 801f34e:	4632      	mov	r2, r6
 801f350:	463b      	mov	r3, r7
 801f352:	f7e1 f961 	bl	8000618 <__aeabi_dmul>
 801f356:	4b26      	ldr	r3, [pc, #152]	@ (801f3f0 <__ieee754_asin+0x330>)
 801f358:	2200      	movs	r2, #0
 801f35a:	f7e0 ffa7 	bl	80002ac <__adddf3>
 801f35e:	4602      	mov	r2, r0
 801f360:	460b      	mov	r3, r1
 801f362:	4640      	mov	r0, r8
 801f364:	4649      	mov	r1, r9
 801f366:	f7e1 fa81 	bl	800086c <__aeabi_ddiv>
 801f36a:	4622      	mov	r2, r4
 801f36c:	462b      	mov	r3, r5
 801f36e:	f7e1 f953 	bl	8000618 <__aeabi_dmul>
 801f372:	4602      	mov	r2, r0
 801f374:	460b      	mov	r3, r1
 801f376:	4620      	mov	r0, r4
 801f378:	4629      	mov	r1, r5
 801f37a:	e6c6      	b.n	801f10a <__ieee754_asin+0x4a>
 801f37c:	f3af 8000 	nop.w
 801f380:	54442d18 	.word	0x54442d18
 801f384:	3ff921fb 	.word	0x3ff921fb
 801f388:	33145c07 	.word	0x33145c07
 801f38c:	3c91a626 	.word	0x3c91a626
 801f390:	8800759c 	.word	0x8800759c
 801f394:	7e37e43c 	.word	0x7e37e43c
 801f398:	0dfdf709 	.word	0x0dfdf709
 801f39c:	3f023de1 	.word	0x3f023de1
 801f3a0:	7501b288 	.word	0x7501b288
 801f3a4:	3f49efe0 	.word	0x3f49efe0
 801f3a8:	b5688f3b 	.word	0xb5688f3b
 801f3ac:	3fa48228 	.word	0x3fa48228
 801f3b0:	0e884455 	.word	0x0e884455
 801f3b4:	3fc9c155 	.word	0x3fc9c155
 801f3b8:	03eb6f7d 	.word	0x03eb6f7d
 801f3bc:	3fd4d612 	.word	0x3fd4d612
 801f3c0:	55555555 	.word	0x55555555
 801f3c4:	3fc55555 	.word	0x3fc55555
 801f3c8:	b12e9282 	.word	0xb12e9282
 801f3cc:	3fb3b8c5 	.word	0x3fb3b8c5
 801f3d0:	1b8d0159 	.word	0x1b8d0159
 801f3d4:	3fe6066c 	.word	0x3fe6066c
 801f3d8:	9c598ac8 	.word	0x9c598ac8
 801f3dc:	40002ae5 	.word	0x40002ae5
 801f3e0:	1c8a2d4b 	.word	0x1c8a2d4b
 801f3e4:	40033a27 	.word	0x40033a27
 801f3e8:	3fefffff 	.word	0x3fefffff
 801f3ec:	3fdfffff 	.word	0x3fdfffff
 801f3f0:	3ff00000 	.word	0x3ff00000
 801f3f4:	3fe00000 	.word	0x3fe00000
 801f3f8:	3fef3332 	.word	0x3fef3332
 801f3fc:	4652      	mov	r2, sl
 801f3fe:	465b      	mov	r3, fp
 801f400:	4650      	mov	r0, sl
 801f402:	4659      	mov	r1, fp
 801f404:	f7e0 ff52 	bl	80002ac <__adddf3>
 801f408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f40c:	4606      	mov	r6, r0
 801f40e:	460f      	mov	r7, r1
 801f410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f414:	f7e1 fa2a 	bl	800086c <__aeabi_ddiv>
 801f418:	4602      	mov	r2, r0
 801f41a:	460b      	mov	r3, r1
 801f41c:	4630      	mov	r0, r6
 801f41e:	4639      	mov	r1, r7
 801f420:	f7e1 f8fa 	bl	8000618 <__aeabi_dmul>
 801f424:	f04f 0800 	mov.w	r8, #0
 801f428:	4606      	mov	r6, r0
 801f42a:	460f      	mov	r7, r1
 801f42c:	4642      	mov	r2, r8
 801f42e:	465b      	mov	r3, fp
 801f430:	4640      	mov	r0, r8
 801f432:	4659      	mov	r1, fp
 801f434:	f7e1 f8f0 	bl	8000618 <__aeabi_dmul>
 801f438:	4602      	mov	r2, r0
 801f43a:	460b      	mov	r3, r1
 801f43c:	4620      	mov	r0, r4
 801f43e:	4629      	mov	r1, r5
 801f440:	f7e0 ff32 	bl	80002a8 <__aeabi_dsub>
 801f444:	4642      	mov	r2, r8
 801f446:	4604      	mov	r4, r0
 801f448:	460d      	mov	r5, r1
 801f44a:	465b      	mov	r3, fp
 801f44c:	4650      	mov	r0, sl
 801f44e:	4659      	mov	r1, fp
 801f450:	f7e0 ff2c 	bl	80002ac <__adddf3>
 801f454:	4602      	mov	r2, r0
 801f456:	460b      	mov	r3, r1
 801f458:	4620      	mov	r0, r4
 801f45a:	4629      	mov	r1, r5
 801f45c:	f7e1 fa06 	bl	800086c <__aeabi_ddiv>
 801f460:	4602      	mov	r2, r0
 801f462:	460b      	mov	r3, r1
 801f464:	f7e0 ff22 	bl	80002ac <__adddf3>
 801f468:	4602      	mov	r2, r0
 801f46a:	460b      	mov	r3, r1
 801f46c:	a112      	add	r1, pc, #72	@ (adr r1, 801f4b8 <__ieee754_asin+0x3f8>)
 801f46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f472:	f7e0 ff19 	bl	80002a8 <__aeabi_dsub>
 801f476:	4602      	mov	r2, r0
 801f478:	460b      	mov	r3, r1
 801f47a:	4630      	mov	r0, r6
 801f47c:	4639      	mov	r1, r7
 801f47e:	f7e0 ff13 	bl	80002a8 <__aeabi_dsub>
 801f482:	4642      	mov	r2, r8
 801f484:	4604      	mov	r4, r0
 801f486:	460d      	mov	r5, r1
 801f488:	465b      	mov	r3, fp
 801f48a:	4640      	mov	r0, r8
 801f48c:	4659      	mov	r1, fp
 801f48e:	f7e0 ff0d 	bl	80002ac <__adddf3>
 801f492:	4602      	mov	r2, r0
 801f494:	460b      	mov	r3, r1
 801f496:	a10a      	add	r1, pc, #40	@ (adr r1, 801f4c0 <__ieee754_asin+0x400>)
 801f498:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f49c:	f7e0 ff04 	bl	80002a8 <__aeabi_dsub>
 801f4a0:	4602      	mov	r2, r0
 801f4a2:	460b      	mov	r3, r1
 801f4a4:	4620      	mov	r0, r4
 801f4a6:	4629      	mov	r1, r5
 801f4a8:	f7e0 fefe 	bl	80002a8 <__aeabi_dsub>
 801f4ac:	4602      	mov	r2, r0
 801f4ae:	460b      	mov	r3, r1
 801f4b0:	a103      	add	r1, pc, #12	@ (adr r1, 801f4c0 <__ieee754_asin+0x400>)
 801f4b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f4b6:	e6e2      	b.n	801f27e <__ieee754_asin+0x1be>
 801f4b8:	33145c07 	.word	0x33145c07
 801f4bc:	3c91a626 	.word	0x3c91a626
 801f4c0:	54442d18 	.word	0x54442d18
 801f4c4:	3fe921fb 	.word	0x3fe921fb

0801f4c8 <__ieee754_atan2>:
 801f4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f4cc:	ec57 6b11 	vmov	r6, r7, d1
 801f4d0:	4273      	negs	r3, r6
 801f4d2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801f650 <__ieee754_atan2+0x188>
 801f4d6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801f4da:	4333      	orrs	r3, r6
 801f4dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801f4e0:	4543      	cmp	r3, r8
 801f4e2:	ec51 0b10 	vmov	r0, r1, d0
 801f4e6:	4635      	mov	r5, r6
 801f4e8:	d809      	bhi.n	801f4fe <__ieee754_atan2+0x36>
 801f4ea:	4244      	negs	r4, r0
 801f4ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f4f0:	4304      	orrs	r4, r0
 801f4f2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801f4f6:	4544      	cmp	r4, r8
 801f4f8:	468e      	mov	lr, r1
 801f4fa:	4681      	mov	r9, r0
 801f4fc:	d907      	bls.n	801f50e <__ieee754_atan2+0x46>
 801f4fe:	4632      	mov	r2, r6
 801f500:	463b      	mov	r3, r7
 801f502:	f7e0 fed3 	bl	80002ac <__adddf3>
 801f506:	ec41 0b10 	vmov	d0, r0, r1
 801f50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f50e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801f512:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801f516:	4334      	orrs	r4, r6
 801f518:	d103      	bne.n	801f522 <__ieee754_atan2+0x5a>
 801f51a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f51e:	f7fe be47 	b.w	801e1b0 <atan>
 801f522:	17bc      	asrs	r4, r7, #30
 801f524:	f004 0402 	and.w	r4, r4, #2
 801f528:	ea53 0909 	orrs.w	r9, r3, r9
 801f52c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801f530:	d107      	bne.n	801f542 <__ieee754_atan2+0x7a>
 801f532:	2c02      	cmp	r4, #2
 801f534:	d05f      	beq.n	801f5f6 <__ieee754_atan2+0x12e>
 801f536:	2c03      	cmp	r4, #3
 801f538:	d1e5      	bne.n	801f506 <__ieee754_atan2+0x3e>
 801f53a:	a143      	add	r1, pc, #268	@ (adr r1, 801f648 <__ieee754_atan2+0x180>)
 801f53c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f540:	e7e1      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f542:	4315      	orrs	r5, r2
 801f544:	d106      	bne.n	801f554 <__ieee754_atan2+0x8c>
 801f546:	f1be 0f00 	cmp.w	lr, #0
 801f54a:	db5f      	blt.n	801f60c <__ieee754_atan2+0x144>
 801f54c:	a136      	add	r1, pc, #216	@ (adr r1, 801f628 <__ieee754_atan2+0x160>)
 801f54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f552:	e7d8      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f554:	4542      	cmp	r2, r8
 801f556:	d10f      	bne.n	801f578 <__ieee754_atan2+0xb0>
 801f558:	4293      	cmp	r3, r2
 801f55a:	f104 34ff 	add.w	r4, r4, #4294967295
 801f55e:	d107      	bne.n	801f570 <__ieee754_atan2+0xa8>
 801f560:	2c02      	cmp	r4, #2
 801f562:	d84c      	bhi.n	801f5fe <__ieee754_atan2+0x136>
 801f564:	4b36      	ldr	r3, [pc, #216]	@ (801f640 <__ieee754_atan2+0x178>)
 801f566:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f56a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f56e:	e7ca      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f570:	2c02      	cmp	r4, #2
 801f572:	d848      	bhi.n	801f606 <__ieee754_atan2+0x13e>
 801f574:	4b33      	ldr	r3, [pc, #204]	@ (801f644 <__ieee754_atan2+0x17c>)
 801f576:	e7f6      	b.n	801f566 <__ieee754_atan2+0x9e>
 801f578:	4543      	cmp	r3, r8
 801f57a:	d0e4      	beq.n	801f546 <__ieee754_atan2+0x7e>
 801f57c:	1a9b      	subs	r3, r3, r2
 801f57e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801f582:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f586:	da1e      	bge.n	801f5c6 <__ieee754_atan2+0xfe>
 801f588:	2f00      	cmp	r7, #0
 801f58a:	da01      	bge.n	801f590 <__ieee754_atan2+0xc8>
 801f58c:	323c      	adds	r2, #60	@ 0x3c
 801f58e:	db1e      	blt.n	801f5ce <__ieee754_atan2+0x106>
 801f590:	4632      	mov	r2, r6
 801f592:	463b      	mov	r3, r7
 801f594:	f7e1 f96a 	bl	800086c <__aeabi_ddiv>
 801f598:	ec41 0b10 	vmov	d0, r0, r1
 801f59c:	f7fe fff4 	bl	801e588 <fabs>
 801f5a0:	f7fe fe06 	bl	801e1b0 <atan>
 801f5a4:	ec51 0b10 	vmov	r0, r1, d0
 801f5a8:	2c01      	cmp	r4, #1
 801f5aa:	d013      	beq.n	801f5d4 <__ieee754_atan2+0x10c>
 801f5ac:	2c02      	cmp	r4, #2
 801f5ae:	d015      	beq.n	801f5dc <__ieee754_atan2+0x114>
 801f5b0:	2c00      	cmp	r4, #0
 801f5b2:	d0a8      	beq.n	801f506 <__ieee754_atan2+0x3e>
 801f5b4:	a318      	add	r3, pc, #96	@ (adr r3, 801f618 <__ieee754_atan2+0x150>)
 801f5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5ba:	f7e0 fe75 	bl	80002a8 <__aeabi_dsub>
 801f5be:	a318      	add	r3, pc, #96	@ (adr r3, 801f620 <__ieee754_atan2+0x158>)
 801f5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5c4:	e014      	b.n	801f5f0 <__ieee754_atan2+0x128>
 801f5c6:	a118      	add	r1, pc, #96	@ (adr r1, 801f628 <__ieee754_atan2+0x160>)
 801f5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f5cc:	e7ec      	b.n	801f5a8 <__ieee754_atan2+0xe0>
 801f5ce:	2000      	movs	r0, #0
 801f5d0:	2100      	movs	r1, #0
 801f5d2:	e7e9      	b.n	801f5a8 <__ieee754_atan2+0xe0>
 801f5d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f5d8:	4619      	mov	r1, r3
 801f5da:	e794      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f5dc:	a30e      	add	r3, pc, #56	@ (adr r3, 801f618 <__ieee754_atan2+0x150>)
 801f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5e2:	f7e0 fe61 	bl	80002a8 <__aeabi_dsub>
 801f5e6:	4602      	mov	r2, r0
 801f5e8:	460b      	mov	r3, r1
 801f5ea:	a10d      	add	r1, pc, #52	@ (adr r1, 801f620 <__ieee754_atan2+0x158>)
 801f5ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f5f0:	f7e0 fe5a 	bl	80002a8 <__aeabi_dsub>
 801f5f4:	e787      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f5f6:	a10a      	add	r1, pc, #40	@ (adr r1, 801f620 <__ieee754_atan2+0x158>)
 801f5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f5fc:	e783      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f5fe:	a10c      	add	r1, pc, #48	@ (adr r1, 801f630 <__ieee754_atan2+0x168>)
 801f600:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f604:	e77f      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f606:	2000      	movs	r0, #0
 801f608:	2100      	movs	r1, #0
 801f60a:	e77c      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f60c:	a10a      	add	r1, pc, #40	@ (adr r1, 801f638 <__ieee754_atan2+0x170>)
 801f60e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f612:	e778      	b.n	801f506 <__ieee754_atan2+0x3e>
 801f614:	f3af 8000 	nop.w
 801f618:	33145c07 	.word	0x33145c07
 801f61c:	3ca1a626 	.word	0x3ca1a626
 801f620:	54442d18 	.word	0x54442d18
 801f624:	400921fb 	.word	0x400921fb
 801f628:	54442d18 	.word	0x54442d18
 801f62c:	3ff921fb 	.word	0x3ff921fb
 801f630:	54442d18 	.word	0x54442d18
 801f634:	3fe921fb 	.word	0x3fe921fb
 801f638:	54442d18 	.word	0x54442d18
 801f63c:	bff921fb 	.word	0xbff921fb
 801f640:	08021fe8 	.word	0x08021fe8
 801f644:	08021fd0 	.word	0x08021fd0
 801f648:	54442d18 	.word	0x54442d18
 801f64c:	c00921fb 	.word	0xc00921fb
 801f650:	7ff00000 	.word	0x7ff00000
 801f654:	00000000 	.word	0x00000000

0801f658 <__ieee754_exp>:
 801f658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f65c:	ec55 4b10 	vmov	r4, r5, d0
 801f660:	49b1      	ldr	r1, [pc, #708]	@ (801f928 <__ieee754_exp+0x2d0>)
 801f662:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f666:	428a      	cmp	r2, r1
 801f668:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801f66c:	d936      	bls.n	801f6dc <__ieee754_exp+0x84>
 801f66e:	49af      	ldr	r1, [pc, #700]	@ (801f92c <__ieee754_exp+0x2d4>)
 801f670:	428a      	cmp	r2, r1
 801f672:	d914      	bls.n	801f69e <__ieee754_exp+0x46>
 801f674:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801f678:	4323      	orrs	r3, r4
 801f67a:	4622      	mov	r2, r4
 801f67c:	d007      	beq.n	801f68e <__ieee754_exp+0x36>
 801f67e:	462b      	mov	r3, r5
 801f680:	4620      	mov	r0, r4
 801f682:	4629      	mov	r1, r5
 801f684:	f7e0 fe12 	bl	80002ac <__adddf3>
 801f688:	4604      	mov	r4, r0
 801f68a:	460d      	mov	r5, r1
 801f68c:	e002      	b.n	801f694 <__ieee754_exp+0x3c>
 801f68e:	2e00      	cmp	r6, #0
 801f690:	f040 8118 	bne.w	801f8c4 <__ieee754_exp+0x26c>
 801f694:	ec45 4b10 	vmov	d0, r4, r5
 801f698:	b004      	add	sp, #16
 801f69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f69e:	a38c      	add	r3, pc, #560	@ (adr r3, 801f8d0 <__ieee754_exp+0x278>)
 801f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6a4:	4620      	mov	r0, r4
 801f6a6:	4629      	mov	r1, r5
 801f6a8:	f7e1 fa46 	bl	8000b38 <__aeabi_dcmpgt>
 801f6ac:	4607      	mov	r7, r0
 801f6ae:	b128      	cbz	r0, 801f6bc <__ieee754_exp+0x64>
 801f6b0:	2000      	movs	r0, #0
 801f6b2:	b004      	add	sp, #16
 801f6b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6b8:	f001 bc02 	b.w	8020ec0 <__math_oflow>
 801f6bc:	a386      	add	r3, pc, #536	@ (adr r3, 801f8d8 <__ieee754_exp+0x280>)
 801f6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6c2:	4620      	mov	r0, r4
 801f6c4:	4629      	mov	r1, r5
 801f6c6:	f7e1 fa19 	bl	8000afc <__aeabi_dcmplt>
 801f6ca:	2800      	cmp	r0, #0
 801f6cc:	f000 8087 	beq.w	801f7de <__ieee754_exp+0x186>
 801f6d0:	4638      	mov	r0, r7
 801f6d2:	b004      	add	sp, #16
 801f6d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6d8:	f001 bbea 	b.w	8020eb0 <__math_uflow>
 801f6dc:	4b94      	ldr	r3, [pc, #592]	@ (801f930 <__ieee754_exp+0x2d8>)
 801f6de:	429a      	cmp	r2, r3
 801f6e0:	f240 80a9 	bls.w	801f836 <__ieee754_exp+0x1de>
 801f6e4:	4b93      	ldr	r3, [pc, #588]	@ (801f934 <__ieee754_exp+0x2dc>)
 801f6e6:	429a      	cmp	r2, r3
 801f6e8:	d879      	bhi.n	801f7de <__ieee754_exp+0x186>
 801f6ea:	4b93      	ldr	r3, [pc, #588]	@ (801f938 <__ieee754_exp+0x2e0>)
 801f6ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801f6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6f4:	4620      	mov	r0, r4
 801f6f6:	4629      	mov	r1, r5
 801f6f8:	f7e0 fdd6 	bl	80002a8 <__aeabi_dsub>
 801f6fc:	4b8f      	ldr	r3, [pc, #572]	@ (801f93c <__ieee754_exp+0x2e4>)
 801f6fe:	00f7      	lsls	r7, r6, #3
 801f700:	443b      	add	r3, r7
 801f702:	ed93 7b00 	vldr	d7, [r3]
 801f706:	ed8d 7b00 	vstr	d7, [sp]
 801f70a:	f086 0a01 	eor.w	sl, r6, #1
 801f70e:	4680      	mov	r8, r0
 801f710:	4689      	mov	r9, r1
 801f712:	ebaa 0a06 	sub.w	sl, sl, r6
 801f716:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f71a:	4640      	mov	r0, r8
 801f71c:	4649      	mov	r1, r9
 801f71e:	f7e0 fdc3 	bl	80002a8 <__aeabi_dsub>
 801f722:	4604      	mov	r4, r0
 801f724:	460d      	mov	r5, r1
 801f726:	4622      	mov	r2, r4
 801f728:	462b      	mov	r3, r5
 801f72a:	4620      	mov	r0, r4
 801f72c:	4629      	mov	r1, r5
 801f72e:	f7e0 ff73 	bl	8000618 <__aeabi_dmul>
 801f732:	a36b      	add	r3, pc, #428	@ (adr r3, 801f8e0 <__ieee754_exp+0x288>)
 801f734:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f738:	4606      	mov	r6, r0
 801f73a:	460f      	mov	r7, r1
 801f73c:	f7e0 ff6c 	bl	8000618 <__aeabi_dmul>
 801f740:	a369      	add	r3, pc, #420	@ (adr r3, 801f8e8 <__ieee754_exp+0x290>)
 801f742:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f746:	f7e0 fdaf 	bl	80002a8 <__aeabi_dsub>
 801f74a:	4632      	mov	r2, r6
 801f74c:	463b      	mov	r3, r7
 801f74e:	f7e0 ff63 	bl	8000618 <__aeabi_dmul>
 801f752:	a367      	add	r3, pc, #412	@ (adr r3, 801f8f0 <__ieee754_exp+0x298>)
 801f754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f758:	f7e0 fda8 	bl	80002ac <__adddf3>
 801f75c:	4632      	mov	r2, r6
 801f75e:	463b      	mov	r3, r7
 801f760:	f7e0 ff5a 	bl	8000618 <__aeabi_dmul>
 801f764:	a364      	add	r3, pc, #400	@ (adr r3, 801f8f8 <__ieee754_exp+0x2a0>)
 801f766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f76a:	f7e0 fd9d 	bl	80002a8 <__aeabi_dsub>
 801f76e:	4632      	mov	r2, r6
 801f770:	463b      	mov	r3, r7
 801f772:	f7e0 ff51 	bl	8000618 <__aeabi_dmul>
 801f776:	a362      	add	r3, pc, #392	@ (adr r3, 801f900 <__ieee754_exp+0x2a8>)
 801f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f77c:	f7e0 fd96 	bl	80002ac <__adddf3>
 801f780:	4632      	mov	r2, r6
 801f782:	463b      	mov	r3, r7
 801f784:	f7e0 ff48 	bl	8000618 <__aeabi_dmul>
 801f788:	4602      	mov	r2, r0
 801f78a:	460b      	mov	r3, r1
 801f78c:	4620      	mov	r0, r4
 801f78e:	4629      	mov	r1, r5
 801f790:	f7e0 fd8a 	bl	80002a8 <__aeabi_dsub>
 801f794:	4602      	mov	r2, r0
 801f796:	460b      	mov	r3, r1
 801f798:	4606      	mov	r6, r0
 801f79a:	460f      	mov	r7, r1
 801f79c:	4620      	mov	r0, r4
 801f79e:	4629      	mov	r1, r5
 801f7a0:	f7e0 ff3a 	bl	8000618 <__aeabi_dmul>
 801f7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f7a8:	f1ba 0f00 	cmp.w	sl, #0
 801f7ac:	d15c      	bne.n	801f868 <__ieee754_exp+0x210>
 801f7ae:	2200      	movs	r2, #0
 801f7b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801f7b4:	4630      	mov	r0, r6
 801f7b6:	4639      	mov	r1, r7
 801f7b8:	f7e0 fd76 	bl	80002a8 <__aeabi_dsub>
 801f7bc:	4602      	mov	r2, r0
 801f7be:	460b      	mov	r3, r1
 801f7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7c4:	f7e1 f852 	bl	800086c <__aeabi_ddiv>
 801f7c8:	4622      	mov	r2, r4
 801f7ca:	462b      	mov	r3, r5
 801f7cc:	f7e0 fd6c 	bl	80002a8 <__aeabi_dsub>
 801f7d0:	4602      	mov	r2, r0
 801f7d2:	460b      	mov	r3, r1
 801f7d4:	2000      	movs	r0, #0
 801f7d6:	495a      	ldr	r1, [pc, #360]	@ (801f940 <__ieee754_exp+0x2e8>)
 801f7d8:	f7e0 fd66 	bl	80002a8 <__aeabi_dsub>
 801f7dc:	e754      	b.n	801f688 <__ieee754_exp+0x30>
 801f7de:	4b59      	ldr	r3, [pc, #356]	@ (801f944 <__ieee754_exp+0x2ec>)
 801f7e0:	4620      	mov	r0, r4
 801f7e2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801f7e6:	4629      	mov	r1, r5
 801f7e8:	a347      	add	r3, pc, #284	@ (adr r3, 801f908 <__ieee754_exp+0x2b0>)
 801f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7ee:	f7e0 ff13 	bl	8000618 <__aeabi_dmul>
 801f7f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f7f6:	f7e0 fd59 	bl	80002ac <__adddf3>
 801f7fa:	f7e1 f9bd 	bl	8000b78 <__aeabi_d2iz>
 801f7fe:	4682      	mov	sl, r0
 801f800:	f7e0 fea0 	bl	8000544 <__aeabi_i2d>
 801f804:	a342      	add	r3, pc, #264	@ (adr r3, 801f910 <__ieee754_exp+0x2b8>)
 801f806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f80a:	4606      	mov	r6, r0
 801f80c:	460f      	mov	r7, r1
 801f80e:	f7e0 ff03 	bl	8000618 <__aeabi_dmul>
 801f812:	4602      	mov	r2, r0
 801f814:	460b      	mov	r3, r1
 801f816:	4620      	mov	r0, r4
 801f818:	4629      	mov	r1, r5
 801f81a:	f7e0 fd45 	bl	80002a8 <__aeabi_dsub>
 801f81e:	a33e      	add	r3, pc, #248	@ (adr r3, 801f918 <__ieee754_exp+0x2c0>)
 801f820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f824:	4680      	mov	r8, r0
 801f826:	4689      	mov	r9, r1
 801f828:	4630      	mov	r0, r6
 801f82a:	4639      	mov	r1, r7
 801f82c:	f7e0 fef4 	bl	8000618 <__aeabi_dmul>
 801f830:	e9cd 0100 	strd	r0, r1, [sp]
 801f834:	e76f      	b.n	801f716 <__ieee754_exp+0xbe>
 801f836:	4b44      	ldr	r3, [pc, #272]	@ (801f948 <__ieee754_exp+0x2f0>)
 801f838:	429a      	cmp	r2, r3
 801f83a:	d810      	bhi.n	801f85e <__ieee754_exp+0x206>
 801f83c:	a338      	add	r3, pc, #224	@ (adr r3, 801f920 <__ieee754_exp+0x2c8>)
 801f83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f842:	4620      	mov	r0, r4
 801f844:	4629      	mov	r1, r5
 801f846:	f7e0 fd31 	bl	80002ac <__adddf3>
 801f84a:	4b3d      	ldr	r3, [pc, #244]	@ (801f940 <__ieee754_exp+0x2e8>)
 801f84c:	2200      	movs	r2, #0
 801f84e:	f7e1 f973 	bl	8000b38 <__aeabi_dcmpgt>
 801f852:	b138      	cbz	r0, 801f864 <__ieee754_exp+0x20c>
 801f854:	4b3a      	ldr	r3, [pc, #232]	@ (801f940 <__ieee754_exp+0x2e8>)
 801f856:	2200      	movs	r2, #0
 801f858:	4620      	mov	r0, r4
 801f85a:	4629      	mov	r1, r5
 801f85c:	e712      	b.n	801f684 <__ieee754_exp+0x2c>
 801f85e:	f04f 0a00 	mov.w	sl, #0
 801f862:	e760      	b.n	801f726 <__ieee754_exp+0xce>
 801f864:	4682      	mov	sl, r0
 801f866:	e75e      	b.n	801f726 <__ieee754_exp+0xce>
 801f868:	4632      	mov	r2, r6
 801f86a:	463b      	mov	r3, r7
 801f86c:	2000      	movs	r0, #0
 801f86e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801f872:	f7e0 fd19 	bl	80002a8 <__aeabi_dsub>
 801f876:	4602      	mov	r2, r0
 801f878:	460b      	mov	r3, r1
 801f87a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f87e:	f7e0 fff5 	bl	800086c <__aeabi_ddiv>
 801f882:	4602      	mov	r2, r0
 801f884:	460b      	mov	r3, r1
 801f886:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f88a:	f7e0 fd0d 	bl	80002a8 <__aeabi_dsub>
 801f88e:	4642      	mov	r2, r8
 801f890:	464b      	mov	r3, r9
 801f892:	f7e0 fd09 	bl	80002a8 <__aeabi_dsub>
 801f896:	4602      	mov	r2, r0
 801f898:	460b      	mov	r3, r1
 801f89a:	2000      	movs	r0, #0
 801f89c:	4928      	ldr	r1, [pc, #160]	@ (801f940 <__ieee754_exp+0x2e8>)
 801f89e:	f7e0 fd03 	bl	80002a8 <__aeabi_dsub>
 801f8a2:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 801f8a6:	4592      	cmp	sl, r2
 801f8a8:	db02      	blt.n	801f8b0 <__ieee754_exp+0x258>
 801f8aa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801f8ae:	e6eb      	b.n	801f688 <__ieee754_exp+0x30>
 801f8b0:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 801f8b4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801f8b8:	2200      	movs	r2, #0
 801f8ba:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 801f8be:	f7e0 feab 	bl	8000618 <__aeabi_dmul>
 801f8c2:	e6e1      	b.n	801f688 <__ieee754_exp+0x30>
 801f8c4:	2400      	movs	r4, #0
 801f8c6:	2500      	movs	r5, #0
 801f8c8:	e6e4      	b.n	801f694 <__ieee754_exp+0x3c>
 801f8ca:	bf00      	nop
 801f8cc:	f3af 8000 	nop.w
 801f8d0:	fefa39ef 	.word	0xfefa39ef
 801f8d4:	40862e42 	.word	0x40862e42
 801f8d8:	d52d3051 	.word	0xd52d3051
 801f8dc:	c0874910 	.word	0xc0874910
 801f8e0:	72bea4d0 	.word	0x72bea4d0
 801f8e4:	3e663769 	.word	0x3e663769
 801f8e8:	c5d26bf1 	.word	0xc5d26bf1
 801f8ec:	3ebbbd41 	.word	0x3ebbbd41
 801f8f0:	af25de2c 	.word	0xaf25de2c
 801f8f4:	3f11566a 	.word	0x3f11566a
 801f8f8:	16bebd93 	.word	0x16bebd93
 801f8fc:	3f66c16c 	.word	0x3f66c16c
 801f900:	5555553e 	.word	0x5555553e
 801f904:	3fc55555 	.word	0x3fc55555
 801f908:	652b82fe 	.word	0x652b82fe
 801f90c:	3ff71547 	.word	0x3ff71547
 801f910:	fee00000 	.word	0xfee00000
 801f914:	3fe62e42 	.word	0x3fe62e42
 801f918:	35793c76 	.word	0x35793c76
 801f91c:	3dea39ef 	.word	0x3dea39ef
 801f920:	8800759c 	.word	0x8800759c
 801f924:	7e37e43c 	.word	0x7e37e43c
 801f928:	40862e41 	.word	0x40862e41
 801f92c:	7fefffff 	.word	0x7fefffff
 801f930:	3fd62e42 	.word	0x3fd62e42
 801f934:	3ff0a2b1 	.word	0x3ff0a2b1
 801f938:	08022010 	.word	0x08022010
 801f93c:	08022000 	.word	0x08022000
 801f940:	3ff00000 	.word	0x3ff00000
 801f944:	08022020 	.word	0x08022020
 801f948:	3defffff 	.word	0x3defffff

0801f94c <__ieee754_fmod>:
 801f94c:	ec53 2b11 	vmov	r2, r3, d1
 801f950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f954:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 801f958:	ea52 0408 	orrs.w	r4, r2, r8
 801f95c:	ec51 0b10 	vmov	r0, r1, d0
 801f960:	461e      	mov	r6, r3
 801f962:	4696      	mov	lr, r2
 801f964:	4694      	mov	ip, r2
 801f966:	d00c      	beq.n	801f982 <__ieee754_fmod+0x36>
 801f968:	4d76      	ldr	r5, [pc, #472]	@ (801fb44 <__ieee754_fmod+0x1f8>)
 801f96a:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 801f96e:	45a9      	cmp	r9, r5
 801f970:	460c      	mov	r4, r1
 801f972:	d806      	bhi.n	801f982 <__ieee754_fmod+0x36>
 801f974:	4255      	negs	r5, r2
 801f976:	4f74      	ldr	r7, [pc, #464]	@ (801fb48 <__ieee754_fmod+0x1fc>)
 801f978:	4315      	orrs	r5, r2
 801f97a:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 801f97e:	42bd      	cmp	r5, r7
 801f980:	d909      	bls.n	801f996 <__ieee754_fmod+0x4a>
 801f982:	f7e0 fe49 	bl	8000618 <__aeabi_dmul>
 801f986:	4602      	mov	r2, r0
 801f988:	460b      	mov	r3, r1
 801f98a:	f7e0 ff6f 	bl	800086c <__aeabi_ddiv>
 801f98e:	ec41 0b10 	vmov	d0, r0, r1
 801f992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f996:	45c1      	cmp	r9, r8
 801f998:	4682      	mov	sl, r0
 801f99a:	4607      	mov	r7, r0
 801f99c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 801f9a0:	dc09      	bgt.n	801f9b6 <__ieee754_fmod+0x6a>
 801f9a2:	dbf4      	blt.n	801f98e <__ieee754_fmod+0x42>
 801f9a4:	4282      	cmp	r2, r0
 801f9a6:	d8f2      	bhi.n	801f98e <__ieee754_fmod+0x42>
 801f9a8:	d105      	bne.n	801f9b6 <__ieee754_fmod+0x6a>
 801f9aa:	4b68      	ldr	r3, [pc, #416]	@ (801fb4c <__ieee754_fmod+0x200>)
 801f9ac:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801f9b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f9b4:	e7eb      	b.n	801f98e <__ieee754_fmod+0x42>
 801f9b6:	4964      	ldr	r1, [pc, #400]	@ (801fb48 <__ieee754_fmod+0x1fc>)
 801f9b8:	420c      	tst	r4, r1
 801f9ba:	d148      	bne.n	801fa4e <__ieee754_fmod+0x102>
 801f9bc:	f1b9 0f00 	cmp.w	r9, #0
 801f9c0:	d13d      	bne.n	801fa3e <__ieee754_fmod+0xf2>
 801f9c2:	4a63      	ldr	r2, [pc, #396]	@ (801fb50 <__ieee754_fmod+0x204>)
 801f9c4:	4653      	mov	r3, sl
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	dc36      	bgt.n	801fa38 <__ieee754_fmod+0xec>
 801f9ca:	420e      	tst	r6, r1
 801f9cc:	d14f      	bne.n	801fa6e <__ieee754_fmod+0x122>
 801f9ce:	f1b8 0f00 	cmp.w	r8, #0
 801f9d2:	d144      	bne.n	801fa5e <__ieee754_fmod+0x112>
 801f9d4:	4b5e      	ldr	r3, [pc, #376]	@ (801fb50 <__ieee754_fmod+0x204>)
 801f9d6:	4671      	mov	r1, lr
 801f9d8:	2900      	cmp	r1, #0
 801f9da:	dc3d      	bgt.n	801fa58 <__ieee754_fmod+0x10c>
 801f9dc:	485d      	ldr	r0, [pc, #372]	@ (801fb54 <__ieee754_fmod+0x208>)
 801f9de:	4282      	cmp	r2, r0
 801f9e0:	db4a      	blt.n	801fa78 <__ieee754_fmod+0x12c>
 801f9e2:	f3c4 0113 	ubfx	r1, r4, #0, #20
 801f9e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801f9ea:	485a      	ldr	r0, [pc, #360]	@ (801fb54 <__ieee754_fmod+0x208>)
 801f9ec:	4283      	cmp	r3, r0
 801f9ee:	db57      	blt.n	801faa0 <__ieee754_fmod+0x154>
 801f9f0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801f9f4:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 801f9f8:	1ad0      	subs	r0, r2, r3
 801f9fa:	1b8a      	subs	r2, r1, r6
 801f9fc:	eba7 040c 	sub.w	r4, r7, ip
 801fa00:	2800      	cmp	r0, #0
 801fa02:	d162      	bne.n	801faca <__ieee754_fmod+0x17e>
 801fa04:	4567      	cmp	r7, ip
 801fa06:	bf38      	it	cc
 801fa08:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801fa0c:	2a00      	cmp	r2, #0
 801fa0e:	bfbc      	itt	lt
 801fa10:	463c      	movlt	r4, r7
 801fa12:	460a      	movlt	r2, r1
 801fa14:	ea52 0104 	orrs.w	r1, r2, r4
 801fa18:	d0c7      	beq.n	801f9aa <__ieee754_fmod+0x5e>
 801fa1a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 801fa1e:	db69      	blt.n	801faf4 <__ieee754_fmod+0x1a8>
 801fa20:	494c      	ldr	r1, [pc, #304]	@ (801fb54 <__ieee754_fmod+0x208>)
 801fa22:	428b      	cmp	r3, r1
 801fa24:	db6c      	blt.n	801fb00 <__ieee754_fmod+0x1b4>
 801fa26:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 801fa2a:	432a      	orrs	r2, r5
 801fa2c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 801fa30:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 801fa34:	4620      	mov	r0, r4
 801fa36:	e7aa      	b.n	801f98e <__ieee754_fmod+0x42>
 801fa38:	3a01      	subs	r2, #1
 801fa3a:	005b      	lsls	r3, r3, #1
 801fa3c:	e7c3      	b.n	801f9c6 <__ieee754_fmod+0x7a>
 801fa3e:	4a45      	ldr	r2, [pc, #276]	@ (801fb54 <__ieee754_fmod+0x208>)
 801fa40:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	ddc0      	ble.n	801f9ca <__ieee754_fmod+0x7e>
 801fa48:	3a01      	subs	r2, #1
 801fa4a:	005b      	lsls	r3, r3, #1
 801fa4c:	e7fa      	b.n	801fa44 <__ieee754_fmod+0xf8>
 801fa4e:	ea4f 5229 	mov.w	r2, r9, asr #20
 801fa52:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801fa56:	e7b8      	b.n	801f9ca <__ieee754_fmod+0x7e>
 801fa58:	3b01      	subs	r3, #1
 801fa5a:	0049      	lsls	r1, r1, #1
 801fa5c:	e7bc      	b.n	801f9d8 <__ieee754_fmod+0x8c>
 801fa5e:	4b3d      	ldr	r3, [pc, #244]	@ (801fb54 <__ieee754_fmod+0x208>)
 801fa60:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 801fa64:	2900      	cmp	r1, #0
 801fa66:	ddb9      	ble.n	801f9dc <__ieee754_fmod+0x90>
 801fa68:	3b01      	subs	r3, #1
 801fa6a:	0049      	lsls	r1, r1, #1
 801fa6c:	e7fa      	b.n	801fa64 <__ieee754_fmod+0x118>
 801fa6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801fa72:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801fa76:	e7b1      	b.n	801f9dc <__ieee754_fmod+0x90>
 801fa78:	1a80      	subs	r0, r0, r2
 801fa7a:	281f      	cmp	r0, #31
 801fa7c:	dc0a      	bgt.n	801fa94 <__ieee754_fmod+0x148>
 801fa7e:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 801fa82:	fa09 f900 	lsl.w	r9, r9, r0
 801fa86:	fa2a f101 	lsr.w	r1, sl, r1
 801fa8a:	ea41 0109 	orr.w	r1, r1, r9
 801fa8e:	fa0a f700 	lsl.w	r7, sl, r0
 801fa92:	e7aa      	b.n	801f9ea <__ieee754_fmod+0x9e>
 801fa94:	4930      	ldr	r1, [pc, #192]	@ (801fb58 <__ieee754_fmod+0x20c>)
 801fa96:	1a89      	subs	r1, r1, r2
 801fa98:	fa0a f101 	lsl.w	r1, sl, r1
 801fa9c:	2700      	movs	r7, #0
 801fa9e:	e7a4      	b.n	801f9ea <__ieee754_fmod+0x9e>
 801faa0:	1ac0      	subs	r0, r0, r3
 801faa2:	281f      	cmp	r0, #31
 801faa4:	dc0a      	bgt.n	801fabc <__ieee754_fmod+0x170>
 801faa6:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 801faaa:	fa08 f800 	lsl.w	r8, r8, r0
 801faae:	fa2e f606 	lsr.w	r6, lr, r6
 801fab2:	ea46 0608 	orr.w	r6, r6, r8
 801fab6:	fa0e fc00 	lsl.w	ip, lr, r0
 801faba:	e79d      	b.n	801f9f8 <__ieee754_fmod+0xac>
 801fabc:	4e26      	ldr	r6, [pc, #152]	@ (801fb58 <__ieee754_fmod+0x20c>)
 801fabe:	1af6      	subs	r6, r6, r3
 801fac0:	fa0e f606 	lsl.w	r6, lr, r6
 801fac4:	f04f 0c00 	mov.w	ip, #0
 801fac8:	e796      	b.n	801f9f8 <__ieee754_fmod+0xac>
 801faca:	4567      	cmp	r7, ip
 801facc:	bf38      	it	cc
 801face:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801fad2:	2a00      	cmp	r2, #0
 801fad4:	da05      	bge.n	801fae2 <__ieee754_fmod+0x196>
 801fad6:	0ffa      	lsrs	r2, r7, #31
 801fad8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801fadc:	007f      	lsls	r7, r7, #1
 801fade:	3801      	subs	r0, #1
 801fae0:	e78b      	b.n	801f9fa <__ieee754_fmod+0xae>
 801fae2:	ea52 0104 	orrs.w	r1, r2, r4
 801fae6:	f43f af60 	beq.w	801f9aa <__ieee754_fmod+0x5e>
 801faea:	0fe1      	lsrs	r1, r4, #31
 801faec:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801faf0:	0067      	lsls	r7, r4, #1
 801faf2:	e7f4      	b.n	801fade <__ieee754_fmod+0x192>
 801faf4:	0fe1      	lsrs	r1, r4, #31
 801faf6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801fafa:	0064      	lsls	r4, r4, #1
 801fafc:	3b01      	subs	r3, #1
 801fafe:	e78c      	b.n	801fa1a <__ieee754_fmod+0xce>
 801fb00:	1ac9      	subs	r1, r1, r3
 801fb02:	2914      	cmp	r1, #20
 801fb04:	dc0a      	bgt.n	801fb1c <__ieee754_fmod+0x1d0>
 801fb06:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 801fb0a:	fa02 f303 	lsl.w	r3, r2, r3
 801fb0e:	40cc      	lsrs	r4, r1
 801fb10:	4323      	orrs	r3, r4
 801fb12:	410a      	asrs	r2, r1
 801fb14:	ea42 0105 	orr.w	r1, r2, r5
 801fb18:	4618      	mov	r0, r3
 801fb1a:	e738      	b.n	801f98e <__ieee754_fmod+0x42>
 801fb1c:	291f      	cmp	r1, #31
 801fb1e:	dc07      	bgt.n	801fb30 <__ieee754_fmod+0x1e4>
 801fb20:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 801fb24:	40cc      	lsrs	r4, r1
 801fb26:	fa02 f303 	lsl.w	r3, r2, r3
 801fb2a:	4323      	orrs	r3, r4
 801fb2c:	462a      	mov	r2, r5
 801fb2e:	e7f1      	b.n	801fb14 <__ieee754_fmod+0x1c8>
 801fb30:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 801fb34:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801fb38:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 801fb3c:	33e2      	adds	r3, #226	@ 0xe2
 801fb3e:	fa42 f303 	asr.w	r3, r2, r3
 801fb42:	e7f3      	b.n	801fb2c <__ieee754_fmod+0x1e0>
 801fb44:	7fefffff 	.word	0x7fefffff
 801fb48:	7ff00000 	.word	0x7ff00000
 801fb4c:	08022030 	.word	0x08022030
 801fb50:	fffffbed 	.word	0xfffffbed
 801fb54:	fffffc02 	.word	0xfffffc02
 801fb58:	fffffbe2 	.word	0xfffffbe2
 801fb5c:	00000000 	.word	0x00000000

0801fb60 <__ieee754_log>:
 801fb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb64:	ec51 0b10 	vmov	r0, r1, d0
 801fb68:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801fb6c:	b087      	sub	sp, #28
 801fb6e:	460d      	mov	r5, r1
 801fb70:	da26      	bge.n	801fbc0 <__ieee754_log+0x60>
 801fb72:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801fb76:	4303      	orrs	r3, r0
 801fb78:	4602      	mov	r2, r0
 801fb7a:	d10a      	bne.n	801fb92 <__ieee754_log+0x32>
 801fb7c:	49ce      	ldr	r1, [pc, #824]	@ (801feb8 <__ieee754_log+0x358>)
 801fb7e:	2200      	movs	r2, #0
 801fb80:	2300      	movs	r3, #0
 801fb82:	2000      	movs	r0, #0
 801fb84:	f7e0 fe72 	bl	800086c <__aeabi_ddiv>
 801fb88:	ec41 0b10 	vmov	d0, r0, r1
 801fb8c:	b007      	add	sp, #28
 801fb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb92:	2900      	cmp	r1, #0
 801fb94:	da05      	bge.n	801fba2 <__ieee754_log+0x42>
 801fb96:	460b      	mov	r3, r1
 801fb98:	f7e0 fb86 	bl	80002a8 <__aeabi_dsub>
 801fb9c:	2200      	movs	r2, #0
 801fb9e:	2300      	movs	r3, #0
 801fba0:	e7f0      	b.n	801fb84 <__ieee754_log+0x24>
 801fba2:	4bc6      	ldr	r3, [pc, #792]	@ (801febc <__ieee754_log+0x35c>)
 801fba4:	2200      	movs	r2, #0
 801fba6:	f7e0 fd37 	bl	8000618 <__aeabi_dmul>
 801fbaa:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 801fbae:	460d      	mov	r5, r1
 801fbb0:	4ac3      	ldr	r2, [pc, #780]	@ (801fec0 <__ieee754_log+0x360>)
 801fbb2:	4295      	cmp	r5, r2
 801fbb4:	dd06      	ble.n	801fbc4 <__ieee754_log+0x64>
 801fbb6:	4602      	mov	r2, r0
 801fbb8:	460b      	mov	r3, r1
 801fbba:	f7e0 fb77 	bl	80002ac <__adddf3>
 801fbbe:	e7e3      	b.n	801fb88 <__ieee754_log+0x28>
 801fbc0:	2300      	movs	r3, #0
 801fbc2:	e7f5      	b.n	801fbb0 <__ieee754_log+0x50>
 801fbc4:	152c      	asrs	r4, r5, #20
 801fbc6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801fbca:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801fbce:	441c      	add	r4, r3
 801fbd0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 801fbd4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 801fbd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801fbdc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 801fbe0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 801fbe4:	ea42 0105 	orr.w	r1, r2, r5
 801fbe8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801fbec:	2200      	movs	r2, #0
 801fbee:	4bb5      	ldr	r3, [pc, #724]	@ (801fec4 <__ieee754_log+0x364>)
 801fbf0:	f7e0 fb5a 	bl	80002a8 <__aeabi_dsub>
 801fbf4:	1cab      	adds	r3, r5, #2
 801fbf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fbfa:	2b02      	cmp	r3, #2
 801fbfc:	4682      	mov	sl, r0
 801fbfe:	468b      	mov	fp, r1
 801fc00:	f04f 0200 	mov.w	r2, #0
 801fc04:	dc53      	bgt.n	801fcae <__ieee754_log+0x14e>
 801fc06:	2300      	movs	r3, #0
 801fc08:	f7e0 ff6e 	bl	8000ae8 <__aeabi_dcmpeq>
 801fc0c:	b1d0      	cbz	r0, 801fc44 <__ieee754_log+0xe4>
 801fc0e:	2c00      	cmp	r4, #0
 801fc10:	f000 8120 	beq.w	801fe54 <__ieee754_log+0x2f4>
 801fc14:	4620      	mov	r0, r4
 801fc16:	f7e0 fc95 	bl	8000544 <__aeabi_i2d>
 801fc1a:	a391      	add	r3, pc, #580	@ (adr r3, 801fe60 <__ieee754_log+0x300>)
 801fc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc20:	4606      	mov	r6, r0
 801fc22:	460f      	mov	r7, r1
 801fc24:	f7e0 fcf8 	bl	8000618 <__aeabi_dmul>
 801fc28:	a38f      	add	r3, pc, #572	@ (adr r3, 801fe68 <__ieee754_log+0x308>)
 801fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc2e:	4604      	mov	r4, r0
 801fc30:	460d      	mov	r5, r1
 801fc32:	4630      	mov	r0, r6
 801fc34:	4639      	mov	r1, r7
 801fc36:	f7e0 fcef 	bl	8000618 <__aeabi_dmul>
 801fc3a:	4602      	mov	r2, r0
 801fc3c:	460b      	mov	r3, r1
 801fc3e:	4620      	mov	r0, r4
 801fc40:	4629      	mov	r1, r5
 801fc42:	e7ba      	b.n	801fbba <__ieee754_log+0x5a>
 801fc44:	a38a      	add	r3, pc, #552	@ (adr r3, 801fe70 <__ieee754_log+0x310>)
 801fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc4a:	4650      	mov	r0, sl
 801fc4c:	4659      	mov	r1, fp
 801fc4e:	f7e0 fce3 	bl	8000618 <__aeabi_dmul>
 801fc52:	4602      	mov	r2, r0
 801fc54:	460b      	mov	r3, r1
 801fc56:	2000      	movs	r0, #0
 801fc58:	499b      	ldr	r1, [pc, #620]	@ (801fec8 <__ieee754_log+0x368>)
 801fc5a:	f7e0 fb25 	bl	80002a8 <__aeabi_dsub>
 801fc5e:	4652      	mov	r2, sl
 801fc60:	4606      	mov	r6, r0
 801fc62:	460f      	mov	r7, r1
 801fc64:	465b      	mov	r3, fp
 801fc66:	4650      	mov	r0, sl
 801fc68:	4659      	mov	r1, fp
 801fc6a:	f7e0 fcd5 	bl	8000618 <__aeabi_dmul>
 801fc6e:	4602      	mov	r2, r0
 801fc70:	460b      	mov	r3, r1
 801fc72:	4630      	mov	r0, r6
 801fc74:	4639      	mov	r1, r7
 801fc76:	f7e0 fccf 	bl	8000618 <__aeabi_dmul>
 801fc7a:	4606      	mov	r6, r0
 801fc7c:	460f      	mov	r7, r1
 801fc7e:	b914      	cbnz	r4, 801fc86 <__ieee754_log+0x126>
 801fc80:	4632      	mov	r2, r6
 801fc82:	463b      	mov	r3, r7
 801fc84:	e0a0      	b.n	801fdc8 <__ieee754_log+0x268>
 801fc86:	4620      	mov	r0, r4
 801fc88:	f7e0 fc5c 	bl	8000544 <__aeabi_i2d>
 801fc8c:	a374      	add	r3, pc, #464	@ (adr r3, 801fe60 <__ieee754_log+0x300>)
 801fc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc92:	4680      	mov	r8, r0
 801fc94:	4689      	mov	r9, r1
 801fc96:	f7e0 fcbf 	bl	8000618 <__aeabi_dmul>
 801fc9a:	a373      	add	r3, pc, #460	@ (adr r3, 801fe68 <__ieee754_log+0x308>)
 801fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fca0:	4604      	mov	r4, r0
 801fca2:	460d      	mov	r5, r1
 801fca4:	4640      	mov	r0, r8
 801fca6:	4649      	mov	r1, r9
 801fca8:	f7e0 fcb6 	bl	8000618 <__aeabi_dmul>
 801fcac:	e0a5      	b.n	801fdfa <__ieee754_log+0x29a>
 801fcae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801fcb2:	f7e0 fafb 	bl	80002ac <__adddf3>
 801fcb6:	4602      	mov	r2, r0
 801fcb8:	460b      	mov	r3, r1
 801fcba:	4650      	mov	r0, sl
 801fcbc:	4659      	mov	r1, fp
 801fcbe:	f7e0 fdd5 	bl	800086c <__aeabi_ddiv>
 801fcc2:	e9cd 0100 	strd	r0, r1, [sp]
 801fcc6:	4620      	mov	r0, r4
 801fcc8:	f7e0 fc3c 	bl	8000544 <__aeabi_i2d>
 801fccc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fcd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fcd4:	4610      	mov	r0, r2
 801fcd6:	4619      	mov	r1, r3
 801fcd8:	f7e0 fc9e 	bl	8000618 <__aeabi_dmul>
 801fcdc:	4602      	mov	r2, r0
 801fcde:	460b      	mov	r3, r1
 801fce0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801fce4:	f7e0 fc98 	bl	8000618 <__aeabi_dmul>
 801fce8:	a363      	add	r3, pc, #396	@ (adr r3, 801fe78 <__ieee754_log+0x318>)
 801fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcee:	4680      	mov	r8, r0
 801fcf0:	4689      	mov	r9, r1
 801fcf2:	f7e0 fc91 	bl	8000618 <__aeabi_dmul>
 801fcf6:	a362      	add	r3, pc, #392	@ (adr r3, 801fe80 <__ieee754_log+0x320>)
 801fcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcfc:	f7e0 fad6 	bl	80002ac <__adddf3>
 801fd00:	4642      	mov	r2, r8
 801fd02:	464b      	mov	r3, r9
 801fd04:	f7e0 fc88 	bl	8000618 <__aeabi_dmul>
 801fd08:	a35f      	add	r3, pc, #380	@ (adr r3, 801fe88 <__ieee754_log+0x328>)
 801fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd0e:	f7e0 facd 	bl	80002ac <__adddf3>
 801fd12:	4642      	mov	r2, r8
 801fd14:	464b      	mov	r3, r9
 801fd16:	f7e0 fc7f 	bl	8000618 <__aeabi_dmul>
 801fd1a:	a35d      	add	r3, pc, #372	@ (adr r3, 801fe90 <__ieee754_log+0x330>)
 801fd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd20:	f7e0 fac4 	bl	80002ac <__adddf3>
 801fd24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fd28:	f7e0 fc76 	bl	8000618 <__aeabi_dmul>
 801fd2c:	a35a      	add	r3, pc, #360	@ (adr r3, 801fe98 <__ieee754_log+0x338>)
 801fd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fd36:	4640      	mov	r0, r8
 801fd38:	4649      	mov	r1, r9
 801fd3a:	f7e0 fc6d 	bl	8000618 <__aeabi_dmul>
 801fd3e:	a358      	add	r3, pc, #352	@ (adr r3, 801fea0 <__ieee754_log+0x340>)
 801fd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd44:	f7e0 fab2 	bl	80002ac <__adddf3>
 801fd48:	4642      	mov	r2, r8
 801fd4a:	464b      	mov	r3, r9
 801fd4c:	f7e0 fc64 	bl	8000618 <__aeabi_dmul>
 801fd50:	a355      	add	r3, pc, #340	@ (adr r3, 801fea8 <__ieee754_log+0x348>)
 801fd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd56:	f7e0 faa9 	bl	80002ac <__adddf3>
 801fd5a:	4642      	mov	r2, r8
 801fd5c:	464b      	mov	r3, r9
 801fd5e:	f7e0 fc5b 	bl	8000618 <__aeabi_dmul>
 801fd62:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 801fd66:	4602      	mov	r2, r0
 801fd68:	460b      	mov	r3, r1
 801fd6a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801fd6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801fd72:	f7e0 fa9b 	bl	80002ac <__adddf3>
 801fd76:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801fd7a:	3551      	adds	r5, #81	@ 0x51
 801fd7c:	4335      	orrs	r5, r6
 801fd7e:	2d00      	cmp	r5, #0
 801fd80:	4680      	mov	r8, r0
 801fd82:	4689      	mov	r9, r1
 801fd84:	dd48      	ble.n	801fe18 <__ieee754_log+0x2b8>
 801fd86:	4b50      	ldr	r3, [pc, #320]	@ (801fec8 <__ieee754_log+0x368>)
 801fd88:	2200      	movs	r2, #0
 801fd8a:	4650      	mov	r0, sl
 801fd8c:	4659      	mov	r1, fp
 801fd8e:	f7e0 fc43 	bl	8000618 <__aeabi_dmul>
 801fd92:	4652      	mov	r2, sl
 801fd94:	465b      	mov	r3, fp
 801fd96:	f7e0 fc3f 	bl	8000618 <__aeabi_dmul>
 801fd9a:	4602      	mov	r2, r0
 801fd9c:	460b      	mov	r3, r1
 801fd9e:	4606      	mov	r6, r0
 801fda0:	460f      	mov	r7, r1
 801fda2:	4640      	mov	r0, r8
 801fda4:	4649      	mov	r1, r9
 801fda6:	f7e0 fa81 	bl	80002ac <__adddf3>
 801fdaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fdae:	f7e0 fc33 	bl	8000618 <__aeabi_dmul>
 801fdb2:	4680      	mov	r8, r0
 801fdb4:	4689      	mov	r9, r1
 801fdb6:	b964      	cbnz	r4, 801fdd2 <__ieee754_log+0x272>
 801fdb8:	4602      	mov	r2, r0
 801fdba:	460b      	mov	r3, r1
 801fdbc:	4630      	mov	r0, r6
 801fdbe:	4639      	mov	r1, r7
 801fdc0:	f7e0 fa72 	bl	80002a8 <__aeabi_dsub>
 801fdc4:	4602      	mov	r2, r0
 801fdc6:	460b      	mov	r3, r1
 801fdc8:	4650      	mov	r0, sl
 801fdca:	4659      	mov	r1, fp
 801fdcc:	f7e0 fa6c 	bl	80002a8 <__aeabi_dsub>
 801fdd0:	e6da      	b.n	801fb88 <__ieee754_log+0x28>
 801fdd2:	a323      	add	r3, pc, #140	@ (adr r3, 801fe60 <__ieee754_log+0x300>)
 801fdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fddc:	f7e0 fc1c 	bl	8000618 <__aeabi_dmul>
 801fde0:	a321      	add	r3, pc, #132	@ (adr r3, 801fe68 <__ieee754_log+0x308>)
 801fde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fde6:	4604      	mov	r4, r0
 801fde8:	460d      	mov	r5, r1
 801fdea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fdee:	f7e0 fc13 	bl	8000618 <__aeabi_dmul>
 801fdf2:	4642      	mov	r2, r8
 801fdf4:	464b      	mov	r3, r9
 801fdf6:	f7e0 fa59 	bl	80002ac <__adddf3>
 801fdfa:	4602      	mov	r2, r0
 801fdfc:	460b      	mov	r3, r1
 801fdfe:	4630      	mov	r0, r6
 801fe00:	4639      	mov	r1, r7
 801fe02:	f7e0 fa51 	bl	80002a8 <__aeabi_dsub>
 801fe06:	4652      	mov	r2, sl
 801fe08:	465b      	mov	r3, fp
 801fe0a:	f7e0 fa4d 	bl	80002a8 <__aeabi_dsub>
 801fe0e:	4602      	mov	r2, r0
 801fe10:	460b      	mov	r3, r1
 801fe12:	4620      	mov	r0, r4
 801fe14:	4629      	mov	r1, r5
 801fe16:	e7d9      	b.n	801fdcc <__ieee754_log+0x26c>
 801fe18:	4602      	mov	r2, r0
 801fe1a:	460b      	mov	r3, r1
 801fe1c:	4650      	mov	r0, sl
 801fe1e:	4659      	mov	r1, fp
 801fe20:	f7e0 fa42 	bl	80002a8 <__aeabi_dsub>
 801fe24:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fe28:	f7e0 fbf6 	bl	8000618 <__aeabi_dmul>
 801fe2c:	4606      	mov	r6, r0
 801fe2e:	460f      	mov	r7, r1
 801fe30:	2c00      	cmp	r4, #0
 801fe32:	f43f af25 	beq.w	801fc80 <__ieee754_log+0x120>
 801fe36:	a30a      	add	r3, pc, #40	@ (adr r3, 801fe60 <__ieee754_log+0x300>)
 801fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fe40:	f7e0 fbea 	bl	8000618 <__aeabi_dmul>
 801fe44:	a308      	add	r3, pc, #32	@ (adr r3, 801fe68 <__ieee754_log+0x308>)
 801fe46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe4a:	4604      	mov	r4, r0
 801fe4c:	460d      	mov	r5, r1
 801fe4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fe52:	e729      	b.n	801fca8 <__ieee754_log+0x148>
 801fe54:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801feb0 <__ieee754_log+0x350>
 801fe58:	e698      	b.n	801fb8c <__ieee754_log+0x2c>
 801fe5a:	bf00      	nop
 801fe5c:	f3af 8000 	nop.w
 801fe60:	fee00000 	.word	0xfee00000
 801fe64:	3fe62e42 	.word	0x3fe62e42
 801fe68:	35793c76 	.word	0x35793c76
 801fe6c:	3dea39ef 	.word	0x3dea39ef
 801fe70:	55555555 	.word	0x55555555
 801fe74:	3fd55555 	.word	0x3fd55555
 801fe78:	df3e5244 	.word	0xdf3e5244
 801fe7c:	3fc2f112 	.word	0x3fc2f112
 801fe80:	96cb03de 	.word	0x96cb03de
 801fe84:	3fc74664 	.word	0x3fc74664
 801fe88:	94229359 	.word	0x94229359
 801fe8c:	3fd24924 	.word	0x3fd24924
 801fe90:	55555593 	.word	0x55555593
 801fe94:	3fe55555 	.word	0x3fe55555
 801fe98:	d078c69f 	.word	0xd078c69f
 801fe9c:	3fc39a09 	.word	0x3fc39a09
 801fea0:	1d8e78af 	.word	0x1d8e78af
 801fea4:	3fcc71c5 	.word	0x3fcc71c5
 801fea8:	9997fa04 	.word	0x9997fa04
 801feac:	3fd99999 	.word	0x3fd99999
	...
 801feb8:	c3500000 	.word	0xc3500000
 801febc:	43500000 	.word	0x43500000
 801fec0:	7fefffff 	.word	0x7fefffff
 801fec4:	3ff00000 	.word	0x3ff00000
 801fec8:	3fe00000 	.word	0x3fe00000
 801fecc:	00000000 	.word	0x00000000

0801fed0 <__ieee754_pow>:
 801fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed4:	b091      	sub	sp, #68	@ 0x44
 801fed6:	ed8d 1b00 	vstr	d1, [sp]
 801feda:	e9dd 1900 	ldrd	r1, r9, [sp]
 801fede:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801fee2:	ea5a 0001 	orrs.w	r0, sl, r1
 801fee6:	ec57 6b10 	vmov	r6, r7, d0
 801feea:	d113      	bne.n	801ff14 <__ieee754_pow+0x44>
 801feec:	19b3      	adds	r3, r6, r6
 801feee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801fef2:	4152      	adcs	r2, r2
 801fef4:	4298      	cmp	r0, r3
 801fef6:	4b9a      	ldr	r3, [pc, #616]	@ (8020160 <__ieee754_pow+0x290>)
 801fef8:	4193      	sbcs	r3, r2
 801fefa:	f080 84ee 	bcs.w	80208da <__ieee754_pow+0xa0a>
 801fefe:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ff02:	4630      	mov	r0, r6
 801ff04:	4639      	mov	r1, r7
 801ff06:	f7e0 f9d1 	bl	80002ac <__adddf3>
 801ff0a:	ec41 0b10 	vmov	d0, r0, r1
 801ff0e:	b011      	add	sp, #68	@ 0x44
 801ff10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff14:	4a93      	ldr	r2, [pc, #588]	@ (8020164 <__ieee754_pow+0x294>)
 801ff16:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 801ff1a:	4295      	cmp	r5, r2
 801ff1c:	46b8      	mov	r8, r7
 801ff1e:	4633      	mov	r3, r6
 801ff20:	d80a      	bhi.n	801ff38 <__ieee754_pow+0x68>
 801ff22:	d104      	bne.n	801ff2e <__ieee754_pow+0x5e>
 801ff24:	2e00      	cmp	r6, #0
 801ff26:	d1ea      	bne.n	801fefe <__ieee754_pow+0x2e>
 801ff28:	45aa      	cmp	sl, r5
 801ff2a:	d8e8      	bhi.n	801fefe <__ieee754_pow+0x2e>
 801ff2c:	e001      	b.n	801ff32 <__ieee754_pow+0x62>
 801ff2e:	4592      	cmp	sl, r2
 801ff30:	d802      	bhi.n	801ff38 <__ieee754_pow+0x68>
 801ff32:	4592      	cmp	sl, r2
 801ff34:	d10f      	bne.n	801ff56 <__ieee754_pow+0x86>
 801ff36:	b171      	cbz	r1, 801ff56 <__ieee754_pow+0x86>
 801ff38:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801ff3c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801ff40:	ea58 0803 	orrs.w	r8, r8, r3
 801ff44:	d1db      	bne.n	801fefe <__ieee754_pow+0x2e>
 801ff46:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ff4a:	18db      	adds	r3, r3, r3
 801ff4c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801ff50:	4152      	adcs	r2, r2
 801ff52:	4598      	cmp	r8, r3
 801ff54:	e7cf      	b.n	801fef6 <__ieee754_pow+0x26>
 801ff56:	f1b8 0f00 	cmp.w	r8, #0
 801ff5a:	46ab      	mov	fp, r5
 801ff5c:	da43      	bge.n	801ffe6 <__ieee754_pow+0x116>
 801ff5e:	4a82      	ldr	r2, [pc, #520]	@ (8020168 <__ieee754_pow+0x298>)
 801ff60:	4592      	cmp	sl, r2
 801ff62:	d856      	bhi.n	8020012 <__ieee754_pow+0x142>
 801ff64:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801ff68:	4592      	cmp	sl, r2
 801ff6a:	f240 84c5 	bls.w	80208f8 <__ieee754_pow+0xa28>
 801ff6e:	ea4f 522a 	mov.w	r2, sl, asr #20
 801ff72:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801ff76:	2a14      	cmp	r2, #20
 801ff78:	dd18      	ble.n	801ffac <__ieee754_pow+0xdc>
 801ff7a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801ff7e:	fa21 f402 	lsr.w	r4, r1, r2
 801ff82:	fa04 f202 	lsl.w	r2, r4, r2
 801ff86:	428a      	cmp	r2, r1
 801ff88:	f040 84b6 	bne.w	80208f8 <__ieee754_pow+0xa28>
 801ff8c:	f004 0401 	and.w	r4, r4, #1
 801ff90:	f1c4 0402 	rsb	r4, r4, #2
 801ff94:	2900      	cmp	r1, #0
 801ff96:	d159      	bne.n	802004c <__ieee754_pow+0x17c>
 801ff98:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801ff9c:	d148      	bne.n	8020030 <__ieee754_pow+0x160>
 801ff9e:	4632      	mov	r2, r6
 801ffa0:	463b      	mov	r3, r7
 801ffa2:	4630      	mov	r0, r6
 801ffa4:	4639      	mov	r1, r7
 801ffa6:	f7e0 fb37 	bl	8000618 <__aeabi_dmul>
 801ffaa:	e7ae      	b.n	801ff0a <__ieee754_pow+0x3a>
 801ffac:	2900      	cmp	r1, #0
 801ffae:	d14c      	bne.n	802004a <__ieee754_pow+0x17a>
 801ffb0:	f1c2 0214 	rsb	r2, r2, #20
 801ffb4:	fa4a f402 	asr.w	r4, sl, r2
 801ffb8:	fa04 f202 	lsl.w	r2, r4, r2
 801ffbc:	4552      	cmp	r2, sl
 801ffbe:	f040 8498 	bne.w	80208f2 <__ieee754_pow+0xa22>
 801ffc2:	f004 0401 	and.w	r4, r4, #1
 801ffc6:	f1c4 0402 	rsb	r4, r4, #2
 801ffca:	4a68      	ldr	r2, [pc, #416]	@ (802016c <__ieee754_pow+0x29c>)
 801ffcc:	4592      	cmp	sl, r2
 801ffce:	d1e3      	bne.n	801ff98 <__ieee754_pow+0xc8>
 801ffd0:	f1b9 0f00 	cmp.w	r9, #0
 801ffd4:	f280 8489 	bge.w	80208ea <__ieee754_pow+0xa1a>
 801ffd8:	4964      	ldr	r1, [pc, #400]	@ (802016c <__ieee754_pow+0x29c>)
 801ffda:	4632      	mov	r2, r6
 801ffdc:	463b      	mov	r3, r7
 801ffde:	2000      	movs	r0, #0
 801ffe0:	f7e0 fc44 	bl	800086c <__aeabi_ddiv>
 801ffe4:	e791      	b.n	801ff0a <__ieee754_pow+0x3a>
 801ffe6:	2400      	movs	r4, #0
 801ffe8:	bb81      	cbnz	r1, 802004c <__ieee754_pow+0x17c>
 801ffea:	4a5e      	ldr	r2, [pc, #376]	@ (8020164 <__ieee754_pow+0x294>)
 801ffec:	4592      	cmp	sl, r2
 801ffee:	d1ec      	bne.n	801ffca <__ieee754_pow+0xfa>
 801fff0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 801fff4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801fff8:	431a      	orrs	r2, r3
 801fffa:	f000 846e 	beq.w	80208da <__ieee754_pow+0xa0a>
 801fffe:	4b5c      	ldr	r3, [pc, #368]	@ (8020170 <__ieee754_pow+0x2a0>)
 8020000:	429d      	cmp	r5, r3
 8020002:	d908      	bls.n	8020016 <__ieee754_pow+0x146>
 8020004:	f1b9 0f00 	cmp.w	r9, #0
 8020008:	f280 846b 	bge.w	80208e2 <__ieee754_pow+0xa12>
 802000c:	2000      	movs	r0, #0
 802000e:	2100      	movs	r1, #0
 8020010:	e77b      	b.n	801ff0a <__ieee754_pow+0x3a>
 8020012:	2402      	movs	r4, #2
 8020014:	e7e8      	b.n	801ffe8 <__ieee754_pow+0x118>
 8020016:	f1b9 0f00 	cmp.w	r9, #0
 802001a:	f04f 0000 	mov.w	r0, #0
 802001e:	f04f 0100 	mov.w	r1, #0
 8020022:	f6bf af72 	bge.w	801ff0a <__ieee754_pow+0x3a>
 8020026:	e9dd 0300 	ldrd	r0, r3, [sp]
 802002a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 802002e:	e76c      	b.n	801ff0a <__ieee754_pow+0x3a>
 8020030:	4a50      	ldr	r2, [pc, #320]	@ (8020174 <__ieee754_pow+0x2a4>)
 8020032:	4591      	cmp	r9, r2
 8020034:	d10a      	bne.n	802004c <__ieee754_pow+0x17c>
 8020036:	f1b8 0f00 	cmp.w	r8, #0
 802003a:	db07      	blt.n	802004c <__ieee754_pow+0x17c>
 802003c:	ec47 6b10 	vmov	d0, r6, r7
 8020040:	b011      	add	sp, #68	@ 0x44
 8020042:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020046:	f7fe bb07 	b.w	801e658 <__ieee754_sqrt>
 802004a:	2400      	movs	r4, #0
 802004c:	ec47 6b10 	vmov	d0, r6, r7
 8020050:	9302      	str	r3, [sp, #8]
 8020052:	f7fe fa99 	bl	801e588 <fabs>
 8020056:	9b02      	ldr	r3, [sp, #8]
 8020058:	ec51 0b10 	vmov	r0, r1, d0
 802005c:	bb43      	cbnz	r3, 80200b0 <__ieee754_pow+0x1e0>
 802005e:	4b43      	ldr	r3, [pc, #268]	@ (802016c <__ieee754_pow+0x29c>)
 8020060:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8020064:	429a      	cmp	r2, r3
 8020066:	d000      	beq.n	802006a <__ieee754_pow+0x19a>
 8020068:	bb15      	cbnz	r5, 80200b0 <__ieee754_pow+0x1e0>
 802006a:	f1b9 0f00 	cmp.w	r9, #0
 802006e:	da05      	bge.n	802007c <__ieee754_pow+0x1ac>
 8020070:	4602      	mov	r2, r0
 8020072:	460b      	mov	r3, r1
 8020074:	2000      	movs	r0, #0
 8020076:	493d      	ldr	r1, [pc, #244]	@ (802016c <__ieee754_pow+0x29c>)
 8020078:	f7e0 fbf8 	bl	800086c <__aeabi_ddiv>
 802007c:	f1b8 0f00 	cmp.w	r8, #0
 8020080:	f6bf af43 	bge.w	801ff0a <__ieee754_pow+0x3a>
 8020084:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8020088:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 802008c:	4325      	orrs	r5, r4
 802008e:	d108      	bne.n	80200a2 <__ieee754_pow+0x1d2>
 8020090:	4602      	mov	r2, r0
 8020092:	460b      	mov	r3, r1
 8020094:	4610      	mov	r0, r2
 8020096:	4619      	mov	r1, r3
 8020098:	f7e0 f906 	bl	80002a8 <__aeabi_dsub>
 802009c:	4602      	mov	r2, r0
 802009e:	460b      	mov	r3, r1
 80200a0:	e79e      	b.n	801ffe0 <__ieee754_pow+0x110>
 80200a2:	2c01      	cmp	r4, #1
 80200a4:	f47f af31 	bne.w	801ff0a <__ieee754_pow+0x3a>
 80200a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80200ac:	4619      	mov	r1, r3
 80200ae:	e72c      	b.n	801ff0a <__ieee754_pow+0x3a>
 80200b0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80200b4:	3b01      	subs	r3, #1
 80200b6:	ea53 0204 	orrs.w	r2, r3, r4
 80200ba:	d102      	bne.n	80200c2 <__ieee754_pow+0x1f2>
 80200bc:	4632      	mov	r2, r6
 80200be:	463b      	mov	r3, r7
 80200c0:	e7e8      	b.n	8020094 <__ieee754_pow+0x1c4>
 80200c2:	3c01      	subs	r4, #1
 80200c4:	431c      	orrs	r4, r3
 80200c6:	d016      	beq.n	80200f6 <__ieee754_pow+0x226>
 80200c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8020150 <__ieee754_pow+0x280>
 80200cc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80200d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80200d4:	f240 8110 	bls.w	80202f8 <__ieee754_pow+0x428>
 80200d8:	4b27      	ldr	r3, [pc, #156]	@ (8020178 <__ieee754_pow+0x2a8>)
 80200da:	459a      	cmp	sl, r3
 80200dc:	4b24      	ldr	r3, [pc, #144]	@ (8020170 <__ieee754_pow+0x2a0>)
 80200de:	d916      	bls.n	802010e <__ieee754_pow+0x23e>
 80200e0:	429d      	cmp	r5, r3
 80200e2:	d80b      	bhi.n	80200fc <__ieee754_pow+0x22c>
 80200e4:	f1b9 0f00 	cmp.w	r9, #0
 80200e8:	da0b      	bge.n	8020102 <__ieee754_pow+0x232>
 80200ea:	2000      	movs	r0, #0
 80200ec:	b011      	add	sp, #68	@ 0x44
 80200ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200f2:	f000 bee5 	b.w	8020ec0 <__math_oflow>
 80200f6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8020158 <__ieee754_pow+0x288>
 80200fa:	e7e7      	b.n	80200cc <__ieee754_pow+0x1fc>
 80200fc:	f1b9 0f00 	cmp.w	r9, #0
 8020100:	dcf3      	bgt.n	80200ea <__ieee754_pow+0x21a>
 8020102:	2000      	movs	r0, #0
 8020104:	b011      	add	sp, #68	@ 0x44
 8020106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802010a:	f000 bed1 	b.w	8020eb0 <__math_uflow>
 802010e:	429d      	cmp	r5, r3
 8020110:	d20c      	bcs.n	802012c <__ieee754_pow+0x25c>
 8020112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020116:	2200      	movs	r2, #0
 8020118:	2300      	movs	r3, #0
 802011a:	f7e0 fcef 	bl	8000afc <__aeabi_dcmplt>
 802011e:	3800      	subs	r0, #0
 8020120:	bf18      	it	ne
 8020122:	2001      	movne	r0, #1
 8020124:	f1b9 0f00 	cmp.w	r9, #0
 8020128:	daec      	bge.n	8020104 <__ieee754_pow+0x234>
 802012a:	e7df      	b.n	80200ec <__ieee754_pow+0x21c>
 802012c:	4b0f      	ldr	r3, [pc, #60]	@ (802016c <__ieee754_pow+0x29c>)
 802012e:	429d      	cmp	r5, r3
 8020130:	f04f 0200 	mov.w	r2, #0
 8020134:	d922      	bls.n	802017c <__ieee754_pow+0x2ac>
 8020136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802013a:	2300      	movs	r3, #0
 802013c:	f7e0 fcde 	bl	8000afc <__aeabi_dcmplt>
 8020140:	3800      	subs	r0, #0
 8020142:	bf18      	it	ne
 8020144:	2001      	movne	r0, #1
 8020146:	f1b9 0f00 	cmp.w	r9, #0
 802014a:	dccf      	bgt.n	80200ec <__ieee754_pow+0x21c>
 802014c:	e7da      	b.n	8020104 <__ieee754_pow+0x234>
 802014e:	bf00      	nop
 8020150:	00000000 	.word	0x00000000
 8020154:	3ff00000 	.word	0x3ff00000
 8020158:	00000000 	.word	0x00000000
 802015c:	bff00000 	.word	0xbff00000
 8020160:	fff00000 	.word	0xfff00000
 8020164:	7ff00000 	.word	0x7ff00000
 8020168:	433fffff 	.word	0x433fffff
 802016c:	3ff00000 	.word	0x3ff00000
 8020170:	3fefffff 	.word	0x3fefffff
 8020174:	3fe00000 	.word	0x3fe00000
 8020178:	43f00000 	.word	0x43f00000
 802017c:	4b5a      	ldr	r3, [pc, #360]	@ (80202e8 <__ieee754_pow+0x418>)
 802017e:	f7e0 f893 	bl	80002a8 <__aeabi_dsub>
 8020182:	a351      	add	r3, pc, #324	@ (adr r3, 80202c8 <__ieee754_pow+0x3f8>)
 8020184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020188:	4604      	mov	r4, r0
 802018a:	460d      	mov	r5, r1
 802018c:	f7e0 fa44 	bl	8000618 <__aeabi_dmul>
 8020190:	a34f      	add	r3, pc, #316	@ (adr r3, 80202d0 <__ieee754_pow+0x400>)
 8020192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020196:	4606      	mov	r6, r0
 8020198:	460f      	mov	r7, r1
 802019a:	4620      	mov	r0, r4
 802019c:	4629      	mov	r1, r5
 802019e:	f7e0 fa3b 	bl	8000618 <__aeabi_dmul>
 80201a2:	4b52      	ldr	r3, [pc, #328]	@ (80202ec <__ieee754_pow+0x41c>)
 80201a4:	4682      	mov	sl, r0
 80201a6:	468b      	mov	fp, r1
 80201a8:	2200      	movs	r2, #0
 80201aa:	4620      	mov	r0, r4
 80201ac:	4629      	mov	r1, r5
 80201ae:	f7e0 fa33 	bl	8000618 <__aeabi_dmul>
 80201b2:	4602      	mov	r2, r0
 80201b4:	460b      	mov	r3, r1
 80201b6:	a148      	add	r1, pc, #288	@ (adr r1, 80202d8 <__ieee754_pow+0x408>)
 80201b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80201bc:	f7e0 f874 	bl	80002a8 <__aeabi_dsub>
 80201c0:	4622      	mov	r2, r4
 80201c2:	462b      	mov	r3, r5
 80201c4:	f7e0 fa28 	bl	8000618 <__aeabi_dmul>
 80201c8:	4602      	mov	r2, r0
 80201ca:	460b      	mov	r3, r1
 80201cc:	2000      	movs	r0, #0
 80201ce:	4948      	ldr	r1, [pc, #288]	@ (80202f0 <__ieee754_pow+0x420>)
 80201d0:	f7e0 f86a 	bl	80002a8 <__aeabi_dsub>
 80201d4:	4622      	mov	r2, r4
 80201d6:	4680      	mov	r8, r0
 80201d8:	4689      	mov	r9, r1
 80201da:	462b      	mov	r3, r5
 80201dc:	4620      	mov	r0, r4
 80201de:	4629      	mov	r1, r5
 80201e0:	f7e0 fa1a 	bl	8000618 <__aeabi_dmul>
 80201e4:	4602      	mov	r2, r0
 80201e6:	460b      	mov	r3, r1
 80201e8:	4640      	mov	r0, r8
 80201ea:	4649      	mov	r1, r9
 80201ec:	f7e0 fa14 	bl	8000618 <__aeabi_dmul>
 80201f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80202e0 <__ieee754_pow+0x410>)
 80201f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201f6:	f7e0 fa0f 	bl	8000618 <__aeabi_dmul>
 80201fa:	4602      	mov	r2, r0
 80201fc:	460b      	mov	r3, r1
 80201fe:	4650      	mov	r0, sl
 8020200:	4659      	mov	r1, fp
 8020202:	f7e0 f851 	bl	80002a8 <__aeabi_dsub>
 8020206:	4602      	mov	r2, r0
 8020208:	460b      	mov	r3, r1
 802020a:	4680      	mov	r8, r0
 802020c:	4689      	mov	r9, r1
 802020e:	4630      	mov	r0, r6
 8020210:	4639      	mov	r1, r7
 8020212:	f7e0 f84b 	bl	80002ac <__adddf3>
 8020216:	2400      	movs	r4, #0
 8020218:	4632      	mov	r2, r6
 802021a:	463b      	mov	r3, r7
 802021c:	4620      	mov	r0, r4
 802021e:	460d      	mov	r5, r1
 8020220:	f7e0 f842 	bl	80002a8 <__aeabi_dsub>
 8020224:	4602      	mov	r2, r0
 8020226:	460b      	mov	r3, r1
 8020228:	4640      	mov	r0, r8
 802022a:	4649      	mov	r1, r9
 802022c:	f7e0 f83c 	bl	80002a8 <__aeabi_dsub>
 8020230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020234:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8020238:	2300      	movs	r3, #0
 802023a:	9304      	str	r3, [sp, #16]
 802023c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8020240:	4606      	mov	r6, r0
 8020242:	460f      	mov	r7, r1
 8020244:	465b      	mov	r3, fp
 8020246:	4652      	mov	r2, sl
 8020248:	e9dd 0100 	ldrd	r0, r1, [sp]
 802024c:	f7e0 f82c 	bl	80002a8 <__aeabi_dsub>
 8020250:	4622      	mov	r2, r4
 8020252:	462b      	mov	r3, r5
 8020254:	f7e0 f9e0 	bl	8000618 <__aeabi_dmul>
 8020258:	e9dd 2300 	ldrd	r2, r3, [sp]
 802025c:	4680      	mov	r8, r0
 802025e:	4689      	mov	r9, r1
 8020260:	4630      	mov	r0, r6
 8020262:	4639      	mov	r1, r7
 8020264:	f7e0 f9d8 	bl	8000618 <__aeabi_dmul>
 8020268:	4602      	mov	r2, r0
 802026a:	460b      	mov	r3, r1
 802026c:	4640      	mov	r0, r8
 802026e:	4649      	mov	r1, r9
 8020270:	f7e0 f81c 	bl	80002ac <__adddf3>
 8020274:	465b      	mov	r3, fp
 8020276:	4606      	mov	r6, r0
 8020278:	460f      	mov	r7, r1
 802027a:	4652      	mov	r2, sl
 802027c:	4620      	mov	r0, r4
 802027e:	4629      	mov	r1, r5
 8020280:	f7e0 f9ca 	bl	8000618 <__aeabi_dmul>
 8020284:	460b      	mov	r3, r1
 8020286:	4602      	mov	r2, r0
 8020288:	4680      	mov	r8, r0
 802028a:	4689      	mov	r9, r1
 802028c:	4630      	mov	r0, r6
 802028e:	4639      	mov	r1, r7
 8020290:	f7e0 f80c 	bl	80002ac <__adddf3>
 8020294:	4b17      	ldr	r3, [pc, #92]	@ (80202f4 <__ieee754_pow+0x424>)
 8020296:	4299      	cmp	r1, r3
 8020298:	4604      	mov	r4, r0
 802029a:	460d      	mov	r5, r1
 802029c:	468b      	mov	fp, r1
 802029e:	f340 820b 	ble.w	80206b8 <__ieee754_pow+0x7e8>
 80202a2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80202a6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80202aa:	4303      	orrs	r3, r0
 80202ac:	f000 81ea 	beq.w	8020684 <__ieee754_pow+0x7b4>
 80202b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80202b4:	2200      	movs	r2, #0
 80202b6:	2300      	movs	r3, #0
 80202b8:	f7e0 fc20 	bl	8000afc <__aeabi_dcmplt>
 80202bc:	3800      	subs	r0, #0
 80202be:	bf18      	it	ne
 80202c0:	2001      	movne	r0, #1
 80202c2:	e713      	b.n	80200ec <__ieee754_pow+0x21c>
 80202c4:	f3af 8000 	nop.w
 80202c8:	60000000 	.word	0x60000000
 80202cc:	3ff71547 	.word	0x3ff71547
 80202d0:	f85ddf44 	.word	0xf85ddf44
 80202d4:	3e54ae0b 	.word	0x3e54ae0b
 80202d8:	55555555 	.word	0x55555555
 80202dc:	3fd55555 	.word	0x3fd55555
 80202e0:	652b82fe 	.word	0x652b82fe
 80202e4:	3ff71547 	.word	0x3ff71547
 80202e8:	3ff00000 	.word	0x3ff00000
 80202ec:	3fd00000 	.word	0x3fd00000
 80202f0:	3fe00000 	.word	0x3fe00000
 80202f4:	408fffff 	.word	0x408fffff
 80202f8:	4bd5      	ldr	r3, [pc, #852]	@ (8020650 <__ieee754_pow+0x780>)
 80202fa:	ea08 0303 	and.w	r3, r8, r3
 80202fe:	2200      	movs	r2, #0
 8020300:	b92b      	cbnz	r3, 802030e <__ieee754_pow+0x43e>
 8020302:	4bd4      	ldr	r3, [pc, #848]	@ (8020654 <__ieee754_pow+0x784>)
 8020304:	f7e0 f988 	bl	8000618 <__aeabi_dmul>
 8020308:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 802030c:	468b      	mov	fp, r1
 802030e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8020312:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8020316:	4413      	add	r3, r2
 8020318:	930a      	str	r3, [sp, #40]	@ 0x28
 802031a:	4bcf      	ldr	r3, [pc, #828]	@ (8020658 <__ieee754_pow+0x788>)
 802031c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8020320:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8020324:	459b      	cmp	fp, r3
 8020326:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802032a:	dd08      	ble.n	802033e <__ieee754_pow+0x46e>
 802032c:	4bcb      	ldr	r3, [pc, #812]	@ (802065c <__ieee754_pow+0x78c>)
 802032e:	459b      	cmp	fp, r3
 8020330:	f340 81a5 	ble.w	802067e <__ieee754_pow+0x7ae>
 8020334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020336:	3301      	adds	r3, #1
 8020338:	930a      	str	r3, [sp, #40]	@ 0x28
 802033a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 802033e:	f04f 0a00 	mov.w	sl, #0
 8020342:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8020346:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020348:	4bc5      	ldr	r3, [pc, #788]	@ (8020660 <__ieee754_pow+0x790>)
 802034a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802034e:	ed93 7b00 	vldr	d7, [r3]
 8020352:	4629      	mov	r1, r5
 8020354:	ec53 2b17 	vmov	r2, r3, d7
 8020358:	ed8d 7b06 	vstr	d7, [sp, #24]
 802035c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020360:	f7df ffa2 	bl	80002a8 <__aeabi_dsub>
 8020364:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020368:	4606      	mov	r6, r0
 802036a:	460f      	mov	r7, r1
 802036c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020370:	f7df ff9c 	bl	80002ac <__adddf3>
 8020374:	4602      	mov	r2, r0
 8020376:	460b      	mov	r3, r1
 8020378:	2000      	movs	r0, #0
 802037a:	49ba      	ldr	r1, [pc, #744]	@ (8020664 <__ieee754_pow+0x794>)
 802037c:	f7e0 fa76 	bl	800086c <__aeabi_ddiv>
 8020380:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8020384:	4602      	mov	r2, r0
 8020386:	460b      	mov	r3, r1
 8020388:	4630      	mov	r0, r6
 802038a:	4639      	mov	r1, r7
 802038c:	f7e0 f944 	bl	8000618 <__aeabi_dmul>
 8020390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020394:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8020398:	106d      	asrs	r5, r5, #1
 802039a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 802039e:	f04f 0b00 	mov.w	fp, #0
 80203a2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80203a6:	4661      	mov	r1, ip
 80203a8:	2200      	movs	r2, #0
 80203aa:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80203ae:	4658      	mov	r0, fp
 80203b0:	46e1      	mov	r9, ip
 80203b2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80203b6:	4614      	mov	r4, r2
 80203b8:	461d      	mov	r5, r3
 80203ba:	f7e0 f92d 	bl	8000618 <__aeabi_dmul>
 80203be:	4602      	mov	r2, r0
 80203c0:	460b      	mov	r3, r1
 80203c2:	4630      	mov	r0, r6
 80203c4:	4639      	mov	r1, r7
 80203c6:	f7df ff6f 	bl	80002a8 <__aeabi_dsub>
 80203ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80203ce:	4606      	mov	r6, r0
 80203d0:	460f      	mov	r7, r1
 80203d2:	4620      	mov	r0, r4
 80203d4:	4629      	mov	r1, r5
 80203d6:	f7df ff67 	bl	80002a8 <__aeabi_dsub>
 80203da:	4602      	mov	r2, r0
 80203dc:	460b      	mov	r3, r1
 80203de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80203e2:	f7df ff61 	bl	80002a8 <__aeabi_dsub>
 80203e6:	465a      	mov	r2, fp
 80203e8:	464b      	mov	r3, r9
 80203ea:	f7e0 f915 	bl	8000618 <__aeabi_dmul>
 80203ee:	4602      	mov	r2, r0
 80203f0:	460b      	mov	r3, r1
 80203f2:	4630      	mov	r0, r6
 80203f4:	4639      	mov	r1, r7
 80203f6:	f7df ff57 	bl	80002a8 <__aeabi_dsub>
 80203fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80203fe:	f7e0 f90b 	bl	8000618 <__aeabi_dmul>
 8020402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020406:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802040a:	4610      	mov	r0, r2
 802040c:	4619      	mov	r1, r3
 802040e:	f7e0 f903 	bl	8000618 <__aeabi_dmul>
 8020412:	a37d      	add	r3, pc, #500	@ (adr r3, 8020608 <__ieee754_pow+0x738>)
 8020414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020418:	4604      	mov	r4, r0
 802041a:	460d      	mov	r5, r1
 802041c:	f7e0 f8fc 	bl	8000618 <__aeabi_dmul>
 8020420:	a37b      	add	r3, pc, #492	@ (adr r3, 8020610 <__ieee754_pow+0x740>)
 8020422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020426:	f7df ff41 	bl	80002ac <__adddf3>
 802042a:	4622      	mov	r2, r4
 802042c:	462b      	mov	r3, r5
 802042e:	f7e0 f8f3 	bl	8000618 <__aeabi_dmul>
 8020432:	a379      	add	r3, pc, #484	@ (adr r3, 8020618 <__ieee754_pow+0x748>)
 8020434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020438:	f7df ff38 	bl	80002ac <__adddf3>
 802043c:	4622      	mov	r2, r4
 802043e:	462b      	mov	r3, r5
 8020440:	f7e0 f8ea 	bl	8000618 <__aeabi_dmul>
 8020444:	a376      	add	r3, pc, #472	@ (adr r3, 8020620 <__ieee754_pow+0x750>)
 8020446:	e9d3 2300 	ldrd	r2, r3, [r3]
 802044a:	f7df ff2f 	bl	80002ac <__adddf3>
 802044e:	4622      	mov	r2, r4
 8020450:	462b      	mov	r3, r5
 8020452:	f7e0 f8e1 	bl	8000618 <__aeabi_dmul>
 8020456:	a374      	add	r3, pc, #464	@ (adr r3, 8020628 <__ieee754_pow+0x758>)
 8020458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802045c:	f7df ff26 	bl	80002ac <__adddf3>
 8020460:	4622      	mov	r2, r4
 8020462:	462b      	mov	r3, r5
 8020464:	f7e0 f8d8 	bl	8000618 <__aeabi_dmul>
 8020468:	a371      	add	r3, pc, #452	@ (adr r3, 8020630 <__ieee754_pow+0x760>)
 802046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802046e:	f7df ff1d 	bl	80002ac <__adddf3>
 8020472:	4622      	mov	r2, r4
 8020474:	4606      	mov	r6, r0
 8020476:	460f      	mov	r7, r1
 8020478:	462b      	mov	r3, r5
 802047a:	4620      	mov	r0, r4
 802047c:	4629      	mov	r1, r5
 802047e:	f7e0 f8cb 	bl	8000618 <__aeabi_dmul>
 8020482:	4602      	mov	r2, r0
 8020484:	460b      	mov	r3, r1
 8020486:	4630      	mov	r0, r6
 8020488:	4639      	mov	r1, r7
 802048a:	f7e0 f8c5 	bl	8000618 <__aeabi_dmul>
 802048e:	465a      	mov	r2, fp
 8020490:	4604      	mov	r4, r0
 8020492:	460d      	mov	r5, r1
 8020494:	464b      	mov	r3, r9
 8020496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802049a:	f7df ff07 	bl	80002ac <__adddf3>
 802049e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80204a2:	f7e0 f8b9 	bl	8000618 <__aeabi_dmul>
 80204a6:	4622      	mov	r2, r4
 80204a8:	462b      	mov	r3, r5
 80204aa:	f7df feff 	bl	80002ac <__adddf3>
 80204ae:	465a      	mov	r2, fp
 80204b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80204b4:	464b      	mov	r3, r9
 80204b6:	4658      	mov	r0, fp
 80204b8:	4649      	mov	r1, r9
 80204ba:	f7e0 f8ad 	bl	8000618 <__aeabi_dmul>
 80204be:	4b6a      	ldr	r3, [pc, #424]	@ (8020668 <__ieee754_pow+0x798>)
 80204c0:	2200      	movs	r2, #0
 80204c2:	4606      	mov	r6, r0
 80204c4:	460f      	mov	r7, r1
 80204c6:	f7df fef1 	bl	80002ac <__adddf3>
 80204ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80204ce:	f7df feed 	bl	80002ac <__adddf3>
 80204d2:	46d8      	mov	r8, fp
 80204d4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80204d8:	460d      	mov	r5, r1
 80204da:	465a      	mov	r2, fp
 80204dc:	460b      	mov	r3, r1
 80204de:	4640      	mov	r0, r8
 80204e0:	4649      	mov	r1, r9
 80204e2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80204e6:	f7e0 f897 	bl	8000618 <__aeabi_dmul>
 80204ea:	465c      	mov	r4, fp
 80204ec:	4680      	mov	r8, r0
 80204ee:	4689      	mov	r9, r1
 80204f0:	4b5d      	ldr	r3, [pc, #372]	@ (8020668 <__ieee754_pow+0x798>)
 80204f2:	2200      	movs	r2, #0
 80204f4:	4620      	mov	r0, r4
 80204f6:	4629      	mov	r1, r5
 80204f8:	f7df fed6 	bl	80002a8 <__aeabi_dsub>
 80204fc:	4632      	mov	r2, r6
 80204fe:	463b      	mov	r3, r7
 8020500:	f7df fed2 	bl	80002a8 <__aeabi_dsub>
 8020504:	4602      	mov	r2, r0
 8020506:	460b      	mov	r3, r1
 8020508:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802050c:	f7df fecc 	bl	80002a8 <__aeabi_dsub>
 8020510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020514:	f7e0 f880 	bl	8000618 <__aeabi_dmul>
 8020518:	4622      	mov	r2, r4
 802051a:	4606      	mov	r6, r0
 802051c:	460f      	mov	r7, r1
 802051e:	462b      	mov	r3, r5
 8020520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020524:	f7e0 f878 	bl	8000618 <__aeabi_dmul>
 8020528:	4602      	mov	r2, r0
 802052a:	460b      	mov	r3, r1
 802052c:	4630      	mov	r0, r6
 802052e:	4639      	mov	r1, r7
 8020530:	f7df febc 	bl	80002ac <__adddf3>
 8020534:	4606      	mov	r6, r0
 8020536:	460f      	mov	r7, r1
 8020538:	4602      	mov	r2, r0
 802053a:	460b      	mov	r3, r1
 802053c:	4640      	mov	r0, r8
 802053e:	4649      	mov	r1, r9
 8020540:	f7df feb4 	bl	80002ac <__adddf3>
 8020544:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8020548:	a33b      	add	r3, pc, #236	@ (adr r3, 8020638 <__ieee754_pow+0x768>)
 802054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802054e:	4658      	mov	r0, fp
 8020550:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8020554:	460d      	mov	r5, r1
 8020556:	f7e0 f85f 	bl	8000618 <__aeabi_dmul>
 802055a:	465c      	mov	r4, fp
 802055c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020560:	4642      	mov	r2, r8
 8020562:	464b      	mov	r3, r9
 8020564:	4620      	mov	r0, r4
 8020566:	4629      	mov	r1, r5
 8020568:	f7df fe9e 	bl	80002a8 <__aeabi_dsub>
 802056c:	4602      	mov	r2, r0
 802056e:	460b      	mov	r3, r1
 8020570:	4630      	mov	r0, r6
 8020572:	4639      	mov	r1, r7
 8020574:	f7df fe98 	bl	80002a8 <__aeabi_dsub>
 8020578:	a331      	add	r3, pc, #196	@ (adr r3, 8020640 <__ieee754_pow+0x770>)
 802057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802057e:	f7e0 f84b 	bl	8000618 <__aeabi_dmul>
 8020582:	a331      	add	r3, pc, #196	@ (adr r3, 8020648 <__ieee754_pow+0x778>)
 8020584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020588:	4606      	mov	r6, r0
 802058a:	460f      	mov	r7, r1
 802058c:	4620      	mov	r0, r4
 802058e:	4629      	mov	r1, r5
 8020590:	f7e0 f842 	bl	8000618 <__aeabi_dmul>
 8020594:	4602      	mov	r2, r0
 8020596:	460b      	mov	r3, r1
 8020598:	4630      	mov	r0, r6
 802059a:	4639      	mov	r1, r7
 802059c:	f7df fe86 	bl	80002ac <__adddf3>
 80205a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80205a2:	4b32      	ldr	r3, [pc, #200]	@ (802066c <__ieee754_pow+0x79c>)
 80205a4:	4413      	add	r3, r2
 80205a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205aa:	f7df fe7f 	bl	80002ac <__adddf3>
 80205ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80205b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80205b4:	f7df ffc6 	bl	8000544 <__aeabi_i2d>
 80205b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80205ba:	4b2d      	ldr	r3, [pc, #180]	@ (8020670 <__ieee754_pow+0x7a0>)
 80205bc:	4413      	add	r3, r2
 80205be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80205c2:	4606      	mov	r6, r0
 80205c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80205c8:	460f      	mov	r7, r1
 80205ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80205ce:	f7df fe6d 	bl	80002ac <__adddf3>
 80205d2:	4642      	mov	r2, r8
 80205d4:	464b      	mov	r3, r9
 80205d6:	f7df fe69 	bl	80002ac <__adddf3>
 80205da:	4632      	mov	r2, r6
 80205dc:	463b      	mov	r3, r7
 80205de:	f7df fe65 	bl	80002ac <__adddf3>
 80205e2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80205e6:	4632      	mov	r2, r6
 80205e8:	463b      	mov	r3, r7
 80205ea:	4658      	mov	r0, fp
 80205ec:	460d      	mov	r5, r1
 80205ee:	f7df fe5b 	bl	80002a8 <__aeabi_dsub>
 80205f2:	4642      	mov	r2, r8
 80205f4:	464b      	mov	r3, r9
 80205f6:	f7df fe57 	bl	80002a8 <__aeabi_dsub>
 80205fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80205fe:	f7df fe53 	bl	80002a8 <__aeabi_dsub>
 8020602:	465c      	mov	r4, fp
 8020604:	e036      	b.n	8020674 <__ieee754_pow+0x7a4>
 8020606:	bf00      	nop
 8020608:	4a454eef 	.word	0x4a454eef
 802060c:	3fca7e28 	.word	0x3fca7e28
 8020610:	93c9db65 	.word	0x93c9db65
 8020614:	3fcd864a 	.word	0x3fcd864a
 8020618:	a91d4101 	.word	0xa91d4101
 802061c:	3fd17460 	.word	0x3fd17460
 8020620:	518f264d 	.word	0x518f264d
 8020624:	3fd55555 	.word	0x3fd55555
 8020628:	db6fabff 	.word	0xdb6fabff
 802062c:	3fdb6db6 	.word	0x3fdb6db6
 8020630:	33333303 	.word	0x33333303
 8020634:	3fe33333 	.word	0x3fe33333
 8020638:	e0000000 	.word	0xe0000000
 802063c:	3feec709 	.word	0x3feec709
 8020640:	dc3a03fd 	.word	0xdc3a03fd
 8020644:	3feec709 	.word	0x3feec709
 8020648:	145b01f5 	.word	0x145b01f5
 802064c:	be3e2fe0 	.word	0xbe3e2fe0
 8020650:	7ff00000 	.word	0x7ff00000
 8020654:	43400000 	.word	0x43400000
 8020658:	0003988e 	.word	0x0003988e
 802065c:	000bb679 	.word	0x000bb679
 8020660:	08022060 	.word	0x08022060
 8020664:	3ff00000 	.word	0x3ff00000
 8020668:	40080000 	.word	0x40080000
 802066c:	08022040 	.word	0x08022040
 8020670:	08022050 	.word	0x08022050
 8020674:	4602      	mov	r2, r0
 8020676:	460b      	mov	r3, r1
 8020678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802067c:	e5d6      	b.n	802022c <__ieee754_pow+0x35c>
 802067e:	f04f 0a01 	mov.w	sl, #1
 8020682:	e65e      	b.n	8020342 <__ieee754_pow+0x472>
 8020684:	a3b5      	add	r3, pc, #724	@ (adr r3, 802095c <__ieee754_pow+0xa8c>)
 8020686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802068a:	4630      	mov	r0, r6
 802068c:	4639      	mov	r1, r7
 802068e:	f7df fe0d 	bl	80002ac <__adddf3>
 8020692:	4642      	mov	r2, r8
 8020694:	e9cd 0100 	strd	r0, r1, [sp]
 8020698:	464b      	mov	r3, r9
 802069a:	4620      	mov	r0, r4
 802069c:	4629      	mov	r1, r5
 802069e:	f7df fe03 	bl	80002a8 <__aeabi_dsub>
 80206a2:	4602      	mov	r2, r0
 80206a4:	460b      	mov	r3, r1
 80206a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80206aa:	f7e0 fa45 	bl	8000b38 <__aeabi_dcmpgt>
 80206ae:	2800      	cmp	r0, #0
 80206b0:	f47f adfe 	bne.w	80202b0 <__ieee754_pow+0x3e0>
 80206b4:	4ba2      	ldr	r3, [pc, #648]	@ (8020940 <__ieee754_pow+0xa70>)
 80206b6:	e022      	b.n	80206fe <__ieee754_pow+0x82e>
 80206b8:	4ca2      	ldr	r4, [pc, #648]	@ (8020944 <__ieee754_pow+0xa74>)
 80206ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80206be:	42a3      	cmp	r3, r4
 80206c0:	d919      	bls.n	80206f6 <__ieee754_pow+0x826>
 80206c2:	4ba1      	ldr	r3, [pc, #644]	@ (8020948 <__ieee754_pow+0xa78>)
 80206c4:	440b      	add	r3, r1
 80206c6:	4303      	orrs	r3, r0
 80206c8:	d009      	beq.n	80206de <__ieee754_pow+0x80e>
 80206ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80206ce:	2200      	movs	r2, #0
 80206d0:	2300      	movs	r3, #0
 80206d2:	f7e0 fa13 	bl	8000afc <__aeabi_dcmplt>
 80206d6:	3800      	subs	r0, #0
 80206d8:	bf18      	it	ne
 80206da:	2001      	movne	r0, #1
 80206dc:	e512      	b.n	8020104 <__ieee754_pow+0x234>
 80206de:	4642      	mov	r2, r8
 80206e0:	464b      	mov	r3, r9
 80206e2:	f7df fde1 	bl	80002a8 <__aeabi_dsub>
 80206e6:	4632      	mov	r2, r6
 80206e8:	463b      	mov	r3, r7
 80206ea:	f7e0 fa1b 	bl	8000b24 <__aeabi_dcmpge>
 80206ee:	2800      	cmp	r0, #0
 80206f0:	d1eb      	bne.n	80206ca <__ieee754_pow+0x7fa>
 80206f2:	4b96      	ldr	r3, [pc, #600]	@ (802094c <__ieee754_pow+0xa7c>)
 80206f4:	e003      	b.n	80206fe <__ieee754_pow+0x82e>
 80206f6:	4a96      	ldr	r2, [pc, #600]	@ (8020950 <__ieee754_pow+0xa80>)
 80206f8:	4293      	cmp	r3, r2
 80206fa:	f240 80e7 	bls.w	80208cc <__ieee754_pow+0x9fc>
 80206fe:	151b      	asrs	r3, r3, #20
 8020700:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8020704:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8020708:	fa4a fa03 	asr.w	sl, sl, r3
 802070c:	44da      	add	sl, fp
 802070e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8020712:	4890      	ldr	r0, [pc, #576]	@ (8020954 <__ieee754_pow+0xa84>)
 8020714:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8020718:	4108      	asrs	r0, r1
 802071a:	ea00 030a 	and.w	r3, r0, sl
 802071e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8020722:	f1c1 0114 	rsb	r1, r1, #20
 8020726:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 802072a:	fa4a fa01 	asr.w	sl, sl, r1
 802072e:	f1bb 0f00 	cmp.w	fp, #0
 8020732:	4640      	mov	r0, r8
 8020734:	4649      	mov	r1, r9
 8020736:	f04f 0200 	mov.w	r2, #0
 802073a:	bfb8      	it	lt
 802073c:	f1ca 0a00 	rsblt	sl, sl, #0
 8020740:	f7df fdb2 	bl	80002a8 <__aeabi_dsub>
 8020744:	4680      	mov	r8, r0
 8020746:	4689      	mov	r9, r1
 8020748:	4632      	mov	r2, r6
 802074a:	463b      	mov	r3, r7
 802074c:	4640      	mov	r0, r8
 802074e:	4649      	mov	r1, r9
 8020750:	f7df fdac 	bl	80002ac <__adddf3>
 8020754:	2400      	movs	r4, #0
 8020756:	a36a      	add	r3, pc, #424	@ (adr r3, 8020900 <__ieee754_pow+0xa30>)
 8020758:	e9d3 2300 	ldrd	r2, r3, [r3]
 802075c:	4620      	mov	r0, r4
 802075e:	460d      	mov	r5, r1
 8020760:	f7df ff5a 	bl	8000618 <__aeabi_dmul>
 8020764:	4642      	mov	r2, r8
 8020766:	e9cd 0100 	strd	r0, r1, [sp]
 802076a:	464b      	mov	r3, r9
 802076c:	4620      	mov	r0, r4
 802076e:	4629      	mov	r1, r5
 8020770:	f7df fd9a 	bl	80002a8 <__aeabi_dsub>
 8020774:	4602      	mov	r2, r0
 8020776:	460b      	mov	r3, r1
 8020778:	4630      	mov	r0, r6
 802077a:	4639      	mov	r1, r7
 802077c:	f7df fd94 	bl	80002a8 <__aeabi_dsub>
 8020780:	a361      	add	r3, pc, #388	@ (adr r3, 8020908 <__ieee754_pow+0xa38>)
 8020782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020786:	f7df ff47 	bl	8000618 <__aeabi_dmul>
 802078a:	a361      	add	r3, pc, #388	@ (adr r3, 8020910 <__ieee754_pow+0xa40>)
 802078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020790:	4680      	mov	r8, r0
 8020792:	4689      	mov	r9, r1
 8020794:	4620      	mov	r0, r4
 8020796:	4629      	mov	r1, r5
 8020798:	f7df ff3e 	bl	8000618 <__aeabi_dmul>
 802079c:	4602      	mov	r2, r0
 802079e:	460b      	mov	r3, r1
 80207a0:	4640      	mov	r0, r8
 80207a2:	4649      	mov	r1, r9
 80207a4:	f7df fd82 	bl	80002ac <__adddf3>
 80207a8:	4604      	mov	r4, r0
 80207aa:	460d      	mov	r5, r1
 80207ac:	4602      	mov	r2, r0
 80207ae:	460b      	mov	r3, r1
 80207b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80207b4:	f7df fd7a 	bl	80002ac <__adddf3>
 80207b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80207bc:	4680      	mov	r8, r0
 80207be:	4689      	mov	r9, r1
 80207c0:	f7df fd72 	bl	80002a8 <__aeabi_dsub>
 80207c4:	4602      	mov	r2, r0
 80207c6:	460b      	mov	r3, r1
 80207c8:	4620      	mov	r0, r4
 80207ca:	4629      	mov	r1, r5
 80207cc:	f7df fd6c 	bl	80002a8 <__aeabi_dsub>
 80207d0:	4642      	mov	r2, r8
 80207d2:	4606      	mov	r6, r0
 80207d4:	460f      	mov	r7, r1
 80207d6:	464b      	mov	r3, r9
 80207d8:	4640      	mov	r0, r8
 80207da:	4649      	mov	r1, r9
 80207dc:	f7df ff1c 	bl	8000618 <__aeabi_dmul>
 80207e0:	a34d      	add	r3, pc, #308	@ (adr r3, 8020918 <__ieee754_pow+0xa48>)
 80207e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207e6:	4604      	mov	r4, r0
 80207e8:	460d      	mov	r5, r1
 80207ea:	f7df ff15 	bl	8000618 <__aeabi_dmul>
 80207ee:	a34c      	add	r3, pc, #304	@ (adr r3, 8020920 <__ieee754_pow+0xa50>)
 80207f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207f4:	f7df fd58 	bl	80002a8 <__aeabi_dsub>
 80207f8:	4622      	mov	r2, r4
 80207fa:	462b      	mov	r3, r5
 80207fc:	f7df ff0c 	bl	8000618 <__aeabi_dmul>
 8020800:	a349      	add	r3, pc, #292	@ (adr r3, 8020928 <__ieee754_pow+0xa58>)
 8020802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020806:	f7df fd51 	bl	80002ac <__adddf3>
 802080a:	4622      	mov	r2, r4
 802080c:	462b      	mov	r3, r5
 802080e:	f7df ff03 	bl	8000618 <__aeabi_dmul>
 8020812:	a347      	add	r3, pc, #284	@ (adr r3, 8020930 <__ieee754_pow+0xa60>)
 8020814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020818:	f7df fd46 	bl	80002a8 <__aeabi_dsub>
 802081c:	4622      	mov	r2, r4
 802081e:	462b      	mov	r3, r5
 8020820:	f7df fefa 	bl	8000618 <__aeabi_dmul>
 8020824:	a344      	add	r3, pc, #272	@ (adr r3, 8020938 <__ieee754_pow+0xa68>)
 8020826:	e9d3 2300 	ldrd	r2, r3, [r3]
 802082a:	f7df fd3f 	bl	80002ac <__adddf3>
 802082e:	4622      	mov	r2, r4
 8020830:	462b      	mov	r3, r5
 8020832:	f7df fef1 	bl	8000618 <__aeabi_dmul>
 8020836:	4602      	mov	r2, r0
 8020838:	460b      	mov	r3, r1
 802083a:	4640      	mov	r0, r8
 802083c:	4649      	mov	r1, r9
 802083e:	f7df fd33 	bl	80002a8 <__aeabi_dsub>
 8020842:	4604      	mov	r4, r0
 8020844:	460d      	mov	r5, r1
 8020846:	4602      	mov	r2, r0
 8020848:	460b      	mov	r3, r1
 802084a:	4640      	mov	r0, r8
 802084c:	4649      	mov	r1, r9
 802084e:	f7df fee3 	bl	8000618 <__aeabi_dmul>
 8020852:	2200      	movs	r2, #0
 8020854:	e9cd 0100 	strd	r0, r1, [sp]
 8020858:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802085c:	4620      	mov	r0, r4
 802085e:	4629      	mov	r1, r5
 8020860:	f7df fd22 	bl	80002a8 <__aeabi_dsub>
 8020864:	4602      	mov	r2, r0
 8020866:	460b      	mov	r3, r1
 8020868:	e9dd 0100 	ldrd	r0, r1, [sp]
 802086c:	f7df fffe 	bl	800086c <__aeabi_ddiv>
 8020870:	4632      	mov	r2, r6
 8020872:	4604      	mov	r4, r0
 8020874:	460d      	mov	r5, r1
 8020876:	463b      	mov	r3, r7
 8020878:	4640      	mov	r0, r8
 802087a:	4649      	mov	r1, r9
 802087c:	f7df fecc 	bl	8000618 <__aeabi_dmul>
 8020880:	4632      	mov	r2, r6
 8020882:	463b      	mov	r3, r7
 8020884:	f7df fd12 	bl	80002ac <__adddf3>
 8020888:	4602      	mov	r2, r0
 802088a:	460b      	mov	r3, r1
 802088c:	4620      	mov	r0, r4
 802088e:	4629      	mov	r1, r5
 8020890:	f7df fd0a 	bl	80002a8 <__aeabi_dsub>
 8020894:	4642      	mov	r2, r8
 8020896:	464b      	mov	r3, r9
 8020898:	f7df fd06 	bl	80002a8 <__aeabi_dsub>
 802089c:	460b      	mov	r3, r1
 802089e:	4602      	mov	r2, r0
 80208a0:	492d      	ldr	r1, [pc, #180]	@ (8020958 <__ieee754_pow+0xa88>)
 80208a2:	2000      	movs	r0, #0
 80208a4:	f7df fd00 	bl	80002a8 <__aeabi_dsub>
 80208a8:	ec41 0b10 	vmov	d0, r0, r1
 80208ac:	ee10 3a90 	vmov	r3, s1
 80208b0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80208b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80208b8:	da0b      	bge.n	80208d2 <__ieee754_pow+0xa02>
 80208ba:	4650      	mov	r0, sl
 80208bc:	f000 fa50 	bl	8020d60 <scalbn>
 80208c0:	ec51 0b10 	vmov	r0, r1, d0
 80208c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80208c8:	f7ff bb6d 	b.w	801ffa6 <__ieee754_pow+0xd6>
 80208cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80208d0:	e73a      	b.n	8020748 <__ieee754_pow+0x878>
 80208d2:	ec51 0b10 	vmov	r0, r1, d0
 80208d6:	4619      	mov	r1, r3
 80208d8:	e7f4      	b.n	80208c4 <__ieee754_pow+0x9f4>
 80208da:	491f      	ldr	r1, [pc, #124]	@ (8020958 <__ieee754_pow+0xa88>)
 80208dc:	2000      	movs	r0, #0
 80208de:	f7ff bb14 	b.w	801ff0a <__ieee754_pow+0x3a>
 80208e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80208e6:	f7ff bb10 	b.w	801ff0a <__ieee754_pow+0x3a>
 80208ea:	4630      	mov	r0, r6
 80208ec:	4639      	mov	r1, r7
 80208ee:	f7ff bb0c 	b.w	801ff0a <__ieee754_pow+0x3a>
 80208f2:	460c      	mov	r4, r1
 80208f4:	f7ff bb69 	b.w	801ffca <__ieee754_pow+0xfa>
 80208f8:	2400      	movs	r4, #0
 80208fa:	f7ff bb4b 	b.w	801ff94 <__ieee754_pow+0xc4>
 80208fe:	bf00      	nop
 8020900:	00000000 	.word	0x00000000
 8020904:	3fe62e43 	.word	0x3fe62e43
 8020908:	fefa39ef 	.word	0xfefa39ef
 802090c:	3fe62e42 	.word	0x3fe62e42
 8020910:	0ca86c39 	.word	0x0ca86c39
 8020914:	be205c61 	.word	0xbe205c61
 8020918:	72bea4d0 	.word	0x72bea4d0
 802091c:	3e663769 	.word	0x3e663769
 8020920:	c5d26bf1 	.word	0xc5d26bf1
 8020924:	3ebbbd41 	.word	0x3ebbbd41
 8020928:	af25de2c 	.word	0xaf25de2c
 802092c:	3f11566a 	.word	0x3f11566a
 8020930:	16bebd93 	.word	0x16bebd93
 8020934:	3f66c16c 	.word	0x3f66c16c
 8020938:	5555553e 	.word	0x5555553e
 802093c:	3fc55555 	.word	0x3fc55555
 8020940:	40900000 	.word	0x40900000
 8020944:	4090cbff 	.word	0x4090cbff
 8020948:	3f6f3400 	.word	0x3f6f3400
 802094c:	4090cc00 	.word	0x4090cc00
 8020950:	3fe00000 	.word	0x3fe00000
 8020954:	fff00000 	.word	0xfff00000
 8020958:	3ff00000 	.word	0x3ff00000
 802095c:	652b82fe 	.word	0x652b82fe
 8020960:	3c971547 	.word	0x3c971547
 8020964:	00000000 	.word	0x00000000

08020968 <__ieee754_rem_pio2>:
 8020968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802096c:	ec57 6b10 	vmov	r6, r7, d0
 8020970:	4bc5      	ldr	r3, [pc, #788]	@ (8020c88 <__ieee754_rem_pio2+0x320>)
 8020972:	b08d      	sub	sp, #52	@ 0x34
 8020974:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8020978:	4598      	cmp	r8, r3
 802097a:	4604      	mov	r4, r0
 802097c:	9704      	str	r7, [sp, #16]
 802097e:	d807      	bhi.n	8020990 <__ieee754_rem_pio2+0x28>
 8020980:	2200      	movs	r2, #0
 8020982:	2300      	movs	r3, #0
 8020984:	ed80 0b00 	vstr	d0, [r0]
 8020988:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802098c:	2500      	movs	r5, #0
 802098e:	e028      	b.n	80209e2 <__ieee754_rem_pio2+0x7a>
 8020990:	4bbe      	ldr	r3, [pc, #760]	@ (8020c8c <__ieee754_rem_pio2+0x324>)
 8020992:	4598      	cmp	r8, r3
 8020994:	d878      	bhi.n	8020a88 <__ieee754_rem_pio2+0x120>
 8020996:	9b04      	ldr	r3, [sp, #16]
 8020998:	4dbd      	ldr	r5, [pc, #756]	@ (8020c90 <__ieee754_rem_pio2+0x328>)
 802099a:	2b00      	cmp	r3, #0
 802099c:	4630      	mov	r0, r6
 802099e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8020c50 <__ieee754_rem_pio2+0x2e8>)
 80209a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209a4:	4639      	mov	r1, r7
 80209a6:	dd38      	ble.n	8020a1a <__ieee754_rem_pio2+0xb2>
 80209a8:	f7df fc7e 	bl	80002a8 <__aeabi_dsub>
 80209ac:	45a8      	cmp	r8, r5
 80209ae:	4606      	mov	r6, r0
 80209b0:	460f      	mov	r7, r1
 80209b2:	d01a      	beq.n	80209ea <__ieee754_rem_pio2+0x82>
 80209b4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8020c58 <__ieee754_rem_pio2+0x2f0>)
 80209b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209ba:	f7df fc75 	bl	80002a8 <__aeabi_dsub>
 80209be:	4602      	mov	r2, r0
 80209c0:	460b      	mov	r3, r1
 80209c2:	4680      	mov	r8, r0
 80209c4:	4689      	mov	r9, r1
 80209c6:	4630      	mov	r0, r6
 80209c8:	4639      	mov	r1, r7
 80209ca:	f7df fc6d 	bl	80002a8 <__aeabi_dsub>
 80209ce:	a3a2      	add	r3, pc, #648	@ (adr r3, 8020c58 <__ieee754_rem_pio2+0x2f0>)
 80209d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209d4:	f7df fc68 	bl	80002a8 <__aeabi_dsub>
 80209d8:	e9c4 8900 	strd	r8, r9, [r4]
 80209dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80209e0:	2501      	movs	r5, #1
 80209e2:	4628      	mov	r0, r5
 80209e4:	b00d      	add	sp, #52	@ 0x34
 80209e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209ea:	a39d      	add	r3, pc, #628	@ (adr r3, 8020c60 <__ieee754_rem_pio2+0x2f8>)
 80209ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209f0:	f7df fc5a 	bl	80002a8 <__aeabi_dsub>
 80209f4:	a39c      	add	r3, pc, #624	@ (adr r3, 8020c68 <__ieee754_rem_pio2+0x300>)
 80209f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209fa:	4606      	mov	r6, r0
 80209fc:	460f      	mov	r7, r1
 80209fe:	f7df fc53 	bl	80002a8 <__aeabi_dsub>
 8020a02:	4602      	mov	r2, r0
 8020a04:	460b      	mov	r3, r1
 8020a06:	4680      	mov	r8, r0
 8020a08:	4689      	mov	r9, r1
 8020a0a:	4630      	mov	r0, r6
 8020a0c:	4639      	mov	r1, r7
 8020a0e:	f7df fc4b 	bl	80002a8 <__aeabi_dsub>
 8020a12:	a395      	add	r3, pc, #596	@ (adr r3, 8020c68 <__ieee754_rem_pio2+0x300>)
 8020a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a18:	e7dc      	b.n	80209d4 <__ieee754_rem_pio2+0x6c>
 8020a1a:	f7df fc47 	bl	80002ac <__adddf3>
 8020a1e:	45a8      	cmp	r8, r5
 8020a20:	4606      	mov	r6, r0
 8020a22:	460f      	mov	r7, r1
 8020a24:	d018      	beq.n	8020a58 <__ieee754_rem_pio2+0xf0>
 8020a26:	a38c      	add	r3, pc, #560	@ (adr r3, 8020c58 <__ieee754_rem_pio2+0x2f0>)
 8020a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a2c:	f7df fc3e 	bl	80002ac <__adddf3>
 8020a30:	4602      	mov	r2, r0
 8020a32:	460b      	mov	r3, r1
 8020a34:	4680      	mov	r8, r0
 8020a36:	4689      	mov	r9, r1
 8020a38:	4630      	mov	r0, r6
 8020a3a:	4639      	mov	r1, r7
 8020a3c:	f7df fc34 	bl	80002a8 <__aeabi_dsub>
 8020a40:	a385      	add	r3, pc, #532	@ (adr r3, 8020c58 <__ieee754_rem_pio2+0x2f0>)
 8020a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a46:	f7df fc31 	bl	80002ac <__adddf3>
 8020a4a:	f04f 35ff 	mov.w	r5, #4294967295
 8020a4e:	e9c4 8900 	strd	r8, r9, [r4]
 8020a52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8020a56:	e7c4      	b.n	80209e2 <__ieee754_rem_pio2+0x7a>
 8020a58:	a381      	add	r3, pc, #516	@ (adr r3, 8020c60 <__ieee754_rem_pio2+0x2f8>)
 8020a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a5e:	f7df fc25 	bl	80002ac <__adddf3>
 8020a62:	a381      	add	r3, pc, #516	@ (adr r3, 8020c68 <__ieee754_rem_pio2+0x300>)
 8020a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a68:	4606      	mov	r6, r0
 8020a6a:	460f      	mov	r7, r1
 8020a6c:	f7df fc1e 	bl	80002ac <__adddf3>
 8020a70:	4602      	mov	r2, r0
 8020a72:	460b      	mov	r3, r1
 8020a74:	4680      	mov	r8, r0
 8020a76:	4689      	mov	r9, r1
 8020a78:	4630      	mov	r0, r6
 8020a7a:	4639      	mov	r1, r7
 8020a7c:	f7df fc14 	bl	80002a8 <__aeabi_dsub>
 8020a80:	a379      	add	r3, pc, #484	@ (adr r3, 8020c68 <__ieee754_rem_pio2+0x300>)
 8020a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a86:	e7de      	b.n	8020a46 <__ieee754_rem_pio2+0xde>
 8020a88:	4b82      	ldr	r3, [pc, #520]	@ (8020c94 <__ieee754_rem_pio2+0x32c>)
 8020a8a:	4598      	cmp	r8, r3
 8020a8c:	f200 80d1 	bhi.w	8020c32 <__ieee754_rem_pio2+0x2ca>
 8020a90:	f7fd fd7a 	bl	801e588 <fabs>
 8020a94:	ec57 6b10 	vmov	r6, r7, d0
 8020a98:	a375      	add	r3, pc, #468	@ (adr r3, 8020c70 <__ieee754_rem_pio2+0x308>)
 8020a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a9e:	4630      	mov	r0, r6
 8020aa0:	4639      	mov	r1, r7
 8020aa2:	f7df fdb9 	bl	8000618 <__aeabi_dmul>
 8020aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8020c98 <__ieee754_rem_pio2+0x330>)
 8020aa8:	2200      	movs	r2, #0
 8020aaa:	f7df fbff 	bl	80002ac <__adddf3>
 8020aae:	f7e0 f863 	bl	8000b78 <__aeabi_d2iz>
 8020ab2:	4605      	mov	r5, r0
 8020ab4:	f7df fd46 	bl	8000544 <__aeabi_i2d>
 8020ab8:	4602      	mov	r2, r0
 8020aba:	460b      	mov	r3, r1
 8020abc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020ac0:	a363      	add	r3, pc, #396	@ (adr r3, 8020c50 <__ieee754_rem_pio2+0x2e8>)
 8020ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ac6:	f7df fda7 	bl	8000618 <__aeabi_dmul>
 8020aca:	4602      	mov	r2, r0
 8020acc:	460b      	mov	r3, r1
 8020ace:	4630      	mov	r0, r6
 8020ad0:	4639      	mov	r1, r7
 8020ad2:	f7df fbe9 	bl	80002a8 <__aeabi_dsub>
 8020ad6:	a360      	add	r3, pc, #384	@ (adr r3, 8020c58 <__ieee754_rem_pio2+0x2f0>)
 8020ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020adc:	4682      	mov	sl, r0
 8020ade:	468b      	mov	fp, r1
 8020ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020ae4:	f7df fd98 	bl	8000618 <__aeabi_dmul>
 8020ae8:	2d1f      	cmp	r5, #31
 8020aea:	4606      	mov	r6, r0
 8020aec:	460f      	mov	r7, r1
 8020aee:	dc0c      	bgt.n	8020b0a <__ieee754_rem_pio2+0x1a2>
 8020af0:	4b6a      	ldr	r3, [pc, #424]	@ (8020c9c <__ieee754_rem_pio2+0x334>)
 8020af2:	1e6a      	subs	r2, r5, #1
 8020af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020af8:	4543      	cmp	r3, r8
 8020afa:	d006      	beq.n	8020b0a <__ieee754_rem_pio2+0x1a2>
 8020afc:	4632      	mov	r2, r6
 8020afe:	463b      	mov	r3, r7
 8020b00:	4650      	mov	r0, sl
 8020b02:	4659      	mov	r1, fp
 8020b04:	f7df fbd0 	bl	80002a8 <__aeabi_dsub>
 8020b08:	e00e      	b.n	8020b28 <__ieee754_rem_pio2+0x1c0>
 8020b0a:	463b      	mov	r3, r7
 8020b0c:	4632      	mov	r2, r6
 8020b0e:	4650      	mov	r0, sl
 8020b10:	4659      	mov	r1, fp
 8020b12:	f7df fbc9 	bl	80002a8 <__aeabi_dsub>
 8020b16:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020b1a:	9305      	str	r3, [sp, #20]
 8020b1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8020b20:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8020b24:	2b10      	cmp	r3, #16
 8020b26:	dc02      	bgt.n	8020b2e <__ieee754_rem_pio2+0x1c6>
 8020b28:	e9c4 0100 	strd	r0, r1, [r4]
 8020b2c:	e039      	b.n	8020ba2 <__ieee754_rem_pio2+0x23a>
 8020b2e:	a34c      	add	r3, pc, #304	@ (adr r3, 8020c60 <__ieee754_rem_pio2+0x2f8>)
 8020b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020b38:	f7df fd6e 	bl	8000618 <__aeabi_dmul>
 8020b3c:	4606      	mov	r6, r0
 8020b3e:	460f      	mov	r7, r1
 8020b40:	4602      	mov	r2, r0
 8020b42:	460b      	mov	r3, r1
 8020b44:	4650      	mov	r0, sl
 8020b46:	4659      	mov	r1, fp
 8020b48:	f7df fbae 	bl	80002a8 <__aeabi_dsub>
 8020b4c:	4602      	mov	r2, r0
 8020b4e:	460b      	mov	r3, r1
 8020b50:	4680      	mov	r8, r0
 8020b52:	4689      	mov	r9, r1
 8020b54:	4650      	mov	r0, sl
 8020b56:	4659      	mov	r1, fp
 8020b58:	f7df fba6 	bl	80002a8 <__aeabi_dsub>
 8020b5c:	4632      	mov	r2, r6
 8020b5e:	463b      	mov	r3, r7
 8020b60:	f7df fba2 	bl	80002a8 <__aeabi_dsub>
 8020b64:	a340      	add	r3, pc, #256	@ (adr r3, 8020c68 <__ieee754_rem_pio2+0x300>)
 8020b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b6a:	4606      	mov	r6, r0
 8020b6c:	460f      	mov	r7, r1
 8020b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020b72:	f7df fd51 	bl	8000618 <__aeabi_dmul>
 8020b76:	4632      	mov	r2, r6
 8020b78:	463b      	mov	r3, r7
 8020b7a:	f7df fb95 	bl	80002a8 <__aeabi_dsub>
 8020b7e:	4602      	mov	r2, r0
 8020b80:	460b      	mov	r3, r1
 8020b82:	4606      	mov	r6, r0
 8020b84:	460f      	mov	r7, r1
 8020b86:	4640      	mov	r0, r8
 8020b88:	4649      	mov	r1, r9
 8020b8a:	f7df fb8d 	bl	80002a8 <__aeabi_dsub>
 8020b8e:	9a05      	ldr	r2, [sp, #20]
 8020b90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8020b94:	1ad3      	subs	r3, r2, r3
 8020b96:	2b31      	cmp	r3, #49	@ 0x31
 8020b98:	dc20      	bgt.n	8020bdc <__ieee754_rem_pio2+0x274>
 8020b9a:	e9c4 0100 	strd	r0, r1, [r4]
 8020b9e:	46c2      	mov	sl, r8
 8020ba0:	46cb      	mov	fp, r9
 8020ba2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8020ba6:	4650      	mov	r0, sl
 8020ba8:	4642      	mov	r2, r8
 8020baa:	464b      	mov	r3, r9
 8020bac:	4659      	mov	r1, fp
 8020bae:	f7df fb7b 	bl	80002a8 <__aeabi_dsub>
 8020bb2:	463b      	mov	r3, r7
 8020bb4:	4632      	mov	r2, r6
 8020bb6:	f7df fb77 	bl	80002a8 <__aeabi_dsub>
 8020bba:	9b04      	ldr	r3, [sp, #16]
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8020bc2:	f6bf af0e 	bge.w	80209e2 <__ieee754_rem_pio2+0x7a>
 8020bc6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8020bca:	6063      	str	r3, [r4, #4]
 8020bcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020bd0:	f8c4 8000 	str.w	r8, [r4]
 8020bd4:	60a0      	str	r0, [r4, #8]
 8020bd6:	60e3      	str	r3, [r4, #12]
 8020bd8:	426d      	negs	r5, r5
 8020bda:	e702      	b.n	80209e2 <__ieee754_rem_pio2+0x7a>
 8020bdc:	a326      	add	r3, pc, #152	@ (adr r3, 8020c78 <__ieee754_rem_pio2+0x310>)
 8020bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020be6:	f7df fd17 	bl	8000618 <__aeabi_dmul>
 8020bea:	4606      	mov	r6, r0
 8020bec:	460f      	mov	r7, r1
 8020bee:	4602      	mov	r2, r0
 8020bf0:	460b      	mov	r3, r1
 8020bf2:	4640      	mov	r0, r8
 8020bf4:	4649      	mov	r1, r9
 8020bf6:	f7df fb57 	bl	80002a8 <__aeabi_dsub>
 8020bfa:	4602      	mov	r2, r0
 8020bfc:	460b      	mov	r3, r1
 8020bfe:	4682      	mov	sl, r0
 8020c00:	468b      	mov	fp, r1
 8020c02:	4640      	mov	r0, r8
 8020c04:	4649      	mov	r1, r9
 8020c06:	f7df fb4f 	bl	80002a8 <__aeabi_dsub>
 8020c0a:	4632      	mov	r2, r6
 8020c0c:	463b      	mov	r3, r7
 8020c0e:	f7df fb4b 	bl	80002a8 <__aeabi_dsub>
 8020c12:	a31b      	add	r3, pc, #108	@ (adr r3, 8020c80 <__ieee754_rem_pio2+0x318>)
 8020c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c18:	4606      	mov	r6, r0
 8020c1a:	460f      	mov	r7, r1
 8020c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020c20:	f7df fcfa 	bl	8000618 <__aeabi_dmul>
 8020c24:	4632      	mov	r2, r6
 8020c26:	463b      	mov	r3, r7
 8020c28:	f7df fb3e 	bl	80002a8 <__aeabi_dsub>
 8020c2c:	4606      	mov	r6, r0
 8020c2e:	460f      	mov	r7, r1
 8020c30:	e764      	b.n	8020afc <__ieee754_rem_pio2+0x194>
 8020c32:	4b1b      	ldr	r3, [pc, #108]	@ (8020ca0 <__ieee754_rem_pio2+0x338>)
 8020c34:	4598      	cmp	r8, r3
 8020c36:	d935      	bls.n	8020ca4 <__ieee754_rem_pio2+0x33c>
 8020c38:	4632      	mov	r2, r6
 8020c3a:	463b      	mov	r3, r7
 8020c3c:	4630      	mov	r0, r6
 8020c3e:	4639      	mov	r1, r7
 8020c40:	f7df fb32 	bl	80002a8 <__aeabi_dsub>
 8020c44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8020c48:	e9c4 0100 	strd	r0, r1, [r4]
 8020c4c:	e69e      	b.n	802098c <__ieee754_rem_pio2+0x24>
 8020c4e:	bf00      	nop
 8020c50:	54400000 	.word	0x54400000
 8020c54:	3ff921fb 	.word	0x3ff921fb
 8020c58:	1a626331 	.word	0x1a626331
 8020c5c:	3dd0b461 	.word	0x3dd0b461
 8020c60:	1a600000 	.word	0x1a600000
 8020c64:	3dd0b461 	.word	0x3dd0b461
 8020c68:	2e037073 	.word	0x2e037073
 8020c6c:	3ba3198a 	.word	0x3ba3198a
 8020c70:	6dc9c883 	.word	0x6dc9c883
 8020c74:	3fe45f30 	.word	0x3fe45f30
 8020c78:	2e000000 	.word	0x2e000000
 8020c7c:	3ba3198a 	.word	0x3ba3198a
 8020c80:	252049c1 	.word	0x252049c1
 8020c84:	397b839a 	.word	0x397b839a
 8020c88:	3fe921fb 	.word	0x3fe921fb
 8020c8c:	4002d97b 	.word	0x4002d97b
 8020c90:	3ff921fb 	.word	0x3ff921fb
 8020c94:	413921fb 	.word	0x413921fb
 8020c98:	3fe00000 	.word	0x3fe00000
 8020c9c:	08022070 	.word	0x08022070
 8020ca0:	7fefffff 	.word	0x7fefffff
 8020ca4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8020ca8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8020cac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8020cb0:	4630      	mov	r0, r6
 8020cb2:	460f      	mov	r7, r1
 8020cb4:	f7df ff60 	bl	8000b78 <__aeabi_d2iz>
 8020cb8:	f7df fc44 	bl	8000544 <__aeabi_i2d>
 8020cbc:	4602      	mov	r2, r0
 8020cbe:	460b      	mov	r3, r1
 8020cc0:	4630      	mov	r0, r6
 8020cc2:	4639      	mov	r1, r7
 8020cc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8020cc8:	f7df faee 	bl	80002a8 <__aeabi_dsub>
 8020ccc:	4b22      	ldr	r3, [pc, #136]	@ (8020d58 <__ieee754_rem_pio2+0x3f0>)
 8020cce:	2200      	movs	r2, #0
 8020cd0:	f7df fca2 	bl	8000618 <__aeabi_dmul>
 8020cd4:	460f      	mov	r7, r1
 8020cd6:	4606      	mov	r6, r0
 8020cd8:	f7df ff4e 	bl	8000b78 <__aeabi_d2iz>
 8020cdc:	f7df fc32 	bl	8000544 <__aeabi_i2d>
 8020ce0:	4602      	mov	r2, r0
 8020ce2:	460b      	mov	r3, r1
 8020ce4:	4630      	mov	r0, r6
 8020ce6:	4639      	mov	r1, r7
 8020ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020cec:	f7df fadc 	bl	80002a8 <__aeabi_dsub>
 8020cf0:	4b19      	ldr	r3, [pc, #100]	@ (8020d58 <__ieee754_rem_pio2+0x3f0>)
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	f7df fc90 	bl	8000618 <__aeabi_dmul>
 8020cf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8020cfc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8020d00:	f04f 0803 	mov.w	r8, #3
 8020d04:	2600      	movs	r6, #0
 8020d06:	2700      	movs	r7, #0
 8020d08:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8020d0c:	4632      	mov	r2, r6
 8020d0e:	463b      	mov	r3, r7
 8020d10:	46c2      	mov	sl, r8
 8020d12:	f108 38ff 	add.w	r8, r8, #4294967295
 8020d16:	f7df fee7 	bl	8000ae8 <__aeabi_dcmpeq>
 8020d1a:	2800      	cmp	r0, #0
 8020d1c:	d1f4      	bne.n	8020d08 <__ieee754_rem_pio2+0x3a0>
 8020d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8020d5c <__ieee754_rem_pio2+0x3f4>)
 8020d20:	9301      	str	r3, [sp, #4]
 8020d22:	2302      	movs	r3, #2
 8020d24:	9300      	str	r3, [sp, #0]
 8020d26:	462a      	mov	r2, r5
 8020d28:	4653      	mov	r3, sl
 8020d2a:	4621      	mov	r1, r4
 8020d2c:	a806      	add	r0, sp, #24
 8020d2e:	f000 f8cf 	bl	8020ed0 <__kernel_rem_pio2>
 8020d32:	9b04      	ldr	r3, [sp, #16]
 8020d34:	2b00      	cmp	r3, #0
 8020d36:	4605      	mov	r5, r0
 8020d38:	f6bf ae53 	bge.w	80209e2 <__ieee754_rem_pio2+0x7a>
 8020d3c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8020d40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020d44:	e9c4 2300 	strd	r2, r3, [r4]
 8020d48:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8020d4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020d50:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8020d54:	e740      	b.n	8020bd8 <__ieee754_rem_pio2+0x270>
 8020d56:	bf00      	nop
 8020d58:	41700000 	.word	0x41700000
 8020d5c:	080220f0 	.word	0x080220f0

08020d60 <scalbn>:
 8020d60:	b570      	push	{r4, r5, r6, lr}
 8020d62:	ec55 4b10 	vmov	r4, r5, d0
 8020d66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8020d6a:	4606      	mov	r6, r0
 8020d6c:	462b      	mov	r3, r5
 8020d6e:	b991      	cbnz	r1, 8020d96 <scalbn+0x36>
 8020d70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8020d74:	4323      	orrs	r3, r4
 8020d76:	d03b      	beq.n	8020df0 <scalbn+0x90>
 8020d78:	4b33      	ldr	r3, [pc, #204]	@ (8020e48 <scalbn+0xe8>)
 8020d7a:	4620      	mov	r0, r4
 8020d7c:	4629      	mov	r1, r5
 8020d7e:	2200      	movs	r2, #0
 8020d80:	f7df fc4a 	bl	8000618 <__aeabi_dmul>
 8020d84:	4b31      	ldr	r3, [pc, #196]	@ (8020e4c <scalbn+0xec>)
 8020d86:	429e      	cmp	r6, r3
 8020d88:	4604      	mov	r4, r0
 8020d8a:	460d      	mov	r5, r1
 8020d8c:	da0f      	bge.n	8020dae <scalbn+0x4e>
 8020d8e:	a326      	add	r3, pc, #152	@ (adr r3, 8020e28 <scalbn+0xc8>)
 8020d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d94:	e01e      	b.n	8020dd4 <scalbn+0x74>
 8020d96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8020d9a:	4291      	cmp	r1, r2
 8020d9c:	d10b      	bne.n	8020db6 <scalbn+0x56>
 8020d9e:	4622      	mov	r2, r4
 8020da0:	4620      	mov	r0, r4
 8020da2:	4629      	mov	r1, r5
 8020da4:	f7df fa82 	bl	80002ac <__adddf3>
 8020da8:	4604      	mov	r4, r0
 8020daa:	460d      	mov	r5, r1
 8020dac:	e020      	b.n	8020df0 <scalbn+0x90>
 8020dae:	460b      	mov	r3, r1
 8020db0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8020db4:	3936      	subs	r1, #54	@ 0x36
 8020db6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8020dba:	4296      	cmp	r6, r2
 8020dbc:	dd0d      	ble.n	8020dda <scalbn+0x7a>
 8020dbe:	2d00      	cmp	r5, #0
 8020dc0:	a11b      	add	r1, pc, #108	@ (adr r1, 8020e30 <scalbn+0xd0>)
 8020dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020dc6:	da02      	bge.n	8020dce <scalbn+0x6e>
 8020dc8:	a11b      	add	r1, pc, #108	@ (adr r1, 8020e38 <scalbn+0xd8>)
 8020dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020dce:	a318      	add	r3, pc, #96	@ (adr r3, 8020e30 <scalbn+0xd0>)
 8020dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dd4:	f7df fc20 	bl	8000618 <__aeabi_dmul>
 8020dd8:	e7e6      	b.n	8020da8 <scalbn+0x48>
 8020dda:	1872      	adds	r2, r6, r1
 8020ddc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8020de0:	428a      	cmp	r2, r1
 8020de2:	dcec      	bgt.n	8020dbe <scalbn+0x5e>
 8020de4:	2a00      	cmp	r2, #0
 8020de6:	dd06      	ble.n	8020df6 <scalbn+0x96>
 8020de8:	f36f 531e 	bfc	r3, #20, #11
 8020dec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020df0:	ec45 4b10 	vmov	d0, r4, r5
 8020df4:	bd70      	pop	{r4, r5, r6, pc}
 8020df6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8020dfa:	da08      	bge.n	8020e0e <scalbn+0xae>
 8020dfc:	2d00      	cmp	r5, #0
 8020dfe:	a10a      	add	r1, pc, #40	@ (adr r1, 8020e28 <scalbn+0xc8>)
 8020e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e04:	dac3      	bge.n	8020d8e <scalbn+0x2e>
 8020e06:	a10e      	add	r1, pc, #56	@ (adr r1, 8020e40 <scalbn+0xe0>)
 8020e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020e0c:	e7bf      	b.n	8020d8e <scalbn+0x2e>
 8020e0e:	3236      	adds	r2, #54	@ 0x36
 8020e10:	f36f 531e 	bfc	r3, #20, #11
 8020e14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020e18:	4620      	mov	r0, r4
 8020e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8020e50 <scalbn+0xf0>)
 8020e1c:	4629      	mov	r1, r5
 8020e1e:	2200      	movs	r2, #0
 8020e20:	e7d8      	b.n	8020dd4 <scalbn+0x74>
 8020e22:	bf00      	nop
 8020e24:	f3af 8000 	nop.w
 8020e28:	c2f8f359 	.word	0xc2f8f359
 8020e2c:	01a56e1f 	.word	0x01a56e1f
 8020e30:	8800759c 	.word	0x8800759c
 8020e34:	7e37e43c 	.word	0x7e37e43c
 8020e38:	8800759c 	.word	0x8800759c
 8020e3c:	fe37e43c 	.word	0xfe37e43c
 8020e40:	c2f8f359 	.word	0xc2f8f359
 8020e44:	81a56e1f 	.word	0x81a56e1f
 8020e48:	43500000 	.word	0x43500000
 8020e4c:	ffff3cb0 	.word	0xffff3cb0
 8020e50:	3c900000 	.word	0x3c900000

08020e54 <with_errno>:
 8020e54:	b510      	push	{r4, lr}
 8020e56:	ed2d 8b02 	vpush	{d8}
 8020e5a:	eeb0 8a40 	vmov.f32	s16, s0
 8020e5e:	eef0 8a60 	vmov.f32	s17, s1
 8020e62:	4604      	mov	r4, r0
 8020e64:	f7f9 fece 	bl	801ac04 <__errno>
 8020e68:	eeb0 0a48 	vmov.f32	s0, s16
 8020e6c:	eef0 0a68 	vmov.f32	s1, s17
 8020e70:	ecbd 8b02 	vpop	{d8}
 8020e74:	6004      	str	r4, [r0, #0]
 8020e76:	bd10      	pop	{r4, pc}

08020e78 <xflow>:
 8020e78:	4603      	mov	r3, r0
 8020e7a:	b507      	push	{r0, r1, r2, lr}
 8020e7c:	ec51 0b10 	vmov	r0, r1, d0
 8020e80:	b183      	cbz	r3, 8020ea4 <xflow+0x2c>
 8020e82:	4602      	mov	r2, r0
 8020e84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020e88:	e9cd 2300 	strd	r2, r3, [sp]
 8020e8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020e90:	f7df fbc2 	bl	8000618 <__aeabi_dmul>
 8020e94:	ec41 0b10 	vmov	d0, r0, r1
 8020e98:	2022      	movs	r0, #34	@ 0x22
 8020e9a:	b003      	add	sp, #12
 8020e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ea0:	f7ff bfd8 	b.w	8020e54 <with_errno>
 8020ea4:	4602      	mov	r2, r0
 8020ea6:	460b      	mov	r3, r1
 8020ea8:	e7ee      	b.n	8020e88 <xflow+0x10>
 8020eaa:	0000      	movs	r0, r0
 8020eac:	0000      	movs	r0, r0
	...

08020eb0 <__math_uflow>:
 8020eb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020eb8 <__math_uflow+0x8>
 8020eb4:	f7ff bfe0 	b.w	8020e78 <xflow>
 8020eb8:	00000000 	.word	0x00000000
 8020ebc:	10000000 	.word	0x10000000

08020ec0 <__math_oflow>:
 8020ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020ec8 <__math_oflow+0x8>
 8020ec4:	f7ff bfd8 	b.w	8020e78 <xflow>
 8020ec8:	00000000 	.word	0x00000000
 8020ecc:	70000000 	.word	0x70000000

08020ed0 <__kernel_rem_pio2>:
 8020ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ed4:	ed2d 8b02 	vpush	{d8}
 8020ed8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8020edc:	f112 0f14 	cmn.w	r2, #20
 8020ee0:	9306      	str	r3, [sp, #24]
 8020ee2:	9104      	str	r1, [sp, #16]
 8020ee4:	4bc2      	ldr	r3, [pc, #776]	@ (80211f0 <__kernel_rem_pio2+0x320>)
 8020ee6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8020ee8:	9008      	str	r0, [sp, #32]
 8020eea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020eee:	9300      	str	r3, [sp, #0]
 8020ef0:	9b06      	ldr	r3, [sp, #24]
 8020ef2:	f103 33ff 	add.w	r3, r3, #4294967295
 8020ef6:	bfa8      	it	ge
 8020ef8:	1ed4      	subge	r4, r2, #3
 8020efa:	9305      	str	r3, [sp, #20]
 8020efc:	bfb2      	itee	lt
 8020efe:	2400      	movlt	r4, #0
 8020f00:	2318      	movge	r3, #24
 8020f02:	fb94 f4f3 	sdivge	r4, r4, r3
 8020f06:	f06f 0317 	mvn.w	r3, #23
 8020f0a:	fb04 3303 	mla	r3, r4, r3, r3
 8020f0e:	eb03 0b02 	add.w	fp, r3, r2
 8020f12:	9b00      	ldr	r3, [sp, #0]
 8020f14:	9a05      	ldr	r2, [sp, #20]
 8020f16:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80211e0 <__kernel_rem_pio2+0x310>
 8020f1a:	eb03 0802 	add.w	r8, r3, r2
 8020f1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8020f20:	1aa7      	subs	r7, r4, r2
 8020f22:	ae20      	add	r6, sp, #128	@ 0x80
 8020f24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8020f28:	2500      	movs	r5, #0
 8020f2a:	4545      	cmp	r5, r8
 8020f2c:	dd12      	ble.n	8020f54 <__kernel_rem_pio2+0x84>
 8020f2e:	9b06      	ldr	r3, [sp, #24]
 8020f30:	aa20      	add	r2, sp, #128	@ 0x80
 8020f32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8020f36:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8020f3a:	2700      	movs	r7, #0
 8020f3c:	9b00      	ldr	r3, [sp, #0]
 8020f3e:	429f      	cmp	r7, r3
 8020f40:	dc2e      	bgt.n	8020fa0 <__kernel_rem_pio2+0xd0>
 8020f42:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80211e0 <__kernel_rem_pio2+0x310>
 8020f46:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020f4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020f4e:	46a8      	mov	r8, r5
 8020f50:	2600      	movs	r6, #0
 8020f52:	e01b      	b.n	8020f8c <__kernel_rem_pio2+0xbc>
 8020f54:	42ef      	cmn	r7, r5
 8020f56:	d407      	bmi.n	8020f68 <__kernel_rem_pio2+0x98>
 8020f58:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8020f5c:	f7df faf2 	bl	8000544 <__aeabi_i2d>
 8020f60:	e8e6 0102 	strd	r0, r1, [r6], #8
 8020f64:	3501      	adds	r5, #1
 8020f66:	e7e0      	b.n	8020f2a <__kernel_rem_pio2+0x5a>
 8020f68:	ec51 0b18 	vmov	r0, r1, d8
 8020f6c:	e7f8      	b.n	8020f60 <__kernel_rem_pio2+0x90>
 8020f6e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8020f72:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8020f76:	f7df fb4f 	bl	8000618 <__aeabi_dmul>
 8020f7a:	4602      	mov	r2, r0
 8020f7c:	460b      	mov	r3, r1
 8020f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020f82:	f7df f993 	bl	80002ac <__adddf3>
 8020f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020f8a:	3601      	adds	r6, #1
 8020f8c:	9b05      	ldr	r3, [sp, #20]
 8020f8e:	429e      	cmp	r6, r3
 8020f90:	dded      	ble.n	8020f6e <__kernel_rem_pio2+0x9e>
 8020f92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020f96:	3701      	adds	r7, #1
 8020f98:	ecaa 7b02 	vstmia	sl!, {d7}
 8020f9c:	3508      	adds	r5, #8
 8020f9e:	e7cd      	b.n	8020f3c <__kernel_rem_pio2+0x6c>
 8020fa0:	9b00      	ldr	r3, [sp, #0]
 8020fa2:	f8dd 8000 	ldr.w	r8, [sp]
 8020fa6:	aa0c      	add	r2, sp, #48	@ 0x30
 8020fa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8020fae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8020fb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8020fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8020fb6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8020fba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020fbc:	ab98      	add	r3, sp, #608	@ 0x260
 8020fbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8020fc2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8020fc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020fca:	ac0c      	add	r4, sp, #48	@ 0x30
 8020fcc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8020fce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8020fd2:	46a1      	mov	r9, r4
 8020fd4:	46c2      	mov	sl, r8
 8020fd6:	f1ba 0f00 	cmp.w	sl, #0
 8020fda:	dc77      	bgt.n	80210cc <__kernel_rem_pio2+0x1fc>
 8020fdc:	4658      	mov	r0, fp
 8020fde:	ed9d 0b02 	vldr	d0, [sp, #8]
 8020fe2:	f7ff febd 	bl	8020d60 <scalbn>
 8020fe6:	ec57 6b10 	vmov	r6, r7, d0
 8020fea:	2200      	movs	r2, #0
 8020fec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8020ff0:	4630      	mov	r0, r6
 8020ff2:	4639      	mov	r1, r7
 8020ff4:	f7df fb10 	bl	8000618 <__aeabi_dmul>
 8020ff8:	ec41 0b10 	vmov	d0, r0, r1
 8020ffc:	f7fd fc04 	bl	801e808 <floor>
 8021000:	4b7c      	ldr	r3, [pc, #496]	@ (80211f4 <__kernel_rem_pio2+0x324>)
 8021002:	ec51 0b10 	vmov	r0, r1, d0
 8021006:	2200      	movs	r2, #0
 8021008:	f7df fb06 	bl	8000618 <__aeabi_dmul>
 802100c:	4602      	mov	r2, r0
 802100e:	460b      	mov	r3, r1
 8021010:	4630      	mov	r0, r6
 8021012:	4639      	mov	r1, r7
 8021014:	f7df f948 	bl	80002a8 <__aeabi_dsub>
 8021018:	460f      	mov	r7, r1
 802101a:	4606      	mov	r6, r0
 802101c:	f7df fdac 	bl	8000b78 <__aeabi_d2iz>
 8021020:	9002      	str	r0, [sp, #8]
 8021022:	f7df fa8f 	bl	8000544 <__aeabi_i2d>
 8021026:	4602      	mov	r2, r0
 8021028:	460b      	mov	r3, r1
 802102a:	4630      	mov	r0, r6
 802102c:	4639      	mov	r1, r7
 802102e:	f7df f93b 	bl	80002a8 <__aeabi_dsub>
 8021032:	f1bb 0f00 	cmp.w	fp, #0
 8021036:	4606      	mov	r6, r0
 8021038:	460f      	mov	r7, r1
 802103a:	dd6c      	ble.n	8021116 <__kernel_rem_pio2+0x246>
 802103c:	f108 31ff 	add.w	r1, r8, #4294967295
 8021040:	ab0c      	add	r3, sp, #48	@ 0x30
 8021042:	9d02      	ldr	r5, [sp, #8]
 8021044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021048:	f1cb 0018 	rsb	r0, fp, #24
 802104c:	fa43 f200 	asr.w	r2, r3, r0
 8021050:	4415      	add	r5, r2
 8021052:	4082      	lsls	r2, r0
 8021054:	1a9b      	subs	r3, r3, r2
 8021056:	aa0c      	add	r2, sp, #48	@ 0x30
 8021058:	9502      	str	r5, [sp, #8]
 802105a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 802105e:	f1cb 0217 	rsb	r2, fp, #23
 8021062:	fa43 f902 	asr.w	r9, r3, r2
 8021066:	f1b9 0f00 	cmp.w	r9, #0
 802106a:	dd64      	ble.n	8021136 <__kernel_rem_pio2+0x266>
 802106c:	9b02      	ldr	r3, [sp, #8]
 802106e:	2200      	movs	r2, #0
 8021070:	3301      	adds	r3, #1
 8021072:	9302      	str	r3, [sp, #8]
 8021074:	4615      	mov	r5, r2
 8021076:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 802107a:	4590      	cmp	r8, r2
 802107c:	f300 80a1 	bgt.w	80211c2 <__kernel_rem_pio2+0x2f2>
 8021080:	f1bb 0f00 	cmp.w	fp, #0
 8021084:	dd07      	ble.n	8021096 <__kernel_rem_pio2+0x1c6>
 8021086:	f1bb 0f01 	cmp.w	fp, #1
 802108a:	f000 80c1 	beq.w	8021210 <__kernel_rem_pio2+0x340>
 802108e:	f1bb 0f02 	cmp.w	fp, #2
 8021092:	f000 80c8 	beq.w	8021226 <__kernel_rem_pio2+0x356>
 8021096:	f1b9 0f02 	cmp.w	r9, #2
 802109a:	d14c      	bne.n	8021136 <__kernel_rem_pio2+0x266>
 802109c:	4632      	mov	r2, r6
 802109e:	463b      	mov	r3, r7
 80210a0:	4955      	ldr	r1, [pc, #340]	@ (80211f8 <__kernel_rem_pio2+0x328>)
 80210a2:	2000      	movs	r0, #0
 80210a4:	f7df f900 	bl	80002a8 <__aeabi_dsub>
 80210a8:	4606      	mov	r6, r0
 80210aa:	460f      	mov	r7, r1
 80210ac:	2d00      	cmp	r5, #0
 80210ae:	d042      	beq.n	8021136 <__kernel_rem_pio2+0x266>
 80210b0:	4658      	mov	r0, fp
 80210b2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80211e8 <__kernel_rem_pio2+0x318>
 80210b6:	f7ff fe53 	bl	8020d60 <scalbn>
 80210ba:	4630      	mov	r0, r6
 80210bc:	4639      	mov	r1, r7
 80210be:	ec53 2b10 	vmov	r2, r3, d0
 80210c2:	f7df f8f1 	bl	80002a8 <__aeabi_dsub>
 80210c6:	4606      	mov	r6, r0
 80210c8:	460f      	mov	r7, r1
 80210ca:	e034      	b.n	8021136 <__kernel_rem_pio2+0x266>
 80210cc:	4b4b      	ldr	r3, [pc, #300]	@ (80211fc <__kernel_rem_pio2+0x32c>)
 80210ce:	2200      	movs	r2, #0
 80210d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80210d4:	f7df faa0 	bl	8000618 <__aeabi_dmul>
 80210d8:	f7df fd4e 	bl	8000b78 <__aeabi_d2iz>
 80210dc:	f7df fa32 	bl	8000544 <__aeabi_i2d>
 80210e0:	4b47      	ldr	r3, [pc, #284]	@ (8021200 <__kernel_rem_pio2+0x330>)
 80210e2:	2200      	movs	r2, #0
 80210e4:	4606      	mov	r6, r0
 80210e6:	460f      	mov	r7, r1
 80210e8:	f7df fa96 	bl	8000618 <__aeabi_dmul>
 80210ec:	4602      	mov	r2, r0
 80210ee:	460b      	mov	r3, r1
 80210f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80210f4:	f7df f8d8 	bl	80002a8 <__aeabi_dsub>
 80210f8:	f7df fd3e 	bl	8000b78 <__aeabi_d2iz>
 80210fc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8021100:	f849 0b04 	str.w	r0, [r9], #4
 8021104:	4639      	mov	r1, r7
 8021106:	4630      	mov	r0, r6
 8021108:	f7df f8d0 	bl	80002ac <__adddf3>
 802110c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021114:	e75f      	b.n	8020fd6 <__kernel_rem_pio2+0x106>
 8021116:	d107      	bne.n	8021128 <__kernel_rem_pio2+0x258>
 8021118:	f108 33ff 	add.w	r3, r8, #4294967295
 802111c:	aa0c      	add	r2, sp, #48	@ 0x30
 802111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021122:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8021126:	e79e      	b.n	8021066 <__kernel_rem_pio2+0x196>
 8021128:	4b36      	ldr	r3, [pc, #216]	@ (8021204 <__kernel_rem_pio2+0x334>)
 802112a:	2200      	movs	r2, #0
 802112c:	f7df fcfa 	bl	8000b24 <__aeabi_dcmpge>
 8021130:	2800      	cmp	r0, #0
 8021132:	d143      	bne.n	80211bc <__kernel_rem_pio2+0x2ec>
 8021134:	4681      	mov	r9, r0
 8021136:	2200      	movs	r2, #0
 8021138:	2300      	movs	r3, #0
 802113a:	4630      	mov	r0, r6
 802113c:	4639      	mov	r1, r7
 802113e:	f7df fcd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8021142:	2800      	cmp	r0, #0
 8021144:	f000 80c1 	beq.w	80212ca <__kernel_rem_pio2+0x3fa>
 8021148:	f108 33ff 	add.w	r3, r8, #4294967295
 802114c:	2200      	movs	r2, #0
 802114e:	9900      	ldr	r1, [sp, #0]
 8021150:	428b      	cmp	r3, r1
 8021152:	da70      	bge.n	8021236 <__kernel_rem_pio2+0x366>
 8021154:	2a00      	cmp	r2, #0
 8021156:	f000 808b 	beq.w	8021270 <__kernel_rem_pio2+0x3a0>
 802115a:	f108 38ff 	add.w	r8, r8, #4294967295
 802115e:	ab0c      	add	r3, sp, #48	@ 0x30
 8021160:	f1ab 0b18 	sub.w	fp, fp, #24
 8021164:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8021168:	2b00      	cmp	r3, #0
 802116a:	d0f6      	beq.n	802115a <__kernel_rem_pio2+0x28a>
 802116c:	4658      	mov	r0, fp
 802116e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80211e8 <__kernel_rem_pio2+0x318>
 8021172:	f7ff fdf5 	bl	8020d60 <scalbn>
 8021176:	f108 0301 	add.w	r3, r8, #1
 802117a:	00da      	lsls	r2, r3, #3
 802117c:	9205      	str	r2, [sp, #20]
 802117e:	ec55 4b10 	vmov	r4, r5, d0
 8021182:	aa70      	add	r2, sp, #448	@ 0x1c0
 8021184:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80211fc <__kernel_rem_pio2+0x32c>
 8021188:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 802118c:	4646      	mov	r6, r8
 802118e:	f04f 0a00 	mov.w	sl, #0
 8021192:	2e00      	cmp	r6, #0
 8021194:	f280 80d1 	bge.w	802133a <__kernel_rem_pio2+0x46a>
 8021198:	4644      	mov	r4, r8
 802119a:	2c00      	cmp	r4, #0
 802119c:	f2c0 80ff 	blt.w	802139e <__kernel_rem_pio2+0x4ce>
 80211a0:	4b19      	ldr	r3, [pc, #100]	@ (8021208 <__kernel_rem_pio2+0x338>)
 80211a2:	461f      	mov	r7, r3
 80211a4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80211a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80211aa:	9306      	str	r3, [sp, #24]
 80211ac:	f04f 0a00 	mov.w	sl, #0
 80211b0:	f04f 0b00 	mov.w	fp, #0
 80211b4:	2600      	movs	r6, #0
 80211b6:	eba8 0504 	sub.w	r5, r8, r4
 80211ba:	e0e4      	b.n	8021386 <__kernel_rem_pio2+0x4b6>
 80211bc:	f04f 0902 	mov.w	r9, #2
 80211c0:	e754      	b.n	802106c <__kernel_rem_pio2+0x19c>
 80211c2:	f854 3b04 	ldr.w	r3, [r4], #4
 80211c6:	bb0d      	cbnz	r5, 802120c <__kernel_rem_pio2+0x33c>
 80211c8:	b123      	cbz	r3, 80211d4 <__kernel_rem_pio2+0x304>
 80211ca:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80211ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80211d2:	2301      	movs	r3, #1
 80211d4:	3201      	adds	r2, #1
 80211d6:	461d      	mov	r5, r3
 80211d8:	e74f      	b.n	802107a <__kernel_rem_pio2+0x1aa>
 80211da:	bf00      	nop
 80211dc:	f3af 8000 	nop.w
	...
 80211ec:	3ff00000 	.word	0x3ff00000
 80211f0:	08022238 	.word	0x08022238
 80211f4:	40200000 	.word	0x40200000
 80211f8:	3ff00000 	.word	0x3ff00000
 80211fc:	3e700000 	.word	0x3e700000
 8021200:	41700000 	.word	0x41700000
 8021204:	3fe00000 	.word	0x3fe00000
 8021208:	080221f8 	.word	0x080221f8
 802120c:	1acb      	subs	r3, r1, r3
 802120e:	e7de      	b.n	80211ce <__kernel_rem_pio2+0x2fe>
 8021210:	f108 32ff 	add.w	r2, r8, #4294967295
 8021214:	ab0c      	add	r3, sp, #48	@ 0x30
 8021216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802121a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802121e:	a90c      	add	r1, sp, #48	@ 0x30
 8021220:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8021224:	e737      	b.n	8021096 <__kernel_rem_pio2+0x1c6>
 8021226:	f108 32ff 	add.w	r2, r8, #4294967295
 802122a:	ab0c      	add	r3, sp, #48	@ 0x30
 802122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021230:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8021234:	e7f3      	b.n	802121e <__kernel_rem_pio2+0x34e>
 8021236:	a90c      	add	r1, sp, #48	@ 0x30
 8021238:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 802123c:	3b01      	subs	r3, #1
 802123e:	430a      	orrs	r2, r1
 8021240:	e785      	b.n	802114e <__kernel_rem_pio2+0x27e>
 8021242:	3401      	adds	r4, #1
 8021244:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8021248:	2a00      	cmp	r2, #0
 802124a:	d0fa      	beq.n	8021242 <__kernel_rem_pio2+0x372>
 802124c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802124e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8021252:	eb0d 0503 	add.w	r5, sp, r3
 8021256:	9b06      	ldr	r3, [sp, #24]
 8021258:	aa20      	add	r2, sp, #128	@ 0x80
 802125a:	4443      	add	r3, r8
 802125c:	f108 0701 	add.w	r7, r8, #1
 8021260:	3d98      	subs	r5, #152	@ 0x98
 8021262:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8021266:	4444      	add	r4, r8
 8021268:	42bc      	cmp	r4, r7
 802126a:	da04      	bge.n	8021276 <__kernel_rem_pio2+0x3a6>
 802126c:	46a0      	mov	r8, r4
 802126e:	e6a2      	b.n	8020fb6 <__kernel_rem_pio2+0xe6>
 8021270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021272:	2401      	movs	r4, #1
 8021274:	e7e6      	b.n	8021244 <__kernel_rem_pio2+0x374>
 8021276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021278:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 802127c:	f7df f962 	bl	8000544 <__aeabi_i2d>
 8021280:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8021540 <__kernel_rem_pio2+0x670>
 8021284:	e8e6 0102 	strd	r0, r1, [r6], #8
 8021288:	ed8d 7b02 	vstr	d7, [sp, #8]
 802128c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021290:	46b2      	mov	sl, r6
 8021292:	f04f 0800 	mov.w	r8, #0
 8021296:	9b05      	ldr	r3, [sp, #20]
 8021298:	4598      	cmp	r8, r3
 802129a:	dd05      	ble.n	80212a8 <__kernel_rem_pio2+0x3d8>
 802129c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80212a0:	3701      	adds	r7, #1
 80212a2:	eca5 7b02 	vstmia	r5!, {d7}
 80212a6:	e7df      	b.n	8021268 <__kernel_rem_pio2+0x398>
 80212a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80212ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80212b0:	f7df f9b2 	bl	8000618 <__aeabi_dmul>
 80212b4:	4602      	mov	r2, r0
 80212b6:	460b      	mov	r3, r1
 80212b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80212bc:	f7de fff6 	bl	80002ac <__adddf3>
 80212c0:	f108 0801 	add.w	r8, r8, #1
 80212c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80212c8:	e7e5      	b.n	8021296 <__kernel_rem_pio2+0x3c6>
 80212ca:	f1cb 0000 	rsb	r0, fp, #0
 80212ce:	ec47 6b10 	vmov	d0, r6, r7
 80212d2:	f7ff fd45 	bl	8020d60 <scalbn>
 80212d6:	ec55 4b10 	vmov	r4, r5, d0
 80212da:	4b9b      	ldr	r3, [pc, #620]	@ (8021548 <__kernel_rem_pio2+0x678>)
 80212dc:	2200      	movs	r2, #0
 80212de:	4620      	mov	r0, r4
 80212e0:	4629      	mov	r1, r5
 80212e2:	f7df fc1f 	bl	8000b24 <__aeabi_dcmpge>
 80212e6:	b300      	cbz	r0, 802132a <__kernel_rem_pio2+0x45a>
 80212e8:	4b98      	ldr	r3, [pc, #608]	@ (802154c <__kernel_rem_pio2+0x67c>)
 80212ea:	2200      	movs	r2, #0
 80212ec:	4620      	mov	r0, r4
 80212ee:	4629      	mov	r1, r5
 80212f0:	f7df f992 	bl	8000618 <__aeabi_dmul>
 80212f4:	f7df fc40 	bl	8000b78 <__aeabi_d2iz>
 80212f8:	4606      	mov	r6, r0
 80212fa:	f7df f923 	bl	8000544 <__aeabi_i2d>
 80212fe:	4b92      	ldr	r3, [pc, #584]	@ (8021548 <__kernel_rem_pio2+0x678>)
 8021300:	2200      	movs	r2, #0
 8021302:	f7df f989 	bl	8000618 <__aeabi_dmul>
 8021306:	460b      	mov	r3, r1
 8021308:	4602      	mov	r2, r0
 802130a:	4629      	mov	r1, r5
 802130c:	4620      	mov	r0, r4
 802130e:	f7de ffcb 	bl	80002a8 <__aeabi_dsub>
 8021312:	f7df fc31 	bl	8000b78 <__aeabi_d2iz>
 8021316:	ab0c      	add	r3, sp, #48	@ 0x30
 8021318:	f10b 0b18 	add.w	fp, fp, #24
 802131c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8021320:	f108 0801 	add.w	r8, r8, #1
 8021324:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8021328:	e720      	b.n	802116c <__kernel_rem_pio2+0x29c>
 802132a:	4620      	mov	r0, r4
 802132c:	4629      	mov	r1, r5
 802132e:	f7df fc23 	bl	8000b78 <__aeabi_d2iz>
 8021332:	ab0c      	add	r3, sp, #48	@ 0x30
 8021334:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8021338:	e718      	b.n	802116c <__kernel_rem_pio2+0x29c>
 802133a:	ab0c      	add	r3, sp, #48	@ 0x30
 802133c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8021340:	f7df f900 	bl	8000544 <__aeabi_i2d>
 8021344:	4622      	mov	r2, r4
 8021346:	462b      	mov	r3, r5
 8021348:	f7df f966 	bl	8000618 <__aeabi_dmul>
 802134c:	4652      	mov	r2, sl
 802134e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8021352:	465b      	mov	r3, fp
 8021354:	4620      	mov	r0, r4
 8021356:	4629      	mov	r1, r5
 8021358:	f7df f95e 	bl	8000618 <__aeabi_dmul>
 802135c:	3e01      	subs	r6, #1
 802135e:	4604      	mov	r4, r0
 8021360:	460d      	mov	r5, r1
 8021362:	e716      	b.n	8021192 <__kernel_rem_pio2+0x2c2>
 8021364:	9906      	ldr	r1, [sp, #24]
 8021366:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 802136a:	9106      	str	r1, [sp, #24]
 802136c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8021370:	f7df f952 	bl	8000618 <__aeabi_dmul>
 8021374:	4602      	mov	r2, r0
 8021376:	460b      	mov	r3, r1
 8021378:	4650      	mov	r0, sl
 802137a:	4659      	mov	r1, fp
 802137c:	f7de ff96 	bl	80002ac <__adddf3>
 8021380:	3601      	adds	r6, #1
 8021382:	4682      	mov	sl, r0
 8021384:	468b      	mov	fp, r1
 8021386:	9b00      	ldr	r3, [sp, #0]
 8021388:	429e      	cmp	r6, r3
 802138a:	dc01      	bgt.n	8021390 <__kernel_rem_pio2+0x4c0>
 802138c:	42ae      	cmp	r6, r5
 802138e:	dde9      	ble.n	8021364 <__kernel_rem_pio2+0x494>
 8021390:	ab48      	add	r3, sp, #288	@ 0x120
 8021392:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8021396:	e9c5 ab00 	strd	sl, fp, [r5]
 802139a:	3c01      	subs	r4, #1
 802139c:	e6fd      	b.n	802119a <__kernel_rem_pio2+0x2ca>
 802139e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80213a0:	2b02      	cmp	r3, #2
 80213a2:	dc0b      	bgt.n	80213bc <__kernel_rem_pio2+0x4ec>
 80213a4:	2b00      	cmp	r3, #0
 80213a6:	dc35      	bgt.n	8021414 <__kernel_rem_pio2+0x544>
 80213a8:	d059      	beq.n	802145e <__kernel_rem_pio2+0x58e>
 80213aa:	9b02      	ldr	r3, [sp, #8]
 80213ac:	f003 0007 	and.w	r0, r3, #7
 80213b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80213b4:	ecbd 8b02 	vpop	{d8}
 80213b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80213be:	2b03      	cmp	r3, #3
 80213c0:	d1f3      	bne.n	80213aa <__kernel_rem_pio2+0x4da>
 80213c2:	9b05      	ldr	r3, [sp, #20]
 80213c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80213c8:	eb0d 0403 	add.w	r4, sp, r3
 80213cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80213d0:	4625      	mov	r5, r4
 80213d2:	46c2      	mov	sl, r8
 80213d4:	f1ba 0f00 	cmp.w	sl, #0
 80213d8:	dc69      	bgt.n	80214ae <__kernel_rem_pio2+0x5de>
 80213da:	4645      	mov	r5, r8
 80213dc:	2d01      	cmp	r5, #1
 80213de:	f300 8087 	bgt.w	80214f0 <__kernel_rem_pio2+0x620>
 80213e2:	9c05      	ldr	r4, [sp, #20]
 80213e4:	ab48      	add	r3, sp, #288	@ 0x120
 80213e6:	441c      	add	r4, r3
 80213e8:	2000      	movs	r0, #0
 80213ea:	2100      	movs	r1, #0
 80213ec:	f1b8 0f01 	cmp.w	r8, #1
 80213f0:	f300 809c 	bgt.w	802152c <__kernel_rem_pio2+0x65c>
 80213f4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80213f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80213fc:	f1b9 0f00 	cmp.w	r9, #0
 8021400:	f040 80a6 	bne.w	8021550 <__kernel_rem_pio2+0x680>
 8021404:	9b04      	ldr	r3, [sp, #16]
 8021406:	e9c3 5600 	strd	r5, r6, [r3]
 802140a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 802140e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8021412:	e7ca      	b.n	80213aa <__kernel_rem_pio2+0x4da>
 8021414:	9d05      	ldr	r5, [sp, #20]
 8021416:	ab48      	add	r3, sp, #288	@ 0x120
 8021418:	441d      	add	r5, r3
 802141a:	4644      	mov	r4, r8
 802141c:	2000      	movs	r0, #0
 802141e:	2100      	movs	r1, #0
 8021420:	2c00      	cmp	r4, #0
 8021422:	da35      	bge.n	8021490 <__kernel_rem_pio2+0x5c0>
 8021424:	f1b9 0f00 	cmp.w	r9, #0
 8021428:	d038      	beq.n	802149c <__kernel_rem_pio2+0x5cc>
 802142a:	4602      	mov	r2, r0
 802142c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021430:	9c04      	ldr	r4, [sp, #16]
 8021432:	e9c4 2300 	strd	r2, r3, [r4]
 8021436:	4602      	mov	r2, r0
 8021438:	460b      	mov	r3, r1
 802143a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 802143e:	f7de ff33 	bl	80002a8 <__aeabi_dsub>
 8021442:	ad4a      	add	r5, sp, #296	@ 0x128
 8021444:	2401      	movs	r4, #1
 8021446:	45a0      	cmp	r8, r4
 8021448:	da2b      	bge.n	80214a2 <__kernel_rem_pio2+0x5d2>
 802144a:	f1b9 0f00 	cmp.w	r9, #0
 802144e:	d002      	beq.n	8021456 <__kernel_rem_pio2+0x586>
 8021450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021454:	4619      	mov	r1, r3
 8021456:	9b04      	ldr	r3, [sp, #16]
 8021458:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802145c:	e7a5      	b.n	80213aa <__kernel_rem_pio2+0x4da>
 802145e:	9c05      	ldr	r4, [sp, #20]
 8021460:	ab48      	add	r3, sp, #288	@ 0x120
 8021462:	441c      	add	r4, r3
 8021464:	2000      	movs	r0, #0
 8021466:	2100      	movs	r1, #0
 8021468:	f1b8 0f00 	cmp.w	r8, #0
 802146c:	da09      	bge.n	8021482 <__kernel_rem_pio2+0x5b2>
 802146e:	f1b9 0f00 	cmp.w	r9, #0
 8021472:	d002      	beq.n	802147a <__kernel_rem_pio2+0x5aa>
 8021474:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021478:	4619      	mov	r1, r3
 802147a:	9b04      	ldr	r3, [sp, #16]
 802147c:	e9c3 0100 	strd	r0, r1, [r3]
 8021480:	e793      	b.n	80213aa <__kernel_rem_pio2+0x4da>
 8021482:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8021486:	f7de ff11 	bl	80002ac <__adddf3>
 802148a:	f108 38ff 	add.w	r8, r8, #4294967295
 802148e:	e7eb      	b.n	8021468 <__kernel_rem_pio2+0x598>
 8021490:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8021494:	f7de ff0a 	bl	80002ac <__adddf3>
 8021498:	3c01      	subs	r4, #1
 802149a:	e7c1      	b.n	8021420 <__kernel_rem_pio2+0x550>
 802149c:	4602      	mov	r2, r0
 802149e:	460b      	mov	r3, r1
 80214a0:	e7c6      	b.n	8021430 <__kernel_rem_pio2+0x560>
 80214a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80214a6:	f7de ff01 	bl	80002ac <__adddf3>
 80214aa:	3401      	adds	r4, #1
 80214ac:	e7cb      	b.n	8021446 <__kernel_rem_pio2+0x576>
 80214ae:	ed35 7b02 	vldmdb	r5!, {d7}
 80214b2:	ed8d 7b00 	vstr	d7, [sp]
 80214b6:	ed95 7b02 	vldr	d7, [r5, #8]
 80214ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80214be:	ec53 2b17 	vmov	r2, r3, d7
 80214c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80214c6:	f7de fef1 	bl	80002ac <__adddf3>
 80214ca:	4602      	mov	r2, r0
 80214cc:	460b      	mov	r3, r1
 80214ce:	4606      	mov	r6, r0
 80214d0:	460f      	mov	r7, r1
 80214d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80214d6:	f7de fee7 	bl	80002a8 <__aeabi_dsub>
 80214da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80214de:	f7de fee5 	bl	80002ac <__adddf3>
 80214e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80214e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80214ea:	e9c5 6700 	strd	r6, r7, [r5]
 80214ee:	e771      	b.n	80213d4 <__kernel_rem_pio2+0x504>
 80214f0:	ed34 7b02 	vldmdb	r4!, {d7}
 80214f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80214f8:	ec51 0b17 	vmov	r0, r1, d7
 80214fc:	4652      	mov	r2, sl
 80214fe:	465b      	mov	r3, fp
 8021500:	ed8d 7b00 	vstr	d7, [sp]
 8021504:	f7de fed2 	bl	80002ac <__adddf3>
 8021508:	4602      	mov	r2, r0
 802150a:	460b      	mov	r3, r1
 802150c:	4606      	mov	r6, r0
 802150e:	460f      	mov	r7, r1
 8021510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021514:	f7de fec8 	bl	80002a8 <__aeabi_dsub>
 8021518:	4652      	mov	r2, sl
 802151a:	465b      	mov	r3, fp
 802151c:	f7de fec6 	bl	80002ac <__adddf3>
 8021520:	3d01      	subs	r5, #1
 8021522:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8021526:	e9c4 6700 	strd	r6, r7, [r4]
 802152a:	e757      	b.n	80213dc <__kernel_rem_pio2+0x50c>
 802152c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8021530:	f7de febc 	bl	80002ac <__adddf3>
 8021534:	f108 38ff 	add.w	r8, r8, #4294967295
 8021538:	e758      	b.n	80213ec <__kernel_rem_pio2+0x51c>
 802153a:	bf00      	nop
 802153c:	f3af 8000 	nop.w
	...
 8021548:	41700000 	.word	0x41700000
 802154c:	3e700000 	.word	0x3e700000
 8021550:	9b04      	ldr	r3, [sp, #16]
 8021552:	9a04      	ldr	r2, [sp, #16]
 8021554:	601d      	str	r5, [r3, #0]
 8021556:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 802155a:	605c      	str	r4, [r3, #4]
 802155c:	609f      	str	r7, [r3, #8]
 802155e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8021562:	60d3      	str	r3, [r2, #12]
 8021564:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021568:	6110      	str	r0, [r2, #16]
 802156a:	6153      	str	r3, [r2, #20]
 802156c:	e71d      	b.n	80213aa <__kernel_rem_pio2+0x4da>
 802156e:	bf00      	nop

08021570 <_init>:
 8021570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021572:	bf00      	nop
 8021574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021576:	bc08      	pop	{r3}
 8021578:	469e      	mov	lr, r3
 802157a:	4770      	bx	lr

0802157c <_fini>:
 802157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802157e:	bf00      	nop
 8021580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021582:	bc08      	pop	{r3}
 8021584:	469e      	mov	lr, r3
 8021586:	4770      	bx	lr
