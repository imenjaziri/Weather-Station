
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000230a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002210  08023230  08023230  00024230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025440  08025440  00027500  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08025440  08025440  00026440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025448  08025448  00027500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025448  08025448  00026448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802544c  0802544c  0002644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000500  20000000  08025450  00027000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000060d8  20000500  08025950  00027500  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200065d8  08025950  000275d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027500  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d56  00000000  00000000  00027530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000571a  00000000  00000000  0004c286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  000519a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001598  00000000  00000000  00053598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ddc8  00000000  00000000  00054b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002678a  00000000  00000000  000828f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001095e2  00000000  00000000  000a9082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b2664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000979c  00000000  00000000  001b26a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001bbe44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000500 	.word	0x20000500
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08023218 	.word	0x08023218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000504 	.word	0x20000504
 80001cc:	08023218 	.word	0x08023218

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 ba09 	b.w	80010dc <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9be 	b.w	80010dc <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	468e      	mov	lr, r1
 8000dec:	4604      	mov	r4, r0
 8000dee:	4688      	mov	r8, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d14a      	bne.n	8000e8a <__udivmoddi4+0xa6>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d962      	bls.n	8000ec0 <__udivmoddi4+0xdc>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	b14e      	cbz	r6, 8000e14 <__udivmoddi4+0x30>
 8000e00:	f1c6 0320 	rsb	r3, r6, #32
 8000e04:	fa01 f806 	lsl.w	r8, r1, r6
 8000e08:	fa20 f303 	lsr.w	r3, r0, r3
 8000e0c:	40b7      	lsls	r7, r6
 8000e0e:	ea43 0808 	orr.w	r8, r3, r8
 8000e12:	40b4      	lsls	r4, r6
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x62>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e38:	f080 80ea 	bcs.w	8001010 <__udivmoddi4+0x22c>
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f240 80e7 	bls.w	8001010 <__udivmoddi4+0x22c>
 8000e42:	3902      	subs	r1, #2
 8000e44:	443b      	add	r3, r7
 8000e46:	1a9a      	subs	r2, r3, r2
 8000e48:	b2a3      	uxth	r3, r4
 8000e4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e5a:	459c      	cmp	ip, r3
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x8e>
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e64:	f080 80d6 	bcs.w	8001014 <__udivmoddi4+0x230>
 8000e68:	459c      	cmp	ip, r3
 8000e6a:	f240 80d3 	bls.w	8001014 <__udivmoddi4+0x230>
 8000e6e:	443b      	add	r3, r7
 8000e70:	3802      	subs	r0, #2
 8000e72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e76:	eba3 030c 	sub.w	r3, r3, ip
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	b11d      	cbz	r5, 8000e86 <__udivmoddi4+0xa2>
 8000e7e:	40f3      	lsrs	r3, r6
 8000e80:	2200      	movs	r2, #0
 8000e82:	e9c5 3200 	strd	r3, r2, [r5]
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d905      	bls.n	8000e9a <__udivmoddi4+0xb6>
 8000e8e:	b10d      	cbz	r5, 8000e94 <__udivmoddi4+0xb0>
 8000e90:	e9c5 0100 	strd	r0, r1, [r5]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4608      	mov	r0, r1
 8000e98:	e7f5      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000e9a:	fab3 f183 	clz	r1, r3
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d146      	bne.n	8000f30 <__udivmoddi4+0x14c>
 8000ea2:	4573      	cmp	r3, lr
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xc8>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 8105 	bhi.w	80010b6 <__udivmoddi4+0x2d2>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e5      	beq.n	8000e86 <__udivmoddi4+0xa2>
 8000eba:	e9c5 4800 	strd	r4, r8, [r5]
 8000ebe:	e7e2      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	f000 8090 	beq.w	8000fe6 <__udivmoddi4+0x202>
 8000ec6:	fab2 f682 	clz	r6, r2
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	f040 80a4 	bne.w	8001018 <__udivmoddi4+0x234>
 8000ed0:	1a8a      	subs	r2, r1, r2
 8000ed2:	0c03      	lsrs	r3, r0, #16
 8000ed4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed8:	b280      	uxth	r0, r0
 8000eda:	b2bc      	uxth	r4, r7
 8000edc:	2101      	movs	r1, #1
 8000ede:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ee2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eea:	fb04 f20c 	mul.w	r2, r4, ip
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x11e>
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ef8:	d202      	bcs.n	8000f00 <__udivmoddi4+0x11c>
 8000efa:	429a      	cmp	r2, r3
 8000efc:	f200 80e0 	bhi.w	80010c0 <__udivmoddi4+0x2dc>
 8000f00:	46c4      	mov	ip, r8
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f10:	fb02 f404 	mul.w	r4, r2, r4
 8000f14:	429c      	cmp	r4, r3
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x144>
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x142>
 8000f20:	429c      	cmp	r4, r3
 8000f22:	f200 80ca 	bhi.w	80010ba <__udivmoddi4+0x2d6>
 8000f26:	4602      	mov	r2, r0
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0x98>
 8000f30:	f1c1 0620 	rsb	r6, r1, #32
 8000f34:	408b      	lsls	r3, r1
 8000f36:	fa22 f706 	lsr.w	r7, r2, r6
 8000f3a:	431f      	orrs	r7, r3
 8000f3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f40:	fa20 f306 	lsr.w	r3, r0, r6
 8000f44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f4c:	4323      	orrs	r3, r4
 8000f4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f52:	fa1f fc87 	uxth.w	ip, r7
 8000f56:	fbbe f0f9 	udiv	r0, lr, r9
 8000f5a:	0c1c      	lsrs	r4, r3, #16
 8000f5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f68:	45a6      	cmp	lr, r4
 8000f6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6e:	d909      	bls.n	8000f84 <__udivmoddi4+0x1a0>
 8000f70:	193c      	adds	r4, r7, r4
 8000f72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f76:	f080 809c 	bcs.w	80010b2 <__udivmoddi4+0x2ce>
 8000f7a:	45a6      	cmp	lr, r4
 8000f7c:	f240 8099 	bls.w	80010b2 <__udivmoddi4+0x2ce>
 8000f80:	3802      	subs	r0, #2
 8000f82:	443c      	add	r4, r7
 8000f84:	eba4 040e 	sub.w	r4, r4, lr
 8000f88:	fa1f fe83 	uxth.w	lr, r3
 8000f8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f90:	fb09 4413 	mls	r4, r9, r3, r4
 8000f94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f9c:	45a4      	cmp	ip, r4
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x1ce>
 8000fa0:	193c      	adds	r4, r7, r4
 8000fa2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fa6:	f080 8082 	bcs.w	80010ae <__udivmoddi4+0x2ca>
 8000faa:	45a4      	cmp	ip, r4
 8000fac:	d97f      	bls.n	80010ae <__udivmoddi4+0x2ca>
 8000fae:	3b02      	subs	r3, #2
 8000fb0:	443c      	add	r4, r7
 8000fb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fb6:	eba4 040c 	sub.w	r4, r4, ip
 8000fba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fbe:	4564      	cmp	r4, ip
 8000fc0:	4673      	mov	r3, lr
 8000fc2:	46e1      	mov	r9, ip
 8000fc4:	d362      	bcc.n	800108c <__udivmoddi4+0x2a8>
 8000fc6:	d05f      	beq.n	8001088 <__udivmoddi4+0x2a4>
 8000fc8:	b15d      	cbz	r5, 8000fe2 <__udivmoddi4+0x1fe>
 8000fca:	ebb8 0203 	subs.w	r2, r8, r3
 8000fce:	eb64 0409 	sbc.w	r4, r4, r9
 8000fd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fd6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fda:	431e      	orrs	r6, r3
 8000fdc:	40cc      	lsrs	r4, r1
 8000fde:	e9c5 6400 	strd	r6, r4, [r5]
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	e74f      	b.n	8000e86 <__udivmoddi4+0xa2>
 8000fe6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fea:	0c01      	lsrs	r1, r0, #16
 8000fec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ff0:	b280      	uxth	r0, r0
 8000ff2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	463c      	mov	r4, r7
 8000ffc:	46b8      	mov	r8, r7
 8000ffe:	46be      	mov	lr, r7
 8001000:	2620      	movs	r6, #32
 8001002:	fbb1 f1f7 	udiv	r1, r1, r7
 8001006:	eba2 0208 	sub.w	r2, r2, r8
 800100a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800100e:	e766      	b.n	8000ede <__udivmoddi4+0xfa>
 8001010:	4601      	mov	r1, r0
 8001012:	e718      	b.n	8000e46 <__udivmoddi4+0x62>
 8001014:	4610      	mov	r0, r2
 8001016:	e72c      	b.n	8000e72 <__udivmoddi4+0x8e>
 8001018:	f1c6 0220 	rsb	r2, r6, #32
 800101c:	fa2e f302 	lsr.w	r3, lr, r2
 8001020:	40b7      	lsls	r7, r6
 8001022:	40b1      	lsls	r1, r6
 8001024:	fa20 f202 	lsr.w	r2, r0, r2
 8001028:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800102c:	430a      	orrs	r2, r1
 800102e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001032:	b2bc      	uxth	r4, r7
 8001034:	fb0e 3318 	mls	r3, lr, r8, r3
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800103e:	fb08 f904 	mul.w	r9, r8, r4
 8001042:	40b0      	lsls	r0, r6
 8001044:	4589      	cmp	r9, r1
 8001046:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800104a:	b280      	uxth	r0, r0
 800104c:	d93e      	bls.n	80010cc <__udivmoddi4+0x2e8>
 800104e:	1879      	adds	r1, r7, r1
 8001050:	f108 3cff 	add.w	ip, r8, #4294967295
 8001054:	d201      	bcs.n	800105a <__udivmoddi4+0x276>
 8001056:	4589      	cmp	r9, r1
 8001058:	d81f      	bhi.n	800109a <__udivmoddi4+0x2b6>
 800105a:	eba1 0109 	sub.w	r1, r1, r9
 800105e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001062:	fb09 f804 	mul.w	r8, r9, r4
 8001066:	fb0e 1119 	mls	r1, lr, r9, r1
 800106a:	b292      	uxth	r2, r2
 800106c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001070:	4542      	cmp	r2, r8
 8001072:	d229      	bcs.n	80010c8 <__udivmoddi4+0x2e4>
 8001074:	18ba      	adds	r2, r7, r2
 8001076:	f109 31ff 	add.w	r1, r9, #4294967295
 800107a:	d2c4      	bcs.n	8001006 <__udivmoddi4+0x222>
 800107c:	4542      	cmp	r2, r8
 800107e:	d2c2      	bcs.n	8001006 <__udivmoddi4+0x222>
 8001080:	f1a9 0102 	sub.w	r1, r9, #2
 8001084:	443a      	add	r2, r7
 8001086:	e7be      	b.n	8001006 <__udivmoddi4+0x222>
 8001088:	45f0      	cmp	r8, lr
 800108a:	d29d      	bcs.n	8000fc8 <__udivmoddi4+0x1e4>
 800108c:	ebbe 0302 	subs.w	r3, lr, r2
 8001090:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001094:	3801      	subs	r0, #1
 8001096:	46e1      	mov	r9, ip
 8001098:	e796      	b.n	8000fc8 <__udivmoddi4+0x1e4>
 800109a:	eba7 0909 	sub.w	r9, r7, r9
 800109e:	4449      	add	r1, r9
 80010a0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010a8:	fb09 f804 	mul.w	r8, r9, r4
 80010ac:	e7db      	b.n	8001066 <__udivmoddi4+0x282>
 80010ae:	4673      	mov	r3, lr
 80010b0:	e77f      	b.n	8000fb2 <__udivmoddi4+0x1ce>
 80010b2:	4650      	mov	r0, sl
 80010b4:	e766      	b.n	8000f84 <__udivmoddi4+0x1a0>
 80010b6:	4608      	mov	r0, r1
 80010b8:	e6fd      	b.n	8000eb6 <__udivmoddi4+0xd2>
 80010ba:	443b      	add	r3, r7
 80010bc:	3a02      	subs	r2, #2
 80010be:	e733      	b.n	8000f28 <__udivmoddi4+0x144>
 80010c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010c4:	443b      	add	r3, r7
 80010c6:	e71c      	b.n	8000f02 <__udivmoddi4+0x11e>
 80010c8:	4649      	mov	r1, r9
 80010ca:	e79c      	b.n	8001006 <__udivmoddi4+0x222>
 80010cc:	eba1 0109 	sub.w	r1, r1, r9
 80010d0:	46c4      	mov	ip, r8
 80010d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010d6:	fb09 f804 	mul.w	r8, r9, r4
 80010da:	e7c4      	b.n	8001066 <__udivmoddi4+0x282>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <Start_SatellitePrediction_Task>:
time_t timestamp;
time_t first_los_utc=0;

//#ifdef SATELLITE
void Start_SatellitePrediction_Task(void const * argument)
{
 80010e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e4:	b0ce      	sub	sp, #312	@ 0x138
 80010e6:	af06      	add	r7, sp, #24
 80010e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80010ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80010f0:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN Start_SatellitePrediction_Task */
	const char *tle_line_1 = "1 25544U 98067A   25189.21335687  .00007259  00000-0  13303-3 0  9996";
 80010f2:	4b9d      	ldr	r3, [pc, #628]	@ (8001368 <Start_SatellitePrediction_Task+0x288>)
 80010f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	const char *tle_line_2 = "2 25544  51.6336 202.8559 0002499 346.6817  13.4106 15.50431524518421";
 80010f8:	4b9c      	ldr	r3, [pc, #624]	@ (800136c <Start_SatellitePrediction_Task+0x28c>)
 80010fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	// Create orbit object
	predict_orbital_elements_t *iss = predict_parse_tle(tle_line_1, tle_line_2);
 80010fe:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8001102:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001106:	f004 fd4f 	bl	8005ba8 <predict_parse_tle>
 800110a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	if (!iss) {
 800110e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001112:	2b00      	cmp	r3, #0
 8001114:	d108      	bne.n	8001128 <Start_SatellitePrediction_Task+0x48>
		HAL_UART_Transmit(&huart2,(const uint8_t *)"Failed to initialize orbit from tle!", strlen("Failed to initialize orbit from tle!"),100);
 8001116:	2364      	movs	r3, #100	@ 0x64
 8001118:	2224      	movs	r2, #36	@ 0x24
 800111a:	4995      	ldr	r1, [pc, #596]	@ (8001370 <Start_SatellitePrediction_Task+0x290>)
 800111c:	4895      	ldr	r0, [pc, #596]	@ (8001374 <Start_SatellitePrediction_Task+0x294>)
 800111e:	f014 ffbf 	bl	80160a0 <HAL_UART_Transmit>
		exit(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f018 fbc4 	bl	80198b0 <exit>
	}

	// Create observer object
	//predict_observer_t *obs = predict_create_observer("My Ground Station", MyGps.lat_gps*M_PI/180.0, MyGps.long_gps*M_PI/180.0, MyGps.alt_gps);
	predict_observer_t *obs = predict_create_observer("My Ground Station", 36.84*M_PI/180.0, 10.9*M_PI/180.0, 60.3);
 8001128:	ed9f 2b87 	vldr	d2, [pc, #540]	@ 8001348 <Start_SatellitePrediction_Task+0x268>
 800112c:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 8001350 <Start_SatellitePrediction_Task+0x270>
 8001130:	ed9f 0b89 	vldr	d0, [pc, #548]	@ 8001358 <Start_SatellitePrediction_Task+0x278>
 8001134:	4890      	ldr	r0, [pc, #576]	@ (8001378 <Start_SatellitePrediction_Task+0x298>)
 8001136:	f003 fc83 	bl	8004a40 <predict_create_observer>
 800113a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	if (!obs) {
 800113e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <Start_SatellitePrediction_Task+0x72>
		HAL_UART_Transmit(&huart2,(const uint8_t *)"Failed to initialize observer!", strlen("Failed to initialize observer!"),100);
 8001146:	2364      	movs	r3, #100	@ 0x64
 8001148:	221e      	movs	r2, #30
 800114a:	498c      	ldr	r1, [pc, #560]	@ (800137c <Start_SatellitePrediction_Task+0x29c>)
 800114c:	4889      	ldr	r0, [pc, #548]	@ (8001374 <Start_SatellitePrediction_Task+0x294>)
 800114e:	f014 ffa7 	bl	80160a0 <HAL_UART_Transmit>
	}
	rtc_to_time_t();
 8001152:	f000 f921 	bl	8001398 <rtc_to_time_t>
	predict_julian_date_t julian_time = predict_to_julian(timestamp);
 8001156:	4b8a      	ldr	r3, [pc, #552]	@ (8001380 <Start_SatellitePrediction_Task+0x2a0>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f003 fc02 	bl	8004968 <predict_to_julian>
 8001164:	ed87 0b42 	vstr	d0, [r7, #264]	@ 0x108
	struct predict_position iss_orbit;
	predict_orbit(iss, &iss_orbit, julian_time);
 8001168:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800116c:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 8001170:	4619      	mov	r1, r3
 8001172:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001176:	f005 f99f 	bl	80064b8 <predict_orbit>
	sprintf(buff,"ISS: lat=%f, lon=%f, alt=%f\n", iss_orbit.latitude*180.0/M_PI, iss_orbit.longitude*180.0/M_PI, iss_orbit.altitude);
 800117a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b80      	ldr	r3, [pc, #512]	@ (8001384 <Start_SatellitePrediction_Task+0x2a4>)
 8001184:	f7ff fa48 	bl	8000618 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a373      	add	r3, pc, #460	@ (adr r3, 8001360 <Start_SatellitePrediction_Task+0x280>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fb69 	bl	800086c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4614      	mov	r4, r2
 80011a0:	461d      	mov	r5, r3
 80011a2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b76      	ldr	r3, [pc, #472]	@ (8001384 <Start_SatellitePrediction_Task+0x2a4>)
 80011ac:	f7ff fa34 	bl	8000618 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	a369      	add	r3, pc, #420	@ (adr r3, 8001360 <Start_SatellitePrediction_Task+0x280>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fb55 	bl	800086c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80011ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011d2:	e9cd 0100 	strd	r0, r1, [sp]
 80011d6:	4622      	mov	r2, r4
 80011d8:	462b      	mov	r3, r5
 80011da:	496b      	ldr	r1, [pc, #428]	@ (8001388 <Start_SatellitePrediction_Task+0x2a8>)
 80011dc:	486b      	ldr	r0, [pc, #428]	@ (800138c <Start_SatellitePrediction_Task+0x2ac>)
 80011de:	f01a fa2f 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,(const uint8_t *)buff, strlen(buff),100);
 80011e2:	486a      	ldr	r0, [pc, #424]	@ (800138c <Start_SatellitePrediction_Task+0x2ac>)
 80011e4:	f7ff f854 	bl	8000290 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	4967      	ldr	r1, [pc, #412]	@ (800138c <Start_SatellitePrediction_Task+0x2ac>)
 80011f0:	4860      	ldr	r0, [pc, #384]	@ (8001374 <Start_SatellitePrediction_Task+0x294>)
 80011f2:	f014 ff55 	bl	80160a0 <HAL_UART_Transmit>

	// Observe ISS
	struct predict_observation iss_obs;
	predict_observe_orbit(obs, &iss_orbit, &iss_obs);
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011fe:	4619      	mov	r1, r3
 8001200:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001204:	f003 fc50 	bl	8004aa8 <predict_observe_orbit>
	sprintf(buff,"ISS: azi=%f (rate: %f), ele=%f (rate: %f)\n", iss_obs.azimuth*180.0/M_PI, iss_obs.azimuth_rate*180.0/M_PI, iss_obs.elevation*180.0/M_PI, iss_obs.elevation_rate*180.0/M_PI);
 8001208:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800120c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001210:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b5a      	ldr	r3, [pc, #360]	@ (8001384 <Start_SatellitePrediction_Task+0x2a4>)
 800121a:	f7ff f9fd 	bl	8000618 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	a34e      	add	r3, pc, #312	@ (adr r3, 8001360 <Start_SatellitePrediction_Task+0x280>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff fb1e 	bl	800086c <__aeabi_ddiv>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4692      	mov	sl, r2
 8001236:	469b      	mov	fp, r3
 8001238:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800123c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001240:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b4e      	ldr	r3, [pc, #312]	@ (8001384 <Start_SatellitePrediction_Task+0x2a4>)
 800124a:	f7ff f9e5 	bl	8000618 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	a342      	add	r3, pc, #264	@ (adr r3, 8001360 <Start_SatellitePrediction_Task+0x280>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff fb06 	bl	800086c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800126c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001270:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <Start_SatellitePrediction_Task+0x2a4>)
 800127a:	f7ff f9cd 	bl	8000618 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	a336      	add	r3, pc, #216	@ (adr r3, 8001360 <Start_SatellitePrediction_Task+0x280>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff faee 	bl	800086c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4690      	mov	r8, r2
 8001296:	4699      	mov	r9, r3
 8001298:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800129c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012a0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b36      	ldr	r3, [pc, #216]	@ (8001384 <Start_SatellitePrediction_Task+0x2a4>)
 80012aa:	f7ff f9b5 	bl	8000618 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a32a      	add	r3, pc, #168	@ (adr r3, 8001360 <Start_SatellitePrediction_Task+0x280>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fad6 	bl	800086c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012cc:	e9cd 4500 	strd	r4, r5, [sp]
 80012d0:	4652      	mov	r2, sl
 80012d2:	465b      	mov	r3, fp
 80012d4:	492e      	ldr	r1, [pc, #184]	@ (8001390 <Start_SatellitePrediction_Task+0x2b0>)
 80012d6:	482d      	ldr	r0, [pc, #180]	@ (800138c <Start_SatellitePrediction_Task+0x2ac>)
 80012d8:	f01a f9b2 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,(const uint8_t *)buff, strlen(buff),100);
 80012dc:	482b      	ldr	r0, [pc, #172]	@ (800138c <Start_SatellitePrediction_Task+0x2ac>)
 80012de:	f7fe ffd7 	bl	8000290 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	2364      	movs	r3, #100	@ 0x64
 80012e8:	4928      	ldr	r1, [pc, #160]	@ (800138c <Start_SatellitePrediction_Task+0x2ac>)
 80012ea:	4822      	ldr	r0, [pc, #136]	@ (8001374 <Start_SatellitePrediction_Task+0x294>)
 80012ec:	f014 fed8 	bl	80160a0 <HAL_UART_Transmit>
	// Predict ISS
	list_next_passes(obs, iss, 10, julian_time);
 80012f0:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 80012f4:	220a      	movs	r2, #10
 80012f6:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80012fa:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80012fe:	f000 f8bf 	bl	8001480 <list_next_passes>

	for(;;)
	{
		time_t now=rtc_to_time_t();
 8001302:	f000 f849 	bl	8001398 <rtc_to_time_t>
 8001306:	e9c7 0140 	strd	r0, r1, [r7, #256]	@ 0x100
		if (now>first_los_utc)
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <Start_SatellitePrediction_Task+0x2b4>)
 800130c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001310:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8001314:	4290      	cmp	r0, r2
 8001316:	eb71 0303 	sbcs.w	r3, r1, r3
 800131a:	da0e      	bge.n	800133a <Start_SatellitePrediction_Task+0x25a>
		{
			predict_julian_date_t  jd       = predict_to_julian(now);
 800131c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001320:	f003 fb22 	bl	8004968 <predict_to_julian>
 8001324:	ed87 0b3e 	vstr	d0, [r7, #248]	@ 0xf8
			list_next_passes(obs, iss, 10, jd);
 8001328:	ed97 0b3e 	vldr	d0, [r7, #248]	@ 0xf8
 800132c:	220a      	movs	r2, #10
 800132e:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8001332:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001336:	f000 f8a3 	bl	8001480 <list_next_passes>
		}

		// Add if actual timestamp is less than the last pass then execute again  list next passes
		osDelay(10000);
 800133a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800133e:	f016 fab6 	bl	80178ae <osDelay>
	{
 8001342:	e7de      	b.n	8001302 <Start_SatellitePrediction_Task+0x222>
 8001344:	f3af 8000 	nop.w
 8001348:	66666666 	.word	0x66666666
 800134c:	404e2666 	.word	0x404e2666
 8001350:	3d2a296b 	.word	0x3d2a296b
 8001354:	3fc859d0 	.word	0x3fc859d0
 8001358:	51462649 	.word	0x51462649
 800135c:	3fe49349 	.word	0x3fe49349
 8001360:	54442d18 	.word	0x54442d18
 8001364:	400921fb 	.word	0x400921fb
 8001368:	08023230 	.word	0x08023230
 800136c:	08023278 	.word	0x08023278
 8001370:	080232c0 	.word	0x080232c0
 8001374:	20001468 	.word	0x20001468
 8001378:	080232e8 	.word	0x080232e8
 800137c:	080232fc 	.word	0x080232fc
 8001380:	20000778 	.word	0x20000778
 8001384:	40668000 	.word	0x40668000
 8001388:	0802331c 	.word	0x0802331c
 800138c:	2000051c 	.word	0x2000051c
 8001390:	0802333c 	.word	0x0802333c
 8001394:	20000780 	.word	0x20000780

08001398 <rtc_to_time_t>:

		/* USER CODE END Start_SatellitePrediction_Task */
	}
}
time_t rtc_to_time_t()
{
 8001398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800139c:	b092      	sub	sp, #72	@ 0x48
 800139e:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4830      	ldr	r0, [pc, #192]	@ (800146c <rtc_to_time_t+0xd4>)
 80013aa:	f014 f838 	bl	801541e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	482d      	ldr	r0, [pc, #180]	@ (800146c <rtc_to_time_t+0xd4>)
 80013b8:	f014 f914 	bl	80155e4 <HAL_RTC_GetDate>
	time_t raw;
	// 2) Fill struct tm with the *raw* RTC time (assumed local)
	struct tm timeinfo = { 0 };
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2224      	movs	r2, #36	@ 0x24
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f01a f9cf 	bl	801b766 <memset>
	timeinfo.tm_hour =sTime.Hours;
 80013c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013cc:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_min  =  sTime.Minutes;
 80013ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013d2:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_sec  = sTime.Seconds ;
 80013d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013d8:	607b      	str	r3, [r7, #4]
	timeinfo.tm_year = sDate.Year + 100;
 80013da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80013de:	3364      	adds	r3, #100	@ 0x64
 80013e0:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon  = sDate.Month - 1;
 80013e2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80013e6:	3b01      	subs	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
	timeinfo.tm_mday = sDate.Date;
 80013ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80013ee:	613b      	str	r3, [r7, #16]
	timeinfo.tm_isdst = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24

	// 3) Get a “local” time_t
	raw = mktime(&timeinfo);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f01a fcd0 	bl	801bd9c <mktime>
 80013fc:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
	raw -= ((MyGps.offset/100) * 3600)+((MyGps.offset%100)*60);
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <rtc_to_time_t+0xd8>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <rtc_to_time_t+0xdc>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	1152      	asrs	r2, r2, #5
 800140c:	17db      	asrs	r3, r3, #31
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001414:	fb02 f103 	mul.w	r1, r2, r3
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <rtc_to_time_t+0xd8>)
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <rtc_to_time_t+0xdc>)
 800141e:	fb82 0203 	smull	r0, r2, r2, r3
 8001422:	1150      	asrs	r0, r2, #5
 8001424:	17da      	asrs	r2, r3, #31
 8001426:	1a82      	subs	r2, r0, r2
 8001428:	2064      	movs	r0, #100	@ 0x64
 800142a:	fb00 f202 	mul.w	r2, r0, r2
 800142e:	1a9a      	subs	r2, r3, r2
 8001430:	4613      	mov	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	17da      	asrs	r2, r3, #31
 800143c:	461c      	mov	r4, r3
 800143e:	4615      	mov	r5, r2
 8001440:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001444:	ebb2 0804 	subs.w	r8, r2, r4
 8001448:	eb63 0905 	sbc.w	r9, r3, r5
 800144c:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40

	// 5) Now raw is the true UTC time_t
	timestamp = raw;
 8001450:	4909      	ldr	r1, [pc, #36]	@ (8001478 <rtc_to_time_t+0xe0>)
 8001452:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
	return timestamp;}
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <rtc_to_time_t+0xe0>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	3748      	adds	r7, #72	@ 0x48
 8001466:	46bd      	mov	sp, r7
 8001468:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800146c:	20001368 	.word	0x20001368
 8001470:	20000004 	.word	0x20000004
 8001474:	51eb851f 	.word	0x51eb851f
 8001478:	20000778 	.word	0x20000778
 800147c:	00000000 	.word	0x00000000

08001480 <list_next_passes>:


time_t list_next_passes(predict_observer_t *obs,predict_orbital_elements_t *sat,
		uint8_t count,predict_julian_date_t start_time_julian)
{
 8001480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001484:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8001488:	af14      	add	r7, sp, #80	@ 0x50
 800148a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800148e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001492:	6018      	str	r0, [r3, #0]
 8001494:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001498:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800149c:	6019      	str	r1, [r3, #0]
 800149e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014a2:	ed83 0b00 	vstr	d0, [r3]
 80014a6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80014aa:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 80014ae:	701a      	strb	r2, [r3, #0]
	double elevation_step;
	predict_julian_date_t t = start_time_julian;
 80014b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	for(int i = 0; i < count; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 80014c2:	e220      	b.n	8001906 <list_next_passes+0x486>
		// Next AOS prediction
		struct predict_observation aos =predict_next_aos(obs, sat, t);
 80014c4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80014c8:	f5a3 70f8 	sub.w	r0, r3, #496	@ 0x1f0
 80014cc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80014d0:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 80014d4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80014d8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80014dc:	ed97 0b9c 	vldr	d0, [r7, #624]	@ 0x270
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	f003 ff5c 	bl	80053a0 <predict_next_aos>
		// 2) rough horizon-set to bound the pass
		struct predict_observation los0 =predict_next_los(obs, sat,aos.time + ONE_SEC_IN_DAYS);
 80014e8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80014ec:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80014f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f4:	f20f 4340 	addw	r3, pc, #1088	@ 0x440
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7fe fed6 	bl	80002ac <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	ec43 2b17 	vmov	d7, r2, r3
 8001508:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800150c:	f5a3 70cc 	sub.w	r0, r3, #408	@ 0x198
 8001510:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001514:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8001518:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800151c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001520:	eeb0 0a47 	vmov.f32	s0, s14
 8001524:	eef0 0a67 	vmov.f32	s1, s15
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	6819      	ldr	r1, [r3, #0]
 800152c:	f004 f9ec 	bl	8005908 <predict_next_los>

		// 3) scan between AOS and LOS0 in 10 s steps for true peak
		double best_el = -1e9, best_t = aos.time;
 8001530:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
 800153c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001540:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
		for(elevation_step=aos.time;elevation_step <= los0.time;elevation_step += SCAN_STEP_DAYS)
 800154c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001550:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
 800155c:	e03a      	b.n	80015d4 <list_next_passes+0x154>
		{
			struct predict_position pos;
			predict_orbit(sat, &pos, elevation_step);
 800155e:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8001562:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001566:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800156a:	ed97 0b9e 	vldr	d0, [r7, #632]	@ 0x278
 800156e:	4611      	mov	r1, r2
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f004 ffa1 	bl	80064b8 <predict_orbit>

			struct predict_observation obsr;
			predict_observe_orbit(obs, &pos, &obsr);
 8001576:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800157a:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 800157e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001582:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	f003 fa8e 	bl	8004aa8 <predict_observe_orbit>

			if (obsr.elevation > best_el) {
 800158c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001590:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001594:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001598:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 800159c:	f7ff faae 	bl	8000afc <__aeabi_dcmplt>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <list_next_passes+0x13e>
				best_el = obsr.elevation;
 80015a6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80015aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b2:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
				best_t  = elevation_step;
 80015b6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 80015ba:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
		for(elevation_step=aos.time;elevation_step <= los0.time;elevation_step += SCAN_STEP_DAYS)
 80015be:	a3e8      	add	r3, pc, #928	@ (adr r3, 8001960 <list_next_passes+0x4e0>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80015c8:	f7fe fe70 	bl	80002ac <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
 80015d4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80015d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80015e4:	f7ff fa94 	bl	8000b10 <__aeabi_dcmple>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1b7      	bne.n	800155e <list_next_passes+0xde>
			}
		}

		// 4) skip if peak < 10°
		if (best_el < MIN_EL_RAD) {
 80015ee:	a3de      	add	r3, pc, #888	@ (adr r3, 8001968 <list_next_passes+0x4e8>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 80015f8:	f7ff fa80 	bl	8000afc <__aeabi_dcmplt>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d014      	beq.n	800162c <list_next_passes+0x1ac>
			t = los0.time + ONE_SEC_IN_DAYS;
 8001602:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001606:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800160a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160e:	a3ca      	add	r3, pc, #808	@ (adr r3, 8001938 <list_next_passes+0x4b8>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe fe4a 	bl	80002ac <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
			i--;    // don’t count it
 8001620:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8001624:	3b01      	subs	r3, #1
 8001626:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800162a:	e167      	b.n	80018fc <list_next_passes+0x47c>
			continue;
		}

		// 5) now find the *real* LOS after that peak
		struct predict_observation los =
				predict_next_los(obs, sat,
 800162c:	a3c2      	add	r3, pc, #776	@ (adr r3, 8001938 <list_next_passes+0x4b8>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8001636:	f7fe fe39 	bl	80002ac <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	ec43 2b17 	vmov	d7, r2, r3
 8001642:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 8001646:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800164a:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 800164e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001652:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001656:	eeb0 0a47 	vmov.f32	s0, s14
 800165a:	eef0 0a67 	vmov.f32	s1, s15
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	f004 f951 	bl	8005908 <predict_next_los>
						best_t + ONE_SEC_IN_DAYS);

		// 6) convert & print
		time_t aos_t = predict_from_julian(aos.time);
 8001666:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800166a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800166e:	ed93 7b00 	vldr	d7, [r3]
 8001672:	eeb0 0a47 	vmov.f32	s0, s14
 8001676:	eef0 0a67 	vmov.f32	s1, s15
 800167a:	f003 f99d 	bl	80049b8 <predict_from_julian>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
		time_t max_t = predict_from_julian(best_t);
 8001686:	ed97 0b96 	vldr	d0, [r7, #600]	@ 0x258
 800168a:	f003 f995 	bl	80049b8 <predict_from_julian>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
		time_t los_t = predict_from_julian(los.time);
 8001696:	ed97 7b66 	vldr	d7, [r7, #408]	@ 0x198
 800169a:	eeb0 0a47 	vmov.f32	s0, s14
 800169e:	eef0 0a67 	vmov.f32	s1, s15
 80016a2:	f003 f989 	bl	80049b8 <predict_from_julian>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		if (i == 0)
 80016ae:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d104      	bne.n	80016c0 <list_next_passes+0x240>
		{first_los_utc = los_t;}
 80016b6:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 80016ba:	49a1      	ldr	r1, [pc, #644]	@ (8001940 <list_next_passes+0x4c0>)
 80016bc:	e9c1 2300 	strd	r2, r3, [r1]

		int    dur    = (int)(los_t - aos_t);
 80016c0:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 80016c4:	4611      	mov	r1, r2
 80016c6:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 80016ca:	4613      	mov	r3, r2
 80016cc:	1acb      	subs	r3, r1, r3
 80016ce:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
		struct tm aos_tm, max_tm, los_tm;
		{
			struct tm *tmp = gmtime(&aos_t);
 80016d2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80016d6:	4618      	mov	r0, r3
 80016d8:	f01a f8d8 	bl	801b88c <gmtime>
 80016dc:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
			if (tmp) memcpy(&aos_tm, tmp, sizeof(struct tm));
 80016e0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <list_next_passes+0x278>
 80016e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016ec:	2224      	movs	r2, #36	@ 0x24
 80016ee:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 80016f2:	4618      	mov	r0, r3
 80016f4:	f01b f90f 	bl	801c916 <memcpy>
		}
		{
			struct tm *tmp = gmtime(&max_t);
 80016f8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80016fc:	4618      	mov	r0, r3
 80016fe:	f01a f8c5 	bl	801b88c <gmtime>
 8001702:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
			if (tmp) memcpy(&max_tm, tmp, sizeof(struct tm));
 8001706:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <list_next_passes+0x29e>
 800170e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001712:	2224      	movs	r2, #36	@ 0x24
 8001714:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8001718:	4618      	mov	r0, r3
 800171a:	f01b f8fc 	bl	801c916 <memcpy>
		}
		{
			struct tm *tmp = gmtime(&los_t);
 800171e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001722:	4618      	mov	r0, r3
 8001724:	f01a f8b2 	bl	801b88c <gmtime>
 8001728:	f8c7 0248 	str.w	r0, [r7, #584]	@ 0x248
			if (tmp) memcpy(&los_tm, tmp, sizeof(struct tm));
 800172c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <list_next_passes+0x2c4>
 8001734:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001738:	2224      	movs	r2, #36	@ 0x24
 800173a:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800173e:	4618      	mov	r0, r3
 8001740:	f01b f8e9 	bl	801c916 <memcpy>
				"Max El  : %.1f° at %02d:%02d:%02d UTC\r\n"
				"Az AOS  : %.1f°\r\n"
				"Az LOS  : %.1f°\r\n"
				"--------------------------------------------------------\r\n\r\n",
				// date & time from aos_tm:
				aos_tm.tm_year + 1900, aos_tm.tm_mon + 1, aos_tm.tm_mday,
 8001744:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001748:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800174c:	695b      	ldr	r3, [r3, #20]
		snprintf(buff, sizeof(buff),
 800174e:	f203 7a6c 	addw	sl, r3, #1900	@ 0x76c
				aos_tm.tm_year + 1900, aos_tm.tm_mon + 1, aos_tm.tm_mday,
 8001752:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001756:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800175a:	691b      	ldr	r3, [r3, #16]
		snprintf(buff, sizeof(buff),
 800175c:	3301      	adds	r3, #1
 800175e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001760:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001764:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800176c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001770:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001774:	6899      	ldr	r1, [r3, #8]
 8001776:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001778:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800177c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001780:	6858      	ldr	r0, [r3, #4]
 8001782:	6278      	str	r0, [r7, #36]	@ 0x24
 8001784:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001788:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800178c:	681c      	ldr	r4, [r3, #0]
 800178e:	623c      	str	r4, [r7, #32]
 8001790:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001794:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001798:	689d      	ldr	r5, [r3, #8]
 800179a:	61fd      	str	r5, [r7, #28]
 800179c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80017a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017a4:	685e      	ldr	r6, [r3, #4]
 80017a6:	61be      	str	r6, [r7, #24]
 80017a8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80017ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80017b8:	4a62      	ldr	r2, [pc, #392]	@ (8001944 <list_next_passes+0x4c4>)
 80017ba:	fb82 1203 	smull	r1, r2, r2, r3
 80017be:	441a      	add	r2, r3
 80017c0:	1152      	asrs	r2, r2, #5
 80017c2:	17db      	asrs	r3, r3, #31
 80017c4:	1ad2      	subs	r2, r2, r3
 80017c6:	613a      	str	r2, [r7, #16]
 80017c8:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80017cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001944 <list_next_passes+0x4c4>)
 80017ce:	fb83 1302 	smull	r1, r3, r3, r2
 80017d2:	4413      	add	r3, r2
 80017d4:	1159      	asrs	r1, r3, #5
 80017d6:	17d3      	asrs	r3, r2, #31
 80017d8:	1ace      	subs	r6, r1, r3
 80017da:	4633      	mov	r3, r6
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	1b9b      	subs	r3, r3, r6
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	1ad6      	subs	r6, r2, r3
				aos_tm.tm_hour,      aos_tm.tm_min,      aos_tm.tm_sec,
				los_tm.tm_hour,      los_tm.tm_min,      los_tm.tm_sec,
				dur/60, dur%60, best_el * 180.0/M_PI,
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b57      	ldr	r3, [pc, #348]	@ (8001948 <list_next_passes+0x4c8>)
 80017ea:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 80017ee:	f7fe ff13 	bl	8000618 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
		snprintf(buff, sizeof(buff),
 80017fa:	a34d      	add	r3, pc, #308	@ (adr r3, 8001930 <list_next_passes+0x4b0>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7ff f834 	bl	800086c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4690      	mov	r8, r2
 800180a:	4699      	mov	r9, r3
 800180c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001810:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001814:	6899      	ldr	r1, [r3, #8]
 8001816:	60f9      	str	r1, [r7, #12]
 8001818:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800181c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001820:	6858      	ldr	r0, [r3, #4]
 8001822:	60b8      	str	r0, [r7, #8]
 8001824:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001828:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800182c:	681c      	ldr	r4, [r3, #0]
 800182e:	607c      	str	r4, [r7, #4]
				max_tm.tm_hour,max_tm.tm_min,max_tm.tm_sec,
				aos.azimuth * 180.0/M_PI,
 8001830:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001834:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001838:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <list_next_passes+0x4c8>)
 8001842:	f7fe fee9 	bl	8000618 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
		snprintf(buff, sizeof(buff),
 800184e:	a338      	add	r3, pc, #224	@ (adr r3, 8001930 <list_next_passes+0x4b0>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7ff f80a 	bl	800086c <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4614      	mov	r4, r2
 800185e:	461d      	mov	r5, r3
				los.azimuth * 180.0/M_PI
 8001860:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <list_next_passes+0x4c8>)
 800186a:	f7fe fed5 	bl	8000618 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
		snprintf(buff, sizeof(buff),
 8001876:	a32e      	add	r3, pc, #184	@ (adr r3, 8001930 <list_next_passes+0x4b0>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fff6 	bl	800086c <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8001888:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 800188c:	687c      	ldr	r4, [r7, #4]
 800188e:	940e      	str	r4, [sp, #56]	@ 0x38
 8001890:	68b8      	ldr	r0, [r7, #8]
 8001892:	900d      	str	r0, [sp, #52]	@ 0x34
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	910c      	str	r1, [sp, #48]	@ 0x30
 8001898:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 800189c:	9609      	str	r6, [sp, #36]	@ 0x24
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	9208      	str	r2, [sp, #32]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	9307      	str	r3, [sp, #28]
 80018a6:	69be      	ldr	r6, [r7, #24]
 80018a8:	9606      	str	r6, [sp, #24]
 80018aa:	69fd      	ldr	r5, [r7, #28]
 80018ac:	9505      	str	r5, [sp, #20]
 80018ae:	6a3c      	ldr	r4, [r7, #32]
 80018b0:	9404      	str	r4, [sp, #16]
 80018b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018b4:	9003      	str	r0, [sp, #12]
 80018b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018b8:	9102      	str	r1, [sp, #8]
 80018ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4653      	mov	r3, sl
 80018c4:	4a21      	ldr	r2, [pc, #132]	@ (800194c <list_next_passes+0x4cc>)
 80018c6:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80018ca:	4821      	ldr	r0, [pc, #132]	@ (8001950 <list_next_passes+0x4d0>)
 80018cc:	f019 fe82 	bl	801b5d4 <sniprintf>
		);
		HAL_UART_Transmit(&huart2,(uint8_t*)buff,strlen(buff),HAL_MAX_DELAY);
 80018d0:	481f      	ldr	r0, [pc, #124]	@ (8001950 <list_next_passes+0x4d0>)
 80018d2:	f7fe fcdd 	bl	8000290 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	491c      	ldr	r1, [pc, #112]	@ (8001950 <list_next_passes+0x4d0>)
 80018e0:	481c      	ldr	r0, [pc, #112]	@ (8001954 <list_next_passes+0x4d4>)
 80018e2:	f014 fbdd 	bl	80160a0 <HAL_UART_Transmit>

		// 7) advance to after this LOS
		t = los.time + ONE_SEC_IN_DAYS;
 80018e6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80018ea:	a313      	add	r3, pc, #76	@ (adr r3, 8001938 <list_next_passes+0x4b8>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fcdc 	bl	80002ac <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	for(int i = 0; i < count; i++) {
 80018fc:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8001900:	3301      	adds	r3, #1
 8001902:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8001906:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800190a:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8001914:	429a      	cmp	r2, r3
 8001916:	f6ff add5 	blt.w	80014c4 <list_next_passes+0x44>
	}

	return first_los_utc;
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <list_next_passes+0x4c0>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800192e:	bf00      	nop
 8001930:	54442d18 	.word	0x54442d18
 8001934:	400921fb 	.word	0x400921fb
 8001938:	a0ce5129 	.word	0xa0ce5129
 800193c:	3ee845c8 	.word	0x3ee845c8
 8001940:	20000780 	.word	0x20000780
 8001944:	88888889 	.word	0x88888889
 8001948:	40668000 	.word	0x40668000
 800194c:	08023368 	.word	0x08023368
 8001950:	2000051c 	.word	0x2000051c
 8001954:	20001468 	.word	0x20001468
 8001958:	00000000 	.word	0x00000000
 800195c:	c1cdcd65 	.word	0xc1cdcd65
 8001960:	c901e574 	.word	0xc901e574
 8001964:	3f1e573a 	.word	0x3f1e573a
 8001968:	4ae74487 	.word	0x4ae74487
 800196c:	3fc65718 	.word	0x3fc65718

08001970 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a07      	ldr	r2, [pc, #28]	@ (800199c <vApplicationGetIdleTaskMemory+0x2c>)
 8001980:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	4a06      	ldr	r2, [pc, #24]	@ (80019a0 <vApplicationGetIdleTaskMemory+0x30>)
 8001986:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000798 	.word	0x20000798
 80019a0:	20000838 	.word	0x20000838

080019a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b09c      	sub	sp, #112	@ 0x70
 80019a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <MX_FREERTOS_Init+0xa4>)
 80019ac:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80019b0:	461d      	mov	r5, r3
 80019b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80019be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f015 ff26 	bl	8017816 <osThreadCreate>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a4c <MX_FREERTOS_Init+0xa8>)
 80019ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <MX_FREERTOS_Init+0xac>)
 80019d2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80019d6:	461d      	mov	r5, r3
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 80019e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f015 ff13 	bl	8017816 <osThreadCreate>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <MX_FREERTOS_Init+0xb0>)
 80019f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS_Task */
  osThreadDef(GPS_Task, Start_GPS_Task, osPriorityIdle, 0, 1024);
 80019f6:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <MX_FREERTOS_Init+0xb4>)
 80019f8:	f107 041c 	add.w	r4, r7, #28
 80019fc:	461d      	mov	r5, r3
 80019fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPS_TaskHandle = osThreadCreate(osThread(GPS_Task), NULL);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f015 ff00 	bl	8017816 <osThreadCreate>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <MX_FREERTOS_Init+0xb8>)
 8001a1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SatellitePredic */
  osThreadDef(SatellitePredic, Start_SatellitePrediction_Task, osPriorityIdle, 0, 1024);
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <MX_FREERTOS_Init+0xbc>)
 8001a1e:	463c      	mov	r4, r7
 8001a20:	461d      	mov	r5, r3
 8001a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SatellitePredicHandle = osThreadCreate(osThread(SatellitePredic), NULL);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f015 feef 	bl	8017816 <osThreadCreate>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <MX_FREERTOS_Init+0xc0>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001a3e:	bf00      	nop
 8001a40:	3770      	adds	r7, #112	@ 0x70
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bdb0      	pop	{r4, r5, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0802349c 	.word	0x0802349c
 8001a4c:	20000788 	.word	0x20000788
 8001a50:	080234c4 	.word	0x080234c4
 8001a54:	2000078c 	.word	0x2000078c
 8001a58:	080234ec 	.word	0x080234ec
 8001a5c:	20000790 	.word	0x20000790
 8001a60:	08023518 	.word	0x08023518
 8001a64:	20000794 	.word	0x20000794

08001a68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f015 ff1c 	bl	80178ae <osDelay>
 8001a76:	e7fb      	b.n	8001a70 <StartDefaultTask+0x8>

08001a78 <_gettimeofday>:
 *  Created on: Jun 23, 2025
 *      Author: ThinkPad
 */

int _gettimeofday()
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

    return 0;  // return non-zero for error
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aaa:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aba:	4a24      	ldr	r2, [pc, #144]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac2:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ada:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	4a18      	ldr	r2, [pc, #96]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_GPIO_Init+0xc4>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2120      	movs	r1, #32
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b06:	f011 fffb 	bl	8013b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b10:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <MX_GPIO_Init+0xc8>)
 8001b22:	f011 fe43 	bl	80137ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b26:	2320      	movs	r3, #32
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b40:	f011 fe34 	bl	80137ac <HAL_GPIO_Init>

}
 8001b44:	bf00      	nop
 8001b46:	3728      	adds	r7, #40	@ 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000800 	.word	0x48000800

08001b54 <GPS_Init>:
int hr=0,min=0,days=0,mon=0,yr=0;
int daychange = 0;
GPS_t GPS;

void GPS_Init()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4903      	ldr	r1, [pc, #12]	@ (8001b68 <GPS_Init+0x14>)
 8001b5c:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <GPS_Init+0x18>)
 8001b5e:	f014 fb29 	bl	80161b4 <HAL_UART_Receive_IT>
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000a38 	.word	0x20000a38
 8001b6c:	200013e0 	.word	0x200013e0

08001b70 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i=0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
	calculated_check=0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if(nmeastr[i] == '$')
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b24      	cmp	r3, #36	@ 0x24
 8001b8a:	d103      	bne.n	8001b94 <GPS_validate+0x24>
		i++;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001b92:	e00c      	b.n	8001bae <GPS_validate+0x3e>
		return 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e047      	b.n	8001c28 <GPS_validate+0xb8>
		calculated_check ^= nmeastr[i];// calculate the checksum
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4053      	eors	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
		i++;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <GPS_validate+0x5c>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bc4:	d002      	beq.n	8001bcc <GPS_validate+0x5c>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bca:	dde5      	ble.n	8001b98 <GPS_validate+0x28>
	}

	if(i >= 75){
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bd0:	dd01      	ble.n	8001bd6 <GPS_validate+0x66>
		return 0;// the string was too long so return an error
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e028      	b.n	8001c28 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*'){
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8001be0:	d119      	bne.n	8001c16 <GPS_validate+0xa6>
		check[0] = nmeastr[i+1];    //put hex chars in check string
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i+2];
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;// no checksum separator found there for invalid

	sprintf(checkcalcstr,"%02X",calculated_check);
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	490a      	ldr	r1, [pc, #40]	@ (8001c30 <GPS_validate+0xc0>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f019 fd1a 	bl	801b640 <siprintf>
	return((checkcalcstr[0] == check[0])
 8001c0c:	7a3a      	ldrb	r2, [r7, #8]
 8001c0e:	7b3b      	ldrb	r3, [r7, #12]
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d108      	bne.n	8001c26 <GPS_validate+0xb6>
 8001c14:	e001      	b.n	8001c1a <GPS_validate+0xaa>
		return 0;// no checksum separator found there for invalid
 8001c16:	2300      	movs	r3, #0
 8001c18:	e006      	b.n	8001c28 <GPS_validate+0xb8>
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001c1a:	7a7a      	ldrb	r2, [r7, #9]
 8001c1c:	7b7b      	ldrb	r3, [r7, #13]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d101      	bne.n	8001c26 <GPS_validate+0xb6>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <GPS_validate+0xb8>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	08023534 	.word	0x08023534

08001c34 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af08      	add	r7, sp, #32
 8001c3a:	6078      	str	r0, [r7, #4]
	if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001c3c:	2206      	movs	r2, #6
 8001c3e:	4952      	ldr	r1, [pc, #328]	@ (8001d88 <GPS_parse+0x154>)
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f019 fd98 	bl	801b776 <strncmp>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d137      	bne.n	8001cbc <GPS_parse+0x88>
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d8c <GPS_parse+0x158>)
 8001c4e:	9307      	str	r3, [sp, #28]
 8001c50:	4b4f      	ldr	r3, [pc, #316]	@ (8001d90 <GPS_parse+0x15c>)
 8001c52:	9306      	str	r3, [sp, #24]
 8001c54:	4b4f      	ldr	r3, [pc, #316]	@ (8001d94 <GPS_parse+0x160>)
 8001c56:	9305      	str	r3, [sp, #20]
 8001c58:	4b4f      	ldr	r3, [pc, #316]	@ (8001d98 <GPS_parse+0x164>)
 8001c5a:	9304      	str	r3, [sp, #16]
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d9c <GPS_parse+0x168>)
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	4b4f      	ldr	r3, [pc, #316]	@ (8001da0 <GPS_parse+0x16c>)
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	4b4f      	ldr	r3, [pc, #316]	@ (8001da4 <GPS_parse+0x170>)
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	4b4f      	ldr	r3, [pc, #316]	@ (8001da8 <GPS_parse+0x174>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001dac <GPS_parse+0x178>)
 8001c6e:	4a50      	ldr	r2, [pc, #320]	@ (8001db0 <GPS_parse+0x17c>)
 8001c70:	4950      	ldr	r1, [pc, #320]	@ (8001db4 <GPS_parse+0x180>)
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f019 fd06 	bl	801b684 <siscanf>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dd73      	ble.n	8001d66 <GPS_parse+0x132>
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001db8 <GPS_parse+0x184>)
 8001c80:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c84:	4b4c      	ldr	r3, [pc, #304]	@ (8001db8 <GPS_parse+0x184>)
 8001c86:	7e1b      	ldrb	r3, [r3, #24]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	f000 f8b9 	bl	8001e04 <GPS_nmea_to_dec>
 8001c92:	eef0 7a40 	vmov.f32	s15, s0
 8001c96:	4b48      	ldr	r3, [pc, #288]	@ (8001db8 <GPS_parse+0x184>)
 8001c98:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001c9c:	4b46      	ldr	r3, [pc, #280]	@ (8001db8 <GPS_parse+0x184>)
 8001c9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ca2:	4b45      	ldr	r3, [pc, #276]	@ (8001db8 <GPS_parse+0x184>)
 8001ca4:	7e5b      	ldrb	r3, [r3, #25]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cac:	f000 f8aa 	bl	8001e04 <GPS_nmea_to_dec>
 8001cb0:	eef0 7a40 	vmov.f32	s15, s0
 8001cb4:	4b40      	ldr	r3, [pc, #256]	@ (8001db8 <GPS_parse+0x184>)
 8001cb6:	edc3 7a00 	vstr	s15, [r3]
			return;
 8001cba:	e062      	b.n	8001d82 <GPS_parse+0x14e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	493f      	ldr	r1, [pc, #252]	@ (8001dbc <GPS_parse+0x188>)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f019 fd58 	bl	801b776 <strncmp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d115      	bne.n	8001cf8 <GPS_parse+0xc4>
		if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc0 <GPS_parse+0x18c>)
 8001cce:	9305      	str	r3, [sp, #20]
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc4 <GPS_parse+0x190>)
 8001cd2:	9304      	str	r3, [sp, #16]
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc8 <GPS_parse+0x194>)
 8001cd6:	9303      	str	r3, [sp, #12]
 8001cd8:	4b31      	ldr	r3, [pc, #196]	@ (8001da0 <GPS_parse+0x16c>)
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <GPS_parse+0x170>)
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <GPS_parse+0x174>)
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <GPS_parse+0x178>)
 8001ce6:	4a32      	ldr	r2, [pc, #200]	@ (8001db0 <GPS_parse+0x17c>)
 8001ce8:	4938      	ldr	r1, [pc, #224]	@ (8001dcc <GPS_parse+0x198>)
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f019 fcca 	bl	801b684 <siscanf>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dd37      	ble.n	8001d66 <GPS_parse+0x132>
			return;
 8001cf6:	e044      	b.n	8001d82 <GPS_parse+0x14e>

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001cf8:	2206      	movs	r2, #6
 8001cfa:	4935      	ldr	r1, [pc, #212]	@ (8001dd0 <GPS_parse+0x19c>)
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f019 fd3a 	bl	801b776 <strncmp>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d111      	bne.n	8001d2c <GPS_parse+0xf8>
		if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001d08:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <GPS_parse+0x1a0>)
 8001d0a:	9303      	str	r3, [sp, #12]
 8001d0c:	4b28      	ldr	r3, [pc, #160]	@ (8001db0 <GPS_parse+0x17c>)
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <GPS_parse+0x16c>)
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <GPS_parse+0x170>)
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <GPS_parse+0x174>)
 8001d1a:	4a24      	ldr	r2, [pc, #144]	@ (8001dac <GPS_parse+0x178>)
 8001d1c:	492e      	ldr	r1, [pc, #184]	@ (8001dd8 <GPS_parse+0x1a4>)
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f019 fcb0 	bl	801b684 <siscanf>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	dd1d      	ble.n	8001d66 <GPS_parse+0x132>
			return;
 8001d2a:	e02a      	b.n	8001d82 <GPS_parse+0x14e>
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001d2c:	2206      	movs	r2, #6
 8001d2e:	492b      	ldr	r1, [pc, #172]	@ (8001ddc <GPS_parse+0x1a8>)
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f019 fd20 	bl	801b776 <strncmp>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d114      	bne.n	8001d66 <GPS_parse+0x132>
		if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <GPS_parse+0x1ac>)
 8001d3e:	9305      	str	r3, [sp, #20]
 8001d40:	4b28      	ldr	r3, [pc, #160]	@ (8001de4 <GPS_parse+0x1b0>)
 8001d42:	9304      	str	r3, [sp, #16]
 8001d44:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <GPS_parse+0x1b4>)
 8001d46:	9303      	str	r3, [sp, #12]
 8001d48:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <GPS_parse+0x194>)
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <GPS_parse+0x1b8>)
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <GPS_parse+0x1bc>)
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4b27      	ldr	r3, [pc, #156]	@ (8001df4 <GPS_parse+0x1c0>)
 8001d56:	4a28      	ldr	r2, [pc, #160]	@ (8001df8 <GPS_parse+0x1c4>)
 8001d58:	4928      	ldr	r1, [pc, #160]	@ (8001dfc <GPS_parse+0x1c8>)
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f019 fc92 	bl	801b684 <siscanf>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	dc0c      	bgt.n	8001d80 <GPS_parse+0x14c>
			return;
	}
	MyGps.alt_gps=GPS.msl_altitude;
 8001d66:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <GPS_parse+0x184>)
 8001d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6a:	4a25      	ldr	r2, [pc, #148]	@ (8001e00 <GPS_parse+0x1cc>)
 8001d6c:	6013      	str	r3, [r2, #0]
	MyGps.lat_gps=GPS.dec_latitude;
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <GPS_parse+0x184>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a23      	ldr	r2, [pc, #140]	@ (8001e00 <GPS_parse+0x1cc>)
 8001d74:	6053      	str	r3, [r2, #4]
	MyGps.long_gps=GPS.dec_longitude;
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <GPS_parse+0x184>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <GPS_parse+0x1cc>)
 8001d7c:	6093      	str	r3, [r2, #8]
 8001d7e:	e000      	b.n	8001d82 <GPS_parse+0x14e>
			return;
 8001d80:	bf00      	nop
}
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	0802353c 	.word	0x0802353c
 8001d8c:	20000b04 	.word	0x20000b04
 8001d90:	20000b00 	.word	0x20000b00
 8001d94:	20000afc 	.word	0x20000afc
 8001d98:	20000af8 	.word	0x20000af8
 8001d9c:	20000af4 	.word	0x20000af4
 8001da0:	20000af1 	.word	0x20000af1
 8001da4:	20000ae4 	.word	0x20000ae4
 8001da8:	20000af0 	.word	0x20000af0
 8001dac:	20000ae8 	.word	0x20000ae8
 8001db0:	20000aec 	.word	0x20000aec
 8001db4:	08023544 	.word	0x08023544
 8001db8:	20000ad8 	.word	0x20000ad8
 8001dbc:	0802356c 	.word	0x0802356c
 8001dc0:	20000b10 	.word	0x20000b10
 8001dc4:	20000b0c 	.word	0x20000b0c
 8001dc8:	20000b08 	.word	0x20000b08
 8001dcc:	08023574 	.word	0x08023574
 8001dd0:	08023594 	.word	0x08023594
 8001dd4:	20000b14 	.word	0x20000b14
 8001dd8:	0802359c 	.word	0x0802359c
 8001ddc:	080235b8 	.word	0x080235b8
 8001de0:	20000b2c 	.word	0x20000b2c
 8001de4:	20000b28 	.word	0x20000b28
 8001de8:	20000b25 	.word	0x20000b25
 8001dec:	20000b24 	.word	0x20000b24
 8001df0:	20000b20 	.word	0x20000b20
 8001df4:	20000b1c 	.word	0x20000b1c
 8001df8:	20000b18 	.word	0x20000b18
 8001dfc:	080235c0 	.word	0x080235c0
 8001e00:	20000004 	.word	0x20000004

08001e04 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e0e:	4603      	mov	r3, r0
 8001e10:	70fb      	strb	r3, [r7, #3]
	int degree = (int)(deg_coord/100);
 8001e12:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e16:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001e98 <GPS_nmea_to_dec+0x94>
 8001e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e22:	ee17 3a90 	vmov	r3, s15
 8001e26:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree*100;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2264      	movs	r2, #100	@ 0x64
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e38:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e40:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8001e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e48:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e9c <GPS_nmea_to_dec+0x98>
 8001e4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e50:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W') { // return negative
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	2b53      	cmp	r3, #83	@ 0x53
 8001e6e:	d002      	beq.n	8001e76 <GPS_nmea_to_dec+0x72>
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	2b57      	cmp	r3, #87	@ 0x57
 8001e74:	d105      	bne.n	8001e82 <GPS_nmea_to_dec+0x7e>
		decimal *= -1;
 8001e76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e7a:	eef1 7a67 	vneg.f32	s15, s15
 8001e7e:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	ee07 3a90 	vmov	s15, r3
}
 8001e88:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	42c80000 	.word	0x42c80000
 8001e9c:	42700000 	.word	0x42700000

08001ea0 <GPS_Nmea_time>:
void GPS_Nmea_time(){
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
	uint32_t time_int = (uint32_t)GPS.utc_time;
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8001f9c <GPS_Nmea_time+0xfc>)
 8001ea8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb0:	ee17 3a90 	vmov	r3, s15
 8001eb4:	607b      	str	r3, [r7, #4]
	hr = time_int/10000 + MyGps.offset/100;   // get the hours from the 6 digit number
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a39      	ldr	r2, [pc, #228]	@ (8001fa0 <GPS_Nmea_time+0x100>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0b5a      	lsrs	r2, r3, #13
 8001ec0:	4b38      	ldr	r3, [pc, #224]	@ (8001fa4 <GPS_Nmea_time+0x104>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	4938      	ldr	r1, [pc, #224]	@ (8001fa8 <GPS_Nmea_time+0x108>)
 8001ec6:	fb81 0103 	smull	r0, r1, r1, r3
 8001eca:	1149      	asrs	r1, r1, #5
 8001ecc:	17db      	asrs	r3, r3, #31
 8001ece:	1acb      	subs	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b35      	ldr	r3, [pc, #212]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001ed6:	601a      	str	r2, [r3, #0]

	min = (time_int/100)%100 + MyGps.offset%100;  // get the minutes from the 6 digit number
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a33      	ldr	r2, [pc, #204]	@ (8001fa8 <GPS_Nmea_time+0x108>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	095a      	lsrs	r2, r3, #5
 8001ee2:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <GPS_Nmea_time+0x108>)
 8001ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	2164      	movs	r1, #100	@ 0x64
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa4 <GPS_Nmea_time+0x104>)
 8001ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ef6:	492c      	ldr	r1, [pc, #176]	@ (8001fa8 <GPS_Nmea_time+0x108>)
 8001ef8:	fb81 0102 	smull	r0, r1, r1, r2
 8001efc:	1148      	asrs	r0, r1, #5
 8001efe:	17d1      	asrs	r1, r2, #31
 8001f00:	1a41      	subs	r1, r0, r1
 8001f02:	2064      	movs	r0, #100	@ 0x64
 8001f04:	fb00 f101 	mul.w	r1, r0, r1
 8001f08:	1a51      	subs	r1, r2, r1
 8001f0a:	460a      	mov	r2, r1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <GPS_Nmea_time+0x110>)
 8001f12:	601a      	str	r2, [r3, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <GPS_Nmea_time+0x110>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f1a:	dd09      	ble.n	8001f30 <GPS_Nmea_time+0x90>
	{
		min = min-60;
 8001f1c:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <GPS_Nmea_time+0x110>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3b3c      	subs	r3, #60	@ 0x3c
 8001f22:	4a23      	ldr	r2, [pc, #140]	@ (8001fb0 <GPS_Nmea_time+0x110>)
 8001f24:	6013      	str	r3, [r2, #0]
		hr++;
 8001f26:	4b21      	ldr	r3, [pc, #132]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f2e:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001f30:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	da09      	bge.n	8001f4c <GPS_Nmea_time+0xac>
	{
		hr=24+hr;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f40:	6013      	str	r3, [r2, #0]
		daychange--;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <GPS_Nmea_time+0x114>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb4 <GPS_Nmea_time+0x114>)
 8001f4a:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001f4c:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b17      	cmp	r3, #23
 8001f52:	dd09      	ble.n	8001f68 <GPS_Nmea_time+0xc8>
	{
		hr=hr-24;
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3b18      	subs	r3, #24
 8001f5a:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f5c:	6013      	str	r3, [r2, #0]
		daychange++;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <GPS_Nmea_time+0x114>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <GPS_Nmea_time+0x114>)
 8001f66:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	MyGps.hours= hr;
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <GPS_Nmea_time+0x10c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <GPS_Nmea_time+0x104>)
 8001f6e:	60d3      	str	r3, [r2, #12]
	MyGps.minutes= min;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <GPS_Nmea_time+0x110>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <GPS_Nmea_time+0x104>)
 8001f76:	6113      	str	r3, [r2, #16]
	MyGps.seconds = time_int%100;
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <GPS_Nmea_time+0x108>)
 8001f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	2164      	movs	r1, #100	@ 0x64
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <GPS_Nmea_time+0x104>)
 8001f8e:	615a      	str	r2, [r3, #20]

}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	20000ad8 	.word	0x20000ad8
 8001fa0:	d1b71759 	.word	0xd1b71759
 8001fa4:	20000004 	.word	0x20000004
 8001fa8:	51eb851f 	.word	0x51eb851f
 8001fac:	20000ac0 	.word	0x20000ac0
 8001fb0:	20000ac4 	.word	0x20000ac4
 8001fb4:	20000ad4 	.word	0x20000ad4

08001fb8 <GPS_Nmea_Date>:
void GPS_Nmea_Date(){
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
	// Date in the format 280222
		days = GPS.date/10000;
 8001fbc:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <GPS_Nmea_Date+0x8c>)
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc0:	4a21      	ldr	r2, [pc, #132]	@ (8002048 <GPS_Nmea_Date+0x90>)
 8001fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc6:	1312      	asrs	r2, r2, #12
 8001fc8:	17db      	asrs	r3, r3, #31
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800204c <GPS_Nmea_Date+0x94>)
 8001fce:	6013      	str	r3, [r2, #0]
		mon = (GPS.date/100)%100;
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <GPS_Nmea_Date+0x8c>)
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <GPS_Nmea_Date+0x98>)
 8001fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001fda:	1152      	asrs	r2, r2, #5
 8001fdc:	17db      	asrs	r3, r3, #31
 8001fde:	1ad2      	subs	r2, r2, r3
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <GPS_Nmea_Date+0x98>)
 8001fe2:	fb83 1302 	smull	r1, r3, r3, r2
 8001fe6:	1159      	asrs	r1, r3, #5
 8001fe8:	17d3      	asrs	r3, r2, #31
 8001fea:	1acb      	subs	r3, r1, r3
 8001fec:	2164      	movs	r1, #100	@ 0x64
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <GPS_Nmea_Date+0x9c>)
 8001ff6:	6013      	str	r3, [r2, #0]
		yr = GPS.date%100;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <GPS_Nmea_Date+0x8c>)
 8001ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ffc:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <GPS_Nmea_Date+0x98>)
 8001ffe:	fb83 1302 	smull	r1, r3, r3, r2
 8002002:	1159      	asrs	r1, r3, #5
 8002004:	17d3      	asrs	r3, r2, #31
 8002006:	1acb      	subs	r3, r1, r3
 8002008:	2164      	movs	r1, #100	@ 0x64
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <GPS_Nmea_Date+0xa0>)
 8002012:	6013      	str	r3, [r2, #0]

		days = days+daychange;
 8002014:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <GPS_Nmea_Date+0x94>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b10      	ldr	r3, [pc, #64]	@ (800205c <GPS_Nmea_Date+0xa4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4413      	add	r3, r2
 800201e:	4a0b      	ldr	r2, [pc, #44]	@ (800204c <GPS_Nmea_Date+0x94>)
 8002020:	6013      	str	r3, [r2, #0]
		MyGps.day=days;
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <GPS_Nmea_Date+0x94>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a0e      	ldr	r2, [pc, #56]	@ (8002060 <GPS_Nmea_Date+0xa8>)
 8002028:	6193      	str	r3, [r2, #24]
		MyGps.month=mon;
 800202a:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <GPS_Nmea_Date+0x9c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a0c      	ldr	r2, [pc, #48]	@ (8002060 <GPS_Nmea_Date+0xa8>)
 8002030:	61d3      	str	r3, [r2, #28]
		MyGps.year=yr;
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <GPS_Nmea_Date+0xa0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <GPS_Nmea_Date+0xa8>)
 8002038:	6213      	str	r3, [r2, #32]
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	20000ad8 	.word	0x20000ad8
 8002048:	68db8bad 	.word	0x68db8bad
 800204c:	20000ac8 	.word	0x20000ac8
 8002050:	51eb851f 	.word	0x51eb851f
 8002054:	20000acc 	.word	0x20000acc
 8002058:	20000ad0 	.word	0x20000ad0
 800205c:	20000ad4 	.word	0x20000ad4
 8002060:	20000004 	.word	0x20000004

08002064 <UpperCase>:
float Old_Default_LatGPS;
int Local_Time_Hour,Local_Time_Minutes,Local_Time_Seconds;
int TimeOffset_New_Value;
#ifndef IHM
//Useful functions for the code
void UpperCase(char *str){
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	while (*str)
 800206c:	e015      	b.n	800209a <UpperCase+0x36>
	{
		*str=toupper(*str);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	3301      	adds	r3, #1
 8002078:	4a0d      	ldr	r2, [pc, #52]	@ (80020b0 <UpperCase+0x4c>)
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d102      	bne.n	800208c <UpperCase+0x28>
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	3b20      	subs	r3, #32
 800208a:	e000      	b.n	800208e <UpperCase+0x2a>
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	701a      	strb	r2, [r3, #0]
		str++;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3301      	adds	r3, #1
 8002098:	607b      	str	r3, [r7, #4]
	while (*str)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1e5      	bne.n	800206e <UpperCase+0xa>
	}
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	08024eb8 	.word	0x08024eb8

080020b4 <Start_IHM_Task>:

void Start_IHM_Task(void const * argument)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_IHM_Task */
	MainMenu();
 80020bc:	f000 f8f2 	bl	80022a4 <MainMenu>
	IhmMessageBufferHandle = xMessageBufferCreate(xIhmMessageBufferSizeBytes);
 80020c0:	2364      	movs	r3, #100	@ 0x64
 80020c2:	2201      	movs	r2, #1
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f015 fcb9 	bl	8017a3e <xStreamBufferGenericCreate>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a15      	ldr	r2, [pc, #84]	@ (8002124 <Start_IHM_Task+0x70>)
 80020d0:	6013      	str	r3, [r2, #0]
	if( IhmMessageBufferHandle != NULL )
 80020d2:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <Start_IHM_Task+0x70>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <Start_IHM_Task+0x32>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 80020da:	2364      	movs	r3, #100	@ 0x64
 80020dc:	2222      	movs	r2, #34	@ 0x22
 80020de:	4912      	ldr	r1, [pc, #72]	@ (8002128 <Start_IHM_Task+0x74>)
 80020e0:	4812      	ldr	r0, [pc, #72]	@ (800212c <Start_IHM_Task+0x78>)
 80020e2:	f013 ffdd 	bl	80160a0 <HAL_UART_Transmit>
	}

	/* Infinite loop */
	for(;;)
	{
		xMessageBufferReceive( IhmMessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <Start_IHM_Task+0x70>)
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	490f      	ldr	r1, [pc, #60]	@ (8002130 <Start_IHM_Task+0x7c>)
 80020f2:	f015 fde6 	bl	8017cc2 <xStreamBufferReceive>
		memset(new_buff,0,sizeof(new_buff));
 80020f6:	2240      	movs	r2, #64	@ 0x40
 80020f8:	2100      	movs	r1, #0
 80020fa:	480e      	ldr	r0, [pc, #56]	@ (8002134 <Start_IHM_Task+0x80>)
 80020fc:	f019 fb33 	bl	801b766 <memset>
		UpperCase((char*)received_data);
 8002100:	480b      	ldr	r0, [pc, #44]	@ (8002130 <Start_IHM_Task+0x7c>)
 8002102:	f7ff ffaf 	bl	8002064 <UpperCase>
		tokenization((char*)received_data);
 8002106:	480a      	ldr	r0, [pc, #40]	@ (8002130 <Start_IHM_Task+0x7c>)
 8002108:	f000 f922 	bl	8002350 <tokenization>
		ParseCommand();
 800210c:	f000 f94e 	bl	80023ac <ParseCommand>
		memset(received_data,0,sizeof(received_data));
 8002110:	2240      	movs	r2, #64	@ 0x40
 8002112:	2100      	movs	r1, #0
 8002114:	4806      	ldr	r0, [pc, #24]	@ (8002130 <Start_IHM_Task+0x7c>)
 8002116:	f019 fb26 	bl	801b766 <memset>
		osDelay(10);
 800211a:	200a      	movs	r0, #10
 800211c:	f015 fbc7 	bl	80178ae <osDelay>
		xMessageBufferReceive( IhmMessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 8002120:	bf00      	nop
 8002122:	e7e0      	b.n	80020e6 <Start_IHM_Task+0x32>
 8002124:	20000dec 	.word	0x20000dec
 8002128:	080235e0 	.word	0x080235e0
 800212c:	20001468 	.word	0x20001468
 8002130:	20000dac 	.word	0x20000dac
 8002134:	20000b70 	.word	0x20000b70

08002138 <HAL_UART_RxCpltCallback>:
	/* USER CODE END Start_IHM_Task */
}

// Fonction pour afficher le menu principal complet

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b4a      	ldr	r3, [pc, #296]	@ (8002270 <HAL_UART_RxCpltCallback+0x138>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d101      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x18>
	{
		GPS_UART_CallBack();
 800214c:	f001 fece 	bl	8003eec <GPS_UART_CallBack>
	}
	  if (huart->Instance == huart2.Instance)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <HAL_UART_RxCpltCallback+0x13c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	f040 8085 	bne.w	8002268 <HAL_UART_RxCpltCallback+0x130>
	{if (!processing)
 800215e:	4b46      	ldr	r3, [pc, #280]	@ (8002278 <HAL_UART_RxCpltCallback+0x140>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d17b      	bne.n	800225e <HAL_UART_RxCpltCallback+0x126>
	{ if ((rxByte == '\r')||(rxByte=='\n'))
 8002166:	4b45      	ldr	r3, [pc, #276]	@ (800227c <HAL_UART_RxCpltCallback+0x144>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b0d      	cmp	r3, #13
 800216c:	d003      	beq.n	8002176 <HAL_UART_RxCpltCallback+0x3e>
 800216e:	4b43      	ldr	r3, [pc, #268]	@ (800227c <HAL_UART_RxCpltCallback+0x144>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b0a      	cmp	r3, #10
 8002174:	d13a      	bne.n	80021ec <HAL_UART_RxCpltCallback+0xb4>
	{   if (rxIndex!=0)
 8002176:	4b42      	ldr	r3, [pc, #264]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06f      	beq.n	800225e <HAL_UART_RxCpltCallback+0x126>
	{
		processing=1;
 800217e:	4b3e      	ldr	r3, [pc, #248]	@ (8002278 <HAL_UART_RxCpltCallback+0x140>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxIndex] = '\0';
 8002184:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b3e      	ldr	r3, [pc, #248]	@ (8002284 <HAL_UART_RxCpltCallback+0x14c>)
 800218c:	2100      	movs	r1, #0
 800218e:	5499      	strb	r1, [r3, r2]
		memcpy(new_buff,rxBuffer,rxIndex);
 8002190:	4b3b      	ldr	r3, [pc, #236]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	493b      	ldr	r1, [pc, #236]	@ (8002284 <HAL_UART_RxCpltCallback+0x14c>)
 8002198:	483b      	ldr	r0, [pc, #236]	@ (8002288 <HAL_UART_RxCpltCallback+0x150>)
 800219a:	f01a fbbc 	bl	801c916 <memcpy>
		xBytesSent=xMessageBufferSendFromISR(IhmMessageBufferHandle,new_buff,strlen((char*)new_buff),&xHigherPriorityTaskWoken);
 800219e:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <HAL_UART_RxCpltCallback+0x154>)
 80021a0:	681c      	ldr	r4, [r3, #0]
 80021a2:	4839      	ldr	r0, [pc, #228]	@ (8002288 <HAL_UART_RxCpltCallback+0x150>)
 80021a4:	f7fe f874 	bl	8000290 <strlen>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b39      	ldr	r3, [pc, #228]	@ (8002290 <HAL_UART_RxCpltCallback+0x158>)
 80021ac:	4936      	ldr	r1, [pc, #216]	@ (8002288 <HAL_UART_RxCpltCallback+0x150>)
 80021ae:	4620      	mov	r0, r4
 80021b0:	f015 fcd7 	bl	8017b62 <xStreamBufferSendFromISR>
 80021b4:	4603      	mov	r3, r0
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_UART_RxCpltCallback+0x15c>)
 80021ba:	701a      	strb	r2, [r3, #0]
		//The number of bytes actually written to the message buffer.  If the
		// * message buffer didn't have enough free space for the message to be stored
		// * then 0 is returned, otherwise xDataLengthBytes is returned.
		if( xBytesSent != strlen((char*)new_buff))
 80021bc:	4b35      	ldr	r3, [pc, #212]	@ (8002294 <HAL_UART_RxCpltCallback+0x15c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461c      	mov	r4, r3
 80021c2:	4831      	ldr	r0, [pc, #196]	@ (8002288 <HAL_UART_RxCpltCallback+0x150>)
 80021c4:	f7fe f864 	bl	8000290 <strlen>
 80021c8:	4603      	mov	r3, r0
 80021ca:	429c      	cmp	r4, r3
 80021cc:	d005      	beq.n	80021da <HAL_UART_RxCpltCallback+0xa2>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"Message sent !=buffer data\r\n",26,100);
 80021ce:	2364      	movs	r3, #100	@ 0x64
 80021d0:	221a      	movs	r2, #26
 80021d2:	4931      	ldr	r1, [pc, #196]	@ (8002298 <HAL_UART_RxCpltCallback+0x160>)
 80021d4:	4827      	ldr	r0, [pc, #156]	@ (8002274 <HAL_UART_RxCpltCallback+0x13c>)
 80021d6:	f013 ff63 	bl	80160a0 <HAL_UART_Transmit>
		}
		memset(rxBuffer,0,sizeof(rxBuffer));
 80021da:	2240      	movs	r2, #64	@ 0x40
 80021dc:	2100      	movs	r1, #0
 80021de:	4829      	ldr	r0, [pc, #164]	@ (8002284 <HAL_UART_RxCpltCallback+0x14c>)
 80021e0:	f019 fac1 	bl	801b766 <memset>
		rxIndex = 0;}
 80021e4:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
	{   if (rxIndex!=0)
 80021ea:	e038      	b.n	800225e <HAL_UART_RxCpltCallback+0x126>
	}

	else { if (rxIndex > 0){
 80021ec:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d021      	beq.n	8002238 <HAL_UART_RxCpltCallback+0x100>

		if (rxByte == '\b') {
 80021f4:	4b21      	ldr	r3, [pc, #132]	@ (800227c <HAL_UART_RxCpltCallback+0x144>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d11d      	bne.n	8002238 <HAL_UART_RxCpltCallback+0x100>
			rxBuffer[rxIndex]=' ';
 80021fc:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_UART_RxCpltCallback+0x14c>)
 8002204:	2120      	movs	r1, #32
 8002206:	5499      	strb	r1, [r3, r2]
			rxIndex=rxIndex-1;
 8002208:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 8002212:	701a      	strb	r2, [r3, #0]
			rxBuffer[rxIndex]=' ';
 8002214:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <HAL_UART_RxCpltCallback+0x14c>)
 800221c:	2120      	movs	r1, #32
 800221e:	5499      	strb	r1, [r3, r2]
			retour=rxIndex-1;
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	3b01      	subs	r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <HAL_UART_RxCpltCallback+0x164>)
 800222a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, (uint8_t *)" \b", 2, 100);
 800222c:	2364      	movs	r3, #100	@ 0x64
 800222e:	2202      	movs	r2, #2
 8002230:	491b      	ldr	r1, [pc, #108]	@ (80022a0 <HAL_UART_RxCpltCallback+0x168>)
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f013 ff34 	bl	80160a0 <HAL_UART_Transmit>
			//{rxBuffer[i]=rxBuffer[retour++];
			//if (i==retour)
			//rxBuffer[i]='\0';}
		}
	}
	if (rxIndex < RX_BUFFER_SIZE-1) {
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b3e      	cmp	r3, #62	@ 0x3e
 800223e:	d80b      	bhi.n	8002258 <HAL_UART_RxCpltCallback+0x120>

		rxBuffer[rxIndex++] = rxByte;
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	b2d1      	uxtb	r1, r2
 8002248:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 800224a:	7011      	strb	r1, [r2, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_UART_RxCpltCallback+0x144>)
 8002250:	7819      	ldrb	r1, [r3, #0]
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <HAL_UART_RxCpltCallback+0x14c>)
 8002254:	5499      	strb	r1, [r3, r2]
 8002256:	e002      	b.n	800225e <HAL_UART_RxCpltCallback+0x126>
	}
	else {
		rxIndex=0;
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <HAL_UART_RxCpltCallback+0x148>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
	}
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800225e:	2201      	movs	r2, #1
 8002260:	4906      	ldr	r1, [pc, #24]	@ (800227c <HAL_UART_RxCpltCallback+0x144>)
 8002262:	4804      	ldr	r0, [pc, #16]	@ (8002274 <HAL_UART_RxCpltCallback+0x13c>)
 8002264:	f013 ffa6 	bl	80161b4 <HAL_UART_Receive_IT>
}
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	200013e0 	.word	0x200013e0
 8002274:	20001468 	.word	0x20001468
 8002278:	20000df4 	.word	0x20000df4
 800227c:	20000bb0 	.word	0x20000bb0
 8002280:	20000bb1 	.word	0x20000bb1
 8002284:	20000b30 	.word	0x20000b30
 8002288:	20000b70 	.word	0x20000b70
 800228c:	20000dec 	.word	0x20000dec
 8002290:	20000df0 	.word	0x20000df0
 8002294:	20000da8 	.word	0x20000da8
 8002298:	08023604 	.word	0x08023604
 800229c:	20000df5 	.word	0x20000df5
 80022a0:	08023624 	.word	0x08023624

080022a4 <MainMenu>:
		//SystemConfig Menu
		{"SAVE",(char*)":TO SAVE MODIFIED PARAMETERS PERMANENTLY WRITE SAVE",Save_f,SysConfig_Menu},
		{"RESTORE",(char*)":TO RESTORE OLD PARAMETERS WRITE RESTORE",Restore_f,SysConfig_Menu},

};
void MainMenu(void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
	// Afficher tout le menu une seule fois
	currentMenu=Main_Menu;
 80022aa:	4b22      	ldr	r3, [pc, #136]	@ (8002334 <MainMenu+0x90>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;30;107m----------------Main Menu---------------\033[0m\n");
 80022b0:	4921      	ldr	r1, [pc, #132]	@ (8002338 <MainMenu+0x94>)
 80022b2:	4822      	ldr	r0, [pc, #136]	@ (800233c <MainMenu+0x98>)
 80022b4:	f019 f9c4 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 500);
 80022b8:	4820      	ldr	r0, [pc, #128]	@ (800233c <MainMenu+0x98>)
 80022ba:	f7fd ffe9 	bl	8000290 <strlen>
 80022be:	4603      	mov	r3, r0
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80022c6:	491d      	ldr	r1, [pc, #116]	@ (800233c <MainMenu+0x98>)
 80022c8:	481d      	ldr	r0, [pc, #116]	@ (8002340 <MainMenu+0x9c>)
 80022ca:	f013 fee9 	bl	80160a0 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	71fb      	strb	r3, [r7, #7]
 80022d2:	e023      	b.n	800231c <MainMenu+0x78>
	{if (cmd_list[l].MenuIndex==Main_Menu)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <MainMenu+0xa0>)
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	330c      	adds	r3, #12
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d118      	bne.n	8002316 <MainMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4a17      	ldr	r2, [pc, #92]	@ (8002344 <MainMenu+0xa0>)
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4914      	ldr	r1, [pc, #80]	@ (8002344 <MainMenu+0xa0>)
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	440b      	add	r3, r1
 80022f6:	3304      	adds	r3, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4913      	ldr	r1, [pc, #76]	@ (8002348 <MainMenu+0xa4>)
 80022fc:	480f      	ldr	r0, [pc, #60]	@ (800233c <MainMenu+0x98>)
 80022fe:	f019 f99f 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002302:	480e      	ldr	r0, [pc, #56]	@ (800233c <MainMenu+0x98>)
 8002304:	f7fd ffc4 	bl	8000290 <strlen>
 8002308:	4603      	mov	r3, r0
 800230a:	b29a      	uxth	r2, r3
 800230c:	2364      	movs	r3, #100	@ 0x64
 800230e:	490b      	ldr	r1, [pc, #44]	@ (800233c <MainMenu+0x98>)
 8002310:	480b      	ldr	r0, [pc, #44]	@ (8002340 <MainMenu+0x9c>)
 8002312:	f013 fec5 	bl	80160a0 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	3301      	adds	r3, #1
 800231a:	71fb      	strb	r3, [r7, #7]
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b25      	cmp	r3, #37	@ 0x25
 8002320:	d9d8      	bls.n	80022d4 <MainMenu+0x30>
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002322:	2201      	movs	r2, #1
 8002324:	4909      	ldr	r1, [pc, #36]	@ (800234c <MainMenu+0xa8>)
 8002326:	4806      	ldr	r0, [pc, #24]	@ (8002340 <MainMenu+0x9c>)
 8002328:	f013 ff44 	bl	80161b4 <HAL_UART_Receive_IT>


}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000e20 	.word	0x20000e20
 8002338:	08023e5c 	.word	0x08023e5c
 800233c:	20000bb4 	.word	0x20000bb4
 8002340:	20001468 	.word	0x20001468
 8002344:	20000060 	.word	0x20000060
 8002348:	08023e98 	.word	0x08023e98
 800234c:	20000bb0 	.word	0x20000bb0

08002350 <tokenization>:
void tokenization(char *str) //function to tokenize input string
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	tokens[0]=strtok(str," ");
 8002358:	4912      	ldr	r1, [pc, #72]	@ (80023a4 <tokenization+0x54>)
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f019 fa30 	bl	801b7c0 <strtok>
 8002360:	4603      	mov	r3, r0
 8002362:	4a11      	ldr	r2, [pc, #68]	@ (80023a8 <tokenization+0x58>)
 8002364:	6013      	str	r3, [r2, #0]
	for (uint8_t i=1; i<10;i++)
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e011      	b.n	8002390 <tokenization+0x40>
	{   tokens[i]=strtok(NULL," ");
 800236c:	7bfc      	ldrb	r4, [r7, #15]
 800236e:	490d      	ldr	r1, [pc, #52]	@ (80023a4 <tokenization+0x54>)
 8002370:	2000      	movs	r0, #0
 8002372:	f019 fa25 	bl	801b7c0 <strtok>
 8002376:	4603      	mov	r3, r0
 8002378:	4a0b      	ldr	r2, [pc, #44]	@ (80023a8 <tokenization+0x58>)
 800237a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (tokens[i]==NULL)
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <tokenization+0x58>)
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <tokenization+0x48>
	for (uint8_t i=1; i<10;i++)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	3301      	adds	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b09      	cmp	r3, #9
 8002394:	d9ea      	bls.n	800236c <tokenization+0x1c>
		break;
	}
}
 8002396:	e000      	b.n	800239a <tokenization+0x4a>
		break;
 8002398:	bf00      	nop
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}
 80023a2:	bf00      	nop
 80023a4:	08023ea4 	.word	0x08023ea4
 80023a8:	20000df8 	.word	0x20000df8

080023ac <ParseCommand>:
uint8_t cl_elements=sizeof(cmd_list)/sizeof(cmd_list[0]);
void ParseCommand() {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
	uint8_t c=0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	71fb      	strb	r3, [r7, #7]
	uint8_t correspond=0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	71bb      	strb	r3, [r7, #6]
	uint8_t accurate=0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	717b      	strb	r3, [r7, #5]
	uint8_t goback=0;
 80023be:	2300      	movs	r3, #0
 80023c0:	713b      	strb	r3, [r7, #4]
	if (strcmp(tokens[0],"..")==0)
 80023c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002478 <ParseCommand+0xcc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	492d      	ldr	r1, [pc, #180]	@ (800247c <ParseCommand+0xd0>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fd ff01 	bl	80001d0 <strcmp>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d135      	bne.n	8002440 <ParseCommand+0x94>
	{MainMenu();
 80023d4:	f7ff ff66 	bl	80022a4 <MainMenu>
	goback=1;}
 80023d8:	2301      	movs	r3, #1
 80023da:	713b      	strb	r3, [r7, #4]
	while (c<cl_elements)
 80023dc:	e030      	b.n	8002440 <ParseCommand+0x94>
	{if (strcmp(tokens[0], cmd_list[c].Name)== 0)
 80023de:	4b26      	ldr	r3, [pc, #152]	@ (8002478 <ParseCommand+0xcc>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	4926      	ldr	r1, [pc, #152]	@ (8002480 <ParseCommand+0xd4>)
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	440b      	add	r3, r1
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f7fd feee 	bl	80001d0 <strcmp>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d11f      	bne.n	800243a <ParseCommand+0x8e>
	{ accurate=1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	717b      	strb	r3, [r7, #5]
	if (currentMenu==cmd_list[c].MenuIndex)
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4a1f      	ldr	r2, [pc, #124]	@ (8002480 <ParseCommand+0xd4>)
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	330c      	adds	r3, #12
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <ParseCommand+0xd8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d10c      	bne.n	800242c <ParseCommand+0x80>
	{cmd_list[c].handler(tokens[1]);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	4a1a      	ldr	r2, [pc, #104]	@ (8002480 <ParseCommand+0xd4>)
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4413      	add	r3, r2
 800241a:	3308      	adds	r3, #8
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	@ (8002478 <ParseCommand+0xcc>)
 8002420:	6852      	ldr	r2, [r2, #4]
 8002422:	4610      	mov	r0, r2
 8002424:	4798      	blx	r3
	correspond=1;}
 8002426:	2301      	movs	r3, #1
 8002428:	71bb      	strb	r3, [r7, #6]
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
	break;
 800242a:	e00e      	b.n	800244a <ParseCommand+0x9e>
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
 800242c:	2364      	movs	r3, #100	@ 0x64
 800242e:	220c      	movs	r2, #12
 8002430:	4915      	ldr	r1, [pc, #84]	@ (8002488 <ParseCommand+0xdc>)
 8002432:	4816      	ldr	r0, [pc, #88]	@ (800248c <ParseCommand+0xe0>)
 8002434:	f013 fe34 	bl	80160a0 <HAL_UART_Transmit>
	break;
 8002438:	e007      	b.n	800244a <ParseCommand+0x9e>
	}
	c++;
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	3301      	adds	r3, #1
 800243e:	71fb      	strb	r3, [r7, #7]
	while (c<cl_elements)
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <ParseCommand+0xe4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	79fa      	ldrb	r2, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d3c9      	bcc.n	80023de <ParseCommand+0x32>
	}
	if (accurate==0 && correspond==0 && goback==0)
 800244a:	797b      	ldrb	r3, [r7, #5]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <ParseCommand+0xbc>
 8002450:	79bb      	ldrb	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <ParseCommand+0xbc>
 8002456:	793b      	ldrb	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <ParseCommand+0xbc>
		HAL_UART_Transmit(&huart2, (uint8_t*)"COMMAND ERROR\r\n",16,100);
 800245c:	2364      	movs	r3, #100	@ 0x64
 800245e:	2210      	movs	r2, #16
 8002460:	490c      	ldr	r1, [pc, #48]	@ (8002494 <ParseCommand+0xe8>)
 8002462:	480a      	ldr	r0, [pc, #40]	@ (800248c <ParseCommand+0xe0>)
 8002464:	f013 fe1c 	bl	80160a0 <HAL_UART_Transmit>

	processing=0;
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <ParseCommand+0xec>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000df8 	.word	0x20000df8
 800247c:	08023ea8 	.word	0x08023ea8
 8002480:	20000060 	.word	0x20000060
 8002484:	20000e20 	.word	0x20000e20
 8002488:	08023eac 	.word	0x08023eac
 800248c:	20001468 	.word	0x20001468
 8002490:	200002c0 	.word	0x200002c0
 8002494:	08023ebc 	.word	0x08023ebc
 8002498:	20000df4 	.word	0x20000df4

0800249c <LoraMenu>:

/*//////////////////////////////////////////////LORA MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
void LoraMenu(char* arg){
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

	currentMenu=Lora_Menu;
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <LoraMenu+0x88>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;38;2;25;25;112;107m--------------- LORA Menu ---------------\033[0m\n \r\n");
 80024aa:	491f      	ldr	r1, [pc, #124]	@ (8002528 <LoraMenu+0x8c>)
 80024ac:	481f      	ldr	r0, [pc, #124]	@ (800252c <LoraMenu+0x90>)
 80024ae:	f019 f8c7 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80024b2:	481e      	ldr	r0, [pc, #120]	@ (800252c <LoraMenu+0x90>)
 80024b4:	f7fd feec 	bl	8000290 <strlen>
 80024b8:	4603      	mov	r3, r0
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	2364      	movs	r3, #100	@ 0x64
 80024be:	491b      	ldr	r1, [pc, #108]	@ (800252c <LoraMenu+0x90>)
 80024c0:	481b      	ldr	r0, [pc, #108]	@ (8002530 <LoraMenu+0x94>)
 80024c2:	f013 fded 	bl	80160a0 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e023      	b.n	8002514 <LoraMenu+0x78>
	{if (cmd_list[l].MenuIndex==Lora_Menu)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	4a19      	ldr	r2, [pc, #100]	@ (8002534 <LoraMenu+0x98>)
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	4413      	add	r3, r2
 80024d4:	330c      	adds	r3, #12
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d118      	bne.n	800250e <LoraMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	4a15      	ldr	r2, [pc, #84]	@ (8002534 <LoraMenu+0x98>)
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	4912      	ldr	r1, [pc, #72]	@ (8002534 <LoraMenu+0x98>)
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	440b      	add	r3, r1
 80024ee:	3304      	adds	r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4911      	ldr	r1, [pc, #68]	@ (8002538 <LoraMenu+0x9c>)
 80024f4:	480d      	ldr	r0, [pc, #52]	@ (800252c <LoraMenu+0x90>)
 80024f6:	f019 f8a3 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80024fa:	480c      	ldr	r0, [pc, #48]	@ (800252c <LoraMenu+0x90>)
 80024fc:	f7fd fec8 	bl	8000290 <strlen>
 8002500:	4603      	mov	r3, r0
 8002502:	b29a      	uxth	r2, r3
 8002504:	2364      	movs	r3, #100	@ 0x64
 8002506:	4909      	ldr	r1, [pc, #36]	@ (800252c <LoraMenu+0x90>)
 8002508:	4809      	ldr	r0, [pc, #36]	@ (8002530 <LoraMenu+0x94>)
 800250a:	f013 fdc9 	bl	80160a0 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	3301      	adds	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b25      	cmp	r3, #37	@ 0x25
 8002518:	d9d8      	bls.n	80024cc <LoraMenu+0x30>
	}
	}
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000e20 	.word	0x20000e20
 8002528:	08023ecc 	.word	0x08023ecc
 800252c:	20000bb4 	.word	0x20000bb4
 8002530:	20001468 	.word	0x20001468
 8002534:	20000060 	.word	0x20000060
 8002538:	08023e98 	.word	0x08023e98

0800253c <SetSF_f>:
void SetSF_f(char* arg){
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	uint8_t success = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]

	if (tokens[1] != NULL && strlen(tokens[1]) < 3) {
 8002548:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <SetSF_f+0x84>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d024      	beq.n	800259a <SetSF_f+0x5e>
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <SetSF_f+0x84>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd fe9b 	bl	8000290 <strlen>
 800255a:	4603      	mov	r3, r0
 800255c:	2b02      	cmp	r3, #2
 800255e:	d81c      	bhi.n	800259a <SetSF_f+0x5e>
		int sf_new_value = atoi(tokens[1]);
 8002560:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <SetSF_f+0x84>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	f017 f99a 	bl	801989e <atoi>
 800256a:	60b8      	str	r0, [r7, #8]

		if (sf_new_value >= MIN_SF && sf_new_value <= MAX_SF) {
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b05      	cmp	r3, #5
 8002570:	dd13      	ble.n	800259a <SetSF_f+0x5e>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	dc10      	bgt.n	800259a <SetSF_f+0x5e>
			sprintf((char*)cmd_buff, "SF VALUE SET TO %d SUCCESSFULLY\r\n", sf_new_value);
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	4912      	ldr	r1, [pc, #72]	@ (80025c4 <SetSF_f+0x88>)
 800257c:	4812      	ldr	r0, [pc, #72]	@ (80025c8 <SetSF_f+0x8c>)
 800257e:	f019 f85f 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002582:	4811      	ldr	r0, [pc, #68]	@ (80025c8 <SetSF_f+0x8c>)
 8002584:	f7fd fe84 	bl	8000290 <strlen>
 8002588:	4603      	mov	r3, r0
 800258a:	b29a      	uxth	r2, r3
 800258c:	2364      	movs	r3, #100	@ 0x64
 800258e:	490e      	ldr	r1, [pc, #56]	@ (80025c8 <SetSF_f+0x8c>)
 8002590:	480e      	ldr	r0, [pc, #56]	@ (80025cc <SetSF_f+0x90>)
 8002592:	f013 fd85 	bl	80160a0 <HAL_UART_Transmit>
			success = 1;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (success==0) {
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <SetSF_f+0x70>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80025a0:	2364      	movs	r3, #100	@ 0x64
 80025a2:	2210      	movs	r2, #16
 80025a4:	490a      	ldr	r1, [pc, #40]	@ (80025d0 <SetSF_f+0x94>)
 80025a6:	4809      	ldr	r0, [pc, #36]	@ (80025cc <SetSF_f+0x90>)
 80025a8:	f013 fd7a 	bl	80160a0 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));  // always clear at the end
 80025ac:	22fa      	movs	r2, #250	@ 0xfa
 80025ae:	2100      	movs	r1, #0
 80025b0:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <SetSF_f+0x8c>)
 80025b2:	f019 f8d8 	bl	801b766 <memset>
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000df8 	.word	0x20000df8
 80025c4:	08023f18 	.word	0x08023f18
 80025c8:	20000e24 	.word	0x20000e24
 80025cc:	20001468 	.word	0x20001468
 80025d0:	08023f3c 	.word	0x08023f3c

080025d4 <GetSF_f>:
	LoraValues.sf_l=0x0C;
}

}*/
void GetSF_f(char* arg)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SF VALUE IS %d \r\nNote: DEFAULT VALUE IS %d",Sf_New_Value,LoraValues.sf_l);
 80025dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <GetSF_f+0x40>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <GetSF_f+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	490d      	ldr	r1, [pc, #52]	@ (800261c <GetSF_f+0x48>)
 80025e8:	480d      	ldr	r0, [pc, #52]	@ (8002620 <GetSF_f+0x4c>)
 80025ea:	f019 f829 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80025ee:	480c      	ldr	r0, [pc, #48]	@ (8002620 <GetSF_f+0x4c>)
 80025f0:	f7fd fe4e 	bl	8000290 <strlen>
 80025f4:	4603      	mov	r3, r0
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	2364      	movs	r3, #100	@ 0x64
 80025fa:	4909      	ldr	r1, [pc, #36]	@ (8002620 <GetSF_f+0x4c>)
 80025fc:	4809      	ldr	r0, [pc, #36]	@ (8002624 <GetSF_f+0x50>)
 80025fe:	f013 fd4f 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002602:	22fa      	movs	r2, #250	@ 0xfa
 8002604:	2100      	movs	r1, #0
 8002606:	4806      	ldr	r0, [pc, #24]	@ (8002620 <GetSF_f+0x4c>)
 8002608:	f019 f8ad 	bl	801b766 <memset>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000e21 	.word	0x20000e21
 8002618:	20000000 	.word	0x20000000
 800261c:	08023f4c 	.word	0x08023f4c
 8002620:	20000e24 	.word	0x20000e24
 8002624:	20001468 	.word	0x20001468

08002628 <SetCR_f>:
void SetCR_f(char* arg)
{   uint8_t cr_flag=0;
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	2300      	movs	r3, #0
 8002632:	77fb      	strb	r3, [r7, #31]
char* CR_Values[]={"1","2","3","4"};
 8002634:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <SetCR_f+0xb0>)
 8002636:	f107 040c 	add.w	r4, r7, #12
 800263a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 8002640:	2300      	movs	r3, #0
 8002642:	77bb      	strb	r3, [r7, #30]
 8002644:	e037      	b.n	80026b6 <SetCR_f+0x8e>
{if (tokens[1]!=NULL &&
 8002646:	4b25      	ldr	r3, [pc, #148]	@ (80026dc <SetCR_f+0xb4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d030      	beq.n	80026b0 <SetCR_f+0x88>
		strcmp(tokens[1],CR_Values[cr])==0)
 800264e:	4b23      	ldr	r3, [pc, #140]	@ (80026dc <SetCR_f+0xb4>)
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	7fbb      	ldrb	r3, [r7, #30]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3320      	adds	r3, #32
 8002658:	443b      	add	r3, r7
 800265a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800265e:	4619      	mov	r1, r3
 8002660:	4610      	mov	r0, r2
 8002662:	f7fd fdb5 	bl	80001d0 <strcmp>
 8002666:	4603      	mov	r3, r0
{if (tokens[1]!=NULL &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d121      	bne.n	80026b0 <SetCR_f+0x88>
{Cr_New_Value=atoi(tokens[1]);
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <SetCR_f+0xb4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	f017 f914 	bl	801989e <atoi>
 8002676:	4603      	mov	r3, r0
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <SetCR_f+0xb8>)
 800267c:	701a      	strb	r2, [r3, #0]
cr_flag=1;
 800267e:	2301      	movs	r3, #1
 8002680:	77fb      	strb	r3, [r7, #31]
sprintf((char*)cmd_buff, "CR VALUE SET TO %d SUCCESSFULLY\r\n", Cr_New_Value);
 8002682:	4b17      	ldr	r3, [pc, #92]	@ (80026e0 <SetCR_f+0xb8>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	4916      	ldr	r1, [pc, #88]	@ (80026e4 <SetCR_f+0xbc>)
 800268a:	4817      	ldr	r0, [pc, #92]	@ (80026e8 <SetCR_f+0xc0>)
 800268c:	f018 ffd8 	bl	801b640 <siprintf>
HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002690:	4815      	ldr	r0, [pc, #84]	@ (80026e8 <SetCR_f+0xc0>)
 8002692:	f7fd fdfd 	bl	8000290 <strlen>
 8002696:	4603      	mov	r3, r0
 8002698:	b29a      	uxth	r2, r3
 800269a:	2364      	movs	r3, #100	@ 0x64
 800269c:	4912      	ldr	r1, [pc, #72]	@ (80026e8 <SetCR_f+0xc0>)
 800269e:	4813      	ldr	r0, [pc, #76]	@ (80026ec <SetCR_f+0xc4>)
 80026a0:	f013 fcfe 	bl	80160a0 <HAL_UART_Transmit>
memset(cmd_buff,0,sizeof(cmd_buff));
 80026a4:	22fa      	movs	r2, #250	@ 0xfa
 80026a6:	2100      	movs	r1, #0
 80026a8:	480f      	ldr	r0, [pc, #60]	@ (80026e8 <SetCR_f+0xc0>)
 80026aa:	f019 f85c 	bl	801b766 <memset>
break;
 80026ae:	e005      	b.n	80026bc <SetCR_f+0x94>
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 80026b0:	7fbb      	ldrb	r3, [r7, #30]
 80026b2:	3301      	adds	r3, #1
 80026b4:	77bb      	strb	r3, [r7, #30]
 80026b6:	7fbb      	ldrb	r3, [r7, #30]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d9c4      	bls.n	8002646 <SetCR_f+0x1e>
}
}

if (cr_flag==0)
 80026bc:	7ffb      	ldrb	r3, [r7, #31]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <SetCR_f+0xa6>
	HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG CR VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 80026c2:	2364      	movs	r3, #100	@ 0x64
 80026c4:	2210      	movs	r2, #16
 80026c6:	490a      	ldr	r1, [pc, #40]	@ (80026f0 <SetCR_f+0xc8>)
 80026c8:	4808      	ldr	r0, [pc, #32]	@ (80026ec <SetCR_f+0xc4>)
 80026ca:	f013 fce9 	bl	80160a0 <HAL_UART_Transmit>
}
 80026ce:	bf00      	nop
 80026d0:	3724      	adds	r7, #36	@ 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	08023fc0 	.word	0x08023fc0
 80026dc:	20000df8 	.word	0x20000df8
 80026e0:	20000f1e 	.word	0x20000f1e
 80026e4:	08023f78 	.word	0x08023f78
 80026e8:	20000e24 	.word	0x20000e24
 80026ec:	20001468 	.word	0x20001468
 80026f0:	08023f9c 	.word	0x08023f9c

080026f4 <GetCR_f>:

void GetCR_f(char* arg)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"CR VALUE IS %d \r\nNote:DEFAULTVALUE IS : %d\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Cr_New_Value,LoraValues.cr_l);
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <GetCR_f+0x40>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <GetCR_f+0x44>)
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	490d      	ldr	r1, [pc, #52]	@ (800273c <GetCR_f+0x48>)
 8002708:	480d      	ldr	r0, [pc, #52]	@ (8002740 <GetCR_f+0x4c>)
 800270a:	f018 ff99 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800270e:	480c      	ldr	r0, [pc, #48]	@ (8002740 <GetCR_f+0x4c>)
 8002710:	f7fd fdbe 	bl	8000290 <strlen>
 8002714:	4603      	mov	r3, r0
 8002716:	b29a      	uxth	r2, r3
 8002718:	2364      	movs	r3, #100	@ 0x64
 800271a:	4909      	ldr	r1, [pc, #36]	@ (8002740 <GetCR_f+0x4c>)
 800271c:	4809      	ldr	r0, [pc, #36]	@ (8002744 <GetCR_f+0x50>)
 800271e:	f013 fcbf 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002722:	22fa      	movs	r2, #250	@ 0xfa
 8002724:	2100      	movs	r1, #0
 8002726:	4806      	ldr	r0, [pc, #24]	@ (8002740 <GetCR_f+0x4c>)
 8002728:	f019 f81d 	bl	801b766 <memset>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000f1e 	.word	0x20000f1e
 8002738:	20000000 	.word	0x20000000
 800273c:	08023fd0 	.word	0x08023fd0
 8002740:	20000e24 	.word	0x20000e24
 8002744:	20001468 	.word	0x20001468

08002748 <SetBW_f>:
void SetBW_f(char* arg)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	uint8_t bw_flag=0;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]
	char* BW_Values[]={"4","5","6"};
 8002754:	4a28      	ldr	r2, [pc, #160]	@ (80027f8 <SetBW_f+0xb0>)
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	ca07      	ldmia	r2, {r0, r1, r2}
 800275c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 8002760:	2300      	movs	r3, #0
 8002762:	75bb      	strb	r3, [r7, #22]
 8002764:	e037      	b.n	80027d6 <SetBW_f+0x8e>
	{if (tokens[1]!=NULL &&
 8002766:	4b25      	ldr	r3, [pc, #148]	@ (80027fc <SetBW_f+0xb4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d030      	beq.n	80027d0 <SetBW_f+0x88>
			strcmp(tokens[1],BW_Values[bw])==0)
 800276e:	4b23      	ldr	r3, [pc, #140]	@ (80027fc <SetBW_f+0xb4>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	7dbb      	ldrb	r3, [r7, #22]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	3318      	adds	r3, #24
 8002778:	443b      	add	r3, r7
 800277a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f7fd fd25 	bl	80001d0 <strcmp>
 8002786:	4603      	mov	r3, r0
	{if (tokens[1]!=NULL &&
 8002788:	2b00      	cmp	r3, #0
 800278a:	d121      	bne.n	80027d0 <SetBW_f+0x88>
	{Bw_New_Value=atoi(tokens[1]);
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <SetBW_f+0xb4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	f017 f884 	bl	801989e <atoi>
 8002796:	4603      	mov	r3, r0
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <SetBW_f+0xb8>)
 800279c:	701a      	strb	r2, [r3, #0]
	bw_flag=1;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
	sprintf((char*)cmd_buff, "BW VALUE SET TO %d SUCCESSFULLY\r\n", Bw_New_Value);
 80027a2:	4b17      	ldr	r3, [pc, #92]	@ (8002800 <SetBW_f+0xb8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4916      	ldr	r1, [pc, #88]	@ (8002804 <SetBW_f+0xbc>)
 80027aa:	4817      	ldr	r0, [pc, #92]	@ (8002808 <SetBW_f+0xc0>)
 80027ac:	f018 ff48 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80027b0:	4815      	ldr	r0, [pc, #84]	@ (8002808 <SetBW_f+0xc0>)
 80027b2:	f7fd fd6d 	bl	8000290 <strlen>
 80027b6:	4603      	mov	r3, r0
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	2364      	movs	r3, #100	@ 0x64
 80027bc:	4912      	ldr	r1, [pc, #72]	@ (8002808 <SetBW_f+0xc0>)
 80027be:	4813      	ldr	r0, [pc, #76]	@ (800280c <SetBW_f+0xc4>)
 80027c0:	f013 fc6e 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80027c4:	22fa      	movs	r2, #250	@ 0xfa
 80027c6:	2100      	movs	r1, #0
 80027c8:	480f      	ldr	r0, [pc, #60]	@ (8002808 <SetBW_f+0xc0>)
 80027ca:	f018 ffcc 	bl	801b766 <memset>
	break;
 80027ce:	e005      	b.n	80027dc <SetBW_f+0x94>
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 80027d0:	7dbb      	ldrb	r3, [r7, #22]
 80027d2:	3301      	adds	r3, #1
 80027d4:	75bb      	strb	r3, [r7, #22]
 80027d6:	7dbb      	ldrb	r3, [r7, #22]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d9c4      	bls.n	8002766 <SetBW_f+0x1e>
	}
	}

	if (bw_flag==0)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <SetBW_f+0xa6>
		HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG BW VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 80027e2:	2364      	movs	r3, #100	@ 0x64
 80027e4:	2210      	movs	r2, #16
 80027e6:	490a      	ldr	r1, [pc, #40]	@ (8002810 <SetBW_f+0xc8>)
 80027e8:	4808      	ldr	r0, [pc, #32]	@ (800280c <SetBW_f+0xc4>)
 80027ea:	f013 fc59 	bl	80160a0 <HAL_UART_Transmit>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	08024064 	.word	0x08024064
 80027fc:	20000df8 	.word	0x20000df8
 8002800:	20000f1f 	.word	0x20000f1f
 8002804:	08024024 	.word	0x08024024
 8002808:	20000e24 	.word	0x20000e24
 800280c:	20001468 	.word	0x20001468
 8002810:	08024048 	.word	0x08024048

08002814 <GetBW_f>:
void GetBW_f(char* arg)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"BW VALUE IS : %d \r\nNote:DEFAULT VALUE IS : %d\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Bw_New_Value,LoraValues.bw_l);
 800281c:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <GetBW_f+0x40>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <GetBW_f+0x44>)
 8002824:	789b      	ldrb	r3, [r3, #2]
 8002826:	490d      	ldr	r1, [pc, #52]	@ (800285c <GetBW_f+0x48>)
 8002828:	480d      	ldr	r0, [pc, #52]	@ (8002860 <GetBW_f+0x4c>)
 800282a:	f018 ff09 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800282e:	480c      	ldr	r0, [pc, #48]	@ (8002860 <GetBW_f+0x4c>)
 8002830:	f7fd fd2e 	bl	8000290 <strlen>
 8002834:	4603      	mov	r3, r0
 8002836:	b29a      	uxth	r2, r3
 8002838:	2364      	movs	r3, #100	@ 0x64
 800283a:	4909      	ldr	r1, [pc, #36]	@ (8002860 <GetBW_f+0x4c>)
 800283c:	4809      	ldr	r0, [pc, #36]	@ (8002864 <GetBW_f+0x50>)
 800283e:	f013 fc2f 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002842:	22fa      	movs	r2, #250	@ 0xfa
 8002844:	2100      	movs	r1, #0
 8002846:	4806      	ldr	r0, [pc, #24]	@ (8002860 <GetBW_f+0x4c>)
 8002848:	f018 ff8d 	bl	801b766 <memset>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000f1f 	.word	0x20000f1f
 8002858:	20000000 	.word	0x20000000
 800285c:	08024070 	.word	0x08024070
 8002860:	20000e24 	.word	0x20000e24
 8002864:	20001468 	.word	0x20001468

08002868 <GPSMenu>:


/*//////////////////////////////////////////////GPS MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

void GPSMenu(char* arg){
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	currentMenu=GPS_Menu;
 8002870:	4b1f      	ldr	r3, [pc, #124]	@ (80028f0 <GPSMenu+0x88>)
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;34;107m-----------------GPS Menu---------------\033[0m\n \r\n");
 8002876:	491f      	ldr	r1, [pc, #124]	@ (80028f4 <GPSMenu+0x8c>)
 8002878:	481f      	ldr	r0, [pc, #124]	@ (80028f8 <GPSMenu+0x90>)
 800287a:	f018 fee1 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800287e:	481e      	ldr	r0, [pc, #120]	@ (80028f8 <GPSMenu+0x90>)
 8002880:	f7fd fd06 	bl	8000290 <strlen>
 8002884:	4603      	mov	r3, r0
 8002886:	b29a      	uxth	r2, r3
 8002888:	2364      	movs	r3, #100	@ 0x64
 800288a:	491b      	ldr	r1, [pc, #108]	@ (80028f8 <GPSMenu+0x90>)
 800288c:	481b      	ldr	r0, [pc, #108]	@ (80028fc <GPSMenu+0x94>)
 800288e:	f013 fc07 	bl	80160a0 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e023      	b.n	80028e0 <GPSMenu+0x78>
	{if (cmd_list[l].MenuIndex==GPS_Menu)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <GPSMenu+0x98>)
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	4413      	add	r3, r2
 80028a0:	330c      	adds	r3, #12
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d118      	bne.n	80028da <GPSMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	4a15      	ldr	r2, [pc, #84]	@ (8002900 <GPSMenu+0x98>)
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	4413      	add	r3, r2
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	4912      	ldr	r1, [pc, #72]	@ (8002900 <GPSMenu+0x98>)
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	440b      	add	r3, r1
 80028ba:	3304      	adds	r3, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4911      	ldr	r1, [pc, #68]	@ (8002904 <GPSMenu+0x9c>)
 80028c0:	480d      	ldr	r0, [pc, #52]	@ (80028f8 <GPSMenu+0x90>)
 80028c2:	f018 febd 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80028c6:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <GPSMenu+0x90>)
 80028c8:	f7fd fce2 	bl	8000290 <strlen>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	2364      	movs	r3, #100	@ 0x64
 80028d2:	4909      	ldr	r1, [pc, #36]	@ (80028f8 <GPSMenu+0x90>)
 80028d4:	4809      	ldr	r0, [pc, #36]	@ (80028fc <GPSMenu+0x94>)
 80028d6:	f013 fbe3 	bl	80160a0 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	3301      	adds	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b25      	cmp	r3, #37	@ 0x25
 80028e4:	d9d8      	bls.n	8002898 <GPSMenu+0x30>
	}
	}
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000e20 	.word	0x20000e20
 80028f4:	080240c8 	.word	0x080240c8
 80028f8:	20000bb4 	.word	0x20000bb4
 80028fc:	20001468 	.word	0x20001468
 8002900:	20000060 	.word	0x20000060
 8002904:	08023e98 	.word	0x08023e98

08002908 <SetLocalTimeOffset_f>:
void SetLocalTimeOffset_f(char* arg){
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	uint8_t timeoffset_flag = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 4) {
 8002914:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <SetLocalTimeOffset_f+0x90>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d039      	beq.n	8002990 <SetLocalTimeOffset_f+0x88>
 800291c:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <SetLocalTimeOffset_f+0x90>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fcb5 	bl	8000290 <strlen>
 8002926:	4603      	mov	r3, r0
 8002928:	2b03      	cmp	r3, #3
 800292a:	d831      	bhi.n	8002990 <SetLocalTimeOffset_f+0x88>
		TimeOffset_New_Value = atoi(tokens[1]);
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <SetLocalTimeOffset_f+0x90>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f016 ffb4 	bl	801989e <atoi>
 8002936:	4603      	mov	r3, r0
 8002938:	4a18      	ldr	r2, [pc, #96]	@ (800299c <SetLocalTimeOffset_f+0x94>)
 800293a:	6013      	str	r3, [r2, #0]
		if (TimeOffset_New_Value >MIN_OFFSET && TimeOffset_New_Value <MAX_OFFSET){
 800293c:	4b17      	ldr	r3, [pc, #92]	@ (800299c <SetLocalTimeOffset_f+0x94>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f113 0f0b 	cmn.w	r3, #11
 8002944:	db16      	blt.n	8002974 <SetLocalTimeOffset_f+0x6c>
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <SetLocalTimeOffset_f+0x94>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b0b      	cmp	r3, #11
 800294c:	dc12      	bgt.n	8002974 <SetLocalTimeOffset_f+0x6c>
			sprintf((char*)cmd_buff, "GPS LOCAL TIME OFFSET VALUE SET TO %d SUCCESSFULLY\r\n", TimeOffset_New_Value);
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <SetLocalTimeOffset_f+0x94>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	4912      	ldr	r1, [pc, #72]	@ (80029a0 <SetLocalTimeOffset_f+0x98>)
 8002956:	4813      	ldr	r0, [pc, #76]	@ (80029a4 <SetLocalTimeOffset_f+0x9c>)
 8002958:	f018 fe72 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 800295c:	4811      	ldr	r0, [pc, #68]	@ (80029a4 <SetLocalTimeOffset_f+0x9c>)
 800295e:	f7fd fc97 	bl	8000290 <strlen>
 8002962:	4603      	mov	r3, r0
 8002964:	b29a      	uxth	r2, r3
 8002966:	2364      	movs	r3, #100	@ 0x64
 8002968:	490e      	ldr	r1, [pc, #56]	@ (80029a4 <SetLocalTimeOffset_f+0x9c>)
 800296a:	480f      	ldr	r0, [pc, #60]	@ (80029a8 <SetLocalTimeOffset_f+0xa0>)
 800296c:	f013 fb98 	bl	80160a0 <HAL_UART_Transmit>
			timeoffset_flag = 1;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
		}


		if (timeoffset_flag==0) {
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <SetLocalTimeOffset_f+0x7e>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 800297a:	2364      	movs	r3, #100	@ 0x64
 800297c:	2210      	movs	r2, #16
 800297e:	490b      	ldr	r1, [pc, #44]	@ (80029ac <SetLocalTimeOffset_f+0xa4>)
 8002980:	4809      	ldr	r0, [pc, #36]	@ (80029a8 <SetLocalTimeOffset_f+0xa0>)
 8002982:	f013 fb8d 	bl	80160a0 <HAL_UART_Transmit>
		}

		memset(cmd_buff, 0, sizeof(cmd_buff));
 8002986:	22fa      	movs	r2, #250	@ 0xfa
 8002988:	2100      	movs	r1, #0
 800298a:	4806      	ldr	r0, [pc, #24]	@ (80029a4 <SetLocalTimeOffset_f+0x9c>)
 800298c:	f018 feeb 	bl	801b766 <memset>

	}

}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000df8 	.word	0x20000df8
 800299c:	20000f6c 	.word	0x20000f6c
 80029a0:	08024104 	.word	0x08024104
 80029a4:	20000e24 	.word	0x20000e24
 80029a8:	20001468 	.word	0x20001468
 80029ac:	08023f3c 	.word	0x08023f3c

080029b0 <GetLocalTimeOffset_f>:
void GetLocalTimeOffset_f(char* arg)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS LOCAL TIME OFFSET VALUE IS : %d \r\n GPS LOCAL TIME OFFSET DEFAULT VALUE IS : %d\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF\r\n",TimeOffset_New_Value,MyGps.offset);
 80029b8:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <GetLocalTimeOffset_f+0x40>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <GetLocalTimeOffset_f+0x44>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	490d      	ldr	r1, [pc, #52]	@ (80029f8 <GetLocalTimeOffset_f+0x48>)
 80029c2:	480e      	ldr	r0, [pc, #56]	@ (80029fc <GetLocalTimeOffset_f+0x4c>)
 80029c4:	f018 fe3c 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80029c8:	480c      	ldr	r0, [pc, #48]	@ (80029fc <GetLocalTimeOffset_f+0x4c>)
 80029ca:	f7fd fc61 	bl	8000290 <strlen>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	2364      	movs	r3, #100	@ 0x64
 80029d4:	4909      	ldr	r1, [pc, #36]	@ (80029fc <GetLocalTimeOffset_f+0x4c>)
 80029d6:	480a      	ldr	r0, [pc, #40]	@ (8002a00 <GetLocalTimeOffset_f+0x50>)
 80029d8:	f013 fb62 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80029dc:	22fa      	movs	r2, #250	@ 0xfa
 80029de:	2100      	movs	r1, #0
 80029e0:	4806      	ldr	r0, [pc, #24]	@ (80029fc <GetLocalTimeOffset_f+0x4c>)
 80029e2:	f018 fec0 	bl	801b766 <memset>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000f6c 	.word	0x20000f6c
 80029f4:	20000004 	.word	0x20000004
 80029f8:	0802413c 	.word	0x0802413c
 80029fc:	20000e24 	.word	0x20000e24
 8002a00:	20001468 	.word	0x20001468

08002a04 <GetAltGPS_f>:

void GetAltGPS_f(char* arg){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS ALTITUDE VALUE IS : %.2f\r\n",MyGps.alt_gps);
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <GetAltGPS_f+0x44>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fda9 	bl	8000568 <__aeabi_f2d>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	490c      	ldr	r1, [pc, #48]	@ (8002a4c <GetAltGPS_f+0x48>)
 8002a1c:	480c      	ldr	r0, [pc, #48]	@ (8002a50 <GetAltGPS_f+0x4c>)
 8002a1e:	f018 fe0f 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002a22:	480b      	ldr	r0, [pc, #44]	@ (8002a50 <GetAltGPS_f+0x4c>)
 8002a24:	f7fd fc34 	bl	8000290 <strlen>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	2364      	movs	r3, #100	@ 0x64
 8002a2e:	4908      	ldr	r1, [pc, #32]	@ (8002a50 <GetAltGPS_f+0x4c>)
 8002a30:	4808      	ldr	r0, [pc, #32]	@ (8002a54 <GetAltGPS_f+0x50>)
 8002a32:	f013 fb35 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002a36:	22fa      	movs	r2, #250	@ 0xfa
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4805      	ldr	r0, [pc, #20]	@ (8002a50 <GetAltGPS_f+0x4c>)
 8002a3c:	f018 fe93 	bl	801b766 <memset>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000004 	.word	0x20000004
 8002a4c:	080241bc 	.word	0x080241bc
 8002a50:	20000e24 	.word	0x20000e24
 8002a54:	20001468 	.word	0x20001468

08002a58 <GetLatGPS_f>:
void GetLatGPS_f(char* arg){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS LATITUDE VALUE IS : %.2f\r\n ",MyGps.lat_gps);
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <GetLatGPS_f+0x44>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd7f 	bl	8000568 <__aeabi_f2d>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	490c      	ldr	r1, [pc, #48]	@ (8002aa0 <GetLatGPS_f+0x48>)
 8002a70:	480c      	ldr	r0, [pc, #48]	@ (8002aa4 <GetLatGPS_f+0x4c>)
 8002a72:	f018 fde5 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002a76:	480b      	ldr	r0, [pc, #44]	@ (8002aa4 <GetLatGPS_f+0x4c>)
 8002a78:	f7fd fc0a 	bl	8000290 <strlen>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2364      	movs	r3, #100	@ 0x64
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <GetLatGPS_f+0x4c>)
 8002a84:	4808      	ldr	r0, [pc, #32]	@ (8002aa8 <GetLatGPS_f+0x50>)
 8002a86:	f013 fb0b 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002a8a:	22fa      	movs	r2, #250	@ 0xfa
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4805      	ldr	r0, [pc, #20]	@ (8002aa4 <GetLatGPS_f+0x4c>)
 8002a90:	f018 fe69 	bl	801b766 <memset>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000004 	.word	0x20000004
 8002aa0:	080241dc 	.word	0x080241dc
 8002aa4:	20000e24 	.word	0x20000e24
 8002aa8:	20001468 	.word	0x20001468

08002aac <GetLongGPS_f>:
void GetLongGPS_f(char* arg){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS LONGITUDE VALUE IS : %.2f\r\n",MyGps.long_gps);
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <GetLongGPS_f+0x44>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd fd55 	bl	8000568 <__aeabi_f2d>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	490c      	ldr	r1, [pc, #48]	@ (8002af4 <GetLongGPS_f+0x48>)
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <GetLongGPS_f+0x4c>)
 8002ac6:	f018 fdbb 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002aca:	480b      	ldr	r0, [pc, #44]	@ (8002af8 <GetLongGPS_f+0x4c>)
 8002acc:	f7fd fbe0 	bl	8000290 <strlen>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	2364      	movs	r3, #100	@ 0x64
 8002ad6:	4908      	ldr	r1, [pc, #32]	@ (8002af8 <GetLongGPS_f+0x4c>)
 8002ad8:	4808      	ldr	r0, [pc, #32]	@ (8002afc <GetLongGPS_f+0x50>)
 8002ada:	f013 fae1 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002ade:	22fa      	movs	r2, #250	@ 0xfa
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <GetLongGPS_f+0x4c>)
 8002ae4:	f018 fe3f 	bl	801b766 <memset>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000004 	.word	0x20000004
 8002af4:	080241fc 	.word	0x080241fc
 8002af8:	20000e24 	.word	0x20000e24
 8002afc:	20001468 	.word	0x20001468

08002b00 <GetTimeGPS_f>:
		memset(cmd_buff, 0, sizeof(cmd_buff));

	}

}*/
void GetTimeGPS_f(char* arg){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS TIME VALUE IS %d:%d:%d \r\n",MyGps.hours,MyGps.minutes,MyGps.seconds);
 8002b08:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <GetTimeGPS_f+0x48>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <GetTimeGPS_f+0x48>)
 8002b0e:	6919      	ldr	r1, [r3, #16]
 8002b10:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <GetTimeGPS_f+0x48>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	460b      	mov	r3, r1
 8002b18:	490c      	ldr	r1, [pc, #48]	@ (8002b4c <GetTimeGPS_f+0x4c>)
 8002b1a:	480d      	ldr	r0, [pc, #52]	@ (8002b50 <GetTimeGPS_f+0x50>)
 8002b1c:	f018 fd90 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002b20:	480b      	ldr	r0, [pc, #44]	@ (8002b50 <GetTimeGPS_f+0x50>)
 8002b22:	f7fd fbb5 	bl	8000290 <strlen>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	2364      	movs	r3, #100	@ 0x64
 8002b2c:	4908      	ldr	r1, [pc, #32]	@ (8002b50 <GetTimeGPS_f+0x50>)
 8002b2e:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <GetTimeGPS_f+0x54>)
 8002b30:	f013 fab6 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002b34:	22fa      	movs	r2, #250	@ 0xfa
 8002b36:	2100      	movs	r1, #0
 8002b38:	4805      	ldr	r0, [pc, #20]	@ (8002b50 <GetTimeGPS_f+0x50>)
 8002b3a:	f018 fe14 	bl	801b766 <memset>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	0802421c 	.word	0x0802421c
 8002b50:	20000e24 	.word	0x20000e24
 8002b54:	20001468 	.word	0x20001468

08002b58 <SensorsMenu>:

		HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), 1000);
}*/
/*////////////////////////////////////////////// SENSORS MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

void SensorsMenu(char* arg){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	currentMenu=Sensors_Menu;
 8002b60:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <SensorsMenu+0x88>)
 8002b62:	2203      	movs	r2, #3
 8002b64:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;32;107m--------------Sensors Menu---------------\033[0m\n \r\n");
 8002b66:	491f      	ldr	r1, [pc, #124]	@ (8002be4 <SensorsMenu+0x8c>)
 8002b68:	481f      	ldr	r0, [pc, #124]	@ (8002be8 <SensorsMenu+0x90>)
 8002b6a:	f018 fd69 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002b6e:	481e      	ldr	r0, [pc, #120]	@ (8002be8 <SensorsMenu+0x90>)
 8002b70:	f7fd fb8e 	bl	8000290 <strlen>
 8002b74:	4603      	mov	r3, r0
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	2364      	movs	r3, #100	@ 0x64
 8002b7a:	491b      	ldr	r1, [pc, #108]	@ (8002be8 <SensorsMenu+0x90>)
 8002b7c:	481b      	ldr	r0, [pc, #108]	@ (8002bec <SensorsMenu+0x94>)
 8002b7e:	f013 fa8f 	bl	80160a0 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	e023      	b.n	8002bd0 <SensorsMenu+0x78>
	{if (cmd_list[l].MenuIndex==Sensors_Menu)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <SensorsMenu+0x98>)
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4413      	add	r3, r2
 8002b90:	330c      	adds	r3, #12
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d118      	bne.n	8002bca <SensorsMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	4a15      	ldr	r2, [pc, #84]	@ (8002bf0 <SensorsMenu+0x98>)
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	4413      	add	r3, r2
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	4912      	ldr	r1, [pc, #72]	@ (8002bf0 <SensorsMenu+0x98>)
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	440b      	add	r3, r1
 8002baa:	3304      	adds	r3, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4911      	ldr	r1, [pc, #68]	@ (8002bf4 <SensorsMenu+0x9c>)
 8002bb0:	480d      	ldr	r0, [pc, #52]	@ (8002be8 <SensorsMenu+0x90>)
 8002bb2:	f018 fd45 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002bb6:	480c      	ldr	r0, [pc, #48]	@ (8002be8 <SensorsMenu+0x90>)
 8002bb8:	f7fd fb6a 	bl	8000290 <strlen>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2364      	movs	r3, #100	@ 0x64
 8002bc2:	4909      	ldr	r1, [pc, #36]	@ (8002be8 <SensorsMenu+0x90>)
 8002bc4:	4809      	ldr	r0, [pc, #36]	@ (8002bec <SensorsMenu+0x94>)
 8002bc6:	f013 fa6b 	bl	80160a0 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b25      	cmp	r3, #37	@ 0x25
 8002bd4:	d9d8      	bls.n	8002b88 <SensorsMenu+0x30>
	}
	}
}
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000e20 	.word	0x20000e20
 8002be4:	0802423c 	.word	0x0802423c
 8002be8:	20000bb4 	.word	0x20000bb4
 8002bec:	20001468 	.word	0x20001468
 8002bf0:	20000060 	.word	0x20000060
 8002bf4:	08023e98 	.word	0x08023e98

08002bf8 <GetSoilTemp_f>:

void GetSoilTemp_f(char* arg){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SOIL TEMPERATURE VALUE IS : %.2f \r\n",SensorsValues.SoilTemp_s);
 8002c00:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <GetSoilTemp_f+0x44>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fcaf 	bl	8000568 <__aeabi_f2d>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	490c      	ldr	r1, [pc, #48]	@ (8002c40 <GetSoilTemp_f+0x48>)
 8002c10:	480c      	ldr	r0, [pc, #48]	@ (8002c44 <GetSoilTemp_f+0x4c>)
 8002c12:	f018 fd15 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002c16:	480b      	ldr	r0, [pc, #44]	@ (8002c44 <GetSoilTemp_f+0x4c>)
 8002c18:	f7fd fb3a 	bl	8000290 <strlen>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	2364      	movs	r3, #100	@ 0x64
 8002c22:	4908      	ldr	r1, [pc, #32]	@ (8002c44 <GetSoilTemp_f+0x4c>)
 8002c24:	4808      	ldr	r0, [pc, #32]	@ (8002c48 <GetSoilTemp_f+0x50>)
 8002c26:	f013 fa3b 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002c2a:	22fa      	movs	r2, #250	@ 0xfa
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <GetSoilTemp_f+0x4c>)
 8002c30:	f018 fd99 	bl	801b766 <memset>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	2000002c 	.word	0x2000002c
 8002c40:	0802427c 	.word	0x0802427c
 8002c44:	20000e24 	.word	0x20000e24
 8002c48:	20001468 	.word	0x20001468

08002c4c <GetAirTemp_f>:

void GetAirTemp_f(char* arg){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"AIR TEMPERATURE VALUE IS : %.2f°C",SensorsValues.AirTemp_s);
 8002c54:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <GetAirTemp_f+0x44>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc85 	bl	8000568 <__aeabi_f2d>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	490c      	ldr	r1, [pc, #48]	@ (8002c94 <GetAirTemp_f+0x48>)
 8002c64:	480c      	ldr	r0, [pc, #48]	@ (8002c98 <GetAirTemp_f+0x4c>)
 8002c66:	f018 fceb 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002c6a:	480b      	ldr	r0, [pc, #44]	@ (8002c98 <GetAirTemp_f+0x4c>)
 8002c6c:	f7fd fb10 	bl	8000290 <strlen>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	2364      	movs	r3, #100	@ 0x64
 8002c76:	4908      	ldr	r1, [pc, #32]	@ (8002c98 <GetAirTemp_f+0x4c>)
 8002c78:	4808      	ldr	r0, [pc, #32]	@ (8002c9c <GetAirTemp_f+0x50>)
 8002c7a:	f013 fa11 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002c7e:	22fa      	movs	r2, #250	@ 0xfa
 8002c80:	2100      	movs	r1, #0
 8002c82:	4805      	ldr	r0, [pc, #20]	@ (8002c98 <GetAirTemp_f+0x4c>)
 8002c84:	f018 fd6f 	bl	801b766 <memset>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2000002c 	.word	0x2000002c
 8002c94:	080242a0 	.word	0x080242a0
 8002c98:	20000e24 	.word	0x20000e24
 8002c9c:	20001468 	.word	0x20001468

08002ca0 <GetRelativeHumidity_f>:

void GetRelativeHumidity_f(char* arg){
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"RELATIVE HUMIDITY VALUE IS : %.2f \r\n",SensorsValues.RelativeHumidity_s);
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <GetRelativeHumidity_f+0x44>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc5b 	bl	8000568 <__aeabi_f2d>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	490c      	ldr	r1, [pc, #48]	@ (8002ce8 <GetRelativeHumidity_f+0x48>)
 8002cb8:	480c      	ldr	r0, [pc, #48]	@ (8002cec <GetRelativeHumidity_f+0x4c>)
 8002cba:	f018 fcc1 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002cbe:	480b      	ldr	r0, [pc, #44]	@ (8002cec <GetRelativeHumidity_f+0x4c>)
 8002cc0:	f7fd fae6 	bl	8000290 <strlen>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	2364      	movs	r3, #100	@ 0x64
 8002cca:	4908      	ldr	r1, [pc, #32]	@ (8002cec <GetRelativeHumidity_f+0x4c>)
 8002ccc:	4808      	ldr	r0, [pc, #32]	@ (8002cf0 <GetRelativeHumidity_f+0x50>)
 8002cce:	f013 f9e7 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002cd2:	22fa      	movs	r2, #250	@ 0xfa
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4805      	ldr	r0, [pc, #20]	@ (8002cec <GetRelativeHumidity_f+0x4c>)
 8002cd8:	f018 fd45 	bl	801b766 <memset>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000002c 	.word	0x2000002c
 8002ce8:	080242c4 	.word	0x080242c4
 8002cec:	20000e24 	.word	0x20000e24
 8002cf0:	20001468 	.word	0x20001468

08002cf4 <GetSoilHumidity_f>:

void GetSoilHumidity_f(char* arg){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SOIL HUMIDITY VALUE IS : %.2f",SensorsValues.SoilHumidity_s);
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <GetSoilHumidity_f+0x44>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc31 	bl	8000568 <__aeabi_f2d>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	490c      	ldr	r1, [pc, #48]	@ (8002d3c <GetSoilHumidity_f+0x48>)
 8002d0c:	480c      	ldr	r0, [pc, #48]	@ (8002d40 <GetSoilHumidity_f+0x4c>)
 8002d0e:	f018 fc97 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002d12:	480b      	ldr	r0, [pc, #44]	@ (8002d40 <GetSoilHumidity_f+0x4c>)
 8002d14:	f7fd fabc 	bl	8000290 <strlen>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	2364      	movs	r3, #100	@ 0x64
 8002d1e:	4908      	ldr	r1, [pc, #32]	@ (8002d40 <GetSoilHumidity_f+0x4c>)
 8002d20:	4808      	ldr	r0, [pc, #32]	@ (8002d44 <GetSoilHumidity_f+0x50>)
 8002d22:	f013 f9bd 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002d26:	22fa      	movs	r2, #250	@ 0xfa
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4805      	ldr	r0, [pc, #20]	@ (8002d40 <GetSoilHumidity_f+0x4c>)
 8002d2c:	f018 fd1b 	bl	801b766 <memset>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	2000002c 	.word	0x2000002c
 8002d3c:	080242ec 	.word	0x080242ec
 8002d40:	20000e24 	.word	0x20000e24
 8002d44:	20001468 	.word	0x20001468

08002d48 <GetWindSpeed_f>:

void GetWindSpeed_f(char* arg){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"WIND SPEED VALUE IS : %.2f IN Km/h\r",SensorsValues.WindSpeed_s);
 8002d50:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <GetWindSpeed_f+0x44>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fc07 	bl	8000568 <__aeabi_f2d>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	490c      	ldr	r1, [pc, #48]	@ (8002d90 <GetWindSpeed_f+0x48>)
 8002d60:	480c      	ldr	r0, [pc, #48]	@ (8002d94 <GetWindSpeed_f+0x4c>)
 8002d62:	f018 fc6d 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002d66:	480b      	ldr	r0, [pc, #44]	@ (8002d94 <GetWindSpeed_f+0x4c>)
 8002d68:	f7fd fa92 	bl	8000290 <strlen>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	2364      	movs	r3, #100	@ 0x64
 8002d72:	4908      	ldr	r1, [pc, #32]	@ (8002d94 <GetWindSpeed_f+0x4c>)
 8002d74:	4808      	ldr	r0, [pc, #32]	@ (8002d98 <GetWindSpeed_f+0x50>)
 8002d76:	f013 f993 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002d7a:	22fa      	movs	r2, #250	@ 0xfa
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4805      	ldr	r0, [pc, #20]	@ (8002d94 <GetWindSpeed_f+0x4c>)
 8002d80:	f018 fcf1 	bl	801b766 <memset>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	2000002c 	.word	0x2000002c
 8002d90:	0802430c 	.word	0x0802430c
 8002d94:	20000e24 	.word	0x20000e24
 8002d98:	20001468 	.word	0x20001468

08002d9c <SetRadiation_f>:
void SetRadiation_f(char* arg){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	uint8_t radiation_flag = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002da8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e58 <SetRadiation_f+0xbc>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d040      	beq.n	8002e32 <SetRadiation_f+0x96>
 8002db0:	4b29      	ldr	r3, [pc, #164]	@ (8002e58 <SetRadiation_f+0xbc>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fa6b 	bl	8000290 <strlen>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d838      	bhi.n	8002e32 <SetRadiation_f+0x96>
		Radiation_New_Value = atof(tokens[1]);
 8002dc0:	4b25      	ldr	r3, [pc, #148]	@ (8002e58 <SetRadiation_f+0xbc>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f016 fd67 	bl	8019898 <atof>
 8002dca:	ec53 2b10 	vmov	r2, r3, d0
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd ff19 	bl	8000c08 <__aeabi_d2f>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a20      	ldr	r2, [pc, #128]	@ (8002e5c <SetRadiation_f+0xc0>)
 8002dda:	6013      	str	r3, [r2, #0]

		if (Radiation_New_Value >= MIN_RADIATION && Radiation_New_Value <= MAX_RADIATION) {
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e5c <SetRadiation_f+0xc0>)
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dee:	db20      	blt.n	8002e32 <SetRadiation_f+0x96>
 8002df0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e5c <SetRadiation_f+0xc0>)
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002e60 <SetRadiation_f+0xc4>
 8002dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	d816      	bhi.n	8002e32 <SetRadiation_f+0x96>
			sprintf((char*)cmd_buff, "RADIATION VALUE SET TO %.2f SUCCESSFULLY\r\n", Radiation_New_Value);
 8002e04:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <SetRadiation_f+0xc0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fbad 	bl	8000568 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4914      	ldr	r1, [pc, #80]	@ (8002e64 <SetRadiation_f+0xc8>)
 8002e14:	4814      	ldr	r0, [pc, #80]	@ (8002e68 <SetRadiation_f+0xcc>)
 8002e16:	f018 fc13 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002e1a:	4813      	ldr	r0, [pc, #76]	@ (8002e68 <SetRadiation_f+0xcc>)
 8002e1c:	f7fd fa38 	bl	8000290 <strlen>
 8002e20:	4603      	mov	r3, r0
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	2364      	movs	r3, #100	@ 0x64
 8002e26:	4910      	ldr	r1, [pc, #64]	@ (8002e68 <SetRadiation_f+0xcc>)
 8002e28:	4810      	ldr	r0, [pc, #64]	@ (8002e6c <SetRadiation_f+0xd0>)
 8002e2a:	f013 f939 	bl	80160a0 <HAL_UART_Transmit>
			radiation_flag = 1;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (radiation_flag==0) {
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <SetRadiation_f+0xa8>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002e38:	2364      	movs	r3, #100	@ 0x64
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	490c      	ldr	r1, [pc, #48]	@ (8002e70 <SetRadiation_f+0xd4>)
 8002e3e:	480b      	ldr	r0, [pc, #44]	@ (8002e6c <SetRadiation_f+0xd0>)
 8002e40:	f013 f92e 	bl	80160a0 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 8002e44:	22fa      	movs	r2, #250	@ 0xfa
 8002e46:	2100      	movs	r1, #0
 8002e48:	4807      	ldr	r0, [pc, #28]	@ (8002e68 <SetRadiation_f+0xcc>)
 8002e4a:	f018 fc8c 	bl	801b766 <memset>
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000df8 	.word	0x20000df8
 8002e5c:	20000f24 	.word	0x20000f24
 8002e60:	42200000 	.word	0x42200000
 8002e64:	08024330 	.word	0x08024330
 8002e68:	20000e24 	.word	0x20000e24
 8002e6c:	20001468 	.word	0x20001468
 8002e70:	08023f3c 	.word	0x08023f3c

08002e74 <GetRadiation_f>:
void GetRadiation_f(char* arg){
 8002e74:	b5b0      	push	{r4, r5, r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"RADIATION VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Radiation_New_Value,SensorsValues.Radiation_s);
 8002e7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <GetRadiation_f+0x5c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb71 	bl	8000568 <__aeabi_f2d>
 8002e86:	4604      	mov	r4, r0
 8002e88:	460d      	mov	r5, r1
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <GetRadiation_f+0x60>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb6a 	bl	8000568 <__aeabi_f2d>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	e9cd 2300 	strd	r2, r3, [sp]
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	462b      	mov	r3, r5
 8002ea0:	490d      	ldr	r1, [pc, #52]	@ (8002ed8 <GetRadiation_f+0x64>)
 8002ea2:	480e      	ldr	r0, [pc, #56]	@ (8002edc <GetRadiation_f+0x68>)
 8002ea4:	f018 fbcc 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002ea8:	480c      	ldr	r0, [pc, #48]	@ (8002edc <GetRadiation_f+0x68>)
 8002eaa:	f7fd f9f1 	bl	8000290 <strlen>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	2364      	movs	r3, #100	@ 0x64
 8002eb4:	4909      	ldr	r1, [pc, #36]	@ (8002edc <GetRadiation_f+0x68>)
 8002eb6:	480a      	ldr	r0, [pc, #40]	@ (8002ee0 <GetRadiation_f+0x6c>)
 8002eb8:	f013 f8f2 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002ebc:	22fa      	movs	r2, #250	@ 0xfa
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4806      	ldr	r0, [pc, #24]	@ (8002edc <GetRadiation_f+0x68>)
 8002ec2:	f018 fc50 	bl	801b766 <memset>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000f24 	.word	0x20000f24
 8002ed4:	2000002c 	.word	0x2000002c
 8002ed8:	0802435c 	.word	0x0802435c
 8002edc:	20000e24 	.word	0x20000e24
 8002ee0:	20001468 	.word	0x20001468

08002ee4 <SetKc_f>:
void SetKc_f(char* arg){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	uint8_t kc_flag = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002ef0:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <SetKc_f+0xac>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d038      	beq.n	8002f6a <SetKc_f+0x86>
 8002ef8:	4b25      	ldr	r3, [pc, #148]	@ (8002f90 <SetKc_f+0xac>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd f9c7 	bl	8000290 <strlen>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d830      	bhi.n	8002f6a <SetKc_f+0x86>
		Kc_New_Value = atof(tokens[1]);
 8002f08:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <SetKc_f+0xac>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f016 fcc3 	bl	8019898 <atof>
 8002f12:	ec53 2b10 	vmov	r2, r3, d0
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f7fd fe75 	bl	8000c08 <__aeabi_d2f>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4a1c      	ldr	r2, [pc, #112]	@ (8002f94 <SetKc_f+0xb0>)
 8002f22:	6013      	str	r3, [r2, #0]

		if (RelativeHumidity_New_Value >= MIN_KC && Sf_New_Value <= MAX_KP) {
 8002f24:	4b1c      	ldr	r3, [pc, #112]	@ (8002f98 <SetKc_f+0xb4>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	db1a      	blt.n	8002f6a <SetKc_f+0x86>
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <SetKc_f+0xb8>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d816      	bhi.n	8002f6a <SetKc_f+0x86>
			sprintf((char*)cmd_buff, "Kc VALUE SET TO %.2f SUCCESSFULLY\r\n", Kc_New_Value);
 8002f3c:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <SetKc_f+0xb0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fb11 	bl	8000568 <__aeabi_f2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4915      	ldr	r1, [pc, #84]	@ (8002fa0 <SetKc_f+0xbc>)
 8002f4c:	4815      	ldr	r0, [pc, #84]	@ (8002fa4 <SetKc_f+0xc0>)
 8002f4e:	f018 fb77 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002f52:	4814      	ldr	r0, [pc, #80]	@ (8002fa4 <SetKc_f+0xc0>)
 8002f54:	f7fd f99c 	bl	8000290 <strlen>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	2364      	movs	r3, #100	@ 0x64
 8002f5e:	4911      	ldr	r1, [pc, #68]	@ (8002fa4 <SetKc_f+0xc0>)
 8002f60:	4811      	ldr	r0, [pc, #68]	@ (8002fa8 <SetKc_f+0xc4>)
 8002f62:	f013 f89d 	bl	80160a0 <HAL_UART_Transmit>
			kc_flag = 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (kc_flag==0) {
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <SetKc_f+0x98>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002f70:	2364      	movs	r3, #100	@ 0x64
 8002f72:	2210      	movs	r2, #16
 8002f74:	490d      	ldr	r1, [pc, #52]	@ (8002fac <SetKc_f+0xc8>)
 8002f76:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <SetKc_f+0xc4>)
 8002f78:	f013 f892 	bl	80160a0 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 8002f7c:	22fa      	movs	r2, #250	@ 0xfa
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4808      	ldr	r0, [pc, #32]	@ (8002fa4 <SetKc_f+0xc0>)
 8002f82:	f018 fbf0 	bl	801b766 <memset>
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000df8 	.word	0x20000df8
 8002f94:	20000f28 	.word	0x20000f28
 8002f98:	20000f20 	.word	0x20000f20
 8002f9c:	20000e21 	.word	0x20000e21
 8002fa0:	080243c0 	.word	0x080243c0
 8002fa4:	20000e24 	.word	0x20000e24
 8002fa8:	20001468 	.word	0x20001468
 8002fac:	08023f3c 	.word	0x08023f3c

08002fb0 <GetKc_f>:
void GetKc_f(char* arg){
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"KC VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Kc_New_Value,SensorsValues.Kc);
 8002fb8:	4b14      	ldr	r3, [pc, #80]	@ (800300c <GetKc_f+0x5c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fad3 	bl	8000568 <__aeabi_f2d>
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	460d      	mov	r5, r1
 8002fc6:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <GetKc_f+0x60>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd facc 	bl	8000568 <__aeabi_f2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd8:	4622      	mov	r2, r4
 8002fda:	462b      	mov	r3, r5
 8002fdc:	490d      	ldr	r1, [pc, #52]	@ (8003014 <GetKc_f+0x64>)
 8002fde:	480e      	ldr	r0, [pc, #56]	@ (8003018 <GetKc_f+0x68>)
 8002fe0:	f018 fb2e 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002fe4:	480c      	ldr	r0, [pc, #48]	@ (8003018 <GetKc_f+0x68>)
 8002fe6:	f7fd f953 	bl	8000290 <strlen>
 8002fea:	4603      	mov	r3, r0
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	2364      	movs	r3, #100	@ 0x64
 8002ff0:	4909      	ldr	r1, [pc, #36]	@ (8003018 <GetKc_f+0x68>)
 8002ff2:	480a      	ldr	r0, [pc, #40]	@ (800301c <GetKc_f+0x6c>)
 8002ff4:	f013 f854 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002ff8:	22fa      	movs	r2, #250	@ 0xfa
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4806      	ldr	r0, [pc, #24]	@ (8003018 <GetKc_f+0x68>)
 8002ffe:	f018 fbb2 	bl	801b766 <memset>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bdb0      	pop	{r4, r5, r7, pc}
 800300a:	bf00      	nop
 800300c:	20000f28 	.word	0x20000f28
 8003010:	2000002c 	.word	0x2000002c
 8003014:	080243e4 	.word	0x080243e4
 8003018:	20000e24 	.word	0x20000e24
 800301c:	20001468 	.word	0x20001468

08003020 <SetKp_f>:
void SetKp_f(char* arg){
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	uint8_t kp_flag = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 800302c:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <SetKp_f+0xac>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d038      	beq.n	80030a6 <SetKp_f+0x86>
 8003034:	4b25      	ldr	r3, [pc, #148]	@ (80030cc <SetKp_f+0xac>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd f929 	bl	8000290 <strlen>
 800303e:	4603      	mov	r3, r0
 8003040:	2b04      	cmp	r3, #4
 8003042:	d830      	bhi.n	80030a6 <SetKp_f+0x86>
		Kp_New_Value = atof(tokens[1]);
 8003044:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <SetKp_f+0xac>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	f016 fc25 	bl	8019898 <atof>
 800304e:	ec53 2b10 	vmov	r2, r3, d0
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f7fd fdd7 	bl	8000c08 <__aeabi_d2f>
 800305a:	4603      	mov	r3, r0
 800305c:	4a1c      	ldr	r2, [pc, #112]	@ (80030d0 <SetKp_f+0xb0>)
 800305e:	6013      	str	r3, [r2, #0]

		if (Kp_New_Value >= MIN_KP && Sf_New_Value <= MAX_KP) {
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <SetKp_f+0xb0>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306e:	db1a      	blt.n	80030a6 <SetKp_f+0x86>
 8003070:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <SetKp_f+0xb4>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d816      	bhi.n	80030a6 <SetKp_f+0x86>
			sprintf((char*)cmd_buff, "Kp VALUE SET TO %.2f SUCCESSFULLY\r\n", Kp_New_Value);
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <SetKp_f+0xb0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa73 	bl	8000568 <__aeabi_f2d>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4914      	ldr	r1, [pc, #80]	@ (80030d8 <SetKp_f+0xb8>)
 8003088:	4814      	ldr	r0, [pc, #80]	@ (80030dc <SetKp_f+0xbc>)
 800308a:	f018 fad9 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 800308e:	4813      	ldr	r0, [pc, #76]	@ (80030dc <SetKp_f+0xbc>)
 8003090:	f7fd f8fe 	bl	8000290 <strlen>
 8003094:	4603      	mov	r3, r0
 8003096:	b29a      	uxth	r2, r3
 8003098:	2364      	movs	r3, #100	@ 0x64
 800309a:	4910      	ldr	r1, [pc, #64]	@ (80030dc <SetKp_f+0xbc>)
 800309c:	4810      	ldr	r0, [pc, #64]	@ (80030e0 <SetKp_f+0xc0>)
 800309e:	f012 ffff 	bl	80160a0 <HAL_UART_Transmit>
			kp_flag = 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (kp_flag==0) {
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <SetKp_f+0x98>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80030ac:	2364      	movs	r3, #100	@ 0x64
 80030ae:	2210      	movs	r2, #16
 80030b0:	490c      	ldr	r1, [pc, #48]	@ (80030e4 <SetKp_f+0xc4>)
 80030b2:	480b      	ldr	r0, [pc, #44]	@ (80030e0 <SetKp_f+0xc0>)
 80030b4:	f012 fff4 	bl	80160a0 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 80030b8:	22fa      	movs	r2, #250	@ 0xfa
 80030ba:	2100      	movs	r1, #0
 80030bc:	4807      	ldr	r0, [pc, #28]	@ (80030dc <SetKp_f+0xbc>)
 80030be:	f018 fb52 	bl	801b766 <memset>
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000df8 	.word	0x20000df8
 80030d0:	20000f2c 	.word	0x20000f2c
 80030d4:	20000e21 	.word	0x20000e21
 80030d8:	08024440 	.word	0x08024440
 80030dc:	20000e24 	.word	0x20000e24
 80030e0:	20001468 	.word	0x20001468
 80030e4:	08023f3c 	.word	0x08023f3c

080030e8 <GetKp_f>:
void GetKp_f(char* arg){
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"KP VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Kp_New_Value,SensorsValues.Kp);
 80030f0:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <GetKp_f+0x5c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fa37 	bl	8000568 <__aeabi_f2d>
 80030fa:	4604      	mov	r4, r0
 80030fc:	460d      	mov	r5, r1
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <GetKp_f+0x60>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fa30 	bl	8000568 <__aeabi_f2d>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	e9cd 2300 	strd	r2, r3, [sp]
 8003110:	4622      	mov	r2, r4
 8003112:	462b      	mov	r3, r5
 8003114:	490d      	ldr	r1, [pc, #52]	@ (800314c <GetKp_f+0x64>)
 8003116:	480e      	ldr	r0, [pc, #56]	@ (8003150 <GetKp_f+0x68>)
 8003118:	f018 fa92 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800311c:	480c      	ldr	r0, [pc, #48]	@ (8003150 <GetKp_f+0x68>)
 800311e:	f7fd f8b7 	bl	8000290 <strlen>
 8003122:	4603      	mov	r3, r0
 8003124:	b29a      	uxth	r2, r3
 8003126:	2364      	movs	r3, #100	@ 0x64
 8003128:	4909      	ldr	r1, [pc, #36]	@ (8003150 <GetKp_f+0x68>)
 800312a:	480a      	ldr	r0, [pc, #40]	@ (8003154 <GetKp_f+0x6c>)
 800312c:	f012 ffb8 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8003130:	22fa      	movs	r2, #250	@ 0xfa
 8003132:	2100      	movs	r1, #0
 8003134:	4806      	ldr	r0, [pc, #24]	@ (8003150 <GetKp_f+0x68>)
 8003136:	f018 fb16 	bl	801b766 <memset>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bdb0      	pop	{r4, r5, r7, pc}
 8003142:	bf00      	nop
 8003144:	20000f2c 	.word	0x20000f2c
 8003148:	2000002c 	.word	0x2000002c
 800314c:	08024464 	.word	0x08024464
 8003150:	20000e24 	.word	0x20000e24
 8003154:	20001468 	.word	0x20001468

08003158 <SetET0_f>:
void SetET0_f(char* arg){
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	uint8_t et0_flag = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8003164:	4b2a      	ldr	r3, [pc, #168]	@ (8003210 <SetET0_f+0xb8>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03e      	beq.n	80031ea <SetET0_f+0x92>
 800316c:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <SetET0_f+0xb8>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd f88d 	bl	8000290 <strlen>
 8003176:	4603      	mov	r3, r0
 8003178:	2b04      	cmp	r3, #4
 800317a:	d836      	bhi.n	80031ea <SetET0_f+0x92>
		Et0_New_Value = atof(tokens[1]);
 800317c:	4b24      	ldr	r3, [pc, #144]	@ (8003210 <SetET0_f+0xb8>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	f016 fb89 	bl	8019898 <atof>
 8003186:	ec53 2b10 	vmov	r2, r3, d0
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	f7fd fd3b 	bl	8000c08 <__aeabi_d2f>
 8003192:	4603      	mov	r3, r0
 8003194:	4a1f      	ldr	r2, [pc, #124]	@ (8003214 <SetET0_f+0xbc>)
 8003196:	6013      	str	r3, [r2, #0]

		if (Et0_New_Value >= MIN_ET0 && Et0_New_Value <= MAX_ET0) {
 8003198:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <SetET0_f+0xbc>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	db20      	blt.n	80031ea <SetET0_f+0x92>
 80031a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <SetET0_f+0xbc>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d816      	bhi.n	80031ea <SetET0_f+0x92>
			sprintf((char*)cmd_buff, "ET0 VALUE SET TO %.2f SUCCESSFULLY\r\n", Et0_New_Value);
 80031bc:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <SetET0_f+0xbc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f9d1 	bl	8000568 <__aeabi_f2d>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4913      	ldr	r1, [pc, #76]	@ (8003218 <SetET0_f+0xc0>)
 80031cc:	4813      	ldr	r0, [pc, #76]	@ (800321c <SetET0_f+0xc4>)
 80031ce:	f018 fa37 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80031d2:	4812      	ldr	r0, [pc, #72]	@ (800321c <SetET0_f+0xc4>)
 80031d4:	f7fd f85c 	bl	8000290 <strlen>
 80031d8:	4603      	mov	r3, r0
 80031da:	b29a      	uxth	r2, r3
 80031dc:	2364      	movs	r3, #100	@ 0x64
 80031de:	490f      	ldr	r1, [pc, #60]	@ (800321c <SetET0_f+0xc4>)
 80031e0:	480f      	ldr	r0, [pc, #60]	@ (8003220 <SetET0_f+0xc8>)
 80031e2:	f012 ff5d 	bl	80160a0 <HAL_UART_Transmit>
			et0_flag = 1;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (et0_flag==0) {
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <SetET0_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80031f0:	2364      	movs	r3, #100	@ 0x64
 80031f2:	2210      	movs	r2, #16
 80031f4:	490b      	ldr	r1, [pc, #44]	@ (8003224 <SetET0_f+0xcc>)
 80031f6:	480a      	ldr	r0, [pc, #40]	@ (8003220 <SetET0_f+0xc8>)
 80031f8:	f012 ff52 	bl	80160a0 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 80031fc:	22fa      	movs	r2, #250	@ 0xfa
 80031fe:	2100      	movs	r1, #0
 8003200:	4806      	ldr	r0, [pc, #24]	@ (800321c <SetET0_f+0xc4>)
 8003202:	f018 fab0 	bl	801b766 <memset>
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000df8 	.word	0x20000df8
 8003214:	20000f30 	.word	0x20000f30
 8003218:	080244c0 	.word	0x080244c0
 800321c:	20000e24 	.word	0x20000e24
 8003220:	20001468 	.word	0x20001468
 8003224:	08023f3c 	.word	0x08023f3c

08003228 <GetET0_f>:
void GetET0_f(char* arg){
 8003228:	b5b0      	push	{r4, r5, r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af02      	add	r7, sp, #8
 800322e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ET0 VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Et0_New_Value,SensorsValues.ET0);
 8003230:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <GetET0_f+0x5c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f997 	bl	8000568 <__aeabi_f2d>
 800323a:	4604      	mov	r4, r0
 800323c:	460d      	mov	r5, r1
 800323e:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <GetET0_f+0x60>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f990 	bl	8000568 <__aeabi_f2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	e9cd 2300 	strd	r2, r3, [sp]
 8003250:	4622      	mov	r2, r4
 8003252:	462b      	mov	r3, r5
 8003254:	490d      	ldr	r1, [pc, #52]	@ (800328c <GetET0_f+0x64>)
 8003256:	480e      	ldr	r0, [pc, #56]	@ (8003290 <GetET0_f+0x68>)
 8003258:	f018 f9f2 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800325c:	480c      	ldr	r0, [pc, #48]	@ (8003290 <GetET0_f+0x68>)
 800325e:	f7fd f817 	bl	8000290 <strlen>
 8003262:	4603      	mov	r3, r0
 8003264:	b29a      	uxth	r2, r3
 8003266:	2364      	movs	r3, #100	@ 0x64
 8003268:	4909      	ldr	r1, [pc, #36]	@ (8003290 <GetET0_f+0x68>)
 800326a:	480a      	ldr	r0, [pc, #40]	@ (8003294 <GetET0_f+0x6c>)
 800326c:	f012 ff18 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8003270:	22fa      	movs	r2, #250	@ 0xfa
 8003272:	2100      	movs	r1, #0
 8003274:	4806      	ldr	r0, [pc, #24]	@ (8003290 <GetET0_f+0x68>)
 8003276:	f018 fa76 	bl	801b766 <memset>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bdb0      	pop	{r4, r5, r7, pc}
 8003282:	bf00      	nop
 8003284:	20000f30 	.word	0x20000f30
 8003288:	2000002c 	.word	0x2000002c
 800328c:	080244e8 	.word	0x080244e8
 8003290:	20000e24 	.word	0x20000e24
 8003294:	20001468 	.word	0x20001468

08003298 <SetETC_f>:

void SetETC_f(char* arg){
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	uint8_t etc_flag = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 80032a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003350 <SetETC_f+0xb8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d03e      	beq.n	800332a <SetETC_f+0x92>
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <SetETC_f+0xb8>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fc ffed 	bl	8000290 <strlen>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d836      	bhi.n	800332a <SetETC_f+0x92>
		Etc_New_Value = atof(tokens[1]);
 80032bc:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <SetETC_f+0xb8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f016 fae9 	bl	8019898 <atof>
 80032c6:	ec53 2b10 	vmov	r2, r3, d0
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	f7fd fc9b 	bl	8000c08 <__aeabi_d2f>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003354 <SetETC_f+0xbc>)
 80032d6:	6013      	str	r3, [r2, #0]
		if (Etc_New_Value >= MIN_ETC && Etc_New_Value <= MAX_ETC) {
 80032d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <SetETC_f+0xbc>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	db20      	blt.n	800332a <SetETC_f+0x92>
 80032e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003354 <SetETC_f+0xbc>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80032f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d816      	bhi.n	800332a <SetETC_f+0x92>
			sprintf((char*)cmd_buff, "ETC VALUE SET TO %.2f SUCCESSFULLY\r\n", Etc_New_Value);
 80032fc:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <SetETC_f+0xbc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f931 	bl	8000568 <__aeabi_f2d>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4913      	ldr	r1, [pc, #76]	@ (8003358 <SetETC_f+0xc0>)
 800330c:	4813      	ldr	r0, [pc, #76]	@ (800335c <SetETC_f+0xc4>)
 800330e:	f018 f997 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003312:	4812      	ldr	r0, [pc, #72]	@ (800335c <SetETC_f+0xc4>)
 8003314:	f7fc ffbc 	bl	8000290 <strlen>
 8003318:	4603      	mov	r3, r0
 800331a:	b29a      	uxth	r2, r3
 800331c:	2364      	movs	r3, #100	@ 0x64
 800331e:	490f      	ldr	r1, [pc, #60]	@ (800335c <SetETC_f+0xc4>)
 8003320:	480f      	ldr	r0, [pc, #60]	@ (8003360 <SetETC_f+0xc8>)
 8003322:	f012 febd 	bl	80160a0 <HAL_UART_Transmit>
			etc_flag = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (etc_flag==0) {
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <SetETC_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8003330:	2364      	movs	r3, #100	@ 0x64
 8003332:	2210      	movs	r2, #16
 8003334:	490b      	ldr	r1, [pc, #44]	@ (8003364 <SetETC_f+0xcc>)
 8003336:	480a      	ldr	r0, [pc, #40]	@ (8003360 <SetETC_f+0xc8>)
 8003338:	f012 feb2 	bl	80160a0 <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 800333c:	22fa      	movs	r2, #250	@ 0xfa
 800333e:	2100      	movs	r1, #0
 8003340:	4806      	ldr	r0, [pc, #24]	@ (800335c <SetETC_f+0xc4>)
 8003342:	f018 fa10 	bl	801b766 <memset>
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000df8 	.word	0x20000df8
 8003354:	20000f34 	.word	0x20000f34
 8003358:	08024544 	.word	0x08024544
 800335c:	20000e24 	.word	0x20000e24
 8003360:	20001468 	.word	0x20001468
 8003364:	08023f3c 	.word	0x08023f3c

08003368 <GetETC_f>:

void GetETC_f(char* arg){
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ETC VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Etc_New_Value,SensorsValues.ETc);
 8003370:	4b14      	ldr	r3, [pc, #80]	@ (80033c4 <GetETC_f+0x5c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd f8f7 	bl	8000568 <__aeabi_f2d>
 800337a:	4604      	mov	r4, r0
 800337c:	460d      	mov	r5, r1
 800337e:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <GetETC_f+0x60>)
 8003380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8f0 	bl	8000568 <__aeabi_f2d>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	e9cd 2300 	strd	r2, r3, [sp]
 8003390:	4622      	mov	r2, r4
 8003392:	462b      	mov	r3, r5
 8003394:	490d      	ldr	r1, [pc, #52]	@ (80033cc <GetETC_f+0x64>)
 8003396:	480e      	ldr	r0, [pc, #56]	@ (80033d0 <GetETC_f+0x68>)
 8003398:	f018 f952 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800339c:	480c      	ldr	r0, [pc, #48]	@ (80033d0 <GetETC_f+0x68>)
 800339e:	f7fc ff77 	bl	8000290 <strlen>
 80033a2:	4603      	mov	r3, r0
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	2364      	movs	r3, #100	@ 0x64
 80033a8:	4909      	ldr	r1, [pc, #36]	@ (80033d0 <GetETC_f+0x68>)
 80033aa:	480a      	ldr	r0, [pc, #40]	@ (80033d4 <GetETC_f+0x6c>)
 80033ac:	f012 fe78 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80033b0:	22fa      	movs	r2, #250	@ 0xfa
 80033b2:	2100      	movs	r1, #0
 80033b4:	4806      	ldr	r0, [pc, #24]	@ (80033d0 <GetETC_f+0x68>)
 80033b6:	f018 f9d6 	bl	801b766 <memset>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bdb0      	pop	{r4, r5, r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000f34 	.word	0x20000f34
 80033c8:	2000002c 	.word	0x2000002c
 80033cc:	0802456c 	.word	0x0802456c
 80033d0:	20000e24 	.word	0x20000e24
 80033d4:	20001468 	.word	0x20001468

080033d8 <SetETCadj_f>:

void SetETCadj_f(char* arg){
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	uint8_t etcadj_flag = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 80033e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <SetETCadj_f+0xb8>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03f      	beq.n	800346c <SetETCadj_f+0x94>
 80033ec:	4b28      	ldr	r3, [pc, #160]	@ (8003490 <SetETCadj_f+0xb8>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fc ff4d 	bl	8000290 <strlen>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d837      	bhi.n	800346c <SetETCadj_f+0x94>
		EtcAdj_New_Value = atof(tokens[1]);
 80033fc:	4b24      	ldr	r3, [pc, #144]	@ (8003490 <SetETCadj_f+0xb8>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4618      	mov	r0, r3
 8003402:	f016 fa49 	bl	8019898 <atof>
 8003406:	ec53 2b10 	vmov	r2, r3, d0
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f7fd fbfb 	bl	8000c08 <__aeabi_d2f>
 8003412:	4603      	mov	r3, r0
 8003414:	4a1f      	ldr	r2, [pc, #124]	@ (8003494 <SetETCadj_f+0xbc>)
 8003416:	6013      	str	r3, [r2, #0]
		if (EtcAdj_New_Value >= 0 && EtcAdj_New_Value <= Old_Default_ETC) {
 8003418:	4b1e      	ldr	r3, [pc, #120]	@ (8003494 <SetETCadj_f+0xbc>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003426:	db21      	blt.n	800346c <SetETCadj_f+0x94>
 8003428:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <SetETCadj_f+0xbc>)
 800342a:	ed93 7a00 	vldr	s14, [r3]
 800342e:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <SetETCadj_f+0xc0>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343c:	d816      	bhi.n	800346c <SetETCadj_f+0x94>
			sprintf((char*)cmd_buff, "ETC ADJ VALUE SET TO %.2f SUCCESSFULLY\r\n", EtcAdj_New_Value);
 800343e:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <SetETCadj_f+0xbc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f890 	bl	8000568 <__aeabi_f2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4913      	ldr	r1, [pc, #76]	@ (800349c <SetETCadj_f+0xc4>)
 800344e:	4814      	ldr	r0, [pc, #80]	@ (80034a0 <SetETCadj_f+0xc8>)
 8003450:	f018 f8f6 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003454:	4812      	ldr	r0, [pc, #72]	@ (80034a0 <SetETCadj_f+0xc8>)
 8003456:	f7fc ff1b 	bl	8000290 <strlen>
 800345a:	4603      	mov	r3, r0
 800345c:	b29a      	uxth	r2, r3
 800345e:	2364      	movs	r3, #100	@ 0x64
 8003460:	490f      	ldr	r1, [pc, #60]	@ (80034a0 <SetETCadj_f+0xc8>)
 8003462:	4810      	ldr	r0, [pc, #64]	@ (80034a4 <SetETCadj_f+0xcc>)
 8003464:	f012 fe1c 	bl	80160a0 <HAL_UART_Transmit>
			etcadj_flag = 1;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (etcadj_flag==0) {
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <SetETCadj_f+0xa6>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8003472:	2364      	movs	r3, #100	@ 0x64
 8003474:	2210      	movs	r2, #16
 8003476:	490c      	ldr	r1, [pc, #48]	@ (80034a8 <SetETCadj_f+0xd0>)
 8003478:	480a      	ldr	r0, [pc, #40]	@ (80034a4 <SetETCadj_f+0xcc>)
 800347a:	f012 fe11 	bl	80160a0 <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 800347e:	22fa      	movs	r2, #250	@ 0xfa
 8003480:	2100      	movs	r1, #0
 8003482:	4807      	ldr	r0, [pc, #28]	@ (80034a0 <SetETCadj_f+0xc8>)
 8003484:	f018 f96f 	bl	801b766 <memset>
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000df8 	.word	0x20000df8
 8003494:	20000f38 	.word	0x20000f38
 8003498:	20000f54 	.word	0x20000f54
 800349c:	080245c8 	.word	0x080245c8
 80034a0:	20000e24 	.word	0x20000e24
 80034a4:	20001468 	.word	0x20001468
 80034a8:	08023f3c 	.word	0x08023f3c

080034ac <GetETCadj_f>:

void GetETCadj_f(char* arg){
 80034ac:	b5b0      	push	{r4, r5, r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ETC ADJ VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",EtcAdj_New_Value,SensorsValues.ETcAdj);
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <GetETCadj_f+0x5c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd f855 	bl	8000568 <__aeabi_f2d>
 80034be:	4604      	mov	r4, r0
 80034c0:	460d      	mov	r5, r1
 80034c2:	4b12      	ldr	r3, [pc, #72]	@ (800350c <GetETCadj_f+0x60>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd f84e 	bl	8000568 <__aeabi_f2d>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	e9cd 2300 	strd	r2, r3, [sp]
 80034d4:	4622      	mov	r2, r4
 80034d6:	462b      	mov	r3, r5
 80034d8:	490d      	ldr	r1, [pc, #52]	@ (8003510 <GetETCadj_f+0x64>)
 80034da:	480e      	ldr	r0, [pc, #56]	@ (8003514 <GetETCadj_f+0x68>)
 80034dc:	f018 f8b0 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80034e0:	480c      	ldr	r0, [pc, #48]	@ (8003514 <GetETCadj_f+0x68>)
 80034e2:	f7fc fed5 	bl	8000290 <strlen>
 80034e6:	4603      	mov	r3, r0
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	2364      	movs	r3, #100	@ 0x64
 80034ec:	4909      	ldr	r1, [pc, #36]	@ (8003514 <GetETCadj_f+0x68>)
 80034ee:	480a      	ldr	r0, [pc, #40]	@ (8003518 <GetETCadj_f+0x6c>)
 80034f0:	f012 fdd6 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80034f4:	22fa      	movs	r2, #250	@ 0xfa
 80034f6:	2100      	movs	r1, #0
 80034f8:	4806      	ldr	r0, [pc, #24]	@ (8003514 <GetETCadj_f+0x68>)
 80034fa:	f018 f934 	bl	801b766 <memset>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bdb0      	pop	{r4, r5, r7, pc}
 8003506:	bf00      	nop
 8003508:	20000f38 	.word	0x20000f38
 800350c:	2000002c 	.word	0x2000002c
 8003510:	080245f4 	.word	0x080245f4
 8003514:	20000e24 	.word	0x20000e24
 8003518:	20001468 	.word	0x20001468

0800351c <GetAirPressure_f>:
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
}

void GetAirPressure_f(char* arg){
 800351c:	b5b0      	push	{r4, r5, r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af02      	add	r7, sp, #8
 8003522:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"AIR PRESSURE VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",AirPressure_New_Value,SensorsValues.AirPressure_s);
 8003524:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <GetAirPressure_f+0x5c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd f81d 	bl	8000568 <__aeabi_f2d>
 800352e:	4604      	mov	r4, r0
 8003530:	460d      	mov	r5, r1
 8003532:	4b12      	ldr	r3, [pc, #72]	@ (800357c <GetAirPressure_f+0x60>)
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd f816 	bl	8000568 <__aeabi_f2d>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	e9cd 2300 	strd	r2, r3, [sp]
 8003544:	4622      	mov	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	490d      	ldr	r1, [pc, #52]	@ (8003580 <GetAirPressure_f+0x64>)
 800354a:	480e      	ldr	r0, [pc, #56]	@ (8003584 <GetAirPressure_f+0x68>)
 800354c:	f018 f878 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8003550:	480c      	ldr	r0, [pc, #48]	@ (8003584 <GetAirPressure_f+0x68>)
 8003552:	f7fc fe9d 	bl	8000290 <strlen>
 8003556:	4603      	mov	r3, r0
 8003558:	b29a      	uxth	r2, r3
 800355a:	2364      	movs	r3, #100	@ 0x64
 800355c:	4909      	ldr	r1, [pc, #36]	@ (8003584 <GetAirPressure_f+0x68>)
 800355e:	480a      	ldr	r0, [pc, #40]	@ (8003588 <GetAirPressure_f+0x6c>)
 8003560:	f012 fd9e 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8003564:	22fa      	movs	r2, #250	@ 0xfa
 8003566:	2100      	movs	r1, #0
 8003568:	4806      	ldr	r0, [pc, #24]	@ (8003584 <GetAirPressure_f+0x68>)
 800356a:	f018 f8fc 	bl	801b766 <memset>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bdb0      	pop	{r4, r5, r7, pc}
 8003576:	bf00      	nop
 8003578:	20000f3c 	.word	0x20000f3c
 800357c:	2000002c 	.word	0x2000002c
 8003580:	08024684 	.word	0x08024684
 8003584:	20000e24 	.word	0x20000e24
 8003588:	20001468 	.word	0x20001468

0800358c <SetHeigh_f>:

void SetHeigh_f(char* arg){
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	uint8_t height_flag = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8003598:	4b2a      	ldr	r3, [pc, #168]	@ (8003644 <SetHeigh_f+0xb8>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d03e      	beq.n	800361e <SetHeigh_f+0x92>
 80035a0:	4b28      	ldr	r3, [pc, #160]	@ (8003644 <SetHeigh_f+0xb8>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc fe73 	bl	8000290 <strlen>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d836      	bhi.n	800361e <SetHeigh_f+0x92>
		Height_New_Value = atof(tokens[1]);
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <SetHeigh_f+0xb8>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f016 f96f 	bl	8019898 <atof>
 80035ba:	ec53 2b10 	vmov	r2, r3, d0
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	f7fd fb21 	bl	8000c08 <__aeabi_d2f>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <SetHeigh_f+0xbc>)
 80035ca:	6013      	str	r3, [r2, #0]
		if (Height_New_Value >= 0.0f && Height_New_Value <= 5000.0f) {
 80035cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003648 <SetHeigh_f+0xbc>)
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	db20      	blt.n	800361e <SetHeigh_f+0x92>
 80035dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003648 <SetHeigh_f+0xbc>)
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800364c <SetHeigh_f+0xc0>
 80035e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	d816      	bhi.n	800361e <SetHeigh_f+0x92>
			sprintf((char*)cmd_buff, "HEIGHT VALUE SET TO %.2f SUCCESSFULLY\r\n", Height_New_Value);
 80035f0:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <SetHeigh_f+0xbc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffb7 	bl	8000568 <__aeabi_f2d>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4914      	ldr	r1, [pc, #80]	@ (8003650 <SetHeigh_f+0xc4>)
 8003600:	4814      	ldr	r0, [pc, #80]	@ (8003654 <SetHeigh_f+0xc8>)
 8003602:	f018 f81d 	bl	801b640 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003606:	4813      	ldr	r0, [pc, #76]	@ (8003654 <SetHeigh_f+0xc8>)
 8003608:	f7fc fe42 	bl	8000290 <strlen>
 800360c:	4603      	mov	r3, r0
 800360e:	b29a      	uxth	r2, r3
 8003610:	2364      	movs	r3, #100	@ 0x64
 8003612:	4910      	ldr	r1, [pc, #64]	@ (8003654 <SetHeigh_f+0xc8>)
 8003614:	4810      	ldr	r0, [pc, #64]	@ (8003658 <SetHeigh_f+0xcc>)
 8003616:	f012 fd43 	bl	80160a0 <HAL_UART_Transmit>
			height_flag = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (height_flag==0) {
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <SetHeigh_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8003624:	2364      	movs	r3, #100	@ 0x64
 8003626:	2210      	movs	r2, #16
 8003628:	490c      	ldr	r1, [pc, #48]	@ (800365c <SetHeigh_f+0xd0>)
 800362a:	480b      	ldr	r0, [pc, #44]	@ (8003658 <SetHeigh_f+0xcc>)
 800362c:	f012 fd38 	bl	80160a0 <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 8003630:	22fa      	movs	r2, #250	@ 0xfa
 8003632:	2100      	movs	r1, #0
 8003634:	4807      	ldr	r0, [pc, #28]	@ (8003654 <SetHeigh_f+0xc8>)
 8003636:	f018 f896 	bl	801b766 <memset>
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000df8 	.word	0x20000df8
 8003648:	20000f40 	.word	0x20000f40
 800364c:	459c4000 	.word	0x459c4000
 8003650:	080246e8 	.word	0x080246e8
 8003654:	20000e24 	.word	0x20000e24
 8003658:	20001468 	.word	0x20001468
 800365c:	08023f3c 	.word	0x08023f3c

08003660 <GetHeigh_f>:

void GetHeigh_f(char* arg){
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af02      	add	r7, sp, #8
 8003666:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"HEIGHT VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Height_New_Value,SensorsValues.AirPressure_s);
 8003668:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <GetHeigh_f+0x5c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fc ff7b 	bl	8000568 <__aeabi_f2d>
 8003672:	4604      	mov	r4, r0
 8003674:	460d      	mov	r5, r1
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <GetHeigh_f+0x60>)
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc ff74 	bl	8000568 <__aeabi_f2d>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	e9cd 2300 	strd	r2, r3, [sp]
 8003688:	4622      	mov	r2, r4
 800368a:	462b      	mov	r3, r5
 800368c:	490d      	ldr	r1, [pc, #52]	@ (80036c4 <GetHeigh_f+0x64>)
 800368e:	480e      	ldr	r0, [pc, #56]	@ (80036c8 <GetHeigh_f+0x68>)
 8003690:	f017 ffd6 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8003694:	480c      	ldr	r0, [pc, #48]	@ (80036c8 <GetHeigh_f+0x68>)
 8003696:	f7fc fdfb 	bl	8000290 <strlen>
 800369a:	4603      	mov	r3, r0
 800369c:	b29a      	uxth	r2, r3
 800369e:	2364      	movs	r3, #100	@ 0x64
 80036a0:	4909      	ldr	r1, [pc, #36]	@ (80036c8 <GetHeigh_f+0x68>)
 80036a2:	480a      	ldr	r0, [pc, #40]	@ (80036cc <GetHeigh_f+0x6c>)
 80036a4:	f012 fcfc 	bl	80160a0 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80036a8:	22fa      	movs	r2, #250	@ 0xfa
 80036aa:	2100      	movs	r1, #0
 80036ac:	4806      	ldr	r0, [pc, #24]	@ (80036c8 <GetHeigh_f+0x68>)
 80036ae:	f018 f85a 	bl	801b766 <memset>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000f40 	.word	0x20000f40
 80036c0:	2000002c 	.word	0x2000002c
 80036c4:	08024710 	.word	0x08024710
 80036c8:	20000e24 	.word	0x20000e24
 80036cc:	20001468 	.word	0x20001468

080036d0 <SysConfigMenu>:

void SysConfigMenu(char* arg){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	currentMenu=SysConfig_Menu;
 80036d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003758 <SysConfigMenu+0x88>)
 80036da:	2205      	movs	r2, #5
 80036dc:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"------------------ SYSTEM CONFIGURATION MENU -----------------\r\n");
 80036de:	491f      	ldr	r1, [pc, #124]	@ (800375c <SysConfigMenu+0x8c>)
 80036e0:	481f      	ldr	r0, [pc, #124]	@ (8003760 <SysConfigMenu+0x90>)
 80036e2:	f017 ffad 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80036e6:	481e      	ldr	r0, [pc, #120]	@ (8003760 <SysConfigMenu+0x90>)
 80036e8:	f7fc fdd2 	bl	8000290 <strlen>
 80036ec:	4603      	mov	r3, r0
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	2364      	movs	r3, #100	@ 0x64
 80036f2:	491b      	ldr	r1, [pc, #108]	@ (8003760 <SysConfigMenu+0x90>)
 80036f4:	481b      	ldr	r0, [pc, #108]	@ (8003764 <SysConfigMenu+0x94>)
 80036f6:	f012 fcd3 	bl	80160a0 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e023      	b.n	8003748 <SysConfigMenu+0x78>
	{if (cmd_list[l].MenuIndex==SysConfig_Menu)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <SysConfigMenu+0x98>)
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	4413      	add	r3, r2
 8003708:	330c      	adds	r3, #12
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d118      	bne.n	8003742 <SysConfigMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	4a15      	ldr	r2, [pc, #84]	@ (8003768 <SysConfigMenu+0x98>)
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	4413      	add	r3, r2
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	4912      	ldr	r1, [pc, #72]	@ (8003768 <SysConfigMenu+0x98>)
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	440b      	add	r3, r1
 8003722:	3304      	adds	r3, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4911      	ldr	r1, [pc, #68]	@ (800376c <SysConfigMenu+0x9c>)
 8003728:	480d      	ldr	r0, [pc, #52]	@ (8003760 <SysConfigMenu+0x90>)
 800372a:	f017 ff89 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800372e:	480c      	ldr	r0, [pc, #48]	@ (8003760 <SysConfigMenu+0x90>)
 8003730:	f7fc fdae 	bl	8000290 <strlen>
 8003734:	4603      	mov	r3, r0
 8003736:	b29a      	uxth	r2, r3
 8003738:	2364      	movs	r3, #100	@ 0x64
 800373a:	4909      	ldr	r1, [pc, #36]	@ (8003760 <SysConfigMenu+0x90>)
 800373c:	4809      	ldr	r0, [pc, #36]	@ (8003764 <SysConfigMenu+0x94>)
 800373e:	f012 fcaf 	bl	80160a0 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	3301      	adds	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b25      	cmp	r3, #37	@ 0x25
 800374c:	d9d8      	bls.n	8003700 <SysConfigMenu+0x30>
	}
	}

}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000e20 	.word	0x20000e20
 800375c:	08024770 	.word	0x08024770
 8003760:	20000bb4 	.word	0x20000bb4
 8003764:	20001468 	.word	0x20001468
 8003768:	20000060 	.word	0x20000060
 800376c:	08023e98 	.word	0x08023e98

08003770 <Save_f>:
void Save_f(char* arg){
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	//Saving Lora Values
	Old_Default_Sf=LoraValues.sf_l;
 8003778:	4ba0      	ldr	r3, [pc, #640]	@ (80039fc <Save_f+0x28c>)
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	4ba0      	ldr	r3, [pc, #640]	@ (8003a00 <Save_f+0x290>)
 800377e:	701a      	strb	r2, [r3, #0]
	LoraValues.sf_l=Sf_New_Value;
 8003780:	4ba0      	ldr	r3, [pc, #640]	@ (8003a04 <Save_f+0x294>)
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	4b9d      	ldr	r3, [pc, #628]	@ (80039fc <Save_f+0x28c>)
 8003786:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"The default SF Value is now %d\r\n",LoraValues.sf_l);
 8003788:	4b9c      	ldr	r3, [pc, #624]	@ (80039fc <Save_f+0x28c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	499e      	ldr	r1, [pc, #632]	@ (8003a08 <Save_f+0x298>)
 8003790:	489e      	ldr	r0, [pc, #632]	@ (8003a0c <Save_f+0x29c>)
 8003792:	f017 ff55 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003796:	489d      	ldr	r0, [pc, #628]	@ (8003a0c <Save_f+0x29c>)
 8003798:	f7fc fd7a 	bl	8000290 <strlen>
 800379c:	4603      	mov	r3, r0
 800379e:	b29a      	uxth	r2, r3
 80037a0:	2364      	movs	r3, #100	@ 0x64
 80037a2:	499a      	ldr	r1, [pc, #616]	@ (8003a0c <Save_f+0x29c>)
 80037a4:	489a      	ldr	r0, [pc, #616]	@ (8003a10 <Save_f+0x2a0>)
 80037a6:	f012 fc7b 	bl	80160a0 <HAL_UART_Transmit>
	Old_Default_Bw=LoraValues.bw_l;
 80037aa:	4b94      	ldr	r3, [pc, #592]	@ (80039fc <Save_f+0x28c>)
 80037ac:	789a      	ldrb	r2, [r3, #2]
 80037ae:	4b99      	ldr	r3, [pc, #612]	@ (8003a14 <Save_f+0x2a4>)
 80037b0:	701a      	strb	r2, [r3, #0]
	LoraValues.bw_l=Bw_New_Value;
 80037b2:	4b99      	ldr	r3, [pc, #612]	@ (8003a18 <Save_f+0x2a8>)
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	4b91      	ldr	r3, [pc, #580]	@ (80039fc <Save_f+0x28c>)
 80037b8:	709a      	strb	r2, [r3, #2]
	sprintf((char*)txBuffer,"The default Bandwidth Value is now %d\r\n",LoraValues.bw_l);
 80037ba:	4b90      	ldr	r3, [pc, #576]	@ (80039fc <Save_f+0x28c>)
 80037bc:	789b      	ldrb	r3, [r3, #2]
 80037be:	461a      	mov	r2, r3
 80037c0:	4996      	ldr	r1, [pc, #600]	@ (8003a1c <Save_f+0x2ac>)
 80037c2:	4892      	ldr	r0, [pc, #584]	@ (8003a0c <Save_f+0x29c>)
 80037c4:	f017 ff3c 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80037c8:	4890      	ldr	r0, [pc, #576]	@ (8003a0c <Save_f+0x29c>)
 80037ca:	f7fc fd61 	bl	8000290 <strlen>
 80037ce:	4603      	mov	r3, r0
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	2364      	movs	r3, #100	@ 0x64
 80037d4:	498d      	ldr	r1, [pc, #564]	@ (8003a0c <Save_f+0x29c>)
 80037d6:	488e      	ldr	r0, [pc, #568]	@ (8003a10 <Save_f+0x2a0>)
 80037d8:	f012 fc62 	bl	80160a0 <HAL_UART_Transmit>
	Old_Default_Cr=LoraValues.cr_l;
 80037dc:	4b87      	ldr	r3, [pc, #540]	@ (80039fc <Save_f+0x28c>)
 80037de:	785a      	ldrb	r2, [r3, #1]
 80037e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003a20 <Save_f+0x2b0>)
 80037e2:	701a      	strb	r2, [r3, #0]
	LoraValues.cr_l=Cr_New_Value;
 80037e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003a24 <Save_f+0x2b4>)
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	4b84      	ldr	r3, [pc, #528]	@ (80039fc <Save_f+0x28c>)
 80037ea:	705a      	strb	r2, [r3, #1]
	sprintf((char*)txBuffer,"The default CR buffer is now %d\r\n",LoraValues.cr_l);
 80037ec:	4b83      	ldr	r3, [pc, #524]	@ (80039fc <Save_f+0x28c>)
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	461a      	mov	r2, r3
 80037f2:	498d      	ldr	r1, [pc, #564]	@ (8003a28 <Save_f+0x2b8>)
 80037f4:	4885      	ldr	r0, [pc, #532]	@ (8003a0c <Save_f+0x29c>)
 80037f6:	f017 ff23 	bl	801b640 <siprintf>

	//Saving GPS Values
	Old_Default_AltGPS=MyGps.alt_gps ;
 80037fa:	4b8c      	ldr	r3, [pc, #560]	@ (8003a2c <Save_f+0x2bc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a8c      	ldr	r2, [pc, #560]	@ (8003a30 <Save_f+0x2c0>)
 8003800:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "The default GPS ALTITUDE is now %.2f\r\n",MyGps.alt_gps);
 8003802:	4b8a      	ldr	r3, [pc, #552]	@ (8003a2c <Save_f+0x2bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc feae 	bl	8000568 <__aeabi_f2d>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4988      	ldr	r1, [pc, #544]	@ (8003a34 <Save_f+0x2c4>)
 8003812:	4889      	ldr	r0, [pc, #548]	@ (8003a38 <Save_f+0x2c8>)
 8003814:	f017 ff14 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003818:	4887      	ldr	r0, [pc, #540]	@ (8003a38 <Save_f+0x2c8>)
 800381a:	f7fc fd39 	bl	8000290 <strlen>
 800381e:	4603      	mov	r3, r0
 8003820:	b29a      	uxth	r2, r3
 8003822:	2364      	movs	r3, #100	@ 0x64
 8003824:	4984      	ldr	r1, [pc, #528]	@ (8003a38 <Save_f+0x2c8>)
 8003826:	487a      	ldr	r0, [pc, #488]	@ (8003a10 <Save_f+0x2a0>)
 8003828:	f012 fc3a 	bl	80160a0 <HAL_UART_Transmit>

	Old_Default_LatGPS=MyGps.lat_gps ;
 800382c:	4b7f      	ldr	r3, [pc, #508]	@ (8003a2c <Save_f+0x2bc>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a82      	ldr	r2, [pc, #520]	@ (8003a3c <Save_f+0x2cc>)
 8003832:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "The default GPS LATITUDE is now %.2f\r\n",MyGps.lat_gps);
 8003834:	4b7d      	ldr	r3, [pc, #500]	@ (8003a2c <Save_f+0x2bc>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fe95 	bl	8000568 <__aeabi_f2d>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	497f      	ldr	r1, [pc, #508]	@ (8003a40 <Save_f+0x2d0>)
 8003844:	487c      	ldr	r0, [pc, #496]	@ (8003a38 <Save_f+0x2c8>)
 8003846:	f017 fefb 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 800384a:	487b      	ldr	r0, [pc, #492]	@ (8003a38 <Save_f+0x2c8>)
 800384c:	f7fc fd20 	bl	8000290 <strlen>
 8003850:	4603      	mov	r3, r0
 8003852:	b29a      	uxth	r2, r3
 8003854:	2364      	movs	r3, #100	@ 0x64
 8003856:	4978      	ldr	r1, [pc, #480]	@ (8003a38 <Save_f+0x2c8>)
 8003858:	486d      	ldr	r0, [pc, #436]	@ (8003a10 <Save_f+0x2a0>)
 800385a:	f012 fc21 	bl	80160a0 <HAL_UART_Transmit>

	Old_Default_LocalTimeOffset=MyGps.offset ;
 800385e:	4b73      	ldr	r3, [pc, #460]	@ (8003a2c <Save_f+0x2bc>)
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	4a78      	ldr	r2, [pc, #480]	@ (8003a44 <Save_f+0x2d4>)
 8003864:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "The default GPS OFFSET TIME is now %d\r\n",MyGps.offset);
 8003866:	4b71      	ldr	r3, [pc, #452]	@ (8003a2c <Save_f+0x2bc>)
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	461a      	mov	r2, r3
 800386c:	4976      	ldr	r1, [pc, #472]	@ (8003a48 <Save_f+0x2d8>)
 800386e:	4872      	ldr	r0, [pc, #456]	@ (8003a38 <Save_f+0x2c8>)
 8003870:	f017 fee6 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003874:	4870      	ldr	r0, [pc, #448]	@ (8003a38 <Save_f+0x2c8>)
 8003876:	f7fc fd0b 	bl	8000290 <strlen>
 800387a:	4603      	mov	r3, r0
 800387c:	b29a      	uxth	r2, r3
 800387e:	2364      	movs	r3, #100	@ 0x64
 8003880:	496d      	ldr	r1, [pc, #436]	@ (8003a38 <Save_f+0x2c8>)
 8003882:	4863      	ldr	r0, [pc, #396]	@ (8003a10 <Save_f+0x2a0>)
 8003884:	f012 fc0c 	bl	80160a0 <HAL_UART_Transmit>

	//Saving Sensors Values

	Old_Default_Radiation = SensorsValues.Radiation_s;
 8003888:	4b70      	ldr	r3, [pc, #448]	@ (8003a4c <Save_f+0x2dc>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	4a70      	ldr	r2, [pc, #448]	@ (8003a50 <Save_f+0x2e0>)
 800388e:	6013      	str	r3, [r2, #0]
	SensorsValues.Radiation_s = Radiation_New_Value;
 8003890:	4b70      	ldr	r3, [pc, #448]	@ (8003a54 <Save_f+0x2e4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a6d      	ldr	r2, [pc, #436]	@ (8003a4c <Save_f+0x2dc>)
 8003896:	6253      	str	r3, [r2, #36]	@ 0x24
	sprintf((char*)txBuffer, "The default Radiation is now %.2f\r\n", SensorsValues.Radiation_s);
 8003898:	4b6c      	ldr	r3, [pc, #432]	@ (8003a4c <Save_f+0x2dc>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fe63 	bl	8000568 <__aeabi_f2d>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	496c      	ldr	r1, [pc, #432]	@ (8003a58 <Save_f+0x2e8>)
 80038a8:	4858      	ldr	r0, [pc, #352]	@ (8003a0c <Save_f+0x29c>)
 80038aa:	f017 fec9 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80038ae:	4857      	ldr	r0, [pc, #348]	@ (8003a0c <Save_f+0x29c>)
 80038b0:	f7fc fcee 	bl	8000290 <strlen>
 80038b4:	4603      	mov	r3, r0
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	2364      	movs	r3, #100	@ 0x64
 80038ba:	4954      	ldr	r1, [pc, #336]	@ (8003a0c <Save_f+0x29c>)
 80038bc:	4854      	ldr	r0, [pc, #336]	@ (8003a10 <Save_f+0x2a0>)
 80038be:	f012 fbef 	bl	80160a0 <HAL_UART_Transmit>

	Old_Default_KC = SensorsValues.Kc;
 80038c2:	4b62      	ldr	r3, [pc, #392]	@ (8003a4c <Save_f+0x2dc>)
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	4a65      	ldr	r2, [pc, #404]	@ (8003a5c <Save_f+0x2ec>)
 80038c8:	6013      	str	r3, [r2, #0]
	SensorsValues.Kc = Kc_New_Value;
 80038ca:	4b65      	ldr	r3, [pc, #404]	@ (8003a60 <Save_f+0x2f0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5f      	ldr	r2, [pc, #380]	@ (8003a4c <Save_f+0x2dc>)
 80038d0:	6193      	str	r3, [r2, #24]
	sprintf((char*)txBuffer, "The default Kc value is now %.2f\r\n", SensorsValues.Kc);
 80038d2:	4b5e      	ldr	r3, [pc, #376]	@ (8003a4c <Save_f+0x2dc>)
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fc fe46 	bl	8000568 <__aeabi_f2d>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4960      	ldr	r1, [pc, #384]	@ (8003a64 <Save_f+0x2f4>)
 80038e2:	484a      	ldr	r0, [pc, #296]	@ (8003a0c <Save_f+0x29c>)
 80038e4:	f017 feac 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80038e8:	4848      	ldr	r0, [pc, #288]	@ (8003a0c <Save_f+0x29c>)
 80038ea:	f7fc fcd1 	bl	8000290 <strlen>
 80038ee:	4603      	mov	r3, r0
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	2364      	movs	r3, #100	@ 0x64
 80038f4:	4945      	ldr	r1, [pc, #276]	@ (8003a0c <Save_f+0x29c>)
 80038f6:	4846      	ldr	r0, [pc, #280]	@ (8003a10 <Save_f+0x2a0>)
 80038f8:	f012 fbd2 	bl	80160a0 <HAL_UART_Transmit>

	Old_Default_KP = SensorsValues.Kp;
 80038fc:	4b53      	ldr	r3, [pc, #332]	@ (8003a4c <Save_f+0x2dc>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	4a59      	ldr	r2, [pc, #356]	@ (8003a68 <Save_f+0x2f8>)
 8003902:	6013      	str	r3, [r2, #0]
	SensorsValues.Kp = Kp_New_Value;
 8003904:	4b59      	ldr	r3, [pc, #356]	@ (8003a6c <Save_f+0x2fc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a50      	ldr	r2, [pc, #320]	@ (8003a4c <Save_f+0x2dc>)
 800390a:	61d3      	str	r3, [r2, #28]
	sprintf((char*)txBuffer, "The default Kp value is now %.2f\r\n", SensorsValues.Kp);
 800390c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a4c <Save_f+0x2dc>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fe29 	bl	8000568 <__aeabi_f2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4955      	ldr	r1, [pc, #340]	@ (8003a70 <Save_f+0x300>)
 800391c:	483b      	ldr	r0, [pc, #236]	@ (8003a0c <Save_f+0x29c>)
 800391e:	f017 fe8f 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003922:	483a      	ldr	r0, [pc, #232]	@ (8003a0c <Save_f+0x29c>)
 8003924:	f7fc fcb4 	bl	8000290 <strlen>
 8003928:	4603      	mov	r3, r0
 800392a:	b29a      	uxth	r2, r3
 800392c:	2364      	movs	r3, #100	@ 0x64
 800392e:	4937      	ldr	r1, [pc, #220]	@ (8003a0c <Save_f+0x29c>)
 8003930:	4837      	ldr	r0, [pc, #220]	@ (8003a10 <Save_f+0x2a0>)
 8003932:	f012 fbb5 	bl	80160a0 <HAL_UART_Transmit>

	Old_Default_ET0 = SensorsValues.ET0;
 8003936:	4b45      	ldr	r3, [pc, #276]	@ (8003a4c <Save_f+0x2dc>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4a4e      	ldr	r2, [pc, #312]	@ (8003a74 <Save_f+0x304>)
 800393c:	6013      	str	r3, [r2, #0]
	SensorsValues.ET0 = Et0_New_Value;
 800393e:	4b4e      	ldr	r3, [pc, #312]	@ (8003a78 <Save_f+0x308>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a42      	ldr	r2, [pc, #264]	@ (8003a4c <Save_f+0x2dc>)
 8003944:	6213      	str	r3, [r2, #32]
	sprintf((char*)txBuffer, "The default ET0 value is now %.2f\r\n", SensorsValues.ET0);
 8003946:	4b41      	ldr	r3, [pc, #260]	@ (8003a4c <Save_f+0x2dc>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fc fe0c 	bl	8000568 <__aeabi_f2d>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4949      	ldr	r1, [pc, #292]	@ (8003a7c <Save_f+0x30c>)
 8003956:	482d      	ldr	r0, [pc, #180]	@ (8003a0c <Save_f+0x29c>)
 8003958:	f017 fe72 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800395c:	482b      	ldr	r0, [pc, #172]	@ (8003a0c <Save_f+0x29c>)
 800395e:	f7fc fc97 	bl	8000290 <strlen>
 8003962:	4603      	mov	r3, r0
 8003964:	b29a      	uxth	r2, r3
 8003966:	2364      	movs	r3, #100	@ 0x64
 8003968:	4928      	ldr	r1, [pc, #160]	@ (8003a0c <Save_f+0x29c>)
 800396a:	4829      	ldr	r0, [pc, #164]	@ (8003a10 <Save_f+0x2a0>)
 800396c:	f012 fb98 	bl	80160a0 <HAL_UART_Transmit>

	Old_Default_ETC = SensorsValues.ETc;
 8003970:	4b36      	ldr	r3, [pc, #216]	@ (8003a4c <Save_f+0x2dc>)
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	4a42      	ldr	r2, [pc, #264]	@ (8003a80 <Save_f+0x310>)
 8003976:	6013      	str	r3, [r2, #0]
	SensorsValues.ETc = Etc_New_Value;
 8003978:	4b42      	ldr	r3, [pc, #264]	@ (8003a84 <Save_f+0x314>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a33      	ldr	r2, [pc, #204]	@ (8003a4c <Save_f+0x2dc>)
 800397e:	6293      	str	r3, [r2, #40]	@ 0x28
	sprintf((char*)txBuffer, "The default ETc value is now %.2f\r\n", SensorsValues.ETc);
 8003980:	4b32      	ldr	r3, [pc, #200]	@ (8003a4c <Save_f+0x2dc>)
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fdef 	bl	8000568 <__aeabi_f2d>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	493e      	ldr	r1, [pc, #248]	@ (8003a88 <Save_f+0x318>)
 8003990:	481e      	ldr	r0, [pc, #120]	@ (8003a0c <Save_f+0x29c>)
 8003992:	f017 fe55 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003996:	481d      	ldr	r0, [pc, #116]	@ (8003a0c <Save_f+0x29c>)
 8003998:	f7fc fc7a 	bl	8000290 <strlen>
 800399c:	4603      	mov	r3, r0
 800399e:	b29a      	uxth	r2, r3
 80039a0:	2364      	movs	r3, #100	@ 0x64
 80039a2:	491a      	ldr	r1, [pc, #104]	@ (8003a0c <Save_f+0x29c>)
 80039a4:	481a      	ldr	r0, [pc, #104]	@ (8003a10 <Save_f+0x2a0>)
 80039a6:	f012 fb7b 	bl	80160a0 <HAL_UART_Transmit>

	Old_Default_ETCadj = SensorsValues.ETcAdj;
 80039aa:	4b28      	ldr	r3, [pc, #160]	@ (8003a4c <Save_f+0x2dc>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	4a37      	ldr	r2, [pc, #220]	@ (8003a8c <Save_f+0x31c>)
 80039b0:	6013      	str	r3, [r2, #0]
	SensorsValues.ETcAdj = EtcAdj_New_Value;
 80039b2:	4b37      	ldr	r3, [pc, #220]	@ (8003a90 <Save_f+0x320>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a25      	ldr	r2, [pc, #148]	@ (8003a4c <Save_f+0x2dc>)
 80039b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	sprintf((char*)txBuffer, "The default ETcAdj value is now %.2f\r\n", SensorsValues.ETcAdj);
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <Save_f+0x2dc>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fdd2 	bl	8000568 <__aeabi_f2d>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4932      	ldr	r1, [pc, #200]	@ (8003a94 <Save_f+0x324>)
 80039ca:	4810      	ldr	r0, [pc, #64]	@ (8003a0c <Save_f+0x29c>)
 80039cc:	f017 fe38 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80039d0:	480e      	ldr	r0, [pc, #56]	@ (8003a0c <Save_f+0x29c>)
 80039d2:	f7fc fc5d 	bl	8000290 <strlen>
 80039d6:	4603      	mov	r3, r0
 80039d8:	b29a      	uxth	r2, r3
 80039da:	2364      	movs	r3, #100	@ 0x64
 80039dc:	490b      	ldr	r1, [pc, #44]	@ (8003a0c <Save_f+0x29c>)
 80039de:	480c      	ldr	r0, [pc, #48]	@ (8003a10 <Save_f+0x2a0>)
 80039e0:	f012 fb5e 	bl	80160a0 <HAL_UART_Transmit>

	Old_Default_Heigh = Height_New_Value;
 80039e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a98 <Save_f+0x328>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a9c <Save_f+0x32c>)
 80039ea:	6013      	str	r3, [r2, #0]
	sprintf((char*)txBuffer, "The default Height is now %.2f\r\n", Old_Default_Heigh);
 80039ec:	4b2b      	ldr	r3, [pc, #172]	@ (8003a9c <Save_f+0x32c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc fdb9 	bl	8000568 <__aeabi_f2d>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	e051      	b.n	8003aa0 <Save_f+0x330>
 80039fc:	20000000 	.word	0x20000000
 8003a00:	2000005c 	.word	0x2000005c
 8003a04:	20000e21 	.word	0x20000e21
 8003a08:	080247b4 	.word	0x080247b4
 8003a0c:	20000bb4 	.word	0x20000bb4
 8003a10:	20001468 	.word	0x20001468
 8003a14:	2000005d 	.word	0x2000005d
 8003a18:	20000f1f 	.word	0x20000f1f
 8003a1c:	080247d8 	.word	0x080247d8
 8003a20:	2000005e 	.word	0x2000005e
 8003a24:	20000f1e 	.word	0x20000f1e
 8003a28:	08024800 	.word	0x08024800
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	20000f64 	.word	0x20000f64
 8003a34:	08024824 	.word	0x08024824
 8003a38:	20000e24 	.word	0x20000e24
 8003a3c:	20000f68 	.word	0x20000f68
 8003a40:	0802484c 	.word	0x0802484c
 8003a44:	20000f60 	.word	0x20000f60
 8003a48:	08024874 	.word	0x08024874
 8003a4c:	2000002c 	.word	0x2000002c
 8003a50:	20000f44 	.word	0x20000f44
 8003a54:	20000f24 	.word	0x20000f24
 8003a58:	0802489c 	.word	0x0802489c
 8003a5c:	20000f48 	.word	0x20000f48
 8003a60:	20000f28 	.word	0x20000f28
 8003a64:	080248c0 	.word	0x080248c0
 8003a68:	20000f4c 	.word	0x20000f4c
 8003a6c:	20000f2c 	.word	0x20000f2c
 8003a70:	080248e4 	.word	0x080248e4
 8003a74:	20000f50 	.word	0x20000f50
 8003a78:	20000f30 	.word	0x20000f30
 8003a7c:	08024908 	.word	0x08024908
 8003a80:	20000f54 	.word	0x20000f54
 8003a84:	20000f34 	.word	0x20000f34
 8003a88:	0802492c 	.word	0x0802492c
 8003a8c:	20000f58 	.word	0x20000f58
 8003a90:	20000f38 	.word	0x20000f38
 8003a94:	08024950 	.word	0x08024950
 8003a98:	20000f40 	.word	0x20000f40
 8003a9c:	20000f5c 	.word	0x20000f5c
 8003aa0:	4908      	ldr	r1, [pc, #32]	@ (8003ac4 <Save_f+0x354>)
 8003aa2:	4809      	ldr	r0, [pc, #36]	@ (8003ac8 <Save_f+0x358>)
 8003aa4:	f017 fdcc 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003aa8:	4807      	ldr	r0, [pc, #28]	@ (8003ac8 <Save_f+0x358>)
 8003aaa:	f7fc fbf1 	bl	8000290 <strlen>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	2364      	movs	r3, #100	@ 0x64
 8003ab4:	4904      	ldr	r1, [pc, #16]	@ (8003ac8 <Save_f+0x358>)
 8003ab6:	4805      	ldr	r0, [pc, #20]	@ (8003acc <Save_f+0x35c>)
 8003ab8:	f012 faf2 	bl	80160a0 <HAL_UART_Transmit>

}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	08024978 	.word	0x08024978
 8003ac8:	20000bb4 	.word	0x20000bb4
 8003acc:	20001468 	.word	0x20001468

08003ad0 <Restore_f>:
void Restore_f(char* arg){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	//Restoring Lora Values
	LoraValues.sf_l=Old_Default_Sf;
 8003ad8:	4b83      	ldr	r3, [pc, #524]	@ (8003ce8 <Restore_f+0x218>)
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	4b83      	ldr	r3, [pc, #524]	@ (8003cec <Restore_f+0x21c>)
 8003ade:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"SF value restored to %d\r\n",LoraValues.sf_l);
 8003ae0:	4b82      	ldr	r3, [pc, #520]	@ (8003cec <Restore_f+0x21c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4982      	ldr	r1, [pc, #520]	@ (8003cf0 <Restore_f+0x220>)
 8003ae8:	4882      	ldr	r0, [pc, #520]	@ (8003cf4 <Restore_f+0x224>)
 8003aea:	f017 fda9 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003aee:	4881      	ldr	r0, [pc, #516]	@ (8003cf4 <Restore_f+0x224>)
 8003af0:	f7fc fbce 	bl	8000290 <strlen>
 8003af4:	4603      	mov	r3, r0
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	2364      	movs	r3, #100	@ 0x64
 8003afa:	497e      	ldr	r1, [pc, #504]	@ (8003cf4 <Restore_f+0x224>)
 8003afc:	487e      	ldr	r0, [pc, #504]	@ (8003cf8 <Restore_f+0x228>)
 8003afe:	f012 facf 	bl	80160a0 <HAL_UART_Transmit>
	LoraValues.bw_l=Old_Default_Bw;
 8003b02:	4b7e      	ldr	r3, [pc, #504]	@ (8003cfc <Restore_f+0x22c>)
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	4b79      	ldr	r3, [pc, #484]	@ (8003cec <Restore_f+0x21c>)
 8003b08:	709a      	strb	r2, [r3, #2]
	sprintf((char*)txBuffer,"BW value restored to %d\r\n",LoraValues.bw_l);
 8003b0a:	4b78      	ldr	r3, [pc, #480]	@ (8003cec <Restore_f+0x21c>)
 8003b0c:	789b      	ldrb	r3, [r3, #2]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	497b      	ldr	r1, [pc, #492]	@ (8003d00 <Restore_f+0x230>)
 8003b12:	4878      	ldr	r0, [pc, #480]	@ (8003cf4 <Restore_f+0x224>)
 8003b14:	f017 fd94 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003b18:	4876      	ldr	r0, [pc, #472]	@ (8003cf4 <Restore_f+0x224>)
 8003b1a:	f7fc fbb9 	bl	8000290 <strlen>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	2364      	movs	r3, #100	@ 0x64
 8003b24:	4973      	ldr	r1, [pc, #460]	@ (8003cf4 <Restore_f+0x224>)
 8003b26:	4874      	ldr	r0, [pc, #464]	@ (8003cf8 <Restore_f+0x228>)
 8003b28:	f012 faba 	bl	80160a0 <HAL_UART_Transmit>
	LoraValues.cr_l=Old_Default_Cr;
 8003b2c:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <Restore_f+0x234>)
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	4b6e      	ldr	r3, [pc, #440]	@ (8003cec <Restore_f+0x21c>)
 8003b32:	705a      	strb	r2, [r3, #1]
	sprintf((char*)txBuffer,"CR value restored to %d\r\n",LoraValues.cr_l);
 8003b34:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <Restore_f+0x21c>)
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4973      	ldr	r1, [pc, #460]	@ (8003d08 <Restore_f+0x238>)
 8003b3c:	486d      	ldr	r0, [pc, #436]	@ (8003cf4 <Restore_f+0x224>)
 8003b3e:	f017 fd7f 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003b42:	486c      	ldr	r0, [pc, #432]	@ (8003cf4 <Restore_f+0x224>)
 8003b44:	f7fc fba4 	bl	8000290 <strlen>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	2364      	movs	r3, #100	@ 0x64
 8003b4e:	4969      	ldr	r1, [pc, #420]	@ (8003cf4 <Restore_f+0x224>)
 8003b50:	4869      	ldr	r0, [pc, #420]	@ (8003cf8 <Restore_f+0x228>)
 8003b52:	f012 faa5 	bl	80160a0 <HAL_UART_Transmit>

	//Restoring GPS Values
	MyGps.offset = Old_Default_LocalTimeOffset;
 8003b56:	4b6d      	ldr	r3, [pc, #436]	@ (8003d0c <Restore_f+0x23c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003d10 <Restore_f+0x240>)
 8003b5c:	6253      	str	r3, [r2, #36]	@ 0x24
	sprintf((char*)cmd_buff, "GPS TIME restored to %d\r\n",MyGps.offset);
 8003b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8003d10 <Restore_f+0x240>)
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	461a      	mov	r2, r3
 8003b64:	496b      	ldr	r1, [pc, #428]	@ (8003d14 <Restore_f+0x244>)
 8003b66:	486c      	ldr	r0, [pc, #432]	@ (8003d18 <Restore_f+0x248>)
 8003b68:	f017 fd6a 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003b6c:	486a      	ldr	r0, [pc, #424]	@ (8003d18 <Restore_f+0x248>)
 8003b6e:	f7fc fb8f 	bl	8000290 <strlen>
 8003b72:	4603      	mov	r3, r0
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	2364      	movs	r3, #100	@ 0x64
 8003b78:	4967      	ldr	r1, [pc, #412]	@ (8003d18 <Restore_f+0x248>)
 8003b7a:	485f      	ldr	r0, [pc, #380]	@ (8003cf8 <Restore_f+0x228>)
 8003b7c:	f012 fa90 	bl	80160a0 <HAL_UART_Transmit>
	//Restoring Sensors Values

	SensorsValues.Radiation_s = Old_Default_Radiation;
 8003b80:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <Restore_f+0x24c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a66      	ldr	r2, [pc, #408]	@ (8003d20 <Restore_f+0x250>)
 8003b86:	6253      	str	r3, [r2, #36]	@ 0x24
	sprintf((char*)cmd_buff, "Radiation restored to %.2f\r\n", SensorsValues.Radiation_s);
 8003b88:	4b65      	ldr	r3, [pc, #404]	@ (8003d20 <Restore_f+0x250>)
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc fceb 	bl	8000568 <__aeabi_f2d>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4963      	ldr	r1, [pc, #396]	@ (8003d24 <Restore_f+0x254>)
 8003b98:	485f      	ldr	r0, [pc, #380]	@ (8003d18 <Restore_f+0x248>)
 8003b9a:	f017 fd51 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003b9e:	485e      	ldr	r0, [pc, #376]	@ (8003d18 <Restore_f+0x248>)
 8003ba0:	f7fc fb76 	bl	8000290 <strlen>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	2364      	movs	r3, #100	@ 0x64
 8003baa:	495b      	ldr	r1, [pc, #364]	@ (8003d18 <Restore_f+0x248>)
 8003bac:	4852      	ldr	r0, [pc, #328]	@ (8003cf8 <Restore_f+0x228>)
 8003bae:	f012 fa77 	bl	80160a0 <HAL_UART_Transmit>

	SensorsValues.Kc = Old_Default_KC;
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d28 <Restore_f+0x258>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a5a      	ldr	r2, [pc, #360]	@ (8003d20 <Restore_f+0x250>)
 8003bb8:	6193      	str	r3, [r2, #24]
	sprintf((char*)cmd_buff, "Kc restored to %.2f\r\n", SensorsValues.Kc);
 8003bba:	4b59      	ldr	r3, [pc, #356]	@ (8003d20 <Restore_f+0x250>)
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fc fcd2 	bl	8000568 <__aeabi_f2d>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4958      	ldr	r1, [pc, #352]	@ (8003d2c <Restore_f+0x25c>)
 8003bca:	4853      	ldr	r0, [pc, #332]	@ (8003d18 <Restore_f+0x248>)
 8003bcc:	f017 fd38 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003bd0:	4851      	ldr	r0, [pc, #324]	@ (8003d18 <Restore_f+0x248>)
 8003bd2:	f7fc fb5d 	bl	8000290 <strlen>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	2364      	movs	r3, #100	@ 0x64
 8003bdc:	494e      	ldr	r1, [pc, #312]	@ (8003d18 <Restore_f+0x248>)
 8003bde:	4846      	ldr	r0, [pc, #280]	@ (8003cf8 <Restore_f+0x228>)
 8003be0:	f012 fa5e 	bl	80160a0 <HAL_UART_Transmit>

	SensorsValues.Kp = Old_Default_KP;
 8003be4:	4b52      	ldr	r3, [pc, #328]	@ (8003d30 <Restore_f+0x260>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a4d      	ldr	r2, [pc, #308]	@ (8003d20 <Restore_f+0x250>)
 8003bea:	61d3      	str	r3, [r2, #28]
	sprintf((char*)cmd_buff, "Kp restored to %.2f\r\n", SensorsValues.Kp);
 8003bec:	4b4c      	ldr	r3, [pc, #304]	@ (8003d20 <Restore_f+0x250>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fcb9 	bl	8000568 <__aeabi_f2d>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	494e      	ldr	r1, [pc, #312]	@ (8003d34 <Restore_f+0x264>)
 8003bfc:	4846      	ldr	r0, [pc, #280]	@ (8003d18 <Restore_f+0x248>)
 8003bfe:	f017 fd1f 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003c02:	4845      	ldr	r0, [pc, #276]	@ (8003d18 <Restore_f+0x248>)
 8003c04:	f7fc fb44 	bl	8000290 <strlen>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	2364      	movs	r3, #100	@ 0x64
 8003c0e:	4942      	ldr	r1, [pc, #264]	@ (8003d18 <Restore_f+0x248>)
 8003c10:	4839      	ldr	r0, [pc, #228]	@ (8003cf8 <Restore_f+0x228>)
 8003c12:	f012 fa45 	bl	80160a0 <HAL_UART_Transmit>

	SensorsValues.ET0 = Old_Default_ET0;
 8003c16:	4b48      	ldr	r3, [pc, #288]	@ (8003d38 <Restore_f+0x268>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a41      	ldr	r2, [pc, #260]	@ (8003d20 <Restore_f+0x250>)
 8003c1c:	6213      	str	r3, [r2, #32]
	sprintf((char*)cmd_buff, "ET0 restored to %.2f\r\n", SensorsValues.ET0);
 8003c1e:	4b40      	ldr	r3, [pc, #256]	@ (8003d20 <Restore_f+0x250>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fc fca0 	bl	8000568 <__aeabi_f2d>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4943      	ldr	r1, [pc, #268]	@ (8003d3c <Restore_f+0x26c>)
 8003c2e:	483a      	ldr	r0, [pc, #232]	@ (8003d18 <Restore_f+0x248>)
 8003c30:	f017 fd06 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003c34:	4838      	ldr	r0, [pc, #224]	@ (8003d18 <Restore_f+0x248>)
 8003c36:	f7fc fb2b 	bl	8000290 <strlen>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	2364      	movs	r3, #100	@ 0x64
 8003c40:	4935      	ldr	r1, [pc, #212]	@ (8003d18 <Restore_f+0x248>)
 8003c42:	482d      	ldr	r0, [pc, #180]	@ (8003cf8 <Restore_f+0x228>)
 8003c44:	f012 fa2c 	bl	80160a0 <HAL_UART_Transmit>

	SensorsValues.ETc = Old_Default_ETC;
 8003c48:	4b3d      	ldr	r3, [pc, #244]	@ (8003d40 <Restore_f+0x270>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a34      	ldr	r2, [pc, #208]	@ (8003d20 <Restore_f+0x250>)
 8003c4e:	6293      	str	r3, [r2, #40]	@ 0x28
	sprintf((char*)cmd_buff, "ETC restored to %.2f\r\n", SensorsValues.ETc);
 8003c50:	4b33      	ldr	r3, [pc, #204]	@ (8003d20 <Restore_f+0x250>)
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fc87 	bl	8000568 <__aeabi_f2d>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4939      	ldr	r1, [pc, #228]	@ (8003d44 <Restore_f+0x274>)
 8003c60:	482d      	ldr	r0, [pc, #180]	@ (8003d18 <Restore_f+0x248>)
 8003c62:	f017 fced 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003c66:	482c      	ldr	r0, [pc, #176]	@ (8003d18 <Restore_f+0x248>)
 8003c68:	f7fc fb12 	bl	8000290 <strlen>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	2364      	movs	r3, #100	@ 0x64
 8003c72:	4929      	ldr	r1, [pc, #164]	@ (8003d18 <Restore_f+0x248>)
 8003c74:	4820      	ldr	r0, [pc, #128]	@ (8003cf8 <Restore_f+0x228>)
 8003c76:	f012 fa13 	bl	80160a0 <HAL_UART_Transmit>

	SensorsValues.ETcAdj = Old_Default_ETCadj;
 8003c7a:	4b33      	ldr	r3, [pc, #204]	@ (8003d48 <Restore_f+0x278>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a28      	ldr	r2, [pc, #160]	@ (8003d20 <Restore_f+0x250>)
 8003c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
	sprintf((char*)cmd_buff, "ETC Adjusted restored to %.2f\r\n", SensorsValues.ETcAdj);
 8003c82:	4b27      	ldr	r3, [pc, #156]	@ (8003d20 <Restore_f+0x250>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc6e 	bl	8000568 <__aeabi_f2d>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	492e      	ldr	r1, [pc, #184]	@ (8003d4c <Restore_f+0x27c>)
 8003c92:	4821      	ldr	r0, [pc, #132]	@ (8003d18 <Restore_f+0x248>)
 8003c94:	f017 fcd4 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003c98:	481f      	ldr	r0, [pc, #124]	@ (8003d18 <Restore_f+0x248>)
 8003c9a:	f7fc faf9 	bl	8000290 <strlen>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	2364      	movs	r3, #100	@ 0x64
 8003ca4:	491c      	ldr	r1, [pc, #112]	@ (8003d18 <Restore_f+0x248>)
 8003ca6:	4814      	ldr	r0, [pc, #80]	@ (8003cf8 <Restore_f+0x228>)
 8003ca8:	f012 f9fa 	bl	80160a0 <HAL_UART_Transmit>

	Height_New_Value = Old_Default_Heigh;
 8003cac:	4b28      	ldr	r3, [pc, #160]	@ (8003d50 <Restore_f+0x280>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	@ (8003d54 <Restore_f+0x284>)
 8003cb2:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "Height restored to %.2f\r\n", Height_New_Value);
 8003cb4:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <Restore_f+0x284>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fc55 	bl	8000568 <__aeabi_f2d>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4925      	ldr	r1, [pc, #148]	@ (8003d58 <Restore_f+0x288>)
 8003cc4:	4814      	ldr	r0, [pc, #80]	@ (8003d18 <Restore_f+0x248>)
 8003cc6:	f017 fcbb 	bl	801b640 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003cca:	4813      	ldr	r0, [pc, #76]	@ (8003d18 <Restore_f+0x248>)
 8003ccc:	f7fc fae0 	bl	8000290 <strlen>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	2364      	movs	r3, #100	@ 0x64
 8003cd6:	4910      	ldr	r1, [pc, #64]	@ (8003d18 <Restore_f+0x248>)
 8003cd8:	4807      	ldr	r0, [pc, #28]	@ (8003cf8 <Restore_f+0x228>)
 8003cda:	f012 f9e1 	bl	80160a0 <HAL_UART_Transmit>

}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	2000005c 	.word	0x2000005c
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	0802499c 	.word	0x0802499c
 8003cf4:	20000bb4 	.word	0x20000bb4
 8003cf8:	20001468 	.word	0x20001468
 8003cfc:	2000005d 	.word	0x2000005d
 8003d00:	080249b8 	.word	0x080249b8
 8003d04:	2000005e 	.word	0x2000005e
 8003d08:	080249d4 	.word	0x080249d4
 8003d0c:	20000f60 	.word	0x20000f60
 8003d10:	20000004 	.word	0x20000004
 8003d14:	080249f0 	.word	0x080249f0
 8003d18:	20000e24 	.word	0x20000e24
 8003d1c:	20000f44 	.word	0x20000f44
 8003d20:	2000002c 	.word	0x2000002c
 8003d24:	08024a0c 	.word	0x08024a0c
 8003d28:	20000f48 	.word	0x20000f48
 8003d2c:	08024a2c 	.word	0x08024a2c
 8003d30:	20000f4c 	.word	0x20000f4c
 8003d34:	08024a44 	.word	0x08024a44
 8003d38:	20000f50 	.word	0x20000f50
 8003d3c:	08024a5c 	.word	0x08024a5c
 8003d40:	20000f54 	.word	0x20000f54
 8003d44:	08024a74 	.word	0x08024a74
 8003d48:	20000f58 	.word	0x20000f58
 8003d4c:	08024a8c 	.word	0x08024a8c
 8003d50:	20000f5c 	.word	0x20000f5c
 8003d54:	20000f40 	.word	0x20000f40
 8003d58:	08024aac 	.word	0x08024aac

08003d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d60:	f00f fb82 	bl	8013468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d64:	f000 f814 	bl	8003d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d68:	f7fd fe8e 	bl	8001a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d6c:	f000 fc6a 	bl	8004644 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8003d70:	f000 f9c2 	bl	80040f8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8003d74:	f000 fc36 	bl	80045e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Reset_Flag=1;
 8003d78:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <main+0x30>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003d7e:	f7fd fe11 	bl	80019a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003d82:	f013 fd41 	bl	8017808 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <main+0x2a>
 8003d8a:	bf00      	nop
 8003d8c:	20000f70 	.word	0x20000f70

08003d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b096      	sub	sp, #88	@ 0x58
 8003d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	2244      	movs	r2, #68	@ 0x44
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f017 fce1 	bl	801b766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003da4:	463b      	mov	r3, r7
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	60da      	str	r2, [r3, #12]
 8003db0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003db2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003db6:	f00f fec9 	bl	8013b4c <HAL_PWREx_ControlVoltageScaling>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003dc0:	f000 f84c 	bl	8003e5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003dc4:	230a      	movs	r3, #10
 8003dc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003dce:	2310      	movs	r3, #16
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003de2:	230a      	movs	r3, #10
 8003de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003de6:	2307      	movs	r3, #7
 8003de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003dea:	2302      	movs	r3, #2
 8003dec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003dee:	2302      	movs	r3, #2
 8003df0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003df2:	f107 0314 	add.w	r3, r7, #20
 8003df6:	4618      	mov	r0, r3
 8003df8:	f00f fefe 	bl	8013bf8 <HAL_RCC_OscConfig>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003e02:	f000 f82b 	bl	8003e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e06:	230f      	movs	r3, #15
 8003e08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	2104      	movs	r1, #4
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f010 fac6 	bl	80143b0 <HAL_RCC_ClockConfig>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003e2a:	f000 f817 	bl	8003e5c <Error_Handler>
  }
}
 8003e2e:	bf00      	nop
 8003e30:	3758      	adds	r7, #88	@ 0x58
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a04      	ldr	r2, [pc, #16]	@ (8003e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003e4a:	f00f fb2d 	bl	80134a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40001000 	.word	0x40001000

08003e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e60:	b672      	cpsid	i
}
 8003e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <Error_Handler+0x8>

08003e68 <Start_GPS_Task>:
uint8_t xGpsBytesSent;
uint8_t gps_message_buffer_flag;
uint8_t GPS_Valid=1;
uint8_t Assign_Values=0;
void Start_GPS_Task(void const * argument)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	GpsMessageBufferHandle = xMessageBufferCreate(xGpsMessageBufferSizeBytes);
 8003e70:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e74:	2201      	movs	r2, #1
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f013 fde0 	bl	8017a3e <xStreamBufferGenericCreate>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4a14      	ldr	r2, [pc, #80]	@ (8003ed4 <Start_GPS_Task+0x6c>)
 8003e82:	6013      	str	r3, [r2, #0]
	if( GpsMessageBufferHandle != NULL )
 8003e84:	4b13      	ldr	r3, [pc, #76]	@ (8003ed4 <Start_GPS_Task+0x6c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <Start_GPS_Task+0x30>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 8003e8c:	2364      	movs	r3, #100	@ 0x64
 8003e8e:	2222      	movs	r2, #34	@ 0x22
 8003e90:	4911      	ldr	r1, [pc, #68]	@ (8003ed8 <Start_GPS_Task+0x70>)
 8003e92:	4812      	ldr	r0, [pc, #72]	@ (8003edc <Start_GPS_Task+0x74>)
 8003e94:	f012 f904 	bl	80160a0 <HAL_UART_Transmit>
	}
	GPS_Init();
 8003e98:	f7fd fe5c 	bl	8001b54 <GPS_Init>
	for(;;)
	{
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <Start_GPS_Task+0x6c>)
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003ea8:	490d      	ldr	r1, [pc, #52]	@ (8003ee0 <Start_GPS_Task+0x78>)
 8003eaa:	f013 ff0a 	bl	8017cc2 <xStreamBufferReceive>
		Sentence_parse((char*)received_nmea);
 8003eae:	480c      	ldr	r0, [pc, #48]	@ (8003ee0 <Start_GPS_Task+0x78>)
 8003eb0:	f000 f882 	bl	8003fb8 <Sentence_parse>
		if (Assign_Values==1){
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <Start_GPS_Task+0x7c>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <Start_GPS_Task+0x62>
			GPS_Nmea_time();
 8003ebc:	f7fd fff0 	bl	8001ea0 <GPS_Nmea_time>
			GPS_Nmea_Date();
 8003ec0:	f7fe f87a 	bl	8001fb8 <GPS_Nmea_Date>
			GPS_GetFromRTC(&MyGps);};
 8003ec4:	4808      	ldr	r0, [pc, #32]	@ (8003ee8 <Start_GPS_Task+0x80>)
 8003ec6:	f000 f893 	bl	8003ff0 <GPS_GetFromRTC>
		osDelay(100);
 8003eca:	2064      	movs	r0, #100	@ 0x64
 8003ecc:	f013 fcef 	bl	80178ae <osDelay>
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8003ed0:	e7e4      	b.n	8003e9c <Start_GPS_Task+0x34>
 8003ed2:	bf00      	nop
 8003ed4:	20000f74 	.word	0x20000f74
 8003ed8:	08024ac8 	.word	0x08024ac8
 8003edc:	20001468 	.word	0x20001468
 8003ee0:	2000116c 	.word	0x2000116c
 8003ee4:	20001365 	.word	0x20001365
 8003ee8:	20000004 	.word	0x20000004

08003eec <GPS_UART_CallBack>:
	}
}
void GPS_UART_CallBack() {
 8003eec:	b598      	push	{r3, r4, r7, lr}
 8003eee:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8003ef0:	4b27      	ldr	r3, [pc, #156]	@ (8003f90 <GPS_UART_CallBack+0xa4>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b0a      	cmp	r3, #10
 8003ef6:	d010      	beq.n	8003f1a <GPS_UART_CallBack+0x2e>
 8003ef8:	4b26      	ldr	r3, [pc, #152]	@ (8003f94 <GPS_UART_CallBack+0xa8>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b25b      	sxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <GPS_UART_CallBack+0xa8>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	b2d1      	uxtb	r1, r2
 8003f0a:	4a22      	ldr	r2, [pc, #136]	@ (8003f94 <GPS_UART_CallBack+0xa8>)
 8003f0c:	7011      	strb	r1, [r2, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b1f      	ldr	r3, [pc, #124]	@ (8003f90 <GPS_UART_CallBack+0xa4>)
 8003f12:	7819      	ldrb	r1, [r3, #0]
 8003f14:	4b20      	ldr	r3, [pc, #128]	@ (8003f98 <GPS_UART_CallBack+0xac>)
 8003f16:	5499      	strb	r1, [r3, r2]
 8003f18:	e032      	b.n	8003f80 <GPS_UART_CallBack+0x94>
	} else {
		rx_buffer[rx_index] = '\0';
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <GPS_UART_CallBack+0xa8>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <GPS_UART_CallBack+0xac>)
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
		memcpy(NMEA_ToParse,rx_buffer,rx_index);
 8003f26:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <GPS_UART_CallBack+0xa8>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	491a      	ldr	r1, [pc, #104]	@ (8003f98 <GPS_UART_CallBack+0xac>)
 8003f2e:	481b      	ldr	r0, [pc, #108]	@ (8003f9c <GPS_UART_CallBack+0xb0>)
 8003f30:	f018 fcf1 	bl	801c916 <memcpy>
		xGpsBytesSent=xMessageBufferSendFromISR(GpsMessageBufferHandle,NMEA_ToParse,strlen((char*)NMEA_ToParse),&xHigherPriorityTaskWokenGps);
 8003f34:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa0 <GPS_UART_CallBack+0xb4>)
 8003f36:	681c      	ldr	r4, [r3, #0]
 8003f38:	4818      	ldr	r0, [pc, #96]	@ (8003f9c <GPS_UART_CallBack+0xb0>)
 8003f3a:	f7fc f9a9 	bl	8000290 <strlen>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b18      	ldr	r3, [pc, #96]	@ (8003fa4 <GPS_UART_CallBack+0xb8>)
 8003f42:	4916      	ldr	r1, [pc, #88]	@ (8003f9c <GPS_UART_CallBack+0xb0>)
 8003f44:	4620      	mov	r0, r4
 8003f46:	f013 fe0c 	bl	8017b62 <xStreamBufferSendFromISR>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4b16      	ldr	r3, [pc, #88]	@ (8003fa8 <GPS_UART_CallBack+0xbc>)
 8003f50:	701a      	strb	r2, [r3, #0]
		if( xGpsBytesSent != strlen((char*)NMEA_ToParse))
 8003f52:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <GPS_UART_CallBack+0xbc>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	461c      	mov	r4, r3
 8003f58:	4810      	ldr	r0, [pc, #64]	@ (8003f9c <GPS_UART_CallBack+0xb0>)
 8003f5a:	f7fc f999 	bl	8000290 <strlen>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	429c      	cmp	r4, r3
 8003f62:	d005      	beq.n	8003f70 <GPS_UART_CallBack+0x84>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"GPS Message sent different from buffer data\r\n",strlen("GPS Message sent different from buffer data\r\n"),100);
 8003f64:	2364      	movs	r3, #100	@ 0x64
 8003f66:	222d      	movs	r2, #45	@ 0x2d
 8003f68:	4910      	ldr	r1, [pc, #64]	@ (8003fac <GPS_UART_CallBack+0xc0>)
 8003f6a:	4811      	ldr	r0, [pc, #68]	@ (8003fb0 <GPS_UART_CallBack+0xc4>)
 8003f6c:	f012 f898 	bl	80160a0 <HAL_UART_Transmit>
		}
		memset(rx_buffer,0,sizeof(rx_buffer));
 8003f70:	2280      	movs	r2, #128	@ 0x80
 8003f72:	2100      	movs	r1, #0
 8003f74:	4808      	ldr	r0, [pc, #32]	@ (8003f98 <GPS_UART_CallBack+0xac>)
 8003f76:	f017 fbf6 	bl	801b766 <memset>
		rx_index = 0;
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <GPS_UART_CallBack+0xa8>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8003f80:	2201      	movs	r2, #1
 8003f82:	4903      	ldr	r1, [pc, #12]	@ (8003f90 <GPS_UART_CallBack+0xa4>)
 8003f84:	480b      	ldr	r0, [pc, #44]	@ (8003fb4 <GPS_UART_CallBack+0xc8>)
 8003f86:	f012 f915 	bl	80161b4 <HAL_UART_Receive_IT>
}
 8003f8a:	bf00      	nop
 8003f8c:	bd98      	pop	{r3, r4, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000a38 	.word	0x20000a38
 8003f94:	20000abc 	.word	0x20000abc
 8003f98:	20000a3c 	.word	0x20000a3c
 8003f9c:	20000f78 	.word	0x20000f78
 8003fa0:	20000f74 	.word	0x20000f74
 8003fa4:	20001360 	.word	0x20001360
 8003fa8:	20001364 	.word	0x20001364
 8003fac:	08024aec 	.word	0x08024aec
 8003fb0:	20001468 	.word	0x20001468
 8003fb4:	200013e0 	.word	0x200013e0

08003fb8 <Sentence_parse>:

void Sentence_parse(char* str){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	if (GPS_validate(str)) {
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fd fdd5 	bl	8001b70 <GPS_validate>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <Sentence_parse+0x22>
		GPS_parse(str);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fd fe31 	bl	8001c34 <GPS_parse>
		Assign_Values=1;
 8003fd2:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <Sentence_parse+0x30>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
	}
	else GPS_Valid=0;
}
 8003fd8:	e002      	b.n	8003fe0 <Sentence_parse+0x28>
	else GPS_Valid=0;
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <Sentence_parse+0x34>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20001365 	.word	0x20001365
 8003fec:	200002c1 	.word	0x200002c1

08003ff0 <GPS_GetFromRTC>:
void GPS_GetFromRTC(GPS_Data *gps_rtc){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time;
	RTC_DateTypeDef rtc_date;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8003ff8:	f107 0310 	add.w	r3, r7, #16
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4619      	mov	r1, r3
 8004000:	4817      	ldr	r0, [pc, #92]	@ (8004060 <GPS_GetFromRTC+0x70>)
 8004002:	f011 fa0c 	bl	801541e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	2200      	movs	r2, #0
 800400c:	4619      	mov	r1, r3
 800400e:	4814      	ldr	r0, [pc, #80]	@ (8004060 <GPS_GetFromRTC+0x70>)
 8004010:	f011 fae8 	bl	80155e4 <HAL_RTC_GetDate>
	int rtc_minutes_total = rtc_time.Hours * 60 + rtc_time.Minutes;
 8004014:	7c3b      	ldrb	r3, [r7, #16]
 8004016:	461a      	mov	r2, r3
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	461a      	mov	r2, r3
 8004022:	7c7b      	ldrb	r3, [r7, #17]
 8004024:	4413      	add	r3, r2
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int gps_minutes_total = gps_rtc->hours * 60 + gps_rtc->minutes;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	4413      	add	r3, r2
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int diff_minutes = abs(rtc_minutes_total - gps_minutes_total);
 800403e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	bfb8      	it	lt
 8004048:	425b      	neglt	r3, r3
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (diff_minutes >= 5)
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	2b04      	cmp	r3, #4
 8004050:	dd02      	ble.n	8004058 <GPS_GetFromRTC+0x68>
		RTC_SetFromGPS(gps_rtc);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f806 	bl	8004064 <RTC_SetFromGPS>
	/*	HAL_UART_Transmit(&huart2, (const uint8_t*)"RTC synchronized from GPS\r\n", strlen("RTC synchronized from GPS\r\n"), 1000);
	} else {
		HAL_UART_Transmit(&huart2, (const uint8_t*)"RTC sync skipped (diff < 5 min)\r\n", strlen("RTC sync skipped (diff < 5 min)\r\n"), 1000);
	}*/
}
 8004058:	bf00      	nop
 800405a:	3730      	adds	r7, #48	@ 0x30
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20001368 	.word	0x20001368

08004064 <RTC_SetFromGPS>:
void RTC_SetFromGPS(GPS_Data *gps_rtc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

	RTC_TimeTypeDef sTime={0};
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate ={0} ;
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
	sTime.Hours = gps_rtc->hours;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = gps_rtc->minutes;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = gps_rtc->seconds;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
	sDate.Year = gps_rtc->year;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	72fb      	strb	r3, [r7, #11]
	sDate.Month = gps_rtc->month;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	727b      	strb	r3, [r7, #9]
	sDate.Date = gps_rtc->day;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	72bb      	strb	r3, [r7, #10]
	sDate.WeekDay = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80040bc:	f107 030c 	add.w	r3, r7, #12
 80040c0:	2200      	movs	r2, #0
 80040c2:	4619      	mov	r1, r3
 80040c4:	480b      	ldr	r0, [pc, #44]	@ (80040f4 <RTC_SetFromGPS+0x90>)
 80040c6:	f011 f90d 	bl	80152e4 <HAL_RTC_SetTime>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <RTC_SetFromGPS+0x70>
	{
		Error_Handler();
 80040d0:	f7ff fec4 	bl	8003e5c <Error_Handler>
	}
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80040d4:	f107 0308 	add.w	r3, r7, #8
 80040d8:	2200      	movs	r2, #0
 80040da:	4619      	mov	r1, r3
 80040dc:	4805      	ldr	r0, [pc, #20]	@ (80040f4 <RTC_SetFromGPS+0x90>)
 80040de:	f011 f9fa 	bl	80154d6 <HAL_RTC_SetDate>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <RTC_SetFromGPS+0x88>
	{
		Error_Handler();
 80040e8:	f7ff feb8 	bl	8003e5c <Error_Handler>
	}
}
 80040ec:	bf00      	nop
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20001368 	.word	0x20001368

080040f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b092      	sub	sp, #72	@ 0x48
 80040fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80040fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	609a      	str	r2, [r3, #8]
 800410a:	60da      	str	r2, [r3, #12]
 800410c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800410e:	2300      	movs	r3, #0
 8004110:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	222c      	movs	r2, #44	@ 0x2c
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f017 fb24 	bl	801b766 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800411e:	4b3c      	ldr	r3, [pc, #240]	@ (8004210 <MX_RTC_Init+0x118>)
 8004120:	4a3c      	ldr	r2, [pc, #240]	@ (8004214 <MX_RTC_Init+0x11c>)
 8004122:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004124:	4b3a      	ldr	r3, [pc, #232]	@ (8004210 <MX_RTC_Init+0x118>)
 8004126:	2200      	movs	r2, #0
 8004128:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800412a:	4b39      	ldr	r3, [pc, #228]	@ (8004210 <MX_RTC_Init+0x118>)
 800412c:	227f      	movs	r2, #127	@ 0x7f
 800412e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004130:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <MX_RTC_Init+0x118>)
 8004132:	22ff      	movs	r2, #255	@ 0xff
 8004134:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004136:	4b36      	ldr	r3, [pc, #216]	@ (8004210 <MX_RTC_Init+0x118>)
 8004138:	2200      	movs	r2, #0
 800413a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800413c:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <MX_RTC_Init+0x118>)
 800413e:	2200      	movs	r2, #0
 8004140:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004142:	4b33      	ldr	r3, [pc, #204]	@ (8004210 <MX_RTC_Init+0x118>)
 8004144:	2200      	movs	r2, #0
 8004146:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004148:	4b31      	ldr	r3, [pc, #196]	@ (8004210 <MX_RTC_Init+0x118>)
 800414a:	2200      	movs	r2, #0
 800414c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800414e:	4830      	ldr	r0, [pc, #192]	@ (8004210 <MX_RTC_Init+0x118>)
 8004150:	f011 f840 	bl	80151d4 <HAL_RTC_Init>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800415a:	f7ff fe7f 	bl	8003e5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 14;
 800415e:	230e      	movs	r3, #14
 8004160:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 25;
 8004164:	2319      	movs	r3, #25
 8004166:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 30;
 800416a:	231e      	movs	r3, #30
 800416c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004170:	2300      	movs	r3, #0
 8004172:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004178:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800417c:	2200      	movs	r2, #0
 800417e:	4619      	mov	r1, r3
 8004180:	4823      	ldr	r0, [pc, #140]	@ (8004210 <MX_RTC_Init+0x118>)
 8004182:	f011 f8af 	bl	80152e4 <HAL_RTC_SetTime>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800418c:	f7ff fe66 	bl	8003e5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8004190:	2302      	movs	r3, #2
 8004192:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JULY;
 8004196:	2307      	movs	r3, #7
 8004198:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 8;
 800419c:	2308      	movs	r3, #8
 800419e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 25;
 80041a2:	2319      	movs	r3, #25
 80041a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80041a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80041ac:	2200      	movs	r2, #0
 80041ae:	4619      	mov	r1, r3
 80041b0:	4817      	ldr	r0, [pc, #92]	@ (8004210 <MX_RTC_Init+0x118>)
 80041b2:	f011 f990 	bl	80154d6 <HAL_RTC_SetDate>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80041bc:	f7ff fe4e 	bl	8003e5c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80041dc:	2300      	movs	r3, #0
 80041de:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80041ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	2200      	movs	r2, #0
 80041f4:	4619      	mov	r1, r3
 80041f6:	4806      	ldr	r0, [pc, #24]	@ (8004210 <MX_RTC_Init+0x118>)
 80041f8:	f011 fa41 	bl	801567e <HAL_RTC_SetAlarm>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8004202:	f7ff fe2b 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004206:	bf00      	nop
 8004208:	3748      	adds	r7, #72	@ 0x48
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20001368 	.word	0x20001368
 8004214:	40002800 	.word	0x40002800

08004218 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b0a4      	sub	sp, #144	@ 0x90
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004220:	f107 0308 	add.w	r3, r7, #8
 8004224:	2288      	movs	r2, #136	@ 0x88
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f017 fa9c 	bl	801b766 <memset>
  if(rtcHandle->Instance==RTC)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a10      	ldr	r2, [pc, #64]	@ (8004274 <HAL_RTC_MspInit+0x5c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d118      	bne.n	800426a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004238:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800423c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800423e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004246:	f107 0308 	add.w	r3, r7, #8
 800424a:	4618      	mov	r0, r3
 800424c:	f010 fb06 	bl	801485c <HAL_RCCEx_PeriphCLKConfig>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004256:	f7ff fe01 	bl	8003e5c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800425a:	4b07      	ldr	r3, [pc, #28]	@ (8004278 <HAL_RTC_MspInit+0x60>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004260:	4a05      	ldr	r2, [pc, #20]	@ (8004278 <HAL_RTC_MspInit+0x60>)
 8004262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800426a:	bf00      	nop
 800426c:	3790      	adds	r7, #144	@ 0x90
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40002800 	.word	0x40002800
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004282:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <HAL_MspInit+0x4c>)
 8004284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004286:	4a10      	ldr	r2, [pc, #64]	@ (80042c8 <HAL_MspInit+0x4c>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6613      	str	r3, [r2, #96]	@ 0x60
 800428e:	4b0e      	ldr	r3, [pc, #56]	@ (80042c8 <HAL_MspInit+0x4c>)
 8004290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <HAL_MspInit+0x4c>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429e:	4a0a      	ldr	r2, [pc, #40]	@ (80042c8 <HAL_MspInit+0x4c>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a6:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <HAL_MspInit+0x4c>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80042b2:	2200      	movs	r2, #0
 80042b4:	210f      	movs	r1, #15
 80042b6:	f06f 0001 	mvn.w	r0, #1
 80042ba:	f00f f9cd 	bl	8013658 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000

080042cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08e      	sub	sp, #56	@ 0x38
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042da:	4b34      	ldr	r3, [pc, #208]	@ (80043ac <HAL_InitTick+0xe0>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	4a33      	ldr	r2, [pc, #204]	@ (80043ac <HAL_InitTick+0xe0>)
 80042e0:	f043 0310 	orr.w	r3, r3, #16
 80042e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e6:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <HAL_InitTick+0xe0>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042f2:	f107 0210 	add.w	r2, r7, #16
 80042f6:	f107 0314 	add.w	r3, r7, #20
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f010 fa1b 	bl	8014738 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800430c:	f010 f9e8 	bl	80146e0 <HAL_RCC_GetPCLK1Freq>
 8004310:	6378      	str	r0, [r7, #52]	@ 0x34
 8004312:	e004      	b.n	800431e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004314:	f010 f9e4 	bl	80146e0 <HAL_RCC_GetPCLK1Freq>
 8004318:	4603      	mov	r3, r0
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800431e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004320:	4a23      	ldr	r2, [pc, #140]	@ (80043b0 <HAL_InitTick+0xe4>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0c9b      	lsrs	r3, r3, #18
 8004328:	3b01      	subs	r3, #1
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800432c:	4b21      	ldr	r3, [pc, #132]	@ (80043b4 <HAL_InitTick+0xe8>)
 800432e:	4a22      	ldr	r2, [pc, #136]	@ (80043b8 <HAL_InitTick+0xec>)
 8004330:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004332:	4b20      	ldr	r3, [pc, #128]	@ (80043b4 <HAL_InitTick+0xe8>)
 8004334:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004338:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800433a:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <HAL_InitTick+0xe8>)
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004340:	4b1c      	ldr	r3, [pc, #112]	@ (80043b4 <HAL_InitTick+0xe8>)
 8004342:	2200      	movs	r2, #0
 8004344:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004346:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <HAL_InitTick+0xe8>)
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <HAL_InitTick+0xe8>)
 800434e:	2200      	movs	r2, #0
 8004350:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004352:	4818      	ldr	r0, [pc, #96]	@ (80043b4 <HAL_InitTick+0xe8>)
 8004354:	f011 fb90 	bl	8015a78 <HAL_TIM_Base_Init>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800435e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004362:	2b00      	cmp	r3, #0
 8004364:	d11b      	bne.n	800439e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004366:	4813      	ldr	r0, [pc, #76]	@ (80043b4 <HAL_InitTick+0xe8>)
 8004368:	f011 fbe8 	bl	8015b3c <HAL_TIM_Base_Start_IT>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004372:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004376:	2b00      	cmp	r3, #0
 8004378:	d111      	bne.n	800439e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800437a:	2036      	movs	r0, #54	@ 0x36
 800437c:	f00f f988 	bl	8013690 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	d808      	bhi.n	8004398 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004386:	2200      	movs	r2, #0
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	2036      	movs	r0, #54	@ 0x36
 800438c:	f00f f964 	bl	8013658 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_InitTick+0xf0>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e002      	b.n	800439e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800439e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3738      	adds	r7, #56	@ 0x38
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	431bde83 	.word	0x431bde83
 80043b4:	2000138c 	.word	0x2000138c
 80043b8:	40001000 	.word	0x40001000
 80043bc:	200002cc 	.word	0x200002cc

080043c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <NMI_Handler+0x4>

080043c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043cc:	bf00      	nop
 80043ce:	e7fd      	b.n	80043cc <HardFault_Handler+0x4>

080043d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <MemManage_Handler+0x4>

080043d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043dc:	bf00      	nop
 80043de:	e7fd      	b.n	80043dc <BusFault_Handler+0x4>

080043e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e4:	bf00      	nop
 80043e6:	e7fd      	b.n	80043e4 <UsageFault_Handler+0x4>

080043e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80043fc:	4802      	ldr	r0, [pc, #8]	@ (8004408 <USART1_IRQHandler+0x10>)
 80043fe:	f011 ff25 	bl	801624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200013e0 	.word	0x200013e0

0800440c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004410:	4802      	ldr	r0, [pc, #8]	@ (800441c <USART2_IRQHandler+0x10>)
 8004412:	f011 ff1b 	bl	801624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20001468 	.word	0x20001468

08004420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004424:	4802      	ldr	r0, [pc, #8]	@ (8004430 <TIM6_DAC_IRQHandler+0x10>)
 8004426:	f011 fbf9 	bl	8015c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2000138c 	.word	0x2000138c

08004434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return 1;
 8004438:	2301      	movs	r3, #1
}
 800443a:	4618      	mov	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_kill>:

int _kill(int pid, int sig)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800444e:	f018 fa2b 	bl	801c8a8 <__errno>
 8004452:	4603      	mov	r3, r0
 8004454:	2216      	movs	r2, #22
 8004456:	601a      	str	r2, [r3, #0]
  return -1;
 8004458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <_exit>:

void _exit (int status)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800446c:	f04f 31ff 	mov.w	r1, #4294967295
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ffe7 	bl	8004444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <_exit+0x12>

0800447a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e00a      	b.n	80044a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800448c:	f3af 8000 	nop.w
 8004490:	4601      	mov	r1, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	60ba      	str	r2, [r7, #8]
 8004498:	b2ca      	uxtb	r2, r1
 800449a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3301      	adds	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	dbf0      	blt.n	800448c <_read+0x12>
  }

  return len;
 80044aa:	687b      	ldr	r3, [r7, #4]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	e009      	b.n	80044da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	60ba      	str	r2, [r7, #8]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3301      	adds	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	429a      	cmp	r2, r3
 80044e0:	dbf1      	blt.n	80044c6 <_write+0x12>
  }
  return len;
 80044e2:	687b      	ldr	r3, [r7, #4]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <_close>:

int _close(int file)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004514:	605a      	str	r2, [r3, #4]
  return 0;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <_isatty>:

int _isatty(int file)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800452c:	2301      	movs	r3, #1
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800455c:	4a14      	ldr	r2, [pc, #80]	@ (80045b0 <_sbrk+0x5c>)
 800455e:	4b15      	ldr	r3, [pc, #84]	@ (80045b4 <_sbrk+0x60>)
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004568:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <_sbrk+0x64>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004570:	4b11      	ldr	r3, [pc, #68]	@ (80045b8 <_sbrk+0x64>)
 8004572:	4a12      	ldr	r2, [pc, #72]	@ (80045bc <_sbrk+0x68>)
 8004574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004576:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <_sbrk+0x64>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	429a      	cmp	r2, r3
 8004582:	d207      	bcs.n	8004594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004584:	f018 f990 	bl	801c8a8 <__errno>
 8004588:	4603      	mov	r3, r0
 800458a:	220c      	movs	r2, #12
 800458c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800458e:	f04f 33ff 	mov.w	r3, #4294967295
 8004592:	e009      	b.n	80045a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004594:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <_sbrk+0x64>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800459a:	4b07      	ldr	r3, [pc, #28]	@ (80045b8 <_sbrk+0x64>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	4a05      	ldr	r2, [pc, #20]	@ (80045b8 <_sbrk+0x64>)
 80045a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045a6:	68fb      	ldr	r3, [r7, #12]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20018000 	.word	0x20018000
 80045b4:	00000400 	.word	0x00000400
 80045b8:	200013dc 	.word	0x200013dc
 80045bc:	200065d8 	.word	0x200065d8

080045c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80045c4:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <SystemInit+0x20>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	4a05      	ldr	r2, [pc, #20]	@ (80045e0 <SystemInit+0x20>)
 80045cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045e8:	4b14      	ldr	r3, [pc, #80]	@ (800463c <MX_USART1_UART_Init+0x58>)
 80045ea:	4a15      	ldr	r2, [pc, #84]	@ (8004640 <MX_USART1_UART_Init+0x5c>)
 80045ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80045ee:	4b13      	ldr	r3, [pc, #76]	@ (800463c <MX_USART1_UART_Init+0x58>)
 80045f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80045f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045f6:	4b11      	ldr	r3, [pc, #68]	@ (800463c <MX_USART1_UART_Init+0x58>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045fc:	4b0f      	ldr	r3, [pc, #60]	@ (800463c <MX_USART1_UART_Init+0x58>)
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004602:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <MX_USART1_UART_Init+0x58>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8004608:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <MX_USART1_UART_Init+0x58>)
 800460a:	2204      	movs	r2, #4
 800460c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800460e:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <MX_USART1_UART_Init+0x58>)
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004614:	4b09      	ldr	r3, [pc, #36]	@ (800463c <MX_USART1_UART_Init+0x58>)
 8004616:	2200      	movs	r2, #0
 8004618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800461a:	4b08      	ldr	r3, [pc, #32]	@ (800463c <MX_USART1_UART_Init+0x58>)
 800461c:	2200      	movs	r2, #0
 800461e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <MX_USART1_UART_Init+0x58>)
 8004622:	2200      	movs	r2, #0
 8004624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004626:	4805      	ldr	r0, [pc, #20]	@ (800463c <MX_USART1_UART_Init+0x58>)
 8004628:	f011 fcec 	bl	8016004 <HAL_UART_Init>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004632:	f7ff fc13 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200013e0 	.word	0x200013e0
 8004640:	40013800 	.word	0x40013800

08004644 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004648:	4b14      	ldr	r3, [pc, #80]	@ (800469c <MX_USART2_UART_Init+0x58>)
 800464a:	4a15      	ldr	r2, [pc, #84]	@ (80046a0 <MX_USART2_UART_Init+0x5c>)
 800464c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800464e:	4b13      	ldr	r3, [pc, #76]	@ (800469c <MX_USART2_UART_Init+0x58>)
 8004650:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004656:	4b11      	ldr	r3, [pc, #68]	@ (800469c <MX_USART2_UART_Init+0x58>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <MX_USART2_UART_Init+0x58>)
 800465e:	2200      	movs	r2, #0
 8004660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004662:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <MX_USART2_UART_Init+0x58>)
 8004664:	2200      	movs	r2, #0
 8004666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <MX_USART2_UART_Init+0x58>)
 800466a:	220c      	movs	r2, #12
 800466c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <MX_USART2_UART_Init+0x58>)
 8004670:	2200      	movs	r2, #0
 8004672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <MX_USART2_UART_Init+0x58>)
 8004676:	2200      	movs	r2, #0
 8004678:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800467a:	4b08      	ldr	r3, [pc, #32]	@ (800469c <MX_USART2_UART_Init+0x58>)
 800467c:	2200      	movs	r2, #0
 800467e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <MX_USART2_UART_Init+0x58>)
 8004682:	2200      	movs	r2, #0
 8004684:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004686:	4805      	ldr	r0, [pc, #20]	@ (800469c <MX_USART2_UART_Init+0x58>)
 8004688:	f011 fcbc 	bl	8016004 <HAL_UART_Init>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004692:	f7ff fbe3 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20001468 	.word	0x20001468
 80046a0:	40004400 	.word	0x40004400

080046a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b0ae      	sub	sp, #184	@ 0xb8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046bc:	f107 031c 	add.w	r3, r7, #28
 80046c0:	2288      	movs	r2, #136	@ 0x88
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f017 f84e 	bl	801b766 <memset>
  if(uartHandle->Instance==USART1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4b      	ldr	r2, [pc, #300]	@ (80047fc <HAL_UART_MspInit+0x158>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d145      	bne.n	8004760 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80046d4:	2301      	movs	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80046d8:	2300      	movs	r3, #0
 80046da:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046dc:	f107 031c 	add.w	r3, r7, #28
 80046e0:	4618      	mov	r0, r3
 80046e2:	f010 f8bb 	bl	801485c <HAL_RCCEx_PeriphCLKConfig>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80046ec:	f7ff fbb6 	bl	8003e5c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046f0:	4b43      	ldr	r3, [pc, #268]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 80046f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f4:	4a42      	ldr	r2, [pc, #264]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 80046f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80046fc:	4b40      	ldr	r3, [pc, #256]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 80046fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004708:	4b3d      	ldr	r3, [pc, #244]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 800470a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800470c:	4a3c      	ldr	r2, [pc, #240]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004714:	4b3a      	ldr	r3, [pc, #232]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 8004716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004720:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004724:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004728:	2302      	movs	r3, #2
 800472a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004734:	2303      	movs	r3, #3
 8004736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800473a:	2307      	movs	r3, #7
 800473c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004740:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004744:	4619      	mov	r1, r3
 8004746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800474a:	f00f f82f 	bl	80137ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800474e:	2200      	movs	r2, #0
 8004750:	2105      	movs	r1, #5
 8004752:	2025      	movs	r0, #37	@ 0x25
 8004754:	f00e ff80 	bl	8013658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004758:	2025      	movs	r0, #37	@ 0x25
 800475a:	f00e ff99 	bl	8013690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800475e:	e048      	b.n	80047f2 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a27      	ldr	r2, [pc, #156]	@ (8004804 <HAL_UART_MspInit+0x160>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d143      	bne.n	80047f2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800476a:	2302      	movs	r3, #2
 800476c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800476e:	2300      	movs	r3, #0
 8004770:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004772:	f107 031c 	add.w	r3, r7, #28
 8004776:	4618      	mov	r0, r3
 8004778:	f010 f870 	bl	801485c <HAL_RCCEx_PeriphCLKConfig>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8004782:	f7ff fb6b 	bl	8003e5c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004786:	4b1e      	ldr	r3, [pc, #120]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478a:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 800478c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004790:	6593      	str	r3, [r2, #88]	@ 0x58
 8004792:	4b1b      	ldr	r3, [pc, #108]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800479e:	4b18      	ldr	r3, [pc, #96]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 80047a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a2:	4a17      	ldr	r2, [pc, #92]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047aa:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <HAL_UART_MspInit+0x15c>)
 80047ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80047b6:	230c      	movs	r3, #12
 80047b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c8:	2303      	movs	r3, #3
 80047ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047ce:	2307      	movs	r3, #7
 80047d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80047d8:	4619      	mov	r1, r3
 80047da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047de:	f00e ffe5 	bl	80137ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80047e2:	2200      	movs	r2, #0
 80047e4:	2105      	movs	r1, #5
 80047e6:	2026      	movs	r0, #38	@ 0x26
 80047e8:	f00e ff36 	bl	8013658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047ec:	2026      	movs	r0, #38	@ 0x26
 80047ee:	f00e ff4f 	bl	8013690 <HAL_NVIC_EnableIRQ>
}
 80047f2:	bf00      	nop
 80047f4:	37b8      	adds	r7, #184	@ 0xb8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40013800 	.word	0x40013800
 8004800:	40021000 	.word	0x40021000
 8004804:	40004400 	.word	0x40004400

08004808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004840 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800480c:	f7ff fed8 	bl	80045c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004810:	480c      	ldr	r0, [pc, #48]	@ (8004844 <LoopForever+0x6>)
  ldr r1, =_edata
 8004812:	490d      	ldr	r1, [pc, #52]	@ (8004848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004814:	4a0d      	ldr	r2, [pc, #52]	@ (800484c <LoopForever+0xe>)
  movs r3, #0
 8004816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004818:	e002      	b.n	8004820 <LoopCopyDataInit>

0800481a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800481a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800481c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800481e:	3304      	adds	r3, #4

08004820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004824:	d3f9      	bcc.n	800481a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004826:	4a0a      	ldr	r2, [pc, #40]	@ (8004850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004828:	4c0a      	ldr	r4, [pc, #40]	@ (8004854 <LoopForever+0x16>)
  movs r3, #0
 800482a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800482c:	e001      	b.n	8004832 <LoopFillZerobss>

0800482e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800482e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004830:	3204      	adds	r2, #4

08004832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004834:	d3fb      	bcc.n	800482e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004836:	f018 f83d 	bl	801c8b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800483a:	f7ff fa8f 	bl	8003d5c <main>

0800483e <LoopForever>:

LoopForever:
    b LoopForever
 800483e:	e7fe      	b.n	800483e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004840:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004848:	20000500 	.word	0x20000500
  ldr r2, =_sidata
 800484c:	08025450 	.word	0x08025450
  ldr r2, =_sbss
 8004850:	20000500 	.word	0x20000500
  ldr r4, =_ebss
 8004854:	200065d8 	.word	0x200065d8

08004858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004858:	e7fe      	b.n	8004858 <ADC1_2_IRQHandler>

0800485a <mktime_utc>:
 *
 * \param timeinfo_utc Broken down time, assumed to be in UTC
 * \return Time in UTC
 **/
time_t mktime_utc(const struct tm* timeinfo_utc)
{
 800485a:	b5b0      	push	{r4, r5, r7, lr}
 800485c:	b0a6      	sub	sp, #152	@ 0x98
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
	time_t curr_time = time(NULL);
 8004862:	2000      	movs	r0, #0
 8004864:	f017 fc52 	bl	801c10c <time>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	int timezone_diff = 0; //deviation of the current timezone from UTC in seconds
 8004870:	2300      	movs	r3, #0
 8004872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	//get UTC time, interpret resulting tm as a localtime
	struct tm timeinfo_gmt;
	gmtime_r(&curr_time, &timeinfo_gmt);
 8004876:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800487a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800487e:	4611      	mov	r1, r2
 8004880:	4618      	mov	r0, r3
 8004882:	f017 f821 	bl	801b8c8 <gmtime_r>
	time_t time_gmt = mktime(&timeinfo_gmt);
 8004886:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800488a:	4618      	mov	r0, r3
 800488c:	f017 fa86 	bl	801bd9c <mktime>
 8004890:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88

	//get localtime, interpret resulting tm as localtime
	struct tm timeinfo_local;
	localtime_r(&curr_time, &timeinfo_local);
 8004894:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8004898:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f017 f8b8 	bl	801ba14 <localtime_r>
	time_t time_local = mktime(&timeinfo_local);
 80048a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80048a8:	4618      	mov	r0, r3
 80048aa:	f017 fa77 	bl	801bd9c <mktime>
 80048ae:	e9c7 0120 	strd	r0, r1, [r7, #128]	@ 0x80

	//find the time difference between the two interpretations
	timezone_diff += difftime(time_local, time_gmt);
 80048b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80048b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ba:	f016 ffdd 	bl	801b878 <difftime>
 80048be:	ec55 4b10 	vmov	r4, r5, d0
 80048c2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80048c6:	f7fb fe3d 	bl	8000544 <__aeabi_i2d>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4620      	mov	r0, r4
 80048d0:	4629      	mov	r1, r5
 80048d2:	f7fb fceb 	bl	80002ac <__adddf3>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	f7fc f94b 	bl	8000b78 <__aeabi_d2iz>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	//hack for preventing mktime from assuming localtime: add timezone difference to the input struct.
	struct tm ret_timeinfo;
	ret_timeinfo.tm_sec = timeinfo_utc->tm_sec + timezone_diff;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048f0:	4413      	add	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
	ret_timeinfo.tm_min = timeinfo_utc->tm_min;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]
	ret_timeinfo.tm_hour = timeinfo_utc->tm_hour;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	617b      	str	r3, [r7, #20]
	ret_timeinfo.tm_mday = timeinfo_utc->tm_mday;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	61bb      	str	r3, [r7, #24]
	ret_timeinfo.tm_mon = timeinfo_utc->tm_mon;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	61fb      	str	r3, [r7, #28]
	ret_timeinfo.tm_year = timeinfo_utc->tm_year;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	623b      	str	r3, [r7, #32]
	ret_timeinfo.tm_isdst = timeinfo_utc->tm_isdst;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return mktime(&ret_timeinfo);
 8004918:	f107 030c 	add.w	r3, r7, #12
 800491c:	4618      	mov	r0, r3
 800491e:	f017 fa3d 	bl	801bd9c <mktime>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
}
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	3798      	adds	r7, #152	@ 0x98
 800492c:	46bd      	mov	sp, r7
 800492e:	bdb0      	pop	{r4, r5, r7, pc}

08004930 <get_julian_start_day>:
 * Helper function for getting the Julian day start date (1979-12-31 00:00 UTC) as time_t.
 *
 * \return Internally defined Julian start date (fixed)
 **/
time_t get_julian_start_day()
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	@ 0x28
 8004934:	af00      	add	r7, sp, #0
	struct tm start_time;
	start_time.tm_sec = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
	start_time.tm_min = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
	start_time.tm_hour = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
	start_time.tm_mday = 31;
 8004942:	231f      	movs	r3, #31
 8004944:	613b      	str	r3, [r7, #16]
	start_time.tm_mon = 11;
 8004946:	230b      	movs	r3, #11
 8004948:	617b      	str	r3, [r7, #20]
	start_time.tm_year = 1979-1900;
 800494a:	234f      	movs	r3, #79	@ 0x4f
 800494c:	61bb      	str	r3, [r7, #24]
	start_time.tm_isdst = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24
	return mktime_utc(&start_time);
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff80 	bl	800485a <mktime_utc>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
}
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	3728      	adds	r7, #40	@ 0x28
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <predict_to_julian>:

predict_julian_date_t predict_to_julian(time_t input_time)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	e9c7 0100 	strd	r0, r1, [r7]
	//get number of seconds since 1979-12-31 00:00:00 UTC, convert to days
	double seconds = difftime(input_time, get_julian_start_day());
 8004972:	f7ff ffdd 	bl	8004930 <get_julian_start_day>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800497e:	f016 ff7b 	bl	801b878 <difftime>
 8004982:	ed87 0b02 	vstr	d0, [r7, #8]
	return seconds/SECONDS_PER_DAY;
 8004986:	a30a      	add	r3, pc, #40	@ (adr r3, 80049b0 <predict_to_julian+0x48>)
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004990:	f7fb ff6c 	bl	800086c <__aeabi_ddiv>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	ec43 2b17 	vmov	d7, r2, r3
}
 800499c:	eeb0 0a47 	vmov.f32	s0, s14
 80049a0:	eef0 0a67 	vmov.f32	s1, s15
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	f3af 8000 	nop.w
 80049b0:	00000000 	.word	0x00000000
 80049b4:	40f51800 	.word	0x40f51800

080049b8 <predict_from_julian>:

time_t predict_from_julian(predict_julian_date_t date)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b090      	sub	sp, #64	@ 0x40
 80049bc:	af00      	add	r7, sp, #0
 80049be:	ed87 0b00 	vstr	d0, [r7]
	double seconds_since = date*SECONDS_PER_DAY;
 80049c2:	a31d      	add	r3, pc, #116	@ (adr r3, 8004a38 <predict_from_julian+0x80>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049cc:	f7fb fe24 	bl	8000618 <__aeabi_dmul>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	time_t ret_time = get_julian_start_day();
 80049d8:	f7ff ffaa 	bl	8004930 <get_julian_start_day>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	
	//add number of seconds since julian start day to the julian start day, get current time_t
	struct tm timeinfo;
	gmtime_r(&ret_time, &timeinfo); 
 80049e4:	f107 020c 	add.w	r2, r7, #12
 80049e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f016 ff6a 	bl	801b8c8 <gmtime_r>
	timeinfo.tm_sec += seconds_since;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fb fda4 	bl	8000544 <__aeabi_i2d>
 80049fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a00:	f7fb fc54 	bl	80002ac <__adddf3>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7fc f8b4 	bl	8000b78 <__aeabi_d2iz>
 8004a10:	4603      	mov	r3, r0
 8004a12:	60fb      	str	r3, [r7, #12]
	ret_time = mktime_utc(&timeinfo);
 8004a14:	f107 030c 	add.w	r3, r7, #12
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff1e 	bl	800485a <mktime_utc>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	return ret_time;
 8004a26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	3740      	adds	r7, #64	@ 0x40
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	f3af 8000 	nop.w
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	40f51800 	.word	0x40f51800

08004a40 <predict_create_observer>:
#include "sun.h"

void observer_calculate(const predict_observer_t *observer, double time, const double pos[3], const double vel[3], struct predict_observation *result);

predict_observer_t *predict_create_observer(const char *name, double lat, double lon, double alt)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	@ 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	61f8      	str	r0, [r7, #28]
 8004a48:	ed87 0b04 	vstr	d0, [r7, #16]
 8004a4c:	ed87 1b02 	vstr	d1, [r7, #8]
 8004a50:	ed87 2b00 	vstr	d2, [r7]
	// Allocate memory
	predict_observer_t *obs = (predict_observer_t*)malloc(sizeof(predict_observer_t));
 8004a54:	2098      	movs	r0, #152	@ 0x98
 8004a56:	f014 ff3d 	bl	80198d4 <malloc>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (obs == NULL) return NULL;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <predict_create_observer+0x28>
 8004a64:	2300      	movs	r3, #0
 8004a66:	e019      	b.n	8004a9c <predict_create_observer+0x5c>

	strncpy(obs->name, name, 128);
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	2280      	movs	r2, #128	@ 0x80
 8004a6c:	69f9      	ldr	r1, [r7, #28]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f016 fe93 	bl	801b79a <strncpy>
	obs->name[127] = '\0';
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	obs->latitude = lat;
 8004a7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a82:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	obs->longitude = lon;
 8004a86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a8c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	obs->altitude = alt;
 8004a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a96:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	return obs;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3728      	adds	r7, #40	@ 0x28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	0000      	movs	r0, r0
	...

08004aa8 <predict_observe_orbit>:
 *
 * Calculated range, azimuth, elevation and relative velocity from the
 * given observer position.
 **/
void predict_observe_orbit(const predict_observer_t *observer, const struct predict_position *orbit, struct predict_observation *obs)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b09c      	sub	sp, #112	@ 0x70
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
	if (obs == NULL) return;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d071      	beq.n	8004b9e <predict_observe_orbit+0xf6>
	
	double julTime = orbit->time + JULIAN_TIME_DIFF;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ac0:	a33d      	add	r3, pc, #244	@ (adr r3, 8004bb8 <predict_observe_orbit+0x110>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb fbf1 	bl	80002ac <__adddf3>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	observer_calculate(observer, julTime, orbit->position, orbit->velocity, obs);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f103 0110 	add.w	r1, r3, #16
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f86b 	bl	8004bc0 <observer_calculate>

	// Calculate visibility status of the orbit: Orbit is visible if sun elevation is low enough and the orbit is above the horizon, but still in sunlight.
	obs->visible = false;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	struct predict_observation sun_obs;
	predict_observe_sun(observer, orbit->time, &sun_obs);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	ed93 7b00 	vldr	d7, [r3]
 8004af8:	f107 0310 	add.w	r3, r7, #16
 8004afc:	4619      	mov	r1, r3
 8004afe:	eeb0 0a47 	vmov.f32	s0, s14
 8004b02:	eef0 0a67 	vmov.f32	s1, s15
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f00d faee 	bl	80120e8 <predict_observe_sun>
	if (!(orbit->eclipsed) && (sun_obs.elevation*180.0/M_PI < NAUTICAL_TWILIGHT_SUN_ELEVATION) && (obs->elevation*180.0/M_PI > 0)) {
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d13d      	bne.n	8004b90 <predict_observe_orbit+0xe8>
 8004b14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	4b24      	ldr	r3, [pc, #144]	@ (8004bb0 <predict_observe_orbit+0x108>)
 8004b1e:	f7fb fd7b 	bl	8000618 <__aeabi_dmul>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	a31f      	add	r3, pc, #124	@ (adr r3, 8004ba8 <predict_observe_orbit+0x100>)
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f7fb fe9c 	bl	800086c <__aeabi_ddiv>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb4 <predict_observe_orbit+0x10c>)
 8004b42:	f7fb ffdb 	bl	8000afc <__aeabi_dcmplt>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d021      	beq.n	8004b90 <predict_observe_orbit+0xe8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	4b16      	ldr	r3, [pc, #88]	@ (8004bb0 <predict_observe_orbit+0x108>)
 8004b58:	f7fb fd5e 	bl	8000618 <__aeabi_dmul>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	a310      	add	r3, pc, #64	@ (adr r3, 8004ba8 <predict_observe_orbit+0x100>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f7fb fe7f 	bl	800086c <__aeabi_ddiv>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	f7fb ffdb 	bl	8000b38 <__aeabi_dcmpgt>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <predict_observe_orbit+0xe8>
		obs->visible = true;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}
	obs->time = orbit->time;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	e9c1 2300 	strd	r2, r3, [r1]
 8004b9c:	e000      	b.n	8004ba0 <predict_observe_orbit+0xf8>
	if (obs == NULL) return;
 8004b9e:	bf00      	nop
}
 8004ba0:	3770      	adds	r7, #112	@ 0x70
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	54442d18 	.word	0x54442d18
 8004bac:	400921fb 	.word	0x400921fb
 8004bb0:	40668000 	.word	0x40668000
 8004bb4:	c0280000 	.word	0xc0280000
 8004bb8:	40000000 	.word	0x40000000
 8004bbc:	4142a5e7 	.word	0x4142a5e7

08004bc0 <observer_calculate>:

void observer_calculate(const predict_observer_t *observer, double time, const double pos[3], const double vel[3], struct predict_observation *result)
{
 8004bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc4:	b0d6      	sub	sp, #344	@ 0x158
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 8004bcc:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8004bd0:	6020      	str	r0, [r4, #0]
 8004bd2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004bd6:	ed00 0b02 	vstr	d0, [r0, #-8]
 8004bda:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8004bde:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8004be2:	6001      	str	r1, [r0, #0]
 8004be4:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004be8:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8004bec:	600a      	str	r2, [r1, #0]
 8004bee:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8004bf2:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8004bf6:	6013      	str	r3, [r2, #0]
	double obs_vel[3];
	double range[3];
	double rgvel[3];
	
	geodetic_t geodetic;
	geodetic.lat = observer->latitude;
 8004bf8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004bfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8004c06:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004c0a:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8004c0e:	e9c1 2300 	strd	r2, r3, [r1]
	geodetic.lon = observer->longitude;
 8004c12:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004c16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8004c20:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004c24:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8004c28:	e9c1 2302 	strd	r2, r3, [r1, #8]
	geodetic.alt = observer->altitude / 1000.0;
 8004c2c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004c30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	4bd0      	ldr	r3, [pc, #832]	@ (8004f80 <observer_calculate+0x3c0>)
 8004c40:	f7fb fe14 	bl	800086c <__aeabi_ddiv>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004c4c:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8004c50:	e9c1 2304 	strd	r2, r3, [r1, #16]
	geodetic.theta = 0.0;
 8004c54:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004c58:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Calculate_User_PosVel(time, &geodetic, obs_pos, obs_vel);
 8004c68:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8004c6c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8004c70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c74:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004c78:	4604      	mov	r4, r0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	ed14 0b02 	vldr	d0, [r4, #-8]
 8004c80:	f00d fe22 	bl	80128c8 <Calculate_User_PosVel>

	vec3_sub(pos, obs_pos, range);
 8004c84:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8004c88:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8004c8c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004c90:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	f00d fbb4 	bl	8012402 <vec3_sub>
	vec3_sub(vel, obs_vel, rgvel);
 8004c9a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004c9e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8004ca2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004ca6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	f00d fba9 	bl	8012402 <vec3_sub>
	
	double range_length = vec3_length(range);
 8004cb0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f00d fae6 	bl	8012286 <vec3_length>
 8004cba:	ed87 0b52 	vstr	d0, [r7, #328]	@ 0x148
	double range_rate_length = vec3_dot(range, rgvel) / range_length;
 8004cbe:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004cc2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f00d fb25 	bl	8012318 <vec3_dot>
 8004cce:	ec51 0b10 	vmov	r0, r1, d0
 8004cd2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8004cd6:	f7fb fdc9 	bl	800086c <__aeabi_ddiv>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

	double theta_dot = 2*M_PI*EARTH_ROTATIONS_PER_SIDERIAL_DAY/SECONDS_PER_DAY;
 8004ce2:	a3a5      	add	r3, pc, #660	@ (adr r3, 8004f78 <observer_calculate+0x3b8>)
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	double sin_lat = sin(geodetic.lat);
 8004cec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004cf0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004cf4:	ed93 7b00 	vldr	d7, [r3]
 8004cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8004cfc:	eef0 0a67 	vmov.f32	s1, s15
 8004d00:	f01b fa9e 	bl	8020240 <sin>
 8004d04:	ed87 0b4c 	vstr	d0, [r7, #304]	@ 0x130
	double cos_lat = cos(geodetic.lat);
 8004d08:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004d0c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004d10:	ed93 7b00 	vldr	d7, [r3]
 8004d14:	eeb0 0a47 	vmov.f32	s0, s14
 8004d18:	eef0 0a67 	vmov.f32	s1, s15
 8004d1c:	f01b fa34 	bl	8020188 <cos>
 8004d20:	ed87 0b4a 	vstr	d0, [r7, #296]	@ 0x128
	double sin_theta = sin(geodetic.theta);
 8004d24:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004d28:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004d2c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004d30:	eeb0 0a47 	vmov.f32	s0, s14
 8004d34:	eef0 0a67 	vmov.f32	s1, s15
 8004d38:	f01b fa82 	bl	8020240 <sin>
 8004d3c:	ed87 0b48 	vstr	d0, [r7, #288]	@ 0x120
	double cos_theta = cos(geodetic.theta);
 8004d40:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004d44:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004d48:	ed93 7b06 	vldr	d7, [r3, #24]
 8004d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8004d50:	eef0 0a67 	vmov.f32	s1, s15
 8004d54:	f01b fa18 	bl	8020188 <cos>
 8004d58:	ed87 0b46 	vstr	d0, [r7, #280]	@ 0x118
	
	double top_s = sin_lat*cos_theta*range[0] + sin_lat*sin_theta*range[1] - cos_lat*range[2];
 8004d5c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004d60:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8004d64:	f7fb fc58 	bl	8000618 <__aeabi_dmul>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004d74:	f7fb fc50 	bl	8000618 <__aeabi_dmul>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	461d      	mov	r5, r3
 8004d80:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004d84:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8004d88:	f7fb fc46 	bl	8000618 <__aeabi_dmul>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d98:	f7fb fc3e 	bl	8000618 <__aeabi_dmul>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4620      	mov	r0, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	f7fb fa82 	bl	80002ac <__adddf3>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4614      	mov	r4, r2
 8004dae:	461d      	mov	r5, r3
 8004db0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004db4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8004db8:	f7fb fc2e 	bl	8000618 <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	f7fb fa70 	bl	80002a8 <__aeabi_dsub>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	double top_e = -sin_theta*range[0] + cos_theta*range[1];
 8004dd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004dda:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004de4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004de8:	f7fb fc16 	bl	8000618 <__aeabi_dmul>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4614      	mov	r4, r2
 8004df2:	461d      	mov	r5, r3
 8004df4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004df8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004dfc:	f7fb fc0c 	bl	8000618 <__aeabi_dmul>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4620      	mov	r0, r4
 8004e06:	4629      	mov	r1, r5
 8004e08:	f7fb fa50 	bl	80002ac <__adddf3>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	double top_z = cos_lat*cos_theta*range[0] + cos_lat*sin_theta*range[1] + sin_lat*range[2];
 8004e14:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004e18:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8004e1c:	f7fb fbfc 	bl	8000618 <__aeabi_dmul>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004e2c:	f7fb fbf4 	bl	8000618 <__aeabi_dmul>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	461d      	mov	r5, r3
 8004e38:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004e3c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8004e40:	f7fb fbea 	bl	8000618 <__aeabi_dmul>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004e50:	f7fb fbe2 	bl	8000618 <__aeabi_dmul>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4620      	mov	r0, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f7fb fa26 	bl	80002ac <__adddf3>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4614      	mov	r4, r2
 8004e66:	461d      	mov	r5, r3
 8004e68:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004e6c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004e70:	f7fb fbd2 	bl	8000618 <__aeabi_dmul>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4620      	mov	r0, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	f7fb fa16 	bl	80002ac <__adddf3>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100


	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8004e88:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e94:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004e98:	f7fb fbbe 	bl	8000618 <__aeabi_dmul>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	461d      	mov	r5, r3
 8004ea4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ea8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004eac:	f7fb fbb4 	bl	8000618 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8004ebc:	f7fb fbac 	bl	8000618 <__aeabi_dmul>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	f7fb f9ee 	bl	80002a8 <__aeabi_dsub>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004ed8:	f7fb fb9e 	bl	8000618 <__aeabi_dmul>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4690      	mov	r8, r2
 8004ee2:	4699      	mov	r9, r3
						sin_lat*(sin_theta*rgvel[1] + cos_theta*range[1]*theta_dot) -
 8004ee4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004ef0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004ef4:	f7fb fb90 	bl	8000618 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4614      	mov	r4, r2
 8004efe:	461d      	mov	r5, r3
 8004f00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004f04:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004f08:	f7fb fb86 	bl	8000618 <__aeabi_dmul>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8004f18:	f7fb fb7e 	bl	8000618 <__aeabi_dmul>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4620      	mov	r0, r4
 8004f22:	4629      	mov	r1, r5
 8004f24:	f7fb f9c2 	bl	80002ac <__adddf3>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004f34:	f7fb fb70 	bl	8000618 <__aeabi_dmul>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	4649      	mov	r1, r9
 8004f40:	f7fb f9b4 	bl	80002ac <__adddf3>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4614      	mov	r4, r2
 8004f4a:	461d      	mov	r5, r3
						cos_lat*rgvel[2];
 8004f4c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f54:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004f58:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8004f5c:	f7fb fb5c 	bl	8000618 <__aeabi_dmul>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
	double top_s_dot = sin_lat*(cos_theta*rgvel[0] - sin_theta*range[0]*theta_dot) + 
 8004f64:	4620      	mov	r0, r4
 8004f66:	4629      	mov	r1, r5
 8004f68:	f7fb f99e 	bl	80002a8 <__aeabi_dsub>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	e008      	b.n	8004f84 <observer_calculate+0x3c4>
 8004f72:	bf00      	nop
 8004f74:	f3af 8000 	nop.w
 8004f78:	f6f4de84 	.word	0xf6f4de84
 8004f7c:	3f131da7 	.word	0x3f131da7
 8004f80:	408f4000 	.word	0x408f4000
 8004f84:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
	double top_e_dot = - (sin_theta*rgvel[0] + cos_theta*range[0]*theta_dot) + 
						(cos_theta*rgvel[1] - sin_theta*range[1]*theta_dot);
 8004f88:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f90:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004f94:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004f98:	f7fb fb3e 	bl	8000618 <__aeabi_dmul>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004fa8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004fac:	f7fb fb34 	bl	8000618 <__aeabi_dmul>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8004fbc:	f7fb fb2c 	bl	8000618 <__aeabi_dmul>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	f7fb f96e 	bl	80002a8 <__aeabi_dsub>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4690      	mov	r8, r2
 8004fd2:	4699      	mov	r9, r3
	double top_e_dot = - (sin_theta*rgvel[0] + cos_theta*range[0]*theta_dot) + 
 8004fd4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fe0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004fe4:	f7fb fb18 	bl	8000618 <__aeabi_dmul>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	461d      	mov	r5, r3
 8004ff0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ff4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004ff8:	f7fb fb0e 	bl	8000618 <__aeabi_dmul>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8005008:	f7fb fb06 	bl	8000618 <__aeabi_dmul>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb f94a 	bl	80002ac <__adddf3>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4640      	mov	r0, r8
 800501e:	4649      	mov	r1, r9
 8005020:	f7fb f942 	bl	80002a8 <__aeabi_dsub>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 800502c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005034:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005038:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800503c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8005040:	f7fb faea 	bl	8000618 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4620      	mov	r0, r4
 800504a:	4629      	mov	r1, r5
 800504c:	f7fb f92e 	bl	80002ac <__adddf3>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800505c:	f7fb fadc 	bl	8000618 <__aeabi_dmul>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4690      	mov	r8, r2
 8005066:	4699      	mov	r9, r3
								sin_theta*(rgvel[1] - range[0]*theta_dot) ) +
 8005068:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800506c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005070:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005074:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005078:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800507c:	f7fb facc 	bl	8000618 <__aeabi_dmul>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4620      	mov	r0, r4
 8005086:	4629      	mov	r1, r5
 8005088:	f7fb f90e 	bl	80002a8 <__aeabi_dsub>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005098:	f7fb fabe 	bl	8000618 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 80050a0:	4640      	mov	r0, r8
 80050a2:	4649      	mov	r1, r9
 80050a4:	f7fb f902 	bl	80002ac <__adddf3>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80050b4:	f7fb fab0 	bl	8000618 <__aeabi_dmul>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4614      	mov	r4, r2
 80050be:	461d      	mov	r5, r3
								sin_lat*rgvel[2];
 80050c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80050c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80050cc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80050d0:	f7fb faa2 	bl	8000618 <__aeabi_dmul>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
	double top_z_dot = cos_lat * ( cos_theta*(rgvel[0] + range[1]*theta_dot) + 
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f7fb f8e6 	bl	80002ac <__adddf3>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	
	// Azimut
	double y = -top_e / top_s;
 80050e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050f2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80050fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005100:	f7fb fbb4 	bl	800086c <__aeabi_ddiv>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	double az = atan(-top_e / top_s);
 800510c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005116:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8005120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005124:	f7fb fba2 	bl	800086c <__aeabi_ddiv>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	ec43 2b17 	vmov	d7, r2, r3
 8005130:	eeb0 0a47 	vmov.f32	s0, s14
 8005134:	eef0 0a67 	vmov.f32	s1, s15
 8005138:	f01a fe8e 	bl	801fe58 <atan>
 800513c:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150

	if (top_s > 0.0) az = az + M_PI;
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800514c:	f7fb fcf4 	bl	8000b38 <__aeabi_dcmpgt>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <observer_calculate+0x5ac>
 8005156:	a38d      	add	r3, pc, #564	@ (adr r3, 800538c <observer_calculate+0x7cc>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8005160:	f7fb f8a4 	bl	80002ac <__adddf3>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	if (az < 0.0) az = az + 2*M_PI;
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8005178:	f7fb fcc0 	bl	8000afc <__aeabi_dcmplt>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <observer_calculate+0x5d8>
 8005182:	a384      	add	r3, pc, #528	@ (adr r3, 8005394 <observer_calculate+0x7d4>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800518c:	f7fb f88e 	bl	80002ac <__adddf3>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150

	// Azimut rate
	double y_dot = - (top_e_dot*top_s - top_s_dot*top_e) / (top_s*top_s);
 8005198:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800519c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80051a0:	f7fb fa3a 	bl	8000618 <__aeabi_dmul>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4614      	mov	r4, r2
 80051aa:	461d      	mov	r5, r3
 80051ac:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80051b0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80051b4:	f7fb fa30 	bl	8000618 <__aeabi_dmul>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4620      	mov	r0, r4
 80051be:	4629      	mov	r1, r5
 80051c0:	f7fb f872 	bl	80002a8 <__aeabi_dsub>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4692      	mov	sl, r2
 80051ca:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80051ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80051d2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80051d6:	f7fb fa1f 	bl	8000618 <__aeabi_dmul>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4650      	mov	r0, sl
 80051e0:	4659      	mov	r1, fp
 80051e2:	f7fb fb43 	bl	800086c <__aeabi_ddiv>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	double az_dot = y_dot / (1 + y*y);
 80051ee:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 80051f2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051f6:	f7fb fa0f 	bl	8000618 <__aeabi_dmul>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	4b60      	ldr	r3, [pc, #384]	@ (8005388 <observer_calculate+0x7c8>)
 8005208:	f7fb f850 	bl	80002ac <__adddf3>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8005214:	f7fb fb2a 	bl	800086c <__aeabi_ddiv>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

	// Elevation
	double x = top_z / range_length;
 8005220:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8005224:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8005228:	f7fb fb20 	bl	800086c <__aeabi_ddiv>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	double el = asin_(x);
 8005234:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 8005238:	f00e f8d6 	bl	80133e8 <asin_>
 800523c:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0

	// Elevation rate
	double x_dot = (top_z_dot*range_length - range_rate_length*top_z) / (range_length * range_length);
 8005240:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8005244:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8005248:	f7fb f9e6 	bl	8000618 <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8005258:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800525c:	f7fb f9dc 	bl	8000618 <__aeabi_dmul>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4620      	mov	r0, r4
 8005266:	4629      	mov	r1, r5
 8005268:	f7fb f81e 	bl	80002a8 <__aeabi_dsub>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4614      	mov	r4, r2
 8005272:	461d      	mov	r5, r3
 8005274:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8005278:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800527c:	f7fb f9cc 	bl	8000618 <__aeabi_dmul>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4620      	mov	r0, r4
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb faf0 	bl	800086c <__aeabi_ddiv>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	double el_dot = x_dot / sqrt( 1 - x*x );
 8005294:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8005298:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800529c:	f7fb f9bc 	bl	8000618 <__aeabi_dmul>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	4937      	ldr	r1, [pc, #220]	@ (8005388 <observer_calculate+0x7c8>)
 80052aa:	f7fa fffd 	bl	80002a8 <__aeabi_dsub>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	ec43 2b17 	vmov	d7, r2, r3
 80052b6:	eeb0 0a47 	vmov.f32	s0, s14
 80052ba:	eef0 0a67 	vmov.f32	s1, s15
 80052be:	f01a fd9d 	bl	801fdfc <sqrt>
 80052c2:	ec53 2b10 	vmov	r2, r3, d0
 80052c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80052ca:	f7fb facf 	bl	800086c <__aeabi_ddiv>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	
	result->azimuth = az;
 80052d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80052da:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80052e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	result->azimuth_rate = az_dot;
 80052e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80052ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80052f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	result->elevation = el;
 80052fa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80052fe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005302:	6819      	ldr	r1, [r3, #0]
 8005304:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005308:	e9c1 2306 	strd	r2, r3, [r1, #24]
	result->elevation_rate = el_dot;
 800530c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005310:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005314:	6819      	ldr	r1, [r3, #0]
 8005316:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800531a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	result->range = range_length;
 800531e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005322:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005326:	6819      	ldr	r1, [r3, #0]
 8005328:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800532c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	result->range_rate = range_rate_length; 
 8005330:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8005334:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800533e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	result->range_x = range[0];
 8005342:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005346:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800534a:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 800534e:	6809      	ldr	r1, [r1, #0]
 8005350:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	result->range_y = range[1];
 8005354:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005358:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800535c:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005360:	6809      	ldr	r1, [r1, #0]
 8005362:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	result->range_z = range[2];
 8005366:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800536a:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800536e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005372:	6809      	ldr	r1, [r1, #0]
 8005374:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

}
 8005378:	bf00      	nop
 800537a:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 800537e:	46bd      	mov	sp, r7
 8005380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005384:	f3af 8000 	nop.w
 8005388:	3ff00000 	.word	0x3ff00000
 800538c:	54442d18 	.word	0x54442d18
 8005390:	400921fb 	.word	0x400921fb
 8005394:	54442d18 	.word	0x54442d18
 8005398:	401921fb 	.word	0x401921fb
 800539c:	00000000 	.word	0x00000000

080053a0 <predict_next_aos>:

struct predict_observation predict_next_aos(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double start_utc)
{
 80053a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053a4:	b0dc      	sub	sp, #368	@ 0x170
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80053ac:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80053b0:	6018      	str	r0, [r3, #0]
 80053b2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80053b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80053ba:	6019      	str	r1, [r3, #0]
 80053bc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80053c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	463b      	mov	r3, r7
 80053c8:	ed83 0b00 	vstr	d0, [r3]
	double curr_time = start_utc;
 80053cc:	463b      	mov	r3, r7
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	struct predict_observation obs;
	double time_step = 0;
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

	struct predict_position orbit;
	predict_orbit(orbital_elements, &orbit, curr_time);
 80053e2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80053e6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80053ea:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80053ee:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80053f2:	4611      	mov	r1, r2
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	f001 f85f 	bl	80064b8 <predict_orbit>
	predict_observe_orbit(observer, &orbit, &obs);
 80053fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80053fe:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8005402:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005406:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	f7ff fb4c 	bl	8004aa8 <predict_observe_orbit>

	//check whether AOS can happen after specified start time
	if (predict_aos_happens(orbital_elements, observer->latitude) && !predict_is_geosynchronous(orbital_elements) && !orbit.decayed) {
 8005410:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005414:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 800541e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005422:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005426:	eeb0 0a47 	vmov.f32	s0, s14
 800542a:	eef0 0a67 	vmov.f32	s1, s15
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	f000 ffba 	bl	80063a8 <predict_aos_happens>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8164 	beq.w	8005704 <predict_next_aos+0x364>
 800543c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005440:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	f000 feef 	bl	8006228 <predict_is_geosynchronous>
 800544a:	4603      	mov	r3, r0
 800544c:	f083 0301 	eor.w	r3, r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8156 	beq.w	8005704 <predict_next_aos+0x364>
 8005458:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800545c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005460:	7a1b      	ldrb	r3, [r3, #8]
 8005462:	f083 0301 	eor.w	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 814b 	beq.w	8005704 <predict_next_aos+0x364>
		//Bisection method, Brent's algorithm? Given a coherent root finding algorithm,
		//can rather have one function for iterating the orbit and then let get_next_aos/los
		//specify bounding intervals for the root finding.

		//skip the rest of the pass if the satellite is currently in range, since we want the _next_ AOS.
		if (obs.elevation > 0.0) {
 800546e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	f7fb fb5d 	bl	8000b38 <__aeabi_dcmpgt>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d03b      	beq.n	80054fc <predict_next_aos+0x15c>
			struct predict_observation los = predict_next_los(observer, orbital_elements, curr_time);
 8005484:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005488:	f5a3 70ac 	sub.w	r0, r3, #344	@ 0x158
 800548c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005490:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8005494:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005498:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800549c:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	f000 fa30 	bl	8005908 <predict_next_los>
			curr_time = los.time;
 80054a8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80054ac:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			curr_time += 1.0/(MINUTES_PER_DAY*1.0)*20; //skip 20 minutes. LOS might still be within the elevation threshold. (rough quickfix from predict)
 80054b8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8005768 <predict_next_aos+0x3c8>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 80054c2:	f7fa fef3 	bl	80002ac <__adddf3>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 80054ce:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80054d2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80054d6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80054da:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80054de:	4611      	mov	r1, r2
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	f000 ffe9 	bl	80064b8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 80054e6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80054ea:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80054ee:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80054f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	f7ff fad6 	bl	8004aa8 <predict_observe_orbit>
		}

		//iteration until the orbit is roughly in range again, before the satellite pass
		while ((obs.elevation*180.0/M_PI < -1.0) || (obs.elevation_rate < 0)) {
 80054fc:	e065      	b.n	80055ca <predict_next_aos+0x22a>
			time_step = 0.00035*(obs.elevation*180.0/M_PI*((orbit.altitude/8400.0)+0.46)-2.0);
 80054fe:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	4b96      	ldr	r3, [pc, #600]	@ (8005760 <predict_next_aos+0x3c0>)
 8005508:	f7fb f886 	bl	8000618 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	a386      	add	r3, pc, #536	@ (adr r3, 8005730 <predict_next_aos+0x390>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fb f9a7 	bl	800086c <__aeabi_ddiv>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4690      	mov	r8, r2
 8005524:	4699      	mov	r9, r3
 8005526:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800552a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800552e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005532:	a381      	add	r3, pc, #516	@ (adr r3, 8005738 <predict_next_aos+0x398>)
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f7fb f998 	bl	800086c <__aeabi_ddiv>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4610      	mov	r0, r2
 8005542:	4619      	mov	r1, r3
 8005544:	a37e      	add	r3, pc, #504	@ (adr r3, 8005740 <predict_next_aos+0x3a0>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f7fa feaf 	bl	80002ac <__adddf3>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4640      	mov	r0, r8
 8005554:	4649      	mov	r1, r9
 8005556:	f7fb f85f 	bl	8000618 <__aeabi_dmul>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4610      	mov	r0, r2
 8005560:	4619      	mov	r1, r3
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800556a:	f7fa fe9d 	bl	80002a8 <__aeabi_dsub>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	a374      	add	r3, pc, #464	@ (adr r3, 8005748 <predict_next_aos+0x3a8>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f7fb f84c 	bl	8000618 <__aeabi_dmul>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time -= time_step;
 8005588:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800558c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8005590:	f7fa fe8a 	bl	80002a8 <__aeabi_dsub>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 800559c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80055a0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80055a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80055a8:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80055ac:	4611      	mov	r1, r2
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	f000 ff82 	bl	80064b8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 80055b4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80055b8:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80055bc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80055c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	f7ff fa6f 	bl	8004aa8 <predict_observe_orbit>
		while ((obs.elevation*180.0/M_PI < -1.0) || (obs.elevation_rate < 0)) {
 80055ca:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	4b63      	ldr	r3, [pc, #396]	@ (8005760 <predict_next_aos+0x3c0>)
 80055d4:	f7fb f820 	bl	8000618 <__aeabi_dmul>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	a353      	add	r3, pc, #332	@ (adr r3, 8005730 <predict_next_aos+0x390>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fb f941 	bl	800086c <__aeabi_ddiv>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005764 <predict_next_aos+0x3c4>)
 80055f8:	f7fb fa80 	bl	8000afc <__aeabi_dcmplt>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f47f af7d 	bne.w	80054fe <predict_next_aos+0x15e>
 8005604:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	f7fb fa74 	bl	8000afc <__aeabi_dcmplt>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f af71 	bne.w	80054fe <predict_next_aos+0x15e>
		}

		//fine tune the results until the elevation is within a low enough threshold
		while (fabs(obs.elevation*180/M_PI) > AOSLOS_HORIZON_THRESHOLD) {
 800561c:	e053      	b.n	80056c6 <predict_next_aos+0x326>
			time_step = obs.elevation*180.0/M_PI*sqrt(orbit.altitude)/530000.0;
 800561e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	4b4e      	ldr	r3, [pc, #312]	@ (8005760 <predict_next_aos+0x3c0>)
 8005628:	f7fa fff6 	bl	8000618 <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4610      	mov	r0, r2
 8005632:	4619      	mov	r1, r3
 8005634:	a33e      	add	r3, pc, #248	@ (adr r3, 8005730 <predict_next_aos+0x390>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fb f917 	bl	800086c <__aeabi_ddiv>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4690      	mov	r8, r2
 8005644:	4699      	mov	r9, r3
 8005646:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800564a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800564e:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8005652:	eeb0 0a47 	vmov.f32	s0, s14
 8005656:	eef0 0a67 	vmov.f32	s1, s15
 800565a:	f01a fbcf 	bl	801fdfc <sqrt>
 800565e:	ec53 2b10 	vmov	r2, r3, d0
 8005662:	4640      	mov	r0, r8
 8005664:	4649      	mov	r1, r9
 8005666:	f7fa ffd7 	bl	8000618 <__aeabi_dmul>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4610      	mov	r0, r2
 8005670:	4619      	mov	r1, r3
 8005672:	a337      	add	r3, pc, #220	@ (adr r3, 8005750 <predict_next_aos+0x3b0>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f7fb f8f8 	bl	800086c <__aeabi_ddiv>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time -= time_step;
 8005684:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8005688:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800568c:	f7fa fe0c 	bl	80002a8 <__aeabi_dsub>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8005698:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800569c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80056a0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80056a4:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 80056a8:	4611      	mov	r1, r2
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	f000 ff04 	bl	80064b8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 80056b0:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80056b4:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80056b8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80056bc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	f7ff f9f1 	bl	8004aa8 <predict_observe_orbit>
		while (fabs(obs.elevation*180/M_PI) > AOSLOS_HORIZON_THRESHOLD) {
 80056c6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	4b24      	ldr	r3, [pc, #144]	@ (8005760 <predict_next_aos+0x3c0>)
 80056d0:	f7fa ffa2 	bl	8000618 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4610      	mov	r0, r2
 80056da:	4619      	mov	r1, r3
 80056dc:	a314      	add	r3, pc, #80	@ (adr r3, 8005730 <predict_next_aos+0x390>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f7fb f8c3 	bl	800086c <__aeabi_ddiv>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4614      	mov	r4, r2
 80056ec:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80056f0:	a319      	add	r3, pc, #100	@ (adr r3, 8005758 <predict_next_aos+0x3b8>)
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fb fa1d 	bl	8000b38 <__aeabi_dcmpgt>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d18c      	bne.n	800561e <predict_next_aos+0x27e>
		}
	}
	return obs;
 8005704:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005708:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005714:	2258      	movs	r2, #88	@ 0x58
 8005716:	4619      	mov	r1, r3
 8005718:	f017 f8fd 	bl	801c916 <memcpy>
}
 800571c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005720:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 800572a:	46bd      	mov	sp, r7
 800572c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005730:	54442d18 	.word	0x54442d18
 8005734:	400921fb 	.word	0x400921fb
 8005738:	00000000 	.word	0x00000000
 800573c:	40c06800 	.word	0x40c06800
 8005740:	d70a3d71 	.word	0xd70a3d71
 8005744:	3fdd70a3 	.word	0x3fdd70a3
 8005748:	8db8bac7 	.word	0x8db8bac7
 800574c:	3f36f006 	.word	0x3f36f006
 8005750:	00000000 	.word	0x00000000
 8005754:	41202ca0 	.word	0x41202ca0
 8005758:	33333333 	.word	0x33333333
 800575c:	3fd33333 	.word	0x3fd33333
 8005760:	40668000 	.word	0x40668000
 8005764:	bff00000 	.word	0xbff00000
 8005768:	1c71c71d 	.word	0x1c71c71d
 800576c:	3f8c71c7 	.word	0x3f8c71c7

08005770 <step_pass>:
 * \param curr_time Time from which to start stepping
 * \param direction Either POSITIVE_DIRECTION (step from current time to pass end) or NEGATIVE_DIRECTION (step from current time to start of pass). In case of the former, the pass will be stepped until either elevation is negative or the derivative of the elevation is negative
 * \return Time for when we have stepped out of the pass
 * \copyright GPLv2+
 **/
double step_pass(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double curr_time, enum step_pass_direction direction) {
 8005770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005774:	b0c5      	sub	sp, #276	@ 0x114
 8005776:	af00      	add	r7, sp, #0
 8005778:	6178      	str	r0, [r7, #20]
 800577a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800577e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005782:	6019      	str	r1, [r3, #0]
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	ed03 0b02 	vstr	d0, [r3, #-8]
 800578c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005790:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8005794:	701a      	strb	r2, [r3, #0]
	struct predict_position orbit;
	struct predict_observation obs;
	do {
		predict_orbit(orbital_elements, &orbit, curr_time);
 8005796:	f107 0310 	add.w	r3, r7, #16
 800579a:	4619      	mov	r1, r3
 800579c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80057a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80057a8:	ed11 0b02 	vldr	d0, [r1, #-8]
 80057ac:	4611      	mov	r1, r2
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	f000 fe82 	bl	80064b8 <predict_orbit>
		predict_observe_orbit(observer, &orbit, &obs);
 80057b4:	f107 0218 	add.w	r2, r7, #24
 80057b8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80057bc:	4619      	mov	r1, r3
 80057be:	6978      	ldr	r0, [r7, #20]
 80057c0:	f7ff f972 	bl	8004aa8 <predict_observe_orbit>

		//weird time stepping from Predict, but which magically works
		double time_step = cos(obs.elevation - 1.0)*sqrt(orbit.altitude)/25000.0;
 80057c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	4b4c      	ldr	r3, [pc, #304]	@ (8005900 <step_pass+0x190>)
 80057ce:	f7fa fd6b 	bl	80002a8 <__aeabi_dsub>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	ec43 2b17 	vmov	d7, r2, r3
 80057da:	eeb0 0a47 	vmov.f32	s0, s14
 80057de:	eef0 0a67 	vmov.f32	s1, s15
 80057e2:	f01a fcd1 	bl	8020188 <cos>
 80057e6:	ec59 8b10 	vmov	r8, r9, d0
 80057ea:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 80057ee:	eeb0 0a47 	vmov.f32	s0, s14
 80057f2:	eef0 0a67 	vmov.f32	s1, s15
 80057f6:	f01a fb01 	bl	801fdfc <sqrt>
 80057fa:	ec53 2b10 	vmov	r2, r3, d0
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fa ff09 	bl	8000618 <__aeabi_dmul>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4610      	mov	r0, r2
 800580c:	4619      	mov	r1, r3
 800580e:	a33a      	add	r3, pc, #232	@ (adr r3, 80058f8 <step_pass+0x188>)
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f7fb f82a 	bl	800086c <__aeabi_ddiv>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
		if (((direction == POSITIVE_DIRECTION) && time_step < 0) || ((direction == NEGATIVE_DIRECTION) && time_step > 0)) {
 8005820:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005824:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <step_pass+0xd4>
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800583a:	f7fb f95f 	bl	8000afc <__aeabi_dcmplt>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d111      	bne.n	8005868 <step_pass+0xf8>
 8005844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005848:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d112      	bne.n	8005878 <step_pass+0x108>
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800585e:	f7fb f96b 	bl	8000b38 <__aeabi_dcmpgt>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <step_pass+0x108>
			time_step = -time_step;
 8005868:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 800586c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005870:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005874:	e9c7 4542 	strd	r4, r5, [r7, #264]	@ 0x108
		}

		curr_time += time_step;
 8005878:	f107 0310 	add.w	r3, r7, #16
 800587c:	461e      	mov	r6, r3
 800587e:	f107 0310 	add.w	r3, r7, #16
 8005882:	4619      	mov	r1, r3
 8005884:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8005888:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800588c:	f7fa fd0e 	bl	80002ac <__adddf3>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	e946 2302 	strd	r2, r3, [r6, #-8]
	} while ((obs.elevation >= 0) || ((direction == POSITIVE_DIRECTION) && (obs.elevation_rate > 0.0)));
 8005898:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	f7fb f93e 	bl	8000b24 <__aeabi_dcmpge>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f47f af73 	bne.w	8005796 <step_pass+0x26>
 80058b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058b4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <step_pass+0x166>
 80058be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	f7fb f935 	bl	8000b38 <__aeabi_dcmpgt>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f47f af60 	bne.w	8005796 <step_pass+0x26>
	return curr_time;
 80058d6:	f107 0310 	add.w	r3, r7, #16
 80058da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058de:	ec43 2b17 	vmov	d7, r2, r3
}
 80058e2:	eeb0 0a47 	vmov.f32	s0, s14
 80058e6:	eef0 0a67 	vmov.f32	s1, s15
 80058ea:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80058ee:	46bd      	mov	sp, r7
 80058f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058f4:	f3af 8000 	nop.w
 80058f8:	00000000 	.word	0x00000000
 80058fc:	40d86a00 	.word	0x40d86a00
 8005900:	3ff00000 	.word	0x3ff00000
 8005904:	00000000 	.word	0x00000000

08005908 <predict_next_los>:

struct predict_observation predict_next_los(const predict_observer_t *observer, const predict_orbital_elements_t *orbital_elements, double start_utc)
{
 8005908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800590c:	b0dc      	sub	sp, #368	@ 0x170
 800590e:	af00      	add	r7, sp, #0
 8005910:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005914:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005918:	6018      	str	r0, [r3, #0]
 800591a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800591e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005922:	6019      	str	r1, [r3, #0]
 8005924:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005928:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	463b      	mov	r3, r7
 8005930:	ed83 0b00 	vstr	d0, [r3]
	double curr_time = start_utc;
 8005934:	463b      	mov	r3, r7
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	struct predict_observation obs;
	double time_step = 0;
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

	struct predict_position orbit;
	predict_orbit(orbital_elements, &orbit, curr_time);
 800594a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800594e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005952:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005956:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 800595a:	4611      	mov	r1, r2
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	f000 fdab 	bl	80064b8 <predict_orbit>
	predict_observe_orbit(observer, &orbit, &obs);
 8005962:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8005966:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800596a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800596e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	f7ff f898 	bl	8004aa8 <predict_observe_orbit>

	//check whether AOS/LOS can happen after specified start time
	if (predict_aos_happens(orbital_elements, observer->latitude) && !predict_is_geosynchronous(orbital_elements) && !orbit.decayed) {
 8005978:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800597c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 8005986:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800598a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800598e:	eeb0 0a47 	vmov.f32	s0, s14
 8005992:	eef0 0a67 	vmov.f32	s1, s15
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	f000 fd06 	bl	80063a8 <predict_aos_happens>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80d9 	beq.w	8005b56 <predict_next_los+0x24e>
 80059a4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80059a8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	f000 fc3b 	bl	8006228 <predict_is_geosynchronous>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f083 0301 	eor.w	r3, r3, #1
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80cb 	beq.w	8005b56 <predict_next_los+0x24e>
 80059c0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80059c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80059c8:	7a1b      	ldrb	r3, [r3, #8]
 80059ca:	f083 0301 	eor.w	r3, r3, #1
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80c0 	beq.w	8005b56 <predict_next_los+0x24e>
		//iteration algorithm from Predict, see comments in predict_next_aos().

		//iterate until next satellite pass
		if (obs.elevation < 0.0) {
 80059d6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	f7fb f88b 	bl	8000afc <__aeabi_dcmplt>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d030      	beq.n	8005a4e <predict_next_los+0x146>
			struct predict_observation aos = predict_next_aos(observer, orbital_elements, curr_time);
 80059ec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80059f0:	f5a3 70ac 	sub.w	r0, r3, #344	@ 0x158
 80059f4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80059f8:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 80059fc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005a00:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005a04:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	6819      	ldr	r1, [r3, #0]
 8005a0c:	f7ff fcc8 	bl	80053a0 <predict_next_aos>
			curr_time = aos.time;
 8005a10:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005a14:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8005a20:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8005a24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005a28:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005a2c:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8005a30:	4611      	mov	r1, r2
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	f000 fd40 	bl	80064b8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8005a38:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8005a3c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8005a40:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005a44:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	f7ff f82d 	bl	8004aa8 <predict_observe_orbit>
		}

		//step through the pass
		curr_time = step_pass(observer, orbital_elements, curr_time, POSITIVE_DIRECTION);
 8005a4e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005a52:	f5a3 71b2 	sub.w	r1, r3, #356	@ 0x164
 8005a56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005a5a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005a5e:	2200      	movs	r2, #0
 8005a60:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8005a64:	6809      	ldr	r1, [r1, #0]
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	f7ff fe82 	bl	8005770 <step_pass>
 8005a6c:	ed87 0b5a 	vstr	d0, [r7, #360]	@ 0x168

		//fine tune to elevation threshold
		do {
			time_step = obs.elevation*180.0/M_PI*sqrt(orbit.altitude)/502500.0;
 8005a70:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	4b49      	ldr	r3, [pc, #292]	@ (8005ba0 <predict_next_los+0x298>)
 8005a7a:	f7fa fdcd 	bl	8000618 <__aeabi_dmul>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	a340      	add	r3, pc, #256	@ (adr r3, 8005b88 <predict_next_los+0x280>)
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f7fa feee 	bl	800086c <__aeabi_ddiv>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4690      	mov	r8, r2
 8005a96:	4699      	mov	r9, r3
 8005a98:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005a9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005aa0:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8005aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8005aa8:	eef0 0a67 	vmov.f32	s1, s15
 8005aac:	f01a f9a6 	bl	801fdfc <sqrt>
 8005ab0:	ec53 2b10 	vmov	r2, r3, d0
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	f7fa fdae 	bl	8000618 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	a332      	add	r3, pc, #200	@ (adr r3, 8005b90 <predict_next_los+0x288>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fa fecf 	bl	800086c <__aeabi_ddiv>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
			curr_time += time_step;
 8005ad6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8005ada:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8005ade:	f7fa fbe5 	bl	80002ac <__adddf3>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
			predict_orbit(orbital_elements, &orbit, curr_time);
 8005aea:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8005aee:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005af2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005af6:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8005afa:	4611      	mov	r1, r2
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	f000 fcdb 	bl	80064b8 <predict_orbit>
			predict_observe_orbit(observer, &orbit, &obs);
 8005b02:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8005b06:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8005b0a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005b0e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	f7fe ffc8 	bl	8004aa8 <predict_observe_orbit>
		} while (fabs(obs.elevation*180.0/M_PI) > AOSLOS_HORIZON_THRESHOLD);
 8005b18:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba0 <predict_next_los+0x298>)
 8005b22:	f7fa fd79 	bl	8000618 <__aeabi_dmul>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	a316      	add	r3, pc, #88	@ (adr r3, 8005b88 <predict_next_los+0x280>)
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f7fa fe9a 	bl	800086c <__aeabi_ddiv>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8005b42:	a315      	add	r3, pc, #84	@ (adr r3, 8005b98 <predict_next_los+0x290>)
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	f7fa fff4 	bl	8000b38 <__aeabi_dcmpgt>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d18c      	bne.n	8005a70 <predict_next_los+0x168>
	}
	return obs;
 8005b56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005b5a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b66:	2258      	movs	r2, #88	@ 0x58
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f016 fed4 	bl	801c916 <memcpy>
}
 8005b6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8005b72:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b82:	bf00      	nop
 8005b84:	f3af 8000 	nop.w
 8005b88:	54442d18 	.word	0x54442d18
 8005b8c:	400921fb 	.word	0x400921fb
 8005b90:	00000000 	.word	0x00000000
 8005b94:	411eab90 	.word	0x411eab90
 8005b98:	33333333 	.word	0x33333333
 8005b9c:	3fd33333 	.word	0x3fd33333
 8005ba0:	40668000 	.word	0x40668000
 8005ba4:	00000000 	.word	0x00000000

08005ba8 <predict_parse_tle>:

//length of buffer used for extracting subsets of TLE strings for parsing
#define SUBSTRING_BUFFER_LENGTH 50

predict_orbital_elements_t* predict_parse_tle(const char *tle_line_1, const char *tle_line_2)
{
 8005ba8:	b5b0      	push	{r4, r5, r7, lr}
 8005baa:	b0aa      	sub	sp, #168	@ 0xa8
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	double tempnum;
	predict_orbital_elements_t *m = (predict_orbital_elements_t*)malloc(sizeof(predict_orbital_elements_t));
 8005bb2:	2078      	movs	r0, #120	@ 0x78
 8005bb4:	f013 fe8e 	bl	80198d4 <malloc>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	if (m == NULL) return NULL;
 8005bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <predict_parse_tle+0x22>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e312      	b.n	80061f0 <predict_parse_tle+0x648>

	char substring_buffer[SUBSTRING_BUFFER_LENGTH];
	m->satellite_number = atol(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,2,6));
 8005bca:	f107 020c 	add.w	r2, r7, #12
 8005bce:	2306      	movs	r3, #6
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	2132      	movs	r1, #50	@ 0x32
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f00d fb82 	bl	80132e0 <SubString>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f013 fe61 	bl	80198a6 <atol>
 8005be4:	4602      	mov	r2, r0
 8005be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bea:	601a      	str	r2, [r3, #0]
	m->element_number = atol(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,64,67));
 8005bec:	f107 020c 	add.w	r2, r7, #12
 8005bf0:	2343      	movs	r3, #67	@ 0x43
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2340      	movs	r3, #64	@ 0x40
 8005bf6:	2132      	movs	r1, #50	@ 0x32
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f00d fb71 	bl	80132e0 <SubString>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f013 fe50 	bl	80198a6 <atol>
 8005c06:	4602      	mov	r2, r0
 8005c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c0c:	605a      	str	r2, [r3, #4]
	m->epoch_year = atoi(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,18,19));
 8005c0e:	f107 020c 	add.w	r2, r7, #12
 8005c12:	2313      	movs	r3, #19
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	2312      	movs	r3, #18
 8005c18:	2132      	movs	r1, #50	@ 0x32
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f00d fb60 	bl	80132e0 <SubString>
 8005c20:	4603      	mov	r3, r0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f013 fe3b 	bl	801989e <atoi>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c2e:	615a      	str	r2, [r3, #20]
	strncpy(m->designator, SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,9,16),8);
 8005c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c34:	f103 0408 	add.w	r4, r3, #8
 8005c38:	f107 020c 	add.w	r2, r7, #12
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	2309      	movs	r3, #9
 8005c42:	2132      	movs	r1, #50	@ 0x32
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f00d fb4b 	bl	80132e0 <SubString>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4620      	mov	r0, r4
 8005c52:	f015 fda2 	bl	801b79a <strncpy>
	m->epoch_day = atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,20,31));
 8005c56:	f107 020c 	add.w	r2, r7, #12
 8005c5a:	231f      	movs	r3, #31
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	2314      	movs	r3, #20
 8005c60:	2132      	movs	r1, #50	@ 0x32
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f00d fb3c 	bl	80132e0 <SubString>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f013 fe14 	bl	8019898 <atof>
 8005c70:	eeb0 7a40 	vmov.f32	s14, s0
 8005c74:	eef0 7a60 	vmov.f32	s15, s1
 8005c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c7c:	ed83 7b06 	vstr	d7, [r3, #24]
	m->inclination = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,8,15));
 8005c80:	f107 020c 	add.w	r2, r7, #12
 8005c84:	230f      	movs	r3, #15
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2308      	movs	r3, #8
 8005c8a:	2132      	movs	r1, #50	@ 0x32
 8005c8c:	6838      	ldr	r0, [r7, #0]
 8005c8e:	f00d fb27 	bl	80132e0 <SubString>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f013 fdff 	bl	8019898 <atof>
 8005c9a:	eeb0 7a40 	vmov.f32	s14, s0
 8005c9e:	eef0 7a60 	vmov.f32	s15, s1
 8005ca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ca6:	ed83 7b08 	vstr	d7, [r3, #32]
	m->right_ascension = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,17,24));
 8005caa:	f107 020c 	add.w	r2, r7, #12
 8005cae:	2318      	movs	r3, #24
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2311      	movs	r3, #17
 8005cb4:	2132      	movs	r1, #50	@ 0x32
 8005cb6:	6838      	ldr	r0, [r7, #0]
 8005cb8:	f00d fb12 	bl	80132e0 <SubString>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f013 fdea 	bl	8019898 <atof>
 8005cc4:	eeb0 7a40 	vmov.f32	s14, s0
 8005cc8:	eef0 7a60 	vmov.f32	s15, s1
 8005ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cd0:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	m->eccentricity = 1.0e-07*atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,26,32));
 8005cd4:	f107 020c 	add.w	r2, r7, #12
 8005cd8:	2320      	movs	r3, #32
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	231a      	movs	r3, #26
 8005cde:	2132      	movs	r1, #50	@ 0x32
 8005ce0:	6838      	ldr	r0, [r7, #0]
 8005ce2:	f00d fafd 	bl	80132e0 <SubString>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f013 fdd5 	bl	8019898 <atof>
 8005cee:	ec51 0b10 	vmov	r0, r1, d0
 8005cf2:	f20f 4380 	addw	r3, pc, #1152	@ 0x480
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fc8d 	bl	8000618 <__aeabi_dmul>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8005d06:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->argument_of_perigee = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,34,41));
 8005d0a:	f107 020c 	add.w	r2, r7, #12
 8005d0e:	2329      	movs	r3, #41	@ 0x29
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	2322      	movs	r3, #34	@ 0x22
 8005d14:	2132      	movs	r1, #50	@ 0x32
 8005d16:	6838      	ldr	r0, [r7, #0]
 8005d18:	f00d fae2 	bl	80132e0 <SubString>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f013 fdba 	bl	8019898 <atof>
 8005d24:	eeb0 7a40 	vmov.f32	s14, s0
 8005d28:	eef0 7a60 	vmov.f32	s15, s1
 8005d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d30:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
	m->mean_anomaly = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,43,50));
 8005d34:	f107 020c 	add.w	r2, r7, #12
 8005d38:	2332      	movs	r3, #50	@ 0x32
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	232b      	movs	r3, #43	@ 0x2b
 8005d3e:	2132      	movs	r1, #50	@ 0x32
 8005d40:	6838      	ldr	r0, [r7, #0]
 8005d42:	f00d facd 	bl	80132e0 <SubString>
 8005d46:	4603      	mov	r3, r0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f013 fda5 	bl	8019898 <atof>
 8005d4e:	eeb0 7a40 	vmov.f32	s14, s0
 8005d52:	eef0 7a60 	vmov.f32	s15, s1
 8005d56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d5a:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
	m->mean_motion = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,52,62));
 8005d5e:	f107 020c 	add.w	r2, r7, #12
 8005d62:	233e      	movs	r3, #62	@ 0x3e
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	2334      	movs	r3, #52	@ 0x34
 8005d68:	2132      	movs	r1, #50	@ 0x32
 8005d6a:	6838      	ldr	r0, [r7, #0]
 8005d6c:	f00d fab8 	bl	80132e0 <SubString>
 8005d70:	4603      	mov	r3, r0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f013 fd90 	bl	8019898 <atof>
 8005d78:	eeb0 7a40 	vmov.f32	s14, s0
 8005d7c:	eef0 7a60 	vmov.f32	s15, s1
 8005d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d84:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
	m->derivative_mean_motion  = atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,33,42));
 8005d88:	f107 020c 	add.w	r2, r7, #12
 8005d8c:	232a      	movs	r3, #42	@ 0x2a
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	2321      	movs	r3, #33	@ 0x21
 8005d92:	2132      	movs	r1, #50	@ 0x32
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f00d faa3 	bl	80132e0 <SubString>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f013 fd7b 	bl	8019898 <atof>
 8005da2:	eeb0 7a40 	vmov.f32	s14, s0
 8005da6:	eef0 7a60 	vmov.f32	s15, s1
 8005daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005dae:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
	tempnum=1.0e-5*atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,44,49));
 8005db2:	f107 020c 	add.w	r2, r7, #12
 8005db6:	2331      	movs	r3, #49	@ 0x31
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	232c      	movs	r3, #44	@ 0x2c
 8005dbc:	2132      	movs	r1, #50	@ 0x32
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f00d fa8e 	bl	80132e0 <SubString>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f013 fd66 	bl	8019898 <atof>
 8005dcc:	ec51 0b10 	vmov	r0, r1, d0
 8005dd0:	a3ea      	add	r3, pc, #936	@ (adr r3, 800617c <predict_parse_tle+0x5d4>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fc1f 	bl	8000618 <__aeabi_dmul>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	m->second_derivative_mean_motion = tempnum/pow(10.0,(tle_line_1[51]-'0'));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3333      	adds	r3, #51	@ 0x33
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	3b30      	subs	r3, #48	@ 0x30
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fa fbaa 	bl	8000544 <__aeabi_i2d>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	ec43 2b11 	vmov	d1, r2, r3
 8005df8:	ed9f 0bc7 	vldr	d0, [pc, #796]	@ 8006118 <predict_parse_tle+0x570>
 8005dfc:	f019 ff8e 	bl	801fd1c <pow>
 8005e00:	ec53 2b10 	vmov	r2, r3, d0
 8005e04:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8005e08:	f7fa fd30 	bl	800086c <__aeabi_ddiv>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8005e14:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	tempnum=1.0e-5*atof(SubString(tle_line_1,SUBSTRING_BUFFER_LENGTH,substring_buffer,53,58));
 8005e18:	f107 020c 	add.w	r2, r7, #12
 8005e1c:	233a      	movs	r3, #58	@ 0x3a
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2335      	movs	r3, #53	@ 0x35
 8005e22:	2132      	movs	r1, #50	@ 0x32
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f00d fa5b 	bl	80132e0 <SubString>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f013 fd33 	bl	8019898 <atof>
 8005e32:	ec51 0b10 	vmov	r0, r1, d0
 8005e36:	a3d1      	add	r3, pc, #836	@ (adr r3, 800617c <predict_parse_tle+0x5d4>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f7fa fbec 	bl	8000618 <__aeabi_dmul>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	m->bstar_drag_term = tempnum/pow(10.0,(tle_line_1[60]-'0'));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	333c      	adds	r3, #60	@ 0x3c
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	3b30      	subs	r3, #48	@ 0x30
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fa fb77 	bl	8000544 <__aeabi_i2d>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	ec43 2b11 	vmov	d1, r2, r3
 8005e5e:	ed9f 0bae 	vldr	d0, [pc, #696]	@ 8006118 <predict_parse_tle+0x570>
 8005e62:	f019 ff5b 	bl	801fd1c <pow>
 8005e66:	ec53 2b10 	vmov	r2, r3, d0
 8005e6a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8005e6e:	f7fa fcfd 	bl	800086c <__aeabi_ddiv>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8005e7a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	m->revolutions_at_epoch = atof(SubString(tle_line_2,SUBSTRING_BUFFER_LENGTH,substring_buffer,63,67));
 8005e7e:	f107 020c 	add.w	r2, r7, #12
 8005e82:	2343      	movs	r3, #67	@ 0x43
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	233f      	movs	r3, #63	@ 0x3f
 8005e88:	2132      	movs	r1, #50	@ 0x32
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f00d fa28 	bl	80132e0 <SubString>
 8005e90:	4603      	mov	r3, r0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f013 fd00 	bl	8019898 <atof>
 8005e98:	ec53 2b10 	vmov	r2, r3, d0
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	f7fa fe6a 	bl	8000b78 <__aeabi_d2iz>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005eaa:	669a      	str	r2, [r3, #104]	@ 0x68

	/* Period > 225 minutes is deep space */
	double ao, xnodp, dd1, dd2, delo, a1, del1, r1;
	double temp = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 8005eac:	a3b5      	add	r3, pc, #724	@ (adr r3, 8006184 <predict_parse_tle+0x5dc>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double xno = m->mean_motion*temp*MINUTES_PER_DAY; //from old TLE struct
 8005eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005eba:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8005ebe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005ec2:	f7fa fba9 	bl	8000618 <__aeabi_dmul>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	4ba3      	ldr	r3, [pc, #652]	@ (8006160 <predict_parse_tle+0x5b8>)
 8005ed4:	f7fa fba0 	bl	8000618 <__aeabi_dmul>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	dd1=(XKE/xno);
 8005ee0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005ee4:	a18e      	add	r1, pc, #568	@ (adr r1, 8006120 <predict_parse_tle+0x578>)
 8005ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eea:	f7fa fcbf 	bl	800086c <__aeabi_ddiv>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	dd2=TWO_THIRD;
 8005ef6:	a38c      	add	r3, pc, #560	@ (adr r3, 8006128 <predict_parse_tle+0x580>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	a1=pow(dd1,dd2);
 8005f00:	ed97 1b1c 	vldr	d1, [r7, #112]	@ 0x70
 8005f04:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8005f08:	f019 ff08 	bl	801fd1c <pow>
 8005f0c:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
	r1=cos(m->inclination*M_PI/180.0);
 8005f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f14:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005f18:	a385      	add	r3, pc, #532	@ (adr r3, 8006130 <predict_parse_tle+0x588>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fb7b 	bl	8000618 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8006164 <predict_parse_tle+0x5bc>)
 8005f30:	f7fa fc9c 	bl	800086c <__aeabi_ddiv>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	ec43 2b17 	vmov	d7, r2, r3
 8005f3c:	eeb0 0a47 	vmov.f32	s0, s14
 8005f40:	eef0 0a67 	vmov.f32	s1, s15
 8005f44:	f01a f920 	bl	8020188 <cos>
 8005f48:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
	dd1=(1.0-m->eccentricity*m->eccentricity);
 8005f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f50:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f58:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005f5c:	f7fa fb5c 	bl	8000618 <__aeabi_dmul>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	f04f 0000 	mov.w	r0, #0
 8005f68:	497f      	ldr	r1, [pc, #508]	@ (8006168 <predict_parse_tle+0x5c0>)
 8005f6a:	f7fa f99d 	bl	80002a8 <__aeabi_dsub>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	temp=CK2*1.5f*(r1*r1*3.0-1.0)/pow(dd1,1.5);
 8005f76:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005f7a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8005f7e:	f7fa fb4b 	bl	8000618 <__aeabi_dmul>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	4b77      	ldr	r3, [pc, #476]	@ (800616c <predict_parse_tle+0x5c4>)
 8005f90:	f7fa fb42 	bl	8000618 <__aeabi_dmul>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	4b71      	ldr	r3, [pc, #452]	@ (8006168 <predict_parse_tle+0x5c0>)
 8005fa2:	f7fa f981 	bl	80002a8 <__aeabi_dsub>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	a362      	add	r3, pc, #392	@ (adr r3, 8006138 <predict_parse_tle+0x590>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa fb30 	bl	8000618 <__aeabi_dmul>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	ed9f 1b5f 	vldr	d1, [pc, #380]	@ 8006140 <predict_parse_tle+0x598>
 8005fc4:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 8005fc8:	f019 fea8 	bl	801fd1c <pow>
 8005fcc:	ec53 2b10 	vmov	r2, r3, d0
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	f7fa fc4a 	bl	800086c <__aeabi_ddiv>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	del1=temp/(a1*a1);
 8005fe0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005fe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fe8:	f7fa fb16 	bl	8000618 <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005ff4:	f7fa fc3a 	bl	800086c <__aeabi_ddiv>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	ao=a1*(1.0-del1*(TWO_THIRD*.5+del1*(del1*1.654320987654321+1.0)));
 8006000:	a351      	add	r3, pc, #324	@ (adr r3, 8006148 <predict_parse_tle+0x5a0>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800600a:	f7fa fb05 	bl	8000618 <__aeabi_dmul>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4610      	mov	r0, r2
 8006014:	4619      	mov	r1, r3
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	4b53      	ldr	r3, [pc, #332]	@ (8006168 <predict_parse_tle+0x5c0>)
 800601c:	f7fa f946 	bl	80002ac <__adddf3>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4610      	mov	r0, r2
 8006026:	4619      	mov	r1, r3
 8006028:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800602c:	f7fa faf4 	bl	8000618 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4610      	mov	r0, r2
 8006036:	4619      	mov	r1, r3
 8006038:	a345      	add	r3, pc, #276	@ (adr r3, 8006150 <predict_parse_tle+0x5a8>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa f935 	bl	80002ac <__adddf3>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800604e:	f7fa fae3 	bl	8000618 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	f04f 0000 	mov.w	r0, #0
 800605a:	4943      	ldr	r1, [pc, #268]	@ (8006168 <predict_parse_tle+0x5c0>)
 800605c:	f7fa f924 	bl	80002a8 <__aeabi_dsub>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006068:	f7fa fad6 	bl	8000618 <__aeabi_dmul>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	delo=temp/(ao*ao);
 8006074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006078:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800607c:	f7fa facc 	bl	8000618 <__aeabi_dmul>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006088:	f7fa fbf0 	bl	800086c <__aeabi_ddiv>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	xnodp=xno/(delo+1.0);
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	4b33      	ldr	r3, [pc, #204]	@ (8006168 <predict_parse_tle+0x5c0>)
 800609a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800609e:	f7fa f905 	bl	80002ac <__adddf3>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060aa:	f7fa fbdf 	bl	800086c <__aeabi_ddiv>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	/* Select a deep-space/near-earth ephemeris */
	if (TWO_PI/xnodp/MINUTES_PER_DAY >= 0.15625) {
 80060b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060ba:	a127      	add	r1, pc, #156	@ (adr r1, 8006158 <predict_parse_tle+0x5b0>)
 80060bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c0:	f7fa fbd4 	bl	800086c <__aeabi_ddiv>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	4b23      	ldr	r3, [pc, #140]	@ (8006160 <predict_parse_tle+0x5b8>)
 80060d2:	f7fa fbcb 	bl	800086c <__aeabi_ddiv>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <predict_parse_tle+0x5c8>)
 80060e4:	f7fa fd1e 	bl	8000b24 <__aeabi_dcmpge>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d05d      	beq.n	80061aa <predict_parse_tle+0x602>
		m->ephemeris = EPHEMERIS_SDP4;
 80060ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		
		// Allocate memory for ephemeris data
		m->ephemeris_data = malloc(sizeof(struct _sdp4));
 80060f8:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80060fc:	f013 fbea 	bl	80198d4 <malloc>
 8006100:	4603      	mov	r3, r0
 8006102:	461a      	mov	r2, r3
 8006104:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006108:	671a      	str	r2, [r3, #112]	@ 0x70

		if (m->ephemeris_data == NULL) {
 800610a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800610e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006110:	2b00      	cmp	r3, #0
 8006112:	d141      	bne.n	8006198 <predict_parse_tle+0x5f0>
 8006114:	e03a      	b.n	800618c <predict_parse_tle+0x5e4>
 8006116:	bf00      	nop
 8006118:	00000000 	.word	0x00000000
 800611c:	40240000 	.word	0x40240000
 8006120:	d08dcacf 	.word	0xd08dcacf
 8006124:	3fb309b5 	.word	0x3fb309b5
 8006128:	55555555 	.word	0x55555555
 800612c:	3fe55555 	.word	0x3fe55555
 8006130:	54442d18 	.word	0x54442d18
 8006134:	400921fb 	.word	0x400921fb
 8006138:	cbb15878 	.word	0xcbb15878
 800613c:	3f4a9b3a 	.word	0x3f4a9b3a
 8006140:	00000000 	.word	0x00000000
 8006144:	3ff80000 	.word	0x3ff80000
 8006148:	48b0fcd7 	.word	0x48b0fcd7
 800614c:	3ffa7819 	.word	0x3ffa7819
 8006150:	55555555 	.word	0x55555555
 8006154:	3fd55555 	.word	0x3fd55555
 8006158:	54442d18 	.word	0x54442d18
 800615c:	401921fb 	.word	0x401921fb
 8006160:	40968000 	.word	0x40968000
 8006164:	40668000 	.word	0x40668000
 8006168:	3ff00000 	.word	0x3ff00000
 800616c:	40080000 	.word	0x40080000
 8006170:	3fc40000 	.word	0x3fc40000
 8006174:	9abcaf48 	.word	0x9abcaf48
 8006178:	3e7ad7f2 	.word	0x3e7ad7f2
 800617c:	88e368f1 	.word	0x88e368f1
 8006180:	3ee4f8b5 	.word	0x3ee4f8b5
 8006184:	1fbf7384 	.word	0x1fbf7384
 8006188:	3ec96b0f 	.word	0x3ec96b0f
			predict_destroy_orbital_elements(m);
 800618c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8006190:	f000 f832 	bl	80061f8 <predict_destroy_orbital_elements>
			return NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	e02b      	b.n	80061f0 <predict_parse_tle+0x648>
		}
		// Initialize ephemeris data structure
		sdp4_init(m, (struct _sdp4*)m->ephemeris_data);
 8006198:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800619c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619e:	4619      	mov	r1, r3
 80061a0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80061a4:	f000 fc78 	bl	8006a98 <sdp4_init>
 80061a8:	e020      	b.n	80061ec <predict_parse_tle+0x644>

	} else {
		m->ephemeris = EPHEMERIS_SGP4;
 80061aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		
		// Allocate memory for ephemeris data
		m->ephemeris_data = malloc(sizeof(struct _sgp4));
 80061b4:	f44f 7090 	mov.w	r0, #288	@ 0x120
 80061b8:	f013 fb8c 	bl	80198d4 <malloc>
 80061bc:	4603      	mov	r3, r0
 80061be:	461a      	mov	r2, r3
 80061c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061c4:	671a      	str	r2, [r3, #112]	@ 0x70

		if (m->ephemeris_data == NULL) {
 80061c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <predict_parse_tle+0x634>
			predict_destroy_orbital_elements(m);
 80061d0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80061d4:	f000 f810 	bl	80061f8 <predict_destroy_orbital_elements>
			return NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	e009      	b.n	80061f0 <predict_parse_tle+0x648>
		}
		// Initialize ephemeris data structure
		sgp4_init(m, (struct _sgp4*)m->ephemeris_data);
 80061dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e2:	4619      	mov	r1, r3
 80061e4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80061e8:	f008 ff4e 	bl	800f088 <sgp4_init>
	}

	return m;
 80061ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	37a0      	adds	r7, #160	@ 0xa0
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bdb0      	pop	{r4, r5, r7, pc}

080061f8 <predict_destroy_orbital_elements>:

void predict_destroy_orbital_elements(predict_orbital_elements_t *m)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	if (m == NULL) return;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00c      	beq.n	8006220 <predict_destroy_orbital_elements+0x28>

	if (m->ephemeris_data != NULL) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <predict_destroy_orbital_elements+0x20>
		free(m->ephemeris_data);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006212:	4618      	mov	r0, r3
 8006214:	f013 fb66 	bl	80198e4 <free>
	}

	free(m);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f013 fb63 	bl	80198e4 <free>
 800621e:	e000      	b.n	8006222 <predict_destroy_orbital_elements+0x2a>
	if (m == NULL) return;
 8006220:	bf00      	nop
}
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <predict_is_geosynchronous>:

bool predict_is_geosynchronous(const predict_orbital_elements_t *m)
{
 8006228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	return (m->mean_motion >= GEOSYNCHRONOUS_LOWER_MEAN_MOTION)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
		&& (m->mean_motion <= GEOSYNCHRONOUS_UPPER_MEAN_MOTION)
		&& (fabs(m->eccentricity) <= GEOSYNCHRONOUS_ECCENTRICITY_THRESHOLD)
		&& (fabs(m->inclination) <= GEOSYNCHRONOUS_INCLINATION_THRESHOLD_DEGREES);
 8006238:	a320      	add	r3, pc, #128	@ (adr r3, 80062bc <predict_is_geosynchronous+0x94>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa fc71 	bl	8000b24 <__aeabi_dcmpge>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d02c      	beq.n	80062a2 <predict_is_geosynchronous+0x7a>
		&& (m->mean_motion <= GEOSYNCHRONOUS_UPPER_MEAN_MOTION)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800624e:	a31d      	add	r3, pc, #116	@ (adr r3, 80062c4 <predict_is_geosynchronous+0x9c>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fa fc5c 	bl	8000b10 <__aeabi_dcmple>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d021      	beq.n	80062a2 <predict_is_geosynchronous+0x7a>
		&& (fabs(m->eccentricity) <= GEOSYNCHRONOUS_ECCENTRICITY_THRESHOLD)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006264:	4690      	mov	r8, r2
 8006266:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800626a:	a318      	add	r3, pc, #96	@ (adr r3, 80062cc <predict_is_geosynchronous+0xa4>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	4640      	mov	r0, r8
 8006272:	4649      	mov	r1, r9
 8006274:	f7fa fc4c 	bl	8000b10 <__aeabi_dcmple>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d011      	beq.n	80062a2 <predict_is_geosynchronous+0x7a>
		&& (fabs(m->inclination) <= GEOSYNCHRONOUS_INCLINATION_THRESHOLD_DEGREES);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006284:	4614      	mov	r4, r2
 8006286:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <predict_is_geosynchronous+0x90>)
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7fa fc3c 	bl	8000b10 <__aeabi_dcmple>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <predict_is_geosynchronous+0x7a>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <predict_is_geosynchronous+0x7c>
 80062a2:	2300      	movs	r3, #0
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	b2db      	uxtb	r3, r3
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80062b4:	f3af 8000 	nop.w
 80062b8:	40518000 	.word	0x40518000
 80062bc:	cccccccd 	.word	0xcccccccd
 80062c0:	3feccccc 	.word	0x3feccccc
 80062c4:	9999999a 	.word	0x9999999a
 80062c8:	3ff19999 	.word	0x3ff19999
 80062cc:	9999999a 	.word	0x9999999a
 80062d0:	3fc99999 	.word	0x3fc99999
 80062d4:	00000000 	.word	0x00000000

080062d8 <predict_apogee>:

double predict_apogee(const predict_orbital_elements_t *m)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	double sma = 331.25*exp(log(1440.0/m->mean_motion)*(2.0/3.0));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80062e6:	f04f 0000 	mov.w	r0, #0
 80062ea:	492d      	ldr	r1, [pc, #180]	@ (80063a0 <predict_apogee+0xc8>)
 80062ec:	f7fa fabe 	bl	800086c <__aeabi_ddiv>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	ec43 2b17 	vmov	d7, r2, r3
 80062f8:	eeb0 0a47 	vmov.f32	s0, s14
 80062fc:	eef0 0a67 	vmov.f32	s1, s15
 8006300:	f019 fcce 	bl	801fca0 <log>
 8006304:	ec51 0b10 	vmov	r0, r1, d0
 8006308:	a31f      	add	r3, pc, #124	@ (adr r3, 8006388 <predict_apogee+0xb0>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7fa f983 	bl	8000618 <__aeabi_dmul>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	ec43 2b17 	vmov	d7, r2, r3
 800631a:	eeb0 0a47 	vmov.f32	s0, s14
 800631e:	eef0 0a67 	vmov.f32	s1, s15
 8006322:	f019 fc45 	bl	801fbb0 <exp>
 8006326:	ec51 0b10 	vmov	r0, r1, d0
 800632a:	a319      	add	r3, pc, #100	@ (adr r3, 8006390 <predict_apogee+0xb8>)
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f7fa f972 	bl	8000618 <__aeabi_dmul>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return sma*(1.0+m->eccentricity)-EARTH_RADIUS_KM_WGS84;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	4b17      	ldr	r3, [pc, #92]	@ (80063a4 <predict_apogee+0xcc>)
 8006348:	f7f9 ffb0 	bl	80002ac <__adddf3>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4610      	mov	r0, r2
 8006352:	4619      	mov	r1, r3
 8006354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006358:	f7fa f95e 	bl	8000618 <__aeabi_dmul>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	a30c      	add	r3, pc, #48	@ (adr r3, 8006398 <predict_apogee+0xc0>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f7f9 ff9d 	bl	80002a8 <__aeabi_dsub>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	ec43 2b17 	vmov	d7, r2, r3
}
 8006376:	eeb0 0a47 	vmov.f32	s0, s14
 800637a:	eef0 0a67 	vmov.f32	s1, s15
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	f3af 8000 	nop.w
 8006388:	55555555 	.word	0x55555555
 800638c:	3fe55555 	.word	0x3fe55555
 8006390:	00000000 	.word	0x00000000
 8006394:	4074b400 	.word	0x4074b400
 8006398:	126e978d 	.word	0x126e978d
 800639c:	40b8ea23 	.word	0x40b8ea23
 80063a0:	40968000 	.word	0x40968000
 80063a4:	3ff00000 	.word	0x3ff00000

080063a8 <predict_aos_happens>:

	return (aodp*(1-m->eccentricity)-AE)*EARTH_RADIUS_KM_WGS84;
}

bool predict_aos_happens(const predict_orbital_elements_t *m, double latitude)
{
 80063a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063ac:	b088      	sub	sp, #32
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	ed87 0b00 	vstr	d0, [r7]
	/* This function returns true if the satellite pointed to by
	   "x" can ever rise above the horizon of the ground station. */

	double lin, apogee;

	if (m->mean_motion==0.0)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	f7fa fb90 	bl	8000ae8 <__aeabi_dcmpeq>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <predict_aos_happens+0x2a>
		return false;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e060      	b.n	8006494 <predict_aos_happens+0xec>
	else
	{
		lin = m->inclination;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

		if (lin >= 90.0) lin = 180.0-lin;
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	4b33      	ldr	r3, [pc, #204]	@ (80064b0 <predict_aos_happens+0x108>)
 80063e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80063e6:	f7fa fb9d 	bl	8000b24 <__aeabi_dcmpge>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <predict_aos_happens+0x5e>
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	f04f 0000 	mov.w	r0, #0
 80063f8:	492e      	ldr	r1, [pc, #184]	@ (80064b4 <predict_aos_happens+0x10c>)
 80063fa:	f7f9 ff55 	bl	80002a8 <__aeabi_dsub>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	e9c7 2306 	strd	r2, r3, [r7, #24]

		apogee = predict_apogee(m);
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff ff66 	bl	80062d8 <predict_apogee>
 800640c:	ed87 0b04 	vstr	d0, [r7, #16]

		if ((acos(EARTH_RADIUS_KM_WGS84/(apogee+EARTH_RADIUS_KM_WGS84))+(lin*M_PI/180.0)) > fabs(latitude))
 8006410:	a323      	add	r3, pc, #140	@ (adr r3, 80064a0 <predict_aos_happens+0xf8>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800641a:	f7f9 ff47 	bl	80002ac <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	a11f      	add	r1, pc, #124	@ (adr r1, 80064a0 <predict_aos_happens+0xf8>)
 8006424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006428:	f7fa fa20 	bl	800086c <__aeabi_ddiv>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	ec43 2b17 	vmov	d7, r2, r3
 8006434:	eeb0 0a47 	vmov.f32	s0, s14
 8006438:	eef0 0a67 	vmov.f32	s1, s15
 800643c:	f019 fb4c 	bl	801fad8 <acos>
 8006440:	ec59 8b10 	vmov	r8, r9, d0
 8006444:	a318      	add	r3, pc, #96	@ (adr r3, 80064a8 <predict_aos_happens+0x100>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800644e:	f7fa f8e3 	bl	8000618 <__aeabi_dmul>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4610      	mov	r0, r2
 8006458:	4619      	mov	r1, r3
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	4b15      	ldr	r3, [pc, #84]	@ (80064b4 <predict_aos_happens+0x10c>)
 8006460:	f7fa fa04 	bl	800086c <__aeabi_ddiv>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4640      	mov	r0, r8
 800646a:	4649      	mov	r1, r9
 800646c:	f7f9 ff1e 	bl	80002ac <__adddf3>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	683c      	ldr	r4, [r7, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8006480:	4622      	mov	r2, r4
 8006482:	462b      	mov	r3, r5
 8006484:	f7fa fb58 	bl	8000b38 <__aeabi_dcmpgt>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <predict_aos_happens+0xea>
			return true;
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <predict_aos_happens+0xec>
		else
			return false;
 8006492:	2300      	movs	r3, #0
	}
}
 8006494:	4618      	mov	r0, r3
 8006496:	3720      	adds	r7, #32
 8006498:	46bd      	mov	sp, r7
 800649a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800649e:	bf00      	nop
 80064a0:	126e978d 	.word	0x126e978d
 80064a4:	40b8ea23 	.word	0x40b8ea23
 80064a8:	54442d18 	.word	0x54442d18
 80064ac:	400921fb 	.word	0x400921fb
 80064b0:	40568000 	.word	0x40568000
 80064b4:	40668000 	.word	0x40668000

080064b8 <predict_orbit>:

/* This is the stuff we need to do repetitively while tracking. */
/* This is the old Calc() function. */
int predict_orbit(const predict_orbital_elements_t *orbital_elements, struct predict_position *m, double utc)
{
 80064b8:	b5b0      	push	{r4, r5, r7, lr}
 80064ba:	b0b6      	sub	sp, #216	@ 0xd8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	ed87 0b00 	vstr	d0, [r7]
	/* Set time to now if now time is provided: */
	if (utc == 0) utc = predict_to_julian(time(NULL));
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064d2:	f7fa fb09 	bl	8000ae8 <__aeabi_dcmpeq>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <predict_orbit+0x3a>
 80064dc:	2000      	movs	r0, #0
 80064de:	f015 fe15 	bl	801c10c <time>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4610      	mov	r0, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	f7fe fa3d 	bl	8004968 <predict_to_julian>
 80064ee:	ed87 0b00 	vstr	d0, [r7]
	
	/* Satellite position and velocity vectors */
	vec3_set(m->position, 0, 0, 0);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3310      	adds	r3, #16
 80064f6:	ed9f 2b3a 	vldr	d2, [pc, #232]	@ 80065e0 <predict_orbit+0x128>
 80064fa:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 80065e0 <predict_orbit+0x128>
 80064fe:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 80065e0 <predict_orbit+0x128>
 8006502:	4618      	mov	r0, r3
 8006504:	f00b fe9c 	bl	8012240 <vec3_set>
	vec3_set(m->velocity, 0, 0, 0);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	3328      	adds	r3, #40	@ 0x28
 800650c:	ed9f 2b34 	vldr	d2, [pc, #208]	@ 80065e0 <predict_orbit+0x128>
 8006510:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80065e0 <predict_orbit+0x128>
 8006514:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 80065e0 <predict_orbit+0x128>
 8006518:	4618      	mov	r0, r3
 800651a:	f00b fe91 	bl	8012240 <vec3_set>

	m->time = utc;
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006524:	e9c1 2300 	strd	r2, r3, [r1]
	double julTime = utc + JULIAN_TIME_DIFF;
 8006528:	a331      	add	r3, pc, #196	@ (adr r3, 80065f0 <predict_orbit+0x138>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006532:	f7f9 febb 	bl	80002ac <__adddf3>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

	/* Convert satellite's epoch time to Julian  */
	/* and calculate time since epoch in minutes */
	double epoch = 1000.0*orbital_elements->epoch_year + orbital_elements->epoch_day;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	4618      	mov	r0, r3
 8006544:	f7f9 fffe 	bl	8000544 <__aeabi_i2d>
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	4b26      	ldr	r3, [pc, #152]	@ (80065e8 <predict_orbit+0x130>)
 800654e:	f7fa f863 	bl	8000618 <__aeabi_dmul>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4610      	mov	r0, r2
 8006558:	4619      	mov	r1, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006560:	f7f9 fea4 	bl	80002ac <__adddf3>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	double jul_epoch = Julian_Date_of_Epoch(epoch);
 800656c:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 8006570:	f00c f86a 	bl	8012648 <Julian_Date_of_Epoch>
 8006574:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double tsince = (julTime - jul_epoch)*MINUTES_PER_DAY;
 8006578:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800657c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8006580:	f7f9 fe92 	bl	80002a8 <__aeabi_dsub>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4610      	mov	r0, r2
 800658a:	4619      	mov	r1, r3
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	4b16      	ldr	r3, [pc, #88]	@ (80065ec <predict_orbit+0x134>)
 8006592:	f7fa f841 	bl	8000618 <__aeabi_dmul>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

	/* Call NORAD routines according to deep-space flag. */
	struct model_output output;
	switch (orbital_elements->ephemeris) {
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00c      	beq.n	80065c2 <predict_orbit+0x10a>
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d115      	bne.n	80065d8 <predict_orbit+0x120>
		case EPHEMERIS_SDP4:
			sdp4_predict((struct _sdp4*)orbital_elements->ephemeris_data, tsince, &output);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80065b4:	4611      	mov	r1, r2
 80065b6:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fa68 	bl	8007a90 <sdp4_predict>
			break;
 80065c0:	e01a      	b.n	80065f8 <predict_orbit+0x140>
		case EPHEMERIS_SGP4:
			sgp4_predict((struct _sgp4*)orbital_elements->ephemeris_data, tsince, &output);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80065ca:	4611      	mov	r1, r2
 80065cc:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 80065d0:	4618      	mov	r0, r3
 80065d2:	f009 ffc9 	bl	8010568 <sgp4_predict>
			break;
 80065d6:	e00f      	b.n	80065f8 <predict_orbit+0x140>
		default:
			//Panic!
			return -1;
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295
 80065dc:	e132      	b.n	8006844 <predict_orbit+0x38c>
 80065de:	bf00      	nop
	...
 80065e8:	408f4000 	.word	0x408f4000
 80065ec:	40968000 	.word	0x40968000
 80065f0:	40000000 	.word	0x40000000
 80065f4:	4142a5e7 	.word	0x4142a5e7
	}
	m->position[0] = output.pos[0];
 80065f8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->position[1] = output.pos[1];
 8006602:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->position[2] = output.pos[2];
 800660c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->velocity[0] = output.vel[0];
 8006616:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	m->velocity[1] = output.vel[1];
 8006620:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->velocity[2] = output.vel[2];
 800662a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	m->phase = output.phase;
 8006634:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	m->argument_of_perigee = output.omgadf;
 800663e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	m->inclination = output.xinck;
 8006648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	m->right_ascension = output.xnodek;
 8006652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

	/* TODO: Remove? Scale position and velocity vectors to km and km/sec */
	Convert_Sat_State(m->position, m->velocity);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f103 0210 	add.w	r2, r3, #16
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	3328      	adds	r3, #40	@ 0x28
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f00b ff4d 	bl	8012508 <Convert_Sat_State>

	/* Calculate satellite Lat North, Lon East and Alt. */
	geodetic_t sat_geodetic;
	Calculate_LatLonAlt(utc, m->position, &sat_geodetic);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	3310      	adds	r3, #16
 8006672:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006676:	4611      	mov	r1, r2
 8006678:	4618      	mov	r0, r3
 800667a:	ed97 0b00 	vldr	d0, [r7]
 800667e:	f00c fb2f 	bl	8012ce0 <Calculate_LatLonAlt>

	m->latitude = sat_geodetic.lat;
 8006682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	m->longitude = sat_geodetic.lon;
 800668c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	m->altitude = sat_geodetic.alt;
 8006696:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	// Calculate solar position
	double solar_vector[3];
	sun_predict(m->time, solar_vector);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	ed93 7b00 	vldr	d7, [r3]
 80066a6:	f107 0310 	add.w	r3, r7, #16
 80066aa:	4618      	mov	r0, r3
 80066ac:	eeb0 0a47 	vmov.f32	s0, s14
 80066b0:	eef0 0a67 	vmov.f32	s1, s15
 80066b4:	f00b f980 	bl	80119b8 <sun_predict>

	// Find eclipse depth and if sat is eclipsed
	m->eclipsed = is_eclipsed(m->position, solar_vector, &m->eclipse_depth);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f103 0010 	add.w	r0, r3, #16
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066c4:	f107 0310 	add.w	r3, r7, #16
 80066c8:	4619      	mov	r1, r3
 80066ca:	f000 f939 	bl	8006940 <is_eclipsed>
 80066ce:	4603      	mov	r3, r0
 80066d0:	461a      	mov	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	661a      	str	r2, [r3, #96]	@ 0x60

	// Calculate footprint
	m->footprint = 2.0*EARTH_RADIUS_KM_WGS84*acos(EARTH_RADIUS_KM_WGS84/(EARTH_RADIUS_KM_WGS84 + m->altitude));
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80066dc:	a362      	add	r3, pc, #392	@ (adr r3, 8006868 <predict_orbit+0x3b0>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fde3 	bl	80002ac <__adddf3>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	a15f      	add	r1, pc, #380	@ (adr r1, 8006868 <predict_orbit+0x3b0>)
 80066ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f0:	f7fa f8bc 	bl	800086c <__aeabi_ddiv>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	ec43 2b17 	vmov	d7, r2, r3
 80066fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006700:	eef0 0a67 	vmov.f32	s1, s15
 8006704:	f019 f9e8 	bl	801fad8 <acos>
 8006708:	ec51 0b10 	vmov	r0, r1, d0
 800670c:	a358      	add	r3, pc, #352	@ (adr r3, 8006870 <predict_orbit+0x3b8>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f7f9 ff81 	bl	8000618 <__aeabi_dmul>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	// Calculate current number of revolutions around Earth
	double temp = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 8006720:	a355      	add	r3, pc, #340	@ (adr r3, 8006878 <predict_orbit+0x3c0>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double age = julTime - jul_epoch;
 800672a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800672e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8006732:	f7f9 fdb9 	bl	80002a8 <__aeabi_dsub>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	double xno = orbital_elements->mean_motion*temp*MINUTES_PER_DAY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8006744:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8006748:	f7f9 ff66 	bl	8000618 <__aeabi_dmul>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4610      	mov	r0, r2
 8006752:	4619      	mov	r1, r3
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	4b41      	ldr	r3, [pc, #260]	@ (8006860 <predict_orbit+0x3a8>)
 800675a:	f7f9 ff5d 	bl	8000618 <__aeabi_dmul>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	double xmo = orbital_elements->mean_anomaly * M_PI / 180.0;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800676c:	a338      	add	r3, pc, #224	@ (adr r3, 8006850 <predict_orbit+0x398>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f7f9 ff51 	bl	8000618 <__aeabi_dmul>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4610      	mov	r0, r2
 800677c:	4619      	mov	r1, r3
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	4b38      	ldr	r3, [pc, #224]	@ (8006864 <predict_orbit+0x3ac>)
 8006784:	f7fa f872 	bl	800086c <__aeabi_ddiv>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	m->revolutions = (long)floor((xno*MINUTES_PER_DAY/(M_PI*2.0) + age*orbital_elements->bstar_drag_term)*age + xmo/(2.0*M_PI)) + orbital_elements->revolutions_at_epoch;
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	4b32      	ldr	r3, [pc, #200]	@ (8006860 <predict_orbit+0x3a8>)
 8006796:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800679a:	f7f9 ff3d 	bl	8000618 <__aeabi_dmul>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4610      	mov	r0, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	a32c      	add	r3, pc, #176	@ (adr r3, 8006858 <predict_orbit+0x3a0>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7fa f85e 	bl	800086c <__aeabi_ddiv>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80067be:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80067c2:	f7f9 ff29 	bl	8000618 <__aeabi_dmul>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4620      	mov	r0, r4
 80067cc:	4629      	mov	r1, r5
 80067ce:	f7f9 fd6d 	bl	80002ac <__adddf3>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80067de:	f7f9 ff1b 	bl	8000618 <__aeabi_dmul>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4614      	mov	r4, r2
 80067e8:	461d      	mov	r5, r3
 80067ea:	a31b      	add	r3, pc, #108	@ (adr r3, 8006858 <predict_orbit+0x3a0>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80067f4:	f7fa f83a 	bl	800086c <__aeabi_ddiv>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4620      	mov	r0, r4
 80067fe:	4629      	mov	r1, r5
 8006800:	f7f9 fd54 	bl	80002ac <__adddf3>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	ec43 2b17 	vmov	d7, r2, r3
 800680c:	eeb0 0a47 	vmov.f32	s0, s14
 8006810:	eef0 0a67 	vmov.f32	s1, s15
 8006814:	f019 fe4c 	bl	80204b0 <floor>
 8006818:	ec53 2b10 	vmov	r2, r3, d0
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	f7fa f9aa 	bl	8000b78 <__aeabi_d2iz>
 8006824:	4602      	mov	r2, r0
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800682a:	441a      	add	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	679a      	str	r2, [r3, #120]	@ 0x78

	//calculate whether orbit is decayed
	m->decayed = predict_decayed(orbital_elements, utc);
 8006830:	ed97 0b00 	vldr	d0, [r7]
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 f823 	bl	8006880 <predict_decayed>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	721a      	strb	r2, [r3, #8]

	return 0;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	37d8      	adds	r7, #216	@ 0xd8
 8006848:	46bd      	mov	sp, r7
 800684a:	bdb0      	pop	{r4, r5, r7, pc}
 800684c:	f3af 8000 	nop.w
 8006850:	54442d18 	.word	0x54442d18
 8006854:	400921fb 	.word	0x400921fb
 8006858:	54442d18 	.word	0x54442d18
 800685c:	401921fb 	.word	0x401921fb
 8006860:	40968000 	.word	0x40968000
 8006864:	40668000 	.word	0x40668000
 8006868:	126e978d 	.word	0x126e978d
 800686c:	40b8ea23 	.word	0x40b8ea23
 8006870:	126e978d 	.word	0x126e978d
 8006874:	40c8ea23 	.word	0x40c8ea23
 8006878:	1fbf7384 	.word	0x1fbf7384
 800687c:	3ec96b0f 	.word	0x3ec96b0f

08006880 <predict_decayed>:

bool predict_decayed(const predict_orbital_elements_t *orbital_elements, predict_julian_date_t time)
{
 8006880:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	ed87 0b00 	vstr	d0, [r7]
	double satepoch;
	satepoch=DayNum(1,0,orbital_elements->epoch_year)+orbital_elements->epoch_day;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	461a      	mov	r2, r3
 8006894:	2100      	movs	r1, #0
 8006896:	2001      	movs	r0, #1
 8006898:	f00c f942 	bl	8012b20 <DayNum>
 800689c:	4603      	mov	r3, r0
 800689e:	4618      	mov	r0, r3
 80068a0:	f7f9 fe50 	bl	8000544 <__aeabi_i2d>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80068aa:	f7f9 fcff 	bl	80002ac <__adddf3>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bool has_decayed = false;
 80068b6:	2300      	movs	r3, #0
 80068b8:	77fb      	strb	r3, [r7, #31]
	if (satepoch + ((16.666666 - orbital_elements->mean_motion)/(10.0*fabs(orbital_elements->derivative_mean_motion))) < time)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80068c0:	a11c      	add	r1, pc, #112	@ (adr r1, 8006934 <predict_decayed+0xb4>)
 80068c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c6:	f7f9 fcef 	bl	80002a8 <__aeabi_dsub>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4690      	mov	r8, r2
 80068d0:	4699      	mov	r9, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80068d8:	4614      	mov	r4, r2
 80068da:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	4b13      	ldr	r3, [pc, #76]	@ (8006930 <predict_decayed+0xb0>)
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7f9 fe96 	bl	8000618 <__aeabi_dmul>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4640      	mov	r0, r8
 80068f2:	4649      	mov	r1, r9
 80068f4:	f7f9 ffba 	bl	800086c <__aeabi_ddiv>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006904:	f7f9 fcd2 	bl	80002ac <__adddf3>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006910:	f7fa f912 	bl	8000b38 <__aeabi_dcmpgt>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <predict_decayed+0x9e>
	{
		has_decayed = true;
 800691a:	2301      	movs	r3, #1
 800691c:	77fb      	strb	r3, [r7, #31]
	}
	return has_decayed;
 800691e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w
 8006930:	40240000 	.word	0x40240000
 8006934:	9f7b5aea 	.word	0x9f7b5aea
 8006938:	4030aaaa 	.word	0x4030aaaa
 800693c:	00000000 	.word	0x00000000

08006940 <is_eclipsed>:

	/* Calculates if a position is eclipsed.  */
bool is_eclipsed(const double pos[3], const double sol[3], double *depth)
{
 8006940:	b5b0      	push	{r4, r5, r7, lr}
 8006942:	b096      	sub	sp, #88	@ 0x58
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
	double Rho[3], earth[3];

	/* Determine partial eclipse */
	double sd_earth = asin_(EARTH_RADIUS_KM_WGS84 / vec3_length(pos));
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f00b fc9a 	bl	8012286 <vec3_length>
 8006952:	ec53 2b10 	vmov	r2, r3, d0
 8006956:	a14c      	add	r1, pc, #304	@ (adr r1, 8006a88 <is_eclipsed+0x148>)
 8006958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800695c:	f7f9 ff86 	bl	800086c <__aeabi_ddiv>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	ec43 2b17 	vmov	d7, r2, r3
 8006968:	eeb0 0a47 	vmov.f32	s0, s14
 800696c:	eef0 0a67 	vmov.f32	s1, s15
 8006970:	f00c fd3a 	bl	80133e8 <asin_>
 8006974:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
	vec3_sub(sol, pos, Rho);
 8006978:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800697c:	461a      	mov	r2, r3
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	68b8      	ldr	r0, [r7, #8]
 8006982:	f00b fd3e 	bl	8012402 <vec3_sub>
	double sd_sun = asin_(SOLAR_RADIUS_KM / vec3_length(Rho));
 8006986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800698a:	4618      	mov	r0, r3
 800698c:	f00b fc7b 	bl	8012286 <vec3_length>
 8006990:	ec53 2b10 	vmov	r2, r3, d0
 8006994:	a13e      	add	r1, pc, #248	@ (adr r1, 8006a90 <is_eclipsed+0x150>)
 8006996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800699a:	f7f9 ff67 	bl	800086c <__aeabi_ddiv>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	ec43 2b17 	vmov	d7, r2, r3
 80069a6:	eeb0 0a47 	vmov.f32	s0, s14
 80069aa:	eef0 0a67 	vmov.f32	s1, s15
 80069ae:	f00c fd1b 	bl	80133e8 <asin_>
 80069b2:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
	vec3_mul_scalar(pos, -1, earth);
 80069b6:	f107 0310 	add.w	r3, r7, #16
 80069ba:	4619      	mov	r1, r3
 80069bc:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8006a80 <is_eclipsed+0x140>
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f00b fce9 	bl	8012398 <vec3_mul_scalar>
	
	double delta = acos_( vec3_dot(sol, earth) / vec3_length(sol) / vec3_length(earth) );
 80069c6:	f107 0310 	add.w	r3, r7, #16
 80069ca:	4619      	mov	r1, r3
 80069cc:	68b8      	ldr	r0, [r7, #8]
 80069ce:	f00b fca3 	bl	8012318 <vec3_dot>
 80069d2:	ec55 4b10 	vmov	r4, r5, d0
 80069d6:	68b8      	ldr	r0, [r7, #8]
 80069d8:	f00b fc55 	bl	8012286 <vec3_length>
 80069dc:	ec53 2b10 	vmov	r2, r3, d0
 80069e0:	4620      	mov	r0, r4
 80069e2:	4629      	mov	r1, r5
 80069e4:	f7f9 ff42 	bl	800086c <__aeabi_ddiv>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4614      	mov	r4, r2
 80069ee:	461d      	mov	r5, r3
 80069f0:	f107 0310 	add.w	r3, r7, #16
 80069f4:	4618      	mov	r0, r3
 80069f6:	f00b fc46 	bl	8012286 <vec3_length>
 80069fa:	ec53 2b10 	vmov	r2, r3, d0
 80069fe:	4620      	mov	r0, r4
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7f9 ff33 	bl	800086c <__aeabi_ddiv>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	ec43 2b17 	vmov	d7, r2, r3
 8006a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8006a12:	eef0 0a67 	vmov.f32	s1, s15
 8006a16:	f00c fca7 	bl	8013368 <acos_>
 8006a1a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	*depth = sd_earth - sd_sun - delta;
 8006a1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006a26:	f7f9 fc3f 	bl	80002a8 <__aeabi_dsub>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4610      	mov	r0, r2
 8006a30:	4619      	mov	r1, r3
 8006a32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a36:	f7f9 fc37 	bl	80002a8 <__aeabi_dsub>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	e9c1 2300 	strd	r2, r3, [r1]

	if (sd_earth < sd_sun) return false;
 8006a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a48:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006a4c:	f7fa f856 	bl	8000afc <__aeabi_dcmplt>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <is_eclipsed+0x11a>
 8006a56:	2300      	movs	r3, #0
 8006a58:	e00e      	b.n	8006a78 <is_eclipsed+0x138>
	else if (*depth >= 0) return true;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	f7fa f85c 	bl	8000b24 <__aeabi_dcmpge>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <is_eclipsed+0x136>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <is_eclipsed+0x138>
	else return false;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3758      	adds	r7, #88	@ 0x58
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a80:	00000000 	.word	0x00000000
 8006a84:	bff00000 	.word	0xbff00000
 8006a88:	126e978d 	.word	0x126e978d
 8006a8c:	40b8ea23 	.word	0x40b8ea23
 8006a90:	00000000 	.word	0x00000000
 8006a94:	41253d80 	.word	0x41253d80

08006a98 <sdp4_init>:
 * \copyright GPLv2+
 **/
void deep_arg_dynamic_init(const struct _sdp4 *m, deep_arg_dynamic_t *deep_dyn);

void sdp4_init(const predict_orbital_elements_t *tle, struct _sdp4 *m)
{
 8006a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a9c:	b0ba      	sub	sp, #232	@ 0xe8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006aa2:	6239      	str	r1, [r7, #32]
	m->lunarTermsDone = 0;
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
	m->resonanceFlag = 0;
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	2200      	movs	r2, #0
 8006aae:	605a      	str	r2, [r3, #4]
	m->synchronousFlag = 0;
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	609a      	str	r2, [r3, #8]

	//Calculate old TLE field values as used in the original sdp4
	double temp_tle = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 8006ab6:	a3c9      	add	r3, pc, #804	@ (adr r3, 8006ddc <sdp4_init+0x344>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
	m->xnodeo = tle->right_ascension * M_PI / 180.0;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006ac6:	a3b6      	add	r3, pc, #728	@ (adr r3, 8006da0 <sdp4_init+0x308>)
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f7f9 fda4 	bl	8000618 <__aeabi_dmul>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	4bba      	ldr	r3, [pc, #744]	@ (8006dc8 <sdp4_init+0x330>)
 8006ade:	f7f9 fec5 	bl	800086c <__aeabi_ddiv>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	6a39      	ldr	r1, [r7, #32]
 8006ae8:	e9c1 23b0 	strd	r2, r3, [r1, #704]	@ 0x2c0
	m->omegao = tle->argument_of_perigee * M_PI / 180.0;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8006af2:	a3ab      	add	r3, pc, #684	@ (adr r3, 8006da0 <sdp4_init+0x308>)
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fd8e 	bl	8000618 <__aeabi_dmul>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4610      	mov	r0, r2
 8006b02:	4619      	mov	r1, r3
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	4baf      	ldr	r3, [pc, #700]	@ (8006dc8 <sdp4_init+0x330>)
 8006b0a:	f7f9 feaf 	bl	800086c <__aeabi_ddiv>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	6a39      	ldr	r1, [r7, #32]
 8006b14:	e9c1 23b2 	strd	r2, r3, [r1, #712]	@ 0x2c8
	m->xmo = tle->mean_anomaly * M_PI / 180.0;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006b1e:	a3a0      	add	r3, pc, #640	@ (adr r3, 8006da0 <sdp4_init+0x308>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fd78 	bl	8000618 <__aeabi_dmul>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	4ba4      	ldr	r3, [pc, #656]	@ (8006dc8 <sdp4_init+0x330>)
 8006b36:	f7f9 fe99 	bl	800086c <__aeabi_ddiv>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	6a39      	ldr	r1, [r7, #32]
 8006b40:	e9c1 23b4 	strd	r2, r3, [r1, #720]	@ 0x2d0
	m->xincl = tle->inclination * M_PI / 180.0;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b46:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006b4a:	a395      	add	r3, pc, #596	@ (adr r3, 8006da0 <sdp4_init+0x308>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fd62 	bl	8000618 <__aeabi_dmul>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	4b99      	ldr	r3, [pc, #612]	@ (8006dc8 <sdp4_init+0x330>)
 8006b62:	f7f9 fe83 	bl	800086c <__aeabi_ddiv>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	6a39      	ldr	r1, [r7, #32]
 8006b6c:	e9c1 23b6 	strd	r2, r3, [r1, #728]	@ 0x2d8
	m->eo = tle->eccentricity;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006b76:	6a39      	ldr	r1, [r7, #32]
 8006b78:	e9c1 23b8 	strd	r2, r3, [r1, #736]	@ 0x2e0
	m->xno = tle->mean_motion*temp_tle*MINUTES_PER_DAY;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8006b82:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8006b86:	f7f9 fd47 	bl	8000618 <__aeabi_dmul>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4619      	mov	r1, r3
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	4b8d      	ldr	r3, [pc, #564]	@ (8006dcc <sdp4_init+0x334>)
 8006b98:	f7f9 fd3e 	bl	8000618 <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	6a39      	ldr	r1, [r7, #32]
 8006ba2:	e9c1 23ba 	strd	r2, r3, [r1, #744]	@ 0x2e8
	m->bstar = tle->bstar_drag_term / AE;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8006bac:	6a39      	ldr	r1, [r7, #32]
 8006bae:	e9c1 23bc 	strd	r2, r3, [r1, #752]	@ 0x2f0
	m->epoch = 1000.0*tle->epoch_year + tle->epoch_day;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7f9 fcc4 	bl	8000544 <__aeabi_i2d>
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	4b83      	ldr	r3, [pc, #524]	@ (8006dd0 <sdp4_init+0x338>)
 8006bc2:	f7f9 fd29 	bl	8000618 <__aeabi_dmul>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006bd4:	f7f9 fb6a 	bl	80002ac <__adddf3>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	6a39      	ldr	r1, [r7, #32]
 8006bde:	e9c1 23be 	strd	r2, r3, [r1, #760]	@ 0x2f8

	/* Recover original mean motion (xnodp) and   */
	/* semimajor axis (aodp) from input elements. */
	double temp1, temp2, temp3, theta4, a1, a3ovk2, ao, c2, coef, coef1, x1m5th, xhdot1, del1, delo, eeta, eta, etasq, perigee, psisq, tsi, qoms24, s4, pinvsq;

	a1=pow(XKE/m->xno,TWO_THIRD);
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	e9d3 23ba 	ldrd	r2, r3, [r3, #744]	@ 0x2e8
 8006be8:	a16f      	add	r1, pc, #444	@ (adr r1, 8006da8 <sdp4_init+0x310>)
 8006bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bee:	f7f9 fe3d 	bl	800086c <__aeabi_ddiv>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	ec43 2b17 	vmov	d7, r2, r3
 8006bfa:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 8006db0 <sdp4_init+0x318>
 8006bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8006c02:	eef0 0a67 	vmov.f32	s1, s15
 8006c06:	f019 f889 	bl	801fd1c <pow>
 8006c0a:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8
	m->deep_arg.cosio=cos(m->xincl);
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	ed93 7bb6 	vldr	d7, [r3, #728]	@ 0x2d8
 8006c14:	eeb0 0a47 	vmov.f32	s0, s14
 8006c18:	eef0 0a67 	vmov.f32	s1, s15
 8006c1c:	f019 fab4 	bl	8020188 <cos>
 8006c20:	eeb0 7a40 	vmov.f32	s14, s0
 8006c24:	eef0 7a60 	vmov.f32	s15, s1
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
	m->deep_arg.theta2=m->deep_arg.cosio*m->deep_arg.cosio;
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8006c3a:	f7f9 fced 	bl	8000618 <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	6a39      	ldr	r1, [r7, #32]
 8006c44:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	m->x3thm1=3*m->deep_arg.theta2-1;
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	4b60      	ldr	r3, [pc, #384]	@ (8006dd4 <sdp4_init+0x33c>)
 8006c54:	f7f9 fce0 	bl	8000618 <__aeabi_dmul>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4619      	mov	r1, r3
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	4b5c      	ldr	r3, [pc, #368]	@ (8006dd8 <sdp4_init+0x340>)
 8006c66:	f7f9 fb1f 	bl	80002a8 <__aeabi_dsub>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	6a39      	ldr	r1, [r7, #32]
 8006c70:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->deep_arg.eosq=m->eo*m->eo;
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	e9d3 01b8 	ldrd	r0, r1, [r3, #736]	@ 0x2e0
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8006c80:	f7f9 fcca 	bl	8000618 <__aeabi_dmul>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	6a39      	ldr	r1, [r7, #32]
 8006c8a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	m->deep_arg.betao2=1-m->deep_arg.eosq;
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8006c94:	f04f 0000 	mov.w	r0, #0
 8006c98:	494f      	ldr	r1, [pc, #316]	@ (8006dd8 <sdp4_init+0x340>)
 8006c9a:	f7f9 fb05 	bl	80002a8 <__aeabi_dsub>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	6a39      	ldr	r1, [r7, #32]
 8006ca4:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	m->deep_arg.betao=sqrt(m->deep_arg.betao2);
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8006cae:	eeb0 0a47 	vmov.f32	s0, s14
 8006cb2:	eef0 0a67 	vmov.f32	s1, s15
 8006cb6:	f019 f8a1 	bl	801fdfc <sqrt>
 8006cba:	eeb0 7a40 	vmov.f32	s14, s0
 8006cbe:	eef0 7a60 	vmov.f32	s15, s1
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
	del1=1.5*CK2*m->x3thm1/(a1*a1*m->deep_arg.betao*m->deep_arg.betao2);
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006cce:	a33a      	add	r3, pc, #232	@ (adr r3, 8006db8 <sdp4_init+0x320>)
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f7f9 fca0 	bl	8000618 <__aeabi_dmul>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4614      	mov	r4, r2
 8006cde:	461d      	mov	r5, r3
 8006ce0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8006ce4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ce8:	f7f9 fc96 	bl	8000618 <__aeabi_dmul>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8006cfa:	f7f9 fc8d 	bl	8000618 <__aeabi_dmul>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4610      	mov	r0, r2
 8006d04:	4619      	mov	r1, r3
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8006d0c:	f7f9 fc84 	bl	8000618 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 fda8 	bl	800086c <__aeabi_ddiv>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	ao=a1*(1-del1*(0.5*TWO_THIRD+del1*(1+134/81*del1)));
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	4b2b      	ldr	r3, [pc, #172]	@ (8006dd8 <sdp4_init+0x340>)
 8006d2a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8006d2e:	f7f9 fabd 	bl	80002ac <__adddf3>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8006d3e:	f7f9 fc6b 	bl	8000618 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4610      	mov	r0, r2
 8006d48:	4619      	mov	r1, r3
 8006d4a:	a31d      	add	r3, pc, #116	@ (adr r3, 8006dc0 <sdp4_init+0x328>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f7f9 faac 	bl	80002ac <__adddf3>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8006d60:	f7f9 fc5a 	bl	8000618 <__aeabi_dmul>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	f04f 0000 	mov.w	r0, #0
 8006d6c:	491a      	ldr	r1, [pc, #104]	@ (8006dd8 <sdp4_init+0x340>)
 8006d6e:	f7f9 fa9b 	bl	80002a8 <__aeabi_dsub>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d7a:	f7f9 fc4d 	bl	8000618 <__aeabi_dmul>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
	delo=1.5*CK2*m->x3thm1/(ao*ao*m->deep_arg.betao*m->deep_arg.betao2);
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006d8c:	a30a      	add	r3, pc, #40	@ (adr r3, 8006db8 <sdp4_init+0x320>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fc41 	bl	8000618 <__aeabi_dmul>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4614      	mov	r4, r2
 8006d9c:	461d      	mov	r5, r3
 8006d9e:	e021      	b.n	8006de4 <sdp4_init+0x34c>
 8006da0:	54442d18 	.word	0x54442d18
 8006da4:	400921fb 	.word	0x400921fb
 8006da8:	d08dcacf 	.word	0xd08dcacf
 8006dac:	3fb309b5 	.word	0x3fb309b5
 8006db0:	55555555 	.word	0x55555555
 8006db4:	3fe55555 	.word	0x3fe55555
 8006db8:	cbb15878 	.word	0xcbb15878
 8006dbc:	3f4a9b3a 	.word	0x3f4a9b3a
 8006dc0:	55555555 	.word	0x55555555
 8006dc4:	3fd55555 	.word	0x3fd55555
 8006dc8:	40668000 	.word	0x40668000
 8006dcc:	40968000 	.word	0x40968000
 8006dd0:	408f4000 	.word	0x408f4000
 8006dd4:	40080000 	.word	0x40080000
 8006dd8:	3ff00000 	.word	0x3ff00000
 8006ddc:	1fbf7384 	.word	0x1fbf7384
 8006de0:	3ec96b0f 	.word	0x3ec96b0f
 8006de4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8006de8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006dec:	f7f9 fc14 	bl	8000618 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4610      	mov	r0, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8006dfe:	f7f9 fc0b 	bl	8000618 <__aeabi_dmul>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4610      	mov	r0, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8006e10:	f7f9 fc02 	bl	8000618 <__aeabi_dmul>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4620      	mov	r0, r4
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	f7f9 fd26 	bl	800086c <__aeabi_ddiv>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	m->deep_arg.xnodp=m->xno/(1+delo);
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	e9d3 45ba 	ldrd	r4, r5, [r3, #744]	@ 0x2e8
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	4b3d      	ldr	r3, [pc, #244]	@ (8006f28 <sdp4_init+0x490>)
 8006e34:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e38:	f7f9 fa38 	bl	80002ac <__adddf3>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4620      	mov	r0, r4
 8006e42:	4629      	mov	r1, r5
 8006e44:	f7f9 fd12 	bl	800086c <__aeabi_ddiv>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	6a39      	ldr	r1, [r7, #32]
 8006e4e:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
	m->deep_arg.aodp=ao/(1-delo);
 8006e52:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8006e56:	f04f 0000 	mov.w	r0, #0
 8006e5a:	4933      	ldr	r1, [pc, #204]	@ (8006f28 <sdp4_init+0x490>)
 8006e5c:	f7f9 fa24 	bl	80002a8 <__aeabi_dsub>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006e68:	f7f9 fd00 	bl	800086c <__aeabi_ddiv>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	6a39      	ldr	r1, [r7, #32]
 8006e72:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	/* For perigee below 156 km, the values */
	/* of s and qoms2t are altered.         */

	s4=S_DENSITY_PARAM;
 8006e76:	a326      	add	r3, pc, #152	@ (adr r3, 8006f10 <sdp4_init+0x478>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	qoms24=QOMS2T;
 8006e80:	a325      	add	r3, pc, #148	@ (adr r3, 8006f18 <sdp4_init+0x480>)
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	perigee=(m->deep_arg.aodp*(1-m->eo)-AE)*EARTH_RADIUS_KM_WGS84;
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8006e96:	f04f 0000 	mov.w	r0, #0
 8006e9a:	4923      	ldr	r1, [pc, #140]	@ (8006f28 <sdp4_init+0x490>)
 8006e9c:	f7f9 fa04 	bl	80002a8 <__aeabi_dsub>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 fbb6 	bl	8000618 <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <sdp4_init+0x490>)
 8006eba:	f7f9 f9f5 	bl	80002a8 <__aeabi_dsub>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	a316      	add	r3, pc, #88	@ (adr r3, 8006f20 <sdp4_init+0x488>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 fba4 	bl	8000618 <__aeabi_dmul>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

	if (perigee<156.0)
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	4b13      	ldr	r3, [pc, #76]	@ (8006f2c <sdp4_init+0x494>)
 8006ede:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8006ee2:	f7f9 fe0b 	bl	8000afc <__aeabi_dcmplt>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d062      	beq.n	8006fb2 <sdp4_init+0x51a>
	{
		if (perigee<=98.0)
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8006f30 <sdp4_init+0x498>)
 8006ef2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8006ef6:	f7f9 fe0b 	bl	8000b10 <__aeabi_dcmple>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01b      	beq.n	8006f38 <sdp4_init+0x4a0>
			s4=20.0;
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	4b0b      	ldr	r3, [pc, #44]	@ (8006f34 <sdp4_init+0x49c>)
 8006f06:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
 8006f0a:	e020      	b.n	8006f4e <sdp4_init+0x4b6>
 8006f0c:	f3af 8000 	nop.w
 8006f10:	0931012a 	.word	0x0931012a
 8006f14:	3ff03217 	.word	0x3ff03217
 8006f18:	f9b8574f 	.word	0xf9b8574f
 8006f1c:	3e2026c6 	.word	0x3e2026c6
 8006f20:	126e978d 	.word	0x126e978d
 8006f24:	40b8ea23 	.word	0x40b8ea23
 8006f28:	3ff00000 	.word	0x3ff00000
 8006f2c:	40638000 	.word	0x40638000
 8006f30:	40588000 	.word	0x40588000
 8006f34:	40340000 	.word	0x40340000
		else
			s4=perigee-78.0;
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	4bc4      	ldr	r3, [pc, #784]	@ (8007250 <sdp4_init+0x7b8>)
 8006f3e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8006f42:	f7f9 f9b1 	bl	80002a8 <__aeabi_dsub>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8

		qoms24=pow((120-s4)*AE/EARTH_RADIUS_KM_WGS84,4);
 8006f4e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	49bf      	ldr	r1, [pc, #764]	@ (8007254 <sdp4_init+0x7bc>)
 8006f58:	f7f9 f9a6 	bl	80002a8 <__aeabi_dsub>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4610      	mov	r0, r2
 8006f62:	4619      	mov	r1, r3
 8006f64:	a3b2      	add	r3, pc, #712	@ (adr r3, 8007230 <sdp4_init+0x798>)
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	f7f9 fc7f 	bl	800086c <__aeabi_ddiv>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	ec43 2b17 	vmov	d7, r2, r3
 8006f76:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 8007238 <sdp4_init+0x7a0>
 8006f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8006f7e:	eef0 0a67 	vmov.f32	s1, s15
 8006f82:	f018 fecb 	bl	801fd1c <pow>
 8006f86:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
		s4=s4/EARTH_RADIUS_KM_WGS84+AE;
 8006f8a:	a3a9      	add	r3, pc, #676	@ (adr r3, 8007230 <sdp4_init+0x798>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8006f94:	f7f9 fc6a 	bl	800086c <__aeabi_ddiv>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	4bac      	ldr	r3, [pc, #688]	@ (8007258 <sdp4_init+0x7c0>)
 8006fa6:	f7f9 f981 	bl	80002ac <__adddf3>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	}

	pinvsq=1/(m->deep_arg.aodp*m->deep_arg.aodp*m->deep_arg.betao2*m->deep_arg.betao2);
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8006fbe:	f7f9 fb2b 	bl	8000618 <__aeabi_dmul>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8006fd0:	f7f9 fb22 	bl	8000618 <__aeabi_dmul>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8006fe2:	f7f9 fb19 	bl	8000618 <__aeabi_dmul>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	f04f 0000 	mov.w	r0, #0
 8006fee:	499a      	ldr	r1, [pc, #616]	@ (8007258 <sdp4_init+0x7c0>)
 8006ff0:	f7f9 fc3c 	bl	800086c <__aeabi_ddiv>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	m->deep_arg.sing=sin(m->omegao);
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	ed93 7bb2 	vldr	d7, [r3, #712]	@ 0x2c8
 8007002:	eeb0 0a47 	vmov.f32	s0, s14
 8007006:	eef0 0a67 	vmov.f32	s1, s15
 800700a:	f019 f919 	bl	8020240 <sin>
 800700e:	eeb0 7a40 	vmov.f32	s14, s0
 8007012:	eef0 7a60 	vmov.f32	s15, s1
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
	m->deep_arg.cosg=cos(m->omegao);
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	ed93 7bb2 	vldr	d7, [r3, #712]	@ 0x2c8
 8007022:	eeb0 0a47 	vmov.f32	s0, s14
 8007026:	eef0 0a67 	vmov.f32	s1, s15
 800702a:	f019 f8ad 	bl	8020188 <cos>
 800702e:	eeb0 7a40 	vmov.f32	s14, s0
 8007032:	eef0 7a60 	vmov.f32	s15, s1
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
	tsi=1/(m->deep_arg.aodp-s4);
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8007042:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8007046:	f7f9 f92f 	bl	80002a8 <__aeabi_dsub>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	f04f 0000 	mov.w	r0, #0
 8007052:	4981      	ldr	r1, [pc, #516]	@ (8007258 <sdp4_init+0x7c0>)
 8007054:	f7f9 fc0a 	bl	800086c <__aeabi_ddiv>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	eta=m->deep_arg.aodp*m->eo*tsi;
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 800706c:	f7f9 fad4 	bl	8000618 <__aeabi_dmul>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007078:	f7f9 face 	bl	8000618 <__aeabi_dmul>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	etasq=eta*eta;
 8007084:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8007088:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800708c:	f7f9 fac4 	bl	8000618 <__aeabi_dmul>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	eeta=m->eo*eta;
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 800709e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80070a2:	f7f9 fab9 	bl	8000618 <__aeabi_dmul>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	psisq=fabs(1-etasq);
 80070ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	4968      	ldr	r1, [pc, #416]	@ (8007258 <sdp4_init+0x7c0>)
 80070b8:	f7f9 f8f6 	bl	80002a8 <__aeabi_dsub>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80070c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	coef=qoms24*pow(tsi,4);
 80070ca:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8007238 <sdp4_init+0x7a0>
 80070ce:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 80070d2:	f018 fe23 	bl	801fd1c <pow>
 80070d6:	ec53 2b10 	vmov	r2, r3, d0
 80070da:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80070de:	f7f9 fa9b 	bl	8000618 <__aeabi_dmul>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	coef1=coef/pow(psisq,3.5);
 80070ea:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8007240 <sdp4_init+0x7a8>
 80070ee:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 80070f2:	f018 fe13 	bl	801fd1c <pow>
 80070f6:	ec53 2b10 	vmov	r2, r3, d0
 80070fa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80070fe:	f7f9 fbb5 	bl	800086c <__aeabi_ddiv>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	c2=coef1*m->deep_arg.xnodp*(m->deep_arg.aodp*(1+1.5*etasq+eeta*(4+etasq))+0.75*CK2*tsi/psisq*m->x3thm1*(8+3*etasq*(8+etasq)));
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 8007110:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007114:	f7f9 fa80 	bl	8000618 <__aeabi_dmul>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	4b4c      	ldr	r3, [pc, #304]	@ (800725c <sdp4_init+0x7c4>)
 800712c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007130:	f7f9 fa72 	bl	8000618 <__aeabi_dmul>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4610      	mov	r0, r2
 800713a:	4619      	mov	r1, r3
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	4b45      	ldr	r3, [pc, #276]	@ (8007258 <sdp4_init+0x7c0>)
 8007142:	f7f9 f8b3 	bl	80002ac <__adddf3>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4690      	mov	r8, r2
 800714c:	4699      	mov	r9, r3
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	4b43      	ldr	r3, [pc, #268]	@ (8007260 <sdp4_init+0x7c8>)
 8007154:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007158:	f7f9 f8a8 	bl	80002ac <__adddf3>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4610      	mov	r0, r2
 8007162:	4619      	mov	r1, r3
 8007164:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007168:	f7f9 fa56 	bl	8000618 <__aeabi_dmul>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 f89a 	bl	80002ac <__adddf3>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4620      	mov	r0, r4
 800717e:	4629      	mov	r1, r5
 8007180:	f7f9 fa4a 	bl	8000618 <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4690      	mov	r8, r2
 800718a:	4699      	mov	r9, r3
 800718c:	a32e      	add	r3, pc, #184	@ (adr r3, 8007248 <sdp4_init+0x7b0>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007196:	f7f9 fa3f 	bl	8000618 <__aeabi_dmul>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80071a6:	f7f9 fb61 	bl	800086c <__aeabi_ddiv>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4610      	mov	r0, r2
 80071b0:	4619      	mov	r1, r3
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80071b8:	f7f9 fa2e 	bl	8000618 <__aeabi_dmul>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4692      	mov	sl, r2
 80071c2:	469b      	mov	fp, r3
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	4b26      	ldr	r3, [pc, #152]	@ (8007264 <sdp4_init+0x7cc>)
 80071ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80071ce:	f7f9 fa23 	bl	8000618 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4614      	mov	r4, r2
 80071d8:	461d      	mov	r5, r3
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	4b22      	ldr	r3, [pc, #136]	@ (8007268 <sdp4_init+0x7d0>)
 80071e0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80071e4:	f7f9 f862 	bl	80002ac <__adddf3>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 fa12 	bl	8000618 <__aeabi_dmul>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4610      	mov	r0, r2
 80071fa:	4619      	mov	r1, r3
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	4b19      	ldr	r3, [pc, #100]	@ (8007268 <sdp4_init+0x7d0>)
 8007202:	f7f9 f853 	bl	80002ac <__adddf3>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4650      	mov	r0, sl
 800720c:	4659      	mov	r1, fp
 800720e:	f7f9 fa03 	bl	8000618 <__aeabi_dmul>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4640      	mov	r0, r8
 8007218:	4649      	mov	r1, r9
 800721a:	f7f9 f847 	bl	80002ac <__adddf3>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007226:	f7f9 f9f7 	bl	8000618 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	e01e      	b.n	800726c <sdp4_init+0x7d4>
 800722e:	bf00      	nop
 8007230:	126e978d 	.word	0x126e978d
 8007234:	40b8ea23 	.word	0x40b8ea23
 8007238:	00000000 	.word	0x00000000
 800723c:	40100000 	.word	0x40100000
 8007240:	00000000 	.word	0x00000000
 8007244:	400c0000 	.word	0x400c0000
 8007248:	cbb15878 	.word	0xcbb15878
 800724c:	3f3a9b3a 	.word	0x3f3a9b3a
 8007250:	40538000 	.word	0x40538000
 8007254:	405e0000 	.word	0x405e0000
 8007258:	3ff00000 	.word	0x3ff00000
 800725c:	3ff80000 	.word	0x3ff80000
 8007260:	40100000 	.word	0x40100000
 8007264:	40080000 	.word	0x40080000
 8007268:	40200000 	.word	0x40200000
 800726c:	460b      	mov	r3, r1
 800726e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	m->c1=m->bstar*c2;
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	e9d3 01bc 	ldrd	r0, r1, [r3, #752]	@ 0x2f0
 8007278:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800727c:	f7f9 f9cc 	bl	8000618 <__aeabi_dmul>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	6a39      	ldr	r1, [r7, #32]
 8007286:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->deep_arg.sinio=sin(m->xincl);
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	ed93 7bb6 	vldr	d7, [r3, #728]	@ 0x2d8
 8007290:	eeb0 0a47 	vmov.f32	s0, s14
 8007294:	eef0 0a67 	vmov.f32	s1, s15
 8007298:	f018 ffd2 	bl	8020240 <sin>
 800729c:	eeb0 7a40 	vmov.f32	s14, s0
 80072a0:	eef0 7a60 	vmov.f32	s15, s1
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
	a3ovk2=-J3_HARMONIC_WGS72/CK2*pow(AE,3);
 80072aa:	a3d2      	add	r3, pc, #840	@ (adr r3, 80075f4 <sdp4_init+0xb5c>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	m->x1mth2=1-m->deep_arg.theta2;
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80072ba:	f04f 0000 	mov.w	r0, #0
 80072be:	49c8      	ldr	r1, [pc, #800]	@ (80075e0 <sdp4_init+0xb48>)
 80072c0:	f7f8 fff2 	bl	80002a8 <__aeabi_dsub>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	6a39      	ldr	r1, [r7, #32]
 80072ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->c4=2*m->deep_arg.xnodp*coef1*m->deep_arg.aodp*m->deep_arg.betao2*(eta*(2+0.5*etasq)+m->eo*(0.5+2*etasq)-2*CK2*tsi/(m->deep_arg.aodp*psisq)*(-3*m->x3thm1*(1-2*eeta+etasq*(1.5-0.5*eeta))+0.75*m->x1mth2*(2*etasq-eeta*(1+etasq))*cos(2*m->omegao)));
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	f7f8 ffe8 	bl	80002ac <__adddf3>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80072e8:	f7f9 f996 	bl	8000618 <__aeabi_dmul>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4610      	mov	r0, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80072fa:	f7f9 f98d 	bl	8000618 <__aeabi_dmul>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4610      	mov	r0, r2
 8007304:	4619      	mov	r1, r3
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800730c:	f7f9 f984 	bl	8000618 <__aeabi_dmul>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	4bb1      	ldr	r3, [pc, #708]	@ (80075e4 <sdp4_init+0xb4c>)
 800731e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007322:	f7f9 f979 	bl	8000618 <__aeabi_dmul>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4610      	mov	r0, r2
 800732c:	4619      	mov	r1, r3
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007336:	f7f8 ffb9 	bl	80002ac <__adddf3>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4610      	mov	r0, r2
 8007340:	4619      	mov	r1, r3
 8007342:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8007346:	f7f9 f967 	bl	8000618 <__aeabi_dmul>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4690      	mov	r8, r2
 8007350:	4699      	mov	r9, r3
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	e9d3 45b8 	ldrd	r4, r5, [r3, #736]	@ 0x2e0
 8007358:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	f7f8 ffa4 	bl	80002ac <__adddf3>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4610      	mov	r0, r2
 800736a:	4619      	mov	r1, r3
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	4b9c      	ldr	r3, [pc, #624]	@ (80075e4 <sdp4_init+0xb4c>)
 8007372:	f7f8 ff9b 	bl	80002ac <__adddf3>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4620      	mov	r0, r4
 800737c:	4629      	mov	r1, r5
 800737e:	f7f9 f94b 	bl	8000618 <__aeabi_dmul>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4640      	mov	r0, r8
 8007388:	4649      	mov	r1, r9
 800738a:	f7f8 ff8f 	bl	80002ac <__adddf3>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007396:	a38a      	add	r3, pc, #552	@ (adr r3, 80075c0 <sdp4_init+0xb28>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80073a0:	f7f9 f93a 	bl	8000618 <__aeabi_dmul>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4614      	mov	r4, r2
 80073aa:	461d      	mov	r5, r3
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80073b2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80073b6:	f7f9 f92f 	bl	8000618 <__aeabi_dmul>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4620      	mov	r0, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f9 fa53 	bl	800086c <__aeabi_ddiv>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	e9c7 2300 	strd	r2, r3, [r7]
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	4b83      	ldr	r3, [pc, #524]	@ (80075e8 <sdp4_init+0xb50>)
 80073da:	f7f9 f91d 	bl	8000618 <__aeabi_dmul>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4690      	mov	r8, r2
 80073e4:	4699      	mov	r9, r3
 80073e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	f7f8 ff5d 	bl	80002ac <__adddf3>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	f04f 0000 	mov.w	r0, #0
 80073fa:	4979      	ldr	r1, [pc, #484]	@ (80075e0 <sdp4_init+0xb48>)
 80073fc:	f7f8 ff54 	bl	80002a8 <__aeabi_dsub>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4614      	mov	r4, r2
 8007406:	461d      	mov	r5, r3
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	4b75      	ldr	r3, [pc, #468]	@ (80075e4 <sdp4_init+0xb4c>)
 800740e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007412:	f7f9 f901 	bl	8000618 <__aeabi_dmul>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	f04f 0000 	mov.w	r0, #0
 800741e:	4973      	ldr	r1, [pc, #460]	@ (80075ec <sdp4_init+0xb54>)
 8007420:	f7f8 ff42 	bl	80002a8 <__aeabi_dsub>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4610      	mov	r0, r2
 800742a:	4619      	mov	r1, r3
 800742c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007430:	f7f9 f8f2 	bl	8000618 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4620      	mov	r0, r4
 800743a:	4629      	mov	r1, r5
 800743c:	f7f8 ff36 	bl	80002ac <__adddf3>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4640      	mov	r0, r8
 8007446:	4649      	mov	r1, r9
 8007448:	f7f9 f8e6 	bl	8000618 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4692      	mov	sl, r2
 8007452:	469b      	mov	fp, r3
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	4b64      	ldr	r3, [pc, #400]	@ (80075f0 <sdp4_init+0xb58>)
 8007460:	f7f9 f8da 	bl	8000618 <__aeabi_dmul>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4690      	mov	r8, r2
 800746a:	4699      	mov	r9, r3
 800746c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	f7f8 ff1a 	bl	80002ac <__adddf3>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4614      	mov	r4, r2
 800747e:	461d      	mov	r5, r3
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	4b56      	ldr	r3, [pc, #344]	@ (80075e0 <sdp4_init+0xb48>)
 8007486:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800748a:	f7f8 ff0f 	bl	80002ac <__adddf3>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4610      	mov	r0, r2
 8007494:	4619      	mov	r1, r3
 8007496:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800749a:	f7f9 f8bd 	bl	8000618 <__aeabi_dmul>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4620      	mov	r0, r4
 80074a4:	4629      	mov	r1, r5
 80074a6:	f7f8 feff 	bl	80002a8 <__aeabi_dsub>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4640      	mov	r0, r8
 80074b0:	4649      	mov	r1, r9
 80074b2:	f7f9 f8b1 	bl	8000618 <__aeabi_dmul>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4614      	mov	r4, r2
 80074bc:	461d      	mov	r5, r3
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	@ 0x2c8
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	f7f8 fef0 	bl	80002ac <__adddf3>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	ec43 2b17 	vmov	d7, r2, r3
 80074d4:	eeb0 0a47 	vmov.f32	s0, s14
 80074d8:	eef0 0a67 	vmov.f32	s1, s15
 80074dc:	f018 fe54 	bl	8020188 <cos>
 80074e0:	ec53 2b10 	vmov	r2, r3, d0
 80074e4:	4620      	mov	r0, r4
 80074e6:	4629      	mov	r1, r5
 80074e8:	f7f9 f896 	bl	8000618 <__aeabi_dmul>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4650      	mov	r0, sl
 80074f2:	4659      	mov	r1, fp
 80074f4:	f7f8 feda 	bl	80002ac <__adddf3>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007500:	f7f9 f88a 	bl	8000618 <__aeabi_dmul>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800750c:	f7f8 fecc 	bl	80002a8 <__aeabi_dsub>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007518:	f7f9 f87e 	bl	8000618 <__aeabi_dmul>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	6a39      	ldr	r1, [r7, #32]
 8007522:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	theta4=m->deep_arg.theta2*m->deep_arg.theta2;
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8007532:	f7f9 f871 	bl	8000618 <__aeabi_dmul>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp1=3*CK2*pinvsq*m->deep_arg.xnodp;
 800753e:	a322      	add	r3, pc, #136	@ (adr r3, 80075c8 <sdp4_init+0xb30>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007548:	f7f9 f866 	bl	8000618 <__aeabi_dmul>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4610      	mov	r0, r2
 8007552:	4619      	mov	r1, r3
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800755a:	f7f9 f85d 	bl	8000618 <__aeabi_dmul>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp2=temp1*CK2*pinvsq;
 8007566:	a31a      	add	r3, pc, #104	@ (adr r3, 80075d0 <sdp4_init+0xb38>)
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007570:	f7f9 f852 	bl	8000618 <__aeabi_dmul>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800757c:	f7f9 f84c 	bl	8000618 <__aeabi_dmul>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	temp3=1.25*CK4*pinvsq*pinvsq*m->deep_arg.xnodp;
 8007588:	a313      	add	r3, pc, #76	@ (adr r3, 80075d8 <sdp4_init+0xb40>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007592:	f7f9 f841 	bl	8000618 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80075a2:	f7f9 f839 	bl	8000618 <__aeabi_dmul>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4610      	mov	r0, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80075b4:	f7f9 f830 	bl	8000618 <__aeabi_dmul>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	e01e      	b.n	80075fc <sdp4_init+0xb64>
 80075be:	bf00      	nop
 80075c0:	dd20e5a5 	.word	0xdd20e5a5
 80075c4:	3f51bcd1 	.word	0x3f51bcd1
 80075c8:	cbb15878 	.word	0xcbb15878
 80075cc:	3f5a9b3a 	.word	0x3f5a9b3a
 80075d0:	dd20e5a5 	.word	0xdd20e5a5
 80075d4:	3f41bcd1 	.word	0x3f41bcd1
 80075d8:	bdacda00 	.word	0xbdacda00
 80075dc:	3eaa0bd0 	.word	0x3eaa0bd0
 80075e0:	3ff00000 	.word	0x3ff00000
 80075e4:	3fe00000 	.word	0x3fe00000
 80075e8:	c0080000 	.word	0xc0080000
 80075ec:	3ff80000 	.word	0x3ff80000
 80075f0:	3fe80000 	.word	0x3fe80000
 80075f4:	f3add061 	.word	0xf3add061
 80075f8:	3f7335f7 	.word	0x3f7335f7
 80075fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	m->deep_arg.xmdot=m->deep_arg.xnodp+0.5*temp1*m->deep_arg.betao*m->x3thm1+0.0625*temp2*m->deep_arg.betao*(13-78*m->deep_arg.theta2+137*theta4);
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	@ 0xb8
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	4bc7      	ldr	r3, [pc, #796]	@ (8007928 <sdp4_init+0xe90>)
 800760c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007610:	f7f9 f802 	bl	8000618 <__aeabi_dmul>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4610      	mov	r0, r2
 800761a:	4619      	mov	r1, r3
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8007622:	f7f8 fff9 	bl	8000618 <__aeabi_dmul>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007634:	f7f8 fff0 	bl	8000618 <__aeabi_dmul>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4620      	mov	r0, r4
 800763e:	4629      	mov	r1, r5
 8007640:	f7f8 fe34 	bl	80002ac <__adddf3>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4614      	mov	r4, r2
 800764a:	461d      	mov	r5, r3
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	4bb6      	ldr	r3, [pc, #728]	@ (800792c <sdp4_init+0xe94>)
 8007652:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8007656:	f7f8 ffdf 	bl	8000618 <__aeabi_dmul>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8007668:	f7f8 ffd6 	bl	8000618 <__aeabi_dmul>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4690      	mov	r8, r2
 8007672:	4699      	mov	r9, r3
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	4bac      	ldr	r3, [pc, #688]	@ (8007930 <sdp4_init+0xe98>)
 8007680:	f7f8 ffca 	bl	8000618 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	f04f 0000 	mov.w	r0, #0
 800768c:	49a9      	ldr	r1, [pc, #676]	@ (8007934 <sdp4_init+0xe9c>)
 800768e:	f7f8 fe0b 	bl	80002a8 <__aeabi_dsub>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4692      	mov	sl, r2
 8007698:	469b      	mov	fp, r3
 800769a:	a39f      	add	r3, pc, #636	@ (adr r3, 8007918 <sdp4_init+0xe80>)
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80076a4:	f7f8 ffb8 	bl	8000618 <__aeabi_dmul>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4650      	mov	r0, sl
 80076ae:	4659      	mov	r1, fp
 80076b0:	f7f8 fdfc 	bl	80002ac <__adddf3>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4640      	mov	r0, r8
 80076ba:	4649      	mov	r1, r9
 80076bc:	f7f8 ffac 	bl	8000618 <__aeabi_dmul>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7f8 fdf0 	bl	80002ac <__adddf3>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	6a39      	ldr	r1, [r7, #32]
 80076d2:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	x1m5th=1-5*m->deep_arg.theta2;
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	4b95      	ldr	r3, [pc, #596]	@ (8007938 <sdp4_init+0xea0>)
 80076e2:	f7f8 ff99 	bl	8000618 <__aeabi_dmul>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	f04f 0000 	mov.w	r0, #0
 80076ee:	4993      	ldr	r1, [pc, #588]	@ (800793c <sdp4_init+0xea4>)
 80076f0:	f7f8 fdda 	bl	80002a8 <__aeabi_dsub>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	m->deep_arg.omgdot=-0.5*temp1*x1m5th+0.0625*temp2*(7-114*m->deep_arg.theta2+395*theta4)+temp3*(3-36*m->deep_arg.theta2+49*theta4);
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	4b8f      	ldr	r3, [pc, #572]	@ (8007940 <sdp4_init+0xea8>)
 8007702:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007706:	f7f8 ff87 	bl	8000618 <__aeabi_dmul>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4610      	mov	r0, r2
 8007710:	4619      	mov	r1, r3
 8007712:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007716:	f7f8 ff7f 	bl	8000618 <__aeabi_dmul>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4614      	mov	r4, r2
 8007720:	461d      	mov	r5, r3
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	4b81      	ldr	r3, [pc, #516]	@ (800792c <sdp4_init+0xe94>)
 8007728:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800772c:	f7f8 ff74 	bl	8000618 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4690      	mov	r8, r2
 8007736:	4699      	mov	r9, r3
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	4b80      	ldr	r3, [pc, #512]	@ (8007944 <sdp4_init+0xeac>)
 8007744:	f7f8 ff68 	bl	8000618 <__aeabi_dmul>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	f04f 0000 	mov.w	r0, #0
 8007750:	497d      	ldr	r1, [pc, #500]	@ (8007948 <sdp4_init+0xeb0>)
 8007752:	f7f8 fda9 	bl	80002a8 <__aeabi_dsub>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4692      	mov	sl, r2
 800775c:	469b      	mov	fp, r3
 800775e:	a370      	add	r3, pc, #448	@ (adr r3, 8007920 <sdp4_init+0xe88>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8007768:	f7f8 ff56 	bl	8000618 <__aeabi_dmul>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4650      	mov	r0, sl
 8007772:	4659      	mov	r1, fp
 8007774:	f7f8 fd9a 	bl	80002ac <__adddf3>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 ff4a 	bl	8000618 <__aeabi_dmul>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4620      	mov	r0, r4
 800778a:	4629      	mov	r1, r5
 800778c:	f7f8 fd8e 	bl	80002ac <__adddf3>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4614      	mov	r4, r2
 8007796:	461d      	mov	r5, r3
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	4b6a      	ldr	r3, [pc, #424]	@ (800794c <sdp4_init+0xeb4>)
 80077a4:	f7f8 ff38 	bl	8000618 <__aeabi_dmul>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	f04f 0000 	mov.w	r0, #0
 80077b0:	4967      	ldr	r1, [pc, #412]	@ (8007950 <sdp4_init+0xeb8>)
 80077b2:	f7f8 fd79 	bl	80002a8 <__aeabi_dsub>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4690      	mov	r8, r2
 80077bc:	4699      	mov	r9, r3
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	4b64      	ldr	r3, [pc, #400]	@ (8007954 <sdp4_init+0xebc>)
 80077c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80077c8:	f7f8 ff26 	bl	8000618 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f8 fd6a 	bl	80002ac <__adddf3>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4610      	mov	r0, r2
 80077de:	4619      	mov	r1, r3
 80077e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077e4:	f7f8 ff18 	bl	8000618 <__aeabi_dmul>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fd5c 	bl	80002ac <__adddf3>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	6a39      	ldr	r1, [r7, #32]
 80077fa:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	xhdot1=-temp1*m->deep_arg.cosio;
 80077fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007800:	61bb      	str	r3, [r7, #24]
 8007802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007804:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8007810:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007814:	f7f8 ff00 	bl	8000618 <__aeabi_dmul>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	m->deep_arg.xnodot=xhdot1+(0.5*temp2*(4-19*m->deep_arg.theta2)+2*temp3*(3-7*m->deep_arg.theta2))*m->deep_arg.cosio;
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	4b40      	ldr	r3, [pc, #256]	@ (8007928 <sdp4_init+0xe90>)
 8007826:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800782a:	f7f8 fef5 	bl	8000618 <__aeabi_dmul>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4614      	mov	r4, r2
 8007834:	461d      	mov	r5, r3
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	4b45      	ldr	r3, [pc, #276]	@ (8007958 <sdp4_init+0xec0>)
 8007842:	f7f8 fee9 	bl	8000618 <__aeabi_dmul>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	f04f 0000 	mov.w	r0, #0
 800784e:	4943      	ldr	r1, [pc, #268]	@ (800795c <sdp4_init+0xec4>)
 8007850:	f7f8 fd2a 	bl	80002a8 <__aeabi_dsub>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f8 fedc 	bl	8000618 <__aeabi_dmul>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4614      	mov	r4, r2
 8007866:	461d      	mov	r5, r3
 8007868:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	f7f8 fd1c 	bl	80002ac <__adddf3>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4690      	mov	r8, r2
 800787a:	4699      	mov	r9, r3
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	4b30      	ldr	r3, [pc, #192]	@ (8007948 <sdp4_init+0xeb0>)
 8007888:	f7f8 fec6 	bl	8000618 <__aeabi_dmul>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	f04f 0000 	mov.w	r0, #0
 8007894:	492e      	ldr	r1, [pc, #184]	@ (8007950 <sdp4_init+0xeb8>)
 8007896:	f7f8 fd07 	bl	80002a8 <__aeabi_dsub>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	f7f8 feb9 	bl	8000618 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4620      	mov	r0, r4
 80078ac:	4629      	mov	r1, r5
 80078ae:	f7f8 fcfd 	bl	80002ac <__adddf3>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4610      	mov	r0, r2
 80078b8:	4619      	mov	r1, r3
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80078c0:	f7f8 feaa 	bl	8000618 <__aeabi_dmul>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4610      	mov	r0, r2
 80078ca:	4619      	mov	r1, r3
 80078cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078d0:	f7f8 fcec 	bl	80002ac <__adddf3>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	6a39      	ldr	r1, [r7, #32]
 80078da:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	m->xnodcf=3.5*m->deep_arg.betao2*xhdot1*m->c1;
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 80078e4:	f04f 0200 	mov.w	r2, #0
 80078e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007960 <sdp4_init+0xec8>)
 80078ea:	f7f8 fe95 	bl	8000618 <__aeabi_dmul>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4610      	mov	r0, r2
 80078f4:	4619      	mov	r1, r3
 80078f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078fa:	f7f8 fe8d 	bl	8000618 <__aeabi_dmul>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4610      	mov	r0, r2
 8007904:	4619      	mov	r1, r3
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800790c:	f7f8 fe84 	bl	8000618 <__aeabi_dmul>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	6a39      	ldr	r1, [r7, #32]
 8007916:	e025      	b.n	8007964 <sdp4_init+0xecc>
 8007918:	00000000 	.word	0x00000000
 800791c:	40612000 	.word	0x40612000
 8007920:	00000000 	.word	0x00000000
 8007924:	4078b000 	.word	0x4078b000
 8007928:	3fe00000 	.word	0x3fe00000
 800792c:	3fb00000 	.word	0x3fb00000
 8007930:	40538000 	.word	0x40538000
 8007934:	402a0000 	.word	0x402a0000
 8007938:	40140000 	.word	0x40140000
 800793c:	3ff00000 	.word	0x3ff00000
 8007940:	bfe00000 	.word	0xbfe00000
 8007944:	405c8000 	.word	0x405c8000
 8007948:	401c0000 	.word	0x401c0000
 800794c:	40420000 	.word	0x40420000
 8007950:	40080000 	.word	0x40080000
 8007954:	40488000 	.word	0x40488000
 8007958:	40330000 	.word	0x40330000
 800795c:	40100000 	.word	0x40100000
 8007960:	400c0000 	.word	0x400c0000
 8007964:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	m->t2cof=1.5*m->c1;
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	4b41      	ldr	r3, [pc, #260]	@ (8007a78 <sdp4_init+0xfe0>)
 8007974:	f7f8 fe50 	bl	8000618 <__aeabi_dmul>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	6a39      	ldr	r1, [r7, #32]
 800797e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	m->xlcof=0.125*a3ovk2*m->deep_arg.sinio*(3+5*m->deep_arg.cosio)/(1+m->deep_arg.cosio);
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800798a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800798e:	f7f8 fe43 	bl	8000618 <__aeabi_dmul>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4610      	mov	r0, r2
 8007998:	4619      	mov	r1, r3
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80079a0:	f7f8 fe3a 	bl	8000618 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4614      	mov	r4, r2
 80079aa:	461d      	mov	r5, r3
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	4b31      	ldr	r3, [pc, #196]	@ (8007a7c <sdp4_init+0xfe4>)
 80079b8:	f7f8 fe2e 	bl	8000618 <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007a80 <sdp4_init+0xfe8>)
 80079ca:	f7f8 fc6f 	bl	80002ac <__adddf3>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4620      	mov	r0, r4
 80079d4:	4629      	mov	r1, r5
 80079d6:	f7f8 fe1f 	bl	8000618 <__aeabi_dmul>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4614      	mov	r4, r2
 80079e0:	461d      	mov	r5, r3
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80079e8:	f04f 0200 	mov.w	r2, #0
 80079ec:	4b25      	ldr	r3, [pc, #148]	@ (8007a84 <sdp4_init+0xfec>)
 80079ee:	f7f8 fc5d 	bl	80002ac <__adddf3>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4620      	mov	r0, r4
 80079f8:	4629      	mov	r1, r5
 80079fa:	f7f8 ff37 	bl	800086c <__aeabi_ddiv>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	6a39      	ldr	r1, [r7, #32]
 8007a04:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	m->aycof=0.25*a3ovk2*m->deep_arg.sinio;
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8007a88 <sdp4_init+0xff0>)
 8007a0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8007a12:	f7f8 fe01 	bl	8000618 <__aeabi_dmul>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8007a24:	f7f8 fdf8 	bl	8000618 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	6a39      	ldr	r1, [r7, #32]
 8007a2e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	m->x7thm1=7*m->deep_arg.theta2-1;
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8007a38:	f04f 0200 	mov.w	r2, #0
 8007a3c:	4b13      	ldr	r3, [pc, #76]	@ (8007a8c <sdp4_init+0xff4>)
 8007a3e:	f7f8 fdeb 	bl	8000618 <__aeabi_dmul>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4610      	mov	r0, r2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a84 <sdp4_init+0xfec>)
 8007a50:	f7f8 fc2a 	bl	80002a8 <__aeabi_dsub>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	6a39      	ldr	r1, [r7, #32]
 8007a5a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	/* initialize Deep() */
	sdp4_deep_initialize(tle, m, &(m->deep_arg));
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	3358      	adds	r3, #88	@ 0x58
 8007a62:	461a      	mov	r2, r3
 8007a64:	6a39      	ldr	r1, [r7, #32]
 8007a66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a68:	f001 fa02 	bl	8008e70 <sdp4_deep_initialize>
}
 8007a6c:	bf00      	nop
 8007a6e:	37e8      	adds	r7, #232	@ 0xe8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a76:	bf00      	nop
 8007a78:	3ff80000 	.word	0x3ff80000
 8007a7c:	40140000 	.word	0x40140000
 8007a80:	40080000 	.word	0x40080000
 8007a84:	3ff00000 	.word	0x3ff00000
 8007a88:	3fd00000 	.word	0x3fd00000
 8007a8c:	401c0000 	.word	0x401c0000

08007a90 <sdp4_predict>:

void sdp4_predict(const struct _sdp4 *m, double tsince, struct model_output *output)
{
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007a9e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007aa2:	6018      	str	r0, [r3, #0]
 8007aa4:	463b      	mov	r3, r7
 8007aa6:	ed83 0b00 	vstr	d0, [r3]
 8007aaa:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007aae:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8007ab2:	6019      	str	r1, [r3, #0]
	temp2, temp3, temp4, temp5, temp6;
	double xnodek, xinck;

	/* Initialize dynamic part of deep_arg */
	deep_arg_dynamic_t deep_dyn;
	deep_arg_dynamic_init(m, &deep_dyn);
 8007ab4:	f107 0210 	add.w	r2, r7, #16
 8007ab8:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007abc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	f005 fa78 	bl	800cfb8 <deep_arg_dynamic_init>

	/* Update for secular gravity and atmospheric drag */
	xmdf=m->xmo+m->deep_arg.xmdot*tsince;
 8007ac8:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007acc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	e9d3 abb4 	ldrd	sl, fp, [r3, #720]	@ 0x2d0
 8007ad6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007ada:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f7f8 fd95 	bl	8000618 <__aeabi_dmul>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4650      	mov	r0, sl
 8007af4:	4659      	mov	r1, fp
 8007af6:	f7f8 fbd9 	bl	80002ac <__adddf3>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	deep_dyn.omgadf=m->omegao+m->deep_arg.omgdot*tsince;
 8007b02:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007b06:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	e9d3 abb2 	ldrd	sl, fp, [r3, #712]	@ 0x2c8
 8007b10:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007b14:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8007b1e:	463b      	mov	r3, r7
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f7f8 fd78 	bl	8000618 <__aeabi_dmul>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	4659      	mov	r1, fp
 8007b30:	f7f8 fbbc 	bl	80002ac <__adddf3>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007b3c:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8007b40:	e9c1 2302 	strd	r2, r3, [r1, #8]
	xnoddf=m->xnodeo+m->deep_arg.xnodot*tsince;
 8007b44:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007b48:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	e9d3 abb0 	ldrd	sl, fp, [r3, #704]	@ 0x2c0
 8007b52:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007b56:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 8007b60:	463b      	mov	r3, r7
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fd57 	bl	8000618 <__aeabi_dmul>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4650      	mov	r0, sl
 8007b70:	4659      	mov	r1, fp
 8007b72:	f7f8 fb9b 	bl	80002ac <__adddf3>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
	tsq=tsince*tsince;
 8007b7e:	463b      	mov	r3, r7
 8007b80:	4619      	mov	r1, r3
 8007b82:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b8a:	f7f8 fd45 	bl	8000618 <__aeabi_dmul>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
	deep_dyn.xnode=xnoddf+m->xnodcf*tsq;
 8007b96:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007b9a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007ba4:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 8007ba8:	f7f8 fd36 	bl	8000618 <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8007bb8:	f7f8 fb78 	bl	80002ac <__adddf3>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007bc4:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8007bc8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	tempa=1-m->c1*tsince;
 8007bcc:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007bd0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007bda:	463b      	mov	r3, r7
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fd1a 	bl	8000618 <__aeabi_dmul>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	f04f 0000 	mov.w	r0, #0
 8007bec:	49c4      	ldr	r1, [pc, #784]	@ (8007f00 <sdp4_predict+0x470>)
 8007bee:	f7f8 fb5b 	bl	80002a8 <__aeabi_dsub>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
	tempe=m->bstar*m->c4*tsince;
 8007bfa:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007bfe:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	e9d3 01bc 	ldrd	r0, r1, [r3, #752]	@ 0x2f0
 8007c08:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007c0c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007c16:	f7f8 fcff 	bl	8000618 <__aeabi_dmul>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4639      	mov	r1, r7
 8007c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c24:	f7f8 fcf8 	bl	8000618 <__aeabi_dmul>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	e9c7 2394 	strd	r2, r3, [r7, #592]	@ 0x250
	templ=m->t2cof*tsq;
 8007c30:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007c34:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007c3e:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8007c42:	f7f8 fce9 	bl	8000618 <__aeabi_dmul>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
	deep_dyn.xn=m->deep_arg.xnodp;
 8007c4e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007c52:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8007c5c:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007c60:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8007c64:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	/* Update for deep-space secular effects */
	deep_dyn.xll=xmdf;
 8007c68:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007c6c:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8007c70:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 8007c74:	e9c1 2300 	strd	r2, r3, [r1]
	deep_dyn.t=tsince;
 8007c78:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007c7c:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8007c80:	463b      	mov	r3, r7
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	sdp4_deep(m, DPSecular, &m->deep_arg, &deep_dyn);
 8007c8a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007c8e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8007c98:	f107 0310 	add.w	r3, r7, #16
 8007c9c:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007ca0:	f5a1 7021 	sub.w	r0, r1, #644	@ 0x284
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	6800      	ldr	r0, [r0, #0]
 8007ca8:	f005 f9b6 	bl	800d018 <sdp4_deep>

	xmdf=deep_dyn.xll;
 8007cac:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007cb0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
	a=pow(XKE/deep_dyn.xn,TWO_THIRD)*tempa*tempa;
 8007cbc:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007cc0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007cc4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007cc8:	a187      	add	r1, pc, #540	@ (adr r1, 8007ee8 <sdp4_predict+0x458>)
 8007cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cce:	f7f8 fdcd 	bl	800086c <__aeabi_ddiv>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	ec43 2b17 	vmov	d7, r2, r3
 8007cda:	ed9f 1b85 	vldr	d1, [pc, #532]	@ 8007ef0 <sdp4_predict+0x460>
 8007cde:	eeb0 0a47 	vmov.f32	s0, s14
 8007ce2:	eef0 0a67 	vmov.f32	s1, s15
 8007ce6:	f018 f819 	bl	801fd1c <pow>
 8007cea:	ec51 0b10 	vmov	r0, r1, d0
 8007cee:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8007cf2:	f7f8 fc91 	bl	8000618 <__aeabi_dmul>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8007cfe:	f7f8 fc8b 	bl	8000618 <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
	deep_dyn.em=deep_dyn.em-tempe;
 8007d0a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007d0e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007d12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007d16:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8007d1a:	f7f8 fac5 	bl	80002a8 <__aeabi_dsub>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007d26:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8007d2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	xmam=xmdf+m->deep_arg.xnodp*templ;
 8007d2e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007d32:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	@ 0xb8
 8007d3c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 8007d40:	f7f8 fc6a 	bl	8000618 <__aeabi_dmul>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8007d4c:	f7f8 faae 	bl	80002ac <__adddf3>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238

	/* Update for deep-space periodic effects */
	deep_dyn.xll=xmam;
 8007d58:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007d5c:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8007d60:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8007d64:	e9c1 2300 	strd	r2, r3, [r1]

	sdp4_deep(m, DPPeriodic,&m->deep_arg, &deep_dyn);
 8007d68:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007d6c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8007d76:	f107 0310 	add.w	r3, r7, #16
 8007d7a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007d7e:	f5a1 7021 	sub.w	r0, r1, #644	@ 0x284
 8007d82:	2102      	movs	r1, #2
 8007d84:	6800      	ldr	r0, [r0, #0]
 8007d86:	f005 f947 	bl	800d018 <sdp4_deep>

	xmam=deep_dyn.xll;
 8007d8a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007d8e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
	xl=xmam+deep_dyn.omgadf+deep_dyn.xnode;
 8007d9a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007d9e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007da2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007da6:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8007daa:	f7f8 fa7f 	bl	80002ac <__adddf3>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4610      	mov	r0, r2
 8007db4:	4619      	mov	r1, r3
 8007db6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007dba:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007dbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007dc2:	f7f8 fa73 	bl	80002ac <__adddf3>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
	beta=sqrt(1-deep_dyn.em*deep_dyn.em);
 8007dce:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007dd2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007dd6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007dda:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007dde:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007de2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007de6:	f7f8 fc17 	bl	8000618 <__aeabi_dmul>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	f04f 0000 	mov.w	r0, #0
 8007df2:	4943      	ldr	r1, [pc, #268]	@ (8007f00 <sdp4_predict+0x470>)
 8007df4:	f7f8 fa58 	bl	80002a8 <__aeabi_dsub>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	ec43 2b17 	vmov	d7, r2, r3
 8007e00:	eeb0 0a47 	vmov.f32	s0, s14
 8007e04:	eef0 0a67 	vmov.f32	s1, s15
 8007e08:	f017 fff8 	bl	801fdfc <sqrt>
 8007e0c:	ed87 0b8a 	vstr	d0, [r7, #552]	@ 0x228
	deep_dyn.xn=XKE/pow(a,1.5);
 8007e10:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8007ef8 <sdp4_predict+0x468>
 8007e14:	ed97 0b90 	vldr	d0, [r7, #576]	@ 0x240
 8007e18:	f017 ff80 	bl	801fd1c <pow>
 8007e1c:	ec53 2b10 	vmov	r2, r3, d0
 8007e20:	a131      	add	r1, pc, #196	@ (adr r1, 8007ee8 <sdp4_predict+0x458>)
 8007e22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e26:	f7f8 fd21 	bl	800086c <__aeabi_ddiv>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8007e32:	f5a1 7120 	sub.w	r1, r1, #640	@ 0x280
 8007e36:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	/* Long period periodics */
	axn=deep_dyn.em*cos(deep_dyn.omgadf);
 8007e3a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007e3e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007e42:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8007e46:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007e4a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007e4e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e52:	eeb0 0a47 	vmov.f32	s0, s14
 8007e56:	eef0 0a67 	vmov.f32	s1, s15
 8007e5a:	f018 f995 	bl	8020188 <cos>
 8007e5e:	ec53 2b10 	vmov	r2, r3, d0
 8007e62:	4650      	mov	r0, sl
 8007e64:	4659      	mov	r1, fp
 8007e66:	f7f8 fbd7 	bl	8000618 <__aeabi_dmul>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
	temp=1/(a*beta*beta);
 8007e72:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8007e76:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8007e7a:	f7f8 fbcd 	bl	8000618 <__aeabi_dmul>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4610      	mov	r0, r2
 8007e84:	4619      	mov	r1, r3
 8007e86:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8007e8a:	f7f8 fbc5 	bl	8000618 <__aeabi_dmul>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	491a      	ldr	r1, [pc, #104]	@ (8007f00 <sdp4_predict+0x470>)
 8007e98:	f7f8 fce8 	bl	800086c <__aeabi_ddiv>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	xll=temp*m->xlcof*axn;
 8007ea4:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007ea8:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007eb2:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8007eb6:	f7f8 fbaf 	bl	8000618 <__aeabi_dmul>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8007ec2:	f7f8 fba9 	bl	8000618 <__aeabi_dmul>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	aynl=temp*m->aycof;
 8007ece:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007ed2:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8007edc:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8007ee0:	e010      	b.n	8007f04 <sdp4_predict+0x474>
 8007ee2:	bf00      	nop
 8007ee4:	f3af 8000 	nop.w
 8007ee8:	d08dcacf 	.word	0xd08dcacf
 8007eec:	3fb309b5 	.word	0x3fb309b5
 8007ef0:	55555555 	.word	0x55555555
 8007ef4:	3fe55555 	.word	0x3fe55555
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	3ff80000 	.word	0x3ff80000
 8007f00:	3ff00000 	.word	0x3ff00000
 8007f04:	f7f8 fb88 	bl	8000618 <__aeabi_dmul>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
	xlt=xl+xll;
 8007f10:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8007f14:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8007f18:	f7f8 f9c8 	bl	80002ac <__adddf3>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	ayn=deep_dyn.em*sin(deep_dyn.omgadf)+aynl;
 8007f24:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007f28:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007f2c:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8007f30:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007f34:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007f38:	ed93 7b02 	vldr	d7, [r3, #8]
 8007f3c:	eeb0 0a47 	vmov.f32	s0, s14
 8007f40:	eef0 0a67 	vmov.f32	s1, s15
 8007f44:	f018 f97c 	bl	8020240 <sin>
 8007f48:	ec53 2b10 	vmov	r2, r3, d0
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	4659      	mov	r1, fp
 8007f50:	f7f8 fb62 	bl	8000618 <__aeabi_dmul>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8007f5c:	f7f8 f9a6 	bl	80002ac <__adddf3>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8

	/* Solve Kepler's Equation */
	capu=FMod2p(xlt-deep_dyn.xnode);
 8007f68:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8007f6c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007f70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007f74:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8007f78:	f7f8 f996 	bl	80002a8 <__aeabi_dsub>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	ec43 2b17 	vmov	d7, r2, r3
 8007f84:	eeb0 0a47 	vmov.f32	s0, s14
 8007f88:	eef0 0a67 	vmov.f32	s1, s15
 8007f8c:	f00a fa88 	bl	80124a0 <FMod2p>
 8007f90:	ed87 0b7c 	vstr	d0, [r7, #496]	@ 0x1f0
	temp2=capu;
 8007f94:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8007f98:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	i=0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c

	do
	{
		sinepw=sin(temp2);
 8007fa2:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8007fa6:	f018 f94b 	bl	8020240 <sin>
 8007faa:	ed87 0b7a 	vstr	d0, [r7, #488]	@ 0x1e8
		cosepw=cos(temp2);
 8007fae:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8007fb2:	f018 f8e9 	bl	8020188 <cos>
 8007fb6:	ed87 0b78 	vstr	d0, [r7, #480]	@ 0x1e0
		temp3=axn*sinepw;
 8007fba:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8007fbe:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8007fc2:	f7f8 fb29 	bl	8000618 <__aeabi_dmul>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		temp4=ayn*cosepw;
 8007fce:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8007fd2:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8007fd6:	f7f8 fb1f 	bl	8000618 <__aeabi_dmul>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
		temp5=axn*cosepw;
 8007fe2:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8007fe6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8007fea:	f7f8 fb15 	bl	8000618 <__aeabi_dmul>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
		temp6=ayn*sinepw;
 8007ff6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8007ffa:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8007ffe:	f7f8 fb0b 	bl	8000618 <__aeabi_dmul>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
		epw=(capu-temp4+temp3-temp2)/(1-temp5-temp6)+temp2;
 800800a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800800e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8008012:	f7f8 f949 	bl	80002a8 <__aeabi_dsub>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8008022:	f7f8 f943 	bl	80002ac <__adddf3>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4610      	mov	r0, r2
 800802c:	4619      	mov	r1, r3
 800802e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8008032:	f7f8 f939 	bl	80002a8 <__aeabi_dsub>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4692      	mov	sl, r2
 800803c:	469b      	mov	fp, r3
 800803e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	4920      	ldr	r1, [pc, #128]	@ (80080c8 <sdp4_predict+0x638>)
 8008048:	f7f8 f92e 	bl	80002a8 <__aeabi_dsub>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4610      	mov	r0, r2
 8008052:	4619      	mov	r1, r3
 8008054:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8008058:	f7f8 f926 	bl	80002a8 <__aeabi_dsub>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4650      	mov	r0, sl
 8008062:	4659      	mov	r1, fp
 8008064:	f7f8 fc02 	bl	800086c <__aeabi_ddiv>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8008070:	f7f8 f91c 	bl	80002ac <__adddf3>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8

		if (fabs(epw-temp2)<=E6A)
 800807c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8008080:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8008084:	f7f8 f910 	bl	80002a8 <__aeabi_dsub>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4690      	mov	r8, r2
 800808e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8008092:	a30b      	add	r3, pc, #44	@ (adr r3, 80080c0 <sdp4_predict+0x630>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 fd38 	bl	8000b10 <__aeabi_dcmple>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d112      	bne.n	80080cc <sdp4_predict+0x63c>
			break;

		temp2=epw;
 80080a6:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 80080aa:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280

	} while (i++<10);
 80080ae:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 80080b8:	2b09      	cmp	r3, #9
 80080ba:	f77f af72 	ble.w	8007fa2 <sdp4_predict+0x512>
 80080be:	e006      	b.n	80080ce <sdp4_predict+0x63e>
 80080c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80080c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80080c8:	3ff00000 	.word	0x3ff00000
			break;
 80080cc:	bf00      	nop

	/* Short period preliminary quantities */
	ecose=temp5+temp6;
 80080ce:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80080d2:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 80080d6:	f7f8 f8e9 	bl	80002ac <__adddf3>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
	esine=temp3-temp4;
 80080e2:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80080e6:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80080ea:	f7f8 f8dd 	bl	80002a8 <__aeabi_dsub>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
	elsq=axn*axn+ayn*ayn;
 80080f6:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 80080fa:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80080fe:	f7f8 fa8b 	bl	8000618 <__aeabi_dmul>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4690      	mov	r8, r2
 8008108:	4699      	mov	r9, r3
 800810a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 800810e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8008112:	f7f8 fa81 	bl	8000618 <__aeabi_dmul>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	f7f8 f8c5 	bl	80002ac <__adddf3>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
	temp=1-elsq;
 800812a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 800812e:	f04f 0000 	mov.w	r0, #0
 8008132:	49c5      	ldr	r1, [pc, #788]	@ (8008448 <sdp4_predict+0x9b8>)
 8008134:	f7f8 f8b8 	bl	80002a8 <__aeabi_dsub>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	pl=a*temp;
 8008140:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8008144:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8008148:	f7f8 fa66 	bl	8000618 <__aeabi_dmul>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
	r=a*(1-ecose);
 8008154:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8008158:	f04f 0000 	mov.w	r0, #0
 800815c:	49ba      	ldr	r1, [pc, #744]	@ (8008448 <sdp4_predict+0x9b8>)
 800815e:	f7f8 f8a3 	bl	80002a8 <__aeabi_dsub>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 800816a:	460e      	mov	r6, r1
 800816c:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8008170:	f7f8 fa52 	bl	8000618 <__aeabi_dmul>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	e9c6 2300 	strd	r2, r3, [r6]
	temp1=1/r;
 800817c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008180:	461e      	mov	r6, r3
 8008182:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f04f 0000 	mov.w	r0, #0
 800818e:	49ae      	ldr	r1, [pc, #696]	@ (8008448 <sdp4_predict+0x9b8>)
 8008190:	f7f8 fb6c 	bl	800086c <__aeabi_ddiv>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdot=XKE*sqrt(a)*esine*temp1;
 800819c:	ed97 0b90 	vldr	d0, [r7, #576]	@ 0x240
 80081a0:	f017 fe2c 	bl	801fdfc <sqrt>
 80081a4:	ec51 0b10 	vmov	r0, r1, d0
 80081a8:	a3a3      	add	r3, pc, #652	@ (adr r3, 8008438 <sdp4_predict+0x9a8>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 fa33 	bl	8000618 <__aeabi_dmul>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4610      	mov	r0, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80081be:	f7f8 fa2b 	bl	8000618 <__aeabi_dmul>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80081ca:	460e      	mov	r6, r1
 80081cc:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 80081d0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80081d4:	f7f8 fa20 	bl	8000618 <__aeabi_dmul>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	e9c6 2300 	strd	r2, r3, [r6]
	rfdot=XKE*sqrt(pl)*temp1;
 80081e0:	ed97 0b66 	vldr	d0, [r7, #408]	@ 0x198
 80081e4:	f017 fe0a 	bl	801fdfc <sqrt>
 80081e8:	ec51 0b10 	vmov	r0, r1, d0
 80081ec:	a392      	add	r3, pc, #584	@ (adr r3, 8008438 <sdp4_predict+0x9a8>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 fa11 	bl	8000618 <__aeabi_dmul>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80081fe:	460e      	mov	r6, r1
 8008200:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 8008204:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008208:	f7f8 fa06 	bl	8000618 <__aeabi_dmul>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=a*temp1;
 8008214:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008218:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800821c:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8008220:	f7f8 f9fa 	bl	8000618 <__aeabi_dmul>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	betal=sqrt(temp);
 800822c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008230:	461e      	mov	r6, r3
 8008232:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 8008236:	f017 fde1 	bl	801fdfc <sqrt>
 800823a:	ed86 0b00 	vstr	d0, [r6]
	temp3=1/(1+betal);
 800823e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008242:	4619      	mov	r1, r3
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	4b7f      	ldr	r3, [pc, #508]	@ (8008448 <sdp4_predict+0x9b8>)
 800824a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800824e:	f7f8 f82d 	bl	80002ac <__adddf3>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	f04f 0000 	mov.w	r0, #0
 800825a:	497b      	ldr	r1, [pc, #492]	@ (8008448 <sdp4_predict+0x9b8>)
 800825c:	f7f8 fb06 	bl	800086c <__aeabi_ddiv>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
	cosu=temp2*(cosepw-axn+ayn*esine*temp3);
 8008268:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 800826c:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8008270:	f7f8 f81a 	bl	80002a8 <__aeabi_dsub>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4690      	mov	r8, r2
 800827a:	4699      	mov	r9, r3
 800827c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8008280:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8008284:	f7f8 f9c8 	bl	8000618 <__aeabi_dmul>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4610      	mov	r0, r2
 800828e:	4619      	mov	r1, r3
 8008290:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8008294:	f7f8 f9c0 	bl	8000618 <__aeabi_dmul>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4640      	mov	r0, r8
 800829e:	4649      	mov	r1, r9
 80082a0:	f7f8 f804 	bl	80002ac <__adddf3>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80082ac:	460e      	mov	r6, r1
 80082ae:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 80082b2:	f7f8 f9b1 	bl	8000618 <__aeabi_dmul>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	e946 2302 	strd	r2, r3, [r6, #-8]
	sinu=temp2*(sinepw-ayn-axn*esine*temp3);
 80082be:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80082c2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80082c6:	f7f7 ffef 	bl	80002a8 <__aeabi_dsub>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4690      	mov	r8, r2
 80082d0:	4699      	mov	r9, r3
 80082d2:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80082d6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80082da:	f7f8 f99d 	bl	8000618 <__aeabi_dmul>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4610      	mov	r0, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 80082ea:	f7f8 f995 	bl	8000618 <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4640      	mov	r0, r8
 80082f4:	4649      	mov	r1, r9
 80082f6:	f7f7 ffd7 	bl	80002a8 <__aeabi_dsub>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8008302:	460e      	mov	r6, r1
 8008304:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8008308:	f7f8 f986 	bl	8000618 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	e9c6 2300 	strd	r2, r3, [r6]
	u=atan2(sinu,cosu);
 8008314:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8008318:	461e      	mov	r6, r3
 800831a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800831e:	461a      	mov	r2, r3
 8008320:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8008324:	ed12 1b02 	vldr	d1, [r2, #-8]
 8008328:	ed93 0b00 	vldr	d0, [r3]
 800832c:	f017 fc3c 	bl	801fba8 <atan2>
 8008330:	ed06 0b02 	vstr	d0, [r6, #-8]
	sin2u=2*sinu*cosu;
 8008334:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8008338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	f7f7 ffb4 	bl	80002ac <__adddf3>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800834c:	460e      	mov	r6, r1
 800834e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8008352:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008356:	f7f8 f95f 	bl	8000618 <__aeabi_dmul>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	e9c6 2300 	strd	r2, r3, [r6]
	cos2u=2*cosu*cosu-1;
 8008362:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8008366:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	f7f7 ff9d 	bl	80002ac <__adddf3>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4610      	mov	r0, r2
 8008378:	4619      	mov	r1, r3
 800837a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800837e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008382:	f7f8 f949 	bl	8000618 <__aeabi_dmul>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008392:	461e      	mov	r6, r3
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	4b2b      	ldr	r3, [pc, #172]	@ (8008448 <sdp4_predict+0x9b8>)
 800839a:	f7f7 ff85 	bl	80002a8 <__aeabi_dsub>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp=1/pl;
 80083a6:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 80083aa:	f04f 0000 	mov.w	r0, #0
 80083ae:	4926      	ldr	r1, [pc, #152]	@ (8008448 <sdp4_predict+0x9b8>)
 80083b0:	f7f8 fa5c 	bl	800086c <__aeabi_ddiv>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	temp1=CK2*temp;
 80083bc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80083c0:	461e      	mov	r6, r3
 80083c2:	a31f      	add	r3, pc, #124	@ (adr r3, 8008440 <sdp4_predict+0x9b0>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80083cc:	f7f8 f924 	bl	8000618 <__aeabi_dmul>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=temp1*temp;
 80083d8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80083dc:	4619      	mov	r1, r3
 80083de:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 80083e2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80083e6:	f7f8 f917 	bl	8000618 <__aeabi_dmul>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280

	/* Update for short periodics */
	rk=r*(1-1.5*temp2*betal*m->x3thm1)+0.5*temp1*m->x1mth2*cos2u;
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	4b15      	ldr	r3, [pc, #84]	@ (800844c <sdp4_predict+0x9bc>)
 80083f8:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 80083fc:	f7f8 f90c 	bl	8000618 <__aeabi_dmul>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f8 f902 	bl	8000618 <__aeabi_dmul>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4610      	mov	r0, r2
 800841a:	4619      	mov	r1, r3
 800841c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8008420:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800842a:	f7f8 f8f5 	bl	8000618 <__aeabi_dmul>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	e00b      	b.n	8008450 <sdp4_predict+0x9c0>
 8008438:	d08dcacf 	.word	0xd08dcacf
 800843c:	3fb309b5 	.word	0x3fb309b5
 8008440:	dd20e5a5 	.word	0xdd20e5a5
 8008444:	3f41bcd1 	.word	0x3f41bcd1
 8008448:	3ff00000 	.word	0x3ff00000
 800844c:	3ff80000 	.word	0x3ff80000
 8008450:	49d2      	ldr	r1, [pc, #840]	@ (800879c <sdp4_predict+0xd0c>)
 8008452:	f7f7 ff29 	bl	80002a8 <__aeabi_dsub>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4610      	mov	r0, r2
 800845c:	4619      	mov	r1, r3
 800845e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f7f8 f8d7 	bl	8000618 <__aeabi_dmul>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4690      	mov	r8, r2
 8008470:	4699      	mov	r9, r3
 8008472:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008476:	4619      	mov	r1, r3
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	4bc8      	ldr	r3, [pc, #800]	@ (80087a0 <sdp4_predict+0xd10>)
 800847e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008482:	f7f8 f8c9 	bl	8000618 <__aeabi_dmul>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4610      	mov	r0, r2
 800848c:	4619      	mov	r1, r3
 800848e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8008492:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800849c:	f7f8 f8bc 	bl	8000618 <__aeabi_dmul>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4610      	mov	r0, r2
 80084a6:	4619      	mov	r1, r3
 80084a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80084ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084b0:	f7f8 f8b2 	bl	8000618 <__aeabi_dmul>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80084bc:	460e      	mov	r6, r1
 80084be:	4640      	mov	r0, r8
 80084c0:	4649      	mov	r1, r9
 80084c2:	f7f7 fef3 	bl	80002ac <__adddf3>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	e9c6 2300 	strd	r2, r3, [r6]
	uk=u-0.25*temp2*m->x7thm1*sin2u;
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	4bb4      	ldr	r3, [pc, #720]	@ (80087a4 <sdp4_predict+0xd14>)
 80084d4:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 80084d8:	f7f8 f89e 	bl	8000618 <__aeabi_dmul>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4610      	mov	r0, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80084e8:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80084f2:	f7f8 f891 	bl	8000618 <__aeabi_dmul>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4610      	mov	r0, r2
 80084fc:	4619      	mov	r1, r3
 80084fe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f8 f887 	bl	8000618 <__aeabi_dmul>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8008512:	460e      	mov	r6, r1
 8008514:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8008518:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800851c:	f7f7 fec4 	bl	80002a8 <__aeabi_dsub>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	e946 2302 	strd	r2, r3, [r6, #-8]
	xnodek=deep_dyn.xnode+1.5*temp2*m->deep_arg.cosio*sin2u;
 8008528:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800852c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8008530:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	4b9b      	ldr	r3, [pc, #620]	@ (80087a8 <sdp4_predict+0xd18>)
 800853a:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800853e:	f7f8 f86b 	bl	8000618 <__aeabi_dmul>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4610      	mov	r0, r2
 8008548:	4619      	mov	r1, r3
 800854a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800854e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8008558:	f7f8 f85e 	bl	8000618 <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4610      	mov	r0, r2
 8008562:	4619      	mov	r1, r3
 8008564:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f7f8 f854 	bl	8000618 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8008578:	460e      	mov	r6, r1
 800857a:	4640      	mov	r0, r8
 800857c:	4649      	mov	r1, r9
 800857e:	f7f7 fe95 	bl	80002ac <__adddf3>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	e9c6 2300 	strd	r2, r3, [r6]
	xinck=deep_dyn.xinc+1.5*temp2*m->deep_arg.cosio*m->deep_arg.sinio*cos2u;
 800858a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800858e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8008592:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	4b83      	ldr	r3, [pc, #524]	@ (80087a8 <sdp4_predict+0xd18>)
 800859c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 80085a0:	f7f8 f83a 	bl	8000618 <__aeabi_dmul>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4610      	mov	r0, r2
 80085aa:	4619      	mov	r1, r3
 80085ac:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80085b0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80085ba:	f7f8 f82d 	bl	8000618 <__aeabi_dmul>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	4610      	mov	r0, r2
 80085c4:	4619      	mov	r1, r3
 80085c6:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80085ca:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80085d4:	f7f8 f820 	bl	8000618 <__aeabi_dmul>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4610      	mov	r0, r2
 80085de:	4619      	mov	r1, r3
 80085e0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80085e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085e8:	f7f8 f816 	bl	8000618 <__aeabi_dmul>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80085f4:	460e      	mov	r6, r1
 80085f6:	4640      	mov	r0, r8
 80085f8:	4649      	mov	r1, r9
 80085fa:	f7f7 fe57 	bl	80002ac <__adddf3>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdotk=rdot-deep_dyn.xn*temp1*m->x1mth2*sin2u;
 8008606:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800860a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800860e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008612:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008616:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800861a:	f7f7 fffd 	bl	8000618 <__aeabi_dmul>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4610      	mov	r0, r2
 8008624:	4619      	mov	r1, r3
 8008626:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800862a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008634:	f7f7 fff0 	bl	8000618 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4610      	mov	r0, r2
 800863e:	4619      	mov	r1, r3
 8008640:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f7f7 ffe6 	bl	8000618 <__aeabi_dmul>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8008654:	460e      	mov	r6, r1
 8008656:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800865a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865e:	f7f7 fe23 	bl	80002a8 <__aeabi_dsub>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	e9c6 2300 	strd	r2, r3, [r6]
	rfdotk=rfdot+deep_dyn.xn*temp1*(m->x1mth2*cos2u+1.5*m->x3thm1);
 800866a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800866e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8008672:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008676:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800867a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800867e:	f7f7 ffcb 	bl	8000618 <__aeabi_dmul>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4690      	mov	r8, r2
 8008688:	4699      	mov	r9, r3
 800868a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800868e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008698:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800869c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086a0:	f7f7 ffba 	bl	8000618 <__aeabi_dmul>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4692      	mov	sl, r2
 80086aa:	469b      	mov	fp, r3
 80086ac:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80086b0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	4b3a      	ldr	r3, [pc, #232]	@ (80087a8 <sdp4_predict+0xd18>)
 80086c0:	f7f7 ffaa 	bl	8000618 <__aeabi_dmul>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4650      	mov	r0, sl
 80086ca:	4659      	mov	r1, fp
 80086cc:	f7f7 fdee 	bl	80002ac <__adddf3>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4640      	mov	r0, r8
 80086d6:	4649      	mov	r1, r9
 80086d8:	f7f7 ff9e 	bl	8000618 <__aeabi_dmul>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80086e4:	460e      	mov	r6, r1
 80086e6:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80086ea:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80086ee:	f7f7 fddd 	bl	80002ac <__adddf3>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	e946 2302 	strd	r2, r3, [r6, #-8]

	/* Orientation vectors */
	sinuk=sin(uk);
 80086fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80086fe:	461e      	mov	r6, r3
 8008700:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008704:	ed13 0b02 	vldr	d0, [r3, #-8]
 8008708:	f017 fd9a 	bl	8020240 <sin>
 800870c:	ed86 0b00 	vstr	d0, [r6]
	cosuk=cos(uk);
 8008710:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008714:	461e      	mov	r6, r3
 8008716:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800871a:	ed13 0b02 	vldr	d0, [r3, #-8]
 800871e:	f017 fd33 	bl	8020188 <cos>
 8008722:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinik=sin(xinck);
 8008726:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800872a:	461e      	mov	r6, r3
 800872c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008730:	ed13 0b02 	vldr	d0, [r3, #-8]
 8008734:	f017 fd84 	bl	8020240 <sin>
 8008738:	ed86 0b00 	vstr	d0, [r6]
	cosik=cos(xinck);
 800873c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008740:	461e      	mov	r6, r3
 8008742:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008746:	ed13 0b02 	vldr	d0, [r3, #-8]
 800874a:	f017 fd1d 	bl	8020188 <cos>
 800874e:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinnok=sin(xnodek);
 8008752:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8008756:	461e      	mov	r6, r3
 8008758:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800875c:	ed93 0b00 	vldr	d0, [r3]
 8008760:	f017 fd6e 	bl	8020240 <sin>
 8008764:	ed86 0b00 	vstr	d0, [r6]
	cosnok=cos(xnodek);
 8008768:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800876c:	461e      	mov	r6, r3
 800876e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008772:	ed93 0b00 	vldr	d0, [r3]
 8008776:	f017 fd07 	bl	8020188 <cos>
 800877a:	ed06 0b02 	vstr	d0, [r6, #-8]
	xmx=-sinnok*cosik;
 800877e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8008782:	681c      	ldr	r4, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800878a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800878e:	461e      	mov	r6, r3
 8008790:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008794:	4619      	mov	r1, r3
 8008796:	4622      	mov	r2, r4
 8008798:	462b      	mov	r3, r5
 800879a:	e007      	b.n	80087ac <sdp4_predict+0xd1c>
 800879c:	3ff00000 	.word	0x3ff00000
 80087a0:	3fe00000 	.word	0x3fe00000
 80087a4:	3fd00000 	.word	0x3fd00000
 80087a8:	3ff80000 	.word	0x3ff80000
 80087ac:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80087b0:	f7f7 ff32 	bl	8000618 <__aeabi_dmul>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	e9c6 2300 	strd	r2, r3, [r6]
	xmy=cosnok*cosik;
 80087bc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80087c0:	461c      	mov	r4, r3
 80087c2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80087c6:	4619      	mov	r1, r3
 80087c8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80087cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087d0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80087d4:	f7f7 ff20 	bl	8000618 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	e944 2302 	strd	r2, r3, [r4, #-8]
	ux=xmx*sinuk+cosnok*cosuk;
 80087e0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80087e4:	4619      	mov	r1, r3
 80087e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087f2:	f7f7 ff11 	bl	8000618 <__aeabi_dmul>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4614      	mov	r4, r2
 80087fc:	461d      	mov	r5, r3
 80087fe:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8008802:	4619      	mov	r1, r3
 8008804:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008808:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800880c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008810:	f7f7 ff02 	bl	8000618 <__aeabi_dmul>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800881c:	460e      	mov	r6, r1
 800881e:	4620      	mov	r0, r4
 8008820:	4629      	mov	r1, r5
 8008822:	f7f7 fd43 	bl	80002ac <__adddf3>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	e9c6 2300 	strd	r2, r3, [r6]
	uy=xmy*sinuk+sinnok*cosuk;
 800882e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8008832:	4619      	mov	r1, r3
 8008834:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008840:	f7f7 feea 	bl	8000618 <__aeabi_dmul>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4614      	mov	r4, r2
 800884a:	461d      	mov	r5, r3
 800884c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8008850:	4619      	mov	r1, r3
 8008852:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008856:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800885a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800885e:	f7f7 fedb 	bl	8000618 <__aeabi_dmul>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800886a:	460e      	mov	r6, r1
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 fd1c 	bl	80002ac <__adddf3>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	e946 2302 	strd	r2, r3, [r6, #-8]
	uz=sinik*sinuk;
 800887c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8008880:	461c      	mov	r4, r3
 8008882:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008886:	4619      	mov	r1, r3
 8008888:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008894:	f7f7 fec0 	bl	8000618 <__aeabi_dmul>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	e9c4 2300 	strd	r2, r3, [r4]
	vx=xmx*cosuk-cosnok*sinuk;
 80088a0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80088a4:	4619      	mov	r1, r3
 80088a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b2:	f7f7 feb1 	bl	8000618 <__aeabi_dmul>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4614      	mov	r4, r2
 80088bc:	461d      	mov	r5, r3
 80088be:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80088c2:	4619      	mov	r1, r3
 80088c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80088d0:	f7f7 fea2 	bl	8000618 <__aeabi_dmul>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80088dc:	460e      	mov	r6, r1
 80088de:	4620      	mov	r0, r4
 80088e0:	4629      	mov	r1, r5
 80088e2:	f7f7 fce1 	bl	80002a8 <__aeabi_dsub>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e946 2302 	strd	r2, r3, [r6, #-8]
	vy=xmy*cosuk-sinnok*sinuk;
 80088ee:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80088f2:	4619      	mov	r1, r3
 80088f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088fc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008900:	f7f7 fe8a 	bl	8000618 <__aeabi_dmul>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4614      	mov	r4, r2
 800890a:	461d      	mov	r5, r3
 800890c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8008910:	4619      	mov	r1, r3
 8008912:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800891e:	f7f7 fe7b 	bl	8000618 <__aeabi_dmul>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800892a:	460e      	mov	r6, r1
 800892c:	4620      	mov	r0, r4
 800892e:	4629      	mov	r1, r5
 8008930:	f7f7 fcba 	bl	80002a8 <__aeabi_dsub>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	e9c6 2300 	strd	r2, r3, [r6]
	vz=sinik*cosuk;
 800893c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008940:	461c      	mov	r4, r3
 8008942:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008946:	4619      	mov	r1, r3
 8008948:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800894c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008954:	f7f7 fe60 	bl	8000618 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	e944 2302 	strd	r2, r3, [r4, #-8]

	/* Position and velocity */
	output->pos[0] = rk*ux;
 8008960:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008964:	4619      	mov	r1, r3
 8008966:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008972:	f7f7 fe51 	bl	8000618 <__aeabi_dmul>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 800897e:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8008982:	6809      	ldr	r1, [r1, #0]
 8008984:	e9c1 2306 	strd	r2, r3, [r1, #24]
	output->pos[1] = rk*uy;
 8008988:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800898c:	4619      	mov	r1, r3
 800898e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800899a:	f7f7 fe3d 	bl	8000618 <__aeabi_dmul>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80089a6:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 80089aa:	6809      	ldr	r1, [r1, #0]
 80089ac:	e9c1 2308 	strd	r2, r3, [r1, #32]
	output->pos[2] = rk*uz;
 80089b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80089b4:	4619      	mov	r1, r3
 80089b6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c2:	f7f7 fe29 	bl	8000618 <__aeabi_dmul>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80089ce:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 80089d2:	6809      	ldr	r1, [r1, #0]
 80089d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	output->vel[0] = rdotk*ux+rfdotk*vx;
 80089d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80089dc:	4619      	mov	r1, r3
 80089de:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ea:	f7f7 fe15 	bl	8000618 <__aeabi_dmul>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4614      	mov	r4, r2
 80089f4:	461d      	mov	r5, r3
 80089f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80089fa:	4619      	mov	r1, r3
 80089fc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8008a00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a04:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008a08:	f7f7 fe06 	bl	8000618 <__aeabi_dmul>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4620      	mov	r0, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	f7f7 fc4a 	bl	80002ac <__adddf3>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8008a20:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8008a24:	6809      	ldr	r1, [r1, #0]
 8008a26:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	output->vel[1] = rdotk*uy+rfdotk*vy;
 8008a2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008a34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a3c:	f7f7 fdec 	bl	8000618 <__aeabi_dmul>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4614      	mov	r4, r2
 8008a46:	461d      	mov	r5, r3
 8008a48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008a5a:	f7f7 fddd 	bl	8000618 <__aeabi_dmul>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4620      	mov	r0, r4
 8008a64:	4629      	mov	r1, r5
 8008a66:	f7f7 fc21 	bl	80002ac <__adddf3>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8008a72:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8008a76:	6809      	ldr	r1, [r1, #0]
 8008a78:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	output->vel[2] = rdotk*uz+rfdotk*vz;
 8008a7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008a80:	4619      	mov	r1, r3
 8008a82:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a8e:	f7f7 fdc3 	bl	8000618 <__aeabi_dmul>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4614      	mov	r4, r2
 8008a98:	461d      	mov	r5, r3
 8008a9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008aa4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aa8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008aac:	f7f7 fdb4 	bl	8000618 <__aeabi_dmul>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f7f7 fbf8 	bl	80002ac <__adddf3>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8008ac4:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8008ac8:	6809      	ldr	r1, [r1, #0]
 8008aca:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	/* Phase in radians */
	double phase=xlt-deep_dyn.xnode-deep_dyn.omgadf+TWO_PI;
 8008ace:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8008ad2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8008ad6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008ada:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8008ade:	f7f7 fbe3 	bl	80002a8 <__aeabi_dsub>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	4619      	mov	r1, r3
 8008aea:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8008aee:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8008af2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008af6:	f7f7 fbd7 	bl	80002a8 <__aeabi_dsub>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4610      	mov	r0, r2
 8008b00:	4619      	mov	r1, r3
 8008b02:	a32b      	add	r3, pc, #172	@ (adr r3, 8008bb0 <sdp4_predict+0x1120>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f7f7 fbd0 	bl	80002ac <__adddf3>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278

	if (phase<0.0)
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8008b20:	f7f7 ffec 	bl	8000afc <__aeabi_dcmplt>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <sdp4_predict+0x10b0>
		phase+=TWO_PI;
 8008b2a:	a321      	add	r3, pc, #132	@ (adr r3, 8008bb0 <sdp4_predict+0x1120>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8008b34:	f7f7 fbba 	bl	80002ac <__adddf3>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278

	phase=FMod2p(phase);
 8008b40:	ed97 0b9e 	vldr	d0, [r7, #632]	@ 0x278
 8008b44:	f009 fcac 	bl	80124a0 <FMod2p>
 8008b48:	ed87 0b9e 	vstr	d0, [r7, #632]	@ 0x278
	output->phase = phase;
 8008b4c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8008b50:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8008b54:	6819      	ldr	r1, [r3, #0]
 8008b56:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 8008b5a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	output->omgadf = deep_dyn.omgadf;
 8008b5e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8008b62:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8008b66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008b6a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8008b6e:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8008b72:	6809      	ldr	r1, [r1, #0]
 8008b74:	e9c1 2302 	strd	r2, r3, [r1, #8]
	output->xnodek = xnodek;
 8008b78:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8008b7c:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8008b80:	6819      	ldr	r1, [r3, #0]
 8008b82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	output->xinck = xinck;
 8008b8e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8008b92:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8008b96:	6819      	ldr	r1, [r3, #0]
 8008b98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ba0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8008ba4:	bf00      	nop
 8008ba6:	f507 7725 	add.w	r7, r7, #660	@ 0x294
 8008baa:	46bd      	mov	sp, r7
 8008bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb0:	54442d18 	.word	0x54442d18
 8008bb4:	401921fb 	.word	0x401921fb

08008bb8 <ThetaG>:
 * \param epoch TLE epoch
 * \param deep_arg Deep arg
 * \copyright GPLv2+
 **/
double ThetaG(double epoch, deep_arg_fixed_t *deep_arg)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b092      	sub	sp, #72	@ 0x48
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	ed87 0b02 	vstr	d0, [r7, #8]
 8008bc2:	6078      	str	r0, [r7, #4]
	double year, day, UT, jd, TU, GMST, ThetaG;

	/* Modification to support Y2K */
	/* Valid 1957 through 2056     */

	day=modf(epoch*1E-3,&year)*1E3;
 8008bc4:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008e64 <ThetaG+0x2ac>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bce:	f7f7 fd23 	bl	8000618 <__aeabi_dmul>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	ec43 2b17 	vmov	d7, r2, r3
 8008bda:	f107 0318 	add.w	r3, r7, #24
 8008bde:	4618      	mov	r0, r3
 8008be0:	eeb0 0a47 	vmov.f32	s0, s14
 8008be4:	eef0 0a67 	vmov.f32	s1, s15
 8008be8:	f013 feb4 	bl	801c954 <modf>
 8008bec:	ec51 0b10 	vmov	r0, r1, d0
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	4b98      	ldr	r3, [pc, #608]	@ (8008e58 <ThetaG+0x2a0>)
 8008bf6:	f7f7 fd0f 	bl	8000618 <__aeabi_dmul>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (year<57)
 8008c02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	4b94      	ldr	r3, [pc, #592]	@ (8008e5c <ThetaG+0x2a4>)
 8008c0c:	f7f7 ff76 	bl	8000afc <__aeabi_dcmplt>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00b      	beq.n	8008c2e <ThetaG+0x76>
		year+=2000;
 8008c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	4b90      	ldr	r3, [pc, #576]	@ (8008e60 <ThetaG+0x2a8>)
 8008c20:	f7f7 fb44 	bl	80002ac <__adddf3>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8008c2c:	e00a      	b.n	8008c44 <ThetaG+0x8c>
	else
		year+=1900;
 8008c2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c32:	a36f      	add	r3, pc, #444	@ (adr r3, 8008df0 <ThetaG+0x238>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fb38 	bl	80002ac <__adddf3>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	e9c7 2306 	strd	r2, r3, [r7, #24]

	UT=modf(day,&day);
 8008c44:	ed97 7b04 	vldr	d7, [r7, #16]
 8008c48:	f107 0310 	add.w	r3, r7, #16
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8008c52:	eef0 0a67 	vmov.f32	s1, s15
 8008c56:	f013 fe7d 	bl	801c954 <modf>
 8008c5a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	jd=Julian_Date_of_Year(year)+day;
 8008c5e:	ed97 7b06 	vldr	d7, [r7, #24]
 8008c62:	eeb0 0a47 	vmov.f32	s0, s14
 8008c66:	eef0 0a67 	vmov.f32	s1, s15
 8008c6a:	f009 fc6d 	bl	8012548 <Julian_Date_of_Year>
 8008c6e:	ec51 0b10 	vmov	r0, r1, d0
 8008c72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c76:	f7f7 fb19 	bl	80002ac <__adddf3>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	TU=(jd-2451545.0)/36525;
 8008c82:	a35d      	add	r3, pc, #372	@ (adr r3, 8008df8 <ThetaG+0x240>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8008c8c:	f7f7 fb0c 	bl	80002a8 <__aeabi_dsub>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4610      	mov	r0, r2
 8008c96:	4619      	mov	r1, r3
 8008c98:	a359      	add	r3, pc, #356	@ (adr r3, 8008e00 <ThetaG+0x248>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f7 fde5 	bl	800086c <__aeabi_ddiv>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	GMST=24110.54841+TU*(8640184.812866+TU*(0.093104-TU*6.2E-6));
 8008caa:	a357      	add	r3, pc, #348	@ (adr r3, 8008e08 <ThetaG+0x250>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008cb4:	f7f7 fcb0 	bl	8000618 <__aeabi_dmul>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	a154      	add	r1, pc, #336	@ (adr r1, 8008e10 <ThetaG+0x258>)
 8008cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc2:	f7f7 faf1 	bl	80002a8 <__aeabi_dsub>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008cd2:	f7f7 fca1 	bl	8000618 <__aeabi_dmul>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	a34e      	add	r3, pc, #312	@ (adr r3, 8008e18 <ThetaG+0x260>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fae2 	bl	80002ac <__adddf3>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4610      	mov	r0, r2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008cf4:	f7f7 fc90 	bl	8000618 <__aeabi_dmul>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4619      	mov	r1, r3
 8008d00:	a347      	add	r3, pc, #284	@ (adr r3, 8008e20 <ThetaG+0x268>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fad1 	bl	80002ac <__adddf3>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	GMST=fmod(GMST+SECONDS_PER_DAY*EARTH_ROTATIONS_PER_SIDERIAL_DAY*UT,SECONDS_PER_DAY);
 8008d12:	a345      	add	r3, pc, #276	@ (adr r3, 8008e28 <ThetaG+0x270>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008d1c:	f7f7 fc7c 	bl	8000618 <__aeabi_dmul>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4610      	mov	r0, r2
 8008d26:	4619      	mov	r1, r3
 8008d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d2c:	f7f7 fabe 	bl	80002ac <__adddf3>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	ec43 2b17 	vmov	d7, r2, r3
 8008d38:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 8008e30 <ThetaG+0x278>
 8008d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8008d40:	eef0 0a67 	vmov.f32	s1, s15
 8008d44:	f016 ff7c 	bl	801fc40 <fmod>
 8008d48:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	ThetaG = 2*M_PI*GMST/SECONDS_PER_DAY;
 8008d4c:	a33a      	add	r3, pc, #232	@ (adr r3, 8008e38 <ThetaG+0x280>)
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d56:	f7f7 fc5f 	bl	8000618 <__aeabi_dmul>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4619      	mov	r1, r3
 8008d62:	a333      	add	r3, pc, #204	@ (adr r3, 8008e30 <ThetaG+0x278>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 fd80 	bl	800086c <__aeabi_ddiv>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	e9c7 2308 	strd	r2, r3, [r7, #32]
	deep_arg->ds50=jd-2433281.5+UT;
 8008d74:	a332      	add	r3, pc, #200	@ (adr r3, 8008e40 <ThetaG+0x288>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8008d7e:	f7f7 fa93 	bl	80002a8 <__aeabi_dsub>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4610      	mov	r0, r2
 8008d88:	4619      	mov	r1, r3
 8008d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008d8e:	f7f7 fa8d 	bl	80002ac <__adddf3>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	ThetaG=FMod2p(6.3003880987*deep_arg->ds50+1.72944494);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8008da2:	a329      	add	r3, pc, #164	@ (adr r3, 8008e48 <ThetaG+0x290>)
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f7f7 fc36 	bl	8000618 <__aeabi_dmul>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4610      	mov	r0, r2
 8008db2:	4619      	mov	r1, r3
 8008db4:	a326      	add	r3, pc, #152	@ (adr r3, 8008e50 <ThetaG+0x298>)
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f7f7 fa77 	bl	80002ac <__adddf3>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	ec43 2b17 	vmov	d7, r2, r3
 8008dc6:	eeb0 0a47 	vmov.f32	s0, s14
 8008dca:	eef0 0a67 	vmov.f32	s1, s15
 8008dce:	f009 fb67 	bl	80124a0 <FMod2p>
 8008dd2:	ed87 0b08 	vstr	d0, [r7, #32]

	return ThetaG;
 8008dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dda:	ec43 2b17 	vmov	d7, r2, r3
}
 8008dde:	eeb0 0a47 	vmov.f32	s0, s14
 8008de2:	eef0 0a67 	vmov.f32	s1, s15
 8008de6:	3748      	adds	r7, #72	@ 0x48
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	f3af 8000 	nop.w
 8008df0:	00000000 	.word	0x00000000
 8008df4:	409db000 	.word	0x409db000
 8008df8:	80000000 	.word	0x80000000
 8008dfc:	4142b42c 	.word	0x4142b42c
 8008e00:	00000000 	.word	0x00000000
 8008e04:	40e1d5a0 	.word	0x40e1d5a0
 8008e08:	05e6c9ce 	.word	0x05e6c9ce
 8008e0c:	3eda0133 	.word	0x3eda0133
 8008e10:	eb2074eb 	.word	0xeb2074eb
 8008e14:	3fb7d5a9 	.word	0x3fb7d5a9
 8008e18:	1a02ff8f 	.word	0x1a02ff8f
 8008e1c:	41607ad7 	.word	0x41607ad7
 8008e20:	192641b3 	.word	0x192641b3
 8008e24:	40d78ba3 	.word	0x40d78ba3
 8008e28:	e2c87b73 	.word	0xe2c87b73
 8008e2c:	40f526c8 	.word	0x40f526c8
 8008e30:	00000000 	.word	0x00000000
 8008e34:	40f51800 	.word	0x40f51800
 8008e38:	54442d18 	.word	0x54442d18
 8008e3c:	401921fb 	.word	0x401921fb
 8008e40:	c0000000 	.word	0xc0000000
 8008e44:	41429080 	.word	0x41429080
 8008e48:	f01018b3 	.word	0xf01018b3
 8008e4c:	40193398 	.word	0x40193398
 8008e50:	751885de 	.word	0x751885de
 8008e54:	3ffbabce 	.word	0x3ffbabce
 8008e58:	408f4000 	.word	0x408f4000
 8008e5c:	404c8000 	.word	0x404c8000
 8008e60:	409f4000 	.word	0x409f4000
 8008e64:	d2f1a9fc 	.word	0xd2f1a9fc
 8008e68:	3f50624d 	.word	0x3f50624d
 8008e6c:	00000000 	.word	0x00000000

08008e70 <sdp4_deep_initialize>:

void sdp4_deep_initialize(const predict_orbital_elements_t *tle, struct _sdp4 *m, deep_arg_fixed_t *deep_arg)
{
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	f5ad 7d59 	sub.w	sp, sp, #868	@ 0x364
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008e7e:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8008e82:	6018      	str	r0, [r3, #0]
 8008e84:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008e88:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008e8c:	6019      	str	r1, [r3, #0]
 8008e8e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008e92:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008e96:	601a      	str	r2, [r3, #0]
	xno2, xnodce, xnoi, xpidot, z1, z11, z12, z13, z2,
	z21, z22, z23, z3, z31, z32, z33, ze, zn, zsing,
	zsinh, zsini, zcosg, zcosh, zcosi;

	/* Entrance for deep space initialization */
	m->thgr=ThetaG(m->epoch,deep_arg);
 8008e98:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008e9c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	ed93 7bbe 	vldr	d7, [r3, #760]	@ 0x2f8
 8008ea6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008eaa:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8008eb4:	eef0 0a67 	vmov.f32	s1, s15
 8008eb8:	f7ff fe7e 	bl	8008bb8 <ThetaG>
 8008ebc:	eeb0 7a40 	vmov.f32	s14, s0
 8008ec0:	eef0 7a60 	vmov.f32	s15, s1
 8008ec4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ec8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	ed83 7b32 	vstr	d7, [r3, #200]	@ 0xc8
	eq=m->eo;
 8008ed2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ed6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	@ 0x2e0
 8008ee0:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
	m->xnq=deep_arg->xnodp;
 8008ee4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ee8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8008ef2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ef6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	e9c3 0134 	strd	r0, r1, [r3, #208]	@ 0xd0
	aqnv=1/deep_arg->aodp;
 8008f00:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f04:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f0e:	f04f 0000 	mov.w	r0, #0
 8008f12:	49cb      	ldr	r1, [pc, #812]	@ (8009240 <sdp4_deep_initialize+0x3d0>)
 8008f14:	f7f7 fcaa 	bl	800086c <__aeabi_ddiv>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
	m->xqncl=m->xincl;
 8008f20:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f24:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	e9d3 01b6 	ldrd	r0, r1, [r3, #728]	@ 0x2d8
 8008f2e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f32:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	e9c3 0136 	strd	r0, r1, [r3, #216]	@ 0xd8
	xmao=m->xmo;
 8008f3c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f40:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	@ 0x2d0
 8008f4a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
	xpidot=deep_arg->omgdot+deep_arg->xnodot;
 8008f4e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f52:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008f5c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f60:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8008f6a:	f7f7 f99f 	bl	80002ac <__adddf3>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	e9c7 23a8 	strd	r2, r3, [r7, #672]	@ 0x2a0
	sinq=sin(m->xnodeo);
 8008f76:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f7a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	ed93 7bb0 	vldr	d7, [r3, #704]	@ 0x2c0
 8008f84:	eeb0 0a47 	vmov.f32	s0, s14
 8008f88:	eef0 0a67 	vmov.f32	s1, s15
 8008f8c:	f017 f958 	bl	8020240 <sin>
 8008f90:	ed87 0ba6 	vstr	d0, [r7, #664]	@ 0x298
	cosq=cos(m->xnodeo);
 8008f94:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008f98:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	ed93 7bb0 	vldr	d7, [r3, #704]	@ 0x2c0
 8008fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8008fa6:	eef0 0a67 	vmov.f32	s1, s15
 8008faa:	f017 f8ed 	bl	8020188 <cos>
 8008fae:	ed87 0ba4 	vstr	d0, [r7, #656]	@ 0x290
	m->omegaq=m->omegao;
 8008fb2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008fb6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	e9d3 01b2 	ldrd	r0, r1, [r3, #712]	@ 0x2c8
 8008fc0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008fc4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	e9c3 0138 	strd	r0, r1, [r3, #224]	@ 0xe0

	/* Initialize lunar solar terms */
	day=deep_arg->ds50+18261.5;  /* Days since 1900 Jan 0.5 */
 8008fce:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008fd2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8008fdc:	a384      	add	r3, pc, #528	@ (adr r3, 80091f0 <sdp4_deep_initialize+0x380>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f7f7 f963 	bl	80002ac <__adddf3>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288

	m->preep=day;
 8008fee:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8008ff2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8008ff6:	6819      	ldr	r1, [r3, #0]
 8008ff8:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 8008ffc:	e9c1 239e 	strd	r2, r3, [r1, #632]	@ 0x278
	xnodce=4.5236020-9.2422029E-4*day;
 8009000:	a37d      	add	r3, pc, #500	@ (adr r3, 80091f8 <sdp4_deep_initialize+0x388>)
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 800900a:	f7f7 fb05 	bl	8000618 <__aeabi_dmul>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	a17b      	add	r1, pc, #492	@ (adr r1, 8009200 <sdp4_deep_initialize+0x390>)
 8009014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009018:	f7f7 f946 	bl	80002a8 <__aeabi_dsub>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
	stem=sin(xnodce);
 8009024:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8009028:	f017 f90a 	bl	8020240 <sin>
 800902c:	ed87 0b9e 	vstr	d0, [r7, #632]	@ 0x278
	ctem=cos(xnodce);
 8009030:	ed97 0ba0 	vldr	d0, [r7, #640]	@ 0x280
 8009034:	f017 f8a8 	bl	8020188 <cos>
 8009038:	ed87 0b9c 	vstr	d0, [r7, #624]	@ 0x270
	m->zcosil=0.91375164-0.03568096*ctem;
 800903c:	a372      	add	r3, pc, #456	@ (adr r3, 8009208 <sdp4_deep_initialize+0x398>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8009046:	f7f7 fae7 	bl	8000618 <__aeabi_dmul>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	a170      	add	r1, pc, #448	@ (adr r1, 8009210 <sdp4_deep_initialize+0x3a0>)
 8009050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009054:	f7f7 f928 	bl	80002a8 <__aeabi_dsub>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4610      	mov	r0, r2
 800905e:	4619      	mov	r1, r3
 8009060:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009064:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	e9c3 01ae 	strd	r0, r1, [r3, #696]	@ 0x2b8
	m->zsinil=sqrt(1-m->zcosil*m->zcosil);
 800906e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009072:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	e9d3 01ae 	ldrd	r0, r1, [r3, #696]	@ 0x2b8
 800907c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009080:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	@ 0x2b8
 800908a:	f7f7 fac5 	bl	8000618 <__aeabi_dmul>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	496a      	ldr	r1, [pc, #424]	@ (8009240 <sdp4_deep_initialize+0x3d0>)
 8009098:	f7f7 f906 	bl	80002a8 <__aeabi_dsub>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	ec43 2b17 	vmov	d7, r2, r3
 80090a4:	eeb0 0a47 	vmov.f32	s0, s14
 80090a8:	eef0 0a67 	vmov.f32	s1, s15
 80090ac:	f016 fea6 	bl	801fdfc <sqrt>
 80090b0:	eeb0 7a40 	vmov.f32	s14, s0
 80090b4:	eef0 7a60 	vmov.f32	s15, s1
 80090b8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80090bc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	ed83 7bac 	vstr	d7, [r3, #688]	@ 0x2b0
	m->zsinhl=0.089683511*stem/m->zsinil;
 80090c6:	a354      	add	r3, pc, #336	@ (adr r3, 8009218 <sdp4_deep_initialize+0x3a8>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80090d0:	f7f7 faa2 	bl	8000618 <__aeabi_dmul>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4610      	mov	r0, r2
 80090da:	4619      	mov	r1, r3
 80090dc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80090e0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 80090ea:	f7f7 fbbf 	bl	800086c <__aeabi_ddiv>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4610      	mov	r0, r2
 80090f4:	4619      	mov	r1, r3
 80090f6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80090fa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	e9c3 01a8 	strd	r0, r1, [r3, #672]	@ 0x2a0
	m->zcoshl=sqrt(1-m->zsinhl*m->zsinhl);
 8009104:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009108:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 8009112:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009116:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	@ 0x2a0
 8009120:	f7f7 fa7a 	bl	8000618 <__aeabi_dmul>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	f04f 0000 	mov.w	r0, #0
 800912c:	4944      	ldr	r1, [pc, #272]	@ (8009240 <sdp4_deep_initialize+0x3d0>)
 800912e:	f7f7 f8bb 	bl	80002a8 <__aeabi_dsub>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	ec43 2b17 	vmov	d7, r2, r3
 800913a:	eeb0 0a47 	vmov.f32	s0, s14
 800913e:	eef0 0a67 	vmov.f32	s1, s15
 8009142:	f016 fe5b 	bl	801fdfc <sqrt>
 8009146:	eeb0 7a40 	vmov.f32	s14, s0
 800914a:	eef0 7a60 	vmov.f32	s15, s1
 800914e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009152:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	ed83 7baa 	vstr	d7, [r3, #680]	@ 0x2a8
	c=4.7199672+0.22997150*day;
 800915c:	a330      	add	r3, pc, #192	@ (adr r3, 8009220 <sdp4_deep_initialize+0x3b0>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 8009166:	f7f7 fa57 	bl	8000618 <__aeabi_dmul>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4610      	mov	r0, r2
 8009170:	4619      	mov	r1, r3
 8009172:	a32d      	add	r3, pc, #180	@ (adr r3, 8009228 <sdp4_deep_initialize+0x3b8>)
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f7f7 f898 	bl	80002ac <__adddf3>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
	gam=5.8351514+0.0019443680*day;
 8009184:	a32a      	add	r3, pc, #168	@ (adr r3, 8009230 <sdp4_deep_initialize+0x3c0>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 800918e:	f7f7 fa43 	bl	8000618 <__aeabi_dmul>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4610      	mov	r0, r2
 8009198:	4619      	mov	r1, r3
 800919a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800919e:	461c      	mov	r4, r3
 80091a0:	a325      	add	r3, pc, #148	@ (adr r3, 8009238 <sdp4_deep_initialize+0x3c8>)
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f7f7 f881 	bl	80002ac <__adddf3>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	e9c4 2300 	strd	r2, r3, [r4]
	m->zmol=FMod2p(c-gam);
 80091b2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 80091be:	f7f7 f873 	bl	80002a8 <__aeabi_dsub>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	ec43 2b17 	vmov	d7, r2, r3
 80091ca:	eeb0 0a47 	vmov.f32	s0, s14
 80091ce:	eef0 0a67 	vmov.f32	s1, s15
 80091d2:	f009 f965 	bl	80124a0 <FMod2p>
 80091d6:	eeb0 7a40 	vmov.f32	s14, s0
 80091da:	eef0 7a60 	vmov.f32	s15, s1
 80091de:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80091e2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
 80091ec:	e02a      	b.n	8009244 <sdp4_deep_initialize+0x3d4>
 80091ee:	bf00      	nop
 80091f0:	00000000 	.word	0x00000000
 80091f4:	40d1d560 	.word	0x40d1d560
 80091f8:	f5bda204 	.word	0xf5bda204
 80091fc:	3f4e48eb 	.word	0x3f4e48eb
 8009200:	1f687b14 	.word	0x1f687b14
 8009204:	4012182b 	.word	0x4012182b
 8009208:	58946bb2 	.word	0x58946bb2
 800920c:	3fa244c6 	.word	0x3fa244c6
 8009210:	144eec77 	.word	0x144eec77
 8009214:	3fed3d74 	.word	0x3fed3d74
 8009218:	a2bc46dc 	.word	0xa2bc46dc
 800921c:	3fb6f57f 	.word	0x3fb6f57f
 8009220:	c3c18b50 	.word	0xc3c18b50
 8009224:	3fcd6fb4 	.word	0x3fcd6fb4
 8009228:	14e8c551 	.word	0x14e8c551
 800922c:	4012e13f 	.word	0x4012e13f
 8009230:	3e2b3c77 	.word	0x3e2b3c77
 8009234:	3f5fdb45 	.word	0x3f5fdb45
 8009238:	edb8d59f 	.word	0xedb8d59f
 800923c:	40175731 	.word	0x40175731
 8009240:	3ff00000 	.word	0x3ff00000
	zx=0.39785416*stem/m->zsinil;
 8009244:	a389      	add	r3, pc, #548	@ (adr r3, 800946c <sdp4_deep_initialize+0x5fc>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800924e:	f7f7 f9e3 	bl	8000618 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4614      	mov	r4, r2
 8009258:	461d      	mov	r5, r3
 800925a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800925e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 8009268:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 800926c:	460e      	mov	r6, r1
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 fafb 	bl	800086c <__aeabi_ddiv>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	e946 2302 	strd	r2, r3, [r6, #-8]
	zy=m->zcoshl*ctem+0.91744867*m->zsinhl*stem;
 800927e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009282:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 800928c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 8009290:	f7f7 f9c2 	bl	8000618 <__aeabi_dmul>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4690      	mov	r8, r2
 800929a:	4699      	mov	r9, r3
 800929c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80092a0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 80092aa:	a372      	add	r3, pc, #456	@ (adr r3, 8009474 <sdp4_deep_initialize+0x604>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f7 f9b2 	bl	8000618 <__aeabi_dmul>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4610      	mov	r0, r2
 80092ba:	4619      	mov	r1, r3
 80092bc:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 80092c0:	f7f7 f9aa 	bl	8000618 <__aeabi_dmul>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4610      	mov	r0, r2
 80092ca:	4619      	mov	r1, r3
 80092cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80092d0:	461c      	mov	r4, r3
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4640      	mov	r0, r8
 80092d8:	4649      	mov	r1, r9
 80092da:	f7f6 ffe7 	bl	80002ac <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	e9c4 2300 	strd	r2, r3, [r4]
	zx=atan2(zx,zy);
 80092e6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80092ea:	461c      	mov	r4, r3
 80092ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80092f0:	461a      	mov	r2, r3
 80092f2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80092f6:	ed92 1b00 	vldr	d1, [r2]
 80092fa:	ed13 0b02 	vldr	d0, [r3, #-8]
 80092fe:	f016 fc53 	bl	801fba8 <atan2>
 8009302:	ed04 0b02 	vstr	d0, [r4, #-8]
	zx=gam+zx-xnodce;
 8009306:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800930a:	4619      	mov	r1, r3
 800930c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8009310:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009318:	f7f6 ffc8 	bl	80002ac <__adddf3>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4610      	mov	r0, r2
 8009322:	4619      	mov	r1, r3
 8009324:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8009328:	461c      	mov	r4, r3
 800932a:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 800932e:	f7f6 ffbb 	bl	80002a8 <__aeabi_dsub>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	e944 2302 	strd	r2, r3, [r4, #-8]
	m->zcosgl=cos(zx);
 800933a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800933e:	ed13 0b02 	vldr	d0, [r3, #-8]
 8009342:	f016 ff21 	bl	8020188 <cos>
 8009346:	eeb0 7a40 	vmov.f32	s14, s0
 800934a:	eef0 7a60 	vmov.f32	s15, s1
 800934e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009352:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	ed83 7ba6 	vstr	d7, [r3, #664]	@ 0x298
	m->zsingl=sin(zx);
 800935c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8009360:	ed13 0b02 	vldr	d0, [r3, #-8]
 8009364:	f016 ff6c 	bl	8020240 <sin>
 8009368:	eeb0 7a40 	vmov.f32	s14, s0
 800936c:	eef0 7a60 	vmov.f32	s15, s1
 8009370:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009374:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	ed83 7ba4 	vstr	d7, [r3, #656]	@ 0x290
	m->zmos=6.2565837+0.017201977*day;
 800937e:	a33f      	add	r3, pc, #252	@ (adr r3, 800947c <sdp4_deep_initialize+0x60c>)
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 8009388:	f7f7 f946 	bl	8000618 <__aeabi_dmul>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4610      	mov	r0, r2
 8009392:	4619      	mov	r1, r3
 8009394:	a33b      	add	r3, pc, #236	@ (adr r3, 8009484 <sdp4_deep_initialize+0x614>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f7f6 ff87 	bl	80002ac <__adddf3>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4610      	mov	r0, r2
 80093a4:	4619      	mov	r1, r3
 80093a6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093aa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	e9c3 013c 	strd	r0, r1, [r3, #240]	@ 0xf0
	m->zmos=FMod2p(m->zmos);
 80093b4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093b8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 80093c2:	eeb0 0a47 	vmov.f32	s0, s14
 80093c6:	eef0 0a67 	vmov.f32	s1, s15
 80093ca:	f009 f869 	bl	80124a0 <FMod2p>
 80093ce:	eeb0 7a40 	vmov.f32	s14, s0
 80093d2:	eef0 7a60 	vmov.f32	s15, s1
 80093d6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80093da:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	/* Do solar terms */
	zcosg=ZCOSGS;
 80093e4:	a329      	add	r3, pc, #164	@ (adr r3, 800948c <sdp4_deep_initialize+0x61c>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
	zsing=ZSINGS;
 80093ee:	a329      	add	r3, pc, #164	@ (adr r3, 8009494 <sdp4_deep_initialize+0x624>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
	zcosi=ZCOSIS;
 80093f8:	a31e      	add	r3, pc, #120	@ (adr r3, 8009474 <sdp4_deep_initialize+0x604>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
	zsini=ZSINIS;
 8009402:	a31a      	add	r3, pc, #104	@ (adr r3, 800946c <sdp4_deep_initialize+0x5fc>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
	zcosh=cosq;
 800940c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8009410:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
	zsinh= sinq;
 8009414:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8009418:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
	cc=C1SS;
 800941c:	a31f      	add	r3, pc, #124	@ (adr r3, 800949c <sdp4_deep_initialize+0x62c>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
	zn=ZNS;
 8009426:	a31f      	add	r3, pc, #124	@ (adr r3, 80094a4 <sdp4_deep_initialize+0x634>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
	ze=ZES;
 8009430:	a31e      	add	r3, pc, #120	@ (adr r3, 80094ac <sdp4_deep_initialize+0x63c>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
	/* zmo=m->zmos; */
	xnoi=1/m->xnq;
 800943a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800943e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 8009448:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 800944c:	460c      	mov	r4, r1
 800944e:	f04f 0000 	mov.w	r0, #0
 8009452:	4905      	ldr	r1, [pc, #20]	@ (8009468 <sdp4_deep_initialize+0x5f8>)
 8009454:	f7f7 fa0a 	bl	800086c <__aeabi_ddiv>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	e944 2302 	strd	r2, r3, [r4, #-8]
 8009460:	e028      	b.n	80094b4 <sdp4_deep_initialize+0x644>
 8009462:	bf00      	nop
 8009464:	f3af 8000 	nop.w
 8009468:	3ff00000 	.word	0x3ff00000
 800946c:	4b71c367 	.word	0x4b71c367
 8009470:	3fd97671 	.word	0x3fd97671
 8009474:	502d140a 	.word	0x502d140a
 8009478:	3fed5bbd 	.word	0x3fed5bbd
 800947c:	2290f0f6 	.word	0x2290f0f6
 8009480:	3f919d65 	.word	0x3f919d65
 8009484:	e0a0bf28 	.word	0xe0a0bf28
 8009488:	401906bd 	.word	0x401906bd
 800948c:	6cce5f74 	.word	0x6cce5f74
 8009490:	3fc8e857 	.word	0x3fc8e857
 8009494:	0f0805b3 	.word	0x0f0805b3
 8009498:	bfef6368 	.word	0xbfef6368
 800949c:	94008e71 	.word	0x94008e71
 80094a0:	3ec90d6a 	.word	0x3ec90d6a
 80094a4:	fe8935de 	.word	0xfe8935de
 80094a8:	3ee90d67 	.word	0x3ee90d67
 80094ac:	78d4fdf4 	.word	0x78d4fdf4
 80094b0:	3f9126e9 	.word	0x3f9126e9
	/* time, after Lunar terms are initialized        */

	for (;;)
	{
		/* Solar terms done again after Lunar terms are done */
		a1=zcosg*zcosh+zsing*zcosi*zsinh;
 80094b4:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 80094b8:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 80094bc:	f7f7 f8ac 	bl	8000618 <__aeabi_dmul>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4690      	mov	r8, r2
 80094c6:	4699      	mov	r9, r3
 80094c8:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80094cc:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80094d0:	f7f7 f8a2 	bl	8000618 <__aeabi_dmul>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4610      	mov	r0, r2
 80094da:	4619      	mov	r1, r3
 80094dc:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80094e0:	f7f7 f89a 	bl	8000618 <__aeabi_dmul>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4610      	mov	r0, r2
 80094ea:	4619      	mov	r1, r3
 80094ec:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80094f0:	461c      	mov	r4, r3
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f6 fed7 	bl	80002ac <__adddf3>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	e9c4 2300 	strd	r2, r3, [r4]
		a3=-zsing*zcosh+zcosg*zcosi*zsinh;
 8009506:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 800950a:	643b      	str	r3, [r7, #64]	@ 0x40
 800950c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8009510:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8009514:	647b      	str	r3, [r7, #68]	@ 0x44
 8009516:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 800951a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800951e:	f7f7 f87b 	bl	8000618 <__aeabi_dmul>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4690      	mov	r8, r2
 8009528:	4699      	mov	r9, r3
 800952a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 800952e:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8009532:	f7f7 f871 	bl	8000618 <__aeabi_dmul>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4610      	mov	r0, r2
 800953c:	4619      	mov	r1, r3
 800953e:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8009542:	f7f7 f869 	bl	8000618 <__aeabi_dmul>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4610      	mov	r0, r2
 800954c:	4619      	mov	r1, r3
 800954e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009552:	461c      	mov	r4, r3
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	f7f6 fea6 	bl	80002ac <__adddf3>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	e944 2302 	strd	r2, r3, [r4, #-8]
		a7=-zcosg*zsinh+zsing*zcosi*zcosh;
 8009568:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 800956c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800956e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8009572:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009578:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 800957c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8009580:	f7f7 f84a 	bl	8000618 <__aeabi_dmul>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4690      	mov	r8, r2
 800958a:	4699      	mov	r9, r3
 800958c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8009590:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8009594:	f7f7 f840 	bl	8000618 <__aeabi_dmul>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 80095a4:	f7f7 f838 	bl	8000618 <__aeabi_dmul>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4610      	mov	r0, r2
 80095ae:	4619      	mov	r1, r3
 80095b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80095b4:	461c      	mov	r4, r3
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4640      	mov	r0, r8
 80095bc:	4649      	mov	r1, r9
 80095be:	f7f6 fe75 	bl	80002ac <__adddf3>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	e9c4 2300 	strd	r2, r3, [r4]
		a8=zsing*zsini;
 80095ca:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80095ce:	461c      	mov	r4, r3
 80095d0:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 80095d4:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80095d8:	f7f7 f81e 	bl	8000618 <__aeabi_dmul>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	e944 2302 	strd	r2, r3, [r4, #-8]
		a9=zsing*zsinh+zcosg*zcosi*zcosh;
 80095e4:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80095e8:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80095ec:	f7f7 f814 	bl	8000618 <__aeabi_dmul>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4690      	mov	r8, r2
 80095f6:	4699      	mov	r9, r3
 80095f8:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80095fc:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8009600:	f7f7 f80a 	bl	8000618 <__aeabi_dmul>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4610      	mov	r0, r2
 800960a:	4619      	mov	r1, r3
 800960c:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8009610:	f7f7 f802 	bl	8000618 <__aeabi_dmul>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4610      	mov	r0, r2
 800961a:	4619      	mov	r1, r3
 800961c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8009620:	461c      	mov	r4, r3
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4640      	mov	r0, r8
 8009628:	4649      	mov	r1, r9
 800962a:	f7f6 fe3f 	bl	80002ac <__adddf3>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	e9c4 2300 	strd	r2, r3, [r4]
		a10=zcosg*zsini;
 8009636:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800963a:	461c      	mov	r4, r3
 800963c:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8009640:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8009644:	f7f6 ffe8 	bl	8000618 <__aeabi_dmul>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e944 2302 	strd	r2, r3, [r4, #-8]
		a2=deep_arg->cosio*a7+deep_arg->sinio*a8;
 8009650:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009654:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800965e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f7f6 ffd7 	bl	8000618 <__aeabi_dmul>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	4690      	mov	r8, r2
 8009670:	4699      	mov	r9, r3
 8009672:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009676:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8009680:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8009684:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009688:	f7f6 ffc6 	bl	8000618 <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4610      	mov	r0, r2
 8009692:	4619      	mov	r1, r3
 8009694:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009698:	461c      	mov	r4, r3
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4640      	mov	r0, r8
 80096a0:	4649      	mov	r1, r9
 80096a2:	f7f6 fe03 	bl	80002ac <__adddf3>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	e9c4 2300 	strd	r2, r3, [r4]
		a4=deep_arg->cosio*a9+deep_arg->sinio*a10;
 80096ae:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80096b2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80096bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f7f6 ffa8 	bl	8000618 <__aeabi_dmul>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4690      	mov	r8, r2
 80096ce:	4699      	mov	r9, r3
 80096d0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80096d4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80096de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80096e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096e6:	f7f6 ff97 	bl	8000618 <__aeabi_dmul>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4610      	mov	r0, r2
 80096f0:	4619      	mov	r1, r3
 80096f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80096f6:	461c      	mov	r4, r3
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4640      	mov	r0, r8
 80096fe:	4649      	mov	r1, r9
 8009700:	f7f6 fdd4 	bl	80002ac <__adddf3>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	e944 2302 	strd	r2, r3, [r4, #-8]
		a5=-deep_arg->sinio*a7+deep_arg->cosio*a8;
 800970c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009710:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800971a:	633a      	str	r2, [r7, #48]	@ 0x30
 800971c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8009720:	637b      	str	r3, [r7, #52]	@ 0x34
 8009722:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800972e:	f7f6 ff73 	bl	8000618 <__aeabi_dmul>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4690      	mov	r8, r2
 8009738:	4699      	mov	r9, r3
 800973a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800973e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009748:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800974c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009750:	f7f6 ff62 	bl	8000618 <__aeabi_dmul>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4610      	mov	r0, r2
 800975a:	4619      	mov	r1, r3
 800975c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8009760:	461c      	mov	r4, r3
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4640      	mov	r0, r8
 8009768:	4649      	mov	r1, r9
 800976a:	f7f6 fd9f 	bl	80002ac <__adddf3>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	e9c4 2300 	strd	r2, r3, [r4]
		a6=-deep_arg->sinio*a9+deep_arg->cosio*a10;
 8009776:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800977a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009784:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009786:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800978a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800978c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009798:	f7f6 ff3e 	bl	8000618 <__aeabi_dmul>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4690      	mov	r8, r2
 80097a2:	4699      	mov	r9, r3
 80097a4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80097a8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80097b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80097b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097ba:	f7f6 ff2d 	bl	8000618 <__aeabi_dmul>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4610      	mov	r0, r2
 80097c4:	4619      	mov	r1, r3
 80097c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80097ca:	461c      	mov	r4, r3
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4640      	mov	r0, r8
 80097d2:	4649      	mov	r1, r9
 80097d4:	f7f6 fd6a 	bl	80002ac <__adddf3>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	e944 2302 	strd	r2, r3, [r4, #-8]
		x1=a1*deep_arg->cosg+a2*deep_arg->sing;
 80097e0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80097e4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80097ee:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 ff0f 	bl	8000618 <__aeabi_dmul>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4690      	mov	r8, r2
 8009800:	4699      	mov	r9, r3
 8009802:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009806:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8009810:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f7f6 fefe 	bl	8000618 <__aeabi_dmul>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4610      	mov	r0, r2
 8009822:	4619      	mov	r1, r3
 8009824:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009828:	461c      	mov	r4, r3
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4640      	mov	r0, r8
 8009830:	4649      	mov	r1, r9
 8009832:	f7f6 fd3b 	bl	80002ac <__adddf3>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	e9c4 2300 	strd	r2, r3, [r4]
		x2=a3*deep_arg->cosg+a4*deep_arg->sing;
 800983e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009842:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800984c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009854:	f7f6 fee0 	bl	8000618 <__aeabi_dmul>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4690      	mov	r8, r2
 800985e:	4699      	mov	r9, r3
 8009860:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009864:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800986e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009876:	f7f6 fecf 	bl	8000618 <__aeabi_dmul>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4610      	mov	r0, r2
 8009880:	4619      	mov	r1, r3
 8009882:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009886:	461c      	mov	r4, r3
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4640      	mov	r0, r8
 800988e:	4649      	mov	r1, r9
 8009890:	f7f6 fd0c 	bl	80002ac <__adddf3>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	e944 2302 	strd	r2, r3, [r4, #-8]
		x3=-a1*deep_arg->sing+a2*deep_arg->cosg;
 800989c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	623a      	str	r2, [r7, #32]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ac:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80098b0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80098ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80098be:	f7f6 feab 	bl	8000618 <__aeabi_dmul>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	4690      	mov	r8, r2
 80098c8:	4699      	mov	r9, r3
 80098ca:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80098ce:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80098d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f7f6 fe9a 	bl	8000618 <__aeabi_dmul>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4610      	mov	r0, r2
 80098ea:	4619      	mov	r1, r3
 80098ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80098f0:	461c      	mov	r4, r3
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4640      	mov	r0, r8
 80098f8:	4649      	mov	r1, r9
 80098fa:	f7f6 fcd7 	bl	80002ac <__adddf3>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	e9c4 2300 	strd	r2, r3, [r4]
		x4=-a3*deep_arg->sing+a4*deep_arg->cosg;
 8009906:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800990a:	f853 2c08 	ldr.w	r2, [r3, #-8]
 800990e:	61ba      	str	r2, [r7, #24]
 8009910:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009914:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800991e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8009928:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800992c:	f7f6 fe74 	bl	8000618 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4690      	mov	r8, r2
 8009936:	4699      	mov	r9, r3
 8009938:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800993c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009946:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800994a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800994e:	f7f6 fe63 	bl	8000618 <__aeabi_dmul>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4610      	mov	r0, r2
 8009958:	4619      	mov	r1, r3
 800995a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800995e:	461c      	mov	r4, r3
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4640      	mov	r0, r8
 8009966:	4649      	mov	r1, r9
 8009968:	f7f6 fca0 	bl	80002ac <__adddf3>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	e944 2302 	strd	r2, r3, [r4, #-8]
		x5=a5*deep_arg->sing;
 8009974:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009978:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8009982:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8009986:	461d      	mov	r5, r3
 8009988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800998c:	461c      	mov	r4, r3
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009996:	f7f6 fe3f 	bl	8000618 <__aeabi_dmul>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	e9c5 2300 	strd	r2, r3, [r5]
		x6=a6*deep_arg->sing;
 80099a2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80099a6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80099b0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80099b4:	461d      	mov	r5, r3
 80099b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80099ba:	461c      	mov	r4, r3
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80099c4:	f7f6 fe28 	bl	8000618 <__aeabi_dmul>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	e945 2302 	strd	r2, r3, [r5, #-8]
		x7=a5*deep_arg->cosg;
 80099d0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 80099d4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80099de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80099e2:	461d      	mov	r5, r3
 80099e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80099e8:	461c      	mov	r4, r3
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	e9d4 0100 	ldrd	r0, r1, [r4]
 80099f2:	f7f6 fe11 	bl	8000618 <__aeabi_dmul>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	e9c5 2300 	strd	r2, r3, [r5]
		x8=a6*deep_arg->cosg;
 80099fe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009a02:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009a0c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8009a10:	461d      	mov	r5, r3
 8009a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8009a16:	461c      	mov	r4, r3
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8009a20:	f7f6 fdfa 	bl	8000618 <__aeabi_dmul>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	e945 2302 	strd	r2, r3, [r5, #-8]
		z31=12*x1*x1-3*x3*x3;
 8009a2c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009a30:	4619      	mov	r1, r3
 8009a32:	f04f 0200 	mov.w	r2, #0
 8009a36:	4bd1      	ldr	r3, [pc, #836]	@ (8009d7c <sdp4_deep_initialize+0xf0c>)
 8009a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a3c:	f7f6 fdec 	bl	8000618 <__aeabi_dmul>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4610      	mov	r0, r2
 8009a46:	4619      	mov	r1, r3
 8009a48:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fde2 	bl	8000618 <__aeabi_dmul>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4690      	mov	r8, r2
 8009a5a:	4699      	mov	r9, r3
 8009a5c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009a60:	4619      	mov	r1, r3
 8009a62:	f04f 0200 	mov.w	r2, #0
 8009a66:	4bc6      	ldr	r3, [pc, #792]	@ (8009d80 <sdp4_deep_initialize+0xf10>)
 8009a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a6c:	f7f6 fdd4 	bl	8000618 <__aeabi_dmul>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4610      	mov	r0, r2
 8009a76:	4619      	mov	r1, r3
 8009a78:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f7f6 fdca 	bl	8000618 <__aeabi_dmul>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009a90:	461c      	mov	r4, r3
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f6 fc05 	bl	80002a8 <__aeabi_dsub>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	e9c4 2300 	strd	r2, r3, [r4]
		z32=24*x1*x2-6*x3*x4;
 8009aa6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009aaa:	4619      	mov	r1, r3
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	4bb4      	ldr	r3, [pc, #720]	@ (8009d84 <sdp4_deep_initialize+0xf14>)
 8009ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ab6:	f7f6 fdaf 	bl	8000618 <__aeabi_dmul>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4610      	mov	r0, r2
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009ac6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009aca:	f7f6 fda5 	bl	8000618 <__aeabi_dmul>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4690      	mov	r8, r2
 8009ad4:	4699      	mov	r9, r3
 8009ad6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009ada:	4619      	mov	r1, r3
 8009adc:	f04f 0200 	mov.w	r2, #0
 8009ae0:	4ba9      	ldr	r3, [pc, #676]	@ (8009d88 <sdp4_deep_initialize+0xf18>)
 8009ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ae6:	f7f6 fd97 	bl	8000618 <__aeabi_dmul>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4610      	mov	r0, r2
 8009af0:	4619      	mov	r1, r3
 8009af2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009af6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009afa:	f7f6 fd8d 	bl	8000618 <__aeabi_dmul>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4610      	mov	r0, r2
 8009b04:	4619      	mov	r1, r3
 8009b06:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009b0a:	461c      	mov	r4, r3
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f6 fbc8 	bl	80002a8 <__aeabi_dsub>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	e944 2302 	strd	r2, r3, [r4, #-8]
		z33=12*x2*x2-3*x4*x4;
 8009b20:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009b24:	4619      	mov	r1, r3
 8009b26:	f04f 0200 	mov.w	r2, #0
 8009b2a:	4b94      	ldr	r3, [pc, #592]	@ (8009d7c <sdp4_deep_initialize+0xf0c>)
 8009b2c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009b30:	f7f6 fd72 	bl	8000618 <__aeabi_dmul>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009b40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b44:	f7f6 fd68 	bl	8000618 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4690      	mov	r8, r2
 8009b4e:	4699      	mov	r9, r3
 8009b50:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009b54:	4619      	mov	r1, r3
 8009b56:	f04f 0200 	mov.w	r2, #0
 8009b5a:	4b89      	ldr	r3, [pc, #548]	@ (8009d80 <sdp4_deep_initialize+0xf10>)
 8009b5c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009b60:	f7f6 fd5a 	bl	8000618 <__aeabi_dmul>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4610      	mov	r0, r2
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009b70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b74:	f7f6 fd50 	bl	8000618 <__aeabi_dmul>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	4619      	mov	r1, r3
 8009b80:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009b84:	461c      	mov	r4, r3
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	f7f6 fb8b 	bl	80002a8 <__aeabi_dsub>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	e9c4 2300 	strd	r2, r3, [r4]
		z1=3*(a1*a1+a2*a2)+z31*deep_arg->eosq;
 8009b9a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	e9d1 2300 	ldrd	r2, r3, [r1]
 8009ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba8:	f7f6 fd36 	bl	8000618 <__aeabi_dmul>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	461d      	mov	r5, r3
 8009bb4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009bb8:	4619      	mov	r1, r3
 8009bba:	e9d1 2300 	ldrd	r2, r3, [r1]
 8009bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bc2:	f7f6 fd29 	bl	8000618 <__aeabi_dmul>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 fb6d 	bl	80002ac <__adddf3>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	4619      	mov	r1, r3
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	4b68      	ldr	r3, [pc, #416]	@ (8009d80 <sdp4_deep_initialize+0xf10>)
 8009be0:	f7f6 fd1a 	bl	8000618 <__aeabi_dmul>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4690      	mov	r8, r2
 8009bea:	4699      	mov	r9, r3
 8009bec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009bf0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bfa:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	f7f6 fd09 	bl	8000618 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009c12:	461c      	mov	r4, r3
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 fb46 	bl	80002ac <__adddf3>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	e944 2302 	strd	r2, r3, [r4, #-8]
		z2=6*(a1*a3+a2*a4)+z32*deep_arg->eosq;
 8009c28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009c32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c3a:	f7f6 fced 	bl	8000618 <__aeabi_dmul>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4614      	mov	r4, r2
 8009c44:	461d      	mov	r5, r3
 8009c46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009c50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c58:	f7f6 fcde 	bl	8000618 <__aeabi_dmul>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4620      	mov	r0, r4
 8009c62:	4629      	mov	r1, r5
 8009c64:	f7f6 fb22 	bl	80002ac <__adddf3>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	f04f 0200 	mov.w	r2, #0
 8009c74:	4b44      	ldr	r3, [pc, #272]	@ (8009d88 <sdp4_deep_initialize+0xf18>)
 8009c76:	f7f6 fccf 	bl	8000618 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4690      	mov	r8, r2
 8009c80:	4699      	mov	r9, r3
 8009c82:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009c86:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c90:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009c94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c98:	f7f6 fcbe 	bl	8000618 <__aeabi_dmul>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8009ca8:	461c      	mov	r4, r3
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4640      	mov	r0, r8
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	f7f6 fafb 	bl	80002ac <__adddf3>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	e9c4 2300 	strd	r2, r3, [r4]
		z3=3*(a3*a3+a4*a4)+z33*deep_arg->eosq;
 8009cbe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8009cc8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009ccc:	f7f6 fca4 	bl	8000618 <__aeabi_dmul>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	461d      	mov	r5, r3
 8009cd8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009cdc:	4619      	mov	r1, r3
 8009cde:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8009ce2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009ce6:	f7f6 fc97 	bl	8000618 <__aeabi_dmul>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	f7f6 fadb 	bl	80002ac <__adddf3>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	f04f 0200 	mov.w	r2, #0
 8009d02:	4b1f      	ldr	r3, [pc, #124]	@ (8009d80 <sdp4_deep_initialize+0xf10>)
 8009d04:	f7f6 fc88 	bl	8000618 <__aeabi_dmul>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4690      	mov	r8, r2
 8009d0e:	4699      	mov	r9, r3
 8009d10:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d14:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fc77 	bl	8000618 <__aeabi_dmul>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4610      	mov	r0, r2
 8009d30:	4619      	mov	r1, r3
 8009d32:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8009d36:	461c      	mov	r4, r3
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	4649      	mov	r1, r9
 8009d40:	f7f6 fab4 	bl	80002ac <__adddf3>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	e944 2302 	strd	r2, r3, [r4, #-8]
		z11=-6*a1*a5+deep_arg->eosq*(-24*x1*x7-6*x3*x5);
 8009d4c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009d50:	4619      	mov	r1, r3
 8009d52:	f04f 0200 	mov.w	r2, #0
 8009d56:	4b0d      	ldr	r3, [pc, #52]	@ (8009d8c <sdp4_deep_initialize+0xf1c>)
 8009d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d5c:	f7f6 fc5c 	bl	8000618 <__aeabi_dmul>
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4610      	mov	r0, r2
 8009d66:	4619      	mov	r1, r3
 8009d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fc52 	bl	8000618 <__aeabi_dmul>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	e00a      	b.n	8009d90 <sdp4_deep_initialize+0xf20>
 8009d7a:	bf00      	nop
 8009d7c:	40280000 	.word	0x40280000
 8009d80:	40080000 	.word	0x40080000
 8009d84:	40380000 	.word	0x40380000
 8009d88:	40180000 	.word	0x40180000
 8009d8c:	c0180000 	.word	0xc0180000
 8009d90:	4692      	mov	sl, r2
 8009d92:	469b      	mov	fp, r3
 8009d94:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009d98:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009da2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009da6:	4619      	mov	r1, r3
 8009da8:	f04f 0200 	mov.w	r2, #0
 8009dac:	4bd2      	ldr	r3, [pc, #840]	@ (800a0f8 <sdp4_deep_initialize+0x1288>)
 8009dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db2:	f7f6 fc31 	bl	8000618 <__aeabi_dmul>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fc27 	bl	8000618 <__aeabi_dmul>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4614      	mov	r4, r2
 8009dd0:	461d      	mov	r5, r3
 8009dd2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	f04f 0200 	mov.w	r2, #0
 8009ddc:	4bc7      	ldr	r3, [pc, #796]	@ (800a0fc <sdp4_deep_initialize+0x128c>)
 8009dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de2:	f7f6 fc19 	bl	8000618 <__aeabi_dmul>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4610      	mov	r0, r2
 8009dec:	4619      	mov	r1, r3
 8009dee:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 fc0f 	bl	8000618 <__aeabi_dmul>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4620      	mov	r0, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	f7f6 fa51 	bl	80002a8 <__aeabi_dsub>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fc03 	bl	8000618 <__aeabi_dmul>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4610      	mov	r0, r2
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009e1e:	461c      	mov	r4, r3
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4650      	mov	r0, sl
 8009e26:	4659      	mov	r1, fp
 8009e28:	f7f6 fa40 	bl	80002ac <__adddf3>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	e9c4 2300 	strd	r2, r3, [r4]
		z12=-6*(a1*a6+a3*a5)+deep_arg->eosq*(-24*(x2*x7+x1*x8)-6*(x3*x6+x4*x5));
 8009e34:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009e38:	4619      	mov	r1, r3
 8009e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8009e3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e46:	f7f6 fbe7 	bl	8000618 <__aeabi_dmul>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4614      	mov	r4, r2
 8009e50:	461d      	mov	r5, r3
 8009e52:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009e56:	4619      	mov	r1, r3
 8009e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009e64:	f7f6 fbd8 	bl	8000618 <__aeabi_dmul>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	f7f6 fa1c 	bl	80002ac <__adddf3>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	f04f 0200 	mov.w	r2, #0
 8009e80:	4b9f      	ldr	r3, [pc, #636]	@ (800a100 <sdp4_deep_initialize+0x1290>)
 8009e82:	f7f6 fbc9 	bl	8000618 <__aeabi_dmul>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	e9c7 2300 	strd	r2, r3, [r7]
 8009e8e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009e92:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8009e9c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009eae:	f7f6 fbb3 	bl	8000618 <__aeabi_dmul>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4614      	mov	r4, r2
 8009eb8:	461d      	mov	r5, r3
 8009eba:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8009ec4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ecc:	f7f6 fba4 	bl	8000618 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	f7f6 f9e8 	bl	80002ac <__adddf3>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	f04f 0200 	mov.w	r2, #0
 8009ee8:	4b83      	ldr	r3, [pc, #524]	@ (800a0f8 <sdp4_deep_initialize+0x1288>)
 8009eea:	f7f6 fb95 	bl	8000618 <__aeabi_dmul>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4690      	mov	r8, r2
 8009ef4:	4699      	mov	r9, r3
 8009ef6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009efa:	4619      	mov	r1, r3
 8009efc:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8009f00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f08:	f7f6 fb86 	bl	8000618 <__aeabi_dmul>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4614      	mov	r4, r2
 8009f12:	461d      	mov	r5, r3
 8009f14:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009f18:	4619      	mov	r1, r3
 8009f1a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009f26:	f7f6 fb77 	bl	8000618 <__aeabi_dmul>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7f6 f9bb 	bl	80002ac <__adddf3>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	f04f 0200 	mov.w	r2, #0
 8009f42:	4b6e      	ldr	r3, [pc, #440]	@ (800a0fc <sdp4_deep_initialize+0x128c>)
 8009f44:	f7f6 fb68 	bl	8000618 <__aeabi_dmul>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7f6 f9aa 	bl	80002a8 <__aeabi_dsub>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4650      	mov	r0, sl
 8009f5a:	4659      	mov	r1, fp
 8009f5c:	f7f6 fb5c 	bl	8000618 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4610      	mov	r0, r2
 8009f66:	4619      	mov	r1, r3
 8009f68:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8009f6c:	461c      	mov	r4, r3
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f76:	f7f6 f999 	bl	80002ac <__adddf3>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	e944 2302 	strd	r2, r3, [r4, #-8]
		z13=-6*a3*a6+deep_arg->eosq*(-24*x2*x8-6*x4*x6);
 8009f82:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8009f86:	4619      	mov	r1, r3
 8009f88:	f04f 0200 	mov.w	r2, #0
 8009f8c:	4b5c      	ldr	r3, [pc, #368]	@ (800a100 <sdp4_deep_initialize+0x1290>)
 8009f8e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009f92:	f7f6 fb41 	bl	8000618 <__aeabi_dmul>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8009fa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009fa6:	f7f6 fb37 	bl	8000618 <__aeabi_dmul>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4692      	mov	sl, r2
 8009fb0:	469b      	mov	fp, r3
 8009fb2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8009fb6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fc0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f04f 0200 	mov.w	r2, #0
 8009fca:	4b4b      	ldr	r3, [pc, #300]	@ (800a0f8 <sdp4_deep_initialize+0x1288>)
 8009fcc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8009fd0:	f7f6 fb22 	bl	8000618 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4619      	mov	r1, r3
 8009fdc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8009fe0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009fe4:	f7f6 fb18 	bl	8000618 <__aeabi_dmul>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4614      	mov	r4, r2
 8009fee:	461d      	mov	r5, r3
 8009ff0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	4b40      	ldr	r3, [pc, #256]	@ (800a0fc <sdp4_deep_initialize+0x128c>)
 8009ffc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a000:	f7f6 fb0a 	bl	8000618 <__aeabi_dmul>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4610      	mov	r0, r2
 800a00a:	4619      	mov	r1, r3
 800a00c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800a010:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a014:	f7f6 fb00 	bl	8000618 <__aeabi_dmul>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 f942 	bl	80002a8 <__aeabi_dsub>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4640      	mov	r0, r8
 800a02a:	4649      	mov	r1, r9
 800a02c:	f7f6 faf4 	bl	8000618 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4610      	mov	r0, r2
 800a036:	4619      	mov	r1, r3
 800a038:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800a03c:	461c      	mov	r4, r3
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4650      	mov	r0, sl
 800a044:	4659      	mov	r1, fp
 800a046:	f7f6 f931 	bl	80002ac <__adddf3>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	e9c4 2300 	strd	r2, r3, [r4]
		z21=6*a2*a5+deep_arg->eosq*(24*x1*x5-6*x3*x7);
 800a052:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a056:	4619      	mov	r1, r3
 800a058:	f04f 0200 	mov.w	r2, #0
 800a05c:	4b27      	ldr	r3, [pc, #156]	@ (800a0fc <sdp4_deep_initialize+0x128c>)
 800a05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a062:	f7f6 fad9 	bl	8000618 <__aeabi_dmul>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4610      	mov	r0, r2
 800a06c:	4619      	mov	r1, r3
 800a06e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7f6 facf 	bl	8000618 <__aeabi_dmul>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4692      	mov	sl, r2
 800a080:	469b      	mov	fp, r3
 800a082:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a086:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a090:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a094:	4619      	mov	r1, r3
 800a096:	f04f 0200 	mov.w	r2, #0
 800a09a:	4b1a      	ldr	r3, [pc, #104]	@ (800a104 <sdp4_deep_initialize+0x1294>)
 800a09c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a0:	f7f6 faba 	bl	8000618 <__aeabi_dmul>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	f7f6 fab0 	bl	8000618 <__aeabi_dmul>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4614      	mov	r4, r2
 800a0be:	461d      	mov	r5, r3
 800a0c0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	f04f 0200 	mov.w	r2, #0
 800a0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a0fc <sdp4_deep_initialize+0x128c>)
 800a0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d0:	f7f6 faa2 	bl	8000618 <__aeabi_dmul>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 fa98 	bl	8000618 <__aeabi_dmul>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7f6 f8da 	bl	80002a8 <__aeabi_dsub>
 800a0f4:	e008      	b.n	800a108 <sdp4_deep_initialize+0x1298>
 800a0f6:	bf00      	nop
 800a0f8:	c0380000 	.word	0xc0380000
 800a0fc:	40180000 	.word	0x40180000
 800a100:	c0180000 	.word	0xc0180000
 800a104:	40380000 	.word	0x40380000
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	f7f6 fa82 	bl	8000618 <__aeabi_dmul>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4610      	mov	r0, r2
 800a11a:	4619      	mov	r1, r3
 800a11c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800a120:	461c      	mov	r4, r3
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4650      	mov	r0, sl
 800a128:	4659      	mov	r1, fp
 800a12a:	f7f6 f8bf 	bl	80002ac <__adddf3>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	e944 2302 	strd	r2, r3, [r4, #-8]
		z22=6*(a4*a5+a2*a6)+deep_arg->eosq*(24*(x2*x5+x1*x6)-6*(x4*x7+x3*x8));
 800a136:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a13a:	4619      	mov	r1, r3
 800a13c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a148:	f7f6 fa66 	bl	8000618 <__aeabi_dmul>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4614      	mov	r4, r2
 800a152:	461d      	mov	r5, r3
 800a154:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a158:	4619      	mov	r1, r3
 800a15a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800a15e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a162:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a166:	f7f6 fa57 	bl	8000618 <__aeabi_dmul>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4620      	mov	r0, r4
 800a170:	4629      	mov	r1, r5
 800a172:	f7f6 f89b 	bl	80002ac <__adddf3>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4610      	mov	r0, r2
 800a17c:	4619      	mov	r1, r3
 800a17e:	f04f 0200 	mov.w	r2, #0
 800a182:	4bcf      	ldr	r3, [pc, #828]	@ (800a4c0 <sdp4_deep_initialize+0x1650>)
 800a184:	f7f6 fa48 	bl	8000618 <__aeabi_dmul>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	e9c7 2300 	strd	r2, r3, [r7]
 800a190:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a194:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800a19e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a1b0:	f7f6 fa32 	bl	8000618 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	461d      	mov	r5, r3
 800a1bc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800a1c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ce:	f7f6 fa23 	bl	8000618 <__aeabi_dmul>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	4629      	mov	r1, r5
 800a1da:	f7f6 f867 	bl	80002ac <__adddf3>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f04f 0200 	mov.w	r2, #0
 800a1ea:	4bb6      	ldr	r3, [pc, #728]	@ (800a4c4 <sdp4_deep_initialize+0x1654>)
 800a1ec:	f7f6 fa14 	bl	8000618 <__aeabi_dmul>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4690      	mov	r8, r2
 800a1f6:	4699      	mov	r9, r3
 800a1f8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a20a:	f7f6 fa05 	bl	8000618 <__aeabi_dmul>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4614      	mov	r4, r2
 800a214:	461d      	mov	r5, r3
 800a216:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a21a:	4619      	mov	r1, r3
 800a21c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800a220:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a228:	f7f6 f9f6 	bl	8000618 <__aeabi_dmul>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4620      	mov	r0, r4
 800a232:	4629      	mov	r1, r5
 800a234:	f7f6 f83a 	bl	80002ac <__adddf3>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4610      	mov	r0, r2
 800a23e:	4619      	mov	r1, r3
 800a240:	f04f 0200 	mov.w	r2, #0
 800a244:	4b9e      	ldr	r3, [pc, #632]	@ (800a4c0 <sdp4_deep_initialize+0x1650>)
 800a246:	f7f6 f9e7 	bl	8000618 <__aeabi_dmul>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4640      	mov	r0, r8
 800a250:	4649      	mov	r1, r9
 800a252:	f7f6 f829 	bl	80002a8 <__aeabi_dsub>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4650      	mov	r0, sl
 800a25c:	4659      	mov	r1, fp
 800a25e:	f7f6 f9db 	bl	8000618 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4610      	mov	r0, r2
 800a268:	4619      	mov	r1, r3
 800a26a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a26e:	461c      	mov	r4, r3
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a278:	f7f6 f818 	bl	80002ac <__adddf3>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	e9c4 2300 	strd	r2, r3, [r4]
		z23=6*a4*a6+deep_arg->eosq*(24*x2*x6-6*x4*x8);
 800a284:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a288:	4619      	mov	r1, r3
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	4b8c      	ldr	r3, [pc, #560]	@ (800a4c0 <sdp4_deep_initialize+0x1650>)
 800a290:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a294:	f7f6 f9c0 	bl	8000618 <__aeabi_dmul>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4610      	mov	r0, r2
 800a29e:	4619      	mov	r1, r3
 800a2a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800a2a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2a8:	f7f6 f9b6 	bl	8000618 <__aeabi_dmul>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4692      	mov	sl, r2
 800a2b2:	469b      	mov	fp, r3
 800a2b4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a2b8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2c2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	f04f 0200 	mov.w	r2, #0
 800a2cc:	4b7d      	ldr	r3, [pc, #500]	@ (800a4c4 <sdp4_deep_initialize+0x1654>)
 800a2ce:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a2d2:	f7f6 f9a1 	bl	8000618 <__aeabi_dmul>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4610      	mov	r0, r2
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800a2e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2e6:	f7f6 f997 	bl	8000618 <__aeabi_dmul>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4614      	mov	r4, r2
 800a2f0:	461d      	mov	r5, r3
 800a2f2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	4b70      	ldr	r3, [pc, #448]	@ (800a4c0 <sdp4_deep_initialize+0x1650>)
 800a2fe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a302:	f7f6 f989 	bl	8000618 <__aeabi_dmul>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4610      	mov	r0, r2
 800a30c:	4619      	mov	r1, r3
 800a30e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800a312:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a316:	f7f6 f97f 	bl	8000618 <__aeabi_dmul>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	4620      	mov	r0, r4
 800a320:	4629      	mov	r1, r5
 800a322:	f7f5 ffc1 	bl	80002a8 <__aeabi_dsub>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4640      	mov	r0, r8
 800a32c:	4649      	mov	r1, r9
 800a32e:	f7f6 f973 	bl	8000618 <__aeabi_dmul>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4610      	mov	r0, r2
 800a338:	4619      	mov	r1, r3
 800a33a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a33e:	461c      	mov	r4, r3
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4650      	mov	r0, sl
 800a346:	4659      	mov	r1, fp
 800a348:	f7f5 ffb0 	bl	80002ac <__adddf3>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	e944 2302 	strd	r2, r3, [r4, #-8]
		z1=z1+z1+deep_arg->betao2*z31;
 800a354:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a358:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	f7f5 ffa4 	bl	80002ac <__adddf3>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4690      	mov	r8, r2
 800a36a:	4699      	mov	r9, r3
 800a36c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a370:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a37a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f7f6 f949 	bl	8000618 <__aeabi_dmul>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4610      	mov	r0, r2
 800a38c:	4619      	mov	r1, r3
 800a38e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a392:	461c      	mov	r4, r3
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f5 ff86 	bl	80002ac <__adddf3>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	e944 2302 	strd	r2, r3, [r4, #-8]
		z2=z2+z2+deep_arg->betao2*z32;
 800a3a8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a3ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	f7f5 ff7a 	bl	80002ac <__adddf3>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4690      	mov	r8, r2
 800a3be:	4699      	mov	r9, r3
 800a3c0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a3c4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a3ce:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a3d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3d6:	f7f6 f91f 	bl	8000618 <__aeabi_dmul>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4610      	mov	r0, r2
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a3e6:	461c      	mov	r4, r3
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	f7f5 ff5c 	bl	80002ac <__adddf3>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	e9c4 2300 	strd	r2, r3, [r4]
		z3=z3+z3+deep_arg->betao2*z33;
 800a3fc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a400:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	f7f5 ff50 	bl	80002ac <__adddf3>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4690      	mov	r8, r2
 800a412:	4699      	mov	r9, r3
 800a414:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a418:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a422:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f6 f8f5 	bl	8000618 <__aeabi_dmul>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4610      	mov	r0, r2
 800a434:	4619      	mov	r1, r3
 800a436:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a43a:	461c      	mov	r4, r3
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4640      	mov	r0, r8
 800a442:	4649      	mov	r1, r9
 800a444:	f7f5 ff32 	bl	80002ac <__adddf3>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	e944 2302 	strd	r2, r3, [r4, #-8]
		s3=cc*xnoi;
 800a450:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a454:	461c      	mov	r4, r3
 800a456:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a45a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a45e:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 800a462:	f7f6 f8d9 	bl	8000618 <__aeabi_dmul>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	e9c4 2300 	strd	r2, r3, [r4]
		s2=-0.5*s3/deep_arg->betao;
 800a46e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a472:	4619      	mov	r1, r3
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	4b13      	ldr	r3, [pc, #76]	@ (800a4c8 <sdp4_deep_initialize+0x1658>)
 800a47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a47e:	f7f6 f8cb 	bl	8000618 <__aeabi_dmul>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4614      	mov	r4, r2
 800a488:	461d      	mov	r5, r3
 800a48a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a48e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a498:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800a49c:	460e      	mov	r6, r1
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7f6 f9e3 	bl	800086c <__aeabi_ddiv>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	e946 2302 	strd	r2, r3, [r6, #-8]
		s4=s3*deep_arg->betao;
 800a4ae:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a4b2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800a4bc:	e006      	b.n	800a4cc <sdp4_deep_initialize+0x165c>
 800a4be:	bf00      	nop
 800a4c0:	40180000 	.word	0x40180000
 800a4c4:	40380000 	.word	0x40380000
 800a4c8:	bfe00000 	.word	0xbfe00000
 800a4cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a4d0:	461d      	mov	r5, r3
 800a4d2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a4d6:	461c      	mov	r4, r3
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a4e0:	f7f6 f89a 	bl	8000618 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	e9c5 2300 	strd	r2, r3, [r5]
		s1=-15*eq*s4;
 800a4ec:	f04f 0200 	mov.w	r2, #0
 800a4f0:	4bc8      	ldr	r3, [pc, #800]	@ (800a814 <sdp4_deep_initialize+0x19a4>)
 800a4f2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a4f6:	f7f6 f88f 	bl	8000618 <__aeabi_dmul>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	4614      	mov	r4, r2
 800a500:	461d      	mov	r5, r3
 800a502:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a506:	461e      	mov	r6, r3
 800a508:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a50c:	4619      	mov	r1, r3
 800a50e:	4622      	mov	r2, r4
 800a510:	462b      	mov	r3, r5
 800a512:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a516:	f7f6 f87f 	bl	8000618 <__aeabi_dmul>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	e946 2302 	strd	r2, r3, [r6, #-8]
		s5=x1*x3+x2*x4;
 800a522:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a526:	4619      	mov	r1, r3
 800a528:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a534:	f7f6 f870 	bl	8000618 <__aeabi_dmul>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4690      	mov	r8, r2
 800a53e:	4699      	mov	r9, r3
 800a540:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a544:	4619      	mov	r1, r3
 800a546:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a54a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a54e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a552:	f7f6 f861 	bl	8000618 <__aeabi_dmul>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4610      	mov	r0, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a562:	461c      	mov	r4, r3
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4640      	mov	r0, r8
 800a56a:	4649      	mov	r1, r9
 800a56c:	f7f5 fe9e 	bl	80002ac <__adddf3>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	e9c4 2300 	strd	r2, r3, [r4]
		s6=x2*x3+x1*x4;
 800a578:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a57c:	4619      	mov	r1, r3
 800a57e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a58a:	f7f6 f845 	bl	8000618 <__aeabi_dmul>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	4690      	mov	r8, r2
 800a594:	4699      	mov	r9, r3
 800a596:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a59a:	4619      	mov	r1, r3
 800a59c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a5a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a8:	f7f6 f836 	bl	8000618 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5b8:	461c      	mov	r4, r3
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	f7f5 fe73 	bl	80002ac <__adddf3>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	e944 2302 	strd	r2, r3, [r4, #-8]
		s7=x2*x4-x1*x3;
 800a5ce:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a5d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5dc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a5e0:	f7f6 f81a 	bl	8000618 <__aeabi_dmul>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4690      	mov	r8, r2
 800a5ea:	4699      	mov	r9, r3
 800a5ec:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5fe:	f7f6 f80b 	bl	8000618 <__aeabi_dmul>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4610      	mov	r0, r2
 800a608:	4619      	mov	r1, r3
 800a60a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a60e:	461c      	mov	r4, r3
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	4640      	mov	r0, r8
 800a616:	4649      	mov	r1, r9
 800a618:	f7f5 fe46 	bl	80002a8 <__aeabi_dsub>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	e9c4 2300 	strd	r2, r3, [r4]
		se=s1*zn*s5;
 800a624:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a628:	4619      	mov	r1, r3
 800a62a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 800a62e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a632:	f7f5 fff1 	bl	8000618 <__aeabi_dmul>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4614      	mov	r4, r2
 800a63c:	461d      	mov	r5, r3
 800a63e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a642:	461e      	mov	r6, r3
 800a644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a648:	4619      	mov	r1, r3
 800a64a:	4622      	mov	r2, r4
 800a64c:	462b      	mov	r3, r5
 800a64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a652:	f7f5 ffe1 	bl	8000618 <__aeabi_dmul>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	e946 2302 	strd	r2, r3, [r6, #-8]
		si=s2*zn*(z11+z13);
 800a65e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a662:	4619      	mov	r1, r3
 800a664:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 800a668:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a66c:	f7f5 ffd4 	bl	8000618 <__aeabi_dmul>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4690      	mov	r8, r2
 800a676:	4699      	mov	r9, r3
 800a678:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a67c:	4619      	mov	r1, r3
 800a67e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a68a:	f7f5 fe0f 	bl	80002ac <__adddf3>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4610      	mov	r0, r2
 800a694:	4619      	mov	r1, r3
 800a696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a69a:	461c      	mov	r4, r3
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	4649      	mov	r1, r9
 800a6a4:	f7f5 ffb8 	bl	8000618 <__aeabi_dmul>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	e9c4 2300 	strd	r2, r3, [r4]
		sl=-zn*s3*(z1+z3-14-6*deep_arg->eosq);
 800a6b0:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800a6b4:	613b      	str	r3, [r7, #16]
 800a6b6:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800a6ba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800a6be:	617b      	str	r3, [r7, #20]
 800a6c0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a6cc:	f7f5 ffa4 	bl	8000618 <__aeabi_dmul>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4690      	mov	r8, r2
 800a6d6:	4699      	mov	r9, r3
 800a6d8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a6e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6e6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a6ea:	f7f5 fddf 	bl	80002ac <__adddf3>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f04f 0200 	mov.w	r2, #0
 800a6fa:	4b47      	ldr	r3, [pc, #284]	@ (800a818 <sdp4_deep_initialize+0x19a8>)
 800a6fc:	f7f5 fdd4 	bl	80002a8 <__aeabi_dsub>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4614      	mov	r4, r2
 800a706:	461d      	mov	r5, r3
 800a708:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a70c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a716:	f04f 0200 	mov.w	r2, #0
 800a71a:	4b40      	ldr	r3, [pc, #256]	@ (800a81c <sdp4_deep_initialize+0x19ac>)
 800a71c:	f7f5 ff7c 	bl	8000618 <__aeabi_dmul>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4620      	mov	r0, r4
 800a726:	4629      	mov	r1, r5
 800a728:	f7f5 fdbe 	bl	80002a8 <__aeabi_dsub>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4610      	mov	r0, r2
 800a732:	4619      	mov	r1, r3
 800a734:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a738:	461c      	mov	r4, r3
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	4640      	mov	r0, r8
 800a740:	4649      	mov	r1, r9
 800a742:	f7f5 ff69 	bl	8000618 <__aeabi_dmul>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	e944 2302 	strd	r2, r3, [r4, #-8]
		sgh=s4*zn*(z31+z33-6);
 800a74e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a752:	4619      	mov	r1, r3
 800a754:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 800a758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a75c:	f7f5 ff5c 	bl	8000618 <__aeabi_dmul>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4690      	mov	r8, r2
 800a766:	4699      	mov	r9, r3
 800a768:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800a76c:	4619      	mov	r1, r3
 800a76e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a77a:	f7f5 fd97 	bl	80002ac <__adddf3>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4610      	mov	r0, r2
 800a784:	4619      	mov	r1, r3
 800a786:	f04f 0200 	mov.w	r2, #0
 800a78a:	4b24      	ldr	r3, [pc, #144]	@ (800a81c <sdp4_deep_initialize+0x19ac>)
 800a78c:	f7f5 fd8c 	bl	80002a8 <__aeabi_dsub>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	4610      	mov	r0, r2
 800a796:	4619      	mov	r1, r3
 800a798:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800a79c:	461c      	mov	r4, r3
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	f7f5 ff37 	bl	8000618 <__aeabi_dmul>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	e9c4 2300 	strd	r2, r3, [r4]
		sh=-zn*s2*(z21+z23);
 800a7b2:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 800a7b6:	60bb      	str	r3, [r7, #8]
 800a7b8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 800a7bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a7c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7ce:	f7f5 ff23 	bl	8000618 <__aeabi_dmul>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4614      	mov	r4, r2
 800a7d8:	461d      	mov	r5, r3
 800a7da:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800a7de:	4619      	mov	r1, r3
 800a7e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a7e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7e8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a7ec:	f7f5 fd5e 	bl	80002ac <__adddf3>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	f7f5 ff0e 	bl	8000618 <__aeabi_dmul>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358

		if (m->xqncl<5.2359877E-2)
 800a804:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a808:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 800a812:	e005      	b.n	800a820 <sdp4_deep_initialize+0x19b0>
 800a814:	c02e0000 	.word	0xc02e0000
 800a818:	402c0000 	.word	0x402c0000
 800a81c:	40180000 	.word	0x40180000
 800a820:	a3e8      	add	r3, pc, #928	@ (adr r3, 800abc4 <sdp4_deep_initialize+0x1d54>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f7f6 f969 	bl	8000afc <__aeabi_dcmplt>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <sdp4_deep_initialize+0x19cc>
			sh=0;
 800a830:	f04f 0200 	mov.w	r2, #0
 800a834:	f04f 0300 	mov.w	r3, #0
 800a838:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358

		m->ee2=2*s1*s6;
 800a83c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a840:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	f7f5 fd30 	bl	80002ac <__adddf3>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4610      	mov	r0, r2
 800a852:	4619      	mov	r1, r3
 800a854:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a858:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a85c:	f7f5 fedc 	bl	8000618 <__aeabi_dmul>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4610      	mov	r0, r2
 800a866:	4619      	mov	r1, r3
 800a868:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a86c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	e9c3 013e 	strd	r0, r1, [r3, #248]	@ 0xf8
		m->e3=2*s1*s7;
 800a876:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a87a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	f7f5 fd13 	bl	80002ac <__adddf3>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4610      	mov	r0, r2
 800a88c:	4619      	mov	r1, r3
 800a88e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 febf 	bl	8000618 <__aeabi_dmul>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a8a6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	e9c3 0140 	strd	r0, r1, [r3, #256]	@ 0x100
		m->xi2=2*s2*z12;
 800a8b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a8b4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	f7f5 fcf6 	bl	80002ac <__adddf3>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a8cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8d0:	f7f5 fea2 	bl	8000618 <__aeabi_dmul>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4610      	mov	r0, r2
 800a8da:	4619      	mov	r1, r3
 800a8dc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a8e0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	e9c3 0142 	strd	r0, r1, [r3, #264]	@ 0x108
		m->xi3=2*s2*(z13-z11);
 800a8ea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a8ee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	f7f5 fcd9 	bl	80002ac <__adddf3>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4614      	mov	r4, r2
 800a900:	461d      	mov	r5, r3
 800a902:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800a906:	4619      	mov	r1, r3
 800a908:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a914:	f7f5 fcc8 	bl	80002a8 <__aeabi_dsub>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4620      	mov	r0, r4
 800a91e:	4629      	mov	r1, r5
 800a920:	f7f5 fe7a 	bl	8000618 <__aeabi_dmul>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4610      	mov	r0, r2
 800a92a:	4619      	mov	r1, r3
 800a92c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a930:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	e9c3 015a 	strd	r0, r1, [r3, #360]	@ 0x168
		m->xl2=-2*s3*z2;
 800a93a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a93e:	4619      	mov	r1, r3
 800a940:	f04f 0200 	mov.w	r2, #0
 800a944:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800a948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a94c:	f7f5 fe64 	bl	8000618 <__aeabi_dmul>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4610      	mov	r0, r2
 800a956:	4619      	mov	r1, r3
 800a958:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fe5a 	bl	8000618 <__aeabi_dmul>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4610      	mov	r0, r2
 800a96a:	4619      	mov	r1, r3
 800a96c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a970:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
		m->xl3=-2*s3*(z3-z1);
 800a97a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a97e:	4619      	mov	r1, r3
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800a988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a98c:	f7f5 fe44 	bl	8000618 <__aeabi_dmul>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4614      	mov	r4, r2
 800a996:	461d      	mov	r5, r3
 800a998:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a99c:	4619      	mov	r1, r3
 800a99e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a9a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9a6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800a9aa:	f7f5 fc7d 	bl	80002a8 <__aeabi_dsub>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	f7f5 fe2f 	bl	8000618 <__aeabi_dmul>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4610      	mov	r0, r2
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a9c6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	e9c3 0146 	strd	r0, r1, [r3, #280]	@ 0x118
		m->xl4=-2*s3*(-21-9*deep_arg->eosq)*ze;
 800a9d0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f04f 0200 	mov.w	r2, #0
 800a9da:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800a9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e2:	f7f5 fe19 	bl	8000618 <__aeabi_dmul>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4614      	mov	r4, r2
 800a9ec:	461d      	mov	r5, r3
 800a9ee:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800a9f2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9fc:	f04f 0200 	mov.w	r2, #0
 800aa00:	4b6d      	ldr	r3, [pc, #436]	@ (800abb8 <sdp4_deep_initialize+0x1d48>)
 800aa02:	f7f5 fe09 	bl	8000618 <__aeabi_dmul>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	f04f 0000 	mov.w	r0, #0
 800aa0e:	496b      	ldr	r1, [pc, #428]	@ (800abbc <sdp4_deep_initialize+0x1d4c>)
 800aa10:	f7f5 fc4a 	bl	80002a8 <__aeabi_dsub>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f5 fdfc 	bl	8000618 <__aeabi_dmul>
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	4610      	mov	r0, r2
 800aa26:	4619      	mov	r1, r3
 800aa28:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 800aa2c:	f7f5 fdf4 	bl	8000618 <__aeabi_dmul>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4610      	mov	r0, r2
 800aa36:	4619      	mov	r1, r3
 800aa38:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aa3c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	e9c3 0148 	strd	r0, r1, [r3, #288]	@ 0x120
		m->xgh2=2*s4*z32;
 800aa46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800aa4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	f7f5 fc2b 	bl	80002ac <__adddf3>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800aa62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa66:	f7f5 fdd7 	bl	8000618 <__aeabi_dmul>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4610      	mov	r0, r2
 800aa70:	4619      	mov	r1, r3
 800aa72:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aa76:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	e9c3 014a 	strd	r0, r1, [r3, #296]	@ 0x128
		m->xgh3=2*s4*(z33-z31);
 800aa80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800aa84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	f7f5 fc0e 	bl	80002ac <__adddf3>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4614      	mov	r4, r2
 800aa96:	461d      	mov	r5, r3
 800aa98:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaaa:	f7f5 fbfd 	bl	80002a8 <__aeabi_dsub>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4620      	mov	r0, r4
 800aab4:	4629      	mov	r1, r5
 800aab6:	f7f5 fdaf 	bl	8000618 <__aeabi_dmul>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4610      	mov	r0, r2
 800aac0:	4619      	mov	r1, r3
 800aac2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aac6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	e9c3 014c 	strd	r0, r1, [r3, #304]	@ 0x130
		m->xgh4=-18*s4*ze;
 800aad0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800aad4:	4619      	mov	r1, r3
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	4b39      	ldr	r3, [pc, #228]	@ (800abc0 <sdp4_deep_initialize+0x1d50>)
 800aadc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aae0:	f7f5 fd9a 	bl	8000618 <__aeabi_dmul>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4610      	mov	r0, r2
 800aaea:	4619      	mov	r1, r3
 800aaec:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 800aaf0:	f7f5 fd92 	bl	8000618 <__aeabi_dmul>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4619      	mov	r1, r3
 800aafc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ab00:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	e9c3 014e 	strd	r0, r1, [r3, #312]	@ 0x138
		m->xh2=-2*s2*z22;
 800ab0a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab0e:	4619      	mov	r1, r3
 800ab10:	f04f 0200 	mov.w	r2, #0
 800ab14:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800ab18:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ab1c:	f7f5 fd7c 	bl	8000618 <__aeabi_dmul>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4610      	mov	r0, r2
 800ab26:	4619      	mov	r1, r3
 800ab28:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f7f5 fd72 	bl	8000618 <__aeabi_dmul>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	4610      	mov	r0, r2
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ab40:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	e9c3 0150 	strd	r0, r1, [r3, #320]	@ 0x140
		m->xh3=-2*s2*(z23-z21);
 800ab4a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab4e:	4619      	mov	r1, r3
 800ab50:	f04f 0200 	mov.w	r2, #0
 800ab54:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800ab58:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ab5c:	f7f5 fd5c 	bl	8000618 <__aeabi_dmul>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4614      	mov	r4, r2
 800ab66:	461d      	mov	r5, r3
 800ab68:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800ab72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab76:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ab7a:	f7f5 fb95 	bl	80002a8 <__aeabi_dsub>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7f5 fd47 	bl	8000618 <__aeabi_dmul>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4610      	mov	r0, r2
 800ab90:	4619      	mov	r1, r3
 800ab92:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ab96:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	e9c3 0152 	strd	r0, r1, [r3, #328]	@ 0x148

		//Skip lunar terms?
		if (m->lunarTermsDone) {
 800aba0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aba4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f040 81a7 	bne.w	800af00 <sdp4_deep_initialize+0x2090>
 800abb2:	e00b      	b.n	800abcc <sdp4_deep_initialize+0x1d5c>
 800abb4:	f3af 8000 	nop.w
 800abb8:	40220000 	.word	0x40220000
 800abbc:	c0350000 	.word	0xc0350000
 800abc0:	c0320000 	.word	0xc0320000
 800abc4:	eeacd7a0 	.word	0xeeacd7a0
 800abc8:	3faacee9 	.word	0x3faacee9
			break;
		}

		/* Do lunar terms */
		m->sse=se;
 800abcc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800abd0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800abd4:	6819      	ldr	r1, [r3, #0]
 800abd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800abda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abde:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
		m->ssi=si;
 800abe2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800abe6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800abea:	6819      	ldr	r1, [r3, #0]
 800abec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	e9c1 2356 	strd	r2, r3, [r1, #344]	@ 0x158
		m->ssl=sl;
 800abf8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800abfc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ac00:	6819      	ldr	r1, [r3, #0]
 800ac02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac0a:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
		m->ssh=sh/deep_arg->sinio;
 800ac0e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac12:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ac1c:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 800ac20:	f7f5 fe24 	bl	800086c <__aeabi_ddiv>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac30:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	e9c3 0176 	strd	r0, r1, [r3, #472]	@ 0x1d8
		m->ssg=sgh-deep_arg->cosio*m->ssh;
 800ac3a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac3e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ac48:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac4c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800ac56:	f7f5 fcdf 	bl	8000618 <__aeabi_dmul>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800ac66:	461c      	mov	r4, r3
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ac70:	f7f5 fb1a 	bl	80002a8 <__aeabi_dsub>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac80:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	e9c3 0158 	strd	r0, r1, [r3, #352]	@ 0x160
		m->se2=m->ee2;
 800ac8a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac8e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 800ac98:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ac9c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	e9c3 015c 	strd	r0, r1, [r3, #368]	@ 0x170
		m->si2=m->xi2;
 800aca6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800acaa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 800acb4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800acb8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	e9c3 015e 	strd	r0, r1, [r3, #376]	@ 0x178
		m->sl2=m->xl2;
 800acc2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800acc6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 800acd0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800acd4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	e9c3 0160 	strd	r0, r1, [r3, #384]	@ 0x180
		m->sgh2=m->xgh2;
 800acde:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ace2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 800acec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800acf0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	e9c3 0162 	strd	r0, r1, [r3, #392]	@ 0x188
		m->sh2=m->xh2;
 800acfa:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800acfe:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 800ad08:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad0c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	e9c3 0164 	strd	r0, r1, [r3, #400]	@ 0x190
		m->se3=m->e3;
 800ad16:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad1a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800ad24:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad28:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	e9c3 0166 	strd	r0, r1, [r3, #408]	@ 0x198
		m->si3=m->xi3;
 800ad32:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad36:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	@ 0x168
 800ad40:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad44:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	e9c3 0168 	strd	r0, r1, [r3, #416]	@ 0x1a0
		m->sl3=m->xl3;
 800ad4e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad52:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	@ 0x118
 800ad5c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad60:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	e9c3 016a 	strd	r0, r1, [r3, #424]	@ 0x1a8
		m->sgh3=m->xgh3;
 800ad6a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad6e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	@ 0x130
 800ad78:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad7c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	e9c3 016c 	strd	r0, r1, [r3, #432]	@ 0x1b0
		m->sh3=m->xh3;
 800ad86:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad8a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 800ad94:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ad98:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	e9c3 016e 	strd	r0, r1, [r3, #440]	@ 0x1b8
		m->sl4=m->xl4;
 800ada2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ada6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 800adb0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800adb4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	e9c3 0170 	strd	r0, r1, [r3, #448]	@ 0x1c0
		m->sgh4=m->xgh4;
 800adbe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800adc2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	@ 0x138
 800adcc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800add0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	e9c3 0172 	strd	r0, r1, [r3, #456]	@ 0x1c8
		zcosg=m->zcosgl;
 800adda:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800adde:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 800ade8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
		zsing=m->zsingl;
 800adec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800adf0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 800adfa:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
		zcosi=m->zcosil;
 800adfe:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae02:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	@ 0x2b8
 800ae0c:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
		zsini=m->zsinil;
 800ae10:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae14:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	@ 0x2b0
 800ae1e:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
		zcosh=m->zcoshl*cosq+m->zsinhl*sinq;
 800ae22:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae26:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 800ae30:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 800ae34:	f7f5 fbf0 	bl	8000618 <__aeabi_dmul>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	461d      	mov	r5, r3
 800ae40:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae44:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 800ae4e:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 800ae52:	f7f5 fbe1 	bl	8000618 <__aeabi_dmul>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7f5 fa25 	bl	80002ac <__adddf3>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
		zsinh=sinq*m->zcoshl-cosq*m->zsinhl;
 800ae6a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae6e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	@ 0x2a8
 800ae78:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 800ae7c:	f7f5 fbcc 	bl	8000618 <__aeabi_dmul>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4614      	mov	r4, r2
 800ae86:	461d      	mov	r5, r3
 800ae88:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ae8c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	e9d3 01a8 	ldrd	r0, r1, [r3, #672]	@ 0x2a0
 800ae96:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 800ae9a:	f7f5 fbbd 	bl	8000618 <__aeabi_dmul>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4620      	mov	r0, r4
 800aea4:	4629      	mov	r1, r5
 800aea6:	f7f5 f9ff 	bl	80002a8 <__aeabi_dsub>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	460b      	mov	r3, r1
 800aeae:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
		zn=ZNL;
 800aeb2:	a30d      	add	r3, pc, #52	@ (adr r3, 800aee8 <sdp4_deep_initialize+0x2078>)
 800aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb8:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
		cc=C1L;
 800aebc:	a30c      	add	r3, pc, #48	@ (adr r3, 800aef0 <sdp4_deep_initialize+0x2080>)
 800aebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec2:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
		ze=ZEL;
 800aec6:	a30c      	add	r3, pc, #48	@ (adr r3, 800aef8 <sdp4_deep_initialize+0x2088>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
		/* zmo=m->zmol; */
		//Set lunarTermsDone flag:
		m->lunarTermsDone = true;
 800aed0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800aed4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	2301      	movs	r3, #1
 800aedc:	6013      	str	r3, [r2, #0]
		a1=zcosg*zcosh+zsing*zcosi*zsinh;
 800aede:	f7fe bae9 	b.w	80094b4 <sdp4_deep_initialize+0x644>
 800aee2:	bf00      	nop
 800aee4:	f3af 8000 	nop.w
 800aee8:	de6329c8 	.word	0xde6329c8
 800aeec:	3f24c16a 	.word	0x3f24c16a
 800aef0:	e793194b 	.word	0xe793194b
 800aef4:	3ea0186c 	.word	0x3ea0186c
 800aef8:	5119ce07 	.word	0x5119ce07
 800aefc:	3fac1bda 	.word	0x3fac1bda
			break;
 800af00:	bf00      	nop
	}

	m->sse=m->sse+se;
 800af02:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af06:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	@ 0x150
 800af10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800af14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af18:	f7f5 f9c8 	bl	80002ac <__adddf3>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800af24:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800af28:	6809      	ldr	r1, [r1, #0]
 800af2a:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
	m->ssi=m->ssi+si;
 800af2e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af32:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	e9d3 0156 	ldrd	r0, r1, [r3, #344]	@ 0x158
 800af3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f7f5 f9b2 	bl	80002ac <__adddf3>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800af50:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800af54:	6809      	ldr	r1, [r1, #0]
 800af56:	e9c1 2356 	strd	r2, r3, [r1, #344]	@ 0x158
	m->ssl=m->ssl+sl;
 800af5a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af5e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800af68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af70:	f7f5 f99c 	bl	80002ac <__adddf3>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800af7c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800af80:	6809      	ldr	r1, [r1, #0]
 800af82:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
	m->ssg=m->ssg+sgh-deep_arg->cosio/deep_arg->sinio*sh;
 800af86:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800af8a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	@ 0x160
 800af94:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f7f5 f986 	bl	80002ac <__adddf3>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	461d      	mov	r5, r3
 800afa8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800afac:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800afb6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800afba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800afc4:	f7f5 fc52 	bl	800086c <__aeabi_ddiv>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4610      	mov	r0, r2
 800afce:	4619      	mov	r1, r3
 800afd0:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 800afd4:	f7f5 fb20 	bl	8000618 <__aeabi_dmul>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	4620      	mov	r0, r4
 800afde:	4629      	mov	r1, r5
 800afe0:	f7f5 f962 	bl	80002a8 <__aeabi_dsub>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800afec:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800aff0:	6809      	ldr	r1, [r1, #0]
 800aff2:	e9c1 2358 	strd	r2, r3, [r1, #352]	@ 0x160
	m->ssh=m->ssh+sh/deep_arg->sinio;
 800aff6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800affa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	e9d3 4576 	ldrd	r4, r5, [r3, #472]	@ 0x1d8
 800b004:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b008:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b012:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 800b016:	f7f5 fc29 	bl	800086c <__aeabi_ddiv>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4620      	mov	r0, r4
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 f943 	bl	80002ac <__adddf3>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800b02e:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800b032:	6809      	ldr	r1, [r1, #0]
 800b034:	e9c1 2376 	strd	r2, r3, [r1, #472]	@ 0x1d8

	/* Geopotential resonance initialization for 12 hour orbits */
	m->resonanceFlag = 0;
 800b038:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b03c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2200      	movs	r2, #0
 800b044:	605a      	str	r2, [r3, #4]
	m->synchronousFlag = 0;
 800b046:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b04a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2200      	movs	r2, #0
 800b052:	609a      	str	r2, [r3, #8]

	if (!((m->xnq<0.0052359877) && (m->xnq>0.0034906585)))
 800b054:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b058:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800b062:	2301      	movs	r3, #1
 800b064:	461c      	mov	r4, r3
 800b066:	a3fd      	add	r3, pc, #1012	@ (adr r3, 800b45c <sdp4_deep_initialize+0x25ec>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f7f5 fd46 	bl	8000afc <__aeabi_dcmplt>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <sdp4_deep_initialize+0x220a>
 800b076:	2300      	movs	r3, #0
 800b078:	461c      	mov	r4, r3
 800b07a:	b2e3      	uxtb	r3, r4
 800b07c:	f083 0301 	eor.w	r3, r3, #1
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d119      	bne.n	800b0ba <sdp4_deep_initialize+0x224a>
 800b086:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b08a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800b094:	2301      	movs	r3, #1
 800b096:	461c      	mov	r4, r3
 800b098:	a3f2      	add	r3, pc, #968	@ (adr r3, 800b464 <sdp4_deep_initialize+0x25f4>)
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	f7f5 fd4b 	bl	8000b38 <__aeabi_dcmpgt>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <sdp4_deep_initialize+0x223c>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	461c      	mov	r4, r3
 800b0ac:	b2e3      	uxtb	r3, r4
 800b0ae:	f083 0301 	eor.w	r3, r3, #1
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f001 845b 	beq.w	800c970 <sdp4_deep_initialize+0x3b00>
	{
		if ((m->xnq<0.00826) || (m->xnq>0.00924))
 800b0ba:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b0be:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800b0c8:	a3e8      	add	r3, pc, #928	@ (adr r3, 800b46c <sdp4_deep_initialize+0x25fc>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f7f5 fd15 	bl	8000afc <__aeabi_dcmplt>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f041 8740 	bne.w	800cf5a <sdp4_deep_initialize+0x40ea>
 800b0da:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b0de:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800b0e8:	a3e2      	add	r3, pc, #904	@ (adr r3, 800b474 <sdp4_deep_initialize+0x2604>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f7f5 fd23 	bl	8000b38 <__aeabi_dcmpgt>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f041 8730 	bne.w	800cf5a <sdp4_deep_initialize+0x40ea>
		    return;

		if (eq<0.5)
 800b0fa:	f04f 0200 	mov.w	r2, #0
 800b0fe:	4bd6      	ldr	r3, [pc, #856]	@ (800b458 <sdp4_deep_initialize+0x25e8>)
 800b100:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b104:	f7f5 fcfa 	bl	8000afc <__aeabi_dcmplt>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f041 8727 	bne.w	800cf5e <sdp4_deep_initialize+0x40ee>
		    return;

		m->resonanceFlag = 1;
 800b110:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b114:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2201      	movs	r2, #1
 800b11c:	605a      	str	r2, [r3, #4]
		eoc=eq*deep_arg->eosq;
 800b11e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b122:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800b130:	460c      	mov	r4, r1
 800b132:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b136:	f7f5 fa6f 	bl	8000618 <__aeabi_dmul>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	e9c4 2300 	strd	r2, r3, [r4]
		g201=-0.306-(eq-0.64)*0.440;
 800b142:	a399      	add	r3, pc, #612	@ (adr r3, 800b3a8 <sdp4_deep_initialize+0x2538>)
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b14c:	f7f5 f8ac 	bl	80002a8 <__aeabi_dsub>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4610      	mov	r0, r2
 800b156:	4619      	mov	r1, r3
 800b158:	a395      	add	r3, pc, #596	@ (adr r3, 800b3b0 <sdp4_deep_initialize+0x2540>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f7f5 fa5b 	bl	8000618 <__aeabi_dmul>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 800b16a:	460c      	mov	r4, r1
 800b16c:	a192      	add	r1, pc, #584	@ (adr r1, 800b3b8 <sdp4_deep_initialize+0x2548>)
 800b16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b172:	f7f5 f899 	bl	80002a8 <__aeabi_dsub>
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	e944 2302 	strd	r2, r3, [r4, #-8]

		if (eq<=0.65)
 800b17e:	a390      	add	r3, pc, #576	@ (adr r3, 800b3c0 <sdp4_deep_initialize+0x2550>)
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b188:	f7f5 fcc2 	bl	8000b10 <__aeabi_dcmple>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 81d2 	beq.w	800b538 <sdp4_deep_initialize+0x26c8>
		{
			g211=3.616-13.247*eq+16.290*deep_arg->eosq;
 800b194:	a38c      	add	r3, pc, #560	@ (adr r3, 800b3c8 <sdp4_deep_initialize+0x2558>)
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b19e:	f7f5 fa3b 	bl	8000618 <__aeabi_dmul>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	a18a      	add	r1, pc, #552	@ (adr r1, 800b3d0 <sdp4_deep_initialize+0x2560>)
 800b1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ac:	f7f5 f87c 	bl	80002a8 <__aeabi_dsub>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	461d      	mov	r5, r3
 800b1b8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b1bc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b1c6:	a384      	add	r3, pc, #528	@ (adr r3, 800b3d8 <sdp4_deep_initialize+0x2568>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f7f5 fa24 	bl	8000618 <__aeabi_dmul>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f5 f868 	bl	80002ac <__adddf3>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
			g310=-19.302+117.390*eq-228.419*deep_arg->eosq+156.591*eoc;
 800b1e4:	a37e      	add	r3, pc, #504	@ (adr r3, 800b3e0 <sdp4_deep_initialize+0x2570>)
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b1ee:	f7f5 fa13 	bl	8000618 <__aeabi_dmul>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	a37b      	add	r3, pc, #492	@ (adr r3, 800b3e8 <sdp4_deep_initialize+0x2578>)
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	f7f5 f852 	bl	80002a8 <__aeabi_dsub>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	4614      	mov	r4, r2
 800b20a:	461d      	mov	r5, r3
 800b20c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b210:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b21a:	a375      	add	r3, pc, #468	@ (adr r3, 800b3f0 <sdp4_deep_initialize+0x2580>)
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	f7f5 f9fa 	bl	8000618 <__aeabi_dmul>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	4620      	mov	r0, r4
 800b22a:	4629      	mov	r1, r5
 800b22c:	f7f5 f83c 	bl	80002a8 <__aeabi_dsub>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4614      	mov	r4, r2
 800b236:	461d      	mov	r5, r3
 800b238:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b23c:	4619      	mov	r1, r3
 800b23e:	a36e      	add	r3, pc, #440	@ (adr r3, 800b3f8 <sdp4_deep_initialize+0x2588>)
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b248:	f7f5 f9e6 	bl	8000618 <__aeabi_dmul>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4620      	mov	r0, r4
 800b252:	4629      	mov	r1, r5
 800b254:	f7f5 f82a 	bl	80002ac <__adddf3>
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
			g322=-18.9068+109.7927*eq-214.6334*deep_arg->eosq+146.5816*eoc;
 800b260:	a367      	add	r3, pc, #412	@ (adr r3, 800b400 <sdp4_deep_initialize+0x2590>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b26a:	f7f5 f9d5 	bl	8000618 <__aeabi_dmul>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	4610      	mov	r0, r2
 800b274:	4619      	mov	r1, r3
 800b276:	a364      	add	r3, pc, #400	@ (adr r3, 800b408 <sdp4_deep_initialize+0x2598>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f5 f814 	bl	80002a8 <__aeabi_dsub>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4614      	mov	r4, r2
 800b286:	461d      	mov	r5, r3
 800b288:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b28c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b296:	a35e      	add	r3, pc, #376	@ (adr r3, 800b410 <sdp4_deep_initialize+0x25a0>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f7f5 f9bc 	bl	8000618 <__aeabi_dmul>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	f7f4 fffe 	bl	80002a8 <__aeabi_dsub>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4614      	mov	r4, r2
 800b2b2:	461d      	mov	r5, r3
 800b2b4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	a357      	add	r3, pc, #348	@ (adr r3, 800b418 <sdp4_deep_initialize+0x25a8>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c4:	f7f5 f9a8 	bl	8000618 <__aeabi_dmul>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7f4 ffec 	bl	80002ac <__adddf3>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
			g410=-41.122+242.694*eq-471.094*deep_arg->eosq+313.953*eoc;
 800b2dc:	a350      	add	r3, pc, #320	@ (adr r3, 800b420 <sdp4_deep_initialize+0x25b0>)
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b2e6:	f7f5 f997 	bl	8000618 <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	a34d      	add	r3, pc, #308	@ (adr r3, 800b428 <sdp4_deep_initialize+0x25b8>)
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f7f4 ffd6 	bl	80002a8 <__aeabi_dsub>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4614      	mov	r4, r2
 800b302:	461d      	mov	r5, r3
 800b304:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b308:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b312:	a347      	add	r3, pc, #284	@ (adr r3, 800b430 <sdp4_deep_initialize+0x25c0>)
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	f7f5 f97e 	bl	8000618 <__aeabi_dmul>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4620      	mov	r0, r4
 800b322:	4629      	mov	r1, r5
 800b324:	f7f4 ffc0 	bl	80002a8 <__aeabi_dsub>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	461d      	mov	r5, r3
 800b330:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b334:	4619      	mov	r1, r3
 800b336:	a340      	add	r3, pc, #256	@ (adr r3, 800b438 <sdp4_deep_initialize+0x25c8>)
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b340:	f7f5 f96a 	bl	8000618 <__aeabi_dmul>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4620      	mov	r0, r4
 800b34a:	4629      	mov	r1, r5
 800b34c:	f7f4 ffae 	bl	80002ac <__adddf3>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
			g422=-146.407+841.880*eq-1629.014*deep_arg->eosq+1083.435 * eoc;
 800b358:	a339      	add	r3, pc, #228	@ (adr r3, 800b440 <sdp4_deep_initialize+0x25d0>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b362:	f7f5 f959 	bl	8000618 <__aeabi_dmul>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4610      	mov	r0, r2
 800b36c:	4619      	mov	r1, r3
 800b36e:	a336      	add	r3, pc, #216	@ (adr r3, 800b448 <sdp4_deep_initialize+0x25d8>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f4 ff98 	bl	80002a8 <__aeabi_dsub>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	4614      	mov	r4, r2
 800b37e:	461d      	mov	r5, r3
 800b380:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b384:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b38e:	a330      	add	r3, pc, #192	@ (adr r3, 800b450 <sdp4_deep_initialize+0x25e0>)
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f7f5 f940 	bl	8000618 <__aeabi_dmul>
 800b398:	4602      	mov	r2, r0
 800b39a:	460b      	mov	r3, r1
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	e06c      	b.n	800b47c <sdp4_deep_initialize+0x260c>
 800b3a2:	bf00      	nop
 800b3a4:	f3af 8000 	nop.w
 800b3a8:	47ae147b 	.word	0x47ae147b
 800b3ac:	3fe47ae1 	.word	0x3fe47ae1
 800b3b0:	c28f5c29 	.word	0xc28f5c29
 800b3b4:	3fdc28f5 	.word	0x3fdc28f5
 800b3b8:	0624dd2f 	.word	0x0624dd2f
 800b3bc:	bfd39581 	.word	0xbfd39581
 800b3c0:	cccccccd 	.word	0xcccccccd
 800b3c4:	3fe4cccc 	.word	0x3fe4cccc
 800b3c8:	c8b43958 	.word	0xc8b43958
 800b3cc:	402a7e76 	.word	0x402a7e76
 800b3d0:	6872b021 	.word	0x6872b021
 800b3d4:	400ced91 	.word	0x400ced91
 800b3d8:	70a3d70a 	.word	0x70a3d70a
 800b3dc:	40304a3d 	.word	0x40304a3d
 800b3e0:	c28f5c29 	.word	0xc28f5c29
 800b3e4:	405d58f5 	.word	0x405d58f5
 800b3e8:	df3b645a 	.word	0xdf3b645a
 800b3ec:	40334d4f 	.word	0x40334d4f
 800b3f0:	72b020c5 	.word	0x72b020c5
 800b3f4:	406c8d68 	.word	0x406c8d68
 800b3f8:	78d4fdf4 	.word	0x78d4fdf4
 800b3fc:	406392e9 	.word	0x406392e9
 800b400:	98c7e282 	.word	0x98c7e282
 800b404:	405b72bb 	.word	0x405b72bb
 800b408:	0b780347 	.word	0x0b780347
 800b40c:	4032e824 	.word	0x4032e824
 800b410:	d013a92a 	.word	0xd013a92a
 800b414:	406ad444 	.word	0x406ad444
 800b418:	779a6b51 	.word	0x779a6b51
 800b41c:	4062529c 	.word	0x4062529c
 800b420:	3f7ced91 	.word	0x3f7ced91
 800b424:	406e5635 	.word	0x406e5635
 800b428:	b22d0e56 	.word	0xb22d0e56
 800b42c:	40448f9d 	.word	0x40448f9d
 800b430:	0624dd2f 	.word	0x0624dd2f
 800b434:	407d7181 	.word	0x407d7181
 800b438:	7ced9168 	.word	0x7ced9168
 800b43c:	40739f3f 	.word	0x40739f3f
 800b440:	3d70a3d7 	.word	0x3d70a3d7
 800b444:	408a4f0a 	.word	0x408a4f0a
 800b448:	24dd2f1b 	.word	0x24dd2f1b
 800b44c:	40624d06 	.word	0x40624d06
 800b450:	56041893 	.word	0x56041893
 800b454:	4099740e 	.word	0x4099740e
 800b458:	3fe00000 	.word	0x3fe00000
 800b45c:	bef0ac80 	.word	0xbef0ac80
 800b460:	3f757254 	.word	0x3f757254
 800b464:	032b0b4f 	.word	0x032b0b4f
 800b468:	3f6c9871 	.word	0x3f6c9871
 800b46c:	6eeb7026 	.word	0x6eeb7026
 800b470:	3f80ea9e 	.word	0x3f80ea9e
 800b474:	ce8533b1 	.word	0xce8533b1
 800b478:	3f82ec6b 	.word	0x3f82ec6b
 800b47c:	f7f4 ff14 	bl	80002a8 <__aeabi_dsub>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4614      	mov	r4, r2
 800b486:	461d      	mov	r5, r3
 800b488:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b48c:	4619      	mov	r1, r3
 800b48e:	f20f 53a0 	addw	r3, pc, #1440	@ 0x5a0
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b49a:	f7f5 f8bd 	bl	8000618 <__aeabi_dmul>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	f7f4 ff01 	bl	80002ac <__adddf3>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
			g520=-532.114+3017.977*eq-5740*deep_arg->eosq+3708.276*eoc;
 800b4b2:	f20f 5384 	addw	r3, pc, #1412	@ 0x584
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b4be:	f7f5 f8ab 	bl	8000618 <__aeabi_dmul>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	f20f 5374 	addw	r3, pc, #1396	@ 0x574
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f7f4 fee9 	bl	80002a8 <__aeabi_dsub>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4614      	mov	r4, r2
 800b4dc:	461d      	mov	r5, r3
 800b4de:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b4e2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4ec:	f20f 5358 	addw	r3, pc, #1368	@ 0x558
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	f7f5 f890 	bl	8000618 <__aeabi_dmul>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f4 fed2 	bl	80002a8 <__aeabi_dsub>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4614      	mov	r4, r2
 800b50a:	461d      	mov	r5, r3
 800b50c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b510:	4619      	mov	r1, r3
 800b512:	f20f 533c 	addw	r3, pc, #1340	@ 0x53c
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51e:	f7f5 f87b 	bl	8000618 <__aeabi_dmul>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	f7f4 febf 	bl	80002ac <__adddf3>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
 800b536:	e1b2      	b.n	800b89e <sdp4_deep_initialize+0x2a2e>
		}

		else
		{
			g211=-72.099+331.819*eq-508.738*deep_arg->eosq+266.724*eoc;
 800b538:	f20f 531c 	addw	r3, pc, #1308	@ 0x51c
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b544:	f7f5 f868 	bl	8000618 <__aeabi_dmul>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4610      	mov	r0, r2
 800b54e:	4619      	mov	r1, r3
 800b550:	f20f 530c 	addw	r3, pc, #1292	@ 0x50c
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f4 fea6 	bl	80002a8 <__aeabi_dsub>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4614      	mov	r4, r2
 800b562:	461d      	mov	r5, r3
 800b564:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b568:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b572:	f20f 43f4 	addw	r3, pc, #1268	@ 0x4f4
 800b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57a:	f7f5 f84d 	bl	8000618 <__aeabi_dmul>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	f7f4 fe8f 	bl	80002a8 <__aeabi_dsub>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4614      	mov	r4, r2
 800b590:	461d      	mov	r5, r3
 800b592:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b596:	4619      	mov	r1, r3
 800b598:	f20f 43d4 	addw	r3, pc, #1236	@ 0x4d4
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a4:	f7f5 f838 	bl	8000618 <__aeabi_dmul>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f4 fe7c 	bl	80002ac <__adddf3>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
			g310=-346.844+1582.851*eq-2415.925*deep_arg->eosq+1246.113*eoc;
 800b5bc:	f20f 43b8 	addw	r3, pc, #1208	@ 0x4b8
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b5c8:	f7f5 f826 	bl	8000618 <__aeabi_dmul>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	f20f 43a8 	addw	r3, pc, #1192	@ 0x4a8
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7f4 fe64 	bl	80002a8 <__aeabi_dsub>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4614      	mov	r4, r2
 800b5e6:	461d      	mov	r5, r3
 800b5e8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b5ec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5f6:	f20f 4390 	addw	r3, pc, #1168	@ 0x490
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f7f5 f80b 	bl	8000618 <__aeabi_dmul>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4620      	mov	r0, r4
 800b608:	4629      	mov	r1, r5
 800b60a:	f7f4 fe4d 	bl	80002a8 <__aeabi_dsub>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4614      	mov	r4, r2
 800b614:	461d      	mov	r5, r3
 800b616:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b61a:	4619      	mov	r1, r3
 800b61c:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b628:	f7f4 fff6 	bl	8000618 <__aeabi_dmul>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	4620      	mov	r0, r4
 800b632:	4629      	mov	r1, r5
 800b634:	f7f4 fe3a 	bl	80002ac <__adddf3>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
			g322=-342.585+1554.908*eq-2366.899*deep_arg->eosq+1215.972*eoc;
 800b640:	f20f 4354 	addw	r3, pc, #1108	@ 0x454
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b64c:	f7f4 ffe4 	bl	8000618 <__aeabi_dmul>
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	4610      	mov	r0, r2
 800b656:	4619      	mov	r1, r3
 800b658:	f20f 4344 	addw	r3, pc, #1092	@ 0x444
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7f4 fe22 	bl	80002a8 <__aeabi_dsub>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4614      	mov	r4, r2
 800b66a:	461d      	mov	r5, r3
 800b66c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b670:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b67a:	f20f 432c 	addw	r3, pc, #1068	@ 0x42c
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 ffc9 	bl	8000618 <__aeabi_dmul>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	4620      	mov	r0, r4
 800b68c:	4629      	mov	r1, r5
 800b68e:	f7f4 fe0b 	bl	80002a8 <__aeabi_dsub>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	4614      	mov	r4, r2
 800b698:	461d      	mov	r5, r3
 800b69a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b69e:	4619      	mov	r1, r3
 800b6a0:	f20f 430c 	addw	r3, pc, #1036	@ 0x40c
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6ac:	f7f4 ffb4 	bl	8000618 <__aeabi_dmul>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7f4 fdf8 	bl	80002ac <__adddf3>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
			g410=-1052.797+4758.686*eq-7193.992*deep_arg->eosq+3651.957*eoc;
 800b6c4:	a3fc      	add	r3, pc, #1008	@ (adr r3, 800bab8 <sdp4_deep_initialize+0x2c48>)
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b6ce:	f7f4 ffa3 	bl	8000618 <__aeabi_dmul>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	a3f9      	add	r3, pc, #996	@ (adr r3, 800bac0 <sdp4_deep_initialize+0x2c50>)
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	f7f4 fde2 	bl	80002a8 <__aeabi_dsub>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4614      	mov	r4, r2
 800b6ea:	461d      	mov	r5, r3
 800b6ec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b6f0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6fa:	a3f3      	add	r3, pc, #972	@ (adr r3, 800bac8 <sdp4_deep_initialize+0x2c58>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f7f4 ff8a 	bl	8000618 <__aeabi_dmul>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7f4 fdcc 	bl	80002a8 <__aeabi_dsub>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4614      	mov	r4, r2
 800b716:	461d      	mov	r5, r3
 800b718:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b71c:	4619      	mov	r1, r3
 800b71e:	a3ec      	add	r3, pc, #944	@ (adr r3, 800bad0 <sdp4_deep_initialize+0x2c60>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b728:	f7f4 ff76 	bl	8000618 <__aeabi_dmul>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	4620      	mov	r0, r4
 800b732:	4629      	mov	r1, r5
 800b734:	f7f4 fdba 	bl	80002ac <__adddf3>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
			g422=-3581.69+16178.11*eq-24462.77*deep_arg->eosq+12422.52*eoc;
 800b740:	a3e5      	add	r3, pc, #916	@ (adr r3, 800bad8 <sdp4_deep_initialize+0x2c68>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b74a:	f7f4 ff65 	bl	8000618 <__aeabi_dmul>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	4610      	mov	r0, r2
 800b754:	4619      	mov	r1, r3
 800b756:	a3e2      	add	r3, pc, #904	@ (adr r3, 800bae0 <sdp4_deep_initialize+0x2c70>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f4 fda4 	bl	80002a8 <__aeabi_dsub>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	4614      	mov	r4, r2
 800b766:	461d      	mov	r5, r3
 800b768:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b76c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b776:	a3dc      	add	r3, pc, #880	@ (adr r3, 800bae8 <sdp4_deep_initialize+0x2c78>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f7f4 ff4c 	bl	8000618 <__aeabi_dmul>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4620      	mov	r0, r4
 800b786:	4629      	mov	r1, r5
 800b788:	f7f4 fd8e 	bl	80002a8 <__aeabi_dsub>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	4614      	mov	r4, r2
 800b792:	461d      	mov	r5, r3
 800b794:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b798:	4619      	mov	r1, r3
 800b79a:	a3d5      	add	r3, pc, #852	@ (adr r3, 800baf0 <sdp4_deep_initialize+0x2c80>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7a4:	f7f4 ff38 	bl	8000618 <__aeabi_dmul>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	f7f4 fd7c 	bl	80002ac <__adddf3>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320

			if (eq<=0.715)
 800b7bc:	a3ce      	add	r3, pc, #824	@ (adr r3, 800baf8 <sdp4_deep_initialize+0x2c88>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b7c6:	f7f5 f9a3 	bl	8000b10 <__aeabi_dcmple>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d028      	beq.n	800b822 <sdp4_deep_initialize+0x29b2>
				g520=1464.74-4664.75*eq+3763.64*deep_arg->eosq;
 800b7d0:	a3cb      	add	r3, pc, #812	@ (adr r3, 800bb00 <sdp4_deep_initialize+0x2c90>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b7da:	f7f4 ff1d 	bl	8000618 <__aeabi_dmul>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	a1c9      	add	r1, pc, #804	@ (adr r1, 800bb08 <sdp4_deep_initialize+0x2c98>)
 800b7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7e8:	f7f4 fd5e 	bl	80002a8 <__aeabi_dsub>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4614      	mov	r4, r2
 800b7f2:	461d      	mov	r5, r3
 800b7f4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b7f8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b802:	a3c3      	add	r3, pc, #780	@ (adr r3, 800bb10 <sdp4_deep_initialize+0x2ca0>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 ff06 	bl	8000618 <__aeabi_dmul>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f4 fd4a 	bl	80002ac <__adddf3>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
 800b820:	e03d      	b.n	800b89e <sdp4_deep_initialize+0x2a2e>

			else
				g520=-5149.66+29936.92*eq-54087.36*deep_arg->eosq+31324.56*eoc;
 800b822:	a3bd      	add	r3, pc, #756	@ (adr r3, 800bb18 <sdp4_deep_initialize+0x2ca8>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b82c:	f7f4 fef4 	bl	8000618 <__aeabi_dmul>
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	4610      	mov	r0, r2
 800b836:	4619      	mov	r1, r3
 800b838:	a3b9      	add	r3, pc, #740	@ (adr r3, 800bb20 <sdp4_deep_initialize+0x2cb0>)
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f7f4 fd33 	bl	80002a8 <__aeabi_dsub>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4614      	mov	r4, r2
 800b848:	461d      	mov	r5, r3
 800b84a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b84e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b858:	a3b3      	add	r3, pc, #716	@ (adr r3, 800bb28 <sdp4_deep_initialize+0x2cb8>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fedb 	bl	8000618 <__aeabi_dmul>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f4 fd1d 	bl	80002a8 <__aeabi_dsub>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4614      	mov	r4, r2
 800b874:	461d      	mov	r5, r3
 800b876:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b87a:	4619      	mov	r1, r3
 800b87c:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bb30 <sdp4_deep_initialize+0x2cc0>)
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b886:	f7f4 fec7 	bl	8000618 <__aeabi_dmul>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4620      	mov	r0, r4
 800b890:	4629      	mov	r1, r5
 800b892:	f7f4 fd0b 	bl	80002ac <__adddf3>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	e9c7 23c6 	strd	r2, r3, [r7, #792]	@ 0x318
		}

		if (eq<0.7)
 800b89e:	a3a6      	add	r3, pc, #664	@ (adr r3, 800bb38 <sdp4_deep_initialize+0x2cc8>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b8a8:	f7f5 f928 	bl	8000afc <__aeabi_dcmplt>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 8176 	beq.w	800bba0 <sdp4_deep_initialize+0x2d30>
		{
			g533=-919.2277+4988.61*eq-9064.77*deep_arg->eosq+5542.21*eoc;
 800b8b4:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bb40 <sdp4_deep_initialize+0x2cd0>)
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b8be:	f7f4 feab 	bl	8000618 <__aeabi_dmul>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	a39f      	add	r3, pc, #636	@ (adr r3, 800bb48 <sdp4_deep_initialize+0x2cd8>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f7f4 fcea 	bl	80002a8 <__aeabi_dsub>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4614      	mov	r4, r2
 800b8da:	461d      	mov	r5, r3
 800b8dc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b8e0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8ea:	a399      	add	r3, pc, #612	@ (adr r3, 800bb50 <sdp4_deep_initialize+0x2ce0>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f4 fe92 	bl	8000618 <__aeabi_dmul>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7f4 fcd4 	bl	80002a8 <__aeabi_dsub>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	4614      	mov	r4, r2
 800b906:	461d      	mov	r5, r3
 800b908:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b90c:	4619      	mov	r1, r3
 800b90e:	a392      	add	r3, pc, #584	@ (adr r3, 800bb58 <sdp4_deep_initialize+0x2ce8>)
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b918:	f7f4 fe7e 	bl	8000618 <__aeabi_dmul>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4620      	mov	r0, r4
 800b922:	4629      	mov	r1, r5
 800b924:	f7f4 fcc2 	bl	80002ac <__adddf3>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	e9c7 23c0 	strd	r2, r3, [r7, #768]	@ 0x300
			g521=-822.71072+4568.6173*eq-8491.4146*deep_arg->eosq+5337.524*eoc;
 800b930:	a38b      	add	r3, pc, #556	@ (adr r3, 800bb60 <sdp4_deep_initialize+0x2cf0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b93a:	f7f4 fe6d 	bl	8000618 <__aeabi_dmul>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4610      	mov	r0, r2
 800b944:	4619      	mov	r1, r3
 800b946:	a388      	add	r3, pc, #544	@ (adr r3, 800bb68 <sdp4_deep_initialize+0x2cf8>)
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f7f4 fcac 	bl	80002a8 <__aeabi_dsub>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4614      	mov	r4, r2
 800b956:	461d      	mov	r5, r3
 800b958:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b95c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b966:	a382      	add	r3, pc, #520	@ (adr r3, 800bb70 <sdp4_deep_initialize+0x2d00>)
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	f7f4 fe54 	bl	8000618 <__aeabi_dmul>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	4620      	mov	r0, r4
 800b976:	4629      	mov	r1, r5
 800b978:	f7f4 fc96 	bl	80002a8 <__aeabi_dsub>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4614      	mov	r4, r2
 800b982:	461d      	mov	r5, r3
 800b984:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b988:	4619      	mov	r1, r3
 800b98a:	a37b      	add	r3, pc, #492	@ (adr r3, 800bb78 <sdp4_deep_initialize+0x2d08>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b994:	f7f4 fe40 	bl	8000618 <__aeabi_dmul>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4620      	mov	r0, r4
 800b99e:	4629      	mov	r1, r5
 800b9a0:	f7f4 fc84 	bl	80002ac <__adddf3>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	e9c7 23c4 	strd	r2, r3, [r7, #784]	@ 0x310
			g532=-853.666+4690.25*eq-8624.77*deep_arg->eosq+5341.4*eoc;
 800b9ac:	a374      	add	r3, pc, #464	@ (adr r3, 800bb80 <sdp4_deep_initialize+0x2d10>)
 800b9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b9b6:	f7f4 fe2f 	bl	8000618 <__aeabi_dmul>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4610      	mov	r0, r2
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	a371      	add	r3, pc, #452	@ (adr r3, 800bb88 <sdp4_deep_initialize+0x2d18>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	f7f4 fc6e 	bl	80002a8 <__aeabi_dsub>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	461d      	mov	r5, r3
 800b9d4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800b9d8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800bb90 <sdp4_deep_initialize+0x2d20>)
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f7f4 fe16 	bl	8000618 <__aeabi_dmul>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	f7f4 fc58 	bl	80002a8 <__aeabi_dsub>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	461d      	mov	r5, r3
 800ba00:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ba04:	4619      	mov	r1, r3
 800ba06:	a364      	add	r3, pc, #400	@ (adr r3, 800bb98 <sdp4_deep_initialize+0x2d28>)
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba10:	f7f4 fe02 	bl	8000618 <__aeabi_dmul>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4620      	mov	r0, r4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7f4 fc46 	bl	80002ac <__adddf3>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	e9c7 23c2 	strd	r2, r3, [r7, #776]	@ 0x308
 800ba28:	e180      	b.n	800bd2c <sdp4_deep_initialize+0x2ebc>
 800ba2a:	bf00      	nop
 800ba2c:	f3af 8000 	nop.w
 800ba30:	70a3d70a 	.word	0x70a3d70a
 800ba34:	4090edbd 	.word	0x4090edbd
 800ba38:	39581062 	.word	0x39581062
 800ba3c:	40a793f4 	.word	0x40a793f4
 800ba40:	78d4fdf4 	.word	0x78d4fdf4
 800ba44:	4080a0e9 	.word	0x4080a0e9
 800ba48:	00000000 	.word	0x00000000
 800ba4c:	40b66c00 	.word	0x40b66c00
 800ba50:	4fdf3b64 	.word	0x4fdf3b64
 800ba54:	40acf88d 	.word	0x40acf88d
 800ba58:	9fbe76c9 	.word	0x9fbe76c9
 800ba5c:	4074bd1a 	.word	0x4074bd1a
 800ba60:	04189375 	.word	0x04189375
 800ba64:	40520656 	.word	0x40520656
 800ba68:	d916872b 	.word	0xd916872b
 800ba6c:	407fcbce 	.word	0x407fcbce
 800ba70:	810624dd 	.word	0x810624dd
 800ba74:	4070ab95 	.word	0x4070ab95
 800ba78:	6c8b4396 	.word	0x6c8b4396
 800ba7c:	4098bb67 	.word	0x4098bb67
 800ba80:	0624dd2f 	.word	0x0624dd2f
 800ba84:	4075ad81 	.word	0x4075ad81
 800ba88:	9999999a 	.word	0x9999999a
 800ba8c:	40a2dfd9 	.word	0x40a2dfd9
 800ba90:	b645a1cb 	.word	0xb645a1cb
 800ba94:	40937873 	.word	0x40937873
 800ba98:	cac08312 	.word	0xcac08312
 800ba9c:	40984ba1 	.word	0x40984ba1
 800baa0:	28f5c28f 	.word	0x28f5c28f
 800baa4:	4075695c 	.word	0x4075695c
 800baa8:	49ba5e35 	.word	0x49ba5e35
 800baac:	40a27dcc 	.word	0x40a27dcc
 800bab0:	53f7ced9 	.word	0x53f7ced9
 800bab4:	4092ffe3 	.word	0x4092ffe3
 800bab8:	9db22d0e 	.word	0x9db22d0e
 800babc:	40b296af 	.word	0x40b296af
 800bac0:	20c49ba6 	.word	0x20c49ba6
 800bac4:	40907330 	.word	0x40907330
 800bac8:	f3b645a2 	.word	0xf3b645a2
 800bacc:	40bc19fd 	.word	0x40bc19fd
 800bad0:	fbe76c8b 	.word	0xfbe76c8b
 800bad4:	40ac87e9 	.word	0x40ac87e9
 800bad8:	147ae148 	.word	0x147ae148
 800badc:	40cf990e 	.word	0x40cf990e
 800bae0:	47ae147b 	.word	0x47ae147b
 800bae4:	40abfb61 	.word	0x40abfb61
 800bae8:	47ae147b 	.word	0x47ae147b
 800baec:	40d7e3b1 	.word	0x40d7e3b1
 800baf0:	8f5c28f6 	.word	0x8f5c28f6
 800baf4:	40c84342 	.word	0x40c84342
 800baf8:	ae147ae1 	.word	0xae147ae1
 800bafc:	3fe6e147 	.word	0x3fe6e147
 800bb00:	00000000 	.word	0x00000000
 800bb04:	40b238c0 	.word	0x40b238c0
 800bb08:	c28f5c29 	.word	0xc28f5c29
 800bb0c:	4096e2f5 	.word	0x4096e2f5
 800bb10:	ae147ae1 	.word	0xae147ae1
 800bb14:	40ad6747 	.word	0x40ad6747
 800bb18:	e147ae14 	.word	0xe147ae14
 800bb1c:	40dd3c3a 	.word	0x40dd3c3a
 800bb20:	f5c28f5c 	.word	0xf5c28f5c
 800bb24:	40b41da8 	.word	0x40b41da8
 800bb28:	851eb852 	.word	0x851eb852
 800bb2c:	40ea68eb 	.word	0x40ea68eb
 800bb30:	d70a3d71 	.word	0xd70a3d71
 800bb34:	40de9723 	.word	0x40de9723
 800bb38:	66666666 	.word	0x66666666
 800bb3c:	3fe66666 	.word	0x3fe66666
 800bb40:	28f5c28f 	.word	0x28f5c28f
 800bb44:	40b37c9c 	.word	0x40b37c9c
 800bb48:	5460aa65 	.word	0x5460aa65
 800bb4c:	408cb9d2 	.word	0x408cb9d2
 800bb50:	8f5c28f6 	.word	0x8f5c28f6
 800bb54:	40c1b462 	.word	0x40c1b462
 800bb58:	c28f5c29 	.word	0xc28f5c29
 800bb5c:	40b5a635 	.word	0x40b5a635
 800bb60:	075f6fd2 	.word	0x075f6fd2
 800bb64:	40b1d89e 	.word	0x40b1d89e
 800bb68:	8df7a4e8 	.word	0x8df7a4e8
 800bb6c:	4089b5af 	.word	0x4089b5af
 800bb70:	119ce076 	.word	0x119ce076
 800bb74:	40c095b5 	.word	0x40c095b5
 800bb78:	24dd2f1b 	.word	0x24dd2f1b
 800bb7c:	40b4d986 	.word	0x40b4d986
 800bb80:	00000000 	.word	0x00000000
 800bb84:	40b25240 	.word	0x40b25240
 800bb88:	f7ced917 	.word	0xf7ced917
 800bb8c:	408aad53 	.word	0x408aad53
 800bb90:	8f5c28f6 	.word	0x8f5c28f6
 800bb94:	40c0d862 	.word	0x40c0d862
 800bb98:	66666666 	.word	0x66666666
 800bb9c:	40b4dd66 	.word	0x40b4dd66
		}

		else
		{
			g533=-37995.78+161616.52*eq-229838.2*deep_arg->eosq+109377.94*eoc;
 800bba0:	f20f 534c 	addw	r3, pc, #1356	@ 0x54c
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800bbac:	f7f4 fd34 	bl	8000618 <__aeabi_dmul>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	f20f 533c 	addw	r3, pc, #1340	@ 0x53c
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f7f4 fb72 	bl	80002a8 <__aeabi_dsub>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4614      	mov	r4, r2
 800bbca:	461d      	mov	r5, r3
 800bbcc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bbd0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbda:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	f7f4 fd19 	bl	8000618 <__aeabi_dmul>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4620      	mov	r0, r4
 800bbec:	4629      	mov	r1, r5
 800bbee:	f7f4 fb5b 	bl	80002a8 <__aeabi_dsub>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4614      	mov	r4, r2
 800bbf8:	461d      	mov	r5, r3
 800bbfa:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800bbfe:	4619      	mov	r1, r3
 800bc00:	f20f 5304 	addw	r3, pc, #1284	@ 0x504
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc0c:	f7f4 fd04 	bl	8000618 <__aeabi_dmul>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4620      	mov	r0, r4
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f4 fb48 	bl	80002ac <__adddf3>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	e9c7 23c0 	strd	r2, r3, [r7, #768]	@ 0x300
			g521 =-51752.104+218913.95*eq-309468.16*deep_arg->eosq+146349.42*eoc;
 800bc24:	f20f 43e8 	addw	r3, pc, #1256	@ 0x4e8
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800bc30:	f7f4 fcf2 	bl	8000618 <__aeabi_dmul>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	4610      	mov	r0, r2
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	f20f 43d8 	addw	r3, pc, #1240	@ 0x4d8
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	f7f4 fb30 	bl	80002a8 <__aeabi_dsub>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4614      	mov	r4, r2
 800bc4e:	461d      	mov	r5, r3
 800bc50:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bc54:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc5e:	f20f 43c0 	addw	r3, pc, #1216	@ 0x4c0
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	f7f4 fcd7 	bl	8000618 <__aeabi_dmul>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4620      	mov	r0, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	f7f4 fb19 	bl	80002a8 <__aeabi_dsub>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4614      	mov	r4, r2
 800bc7c:	461d      	mov	r5, r3
 800bc7e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800bc82:	4619      	mov	r1, r3
 800bc84:	f20f 43a0 	addw	r3, pc, #1184	@ 0x4a0
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc90:	f7f4 fcc2 	bl	8000618 <__aeabi_dmul>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4620      	mov	r0, r4
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	f7f4 fb06 	bl	80002ac <__adddf3>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	e9c7 23c4 	strd	r2, r3, [r7, #784]	@ 0x310
			g532 =-40023.88+170470.89*eq-242699.48*deep_arg->eosq+115605.82*eoc;
 800bca8:	f20f 4384 	addw	r3, pc, #1156	@ 0x484
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800bcb4:	f7f4 fcb0 	bl	8000618 <__aeabi_dmul>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	f20f 4374 	addw	r3, pc, #1140	@ 0x474
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	f7f4 faee 	bl	80002a8 <__aeabi_dsub>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	461d      	mov	r5, r3
 800bcd4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bcd8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bce2:	f20f 435c 	addw	r3, pc, #1116	@ 0x45c
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fc95 	bl	8000618 <__aeabi_dmul>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	f7f4 fad7 	bl	80002a8 <__aeabi_dsub>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4614      	mov	r4, r2
 800bd00:	461d      	mov	r5, r3
 800bd02:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800bd06:	4619      	mov	r1, r3
 800bd08:	f20f 433c 	addw	r3, pc, #1084	@ 0x43c
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd14:	f7f4 fc80 	bl	8000618 <__aeabi_dmul>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 fac4 	bl	80002ac <__adddf3>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	e9c7 23c2 	strd	r2, r3, [r7, #776]	@ 0x308
		}

		sini2=deep_arg->sinio*deep_arg->sinio;
 800bd2c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd30:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bd3a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd3e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bd48:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 800bd4c:	f7f4 fc64 	bl	8000618 <__aeabi_dmul>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	e9c4 2300 	strd	r2, r3, [r4]
		f220=0.75*(1+2*deep_arg->cosio+deep_arg->theta2);
 800bd58:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd5c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	f7f4 fa9f 	bl	80002ac <__adddf3>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	4610      	mov	r0, r2
 800bd74:	4619      	mov	r1, r3
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	4bd3      	ldr	r3, [pc, #844]	@ (800c0c8 <sdp4_deep_initialize+0x3258>)
 800bd7c:	f7f4 fa96 	bl	80002ac <__adddf3>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	4610      	mov	r0, r2
 800bd86:	4619      	mov	r1, r3
 800bd88:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bd8c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800bd96:	f7f4 fa89 	bl	80002ac <__adddf3>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	4610      	mov	r0, r2
 800bda0:	4619      	mov	r1, r3
 800bda2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800bda6:	461c      	mov	r4, r3
 800bda8:	f04f 0200 	mov.w	r2, #0
 800bdac:	4bc7      	ldr	r3, [pc, #796]	@ (800c0cc <sdp4_deep_initialize+0x325c>)
 800bdae:	f7f4 fc33 	bl	8000618 <__aeabi_dmul>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	e944 2302 	strd	r2, r3, [r4, #-8]
		f221=1.5*sini2;
 800bdba:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800bdbe:	461c      	mov	r4, r3
 800bdc0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	f04f 0200 	mov.w	r2, #0
 800bdca:	4bc1      	ldr	r3, [pc, #772]	@ (800c0d0 <sdp4_deep_initialize+0x3260>)
 800bdcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd0:	f7f4 fc22 	bl	8000618 <__aeabi_dmul>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	e944 2302 	strd	r2, r3, [r4, #-8]
		f321=1.875*deep_arg->sinio*(1-2*deep_arg->cosio-3*deep_arg->theta2);
 800bddc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bde0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	4bb9      	ldr	r3, [pc, #740]	@ (800c0d4 <sdp4_deep_initialize+0x3264>)
 800bdf0:	f7f4 fc12 	bl	8000618 <__aeabi_dmul>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4614      	mov	r4, r2
 800bdfa:	461d      	mov	r5, r3
 800bdfc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be00:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	f7f4 fa4d 	bl	80002ac <__adddf3>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	f04f 0000 	mov.w	r0, #0
 800be1a:	49ab      	ldr	r1, [pc, #684]	@ (800c0c8 <sdp4_deep_initialize+0x3258>)
 800be1c:	f7f4 fa44 	bl	80002a8 <__aeabi_dsub>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4690      	mov	r8, r2
 800be26:	4699      	mov	r9, r3
 800be28:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be2c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800be36:	f04f 0200 	mov.w	r2, #0
 800be3a:	4ba7      	ldr	r3, [pc, #668]	@ (800c0d8 <sdp4_deep_initialize+0x3268>)
 800be3c:	f7f4 fbec 	bl	8000618 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4640      	mov	r0, r8
 800be46:	4649      	mov	r1, r9
 800be48:	f7f4 fa2e 	bl	80002a8 <__aeabi_dsub>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800be54:	460e      	mov	r6, r1
 800be56:	4620      	mov	r0, r4
 800be58:	4629      	mov	r1, r5
 800be5a:	f7f4 fbdd 	bl	8000618 <__aeabi_dmul>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	e9c6 2300 	strd	r2, r3, [r6]
		f322=-1.875*deep_arg->sinio*(1+2*deep_arg->cosio-3*deep_arg->theta2);
 800be66:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be6a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800be74:	f04f 0200 	mov.w	r2, #0
 800be78:	4b98      	ldr	r3, [pc, #608]	@ (800c0dc <sdp4_deep_initialize+0x326c>)
 800be7a:	f7f4 fbcd 	bl	8000618 <__aeabi_dmul>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	4614      	mov	r4, r2
 800be84:	461d      	mov	r5, r3
 800be86:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800be8a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	f7f4 fa08 	bl	80002ac <__adddf3>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4610      	mov	r0, r2
 800bea2:	4619      	mov	r1, r3
 800bea4:	f04f 0200 	mov.w	r2, #0
 800bea8:	4b87      	ldr	r3, [pc, #540]	@ (800c0c8 <sdp4_deep_initialize+0x3258>)
 800beaa:	f7f4 f9ff 	bl	80002ac <__adddf3>
 800beae:	4602      	mov	r2, r0
 800beb0:	460b      	mov	r3, r1
 800beb2:	4690      	mov	r8, r2
 800beb4:	4699      	mov	r9, r3
 800beb6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800beba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800bec4:	f04f 0200 	mov.w	r2, #0
 800bec8:	4b83      	ldr	r3, [pc, #524]	@ (800c0d8 <sdp4_deep_initialize+0x3268>)
 800beca:	f7f4 fba5 	bl	8000618 <__aeabi_dmul>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4640      	mov	r0, r8
 800bed4:	4649      	mov	r1, r9
 800bed6:	f7f4 f9e7 	bl	80002a8 <__aeabi_dsub>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800bee2:	460e      	mov	r6, r1
 800bee4:	4620      	mov	r0, r4
 800bee6:	4629      	mov	r1, r5
 800bee8:	f7f4 fb96 	bl	8000618 <__aeabi_dmul>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	e946 2302 	strd	r2, r3, [r6, #-8]
		f441=35*sini2*f220;
 800bef4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800bef8:	4619      	mov	r1, r3
 800befa:	f04f 0200 	mov.w	r2, #0
 800befe:	4b78      	ldr	r3, [pc, #480]	@ (800c0e0 <sdp4_deep_initialize+0x3270>)
 800bf00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf04:	f7f4 fb88 	bl	8000618 <__aeabi_dmul>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bf10:	460c      	mov	r4, r1
 800bf12:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800bf16:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800bf1a:	f7f4 fb7d 	bl	8000618 <__aeabi_dmul>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	e9c4 2300 	strd	r2, r3, [r4]
		f442=39.3750*sini2*sini2;
 800bf26:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c0a8 <sdp4_deep_initialize+0x3238>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf36:	f7f4 fb6f 	bl	8000618 <__aeabi_dmul>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800bf42:	460c      	mov	r4, r1
 800bf44:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 800bf48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf4c:	f7f4 fb64 	bl	8000618 <__aeabi_dmul>
 800bf50:	4602      	mov	r2, r0
 800bf52:	460b      	mov	r3, r1
 800bf54:	e944 2302 	strd	r2, r3, [r4, #-8]
		f522=9.84375*deep_arg->sinio*(sini2*(1-2*deep_arg->cosio-5*deep_arg->theta2)+0.33333333*(-2+4*deep_arg->cosio+6*deep_arg->theta2));
 800bf58:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bf5c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bf66:	a352      	add	r3, pc, #328	@ (adr r3, 800c0b0 <sdp4_deep_initialize+0x3240>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f7f4 fb54 	bl	8000618 <__aeabi_dmul>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4614      	mov	r4, r2
 800bf76:	461d      	mov	r5, r3
 800bf78:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bf7c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	f7f4 f98f 	bl	80002ac <__adddf3>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	f04f 0000 	mov.w	r0, #0
 800bf96:	494c      	ldr	r1, [pc, #304]	@ (800c0c8 <sdp4_deep_initialize+0x3258>)
 800bf98:	f7f4 f986 	bl	80002a8 <__aeabi_dsub>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4690      	mov	r8, r2
 800bfa2:	4699      	mov	r9, r3
 800bfa4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bfa8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800bfb2:	f04f 0200 	mov.w	r2, #0
 800bfb6:	4b4b      	ldr	r3, [pc, #300]	@ (800c0e4 <sdp4_deep_initialize+0x3274>)
 800bfb8:	f7f4 fb2e 	bl	8000618 <__aeabi_dmul>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	f7f4 f970 	bl	80002a8 <__aeabi_dsub>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4619      	mov	r1, r3
 800bfd0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 fb1e 	bl	8000618 <__aeabi_dmul>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4690      	mov	r8, r2
 800bfe2:	4699      	mov	r9, r3
 800bfe4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800bfe8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bff2:	f04f 0200 	mov.w	r2, #0
 800bff6:	4b3c      	ldr	r3, [pc, #240]	@ (800c0e8 <sdp4_deep_initialize+0x3278>)
 800bff8:	f7f4 fb0e 	bl	8000618 <__aeabi_dmul>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	4610      	mov	r0, r2
 800c002:	4619      	mov	r1, r3
 800c004:	f04f 0200 	mov.w	r2, #0
 800c008:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c00c:	f7f4 f94c 	bl	80002a8 <__aeabi_dsub>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4692      	mov	sl, r2
 800c016:	469b      	mov	fp, r3
 800c018:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c01c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c026:	f04f 0200 	mov.w	r2, #0
 800c02a:	4b30      	ldr	r3, [pc, #192]	@ (800c0ec <sdp4_deep_initialize+0x327c>)
 800c02c:	f7f4 faf4 	bl	8000618 <__aeabi_dmul>
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4650      	mov	r0, sl
 800c036:	4659      	mov	r1, fp
 800c038:	f7f4 f938 	bl	80002ac <__adddf3>
 800c03c:	4602      	mov	r2, r0
 800c03e:	460b      	mov	r3, r1
 800c040:	4610      	mov	r0, r2
 800c042:	4619      	mov	r1, r3
 800c044:	a31c      	add	r3, pc, #112	@ (adr r3, 800c0b8 <sdp4_deep_initialize+0x3248>)
 800c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04a:	f7f4 fae5 	bl	8000618 <__aeabi_dmul>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4640      	mov	r0, r8
 800c054:	4649      	mov	r1, r9
 800c056:	f7f4 f929 	bl	80002ac <__adddf3>
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800c062:	460e      	mov	r6, r1
 800c064:	4620      	mov	r0, r4
 800c066:	4629      	mov	r1, r5
 800c068:	f7f4 fad6 	bl	8000618 <__aeabi_dmul>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	e9c6 2300 	strd	r2, r3, [r6]
		f523=deep_arg->sinio*(4.92187512*sini2*(-2-4*deep_arg->cosio+10*deep_arg->theta2)+6.56250012*(1+2*deep_arg->cosio-3*deep_arg->theta2));
 800c074:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c078:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c082:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800c086:	4619      	mov	r1, r3
 800c088:	a30d      	add	r3, pc, #52	@ (adr r3, 800c0c0 <sdp4_deep_initialize+0x3250>)
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c092:	f7f4 fac1 	bl	8000618 <__aeabi_dmul>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4690      	mov	r8, r2
 800c09c:	4699      	mov	r9, r3
 800c09e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c0a2:	e055      	b.n	800c150 <sdp4_deep_initialize+0x32e0>
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	00000000 	.word	0x00000000
 800c0ac:	4043b000 	.word	0x4043b000
 800c0b0:	00000000 	.word	0x00000000
 800c0b4:	4023b000 	.word	0x4023b000
 800c0b8:	51c112da 	.word	0x51c112da
 800c0bc:	3fd55555 	.word	0x3fd55555
 800c0c0:	080d9595 	.word	0x080d9595
 800c0c4:	4013b000 	.word	0x4013b000
 800c0c8:	3ff00000 	.word	0x3ff00000
 800c0cc:	3fe80000 	.word	0x3fe80000
 800c0d0:	3ff80000 	.word	0x3ff80000
 800c0d4:	3ffe0000 	.word	0x3ffe0000
 800c0d8:	40080000 	.word	0x40080000
 800c0dc:	bffe0000 	.word	0xbffe0000
 800c0e0:	40418000 	.word	0x40418000
 800c0e4:	40140000 	.word	0x40140000
 800c0e8:	40100000 	.word	0x40100000
 800c0ec:	40180000 	.word	0x40180000
 800c0f0:	28f5c28f 	.word	0x28f5c28f
 800c0f4:	4103ba84 	.word	0x4103ba84
 800c0f8:	f5c28f5c 	.word	0xf5c28f5c
 800c0fc:	40e28d78 	.word	0x40e28d78
 800c100:	9999999a 	.word	0x9999999a
 800c104:	410c0e71 	.word	0x410c0e71
 800c108:	0a3d70a4 	.word	0x0a3d70a4
 800c10c:	40fab41f 	.word	0x40fab41f
 800c110:	9999999a 	.word	0x9999999a
 800c114:	410ab90f 	.word	0x410ab90f
 800c118:	53f7ced9 	.word	0x53f7ced9
 800c11c:	40e94503 	.word	0x40e94503
 800c120:	a3d70a3d 	.word	0xa3d70a3d
 800c124:	4112e370 	.word	0x4112e370
 800c128:	5c28f5c3 	.word	0x5c28f5c3
 800c12c:	4101dd6b 	.word	0x4101dd6b
 800c130:	1eb851ec 	.word	0x1eb851ec
 800c134:	4104cf37 	.word	0x4104cf37
 800c138:	28f5c28f 	.word	0x28f5c28f
 800c13c:	40e38afc 	.word	0x40e38afc
 800c140:	d70a3d71 	.word	0xd70a3d71
 800c144:	410da05b 	.word	0x410da05b
 800c148:	1eb851ec 	.word	0x1eb851ec
 800c14c:	40fc395d 	.word	0x40fc395d
 800c150:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c15a:	f04f 0200 	mov.w	r2, #0
 800c15e:	4bd2      	ldr	r3, [pc, #840]	@ (800c4a8 <sdp4_deep_initialize+0x3638>)
 800c160:	f7f4 fa5a 	bl	8000618 <__aeabi_dmul>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	f04f 0000 	mov.w	r0, #0
 800c16c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800c170:	f7f4 f89a 	bl	80002a8 <__aeabi_dsub>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4692      	mov	sl, r2
 800c17a:	469b      	mov	fp, r3
 800c17c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c180:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c18a:	f04f 0200 	mov.w	r2, #0
 800c18e:	4bc7      	ldr	r3, [pc, #796]	@ (800c4ac <sdp4_deep_initialize+0x363c>)
 800c190:	f7f4 fa42 	bl	8000618 <__aeabi_dmul>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4650      	mov	r0, sl
 800c19a:	4659      	mov	r1, fp
 800c19c:	f7f4 f886 	bl	80002ac <__adddf3>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4640      	mov	r0, r8
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	f7f4 fa36 	bl	8000618 <__aeabi_dmul>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4690      	mov	r8, r2
 800c1b2:	4699      	mov	r9, r3
 800c1b4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c1b8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	f7f4 f871 	bl	80002ac <__adddf3>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	f04f 0200 	mov.w	r2, #0
 800c1d6:	4bb6      	ldr	r3, [pc, #728]	@ (800c4b0 <sdp4_deep_initialize+0x3640>)
 800c1d8:	f7f4 f868 	bl	80002ac <__adddf3>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4692      	mov	sl, r2
 800c1e2:	469b      	mov	fp, r3
 800c1e4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c1e8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	4baf      	ldr	r3, [pc, #700]	@ (800c4b4 <sdp4_deep_initialize+0x3644>)
 800c1f8:	f7f4 fa0e 	bl	8000618 <__aeabi_dmul>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	4650      	mov	r0, sl
 800c202:	4659      	mov	r1, fp
 800c204:	f7f4 f850 	bl	80002a8 <__aeabi_dsub>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	4610      	mov	r0, r2
 800c20e:	4619      	mov	r1, r3
 800c210:	a3a1      	add	r3, pc, #644	@ (adr r3, 800c498 <sdp4_deep_initialize+0x3628>)
 800c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c216:	f7f4 f9ff 	bl	8000618 <__aeabi_dmul>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4640      	mov	r0, r8
 800c220:	4649      	mov	r1, r9
 800c222:	f7f4 f843 	bl	80002ac <__adddf3>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800c22e:	460e      	mov	r6, r1
 800c230:	4620      	mov	r0, r4
 800c232:	4629      	mov	r1, r5
 800c234:	f7f4 f9f0 	bl	8000618 <__aeabi_dmul>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	e946 2302 	strd	r2, r3, [r6, #-8]
		f542=29.53125*deep_arg->sinio*(2-8*deep_arg->cosio+deep_arg->theta2*(-12+8*deep_arg->cosio+10*deep_arg->theta2));
 800c240:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c244:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c24e:	a394      	add	r3, pc, #592	@ (adr r3, 800c4a0 <sdp4_deep_initialize+0x3630>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f9e0 	bl	8000618 <__aeabi_dmul>
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	4690      	mov	r8, r2
 800c25e:	4699      	mov	r9, r3
 800c260:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c264:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c26e:	f04f 0200 	mov.w	r2, #0
 800c272:	4b91      	ldr	r3, [pc, #580]	@ (800c4b8 <sdp4_deep_initialize+0x3648>)
 800c274:	f7f4 f9d0 	bl	8000618 <__aeabi_dmul>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	f04f 0000 	mov.w	r0, #0
 800c280:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c284:	f7f4 f810 	bl	80002a8 <__aeabi_dsub>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4692      	mov	sl, r2
 800c28e:	469b      	mov	fp, r3
 800c290:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c294:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800c29e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c2a2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c2ac:	f04f 0200 	mov.w	r2, #0
 800c2b0:	4b81      	ldr	r3, [pc, #516]	@ (800c4b8 <sdp4_deep_initialize+0x3648>)
 800c2b2:	f7f4 f9b1 	bl	8000618 <__aeabi_dmul>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4619      	mov	r1, r3
 800c2be:	f04f 0200 	mov.w	r2, #0
 800c2c2:	4b7e      	ldr	r3, [pc, #504]	@ (800c4bc <sdp4_deep_initialize+0x364c>)
 800c2c4:	f7f3 fff0 	bl	80002a8 <__aeabi_dsub>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800c2d0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c2d4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c2de:	f04f 0200 	mov.w	r2, #0
 800c2e2:	4b72      	ldr	r3, [pc, #456]	@ (800c4ac <sdp4_deep_initialize+0x363c>)
 800c2e4:	f7f4 f998 	bl	8000618 <__aeabi_dmul>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c2f0:	f7f3 ffdc 	bl	80002ac <__adddf3>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	f7f4 f98c 	bl	8000618 <__aeabi_dmul>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4650      	mov	r0, sl
 800c306:	4659      	mov	r1, fp
 800c308:	f7f3 ffd0 	bl	80002ac <__adddf3>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800c314:	460c      	mov	r4, r1
 800c316:	4640      	mov	r0, r8
 800c318:	4649      	mov	r1, r9
 800c31a:	f7f4 f97d 	bl	8000618 <__aeabi_dmul>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	e9c4 2300 	strd	r2, r3, [r4]
		f543=29.53125*deep_arg->sinio*(-2-8*deep_arg->cosio+deep_arg->theta2*(12+8*deep_arg->cosio-10*deep_arg->theta2));
 800c326:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c32a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c334:	a35a      	add	r3, pc, #360	@ (adr r3, 800c4a0 <sdp4_deep_initialize+0x3630>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f7f4 f96d 	bl	8000618 <__aeabi_dmul>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4690      	mov	r8, r2
 800c344:	4699      	mov	r9, r3
 800c346:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c34a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c354:	f04f 0200 	mov.w	r2, #0
 800c358:	4b57      	ldr	r3, [pc, #348]	@ (800c4b8 <sdp4_deep_initialize+0x3648>)
 800c35a:	f7f4 f95d 	bl	8000618 <__aeabi_dmul>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	f04f 0000 	mov.w	r0, #0
 800c366:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800c36a:	f7f3 ff9d 	bl	80002a8 <__aeabi_dsub>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4692      	mov	sl, r2
 800c374:	469b      	mov	fp, r3
 800c376:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c37a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800c384:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c388:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c392:	f04f 0200 	mov.w	r2, #0
 800c396:	4b48      	ldr	r3, [pc, #288]	@ (800c4b8 <sdp4_deep_initialize+0x3648>)
 800c398:	f7f4 f93e 	bl	8000618 <__aeabi_dmul>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	f04f 0200 	mov.w	r2, #0
 800c3a8:	4b44      	ldr	r3, [pc, #272]	@ (800c4bc <sdp4_deep_initialize+0x364c>)
 800c3aa:	f7f3 ff7f 	bl	80002ac <__adddf3>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800c3b6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c3ba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c3c4:	f04f 0200 	mov.w	r2, #0
 800c3c8:	4b38      	ldr	r3, [pc, #224]	@ (800c4ac <sdp4_deep_initialize+0x363c>)
 800c3ca:	f7f4 f925 	bl	8000618 <__aeabi_dmul>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800c3d6:	f7f3 ff67 	bl	80002a8 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4620      	mov	r0, r4
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	f7f4 f919 	bl	8000618 <__aeabi_dmul>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4650      	mov	r0, sl
 800c3ec:	4659      	mov	r1, fp
 800c3ee:	f7f3 ff5d 	bl	80002ac <__adddf3>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4649      	mov	r1, r9
 800c400:	f7f4 f90a 	bl	8000618 <__aeabi_dmul>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	e944 2302 	strd	r2, r3, [r4, #-8]
		xno2=m->xnq*m->xnq;
 800c40c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c410:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800c41a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c41e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800c428:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800c42c:	f7f4 f8f4 	bl	8000618 <__aeabi_dmul>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	e9c4 2300 	strd	r2, r3, [r4]
		ainv2=aqnv*aqnv;
 800c438:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800c43c:	461c      	mov	r4, r3
 800c43e:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800c442:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 800c446:	f7f4 f8e7 	bl	8000618 <__aeabi_dmul>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	e944 2302 	strd	r2, r3, [r4, #-8]
		temp1=3*xno2*ainv2;
 800c452:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800c456:	4619      	mov	r1, r3
 800c458:	f04f 0200 	mov.w	r2, #0
 800c45c:	4b15      	ldr	r3, [pc, #84]	@ (800c4b4 <sdp4_deep_initialize+0x3644>)
 800c45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c462:	f7f4 f8d9 	bl	8000618 <__aeabi_dmul>
 800c466:	4602      	mov	r2, r0
 800c468:	460b      	mov	r3, r1
 800c46a:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800c46e:	460c      	mov	r4, r1
 800c470:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800c474:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c478:	f7f4 f8ce 	bl	8000618 <__aeabi_dmul>
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT22;
 800c484:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c488:	461c      	mov	r4, r3
 800c48a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c48e:	4619      	mov	r1, r3
 800c490:	e016      	b.n	800c4c0 <sdp4_deep_initialize+0x3650>
 800c492:	bf00      	nop
 800c494:	f3af 8000 	nop.w
 800c498:	080d9595 	.word	0x080d9595
 800c49c:	401a4000 	.word	0x401a4000
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	403d8800 	.word	0x403d8800
 800c4a8:	40100000 	.word	0x40100000
 800c4ac:	40240000 	.word	0x40240000
 800c4b0:	3ff00000 	.word	0x3ff00000
 800c4b4:	40080000 	.word	0x40080000
 800c4b8:	40200000 	.word	0x40200000
 800c4bc:	40280000 	.word	0x40280000
 800c4c0:	f20f 437c 	addw	r3, pc, #1148	@ 0x47c
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4cc:	f7f4 f8a4 	bl	8000618 <__aeabi_dmul>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d2201=temp*f220*g201;
 800c4d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800c4e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4e6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c4ea:	f7f4 f895 	bl	8000618 <__aeabi_dmul>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800c4fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4fe:	f7f4 f88b 	bl	8000618 <__aeabi_dmul>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c50a:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c50e:	6809      	ldr	r1, [r1, #0]
 800c510:	e9c1 23a0 	strd	r2, r3, [r1, #640]	@ 0x280
		m->d2211=temp*f221*g211;
 800c514:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c518:	4619      	mov	r1, r3
 800c51a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800c51e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c522:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c526:	f7f4 f877 	bl	8000618 <__aeabi_dmul>
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	4610      	mov	r0, r2
 800c530:	4619      	mov	r1, r3
 800c532:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 800c536:	f7f4 f86f 	bl	8000618 <__aeabi_dmul>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c542:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c546:	6809      	ldr	r1, [r1, #0]
 800c548:	e9c1 23a2 	strd	r2, r3, [r1, #648]	@ 0x288
		temp1=temp1*aqnv;
 800c54c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c550:	461c      	mov	r4, r3
 800c552:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c556:	4619      	mov	r1, r3
 800c558:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800c55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c560:	f7f4 f85a 	bl	8000618 <__aeabi_dmul>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT32;
 800c56c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c570:	461c      	mov	r4, r3
 800c572:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c576:	4619      	mov	r1, r3
 800c578:	a3f3      	add	r3, pc, #972	@ (adr r3, 800c948 <sdp4_deep_initialize+0x3ad8>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c582:	f7f4 f849 	bl	8000618 <__aeabi_dmul>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d3210=temp*f321*g310;
 800c58e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c592:	4619      	mov	r1, r3
 800c594:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c5a0:	f7f4 f83a 	bl	8000618 <__aeabi_dmul>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800c5b0:	f7f4 f832 	bl	8000618 <__aeabi_dmul>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c5bc:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c5c0:	6809      	ldr	r1, [r1, #0]
 800c5c2:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
		m->d3222=temp*f322*g322;
 800c5c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800c5d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5d4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c5d8:	f7f4 f81e 	bl	8000618 <__aeabi_dmul>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 800c5e8:	f7f4 f816 	bl	8000618 <__aeabi_dmul>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c5f4:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c5f8:	6809      	ldr	r1, [r1, #0]
 800c5fa:	e9c1 237a 	strd	r2, r3, [r1, #488]	@ 0x1e8
		temp1=temp1*aqnv;
 800c5fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c602:	461c      	mov	r4, r3
 800c604:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c608:	4619      	mov	r1, r3
 800c60a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800c60e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c612:	f7f4 f801 	bl	8000618 <__aeabi_dmul>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	e9c4 2300 	strd	r2, r3, [r4]
		temp=2*temp1*ROOT44;
 800c61e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c622:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	f7f3 fe3f 	bl	80002ac <__adddf3>
 800c62e:	4602      	mov	r2, r0
 800c630:	460b      	mov	r3, r1
 800c632:	4610      	mov	r0, r2
 800c634:	4619      	mov	r1, r3
 800c636:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c63a:	461c      	mov	r4, r3
 800c63c:	a3c4      	add	r3, pc, #784	@ (adr r3, 800c950 <sdp4_deep_initialize+0x3ae0>)
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	f7f3 ffe9 	bl	8000618 <__aeabi_dmul>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d4410=temp*f441*g410;
 800c64e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c652:	4619      	mov	r1, r3
 800c654:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c660:	f7f3 ffda 	bl	8000618 <__aeabi_dmul>
 800c664:	4602      	mov	r2, r0
 800c666:	460b      	mov	r3, r1
 800c668:	4610      	mov	r0, r2
 800c66a:	4619      	mov	r1, r3
 800c66c:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 800c670:	f7f3 ffd2 	bl	8000618 <__aeabi_dmul>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c67c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c680:	6809      	ldr	r1, [r1, #0]
 800c682:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
		m->d4422=temp*f442*g422;
 800c686:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c68a:	4619      	mov	r1, r3
 800c68c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800c690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c694:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c698:	f7f3 ffbe 	bl	8000618 <__aeabi_dmul>
 800c69c:	4602      	mov	r2, r0
 800c69e:	460b      	mov	r3, r1
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 800c6a8:	f7f3 ffb6 	bl	8000618 <__aeabi_dmul>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c6b4:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c6b8:	6809      	ldr	r1, [r1, #0]
 800c6ba:	e9c1 237e 	strd	r2, r3, [r1, #504]	@ 0x1f8
		temp1=temp1*aqnv;
 800c6be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c6c2:	461c      	mov	r4, r3
 800c6c4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800c6ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d2:	f7f3 ffa1 	bl	8000618 <__aeabi_dmul>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	e9c4 2300 	strd	r2, r3, [r4]
		temp=temp1*ROOT52;
 800c6de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c6e2:	461c      	mov	r4, r3
 800c6e4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	a39b      	add	r3, pc, #620	@ (adr r3, 800c958 <sdp4_deep_initialize+0x3ae8>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6f4:	f7f3 ff90 	bl	8000618 <__aeabi_dmul>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d5220=temp*f522*g520;
 800c700:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c704:	4619      	mov	r1, r3
 800c706:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c712:	f7f3 ff81 	bl	8000618 <__aeabi_dmul>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4610      	mov	r0, r2
 800c71c:	4619      	mov	r1, r3
 800c71e:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 800c722:	f7f3 ff79 	bl	8000618 <__aeabi_dmul>
 800c726:	4602      	mov	r2, r0
 800c728:	460b      	mov	r3, r1
 800c72a:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c72e:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c732:	6809      	ldr	r1, [r1, #0]
 800c734:	e9c1 2380 	strd	r2, r3, [r1, #512]	@ 0x200
		m->d5232=temp*f523*g532;
 800c738:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c73c:	4619      	mov	r1, r3
 800c73e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c746:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c74a:	f7f3 ff65 	bl	8000618 <__aeabi_dmul>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4610      	mov	r0, r2
 800c754:	4619      	mov	r1, r3
 800c756:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 800c75a:	f7f3 ff5d 	bl	8000618 <__aeabi_dmul>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c766:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c76a:	6809      	ldr	r1, [r1, #0]
 800c76c:	e9c1 2382 	strd	r2, r3, [r1, #520]	@ 0x208
		temp=2*temp1*ROOT54;
 800c770:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c774:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	f7f3 fd96 	bl	80002ac <__adddf3>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4610      	mov	r0, r2
 800c786:	4619      	mov	r1, r3
 800c788:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c78c:	461c      	mov	r4, r3
 800c78e:	a374      	add	r3, pc, #464	@ (adr r3, 800c960 <sdp4_deep_initialize+0x3af0>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f3 ff40 	bl	8000618 <__aeabi_dmul>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->d5421=temp*f542*g521;
 800c7a0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c7b2:	f7f3 ff31 	bl	8000618 <__aeabi_dmul>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	4619      	mov	r1, r3
 800c7be:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 800c7c2:	f7f3 ff29 	bl	8000618 <__aeabi_dmul>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c7ce:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c7d2:	6809      	ldr	r1, [r1, #0]
 800c7d4:	e9c1 2384 	strd	r2, r3, [r1, #528]	@ 0x210
		m->d5433=temp*f543*g533;
 800c7d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800c7e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7e6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800c7ea:	f7f3 ff15 	bl	8000618 <__aeabi_dmul>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 800c7fa:	f7f3 ff0d 	bl	8000618 <__aeabi_dmul>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c806:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c80a:	6809      	ldr	r1, [r1, #0]
 800c80c:	e9c1 2386 	strd	r2, r3, [r1, #536]	@ 0x218
		m->xlamo=xmao+m->xnodeo+m->xnodeo-m->thgr-m->thgr;
 800c810:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c814:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	@ 0x2c0
 800c81e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800c822:	f7f3 fd43 	bl	80002ac <__adddf3>
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	4610      	mov	r0, r2
 800c82c:	4619      	mov	r1, r3
 800c82e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c832:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	@ 0x2c0
 800c83c:	f7f3 fd36 	bl	80002ac <__adddf3>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	4610      	mov	r0, r2
 800c846:	4619      	mov	r1, r3
 800c848:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c84c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800c856:	f7f3 fd27 	bl	80002a8 <__aeabi_dsub>
 800c85a:	4602      	mov	r2, r0
 800c85c:	460b      	mov	r3, r1
 800c85e:	4610      	mov	r0, r2
 800c860:	4619      	mov	r1, r3
 800c862:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c866:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800c870:	f7f3 fd1a 	bl	80002a8 <__aeabi_dsub>
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800c87c:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800c880:	6809      	ldr	r1, [r1, #0]
 800c882:	e9c1 2394 	strd	r2, r3, [r1, #592]	@ 0x250
		bfact=deep_arg->xmdot+deep_arg->xnodot+deep_arg->xnodot-THDT-THDT;
 800c886:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c88a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c894:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c898:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800c8a2:	f7f3 fd03 	bl	80002ac <__adddf3>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c8b2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800c8bc:	f7f3 fcf6 	bl	80002ac <__adddf3>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	a327      	add	r3, pc, #156	@ (adr r3, 800c968 <sdp4_deep_initialize+0x3af8>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	f7f3 fceb 	bl	80002a8 <__aeabi_dsub>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	4619      	mov	r1, r3
 800c8da:	a323      	add	r3, pc, #140	@ (adr r3, 800c968 <sdp4_deep_initialize+0x3af8>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	f7f3 fce2 	bl	80002a8 <__aeabi_dsub>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
		bfact=bfact+m->ssl+m->ssh+m->ssh;
 800c8ec:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c8f0:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800c8fa:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800c8fe:	f7f3 fcd5 	bl	80002ac <__adddf3>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	4610      	mov	r0, r2
 800c908:	4619      	mov	r1, r3
 800c90a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c90e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800c918:	f7f3 fcc8 	bl	80002ac <__adddf3>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4610      	mov	r0, r2
 800c922:	4619      	mov	r1, r3
 800c924:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c928:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800c932:	f7f3 fcbb 	bl	80002ac <__adddf3>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
 800c93e:	e2d9      	b.n	800cef4 <sdp4_deep_initialize+0x4084>
 800c940:	e8fbe45d 	.word	0xe8fbe45d
 800c944:	3ebe046a 	.word	0x3ebe046a
 800c948:	5d4afd1b 	.word	0x5d4afd1b
 800c94c:	3e991834 	.word	0x3e991834
 800c950:	f68be0bd 	.word	0xf68be0bd
 800c954:	3e3fa077 	.word	0x3e3fa077
 800c958:	6f6ae289 	.word	0x6f6ae289
 800c95c:	3e7eadb3 	.word	0x3e7eadb3
 800c960:	c74bf4b7 	.word	0xc74bf4b7
 800c964:	3e22b259 	.word	0x3e22b259
 800c968:	5b2195a5 	.word	0x5b2195a5
 800c96c:	3f71ebcd 	.word	0x3f71ebcd
	}

	else
	{
		m->resonanceFlag = 1;
 800c970:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c974:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2201      	movs	r2, #1
 800c97c:	605a      	str	r2, [r3, #4]
		m->synchronousFlag = 1;
 800c97e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c982:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2201      	movs	r2, #1
 800c98a:	609a      	str	r2, [r3, #8]

		/* Synchronous resonance terms initialization */
		g200=1+deep_arg->eosq*(-2.5+0.8125*deep_arg->eosq);
 800c98c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c990:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c99a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c99e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9a8:	f04f 0200 	mov.w	r2, #0
 800c9ac:	4bce      	ldr	r3, [pc, #824]	@ (800cce8 <sdp4_deep_initialize+0x3e78>)
 800c9ae:	f7f3 fe33 	bl	8000618 <__aeabi_dmul>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	f04f 0200 	mov.w	r2, #0
 800c9be:	4bcb      	ldr	r3, [pc, #812]	@ (800ccec <sdp4_deep_initialize+0x3e7c>)
 800c9c0:	f7f3 fc72 	bl	80002a8 <__aeabi_dsub>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f7f3 fe24 	bl	8000618 <__aeabi_dmul>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800c9dc:	461c      	mov	r4, r3
 800c9de:	f04f 0200 	mov.w	r2, #0
 800c9e2:	4bc3      	ldr	r3, [pc, #780]	@ (800ccf0 <sdp4_deep_initialize+0x3e80>)
 800c9e4:	f7f3 fc62 	bl	80002ac <__adddf3>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	e944 2302 	strd	r2, r3, [r4, #-8]
		g310=1+2*deep_arg->eosq;
 800c9f0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800c9f4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	f7f3 fc53 	bl	80002ac <__adddf3>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4610      	mov	r0, r2
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	f04f 0200 	mov.w	r2, #0
 800ca12:	4bb7      	ldr	r3, [pc, #732]	@ (800ccf0 <sdp4_deep_initialize+0x3e80>)
 800ca14:	f7f3 fc4a 	bl	80002ac <__adddf3>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	460b      	mov	r3, r1
 800ca1c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
		g300=1+deep_arg->eosq*(-6+6.60937*deep_arg->eosq);
 800ca20:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ca24:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ca2e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ca32:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca3c:	a3a6      	add	r3, pc, #664	@ (adr r3, 800ccd8 <sdp4_deep_initialize+0x3e68>)
 800ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca42:	f7f3 fde9 	bl	8000618 <__aeabi_dmul>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	f04f 0200 	mov.w	r2, #0
 800ca52:	4ba8      	ldr	r3, [pc, #672]	@ (800ccf4 <sdp4_deep_initialize+0x3e84>)
 800ca54:	f7f3 fc28 	bl	80002a8 <__aeabi_dsub>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	4629      	mov	r1, r5
 800ca60:	f7f3 fdda 	bl	8000618 <__aeabi_dmul>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4610      	mov	r0, r2
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800ca70:	461c      	mov	r4, r3
 800ca72:	f04f 0200 	mov.w	r2, #0
 800ca76:	4b9e      	ldr	r3, [pc, #632]	@ (800ccf0 <sdp4_deep_initialize+0x3e80>)
 800ca78:	f7f3 fc18 	bl	80002ac <__adddf3>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	e9c4 2300 	strd	r2, r3, [r4]
		f220=0.75*(1+deep_arg->cosio)*(1+deep_arg->cosio);
 800ca84:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ca88:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca92:	f04f 0200 	mov.w	r2, #0
 800ca96:	4b96      	ldr	r3, [pc, #600]	@ (800ccf0 <sdp4_deep_initialize+0x3e80>)
 800ca98:	f7f3 fc08 	bl	80002ac <__adddf3>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	460b      	mov	r3, r1
 800caa0:	4610      	mov	r0, r2
 800caa2:	4619      	mov	r1, r3
 800caa4:	f04f 0200 	mov.w	r2, #0
 800caa8:	4b93      	ldr	r3, [pc, #588]	@ (800ccf8 <sdp4_deep_initialize+0x3e88>)
 800caaa:	f7f3 fdb5 	bl	8000618 <__aeabi_dmul>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	4614      	mov	r4, r2
 800cab4:	461d      	mov	r5, r3
 800cab6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800caba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cac4:	f04f 0200 	mov.w	r2, #0
 800cac8:	4b89      	ldr	r3, [pc, #548]	@ (800ccf0 <sdp4_deep_initialize+0x3e80>)
 800caca:	f7f3 fbef 	bl	80002ac <__adddf3>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800cad6:	460e      	mov	r6, r1
 800cad8:	4620      	mov	r0, r4
 800cada:	4629      	mov	r1, r5
 800cadc:	f7f3 fd9c 	bl	8000618 <__aeabi_dmul>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	e946 2302 	strd	r2, r3, [r6, #-8]
		f311=0.9375*deep_arg->sinio*deep_arg->sinio*(1+3*deep_arg->cosio)-0.75*(1+deep_arg->cosio);
 800cae8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800caec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800caf6:	f04f 0200 	mov.w	r2, #0
 800cafa:	4b80      	ldr	r3, [pc, #512]	@ (800ccfc <sdp4_deep_initialize+0x3e8c>)
 800cafc:	f7f3 fd8c 	bl	8000618 <__aeabi_dmul>
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	4610      	mov	r0, r2
 800cb06:	4619      	mov	r1, r3
 800cb08:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cb0c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cb16:	f7f3 fd7f 	bl	8000618 <__aeabi_dmul>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	4614      	mov	r4, r2
 800cb20:	461d      	mov	r5, r3
 800cb22:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cb26:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cb30:	f04f 0200 	mov.w	r2, #0
 800cb34:	4b72      	ldr	r3, [pc, #456]	@ (800cd00 <sdp4_deep_initialize+0x3e90>)
 800cb36:	f7f3 fd6f 	bl	8000618 <__aeabi_dmul>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4610      	mov	r0, r2
 800cb40:	4619      	mov	r1, r3
 800cb42:	f04f 0200 	mov.w	r2, #0
 800cb46:	4b6a      	ldr	r3, [pc, #424]	@ (800ccf0 <sdp4_deep_initialize+0x3e80>)
 800cb48:	f7f3 fbb0 	bl	80002ac <__adddf3>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	4620      	mov	r0, r4
 800cb52:	4629      	mov	r1, r5
 800cb54:	f7f3 fd60 	bl	8000618 <__aeabi_dmul>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4614      	mov	r4, r2
 800cb5e:	461d      	mov	r5, r3
 800cb60:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cb64:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cb6e:	f04f 0200 	mov.w	r2, #0
 800cb72:	4b5f      	ldr	r3, [pc, #380]	@ (800ccf0 <sdp4_deep_initialize+0x3e80>)
 800cb74:	f7f3 fb9a 	bl	80002ac <__adddf3>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f04f 0200 	mov.w	r2, #0
 800cb84:	4b5c      	ldr	r3, [pc, #368]	@ (800ccf8 <sdp4_deep_initialize+0x3e88>)
 800cb86:	f7f3 fd47 	bl	8000618 <__aeabi_dmul>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800cb92:	460e      	mov	r6, r1
 800cb94:	4620      	mov	r0, r4
 800cb96:	4629      	mov	r1, r5
 800cb98:	f7f3 fb86 	bl	80002a8 <__aeabi_dsub>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	e9c6 2300 	strd	r2, r3, [r6]
		f330=1+deep_arg->cosio;
 800cba4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cba8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cbb2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800cbb6:	461c      	mov	r4, r3
 800cbb8:	f04f 0200 	mov.w	r2, #0
 800cbbc:	4b4c      	ldr	r3, [pc, #304]	@ (800ccf0 <sdp4_deep_initialize+0x3e80>)
 800cbbe:	f7f3 fb75 	bl	80002ac <__adddf3>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	e944 2302 	strd	r2, r3, [r4, #-8]
		f330=1.875*f330*f330*f330;
 800cbca:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f04f 0200 	mov.w	r2, #0
 800cbd4:	4b4b      	ldr	r3, [pc, #300]	@ (800cd04 <sdp4_deep_initialize+0x3e94>)
 800cbd6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800cbda:	f7f3 fd1d 	bl	8000618 <__aeabi_dmul>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800cbea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbee:	f7f3 fd13 	bl	8000618 <__aeabi_dmul>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800cc00:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800cc04:	f7f3 fd08 	bl	8000618 <__aeabi_dmul>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	e944 2302 	strd	r2, r3, [r4, #-8]
		m->del1=3*m->xnq*m->xnq*aqnv*aqnv;
 800cc10:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cc14:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 800cc1e:	f04f 0200 	mov.w	r2, #0
 800cc22:	4b37      	ldr	r3, [pc, #220]	@ (800cd00 <sdp4_deep_initialize+0x3e90>)
 800cc24:	f7f3 fcf8 	bl	8000618 <__aeabi_dmul>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cc34:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800cc3e:	f7f3 fceb 	bl	8000618 <__aeabi_dmul>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	4610      	mov	r0, r2
 800cc48:	4619      	mov	r1, r3
 800cc4a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800cc4e:	f7f3 fce3 	bl	8000618 <__aeabi_dmul>
 800cc52:	4602      	mov	r2, r0
 800cc54:	460b      	mov	r3, r1
 800cc56:	4610      	mov	r0, r2
 800cc58:	4619      	mov	r1, r3
 800cc5a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800cc5e:	f7f3 fcdb 	bl	8000618 <__aeabi_dmul>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800cc6a:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800cc6e:	6809      	ldr	r1, [r1, #0]
 800cc70:	e9c1 2388 	strd	r2, r3, [r1, #544]	@ 0x220
		m->del2=2*m->del1*f220*g200*Q22;
 800cc74:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cc78:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	f7f3 fb11 	bl	80002ac <__adddf3>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	4610      	mov	r0, r2
 800cc90:	4619      	mov	r1, r3
 800cc92:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800cc96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc9a:	f7f3 fcbd 	bl	8000618 <__aeabi_dmul>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	4610      	mov	r0, r2
 800cca4:	4619      	mov	r1, r3
 800cca6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800ccaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ccae:	f7f3 fcb3 	bl	8000618 <__aeabi_dmul>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	4610      	mov	r0, r2
 800ccb8:	4619      	mov	r1, r3
 800ccba:	a309      	add	r3, pc, #36	@ (adr r3, 800cce0 <sdp4_deep_initialize+0x3e70>)
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	f7f3 fcaa 	bl	8000618 <__aeabi_dmul>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800cccc:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ccd0:	6809      	ldr	r1, [r1, #0]
 800ccd2:	e9c1 238a 	strd	r2, r3, [r1, #552]	@ 0x228
 800ccd6:	e017      	b.n	800cd08 <sdp4_deep_initialize+0x3e98>
 800ccd8:	b074a772 	.word	0xb074a772
 800ccdc:	401a6ffe 	.word	0x401a6ffe
 800cce0:	e8fbe45d 	.word	0xe8fbe45d
 800cce4:	3ebe046a 	.word	0x3ebe046a
 800cce8:	3fea0000 	.word	0x3fea0000
 800ccec:	40040000 	.word	0x40040000
 800ccf0:	3ff00000 	.word	0x3ff00000
 800ccf4:	40180000 	.word	0x40180000
 800ccf8:	3fe80000 	.word	0x3fe80000
 800ccfc:	3fee0000 	.word	0x3fee0000
 800cd00:	40080000 	.word	0x40080000
 800cd04:	3ffe0000 	.word	0x3ffe0000
		m->del3=3*m->del1*f330*g300*Q33*aqnv;
 800cd08:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cd0c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800cd16:	f04f 0200 	mov.w	r2, #0
 800cd1a:	4ba3      	ldr	r3, [pc, #652]	@ (800cfa8 <sdp4_deep_initialize+0x4138>)
 800cd1c:	f7f3 fc7c 	bl	8000618 <__aeabi_dmul>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4610      	mov	r0, r2
 800cd26:	4619      	mov	r1, r3
 800cd28:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800cd2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd30:	f7f3 fc72 	bl	8000618 <__aeabi_dmul>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	4610      	mov	r0, r2
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	f7f3 fc68 	bl	8000618 <__aeabi_dmul>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4619      	mov	r1, r3
 800cd50:	a387      	add	r3, pc, #540	@ (adr r3, 800cf70 <sdp4_deep_initialize+0x4100>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	f7f3 fc5f 	bl	8000618 <__aeabi_dmul>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	4610      	mov	r0, r2
 800cd60:	4619      	mov	r1, r3
 800cd62:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800cd66:	f7f3 fc57 	bl	8000618 <__aeabi_dmul>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800cd72:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800cd76:	6809      	ldr	r1, [r1, #0]
 800cd78:	e9c1 238c 	strd	r2, r3, [r1, #560]	@ 0x230
		m->del1=m->del1*f311*g310*Q31*aqnv;
 800cd7c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cd80:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	e9d3 0188 	ldrd	r0, r1, [r3, #544]	@ 0x220
 800cd8a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd92:	f7f3 fc41 	bl	8000618 <__aeabi_dmul>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 800cda2:	f7f3 fc39 	bl	8000618 <__aeabi_dmul>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4610      	mov	r0, r2
 800cdac:	4619      	mov	r1, r3
 800cdae:	a372      	add	r3, pc, #456	@ (adr r3, 800cf78 <sdp4_deep_initialize+0x4108>)
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f7f3 fc30 	bl	8000618 <__aeabi_dmul>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800cdc4:	f7f3 fc28 	bl	8000618 <__aeabi_dmul>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800cdd0:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800cdd4:	6809      	ldr	r1, [r1, #0]
 800cdd6:	e9c1 2388 	strd	r2, r3, [r1, #544]	@ 0x220
		m->fasx2=0.13130908;
 800cdda:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cdde:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cde2:	6819      	ldr	r1, [r3, #0]
 800cde4:	a366      	add	r3, pc, #408	@ (adr r3, 800cf80 <sdp4_deep_initialize+0x4110>)
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	e9c1 238e 	strd	r2, r3, [r1, #568]	@ 0x238
		m->fasx4=2.8843198;
 800cdee:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cdf2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cdf6:	6819      	ldr	r1, [r3, #0]
 800cdf8:	a363      	add	r3, pc, #396	@ (adr r3, 800cf88 <sdp4_deep_initialize+0x4118>)
 800cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfe:	e9c1 2390 	strd	r2, r3, [r1, #576]	@ 0x240
		m->fasx6=0.37448087;
 800ce02:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ce06:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ce0a:	6819      	ldr	r1, [r3, #0]
 800ce0c:	a360      	add	r3, pc, #384	@ (adr r3, 800cf90 <sdp4_deep_initialize+0x4120>)
 800ce0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce12:	e9c1 2392 	strd	r2, r3, [r1, #584]	@ 0x248
		m->xlamo=xmao+m->xnodeo+m->omegao-m->thgr;
 800ce16:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ce1a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	@ 0x2c0
 800ce24:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800ce28:	f7f3 fa40 	bl	80002ac <__adddf3>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	460b      	mov	r3, r1
 800ce30:	4610      	mov	r0, r2
 800ce32:	4619      	mov	r1, r3
 800ce34:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ce38:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	@ 0x2c8
 800ce42:	f7f3 fa33 	bl	80002ac <__adddf3>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4610      	mov	r0, r2
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ce52:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800ce5c:	f7f3 fa24 	bl	80002a8 <__aeabi_dsub>
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800ce68:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800ce6c:	6809      	ldr	r1, [r1, #0]
 800ce6e:	e9c1 2394 	strd	r2, r3, [r1, #592]	@ 0x250
		bfact=deep_arg->xmdot+xpidot-THDT;
 800ce72:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800ce76:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800ce80:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 800ce84:	f7f3 fa12 	bl	80002ac <__adddf3>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	4619      	mov	r1, r3
 800ce90:	a341      	add	r3, pc, #260	@ (adr r3, 800cf98 <sdp4_deep_initialize+0x4128>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce96:	f7f3 fa07 	bl	80002a8 <__aeabi_dsub>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
		bfact=bfact+m->ssl+m->ssg+m->ssh;
 800cea2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cea6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800ceb0:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800ceb4:	f7f3 f9fa 	bl	80002ac <__adddf3>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	4610      	mov	r0, r2
 800cebe:	4619      	mov	r1, r3
 800cec0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cec4:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	@ 0x160
 800cece:	f7f3 f9ed 	bl	80002ac <__adddf3>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4610      	mov	r0, r2
 800ced8:	4619      	mov	r1, r3
 800ceda:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cede:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 800cee8:	f7f3 f9e0 	bl	80002ac <__adddf3>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
	}

	m->xfact=bfact-m->xnq;
 800cef4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cef8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800cf02:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
 800cf06:	f7f3 f9cf 	bl	80002a8 <__aeabi_dsub>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 800cf12:	f5a1 7144 	sub.w	r1, r1, #784	@ 0x310
 800cf16:	6809      	ldr	r1, [r1, #0]
 800cf18:	e9c1 2396 	strd	r2, r3, [r1, #600]	@ 0x258

	/* Initialize integrator */
	m->stepp=720;
 800cf1c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cf20:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cf24:	6819      	ldr	r1, [r3, #0]
 800cf26:	f04f 0200 	mov.w	r2, #0
 800cf2a:	4b20      	ldr	r3, [pc, #128]	@ (800cfac <sdp4_deep_initialize+0x413c>)
 800cf2c:	e9c1 2398 	strd	r2, r3, [r1, #608]	@ 0x260
	m->stepn=-720;
 800cf30:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cf34:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cf38:	6819      	ldr	r1, [r3, #0]
 800cf3a:	f04f 0200 	mov.w	r2, #0
 800cf3e:	4b1c      	ldr	r3, [pc, #112]	@ (800cfb0 <sdp4_deep_initialize+0x4140>)
 800cf40:	e9c1 239a 	strd	r2, r3, [r1, #616]	@ 0x268
	m->step2=259200;
 800cf44:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 800cf48:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800cf4c:	6819      	ldr	r1, [r3, #0]
 800cf4e:	a314      	add	r3, pc, #80	@ (adr r3, 800cfa0 <sdp4_deep_initialize+0x4130>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	e9c1 239c 	strd	r2, r3, [r1, #624]	@ 0x270

	return;
 800cf58:	e002      	b.n	800cf60 <sdp4_deep_initialize+0x40f0>
		    return;
 800cf5a:	bf00      	nop
 800cf5c:	e000      	b.n	800cf60 <sdp4_deep_initialize+0x40f0>
		    return;
 800cf5e:	bf00      	nop
}
 800cf60:	f507 7759 	add.w	r7, r7, #868	@ 0x364
 800cf64:	46bd      	mov	sp, r7
 800cf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6a:	bf00      	nop
 800cf6c:	f3af 8000 	nop.w
 800cf70:	fa8d3300 	.word	0xfa8d3300
 800cf74:	3e8db168 	.word	0x3e8db168
 800cf78:	192cb6b5 	.word	0x192cb6b5
 800cf7c:	3ec200a9 	.word	0x3ec200a9
 800cf80:	662248d5 	.word	0x662248d5
 800cf84:	3fc0cebc 	.word	0x3fc0cebc
 800cf88:	4261a460 	.word	0x4261a460
 800cf8c:	40071316 	.word	0x40071316
 800cf90:	9c682b0d 	.word	0x9c682b0d
 800cf94:	3fd7f77e 	.word	0x3fd7f77e
 800cf98:	5b2195a5 	.word	0x5b2195a5
 800cf9c:	3f71ebcd 	.word	0x3f71ebcd
 800cfa0:	00000000 	.word	0x00000000
 800cfa4:	410fa400 	.word	0x410fa400
 800cfa8:	40080000 	.word	0x40080000
 800cfac:	40868000 	.word	0x40868000
 800cfb0:	c0868000 	.word	0xc0868000
 800cfb4:	00000000 	.word	0x00000000

0800cfb8 <deep_arg_dynamic_init>:

void deep_arg_dynamic_init(const struct _sdp4 *m, deep_arg_dynamic_t *deep_dyn){
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
	deep_dyn->savtsn=1E20;
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	a312      	add	r3, pc, #72	@ (adr r3, 800d010 <deep_arg_dynamic_init+0x58>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	deep_dyn->loopFlag = 0;
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	deep_dyn->epochRestartFlag = 0;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	deep_dyn->xli=m->xlamo;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	deep_dyn->xni=m->xnq;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	deep_dyn->atime=0;
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	f04f 0200 	mov.w	r2, #0
 800cffc:	f04f 0300 	mov.w	r3, #0
 800d000:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	78b58c40 	.word	0x78b58c40
 800d014:	4415af1d 	.word	0x4415af1d

0800d018 <sdp4_deep>:

void sdp4_deep(const struct _sdp4 *m, int ientry, const deep_arg_fixed_t * deep_arg, deep_arg_dynamic_t *deep_dyn)
{
 800d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	b0d7      	sub	sp, #348	@ 0x15c
 800d01e:	af00      	add	r7, sp, #0
 800d020:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 800d024:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800d028:	6020      	str	r0, [r4, #0]
 800d02a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 800d02e:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800d032:	6001      	str	r1, [r0, #0]
 800d034:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d038:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800d03c:	600a      	str	r2, [r1, #0]
 800d03e:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800d042:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800d046:	6013      	str	r3, [r2, #0]
	double alfdp,
	sinis, sinok, sil, betdp, dalf, cosis, cosok, dbet, dls, f2,
	f3, xnoh, pgh, ph, sel, ses, xls, sinzf, sis, sll, sls, temp,
	x2li, x2omi, xl, xldot, xnddt,
	xndot, xomi, zf, zm,
	delt=0, ft=0;
 800d048:	f04f 0200 	mov.w	r2, #0
 800d04c:	f04f 0300 	mov.w	r3, #0
 800d050:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800d054:	f04f 0200 	mov.w	r2, #0
 800d058:	f04f 0300 	mov.w	r3, #0
 800d05c:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138


	switch (ientry)
 800d060:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d064:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d009      	beq.n	800d082 <sdp4_deep+0x6a>
 800d06e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d072:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	f001 8203 	beq.w	800e484 <sdp4_deep+0x146c>
 800d07e:	f001 bfef 	b.w	800f060 <sdp4_deep+0x2048>
	{

		case DPSecular:  /* Entrance for deep space secular effects */

		deep_dyn->xll=deep_dyn->xll+m->ssl*deep_dyn->t;
 800d082:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d086:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d090:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d094:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	@ 0x1d0
 800d09e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d0a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d0ac:	f7f3 fab4 	bl	8000618 <__aeabi_dmul>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	f7f3 f8f8 	bl	80002ac <__adddf3>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d0c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	e9c3 0100 	strd	r0, r1, [r3]
		deep_dyn->omgadf=deep_dyn->omgadf+m->ssg*deep_dyn->t;
 800d0d2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d0d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800d0e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d0e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	@ 0x160
 800d0ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d0f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d0fc:	f7f3 fa8c 	bl	8000618 <__aeabi_dmul>
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	4620      	mov	r0, r4
 800d106:	4629      	mov	r1, r5
 800d108:	f7f3 f8d0 	bl	80002ac <__adddf3>
 800d10c:	4602      	mov	r2, r0
 800d10e:	460b      	mov	r3, r1
 800d110:	4610      	mov	r0, r2
 800d112:	4619      	mov	r1, r3
 800d114:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d118:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	e9c3 0102 	strd	r0, r1, [r3, #8]
		deep_dyn->xnode=deep_dyn->xnode+m->ssh*deep_dyn->t;
 800d122:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d126:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800d130:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d134:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	e9d3 0176 	ldrd	r0, r1, [r3, #472]	@ 0x1d8
 800d13e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d142:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d14c:	f7f3 fa64 	bl	8000618 <__aeabi_dmul>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	4620      	mov	r0, r4
 800d156:	4629      	mov	r1, r5
 800d158:	f7f3 f8a8 	bl	80002ac <__adddf3>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	4610      	mov	r0, r2
 800d162:	4619      	mov	r1, r3
 800d164:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d168:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	e9c3 0104 	strd	r0, r1, [r3, #16]
		deep_dyn->em=m->eo+m->sse*deep_dyn->t;
 800d172:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d176:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	e9d3 45b8 	ldrd	r4, r5, [r3, #736]	@ 0x2e0
 800d180:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d184:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	@ 0x150
 800d18e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d192:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d19c:	f7f3 fa3c 	bl	8000618 <__aeabi_dmul>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f7f3 f880 	bl	80002ac <__adddf3>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	e9c3 0106 	strd	r0, r1, [r3, #24]
		deep_dyn->xinc=m->xincl+m->ssi*deep_dyn->t;
 800d1c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	e9d3 45b6 	ldrd	r4, r5, [r3, #728]	@ 0x2d8
 800d1d0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	e9d3 0156 	ldrd	r0, r1, [r3, #344]	@ 0x158
 800d1de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d1e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d1ec:	f7f3 fa14 	bl	8000618 <__aeabi_dmul>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	f7f3 f858 	bl	80002ac <__adddf3>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4610      	mov	r0, r2
 800d202:	4619      	mov	r1, r3
 800d204:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d208:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	e9c3 0108 	strd	r0, r1, [r3, #32]

		if (deep_dyn->xinc<0)
 800d212:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d216:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d220:	f04f 0200 	mov.w	r2, #0
 800d224:	f04f 0300 	mov.w	r3, #0
 800d228:	f7f3 fc68 	bl	8000afc <__aeabi_dcmplt>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d03f      	beq.n	800d2b2 <sdp4_deep+0x29a>
		{
			deep_dyn->xinc=-deep_dyn->xinc;
 800d232:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d236:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d240:	633a      	str	r2, [r7, #48]	@ 0x30
 800d242:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d246:	637b      	str	r3, [r7, #52]	@ 0x34
 800d248:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d24c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800d256:	ed83 7b08 	vstr	d7, [r3, #32]
			deep_dyn->xnode=deep_dyn->xnode+PI;
 800d25a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d25e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d268:	f20f 6310 	addw	r3, pc, #1552	@ 0x610
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	f7f3 f81c 	bl	80002ac <__adddf3>
 800d274:	4602      	mov	r2, r0
 800d276:	460b      	mov	r3, r1
 800d278:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d27c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d280:	6809      	ldr	r1, [r1, #0]
 800d282:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->omgadf=deep_dyn->omgadf-PI;
 800d286:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d28a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d294:	f20f 53e4 	addw	r3, pc, #1508	@ 0x5e4
 800d298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29c:	f7f3 f804 	bl	80002a8 <__aeabi_dsub>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d2a8:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d2ac:	6809      	ldr	r1, [r1, #0]
 800d2ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if (!m->resonanceFlag) {
 800d2b2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d2b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f001 86cd 	beq.w	800f05e <sdp4_deep+0x2046>
			return;
		}

		do
		{
			if ((deep_dyn->atime==0) || ((deep_dyn->t>=0) && (deep_dyn->atime<0)) || ((deep_dyn->t<0) && (deep_dyn->atime>=0)))
 800d2c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d2c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800d2d2:	f04f 0200 	mov.w	r2, #0
 800d2d6:	f04f 0300 	mov.w	r3, #0
 800d2da:	f7f3 fc05 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d13f      	bne.n	800d364 <sdp4_deep+0x34c>
 800d2e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d2e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d2f2:	f04f 0200 	mov.w	r2, #0
 800d2f6:	f04f 0300 	mov.w	r3, #0
 800d2fa:	f7f3 fc13 	bl	8000b24 <__aeabi_dcmpge>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00f      	beq.n	800d324 <sdp4_deep+0x30c>
 800d304:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d308:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800d312:	f04f 0200 	mov.w	r2, #0
 800d316:	f04f 0300 	mov.w	r3, #0
 800d31a:	f7f3 fbef 	bl	8000afc <__aeabi_dcmplt>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d11f      	bne.n	800d364 <sdp4_deep+0x34c>
 800d324:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d328:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d332:	f04f 0200 	mov.w	r2, #0
 800d336:	f04f 0300 	mov.w	r3, #0
 800d33a:	f7f3 fbdf 	bl	8000afc <__aeabi_dcmplt>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d05a      	beq.n	800d3fa <sdp4_deep+0x3e2>
 800d344:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d348:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800d352:	f04f 0200 	mov.w	r2, #0
 800d356:	f04f 0300 	mov.w	r3, #0
 800d35a:	f7f3 fbe3 	bl	8000b24 <__aeabi_dcmpge>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d04a      	beq.n	800d3fa <sdp4_deep+0x3e2>
			{
				/* Epoch restart */

				if (deep_dyn->t>=0)
 800d364:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d368:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d372:	f04f 0200 	mov.w	r2, #0
 800d376:	f04f 0300 	mov.w	r3, #0
 800d37a:	f7f3 fbd3 	bl	8000b24 <__aeabi_dcmpge>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d009      	beq.n	800d398 <sdp4_deep+0x380>
					delt=m->stepp;
 800d384:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d388:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800d392:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800d396:	e008      	b.n	800d3aa <sdp4_deep+0x392>
				else
					delt=m->stepn;
 800d398:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d39c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800d3a6:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

				deep_dyn->atime=0;
 800d3aa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d3ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d3b2:	6819      	ldr	r1, [r3, #0]
 800d3b4:	f04f 0200 	mov.w	r2, #0
 800d3b8:	f04f 0300 	mov.w	r3, #0
 800d3bc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
				deep_dyn->xni=m->xnq;
 800d3c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d3c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800d3ce:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d3d2:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d3d6:	6809      	ldr	r1, [r1, #0]
 800d3d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				deep_dyn->xli=m->xlamo;
 800d3dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d3e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	e9d3 2394 	ldrd	r2, r3, [r3, #592]	@ 0x250
 800d3ea:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800d3ee:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800d3f2:	6809      	ldr	r1, [r1, #0]
 800d3f4:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
 800d3f8:	e041      	b.n	800d47e <sdp4_deep+0x466>
			}

			else
			{
				if (fabs(deep_dyn->t)>=fabs(deep_dyn->atime))
 800d3fa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d3fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d408:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d40a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d40e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d410:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d414:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800d41e:	623a      	str	r2, [r7, #32]
 800d420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d424:	627b      	str	r3, [r7, #36]	@ 0x24
 800d426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d42a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d42e:	f7f3 fb79 	bl	8000b24 <__aeabi_dcmpge>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d022      	beq.n	800d47e <sdp4_deep+0x466>
				{
					if (deep_dyn->t>0)
 800d438:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d43c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d446:	f04f 0200 	mov.w	r2, #0
 800d44a:	f04f 0300 	mov.w	r3, #0
 800d44e:	f7f3 fb73 	bl	8000b38 <__aeabi_dcmpgt>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d009      	beq.n	800d46c <sdp4_deep+0x454>
						delt=m->stepp;
 800d458:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d45c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800d466:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800d46a:	e008      	b.n	800d47e <sdp4_deep+0x466>
					else
						delt=m->stepn;
 800d46c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d470:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800d47a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
				}
			}

			do
			{
				if (fabs(deep_dyn->t-deep_dyn->atime)>=m->stepp)
 800d47e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d482:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d48c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d490:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800d49a:	f7f2 ff05 	bl	80002a8 <__aeabi_dsub>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	61ba      	str	r2, [r7, #24]
 800d4a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d4a8:	61fb      	str	r3, [r7, #28]
 800d4aa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d4ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800d4b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d4bc:	f7f3 fb32 	bl	8000b24 <__aeabi_dcmpge>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d010      	beq.n	800d4e8 <sdp4_deep+0x4d0>
				{
					deep_dyn->loopFlag = 1;
 800d4c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d4ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
					deep_dyn->epochRestartFlag = 0;
 800d4d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d4da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800d4e6:	e01b      	b.n	800d520 <sdp4_deep+0x508>
				}

				else
				{
					ft=deep_dyn->t-deep_dyn->atime;
 800d4e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d4ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d4f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d4fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800d504:	f7f2 fed0 	bl	80002a8 <__aeabi_dsub>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
					deep_dyn->loopFlag = 0;
 800d510:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d514:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
				}

				if (fabs(deep_dyn->t)<fabs(deep_dyn->atime))
 800d520:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d524:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800d52e:	613a      	str	r2, [r7, #16]
 800d530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d534:	617b      	str	r3, [r7, #20]
 800d536:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d53a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800d544:	60ba      	str	r2, [r7, #8]
 800d546:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d54a:	60fb      	str	r3, [r7, #12]
 800d54c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d550:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d554:	f7f3 fad2 	bl	8000afc <__aeabi_dcmplt>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d032      	beq.n	800d5c4 <sdp4_deep+0x5ac>
				{
					if (deep_dyn->t>=0)
 800d55e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d562:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800d56c:	f04f 0200 	mov.w	r2, #0
 800d570:	f04f 0300 	mov.w	r3, #0
 800d574:	f7f3 fad6 	bl	8000b24 <__aeabi_dcmpge>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d009      	beq.n	800d592 <sdp4_deep+0x57a>
						delt=m->stepn;
 800d57e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d582:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	@ 0x268
 800d58c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 800d590:	e008      	b.n	800d5a4 <sdp4_deep+0x58c>
					else
						delt=m->stepp;
 800d592:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d596:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	@ 0x260
 800d5a0:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

					deep_dyn->loopFlag = 1;
 800d5a4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5a8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
					deep_dyn->epochRestartFlag = 1;
 800d5b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
				}

				/* Dot terms calculated */
				if (m->synchronousFlag) {
 800d5c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 8157 	beq.w	800d884 <sdp4_deep+0x86c>
					xndot=m->del1*sin(deep_dyn->xli-m->fasx2)+m->del2*sin(2*(deep_dyn->xli-m->fasx4))+m->del3*sin(3*(deep_dyn->xli-m->fasx6));
 800d5d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	e9d3 4588 	ldrd	r4, r5, [r3, #544]	@ 0x220
 800d5e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d5f2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d5f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	@ 0x238
 800d600:	f7f2 fe52 	bl	80002a8 <__aeabi_dsub>
 800d604:	4602      	mov	r2, r0
 800d606:	460b      	mov	r3, r1
 800d608:	ec43 2b17 	vmov	d7, r2, r3
 800d60c:	eeb0 0a47 	vmov.f32	s0, s14
 800d610:	eef0 0a67 	vmov.f32	s1, s15
 800d614:	f012 fe14 	bl	8020240 <sin>
 800d618:	ec53 2b10 	vmov	r2, r3, d0
 800d61c:	4620      	mov	r0, r4
 800d61e:	4629      	mov	r1, r5
 800d620:	f7f2 fffa 	bl	8000618 <__aeabi_dmul>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	4690      	mov	r8, r2
 800d62a:	4699      	mov	r9, r3
 800d62c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d630:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	e9d3 458a 	ldrd	r4, r5, [r3, #552]	@ 0x228
 800d63a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d63e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d648:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d64c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	@ 0x240
 800d656:	f7f2 fe27 	bl	80002a8 <__aeabi_dsub>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4610      	mov	r0, r2
 800d660:	4619      	mov	r1, r3
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	f7f2 fe21 	bl	80002ac <__adddf3>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	ec43 2b17 	vmov	d7, r2, r3
 800d672:	eeb0 0a47 	vmov.f32	s0, s14
 800d676:	eef0 0a67 	vmov.f32	s1, s15
 800d67a:	f012 fde1 	bl	8020240 <sin>
 800d67e:	ec53 2b10 	vmov	r2, r3, d0
 800d682:	4620      	mov	r0, r4
 800d684:	4629      	mov	r1, r5
 800d686:	f7f2 ffc7 	bl	8000618 <__aeabi_dmul>
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	4640      	mov	r0, r8
 800d690:	4649      	mov	r1, r9
 800d692:	f7f2 fe0b 	bl	80002ac <__adddf3>
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	4690      	mov	r8, r2
 800d69c:	4699      	mov	r9, r3
 800d69e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d6a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	e9d3 458c 	ldrd	r4, r5, [r3, #560]	@ 0x230
 800d6ac:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d6b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d6ba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d6be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800d6c8:	f7f2 fdee 	bl	80002a8 <__aeabi_dsub>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	f04f 0200 	mov.w	r2, #0
 800d6d8:	4b67      	ldr	r3, [pc, #412]	@ (800d878 <sdp4_deep+0x860>)
 800d6da:	f7f2 ff9d 	bl	8000618 <__aeabi_dmul>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	ec43 2b17 	vmov	d7, r2, r3
 800d6e6:	eeb0 0a47 	vmov.f32	s0, s14
 800d6ea:	eef0 0a67 	vmov.f32	s1, s15
 800d6ee:	f012 fda7 	bl	8020240 <sin>
 800d6f2:	ec53 2b10 	vmov	r2, r3, d0
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	f7f2 ff8d 	bl	8000618 <__aeabi_dmul>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4640      	mov	r0, r8
 800d704:	4649      	mov	r1, r9
 800d706:	f7f2 fdd1 	bl	80002ac <__adddf3>
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
					xnddt=m->del1*cos(deep_dyn->xli-m->fasx2)+2*m->del2*cos(2*(deep_dyn->xli-m->fasx4))+3*m->del3*cos(3*(deep_dyn->xli-m->fasx6));
 800d712:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d716:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	e9d3 4588 	ldrd	r4, r5, [r3, #544]	@ 0x220
 800d720:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d724:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d72e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d732:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	@ 0x238
 800d73c:	f7f2 fdb4 	bl	80002a8 <__aeabi_dsub>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	ec43 2b17 	vmov	d7, r2, r3
 800d748:	eeb0 0a47 	vmov.f32	s0, s14
 800d74c:	eef0 0a67 	vmov.f32	s1, s15
 800d750:	f012 fd1a 	bl	8020188 <cos>
 800d754:	ec53 2b10 	vmov	r2, r3, d0
 800d758:	4620      	mov	r0, r4
 800d75a:	4629      	mov	r1, r5
 800d75c:	f7f2 ff5c 	bl	8000618 <__aeabi_dmul>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	4690      	mov	r8, r2
 800d766:	4699      	mov	r9, r3
 800d768:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d76c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	e9d3 018a 	ldrd	r0, r1, [r3, #552]	@ 0x228
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	f7f2 fd97 	bl	80002ac <__adddf3>
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	4614      	mov	r4, r2
 800d784:	461d      	mov	r5, r3
 800d786:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d78a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d794:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d798:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	e9d3 2390 	ldrd	r2, r3, [r3, #576]	@ 0x240
 800d7a2:	f7f2 fd81 	bl	80002a8 <__aeabi_dsub>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	f7f2 fd7b 	bl	80002ac <__adddf3>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	ec43 2b17 	vmov	d7, r2, r3
 800d7be:	eeb0 0a47 	vmov.f32	s0, s14
 800d7c2:	eef0 0a67 	vmov.f32	s1, s15
 800d7c6:	f012 fcdf 	bl	8020188 <cos>
 800d7ca:	ec53 2b10 	vmov	r2, r3, d0
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	f7f2 ff21 	bl	8000618 <__aeabi_dmul>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	460b      	mov	r3, r1
 800d7da:	4640      	mov	r0, r8
 800d7dc:	4649      	mov	r1, r9
 800d7de:	f7f2 fd65 	bl	80002ac <__adddf3>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4690      	mov	r8, r2
 800d7e8:	4699      	mov	r9, r3
 800d7ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d7ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	e9d3 018c 	ldrd	r0, r1, [r3, #560]	@ 0x230
 800d7f8:	f04f 0200 	mov.w	r2, #0
 800d7fc:	4b1e      	ldr	r3, [pc, #120]	@ (800d878 <sdp4_deep+0x860>)
 800d7fe:	f7f2 ff0b 	bl	8000618 <__aeabi_dmul>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4614      	mov	r4, r2
 800d808:	461d      	mov	r5, r3
 800d80a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d80e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d818:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d81c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	e9d3 2392 	ldrd	r2, r3, [r3, #584]	@ 0x248
 800d826:	f7f2 fd3f 	bl	80002a8 <__aeabi_dsub>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	4610      	mov	r0, r2
 800d830:	4619      	mov	r1, r3
 800d832:	f04f 0200 	mov.w	r2, #0
 800d836:	4b10      	ldr	r3, [pc, #64]	@ (800d878 <sdp4_deep+0x860>)
 800d838:	f7f2 feee 	bl	8000618 <__aeabi_dmul>
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	ec43 2b17 	vmov	d7, r2, r3
 800d844:	eeb0 0a47 	vmov.f32	s0, s14
 800d848:	eef0 0a67 	vmov.f32	s1, s15
 800d84c:	f012 fc9c 	bl	8020188 <cos>
 800d850:	ec53 2b10 	vmov	r2, r3, d0
 800d854:	4620      	mov	r0, r4
 800d856:	4629      	mov	r1, r5
 800d858:	f7f2 fede 	bl	8000618 <__aeabi_dmul>
 800d85c:	4602      	mov	r2, r0
 800d85e:	460b      	mov	r3, r1
 800d860:	4640      	mov	r0, r8
 800d862:	4649      	mov	r1, r9
 800d864:	f7f2 fd22 	bl	80002ac <__adddf3>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 800d870:	f000 bc2e 	b.w	800e0d0 <sdp4_deep+0x10b8>
 800d874:	f3af 8000 	nop.w
 800d878:	40080000 	.word	0x40080000
 800d87c:	54442d18 	.word	0x54442d18
 800d880:	400921fb 	.word	0x400921fb
				}

				else
				{
					xomi=m->omegaq+deep_arg->omgdot*deep_dyn->atime;
 800d884:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d888:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	@ 0xe0
 800d892:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d896:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800d8a0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d8a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800d8ae:	f7f2 feb3 	bl	8000618 <__aeabi_dmul>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7f2 fcf7 	bl	80002ac <__adddf3>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
					x2omi=xomi+xomi;
 800d8c6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	f7f2 fced 	bl	80002ac <__adddf3>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
					x2li=deep_dyn->xli+deep_dyn->xli;
 800d8da:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d8de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	f7f2 fcde 	bl	80002ac <__adddf3>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					xndot=m->d2201*sin(x2omi+deep_dyn->xli-G22)+m->d2211*sin(deep_dyn->xli-G22)+m->d3210*sin(xomi+deep_dyn->xli-G32)+m->d3222*sin(-xomi+deep_dyn->xli-G32)+m->d4410*sin(x2omi+x2li-G44)+m->d4422*sin(x2li-G44)+m->d5220*sin(xomi+deep_dyn->xli-G52)+m->d5232*sin(-xomi+deep_dyn->xli-G52)+m->d5421*sin(xomi+x2li-G54)+m->d5433*sin(-xomi+x2li-G54);
 800d8f8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d8fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	e9d3 45a0 	ldrd	r4, r5, [r3, #640]	@ 0x280
 800d906:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d90a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d914:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800d918:	f7f2 fcc8 	bl	80002ac <__adddf3>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	4610      	mov	r0, r2
 800d922:	4619      	mov	r1, r3
 800d924:	f60f 3334 	addw	r3, pc, #2868	@ 0xb34
 800d928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92c:	f7f2 fcbc 	bl	80002a8 <__aeabi_dsub>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	ec43 2b17 	vmov	d7, r2, r3
 800d938:	eeb0 0a47 	vmov.f32	s0, s14
 800d93c:	eef0 0a67 	vmov.f32	s1, s15
 800d940:	f012 fc7e 	bl	8020240 <sin>
 800d944:	ec53 2b10 	vmov	r2, r3, d0
 800d948:	4620      	mov	r0, r4
 800d94a:	4629      	mov	r1, r5
 800d94c:	f7f2 fe64 	bl	8000618 <__aeabi_dmul>
 800d950:	4602      	mov	r2, r0
 800d952:	460b      	mov	r3, r1
 800d954:	4690      	mov	r8, r2
 800d956:	4699      	mov	r9, r3
 800d958:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d95c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	e9d3 45a2 	ldrd	r4, r5, [r3, #648]	@ 0x288
 800d966:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d96a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d974:	f60f 23e4 	addw	r3, pc, #2788	@ 0xae4
 800d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97c:	f7f2 fc94 	bl	80002a8 <__aeabi_dsub>
 800d980:	4602      	mov	r2, r0
 800d982:	460b      	mov	r3, r1
 800d984:	ec43 2b17 	vmov	d7, r2, r3
 800d988:	eeb0 0a47 	vmov.f32	s0, s14
 800d98c:	eef0 0a67 	vmov.f32	s1, s15
 800d990:	f012 fc56 	bl	8020240 <sin>
 800d994:	ec53 2b10 	vmov	r2, r3, d0
 800d998:	4620      	mov	r0, r4
 800d99a:	4629      	mov	r1, r5
 800d99c:	f7f2 fe3c 	bl	8000618 <__aeabi_dmul>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	f7f2 fc80 	bl	80002ac <__adddf3>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	4690      	mov	r8, r2
 800d9b2:	4699      	mov	r9, r3
 800d9b4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d9b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	e9d3 4578 	ldrd	r4, r5, [r3, #480]	@ 0x1e0
 800d9c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800d9c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800d9d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800d9d4:	f7f2 fc6a 	bl	80002ac <__adddf3>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4610      	mov	r0, r2
 800d9de:	4619      	mov	r1, r3
 800d9e0:	f60f 2380 	addw	r3, pc, #2688	@ 0xa80
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	f7f2 fc5e 	bl	80002a8 <__aeabi_dsub>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	ec43 2b17 	vmov	d7, r2, r3
 800d9f4:	eeb0 0a47 	vmov.f32	s0, s14
 800d9f8:	eef0 0a67 	vmov.f32	s1, s15
 800d9fc:	f012 fc20 	bl	8020240 <sin>
 800da00:	ec53 2b10 	vmov	r2, r3, d0
 800da04:	4620      	mov	r0, r4
 800da06:	4629      	mov	r1, r5
 800da08:	f7f2 fe06 	bl	8000618 <__aeabi_dmul>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	4640      	mov	r0, r8
 800da12:	4649      	mov	r1, r9
 800da14:	f7f2 fc4a 	bl	80002ac <__adddf3>
 800da18:	4602      	mov	r2, r0
 800da1a:	460b      	mov	r3, r1
 800da1c:	4690      	mov	r8, r2
 800da1e:	4699      	mov	r9, r3
 800da20:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800da24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	e9d3 457a 	ldrd	r4, r5, [r3, #488]	@ 0x1e8
 800da2e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800da32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800da3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800da40:	f7f2 fc32 	bl	80002a8 <__aeabi_dsub>
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4610      	mov	r0, r2
 800da4a:	4619      	mov	r1, r3
 800da4c:	f60f 2314 	addw	r3, pc, #2580	@ 0xa14
 800da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da54:	f7f2 fc28 	bl	80002a8 <__aeabi_dsub>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	ec43 2b17 	vmov	d7, r2, r3
 800da60:	eeb0 0a47 	vmov.f32	s0, s14
 800da64:	eef0 0a67 	vmov.f32	s1, s15
 800da68:	f012 fbea 	bl	8020240 <sin>
 800da6c:	ec53 2b10 	vmov	r2, r3, d0
 800da70:	4620      	mov	r0, r4
 800da72:	4629      	mov	r1, r5
 800da74:	f7f2 fdd0 	bl	8000618 <__aeabi_dmul>
 800da78:	4602      	mov	r2, r0
 800da7a:	460b      	mov	r3, r1
 800da7c:	4640      	mov	r0, r8
 800da7e:	4649      	mov	r1, r9
 800da80:	f7f2 fc14 	bl	80002ac <__adddf3>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4690      	mov	r8, r2
 800da8a:	4699      	mov	r9, r3
 800da8c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800da90:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	e9d3 457c 	ldrd	r4, r5, [r3, #496]	@ 0x1f0
 800da9a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800da9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800daa2:	f7f2 fc03 	bl	80002ac <__adddf3>
 800daa6:	4602      	mov	r2, r0
 800daa8:	460b      	mov	r3, r1
 800daaa:	4610      	mov	r0, r2
 800daac:	4619      	mov	r1, r3
 800daae:	f60f 13bc 	addw	r3, pc, #2492	@ 0x9bc
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	f7f2 fbf7 	bl	80002a8 <__aeabi_dsub>
 800daba:	4602      	mov	r2, r0
 800dabc:	460b      	mov	r3, r1
 800dabe:	ec43 2b17 	vmov	d7, r2, r3
 800dac2:	eeb0 0a47 	vmov.f32	s0, s14
 800dac6:	eef0 0a67 	vmov.f32	s1, s15
 800daca:	f012 fbb9 	bl	8020240 <sin>
 800dace:	ec53 2b10 	vmov	r2, r3, d0
 800dad2:	4620      	mov	r0, r4
 800dad4:	4629      	mov	r1, r5
 800dad6:	f7f2 fd9f 	bl	8000618 <__aeabi_dmul>
 800dada:	4602      	mov	r2, r0
 800dadc:	460b      	mov	r3, r1
 800dade:	4640      	mov	r0, r8
 800dae0:	4649      	mov	r1, r9
 800dae2:	f7f2 fbe3 	bl	80002ac <__adddf3>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4690      	mov	r8, r2
 800daec:	4699      	mov	r9, r3
 800daee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800daf2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	@ 0x1f8
 800dafc:	f60f 136c 	addw	r3, pc, #2412	@ 0x96c
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800db08:	f7f2 fbce 	bl	80002a8 <__aeabi_dsub>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	ec43 2b17 	vmov	d7, r2, r3
 800db14:	eeb0 0a47 	vmov.f32	s0, s14
 800db18:	eef0 0a67 	vmov.f32	s1, s15
 800db1c:	f012 fb90 	bl	8020240 <sin>
 800db20:	ec53 2b10 	vmov	r2, r3, d0
 800db24:	4620      	mov	r0, r4
 800db26:	4629      	mov	r1, r5
 800db28:	f7f2 fd76 	bl	8000618 <__aeabi_dmul>
 800db2c:	4602      	mov	r2, r0
 800db2e:	460b      	mov	r3, r1
 800db30:	4640      	mov	r0, r8
 800db32:	4649      	mov	r1, r9
 800db34:	f7f2 fbba 	bl	80002ac <__adddf3>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4690      	mov	r8, r2
 800db3e:	4699      	mov	r9, r3
 800db40:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800db44:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	e9d3 4580 	ldrd	r4, r5, [r3, #512]	@ 0x200
 800db4e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800db52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800db5c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800db60:	f7f2 fba4 	bl	80002ac <__adddf3>
 800db64:	4602      	mov	r2, r0
 800db66:	460b      	mov	r3, r1
 800db68:	4610      	mov	r0, r2
 800db6a:	4619      	mov	r1, r3
 800db6c:	f60f 1304 	addw	r3, pc, #2308	@ 0x904
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	f7f2 fb98 	bl	80002a8 <__aeabi_dsub>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	ec43 2b17 	vmov	d7, r2, r3
 800db80:	eeb0 0a47 	vmov.f32	s0, s14
 800db84:	eef0 0a67 	vmov.f32	s1, s15
 800db88:	f012 fb5a 	bl	8020240 <sin>
 800db8c:	ec53 2b10 	vmov	r2, r3, d0
 800db90:	4620      	mov	r0, r4
 800db92:	4629      	mov	r1, r5
 800db94:	f7f2 fd40 	bl	8000618 <__aeabi_dmul>
 800db98:	4602      	mov	r2, r0
 800db9a:	460b      	mov	r3, r1
 800db9c:	4640      	mov	r0, r8
 800db9e:	4649      	mov	r1, r9
 800dba0:	f7f2 fb84 	bl	80002ac <__adddf3>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	4690      	mov	r8, r2
 800dbaa:	4699      	mov	r9, r3
 800dbac:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dbb0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	e9d3 4582 	ldrd	r4, r5, [r3, #520]	@ 0x208
 800dbba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dbbe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800dbc8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800dbcc:	f7f2 fb6c 	bl	80002a8 <__aeabi_dsub>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	f60f 0398 	addw	r3, pc, #2200	@ 0x898
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	f7f2 fb62 	bl	80002a8 <__aeabi_dsub>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	ec43 2b17 	vmov	d7, r2, r3
 800dbec:	eeb0 0a47 	vmov.f32	s0, s14
 800dbf0:	eef0 0a67 	vmov.f32	s1, s15
 800dbf4:	f012 fb24 	bl	8020240 <sin>
 800dbf8:	ec53 2b10 	vmov	r2, r3, d0
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 fd0a 	bl	8000618 <__aeabi_dmul>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	4640      	mov	r0, r8
 800dc0a:	4649      	mov	r1, r9
 800dc0c:	f7f2 fb4e 	bl	80002ac <__adddf3>
 800dc10:	4602      	mov	r2, r0
 800dc12:	460b      	mov	r3, r1
 800dc14:	4690      	mov	r8, r2
 800dc16:	4699      	mov	r9, r3
 800dc18:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dc1c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	e9d3 4584 	ldrd	r4, r5, [r3, #528]	@ 0x210
 800dc26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800dc2a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800dc2e:	f7f2 fb3d 	bl	80002ac <__adddf3>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4610      	mov	r0, r2
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f60f 0340 	addw	r3, pc, #2112	@ 0x840
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	f7f2 fb31 	bl	80002a8 <__aeabi_dsub>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	ec43 2b17 	vmov	d7, r2, r3
 800dc4e:	eeb0 0a47 	vmov.f32	s0, s14
 800dc52:	eef0 0a67 	vmov.f32	s1, s15
 800dc56:	f012 faf3 	bl	8020240 <sin>
 800dc5a:	ec53 2b10 	vmov	r2, r3, d0
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fcd9 	bl	8000618 <__aeabi_dmul>
 800dc66:	4602      	mov	r2, r0
 800dc68:	460b      	mov	r3, r1
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	4649      	mov	r1, r9
 800dc6e:	f7f2 fb1d 	bl	80002ac <__adddf3>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	4690      	mov	r8, r2
 800dc78:	4699      	mov	r9, r3
 800dc7a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dc7e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	e9d3 4586 	ldrd	r4, r5, [r3, #536]	@ 0x218
 800dc88:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800dc8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800dc90:	f7f2 fb0a 	bl	80002a8 <__aeabi_dsub>
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	4610      	mov	r0, r2
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	f20f 73dc 	addw	r3, pc, #2012	@ 0x7dc
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	f7f2 fb00 	bl	80002a8 <__aeabi_dsub>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	ec43 2b17 	vmov	d7, r2, r3
 800dcb0:	eeb0 0a47 	vmov.f32	s0, s14
 800dcb4:	eef0 0a67 	vmov.f32	s1, s15
 800dcb8:	f012 fac2 	bl	8020240 <sin>
 800dcbc:	ec53 2b10 	vmov	r2, r3, d0
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	f7f2 fca8 	bl	8000618 <__aeabi_dmul>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	4640      	mov	r0, r8
 800dcce:	4649      	mov	r1, r9
 800dcd0:	f7f2 faec 	bl	80002ac <__adddf3>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
					xnddt=m->d2201*cos(x2omi+deep_dyn->xli-G22)+m->d2211*cos(deep_dyn->xli-G22)+m->d3210*cos(xomi+deep_dyn->xli-G32)+m->d3222*cos(-xomi+deep_dyn->xli-G32)+m->d5220*cos(xomi+deep_dyn->xli-G52)+m->d5232*cos(-xomi+deep_dyn->xli-G52)+2*(m->d4410*cos(x2omi+x2li-G44)+m->d4422*cos(x2li-G44)+m->d5421*cos(xomi+x2li-G54)+m->d5433*cos(-xomi+x2li-G54));
 800dcdc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dce0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	e9d3 45a0 	ldrd	r4, r5, [r3, #640]	@ 0x280
 800dcea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dcee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800dcf8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800dcfc:	f7f2 fad6 	bl	80002ac <__adddf3>
 800dd00:	4602      	mov	r2, r0
 800dd02:	460b      	mov	r3, r1
 800dd04:	4610      	mov	r0, r2
 800dd06:	4619      	mov	r1, r3
 800dd08:	f20f 7350 	addw	r3, pc, #1872	@ 0x750
 800dd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd10:	f7f2 faca 	bl	80002a8 <__aeabi_dsub>
 800dd14:	4602      	mov	r2, r0
 800dd16:	460b      	mov	r3, r1
 800dd18:	ec43 2b17 	vmov	d7, r2, r3
 800dd1c:	eeb0 0a47 	vmov.f32	s0, s14
 800dd20:	eef0 0a67 	vmov.f32	s1, s15
 800dd24:	f012 fa30 	bl	8020188 <cos>
 800dd28:	ec53 2b10 	vmov	r2, r3, d0
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4629      	mov	r1, r5
 800dd30:	f7f2 fc72 	bl	8000618 <__aeabi_dmul>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4690      	mov	r8, r2
 800dd3a:	4699      	mov	r9, r3
 800dd3c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dd40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	e9d3 45a2 	ldrd	r4, r5, [r3, #648]	@ 0x288
 800dd4a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dd4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800dd58:	f20f 7300 	addw	r3, pc, #1792	@ 0x700
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	f7f2 faa2 	bl	80002a8 <__aeabi_dsub>
 800dd64:	4602      	mov	r2, r0
 800dd66:	460b      	mov	r3, r1
 800dd68:	ec43 2b17 	vmov	d7, r2, r3
 800dd6c:	eeb0 0a47 	vmov.f32	s0, s14
 800dd70:	eef0 0a67 	vmov.f32	s1, s15
 800dd74:	f012 fa08 	bl	8020188 <cos>
 800dd78:	ec53 2b10 	vmov	r2, r3, d0
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f7f2 fc4a 	bl	8000618 <__aeabi_dmul>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4640      	mov	r0, r8
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	f7f2 fa8e 	bl	80002ac <__adddf3>
 800dd90:	4602      	mov	r2, r0
 800dd92:	460b      	mov	r3, r1
 800dd94:	4690      	mov	r8, r2
 800dd96:	4699      	mov	r9, r3
 800dd98:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dd9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	e9d3 4578 	ldrd	r4, r5, [r3, #480]	@ 0x1e0
 800dda6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ddaa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800ddb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800ddb8:	f7f2 fa78 	bl	80002ac <__adddf3>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	f20f 639c 	addw	r3, pc, #1692	@ 0x69c
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f7f2 fa6c 	bl	80002a8 <__aeabi_dsub>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	ec43 2b17 	vmov	d7, r2, r3
 800ddd8:	eeb0 0a47 	vmov.f32	s0, s14
 800dddc:	eef0 0a67 	vmov.f32	s1, s15
 800dde0:	f012 f9d2 	bl	8020188 <cos>
 800dde4:	ec53 2b10 	vmov	r2, r3, d0
 800dde8:	4620      	mov	r0, r4
 800ddea:	4629      	mov	r1, r5
 800ddec:	f7f2 fc14 	bl	8000618 <__aeabi_dmul>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	4640      	mov	r0, r8
 800ddf6:	4649      	mov	r1, r9
 800ddf8:	f7f2 fa58 	bl	80002ac <__adddf3>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	460b      	mov	r3, r1
 800de00:	4690      	mov	r8, r2
 800de02:	4699      	mov	r9, r3
 800de04:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800de08:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	e9d3 457a 	ldrd	r4, r5, [r3, #488]	@ 0x1e8
 800de12:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800de16:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800de20:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800de24:	f7f2 fa40 	bl	80002a8 <__aeabi_dsub>
 800de28:	4602      	mov	r2, r0
 800de2a:	460b      	mov	r3, r1
 800de2c:	4610      	mov	r0, r2
 800de2e:	4619      	mov	r1, r3
 800de30:	f20f 6330 	addw	r3, pc, #1584	@ 0x630
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f7f2 fa36 	bl	80002a8 <__aeabi_dsub>
 800de3c:	4602      	mov	r2, r0
 800de3e:	460b      	mov	r3, r1
 800de40:	ec43 2b17 	vmov	d7, r2, r3
 800de44:	eeb0 0a47 	vmov.f32	s0, s14
 800de48:	eef0 0a67 	vmov.f32	s1, s15
 800de4c:	f012 f99c 	bl	8020188 <cos>
 800de50:	ec53 2b10 	vmov	r2, r3, d0
 800de54:	4620      	mov	r0, r4
 800de56:	4629      	mov	r1, r5
 800de58:	f7f2 fbde 	bl	8000618 <__aeabi_dmul>
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	4640      	mov	r0, r8
 800de62:	4649      	mov	r1, r9
 800de64:	f7f2 fa22 	bl	80002ac <__adddf3>
 800de68:	4602      	mov	r2, r0
 800de6a:	460b      	mov	r3, r1
 800de6c:	4690      	mov	r8, r2
 800de6e:	4699      	mov	r9, r3
 800de70:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800de74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	e9d3 4580 	ldrd	r4, r5, [r3, #512]	@ 0x200
 800de7e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800de82:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800de8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800de90:	f7f2 fa0c 	bl	80002ac <__adddf3>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4610      	mov	r0, r2
 800de9a:	4619      	mov	r1, r3
 800de9c:	f20f 53d4 	addw	r3, pc, #1492	@ 0x5d4
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	f7f2 fa00 	bl	80002a8 <__aeabi_dsub>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	ec43 2b17 	vmov	d7, r2, r3
 800deb0:	eeb0 0a47 	vmov.f32	s0, s14
 800deb4:	eef0 0a67 	vmov.f32	s1, s15
 800deb8:	f012 f966 	bl	8020188 <cos>
 800debc:	ec53 2b10 	vmov	r2, r3, d0
 800dec0:	4620      	mov	r0, r4
 800dec2:	4629      	mov	r1, r5
 800dec4:	f7f2 fba8 	bl	8000618 <__aeabi_dmul>
 800dec8:	4602      	mov	r2, r0
 800deca:	460b      	mov	r3, r1
 800decc:	4640      	mov	r0, r8
 800dece:	4649      	mov	r1, r9
 800ded0:	f7f2 f9ec 	bl	80002ac <__adddf3>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4690      	mov	r8, r2
 800deda:	4699      	mov	r9, r3
 800dedc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dee0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	e9d3 4582 	ldrd	r4, r5, [r3, #520]	@ 0x208
 800deea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800deee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800def8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800defc:	f7f2 f9d4 	bl	80002a8 <__aeabi_dsub>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	4610      	mov	r0, r2
 800df06:	4619      	mov	r1, r3
 800df08:	f20f 5368 	addw	r3, pc, #1384	@ 0x568
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	f7f2 f9ca 	bl	80002a8 <__aeabi_dsub>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	ec43 2b17 	vmov	d7, r2, r3
 800df1c:	eeb0 0a47 	vmov.f32	s0, s14
 800df20:	eef0 0a67 	vmov.f32	s1, s15
 800df24:	f012 f930 	bl	8020188 <cos>
 800df28:	ec53 2b10 	vmov	r2, r3, d0
 800df2c:	4620      	mov	r0, r4
 800df2e:	4629      	mov	r1, r5
 800df30:	f7f2 fb72 	bl	8000618 <__aeabi_dmul>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4640      	mov	r0, r8
 800df3a:	4649      	mov	r1, r9
 800df3c:	f7f2 f9b6 	bl	80002ac <__adddf3>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4692      	mov	sl, r2
 800df46:	469b      	mov	fp, r3
 800df48:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800df4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	e9d3 457c 	ldrd	r4, r5, [r3, #496]	@ 0x1f0
 800df56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800df5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800df5e:	f7f2 f9a5 	bl	80002ac <__adddf3>
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
 800df66:	4610      	mov	r0, r2
 800df68:	4619      	mov	r1, r3
 800df6a:	f20f 5300 	addw	r3, pc, #1280	@ 0x500
 800df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df72:	f7f2 f999 	bl	80002a8 <__aeabi_dsub>
 800df76:	4602      	mov	r2, r0
 800df78:	460b      	mov	r3, r1
 800df7a:	ec43 2b17 	vmov	d7, r2, r3
 800df7e:	eeb0 0a47 	vmov.f32	s0, s14
 800df82:	eef0 0a67 	vmov.f32	s1, s15
 800df86:	f012 f8ff 	bl	8020188 <cos>
 800df8a:	ec53 2b10 	vmov	r2, r3, d0
 800df8e:	4620      	mov	r0, r4
 800df90:	4629      	mov	r1, r5
 800df92:	f7f2 fb41 	bl	8000618 <__aeabi_dmul>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4690      	mov	r8, r2
 800df9c:	4699      	mov	r9, r3
 800df9e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dfa2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	e9d3 457e 	ldrd	r4, r5, [r3, #504]	@ 0x1f8
 800dfac:	f20f 43bc 	addw	r3, pc, #1212	@ 0x4bc
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800dfb8:	f7f2 f976 	bl	80002a8 <__aeabi_dsub>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	ec43 2b17 	vmov	d7, r2, r3
 800dfc4:	eeb0 0a47 	vmov.f32	s0, s14
 800dfc8:	eef0 0a67 	vmov.f32	s1, s15
 800dfcc:	f012 f8dc 	bl	8020188 <cos>
 800dfd0:	ec53 2b10 	vmov	r2, r3, d0
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	f7f2 fb1e 	bl	8000618 <__aeabi_dmul>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	4640      	mov	r0, r8
 800dfe2:	4649      	mov	r1, r9
 800dfe4:	f7f2 f962 	bl	80002ac <__adddf3>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	4690      	mov	r8, r2
 800dfee:	4699      	mov	r9, r3
 800dff0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800dff4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	e9d3 4584 	ldrd	r4, r5, [r3, #528]	@ 0x210
 800dffe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800e002:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800e006:	f7f2 f951 	bl	80002ac <__adddf3>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4610      	mov	r0, r2
 800e010:	4619      	mov	r1, r3
 800e012:	f20f 4368 	addw	r3, pc, #1128	@ 0x468
 800e016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01a:	f7f2 f945 	bl	80002a8 <__aeabi_dsub>
 800e01e:	4602      	mov	r2, r0
 800e020:	460b      	mov	r3, r1
 800e022:	ec43 2b17 	vmov	d7, r2, r3
 800e026:	eeb0 0a47 	vmov.f32	s0, s14
 800e02a:	eef0 0a67 	vmov.f32	s1, s15
 800e02e:	f012 f8ab 	bl	8020188 <cos>
 800e032:	ec53 2b10 	vmov	r2, r3, d0
 800e036:	4620      	mov	r0, r4
 800e038:	4629      	mov	r1, r5
 800e03a:	f7f2 faed 	bl	8000618 <__aeabi_dmul>
 800e03e:	4602      	mov	r2, r0
 800e040:	460b      	mov	r3, r1
 800e042:	4640      	mov	r0, r8
 800e044:	4649      	mov	r1, r9
 800e046:	f7f2 f931 	bl	80002ac <__adddf3>
 800e04a:	4602      	mov	r2, r0
 800e04c:	460b      	mov	r3, r1
 800e04e:	4690      	mov	r8, r2
 800e050:	4699      	mov	r9, r3
 800e052:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e056:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	e9d3 4586 	ldrd	r4, r5, [r3, #536]	@ 0x218
 800e060:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e064:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800e068:	f7f2 f91e 	bl	80002a8 <__aeabi_dsub>
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	4610      	mov	r0, r2
 800e072:	4619      	mov	r1, r3
 800e074:	f20f 4304 	addw	r3, pc, #1028	@ 0x404
 800e078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07c:	f7f2 f914 	bl	80002a8 <__aeabi_dsub>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	ec43 2b17 	vmov	d7, r2, r3
 800e088:	eeb0 0a47 	vmov.f32	s0, s14
 800e08c:	eef0 0a67 	vmov.f32	s1, s15
 800e090:	f012 f87a 	bl	8020188 <cos>
 800e094:	ec53 2b10 	vmov	r2, r3, d0
 800e098:	4620      	mov	r0, r4
 800e09a:	4629      	mov	r1, r5
 800e09c:	f7f2 fabc 	bl	8000618 <__aeabi_dmul>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	f7f2 f900 	bl	80002ac <__adddf3>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	f7f2 f8f8 	bl	80002ac <__adddf3>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	4650      	mov	r0, sl
 800e0c2:	4659      	mov	r1, fp
 800e0c4:	f7f2 f8f2 	bl	80002ac <__adddf3>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
				}

				xldot=deep_dyn->xni+m->xfact;
 800e0d0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e0d4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800e0de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e0e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	e9d3 2396 	ldrd	r2, r3, [r3, #600]	@ 0x258
 800e0ec:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e0f0:	460e      	mov	r6, r1
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	f7f2 f8d9 	bl	80002ac <__adddf3>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	e9c6 2300 	strd	r2, r3, [r6]
				xnddt=xnddt*xldot;
 800e102:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800e10e:	f7f2 fa83 	bl	8000618 <__aeabi_dmul>
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150

				if (deep_dyn->loopFlag) {
 800e11a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e11e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d078      	beq.n	800e21e <sdp4_deep+0x1206>
					deep_dyn->xli=deep_dyn->xli+xldot*delt+xndot*m->step2;
 800e12c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e130:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	@ 0x80
 800e13a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800e13e:	4619      	mov	r1, r3
 800e140:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800e144:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e148:	f7f2 fa66 	bl	8000618 <__aeabi_dmul>
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	4620      	mov	r0, r4
 800e152:	4629      	mov	r1, r5
 800e154:	f7f2 f8aa 	bl	80002ac <__adddf3>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	4614      	mov	r4, r2
 800e15e:	461d      	mov	r5, r3
 800e160:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e164:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	@ 0x270
 800e16e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800e172:	f7f2 fa51 	bl	8000618 <__aeabi_dmul>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	4620      	mov	r0, r4
 800e17c:	4629      	mov	r1, r5
 800e17e:	f7f2 f895 	bl	80002ac <__adddf3>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e18a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e18e:	6809      	ldr	r1, [r1, #0]
 800e190:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
					deep_dyn->xni=deep_dyn->xni+xndot*delt+xnddt*m->step2;
 800e194:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e198:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800e1a2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800e1a6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800e1aa:	f7f2 fa35 	bl	8000618 <__aeabi_dmul>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	f7f2 f879 	bl	80002ac <__adddf3>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	460b      	mov	r3, r1
 800e1be:	4614      	mov	r4, r2
 800e1c0:	461d      	mov	r5, r3
 800e1c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e1c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	e9d3 019c 	ldrd	r0, r1, [r3, #624]	@ 0x270
 800e1d0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800e1d4:	f7f2 fa20 	bl	8000618 <__aeabi_dmul>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	460b      	mov	r3, r1
 800e1dc:	4620      	mov	r0, r4
 800e1de:	4629      	mov	r1, r5
 800e1e0:	f7f2 f864 	bl	80002ac <__adddf3>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e1ec:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e1f0:	6809      	ldr	r1, [r1, #0]
 800e1f2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
					deep_dyn->atime=deep_dyn->atime+delt;
 800e1f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e1fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800e204:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800e208:	f7f2 f850 	bl	80002ac <__adddf3>
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e214:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e218:	6809      	ldr	r1, [r1, #0]
 800e21a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
				}
			} while (deep_dyn->loopFlag && !deep_dyn->epochRestartFlag);
 800e21e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e222:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d009      	beq.n	800e244 <sdp4_deep+0x122c>
 800e230:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e234:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f43f a91d 	beq.w	800d47e <sdp4_deep+0x466>
		} while (deep_dyn->loopFlag && deep_dyn->epochRestartFlag);
 800e244:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e248:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e252:	2b00      	cmp	r3, #0
 800e254:	d009      	beq.n	800e26a <sdp4_deep+0x1252>
 800e256:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e25a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e264:	2b00      	cmp	r3, #0
 800e266:	f47f a82d 	bne.w	800d2c4 <sdp4_deep+0x2ac>

		deep_dyn->xn=deep_dyn->xni+xndot*ft+xnddt*ft*ft*0.5;
 800e26a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e26e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800e278:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800e27c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800e280:	f7f2 f9ca 	bl	8000618 <__aeabi_dmul>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	4620      	mov	r0, r4
 800e28a:	4629      	mov	r1, r5
 800e28c:	f7f2 f80e 	bl	80002ac <__adddf3>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4614      	mov	r4, r2
 800e296:	461d      	mov	r5, r3
 800e298:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800e29c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800e2a0:	f7f2 f9ba 	bl	8000618 <__aeabi_dmul>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800e2b0:	f7f2 f9b2 	bl	8000618 <__aeabi_dmul>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	f04f 0200 	mov.w	r2, #0
 800e2c0:	4b65      	ldr	r3, [pc, #404]	@ (800e458 <sdp4_deep+0x1440>)
 800e2c2:	f7f2 f9a9 	bl	8000618 <__aeabi_dmul>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	f7f1 ffed 	bl	80002ac <__adddf3>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e2da:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e2de:	6809      	ldr	r1, [r1, #0]
 800e2e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		xl=deep_dyn->xli+xldot*ft+xndot*ft*ft*0.5;
 800e2e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e2e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	@ 0x80
 800e2f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800e2fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e300:	f7f2 f98a 	bl	8000618 <__aeabi_dmul>
 800e304:	4602      	mov	r2, r0
 800e306:	460b      	mov	r3, r1
 800e308:	4620      	mov	r0, r4
 800e30a:	4629      	mov	r1, r5
 800e30c:	f7f1 ffce 	bl	80002ac <__adddf3>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	4614      	mov	r4, r2
 800e316:	461d      	mov	r5, r3
 800e318:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800e31c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800e320:	f7f2 f97a 	bl	8000618 <__aeabi_dmul>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	4610      	mov	r0, r2
 800e32a:	4619      	mov	r1, r3
 800e32c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800e330:	f7f2 f972 	bl	8000618 <__aeabi_dmul>
 800e334:	4602      	mov	r2, r0
 800e336:	460b      	mov	r3, r1
 800e338:	4610      	mov	r0, r2
 800e33a:	4619      	mov	r1, r3
 800e33c:	f04f 0200 	mov.w	r2, #0
 800e340:	4b45      	ldr	r3, [pc, #276]	@ (800e458 <sdp4_deep+0x1440>)
 800e342:	f7f2 f969 	bl	8000618 <__aeabi_dmul>
 800e346:	4602      	mov	r2, r0
 800e348:	460b      	mov	r3, r1
 800e34a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e34e:	460e      	mov	r6, r1
 800e350:	4620      	mov	r0, r4
 800e352:	4629      	mov	r1, r5
 800e354:	f7f1 ffaa 	bl	80002ac <__adddf3>
 800e358:	4602      	mov	r2, r0
 800e35a:	460b      	mov	r3, r1
 800e35c:	e946 2302 	strd	r2, r3, [r6, #-8]
		temp=-deep_dyn->xnode+m->thgr+deep_dyn->t*THDT;
 800e360:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e364:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 800e36e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e372:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e37c:	f7f1 ff94 	bl	80002a8 <__aeabi_dsub>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	4614      	mov	r4, r2
 800e386:	461d      	mov	r5, r3
 800e388:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e38c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800e396:	a32e      	add	r3, pc, #184	@ (adr r3, 800e450 <sdp4_deep+0x1438>)
 800e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39c:	f7f2 f93c 	bl	8000618 <__aeabi_dmul>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800e3a8:	460e      	mov	r6, r1
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	f7f1 ff7d 	bl	80002ac <__adddf3>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	e9c6 2300 	strd	r2, r3, [r6]

		if (!m->synchronousFlag) {
 800e3ba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e3be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d11f      	bne.n	800e40a <sdp4_deep+0x13f2>
			deep_dyn->xll=xl+temp+temp;
 800e3ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e3dc:	f7f1 ff66 	bl	80002ac <__adddf3>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f7f1 ff5c 	bl	80002ac <__adddf3>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e3fc:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e400:	6809      	ldr	r1, [r1, #0]
 800e402:	e9c1 2300 	strd	r2, r3, [r1]
		}else{
			deep_dyn->xll=xl-deep_dyn->omgadf+temp;
		}

		return;
 800e406:	f000 be2b 	b.w	800f060 <sdp4_deep+0x2048>
			deep_dyn->xll=xl-deep_dyn->omgadf+temp;
 800e40a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e40e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e418:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e41c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e420:	f7f1 ff42 	bl	80002a8 <__aeabi_dsub>
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	4610      	mov	r0, r2
 800e42a:	4619      	mov	r1, r3
 800e42c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	f7f1 ff3a 	bl	80002ac <__adddf3>
 800e438:	4602      	mov	r2, r0
 800e43a:	460b      	mov	r3, r1
 800e43c:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e440:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e444:	6809      	ldr	r1, [r1, #0]
 800e446:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 800e44a:	f000 be09 	b.w	800f060 <sdp4_deep+0x2048>
 800e44e:	bf00      	nop
 800e450:	5b2195a5 	.word	0x5b2195a5
 800e454:	3f71ebcd 	.word	0x3f71ebcd
 800e458:	3fe00000 	.word	0x3fe00000
 800e45c:	4261a460 	.word	0x4261a460
 800e460:	40171316 	.word	0x40171316
 800e464:	65b088f4 	.word	0x65b088f4
 800e468:	3fee7a22 	.word	0x3fee7a22
 800e46c:	744c0237 	.word	0x744c0237
 800e470:	3ffcd2f1 	.word	0x3ffcd2f1
 800e474:	4388ebcc 	.word	0x4388ebcc
 800e478:	3ff0d036 	.word	0x3ff0d036
 800e47c:	4bb50a38 	.word	0x4bb50a38
 800e480:	4011a4c0 	.word	0x4011a4c0

		case DPPeriodic:	 /* Entrance for lunar-solar periodics */
		sinis=sin(deep_dyn->xinc);
 800e484:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e488:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	ed93 7b08 	vldr	d7, [r3, #32]
 800e492:	eeb0 0a47 	vmov.f32	s0, s14
 800e496:	eef0 0a67 	vmov.f32	s1, s15
 800e49a:	f011 fed1 	bl	8020240 <sin>
 800e49e:	ed87 0b4c 	vstr	d0, [r7, #304]	@ 0x130
		cosis=cos(deep_dyn->xinc);
 800e4a2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e4a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	ed93 7b08 	vldr	d7, [r3, #32]
 800e4b0:	eeb0 0a47 	vmov.f32	s0, s14
 800e4b4:	eef0 0a67 	vmov.f32	s1, s15
 800e4b8:	f011 fe66 	bl	8020188 <cos>
 800e4bc:	ed87 0b4a 	vstr	d0, [r7, #296]	@ 0x128

		if (fabs(deep_dyn->savtsn-deep_dyn->t)>=30)
 800e4c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e4c4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800e4ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e4d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800e4dc:	f7f1 fee4 	bl	80002a8 <__aeabi_dsub>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4692      	mov	sl, r2
 800e4e6:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800e4ea:	f04f 0200 	mov.w	r2, #0
 800e4ee:	4bc2      	ldr	r3, [pc, #776]	@ (800e7f8 <sdp4_deep+0x17e0>)
 800e4f0:	4650      	mov	r0, sl
 800e4f2:	4659      	mov	r1, fp
 800e4f4:	f7f2 fb16 	bl	8000b24 <__aeabi_dcmpge>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f000 830a 	beq.w	800eb14 <sdp4_deep+0x1afc>
		{
			deep_dyn->savtsn=deep_dyn->t;
 800e500:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e504:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800e50e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e512:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e516:	6809      	ldr	r1, [r1, #0]
 800e518:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
			zm=m->zmos+ZNS*deep_dyn->t;
 800e51c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e520:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	e9d3 453c 	ldrd	r4, r5, [r3, #240]	@ 0xf0
 800e52a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e52e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800e538:	a3ab      	add	r3, pc, #684	@ (adr r3, 800e7e8 <sdp4_deep+0x17d0>)
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	f7f2 f86b 	bl	8000618 <__aeabi_dmul>
 800e542:	4602      	mov	r2, r0
 800e544:	460b      	mov	r3, r1
 800e546:	4620      	mov	r0, r4
 800e548:	4629      	mov	r1, r5
 800e54a:	f7f1 feaf 	bl	80002ac <__adddf3>
 800e54e:	4602      	mov	r2, r0
 800e550:	460b      	mov	r3, r1
 800e552:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
			zf=zm+2*ZES*sin(zm);
 800e556:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 800e55a:	f011 fe71 	bl	8020240 <sin>
 800e55e:	ec51 0b10 	vmov	r0, r1, d0
 800e562:	a3a3      	add	r3, pc, #652	@ (adr r3, 800e7f0 <sdp4_deep+0x17d8>)
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	f7f2 f856 	bl	8000618 <__aeabi_dmul>
 800e56c:	4602      	mov	r2, r0
 800e56e:	460b      	mov	r3, r1
 800e570:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800e574:	f7f1 fe9a 	bl	80002ac <__adddf3>
 800e578:	4602      	mov	r2, r0
 800e57a:	460b      	mov	r3, r1
 800e57c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			sinzf=sin(zf);
 800e580:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800e584:	f011 fe5c 	bl	8020240 <sin>
 800e588:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
			f2=0.5*sinzf*sinzf-0.25;
 800e58c:	f04f 0200 	mov.w	r2, #0
 800e590:	4b9a      	ldr	r3, [pc, #616]	@ (800e7fc <sdp4_deep+0x17e4>)
 800e592:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800e596:	f7f2 f83f 	bl	8000618 <__aeabi_dmul>
 800e59a:	4602      	mov	r2, r0
 800e59c:	460b      	mov	r3, r1
 800e59e:	4610      	mov	r0, r2
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800e5a6:	f7f2 f837 	bl	8000618 <__aeabi_dmul>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	f04f 0200 	mov.w	r2, #0
 800e5b6:	4b92      	ldr	r3, [pc, #584]	@ (800e800 <sdp4_deep+0x17e8>)
 800e5b8:	f7f1 fe76 	bl	80002a8 <__aeabi_dsub>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	460b      	mov	r3, r1
 800e5c0:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
			f3=-0.5*sinzf*cos(zf);
 800e5c4:	f04f 0200 	mov.w	r2, #0
 800e5c8:	4b8e      	ldr	r3, [pc, #568]	@ (800e804 <sdp4_deep+0x17ec>)
 800e5ca:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800e5ce:	f7f2 f823 	bl	8000618 <__aeabi_dmul>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	4614      	mov	r4, r2
 800e5d8:	461d      	mov	r5, r3
 800e5da:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800e5de:	f011 fdd3 	bl	8020188 <cos>
 800e5e2:	ec53 2b10 	vmov	r2, r3, d0
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	f7f2 f815 	bl	8000618 <__aeabi_dmul>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
			ses=m->se2*f2+m->se3*f3;
 800e5f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e5fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	@ 0x170
 800e604:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e608:	f7f2 f806 	bl	8000618 <__aeabi_dmul>
 800e60c:	4602      	mov	r2, r0
 800e60e:	460b      	mov	r3, r1
 800e610:	4614      	mov	r4, r2
 800e612:	461d      	mov	r5, r3
 800e614:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e618:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	@ 0x198
 800e622:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e626:	f7f1 fff7 	bl	8000618 <__aeabi_dmul>
 800e62a:	4602      	mov	r2, r0
 800e62c:	460b      	mov	r3, r1
 800e62e:	4620      	mov	r0, r4
 800e630:	4629      	mov	r1, r5
 800e632:	f7f1 fe3b 	bl	80002ac <__adddf3>
 800e636:	4602      	mov	r2, r0
 800e638:	460b      	mov	r3, r1
 800e63a:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
			sis=m->si2*f2+m->si3*f3;
 800e63e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e642:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	@ 0x178
 800e64c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e650:	f7f1 ffe2 	bl	8000618 <__aeabi_dmul>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4614      	mov	r4, r2
 800e65a:	461d      	mov	r5, r3
 800e65c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e660:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	e9d3 0168 	ldrd	r0, r1, [r3, #416]	@ 0x1a0
 800e66a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e66e:	f7f1 ffd3 	bl	8000618 <__aeabi_dmul>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	4620      	mov	r0, r4
 800e678:	4629      	mov	r1, r5
 800e67a:	f7f1 fe17 	bl	80002ac <__adddf3>
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
			sls=m->sl2*f2+m->sl3*f3+m->sl4*sinzf;
 800e686:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e68a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	e9d3 0160 	ldrd	r0, r1, [r3, #384]	@ 0x180
 800e694:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e698:	f7f1 ffbe 	bl	8000618 <__aeabi_dmul>
 800e69c:	4602      	mov	r2, r0
 800e69e:	460b      	mov	r3, r1
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	461d      	mov	r5, r3
 800e6a4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e6a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	e9d3 016a 	ldrd	r0, r1, [r3, #424]	@ 0x1a8
 800e6b2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e6b6:	f7f1 ffaf 	bl	8000618 <__aeabi_dmul>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4620      	mov	r0, r4
 800e6c0:	4629      	mov	r1, r5
 800e6c2:	f7f1 fdf3 	bl	80002ac <__adddf3>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4614      	mov	r4, r2
 800e6cc:	461d      	mov	r5, r3
 800e6ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e6d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	@ 0x1c0
 800e6dc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800e6e0:	f7f1 ff9a 	bl	8000618 <__aeabi_dmul>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	4629      	mov	r1, r5
 800e6ec:	f7f1 fdde 	bl	80002ac <__adddf3>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
			deep_dyn->sghs=m->sgh2*f2+m->sgh3*f3+m->sgh4*sinzf;
 800e6f8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e6fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	e9d3 0162 	ldrd	r0, r1, [r3, #392]	@ 0x188
 800e706:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e70a:	f7f1 ff85 	bl	8000618 <__aeabi_dmul>
 800e70e:	4602      	mov	r2, r0
 800e710:	460b      	mov	r3, r1
 800e712:	4614      	mov	r4, r2
 800e714:	461d      	mov	r5, r3
 800e716:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e71a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	@ 0x1b0
 800e724:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e728:	f7f1 ff76 	bl	8000618 <__aeabi_dmul>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	4620      	mov	r0, r4
 800e732:	4629      	mov	r1, r5
 800e734:	f7f1 fdba 	bl	80002ac <__adddf3>
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4614      	mov	r4, r2
 800e73e:	461d      	mov	r5, r3
 800e740:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e744:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	@ 0x1c8
 800e74e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800e752:	f7f1 ff61 	bl	8000618 <__aeabi_dmul>
 800e756:	4602      	mov	r2, r0
 800e758:	460b      	mov	r3, r1
 800e75a:	4620      	mov	r0, r4
 800e75c:	4629      	mov	r1, r5
 800e75e:	f7f1 fda5 	bl	80002ac <__adddf3>
 800e762:	4602      	mov	r2, r0
 800e764:	460b      	mov	r3, r1
 800e766:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e76a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e76e:	6809      	ldr	r1, [r1, #0]
 800e770:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
			deep_dyn->shs=m->sh2*f2+m->sh3*f3;
 800e774:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e778:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	e9d3 0164 	ldrd	r0, r1, [r3, #400]	@ 0x190
 800e782:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e786:	f7f1 ff47 	bl	8000618 <__aeabi_dmul>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	4614      	mov	r4, r2
 800e790:	461d      	mov	r5, r3
 800e792:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e796:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	@ 0x1b8
 800e7a0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e7a4:	f7f1 ff38 	bl	8000618 <__aeabi_dmul>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	f7f1 fd7c 	bl	80002ac <__adddf3>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800e7bc:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800e7c0:	6809      	ldr	r1, [r1, #0]
 800e7c2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
			zm=m->zmol+ZNL*deep_dyn->t;
 800e7c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e7ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	@ 0xe8
 800e7d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e7d8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800e7e2:	e011      	b.n	800e808 <sdp4_deep+0x17f0>
 800e7e4:	f3af 8000 	nop.w
 800e7e8:	fe8935de 	.word	0xfe8935de
 800e7ec:	3ee90d67 	.word	0x3ee90d67
 800e7f0:	78d4fdf4 	.word	0x78d4fdf4
 800e7f4:	3fa126e9 	.word	0x3fa126e9
 800e7f8:	403e0000 	.word	0x403e0000
 800e7fc:	3fe00000 	.word	0x3fe00000
 800e800:	3fd00000 	.word	0x3fd00000
 800e804:	bfe00000 	.word	0xbfe00000
 800e808:	a3be      	add	r3, pc, #760	@ (adr r3, 800eb04 <sdp4_deep+0x1aec>)
 800e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80e:	f7f1 ff03 	bl	8000618 <__aeabi_dmul>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4620      	mov	r0, r4
 800e818:	4629      	mov	r1, r5
 800e81a:	f7f1 fd47 	bl	80002ac <__adddf3>
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
			zf=zm+2*ZEL*sin(zm);
 800e826:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 800e82a:	f011 fd09 	bl	8020240 <sin>
 800e82e:	ec51 0b10 	vmov	r0, r1, d0
 800e832:	a3b6      	add	r3, pc, #728	@ (adr r3, 800eb0c <sdp4_deep+0x1af4>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f7f1 feee 	bl	8000618 <__aeabi_dmul>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800e844:	f7f1 fd32 	bl	80002ac <__adddf3>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
			sinzf=sin(zf);
 800e850:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800e854:	f011 fcf4 	bl	8020240 <sin>
 800e858:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
			f2=0.5*sinzf*sinzf-0.25;
 800e85c:	f04f 0200 	mov.w	r2, #0
 800e860:	4ba5      	ldr	r3, [pc, #660]	@ (800eaf8 <sdp4_deep+0x1ae0>)
 800e862:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800e866:	f7f1 fed7 	bl	8000618 <__aeabi_dmul>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4610      	mov	r0, r2
 800e870:	4619      	mov	r1, r3
 800e872:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800e876:	f7f1 fecf 	bl	8000618 <__aeabi_dmul>
 800e87a:	4602      	mov	r2, r0
 800e87c:	460b      	mov	r3, r1
 800e87e:	4610      	mov	r0, r2
 800e880:	4619      	mov	r1, r3
 800e882:	f04f 0200 	mov.w	r2, #0
 800e886:	4b9d      	ldr	r3, [pc, #628]	@ (800eafc <sdp4_deep+0x1ae4>)
 800e888:	f7f1 fd0e 	bl	80002a8 <__aeabi_dsub>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
			f3=-0.5*sinzf*cos(zf);
 800e894:	f04f 0200 	mov.w	r2, #0
 800e898:	4b99      	ldr	r3, [pc, #612]	@ (800eb00 <sdp4_deep+0x1ae8>)
 800e89a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800e89e:	f7f1 febb 	bl	8000618 <__aeabi_dmul>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	4614      	mov	r4, r2
 800e8a8:	461d      	mov	r5, r3
 800e8aa:	ed97 0b46 	vldr	d0, [r7, #280]	@ 0x118
 800e8ae:	f011 fc6b 	bl	8020188 <cos>
 800e8b2:	ec53 2b10 	vmov	r2, r3, d0
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7f1 fead 	bl	8000618 <__aeabi_dmul>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
			sel=m->ee2*f2+m->e3*f3;
 800e8c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e8ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 800e8d4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e8d8:	f7f1 fe9e 	bl	8000618 <__aeabi_dmul>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
 800e8e0:	4614      	mov	r4, r2
 800e8e2:	461d      	mov	r5, r3
 800e8e4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e8e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800e8f2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e8f6:	f7f1 fe8f 	bl	8000618 <__aeabi_dmul>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	4620      	mov	r0, r4
 800e900:	4629      	mov	r1, r5
 800e902:	f7f1 fcd3 	bl	80002ac <__adddf3>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
			sil=m->xi2*f2+m->xi3*f3;
 800e90e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e912:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 800e91c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e920:	f7f1 fe7a 	bl	8000618 <__aeabi_dmul>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4614      	mov	r4, r2
 800e92a:	461d      	mov	r5, r3
 800e92c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e930:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	@ 0x168
 800e93a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e93e:	f7f1 fe6b 	bl	8000618 <__aeabi_dmul>
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	4620      	mov	r0, r4
 800e948:	4629      	mov	r1, r5
 800e94a:	f7f1 fcaf 	bl	80002ac <__adddf3>
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
			sll=m->xl2*f2+m->xl3*f3+m->xl4*sinzf;
 800e956:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e95a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 800e964:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e968:	f7f1 fe56 	bl	8000618 <__aeabi_dmul>
 800e96c:	4602      	mov	r2, r0
 800e96e:	460b      	mov	r3, r1
 800e970:	4614      	mov	r4, r2
 800e972:	461d      	mov	r5, r3
 800e974:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e978:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	@ 0x118
 800e982:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e986:	f7f1 fe47 	bl	8000618 <__aeabi_dmul>
 800e98a:	4602      	mov	r2, r0
 800e98c:	460b      	mov	r3, r1
 800e98e:	4620      	mov	r0, r4
 800e990:	4629      	mov	r1, r5
 800e992:	f7f1 fc8b 	bl	80002ac <__adddf3>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	4614      	mov	r4, r2
 800e99c:	461d      	mov	r5, r3
 800e99e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e9a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 800e9ac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800e9b0:	f7f1 fe32 	bl	8000618 <__aeabi_dmul>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	f7f1 fc76 	bl	80002ac <__adddf3>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
			deep_dyn->sghl=m->xgh2*f2+m->xgh3*f3+m->xgh4*sinzf;
 800e9c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e9cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 800e9d6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800e9da:	f7f1 fe1d 	bl	8000618 <__aeabi_dmul>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	4614      	mov	r4, r2
 800e9e4:	461d      	mov	r5, r3
 800e9e6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800e9ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	@ 0x130
 800e9f4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800e9f8:	f7f1 fe0e 	bl	8000618 <__aeabi_dmul>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	460b      	mov	r3, r1
 800ea00:	4620      	mov	r0, r4
 800ea02:	4629      	mov	r1, r5
 800ea04:	f7f1 fc52 	bl	80002ac <__adddf3>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4614      	mov	r4, r2
 800ea0e:	461d      	mov	r5, r3
 800ea10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ea14:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	@ 0x138
 800ea1e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800ea22:	f7f1 fdf9 	bl	8000618 <__aeabi_dmul>
 800ea26:	4602      	mov	r2, r0
 800ea28:	460b      	mov	r3, r1
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	4629      	mov	r1, r5
 800ea2e:	f7f1 fc3d 	bl	80002ac <__adddf3>
 800ea32:	4602      	mov	r2, r0
 800ea34:	460b      	mov	r3, r1
 800ea36:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800ea3a:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ea3e:	6809      	ldr	r1, [r1, #0]
 800ea40:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
			deep_dyn->sh1=m->xh2*f2+m->xh3*f3;
 800ea44:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ea48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 800ea52:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800ea56:	f7f1 fddf 	bl	8000618 <__aeabi_dmul>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	4614      	mov	r4, r2
 800ea60:	461d      	mov	r5, r3
 800ea62:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ea66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 800ea70:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800ea74:	f7f1 fdd0 	bl	8000618 <__aeabi_dmul>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	4629      	mov	r1, r5
 800ea80:	f7f1 fc14 	bl	80002ac <__adddf3>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800ea8c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ea90:	6809      	ldr	r1, [r1, #0]
 800ea92:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
			deep_dyn->pe=ses+sel;
 800ea96:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800ea9a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800ea9e:	f7f1 fc05 	bl	80002ac <__adddf3>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800eaaa:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800eaae:	6809      	ldr	r1, [r1, #0]
 800eab0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
			deep_dyn->pinc=sis+sil;
 800eab4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800eab8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800eabc:	f7f1 fbf6 	bl	80002ac <__adddf3>
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800eac8:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800eacc:	6809      	ldr	r1, [r1, #0]
 800eace:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
			deep_dyn->pl=sls+sll;
 800ead2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800ead6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800eada:	f7f1 fbe7 	bl	80002ac <__adddf3>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800eae6:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800eaea:	6809      	ldr	r1, [r1, #0]
 800eaec:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800eaf0:	e010      	b.n	800eb14 <sdp4_deep+0x1afc>
 800eaf2:	bf00      	nop
 800eaf4:	f3af 8000 	nop.w
 800eaf8:	3fe00000 	.word	0x3fe00000
 800eafc:	3fd00000 	.word	0x3fd00000
 800eb00:	bfe00000 	.word	0xbfe00000
 800eb04:	de6329c8 	.word	0xde6329c8
 800eb08:	3f24c16a 	.word	0x3f24c16a
 800eb0c:	5119ce07 	.word	0x5119ce07
 800eb10:	3fbc1bda 	.word	0x3fbc1bda
		}

		pgh=deep_dyn->sghs+deep_dyn->sghl;
 800eb14:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eb18:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 800eb22:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eb26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800eb30:	f7f1 fbbc 	bl	80002ac <__adddf3>
 800eb34:	4602      	mov	r2, r0
 800eb36:	460b      	mov	r3, r1
 800eb38:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
		ph=deep_dyn->shs+deep_dyn->sh1;
 800eb3c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eb40:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800eb4a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eb4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800eb58:	f7f1 fba8 	bl	80002ac <__adddf3>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		deep_dyn->xinc=deep_dyn->xinc+deep_dyn->pinc;
 800eb64:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eb68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800eb72:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eb76:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800eb80:	f7f1 fb94 	bl	80002ac <__adddf3>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800eb8c:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800eb90:	6809      	ldr	r1, [r1, #0]
 800eb92:	e9c1 2308 	strd	r2, r3, [r1, #32]
		deep_dyn->em=deep_dyn->em+deep_dyn->pe;
 800eb96:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eb9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800eba4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eba8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800ebb2:	f7f1 fb7b 	bl	80002ac <__adddf3>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800ebbe:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ebc2:	6809      	ldr	r1, [r1, #0]
 800ebc4:	e9c1 2306 	strd	r2, r3, [r1, #24]

		if (m->xqncl>=0.2)
 800ebc8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ebcc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 800ebd6:	f20f 4398 	addw	r3, pc, #1176	@ 0x498
 800ebda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebde:	f7f1 ffa1 	bl	8000b24 <__aeabi_dcmpge>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d065      	beq.n	800ecb4 <sdp4_deep+0x1c9c>
		{
			/* Apply periodics directly */
			ph=ph/deep_arg->sinio;
 800ebe8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ebec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ebf6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800ebfa:	f7f1 fe37 	bl	800086c <__aeabi_ddiv>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
			pgh=pgh-deep_arg->cosio*ph;
 800ec06:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec0a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ec14:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800ec18:	f7f1 fcfe 	bl	8000618 <__aeabi_dmul>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ec24:	f7f1 fb40 	bl	80002a8 <__aeabi_dsub>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
			deep_dyn->omgadf=deep_dyn->omgadf+pgh;
 800ec30:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec34:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ec3e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800ec42:	f7f1 fb33 	bl	80002ac <__adddf3>
 800ec46:	4602      	mov	r2, r0
 800ec48:	460b      	mov	r3, r1
 800ec4a:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800ec4e:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ec52:	6809      	ldr	r1, [r1, #0]
 800ec54:	e9c1 2302 	strd	r2, r3, [r1, #8]
			deep_dyn->xnode=deep_dyn->xnode+ph;
 800ec58:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec5c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ec66:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800ec6a:	f7f1 fb1f 	bl	80002ac <__adddf3>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	460b      	mov	r3, r1
 800ec72:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800ec76:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ec7a:	6809      	ldr	r1, [r1, #0]
 800ec7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
 800ec80:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec84:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec8e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ec9c:	f7f1 fb06 	bl	80002ac <__adddf3>
 800eca0:	4602      	mov	r2, r0
 800eca2:	460b      	mov	r3, r1
 800eca4:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800eca8:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ecac:	6809      	ldr	r1, [r1, #0]
 800ecae:	e9c1 2300 	strd	r2, r3, [r1]
			}

			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
			deep_dyn->omgadf=xls-deep_dyn->xll-cos(deep_dyn->xinc)*deep_dyn->xnode;
		}
		return;
 800ecb2:	e1d5      	b.n	800f060 <sdp4_deep+0x2048>
			sinok=sin(deep_dyn->xnode);
 800ecb4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ecb8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	ed93 7b04 	vldr	d7, [r3, #16]
 800ecc2:	eeb0 0a47 	vmov.f32	s0, s14
 800ecc6:	eef0 0a67 	vmov.f32	s1, s15
 800ecca:	f011 fab9 	bl	8020240 <sin>
 800ecce:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
			cosok=cos(deep_dyn->xnode);
 800ecd2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ecd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	ed93 7b04 	vldr	d7, [r3, #16]
 800ece0:	eeb0 0a47 	vmov.f32	s0, s14
 800ece4:	eef0 0a67 	vmov.f32	s1, s15
 800ece8:	f011 fa4e 	bl	8020188 <cos>
 800ecec:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
			alfdp=sinis*sinok;
 800ecf0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800ecf4:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800ecf8:	f7f1 fc8e 	bl	8000618 <__aeabi_dmul>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
			betdp=sinis*cosok;
 800ed04:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800ed08:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800ed0c:	f7f1 fc84 	bl	8000618 <__aeabi_dmul>
 800ed10:	4602      	mov	r2, r0
 800ed12:	460b      	mov	r3, r1
 800ed14:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			dalf=ph*cosok+deep_dyn->pinc*cosis*sinok;
 800ed18:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800ed1c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800ed20:	f7f1 fc7a 	bl	8000618 <__aeabi_dmul>
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	4614      	mov	r4, r2
 800ed2a:	461d      	mov	r5, r3
 800ed2c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ed30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800ed3a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800ed3e:	f7f1 fc6b 	bl	8000618 <__aeabi_dmul>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	4610      	mov	r0, r2
 800ed48:	4619      	mov	r1, r3
 800ed4a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800ed4e:	f7f1 fc63 	bl	8000618 <__aeabi_dmul>
 800ed52:	4602      	mov	r2, r0
 800ed54:	460b      	mov	r3, r1
 800ed56:	4620      	mov	r0, r4
 800ed58:	4629      	mov	r1, r5
 800ed5a:	f7f1 faa7 	bl	80002ac <__adddf3>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	460b      	mov	r3, r1
 800ed62:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			dbet=-ph*sinok+deep_dyn->pinc*cosis*cosok;
 800ed66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ed6a:	603b      	str	r3, [r7, #0]
 800ed6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed70:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ed74:	607b      	str	r3, [r7, #4]
 800ed76:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800ed7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed7e:	f7f1 fc4b 	bl	8000618 <__aeabi_dmul>
 800ed82:	4602      	mov	r2, r0
 800ed84:	460b      	mov	r3, r1
 800ed86:	4614      	mov	r4, r2
 800ed88:	461d      	mov	r5, r3
 800ed8a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ed8e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800ed98:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800ed9c:	f7f1 fc3c 	bl	8000618 <__aeabi_dmul>
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	4610      	mov	r0, r2
 800eda6:	4619      	mov	r1, r3
 800eda8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800edac:	f7f1 fc34 	bl	8000618 <__aeabi_dmul>
 800edb0:	4602      	mov	r2, r0
 800edb2:	460b      	mov	r3, r1
 800edb4:	4620      	mov	r0, r4
 800edb6:	4629      	mov	r1, r5
 800edb8:	f7f1 fa78 	bl	80002ac <__adddf3>
 800edbc:	4602      	mov	r2, r0
 800edbe:	460b      	mov	r3, r1
 800edc0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			alfdp=alfdp+dalf;
 800edc4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800edc8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800edcc:	f7f1 fa6e 	bl	80002ac <__adddf3>
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
			betdp=betdp+dbet;
 800edd8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800eddc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800ede0:	f7f1 fa64 	bl	80002ac <__adddf3>
 800ede4:	4602      	mov	r2, r0
 800ede6:	460b      	mov	r3, r1
 800ede8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
			deep_dyn->xnode=FMod2p(deep_dyn->xnode);
 800edec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800edf0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	ed93 7b04 	vldr	d7, [r3, #16]
 800edfa:	eeb0 0a47 	vmov.f32	s0, s14
 800edfe:	eef0 0a67 	vmov.f32	s1, s15
 800ee02:	f003 fb4d 	bl	80124a0 <FMod2p>
 800ee06:	eeb0 7a40 	vmov.f32	s14, s0
 800ee0a:	eef0 7a60 	vmov.f32	s15, s1
 800ee0e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee12:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	ed83 7b04 	vstr	d7, [r3, #16]
			xls=deep_dyn->xll+deep_dyn->omgadf+cosis*deep_dyn->xnode;
 800ee1c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee20:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee2a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ee38:	f7f1 fa38 	bl	80002ac <__adddf3>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	4614      	mov	r4, r2
 800ee42:	461d      	mov	r5, r3
 800ee44:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ee52:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800ee56:	f7f1 fbdf 	bl	8000618 <__aeabi_dmul>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	4620      	mov	r0, r4
 800ee60:	4629      	mov	r1, r5
 800ee62:	f7f1 fa23 	bl	80002ac <__adddf3>
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			dls=deep_dyn->pl+pgh-deep_dyn->pinc*deep_dyn->xnode*sinis;
 800ee6e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ee7c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800ee80:	f7f1 fa14 	bl	80002ac <__adddf3>
 800ee84:	4602      	mov	r2, r0
 800ee86:	460b      	mov	r3, r1
 800ee88:	4614      	mov	r4, r2
 800ee8a:	461d      	mov	r5, r3
 800ee8c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800ee9a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eea8:	f7f1 fbb6 	bl	8000618 <__aeabi_dmul>
 800eeac:	4602      	mov	r2, r0
 800eeae:	460b      	mov	r3, r1
 800eeb0:	4610      	mov	r0, r2
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800eeb8:	f7f1 fbae 	bl	8000618 <__aeabi_dmul>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	4620      	mov	r0, r4
 800eec2:	4629      	mov	r1, r5
 800eec4:	f7f1 f9f0 	bl	80002a8 <__aeabi_dsub>
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			xls=xls+dls;
 800eed0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800eed4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800eed8:	f7f1 f9e8 	bl	80002ac <__adddf3>
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			xnoh=deep_dyn->xnode;
 800eee4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eee8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eef2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			deep_dyn->xnode=atan2(alfdp,betdp);
 800eef6:	ed97 1b28 	vldr	d1, [r7, #160]	@ 0xa0
 800eefa:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800eefe:	f010 fe53 	bl	801fba8 <atan2>
 800ef02:	eeb0 7a40 	vmov.f32	s14, s0
 800ef06:	eef0 7a60 	vmov.f32	s15, s1
 800ef0a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	ed83 7b04 	vstr	d7, [r3, #16]
			if (fabs(xnoh-deep_dyn->xnode)>PI)
 800ef18:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef1c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ef26:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800ef2a:	f7f1 f9bd 	bl	80002a8 <__aeabi_dsub>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	460b      	mov	r3, r1
 800ef32:	4690      	mov	r8, r2
 800ef34:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800ef38:	a34f      	add	r3, pc, #316	@ (adr r3, 800f078 <sdp4_deep+0x2060>)
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	4640      	mov	r0, r8
 800ef40:	4649      	mov	r1, r9
 800ef42:	f7f1 fdf9 	bl	8000b38 <__aeabi_dcmpgt>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d038      	beq.n	800efbe <sdp4_deep+0x1fa6>
			      if (deep_dyn->xnode<xnoh)
 800ef4c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef50:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ef5a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800ef5e:	f7f1 fdeb 	bl	8000b38 <__aeabi_dcmpgt>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d015      	beq.n	800ef94 <sdp4_deep+0x1f7c>
				  deep_dyn->xnode+=TWO_PI;
 800ef68:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef6c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ef76:	a342      	add	r3, pc, #264	@ (adr r3, 800f080 <sdp4_deep+0x2068>)
 800ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7c:	f7f1 f996 	bl	80002ac <__adddf3>
 800ef80:	4602      	mov	r2, r0
 800ef82:	460b      	mov	r3, r1
 800ef84:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800ef88:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800ef8c:	6809      	ldr	r1, [r1, #0]
 800ef8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ef92:	e014      	b.n	800efbe <sdp4_deep+0x1fa6>
				  deep_dyn->xnode-=TWO_PI;
 800ef94:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef98:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800efa2:	a337      	add	r3, pc, #220	@ (adr r3, 800f080 <sdp4_deep+0x2068>)
 800efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa8:	f7f1 f97e 	bl	80002a8 <__aeabi_dsub>
 800efac:	4602      	mov	r2, r0
 800efae:	460b      	mov	r3, r1
 800efb0:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800efb4:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800efb8:	6809      	ldr	r1, [r1, #0]
 800efba:	e9c1 2304 	strd	r2, r3, [r1, #16]
			deep_dyn->xll=deep_dyn->xll+deep_dyn->pl;
 800efbe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800efc2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efcc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800efd0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800efda:	f7f1 f967 	bl	80002ac <__adddf3>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800efe6:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800efea:	6809      	ldr	r1, [r1, #0]
 800efec:	e9c1 2300 	strd	r2, r3, [r1]
			deep_dyn->omgadf=xls-deep_dyn->xll-cos(deep_dyn->xinc)*deep_dyn->xnode;
 800eff0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eff4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800f002:	f7f1 f951 	bl	80002a8 <__aeabi_dsub>
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	4614      	mov	r4, r2
 800f00c:	461d      	mov	r5, r3
 800f00e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f012:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	ed93 7b08 	vldr	d7, [r3, #32]
 800f01c:	eeb0 0a47 	vmov.f32	s0, s14
 800f020:	eef0 0a67 	vmov.f32	s1, s15
 800f024:	f011 f8b0 	bl	8020188 <cos>
 800f028:	ec51 0b10 	vmov	r0, r1, d0
 800f02c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f030:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f03a:	f7f1 faed 	bl	8000618 <__aeabi_dmul>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	4620      	mov	r0, r4
 800f044:	4629      	mov	r1, r5
 800f046:	f7f1 f92f 	bl	80002a8 <__aeabi_dsub>
 800f04a:	4602      	mov	r2, r0
 800f04c:	460b      	mov	r3, r1
 800f04e:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800f052:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800f056:	6809      	ldr	r1, [r1, #0]
 800f058:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return;
 800f05c:	e000      	b.n	800f060 <sdp4_deep+0x2048>
			return;
 800f05e:	bf00      	nop
	}
}
 800f060:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800f064:	46bd      	mov	sp, r7
 800f066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06a:	bf00      	nop
 800f06c:	f3af 8000 	nop.w
 800f070:	9999999a 	.word	0x9999999a
 800f074:	3fc99999 	.word	0x3fc99999
 800f078:	54442d18 	.word	0x54442d18
 800f07c:	400921fb 	.word	0x400921fb
 800f080:	54442d18 	.word	0x54442d18
 800f084:	401921fb 	.word	0x401921fb

0800f088 <sgp4_init>:

#include "defs.h"
#include "unsorted.h"

void sgp4_init(const predict_orbital_elements_t *orbital_elements, struct _sgp4 *m)
{
 800f088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f08c:	b0c6      	sub	sp, #280	@ 0x118
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6278      	str	r0, [r7, #36]	@ 0x24
 800f092:	6239      	str	r1, [r7, #32]
	m->simpleFlag = 0;
 800f094:	6a3b      	ldr	r3, [r7, #32]
 800f096:	2200      	movs	r2, #0
 800f098:	601a      	str	r2, [r3, #0]

	//Calculate old TLE field values as used in the original sgp4
	double temp_tle = TWO_PI/MINUTES_PER_DAY/MINUTES_PER_DAY;
 800f09a:	a3cf      	add	r3, pc, #828	@ (adr r3, 800f3d8 <sgp4_init+0x350>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
	m->bstar = orbital_elements->bstar_drag_term / AE;
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800f0aa:	6a39      	ldr	r1, [r7, #32]
 800f0ac:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	m->xincl = orbital_elements->inclination * M_PI / 180.0;
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800f0b6:	a3b8      	add	r3, pc, #736	@ (adr r3, 800f398 <sgp4_init+0x310>)
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	f7f1 faac 	bl	8000618 <__aeabi_dmul>
 800f0c0:	4602      	mov	r2, r0
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	f04f 0200 	mov.w	r2, #0
 800f0cc:	4bbe      	ldr	r3, [pc, #760]	@ (800f3c8 <sgp4_init+0x340>)
 800f0ce:	f7f1 fbcd 	bl	800086c <__aeabi_ddiv>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	6a39      	ldr	r1, [r7, #32]
 800f0d8:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
	m->xnodeo = orbital_elements->right_ascension * M_PI / 180.0;
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800f0e2:	a3ad      	add	r3, pc, #692	@ (adr r3, 800f398 <sgp4_init+0x310>)
 800f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e8:	f7f1 fa96 	bl	8000618 <__aeabi_dmul>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	4610      	mov	r0, r2
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	f04f 0200 	mov.w	r2, #0
 800f0f8:	4bb3      	ldr	r3, [pc, #716]	@ (800f3c8 <sgp4_init+0x340>)
 800f0fa:	f7f1 fbb7 	bl	800086c <__aeabi_ddiv>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	6a39      	ldr	r1, [r7, #32]
 800f104:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
	m->eo = orbital_elements->eccentricity;
 800f108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800f10e:	6a39      	ldr	r1, [r7, #32]
 800f110:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
	m->omegao = orbital_elements->argument_of_perigee * M_PI / 180.0;
 800f114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f116:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f11a:	a39f      	add	r3, pc, #636	@ (adr r3, 800f398 <sgp4_init+0x310>)
 800f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f120:	f7f1 fa7a 	bl	8000618 <__aeabi_dmul>
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	4610      	mov	r0, r2
 800f12a:	4619      	mov	r1, r3
 800f12c:	f04f 0200 	mov.w	r2, #0
 800f130:	4ba5      	ldr	r3, [pc, #660]	@ (800f3c8 <sgp4_init+0x340>)
 800f132:	f7f1 fb9b 	bl	800086c <__aeabi_ddiv>
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	6a39      	ldr	r1, [r7, #32]
 800f13c:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108
	m->xmo = orbital_elements->mean_anomaly * M_PI / 180.0;
 800f140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f142:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800f146:	a394      	add	r3, pc, #592	@ (adr r3, 800f398 <sgp4_init+0x310>)
 800f148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14c:	f7f1 fa64 	bl	8000618 <__aeabi_dmul>
 800f150:	4602      	mov	r2, r0
 800f152:	460b      	mov	r3, r1
 800f154:	4610      	mov	r0, r2
 800f156:	4619      	mov	r1, r3
 800f158:	f04f 0200 	mov.w	r2, #0
 800f15c:	4b9a      	ldr	r3, [pc, #616]	@ (800f3c8 <sgp4_init+0x340>)
 800f15e:	f7f1 fb85 	bl	800086c <__aeabi_ddiv>
 800f162:	4602      	mov	r2, r0
 800f164:	460b      	mov	r3, r1
 800f166:	6a39      	ldr	r1, [r7, #32]
 800f168:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
	m->xno = orbital_elements->mean_motion*temp_tle*MINUTES_PER_DAY;
 800f16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f16e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800f172:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800f176:	f7f1 fa4f 	bl	8000618 <__aeabi_dmul>
 800f17a:	4602      	mov	r2, r0
 800f17c:	460b      	mov	r3, r1
 800f17e:	4610      	mov	r0, r2
 800f180:	4619      	mov	r1, r3
 800f182:	f04f 0200 	mov.w	r2, #0
 800f186:	4b91      	ldr	r3, [pc, #580]	@ (800f3cc <sgp4_init+0x344>)
 800f188:	f7f1 fa46 	bl	8000618 <__aeabi_dmul>
 800f18c:	4602      	mov	r2, r0
 800f18e:	460b      	mov	r3, r1
 800f190:	6a39      	ldr	r1, [r7, #32]
 800f192:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
	temp3, theta2, theta4, tsi;

	/* Recover original mean motion (m->xnodp) and   */
	/* semimajor axis (m->aodp) from input elements. */

	a1=pow(XKE/m->xno,TWO_THIRD);
 800f196:	6a3b      	ldr	r3, [r7, #32]
 800f198:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 800f19c:	a180      	add	r1, pc, #512	@ (adr r1, 800f3a0 <sgp4_init+0x318>)
 800f19e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1a2:	f7f1 fb63 	bl	800086c <__aeabi_ddiv>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	ec43 2b17 	vmov	d7, r2, r3
 800f1ae:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 800f3a8 <sgp4_init+0x320>
 800f1b2:	eeb0 0a47 	vmov.f32	s0, s14
 800f1b6:	eef0 0a67 	vmov.f32	s1, s15
 800f1ba:	f010 fdaf 	bl	801fd1c <pow>
 800f1be:	ed87 0b3e 	vstr	d0, [r7, #248]	@ 0xf8
	m->cosio=cos(m->xincl);
 800f1c2:	6a3b      	ldr	r3, [r7, #32]
 800f1c4:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800f1c8:	eeb0 0a47 	vmov.f32	s0, s14
 800f1cc:	eef0 0a67 	vmov.f32	s1, s15
 800f1d0:	f010 ffda 	bl	8020188 <cos>
 800f1d4:	eeb0 7a40 	vmov.f32	s14, s0
 800f1d8:	eef0 7a60 	vmov.f32	s15, s1
 800f1dc:	6a3b      	ldr	r3, [r7, #32]
 800f1de:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
	theta2=m->cosio*m->cosio;
 800f1e2:	6a3b      	ldr	r3, [r7, #32]
 800f1e4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800f1ee:	f7f1 fa13 	bl	8000618 <__aeabi_dmul>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	m->x3thm1=3*theta2-1.0;
 800f1fa:	f04f 0200 	mov.w	r2, #0
 800f1fe:	4b74      	ldr	r3, [pc, #464]	@ (800f3d0 <sgp4_init+0x348>)
 800f200:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800f204:	f7f1 fa08 	bl	8000618 <__aeabi_dmul>
 800f208:	4602      	mov	r2, r0
 800f20a:	460b      	mov	r3, r1
 800f20c:	4610      	mov	r0, r2
 800f20e:	4619      	mov	r1, r3
 800f210:	f04f 0200 	mov.w	r2, #0
 800f214:	4b6f      	ldr	r3, [pc, #444]	@ (800f3d4 <sgp4_init+0x34c>)
 800f216:	f7f1 f847 	bl	80002a8 <__aeabi_dsub>
 800f21a:	4602      	mov	r2, r0
 800f21c:	460b      	mov	r3, r1
 800f21e:	6a39      	ldr	r1, [r7, #32]
 800f220:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	eosq=m->eo*m->eo;
 800f224:	6a3b      	ldr	r3, [r7, #32]
 800f226:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800f230:	f7f1 f9f2 	bl	8000618 <__aeabi_dmul>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	betao2=1.0-eosq;
 800f23c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800f240:	f04f 0000 	mov.w	r0, #0
 800f244:	4963      	ldr	r1, [pc, #396]	@ (800f3d4 <sgp4_init+0x34c>)
 800f246:	f7f1 f82f 	bl	80002a8 <__aeabi_dsub>
 800f24a:	4602      	mov	r2, r0
 800f24c:	460b      	mov	r3, r1
 800f24e:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
	betao=sqrt(betao2);
 800f252:	ed97 0b38 	vldr	d0, [r7, #224]	@ 0xe0
 800f256:	f010 fdd1 	bl	801fdfc <sqrt>
 800f25a:	ed87 0b36 	vstr	d0, [r7, #216]	@ 0xd8
	del1=1.5*CK2*m->x3thm1/(a1*a1*betao*betao2);
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800f264:	a352      	add	r3, pc, #328	@ (adr r3, 800f3b0 <sgp4_init+0x328>)
 800f266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26a:	f7f1 f9d5 	bl	8000618 <__aeabi_dmul>
 800f26e:	4602      	mov	r2, r0
 800f270:	460b      	mov	r3, r1
 800f272:	4614      	mov	r4, r2
 800f274:	461d      	mov	r5, r3
 800f276:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 800f27a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800f27e:	f7f1 f9cb 	bl	8000618 <__aeabi_dmul>
 800f282:	4602      	mov	r2, r0
 800f284:	460b      	mov	r3, r1
 800f286:	4610      	mov	r0, r2
 800f288:	4619      	mov	r1, r3
 800f28a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800f28e:	f7f1 f9c3 	bl	8000618 <__aeabi_dmul>
 800f292:	4602      	mov	r2, r0
 800f294:	460b      	mov	r3, r1
 800f296:	4610      	mov	r0, r2
 800f298:	4619      	mov	r1, r3
 800f29a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800f29e:	f7f1 f9bb 	bl	8000618 <__aeabi_dmul>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	f7f1 fadf 	bl	800086c <__aeabi_ddiv>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
	ao=a1*(1.0-del1*(0.5*TWO_THIRD+del1*(1.0+134.0/81.0*del1)));
 800f2b6:	a340      	add	r3, pc, #256	@ (adr r3, 800f3b8 <sgp4_init+0x330>)
 800f2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2bc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800f2c0:	f7f1 f9aa 	bl	8000618 <__aeabi_dmul>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	f04f 0200 	mov.w	r2, #0
 800f2d0:	4b40      	ldr	r3, [pc, #256]	@ (800f3d4 <sgp4_init+0x34c>)
 800f2d2:	f7f0 ffeb 	bl	80002ac <__adddf3>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	460b      	mov	r3, r1
 800f2da:	4610      	mov	r0, r2
 800f2dc:	4619      	mov	r1, r3
 800f2de:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800f2e2:	f7f1 f999 	bl	8000618 <__aeabi_dmul>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	4610      	mov	r0, r2
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	a334      	add	r3, pc, #208	@ (adr r3, 800f3c0 <sgp4_init+0x338>)
 800f2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f4:	f7f0 ffda 	bl	80002ac <__adddf3>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	4619      	mov	r1, r3
 800f300:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800f304:	f7f1 f988 	bl	8000618 <__aeabi_dmul>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	f04f 0000 	mov.w	r0, #0
 800f310:	4930      	ldr	r1, [pc, #192]	@ (800f3d4 <sgp4_init+0x34c>)
 800f312:	f7f0 ffc9 	bl	80002a8 <__aeabi_dsub>
 800f316:	4602      	mov	r2, r0
 800f318:	460b      	mov	r3, r1
 800f31a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800f31e:	f7f1 f97b 	bl	8000618 <__aeabi_dmul>
 800f322:	4602      	mov	r2, r0
 800f324:	460b      	mov	r3, r1
 800f326:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
	delo=1.5*CK2*m->x3thm1/(ao*ao*betao*betao2);
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800f330:	a31f      	add	r3, pc, #124	@ (adr r3, 800f3b0 <sgp4_init+0x328>)
 800f332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f336:	f7f1 f96f 	bl	8000618 <__aeabi_dmul>
 800f33a:	4602      	mov	r2, r0
 800f33c:	460b      	mov	r3, r1
 800f33e:	4614      	mov	r4, r2
 800f340:	461d      	mov	r5, r3
 800f342:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800f346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800f34a:	f7f1 f965 	bl	8000618 <__aeabi_dmul>
 800f34e:	4602      	mov	r2, r0
 800f350:	460b      	mov	r3, r1
 800f352:	4610      	mov	r0, r2
 800f354:	4619      	mov	r1, r3
 800f356:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800f35a:	f7f1 f95d 	bl	8000618 <__aeabi_dmul>
 800f35e:	4602      	mov	r2, r0
 800f360:	460b      	mov	r3, r1
 800f362:	4610      	mov	r0, r2
 800f364:	4619      	mov	r1, r3
 800f366:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800f36a:	f7f1 f955 	bl	8000618 <__aeabi_dmul>
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	4620      	mov	r0, r4
 800f374:	4629      	mov	r1, r5
 800f376:	f7f1 fa79 	bl	800086c <__aeabi_ddiv>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	m->xnodp=m->xno/(1.0+delo);
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	e9d3 4546 	ldrd	r4, r5, [r3, #280]	@ 0x118
 800f388:	f04f 0200 	mov.w	r2, #0
 800f38c:	4b11      	ldr	r3, [pc, #68]	@ (800f3d4 <sgp4_init+0x34c>)
 800f38e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800f392:	f7f0 ff8b 	bl	80002ac <__adddf3>
 800f396:	e023      	b.n	800f3e0 <sgp4_init+0x358>
 800f398:	54442d18 	.word	0x54442d18
 800f39c:	400921fb 	.word	0x400921fb
 800f3a0:	d08dcacf 	.word	0xd08dcacf
 800f3a4:	3fb309b5 	.word	0x3fb309b5
 800f3a8:	55555555 	.word	0x55555555
 800f3ac:	3fe55555 	.word	0x3fe55555
 800f3b0:	cbb15878 	.word	0xcbb15878
 800f3b4:	3f4a9b3a 	.word	0x3f4a9b3a
 800f3b8:	48b0fcd7 	.word	0x48b0fcd7
 800f3bc:	3ffa7819 	.word	0x3ffa7819
 800f3c0:	55555555 	.word	0x55555555
 800f3c4:	3fd55555 	.word	0x3fd55555
 800f3c8:	40668000 	.word	0x40668000
 800f3cc:	40968000 	.word	0x40968000
 800f3d0:	40080000 	.word	0x40080000
 800f3d4:	3ff00000 	.word	0x3ff00000
 800f3d8:	1fbf7384 	.word	0x1fbf7384
 800f3dc:	3ec96b0f 	.word	0x3ec96b0f
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	f7f1 fa40 	bl	800086c <__aeabi_ddiv>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	6a39      	ldr	r1, [r7, #32]
 800f3f2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	m->aodp=ao/(1.0-delo);
 800f3f6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800f3fa:	f04f 0000 	mov.w	r0, #0
 800f3fe:	4946      	ldr	r1, [pc, #280]	@ (800f518 <sgp4_init+0x490>)
 800f400:	f7f0 ff52 	bl	80002a8 <__aeabi_dsub>
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800f40c:	f7f1 fa2e 	bl	800086c <__aeabi_ddiv>
 800f410:	4602      	mov	r2, r0
 800f412:	460b      	mov	r3, r1
 800f414:	6a39      	ldr	r1, [r7, #32]
 800f416:	e9c1 2302 	strd	r2, r3, [r1, #8]
	/* flag is set and the equations are truncated to linear  */
	/* variation in sqrt a and quadratic variation in mean    */
	/* anomaly.  Also, the c3 term, the delta omega term, and */
	/* the delta m term are dropped.                          */

	if ((m->aodp*(1-m->eo)/AE)<(220/EARTH_RADIUS_KM_WGS84+AE))
 800f41a:	6a3b      	ldr	r3, [r7, #32]
 800f41c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800f420:	6a3b      	ldr	r3, [r7, #32]
 800f422:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800f426:	f04f 0000 	mov.w	r0, #0
 800f42a:	493b      	ldr	r1, [pc, #236]	@ (800f518 <sgp4_init+0x490>)
 800f42c:	f7f0 ff3c 	bl	80002a8 <__aeabi_dsub>
 800f430:	4602      	mov	r2, r0
 800f432:	460b      	mov	r3, r1
 800f434:	4620      	mov	r0, r4
 800f436:	4629      	mov	r1, r5
 800f438:	f7f1 f8ee 	bl	8000618 <__aeabi_dmul>
 800f43c:	4602      	mov	r2, r0
 800f43e:	460b      	mov	r3, r1
 800f440:	4610      	mov	r0, r2
 800f442:	4619      	mov	r1, r3
 800f444:	a32c      	add	r3, pc, #176	@ (adr r3, 800f4f8 <sgp4_init+0x470>)
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	f7f1 fb57 	bl	8000afc <__aeabi_dcmplt>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	d003      	beq.n	800f45c <sgp4_init+0x3d4>
		m->simpleFlag = true;
 800f454:	6a3b      	ldr	r3, [r7, #32]
 800f456:	2201      	movs	r2, #1
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	e002      	b.n	800f462 <sgp4_init+0x3da>
	else
		m->simpleFlag = false;
 800f45c:	6a3b      	ldr	r3, [r7, #32]
 800f45e:	2200      	movs	r2, #0
 800f460:	601a      	str	r2, [r3, #0]

	/* For perigees below 156 km, the      */
	/* values of s and qoms2t are altered. */

	s4=S_DENSITY_PARAM;
 800f462:	a327      	add	r3, pc, #156	@ (adr r3, 800f500 <sgp4_init+0x478>)
 800f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f468:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	qoms24=QOMS2T;
 800f46c:	a326      	add	r3, pc, #152	@ (adr r3, 800f508 <sgp4_init+0x480>)
 800f46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f472:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	perigee=(m->aodp*(1-m->eo)-AE)*EARTH_RADIUS_KM_WGS84;
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800f47c:	6a3b      	ldr	r3, [r7, #32]
 800f47e:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800f482:	f04f 0000 	mov.w	r0, #0
 800f486:	4924      	ldr	r1, [pc, #144]	@ (800f518 <sgp4_init+0x490>)
 800f488:	f7f0 ff0e 	bl	80002a8 <__aeabi_dsub>
 800f48c:	4602      	mov	r2, r0
 800f48e:	460b      	mov	r3, r1
 800f490:	4620      	mov	r0, r4
 800f492:	4629      	mov	r1, r5
 800f494:	f7f1 f8c0 	bl	8000618 <__aeabi_dmul>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	4610      	mov	r0, r2
 800f49e:	4619      	mov	r1, r3
 800f4a0:	f04f 0200 	mov.w	r2, #0
 800f4a4:	4b1c      	ldr	r3, [pc, #112]	@ (800f518 <sgp4_init+0x490>)
 800f4a6:	f7f0 feff 	bl	80002a8 <__aeabi_dsub>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	4610      	mov	r0, r2
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	a317      	add	r3, pc, #92	@ (adr r3, 800f510 <sgp4_init+0x488>)
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	f7f1 f8ae 	bl	8000618 <__aeabi_dmul>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

	if (perigee<156.0)
 800f4c4:	f04f 0200 	mov.w	r2, #0
 800f4c8:	4b14      	ldr	r3, [pc, #80]	@ (800f51c <sgp4_init+0x494>)
 800f4ca:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800f4ce:	f7f1 fb15 	bl	8000afc <__aeabi_dcmplt>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d064      	beq.n	800f5a2 <sgp4_init+0x51a>
	{
		if (perigee<=98.0)
 800f4d8:	f04f 0200 	mov.w	r2, #0
 800f4dc:	4b10      	ldr	r3, [pc, #64]	@ (800f520 <sgp4_init+0x498>)
 800f4de:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800f4e2:	f7f1 fb15 	bl	8000b10 <__aeabi_dcmple>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d01d      	beq.n	800f528 <sgp4_init+0x4a0>
		    s4=20;
 800f4ec:	f04f 0200 	mov.w	r2, #0
 800f4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f524 <sgp4_init+0x49c>)
 800f4f2:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
 800f4f6:	e022      	b.n	800f53e <sgp4_init+0x4b6>
 800f4f8:	5abfd69b 	.word	0x5abfd69b
 800f4fc:	3ff08d48 	.word	0x3ff08d48
 800f500:	0931012a 	.word	0x0931012a
 800f504:	3ff03217 	.word	0x3ff03217
 800f508:	f9b8574f 	.word	0xf9b8574f
 800f50c:	3e2026c6 	.word	0x3e2026c6
 800f510:	126e978d 	.word	0x126e978d
 800f514:	40b8ea23 	.word	0x40b8ea23
 800f518:	3ff00000 	.word	0x3ff00000
 800f51c:	40638000 	.word	0x40638000
 800f520:	40588000 	.word	0x40588000
 800f524:	40340000 	.word	0x40340000
		else
		 s4=perigee-78.0;
 800f528:	f04f 0200 	mov.w	r2, #0
 800f52c:	4bc0      	ldr	r3, [pc, #768]	@ (800f830 <sgp4_init+0x7a8>)
 800f52e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800f532:	f7f0 feb9 	bl	80002a8 <__aeabi_dsub>
 800f536:	4602      	mov	r2, r0
 800f538:	460b      	mov	r3, r1
 800f53a:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

		qoms24=pow((120-s4)*AE/EARTH_RADIUS_KM_WGS84,4);
 800f53e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800f542:	f04f 0000 	mov.w	r0, #0
 800f546:	49bb      	ldr	r1, [pc, #748]	@ (800f834 <sgp4_init+0x7ac>)
 800f548:	f7f0 feae 	bl	80002a8 <__aeabi_dsub>
 800f54c:	4602      	mov	r2, r0
 800f54e:	460b      	mov	r3, r1
 800f550:	4610      	mov	r0, r2
 800f552:	4619      	mov	r1, r3
 800f554:	a3ae      	add	r3, pc, #696	@ (adr r3, 800f810 <sgp4_init+0x788>)
 800f556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55a:	f7f1 f987 	bl	800086c <__aeabi_ddiv>
 800f55e:	4602      	mov	r2, r0
 800f560:	460b      	mov	r3, r1
 800f562:	ec43 2b17 	vmov	d7, r2, r3
 800f566:	ed9f 1bac 	vldr	d1, [pc, #688]	@ 800f818 <sgp4_init+0x790>
 800f56a:	eeb0 0a47 	vmov.f32	s0, s14
 800f56e:	eef0 0a67 	vmov.f32	s1, s15
 800f572:	f010 fbd3 	bl	801fd1c <pow>
 800f576:	ed87 0b44 	vstr	d0, [r7, #272]	@ 0x110
		s4=s4/EARTH_RADIUS_KM_WGS84+AE;
 800f57a:	a3a5      	add	r3, pc, #660	@ (adr r3, 800f810 <sgp4_init+0x788>)
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800f584:	f7f1 f972 	bl	800086c <__aeabi_ddiv>
 800f588:	4602      	mov	r2, r0
 800f58a:	460b      	mov	r3, r1
 800f58c:	4610      	mov	r0, r2
 800f58e:	4619      	mov	r1, r3
 800f590:	f04f 0200 	mov.w	r2, #0
 800f594:	4ba8      	ldr	r3, [pc, #672]	@ (800f838 <sgp4_init+0x7b0>)
 800f596:	f7f0 fe89 	bl	80002ac <__adddf3>
 800f59a:	4602      	mov	r2, r0
 800f59c:	460b      	mov	r3, r1
 800f59e:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	}

	pinvsq=1/(m->aodp*m->aodp*betao2*betao2);
 800f5a2:	6a3b      	ldr	r3, [r7, #32]
 800f5a4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f5a8:	6a3b      	ldr	r3, [r7, #32]
 800f5aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f5ae:	f7f1 f833 	bl	8000618 <__aeabi_dmul>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	4610      	mov	r0, r2
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800f5be:	f7f1 f82b 	bl	8000618 <__aeabi_dmul>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	4610      	mov	r0, r2
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800f5ce:	f7f1 f823 	bl	8000618 <__aeabi_dmul>
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	f04f 0000 	mov.w	r0, #0
 800f5da:	4997      	ldr	r1, [pc, #604]	@ (800f838 <sgp4_init+0x7b0>)
 800f5dc:	f7f1 f946 	bl	800086c <__aeabi_ddiv>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	tsi=1/(m->aodp-s4);
 800f5e8:	6a3b      	ldr	r3, [r7, #32]
 800f5ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f5ee:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800f5f2:	f7f0 fe59 	bl	80002a8 <__aeabi_dsub>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	460b      	mov	r3, r1
 800f5fa:	f04f 0000 	mov.w	r0, #0
 800f5fe:	498e      	ldr	r1, [pc, #568]	@ (800f838 <sgp4_init+0x7b0>)
 800f600:	f7f1 f934 	bl	800086c <__aeabi_ddiv>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
	m->eta=m->aodp*m->eo*tsi;
 800f60c:	6a3b      	ldr	r3, [r7, #32]
 800f60e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f612:	6a3b      	ldr	r3, [r7, #32]
 800f614:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800f618:	f7f0 fffe 	bl	8000618 <__aeabi_dmul>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	4610      	mov	r0, r2
 800f622:	4619      	mov	r1, r3
 800f624:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800f628:	f7f0 fff6 	bl	8000618 <__aeabi_dmul>
 800f62c:	4602      	mov	r2, r0
 800f62e:	460b      	mov	r3, r1
 800f630:	6a39      	ldr	r1, [r7, #32]
 800f632:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	etasq=m->eta*m->eta;
 800f636:	6a3b      	ldr	r3, [r7, #32]
 800f638:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800f63c:	6a3b      	ldr	r3, [r7, #32]
 800f63e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800f642:	f7f0 ffe9 	bl	8000618 <__aeabi_dmul>
 800f646:	4602      	mov	r2, r0
 800f648:	460b      	mov	r3, r1
 800f64a:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	eeta=m->eo*m->eta;
 800f64e:	6a3b      	ldr	r3, [r7, #32]
 800f650:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800f654:	6a3b      	ldr	r3, [r7, #32]
 800f656:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800f65a:	f7f0 ffdd 	bl	8000618 <__aeabi_dmul>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	psisq=fabs(1-etasq);
 800f666:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800f66a:	f04f 0000 	mov.w	r0, #0
 800f66e:	4972      	ldr	r1, [pc, #456]	@ (800f838 <sgp4_init+0x7b0>)
 800f670:	f7f0 fe1a 	bl	80002a8 <__aeabi_dsub>
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	4611      	mov	r1, r2
 800f67a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800f67e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	coef=qoms24*pow(tsi,4);
 800f686:	ed9f 1b64 	vldr	d1, [pc, #400]	@ 800f818 <sgp4_init+0x790>
 800f68a:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800f68e:	f010 fb45 	bl	801fd1c <pow>
 800f692:	ec53 2b10 	vmov	r2, r3, d0
 800f696:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800f69a:	f7f0 ffbd 	bl	8000618 <__aeabi_dmul>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	coef1=coef/pow(psisq,3.5);
 800f6a6:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 800f820 <sgp4_init+0x798>
 800f6aa:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800f6ae:	f010 fb35 	bl	801fd1c <pow>
 800f6b2:	ec53 2b10 	vmov	r2, r3, d0
 800f6b6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800f6ba:	f7f1 f8d7 	bl	800086c <__aeabi_ddiv>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	c2=coef1*m->xnodp*(m->aodp*(1+1.5*etasq+eeta*(4+etasq))+0.75*CK2*tsi/psisq*m->x3thm1*(8+3*etasq*(8+etasq)));
 800f6c6:	6a3b      	ldr	r3, [r7, #32]
 800f6c8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800f6cc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f6d0:	f7f0 ffa2 	bl	8000618 <__aeabi_dmul>
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f6dc:	6a3b      	ldr	r3, [r7, #32]
 800f6de:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800f6e2:	f04f 0200 	mov.w	r2, #0
 800f6e6:	4b55      	ldr	r3, [pc, #340]	@ (800f83c <sgp4_init+0x7b4>)
 800f6e8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800f6ec:	f7f0 ff94 	bl	8000618 <__aeabi_dmul>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	f04f 0200 	mov.w	r2, #0
 800f6fc:	4b4e      	ldr	r3, [pc, #312]	@ (800f838 <sgp4_init+0x7b0>)
 800f6fe:	f7f0 fdd5 	bl	80002ac <__adddf3>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	4690      	mov	r8, r2
 800f708:	4699      	mov	r9, r3
 800f70a:	f04f 0200 	mov.w	r2, #0
 800f70e:	4b4c      	ldr	r3, [pc, #304]	@ (800f840 <sgp4_init+0x7b8>)
 800f710:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800f714:	f7f0 fdca 	bl	80002ac <__adddf3>
 800f718:	4602      	mov	r2, r0
 800f71a:	460b      	mov	r3, r1
 800f71c:	4610      	mov	r0, r2
 800f71e:	4619      	mov	r1, r3
 800f720:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800f724:	f7f0 ff78 	bl	8000618 <__aeabi_dmul>
 800f728:	4602      	mov	r2, r0
 800f72a:	460b      	mov	r3, r1
 800f72c:	4640      	mov	r0, r8
 800f72e:	4649      	mov	r1, r9
 800f730:	f7f0 fdbc 	bl	80002ac <__adddf3>
 800f734:	4602      	mov	r2, r0
 800f736:	460b      	mov	r3, r1
 800f738:	4620      	mov	r0, r4
 800f73a:	4629      	mov	r1, r5
 800f73c:	f7f0 ff6c 	bl	8000618 <__aeabi_dmul>
 800f740:	4602      	mov	r2, r0
 800f742:	460b      	mov	r3, r1
 800f744:	4690      	mov	r8, r2
 800f746:	4699      	mov	r9, r3
 800f748:	a337      	add	r3, pc, #220	@ (adr r3, 800f828 <sgp4_init+0x7a0>)
 800f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800f752:	f7f0 ff61 	bl	8000618 <__aeabi_dmul>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4610      	mov	r0, r2
 800f75c:	4619      	mov	r1, r3
 800f75e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800f762:	f7f1 f883 	bl	800086c <__aeabi_ddiv>
 800f766:	4602      	mov	r2, r0
 800f768:	460b      	mov	r3, r1
 800f76a:	4610      	mov	r0, r2
 800f76c:	4619      	mov	r1, r3
 800f76e:	6a3b      	ldr	r3, [r7, #32]
 800f770:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800f774:	f7f0 ff50 	bl	8000618 <__aeabi_dmul>
 800f778:	4602      	mov	r2, r0
 800f77a:	460b      	mov	r3, r1
 800f77c:	4692      	mov	sl, r2
 800f77e:	469b      	mov	fp, r3
 800f780:	f04f 0200 	mov.w	r2, #0
 800f784:	4b2f      	ldr	r3, [pc, #188]	@ (800f844 <sgp4_init+0x7bc>)
 800f786:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800f78a:	f7f0 ff45 	bl	8000618 <__aeabi_dmul>
 800f78e:	4602      	mov	r2, r0
 800f790:	460b      	mov	r3, r1
 800f792:	4614      	mov	r4, r2
 800f794:	461d      	mov	r5, r3
 800f796:	f04f 0200 	mov.w	r2, #0
 800f79a:	4b2b      	ldr	r3, [pc, #172]	@ (800f848 <sgp4_init+0x7c0>)
 800f79c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800f7a0:	f7f0 fd84 	bl	80002ac <__adddf3>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	f7f0 ff34 	bl	8000618 <__aeabi_dmul>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	4610      	mov	r0, r2
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	f04f 0200 	mov.w	r2, #0
 800f7bc:	4b22      	ldr	r3, [pc, #136]	@ (800f848 <sgp4_init+0x7c0>)
 800f7be:	f7f0 fd75 	bl	80002ac <__adddf3>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	4650      	mov	r0, sl
 800f7c8:	4659      	mov	r1, fp
 800f7ca:	f7f0 ff25 	bl	8000618 <__aeabi_dmul>
 800f7ce:	4602      	mov	r2, r0
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	4640      	mov	r0, r8
 800f7d4:	4649      	mov	r1, r9
 800f7d6:	f7f0 fd69 	bl	80002ac <__adddf3>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	460b      	mov	r3, r1
 800f7de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f7e2:	f7f0 ff19 	bl	8000618 <__aeabi_dmul>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	m->c1=m->bstar*c2;
 800f7ee:	6a3b      	ldr	r3, [r7, #32]
 800f7f0:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800f7f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800f7f8:	f7f0 ff0e 	bl	8000618 <__aeabi_dmul>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	6a39      	ldr	r1, [r7, #32]
 800f802:	e9c1 2306 	strd	r2, r3, [r1, #24]
	m->sinio=sin(m->xincl);
 800f806:	6a3b      	ldr	r3, [r7, #32]
 800f808:	ed93 7b3c 	vldr	d7, [r3, #240]	@ 0xf0
 800f80c:	e01e      	b.n	800f84c <sgp4_init+0x7c4>
 800f80e:	bf00      	nop
 800f810:	126e978d 	.word	0x126e978d
 800f814:	40b8ea23 	.word	0x40b8ea23
 800f818:	00000000 	.word	0x00000000
 800f81c:	40100000 	.word	0x40100000
 800f820:	00000000 	.word	0x00000000
 800f824:	400c0000 	.word	0x400c0000
 800f828:	cbb15878 	.word	0xcbb15878
 800f82c:	3f3a9b3a 	.word	0x3f3a9b3a
 800f830:	40538000 	.word	0x40538000
 800f834:	405e0000 	.word	0x405e0000
 800f838:	3ff00000 	.word	0x3ff00000
 800f83c:	3ff80000 	.word	0x3ff80000
 800f840:	40100000 	.word	0x40100000
 800f844:	40080000 	.word	0x40080000
 800f848:	40200000 	.word	0x40200000
 800f84c:	eeb0 0a47 	vmov.f32	s0, s14
 800f850:	eef0 0a67 	vmov.f32	s1, s15
 800f854:	f010 fcf4 	bl	8020240 <sin>
 800f858:	eeb0 7a40 	vmov.f32	s14, s0
 800f85c:	eef0 7a60 	vmov.f32	s15, s1
 800f860:	6a3b      	ldr	r3, [r7, #32]
 800f862:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
	a3ovk2=-J3_HARMONIC_WGS72/CK2*pow(AE,3);
 800f866:	a3ea      	add	r3, pc, #936	@ (adr r3, 800fc10 <sgp4_init+0xb88>)
 800f868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	c3=coef*tsi*a3ovk2*m->xnodp*AE*m->sinio/m->eo;
 800f870:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800f874:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800f878:	f7f0 fece 	bl	8000618 <__aeabi_dmul>
 800f87c:	4602      	mov	r2, r0
 800f87e:	460b      	mov	r3, r1
 800f880:	4610      	mov	r0, r2
 800f882:	4619      	mov	r1, r3
 800f884:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f888:	f7f0 fec6 	bl	8000618 <__aeabi_dmul>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	4610      	mov	r0, r2
 800f892:	4619      	mov	r1, r3
 800f894:	6a3b      	ldr	r3, [r7, #32]
 800f896:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800f89a:	f7f0 febd 	bl	8000618 <__aeabi_dmul>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	4610      	mov	r0, r2
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	6a3b      	ldr	r3, [r7, #32]
 800f8a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800f8ac:	f7f0 feb4 	bl	8000618 <__aeabi_dmul>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	6a3b      	ldr	r3, [r7, #32]
 800f8ba:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 800f8be:	f7f0 ffd5 	bl	800086c <__aeabi_ddiv>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	m->x1mth2=1-theta2;
 800f8ca:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800f8ce:	f04f 0000 	mov.w	r0, #0
 800f8d2:	49c9      	ldr	r1, [pc, #804]	@ (800fbf8 <sgp4_init+0xb70>)
 800f8d4:	f7f0 fce8 	bl	80002a8 <__aeabi_dsub>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	460b      	mov	r3, r1
 800f8dc:	6a39      	ldr	r1, [r7, #32]
 800f8de:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8

	m->c4=2*m->xnodp*coef1*m->aodp*betao2*(m->eta*(2+0.5*etasq)+m->eo*(0.5+2*etasq)-2*CK2*tsi/(m->aodp*psisq)*(-3*m->x3thm1*(1-2*eeta+etasq*(1.5-0.5*eeta))+0.75*m->x1mth2*(2*etasq-eeta*(1+etasq))*cos(2*m->omegao)));
 800f8e2:	6a3b      	ldr	r3, [r7, #32]
 800f8e4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	460b      	mov	r3, r1
 800f8ec:	f7f0 fcde 	bl	80002ac <__adddf3>
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	460b      	mov	r3, r1
 800f8f4:	4610      	mov	r0, r2
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800f8fc:	f7f0 fe8c 	bl	8000618 <__aeabi_dmul>
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	4610      	mov	r0, r2
 800f906:	4619      	mov	r1, r3
 800f908:	6a3b      	ldr	r3, [r7, #32]
 800f90a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f90e:	f7f0 fe83 	bl	8000618 <__aeabi_dmul>
 800f912:	4602      	mov	r2, r0
 800f914:	460b      	mov	r3, r1
 800f916:	4610      	mov	r0, r2
 800f918:	4619      	mov	r1, r3
 800f91a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800f91e:	f7f0 fe7b 	bl	8000618 <__aeabi_dmul>
 800f922:	4602      	mov	r2, r0
 800f924:	460b      	mov	r3, r1
 800f926:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	@ 0x60
 800f930:	f04f 0200 	mov.w	r2, #0
 800f934:	4bb1      	ldr	r3, [pc, #708]	@ (800fbfc <sgp4_init+0xb74>)
 800f936:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800f93a:	f7f0 fe6d 	bl	8000618 <__aeabi_dmul>
 800f93e:	4602      	mov	r2, r0
 800f940:	460b      	mov	r3, r1
 800f942:	4610      	mov	r0, r2
 800f944:	4619      	mov	r1, r3
 800f946:	f04f 0200 	mov.w	r2, #0
 800f94a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f94e:	f7f0 fcad 	bl	80002ac <__adddf3>
 800f952:	4602      	mov	r2, r0
 800f954:	460b      	mov	r3, r1
 800f956:	4620      	mov	r0, r4
 800f958:	4629      	mov	r1, r5
 800f95a:	f7f0 fe5d 	bl	8000618 <__aeabi_dmul>
 800f95e:	4602      	mov	r2, r0
 800f960:	460b      	mov	r3, r1
 800f962:	4690      	mov	r8, r2
 800f964:	4699      	mov	r9, r3
 800f966:	6a3b      	ldr	r3, [r7, #32]
 800f968:	e9d3 4540 	ldrd	r4, r5, [r3, #256]	@ 0x100
 800f96c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800f970:	4602      	mov	r2, r0
 800f972:	460b      	mov	r3, r1
 800f974:	f7f0 fc9a 	bl	80002ac <__adddf3>
 800f978:	4602      	mov	r2, r0
 800f97a:	460b      	mov	r3, r1
 800f97c:	4610      	mov	r0, r2
 800f97e:	4619      	mov	r1, r3
 800f980:	f04f 0200 	mov.w	r2, #0
 800f984:	4b9d      	ldr	r3, [pc, #628]	@ (800fbfc <sgp4_init+0xb74>)
 800f986:	f7f0 fc91 	bl	80002ac <__adddf3>
 800f98a:	4602      	mov	r2, r0
 800f98c:	460b      	mov	r3, r1
 800f98e:	4620      	mov	r0, r4
 800f990:	4629      	mov	r1, r5
 800f992:	f7f0 fe41 	bl	8000618 <__aeabi_dmul>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	4640      	mov	r0, r8
 800f99c:	4649      	mov	r1, r9
 800f99e:	f7f0 fc85 	bl	80002ac <__adddf3>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f9aa:	a391      	add	r3, pc, #580	@ (adr r3, 800fbf0 <sgp4_init+0xb68>)
 800f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800f9b4:	f7f0 fe30 	bl	8000618 <__aeabi_dmul>
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	460b      	mov	r3, r1
 800f9bc:	4614      	mov	r4, r2
 800f9be:	461d      	mov	r5, r3
 800f9c0:	6a3b      	ldr	r3, [r7, #32]
 800f9c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800f9c6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800f9ca:	f7f0 fe25 	bl	8000618 <__aeabi_dmul>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	f7f0 ff49 	bl	800086c <__aeabi_ddiv>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	460b      	mov	r3, r1
 800f9de:	e9c7 2300 	strd	r2, r3, [r7]
 800f9e2:	6a3b      	ldr	r3, [r7, #32]
 800f9e4:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 800f9e8:	f04f 0200 	mov.w	r2, #0
 800f9ec:	4b84      	ldr	r3, [pc, #528]	@ (800fc00 <sgp4_init+0xb78>)
 800f9ee:	f7f0 fe13 	bl	8000618 <__aeabi_dmul>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	4690      	mov	r8, r2
 800f9f8:	4699      	mov	r9, r3
 800f9fa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800f9fe:	4602      	mov	r2, r0
 800fa00:	460b      	mov	r3, r1
 800fa02:	f7f0 fc53 	bl	80002ac <__adddf3>
 800fa06:	4602      	mov	r2, r0
 800fa08:	460b      	mov	r3, r1
 800fa0a:	f04f 0000 	mov.w	r0, #0
 800fa0e:	497a      	ldr	r1, [pc, #488]	@ (800fbf8 <sgp4_init+0xb70>)
 800fa10:	f7f0 fc4a 	bl	80002a8 <__aeabi_dsub>
 800fa14:	4602      	mov	r2, r0
 800fa16:	460b      	mov	r3, r1
 800fa18:	4614      	mov	r4, r2
 800fa1a:	461d      	mov	r5, r3
 800fa1c:	f04f 0200 	mov.w	r2, #0
 800fa20:	4b76      	ldr	r3, [pc, #472]	@ (800fbfc <sgp4_init+0xb74>)
 800fa22:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800fa26:	f7f0 fdf7 	bl	8000618 <__aeabi_dmul>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	f04f 0000 	mov.w	r0, #0
 800fa32:	4974      	ldr	r1, [pc, #464]	@ (800fc04 <sgp4_init+0xb7c>)
 800fa34:	f7f0 fc38 	bl	80002a8 <__aeabi_dsub>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	4619      	mov	r1, r3
 800fa40:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800fa44:	f7f0 fde8 	bl	8000618 <__aeabi_dmul>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	4629      	mov	r1, r5
 800fa50:	f7f0 fc2c 	bl	80002ac <__adddf3>
 800fa54:	4602      	mov	r2, r0
 800fa56:	460b      	mov	r3, r1
 800fa58:	4640      	mov	r0, r8
 800fa5a:	4649      	mov	r1, r9
 800fa5c:	f7f0 fddc 	bl	8000618 <__aeabi_dmul>
 800fa60:	4602      	mov	r2, r0
 800fa62:	460b      	mov	r3, r1
 800fa64:	4692      	mov	sl, r2
 800fa66:	469b      	mov	fp, r3
 800fa68:	6a3b      	ldr	r3, [r7, #32]
 800fa6a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800fa6e:	f04f 0200 	mov.w	r2, #0
 800fa72:	4b65      	ldr	r3, [pc, #404]	@ (800fc08 <sgp4_init+0xb80>)
 800fa74:	f7f0 fdd0 	bl	8000618 <__aeabi_dmul>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	4690      	mov	r8, r2
 800fa7e:	4699      	mov	r9, r3
 800fa80:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	f7f0 fc10 	bl	80002ac <__adddf3>
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	460b      	mov	r3, r1
 800fa90:	4614      	mov	r4, r2
 800fa92:	461d      	mov	r5, r3
 800fa94:	f04f 0200 	mov.w	r2, #0
 800fa98:	4b57      	ldr	r3, [pc, #348]	@ (800fbf8 <sgp4_init+0xb70>)
 800fa9a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800fa9e:	f7f0 fc05 	bl	80002ac <__adddf3>
 800faa2:	4602      	mov	r2, r0
 800faa4:	460b      	mov	r3, r1
 800faa6:	4610      	mov	r0, r2
 800faa8:	4619      	mov	r1, r3
 800faaa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800faae:	f7f0 fdb3 	bl	8000618 <__aeabi_dmul>
 800fab2:	4602      	mov	r2, r0
 800fab4:	460b      	mov	r3, r1
 800fab6:	4620      	mov	r0, r4
 800fab8:	4629      	mov	r1, r5
 800faba:	f7f0 fbf5 	bl	80002a8 <__aeabi_dsub>
 800fabe:	4602      	mov	r2, r0
 800fac0:	460b      	mov	r3, r1
 800fac2:	4640      	mov	r0, r8
 800fac4:	4649      	mov	r1, r9
 800fac6:	f7f0 fda7 	bl	8000618 <__aeabi_dmul>
 800faca:	4602      	mov	r2, r0
 800facc:	460b      	mov	r3, r1
 800face:	4614      	mov	r4, r2
 800fad0:	461d      	mov	r5, r3
 800fad2:	6a3b      	ldr	r3, [r7, #32]
 800fad4:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	f7f0 fbe6 	bl	80002ac <__adddf3>
 800fae0:	4602      	mov	r2, r0
 800fae2:	460b      	mov	r3, r1
 800fae4:	ec43 2b17 	vmov	d7, r2, r3
 800fae8:	eeb0 0a47 	vmov.f32	s0, s14
 800faec:	eef0 0a67 	vmov.f32	s1, s15
 800faf0:	f010 fb4a 	bl	8020188 <cos>
 800faf4:	ec53 2b10 	vmov	r2, r3, d0
 800faf8:	4620      	mov	r0, r4
 800fafa:	4629      	mov	r1, r5
 800fafc:	f7f0 fd8c 	bl	8000618 <__aeabi_dmul>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	4650      	mov	r0, sl
 800fb06:	4659      	mov	r1, fp
 800fb08:	f7f0 fbd0 	bl	80002ac <__adddf3>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fb14:	f7f0 fd80 	bl	8000618 <__aeabi_dmul>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fb20:	f7f0 fbc2 	bl	80002a8 <__aeabi_dsub>
 800fb24:	4602      	mov	r2, r0
 800fb26:	460b      	mov	r3, r1
 800fb28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fb2c:	f7f0 fd74 	bl	8000618 <__aeabi_dmul>
 800fb30:	4602      	mov	r2, r0
 800fb32:	460b      	mov	r3, r1
 800fb34:	6a39      	ldr	r1, [r7, #32]
 800fb36:	e9c1 2308 	strd	r2, r3, [r1, #32]
	m->c5=2*coef1*m->aodp*betao2*(1+2.75*(etasq+eeta)+eeta*etasq);
 800fb3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	f7f0 fbb3 	bl	80002ac <__adddf3>
 800fb46:	4602      	mov	r2, r0
 800fb48:	460b      	mov	r3, r1
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	6a3b      	ldr	r3, [r7, #32]
 800fb50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800fb54:	f7f0 fd60 	bl	8000618 <__aeabi_dmul>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4610      	mov	r0, r2
 800fb5e:	4619      	mov	r1, r3
 800fb60:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800fb64:	f7f0 fd58 	bl	8000618 <__aeabi_dmul>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4614      	mov	r4, r2
 800fb6e:	461d      	mov	r5, r3
 800fb70:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800fb74:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800fb78:	f7f0 fb98 	bl	80002ac <__adddf3>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	460b      	mov	r3, r1
 800fb80:	4610      	mov	r0, r2
 800fb82:	4619      	mov	r1, r3
 800fb84:	f04f 0200 	mov.w	r2, #0
 800fb88:	4b20      	ldr	r3, [pc, #128]	@ (800fc0c <sgp4_init+0xb84>)
 800fb8a:	f7f0 fd45 	bl	8000618 <__aeabi_dmul>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	460b      	mov	r3, r1
 800fb92:	4610      	mov	r0, r2
 800fb94:	4619      	mov	r1, r3
 800fb96:	f04f 0200 	mov.w	r2, #0
 800fb9a:	4b17      	ldr	r3, [pc, #92]	@ (800fbf8 <sgp4_init+0xb70>)
 800fb9c:	f7f0 fb86 	bl	80002ac <__adddf3>
 800fba0:	4602      	mov	r2, r0
 800fba2:	460b      	mov	r3, r1
 800fba4:	4690      	mov	r8, r2
 800fba6:	4699      	mov	r9, r3
 800fba8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800fbac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800fbb0:	f7f0 fd32 	bl	8000618 <__aeabi_dmul>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	4640      	mov	r0, r8
 800fbba:	4649      	mov	r1, r9
 800fbbc:	f7f0 fb76 	bl	80002ac <__adddf3>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	4629      	mov	r1, r5
 800fbc8:	f7f0 fd26 	bl	8000618 <__aeabi_dmul>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	460b      	mov	r3, r1
 800fbd0:	6a39      	ldr	r1, [r7, #32]
 800fbd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	theta4=theta2*theta2;
 800fbd6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800fbda:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800fbde:	f7f0 fd1b 	bl	8000618 <__aeabi_dmul>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800fbea:	e015      	b.n	800fc18 <sgp4_init+0xb90>
 800fbec:	f3af 8000 	nop.w
 800fbf0:	dd20e5a5 	.word	0xdd20e5a5
 800fbf4:	3f51bcd1 	.word	0x3f51bcd1
 800fbf8:	3ff00000 	.word	0x3ff00000
 800fbfc:	3fe00000 	.word	0x3fe00000
 800fc00:	c0080000 	.word	0xc0080000
 800fc04:	3ff80000 	.word	0x3ff80000
 800fc08:	3fe80000 	.word	0x3fe80000
 800fc0c:	40060000 	.word	0x40060000
 800fc10:	f3add061 	.word	0xf3add061
 800fc14:	3f7335f7 	.word	0x3f7335f7
	temp1=3*CK2*pinvsq*m->xnodp;
 800fc18:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8010010 <sgp4_init+0xf88>)
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800fc22:	f7f0 fcf9 	bl	8000618 <__aeabi_dmul>
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	4610      	mov	r0, r2
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	6a3b      	ldr	r3, [r7, #32]
 800fc30:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800fc34:	f7f0 fcf0 	bl	8000618 <__aeabi_dmul>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	temp2=temp1*CK2*pinvsq;
 800fc40:	a3f5      	add	r3, pc, #980	@ (adr r3, 8010018 <sgp4_init+0xf90>)
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800fc4a:	f7f0 fce5 	bl	8000618 <__aeabi_dmul>
 800fc4e:	4602      	mov	r2, r0
 800fc50:	460b      	mov	r3, r1
 800fc52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800fc56:	f7f0 fcdf 	bl	8000618 <__aeabi_dmul>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	temp3=1.25*CK4*pinvsq*pinvsq*m->xnodp;
 800fc62:	a3ef      	add	r3, pc, #956	@ (adr r3, 8010020 <sgp4_init+0xf98>)
 800fc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc68:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800fc6c:	f7f0 fcd4 	bl	8000618 <__aeabi_dmul>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	4610      	mov	r0, r2
 800fc76:	4619      	mov	r1, r3
 800fc78:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800fc7c:	f7f0 fccc 	bl	8000618 <__aeabi_dmul>
 800fc80:	4602      	mov	r2, r0
 800fc82:	460b      	mov	r3, r1
 800fc84:	4610      	mov	r0, r2
 800fc86:	4619      	mov	r1, r3
 800fc88:	6a3b      	ldr	r3, [r7, #32]
 800fc8a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800fc8e:	f7f0 fcc3 	bl	8000618 <__aeabi_dmul>
 800fc92:	4602      	mov	r2, r0
 800fc94:	460b      	mov	r3, r1
 800fc96:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	m->xmdot=m->xnodp+0.5*temp1*betao*m->x3thm1+0.0625*temp2*betao*(13-78*theta2+137*theta4);
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	@ 0x78
 800fca0:	f04f 0200 	mov.w	r2, #0
 800fca4:	4bcc      	ldr	r3, [pc, #816]	@ (800ffd8 <sgp4_init+0xf50>)
 800fca6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800fcaa:	f7f0 fcb5 	bl	8000618 <__aeabi_dmul>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	4610      	mov	r0, r2
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800fcba:	f7f0 fcad 	bl	8000618 <__aeabi_dmul>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	4610      	mov	r0, r2
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	6a3b      	ldr	r3, [r7, #32]
 800fcc8:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 800fccc:	f7f0 fca4 	bl	8000618 <__aeabi_dmul>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	f7f0 fae8 	bl	80002ac <__adddf3>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	4614      	mov	r4, r2
 800fce2:	461d      	mov	r5, r3
 800fce4:	f04f 0200 	mov.w	r2, #0
 800fce8:	4bbc      	ldr	r3, [pc, #752]	@ (800ffdc <sgp4_init+0xf54>)
 800fcea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800fcee:	f7f0 fc93 	bl	8000618 <__aeabi_dmul>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	4610      	mov	r0, r2
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800fcfe:	f7f0 fc8b 	bl	8000618 <__aeabi_dmul>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4690      	mov	r8, r2
 800fd08:	4699      	mov	r9, r3
 800fd0a:	f04f 0200 	mov.w	r2, #0
 800fd0e:	4bb4      	ldr	r3, [pc, #720]	@ (800ffe0 <sgp4_init+0xf58>)
 800fd10:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800fd14:	f7f0 fc80 	bl	8000618 <__aeabi_dmul>
 800fd18:	4602      	mov	r2, r0
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	f04f 0000 	mov.w	r0, #0
 800fd20:	49b0      	ldr	r1, [pc, #704]	@ (800ffe4 <sgp4_init+0xf5c>)
 800fd22:	f7f0 fac1 	bl	80002a8 <__aeabi_dsub>
 800fd26:	4602      	mov	r2, r0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	4692      	mov	sl, r2
 800fd2c:	469b      	mov	fp, r3
 800fd2e:	a3a4      	add	r3, pc, #656	@ (adr r3, 800ffc0 <sgp4_init+0xf38>)
 800fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800fd38:	f7f0 fc6e 	bl	8000618 <__aeabi_dmul>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	460b      	mov	r3, r1
 800fd40:	4650      	mov	r0, sl
 800fd42:	4659      	mov	r1, fp
 800fd44:	f7f0 fab2 	bl	80002ac <__adddf3>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4640      	mov	r0, r8
 800fd4e:	4649      	mov	r1, r9
 800fd50:	f7f0 fc62 	bl	8000618 <__aeabi_dmul>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	4620      	mov	r0, r4
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	f7f0 faa6 	bl	80002ac <__adddf3>
 800fd60:	4602      	mov	r2, r0
 800fd62:	460b      	mov	r3, r1
 800fd64:	6a39      	ldr	r1, [r7, #32]
 800fd66:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
	x1m5th=1-5*theta2;
 800fd6a:	f04f 0200 	mov.w	r2, #0
 800fd6e:	4b9e      	ldr	r3, [pc, #632]	@ (800ffe8 <sgp4_init+0xf60>)
 800fd70:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800fd74:	f7f0 fc50 	bl	8000618 <__aeabi_dmul>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	f04f 0000 	mov.w	r0, #0
 800fd80:	499a      	ldr	r1, [pc, #616]	@ (800ffec <sgp4_init+0xf64>)
 800fd82:	f7f0 fa91 	bl	80002a8 <__aeabi_dsub>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	m->omgdot=-0.5*temp1*x1m5th+0.0625*temp2*(7-114*theta2+395*theta4)+temp3*(3-36*theta2+49*theta4);
 800fd8e:	f04f 0200 	mov.w	r2, #0
 800fd92:	4b97      	ldr	r3, [pc, #604]	@ (800fff0 <sgp4_init+0xf68>)
 800fd94:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800fd98:	f7f0 fc3e 	bl	8000618 <__aeabi_dmul>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4610      	mov	r0, r2
 800fda2:	4619      	mov	r1, r3
 800fda4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800fda8:	f7f0 fc36 	bl	8000618 <__aeabi_dmul>
 800fdac:	4602      	mov	r2, r0
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4614      	mov	r4, r2
 800fdb2:	461d      	mov	r5, r3
 800fdb4:	f04f 0200 	mov.w	r2, #0
 800fdb8:	4b88      	ldr	r3, [pc, #544]	@ (800ffdc <sgp4_init+0xf54>)
 800fdba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800fdbe:	f7f0 fc2b 	bl	8000618 <__aeabi_dmul>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	4690      	mov	r8, r2
 800fdc8:	4699      	mov	r9, r3
 800fdca:	f04f 0200 	mov.w	r2, #0
 800fdce:	4b89      	ldr	r3, [pc, #548]	@ (800fff4 <sgp4_init+0xf6c>)
 800fdd0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800fdd4:	f7f0 fc20 	bl	8000618 <__aeabi_dmul>
 800fdd8:	4602      	mov	r2, r0
 800fdda:	460b      	mov	r3, r1
 800fddc:	f04f 0000 	mov.w	r0, #0
 800fde0:	4985      	ldr	r1, [pc, #532]	@ (800fff8 <sgp4_init+0xf70>)
 800fde2:	f7f0 fa61 	bl	80002a8 <__aeabi_dsub>
 800fde6:	4602      	mov	r2, r0
 800fde8:	460b      	mov	r3, r1
 800fdea:	4692      	mov	sl, r2
 800fdec:	469b      	mov	fp, r3
 800fdee:	a376      	add	r3, pc, #472	@ (adr r3, 800ffc8 <sgp4_init+0xf40>)
 800fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800fdf8:	f7f0 fc0e 	bl	8000618 <__aeabi_dmul>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	460b      	mov	r3, r1
 800fe00:	4650      	mov	r0, sl
 800fe02:	4659      	mov	r1, fp
 800fe04:	f7f0 fa52 	bl	80002ac <__adddf3>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	4640      	mov	r0, r8
 800fe0e:	4649      	mov	r1, r9
 800fe10:	f7f0 fc02 	bl	8000618 <__aeabi_dmul>
 800fe14:	4602      	mov	r2, r0
 800fe16:	460b      	mov	r3, r1
 800fe18:	4620      	mov	r0, r4
 800fe1a:	4629      	mov	r1, r5
 800fe1c:	f7f0 fa46 	bl	80002ac <__adddf3>
 800fe20:	4602      	mov	r2, r0
 800fe22:	460b      	mov	r3, r1
 800fe24:	4614      	mov	r4, r2
 800fe26:	461d      	mov	r5, r3
 800fe28:	f04f 0200 	mov.w	r2, #0
 800fe2c:	4b73      	ldr	r3, [pc, #460]	@ (800fffc <sgp4_init+0xf74>)
 800fe2e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800fe32:	f7f0 fbf1 	bl	8000618 <__aeabi_dmul>
 800fe36:	4602      	mov	r2, r0
 800fe38:	460b      	mov	r3, r1
 800fe3a:	f04f 0000 	mov.w	r0, #0
 800fe3e:	4970      	ldr	r1, [pc, #448]	@ (8010000 <sgp4_init+0xf78>)
 800fe40:	f7f0 fa32 	bl	80002a8 <__aeabi_dsub>
 800fe44:	4602      	mov	r2, r0
 800fe46:	460b      	mov	r3, r1
 800fe48:	4690      	mov	r8, r2
 800fe4a:	4699      	mov	r9, r3
 800fe4c:	f04f 0200 	mov.w	r2, #0
 800fe50:	4b6c      	ldr	r3, [pc, #432]	@ (8010004 <sgp4_init+0xf7c>)
 800fe52:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800fe56:	f7f0 fbdf 	bl	8000618 <__aeabi_dmul>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	4640      	mov	r0, r8
 800fe60:	4649      	mov	r1, r9
 800fe62:	f7f0 fa23 	bl	80002ac <__adddf3>
 800fe66:	4602      	mov	r2, r0
 800fe68:	460b      	mov	r3, r1
 800fe6a:	4610      	mov	r0, r2
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800fe72:	f7f0 fbd1 	bl	8000618 <__aeabi_dmul>
 800fe76:	4602      	mov	r2, r0
 800fe78:	460b      	mov	r3, r1
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	f7f0 fa15 	bl	80002ac <__adddf3>
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	6a39      	ldr	r1, [r7, #32]
 800fe88:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	xhdot1=-temp1*m->cosio;
 800fe8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe8e:	61bb      	str	r3, [r7, #24]
 800fe90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe92:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800fe96:	61fb      	str	r3, [r7, #28]
 800fe98:	6a3b      	ldr	r3, [r7, #32]
 800fe9a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800fe9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fea2:	f7f0 fbb9 	bl	8000618 <__aeabi_dmul>
 800fea6:	4602      	mov	r2, r0
 800fea8:	460b      	mov	r3, r1
 800feaa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	m->xnodot=xhdot1+(0.5*temp2*(4-19*theta2)+2*temp3*(3-7*theta2))*m->cosio;
 800feae:	f04f 0200 	mov.w	r2, #0
 800feb2:	4b49      	ldr	r3, [pc, #292]	@ (800ffd8 <sgp4_init+0xf50>)
 800feb4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800feb8:	f7f0 fbae 	bl	8000618 <__aeabi_dmul>
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	4614      	mov	r4, r2
 800fec2:	461d      	mov	r5, r3
 800fec4:	f04f 0200 	mov.w	r2, #0
 800fec8:	4b4f      	ldr	r3, [pc, #316]	@ (8010008 <sgp4_init+0xf80>)
 800feca:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800fece:	f7f0 fba3 	bl	8000618 <__aeabi_dmul>
 800fed2:	4602      	mov	r2, r0
 800fed4:	460b      	mov	r3, r1
 800fed6:	f04f 0000 	mov.w	r0, #0
 800feda:	494c      	ldr	r1, [pc, #304]	@ (801000c <sgp4_init+0xf84>)
 800fedc:	f7f0 f9e4 	bl	80002a8 <__aeabi_dsub>
 800fee0:	4602      	mov	r2, r0
 800fee2:	460b      	mov	r3, r1
 800fee4:	4620      	mov	r0, r4
 800fee6:	4629      	mov	r1, r5
 800fee8:	f7f0 fb96 	bl	8000618 <__aeabi_dmul>
 800feec:	4602      	mov	r2, r0
 800feee:	460b      	mov	r3, r1
 800fef0:	4614      	mov	r4, r2
 800fef2:	461d      	mov	r5, r3
 800fef4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800fef8:	4602      	mov	r2, r0
 800fefa:	460b      	mov	r3, r1
 800fefc:	f7f0 f9d6 	bl	80002ac <__adddf3>
 800ff00:	4602      	mov	r2, r0
 800ff02:	460b      	mov	r3, r1
 800ff04:	4690      	mov	r8, r2
 800ff06:	4699      	mov	r9, r3
 800ff08:	f04f 0200 	mov.w	r2, #0
 800ff0c:	4b3a      	ldr	r3, [pc, #232]	@ (800fff8 <sgp4_init+0xf70>)
 800ff0e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800ff12:	f7f0 fb81 	bl	8000618 <__aeabi_dmul>
 800ff16:	4602      	mov	r2, r0
 800ff18:	460b      	mov	r3, r1
 800ff1a:	f04f 0000 	mov.w	r0, #0
 800ff1e:	4938      	ldr	r1, [pc, #224]	@ (8010000 <sgp4_init+0xf78>)
 800ff20:	f7f0 f9c2 	bl	80002a8 <__aeabi_dsub>
 800ff24:	4602      	mov	r2, r0
 800ff26:	460b      	mov	r3, r1
 800ff28:	4640      	mov	r0, r8
 800ff2a:	4649      	mov	r1, r9
 800ff2c:	f7f0 fb74 	bl	8000618 <__aeabi_dmul>
 800ff30:	4602      	mov	r2, r0
 800ff32:	460b      	mov	r3, r1
 800ff34:	4620      	mov	r0, r4
 800ff36:	4629      	mov	r1, r5
 800ff38:	f7f0 f9b8 	bl	80002ac <__adddf3>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	460b      	mov	r3, r1
 800ff40:	4610      	mov	r0, r2
 800ff42:	4619      	mov	r1, r3
 800ff44:	6a3b      	ldr	r3, [r7, #32]
 800ff46:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800ff4a:	f7f0 fb65 	bl	8000618 <__aeabi_dmul>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	460b      	mov	r3, r1
 800ff52:	4610      	mov	r0, r2
 800ff54:	4619      	mov	r1, r3
 800ff56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ff5a:	f7f0 f9a7 	bl	80002ac <__adddf3>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	6a39      	ldr	r1, [r7, #32]
 800ff64:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
	m->omgcof=m->bstar*c3*cos(m->omegao);
 800ff68:	6a3b      	ldr	r3, [r7, #32]
 800ff6a:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 800ff6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ff72:	f7f0 fb51 	bl	8000618 <__aeabi_dmul>
 800ff76:	4602      	mov	r2, r0
 800ff78:	460b      	mov	r3, r1
 800ff7a:	4614      	mov	r4, r2
 800ff7c:	461d      	mov	r5, r3
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	ed93 7b42 	vldr	d7, [r3, #264]	@ 0x108
 800ff84:	eeb0 0a47 	vmov.f32	s0, s14
 800ff88:	eef0 0a67 	vmov.f32	s1, s15
 800ff8c:	f010 f8fc 	bl	8020188 <cos>
 800ff90:	ec53 2b10 	vmov	r2, r3, d0
 800ff94:	4620      	mov	r0, r4
 800ff96:	4629      	mov	r1, r5
 800ff98:	f7f0 fb3e 	bl	8000618 <__aeabi_dmul>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	6a39      	ldr	r1, [r7, #32]
 800ffa2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	m->xmcof=-TWO_THIRD*coef*m->bstar*AE/eeta;
 800ffa6:	a30a      	add	r3, pc, #40	@ (adr r3, 800ffd0 <sgp4_init+0xf48>)
 800ffa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffac:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800ffb0:	f7f0 fb32 	bl	8000618 <__aeabi_dmul>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	e036      	b.n	8010028 <sgp4_init+0xfa0>
 800ffba:	bf00      	nop
 800ffbc:	f3af 8000 	nop.w
 800ffc0:	00000000 	.word	0x00000000
 800ffc4:	40612000 	.word	0x40612000
 800ffc8:	00000000 	.word	0x00000000
 800ffcc:	4078b000 	.word	0x4078b000
 800ffd0:	55555555 	.word	0x55555555
 800ffd4:	bfe55555 	.word	0xbfe55555
 800ffd8:	3fe00000 	.word	0x3fe00000
 800ffdc:	3fb00000 	.word	0x3fb00000
 800ffe0:	40538000 	.word	0x40538000
 800ffe4:	402a0000 	.word	0x402a0000
 800ffe8:	40140000 	.word	0x40140000
 800ffec:	3ff00000 	.word	0x3ff00000
 800fff0:	bfe00000 	.word	0xbfe00000
 800fff4:	405c8000 	.word	0x405c8000
 800fff8:	401c0000 	.word	0x401c0000
 800fffc:	40420000 	.word	0x40420000
 8010000:	40080000 	.word	0x40080000
 8010004:	40488000 	.word	0x40488000
 8010008:	40330000 	.word	0x40330000
 801000c:	40100000 	.word	0x40100000
 8010010:	cbb15878 	.word	0xcbb15878
 8010014:	3f5a9b3a 	.word	0x3f5a9b3a
 8010018:	dd20e5a5 	.word	0xdd20e5a5
 801001c:	3f41bcd1 	.word	0x3f41bcd1
 8010020:	bdacda00 	.word	0xbdacda00
 8010024:	3eaa0bd0 	.word	0x3eaa0bd0
 8010028:	4610      	mov	r0, r2
 801002a:	4619      	mov	r1, r3
 801002c:	6a3b      	ldr	r3, [r7, #32]
 801002e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8010032:	f7f0 faf1 	bl	8000618 <__aeabi_dmul>
 8010036:	4602      	mov	r2, r0
 8010038:	460b      	mov	r3, r1
 801003a:	4610      	mov	r0, r2
 801003c:	4619      	mov	r1, r3
 801003e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8010042:	f7f0 fc13 	bl	800086c <__aeabi_ddiv>
 8010046:	4602      	mov	r2, r0
 8010048:	460b      	mov	r3, r1
 801004a:	6a39      	ldr	r1, [r7, #32]
 801004c:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
	m->xnodcf=3.5*betao2*xhdot1*m->c1;
 8010050:	f04f 0200 	mov.w	r2, #0
 8010054:	4bc2      	ldr	r3, [pc, #776]	@ (8010360 <sgp4_init+0x12d8>)
 8010056:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801005a:	f7f0 fadd 	bl	8000618 <__aeabi_dmul>
 801005e:	4602      	mov	r2, r0
 8010060:	460b      	mov	r3, r1
 8010062:	4610      	mov	r0, r2
 8010064:	4619      	mov	r1, r3
 8010066:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801006a:	f7f0 fad5 	bl	8000618 <__aeabi_dmul>
 801006e:	4602      	mov	r2, r0
 8010070:	460b      	mov	r3, r1
 8010072:	4610      	mov	r0, r2
 8010074:	4619      	mov	r1, r3
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801007c:	f7f0 facc 	bl	8000618 <__aeabi_dmul>
 8010080:	4602      	mov	r2, r0
 8010082:	460b      	mov	r3, r1
 8010084:	6a39      	ldr	r1, [r7, #32]
 8010086:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
	m->t2cof=1.5*m->c1;
 801008a:	6a3b      	ldr	r3, [r7, #32]
 801008c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8010090:	f04f 0200 	mov.w	r2, #0
 8010094:	4bb3      	ldr	r3, [pc, #716]	@ (8010364 <sgp4_init+0x12dc>)
 8010096:	f7f0 fabf 	bl	8000618 <__aeabi_dmul>
 801009a:	4602      	mov	r2, r0
 801009c:	460b      	mov	r3, r1
 801009e:	6a39      	ldr	r1, [r7, #32]
 80100a0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	m->xlcof=0.125*a3ovk2*m->sinio*(3+5*m->cosio)/(1+m->cosio);
 80100a4:	f04f 0200 	mov.w	r2, #0
 80100a8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80100ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80100b0:	f7f0 fab2 	bl	8000618 <__aeabi_dmul>
 80100b4:	4602      	mov	r2, r0
 80100b6:	460b      	mov	r3, r1
 80100b8:	4610      	mov	r0, r2
 80100ba:	4619      	mov	r1, r3
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80100c2:	f7f0 faa9 	bl	8000618 <__aeabi_dmul>
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	4614      	mov	r4, r2
 80100cc:	461d      	mov	r5, r3
 80100ce:	6a3b      	ldr	r3, [r7, #32]
 80100d0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80100d4:	f04f 0200 	mov.w	r2, #0
 80100d8:	4ba3      	ldr	r3, [pc, #652]	@ (8010368 <sgp4_init+0x12e0>)
 80100da:	f7f0 fa9d 	bl	8000618 <__aeabi_dmul>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	4610      	mov	r0, r2
 80100e4:	4619      	mov	r1, r3
 80100e6:	f04f 0200 	mov.w	r2, #0
 80100ea:	4ba0      	ldr	r3, [pc, #640]	@ (801036c <sgp4_init+0x12e4>)
 80100ec:	f7f0 f8de 	bl	80002ac <__adddf3>
 80100f0:	4602      	mov	r2, r0
 80100f2:	460b      	mov	r3, r1
 80100f4:	4620      	mov	r0, r4
 80100f6:	4629      	mov	r1, r5
 80100f8:	f7f0 fa8e 	bl	8000618 <__aeabi_dmul>
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	4614      	mov	r4, r2
 8010102:	461d      	mov	r5, r3
 8010104:	6a3b      	ldr	r3, [r7, #32]
 8010106:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 801010a:	f04f 0200 	mov.w	r2, #0
 801010e:	4b98      	ldr	r3, [pc, #608]	@ (8010370 <sgp4_init+0x12e8>)
 8010110:	f7f0 f8cc 	bl	80002ac <__adddf3>
 8010114:	4602      	mov	r2, r0
 8010116:	460b      	mov	r3, r1
 8010118:	4620      	mov	r0, r4
 801011a:	4629      	mov	r1, r5
 801011c:	f7f0 fba6 	bl	800086c <__aeabi_ddiv>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	6a39      	ldr	r1, [r7, #32]
 8010126:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	m->aycof=0.25*a3ovk2*m->sinio;
 801012a:	f04f 0200 	mov.w	r2, #0
 801012e:	4b91      	ldr	r3, [pc, #580]	@ (8010374 <sgp4_init+0x12ec>)
 8010130:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8010134:	f7f0 fa70 	bl	8000618 <__aeabi_dmul>
 8010138:	4602      	mov	r2, r0
 801013a:	460b      	mov	r3, r1
 801013c:	4610      	mov	r0, r2
 801013e:	4619      	mov	r1, r3
 8010140:	6a3b      	ldr	r3, [r7, #32]
 8010142:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8010146:	f7f0 fa67 	bl	8000618 <__aeabi_dmul>
 801014a:	4602      	mov	r2, r0
 801014c:	460b      	mov	r3, r1
 801014e:	6a39      	ldr	r1, [r7, #32]
 8010150:	e9c1 2304 	strd	r2, r3, [r1, #16]
	m->delmo=pow(1+m->eta*cos(m->xmo),3);
 8010154:	6a3b      	ldr	r3, [r7, #32]
 8010156:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	@ 0x60
 801015a:	6a3b      	ldr	r3, [r7, #32]
 801015c:	ed93 7b44 	vldr	d7, [r3, #272]	@ 0x110
 8010160:	eeb0 0a47 	vmov.f32	s0, s14
 8010164:	eef0 0a67 	vmov.f32	s1, s15
 8010168:	f010 f80e 	bl	8020188 <cos>
 801016c:	ec53 2b10 	vmov	r2, r3, d0
 8010170:	4620      	mov	r0, r4
 8010172:	4629      	mov	r1, r5
 8010174:	f7f0 fa50 	bl	8000618 <__aeabi_dmul>
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	4610      	mov	r0, r2
 801017e:	4619      	mov	r1, r3
 8010180:	f04f 0200 	mov.w	r2, #0
 8010184:	4b7a      	ldr	r3, [pc, #488]	@ (8010370 <sgp4_init+0x12e8>)
 8010186:	f7f0 f891 	bl	80002ac <__adddf3>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	ec43 2b17 	vmov	d7, r2, r3
 8010192:	ed9f 1b6f 	vldr	d1, [pc, #444]	@ 8010350 <sgp4_init+0x12c8>
 8010196:	eeb0 0a47 	vmov.f32	s0, s14
 801019a:	eef0 0a67 	vmov.f32	s1, s15
 801019e:	f00f fdbd 	bl	801fd1c <pow>
 80101a2:	eeb0 7a40 	vmov.f32	s14, s0
 80101a6:	eef0 7a60 	vmov.f32	s15, s1
 80101aa:	6a3b      	ldr	r3, [r7, #32]
 80101ac:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
	m->sinmo=sin(m->xmo);
 80101b0:	6a3b      	ldr	r3, [r7, #32]
 80101b2:	ed93 7b44 	vldr	d7, [r3, #272]	@ 0x110
 80101b6:	eeb0 0a47 	vmov.f32	s0, s14
 80101ba:	eef0 0a67 	vmov.f32	s1, s15
 80101be:	f010 f83f 	bl	8020240 <sin>
 80101c2:	eeb0 7a40 	vmov.f32	s14, s0
 80101c6:	eef0 7a60 	vmov.f32	s15, s1
 80101ca:	6a3b      	ldr	r3, [r7, #32]
 80101cc:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
	m->x7thm1=7*theta2-1;
 80101d0:	f04f 0200 	mov.w	r2, #0
 80101d4:	4b68      	ldr	r3, [pc, #416]	@ (8010378 <sgp4_init+0x12f0>)
 80101d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80101da:	f7f0 fa1d 	bl	8000618 <__aeabi_dmul>
 80101de:	4602      	mov	r2, r0
 80101e0:	460b      	mov	r3, r1
 80101e2:	4610      	mov	r0, r2
 80101e4:	4619      	mov	r1, r3
 80101e6:	f04f 0200 	mov.w	r2, #0
 80101ea:	4b61      	ldr	r3, [pc, #388]	@ (8010370 <sgp4_init+0x12e8>)
 80101ec:	f7f0 f85c 	bl	80002a8 <__aeabi_dsub>
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
 80101f4:	6a39      	ldr	r1, [r7, #32]
 80101f6:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8

	if (!m->simpleFlag) {
 80101fa:	6a3b      	ldr	r3, [r7, #32]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f040 8199 	bne.w	8010536 <sgp4_init+0x14ae>
		c1sq=m->c1*m->c1;
 8010204:	6a3b      	ldr	r3, [r7, #32]
 8010206:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8010210:	f7f0 fa02 	bl	8000618 <__aeabi_dmul>
 8010214:	4602      	mov	r2, r0
 8010216:	460b      	mov	r3, r1
 8010218:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		m->d2=4*m->aodp*tsi*c1sq;
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010222:	f04f 0200 	mov.w	r2, #0
 8010226:	4b55      	ldr	r3, [pc, #340]	@ (801037c <sgp4_init+0x12f4>)
 8010228:	f7f0 f9f6 	bl	8000618 <__aeabi_dmul>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4610      	mov	r0, r2
 8010232:	4619      	mov	r1, r3
 8010234:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8010238:	f7f0 f9ee 	bl	8000618 <__aeabi_dmul>
 801023c:	4602      	mov	r2, r0
 801023e:	460b      	mov	r3, r1
 8010240:	4610      	mov	r0, r2
 8010242:	4619      	mov	r1, r3
 8010244:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8010248:	f7f0 f9e6 	bl	8000618 <__aeabi_dmul>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	6a39      	ldr	r1, [r7, #32]
 8010252:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		temp=m->d2*tsi*m->c1/3;
 8010256:	6a3b      	ldr	r3, [r7, #32]
 8010258:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801025c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8010260:	f7f0 f9da 	bl	8000618 <__aeabi_dmul>
 8010264:	4602      	mov	r2, r0
 8010266:	460b      	mov	r3, r1
 8010268:	4610      	mov	r0, r2
 801026a:	4619      	mov	r1, r3
 801026c:	6a3b      	ldr	r3, [r7, #32]
 801026e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8010272:	f7f0 f9d1 	bl	8000618 <__aeabi_dmul>
 8010276:	4602      	mov	r2, r0
 8010278:	460b      	mov	r3, r1
 801027a:	4610      	mov	r0, r2
 801027c:	4619      	mov	r1, r3
 801027e:	f04f 0200 	mov.w	r2, #0
 8010282:	4b3a      	ldr	r3, [pc, #232]	@ (801036c <sgp4_init+0x12e4>)
 8010284:	f7f0 faf2 	bl	800086c <__aeabi_ddiv>
 8010288:	4602      	mov	r2, r0
 801028a:	460b      	mov	r3, r1
 801028c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		m->d3=(17*m->aodp+s4)*temp;
 8010290:	6a3b      	ldr	r3, [r7, #32]
 8010292:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010296:	f04f 0200 	mov.w	r2, #0
 801029a:	4b39      	ldr	r3, [pc, #228]	@ (8010380 <sgp4_init+0x12f8>)
 801029c:	f7f0 f9bc 	bl	8000618 <__aeabi_dmul>
 80102a0:	4602      	mov	r2, r0
 80102a2:	460b      	mov	r3, r1
 80102a4:	4610      	mov	r0, r2
 80102a6:	4619      	mov	r1, r3
 80102a8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80102ac:	f7ef fffe 	bl	80002ac <__adddf3>
 80102b0:	4602      	mov	r2, r0
 80102b2:	460b      	mov	r3, r1
 80102b4:	4610      	mov	r0, r2
 80102b6:	4619      	mov	r1, r3
 80102b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80102bc:	f7f0 f9ac 	bl	8000618 <__aeabi_dmul>
 80102c0:	4602      	mov	r2, r0
 80102c2:	460b      	mov	r3, r1
 80102c4:	6a39      	ldr	r1, [r7, #32]
 80102c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		m->d4=0.5*temp*m->aodp*tsi*(221*m->aodp+31*s4)*m->c1;
 80102ca:	f04f 0200 	mov.w	r2, #0
 80102ce:	4b2d      	ldr	r3, [pc, #180]	@ (8010384 <sgp4_init+0x12fc>)
 80102d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80102d4:	f7f0 f9a0 	bl	8000618 <__aeabi_dmul>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4610      	mov	r0, r2
 80102de:	4619      	mov	r1, r3
 80102e0:	6a3b      	ldr	r3, [r7, #32]
 80102e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80102e6:	f7f0 f997 	bl	8000618 <__aeabi_dmul>
 80102ea:	4602      	mov	r2, r0
 80102ec:	460b      	mov	r3, r1
 80102ee:	4610      	mov	r0, r2
 80102f0:	4619      	mov	r1, r3
 80102f2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80102f6:	f7f0 f98f 	bl	8000618 <__aeabi_dmul>
 80102fa:	4602      	mov	r2, r0
 80102fc:	460b      	mov	r3, r1
 80102fe:	4614      	mov	r4, r2
 8010300:	461d      	mov	r5, r3
 8010302:	6a3b      	ldr	r3, [r7, #32]
 8010304:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010308:	a313      	add	r3, pc, #76	@ (adr r3, 8010358 <sgp4_init+0x12d0>)
 801030a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030e:	f7f0 f983 	bl	8000618 <__aeabi_dmul>
 8010312:	4602      	mov	r2, r0
 8010314:	460b      	mov	r3, r1
 8010316:	4690      	mov	r8, r2
 8010318:	4699      	mov	r9, r3
 801031a:	f04f 0200 	mov.w	r2, #0
 801031e:	4b1a      	ldr	r3, [pc, #104]	@ (8010388 <sgp4_init+0x1300>)
 8010320:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8010324:	f7f0 f978 	bl	8000618 <__aeabi_dmul>
 8010328:	4602      	mov	r2, r0
 801032a:	460b      	mov	r3, r1
 801032c:	4640      	mov	r0, r8
 801032e:	4649      	mov	r1, r9
 8010330:	f7ef ffbc 	bl	80002ac <__adddf3>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	4620      	mov	r0, r4
 801033a:	4629      	mov	r1, r5
 801033c:	f7f0 f96c 	bl	8000618 <__aeabi_dmul>
 8010340:	4602      	mov	r2, r0
 8010342:	460b      	mov	r3, r1
 8010344:	4610      	mov	r0, r2
 8010346:	4619      	mov	r1, r3
 8010348:	6a3b      	ldr	r3, [r7, #32]
 801034a:	e01f      	b.n	801038c <sgp4_init+0x1304>
 801034c:	f3af 8000 	nop.w
 8010350:	00000000 	.word	0x00000000
 8010354:	40080000 	.word	0x40080000
 8010358:	00000000 	.word	0x00000000
 801035c:	406ba000 	.word	0x406ba000
 8010360:	400c0000 	.word	0x400c0000
 8010364:	3ff80000 	.word	0x3ff80000
 8010368:	40140000 	.word	0x40140000
 801036c:	40080000 	.word	0x40080000
 8010370:	3ff00000 	.word	0x3ff00000
 8010374:	3fd00000 	.word	0x3fd00000
 8010378:	401c0000 	.word	0x401c0000
 801037c:	40100000 	.word	0x40100000
 8010380:	40310000 	.word	0x40310000
 8010384:	3fe00000 	.word	0x3fe00000
 8010388:	403f0000 	.word	0x403f0000
 801038c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8010390:	f7f0 f942 	bl	8000618 <__aeabi_dmul>
 8010394:	4602      	mov	r2, r0
 8010396:	460b      	mov	r3, r1
 8010398:	6a39      	ldr	r1, [r7, #32]
 801039a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		m->t3cof=m->d2+2*c1sq;
 801039e:	6a3b      	ldr	r3, [r7, #32]
 80103a0:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80103a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80103a8:	4602      	mov	r2, r0
 80103aa:	460b      	mov	r3, r1
 80103ac:	f7ef ff7e 	bl	80002ac <__adddf3>
 80103b0:	4602      	mov	r2, r0
 80103b2:	460b      	mov	r3, r1
 80103b4:	4620      	mov	r0, r4
 80103b6:	4629      	mov	r1, r5
 80103b8:	f7ef ff78 	bl	80002ac <__adddf3>
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	6a39      	ldr	r1, [r7, #32]
 80103c2:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		m->t4cof=0.25*(3*m->d3+m->c1*(12*m->d2+10*c1sq));
 80103c6:	6a3b      	ldr	r3, [r7, #32]
 80103c8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80103cc:	f04f 0200 	mov.w	r2, #0
 80103d0:	4b5f      	ldr	r3, [pc, #380]	@ (8010550 <sgp4_init+0x14c8>)
 80103d2:	f7f0 f921 	bl	8000618 <__aeabi_dmul>
 80103d6:	4602      	mov	r2, r0
 80103d8:	460b      	mov	r3, r1
 80103da:	4690      	mov	r8, r2
 80103dc:	4699      	mov	r9, r3
 80103de:	6a3b      	ldr	r3, [r7, #32]
 80103e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80103e4:	6a3b      	ldr	r3, [r7, #32]
 80103e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80103ea:	f04f 0200 	mov.w	r2, #0
 80103ee:	4b59      	ldr	r3, [pc, #356]	@ (8010554 <sgp4_init+0x14cc>)
 80103f0:	f7f0 f912 	bl	8000618 <__aeabi_dmul>
 80103f4:	4602      	mov	r2, r0
 80103f6:	460b      	mov	r3, r1
 80103f8:	4692      	mov	sl, r2
 80103fa:	469b      	mov	fp, r3
 80103fc:	f04f 0200 	mov.w	r2, #0
 8010400:	4b55      	ldr	r3, [pc, #340]	@ (8010558 <sgp4_init+0x14d0>)
 8010402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8010406:	f7f0 f907 	bl	8000618 <__aeabi_dmul>
 801040a:	4602      	mov	r2, r0
 801040c:	460b      	mov	r3, r1
 801040e:	4650      	mov	r0, sl
 8010410:	4659      	mov	r1, fp
 8010412:	f7ef ff4b 	bl	80002ac <__adddf3>
 8010416:	4602      	mov	r2, r0
 8010418:	460b      	mov	r3, r1
 801041a:	4620      	mov	r0, r4
 801041c:	4629      	mov	r1, r5
 801041e:	f7f0 f8fb 	bl	8000618 <__aeabi_dmul>
 8010422:	4602      	mov	r2, r0
 8010424:	460b      	mov	r3, r1
 8010426:	4640      	mov	r0, r8
 8010428:	4649      	mov	r1, r9
 801042a:	f7ef ff3f 	bl	80002ac <__adddf3>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	4610      	mov	r0, r2
 8010434:	4619      	mov	r1, r3
 8010436:	f04f 0200 	mov.w	r2, #0
 801043a:	4b48      	ldr	r3, [pc, #288]	@ (801055c <sgp4_init+0x14d4>)
 801043c:	f7f0 f8ec 	bl	8000618 <__aeabi_dmul>
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	6a39      	ldr	r1, [r7, #32]
 8010446:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		m->t5cof=0.2*(3*m->d4+12*m->c1*m->d3+6*m->d2*m->d2+15*c1sq*(2*m->d2+c1sq));
 801044a:	6a3b      	ldr	r3, [r7, #32]
 801044c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8010450:	f04f 0200 	mov.w	r2, #0
 8010454:	4b3e      	ldr	r3, [pc, #248]	@ (8010550 <sgp4_init+0x14c8>)
 8010456:	f7f0 f8df 	bl	8000618 <__aeabi_dmul>
 801045a:	4602      	mov	r2, r0
 801045c:	460b      	mov	r3, r1
 801045e:	4614      	mov	r4, r2
 8010460:	461d      	mov	r5, r3
 8010462:	6a3b      	ldr	r3, [r7, #32]
 8010464:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8010468:	f04f 0200 	mov.w	r2, #0
 801046c:	4b39      	ldr	r3, [pc, #228]	@ (8010554 <sgp4_init+0x14cc>)
 801046e:	f7f0 f8d3 	bl	8000618 <__aeabi_dmul>
 8010472:	4602      	mov	r2, r0
 8010474:	460b      	mov	r3, r1
 8010476:	4610      	mov	r0, r2
 8010478:	4619      	mov	r1, r3
 801047a:	6a3b      	ldr	r3, [r7, #32]
 801047c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8010480:	f7f0 f8ca 	bl	8000618 <__aeabi_dmul>
 8010484:	4602      	mov	r2, r0
 8010486:	460b      	mov	r3, r1
 8010488:	4620      	mov	r0, r4
 801048a:	4629      	mov	r1, r5
 801048c:	f7ef ff0e 	bl	80002ac <__adddf3>
 8010490:	4602      	mov	r2, r0
 8010492:	460b      	mov	r3, r1
 8010494:	4614      	mov	r4, r2
 8010496:	461d      	mov	r5, r3
 8010498:	6a3b      	ldr	r3, [r7, #32]
 801049a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801049e:	f04f 0200 	mov.w	r2, #0
 80104a2:	4b2f      	ldr	r3, [pc, #188]	@ (8010560 <sgp4_init+0x14d8>)
 80104a4:	f7f0 f8b8 	bl	8000618 <__aeabi_dmul>
 80104a8:	4602      	mov	r2, r0
 80104aa:	460b      	mov	r3, r1
 80104ac:	4610      	mov	r0, r2
 80104ae:	4619      	mov	r1, r3
 80104b0:	6a3b      	ldr	r3, [r7, #32]
 80104b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80104b6:	f7f0 f8af 	bl	8000618 <__aeabi_dmul>
 80104ba:	4602      	mov	r2, r0
 80104bc:	460b      	mov	r3, r1
 80104be:	4620      	mov	r0, r4
 80104c0:	4629      	mov	r1, r5
 80104c2:	f7ef fef3 	bl	80002ac <__adddf3>
 80104c6:	4602      	mov	r2, r0
 80104c8:	460b      	mov	r3, r1
 80104ca:	4614      	mov	r4, r2
 80104cc:	461d      	mov	r5, r3
 80104ce:	f04f 0200 	mov.w	r2, #0
 80104d2:	4b24      	ldr	r3, [pc, #144]	@ (8010564 <sgp4_init+0x14dc>)
 80104d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80104d8:	f7f0 f89e 	bl	8000618 <__aeabi_dmul>
 80104dc:	4602      	mov	r2, r0
 80104de:	460b      	mov	r3, r1
 80104e0:	4690      	mov	r8, r2
 80104e2:	4699      	mov	r9, r3
 80104e4:	6a3b      	ldr	r3, [r7, #32]
 80104e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80104ea:	4602      	mov	r2, r0
 80104ec:	460b      	mov	r3, r1
 80104ee:	f7ef fedd 	bl	80002ac <__adddf3>
 80104f2:	4602      	mov	r2, r0
 80104f4:	460b      	mov	r3, r1
 80104f6:	4610      	mov	r0, r2
 80104f8:	4619      	mov	r1, r3
 80104fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80104fe:	f7ef fed5 	bl	80002ac <__adddf3>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4640      	mov	r0, r8
 8010508:	4649      	mov	r1, r9
 801050a:	f7f0 f885 	bl	8000618 <__aeabi_dmul>
 801050e:	4602      	mov	r2, r0
 8010510:	460b      	mov	r3, r1
 8010512:	4620      	mov	r0, r4
 8010514:	4629      	mov	r1, r5
 8010516:	f7ef fec9 	bl	80002ac <__adddf3>
 801051a:	4602      	mov	r2, r0
 801051c:	460b      	mov	r3, r1
 801051e:	4610      	mov	r0, r2
 8010520:	4619      	mov	r1, r3
 8010522:	a309      	add	r3, pc, #36	@ (adr r3, 8010548 <sgp4_init+0x14c0>)
 8010524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010528:	f7f0 f876 	bl	8000618 <__aeabi_dmul>
 801052c:	4602      	mov	r2, r0
 801052e:	460b      	mov	r3, r1
 8010530:	6a39      	ldr	r1, [r7, #32]
 8010532:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	}
}
 8010536:	bf00      	nop
 8010538:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801053c:	46bd      	mov	sp, r7
 801053e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010542:	bf00      	nop
 8010544:	f3af 8000 	nop.w
 8010548:	9999999a 	.word	0x9999999a
 801054c:	3fc99999 	.word	0x3fc99999
 8010550:	40080000 	.word	0x40080000
 8010554:	40280000 	.word	0x40280000
 8010558:	40240000 	.word	0x40240000
 801055c:	3fd00000 	.word	0x3fd00000
 8010560:	40180000 	.word	0x40180000
 8010564:	402e0000 	.word	0x402e0000

08010568 <sgp4_predict>:

void sgp4_predict(const struct _sgp4 *m, double tsince, struct model_output *output)
{
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8010570:	af00      	add	r7, sp, #0
 8010572:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010576:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801057a:	6018      	str	r0, [r3, #0]
 801057c:	f107 0310 	add.w	r3, r7, #16
 8010580:	ed03 0b02 	vstr	d0, [r3, #-8]
 8010584:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010588:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801058c:	6019      	str	r1, [r3, #0]
	temp3, temp4, temp5, temp6;

	int i;

	/* Update for secular gravity and atmospheric drag. */
	xmdf=m->xmo+m->xmdot*tsince;
 801058e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010592:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	e9d3 ab44 	ldrd	sl, fp, [r3, #272]	@ 0x110
 801059c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80105a0:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80105aa:	f107 0310 	add.w	r3, r7, #16
 80105ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105b2:	f7f0 f831 	bl	8000618 <__aeabi_dmul>
 80105b6:	4602      	mov	r2, r0
 80105b8:	460b      	mov	r3, r1
 80105ba:	4650      	mov	r0, sl
 80105bc:	4659      	mov	r1, fp
 80105be:	f7ef fe75 	bl	80002ac <__adddf3>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
	omgadf=m->omegao+m->omgdot*tsince;
 80105ca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80105ce:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	e9d3 ab42 	ldrd	sl, fp, [r3, #264]	@ 0x108
 80105d8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80105dc:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80105e6:	f107 0310 	add.w	r3, r7, #16
 80105ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105ee:	f7f0 f813 	bl	8000618 <__aeabi_dmul>
 80105f2:	4602      	mov	r2, r0
 80105f4:	460b      	mov	r3, r1
 80105f6:	4650      	mov	r0, sl
 80105f8:	4659      	mov	r1, fp
 80105fa:	f7ef fe57 	bl	80002ac <__adddf3>
 80105fe:	4602      	mov	r2, r0
 8010600:	460b      	mov	r3, r1
 8010602:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
	xnoddf=m->xnodeo+m->xnodot*tsince;
 8010606:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801060a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	e9d3 ab3e 	ldrd	sl, fp, [r3, #248]	@ 0xf8
 8010614:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010618:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	@ 0xd8
 8010622:	f107 0310 	add.w	r3, r7, #16
 8010626:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801062a:	f7ef fff5 	bl	8000618 <__aeabi_dmul>
 801062e:	4602      	mov	r2, r0
 8010630:	460b      	mov	r3, r1
 8010632:	4650      	mov	r0, sl
 8010634:	4659      	mov	r1, fp
 8010636:	f7ef fe39 	bl	80002ac <__adddf3>
 801063a:	4602      	mov	r2, r0
 801063c:	460b      	mov	r3, r1
 801063e:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
	omega=omgadf;
 8010642:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8010646:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
	xmp=xmdf;
 801064a:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 801064e:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
	tsq=tsince*tsince;
 8010652:	f107 0310 	add.w	r3, r7, #16
 8010656:	4619      	mov	r1, r3
 8010658:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 801065c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010660:	f7ef ffda 	bl	8000618 <__aeabi_dmul>
 8010664:	4602      	mov	r2, r0
 8010666:	460b      	mov	r3, r1
 8010668:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
	xnode=xnoddf+m->xnodcf*tsq;
 801066c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010670:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	@ 0xd0
 801067a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 801067e:	f7ef ffcb 	bl	8000618 <__aeabi_dmul>
 8010682:	4602      	mov	r2, r0
 8010684:	460b      	mov	r3, r1
 8010686:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 801068a:	f7ef fe0f 	bl	80002ac <__adddf3>
 801068e:	4602      	mov	r2, r0
 8010690:	460b      	mov	r3, r1
 8010692:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
	tempa=1-m->c1*tsince;
 8010696:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801069a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80106a4:	f107 0310 	add.w	r3, r7, #16
 80106a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106ac:	f7ef ffb4 	bl	8000618 <__aeabi_dmul>
 80106b0:	4602      	mov	r2, r0
 80106b2:	460b      	mov	r3, r1
 80106b4:	f04f 0000 	mov.w	r0, #0
 80106b8:	49bf      	ldr	r1, [pc, #764]	@ (80109b8 <sgp4_predict+0x450>)
 80106ba:	f7ef fdf5 	bl	80002a8 <__aeabi_dsub>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
	tempe=m->bstar*m->c4*tsince;
 80106c6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80106ca:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 80106d4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80106d8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80106e2:	f7ef ff99 	bl	8000618 <__aeabi_dmul>
 80106e6:	4602      	mov	r2, r0
 80106e8:	460b      	mov	r3, r1
 80106ea:	f107 0110 	add.w	r1, r7, #16
 80106ee:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80106f2:	f7ef ff91 	bl	8000618 <__aeabi_dmul>
 80106f6:	4602      	mov	r2, r0
 80106f8:	460b      	mov	r3, r1
 80106fa:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
	templ=m->t2cof*tsq;
 80106fe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010702:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 801070c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8010710:	f7ef ff82 	bl	8000618 <__aeabi_dmul>
 8010714:	4602      	mov	r2, r0
 8010716:	460b      	mov	r3, r1
 8010718:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238

	if (!m->simpleFlag) {
 801071c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010720:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	f040 814a 	bne.w	80109c2 <sgp4_predict+0x45a>

		delomg=m->omgcof*tsince;
 801072e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010732:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 801073c:	f107 0110 	add.w	r1, r7, #16
 8010740:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010744:	f7ef ff68 	bl	8000618 <__aeabi_dmul>
 8010748:	4602      	mov	r2, r0
 801074a:	460b      	mov	r3, r1
 801074c:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
		delm=m->xmcof*(pow(1+m->eta*cos(xmdf),3)-m->delmo);
 8010750:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010754:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	e9d3 ab30 	ldrd	sl, fp, [r3, #192]	@ 0xc0
 801075e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010762:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 801076c:	ed87 7b00 	vstr	d7, [r7]
 8010770:	ed97 0b80 	vldr	d0, [r7, #512]	@ 0x200
 8010774:	f00f fd08 	bl	8020188 <cos>
 8010778:	ec53 2b10 	vmov	r2, r3, d0
 801077c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010780:	f7ef ff4a 	bl	8000618 <__aeabi_dmul>
 8010784:	4602      	mov	r2, r0
 8010786:	460b      	mov	r3, r1
 8010788:	4610      	mov	r0, r2
 801078a:	4619      	mov	r1, r3
 801078c:	f04f 0200 	mov.w	r2, #0
 8010790:	4b89      	ldr	r3, [pc, #548]	@ (80109b8 <sgp4_predict+0x450>)
 8010792:	f7ef fd8b 	bl	80002ac <__adddf3>
 8010796:	4602      	mov	r2, r0
 8010798:	460b      	mov	r3, r1
 801079a:	ec43 2b17 	vmov	d7, r2, r3
 801079e:	ed9f 1b84 	vldr	d1, [pc, #528]	@ 80109b0 <sgp4_predict+0x448>
 80107a2:	eeb0 0a47 	vmov.f32	s0, s14
 80107a6:	eef0 0a67 	vmov.f32	s1, s15
 80107aa:	f00f fab7 	bl	801fd1c <pow>
 80107ae:	ec51 0b10 	vmov	r0, r1, d0
 80107b2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80107b6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80107c0:	f7ef fd72 	bl	80002a8 <__aeabi_dsub>
 80107c4:	4602      	mov	r2, r0
 80107c6:	460b      	mov	r3, r1
 80107c8:	4650      	mov	r0, sl
 80107ca:	4659      	mov	r1, fp
 80107cc:	f7ef ff24 	bl	8000618 <__aeabi_dmul>
 80107d0:	4602      	mov	r2, r0
 80107d2:	460b      	mov	r3, r1
 80107d4:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
		temp=delomg+delm;
 80107d8:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80107dc:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80107e0:	f7ef fd64 	bl	80002ac <__adddf3>
 80107e4:	4602      	mov	r2, r0
 80107e6:	460b      	mov	r3, r1
 80107e8:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
		xmp=xmdf+temp;
 80107ec:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80107f0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 80107f4:	f7ef fd5a 	bl	80002ac <__adddf3>
 80107f8:	4602      	mov	r2, r0
 80107fa:	460b      	mov	r3, r1
 80107fc:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
		omega=omgadf-temp;
 8010800:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8010804:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8010808:	f7ef fd4e 	bl	80002a8 <__aeabi_dsub>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
		tcube=tsq*tsince;
 8010814:	f107 0310 	add.w	r3, r7, #16
 8010818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801081c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8010820:	f7ef fefa 	bl	8000618 <__aeabi_dmul>
 8010824:	4602      	mov	r2, r0
 8010826:	460b      	mov	r3, r1
 8010828:	e9c7 2370 	strd	r2, r3, [r7, #448]	@ 0x1c0
		tfour=tsince*tcube;
 801082c:	f107 0310 	add.w	r3, r7, #16
 8010830:	4619      	mov	r1, r3
 8010832:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8010836:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801083a:	f7ef feed 	bl	8000618 <__aeabi_dmul>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
		tempa=tempa-m->d2*tsq-m->d3*tcube-m->d4*tfour;
 8010846:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801084a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8010854:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8010858:	f7ef fede 	bl	8000618 <__aeabi_dmul>
 801085c:	4602      	mov	r2, r0
 801085e:	460b      	mov	r3, r1
 8010860:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8010864:	f7ef fd20 	bl	80002a8 <__aeabi_dsub>
 8010868:	4602      	mov	r2, r0
 801086a:	460b      	mov	r3, r1
 801086c:	4692      	mov	sl, r2
 801086e:	469b      	mov	fp, r3
 8010870:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010874:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 801087e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8010882:	f7ef fec9 	bl	8000618 <__aeabi_dmul>
 8010886:	4602      	mov	r2, r0
 8010888:	460b      	mov	r3, r1
 801088a:	4650      	mov	r0, sl
 801088c:	4659      	mov	r1, fp
 801088e:	f7ef fd0b 	bl	80002a8 <__aeabi_dsub>
 8010892:	4602      	mov	r2, r0
 8010894:	460b      	mov	r3, r1
 8010896:	4692      	mov	sl, r2
 8010898:	469b      	mov	fp, r3
 801089a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801089e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80108a8:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 80108ac:	f7ef feb4 	bl	8000618 <__aeabi_dmul>
 80108b0:	4602      	mov	r2, r0
 80108b2:	460b      	mov	r3, r1
 80108b4:	4650      	mov	r0, sl
 80108b6:	4659      	mov	r1, fp
 80108b8:	f7ef fcf6 	bl	80002a8 <__aeabi_dsub>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
		tempe=tempe+m->bstar*m->c5*(sin(xmp)-m->sinmo);
 80108c4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80108c8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 80108d2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80108d6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80108e0:	f7ef fe9a 	bl	8000618 <__aeabi_dmul>
 80108e4:	4602      	mov	r2, r0
 80108e6:	460b      	mov	r3, r1
 80108e8:	4692      	mov	sl, r2
 80108ea:	469b      	mov	fp, r3
 80108ec:	ed97 0b88 	vldr	d0, [r7, #544]	@ 0x220
 80108f0:	f00f fca6 	bl	8020240 <sin>
 80108f4:	ec51 0b10 	vmov	r0, r1, d0
 80108f8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80108fc:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8010906:	f7ef fccf 	bl	80002a8 <__aeabi_dsub>
 801090a:	4602      	mov	r2, r0
 801090c:	460b      	mov	r3, r1
 801090e:	4650      	mov	r0, sl
 8010910:	4659      	mov	r1, fp
 8010912:	f7ef fe81 	bl	8000618 <__aeabi_dmul>
 8010916:	4602      	mov	r2, r0
 8010918:	460b      	mov	r3, r1
 801091a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 801091e:	f7ef fcc5 	bl	80002ac <__adddf3>
 8010922:	4602      	mov	r2, r0
 8010924:	460b      	mov	r3, r1
 8010926:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		templ=templ+m->t3cof*tcube+tfour*(m->t4cof+tsince*m->t5cof);
 801092a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801092e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8010938:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 801093c:	f7ef fe6c 	bl	8000618 <__aeabi_dmul>
 8010940:	4602      	mov	r2, r0
 8010942:	460b      	mov	r3, r1
 8010944:	4610      	mov	r0, r2
 8010946:	4619      	mov	r1, r3
 8010948:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 801094c:	f7ef fcae 	bl	80002ac <__adddf3>
 8010950:	4602      	mov	r2, r0
 8010952:	460b      	mov	r3, r1
 8010954:	e9c7 2300 	strd	r2, r3, [r7]
 8010958:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801095c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	e9d3 ab26 	ldrd	sl, fp, [r3, #152]	@ 0x98
 8010966:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801096a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 8010974:	f107 0310 	add.w	r3, r7, #16
 8010978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801097c:	f7ef fe4c 	bl	8000618 <__aeabi_dmul>
 8010980:	4602      	mov	r2, r0
 8010982:	460b      	mov	r3, r1
 8010984:	4650      	mov	r0, sl
 8010986:	4659      	mov	r1, fp
 8010988:	f7ef fc90 	bl	80002ac <__adddf3>
 801098c:	4602      	mov	r2, r0
 801098e:	460b      	mov	r3, r1
 8010990:	4610      	mov	r0, r2
 8010992:	4619      	mov	r1, r3
 8010994:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8010998:	f7ef fe3e 	bl	8000618 <__aeabi_dmul>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80109a4:	f7ef fc82 	bl	80002ac <__adddf3>
 80109a8:	4602      	mov	r2, r0
 80109aa:	e007      	b.n	80109bc <sgp4_predict+0x454>
 80109ac:	f3af 8000 	nop.w
 80109b0:	00000000 	.word	0x00000000
 80109b4:	40080000 	.word	0x40080000
 80109b8:	3ff00000 	.word	0x3ff00000
 80109bc:	460b      	mov	r3, r1
 80109be:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
	}

	a=m->aodp*pow(tempa,2);
 80109c2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80109c6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 80109d0:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 8010cd0 <sgp4_predict+0x768>
 80109d4:	ed97 0b8a 	vldr	d0, [r7, #552]	@ 0x228
 80109d8:	f00f f9a0 	bl	801fd1c <pow>
 80109dc:	ec53 2b10 	vmov	r2, r3, d0
 80109e0:	4650      	mov	r0, sl
 80109e2:	4659      	mov	r1, fp
 80109e4:	f7ef fe18 	bl	8000618 <__aeabi_dmul>
 80109e8:	4602      	mov	r2, r0
 80109ea:	460b      	mov	r3, r1
 80109ec:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
	e=m->eo-tempe;
 80109f0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80109f4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 80109fe:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 8010a02:	f7ef fc51 	bl	80002a8 <__aeabi_dsub>
 8010a06:	4602      	mov	r2, r0
 8010a08:	460b      	mov	r3, r1
 8010a0a:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
	xl=xmp+omega+xnode+m->xnodp*templ;
 8010a0e:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8010a12:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8010a16:	f7ef fc49 	bl	80002ac <__adddf3>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	4610      	mov	r0, r2
 8010a20:	4619      	mov	r1, r3
 8010a22:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8010a26:	f7ef fc41 	bl	80002ac <__adddf3>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	4692      	mov	sl, r2
 8010a30:	469b      	mov	fp, r3
 8010a32:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a36:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8010a40:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8010a44:	f7ef fde8 	bl	8000618 <__aeabi_dmul>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	4650      	mov	r0, sl
 8010a4e:	4659      	mov	r1, fp
 8010a50:	f7ef fc2c 	bl	80002ac <__adddf3>
 8010a54:	4602      	mov	r2, r0
 8010a56:	460b      	mov	r3, r1
 8010a58:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
	beta=sqrt(1-e*e);
 8010a5c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8010a60:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8010a64:	f7ef fdd8 	bl	8000618 <__aeabi_dmul>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	f04f 0000 	mov.w	r0, #0
 8010a70:	499d      	ldr	r1, [pc, #628]	@ (8010ce8 <sgp4_predict+0x780>)
 8010a72:	f7ef fc19 	bl	80002a8 <__aeabi_dsub>
 8010a76:	4602      	mov	r2, r0
 8010a78:	460b      	mov	r3, r1
 8010a7a:	ec43 2b17 	vmov	d7, r2, r3
 8010a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8010a82:	eef0 0a67 	vmov.f32	s1, s15
 8010a86:	f00f f9b9 	bl	801fdfc <sqrt>
 8010a8a:	ed87 0b66 	vstr	d0, [r7, #408]	@ 0x198
	xn=XKE/pow(a,1.5);
 8010a8e:	ed9f 1b92 	vldr	d1, [pc, #584]	@ 8010cd8 <sgp4_predict+0x770>
 8010a92:	ed97 0b6c 	vldr	d0, [r7, #432]	@ 0x1b0
 8010a96:	f00f f941 	bl	801fd1c <pow>
 8010a9a:	ec53 2b10 	vmov	r2, r3, d0
 8010a9e:	a190      	add	r1, pc, #576	@ (adr r1, 8010ce0 <sgp4_predict+0x778>)
 8010aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aa4:	f7ef fee2 	bl	800086c <__aeabi_ddiv>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

	/* Long period periodics */
	axn=e*cos(omega);
 8010ab0:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 8010ab4:	f00f fb68 	bl	8020188 <cos>
 8010ab8:	ec53 2b10 	vmov	r2, r3, d0
 8010abc:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8010ac0:	f7ef fdaa 	bl	8000618 <__aeabi_dmul>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
	temp=1/(a*beta*beta);
 8010acc:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8010ad0:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8010ad4:	f7ef fda0 	bl	8000618 <__aeabi_dmul>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	460b      	mov	r3, r1
 8010adc:	4610      	mov	r0, r2
 8010ade:	4619      	mov	r1, r3
 8010ae0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8010ae4:	f7ef fd98 	bl	8000618 <__aeabi_dmul>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	460b      	mov	r3, r1
 8010aec:	f04f 0000 	mov.w	r0, #0
 8010af0:	497d      	ldr	r1, [pc, #500]	@ (8010ce8 <sgp4_predict+0x780>)
 8010af2:	f7ef febb 	bl	800086c <__aeabi_ddiv>
 8010af6:	4602      	mov	r2, r0
 8010af8:	460b      	mov	r3, r1
 8010afa:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	xll=temp*m->xlcof*axn;
 8010afe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010b02:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	@ 0xe0
 8010b0c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8010b10:	f7ef fd82 	bl	8000618 <__aeabi_dmul>
 8010b14:	4602      	mov	r2, r0
 8010b16:	460b      	mov	r3, r1
 8010b18:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8010b1c:	f7ef fd7c 	bl	8000618 <__aeabi_dmul>
 8010b20:	4602      	mov	r2, r0
 8010b22:	460b      	mov	r3, r1
 8010b24:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	aynl=temp*m->aycof;
 8010b28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010b2c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010b36:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8010b3a:	f7ef fd6d 	bl	8000618 <__aeabi_dmul>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	460b      	mov	r3, r1
 8010b42:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
	xlt=xl+xll;
 8010b46:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8010b4a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8010b4e:	f7ef fbad 	bl	80002ac <__adddf3>
 8010b52:	4602      	mov	r2, r0
 8010b54:	460b      	mov	r3, r1
 8010b56:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
	ayn=e*sin(omega)+aynl;
 8010b5a:	ed97 0b86 	vldr	d0, [r7, #536]	@ 0x218
 8010b5e:	f00f fb6f 	bl	8020240 <sin>
 8010b62:	ec51 0b10 	vmov	r0, r1, d0
 8010b66:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8010b6a:	f7ef fd55 	bl	8000618 <__aeabi_dmul>
 8010b6e:	4602      	mov	r2, r0
 8010b70:	460b      	mov	r3, r1
 8010b72:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8010b76:	f7ef fb99 	bl	80002ac <__adddf3>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168

	/* Solve Kepler's Equation */
	capu=FMod2p(xlt-xnode);
 8010b82:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8010b86:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8010b8a:	f7ef fb8d 	bl	80002a8 <__aeabi_dsub>
 8010b8e:	4602      	mov	r2, r0
 8010b90:	460b      	mov	r3, r1
 8010b92:	ec43 2b17 	vmov	d7, r2, r3
 8010b96:	eeb0 0a47 	vmov.f32	s0, s14
 8010b9a:	eef0 0a67 	vmov.f32	s1, s15
 8010b9e:	f001 fc7f 	bl	80124a0 <FMod2p>
 8010ba2:	ed87 0b58 	vstr	d0, [r7, #352]	@ 0x160
	temp2=capu;
 8010ba6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8010baa:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	i=0;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	do
	{
		sinepw=sin(temp2);
 8010bb4:	ed97 0b84 	vldr	d0, [r7, #528]	@ 0x210
 8010bb8:	f00f fb42 	bl	8020240 <sin>
 8010bbc:	ed87 0b56 	vstr	d0, [r7, #344]	@ 0x158
		cosepw=cos(temp2);
 8010bc0:	ed97 0b84 	vldr	d0, [r7, #528]	@ 0x210
 8010bc4:	f00f fae0 	bl	8020188 <cos>
 8010bc8:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150
		temp3=axn*sinepw;
 8010bcc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8010bd0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8010bd4:	f7ef fd20 	bl	8000618 <__aeabi_dmul>
 8010bd8:	4602      	mov	r2, r0
 8010bda:	460b      	mov	r3, r1
 8010bdc:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
		temp4=ayn*cosepw;
 8010be0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010be4:	461e      	mov	r6, r3
 8010be6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8010bea:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8010bee:	f7ef fd13 	bl	8000618 <__aeabi_dmul>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	e9c6 2300 	strd	r2, r3, [r6]
		temp5=axn*cosepw;
 8010bfa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010bfe:	461e      	mov	r6, r3
 8010c00:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8010c04:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8010c08:	f7ef fd06 	bl	8000618 <__aeabi_dmul>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	460b      	mov	r3, r1
 8010c10:	e946 2302 	strd	r2, r3, [r6, #-8]
		temp6=ayn*sinepw;
 8010c14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c18:	461e      	mov	r6, r3
 8010c1a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8010c1e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8010c22:	f7ef fcf9 	bl	8000618 <__aeabi_dmul>
 8010c26:	4602      	mov	r2, r0
 8010c28:	460b      	mov	r3, r1
 8010c2a:	e9c6 2300 	strd	r2, r3, [r6]
		epw=(capu-temp4+temp3-temp2)/(1-temp5-temp6)+temp2;
 8010c2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c36:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8010c3a:	f7ef fb35 	bl	80002a8 <__aeabi_dsub>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	460b      	mov	r3, r1
 8010c42:	4610      	mov	r0, r2
 8010c44:	4619      	mov	r1, r3
 8010c46:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010c4a:	f7ef fb2f 	bl	80002ac <__adddf3>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	460b      	mov	r3, r1
 8010c52:	4610      	mov	r0, r2
 8010c54:	4619      	mov	r1, r3
 8010c56:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8010c5a:	f7ef fb25 	bl	80002a8 <__aeabi_dsub>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	4692      	mov	sl, r2
 8010c64:	469b      	mov	fp, r3
 8010c66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010c6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c6e:	f04f 0000 	mov.w	r0, #0
 8010c72:	491d      	ldr	r1, [pc, #116]	@ (8010ce8 <sgp4_predict+0x780>)
 8010c74:	f7ef fb18 	bl	80002a8 <__aeabi_dsub>
 8010c78:	4602      	mov	r2, r0
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	4610      	mov	r0, r2
 8010c7e:	4619      	mov	r1, r3
 8010c80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	f7ef fb0e 	bl	80002a8 <__aeabi_dsub>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	460b      	mov	r3, r1
 8010c90:	4650      	mov	r0, sl
 8010c92:	4659      	mov	r1, fp
 8010c94:	f7ef fdea 	bl	800086c <__aeabi_ddiv>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8010ca0:	460e      	mov	r6, r1
 8010ca2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8010ca6:	f7ef fb01 	bl	80002ac <__adddf3>
 8010caa:	4602      	mov	r2, r0
 8010cac:	460b      	mov	r3, r1
 8010cae:	e946 2302 	strd	r2, r3, [r6, #-8]

		if (fabs(epw-temp2)<= E6A)
 8010cb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8010cbc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010cc0:	f7ef faf2 	bl	80002a8 <__aeabi_dsub>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4690      	mov	r8, r2
 8010cca:	e00f      	b.n	8010cec <sgp4_predict+0x784>
 8010ccc:	f3af 8000 	nop.w
 8010cd0:	00000000 	.word	0x00000000
 8010cd4:	40000000 	.word	0x40000000
 8010cd8:	00000000 	.word	0x00000000
 8010cdc:	3ff80000 	.word	0x3ff80000
 8010ce0:	d08dcacf 	.word	0xd08dcacf
 8010ce4:	3fb309b5 	.word	0x3fb309b5
 8010ce8:	3ff00000 	.word	0x3ff00000
 8010cec:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8010cf0:	a30d      	add	r3, pc, #52	@ (adr r3, 8010d28 <sgp4_predict+0x7c0>)
 8010cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	4649      	mov	r1, r9
 8010cfa:	f7ef ff09 	bl	8000b10 <__aeabi_dcmple>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d115      	bne.n	8010d30 <sgp4_predict+0x7c8>
			break;

		temp2=epw;
 8010d04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010d08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d0c:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

	} while (i++<10);
 8010d10:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8010d14:	1c5a      	adds	r2, r3, #1
 8010d16:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8010d1a:	2b09      	cmp	r3, #9
 8010d1c:	f77f af4a 	ble.w	8010bb4 <sgp4_predict+0x64c>
 8010d20:	e007      	b.n	8010d32 <sgp4_predict+0x7ca>
 8010d22:	bf00      	nop
 8010d24:	f3af 8000 	nop.w
 8010d28:	a0b5ed8d 	.word	0xa0b5ed8d
 8010d2c:	3eb0c6f7 	.word	0x3eb0c6f7
			break;
 8010d30:	bf00      	nop

	/* Short period preliminary quantities */
	ecose=temp5+temp6;
 8010d32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010d36:	461e      	mov	r6, r3
 8010d38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010d4a:	f7ef faaf 	bl	80002ac <__adddf3>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	460b      	mov	r3, r1
 8010d52:	e9c6 2300 	strd	r2, r3, [r6]
	esine=temp3-temp4;
 8010d56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010d5a:	461e      	mov	r6, r3
 8010d5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d64:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8010d68:	f7ef fa9e 	bl	80002a8 <__aeabi_dsub>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	e946 2302 	strd	r2, r3, [r6, #-8]
	elsq=axn*axn+ayn*ayn;
 8010d74:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8010d78:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8010d7c:	f7ef fc4c 	bl	8000618 <__aeabi_dmul>
 8010d80:	4602      	mov	r2, r0
 8010d82:	460b      	mov	r3, r1
 8010d84:	4690      	mov	r8, r2
 8010d86:	4699      	mov	r9, r3
 8010d88:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8010d8c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8010d90:	f7ef fc42 	bl	8000618 <__aeabi_dmul>
 8010d94:	4602      	mov	r2, r0
 8010d96:	460b      	mov	r3, r1
 8010d98:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8010d9c:	460e      	mov	r6, r1
 8010d9e:	4640      	mov	r0, r8
 8010da0:	4649      	mov	r1, r9
 8010da2:	f7ef fa83 	bl	80002ac <__adddf3>
 8010da6:	4602      	mov	r2, r0
 8010da8:	460b      	mov	r3, r1
 8010daa:	e9c6 2300 	strd	r2, r3, [r6]
	temp=1-elsq;
 8010dae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	f04f 0000 	mov.w	r0, #0
 8010dba:	49c7      	ldr	r1, [pc, #796]	@ (80110d8 <sgp4_predict+0xb70>)
 8010dbc:	f7ef fa74 	bl	80002a8 <__aeabi_dsub>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	460b      	mov	r3, r1
 8010dc4:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	pl=a*temp;
 8010dc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010dcc:	461e      	mov	r6, r3
 8010dce:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8010dd2:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8010dd6:	f7ef fc1f 	bl	8000618 <__aeabi_dmul>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	460b      	mov	r3, r1
 8010dde:	e946 2302 	strd	r2, r3, [r6, #-8]
	r=a*(1-ecose);
 8010de2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dea:	f04f 0000 	mov.w	r0, #0
 8010dee:	49ba      	ldr	r1, [pc, #744]	@ (80110d8 <sgp4_predict+0xb70>)
 8010df0:	f7ef fa5a 	bl	80002a8 <__aeabi_dsub>
 8010df4:	4602      	mov	r2, r0
 8010df6:	460b      	mov	r3, r1
 8010df8:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8010dfc:	460e      	mov	r6, r1
 8010dfe:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8010e02:	f7ef fc09 	bl	8000618 <__aeabi_dmul>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	e9c6 2300 	strd	r2, r3, [r6]
	temp1=1/r;
 8010e0e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8010e12:	461e      	mov	r6, r3
 8010e14:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	f04f 0000 	mov.w	r0, #0
 8010e20:	49ad      	ldr	r1, [pc, #692]	@ (80110d8 <sgp4_predict+0xb70>)
 8010e22:	f7ef fd23 	bl	800086c <__aeabi_ddiv>
 8010e26:	4602      	mov	r2, r0
 8010e28:	460b      	mov	r3, r1
 8010e2a:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdot=XKE*sqrt(a)*esine*temp1;
 8010e2e:	ed97 0b6c 	vldr	d0, [r7, #432]	@ 0x1b0
 8010e32:	f00e ffe3 	bl	801fdfc <sqrt>
 8010e36:	ec51 0b10 	vmov	r0, r1, d0
 8010e3a:	a3a3      	add	r3, pc, #652	@ (adr r3, 80110c8 <sgp4_predict+0xb60>)
 8010e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e40:	f7ef fbea 	bl	8000618 <__aeabi_dmul>
 8010e44:	4602      	mov	r2, r0
 8010e46:	460b      	mov	r3, r1
 8010e48:	4610      	mov	r0, r2
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010e50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e54:	f7ef fbe0 	bl	8000618 <__aeabi_dmul>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	460b      	mov	r3, r1
 8010e5c:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 8010e60:	460e      	mov	r6, r1
 8010e62:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8010e66:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010e6a:	f7ef fbd5 	bl	8000618 <__aeabi_dmul>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	460b      	mov	r3, r1
 8010e72:	e9c6 2300 	strd	r2, r3, [r6]
	rfdot=XKE*sqrt(pl)*temp1;
 8010e76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010e7a:	ed13 0b02 	vldr	d0, [r3, #-8]
 8010e7e:	f00e ffbd 	bl	801fdfc <sqrt>
 8010e82:	ec51 0b10 	vmov	r0, r1, d0
 8010e86:	a390      	add	r3, pc, #576	@ (adr r3, 80110c8 <sgp4_predict+0xb60>)
 8010e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8c:	f7ef fbc4 	bl	8000618 <__aeabi_dmul>
 8010e90:	4602      	mov	r2, r0
 8010e92:	460b      	mov	r3, r1
 8010e94:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 8010e98:	460e      	mov	r6, r1
 8010e9a:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8010e9e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010ea2:	f7ef fbb9 	bl	8000618 <__aeabi_dmul>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=a*temp1;
 8010eae:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8010eb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010eb6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8010eba:	f7ef fbad 	bl	8000618 <__aeabi_dmul>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
	betal=sqrt(temp);
 8010ec6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8010eca:	461e      	mov	r6, r3
 8010ecc:	ed97 0b72 	vldr	d0, [r7, #456]	@ 0x1c8
 8010ed0:	f00e ff94 	bl	801fdfc <sqrt>
 8010ed4:	ed86 0b00 	vstr	d0, [r6]
	temp3=1/(1+betal);
 8010ed8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8010edc:	4619      	mov	r1, r3
 8010ede:	f04f 0200 	mov.w	r2, #0
 8010ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80110d8 <sgp4_predict+0xb70>)
 8010ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ee8:	f7ef f9e0 	bl	80002ac <__adddf3>
 8010eec:	4602      	mov	r2, r0
 8010eee:	460b      	mov	r3, r1
 8010ef0:	f04f 0000 	mov.w	r0, #0
 8010ef4:	4978      	ldr	r1, [pc, #480]	@ (80110d8 <sgp4_predict+0xb70>)
 8010ef6:	f7ef fcb9 	bl	800086c <__aeabi_ddiv>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
	cosu=temp2*(cosepw-axn+ayn*esine*temp3);
 8010f02:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8010f06:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8010f0a:	f7ef f9cd 	bl	80002a8 <__aeabi_dsub>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	460b      	mov	r3, r1
 8010f12:	4690      	mov	r8, r2
 8010f14:	4699      	mov	r9, r3
 8010f16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f1e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8010f22:	f7ef fb79 	bl	8000618 <__aeabi_dmul>
 8010f26:	4602      	mov	r2, r0
 8010f28:	460b      	mov	r3, r1
 8010f2a:	4610      	mov	r0, r2
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010f32:	f7ef fb71 	bl	8000618 <__aeabi_dmul>
 8010f36:	4602      	mov	r2, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	4640      	mov	r0, r8
 8010f3c:	4649      	mov	r1, r9
 8010f3e:	f7ef f9b5 	bl	80002ac <__adddf3>
 8010f42:	4602      	mov	r2, r0
 8010f44:	460b      	mov	r3, r1
 8010f46:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8010f4a:	460e      	mov	r6, r1
 8010f4c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8010f50:	f7ef fb62 	bl	8000618 <__aeabi_dmul>
 8010f54:	4602      	mov	r2, r0
 8010f56:	460b      	mov	r3, r1
 8010f58:	e946 2302 	strd	r2, r3, [r6, #-8]
	sinu=temp2*(sinepw-ayn-axn*esine*temp3);
 8010f5c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8010f60:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8010f64:	f7ef f9a0 	bl	80002a8 <__aeabi_dsub>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	4690      	mov	r8, r2
 8010f6e:	4699      	mov	r9, r3
 8010f70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f78:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8010f7c:	f7ef fb4c 	bl	8000618 <__aeabi_dmul>
 8010f80:	4602      	mov	r2, r0
 8010f82:	460b      	mov	r3, r1
 8010f84:	4610      	mov	r0, r2
 8010f86:	4619      	mov	r1, r3
 8010f88:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8010f8c:	f7ef fb44 	bl	8000618 <__aeabi_dmul>
 8010f90:	4602      	mov	r2, r0
 8010f92:	460b      	mov	r3, r1
 8010f94:	4640      	mov	r0, r8
 8010f96:	4649      	mov	r1, r9
 8010f98:	f7ef f986 	bl	80002a8 <__aeabi_dsub>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8010fa4:	460e      	mov	r6, r1
 8010fa6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8010faa:	f7ef fb35 	bl	8000618 <__aeabi_dmul>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	e9c6 2300 	strd	r2, r3, [r6]
	u=atan2(sinu,cosu);
 8010fb6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8010fba:	461e      	mov	r6, r3
 8010fbc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8010fc6:	ed12 1b02 	vldr	d1, [r2, #-8]
 8010fca:	ed93 0b00 	vldr	d0, [r3]
 8010fce:	f00e fdeb 	bl	801fba8 <atan2>
 8010fd2:	ed06 0b02 	vstr	d0, [r6, #-8]
	sin2u=2*sinu*cosu;
 8010fd6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8010fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fde:	4602      	mov	r2, r0
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	f7ef f963 	bl	80002ac <__adddf3>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8010fee:	460e      	mov	r6, r1
 8010ff0:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8010ff4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8010ff8:	f7ef fb0e 	bl	8000618 <__aeabi_dmul>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	460b      	mov	r3, r1
 8011000:	e9c6 2300 	strd	r2, r3, [r6]
	cos2u=2*cosu*cosu-1;
 8011004:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8011008:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801100c:	4602      	mov	r2, r0
 801100e:	460b      	mov	r3, r1
 8011010:	f7ef f94c 	bl	80002ac <__adddf3>
 8011014:	4602      	mov	r2, r0
 8011016:	460b      	mov	r3, r1
 8011018:	4610      	mov	r0, r2
 801101a:	4619      	mov	r1, r3
 801101c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8011020:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011024:	f7ef faf8 	bl	8000618 <__aeabi_dmul>
 8011028:	4602      	mov	r2, r0
 801102a:	460b      	mov	r3, r1
 801102c:	4610      	mov	r0, r2
 801102e:	4619      	mov	r1, r3
 8011030:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8011034:	461e      	mov	r6, r3
 8011036:	f04f 0200 	mov.w	r2, #0
 801103a:	4b27      	ldr	r3, [pc, #156]	@ (80110d8 <sgp4_predict+0xb70>)
 801103c:	f7ef f934 	bl	80002a8 <__aeabi_dsub>
 8011040:	4602      	mov	r2, r0
 8011042:	460b      	mov	r3, r1
 8011044:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp=1/pl;
 8011048:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801104c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011050:	f04f 0000 	mov.w	r0, #0
 8011054:	4920      	ldr	r1, [pc, #128]	@ (80110d8 <sgp4_predict+0xb70>)
 8011056:	f7ef fc09 	bl	800086c <__aeabi_ddiv>
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	e9c7 2372 	strd	r2, r3, [r7, #456]	@ 0x1c8
	temp1=CK2*temp;
 8011062:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8011066:	461e      	mov	r6, r3
 8011068:	a319      	add	r3, pc, #100	@ (adr r3, 80110d0 <sgp4_predict+0xb68>)
 801106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8011072:	f7ef fad1 	bl	8000618 <__aeabi_dmul>
 8011076:	4602      	mov	r2, r0
 8011078:	460b      	mov	r3, r1
 801107a:	e946 2302 	strd	r2, r3, [r6, #-8]
	temp2=temp1*temp;
 801107e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8011082:	4619      	mov	r1, r3
 8011084:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8011088:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801108c:	f7ef fac4 	bl	8000618 <__aeabi_dmul>
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

	/* Update for short periodics */
	rk=r*(1-1.5*temp2*betal*m->x3thm1)+0.5*temp1*m->x1mth2*cos2u;
 8011098:	f04f 0200 	mov.w	r2, #0
 801109c:	4b0f      	ldr	r3, [pc, #60]	@ (80110dc <sgp4_predict+0xb74>)
 801109e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80110a2:	f7ef fab9 	bl	8000618 <__aeabi_dmul>
 80110a6:	4602      	mov	r2, r0
 80110a8:	460b      	mov	r3, r1
 80110aa:	4610      	mov	r0, r2
 80110ac:	4619      	mov	r1, r3
 80110ae:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80110b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b6:	f7ef faaf 	bl	8000618 <__aeabi_dmul>
 80110ba:	4602      	mov	r2, r0
 80110bc:	460b      	mov	r3, r1
 80110be:	4610      	mov	r0, r2
 80110c0:	4619      	mov	r1, r3
 80110c2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80110c6:	e00b      	b.n	80110e0 <sgp4_predict+0xb78>
 80110c8:	d08dcacf 	.word	0xd08dcacf
 80110cc:	3fb309b5 	.word	0x3fb309b5
 80110d0:	dd20e5a5 	.word	0xdd20e5a5
 80110d4:	3f41bcd1 	.word	0x3f41bcd1
 80110d8:	3ff00000 	.word	0x3ff00000
 80110dc:	3ff80000 	.word	0x3ff80000
 80110e0:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 80110ea:	f7ef fa95 	bl	8000618 <__aeabi_dmul>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	f04f 0000 	mov.w	r0, #0
 80110f6:	49d0      	ldr	r1, [pc, #832]	@ (8011438 <sgp4_predict+0xed0>)
 80110f8:	f7ef f8d6 	bl	80002a8 <__aeabi_dsub>
 80110fc:	4602      	mov	r2, r0
 80110fe:	460b      	mov	r3, r1
 8011100:	4610      	mov	r0, r2
 8011102:	4619      	mov	r1, r3
 8011104:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8011108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110c:	f7ef fa84 	bl	8000618 <__aeabi_dmul>
 8011110:	4602      	mov	r2, r0
 8011112:	460b      	mov	r3, r1
 8011114:	4690      	mov	r8, r2
 8011116:	4699      	mov	r9, r3
 8011118:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801111c:	4619      	mov	r1, r3
 801111e:	f04f 0200 	mov.w	r2, #0
 8011122:	4bc6      	ldr	r3, [pc, #792]	@ (801143c <sgp4_predict+0xed4>)
 8011124:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8011128:	f7ef fa76 	bl	8000618 <__aeabi_dmul>
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	4610      	mov	r0, r2
 8011132:	4619      	mov	r1, r3
 8011134:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8011138:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8011142:	f7ef fa69 	bl	8000618 <__aeabi_dmul>
 8011146:	4602      	mov	r2, r0
 8011148:	460b      	mov	r3, r1
 801114a:	4610      	mov	r0, r2
 801114c:	4619      	mov	r1, r3
 801114e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8011152:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011156:	f7ef fa5f 	bl	8000618 <__aeabi_dmul>
 801115a:	4602      	mov	r2, r0
 801115c:	460b      	mov	r3, r1
 801115e:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8011162:	460e      	mov	r6, r1
 8011164:	4640      	mov	r0, r8
 8011166:	4649      	mov	r1, r9
 8011168:	f7ef f8a0 	bl	80002ac <__adddf3>
 801116c:	4602      	mov	r2, r0
 801116e:	460b      	mov	r3, r1
 8011170:	e9c6 2300 	strd	r2, r3, [r6]
	uk=u-0.25*temp2*m->x7thm1*sin2u;
 8011174:	f04f 0200 	mov.w	r2, #0
 8011178:	4bb1      	ldr	r3, [pc, #708]	@ (8011440 <sgp4_predict+0xed8>)
 801117a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801117e:	f7ef fa4b 	bl	8000618 <__aeabi_dmul>
 8011182:	4602      	mov	r2, r0
 8011184:	460b      	mov	r3, r1
 8011186:	4610      	mov	r0, r2
 8011188:	4619      	mov	r1, r3
 801118a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801118e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8011198:	f7ef fa3e 	bl	8000618 <__aeabi_dmul>
 801119c:	4602      	mov	r2, r0
 801119e:	460b      	mov	r3, r1
 80111a0:	4610      	mov	r0, r2
 80111a2:	4619      	mov	r1, r3
 80111a4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ac:	f7ef fa34 	bl	8000618 <__aeabi_dmul>
 80111b0:	4602      	mov	r2, r0
 80111b2:	460b      	mov	r3, r1
 80111b4:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80111b8:	460e      	mov	r6, r1
 80111ba:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 80111be:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80111c2:	f7ef f871 	bl	80002a8 <__aeabi_dsub>
 80111c6:	4602      	mov	r2, r0
 80111c8:	460b      	mov	r3, r1
 80111ca:	e946 2302 	strd	r2, r3, [r6, #-8]
	xnodek=xnode+1.5*temp2*m->cosio*sin2u;
 80111ce:	f04f 0200 	mov.w	r2, #0
 80111d2:	4b9c      	ldr	r3, [pc, #624]	@ (8011444 <sgp4_predict+0xedc>)
 80111d4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80111d8:	f7ef fa1e 	bl	8000618 <__aeabi_dmul>
 80111dc:	4602      	mov	r2, r0
 80111de:	460b      	mov	r3, r1
 80111e0:	4610      	mov	r0, r2
 80111e2:	4619      	mov	r1, r3
 80111e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80111e8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80111f2:	f7ef fa11 	bl	8000618 <__aeabi_dmul>
 80111f6:	4602      	mov	r2, r0
 80111f8:	460b      	mov	r3, r1
 80111fa:	4610      	mov	r0, r2
 80111fc:	4619      	mov	r1, r3
 80111fe:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8011202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011206:	f7ef fa07 	bl	8000618 <__aeabi_dmul>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8011212:	460e      	mov	r6, r1
 8011214:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8011218:	f7ef f848 	bl	80002ac <__adddf3>
 801121c:	4602      	mov	r2, r0
 801121e:	460b      	mov	r3, r1
 8011220:	e9c6 2300 	strd	r2, r3, [r6]
	xinck=m->xincl+1.5*temp2*m->cosio*m->sinio*cos2u;
 8011224:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8011228:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	e9d3 893c 	ldrd	r8, r9, [r3, #240]	@ 0xf0
 8011232:	f04f 0200 	mov.w	r2, #0
 8011236:	4b83      	ldr	r3, [pc, #524]	@ (8011444 <sgp4_predict+0xedc>)
 8011238:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801123c:	f7ef f9ec 	bl	8000618 <__aeabi_dmul>
 8011240:	4602      	mov	r2, r0
 8011242:	460b      	mov	r3, r1
 8011244:	4610      	mov	r0, r2
 8011246:	4619      	mov	r1, r3
 8011248:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801124c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8011256:	f7ef f9df 	bl	8000618 <__aeabi_dmul>
 801125a:	4602      	mov	r2, r0
 801125c:	460b      	mov	r3, r1
 801125e:	4610      	mov	r0, r2
 8011260:	4619      	mov	r1, r3
 8011262:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8011266:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8011270:	f7ef f9d2 	bl	8000618 <__aeabi_dmul>
 8011274:	4602      	mov	r2, r0
 8011276:	460b      	mov	r3, r1
 8011278:	4610      	mov	r0, r2
 801127a:	4619      	mov	r1, r3
 801127c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8011280:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011284:	f7ef f9c8 	bl	8000618 <__aeabi_dmul>
 8011288:	4602      	mov	r2, r0
 801128a:	460b      	mov	r3, r1
 801128c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8011290:	460e      	mov	r6, r1
 8011292:	4640      	mov	r0, r8
 8011294:	4649      	mov	r1, r9
 8011296:	f7ef f809 	bl	80002ac <__adddf3>
 801129a:	4602      	mov	r2, r0
 801129c:	460b      	mov	r3, r1
 801129e:	e946 2302 	strd	r2, r3, [r6, #-8]
	rdotk=rdot-xn*temp1*m->x1mth2*sin2u;
 80112a2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80112a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80112aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80112ae:	f7ef f9b3 	bl	8000618 <__aeabi_dmul>
 80112b2:	4602      	mov	r2, r0
 80112b4:	460b      	mov	r3, r1
 80112b6:	4610      	mov	r0, r2
 80112b8:	4619      	mov	r1, r3
 80112ba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80112be:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80112c8:	f7ef f9a6 	bl	8000618 <__aeabi_dmul>
 80112cc:	4602      	mov	r2, r0
 80112ce:	460b      	mov	r3, r1
 80112d0:	4610      	mov	r0, r2
 80112d2:	4619      	mov	r1, r3
 80112d4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f7ef f99c 	bl	8000618 <__aeabi_dmul>
 80112e0:	4602      	mov	r2, r0
 80112e2:	460b      	mov	r3, r1
 80112e4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80112e8:	460e      	mov	r6, r1
 80112ea:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80112ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112f2:	f7ee ffd9 	bl	80002a8 <__aeabi_dsub>
 80112f6:	4602      	mov	r2, r0
 80112f8:	460b      	mov	r3, r1
 80112fa:	e9c6 2300 	strd	r2, r3, [r6]
	rfdotk=rfdot+xn*temp1*(m->x1mth2*cos2u+1.5*m->x3thm1);
 80112fe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8011302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011306:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 801130a:	f7ef f985 	bl	8000618 <__aeabi_dmul>
 801130e:	4602      	mov	r2, r0
 8011310:	460b      	mov	r3, r1
 8011312:	4690      	mov	r8, r2
 8011314:	4699      	mov	r9, r3
 8011316:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801131a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8011324:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8011328:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801132c:	f7ef f974 	bl	8000618 <__aeabi_dmul>
 8011330:	4602      	mov	r2, r0
 8011332:	460b      	mov	r3, r1
 8011334:	4692      	mov	sl, r2
 8011336:	469b      	mov	fp, r3
 8011338:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801133c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 8011346:	f04f 0200 	mov.w	r2, #0
 801134a:	4b3e      	ldr	r3, [pc, #248]	@ (8011444 <sgp4_predict+0xedc>)
 801134c:	f7ef f964 	bl	8000618 <__aeabi_dmul>
 8011350:	4602      	mov	r2, r0
 8011352:	460b      	mov	r3, r1
 8011354:	4650      	mov	r0, sl
 8011356:	4659      	mov	r1, fp
 8011358:	f7ee ffa8 	bl	80002ac <__adddf3>
 801135c:	4602      	mov	r2, r0
 801135e:	460b      	mov	r3, r1
 8011360:	4640      	mov	r0, r8
 8011362:	4649      	mov	r1, r9
 8011364:	f7ef f958 	bl	8000618 <__aeabi_dmul>
 8011368:	4602      	mov	r2, r0
 801136a:	460b      	mov	r3, r1
 801136c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8011370:	460e      	mov	r6, r1
 8011372:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 8011376:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801137a:	f7ee ff97 	bl	80002ac <__adddf3>
 801137e:	4602      	mov	r2, r0
 8011380:	460b      	mov	r3, r1
 8011382:	e946 2302 	strd	r2, r3, [r6, #-8]

	/* Orientation vectors */
	sinuk=sin(uk);
 8011386:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801138a:	461e      	mov	r6, r3
 801138c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8011390:	ed13 0b02 	vldr	d0, [r3, #-8]
 8011394:	f00e ff54 	bl	8020240 <sin>
 8011398:	ed86 0b00 	vstr	d0, [r6]
	cosuk=cos(uk);
 801139c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80113a0:	461e      	mov	r6, r3
 80113a2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80113a6:	ed13 0b02 	vldr	d0, [r3, #-8]
 80113aa:	f00e feed 	bl	8020188 <cos>
 80113ae:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinik=sin(xinck);
 80113b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80113b6:	461e      	mov	r6, r3
 80113b8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80113bc:	ed13 0b02 	vldr	d0, [r3, #-8]
 80113c0:	f00e ff3e 	bl	8020240 <sin>
 80113c4:	ed86 0b00 	vstr	d0, [r6]
	cosik=cos(xinck);
 80113c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80113cc:	461e      	mov	r6, r3
 80113ce:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80113d2:	ed13 0b02 	vldr	d0, [r3, #-8]
 80113d6:	f00e fed7 	bl	8020188 <cos>
 80113da:	ed06 0b02 	vstr	d0, [r6, #-8]
	sinnok=sin(xnodek);
 80113de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80113e2:	461e      	mov	r6, r3
 80113e4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80113e8:	ed93 0b00 	vldr	d0, [r3]
 80113ec:	f00e ff28 	bl	8020240 <sin>
 80113f0:	ed86 0b00 	vstr	d0, [r6]
	cosnok=cos(xnodek);
 80113f4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80113f8:	461e      	mov	r6, r3
 80113fa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80113fe:	ed93 0b00 	vldr	d0, [r3]
 8011402:	f00e fec1 	bl	8020188 <cos>
 8011406:	ed06 0b02 	vstr	d0, [r6, #-8]
	xmx=-sinnok*cosik;
 801140a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801140e:	681c      	ldr	r4, [r3, #0]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8011416:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801141a:	461e      	mov	r6, r3
 801141c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8011420:	4619      	mov	r1, r3
 8011422:	4622      	mov	r2, r4
 8011424:	462b      	mov	r3, r5
 8011426:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801142a:	f7ef f8f5 	bl	8000618 <__aeabi_dmul>
 801142e:	4602      	mov	r2, r0
 8011430:	460b      	mov	r3, r1
 8011432:	e9c6 2300 	strd	r2, r3, [r6]
 8011436:	e007      	b.n	8011448 <sgp4_predict+0xee0>
 8011438:	3ff00000 	.word	0x3ff00000
 801143c:	3fe00000 	.word	0x3fe00000
 8011440:	3fd00000 	.word	0x3fd00000
 8011444:	3ff80000 	.word	0x3ff80000
	xmy=cosnok*cosik;
 8011448:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801144c:	461c      	mov	r4, r3
 801144e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8011452:	4619      	mov	r1, r3
 8011454:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8011458:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801145c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8011460:	f7ef f8da 	bl	8000618 <__aeabi_dmul>
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	e944 2302 	strd	r2, r3, [r4, #-8]
	ux=xmx*sinuk+cosnok*cosuk;
 801146c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011470:	4619      	mov	r1, r3
 8011472:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801147e:	f7ef f8cb 	bl	8000618 <__aeabi_dmul>
 8011482:	4602      	mov	r2, r0
 8011484:	460b      	mov	r3, r1
 8011486:	4614      	mov	r4, r2
 8011488:	461d      	mov	r5, r3
 801148a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801148e:	4619      	mov	r1, r3
 8011490:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011494:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011498:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801149c:	f7ef f8bc 	bl	8000618 <__aeabi_dmul>
 80114a0:	4602      	mov	r2, r0
 80114a2:	460b      	mov	r3, r1
 80114a4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80114a8:	460e      	mov	r6, r1
 80114aa:	4620      	mov	r0, r4
 80114ac:	4629      	mov	r1, r5
 80114ae:	f7ee fefd 	bl	80002ac <__adddf3>
 80114b2:	4602      	mov	r2, r0
 80114b4:	460b      	mov	r3, r1
 80114b6:	e9c6 2300 	strd	r2, r3, [r6]
	uy=xmy*sinuk+sinnok*cosuk;
 80114ba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80114be:	4619      	mov	r1, r3
 80114c0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80114cc:	f7ef f8a4 	bl	8000618 <__aeabi_dmul>
 80114d0:	4602      	mov	r2, r0
 80114d2:	460b      	mov	r3, r1
 80114d4:	4614      	mov	r4, r2
 80114d6:	461d      	mov	r5, r3
 80114d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80114dc:	4619      	mov	r1, r3
 80114de:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80114e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80114e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114ea:	f7ef f895 	bl	8000618 <__aeabi_dmul>
 80114ee:	4602      	mov	r2, r0
 80114f0:	460b      	mov	r3, r1
 80114f2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80114f6:	460e      	mov	r6, r1
 80114f8:	4620      	mov	r0, r4
 80114fa:	4629      	mov	r1, r5
 80114fc:	f7ee fed6 	bl	80002ac <__adddf3>
 8011500:	4602      	mov	r2, r0
 8011502:	460b      	mov	r3, r1
 8011504:	e946 2302 	strd	r2, r3, [r6, #-8]
	uz=sinik*sinuk;
 8011508:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801150c:	461c      	mov	r4, r3
 801150e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8011512:	4619      	mov	r1, r3
 8011514:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011520:	f7ef f87a 	bl	8000618 <__aeabi_dmul>
 8011524:	4602      	mov	r2, r0
 8011526:	460b      	mov	r3, r1
 8011528:	e9c4 2300 	strd	r2, r3, [r4]
	vx=xmx*cosuk-cosnok*sinuk;
 801152c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011530:	4619      	mov	r1, r3
 8011532:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801153a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801153e:	f7ef f86b 	bl	8000618 <__aeabi_dmul>
 8011542:	4602      	mov	r2, r0
 8011544:	460b      	mov	r3, r1
 8011546:	4614      	mov	r4, r2
 8011548:	461d      	mov	r5, r3
 801154a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801154e:	4619      	mov	r1, r3
 8011550:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011558:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801155c:	f7ef f85c 	bl	8000618 <__aeabi_dmul>
 8011560:	4602      	mov	r2, r0
 8011562:	460b      	mov	r3, r1
 8011564:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011568:	460e      	mov	r6, r1
 801156a:	4620      	mov	r0, r4
 801156c:	4629      	mov	r1, r5
 801156e:	f7ee fe9b 	bl	80002a8 <__aeabi_dsub>
 8011572:	4602      	mov	r2, r0
 8011574:	460b      	mov	r3, r1
 8011576:	e946 2302 	strd	r2, r3, [r6, #-8]
	vy=xmy*cosuk-sinnok*sinuk;
 801157a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801157e:	4619      	mov	r1, r3
 8011580:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011584:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011588:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 801158c:	f7ef f844 	bl	8000618 <__aeabi_dmul>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4614      	mov	r4, r2
 8011596:	461d      	mov	r5, r3
 8011598:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801159c:	4619      	mov	r1, r3
 801159e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80115a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115aa:	f7ef f835 	bl	8000618 <__aeabi_dmul>
 80115ae:	4602      	mov	r2, r0
 80115b0:	460b      	mov	r3, r1
 80115b2:	f107 0120 	add.w	r1, r7, #32
 80115b6:	460e      	mov	r6, r1
 80115b8:	4620      	mov	r0, r4
 80115ba:	4629      	mov	r1, r5
 80115bc:	f7ee fe74 	bl	80002a8 <__aeabi_dsub>
 80115c0:	4602      	mov	r2, r0
 80115c2:	460b      	mov	r3, r1
 80115c4:	e9c6 2300 	strd	r2, r3, [r6]
	vz=sinik*cosuk;
 80115c8:	f107 0320 	add.w	r3, r7, #32
 80115cc:	461c      	mov	r4, r3
 80115ce:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80115d2:	4619      	mov	r1, r3
 80115d4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80115d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80115dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115e0:	f7ef f81a 	bl	8000618 <__aeabi_dmul>
 80115e4:	4602      	mov	r2, r0
 80115e6:	460b      	mov	r3, r1
 80115e8:	e944 2302 	strd	r2, r3, [r4, #-8]

	/* Position and velocity */
	output->pos[0] = rk*ux;
 80115ec:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80115f0:	4619      	mov	r1, r3
 80115f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80115f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115fe:	f7ef f80b 	bl	8000618 <__aeabi_dmul>
 8011602:	4602      	mov	r2, r0
 8011604:	460b      	mov	r3, r1
 8011606:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 801160a:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 801160e:	6809      	ldr	r1, [r1, #0]
 8011610:	e9c1 2306 	strd	r2, r3, [r1, #24]
	output->pos[1] = rk*uy;
 8011614:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8011618:	4619      	mov	r1, r3
 801161a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801161e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011622:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011626:	f7ee fff7 	bl	8000618 <__aeabi_dmul>
 801162a:	4602      	mov	r2, r0
 801162c:	460b      	mov	r3, r1
 801162e:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8011632:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 8011636:	6809      	ldr	r1, [r1, #0]
 8011638:	e9c1 2308 	strd	r2, r3, [r1, #32]
	output->pos[2] = rk*uz;
 801163c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8011640:	4619      	mov	r1, r3
 8011642:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801164e:	f7ee ffe3 	bl	8000618 <__aeabi_dmul>
 8011652:	4602      	mov	r2, r0
 8011654:	460b      	mov	r3, r1
 8011656:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 801165a:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 801165e:	6809      	ldr	r1, [r1, #0]
 8011660:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	output->vel[0] = rdotk*ux+rfdotk*vx;
 8011664:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8011668:	4619      	mov	r1, r3
 801166a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011676:	f7ee ffcf 	bl	8000618 <__aeabi_dmul>
 801167a:	4602      	mov	r2, r0
 801167c:	460b      	mov	r3, r1
 801167e:	4614      	mov	r4, r2
 8011680:	461d      	mov	r5, r3
 8011682:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8011686:	4619      	mov	r1, r3
 8011688:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801168c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011690:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8011694:	f7ee ffc0 	bl	8000618 <__aeabi_dmul>
 8011698:	4602      	mov	r2, r0
 801169a:	460b      	mov	r3, r1
 801169c:	4620      	mov	r0, r4
 801169e:	4629      	mov	r1, r5
 80116a0:	f7ee fe04 	bl	80002ac <__adddf3>
 80116a4:	4602      	mov	r2, r0
 80116a6:	460b      	mov	r3, r1
 80116a8:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 80116ac:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 80116b0:	6809      	ldr	r1, [r1, #0]
 80116b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	output->vel[1] = rdotk*uy+rfdotk*vy;
 80116b6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80116ba:	4619      	mov	r1, r3
 80116bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80116c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80116c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116c8:	f7ee ffa6 	bl	8000618 <__aeabi_dmul>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	4614      	mov	r4, r2
 80116d2:	461d      	mov	r5, r3
 80116d4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80116d8:	4619      	mov	r1, r3
 80116da:	f107 0320 	add.w	r3, r7, #32
 80116de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80116e6:	f7ee ff97 	bl	8000618 <__aeabi_dmul>
 80116ea:	4602      	mov	r2, r0
 80116ec:	460b      	mov	r3, r1
 80116ee:	4620      	mov	r0, r4
 80116f0:	4629      	mov	r1, r5
 80116f2:	f7ee fddb 	bl	80002ac <__adddf3>
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 80116fe:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 8011702:	6809      	ldr	r1, [r1, #0]
 8011704:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	output->vel[2] = rdotk*uz+rfdotk*vz;
 8011708:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801170c:	4619      	mov	r1, r3
 801170e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011716:	e9d1 0100 	ldrd	r0, r1, [r1]
 801171a:	f7ee ff7d 	bl	8000618 <__aeabi_dmul>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	4614      	mov	r4, r2
 8011724:	461d      	mov	r5, r3
 8011726:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801172a:	4619      	mov	r1, r3
 801172c:	f107 0320 	add.w	r3, r7, #32
 8011730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011734:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8011738:	f7ee ff6e 	bl	8000618 <__aeabi_dmul>
 801173c:	4602      	mov	r2, r0
 801173e:	460b      	mov	r3, r1
 8011740:	4620      	mov	r0, r4
 8011742:	4629      	mov	r1, r5
 8011744:	f7ee fdb2 	bl	80002ac <__adddf3>
 8011748:	4602      	mov	r2, r0
 801174a:	460b      	mov	r3, r1
 801174c:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8011750:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 8011754:	6809      	ldr	r1, [r1, #0]
 8011756:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	/* Phase in radians */
	output->phase=xlt-xnode-omgadf+TWO_PI;
 801175a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 801175e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8011762:	f7ee fda1 	bl	80002a8 <__aeabi_dsub>
 8011766:	4602      	mov	r2, r0
 8011768:	460b      	mov	r3, r1
 801176a:	4610      	mov	r0, r2
 801176c:	4619      	mov	r1, r3
 801176e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8011772:	f7ee fd99 	bl	80002a8 <__aeabi_dsub>
 8011776:	4602      	mov	r2, r0
 8011778:	460b      	mov	r3, r1
 801177a:	4610      	mov	r0, r2
 801177c:	4619      	mov	r1, r3
 801177e:	a338      	add	r3, pc, #224	@ (adr r3, 8011860 <sgp4_predict+0x12f8>)
 8011780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011784:	f7ee fd92 	bl	80002ac <__adddf3>
 8011788:	4602      	mov	r2, r0
 801178a:	460b      	mov	r3, r1
 801178c:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8011790:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 8011794:	6809      	ldr	r1, [r1, #0]
 8011796:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	if (output->phase<0.0)
 801179a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801179e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80117a8:	f04f 0200 	mov.w	r2, #0
 80117ac:	f04f 0300 	mov.w	r3, #0
 80117b0:	f7ef f9a4 	bl	8000afc <__aeabi_dcmplt>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d014      	beq.n	80117e4 <sgp4_predict+0x127c>
		output->phase+=TWO_PI;
 80117ba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80117be:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80117c8:	a325      	add	r3, pc, #148	@ (adr r3, 8011860 <sgp4_predict+0x12f8>)
 80117ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ce:	f7ee fd6d 	bl	80002ac <__adddf3>
 80117d2:	4602      	mov	r2, r0
 80117d4:	460b      	mov	r3, r1
 80117d6:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 80117da:	f5a1 710c 	sub.w	r1, r1, #560	@ 0x230
 80117de:	6809      	ldr	r1, [r1, #0]
 80117e0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	output->phase=FMod2p(output->phase);
 80117e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80117e8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 80117f2:	eeb0 0a47 	vmov.f32	s0, s14
 80117f6:	eef0 0a67 	vmov.f32	s1, s15
 80117fa:	f000 fe51 	bl	80124a0 <FMod2p>
 80117fe:	eeb0 7a40 	vmov.f32	s14, s0
 8011802:	eef0 7a60 	vmov.f32	s15, s1
 8011806:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801180a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

	output->xinck = xinck;
 8011814:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8011818:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801181c:	6819      	ldr	r1, [r3, #0]
 801181e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8011822:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011826:	e9c1 2300 	strd	r2, r3, [r1]
	output->omgadf = omgadf;
 801182a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801182e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011832:	6819      	ldr	r1, [r3, #0]
 8011834:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8011838:	e9c1 2302 	strd	r2, r3, [r1, #8]
	output->xnodek = xnodek;
 801183c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8011840:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011844:	6819      	ldr	r1, [r3, #0]
 8011846:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184e:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 8011852:	bf00      	nop
 8011854:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8011858:	46bd      	mov	sp, r7
 801185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801185e:	bf00      	nop
 8011860:	54442d18 	.word	0x54442d18
 8011864:	401921fb 	.word	0x401921fb

08011868 <Delta_ET>:
 * The function Delta_ET has been added to allow calculations on the position of the sun.  It provides the difference between UT (approximately the same as UTC) and ET (now referred to as TDT). This function is based on a least squares fit of data from 1950 to 1991 and will need to be updated periodically. Values determined using data from 1950-1991 in the 1990 Astronomical Almanac.  See DELTA_ET.WQ1 for details.
 *
 * \copyright GPLv2+
 **/
double Delta_ET(double year)
{
 8011868:	b5b0      	push	{r4, r5, r7, lr}
 801186a:	b084      	sub	sp, #16
 801186c:	af00      	add	r7, sp, #0
 801186e:	ed87 0b00 	vstr	d0, [r7]
	double delta_et;

	delta_et=26.465+0.747622*(year-1950)+1.886913*sin(2*M_PI*(year-1975)/33);
 8011872:	a332      	add	r3, pc, #200	@ (adr r3, 801193c <Delta_ET+0xd4>)
 8011874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011878:	e9d7 0100 	ldrd	r0, r1, [r7]
 801187c:	f7ee fd14 	bl	80002a8 <__aeabi_dsub>
 8011880:	4602      	mov	r2, r0
 8011882:	460b      	mov	r3, r1
 8011884:	4610      	mov	r0, r2
 8011886:	4619      	mov	r1, r3
 8011888:	a32e      	add	r3, pc, #184	@ (adr r3, 8011944 <Delta_ET+0xdc>)
 801188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188e:	f7ee fec3 	bl	8000618 <__aeabi_dmul>
 8011892:	4602      	mov	r2, r0
 8011894:	460b      	mov	r3, r1
 8011896:	4610      	mov	r0, r2
 8011898:	4619      	mov	r1, r3
 801189a:	a32c      	add	r3, pc, #176	@ (adr r3, 801194c <Delta_ET+0xe4>)
 801189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a0:	f7ee fd04 	bl	80002ac <__adddf3>
 80118a4:	4602      	mov	r2, r0
 80118a6:	460b      	mov	r3, r1
 80118a8:	4614      	mov	r4, r2
 80118aa:	461d      	mov	r5, r3
 80118ac:	a329      	add	r3, pc, #164	@ (adr r3, 8011954 <Delta_ET+0xec>)
 80118ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118b6:	f7ee fcf7 	bl	80002a8 <__aeabi_dsub>
 80118ba:	4602      	mov	r2, r0
 80118bc:	460b      	mov	r3, r1
 80118be:	4610      	mov	r0, r2
 80118c0:	4619      	mov	r1, r3
 80118c2:	a326      	add	r3, pc, #152	@ (adr r3, 801195c <Delta_ET+0xf4>)
 80118c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c8:	f7ee fea6 	bl	8000618 <__aeabi_dmul>
 80118cc:	4602      	mov	r2, r0
 80118ce:	460b      	mov	r3, r1
 80118d0:	4610      	mov	r0, r2
 80118d2:	4619      	mov	r1, r3
 80118d4:	f04f 0200 	mov.w	r2, #0
 80118d8:	4b17      	ldr	r3, [pc, #92]	@ (8011938 <Delta_ET+0xd0>)
 80118da:	f7ee ffc7 	bl	800086c <__aeabi_ddiv>
 80118de:	4602      	mov	r2, r0
 80118e0:	460b      	mov	r3, r1
 80118e2:	ec43 2b17 	vmov	d7, r2, r3
 80118e6:	eeb0 0a47 	vmov.f32	s0, s14
 80118ea:	eef0 0a67 	vmov.f32	s1, s15
 80118ee:	f00e fca7 	bl	8020240 <sin>
 80118f2:	ec51 0b10 	vmov	r0, r1, d0
 80118f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8011930 <Delta_ET+0xc8>)
 80118f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fc:	f7ee fe8c 	bl	8000618 <__aeabi_dmul>
 8011900:	4602      	mov	r2, r0
 8011902:	460b      	mov	r3, r1
 8011904:	4620      	mov	r0, r4
 8011906:	4629      	mov	r1, r5
 8011908:	f7ee fcd0 	bl	80002ac <__adddf3>
 801190c:	4602      	mov	r2, r0
 801190e:	460b      	mov	r3, r1
 8011910:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return delta_et;
 8011914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011918:	ec43 2b17 	vmov	d7, r2, r3
}
 801191c:	eeb0 0a47 	vmov.f32	s0, s14
 8011920:	eef0 0a67 	vmov.f32	s1, s15
 8011924:	3710      	adds	r7, #16
 8011926:	46bd      	mov	sp, r7
 8011928:	bdb0      	pop	{r4, r5, r7, pc}
 801192a:	bf00      	nop
 801192c:	f3af 8000 	nop.w
 8011930:	af965b21 	.word	0xaf965b21
 8011934:	3ffe30cb 	.word	0x3ffe30cb
 8011938:	40408000 	.word	0x40408000
 801193c:	00000000 	.word	0x00000000
 8011940:	409e7800 	.word	0x409e7800
 8011944:	f8f8a4c2 	.word	0xf8f8a4c2
 8011948:	3fe7ec84 	.word	0x3fe7ec84
 801194c:	3d70a3d7 	.word	0x3d70a3d7
 8011950:	403a770a 	.word	0x403a770a
 8011954:	00000000 	.word	0x00000000
 8011958:	409edc00 	.word	0x409edc00
 801195c:	54442d18 	.word	0x54442d18
 8011960:	401921fb 	.word	0x401921fb
 8011964:	00000000 	.word	0x00000000

08011968 <Radians>:
 * Returns angle in radians from argument in degrees.
 *
 * \copyright GPLv2+
 **/
double Radians(double arg)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	ed87 0b00 	vstr	d0, [r7]
	/* Returns angle in radians from argument in degrees */
	return (arg*M_PI/180.0);
 8011972:	a30e      	add	r3, pc, #56	@ (adr r3, 80119ac <Radians+0x44>)
 8011974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011978:	e9d7 0100 	ldrd	r0, r1, [r7]
 801197c:	f7ee fe4c 	bl	8000618 <__aeabi_dmul>
 8011980:	4602      	mov	r2, r0
 8011982:	460b      	mov	r3, r1
 8011984:	4610      	mov	r0, r2
 8011986:	4619      	mov	r1, r3
 8011988:	f04f 0200 	mov.w	r2, #0
 801198c:	4b06      	ldr	r3, [pc, #24]	@ (80119a8 <Radians+0x40>)
 801198e:	f7ee ff6d 	bl	800086c <__aeabi_ddiv>
 8011992:	4602      	mov	r2, r0
 8011994:	460b      	mov	r3, r1
 8011996:	ec43 2b17 	vmov	d7, r2, r3
}
 801199a:	eeb0 0a47 	vmov.f32	s0, s14
 801199e:	eef0 0a67 	vmov.f32	s1, s15
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}
 80119a8:	40668000 	.word	0x40668000
 80119ac:	54442d18 	.word	0x54442d18
 80119b0:	400921fb 	.word	0x400921fb
 80119b4:	00000000 	.word	0x00000000

080119b8 <sun_predict>:
	/* Returns angle in degrees from argument in radians */
	return (arg*180.0/M_PI);
}

void sun_predict(double time, double position[3])
{
 80119b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80119bc:	b09e      	sub	sp, #120	@ 0x78
 80119be:	af00      	add	r7, sp, #0
 80119c0:	ed87 0b02 	vstr	d0, [r7, #8]
 80119c4:	6078      	str	r0, [r7, #4]
	double jul_utc = time + JULIAN_TIME_DIFF;
 80119c6:	f20f 4388 	addw	r3, pc, #1160	@ 0x488
 80119ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80119d2:	f7ee fc6b 	bl	80002ac <__adddf3>
 80119d6:	4602      	mov	r2, r0
 80119d8:	460b      	mov	r3, r1
 80119da:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double mjd = jul_utc - 2415020.0;
 80119de:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 80119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80119ea:	f7ee fc5d 	bl	80002a8 <__aeabi_dsub>
 80119ee:	4602      	mov	r2, r0
 80119f0:	460b      	mov	r3, r1
 80119f2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	double year = 1900 + mjd / 365.25;
 80119f6:	f20f 4368 	addw	r3, pc, #1128	@ 0x468
 80119fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011a02:	f7ee ff33 	bl	800086c <__aeabi_ddiv>
 8011a06:	4602      	mov	r2, r0
 8011a08:	460b      	mov	r3, r1
 8011a0a:	4610      	mov	r0, r2
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	f20f 4358 	addw	r3, pc, #1112	@ 0x458
 8011a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a16:	f7ee fc49 	bl	80002ac <__adddf3>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	double T = (mjd + Delta_ET(year) / SECONDS_PER_DAY) / 36525.0;
 8011a22:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8011a26:	f7ff ff1f 	bl	8011868 <Delta_ET>
 8011a2a:	ec51 0b10 	vmov	r0, r1, d0
 8011a2e:	f20f 4340 	addw	r3, pc, #1088	@ 0x440
 8011a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a36:	f7ee ff19 	bl	800086c <__aeabi_ddiv>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	4610      	mov	r0, r2
 8011a40:	4619      	mov	r1, r3
 8011a42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8011a46:	f7ee fc31 	bl	80002ac <__adddf3>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	4610      	mov	r0, r2
 8011a50:	4619      	mov	r1, r3
 8011a52:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8011a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5a:	f7ee ff07 	bl	800086c <__aeabi_ddiv>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	460b      	mov	r3, r1
 8011a62:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double M = Radians(fmod(358.47583+fmod(35999.04975*T,360.0)-(0.000150+0.0000033*T)*Sqr(T),360.0));
 8011a66:	f20f 4318 	addw	r3, pc, #1048	@ 0x418
 8011a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011a72:	f7ee fdd1 	bl	8000618 <__aeabi_dmul>
 8011a76:	4602      	mov	r2, r0
 8011a78:	460b      	mov	r3, r1
 8011a7a:	ec43 2b17 	vmov	d7, r2, r3
 8011a7e:	ed9f 1be4 	vldr	d1, [pc, #912]	@ 8011e10 <sun_predict+0x458>
 8011a82:	eeb0 0a47 	vmov.f32	s0, s14
 8011a86:	eef0 0a67 	vmov.f32	s1, s15
 8011a8a:	f00e f8d9 	bl	801fc40 <fmod>
 8011a8e:	ec51 0b10 	vmov	r0, r1, d0
 8011a92:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8011e88 <sun_predict+0x4d0>)
 8011a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a98:	f7ee fc08 	bl	80002ac <__adddf3>
 8011a9c:	4602      	mov	r2, r0
 8011a9e:	460b      	mov	r3, r1
 8011aa0:	4614      	mov	r4, r2
 8011aa2:	461d      	mov	r5, r3
 8011aa4:	a3fa      	add	r3, pc, #1000	@ (adr r3, 8011e90 <sun_predict+0x4d8>)
 8011aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011aae:	f7ee fdb3 	bl	8000618 <__aeabi_dmul>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	4610      	mov	r0, r2
 8011ab8:	4619      	mov	r1, r3
 8011aba:	a3f7      	add	r3, pc, #988	@ (adr r3, 8011e98 <sun_predict+0x4e0>)
 8011abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac0:	f7ee fbf4 	bl	80002ac <__adddf3>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	4690      	mov	r8, r2
 8011aca:	4699      	mov	r9, r3
 8011acc:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8011ad0:	f000 fcce 	bl	8012470 <Sqr>
 8011ad4:	ec53 2b10 	vmov	r2, r3, d0
 8011ad8:	4640      	mov	r0, r8
 8011ada:	4649      	mov	r1, r9
 8011adc:	f7ee fd9c 	bl	8000618 <__aeabi_dmul>
 8011ae0:	4602      	mov	r2, r0
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	f7ee fbde 	bl	80002a8 <__aeabi_dsub>
 8011aec:	4602      	mov	r2, r0
 8011aee:	460b      	mov	r3, r1
 8011af0:	ec43 2b17 	vmov	d7, r2, r3
 8011af4:	ed9f 1bc6 	vldr	d1, [pc, #792]	@ 8011e10 <sun_predict+0x458>
 8011af8:	eeb0 0a47 	vmov.f32	s0, s14
 8011afc:	eef0 0a67 	vmov.f32	s1, s15
 8011b00:	f00e f89e 	bl	801fc40 <fmod>
 8011b04:	eeb0 7a40 	vmov.f32	s14, s0
 8011b08:	eef0 7a60 	vmov.f32	s15, s1
 8011b0c:	eeb0 0a47 	vmov.f32	s0, s14
 8011b10:	eef0 0a67 	vmov.f32	s1, s15
 8011b14:	f7ff ff28 	bl	8011968 <Radians>
 8011b18:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
	double L = Radians(fmod(279.69668+fmod(36000.76892*T,360.0)+0.0003025*Sqr(T),360.0));
 8011b1c:	a3e0      	add	r3, pc, #896	@ (adr r3, 8011ea0 <sun_predict+0x4e8>)
 8011b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011b26:	f7ee fd77 	bl	8000618 <__aeabi_dmul>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	ec43 2b17 	vmov	d7, r2, r3
 8011b32:	ed9f 1bb7 	vldr	d1, [pc, #732]	@ 8011e10 <sun_predict+0x458>
 8011b36:	eeb0 0a47 	vmov.f32	s0, s14
 8011b3a:	eef0 0a67 	vmov.f32	s1, s15
 8011b3e:	f00e f87f 	bl	801fc40 <fmod>
 8011b42:	ec51 0b10 	vmov	r0, r1, d0
 8011b46:	a3d8      	add	r3, pc, #864	@ (adr r3, 8011ea8 <sun_predict+0x4f0>)
 8011b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4c:	f7ee fbae 	bl	80002ac <__adddf3>
 8011b50:	4602      	mov	r2, r0
 8011b52:	460b      	mov	r3, r1
 8011b54:	4614      	mov	r4, r2
 8011b56:	461d      	mov	r5, r3
 8011b58:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8011b5c:	f000 fc88 	bl	8012470 <Sqr>
 8011b60:	ec51 0b10 	vmov	r0, r1, d0
 8011b64:	a3d2      	add	r3, pc, #840	@ (adr r3, 8011eb0 <sun_predict+0x4f8>)
 8011b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6a:	f7ee fd55 	bl	8000618 <__aeabi_dmul>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	460b      	mov	r3, r1
 8011b72:	4620      	mov	r0, r4
 8011b74:	4629      	mov	r1, r5
 8011b76:	f7ee fb99 	bl	80002ac <__adddf3>
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	ec43 2b17 	vmov	d7, r2, r3
 8011b82:	ed9f 1ba3 	vldr	d1, [pc, #652]	@ 8011e10 <sun_predict+0x458>
 8011b86:	eeb0 0a47 	vmov.f32	s0, s14
 8011b8a:	eef0 0a67 	vmov.f32	s1, s15
 8011b8e:	f00e f857 	bl	801fc40 <fmod>
 8011b92:	eeb0 7a40 	vmov.f32	s14, s0
 8011b96:	eef0 7a60 	vmov.f32	s15, s1
 8011b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8011b9e:	eef0 0a67 	vmov.f32	s1, s15
 8011ba2:	f7ff fee1 	bl	8011968 <Radians>
 8011ba6:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
	double e = 0.01675104-(0.0000418+0.000000126*T)*T;
 8011baa:	a3c3      	add	r3, pc, #780	@ (adr r3, 8011eb8 <sun_predict+0x500>)
 8011bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011bb4:	f7ee fd30 	bl	8000618 <__aeabi_dmul>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	460b      	mov	r3, r1
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	a3bf      	add	r3, pc, #764	@ (adr r3, 8011ec0 <sun_predict+0x508>)
 8011bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc6:	f7ee fb71 	bl	80002ac <__adddf3>
 8011bca:	4602      	mov	r2, r0
 8011bcc:	460b      	mov	r3, r1
 8011bce:	4610      	mov	r0, r2
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011bd6:	f7ee fd1f 	bl	8000618 <__aeabi_dmul>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	460b      	mov	r3, r1
 8011bde:	a1ba      	add	r1, pc, #744	@ (adr r1, 8011ec8 <sun_predict+0x510>)
 8011be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011be4:	f7ee fb60 	bl	80002a8 <__aeabi_dsub>
 8011be8:	4602      	mov	r2, r0
 8011bea:	460b      	mov	r3, r1
 8011bec:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double C = Radians((1.919460-(0.004789+0.000014*T)*T)*sin(M)+(0.020094-0.000100*T)*sin(2*M)+0.000293*sin(3*M));
 8011bf0:	a3b7      	add	r3, pc, #732	@ (adr r3, 8011ed0 <sun_predict+0x518>)
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011bfa:	f7ee fd0d 	bl	8000618 <__aeabi_dmul>
 8011bfe:	4602      	mov	r2, r0
 8011c00:	460b      	mov	r3, r1
 8011c02:	4610      	mov	r0, r2
 8011c04:	4619      	mov	r1, r3
 8011c06:	a3b4      	add	r3, pc, #720	@ (adr r3, 8011ed8 <sun_predict+0x520>)
 8011c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0c:	f7ee fb4e 	bl	80002ac <__adddf3>
 8011c10:	4602      	mov	r2, r0
 8011c12:	460b      	mov	r3, r1
 8011c14:	4610      	mov	r0, r2
 8011c16:	4619      	mov	r1, r3
 8011c18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011c1c:	f7ee fcfc 	bl	8000618 <__aeabi_dmul>
 8011c20:	4602      	mov	r2, r0
 8011c22:	460b      	mov	r3, r1
 8011c24:	a1ae      	add	r1, pc, #696	@ (adr r1, 8011ee0 <sun_predict+0x528>)
 8011c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c2a:	f7ee fb3d 	bl	80002a8 <__aeabi_dsub>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	460b      	mov	r3, r1
 8011c32:	4614      	mov	r4, r2
 8011c34:	461d      	mov	r5, r3
 8011c36:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8011c3a:	f00e fb01 	bl	8020240 <sin>
 8011c3e:	ec53 2b10 	vmov	r2, r3, d0
 8011c42:	4620      	mov	r0, r4
 8011c44:	4629      	mov	r1, r5
 8011c46:	f7ee fce7 	bl	8000618 <__aeabi_dmul>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	460b      	mov	r3, r1
 8011c4e:	4614      	mov	r4, r2
 8011c50:	461d      	mov	r5, r3
 8011c52:	a3a5      	add	r3, pc, #660	@ (adr r3, 8011ee8 <sun_predict+0x530>)
 8011c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011c5c:	f7ee fcdc 	bl	8000618 <__aeabi_dmul>
 8011c60:	4602      	mov	r2, r0
 8011c62:	460b      	mov	r3, r1
 8011c64:	a1a2      	add	r1, pc, #648	@ (adr r1, 8011ef0 <sun_predict+0x538>)
 8011c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c6a:	f7ee fb1d 	bl	80002a8 <__aeabi_dsub>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	460b      	mov	r3, r1
 8011c72:	4690      	mov	r8, r2
 8011c74:	4699      	mov	r9, r3
 8011c76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	f7ee fb15 	bl	80002ac <__adddf3>
 8011c82:	4602      	mov	r2, r0
 8011c84:	460b      	mov	r3, r1
 8011c86:	ec43 2b17 	vmov	d7, r2, r3
 8011c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8011c8e:	eef0 0a67 	vmov.f32	s1, s15
 8011c92:	f00e fad5 	bl	8020240 <sin>
 8011c96:	ec53 2b10 	vmov	r2, r3, d0
 8011c9a:	4640      	mov	r0, r8
 8011c9c:	4649      	mov	r1, r9
 8011c9e:	f7ee fcbb 	bl	8000618 <__aeabi_dmul>
 8011ca2:	4602      	mov	r2, r0
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	4629      	mov	r1, r5
 8011caa:	f7ee faff 	bl	80002ac <__adddf3>
 8011cae:	4602      	mov	r2, r0
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	4614      	mov	r4, r2
 8011cb4:	461d      	mov	r5, r3
 8011cb6:	f04f 0200 	mov.w	r2, #0
 8011cba:	4b63      	ldr	r3, [pc, #396]	@ (8011e48 <sun_predict+0x490>)
 8011cbc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8011cc0:	f7ee fcaa 	bl	8000618 <__aeabi_dmul>
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	ec43 2b17 	vmov	d7, r2, r3
 8011ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8011cd0:	eef0 0a67 	vmov.f32	s1, s15
 8011cd4:	f00e fab4 	bl	8020240 <sin>
 8011cd8:	ec51 0b10 	vmov	r0, r1, d0
 8011cdc:	a34e      	add	r3, pc, #312	@ (adr r3, 8011e18 <sun_predict+0x460>)
 8011cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce2:	f7ee fc99 	bl	8000618 <__aeabi_dmul>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4620      	mov	r0, r4
 8011cec:	4629      	mov	r1, r5
 8011cee:	f7ee fadd 	bl	80002ac <__adddf3>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	ec43 2b17 	vmov	d7, r2, r3
 8011cfa:	eeb0 0a47 	vmov.f32	s0, s14
 8011cfe:	eef0 0a67 	vmov.f32	s1, s15
 8011d02:	f7ff fe31 	bl	8011968 <Radians>
 8011d06:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	double O = Radians(fmod(259.18-1934.142*T,360.0));
 8011d0a:	a345      	add	r3, pc, #276	@ (adr r3, 8011e20 <sun_predict+0x468>)
 8011d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d10:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011d14:	f7ee fc80 	bl	8000618 <__aeabi_dmul>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	460b      	mov	r3, r1
 8011d1c:	a142      	add	r1, pc, #264	@ (adr r1, 8011e28 <sun_predict+0x470>)
 8011d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d22:	f7ee fac1 	bl	80002a8 <__aeabi_dsub>
 8011d26:	4602      	mov	r2, r0
 8011d28:	460b      	mov	r3, r1
 8011d2a:	ec43 2b17 	vmov	d7, r2, r3
 8011d2e:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8011e10 <sun_predict+0x458>
 8011d32:	eeb0 0a47 	vmov.f32	s0, s14
 8011d36:	eef0 0a67 	vmov.f32	s1, s15
 8011d3a:	f00d ff81 	bl	801fc40 <fmod>
 8011d3e:	eeb0 7a40 	vmov.f32	s14, s0
 8011d42:	eef0 7a60 	vmov.f32	s15, s1
 8011d46:	eeb0 0a47 	vmov.f32	s0, s14
 8011d4a:	eef0 0a67 	vmov.f32	s1, s15
 8011d4e:	f7ff fe0b 	bl	8011968 <Radians>
 8011d52:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double Lsa = fmod(L+C-Radians(0.00569-0.00479*sin(O)), 2*M_PI);
 8011d56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011d5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8011d5e:	f7ee faa5 	bl	80002ac <__adddf3>
 8011d62:	4602      	mov	r2, r0
 8011d64:	460b      	mov	r3, r1
 8011d66:	4614      	mov	r4, r2
 8011d68:	461d      	mov	r5, r3
 8011d6a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8011d6e:	f00e fa67 	bl	8020240 <sin>
 8011d72:	ec51 0b10 	vmov	r0, r1, d0
 8011d76:	a32e      	add	r3, pc, #184	@ (adr r3, 8011e30 <sun_predict+0x478>)
 8011d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7c:	f7ee fc4c 	bl	8000618 <__aeabi_dmul>
 8011d80:	4602      	mov	r2, r0
 8011d82:	460b      	mov	r3, r1
 8011d84:	a12c      	add	r1, pc, #176	@ (adr r1, 8011e38 <sun_predict+0x480>)
 8011d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d8a:	f7ee fa8d 	bl	80002a8 <__aeabi_dsub>
 8011d8e:	4602      	mov	r2, r0
 8011d90:	460b      	mov	r3, r1
 8011d92:	ec43 2b17 	vmov	d7, r2, r3
 8011d96:	eeb0 0a47 	vmov.f32	s0, s14
 8011d9a:	eef0 0a67 	vmov.f32	s1, s15
 8011d9e:	f7ff fde3 	bl	8011968 <Radians>
 8011da2:	ec53 2b10 	vmov	r2, r3, d0
 8011da6:	4620      	mov	r0, r4
 8011da8:	4629      	mov	r1, r5
 8011daa:	f7ee fa7d 	bl	80002a8 <__aeabi_dsub>
 8011dae:	4602      	mov	r2, r0
 8011db0:	460b      	mov	r3, r1
 8011db2:	ec43 2b17 	vmov	d7, r2, r3
 8011db6:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8011e40 <sun_predict+0x488>
 8011dba:	eeb0 0a47 	vmov.f32	s0, s14
 8011dbe:	eef0 0a67 	vmov.f32	s1, s15
 8011dc2:	f00d ff3d 	bl	801fc40 <fmod>
 8011dc6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	double nu = fmod(M+C, 2*M_PI);
 8011dca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011dce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8011dd2:	f7ee fa6b 	bl	80002ac <__adddf3>
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	460b      	mov	r3, r1
 8011dda:	ec43 2b17 	vmov	d7, r2, r3
 8011dde:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8011e40 <sun_predict+0x488>
 8011de2:	eeb0 0a47 	vmov.f32	s0, s14
 8011de6:	eef0 0a67 	vmov.f32	s1, s15
 8011dea:	f00d ff29 	bl	801fc40 <fmod>
 8011dee:	ed87 0b08 	vstr	d0, [r7, #32]
	double R = 1.0000002*(1.0-Sqr(e))/(1.0+e*cos(nu));
 8011df2:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8011df6:	f000 fb3b 	bl	8012470 <Sqr>
 8011dfa:	ec53 2b10 	vmov	r2, r3, d0
 8011dfe:	f04f 0000 	mov.w	r0, #0
 8011e02:	4912      	ldr	r1, [pc, #72]	@ (8011e4c <sun_predict+0x494>)
 8011e04:	f7ee fa50 	bl	80002a8 <__aeabi_dsub>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	460b      	mov	r3, r1
 8011e0c:	e074      	b.n	8011ef8 <sun_predict+0x540>
 8011e0e:	bf00      	nop
 8011e10:	00000000 	.word	0x00000000
 8011e14:	40768000 	.word	0x40768000
 8011e18:	6af038e3 	.word	0x6af038e3
 8011e1c:	3f3333b9 	.word	0x3f3333b9
 8011e20:	6872b021 	.word	0x6872b021
 8011e24:	409e3891 	.word	0x409e3891
 8011e28:	47ae147b 	.word	0x47ae147b
 8011e2c:	407032e1 	.word	0x407032e1
 8011e30:	d590c0ad 	.word	0xd590c0ad
 8011e34:	3f739ead 	.word	0x3f739ead
 8011e38:	bea0ba1f 	.word	0xbea0ba1f
 8011e3c:	3f774e65 	.word	0x3f774e65
 8011e40:	54442d18 	.word	0x54442d18
 8011e44:	401921fb 	.word	0x401921fb
 8011e48:	40080000 	.word	0x40080000
 8011e4c:	3ff00000 	.word	0x3ff00000
 8011e50:	40000000 	.word	0x40000000
 8011e54:	4142a5e7 	.word	0x4142a5e7
 8011e58:	00000000 	.word	0x00000000
 8011e5c:	41426cd6 	.word	0x41426cd6
 8011e60:	00000000 	.word	0x00000000
 8011e64:	4076d400 	.word	0x4076d400
 8011e68:	00000000 	.word	0x00000000
 8011e6c:	409db000 	.word	0x409db000
 8011e70:	00000000 	.word	0x00000000
 8011e74:	40f51800 	.word	0x40f51800
 8011e78:	00000000 	.word	0x00000000
 8011e7c:	40e1d5a0 	.word	0x40e1d5a0
 8011e80:	978d4fdf 	.word	0x978d4fdf
 8011e84:	40e193e1 	.word	0x40e193e1
 8011e88:	ffeb074a 	.word	0xffeb074a
 8011e8c:	4076679c 	.word	0x4076679c
 8011e90:	2f9294c3 	.word	0x2f9294c3
 8011e94:	3ecbaeb2 	.word	0x3ecbaeb2
 8011e98:	30553261 	.word	0x30553261
 8011e9c:	3f23a92a 	.word	0x3f23a92a
 8011ea0:	9afe1da8 	.word	0x9afe1da8
 8011ea4:	40e19418 	.word	0x40e19418
 8011ea8:	99ed7c70 	.word	0x99ed7c70
 8011eac:	40717b25 	.word	0x40717b25
 8011eb0:	9b66f933 	.word	0x9b66f933
 8011eb4:	3f33d31b 	.word	0x3f33d31b
 8011eb8:	b8863b3a 	.word	0xb8863b3a
 8011ebc:	3e80e953 	.word	0x3e80e953
 8011ec0:	10540b1a 	.word	0x10540b1a
 8011ec4:	3f05ea4d 	.word	0x3f05ea4d
 8011ec8:	43e55d11 	.word	0x43e55d11
 8011ecc:	3f91272f 	.word	0x3f91272f
 8011ed0:	593e5fb7 	.word	0x593e5fb7
 8011ed4:	3eed5c31 	.word	0x3eed5c31
 8011ed8:	6616b54e 	.word	0x6616b54e
 8011edc:	3f739da1 	.word	0x3f739da1
 8011ee0:	b05faebc 	.word	0xb05faebc
 8011ee4:	3ffeb61b 	.word	0x3ffeb61b
 8011ee8:	eb1c432d 	.word	0xeb1c432d
 8011eec:	3f1a36e2 	.word	0x3f1a36e2
 8011ef0:	83621fb0 	.word	0x83621fb0
 8011ef4:	3f949385 	.word	0x3f949385
 8011ef8:	4610      	mov	r0, r2
 8011efa:	4619      	mov	r1, r3
 8011efc:	a377      	add	r3, pc, #476	@ (adr r3, 80120dc <sun_predict+0x724>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	f7ee fb89 	bl	8000618 <__aeabi_dmul>
 8011f06:	4602      	mov	r2, r0
 8011f08:	460b      	mov	r3, r1
 8011f0a:	4614      	mov	r4, r2
 8011f0c:	461d      	mov	r5, r3
 8011f0e:	ed97 0b08 	vldr	d0, [r7, #32]
 8011f12:	f00e f939 	bl	8020188 <cos>
 8011f16:	ec51 0b10 	vmov	r0, r1, d0
 8011f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011f1e:	f7ee fb7b 	bl	8000618 <__aeabi_dmul>
 8011f22:	4602      	mov	r2, r0
 8011f24:	460b      	mov	r3, r1
 8011f26:	4610      	mov	r0, r2
 8011f28:	4619      	mov	r1, r3
 8011f2a:	f04f 0200 	mov.w	r2, #0
 8011f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80120d8 <sun_predict+0x720>)
 8011f30:	f7ee f9bc 	bl	80002ac <__adddf3>
 8011f34:	4602      	mov	r2, r0
 8011f36:	460b      	mov	r3, r1
 8011f38:	4620      	mov	r0, r4
 8011f3a:	4629      	mov	r1, r5
 8011f3c:	f7ee fc96 	bl	800086c <__aeabi_ddiv>
 8011f40:	4602      	mov	r2, r0
 8011f42:	460b      	mov	r3, r1
 8011f44:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double eps = Radians(23.452294-(0.0130125+(0.00000164-0.000000503*T)*T)*T+0.00256*cos(O));
 8011f48:	a357      	add	r3, pc, #348	@ (adr r3, 80120a8 <sun_predict+0x6f0>)
 8011f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011f52:	f7ee fb61 	bl	8000618 <__aeabi_dmul>
 8011f56:	4602      	mov	r2, r0
 8011f58:	460b      	mov	r3, r1
 8011f5a:	a155      	add	r1, pc, #340	@ (adr r1, 80120b0 <sun_predict+0x6f8>)
 8011f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f60:	f7ee f9a2 	bl	80002a8 <__aeabi_dsub>
 8011f64:	4602      	mov	r2, r0
 8011f66:	460b      	mov	r3, r1
 8011f68:	4610      	mov	r0, r2
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011f70:	f7ee fb52 	bl	8000618 <__aeabi_dmul>
 8011f74:	4602      	mov	r2, r0
 8011f76:	460b      	mov	r3, r1
 8011f78:	4610      	mov	r0, r2
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	a34e      	add	r3, pc, #312	@ (adr r3, 80120b8 <sun_predict+0x700>)
 8011f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f82:	f7ee f993 	bl	80002ac <__adddf3>
 8011f86:	4602      	mov	r2, r0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	4610      	mov	r0, r2
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011f92:	f7ee fb41 	bl	8000618 <__aeabi_dmul>
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	a149      	add	r1, pc, #292	@ (adr r1, 80120c0 <sun_predict+0x708>)
 8011f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fa0:	f7ee f982 	bl	80002a8 <__aeabi_dsub>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	4614      	mov	r4, r2
 8011faa:	461d      	mov	r5, r3
 8011fac:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8011fb0:	f00e f8ea 	bl	8020188 <cos>
 8011fb4:	ec51 0b10 	vmov	r0, r1, d0
 8011fb8:	a343      	add	r3, pc, #268	@ (adr r3, 80120c8 <sun_predict+0x710>)
 8011fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fbe:	f7ee fb2b 	bl	8000618 <__aeabi_dmul>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	4629      	mov	r1, r5
 8011fca:	f7ee f96f 	bl	80002ac <__adddf3>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	ec43 2b17 	vmov	d7, r2, r3
 8011fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8011fda:	eef0 0a67 	vmov.f32	s1, s15
 8011fde:	f7ff fcc3 	bl	8011968 <Radians>
 8011fe2:	ed87 0b04 	vstr	d0, [r7, #16]
	R = ASTRONOMICAL_UNIT_KM*R;
 8011fe6:	a33a      	add	r3, pc, #232	@ (adr r3, 80120d0 <sun_predict+0x718>)
 8011fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011ff0:	f7ee fb12 	bl	8000618 <__aeabi_dmul>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	e9c7 2306 	strd	r2, r3, [r7, #24]

	position[0] = R*cos(Lsa);
 8011ffc:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8012000:	f00e f8c2 	bl	8020188 <cos>
 8012004:	ec51 0b10 	vmov	r0, r1, d0
 8012008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801200c:	f7ee fb04 	bl	8000618 <__aeabi_dmul>
 8012010:	4602      	mov	r2, r0
 8012012:	460b      	mov	r3, r1
 8012014:	6879      	ldr	r1, [r7, #4]
 8012016:	e9c1 2300 	strd	r2, r3, [r1]
	position[1] = R*sin(Lsa)*cos(eps);
 801201a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 801201e:	f00e f90f 	bl	8020240 <sin>
 8012022:	ec51 0b10 	vmov	r0, r1, d0
 8012026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801202a:	f7ee faf5 	bl	8000618 <__aeabi_dmul>
 801202e:	4602      	mov	r2, r0
 8012030:	460b      	mov	r3, r1
 8012032:	4690      	mov	r8, r2
 8012034:	4699      	mov	r9, r3
 8012036:	ed97 0b04 	vldr	d0, [r7, #16]
 801203a:	f00e f8a5 	bl	8020188 <cos>
 801203e:	ec51 0b10 	vmov	r0, r1, d0
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f103 0408 	add.w	r4, r3, #8
 8012048:	4602      	mov	r2, r0
 801204a:	460b      	mov	r3, r1
 801204c:	4640      	mov	r0, r8
 801204e:	4649      	mov	r1, r9
 8012050:	f7ee fae2 	bl	8000618 <__aeabi_dmul>
 8012054:	4602      	mov	r2, r0
 8012056:	460b      	mov	r3, r1
 8012058:	e9c4 2300 	strd	r2, r3, [r4]
	position[2] = R*sin(Lsa)*sin(eps);
 801205c:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8012060:	f00e f8ee 	bl	8020240 <sin>
 8012064:	ec51 0b10 	vmov	r0, r1, d0
 8012068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801206c:	f7ee fad4 	bl	8000618 <__aeabi_dmul>
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4690      	mov	r8, r2
 8012076:	4699      	mov	r9, r3
 8012078:	ed97 0b04 	vldr	d0, [r7, #16]
 801207c:	f00e f8e0 	bl	8020240 <sin>
 8012080:	ec51 0b10 	vmov	r0, r1, d0
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f103 0410 	add.w	r4, r3, #16
 801208a:	4602      	mov	r2, r0
 801208c:	460b      	mov	r3, r1
 801208e:	4640      	mov	r0, r8
 8012090:	4649      	mov	r1, r9
 8012092:	f7ee fac1 	bl	8000618 <__aeabi_dmul>
 8012096:	4602      	mov	r2, r0
 8012098:	460b      	mov	r3, r1
 801209a:	e9c4 2300 	strd	r2, r3, [r4]
}
 801209e:	bf00      	nop
 80120a0:	3778      	adds	r7, #120	@ 0x78
 80120a2:	46bd      	mov	sp, r7
 80120a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80120a8:	b29227cf 	.word	0xb29227cf
 80120ac:	3ea0e0bc 	.word	0x3ea0e0bc
 80120b0:	11ce33aa 	.word	0x11ce33aa
 80120b4:	3ebb83bf 	.word	0x3ebb83bf
 80120b8:	2f837b4a 	.word	0x2f837b4a
 80120bc:	3f8aa64c 	.word	0x3f8aa64c
 80120c0:	8a222d51 	.word	0x8a222d51
 80120c4:	403773c9 	.word	0x403773c9
 80120c8:	88e368f1 	.word	0x88e368f1
 80120cc:	3f64f8b5 	.word	0x3f64f8b5
 80120d0:	5d61cac1 	.word	0x5d61cac1
 80120d4:	41a1d55d 	.word	0x41a1d55d
 80120d8:	3ff00000 	.word	0x3ff00000
 80120dc:	35afe535 	.word	0x35afe535
 80120e0:	3ff00000 	.word	0x3ff00000
 80120e4:	00000000 	.word	0x00000000

080120e8 <predict_observe_sun>:

void predict_observe_sun(const predict_observer_t *observer, double time, struct predict_observation *obs)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b0aa      	sub	sp, #168	@ 0xa8
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	ed87 0b00 	vstr	d0, [r7]
 80120f4:	60b9      	str	r1, [r7, #8]

	// Find sun position
	double solar_vector[3];
	sun_predict(time, solar_vector);
 80120f6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80120fa:	4618      	mov	r0, r3
 80120fc:	ed97 0b00 	vldr	d0, [r7]
 8012100:	f7ff fc5a 	bl	80119b8 <sun_predict>

	/* Zero vector for initializations */
	double zero_vector[3] = {0,0,0};
 8012104:	f04f 0200 	mov.w	r2, #0
 8012108:	f04f 0300 	mov.w	r3, #0
 801210c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8012110:	f04f 0200 	mov.w	r2, #0
 8012114:	f04f 0300 	mov.w	r3, #0
 8012118:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 801211c:	f04f 0200 	mov.w	r2, #0
 8012120:	f04f 0300 	mov.w	r3, #0
 8012124:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	/* Solar observed azimuth and elevation vector  */
	vector_t solar_set;

	geodetic_t geodetic;
	geodetic.lat = observer->latitude;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 801212e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	geodetic.lon = observer->longitude;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8012138:	e9c7 2306 	strd	r2, r3, [r7, #24]
	geodetic.alt = observer->altitude / 1000.0;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8012142:	f04f 0200 	mov.w	r2, #0
 8012146:	4b3c      	ldr	r3, [pc, #240]	@ (8012238 <predict_observe_sun+0x150>)
 8012148:	f7ee fb90 	bl	800086c <__aeabi_ddiv>
 801214c:	4602      	mov	r2, r0
 801214e:	460b      	mov	r3, r1
 8012150:	e9c7 2308 	strd	r2, r3, [r7, #32]
	geodetic.theta = 0.0;
 8012154:	f04f 0200 	mov.w	r2, #0
 8012158:	f04f 0300 	mov.w	r3, #0
 801215c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	double jul_utc = time + JULIAN_TIME_DIFF;
 8012160:	a331      	add	r3, pc, #196	@ (adr r3, 8012228 <predict_observe_sun+0x140>)
 8012162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012166:	e9d7 0100 	ldrd	r0, r1, [r7]
 801216a:	f7ee f89f 	bl	80002ac <__adddf3>
 801216e:	4602      	mov	r2, r0
 8012170:	460b      	mov	r3, r1
 8012172:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	Calculate_Obs(jul_utc, solar_vector, zero_vector, &geodetic, &solar_set);
 8012176:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801217a:	f107 0210 	add.w	r2, r7, #16
 801217e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8012182:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8012186:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 801218a:	f000 ff19 	bl	8012fc0 <Calculate_Obs>

	double sun_azi = solar_set.x;
 801218e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8012192:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	double sun_ele = solar_set.y;
 8012196:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801219a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	double sun_range = 1.0+((solar_set.z-ASTRONOMICAL_UNIT_KM)/ASTRONOMICAL_UNIT_KM);
 801219e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80121a2:	a323      	add	r3, pc, #140	@ (adr r3, 8012230 <predict_observe_sun+0x148>)
 80121a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a8:	f7ee f87e 	bl	80002a8 <__aeabi_dsub>
 80121ac:	4602      	mov	r2, r0
 80121ae:	460b      	mov	r3, r1
 80121b0:	4610      	mov	r0, r2
 80121b2:	4619      	mov	r1, r3
 80121b4:	a31e      	add	r3, pc, #120	@ (adr r3, 8012230 <predict_observe_sun+0x148>)
 80121b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ba:	f7ee fb57 	bl	800086c <__aeabi_ddiv>
 80121be:	4602      	mov	r2, r0
 80121c0:	460b      	mov	r3, r1
 80121c2:	4610      	mov	r0, r2
 80121c4:	4619      	mov	r1, r3
 80121c6:	f04f 0200 	mov.w	r2, #0
 80121ca:	4b1c      	ldr	r3, [pc, #112]	@ (801223c <predict_observe_sun+0x154>)
 80121cc:	f7ee f86e 	bl	80002ac <__adddf3>
 80121d0:	4602      	mov	r2, r0
 80121d2:	460b      	mov	r3, r1
 80121d4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double sun_range_rate = 1000.0*solar_set.w;
 80121d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80121dc:	f04f 0200 	mov.w	r2, #0
 80121e0:	4b15      	ldr	r3, [pc, #84]	@ (8012238 <predict_observe_sun+0x150>)
 80121e2:	f7ee fa19 	bl	8000618 <__aeabi_dmul>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	obs->time = time;
 80121ee:	68b9      	ldr	r1, [r7, #8]
 80121f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80121f4:	e9c1 2300 	strd	r2, r3, [r1]
	obs->azimuth = sun_azi;
 80121f8:	68b9      	ldr	r1, [r7, #8]
 80121fa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80121fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	obs->elevation = sun_ele;
 8012202:	68b9      	ldr	r1, [r7, #8]
 8012204:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8012208:	e9c1 2306 	strd	r2, r3, [r1, #24]
	obs->range = sun_range;
 801220c:	68b9      	ldr	r1, [r7, #8]
 801220e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8012212:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	obs->range_rate = sun_range_rate;
 8012216:	68b9      	ldr	r1, [r7, #8]
 8012218:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801221c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8012220:	bf00      	nop
 8012222:	37a8      	adds	r7, #168	@ 0xa8
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	40000000 	.word	0x40000000
 801222c:	4142a5e7 	.word	0x4142a5e7
 8012230:	5d61cac1 	.word	0x5d61cac1
 8012234:	41a1d55d 	.word	0x41a1d55d
 8012238:	408f4000 	.word	0x408f4000
 801223c:	3ff00000 	.word	0x3ff00000

08012240 <vec3_set>:
#include "unsorted.h"

#include "defs.h"

void vec3_set(double v[3], double x, double y, double z)
{
 8012240:	b480      	push	{r7}
 8012242:	b089      	sub	sp, #36	@ 0x24
 8012244:	af00      	add	r7, sp, #0
 8012246:	61f8      	str	r0, [r7, #28]
 8012248:	ed87 0b04 	vstr	d0, [r7, #16]
 801224c:	ed87 1b02 	vstr	d1, [r7, #8]
 8012250:	ed87 2b00 	vstr	d2, [r7]
	v[0] = x;
 8012254:	69f9      	ldr	r1, [r7, #28]
 8012256:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801225a:	e9c1 2300 	strd	r2, r3, [r1]
	v[1] = y;
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	f103 0108 	add.w	r1, r3, #8
 8012264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012268:	e9c1 2300 	strd	r2, r3, [r1]
	v[2] = z;
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	f103 0110 	add.w	r1, r3, #16
 8012272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012276:	e9c1 2300 	strd	r2, r3, [r1]
}
 801227a:	bf00      	nop
 801227c:	3724      	adds	r7, #36	@ 0x24
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr

08012286 <vec3_length>:

double vec3_length(const double v[3])
{
 8012286:	b5b0      	push	{r4, r5, r7, lr}
 8012288:	b082      	sub	sp, #8
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
	return sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229a:	f7ee f9bd 	bl	8000618 <__aeabi_dmul>
 801229e:	4602      	mov	r2, r0
 80122a0:	460b      	mov	r3, r1
 80122a2:	4614      	mov	r4, r2
 80122a4:	461d      	mov	r5, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	3308      	adds	r3, #8
 80122aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	3308      	adds	r3, #8
 80122b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b6:	f7ee f9af 	bl	8000618 <__aeabi_dmul>
 80122ba:	4602      	mov	r2, r0
 80122bc:	460b      	mov	r3, r1
 80122be:	4620      	mov	r0, r4
 80122c0:	4629      	mov	r1, r5
 80122c2:	f7ed fff3 	bl	80002ac <__adddf3>
 80122c6:	4602      	mov	r2, r0
 80122c8:	460b      	mov	r3, r1
 80122ca:	4614      	mov	r4, r2
 80122cc:	461d      	mov	r5, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	3310      	adds	r3, #16
 80122d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	3310      	adds	r3, #16
 80122da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122de:	f7ee f99b 	bl	8000618 <__aeabi_dmul>
 80122e2:	4602      	mov	r2, r0
 80122e4:	460b      	mov	r3, r1
 80122e6:	4620      	mov	r0, r4
 80122e8:	4629      	mov	r1, r5
 80122ea:	f7ed ffdf 	bl	80002ac <__adddf3>
 80122ee:	4602      	mov	r2, r0
 80122f0:	460b      	mov	r3, r1
 80122f2:	ec43 2b17 	vmov	d7, r2, r3
 80122f6:	eeb0 0a47 	vmov.f32	s0, s14
 80122fa:	eef0 0a67 	vmov.f32	s1, s15
 80122fe:	f00d fd7d 	bl	801fdfc <sqrt>
 8012302:	eeb0 7a40 	vmov.f32	s14, s0
 8012306:	eef0 7a60 	vmov.f32	s15, s1
}
 801230a:	eeb0 0a47 	vmov.f32	s0, s14
 801230e:	eef0 0a67 	vmov.f32	s1, s15
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bdb0      	pop	{r4, r5, r7, pc}

08012318 <vec3_dot>:

double vec3_dot(const double v[3], const double u[3])
{
 8012318:	b5b0      	push	{r4, r5, r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
	return (v[0]*u[0] + v[1]*u[1] + v[2]*u[2]);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232e:	f7ee f973 	bl	8000618 <__aeabi_dmul>
 8012332:	4602      	mov	r2, r0
 8012334:	460b      	mov	r3, r1
 8012336:	4614      	mov	r4, r2
 8012338:	461d      	mov	r5, r3
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	3308      	adds	r3, #8
 801233e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	3308      	adds	r3, #8
 8012346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234a:	f7ee f965 	bl	8000618 <__aeabi_dmul>
 801234e:	4602      	mov	r2, r0
 8012350:	460b      	mov	r3, r1
 8012352:	4620      	mov	r0, r4
 8012354:	4629      	mov	r1, r5
 8012356:	f7ed ffa9 	bl	80002ac <__adddf3>
 801235a:	4602      	mov	r2, r0
 801235c:	460b      	mov	r3, r1
 801235e:	4614      	mov	r4, r2
 8012360:	461d      	mov	r5, r3
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	3310      	adds	r3, #16
 8012366:	e9d3 0100 	ldrd	r0, r1, [r3]
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	3310      	adds	r3, #16
 801236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012372:	f7ee f951 	bl	8000618 <__aeabi_dmul>
 8012376:	4602      	mov	r2, r0
 8012378:	460b      	mov	r3, r1
 801237a:	4620      	mov	r0, r4
 801237c:	4629      	mov	r1, r5
 801237e:	f7ed ff95 	bl	80002ac <__adddf3>
 8012382:	4602      	mov	r2, r0
 8012384:	460b      	mov	r3, r1
 8012386:	ec43 2b17 	vmov	d7, r2, r3
}
 801238a:	eeb0 0a47 	vmov.f32	s0, s14
 801238e:	eef0 0a67 	vmov.f32	s1, s15
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bdb0      	pop	{r4, r5, r7, pc}

08012398 <vec3_mul_scalar>:

void vec3_mul_scalar(const double v[3], double a, double r[3])
{
 8012398:	b590      	push	{r4, r7, lr}
 801239a:	b085      	sub	sp, #20
 801239c:	af00      	add	r7, sp, #0
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	ed87 0b00 	vstr	d0, [r7]
 80123a4:	60b9      	str	r1, [r7, #8]
	r[0] = v[0]*a;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80123ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123b0:	f7ee f932 	bl	8000618 <__aeabi_dmul>
 80123b4:	4602      	mov	r2, r0
 80123b6:	460b      	mov	r3, r1
 80123b8:	68b9      	ldr	r1, [r7, #8]
 80123ba:	e9c1 2300 	strd	r2, r3, [r1]
	r[1] = v[1]*a;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	3308      	adds	r3, #8
 80123c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	f103 0408 	add.w	r4, r3, #8
 80123cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123d0:	f7ee f922 	bl	8000618 <__aeabi_dmul>
 80123d4:	4602      	mov	r2, r0
 80123d6:	460b      	mov	r3, r1
 80123d8:	e9c4 2300 	strd	r2, r3, [r4]
	r[2] = v[2]*a;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	3310      	adds	r3, #16
 80123e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	f103 0410 	add.w	r4, r3, #16
 80123ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123ee:	f7ee f913 	bl	8000618 <__aeabi_dmul>
 80123f2:	4602      	mov	r2, r0
 80123f4:	460b      	mov	r3, r1
 80123f6:	e9c4 2300 	strd	r2, r3, [r4]
}
 80123fa:	bf00      	nop
 80123fc:	3714      	adds	r7, #20
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd90      	pop	{r4, r7, pc}

08012402 <vec3_sub>:

void vec3_sub(const double v1[3], const double v2[3], double *r)
{
 8012402:	b590      	push	{r4, r7, lr}
 8012404:	b085      	sub	sp, #20
 8012406:	af00      	add	r7, sp, #0
 8012408:	60f8      	str	r0, [r7, #12]
 801240a:	60b9      	str	r1, [r7, #8]
 801240c:	607a      	str	r2, [r7, #4]
	r[0] = v1[0] - v2[0];
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241a:	f7ed ff45 	bl	80002a8 <__aeabi_dsub>
 801241e:	4602      	mov	r2, r0
 8012420:	460b      	mov	r3, r1
 8012422:	6879      	ldr	r1, [r7, #4]
 8012424:	e9c1 2300 	strd	r2, r3, [r1]
	r[1] = v1[1] - v2[1];
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	3308      	adds	r3, #8
 801242c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	3308      	adds	r3, #8
 8012434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012438:	687c      	ldr	r4, [r7, #4]
 801243a:	3408      	adds	r4, #8
 801243c:	f7ed ff34 	bl	80002a8 <__aeabi_dsub>
 8012440:	4602      	mov	r2, r0
 8012442:	460b      	mov	r3, r1
 8012444:	e9c4 2300 	strd	r2, r3, [r4]
	r[2] = v1[2] - v2[2];
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	3310      	adds	r3, #16
 801244c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	3310      	adds	r3, #16
 8012454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012458:	687c      	ldr	r4, [r7, #4]
 801245a:	3410      	adds	r4, #16
 801245c:	f7ed ff24 	bl	80002a8 <__aeabi_dsub>
 8012460:	4602      	mov	r2, r0
 8012462:	460b      	mov	r3, r1
 8012464:	e9c4 2300 	strd	r2, r3, [r4]
}
 8012468:	bf00      	nop
 801246a:	3714      	adds	r7, #20
 801246c:	46bd      	mov	sp, r7
 801246e:	bd90      	pop	{r4, r7, pc}

08012470 <Sqr>:

double Sqr(double arg)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	ed87 0b00 	vstr	d0, [r7]
	/* Returns square of a double */
	return (arg*arg);
 801247a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801247e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012482:	f7ee f8c9 	bl	8000618 <__aeabi_dmul>
 8012486:	4602      	mov	r2, r0
 8012488:	460b      	mov	r3, r1
 801248a:	ec43 2b17 	vmov	d7, r2, r3
}
 801248e:	eeb0 0a47 	vmov.f32	s0, s14
 8012492:	eef0 0a67 	vmov.f32	s1, s15
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	0000      	movs	r0, r0
	...

080124a0 <FMod2p>:

double FMod2p(double x)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b084      	sub	sp, #16
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	ed87 0b00 	vstr	d0, [r7]
	/* Returns mod 2PI of argument */

	double ret_val = fmod(x, 2*M_PI);
 80124aa:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8012500 <FMod2p+0x60>
 80124ae:	ed97 0b00 	vldr	d0, [r7]
 80124b2:	f00d fbc5 	bl	801fc40 <fmod>
 80124b6:	ed87 0b02 	vstr	d0, [r7, #8]

	if (ret_val < 0.0)
 80124ba:	f04f 0200 	mov.w	r2, #0
 80124be:	f04f 0300 	mov.w	r3, #0
 80124c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80124c6:	f7ee fb19 	bl	8000afc <__aeabi_dcmplt>
 80124ca:	4603      	mov	r3, r0
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d00a      	beq.n	80124e6 <FMod2p+0x46>
		ret_val += (2*M_PI);
 80124d0:	a30b      	add	r3, pc, #44	@ (adr r3, 8012500 <FMod2p+0x60>)
 80124d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80124da:	f7ed fee7 	bl	80002ac <__adddf3>
 80124de:	4602      	mov	r2, r0
 80124e0:	460b      	mov	r3, r1
 80124e2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return ret_val;
 80124e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80124ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80124ee:	eeb0 0a47 	vmov.f32	s0, s14
 80124f2:	eef0 0a67 	vmov.f32	s1, s15
 80124f6:	3710      	adds	r7, #16
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	f3af 8000 	nop.w
 8012500:	54442d18 	.word	0x54442d18
 8012504:	401921fb 	.word	0x401921fb

08012508 <Convert_Sat_State>:

void Convert_Sat_State(double pos[3], double vel[3])
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
	/* Converts the satellite's position and velocity  */
	/* vectors from normalized values to km and km/sec */ 

	vec3_mul_scalar(pos, EARTH_RADIUS_KM_WGS84, pos);
 8012512:	6879      	ldr	r1, [r7, #4]
 8012514:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8012538 <Convert_Sat_State+0x30>
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f7ff ff3d 	bl	8012398 <vec3_mul_scalar>
	vec3_mul_scalar(vel, EARTH_RADIUS_KM_WGS84*MINUTES_PER_DAY/SECONDS_PER_DAY, vel);
 801251e:	6839      	ldr	r1, [r7, #0]
 8012520:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8012540 <Convert_Sat_State+0x38>
 8012524:	6838      	ldr	r0, [r7, #0]
 8012526:	f7ff ff37 	bl	8012398 <vec3_mul_scalar>
}
 801252a:	bf00      	nop
 801252c:	3708      	adds	r7, #8
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	f3af 8000 	nop.w
 8012538:	126e978d 	.word	0x126e978d
 801253c:	40b8ea23 	.word	0x40b8ea23
 8012540:	9c31b2b8 	.word	0x9c31b2b8
 8012544:	405a9358 	.word	0x405a9358

08012548 <Julian_Date_of_Year>:

double Julian_Date_of_Year(double year)
{
 8012548:	b5b0      	push	{r4, r5, r7, lr}
 801254a:	b088      	sub	sp, #32
 801254c:	af00      	add	r7, sp, #0
 801254e:	ed87 0b00 	vstr	d0, [r7]
	/* pages 23-25. Calculate Julian Date of 0.0 Jan year */

	long A, B, i;
	double jdoy;

	year=year-1;
 8012552:	f04f 0200 	mov.w	r2, #0
 8012556:	4b3a      	ldr	r3, [pc, #232]	@ (8012640 <Julian_Date_of_Year+0xf8>)
 8012558:	e9d7 0100 	ldrd	r0, r1, [r7]
 801255c:	f7ed fea4 	bl	80002a8 <__aeabi_dsub>
 8012560:	4602      	mov	r2, r0
 8012562:	460b      	mov	r3, r1
 8012564:	e9c7 2300 	strd	r2, r3, [r7]
	i=year/100;
 8012568:	f04f 0200 	mov.w	r2, #0
 801256c:	4b35      	ldr	r3, [pc, #212]	@ (8012644 <Julian_Date_of_Year+0xfc>)
 801256e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012572:	f7ee f97b 	bl	800086c <__aeabi_ddiv>
 8012576:	4602      	mov	r2, r0
 8012578:	460b      	mov	r3, r1
 801257a:	4610      	mov	r0, r2
 801257c:	4619      	mov	r1, r3
 801257e:	f7ee fafb 	bl	8000b78 <__aeabi_d2iz>
 8012582:	4603      	mov	r3, r0
 8012584:	61fb      	str	r3, [r7, #28]
	A=i;
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	61bb      	str	r3, [r7, #24]
	i=A/4;
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	2b00      	cmp	r3, #0
 801258e:	da00      	bge.n	8012592 <Julian_Date_of_Year+0x4a>
 8012590:	3303      	adds	r3, #3
 8012592:	109b      	asrs	r3, r3, #2
 8012594:	61fb      	str	r3, [r7, #28]
	B=2-A+i;
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	f1c3 0302 	rsb	r3, r3, #2
 801259c:	69fa      	ldr	r2, [r7, #28]
 801259e:	4413      	add	r3, r2
 80125a0:	617b      	str	r3, [r7, #20]
	i=365.25*year;
 80125a2:	a321      	add	r3, pc, #132	@ (adr r3, 8012628 <Julian_Date_of_Year+0xe0>)
 80125a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80125ac:	f7ee f834 	bl	8000618 <__aeabi_dmul>
 80125b0:	4602      	mov	r2, r0
 80125b2:	460b      	mov	r3, r1
 80125b4:	4610      	mov	r0, r2
 80125b6:	4619      	mov	r1, r3
 80125b8:	f7ee fade 	bl	8000b78 <__aeabi_d2iz>
 80125bc:	4603      	mov	r3, r0
 80125be:	61fb      	str	r3, [r7, #28]
	i+=30.6001*14;
 80125c0:	69f8      	ldr	r0, [r7, #28]
 80125c2:	f7ed ffbf 	bl	8000544 <__aeabi_i2d>
 80125c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8012630 <Julian_Date_of_Year+0xe8>)
 80125c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125cc:	f7ed fe6e 	bl	80002ac <__adddf3>
 80125d0:	4602      	mov	r2, r0
 80125d2:	460b      	mov	r3, r1
 80125d4:	4610      	mov	r0, r2
 80125d6:	4619      	mov	r1, r3
 80125d8:	f7ee face 	bl	8000b78 <__aeabi_d2iz>
 80125dc:	4603      	mov	r3, r0
 80125de:	61fb      	str	r3, [r7, #28]
	jdoy=i+1720994.5+B;
 80125e0:	69f8      	ldr	r0, [r7, #28]
 80125e2:	f7ed ffaf 	bl	8000544 <__aeabi_i2d>
 80125e6:	a314      	add	r3, pc, #80	@ (adr r3, 8012638 <Julian_Date_of_Year+0xf0>)
 80125e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ec:	f7ed fe5e 	bl	80002ac <__adddf3>
 80125f0:	4602      	mov	r2, r0
 80125f2:	460b      	mov	r3, r1
 80125f4:	4614      	mov	r4, r2
 80125f6:	461d      	mov	r5, r3
 80125f8:	6978      	ldr	r0, [r7, #20]
 80125fa:	f7ed ffa3 	bl	8000544 <__aeabi_i2d>
 80125fe:	4602      	mov	r2, r0
 8012600:	460b      	mov	r3, r1
 8012602:	4620      	mov	r0, r4
 8012604:	4629      	mov	r1, r5
 8012606:	f7ed fe51 	bl	80002ac <__adddf3>
 801260a:	4602      	mov	r2, r0
 801260c:	460b      	mov	r3, r1
 801260e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return jdoy;
 8012612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012616:	ec43 2b17 	vmov	d7, r2, r3
}
 801261a:	eeb0 0a47 	vmov.f32	s0, s14
 801261e:	eef0 0a67 	vmov.f32	s1, s15
 8012622:	3720      	adds	r7, #32
 8012624:	46bd      	mov	sp, r7
 8012626:	bdb0      	pop	{r4, r5, r7, pc}
 8012628:	00000000 	.word	0x00000000
 801262c:	4076d400 	.word	0x4076d400
 8012630:	226809d5 	.word	0x226809d5
 8012634:	407ac66c 	.word	0x407ac66c
 8012638:	80000000 	.word	0x80000000
 801263c:	413a42a2 	.word	0x413a42a2
 8012640:	3ff00000 	.word	0x3ff00000
 8012644:	40590000 	.word	0x40590000

08012648 <Julian_Date_of_Epoch>:

double Julian_Date_of_Epoch(double epoch)
{ 
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	ed87 0b00 	vstr	d0, [r7]
	double year, day;

	/* Modification to support Y2K */
	/* Valid 1957 through 2056     */

	day=modf(epoch*1E-3, &year)*1E3;
 8012652:	a332      	add	r3, pc, #200	@ (adr r3, 801271c <Julian_Date_of_Epoch+0xd4>)
 8012654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012658:	e9d7 0100 	ldrd	r0, r1, [r7]
 801265c:	f7ed ffdc 	bl	8000618 <__aeabi_dmul>
 8012660:	4602      	mov	r2, r0
 8012662:	460b      	mov	r3, r1
 8012664:	ec43 2b17 	vmov	d7, r2, r3
 8012668:	f107 0308 	add.w	r3, r7, #8
 801266c:	4618      	mov	r0, r3
 801266e:	eeb0 0a47 	vmov.f32	s0, s14
 8012672:	eef0 0a67 	vmov.f32	s1, s15
 8012676:	f00a f96d 	bl	801c954 <modf>
 801267a:	ec51 0b10 	vmov	r0, r1, d0
 801267e:	f04f 0200 	mov.w	r2, #0
 8012682:	4b23      	ldr	r3, [pc, #140]	@ (8012710 <Julian_Date_of_Epoch+0xc8>)
 8012684:	f7ed ffc8 	bl	8000618 <__aeabi_dmul>
 8012688:	4602      	mov	r2, r0
 801268a:	460b      	mov	r3, r1
 801268c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if (year<57)
 8012690:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012694:	f04f 0200 	mov.w	r2, #0
 8012698:	4b1e      	ldr	r3, [pc, #120]	@ (8012714 <Julian_Date_of_Epoch+0xcc>)
 801269a:	f7ee fa2f 	bl	8000afc <__aeabi_dcmplt>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d00b      	beq.n	80126bc <Julian_Date_of_Epoch+0x74>
		year=year+2000;
 80126a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80126a8:	f04f 0200 	mov.w	r2, #0
 80126ac:	4b1a      	ldr	r3, [pc, #104]	@ (8012718 <Julian_Date_of_Epoch+0xd0>)
 80126ae:	f7ed fdfd 	bl	80002ac <__adddf3>
 80126b2:	4602      	mov	r2, r0
 80126b4:	460b      	mov	r3, r1
 80126b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80126ba:	e00a      	b.n	80126d2 <Julian_Date_of_Epoch+0x8a>
	else
		year=year+1900;
 80126bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80126c0:	a311      	add	r3, pc, #68	@ (adr r3, 8012708 <Julian_Date_of_Epoch+0xc0>)
 80126c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c6:	f7ed fdf1 	bl	80002ac <__adddf3>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (Julian_Date_of_Year(year)+day);
 80126d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80126d6:	eeb0 0a47 	vmov.f32	s0, s14
 80126da:	eef0 0a67 	vmov.f32	s1, s15
 80126de:	f7ff ff33 	bl	8012548 <Julian_Date_of_Year>
 80126e2:	ec51 0b10 	vmov	r0, r1, d0
 80126e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80126ea:	f7ed fddf 	bl	80002ac <__adddf3>
 80126ee:	4602      	mov	r2, r0
 80126f0:	460b      	mov	r3, r1
 80126f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80126f6:	eeb0 0a47 	vmov.f32	s0, s14
 80126fa:	eef0 0a67 	vmov.f32	s1, s15
 80126fe:	3718      	adds	r7, #24
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	f3af 8000 	nop.w
 8012708:	00000000 	.word	0x00000000
 801270c:	409db000 	.word	0x409db000
 8012710:	408f4000 	.word	0x408f4000
 8012714:	404c8000 	.word	0x404c8000
 8012718:	409f4000 	.word	0x409f4000
 801271c:	d2f1a9fc 	.word	0xd2f1a9fc
 8012720:	3f50624d 	.word	0x3f50624d
 8012724:	00000000 	.word	0x00000000

08012728 <ThetaG_JD>:

double ThetaG_JD(double jd)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b08a      	sub	sp, #40	@ 0x28
 801272c:	af00      	add	r7, sp, #0
 801272e:	ed87 0b00 	vstr	d0, [r7]
	/* Reference:  The 1992 Astronomical Almanac, page B6. */

	double UT, TU, GMST;

	double dummy;
	UT=modf(jd+0.5, &dummy);
 8012732:	f04f 0200 	mov.w	r2, #0
 8012736:	4b62      	ldr	r3, [pc, #392]	@ (80128c0 <ThetaG_JD+0x198>)
 8012738:	e9d7 0100 	ldrd	r0, r1, [r7]
 801273c:	f7ed fdb6 	bl	80002ac <__adddf3>
 8012740:	4602      	mov	r2, r0
 8012742:	460b      	mov	r3, r1
 8012744:	ec43 2b17 	vmov	d7, r2, r3
 8012748:	f107 0308 	add.w	r3, r7, #8
 801274c:	4618      	mov	r0, r3
 801274e:	eeb0 0a47 	vmov.f32	s0, s14
 8012752:	eef0 0a67 	vmov.f32	s1, s15
 8012756:	f00a f8fd 	bl	801c954 <modf>
 801275a:	ed87 0b08 	vstr	d0, [r7, #32]
	jd = jd - UT;
 801275e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012766:	f7ed fd9f 	bl	80002a8 <__aeabi_dsub>
 801276a:	4602      	mov	r2, r0
 801276c:	460b      	mov	r3, r1
 801276e:	e9c7 2300 	strd	r2, r3, [r7]
	TU=(jd-2451545.0)/36525;
 8012772:	a341      	add	r3, pc, #260	@ (adr r3, 8012878 <ThetaG_JD+0x150>)
 8012774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012778:	e9d7 0100 	ldrd	r0, r1, [r7]
 801277c:	f7ed fd94 	bl	80002a8 <__aeabi_dsub>
 8012780:	4602      	mov	r2, r0
 8012782:	460b      	mov	r3, r1
 8012784:	4610      	mov	r0, r2
 8012786:	4619      	mov	r1, r3
 8012788:	a33d      	add	r3, pc, #244	@ (adr r3, 8012880 <ThetaG_JD+0x158>)
 801278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278e:	f7ee f86d 	bl	800086c <__aeabi_ddiv>
 8012792:	4602      	mov	r2, r0
 8012794:	460b      	mov	r3, r1
 8012796:	e9c7 2306 	strd	r2, r3, [r7, #24]
	GMST=24110.54841+TU*(8640184.812866+TU*(0.093104-TU*6.2E-6));
 801279a:	a33b      	add	r3, pc, #236	@ (adr r3, 8012888 <ThetaG_JD+0x160>)
 801279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80127a4:	f7ed ff38 	bl	8000618 <__aeabi_dmul>
 80127a8:	4602      	mov	r2, r0
 80127aa:	460b      	mov	r3, r1
 80127ac:	a138      	add	r1, pc, #224	@ (adr r1, 8012890 <ThetaG_JD+0x168>)
 80127ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127b2:	f7ed fd79 	bl	80002a8 <__aeabi_dsub>
 80127b6:	4602      	mov	r2, r0
 80127b8:	460b      	mov	r3, r1
 80127ba:	4610      	mov	r0, r2
 80127bc:	4619      	mov	r1, r3
 80127be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80127c2:	f7ed ff29 	bl	8000618 <__aeabi_dmul>
 80127c6:	4602      	mov	r2, r0
 80127c8:	460b      	mov	r3, r1
 80127ca:	4610      	mov	r0, r2
 80127cc:	4619      	mov	r1, r3
 80127ce:	a332      	add	r3, pc, #200	@ (adr r3, 8012898 <ThetaG_JD+0x170>)
 80127d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d4:	f7ed fd6a 	bl	80002ac <__adddf3>
 80127d8:	4602      	mov	r2, r0
 80127da:	460b      	mov	r3, r1
 80127dc:	4610      	mov	r0, r2
 80127de:	4619      	mov	r1, r3
 80127e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80127e4:	f7ed ff18 	bl	8000618 <__aeabi_dmul>
 80127e8:	4602      	mov	r2, r0
 80127ea:	460b      	mov	r3, r1
 80127ec:	4610      	mov	r0, r2
 80127ee:	4619      	mov	r1, r3
 80127f0:	a32b      	add	r3, pc, #172	@ (adr r3, 80128a0 <ThetaG_JD+0x178>)
 80127f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f6:	f7ed fd59 	bl	80002ac <__adddf3>
 80127fa:	4602      	mov	r2, r0
 80127fc:	460b      	mov	r3, r1
 80127fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	GMST=fmod(GMST+SECONDS_PER_DAY*EARTH_ROTATIONS_PER_SIDERIAL_DAY*UT,SECONDS_PER_DAY);
 8012802:	a329      	add	r3, pc, #164	@ (adr r3, 80128a8 <ThetaG_JD+0x180>)
 8012804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012808:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801280c:	f7ed ff04 	bl	8000618 <__aeabi_dmul>
 8012810:	4602      	mov	r2, r0
 8012812:	460b      	mov	r3, r1
 8012814:	4610      	mov	r0, r2
 8012816:	4619      	mov	r1, r3
 8012818:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801281c:	f7ed fd46 	bl	80002ac <__adddf3>
 8012820:	4602      	mov	r2, r0
 8012822:	460b      	mov	r3, r1
 8012824:	ec43 2b17 	vmov	d7, r2, r3
 8012828:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80128b0 <ThetaG_JD+0x188>
 801282c:	eeb0 0a47 	vmov.f32	s0, s14
 8012830:	eef0 0a67 	vmov.f32	s1, s15
 8012834:	f00d fa04 	bl	801fc40 <fmod>
 8012838:	ed87 0b04 	vstr	d0, [r7, #16]

	return (2*M_PI*GMST/SECONDS_PER_DAY);
 801283c:	a31e      	add	r3, pc, #120	@ (adr r3, 80128b8 <ThetaG_JD+0x190>)
 801283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012842:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012846:	f7ed fee7 	bl	8000618 <__aeabi_dmul>
 801284a:	4602      	mov	r2, r0
 801284c:	460b      	mov	r3, r1
 801284e:	4610      	mov	r0, r2
 8012850:	4619      	mov	r1, r3
 8012852:	a317      	add	r3, pc, #92	@ (adr r3, 80128b0 <ThetaG_JD+0x188>)
 8012854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012858:	f7ee f808 	bl	800086c <__aeabi_ddiv>
 801285c:	4602      	mov	r2, r0
 801285e:	460b      	mov	r3, r1
 8012860:	ec43 2b17 	vmov	d7, r2, r3
}
 8012864:	eeb0 0a47 	vmov.f32	s0, s14
 8012868:	eef0 0a67 	vmov.f32	s1, s15
 801286c:	3728      	adds	r7, #40	@ 0x28
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	f3af 8000 	nop.w
 8012878:	80000000 	.word	0x80000000
 801287c:	4142b42c 	.word	0x4142b42c
 8012880:	00000000 	.word	0x00000000
 8012884:	40e1d5a0 	.word	0x40e1d5a0
 8012888:	05e6c9ce 	.word	0x05e6c9ce
 801288c:	3eda0133 	.word	0x3eda0133
 8012890:	eb2074eb 	.word	0xeb2074eb
 8012894:	3fb7d5a9 	.word	0x3fb7d5a9
 8012898:	1a02ff8f 	.word	0x1a02ff8f
 801289c:	41607ad7 	.word	0x41607ad7
 80128a0:	192641b3 	.word	0x192641b3
 80128a4:	40d78ba3 	.word	0x40d78ba3
 80128a8:	e2c87b73 	.word	0xe2c87b73
 80128ac:	40f526c8 	.word	0x40f526c8
 80128b0:	00000000 	.word	0x00000000
 80128b4:	40f51800 	.word	0x40f51800
 80128b8:	54442d18 	.word	0x54442d18
 80128bc:	401921fb 	.word	0x401921fb
 80128c0:	3fe00000 	.word	0x3fe00000
 80128c4:	00000000 	.word	0x00000000

080128c8 <Calculate_User_PosVel>:

void Calculate_User_PosVel(double time, geodetic_t *geodetic, double obs_pos[3], double obs_vel[3])
{
 80128c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80128cc:	b08c      	sub	sp, #48	@ 0x30
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	ed87 0b04 	vstr	d0, [r7, #16]
 80128d4:	60f8      	str	r0, [r7, #12]
 80128d6:	60b9      	str	r1, [r7, #8]
 80128d8:	607a      	str	r2, [r7, #4]

	/* Reference:  The 1992 Astronomical Almanac, page K11. */

	double c, sq, achcp;

	geodetic->theta=FMod2p(ThetaG_JD(time)+geodetic->lon); /* LMST */
 80128da:	ed97 0b04 	vldr	d0, [r7, #16]
 80128de:	f7ff ff23 	bl	8012728 <ThetaG_JD>
 80128e2:	ec51 0b10 	vmov	r0, r1, d0
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80128ec:	f7ed fcde 	bl	80002ac <__adddf3>
 80128f0:	4602      	mov	r2, r0
 80128f2:	460b      	mov	r3, r1
 80128f4:	ec43 2b17 	vmov	d7, r2, r3
 80128f8:	eeb0 0a47 	vmov.f32	s0, s14
 80128fc:	eef0 0a67 	vmov.f32	s1, s15
 8012900:	f7ff fdce 	bl	80124a0 <FMod2p>
 8012904:	eeb0 7a40 	vmov.f32	s14, s0
 8012908:	eef0 7a60 	vmov.f32	s15, s1
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	ed83 7b06 	vstr	d7, [r3, #24]
	c=1/sqrt(1+FLATTENING_FACTOR*(FLATTENING_FACTOR-2)*Sqr(sin(geodetic->lat)));
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	ed93 7b00 	vldr	d7, [r3]
 8012918:	eeb0 0a47 	vmov.f32	s0, s14
 801291c:	eef0 0a67 	vmov.f32	s1, s15
 8012920:	f00d fc8e 	bl	8020240 <sin>
 8012924:	eeb0 7a40 	vmov.f32	s14, s0
 8012928:	eef0 7a60 	vmov.f32	s15, s1
 801292c:	eeb0 0a47 	vmov.f32	s0, s14
 8012930:	eef0 0a67 	vmov.f32	s1, s15
 8012934:	f7ff fd9c 	bl	8012470 <Sqr>
 8012938:	ec51 0b10 	vmov	r0, r1, d0
 801293c:	a375      	add	r3, pc, #468	@ (adr r3, 8012b14 <Calculate_User_PosVel+0x24c>)
 801293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012942:	f7ed fe69 	bl	8000618 <__aeabi_dmul>
 8012946:	4602      	mov	r2, r0
 8012948:	460b      	mov	r3, r1
 801294a:	4610      	mov	r0, r2
 801294c:	4619      	mov	r1, r3
 801294e:	f04f 0200 	mov.w	r2, #0
 8012952:	4b6f      	ldr	r3, [pc, #444]	@ (8012b10 <Calculate_User_PosVel+0x248>)
 8012954:	f7ed fcaa 	bl	80002ac <__adddf3>
 8012958:	4602      	mov	r2, r0
 801295a:	460b      	mov	r3, r1
 801295c:	ec43 2b17 	vmov	d7, r2, r3
 8012960:	eeb0 0a47 	vmov.f32	s0, s14
 8012964:	eef0 0a67 	vmov.f32	s1, s15
 8012968:	f00d fa48 	bl	801fdfc <sqrt>
 801296c:	ec53 2b10 	vmov	r2, r3, d0
 8012970:	f04f 0000 	mov.w	r0, #0
 8012974:	4966      	ldr	r1, [pc, #408]	@ (8012b10 <Calculate_User_PosVel+0x248>)
 8012976:	f7ed ff79 	bl	800086c <__aeabi_ddiv>
 801297a:	4602      	mov	r2, r0
 801297c:	460b      	mov	r3, r1
 801297e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	sq=Sqr(1-FLATTENING_FACTOR)*c;
 8012982:	ed9f 0b5b 	vldr	d0, [pc, #364]	@ 8012af0 <Calculate_User_PosVel+0x228>
 8012986:	f7ff fd73 	bl	8012470 <Sqr>
 801298a:	ec53 2b10 	vmov	r2, r3, d0
 801298e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8012992:	f7ed fe41 	bl	8000618 <__aeabi_dmul>
 8012996:	4602      	mov	r2, r0
 8012998:	460b      	mov	r3, r1
 801299a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	achcp=(EARTH_RADIUS_KM_WGS84*c+geodetic->alt)*cos(geodetic->lat);
 801299e:	a356      	add	r3, pc, #344	@ (adr r3, 8012af8 <Calculate_User_PosVel+0x230>)
 80129a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80129a8:	f7ed fe36 	bl	8000618 <__aeabi_dmul>
 80129ac:	4602      	mov	r2, r0
 80129ae:	460b      	mov	r3, r1
 80129b0:	4610      	mov	r0, r2
 80129b2:	4619      	mov	r1, r3
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80129ba:	f7ed fc77 	bl	80002ac <__adddf3>
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	4614      	mov	r4, r2
 80129c4:	461d      	mov	r5, r3
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	ed93 7b00 	vldr	d7, [r3]
 80129cc:	eeb0 0a47 	vmov.f32	s0, s14
 80129d0:	eef0 0a67 	vmov.f32	s1, s15
 80129d4:	f00d fbd8 	bl	8020188 <cos>
 80129d8:	ec53 2b10 	vmov	r2, r3, d0
 80129dc:	4620      	mov	r0, r4
 80129de:	4629      	mov	r1, r5
 80129e0:	f7ed fe1a 	bl	8000618 <__aeabi_dmul>
 80129e4:	4602      	mov	r2, r0
 80129e6:	460b      	mov	r3, r1
 80129e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	obs_pos[0] = (achcp*cos(geodetic->theta)); /* kilometers */
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	ed93 7b06 	vldr	d7, [r3, #24]
 80129f2:	eeb0 0a47 	vmov.f32	s0, s14
 80129f6:	eef0 0a67 	vmov.f32	s1, s15
 80129fa:	f00d fbc5 	bl	8020188 <cos>
 80129fe:	ec51 0b10 	vmov	r0, r1, d0
 8012a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012a06:	f7ed fe07 	bl	8000618 <__aeabi_dmul>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	68b9      	ldr	r1, [r7, #8]
 8012a10:	e9c1 2300 	strd	r2, r3, [r1]
	obs_pos[1] = (achcp*sin(geodetic->theta));
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	ed93 7b06 	vldr	d7, [r3, #24]
 8012a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8012a1e:	eef0 0a67 	vmov.f32	s1, s15
 8012a22:	f00d fc0d 	bl	8020240 <sin>
 8012a26:	ec51 0b10 	vmov	r0, r1, d0
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	f103 0408 	add.w	r4, r3, #8
 8012a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012a34:	f7ed fdf0 	bl	8000618 <__aeabi_dmul>
 8012a38:	4602      	mov	r2, r0
 8012a3a:	460b      	mov	r3, r1
 8012a3c:	e9c4 2300 	strd	r2, r3, [r4]
	obs_pos[2] = ((EARTH_RADIUS_KM_WGS84*sq+geodetic->alt)*sin(geodetic->lat));
 8012a40:	a32d      	add	r3, pc, #180	@ (adr r3, 8012af8 <Calculate_User_PosVel+0x230>)
 8012a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012a4a:	f7ed fde5 	bl	8000618 <__aeabi_dmul>
 8012a4e:	4602      	mov	r2, r0
 8012a50:	460b      	mov	r3, r1
 8012a52:	4610      	mov	r0, r2
 8012a54:	4619      	mov	r1, r3
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012a5c:	f7ed fc26 	bl	80002ac <__adddf3>
 8012a60:	4602      	mov	r2, r0
 8012a62:	460b      	mov	r3, r1
 8012a64:	4690      	mov	r8, r2
 8012a66:	4699      	mov	r9, r3
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	ed93 7b00 	vldr	d7, [r3]
 8012a6e:	eeb0 0a47 	vmov.f32	s0, s14
 8012a72:	eef0 0a67 	vmov.f32	s1, s15
 8012a76:	f00d fbe3 	bl	8020240 <sin>
 8012a7a:	ec51 0b10 	vmov	r0, r1, d0
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	f103 0410 	add.w	r4, r3, #16
 8012a84:	4602      	mov	r2, r0
 8012a86:	460b      	mov	r3, r1
 8012a88:	4640      	mov	r0, r8
 8012a8a:	4649      	mov	r1, r9
 8012a8c:	f7ed fdc4 	bl	8000618 <__aeabi_dmul>
 8012a90:	4602      	mov	r2, r0
 8012a92:	460b      	mov	r3, r1
 8012a94:	e9c4 2300 	strd	r2, r3, [r4]
	obs_vel[0] = (-EARTH_ANGULAR_VELOCITY*obs_pos[1]); /* kilometers/second */
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	3308      	adds	r3, #8
 8012a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012aa0:	a317      	add	r3, pc, #92	@ (adr r3, 8012b00 <Calculate_User_PosVel+0x238>)
 8012aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa6:	f7ed fdb7 	bl	8000618 <__aeabi_dmul>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	460b      	mov	r3, r1
 8012aae:	6879      	ldr	r1, [r7, #4]
 8012ab0:	e9c1 2300 	strd	r2, r3, [r1]
	obs_vel[1] = (EARTH_ANGULAR_VELOCITY*obs_pos[0]);
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f103 0408 	add.w	r4, r3, #8
 8012ac0:	a311      	add	r3, pc, #68	@ (adr r3, 8012b08 <Calculate_User_PosVel+0x240>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	f7ed fda7 	bl	8000618 <__aeabi_dmul>
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	e9c4 2300 	strd	r2, r3, [r4]
	obs_vel[2] = (0);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f103 0110 	add.w	r1, r3, #16
 8012ad8:	f04f 0200 	mov.w	r2, #0
 8012adc:	f04f 0300 	mov.w	r3, #0
 8012ae0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8012ae4:	bf00      	nop
 8012ae6:	3730      	adds	r7, #48	@ 0x30
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012aee:	bf00      	nop
 8012af0:	a57b0c1f 	.word	0xa57b0c1f
 8012af4:	3fefe488 	.word	0x3fefe488
 8012af8:	126e978d 	.word	0x126e978d
 8012afc:	40b8ea23 	.word	0x40b8ea23
 8012b00:	d157db65 	.word	0xd157db65
 8012b04:	bf131da7 	.word	0xbf131da7
 8012b08:	d157db65 	.word	0xd157db65
 8012b0c:	3f131da7 	.word	0x3f131da7
 8012b10:	3ff00000 	.word	0x3ff00000
 8012b14:	f1fe94ef 	.word	0xf1fe94ef
 8012b18:	bf7b6b90 	.word	0xbf7b6b90
 8012b1c:	00000000 	.word	0x00000000

08012b20 <DayNum>:

long DayNum(int m, int d, int y)
{
 8012b20:	b5b0      	push	{r4, r5, r7, lr}
 8012b22:	b08a      	sub	sp, #40	@ 0x28
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]

	long dn;
	double mm, yy;

	if (m<3) {
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	dc05      	bgt.n	8012b3e <DayNum+0x1e>
		y--;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	3b01      	subs	r3, #1
 8012b36:	607b      	str	r3, [r7, #4]
		m+=12;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	330c      	adds	r3, #12
 8012b3c:	60fb      	str	r3, [r7, #12]
	}

	if (y<57)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2b38      	cmp	r3, #56	@ 0x38
 8012b42:	dc02      	bgt.n	8012b4a <DayNum+0x2a>
		y+=100;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	3364      	adds	r3, #100	@ 0x64
 8012b48:	607b      	str	r3, [r7, #4]

	yy=(double)y;
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f7ed fcfa 	bl	8000544 <__aeabi_i2d>
 8012b50:	4602      	mov	r2, r0
 8012b52:	460b      	mov	r3, r1
 8012b54:	e9c7 2308 	strd	r2, r3, [r7, #32]
	mm=(double)m;
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	f7ed fcf3 	bl	8000544 <__aeabi_i2d>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	460b      	mov	r3, r1
 8012b62:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dn=(long)(floor(365.25*(yy-80.0))-floor(19.0+yy/100.0)+floor(4.75+yy/400.0)-16.0);
 8012b66:	f04f 0200 	mov.w	r2, #0
 8012b6a:	4b57      	ldr	r3, [pc, #348]	@ (8012cc8 <DayNum+0x1a8>)
 8012b6c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012b70:	f7ed fb9a 	bl	80002a8 <__aeabi_dsub>
 8012b74:	4602      	mov	r2, r0
 8012b76:	460b      	mov	r3, r1
 8012b78:	4610      	mov	r0, r2
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	a34c      	add	r3, pc, #304	@ (adr r3, 8012cb0 <DayNum+0x190>)
 8012b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b82:	f7ed fd49 	bl	8000618 <__aeabi_dmul>
 8012b86:	4602      	mov	r2, r0
 8012b88:	460b      	mov	r3, r1
 8012b8a:	ec43 2b17 	vmov	d7, r2, r3
 8012b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8012b92:	eef0 0a67 	vmov.f32	s1, s15
 8012b96:	f00d fc8b 	bl	80204b0 <floor>
 8012b9a:	ec55 4b10 	vmov	r4, r5, d0
 8012b9e:	f04f 0200 	mov.w	r2, #0
 8012ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8012ccc <DayNum+0x1ac>)
 8012ba4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012ba8:	f7ed fe60 	bl	800086c <__aeabi_ddiv>
 8012bac:	4602      	mov	r2, r0
 8012bae:	460b      	mov	r3, r1
 8012bb0:	4610      	mov	r0, r2
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	f04f 0200 	mov.w	r2, #0
 8012bb8:	4b45      	ldr	r3, [pc, #276]	@ (8012cd0 <DayNum+0x1b0>)
 8012bba:	f7ed fb77 	bl	80002ac <__adddf3>
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	ec43 2b17 	vmov	d7, r2, r3
 8012bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8012bca:	eef0 0a67 	vmov.f32	s1, s15
 8012bce:	f00d fc6f 	bl	80204b0 <floor>
 8012bd2:	ec53 2b10 	vmov	r2, r3, d0
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	4629      	mov	r1, r5
 8012bda:	f7ed fb65 	bl	80002a8 <__aeabi_dsub>
 8012bde:	4602      	mov	r2, r0
 8012be0:	460b      	mov	r3, r1
 8012be2:	4614      	mov	r4, r2
 8012be4:	461d      	mov	r5, r3
 8012be6:	f04f 0200 	mov.w	r2, #0
 8012bea:	4b3a      	ldr	r3, [pc, #232]	@ (8012cd4 <DayNum+0x1b4>)
 8012bec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012bf0:	f7ed fe3c 	bl	800086c <__aeabi_ddiv>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	460b      	mov	r3, r1
 8012bf8:	4610      	mov	r0, r2
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	f04f 0200 	mov.w	r2, #0
 8012c00:	4b35      	ldr	r3, [pc, #212]	@ (8012cd8 <DayNum+0x1b8>)
 8012c02:	f7ed fb53 	bl	80002ac <__adddf3>
 8012c06:	4602      	mov	r2, r0
 8012c08:	460b      	mov	r3, r1
 8012c0a:	ec43 2b17 	vmov	d7, r2, r3
 8012c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8012c12:	eef0 0a67 	vmov.f32	s1, s15
 8012c16:	f00d fc4b 	bl	80204b0 <floor>
 8012c1a:	ec53 2b10 	vmov	r2, r3, d0
 8012c1e:	4620      	mov	r0, r4
 8012c20:	4629      	mov	r1, r5
 8012c22:	f7ed fb43 	bl	80002ac <__adddf3>
 8012c26:	4602      	mov	r2, r0
 8012c28:	460b      	mov	r3, r1
 8012c2a:	4610      	mov	r0, r2
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	f04f 0200 	mov.w	r2, #0
 8012c32:	4b2a      	ldr	r3, [pc, #168]	@ (8012cdc <DayNum+0x1bc>)
 8012c34:	f7ed fb38 	bl	80002a8 <__aeabi_dsub>
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	4610      	mov	r0, r2
 8012c3e:	4619      	mov	r1, r3
 8012c40:	f7ed ff9a 	bl	8000b78 <__aeabi_d2iz>
 8012c44:	4603      	mov	r3, r0
 8012c46:	617b      	str	r3, [r7, #20]
	dn+=d+30*m+(long)floor(0.6*mm-0.3);
 8012c48:	68fa      	ldr	r2, [r7, #12]
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	011b      	lsls	r3, r3, #4
 8012c4e:	1a9b      	subs	r3, r3, r2
 8012c50:	005b      	lsls	r3, r3, #1
 8012c52:	461a      	mov	r2, r3
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	18d4      	adds	r4, r2, r3
 8012c58:	a317      	add	r3, pc, #92	@ (adr r3, 8012cb8 <DayNum+0x198>)
 8012c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012c62:	f7ed fcd9 	bl	8000618 <__aeabi_dmul>
 8012c66:	4602      	mov	r2, r0
 8012c68:	460b      	mov	r3, r1
 8012c6a:	4610      	mov	r0, r2
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	a314      	add	r3, pc, #80	@ (adr r3, 8012cc0 <DayNum+0x1a0>)
 8012c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c74:	f7ed fb18 	bl	80002a8 <__aeabi_dsub>
 8012c78:	4602      	mov	r2, r0
 8012c7a:	460b      	mov	r3, r1
 8012c7c:	ec43 2b17 	vmov	d7, r2, r3
 8012c80:	eeb0 0a47 	vmov.f32	s0, s14
 8012c84:	eef0 0a67 	vmov.f32	s1, s15
 8012c88:	f00d fc12 	bl	80204b0 <floor>
 8012c8c:	ec53 2b10 	vmov	r2, r3, d0
 8012c90:	4610      	mov	r0, r2
 8012c92:	4619      	mov	r1, r3
 8012c94:	f7ed ff70 	bl	8000b78 <__aeabi_d2iz>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	4423      	add	r3, r4
 8012c9c:	697a      	ldr	r2, [r7, #20]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	617b      	str	r3, [r7, #20]
	return dn;
 8012ca2:	697b      	ldr	r3, [r7, #20]
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3728      	adds	r7, #40	@ 0x28
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bdb0      	pop	{r4, r5, r7, pc}
 8012cac:	f3af 8000 	nop.w
 8012cb0:	00000000 	.word	0x00000000
 8012cb4:	4076d400 	.word	0x4076d400
 8012cb8:	33333333 	.word	0x33333333
 8012cbc:	3fe33333 	.word	0x3fe33333
 8012cc0:	33333333 	.word	0x33333333
 8012cc4:	3fd33333 	.word	0x3fd33333
 8012cc8:	40540000 	.word	0x40540000
 8012ccc:	40590000 	.word	0x40590000
 8012cd0:	40330000 	.word	0x40330000
 8012cd4:	40790000 	.word	0x40790000
 8012cd8:	40130000 	.word	0x40130000
 8012cdc:	40300000 	.word	0x40300000

08012ce0 <Calculate_LatLonAlt>:


void Calculate_LatLonAlt(double time, const double pos[3],  geodetic_t *geodetic)
{
 8012ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ce4:	b08c      	sub	sp, #48	@ 0x30
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	ed87 0b02 	vstr	d0, [r7, #8]
 8012cec:	6078      	str	r0, [r7, #4]
 8012cee:	6039      	str	r1, [r7, #0]
	/* Reference:  The 1992 Astronomical Almanac, page K12. */

	double r, e2, phi, c;
	
	//Convert to julian time:
	time += JULIAN_TIME_DIFF;
 8012cf0:	a3ae      	add	r3, pc, #696	@ (adr r3, 8012fac <Calculate_LatLonAlt+0x2cc>)
 8012cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012cfa:	f7ed fad7 	bl	80002ac <__adddf3>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	460b      	mov	r3, r1
 8012d02:	e9c7 2302 	strd	r2, r3, [r7, #8]

	geodetic->theta = atan2(pos[1], pos[0]); /* radians */
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	3308      	adds	r3, #8
 8012d0a:	ed93 7b00 	vldr	d7, [r3]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	ed93 6b00 	vldr	d6, [r3]
 8012d14:	eeb0 1a46 	vmov.f32	s2, s12
 8012d18:	eef0 1a66 	vmov.f32	s3, s13
 8012d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8012d20:	eef0 0a67 	vmov.f32	s1, s15
 8012d24:	f00c ff40 	bl	801fba8 <atan2>
 8012d28:	eeb0 7a40 	vmov.f32	s14, s0
 8012d2c:	eef0 7a60 	vmov.f32	s15, s1
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	ed83 7b06 	vstr	d7, [r3, #24]
	geodetic->lon = FMod2p(geodetic->theta-ThetaG_JD(time)); /* radians */
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8012d3c:	ed97 0b02 	vldr	d0, [r7, #8]
 8012d40:	f7ff fcf2 	bl	8012728 <ThetaG_JD>
 8012d44:	ec53 2b10 	vmov	r2, r3, d0
 8012d48:	4640      	mov	r0, r8
 8012d4a:	4649      	mov	r1, r9
 8012d4c:	f7ed faac 	bl	80002a8 <__aeabi_dsub>
 8012d50:	4602      	mov	r2, r0
 8012d52:	460b      	mov	r3, r1
 8012d54:	ec43 2b17 	vmov	d7, r2, r3
 8012d58:	eeb0 0a47 	vmov.f32	s0, s14
 8012d5c:	eef0 0a67 	vmov.f32	s1, s15
 8012d60:	f7ff fb9e 	bl	80124a0 <FMod2p>
 8012d64:	eeb0 7a40 	vmov.f32	s14, s0
 8012d68:	eef0 7a60 	vmov.f32	s15, s1
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	ed83 7b02 	vstr	d7, [r3, #8]
	r = sqrt(Sqr(pos[0])+Sqr(pos[1]));
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	ed93 7b00 	vldr	d7, [r3]
 8012d78:	eeb0 0a47 	vmov.f32	s0, s14
 8012d7c:	eef0 0a67 	vmov.f32	s1, s15
 8012d80:	f7ff fb76 	bl	8012470 <Sqr>
 8012d84:	ec59 8b10 	vmov	r8, r9, d0
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3308      	adds	r3, #8
 8012d8c:	ed93 7b00 	vldr	d7, [r3]
 8012d90:	eeb0 0a47 	vmov.f32	s0, s14
 8012d94:	eef0 0a67 	vmov.f32	s1, s15
 8012d98:	f7ff fb6a 	bl	8012470 <Sqr>
 8012d9c:	ec53 2b10 	vmov	r2, r3, d0
 8012da0:	4640      	mov	r0, r8
 8012da2:	4649      	mov	r1, r9
 8012da4:	f7ed fa82 	bl	80002ac <__adddf3>
 8012da8:	4602      	mov	r2, r0
 8012daa:	460b      	mov	r3, r1
 8012dac:	ec43 2b17 	vmov	d7, r2, r3
 8012db0:	eeb0 0a47 	vmov.f32	s0, s14
 8012db4:	eef0 0a67 	vmov.f32	s1, s15
 8012db8:	f00d f820 	bl	801fdfc <sqrt>
 8012dbc:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	e2 = FLATTENING_FACTOR*(2-FLATTENING_FACTOR);
 8012dc0:	a37c      	add	r3, pc, #496	@ (adr r3, 8012fb4 <Calculate_LatLonAlt+0x2d4>)
 8012dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	geodetic->lat=atan2(pos[2],r); /* radians */
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	3310      	adds	r3, #16
 8012dce:	ed93 7b00 	vldr	d7, [r3]
 8012dd2:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8012dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8012dda:	eef0 0a67 	vmov.f32	s1, s15
 8012dde:	f00c fee3 	bl	801fba8 <atan2>
 8012de2:	eeb0 7a40 	vmov.f32	s14, s0
 8012de6:	eef0 7a60 	vmov.f32	s15, s1
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	ed83 7b00 	vstr	d7, [r3]

	do
	{
		phi=geodetic->lat;
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		c=1/sqrt(1-e2*Sqr(sin(phi)));
 8012dfa:	ed97 0b06 	vldr	d0, [r7, #24]
 8012dfe:	f00d fa1f 	bl	8020240 <sin>
 8012e02:	eeb0 7a40 	vmov.f32	s14, s0
 8012e06:	eef0 7a60 	vmov.f32	s15, s1
 8012e0a:	eeb0 0a47 	vmov.f32	s0, s14
 8012e0e:	eef0 0a67 	vmov.f32	s1, s15
 8012e12:	f7ff fb2d 	bl	8012470 <Sqr>
 8012e16:	ec51 0b10 	vmov	r0, r1, d0
 8012e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012e1e:	f7ed fbfb 	bl	8000618 <__aeabi_dmul>
 8012e22:	4602      	mov	r2, r0
 8012e24:	460b      	mov	r3, r1
 8012e26:	f04f 0000 	mov.w	r0, #0
 8012e2a:	495f      	ldr	r1, [pc, #380]	@ (8012fa8 <Calculate_LatLonAlt+0x2c8>)
 8012e2c:	f7ed fa3c 	bl	80002a8 <__aeabi_dsub>
 8012e30:	4602      	mov	r2, r0
 8012e32:	460b      	mov	r3, r1
 8012e34:	ec43 2b17 	vmov	d7, r2, r3
 8012e38:	eeb0 0a47 	vmov.f32	s0, s14
 8012e3c:	eef0 0a67 	vmov.f32	s1, s15
 8012e40:	f00c ffdc 	bl	801fdfc <sqrt>
 8012e44:	ec53 2b10 	vmov	r2, r3, d0
 8012e48:	f04f 0000 	mov.w	r0, #0
 8012e4c:	4956      	ldr	r1, [pc, #344]	@ (8012fa8 <Calculate_LatLonAlt+0x2c8>)
 8012e4e:	f7ed fd0d 	bl	800086c <__aeabi_ddiv>
 8012e52:	4602      	mov	r2, r0
 8012e54:	460b      	mov	r3, r1
 8012e56:	e9c7 2304 	strd	r2, r3, [r7, #16]
		geodetic->lat=atan2(pos[2]+EARTH_RADIUS_KM_WGS84*c*e2*sin(phi),r);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	3310      	adds	r3, #16
 8012e5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e62:	a349      	add	r3, pc, #292	@ (adr r3, 8012f88 <Calculate_LatLonAlt+0x2a8>)
 8012e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012e6c:	f7ed fbd4 	bl	8000618 <__aeabi_dmul>
 8012e70:	4602      	mov	r2, r0
 8012e72:	460b      	mov	r3, r1
 8012e74:	4610      	mov	r0, r2
 8012e76:	4619      	mov	r1, r3
 8012e78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012e7c:	f7ed fbcc 	bl	8000618 <__aeabi_dmul>
 8012e80:	4602      	mov	r2, r0
 8012e82:	460b      	mov	r3, r1
 8012e84:	4692      	mov	sl, r2
 8012e86:	469b      	mov	fp, r3
 8012e88:	ed97 0b06 	vldr	d0, [r7, #24]
 8012e8c:	f00d f9d8 	bl	8020240 <sin>
 8012e90:	ec53 2b10 	vmov	r2, r3, d0
 8012e94:	4650      	mov	r0, sl
 8012e96:	4659      	mov	r1, fp
 8012e98:	f7ed fbbe 	bl	8000618 <__aeabi_dmul>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	4640      	mov	r0, r8
 8012ea2:	4649      	mov	r1, r9
 8012ea4:	f7ed fa02 	bl	80002ac <__adddf3>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	460b      	mov	r3, r1
 8012eac:	ec43 2b17 	vmov	d7, r2, r3
 8012eb0:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8012eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8012eb8:	eef0 0a67 	vmov.f32	s1, s15
 8012ebc:	f00c fe74 	bl	801fba8 <atan2>
 8012ec0:	eeb0 7a40 	vmov.f32	s14, s0
 8012ec4:	eef0 7a60 	vmov.f32	s15, s1
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	ed83 7b00 	vstr	d7, [r3]

	} while (fabs(geodetic->lat-phi)>=1E-10);
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012ed8:	f7ed f9e6 	bl	80002a8 <__aeabi_dsub>
 8012edc:	4602      	mov	r2, r0
 8012ede:	460b      	mov	r3, r1
 8012ee0:	4614      	mov	r4, r2
 8012ee2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8012ee6:	a32a      	add	r3, pc, #168	@ (adr r3, 8012f90 <Calculate_LatLonAlt+0x2b0>)
 8012ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eec:	4620      	mov	r0, r4
 8012eee:	4629      	mov	r1, r5
 8012ef0:	f7ed fe18 	bl	8000b24 <__aeabi_dcmpge>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f47f af7a 	bne.w	8012df0 <Calculate_LatLonAlt+0x110>

	geodetic->alt=r/cos(geodetic->lat)-EARTH_RADIUS_KM_WGS84*c; /* kilometers */
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	ed93 7b00 	vldr	d7, [r3]
 8012f02:	eeb0 0a47 	vmov.f32	s0, s14
 8012f06:	eef0 0a67 	vmov.f32	s1, s15
 8012f0a:	f00d f93d 	bl	8020188 <cos>
 8012f0e:	ec53 2b10 	vmov	r2, r3, d0
 8012f12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8012f16:	f7ed fca9 	bl	800086c <__aeabi_ddiv>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	4614      	mov	r4, r2
 8012f20:	461d      	mov	r5, r3
 8012f22:	a319      	add	r3, pc, #100	@ (adr r3, 8012f88 <Calculate_LatLonAlt+0x2a8>)
 8012f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012f2c:	f7ed fb74 	bl	8000618 <__aeabi_dmul>
 8012f30:	4602      	mov	r2, r0
 8012f32:	460b      	mov	r3, r1
 8012f34:	4620      	mov	r0, r4
 8012f36:	4629      	mov	r1, r5
 8012f38:	f7ed f9b6 	bl	80002a8 <__aeabi_dsub>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	460b      	mov	r3, r1
 8012f40:	6839      	ldr	r1, [r7, #0]
 8012f42:	e9c1 2304 	strd	r2, r3, [r1, #16]

	if (geodetic->lat>PI_HALF)
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f4c:	a312      	add	r3, pc, #72	@ (adr r3, 8012f98 <Calculate_LatLonAlt+0x2b8>)
 8012f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f52:	f7ed fdf1 	bl	8000b38 <__aeabi_dcmpgt>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d100      	bne.n	8012f5e <Calculate_LatLonAlt+0x27e>
		geodetic->lat-= 2*M_PI;
}
 8012f5c:	e00c      	b.n	8012f78 <Calculate_LatLonAlt+0x298>
		geodetic->lat-= 2*M_PI;
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f64:	a30e      	add	r3, pc, #56	@ (adr r3, 8012fa0 <Calculate_LatLonAlt+0x2c0>)
 8012f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6a:	f7ed f99d 	bl	80002a8 <__aeabi_dsub>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	460b      	mov	r3, r1
 8012f72:	6839      	ldr	r1, [r7, #0]
 8012f74:	e9c1 2300 	strd	r2, r3, [r1]
}
 8012f78:	bf00      	nop
 8012f7a:	3730      	adds	r7, #48	@ 0x30
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012f82:	bf00      	nop
 8012f84:	f3af 8000 	nop.w
 8012f88:	126e978d 	.word	0x126e978d
 8012f8c:	40b8ea23 	.word	0x40b8ea23
 8012f90:	d9d7bdbb 	.word	0xd9d7bdbb
 8012f94:	3ddb7cdf 	.word	0x3ddb7cdf
 8012f98:	54442d18 	.word	0x54442d18
 8012f9c:	3ff921fb 	.word	0x3ff921fb
 8012fa0:	54442d18 	.word	0x54442d18
 8012fa4:	401921fb 	.word	0x401921fb
 8012fa8:	3ff00000 	.word	0x3ff00000
 8012fac:	40000000 	.word	0x40000000
 8012fb0:	4142a5e7 	.word	0x4142a5e7
 8012fb4:	f1fe94ef 	.word	0xf1fe94ef
 8012fb8:	3f7b6b90 	.word	0x3f7b6b90
 8012fbc:	00000000 	.word	0x00000000

08012fc0 <Calculate_Obs>:

void Calculate_Obs(double time, const double pos[3], const double vel[3], geodetic_t *geodetic, vector_t *obs_set)
{
 8012fc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012fc4:	b0b4      	sub	sp, #208	@ 0xd0
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	ed87 0b06 	vstr	d0, [r7, #24]
 8012fcc:	6178      	str	r0, [r7, #20]
 8012fce:	6139      	str	r1, [r7, #16]
 8012fd0:	60fa      	str	r2, [r7, #12]
 8012fd2:	60bb      	str	r3, [r7, #8]
	double obs_pos[3];
	double obs_vel[3];
	double range[3];
	double rgvel[3];

	Calculate_User_PosVel(time, geodetic, obs_pos, obs_vel);
 8012fd4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012fd8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012fdc:	4619      	mov	r1, r3
 8012fde:	68f8      	ldr	r0, [r7, #12]
 8012fe0:	ed97 0b06 	vldr	d0, [r7, #24]
 8012fe4:	f7ff fc70 	bl	80128c8 <Calculate_User_PosVel>

	vec3_sub(pos, obs_pos, range);
 8012fe8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8012fec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	6978      	ldr	r0, [r7, #20]
 8012ff4:	f7ff fa05 	bl	8012402 <vec3_sub>
	vec3_sub(vel, obs_vel, rgvel);
 8012ff8:	f107 0220 	add.w	r2, r7, #32
 8012ffc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8013000:	4619      	mov	r1, r3
 8013002:	6938      	ldr	r0, [r7, #16]
 8013004:	f7ff f9fd 	bl	8012402 <vec3_sub>
	
	double range_length = vec3_length(range);
 8013008:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801300c:	4618      	mov	r0, r3
 801300e:	f7ff f93a 	bl	8012286 <vec3_length>
 8013012:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0

	sin_lat=sin(geodetic->lat);
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	ed93 7b00 	vldr	d7, [r3]
 801301c:	eeb0 0a47 	vmov.f32	s0, s14
 8013020:	eef0 0a67 	vmov.f32	s1, s15
 8013024:	f00d f90c 	bl	8020240 <sin>
 8013028:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	cos_lat=cos(geodetic->lat);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	ed93 7b00 	vldr	d7, [r3]
 8013032:	eeb0 0a47 	vmov.f32	s0, s14
 8013036:	eef0 0a67 	vmov.f32	s1, s15
 801303a:	f00d f8a5 	bl	8020188 <cos>
 801303e:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
	sin_theta=sin(geodetic->theta);
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	ed93 7b06 	vldr	d7, [r3, #24]
 8013048:	eeb0 0a47 	vmov.f32	s0, s14
 801304c:	eef0 0a67 	vmov.f32	s1, s15
 8013050:	f00d f8f6 	bl	8020240 <sin>
 8013054:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
	cos_theta=cos(geodetic->theta);
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	ed93 7b06 	vldr	d7, [r3, #24]
 801305e:	eeb0 0a47 	vmov.f32	s0, s14
 8013062:	eef0 0a67 	vmov.f32	s1, s15
 8013066:	f00d f88f 	bl	8020188 <cos>
 801306a:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0
	top_s=sin_lat*cos_theta*range[0]+sin_lat*sin_theta*range[1]-cos_lat*range[2];
 801306e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8013072:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8013076:	f7ed facf 	bl	8000618 <__aeabi_dmul>
 801307a:	4602      	mov	r2, r0
 801307c:	460b      	mov	r3, r1
 801307e:	4610      	mov	r0, r2
 8013080:	4619      	mov	r1, r3
 8013082:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8013086:	f7ed fac7 	bl	8000618 <__aeabi_dmul>
 801308a:	4602      	mov	r2, r0
 801308c:	460b      	mov	r3, r1
 801308e:	4690      	mov	r8, r2
 8013090:	4699      	mov	r9, r3
 8013092:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8013096:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 801309a:	f7ed fabd 	bl	8000618 <__aeabi_dmul>
 801309e:	4602      	mov	r2, r0
 80130a0:	460b      	mov	r3, r1
 80130a2:	4610      	mov	r0, r2
 80130a4:	4619      	mov	r1, r3
 80130a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80130aa:	f7ed fab5 	bl	8000618 <__aeabi_dmul>
 80130ae:	4602      	mov	r2, r0
 80130b0:	460b      	mov	r3, r1
 80130b2:	4640      	mov	r0, r8
 80130b4:	4649      	mov	r1, r9
 80130b6:	f7ed f8f9 	bl	80002ac <__adddf3>
 80130ba:	4602      	mov	r2, r0
 80130bc:	460b      	mov	r3, r1
 80130be:	4690      	mov	r8, r2
 80130c0:	4699      	mov	r9, r3
 80130c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80130c6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80130ca:	f7ed faa5 	bl	8000618 <__aeabi_dmul>
 80130ce:	4602      	mov	r2, r0
 80130d0:	460b      	mov	r3, r1
 80130d2:	4640      	mov	r0, r8
 80130d4:	4649      	mov	r1, r9
 80130d6:	f7ed f8e7 	bl	80002a8 <__aeabi_dsub>
 80130da:	4602      	mov	r2, r0
 80130dc:	460b      	mov	r3, r1
 80130de:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	top_e=-sin_theta*range[0]+cos_theta*range[1];
 80130e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80130e6:	603b      	str	r3, [r7, #0]
 80130e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80130ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80130f0:	607b      	str	r3, [r7, #4]
 80130f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80130f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80130fa:	f7ed fa8d 	bl	8000618 <__aeabi_dmul>
 80130fe:	4602      	mov	r2, r0
 8013100:	460b      	mov	r3, r1
 8013102:	4690      	mov	r8, r2
 8013104:	4699      	mov	r9, r3
 8013106:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801310a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801310e:	f7ed fa83 	bl	8000618 <__aeabi_dmul>
 8013112:	4602      	mov	r2, r0
 8013114:	460b      	mov	r3, r1
 8013116:	4640      	mov	r0, r8
 8013118:	4649      	mov	r1, r9
 801311a:	f7ed f8c7 	bl	80002ac <__adddf3>
 801311e:	4602      	mov	r2, r0
 8013120:	460b      	mov	r3, r1
 8013122:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	top_z=cos_lat*cos_theta*range[0]+cos_lat*sin_theta*range[1]+sin_lat*range[2];
 8013126:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801312a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801312e:	f7ed fa73 	bl	8000618 <__aeabi_dmul>
 8013132:	4602      	mov	r2, r0
 8013134:	460b      	mov	r3, r1
 8013136:	4610      	mov	r0, r2
 8013138:	4619      	mov	r1, r3
 801313a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801313e:	f7ed fa6b 	bl	8000618 <__aeabi_dmul>
 8013142:	4602      	mov	r2, r0
 8013144:	460b      	mov	r3, r1
 8013146:	4690      	mov	r8, r2
 8013148:	4699      	mov	r9, r3
 801314a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 801314e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8013152:	f7ed fa61 	bl	8000618 <__aeabi_dmul>
 8013156:	4602      	mov	r2, r0
 8013158:	460b      	mov	r3, r1
 801315a:	4610      	mov	r0, r2
 801315c:	4619      	mov	r1, r3
 801315e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8013162:	f7ed fa59 	bl	8000618 <__aeabi_dmul>
 8013166:	4602      	mov	r2, r0
 8013168:	460b      	mov	r3, r1
 801316a:	4640      	mov	r0, r8
 801316c:	4649      	mov	r1, r9
 801316e:	f7ed f89d 	bl	80002ac <__adddf3>
 8013172:	4602      	mov	r2, r0
 8013174:	460b      	mov	r3, r1
 8013176:	4690      	mov	r8, r2
 8013178:	4699      	mov	r9, r3
 801317a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801317e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8013182:	f7ed fa49 	bl	8000618 <__aeabi_dmul>
 8013186:	4602      	mov	r2, r0
 8013188:	460b      	mov	r3, r1
 801318a:	4640      	mov	r0, r8
 801318c:	4649      	mov	r1, r9
 801318e:	f7ed f88d 	bl	80002ac <__adddf3>
 8013192:	4602      	mov	r2, r0
 8013194:	460b      	mov	r3, r1
 8013196:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	azim=atan(-top_e/top_s); /* Azimuth */
 801319a:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 801319e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80131a2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80131a6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80131aa:	4620      	mov	r0, r4
 80131ac:	4629      	mov	r1, r5
 80131ae:	f7ed fb5d 	bl	800086c <__aeabi_ddiv>
 80131b2:	4602      	mov	r2, r0
 80131b4:	460b      	mov	r3, r1
 80131b6:	ec43 2b17 	vmov	d7, r2, r3
 80131ba:	eeb0 0a47 	vmov.f32	s0, s14
 80131be:	eef0 0a67 	vmov.f32	s1, s15
 80131c2:	f00c fe49 	bl	801fe58 <atan>
 80131c6:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8

	if (top_s>0.0) 
 80131ca:	f04f 0200 	mov.w	r2, #0
 80131ce:	f04f 0300 	mov.w	r3, #0
 80131d2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80131d6:	f7ed fcaf 	bl	8000b38 <__aeabi_dcmpgt>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d00a      	beq.n	80131f6 <Calculate_Obs+0x236>
		azim=azim+PI;
 80131e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80132d0 <Calculate_Obs+0x310>)
 80131e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80131ea:	f7ed f85f 	bl	80002ac <__adddf3>
 80131ee:	4602      	mov	r2, r0
 80131f0:	460b      	mov	r3, r1
 80131f2:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

	if (azim<0.0)
 80131f6:	f04f 0200 	mov.w	r2, #0
 80131fa:	f04f 0300 	mov.w	r3, #0
 80131fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8013202:	f7ed fc7b 	bl	8000afc <__aeabi_dcmplt>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00a      	beq.n	8013222 <Calculate_Obs+0x262>
		azim = azim + 2*M_PI;
 801320c:	a332      	add	r3, pc, #200	@ (adr r3, 80132d8 <Calculate_Obs+0x318>)
 801320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8013216:	f7ed f849 	bl	80002ac <__adddf3>
 801321a:	4602      	mov	r2, r0
 801321c:	460b      	mov	r3, r1
 801321e:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

	el=asin_(top_z/range_length);
 8013222:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8013226:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 801322a:	f7ed fb1f 	bl	800086c <__aeabi_ddiv>
 801322e:	4602      	mov	r2, r0
 8013230:	460b      	mov	r3, r1
 8013232:	ec43 2b17 	vmov	d7, r2, r3
 8013236:	eeb0 0a47 	vmov.f32	s0, s14
 801323a:	eef0 0a67 	vmov.f32	s1, s15
 801323e:	f000 f8d3 	bl	80133e8 <asin_>
 8013242:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
	obs_set->x=azim;	/* Azimuth (radians)   */
 8013246:	68b9      	ldr	r1, [r7, #8]
 8013248:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 801324c:	e9c1 2300 	strd	r2, r3, [r1]
	obs_set->y=el;		/* Elevation (radians) */
 8013250:	68b9      	ldr	r1, [r7, #8]
 8013252:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8013256:	e9c1 2302 	strd	r2, r3, [r1, #8]
	obs_set->z=range_length;	/* Range (kilometers)  */
 801325a:	68b9      	ldr	r1, [r7, #8]
 801325c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8013260:	e9c1 2304 	strd	r2, r3, [r1, #16]

	/* Range Rate (kilometers/second) */
	obs_set->w = vec3_dot(range, rgvel)/vec3_length(range);
 8013264:	f107 0220 	add.w	r2, r7, #32
 8013268:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801326c:	4611      	mov	r1, r2
 801326e:	4618      	mov	r0, r3
 8013270:	f7ff f852 	bl	8012318 <vec3_dot>
 8013274:	ec55 4b10 	vmov	r4, r5, d0
 8013278:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801327c:	4618      	mov	r0, r3
 801327e:	f7ff f802 	bl	8012286 <vec3_length>
 8013282:	ec53 2b10 	vmov	r2, r3, d0
 8013286:	4620      	mov	r0, r4
 8013288:	4629      	mov	r1, r5
 801328a:	f7ed faef 	bl	800086c <__aeabi_ddiv>
 801328e:	4602      	mov	r2, r0
 8013290:	460b      	mov	r3, r1
 8013292:	68b9      	ldr	r1, [r7, #8]
 8013294:	e9c1 2306 	strd	r2, r3, [r1, #24]
	obs_set->y=el;
 8013298:	68b9      	ldr	r1, [r7, #8]
 801329a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801329e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/**** End bypass ****/

	if (obs_set->y<0.0)
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80132a8:	f04f 0200 	mov.w	r2, #0
 80132ac:	f04f 0300 	mov.w	r3, #0
 80132b0:	f7ed fc24 	bl	8000afc <__aeabi_dcmplt>
 80132b4:	4603      	mov	r3, r0
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d100      	bne.n	80132bc <Calculate_Obs+0x2fc>
		obs_set->y=el;  /* Reset to true elevation */
}
 80132ba:	e004      	b.n	80132c6 <Calculate_Obs+0x306>
		obs_set->y=el;  /* Reset to true elevation */
 80132bc:	68b9      	ldr	r1, [r7, #8]
 80132be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80132c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80132c6:	bf00      	nop
 80132c8:	37d0      	adds	r7, #208	@ 0xd0
 80132ca:	46bd      	mov	sp, r7
 80132cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80132d0:	54442d18 	.word	0x54442d18
 80132d4:	400921fb 	.word	0x400921fb
 80132d8:	54442d18 	.word	0x54442d18
 80132dc:	401921fb 	.word	0x401921fb

080132e0 <SubString>:
}

/* .... SGP4/SDP4 functions end .... */

char *SubString(const char *string, int buffer_length, char *output_buffer, int start, int end)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b087      	sub	sp, #28
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	60f8      	str	r0, [r7, #12]
 80132e8:	60b9      	str	r1, [r7, #8]
 80132ea:	607a      	str	r2, [r7, #4]
 80132ec:	603b      	str	r3, [r7, #0]

	unsigned x, y;

	if ((end >= start) && (buffer_length > end - start + 2))
 80132ee:	6a3a      	ldr	r2, [r7, #32]
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	db30      	blt.n	8013358 <SubString+0x78>
 80132f6:	6a3a      	ldr	r2, [r7, #32]
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	1ad3      	subs	r3, r2, r3
 80132fc:	3302      	adds	r3, #2
 80132fe:	68ba      	ldr	r2, [r7, #8]
 8013300:	429a      	cmp	r2, r3
 8013302:	dd29      	ble.n	8013358 <SubString+0x78>
	{
		for (x=start, y=0; x<=end && string[x]!=0; x++)
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	617b      	str	r3, [r7, #20]
 8013308:	2300      	movs	r3, #0
 801330a:	613b      	str	r3, [r7, #16]
 801330c:	e013      	b.n	8013336 <SubString+0x56>
			if (string[x]!=' ')
 801330e:	68fa      	ldr	r2, [r7, #12]
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	4413      	add	r3, r2
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	2b20      	cmp	r3, #32
 8013318:	d00a      	beq.n	8013330 <SubString+0x50>
			{
				output_buffer[y] = string[x];
 801331a:	68fa      	ldr	r2, [r7, #12]
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	441a      	add	r2, r3
 8013320:	6879      	ldr	r1, [r7, #4]
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	440b      	add	r3, r1
 8013326:	7812      	ldrb	r2, [r2, #0]
 8013328:	701a      	strb	r2, [r3, #0]
				y++;
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	3301      	adds	r3, #1
 801332e:	613b      	str	r3, [r7, #16]
		for (x=start, y=0; x<=end && string[x]!=0; x++)
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	3301      	adds	r3, #1
 8013334:	617b      	str	r3, [r7, #20]
 8013336:	6a3b      	ldr	r3, [r7, #32]
 8013338:	697a      	ldr	r2, [r7, #20]
 801333a:	429a      	cmp	r2, r3
 801333c:	d805      	bhi.n	801334a <SubString+0x6a>
 801333e:	68fa      	ldr	r2, [r7, #12]
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	4413      	add	r3, r2
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d1e1      	bne.n	801330e <SubString+0x2e>
			}

		output_buffer[y]=0;
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	4413      	add	r3, r2
 8013350:	2200      	movs	r2, #0
 8013352:	701a      	strb	r2, [r3, #0]
		return output_buffer;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	e000      	b.n	801335a <SubString+0x7a>
	}
	else
		return NULL;
 8013358:	2300      	movs	r3, #0
}
 801335a:	4618      	mov	r0, r3
 801335c:	371c      	adds	r7, #28
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr
	...

08013368 <acos_>:

double acos_(double arg)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	ed87 0b00 	vstr	d0, [r7]
	return acos(arg < -1.0 ? -1.0 : (arg > 1.0 ? 1.0 : arg));
 8013372:	f04f 0200 	mov.w	r2, #0
 8013376:	4b1a      	ldr	r3, [pc, #104]	@ (80133e0 <acos_+0x78>)
 8013378:	e9d7 0100 	ldrd	r0, r1, [r7]
 801337c:	f7ed fbbe 	bl	8000afc <__aeabi_dcmplt>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d002      	beq.n	801338c <acos_+0x24>
 8013386:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80133d0 <acos_+0x68>
 801338a:	e00e      	b.n	80133aa <acos_+0x42>
 801338c:	f04f 0200 	mov.w	r2, #0
 8013390:	4b14      	ldr	r3, [pc, #80]	@ (80133e4 <acos_+0x7c>)
 8013392:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013396:	f7ed fbcf 	bl	8000b38 <__aeabi_dcmpgt>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d002      	beq.n	80133a6 <acos_+0x3e>
 80133a0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80133d8 <acos_+0x70>
 80133a4:	e001      	b.n	80133aa <acos_+0x42>
 80133a6:	ed97 7b00 	vldr	d7, [r7]
 80133aa:	eeb0 0a47 	vmov.f32	s0, s14
 80133ae:	eef0 0a67 	vmov.f32	s1, s15
 80133b2:	f00c fb91 	bl	801fad8 <acos>
 80133b6:	eeb0 7a40 	vmov.f32	s14, s0
 80133ba:	eef0 7a60 	vmov.f32	s15, s1
}
 80133be:	eeb0 0a47 	vmov.f32	s0, s14
 80133c2:	eef0 0a67 	vmov.f32	s1, s15
 80133c6:	3708      	adds	r7, #8
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}
 80133cc:	f3af 8000 	nop.w
 80133d0:	00000000 	.word	0x00000000
 80133d4:	bff00000 	.word	0xbff00000
 80133d8:	00000000 	.word	0x00000000
 80133dc:	3ff00000 	.word	0x3ff00000
 80133e0:	bff00000 	.word	0xbff00000
 80133e4:	3ff00000 	.word	0x3ff00000

080133e8 <asin_>:

double asin_(double arg)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b082      	sub	sp, #8
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	ed87 0b00 	vstr	d0, [r7]
	return asin(arg < -1.0 ? -1.0 : (arg > 1.0 ? 1.0 : arg));
 80133f2:	f04f 0200 	mov.w	r2, #0
 80133f6:	4b1a      	ldr	r3, [pc, #104]	@ (8013460 <asin_+0x78>)
 80133f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80133fc:	f7ed fb7e 	bl	8000afc <__aeabi_dcmplt>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d002      	beq.n	801340c <asin_+0x24>
 8013406:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8013450 <asin_+0x68>
 801340a:	e00e      	b.n	801342a <asin_+0x42>
 801340c:	f04f 0200 	mov.w	r2, #0
 8013410:	4b14      	ldr	r3, [pc, #80]	@ (8013464 <asin_+0x7c>)
 8013412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013416:	f7ed fb8f 	bl	8000b38 <__aeabi_dcmpgt>
 801341a:	4603      	mov	r3, r0
 801341c:	2b00      	cmp	r3, #0
 801341e:	d002      	beq.n	8013426 <asin_+0x3e>
 8013420:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013458 <asin_+0x70>
 8013424:	e001      	b.n	801342a <asin_+0x42>
 8013426:	ed97 7b00 	vldr	d7, [r7]
 801342a:	eeb0 0a47 	vmov.f32	s0, s14
 801342e:	eef0 0a67 	vmov.f32	s1, s15
 8013432:	f00c fb85 	bl	801fb40 <asin>
 8013436:	eeb0 7a40 	vmov.f32	s14, s0
 801343a:	eef0 7a60 	vmov.f32	s15, s1
}
 801343e:	eeb0 0a47 	vmov.f32	s0, s14
 8013442:	eef0 0a67 	vmov.f32	s1, s15
 8013446:	3708      	adds	r7, #8
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	f3af 8000 	nop.w
 8013450:	00000000 	.word	0x00000000
 8013454:	bff00000 	.word	0xbff00000
 8013458:	00000000 	.word	0x00000000
 801345c:	3ff00000 	.word	0x3ff00000
 8013460:	bff00000 	.word	0xbff00000
 8013464:	3ff00000 	.word	0x3ff00000

08013468 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801346e:	2300      	movs	r3, #0
 8013470:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013472:	4b0c      	ldr	r3, [pc, #48]	@ (80134a4 <HAL_Init+0x3c>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	4a0b      	ldr	r2, [pc, #44]	@ (80134a4 <HAL_Init+0x3c>)
 8013478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801347c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801347e:	2003      	movs	r0, #3
 8013480:	f000 f8df 	bl	8013642 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013484:	200f      	movs	r0, #15
 8013486:	f7f0 ff21 	bl	80042cc <HAL_InitTick>
 801348a:	4603      	mov	r3, r0
 801348c:	2b00      	cmp	r3, #0
 801348e:	d002      	beq.n	8013496 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8013490:	2301      	movs	r3, #1
 8013492:	71fb      	strb	r3, [r7, #7]
 8013494:	e001      	b.n	801349a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8013496:	f7f0 fef1 	bl	800427c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801349a:	79fb      	ldrb	r3, [r7, #7]
}
 801349c:	4618      	mov	r0, r3
 801349e:	3708      	adds	r7, #8
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	40022000 	.word	0x40022000

080134a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80134a8:	b480      	push	{r7}
 80134aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80134ac:	4b06      	ldr	r3, [pc, #24]	@ (80134c8 <HAL_IncTick+0x20>)
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	461a      	mov	r2, r3
 80134b2:	4b06      	ldr	r3, [pc, #24]	@ (80134cc <HAL_IncTick+0x24>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	4413      	add	r3, r2
 80134b8:	4a04      	ldr	r2, [pc, #16]	@ (80134cc <HAL_IncTick+0x24>)
 80134ba:	6013      	str	r3, [r2, #0]
}
 80134bc:	bf00      	nop
 80134be:	46bd      	mov	sp, r7
 80134c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c4:	4770      	bx	lr
 80134c6:	bf00      	nop
 80134c8:	200002d0 	.word	0x200002d0
 80134cc:	200014f0 	.word	0x200014f0

080134d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80134d0:	b480      	push	{r7}
 80134d2:	af00      	add	r7, sp, #0
  return uwTick;
 80134d4:	4b03      	ldr	r3, [pc, #12]	@ (80134e4 <HAL_GetTick+0x14>)
 80134d6:	681b      	ldr	r3, [r3, #0]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr
 80134e2:	bf00      	nop
 80134e4:	200014f0 	.word	0x200014f0

080134e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80134e8:	b480      	push	{r7}
 80134ea:	b085      	sub	sp, #20
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f003 0307 	and.w	r3, r3, #7
 80134f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80134f8:	4b0c      	ldr	r3, [pc, #48]	@ (801352c <__NVIC_SetPriorityGrouping+0x44>)
 80134fa:	68db      	ldr	r3, [r3, #12]
 80134fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80134fe:	68ba      	ldr	r2, [r7, #8]
 8013500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8013504:	4013      	ands	r3, r2
 8013506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8013514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801351a:	4a04      	ldr	r2, [pc, #16]	@ (801352c <__NVIC_SetPriorityGrouping+0x44>)
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	60d3      	str	r3, [r2, #12]
}
 8013520:	bf00      	nop
 8013522:	3714      	adds	r7, #20
 8013524:	46bd      	mov	sp, r7
 8013526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352a:	4770      	bx	lr
 801352c:	e000ed00 	.word	0xe000ed00

08013530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8013530:	b480      	push	{r7}
 8013532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013534:	4b04      	ldr	r3, [pc, #16]	@ (8013548 <__NVIC_GetPriorityGrouping+0x18>)
 8013536:	68db      	ldr	r3, [r3, #12]
 8013538:	0a1b      	lsrs	r3, r3, #8
 801353a:	f003 0307 	and.w	r3, r3, #7
}
 801353e:	4618      	mov	r0, r3
 8013540:	46bd      	mov	sp, r7
 8013542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013546:	4770      	bx	lr
 8013548:	e000ed00 	.word	0xe000ed00

0801354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801354c:	b480      	push	{r7}
 801354e:	b083      	sub	sp, #12
 8013550:	af00      	add	r7, sp, #0
 8013552:	4603      	mov	r3, r0
 8013554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801355a:	2b00      	cmp	r3, #0
 801355c:	db0b      	blt.n	8013576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801355e:	79fb      	ldrb	r3, [r7, #7]
 8013560:	f003 021f 	and.w	r2, r3, #31
 8013564:	4907      	ldr	r1, [pc, #28]	@ (8013584 <__NVIC_EnableIRQ+0x38>)
 8013566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801356a:	095b      	lsrs	r3, r3, #5
 801356c:	2001      	movs	r0, #1
 801356e:	fa00 f202 	lsl.w	r2, r0, r2
 8013572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8013576:	bf00      	nop
 8013578:	370c      	adds	r7, #12
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr
 8013582:	bf00      	nop
 8013584:	e000e100 	.word	0xe000e100

08013588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8013588:	b480      	push	{r7}
 801358a:	b083      	sub	sp, #12
 801358c:	af00      	add	r7, sp, #0
 801358e:	4603      	mov	r3, r0
 8013590:	6039      	str	r1, [r7, #0]
 8013592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013598:	2b00      	cmp	r3, #0
 801359a:	db0a      	blt.n	80135b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	b2da      	uxtb	r2, r3
 80135a0:	490c      	ldr	r1, [pc, #48]	@ (80135d4 <__NVIC_SetPriority+0x4c>)
 80135a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135a6:	0112      	lsls	r2, r2, #4
 80135a8:	b2d2      	uxtb	r2, r2
 80135aa:	440b      	add	r3, r1
 80135ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80135b0:	e00a      	b.n	80135c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	b2da      	uxtb	r2, r3
 80135b6:	4908      	ldr	r1, [pc, #32]	@ (80135d8 <__NVIC_SetPriority+0x50>)
 80135b8:	79fb      	ldrb	r3, [r7, #7]
 80135ba:	f003 030f 	and.w	r3, r3, #15
 80135be:	3b04      	subs	r3, #4
 80135c0:	0112      	lsls	r2, r2, #4
 80135c2:	b2d2      	uxtb	r2, r2
 80135c4:	440b      	add	r3, r1
 80135c6:	761a      	strb	r2, [r3, #24]
}
 80135c8:	bf00      	nop
 80135ca:	370c      	adds	r7, #12
 80135cc:	46bd      	mov	sp, r7
 80135ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d2:	4770      	bx	lr
 80135d4:	e000e100 	.word	0xe000e100
 80135d8:	e000ed00 	.word	0xe000ed00

080135dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80135dc:	b480      	push	{r7}
 80135de:	b089      	sub	sp, #36	@ 0x24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f003 0307 	and.w	r3, r3, #7
 80135ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80135f0:	69fb      	ldr	r3, [r7, #28]
 80135f2:	f1c3 0307 	rsb	r3, r3, #7
 80135f6:	2b04      	cmp	r3, #4
 80135f8:	bf28      	it	cs
 80135fa:	2304      	movcs	r3, #4
 80135fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	3304      	adds	r3, #4
 8013602:	2b06      	cmp	r3, #6
 8013604:	d902      	bls.n	801360c <NVIC_EncodePriority+0x30>
 8013606:	69fb      	ldr	r3, [r7, #28]
 8013608:	3b03      	subs	r3, #3
 801360a:	e000      	b.n	801360e <NVIC_EncodePriority+0x32>
 801360c:	2300      	movs	r3, #0
 801360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013610:	f04f 32ff 	mov.w	r2, #4294967295
 8013614:	69bb      	ldr	r3, [r7, #24]
 8013616:	fa02 f303 	lsl.w	r3, r2, r3
 801361a:	43da      	mvns	r2, r3
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	401a      	ands	r2, r3
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013624:	f04f 31ff 	mov.w	r1, #4294967295
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	fa01 f303 	lsl.w	r3, r1, r3
 801362e:	43d9      	mvns	r1, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013634:	4313      	orrs	r3, r2
         );
}
 8013636:	4618      	mov	r0, r3
 8013638:	3724      	adds	r7, #36	@ 0x24
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr

08013642 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013642:	b580      	push	{r7, lr}
 8013644:	b082      	sub	sp, #8
 8013646:	af00      	add	r7, sp, #0
 8013648:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f7ff ff4c 	bl	80134e8 <__NVIC_SetPriorityGrouping>
}
 8013650:	bf00      	nop
 8013652:	3708      	adds	r7, #8
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}

08013658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b086      	sub	sp, #24
 801365c:	af00      	add	r7, sp, #0
 801365e:	4603      	mov	r3, r0
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
 8013664:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8013666:	2300      	movs	r3, #0
 8013668:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801366a:	f7ff ff61 	bl	8013530 <__NVIC_GetPriorityGrouping>
 801366e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013670:	687a      	ldr	r2, [r7, #4]
 8013672:	68b9      	ldr	r1, [r7, #8]
 8013674:	6978      	ldr	r0, [r7, #20]
 8013676:	f7ff ffb1 	bl	80135dc <NVIC_EncodePriority>
 801367a:	4602      	mov	r2, r0
 801367c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013680:	4611      	mov	r1, r2
 8013682:	4618      	mov	r0, r3
 8013684:	f7ff ff80 	bl	8013588 <__NVIC_SetPriority>
}
 8013688:	bf00      	nop
 801368a:	3718      	adds	r7, #24
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
 8013696:	4603      	mov	r3, r0
 8013698:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801369e:	4618      	mov	r0, r3
 80136a0:	f7ff ff54 	bl	801354c <__NVIC_EnableIRQ>
}
 80136a4:	bf00      	nop
 80136a6:	3708      	adds	r7, #8
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}

080136ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80136b4:	2300      	movs	r3, #0
 80136b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	2b02      	cmp	r3, #2
 80136c2:	d008      	beq.n	80136d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2204      	movs	r2, #4
 80136c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2200      	movs	r2, #0
 80136ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80136d2:	2301      	movs	r3, #1
 80136d4:	e022      	b.n	801371c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	f022 020e 	bic.w	r2, r2, #14
 80136e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f022 0201 	bic.w	r2, r2, #1
 80136f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136fa:	f003 021c 	and.w	r2, r3, #28
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013702:	2101      	movs	r1, #1
 8013704:	fa01 f202 	lsl.w	r2, r1, r2
 8013708:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2201      	movs	r2, #1
 801370e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2200      	movs	r2, #0
 8013716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 801371a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801371c:	4618      	mov	r0, r3
 801371e:	3714      	adds	r7, #20
 8013720:	46bd      	mov	sp, r7
 8013722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013726:	4770      	bx	lr

08013728 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013730:	2300      	movs	r3, #0
 8013732:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801373a:	b2db      	uxtb	r3, r3
 801373c:	2b02      	cmp	r3, #2
 801373e:	d005      	beq.n	801374c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2204      	movs	r2, #4
 8013744:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8013746:	2301      	movs	r3, #1
 8013748:	73fb      	strb	r3, [r7, #15]
 801374a:	e029      	b.n	80137a0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	681a      	ldr	r2, [r3, #0]
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	f022 020e 	bic.w	r2, r2, #14
 801375a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f022 0201 	bic.w	r2, r2, #1
 801376a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013770:	f003 021c 	and.w	r2, r3, #28
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013778:	2101      	movs	r1, #1
 801377a:	fa01 f202 	lsl.w	r2, r1, r2
 801377e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2201      	movs	r2, #1
 8013784:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2200      	movs	r2, #0
 801378c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013794:	2b00      	cmp	r3, #0
 8013796:	d003      	beq.n	80137a0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	4798      	blx	r3
    }
  }
  return status;
 80137a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3710      	adds	r7, #16
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}
	...

080137ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b087      	sub	sp, #28
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80137b6:	2300      	movs	r3, #0
 80137b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80137ba:	e17f      	b.n	8013abc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	2101      	movs	r1, #1
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	fa01 f303 	lsl.w	r3, r1, r3
 80137c8:	4013      	ands	r3, r2
 80137ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	f000 8171 	beq.w	8013ab6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	f003 0303 	and.w	r3, r3, #3
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d005      	beq.n	80137ec <HAL_GPIO_Init+0x40>
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	f003 0303 	and.w	r3, r3, #3
 80137e8:	2b02      	cmp	r3, #2
 80137ea:	d130      	bne.n	801384e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	689b      	ldr	r3, [r3, #8]
 80137f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	005b      	lsls	r3, r3, #1
 80137f6:	2203      	movs	r2, #3
 80137f8:	fa02 f303 	lsl.w	r3, r2, r3
 80137fc:	43db      	mvns	r3, r3
 80137fe:	693a      	ldr	r2, [r7, #16]
 8013800:	4013      	ands	r3, r2
 8013802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	68da      	ldr	r2, [r3, #12]
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	005b      	lsls	r3, r3, #1
 801380c:	fa02 f303 	lsl.w	r3, r2, r3
 8013810:	693a      	ldr	r2, [r7, #16]
 8013812:	4313      	orrs	r3, r2
 8013814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	693a      	ldr	r2, [r7, #16]
 801381a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	685b      	ldr	r3, [r3, #4]
 8013820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013822:	2201      	movs	r2, #1
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	fa02 f303 	lsl.w	r3, r2, r3
 801382a:	43db      	mvns	r3, r3
 801382c:	693a      	ldr	r2, [r7, #16]
 801382e:	4013      	ands	r3, r2
 8013830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	685b      	ldr	r3, [r3, #4]
 8013836:	091b      	lsrs	r3, r3, #4
 8013838:	f003 0201 	and.w	r2, r3, #1
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	fa02 f303 	lsl.w	r3, r2, r3
 8013842:	693a      	ldr	r2, [r7, #16]
 8013844:	4313      	orrs	r3, r2
 8013846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	693a      	ldr	r2, [r7, #16]
 801384c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	f003 0303 	and.w	r3, r3, #3
 8013856:	2b03      	cmp	r3, #3
 8013858:	d118      	bne.n	801388c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801385e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8013860:	2201      	movs	r2, #1
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	fa02 f303 	lsl.w	r3, r2, r3
 8013868:	43db      	mvns	r3, r3
 801386a:	693a      	ldr	r2, [r7, #16]
 801386c:	4013      	ands	r3, r2
 801386e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	08db      	lsrs	r3, r3, #3
 8013876:	f003 0201 	and.w	r2, r3, #1
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	fa02 f303 	lsl.w	r3, r2, r3
 8013880:	693a      	ldr	r2, [r7, #16]
 8013882:	4313      	orrs	r3, r2
 8013884:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	693a      	ldr	r2, [r7, #16]
 801388a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	f003 0303 	and.w	r3, r3, #3
 8013894:	2b03      	cmp	r3, #3
 8013896:	d017      	beq.n	80138c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	68db      	ldr	r3, [r3, #12]
 801389c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	005b      	lsls	r3, r3, #1
 80138a2:	2203      	movs	r2, #3
 80138a4:	fa02 f303 	lsl.w	r3, r2, r3
 80138a8:	43db      	mvns	r3, r3
 80138aa:	693a      	ldr	r2, [r7, #16]
 80138ac:	4013      	ands	r3, r2
 80138ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	689a      	ldr	r2, [r3, #8]
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	005b      	lsls	r3, r3, #1
 80138b8:	fa02 f303 	lsl.w	r3, r2, r3
 80138bc:	693a      	ldr	r2, [r7, #16]
 80138be:	4313      	orrs	r3, r2
 80138c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	693a      	ldr	r2, [r7, #16]
 80138c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	f003 0303 	and.w	r3, r3, #3
 80138d0:	2b02      	cmp	r3, #2
 80138d2:	d123      	bne.n	801391c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	08da      	lsrs	r2, r3, #3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	3208      	adds	r2, #8
 80138dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	f003 0307 	and.w	r3, r3, #7
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	220f      	movs	r2, #15
 80138ec:	fa02 f303 	lsl.w	r3, r2, r3
 80138f0:	43db      	mvns	r3, r3
 80138f2:	693a      	ldr	r2, [r7, #16]
 80138f4:	4013      	ands	r3, r2
 80138f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	691a      	ldr	r2, [r3, #16]
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	f003 0307 	and.w	r3, r3, #7
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	fa02 f303 	lsl.w	r3, r2, r3
 8013908:	693a      	ldr	r2, [r7, #16]
 801390a:	4313      	orrs	r3, r2
 801390c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	08da      	lsrs	r2, r3, #3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	3208      	adds	r2, #8
 8013916:	6939      	ldr	r1, [r7, #16]
 8013918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	005b      	lsls	r3, r3, #1
 8013926:	2203      	movs	r2, #3
 8013928:	fa02 f303 	lsl.w	r3, r2, r3
 801392c:	43db      	mvns	r3, r3
 801392e:	693a      	ldr	r2, [r7, #16]
 8013930:	4013      	ands	r3, r2
 8013932:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	f003 0203 	and.w	r2, r3, #3
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	005b      	lsls	r3, r3, #1
 8013940:	fa02 f303 	lsl.w	r3, r2, r3
 8013944:	693a      	ldr	r2, [r7, #16]
 8013946:	4313      	orrs	r3, r2
 8013948:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	693a      	ldr	r2, [r7, #16]
 801394e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 80ac 	beq.w	8013ab6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801395e:	4b5f      	ldr	r3, [pc, #380]	@ (8013adc <HAL_GPIO_Init+0x330>)
 8013960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013962:	4a5e      	ldr	r2, [pc, #376]	@ (8013adc <HAL_GPIO_Init+0x330>)
 8013964:	f043 0301 	orr.w	r3, r3, #1
 8013968:	6613      	str	r3, [r2, #96]	@ 0x60
 801396a:	4b5c      	ldr	r3, [pc, #368]	@ (8013adc <HAL_GPIO_Init+0x330>)
 801396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801396e:	f003 0301 	and.w	r3, r3, #1
 8013972:	60bb      	str	r3, [r7, #8]
 8013974:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8013976:	4a5a      	ldr	r2, [pc, #360]	@ (8013ae0 <HAL_GPIO_Init+0x334>)
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	089b      	lsrs	r3, r3, #2
 801397c:	3302      	adds	r3, #2
 801397e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013982:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	f003 0303 	and.w	r3, r3, #3
 801398a:	009b      	lsls	r3, r3, #2
 801398c:	220f      	movs	r2, #15
 801398e:	fa02 f303 	lsl.w	r3, r2, r3
 8013992:	43db      	mvns	r3, r3
 8013994:	693a      	ldr	r2, [r7, #16]
 8013996:	4013      	ands	r3, r2
 8013998:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80139a0:	d025      	beq.n	80139ee <HAL_GPIO_Init+0x242>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	4a4f      	ldr	r2, [pc, #316]	@ (8013ae4 <HAL_GPIO_Init+0x338>)
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d01f      	beq.n	80139ea <HAL_GPIO_Init+0x23e>
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	4a4e      	ldr	r2, [pc, #312]	@ (8013ae8 <HAL_GPIO_Init+0x33c>)
 80139ae:	4293      	cmp	r3, r2
 80139b0:	d019      	beq.n	80139e6 <HAL_GPIO_Init+0x23a>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	4a4d      	ldr	r2, [pc, #308]	@ (8013aec <HAL_GPIO_Init+0x340>)
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d013      	beq.n	80139e2 <HAL_GPIO_Init+0x236>
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	4a4c      	ldr	r2, [pc, #304]	@ (8013af0 <HAL_GPIO_Init+0x344>)
 80139be:	4293      	cmp	r3, r2
 80139c0:	d00d      	beq.n	80139de <HAL_GPIO_Init+0x232>
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	4a4b      	ldr	r2, [pc, #300]	@ (8013af4 <HAL_GPIO_Init+0x348>)
 80139c6:	4293      	cmp	r3, r2
 80139c8:	d007      	beq.n	80139da <HAL_GPIO_Init+0x22e>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	4a4a      	ldr	r2, [pc, #296]	@ (8013af8 <HAL_GPIO_Init+0x34c>)
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d101      	bne.n	80139d6 <HAL_GPIO_Init+0x22a>
 80139d2:	2306      	movs	r3, #6
 80139d4:	e00c      	b.n	80139f0 <HAL_GPIO_Init+0x244>
 80139d6:	2307      	movs	r3, #7
 80139d8:	e00a      	b.n	80139f0 <HAL_GPIO_Init+0x244>
 80139da:	2305      	movs	r3, #5
 80139dc:	e008      	b.n	80139f0 <HAL_GPIO_Init+0x244>
 80139de:	2304      	movs	r3, #4
 80139e0:	e006      	b.n	80139f0 <HAL_GPIO_Init+0x244>
 80139e2:	2303      	movs	r3, #3
 80139e4:	e004      	b.n	80139f0 <HAL_GPIO_Init+0x244>
 80139e6:	2302      	movs	r3, #2
 80139e8:	e002      	b.n	80139f0 <HAL_GPIO_Init+0x244>
 80139ea:	2301      	movs	r3, #1
 80139ec:	e000      	b.n	80139f0 <HAL_GPIO_Init+0x244>
 80139ee:	2300      	movs	r3, #0
 80139f0:	697a      	ldr	r2, [r7, #20]
 80139f2:	f002 0203 	and.w	r2, r2, #3
 80139f6:	0092      	lsls	r2, r2, #2
 80139f8:	4093      	lsls	r3, r2
 80139fa:	693a      	ldr	r2, [r7, #16]
 80139fc:	4313      	orrs	r3, r2
 80139fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8013a00:	4937      	ldr	r1, [pc, #220]	@ (8013ae0 <HAL_GPIO_Init+0x334>)
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	089b      	lsrs	r3, r3, #2
 8013a06:	3302      	adds	r3, #2
 8013a08:	693a      	ldr	r2, [r7, #16]
 8013a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8013afc <HAL_GPIO_Init+0x350>)
 8013a10:	689b      	ldr	r3, [r3, #8]
 8013a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	43db      	mvns	r3, r3
 8013a18:	693a      	ldr	r2, [r7, #16]
 8013a1a:	4013      	ands	r3, r2
 8013a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	685b      	ldr	r3, [r3, #4]
 8013a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d003      	beq.n	8013a32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8013a2a:	693a      	ldr	r2, [r7, #16]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8013a32:	4a32      	ldr	r2, [pc, #200]	@ (8013afc <HAL_GPIO_Init+0x350>)
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8013a38:	4b30      	ldr	r3, [pc, #192]	@ (8013afc <HAL_GPIO_Init+0x350>)
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	43db      	mvns	r3, r3
 8013a42:	693a      	ldr	r2, [r7, #16]
 8013a44:	4013      	ands	r3, r2
 8013a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d003      	beq.n	8013a5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8013a54:	693a      	ldr	r2, [r7, #16]
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	4313      	orrs	r3, r2
 8013a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8013a5c:	4a27      	ldr	r2, [pc, #156]	@ (8013afc <HAL_GPIO_Init+0x350>)
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8013a62:	4b26      	ldr	r3, [pc, #152]	@ (8013afc <HAL_GPIO_Init+0x350>)
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	43db      	mvns	r3, r3
 8013a6c:	693a      	ldr	r2, [r7, #16]
 8013a6e:	4013      	ands	r3, r2
 8013a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d003      	beq.n	8013a86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8013a7e:	693a      	ldr	r2, [r7, #16]
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	4313      	orrs	r3, r2
 8013a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8013a86:	4a1d      	ldr	r2, [pc, #116]	@ (8013afc <HAL_GPIO_Init+0x350>)
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8013a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8013afc <HAL_GPIO_Init+0x350>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	43db      	mvns	r3, r3
 8013a96:	693a      	ldr	r2, [r7, #16]
 8013a98:	4013      	ands	r3, r2
 8013a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d003      	beq.n	8013ab0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8013aa8:	693a      	ldr	r2, [r7, #16]
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	4313      	orrs	r3, r2
 8013aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8013ab0:	4a12      	ldr	r2, [pc, #72]	@ (8013afc <HAL_GPIO_Init+0x350>)
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	681a      	ldr	r2, [r3, #0]
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f47f ae78 	bne.w	80137bc <HAL_GPIO_Init+0x10>
  }
}
 8013acc:	bf00      	nop
 8013ace:	bf00      	nop
 8013ad0:	371c      	adds	r7, #28
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop
 8013adc:	40021000 	.word	0x40021000
 8013ae0:	40010000 	.word	0x40010000
 8013ae4:	48000400 	.word	0x48000400
 8013ae8:	48000800 	.word	0x48000800
 8013aec:	48000c00 	.word	0x48000c00
 8013af0:	48001000 	.word	0x48001000
 8013af4:	48001400 	.word	0x48001400
 8013af8:	48001800 	.word	0x48001800
 8013afc:	40010400 	.word	0x40010400

08013b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013b00:	b480      	push	{r7}
 8013b02:	b083      	sub	sp, #12
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	460b      	mov	r3, r1
 8013b0a:	807b      	strh	r3, [r7, #2]
 8013b0c:	4613      	mov	r3, r2
 8013b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013b10:	787b      	ldrb	r3, [r7, #1]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d003      	beq.n	8013b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8013b16:	887a      	ldrh	r2, [r7, #2]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8013b1c:	e002      	b.n	8013b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8013b1e:	887a      	ldrh	r2, [r7, #2]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8013b24:	bf00      	nop
 8013b26:	370c      	adds	r7, #12
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr

08013b30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8013b30:	b480      	push	{r7}
 8013b32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8013b34:	4b04      	ldr	r3, [pc, #16]	@ (8013b48 <HAL_PWREx_GetVoltageRange+0x18>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b44:	4770      	bx	lr
 8013b46:	bf00      	nop
 8013b48:	40007000 	.word	0x40007000

08013b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b085      	sub	sp, #20
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b5a:	d130      	bne.n	8013bbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8013b5c:	4b23      	ldr	r3, [pc, #140]	@ (8013bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b68:	d038      	beq.n	8013bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8013b6a:	4b20      	ldr	r3, [pc, #128]	@ (8013bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8013b72:	4a1e      	ldr	r2, [pc, #120]	@ (8013bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013b74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8013b78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8013b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8013bf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	2232      	movs	r2, #50	@ 0x32
 8013b80:	fb02 f303 	mul.w	r3, r2, r3
 8013b84:	4a1b      	ldr	r2, [pc, #108]	@ (8013bf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8013b86:	fba2 2303 	umull	r2, r3, r2, r3
 8013b8a:	0c9b      	lsrs	r3, r3, #18
 8013b8c:	3301      	adds	r3, #1
 8013b8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013b90:	e002      	b.n	8013b98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	3b01      	subs	r3, #1
 8013b96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013b98:	4b14      	ldr	r3, [pc, #80]	@ (8013bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013b9a:	695b      	ldr	r3, [r3, #20]
 8013b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013ba4:	d102      	bne.n	8013bac <HAL_PWREx_ControlVoltageScaling+0x60>
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d1f2      	bne.n	8013b92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8013bac:	4b0f      	ldr	r3, [pc, #60]	@ (8013bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013bae:	695b      	ldr	r3, [r3, #20]
 8013bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013bb8:	d110      	bne.n	8013bdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8013bba:	2303      	movs	r3, #3
 8013bbc:	e00f      	b.n	8013bde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8013bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8013bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013bca:	d007      	beq.n	8013bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8013bcc:	4b07      	ldr	r3, [pc, #28]	@ (8013bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8013bd4:	4a05      	ldr	r2, [pc, #20]	@ (8013bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8013bda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8013bdc:	2300      	movs	r3, #0
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3714      	adds	r7, #20
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr
 8013bea:	bf00      	nop
 8013bec:	40007000 	.word	0x40007000
 8013bf0:	200002c8 	.word	0x200002c8
 8013bf4:	431bde83 	.word	0x431bde83

08013bf8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b088      	sub	sp, #32
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d101      	bne.n	8013c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013c06:	2301      	movs	r3, #1
 8013c08:	e3ca      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013c0a:	4b97      	ldr	r3, [pc, #604]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013c0c:	689b      	ldr	r3, [r3, #8]
 8013c0e:	f003 030c 	and.w	r3, r3, #12
 8013c12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013c14:	4b94      	ldr	r3, [pc, #592]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	f003 0303 	and.w	r3, r3, #3
 8013c1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f003 0310 	and.w	r3, r3, #16
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	f000 80e4 	beq.w	8013df4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d007      	beq.n	8013c42 <HAL_RCC_OscConfig+0x4a>
 8013c32:	69bb      	ldr	r3, [r7, #24]
 8013c34:	2b0c      	cmp	r3, #12
 8013c36:	f040 808b 	bne.w	8013d50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	2b01      	cmp	r3, #1
 8013c3e:	f040 8087 	bne.w	8013d50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013c42:	4b89      	ldr	r3, [pc, #548]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f003 0302 	and.w	r3, r3, #2
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d005      	beq.n	8013c5a <HAL_RCC_OscConfig+0x62>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	699b      	ldr	r3, [r3, #24]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d101      	bne.n	8013c5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8013c56:	2301      	movs	r3, #1
 8013c58:	e3a2      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	6a1a      	ldr	r2, [r3, #32]
 8013c5e:	4b82      	ldr	r3, [pc, #520]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	f003 0308 	and.w	r3, r3, #8
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d004      	beq.n	8013c74 <HAL_RCC_OscConfig+0x7c>
 8013c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013c72:	e005      	b.n	8013c80 <HAL_RCC_OscConfig+0x88>
 8013c74:	4b7c      	ldr	r3, [pc, #496]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013c7a:	091b      	lsrs	r3, r3, #4
 8013c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013c80:	4293      	cmp	r3, r2
 8013c82:	d223      	bcs.n	8013ccc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6a1b      	ldr	r3, [r3, #32]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f000 fd87 	bl	801479c <RCC_SetFlashLatencyFromMSIRange>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d001      	beq.n	8013c98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8013c94:	2301      	movs	r3, #1
 8013c96:	e383      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013c98:	4b73      	ldr	r3, [pc, #460]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	4a72      	ldr	r2, [pc, #456]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013c9e:	f043 0308 	orr.w	r3, r3, #8
 8013ca2:	6013      	str	r3, [r2, #0]
 8013ca4:	4b70      	ldr	r3, [pc, #448]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6a1b      	ldr	r3, [r3, #32]
 8013cb0:	496d      	ldr	r1, [pc, #436]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013cb2:	4313      	orrs	r3, r2
 8013cb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	69db      	ldr	r3, [r3, #28]
 8013cc2:	021b      	lsls	r3, r3, #8
 8013cc4:	4968      	ldr	r1, [pc, #416]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	604b      	str	r3, [r1, #4]
 8013cca:	e025      	b.n	8013d18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013ccc:	4b66      	ldr	r3, [pc, #408]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	4a65      	ldr	r2, [pc, #404]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013cd2:	f043 0308 	orr.w	r3, r3, #8
 8013cd6:	6013      	str	r3, [r2, #0]
 8013cd8:	4b63      	ldr	r3, [pc, #396]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6a1b      	ldr	r3, [r3, #32]
 8013ce4:	4960      	ldr	r1, [pc, #384]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013ce6:	4313      	orrs	r3, r2
 8013ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013cea:	4b5f      	ldr	r3, [pc, #380]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	69db      	ldr	r3, [r3, #28]
 8013cf6:	021b      	lsls	r3, r3, #8
 8013cf8:	495b      	ldr	r1, [pc, #364]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013cfa:	4313      	orrs	r3, r2
 8013cfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d109      	bne.n	8013d18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6a1b      	ldr	r3, [r3, #32]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f000 fd47 	bl	801479c <RCC_SetFlashLatencyFromMSIRange>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d001      	beq.n	8013d18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8013d14:	2301      	movs	r3, #1
 8013d16:	e343      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013d18:	f000 fc4a 	bl	80145b0 <HAL_RCC_GetSysClockFreq>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	4b52      	ldr	r3, [pc, #328]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013d20:	689b      	ldr	r3, [r3, #8]
 8013d22:	091b      	lsrs	r3, r3, #4
 8013d24:	f003 030f 	and.w	r3, r3, #15
 8013d28:	4950      	ldr	r1, [pc, #320]	@ (8013e6c <HAL_RCC_OscConfig+0x274>)
 8013d2a:	5ccb      	ldrb	r3, [r1, r3]
 8013d2c:	f003 031f 	and.w	r3, r3, #31
 8013d30:	fa22 f303 	lsr.w	r3, r2, r3
 8013d34:	4a4e      	ldr	r2, [pc, #312]	@ (8013e70 <HAL_RCC_OscConfig+0x278>)
 8013d36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8013d38:	4b4e      	ldr	r3, [pc, #312]	@ (8013e74 <HAL_RCC_OscConfig+0x27c>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7f0 fac5 	bl	80042cc <HAL_InitTick>
 8013d42:	4603      	mov	r3, r0
 8013d44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8013d46:	7bfb      	ldrb	r3, [r7, #15]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d052      	beq.n	8013df2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8013d4c:	7bfb      	ldrb	r3, [r7, #15]
 8013d4e:	e327      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	699b      	ldr	r3, [r3, #24]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d032      	beq.n	8013dbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8013d58:	4b43      	ldr	r3, [pc, #268]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4a42      	ldr	r2, [pc, #264]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013d5e:	f043 0301 	orr.w	r3, r3, #1
 8013d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013d64:	f7ff fbb4 	bl	80134d0 <HAL_GetTick>
 8013d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013d6a:	e008      	b.n	8013d7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013d6c:	f7ff fbb0 	bl	80134d0 <HAL_GetTick>
 8013d70:	4602      	mov	r2, r0
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	1ad3      	subs	r3, r2, r3
 8013d76:	2b02      	cmp	r3, #2
 8013d78:	d901      	bls.n	8013d7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8013d7a:	2303      	movs	r3, #3
 8013d7c:	e310      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	f003 0302 	and.w	r3, r3, #2
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d0f0      	beq.n	8013d6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013d8a:	4b37      	ldr	r3, [pc, #220]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4a36      	ldr	r2, [pc, #216]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013d90:	f043 0308 	orr.w	r3, r3, #8
 8013d94:	6013      	str	r3, [r2, #0]
 8013d96:	4b34      	ldr	r3, [pc, #208]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6a1b      	ldr	r3, [r3, #32]
 8013da2:	4931      	ldr	r1, [pc, #196]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013da4:	4313      	orrs	r3, r2
 8013da6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013da8:	4b2f      	ldr	r3, [pc, #188]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	69db      	ldr	r3, [r3, #28]
 8013db4:	021b      	lsls	r3, r3, #8
 8013db6:	492c      	ldr	r1, [pc, #176]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013db8:	4313      	orrs	r3, r2
 8013dba:	604b      	str	r3, [r1, #4]
 8013dbc:	e01a      	b.n	8013df4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8013dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	4a29      	ldr	r2, [pc, #164]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013dc4:	f023 0301 	bic.w	r3, r3, #1
 8013dc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013dca:	f7ff fb81 	bl	80134d0 <HAL_GetTick>
 8013dce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013dd0:	e008      	b.n	8013de4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013dd2:	f7ff fb7d 	bl	80134d0 <HAL_GetTick>
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	1ad3      	subs	r3, r2, r3
 8013ddc:	2b02      	cmp	r3, #2
 8013dde:	d901      	bls.n	8013de4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8013de0:	2303      	movs	r3, #3
 8013de2:	e2dd      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013de4:	4b20      	ldr	r3, [pc, #128]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	f003 0302 	and.w	r3, r3, #2
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d1f0      	bne.n	8013dd2 <HAL_RCC_OscConfig+0x1da>
 8013df0:	e000      	b.n	8013df4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013df2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	f003 0301 	and.w	r3, r3, #1
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d074      	beq.n	8013eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8013e00:	69bb      	ldr	r3, [r7, #24]
 8013e02:	2b08      	cmp	r3, #8
 8013e04:	d005      	beq.n	8013e12 <HAL_RCC_OscConfig+0x21a>
 8013e06:	69bb      	ldr	r3, [r7, #24]
 8013e08:	2b0c      	cmp	r3, #12
 8013e0a:	d10e      	bne.n	8013e2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	2b03      	cmp	r3, #3
 8013e10:	d10b      	bne.n	8013e2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013e12:	4b15      	ldr	r3, [pc, #84]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d064      	beq.n	8013ee8 <HAL_RCC_OscConfig+0x2f0>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d160      	bne.n	8013ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8013e26:	2301      	movs	r3, #1
 8013e28:	e2ba      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	685b      	ldr	r3, [r3, #4]
 8013e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e32:	d106      	bne.n	8013e42 <HAL_RCC_OscConfig+0x24a>
 8013e34:	4b0c      	ldr	r3, [pc, #48]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4a0b      	ldr	r2, [pc, #44]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013e3e:	6013      	str	r3, [r2, #0]
 8013e40:	e026      	b.n	8013e90 <HAL_RCC_OscConfig+0x298>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013e4a:	d115      	bne.n	8013e78 <HAL_RCC_OscConfig+0x280>
 8013e4c:	4b06      	ldr	r3, [pc, #24]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	4a05      	ldr	r2, [pc, #20]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013e52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013e56:	6013      	str	r3, [r2, #0]
 8013e58:	4b03      	ldr	r3, [pc, #12]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	4a02      	ldr	r2, [pc, #8]	@ (8013e68 <HAL_RCC_OscConfig+0x270>)
 8013e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013e62:	6013      	str	r3, [r2, #0]
 8013e64:	e014      	b.n	8013e90 <HAL_RCC_OscConfig+0x298>
 8013e66:	bf00      	nop
 8013e68:	40021000 	.word	0x40021000
 8013e6c:	08024b30 	.word	0x08024b30
 8013e70:	200002c8 	.word	0x200002c8
 8013e74:	200002cc 	.word	0x200002cc
 8013e78:	4ba0      	ldr	r3, [pc, #640]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	4a9f      	ldr	r2, [pc, #636]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013e82:	6013      	str	r3, [r2, #0]
 8013e84:	4b9d      	ldr	r3, [pc, #628]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	4a9c      	ldr	r2, [pc, #624]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	685b      	ldr	r3, [r3, #4]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d013      	beq.n	8013ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e98:	f7ff fb1a 	bl	80134d0 <HAL_GetTick>
 8013e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013e9e:	e008      	b.n	8013eb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013ea0:	f7ff fb16 	bl	80134d0 <HAL_GetTick>
 8013ea4:	4602      	mov	r2, r0
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	1ad3      	subs	r3, r2, r3
 8013eaa:	2b64      	cmp	r3, #100	@ 0x64
 8013eac:	d901      	bls.n	8013eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8013eae:	2303      	movs	r3, #3
 8013eb0:	e276      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013eb2:	4b92      	ldr	r3, [pc, #584]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d0f0      	beq.n	8013ea0 <HAL_RCC_OscConfig+0x2a8>
 8013ebe:	e014      	b.n	8013eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ec0:	f7ff fb06 	bl	80134d0 <HAL_GetTick>
 8013ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013ec6:	e008      	b.n	8013eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013ec8:	f7ff fb02 	bl	80134d0 <HAL_GetTick>
 8013ecc:	4602      	mov	r2, r0
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	1ad3      	subs	r3, r2, r3
 8013ed2:	2b64      	cmp	r3, #100	@ 0x64
 8013ed4:	d901      	bls.n	8013eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8013ed6:	2303      	movs	r3, #3
 8013ed8:	e262      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013eda:	4b88      	ldr	r3, [pc, #544]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d1f0      	bne.n	8013ec8 <HAL_RCC_OscConfig+0x2d0>
 8013ee6:	e000      	b.n	8013eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	f003 0302 	and.w	r3, r3, #2
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d060      	beq.n	8013fb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8013ef6:	69bb      	ldr	r3, [r7, #24]
 8013ef8:	2b04      	cmp	r3, #4
 8013efa:	d005      	beq.n	8013f08 <HAL_RCC_OscConfig+0x310>
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	2b0c      	cmp	r3, #12
 8013f00:	d119      	bne.n	8013f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	2b02      	cmp	r3, #2
 8013f06:	d116      	bne.n	8013f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013f08:	4b7c      	ldr	r3, [pc, #496]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d005      	beq.n	8013f20 <HAL_RCC_OscConfig+0x328>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d101      	bne.n	8013f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	e23f      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013f20:	4b76      	ldr	r3, [pc, #472]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	691b      	ldr	r3, [r3, #16]
 8013f2c:	061b      	lsls	r3, r3, #24
 8013f2e:	4973      	ldr	r1, [pc, #460]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f30:	4313      	orrs	r3, r2
 8013f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013f34:	e040      	b.n	8013fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	68db      	ldr	r3, [r3, #12]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d023      	beq.n	8013f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4a6e      	ldr	r2, [pc, #440]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013f4a:	f7ff fac1 	bl	80134d0 <HAL_GetTick>
 8013f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013f50:	e008      	b.n	8013f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013f52:	f7ff fabd 	bl	80134d0 <HAL_GetTick>
 8013f56:	4602      	mov	r2, r0
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	1ad3      	subs	r3, r2, r3
 8013f5c:	2b02      	cmp	r3, #2
 8013f5e:	d901      	bls.n	8013f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8013f60:	2303      	movs	r3, #3
 8013f62:	e21d      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013f64:	4b65      	ldr	r3, [pc, #404]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d0f0      	beq.n	8013f52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013f70:	4b62      	ldr	r3, [pc, #392]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	691b      	ldr	r3, [r3, #16]
 8013f7c:	061b      	lsls	r3, r3, #24
 8013f7e:	495f      	ldr	r1, [pc, #380]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f80:	4313      	orrs	r3, r2
 8013f82:	604b      	str	r3, [r1, #4]
 8013f84:	e018      	b.n	8013fb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013f86:	4b5d      	ldr	r3, [pc, #372]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013f92:	f7ff fa9d 	bl	80134d0 <HAL_GetTick>
 8013f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013f98:	e008      	b.n	8013fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013f9a:	f7ff fa99 	bl	80134d0 <HAL_GetTick>
 8013f9e:	4602      	mov	r2, r0
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	1ad3      	subs	r3, r2, r3
 8013fa4:	2b02      	cmp	r3, #2
 8013fa6:	d901      	bls.n	8013fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8013fa8:	2303      	movs	r3, #3
 8013faa:	e1f9      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013fac:	4b53      	ldr	r3, [pc, #332]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d1f0      	bne.n	8013f9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	f003 0308 	and.w	r3, r3, #8
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d03c      	beq.n	801403e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	695b      	ldr	r3, [r3, #20]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d01c      	beq.n	8014006 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013fd4:	f043 0301 	orr.w	r3, r3, #1
 8013fd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013fdc:	f7ff fa78 	bl	80134d0 <HAL_GetTick>
 8013fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013fe2:	e008      	b.n	8013ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013fe4:	f7ff fa74 	bl	80134d0 <HAL_GetTick>
 8013fe8:	4602      	mov	r2, r0
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	2b02      	cmp	r3, #2
 8013ff0:	d901      	bls.n	8013ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8013ff2:	2303      	movs	r3, #3
 8013ff4:	e1d4      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013ff6:	4b41      	ldr	r3, [pc, #260]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8013ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013ffc:	f003 0302 	and.w	r3, r3, #2
 8014000:	2b00      	cmp	r3, #0
 8014002:	d0ef      	beq.n	8013fe4 <HAL_RCC_OscConfig+0x3ec>
 8014004:	e01b      	b.n	801403e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014006:	4b3d      	ldr	r3, [pc, #244]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8014008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801400c:	4a3b      	ldr	r2, [pc, #236]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 801400e:	f023 0301 	bic.w	r3, r3, #1
 8014012:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014016:	f7ff fa5b 	bl	80134d0 <HAL_GetTick>
 801401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801401c:	e008      	b.n	8014030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801401e:	f7ff fa57 	bl	80134d0 <HAL_GetTick>
 8014022:	4602      	mov	r2, r0
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	1ad3      	subs	r3, r2, r3
 8014028:	2b02      	cmp	r3, #2
 801402a:	d901      	bls.n	8014030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 801402c:	2303      	movs	r3, #3
 801402e:	e1b7      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014030:	4b32      	ldr	r3, [pc, #200]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8014032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014036:	f003 0302 	and.w	r3, r3, #2
 801403a:	2b00      	cmp	r3, #0
 801403c:	d1ef      	bne.n	801401e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	f003 0304 	and.w	r3, r3, #4
 8014046:	2b00      	cmp	r3, #0
 8014048:	f000 80a6 	beq.w	8014198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801404c:	2300      	movs	r3, #0
 801404e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8014050:	4b2a      	ldr	r3, [pc, #168]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8014052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014058:	2b00      	cmp	r3, #0
 801405a:	d10d      	bne.n	8014078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801405c:	4b27      	ldr	r3, [pc, #156]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 801405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014060:	4a26      	ldr	r2, [pc, #152]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 8014062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014066:	6593      	str	r3, [r2, #88]	@ 0x58
 8014068:	4b24      	ldr	r3, [pc, #144]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 801406a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801406c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014070:	60bb      	str	r3, [r7, #8]
 8014072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014074:	2301      	movs	r3, #1
 8014076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014078:	4b21      	ldr	r3, [pc, #132]	@ (8014100 <HAL_RCC_OscConfig+0x508>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014080:	2b00      	cmp	r3, #0
 8014082:	d118      	bne.n	80140b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014084:	4b1e      	ldr	r3, [pc, #120]	@ (8014100 <HAL_RCC_OscConfig+0x508>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	4a1d      	ldr	r2, [pc, #116]	@ (8014100 <HAL_RCC_OscConfig+0x508>)
 801408a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801408e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014090:	f7ff fa1e 	bl	80134d0 <HAL_GetTick>
 8014094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014096:	e008      	b.n	80140aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014098:	f7ff fa1a 	bl	80134d0 <HAL_GetTick>
 801409c:	4602      	mov	r2, r0
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	2b02      	cmp	r3, #2
 80140a4:	d901      	bls.n	80140aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80140a6:	2303      	movs	r3, #3
 80140a8:	e17a      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80140aa:	4b15      	ldr	r3, [pc, #84]	@ (8014100 <HAL_RCC_OscConfig+0x508>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d0f0      	beq.n	8014098 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	689b      	ldr	r3, [r3, #8]
 80140ba:	2b01      	cmp	r3, #1
 80140bc:	d108      	bne.n	80140d0 <HAL_RCC_OscConfig+0x4d8>
 80140be:	4b0f      	ldr	r3, [pc, #60]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 80140c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80140c4:	4a0d      	ldr	r2, [pc, #52]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 80140c6:	f043 0301 	orr.w	r3, r3, #1
 80140ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80140ce:	e029      	b.n	8014124 <HAL_RCC_OscConfig+0x52c>
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	2b05      	cmp	r3, #5
 80140d6:	d115      	bne.n	8014104 <HAL_RCC_OscConfig+0x50c>
 80140d8:	4b08      	ldr	r3, [pc, #32]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 80140da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80140de:	4a07      	ldr	r2, [pc, #28]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 80140e0:	f043 0304 	orr.w	r3, r3, #4
 80140e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80140e8:	4b04      	ldr	r3, [pc, #16]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 80140ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80140ee:	4a03      	ldr	r2, [pc, #12]	@ (80140fc <HAL_RCC_OscConfig+0x504>)
 80140f0:	f043 0301 	orr.w	r3, r3, #1
 80140f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80140f8:	e014      	b.n	8014124 <HAL_RCC_OscConfig+0x52c>
 80140fa:	bf00      	nop
 80140fc:	40021000 	.word	0x40021000
 8014100:	40007000 	.word	0x40007000
 8014104:	4b9c      	ldr	r3, [pc, #624]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801410a:	4a9b      	ldr	r2, [pc, #620]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801410c:	f023 0301 	bic.w	r3, r3, #1
 8014110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8014114:	4b98      	ldr	r3, [pc, #608]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801411a:	4a97      	ldr	r2, [pc, #604]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801411c:	f023 0304 	bic.w	r3, r3, #4
 8014120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	689b      	ldr	r3, [r3, #8]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d016      	beq.n	801415a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801412c:	f7ff f9d0 	bl	80134d0 <HAL_GetTick>
 8014130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014132:	e00a      	b.n	801414a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014134:	f7ff f9cc 	bl	80134d0 <HAL_GetTick>
 8014138:	4602      	mov	r2, r0
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	1ad3      	subs	r3, r2, r3
 801413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014142:	4293      	cmp	r3, r2
 8014144:	d901      	bls.n	801414a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8014146:	2303      	movs	r3, #3
 8014148:	e12a      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801414a:	4b8b      	ldr	r3, [pc, #556]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014150:	f003 0302 	and.w	r3, r3, #2
 8014154:	2b00      	cmp	r3, #0
 8014156:	d0ed      	beq.n	8014134 <HAL_RCC_OscConfig+0x53c>
 8014158:	e015      	b.n	8014186 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801415a:	f7ff f9b9 	bl	80134d0 <HAL_GetTick>
 801415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014160:	e00a      	b.n	8014178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014162:	f7ff f9b5 	bl	80134d0 <HAL_GetTick>
 8014166:	4602      	mov	r2, r0
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	1ad3      	subs	r3, r2, r3
 801416c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014170:	4293      	cmp	r3, r2
 8014172:	d901      	bls.n	8014178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8014174:	2303      	movs	r3, #3
 8014176:	e113      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014178:	4b7f      	ldr	r3, [pc, #508]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801417e:	f003 0302 	and.w	r3, r3, #2
 8014182:	2b00      	cmp	r3, #0
 8014184:	d1ed      	bne.n	8014162 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014186:	7ffb      	ldrb	r3, [r7, #31]
 8014188:	2b01      	cmp	r3, #1
 801418a:	d105      	bne.n	8014198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801418c:	4b7a      	ldr	r3, [pc, #488]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801418e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014190:	4a79      	ldr	r2, [pc, #484]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014196:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801419c:	2b00      	cmp	r3, #0
 801419e:	f000 80fe 	beq.w	801439e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141a6:	2b02      	cmp	r3, #2
 80141a8:	f040 80d0 	bne.w	801434c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80141ac:	4b72      	ldr	r3, [pc, #456]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 80141ae:	68db      	ldr	r3, [r3, #12]
 80141b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	f003 0203 	and.w	r2, r3, #3
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141bc:	429a      	cmp	r2, r3
 80141be:	d130      	bne.n	8014222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141ca:	3b01      	subs	r3, #1
 80141cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d127      	bne.n	8014222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80141d2:	697b      	ldr	r3, [r7, #20]
 80141d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80141de:	429a      	cmp	r2, r3
 80141e0:	d11f      	bne.n	8014222 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80141ec:	2a07      	cmp	r2, #7
 80141ee:	bf14      	ite	ne
 80141f0:	2201      	movne	r2, #1
 80141f2:	2200      	moveq	r2, #0
 80141f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80141f6:	4293      	cmp	r3, r2
 80141f8:	d113      	bne.n	8014222 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014204:	085b      	lsrs	r3, r3, #1
 8014206:	3b01      	subs	r3, #1
 8014208:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801420a:	429a      	cmp	r2, r3
 801420c:	d109      	bne.n	8014222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014218:	085b      	lsrs	r3, r3, #1
 801421a:	3b01      	subs	r3, #1
 801421c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801421e:	429a      	cmp	r2, r3
 8014220:	d06e      	beq.n	8014300 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014222:	69bb      	ldr	r3, [r7, #24]
 8014224:	2b0c      	cmp	r3, #12
 8014226:	d069      	beq.n	80142fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014228:	4b53      	ldr	r3, [pc, #332]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014230:	2b00      	cmp	r3, #0
 8014232:	d105      	bne.n	8014240 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8014234:	4b50      	ldr	r3, [pc, #320]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801423c:	2b00      	cmp	r3, #0
 801423e:	d001      	beq.n	8014244 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8014240:	2301      	movs	r3, #1
 8014242:	e0ad      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8014244:	4b4c      	ldr	r3, [pc, #304]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4a4b      	ldr	r2, [pc, #300]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801424a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801424e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8014250:	f7ff f93e 	bl	80134d0 <HAL_GetTick>
 8014254:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014256:	e008      	b.n	801426a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014258:	f7ff f93a 	bl	80134d0 <HAL_GetTick>
 801425c:	4602      	mov	r2, r0
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	1ad3      	subs	r3, r2, r3
 8014262:	2b02      	cmp	r3, #2
 8014264:	d901      	bls.n	801426a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8014266:	2303      	movs	r3, #3
 8014268:	e09a      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801426a:	4b43      	ldr	r3, [pc, #268]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014272:	2b00      	cmp	r3, #0
 8014274:	d1f0      	bne.n	8014258 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014276:	4b40      	ldr	r3, [pc, #256]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014278:	68da      	ldr	r2, [r3, #12]
 801427a:	4b40      	ldr	r3, [pc, #256]	@ (801437c <HAL_RCC_OscConfig+0x784>)
 801427c:	4013      	ands	r3, r2
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8014282:	687a      	ldr	r2, [r7, #4]
 8014284:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014286:	3a01      	subs	r2, #1
 8014288:	0112      	lsls	r2, r2, #4
 801428a:	4311      	orrs	r1, r2
 801428c:	687a      	ldr	r2, [r7, #4]
 801428e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8014290:	0212      	lsls	r2, r2, #8
 8014292:	4311      	orrs	r1, r2
 8014294:	687a      	ldr	r2, [r7, #4]
 8014296:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8014298:	0852      	lsrs	r2, r2, #1
 801429a:	3a01      	subs	r2, #1
 801429c:	0552      	lsls	r2, r2, #21
 801429e:	4311      	orrs	r1, r2
 80142a0:	687a      	ldr	r2, [r7, #4]
 80142a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80142a4:	0852      	lsrs	r2, r2, #1
 80142a6:	3a01      	subs	r2, #1
 80142a8:	0652      	lsls	r2, r2, #25
 80142aa:	4311      	orrs	r1, r2
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80142b0:	0912      	lsrs	r2, r2, #4
 80142b2:	0452      	lsls	r2, r2, #17
 80142b4:	430a      	orrs	r2, r1
 80142b6:	4930      	ldr	r1, [pc, #192]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 80142b8:	4313      	orrs	r3, r2
 80142ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80142bc:	4b2e      	ldr	r3, [pc, #184]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4a2d      	ldr	r2, [pc, #180]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 80142c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80142c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80142c8:	4b2b      	ldr	r3, [pc, #172]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	4a2a      	ldr	r2, [pc, #168]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 80142ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80142d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80142d4:	f7ff f8fc 	bl	80134d0 <HAL_GetTick>
 80142d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80142da:	e008      	b.n	80142ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80142dc:	f7ff f8f8 	bl	80134d0 <HAL_GetTick>
 80142e0:	4602      	mov	r2, r0
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d901      	bls.n	80142ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80142ea:	2303      	movs	r3, #3
 80142ec:	e058      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80142ee:	4b22      	ldr	r3, [pc, #136]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d0f0      	beq.n	80142dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80142fa:	e050      	b.n	801439e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80142fc:	2301      	movs	r3, #1
 80142fe:	e04f      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014300:	4b1d      	ldr	r3, [pc, #116]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014308:	2b00      	cmp	r3, #0
 801430a:	d148      	bne.n	801439e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801430c:	4b1a      	ldr	r3, [pc, #104]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4a19      	ldr	r2, [pc, #100]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014316:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014318:	4b17      	ldr	r3, [pc, #92]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	4a16      	ldr	r2, [pc, #88]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 801431e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014322:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014324:	f7ff f8d4 	bl	80134d0 <HAL_GetTick>
 8014328:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801432a:	e008      	b.n	801433e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801432c:	f7ff f8d0 	bl	80134d0 <HAL_GetTick>
 8014330:	4602      	mov	r2, r0
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	1ad3      	subs	r3, r2, r3
 8014336:	2b02      	cmp	r3, #2
 8014338:	d901      	bls.n	801433e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 801433a:	2303      	movs	r3, #3
 801433c:	e030      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801433e:	4b0e      	ldr	r3, [pc, #56]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014346:	2b00      	cmp	r3, #0
 8014348:	d0f0      	beq.n	801432c <HAL_RCC_OscConfig+0x734>
 801434a:	e028      	b.n	801439e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	2b0c      	cmp	r3, #12
 8014350:	d023      	beq.n	801439a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014352:	4b09      	ldr	r3, [pc, #36]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	4a08      	ldr	r2, [pc, #32]	@ (8014378 <HAL_RCC_OscConfig+0x780>)
 8014358:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801435c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801435e:	f7ff f8b7 	bl	80134d0 <HAL_GetTick>
 8014362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014364:	e00c      	b.n	8014380 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014366:	f7ff f8b3 	bl	80134d0 <HAL_GetTick>
 801436a:	4602      	mov	r2, r0
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	1ad3      	subs	r3, r2, r3
 8014370:	2b02      	cmp	r3, #2
 8014372:	d905      	bls.n	8014380 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8014374:	2303      	movs	r3, #3
 8014376:	e013      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
 8014378:	40021000 	.word	0x40021000
 801437c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014380:	4b09      	ldr	r3, [pc, #36]	@ (80143a8 <HAL_RCC_OscConfig+0x7b0>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014388:	2b00      	cmp	r3, #0
 801438a:	d1ec      	bne.n	8014366 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801438c:	4b06      	ldr	r3, [pc, #24]	@ (80143a8 <HAL_RCC_OscConfig+0x7b0>)
 801438e:	68da      	ldr	r2, [r3, #12]
 8014390:	4905      	ldr	r1, [pc, #20]	@ (80143a8 <HAL_RCC_OscConfig+0x7b0>)
 8014392:	4b06      	ldr	r3, [pc, #24]	@ (80143ac <HAL_RCC_OscConfig+0x7b4>)
 8014394:	4013      	ands	r3, r2
 8014396:	60cb      	str	r3, [r1, #12]
 8014398:	e001      	b.n	801439e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801439a:	2301      	movs	r3, #1
 801439c:	e000      	b.n	80143a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 801439e:	2300      	movs	r3, #0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3720      	adds	r7, #32
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	40021000 	.word	0x40021000
 80143ac:	feeefffc 	.word	0xfeeefffc

080143b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d101      	bne.n	80143c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80143c0:	2301      	movs	r3, #1
 80143c2:	e0e7      	b.n	8014594 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80143c4:	4b75      	ldr	r3, [pc, #468]	@ (801459c <HAL_RCC_ClockConfig+0x1ec>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	f003 0307 	and.w	r3, r3, #7
 80143cc:	683a      	ldr	r2, [r7, #0]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d910      	bls.n	80143f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80143d2:	4b72      	ldr	r3, [pc, #456]	@ (801459c <HAL_RCC_ClockConfig+0x1ec>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	f023 0207 	bic.w	r2, r3, #7
 80143da:	4970      	ldr	r1, [pc, #448]	@ (801459c <HAL_RCC_ClockConfig+0x1ec>)
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	4313      	orrs	r3, r2
 80143e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80143e2:	4b6e      	ldr	r3, [pc, #440]	@ (801459c <HAL_RCC_ClockConfig+0x1ec>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	f003 0307 	and.w	r3, r3, #7
 80143ea:	683a      	ldr	r2, [r7, #0]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d001      	beq.n	80143f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80143f0:	2301      	movs	r3, #1
 80143f2:	e0cf      	b.n	8014594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	f003 0302 	and.w	r3, r3, #2
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d010      	beq.n	8014422 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	689a      	ldr	r2, [r3, #8]
 8014404:	4b66      	ldr	r3, [pc, #408]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014406:	689b      	ldr	r3, [r3, #8]
 8014408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801440c:	429a      	cmp	r2, r3
 801440e:	d908      	bls.n	8014422 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014410:	4b63      	ldr	r3, [pc, #396]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	689b      	ldr	r3, [r3, #8]
 801441c:	4960      	ldr	r1, [pc, #384]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 801441e:	4313      	orrs	r3, r2
 8014420:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	f003 0301 	and.w	r3, r3, #1
 801442a:	2b00      	cmp	r3, #0
 801442c:	d04c      	beq.n	80144c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	685b      	ldr	r3, [r3, #4]
 8014432:	2b03      	cmp	r3, #3
 8014434:	d107      	bne.n	8014446 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014436:	4b5a      	ldr	r3, [pc, #360]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801443e:	2b00      	cmp	r3, #0
 8014440:	d121      	bne.n	8014486 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8014442:	2301      	movs	r3, #1
 8014444:	e0a6      	b.n	8014594 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	2b02      	cmp	r3, #2
 801444c:	d107      	bne.n	801445e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801444e:	4b54      	ldr	r3, [pc, #336]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014456:	2b00      	cmp	r3, #0
 8014458:	d115      	bne.n	8014486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801445a:	2301      	movs	r3, #1
 801445c:	e09a      	b.n	8014594 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	685b      	ldr	r3, [r3, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d107      	bne.n	8014476 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8014466:	4b4e      	ldr	r3, [pc, #312]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	f003 0302 	and.w	r3, r3, #2
 801446e:	2b00      	cmp	r3, #0
 8014470:	d109      	bne.n	8014486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8014472:	2301      	movs	r3, #1
 8014474:	e08e      	b.n	8014594 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014476:	4b4a      	ldr	r3, [pc, #296]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801447e:	2b00      	cmp	r3, #0
 8014480:	d101      	bne.n	8014486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8014482:	2301      	movs	r3, #1
 8014484:	e086      	b.n	8014594 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014486:	4b46      	ldr	r3, [pc, #280]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014488:	689b      	ldr	r3, [r3, #8]
 801448a:	f023 0203 	bic.w	r2, r3, #3
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	4943      	ldr	r1, [pc, #268]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014494:	4313      	orrs	r3, r2
 8014496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014498:	f7ff f81a 	bl	80134d0 <HAL_GetTick>
 801449c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801449e:	e00a      	b.n	80144b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80144a0:	f7ff f816 	bl	80134d0 <HAL_GetTick>
 80144a4:	4602      	mov	r2, r0
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	1ad3      	subs	r3, r2, r3
 80144aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d901      	bls.n	80144b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80144b2:	2303      	movs	r3, #3
 80144b4:	e06e      	b.n	8014594 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80144b6:	4b3a      	ldr	r3, [pc, #232]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 80144b8:	689b      	ldr	r3, [r3, #8]
 80144ba:	f003 020c 	and.w	r2, r3, #12
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d1eb      	bne.n	80144a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f003 0302 	and.w	r3, r3, #2
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d010      	beq.n	80144f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	689a      	ldr	r2, [r3, #8]
 80144d8:	4b31      	ldr	r3, [pc, #196]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 80144da:	689b      	ldr	r3, [r3, #8]
 80144dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d208      	bcs.n	80144f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80144e4:	4b2e      	ldr	r3, [pc, #184]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 80144e6:	689b      	ldr	r3, [r3, #8]
 80144e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	689b      	ldr	r3, [r3, #8]
 80144f0:	492b      	ldr	r1, [pc, #172]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 80144f2:	4313      	orrs	r3, r2
 80144f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80144f6:	4b29      	ldr	r3, [pc, #164]	@ (801459c <HAL_RCC_ClockConfig+0x1ec>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	f003 0307 	and.w	r3, r3, #7
 80144fe:	683a      	ldr	r2, [r7, #0]
 8014500:	429a      	cmp	r2, r3
 8014502:	d210      	bcs.n	8014526 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014504:	4b25      	ldr	r3, [pc, #148]	@ (801459c <HAL_RCC_ClockConfig+0x1ec>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f023 0207 	bic.w	r2, r3, #7
 801450c:	4923      	ldr	r1, [pc, #140]	@ (801459c <HAL_RCC_ClockConfig+0x1ec>)
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	4313      	orrs	r3, r2
 8014512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014514:	4b21      	ldr	r3, [pc, #132]	@ (801459c <HAL_RCC_ClockConfig+0x1ec>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f003 0307 	and.w	r3, r3, #7
 801451c:	683a      	ldr	r2, [r7, #0]
 801451e:	429a      	cmp	r2, r3
 8014520:	d001      	beq.n	8014526 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8014522:	2301      	movs	r3, #1
 8014524:	e036      	b.n	8014594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	f003 0304 	and.w	r3, r3, #4
 801452e:	2b00      	cmp	r3, #0
 8014530:	d008      	beq.n	8014544 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014532:	4b1b      	ldr	r3, [pc, #108]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014534:	689b      	ldr	r3, [r3, #8]
 8014536:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	68db      	ldr	r3, [r3, #12]
 801453e:	4918      	ldr	r1, [pc, #96]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014540:	4313      	orrs	r3, r2
 8014542:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	f003 0308 	and.w	r3, r3, #8
 801454c:	2b00      	cmp	r3, #0
 801454e:	d009      	beq.n	8014564 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014550:	4b13      	ldr	r3, [pc, #76]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014552:	689b      	ldr	r3, [r3, #8]
 8014554:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	691b      	ldr	r3, [r3, #16]
 801455c:	00db      	lsls	r3, r3, #3
 801455e:	4910      	ldr	r1, [pc, #64]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 8014560:	4313      	orrs	r3, r2
 8014562:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8014564:	f000 f824 	bl	80145b0 <HAL_RCC_GetSysClockFreq>
 8014568:	4602      	mov	r2, r0
 801456a:	4b0d      	ldr	r3, [pc, #52]	@ (80145a0 <HAL_RCC_ClockConfig+0x1f0>)
 801456c:	689b      	ldr	r3, [r3, #8]
 801456e:	091b      	lsrs	r3, r3, #4
 8014570:	f003 030f 	and.w	r3, r3, #15
 8014574:	490b      	ldr	r1, [pc, #44]	@ (80145a4 <HAL_RCC_ClockConfig+0x1f4>)
 8014576:	5ccb      	ldrb	r3, [r1, r3]
 8014578:	f003 031f 	and.w	r3, r3, #31
 801457c:	fa22 f303 	lsr.w	r3, r2, r3
 8014580:	4a09      	ldr	r2, [pc, #36]	@ (80145a8 <HAL_RCC_ClockConfig+0x1f8>)
 8014582:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014584:	4b09      	ldr	r3, [pc, #36]	@ (80145ac <HAL_RCC_ClockConfig+0x1fc>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4618      	mov	r0, r3
 801458a:	f7ef fe9f 	bl	80042cc <HAL_InitTick>
 801458e:	4603      	mov	r3, r0
 8014590:	72fb      	strb	r3, [r7, #11]

  return status;
 8014592:	7afb      	ldrb	r3, [r7, #11]
}
 8014594:	4618      	mov	r0, r3
 8014596:	3710      	adds	r7, #16
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	40022000 	.word	0x40022000
 80145a0:	40021000 	.word	0x40021000
 80145a4:	08024b30 	.word	0x08024b30
 80145a8:	200002c8 	.word	0x200002c8
 80145ac:	200002cc 	.word	0x200002cc

080145b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80145b0:	b480      	push	{r7}
 80145b2:	b089      	sub	sp, #36	@ 0x24
 80145b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80145b6:	2300      	movs	r3, #0
 80145b8:	61fb      	str	r3, [r7, #28]
 80145ba:	2300      	movs	r3, #0
 80145bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80145be:	4b3e      	ldr	r3, [pc, #248]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80145c0:	689b      	ldr	r3, [r3, #8]
 80145c2:	f003 030c 	and.w	r3, r3, #12
 80145c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80145c8:	4b3b      	ldr	r3, [pc, #236]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	f003 0303 	and.w	r3, r3, #3
 80145d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d005      	beq.n	80145e4 <HAL_RCC_GetSysClockFreq+0x34>
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	2b0c      	cmp	r3, #12
 80145dc:	d121      	bne.n	8014622 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2b01      	cmp	r3, #1
 80145e2:	d11e      	bne.n	8014622 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80145e4:	4b34      	ldr	r3, [pc, #208]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	f003 0308 	and.w	r3, r3, #8
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d107      	bne.n	8014600 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80145f0:	4b31      	ldr	r3, [pc, #196]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80145f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80145f6:	0a1b      	lsrs	r3, r3, #8
 80145f8:	f003 030f 	and.w	r3, r3, #15
 80145fc:	61fb      	str	r3, [r7, #28]
 80145fe:	e005      	b.n	801460c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8014600:	4b2d      	ldr	r3, [pc, #180]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	091b      	lsrs	r3, r3, #4
 8014606:	f003 030f 	and.w	r3, r3, #15
 801460a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801460c:	4a2b      	ldr	r2, [pc, #172]	@ (80146bc <HAL_RCC_GetSysClockFreq+0x10c>)
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014614:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d10d      	bne.n	8014638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014620:	e00a      	b.n	8014638 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	2b04      	cmp	r3, #4
 8014626:	d102      	bne.n	801462e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014628:	4b25      	ldr	r3, [pc, #148]	@ (80146c0 <HAL_RCC_GetSysClockFreq+0x110>)
 801462a:	61bb      	str	r3, [r7, #24]
 801462c:	e004      	b.n	8014638 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	2b08      	cmp	r3, #8
 8014632:	d101      	bne.n	8014638 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8014634:	4b23      	ldr	r3, [pc, #140]	@ (80146c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8014636:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8014638:	693b      	ldr	r3, [r7, #16]
 801463a:	2b0c      	cmp	r3, #12
 801463c:	d134      	bne.n	80146a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801463e:	4b1e      	ldr	r3, [pc, #120]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8014640:	68db      	ldr	r3, [r3, #12]
 8014642:	f003 0303 	and.w	r3, r3, #3
 8014646:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	2b02      	cmp	r3, #2
 801464c:	d003      	beq.n	8014656 <HAL_RCC_GetSysClockFreq+0xa6>
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	2b03      	cmp	r3, #3
 8014652:	d003      	beq.n	801465c <HAL_RCC_GetSysClockFreq+0xac>
 8014654:	e005      	b.n	8014662 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8014656:	4b1a      	ldr	r3, [pc, #104]	@ (80146c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8014658:	617b      	str	r3, [r7, #20]
      break;
 801465a:	e005      	b.n	8014668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801465c:	4b19      	ldr	r3, [pc, #100]	@ (80146c4 <HAL_RCC_GetSysClockFreq+0x114>)
 801465e:	617b      	str	r3, [r7, #20]
      break;
 8014660:	e002      	b.n	8014668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8014662:	69fb      	ldr	r3, [r7, #28]
 8014664:	617b      	str	r3, [r7, #20]
      break;
 8014666:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014668:	4b13      	ldr	r3, [pc, #76]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	091b      	lsrs	r3, r3, #4
 801466e:	f003 0307 	and.w	r3, r3, #7
 8014672:	3301      	adds	r3, #1
 8014674:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8014676:	4b10      	ldr	r3, [pc, #64]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8014678:	68db      	ldr	r3, [r3, #12]
 801467a:	0a1b      	lsrs	r3, r3, #8
 801467c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014680:	697a      	ldr	r2, [r7, #20]
 8014682:	fb03 f202 	mul.w	r2, r3, r2
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	fbb2 f3f3 	udiv	r3, r2, r3
 801468c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801468e:	4b0a      	ldr	r3, [pc, #40]	@ (80146b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8014690:	68db      	ldr	r3, [r3, #12]
 8014692:	0e5b      	lsrs	r3, r3, #25
 8014694:	f003 0303 	and.w	r3, r3, #3
 8014698:	3301      	adds	r3, #1
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801469e:	697a      	ldr	r2, [r7, #20]
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80146a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80146a8:	69bb      	ldr	r3, [r7, #24]
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3724      	adds	r7, #36	@ 0x24
 80146ae:	46bd      	mov	sp, r7
 80146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b4:	4770      	bx	lr
 80146b6:	bf00      	nop
 80146b8:	40021000 	.word	0x40021000
 80146bc:	08024b48 	.word	0x08024b48
 80146c0:	00f42400 	.word	0x00f42400
 80146c4:	007a1200 	.word	0x007a1200

080146c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80146c8:	b480      	push	{r7}
 80146ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80146cc:	4b03      	ldr	r3, [pc, #12]	@ (80146dc <HAL_RCC_GetHCLKFreq+0x14>)
 80146ce:	681b      	ldr	r3, [r3, #0]
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	46bd      	mov	sp, r7
 80146d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d8:	4770      	bx	lr
 80146da:	bf00      	nop
 80146dc:	200002c8 	.word	0x200002c8

080146e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80146e4:	f7ff fff0 	bl	80146c8 <HAL_RCC_GetHCLKFreq>
 80146e8:	4602      	mov	r2, r0
 80146ea:	4b06      	ldr	r3, [pc, #24]	@ (8014704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80146ec:	689b      	ldr	r3, [r3, #8]
 80146ee:	0a1b      	lsrs	r3, r3, #8
 80146f0:	f003 0307 	and.w	r3, r3, #7
 80146f4:	4904      	ldr	r1, [pc, #16]	@ (8014708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80146f6:	5ccb      	ldrb	r3, [r1, r3]
 80146f8:	f003 031f 	and.w	r3, r3, #31
 80146fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014700:	4618      	mov	r0, r3
 8014702:	bd80      	pop	{r7, pc}
 8014704:	40021000 	.word	0x40021000
 8014708:	08024b40 	.word	0x08024b40

0801470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8014710:	f7ff ffda 	bl	80146c8 <HAL_RCC_GetHCLKFreq>
 8014714:	4602      	mov	r2, r0
 8014716:	4b06      	ldr	r3, [pc, #24]	@ (8014730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014718:	689b      	ldr	r3, [r3, #8]
 801471a:	0adb      	lsrs	r3, r3, #11
 801471c:	f003 0307 	and.w	r3, r3, #7
 8014720:	4904      	ldr	r1, [pc, #16]	@ (8014734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014722:	5ccb      	ldrb	r3, [r1, r3]
 8014724:	f003 031f 	and.w	r3, r3, #31
 8014728:	fa22 f303 	lsr.w	r3, r2, r3
}
 801472c:	4618      	mov	r0, r3
 801472e:	bd80      	pop	{r7, pc}
 8014730:	40021000 	.word	0x40021000
 8014734:	08024b40 	.word	0x08024b40

08014738 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014738:	b480      	push	{r7}
 801473a:	b083      	sub	sp, #12
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	220f      	movs	r2, #15
 8014746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8014748:	4b12      	ldr	r3, [pc, #72]	@ (8014794 <HAL_RCC_GetClockConfig+0x5c>)
 801474a:	689b      	ldr	r3, [r3, #8]
 801474c:	f003 0203 	and.w	r2, r3, #3
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8014754:	4b0f      	ldr	r3, [pc, #60]	@ (8014794 <HAL_RCC_GetClockConfig+0x5c>)
 8014756:	689b      	ldr	r3, [r3, #8]
 8014758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8014760:	4b0c      	ldr	r3, [pc, #48]	@ (8014794 <HAL_RCC_GetClockConfig+0x5c>)
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 801476c:	4b09      	ldr	r3, [pc, #36]	@ (8014794 <HAL_RCC_GetClockConfig+0x5c>)
 801476e:	689b      	ldr	r3, [r3, #8]
 8014770:	08db      	lsrs	r3, r3, #3
 8014772:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 801477a:	4b07      	ldr	r3, [pc, #28]	@ (8014798 <HAL_RCC_GetClockConfig+0x60>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	f003 0207 	and.w	r2, r3, #7
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	601a      	str	r2, [r3, #0]
}
 8014786:	bf00      	nop
 8014788:	370c      	adds	r7, #12
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr
 8014792:	bf00      	nop
 8014794:	40021000 	.word	0x40021000
 8014798:	40022000 	.word	0x40022000

0801479c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b086      	sub	sp, #24
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80147a4:	2300      	movs	r3, #0
 80147a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80147a8:	4b2a      	ldr	r3, [pc, #168]	@ (8014854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80147aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80147ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d003      	beq.n	80147bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80147b4:	f7ff f9bc 	bl	8013b30 <HAL_PWREx_GetVoltageRange>
 80147b8:	6178      	str	r0, [r7, #20]
 80147ba:	e014      	b.n	80147e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80147bc:	4b25      	ldr	r3, [pc, #148]	@ (8014854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80147be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80147c0:	4a24      	ldr	r2, [pc, #144]	@ (8014854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80147c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80147c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80147c8:	4b22      	ldr	r3, [pc, #136]	@ (8014854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80147ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80147cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80147d0:	60fb      	str	r3, [r7, #12]
 80147d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80147d4:	f7ff f9ac 	bl	8013b30 <HAL_PWREx_GetVoltageRange>
 80147d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80147da:	4b1e      	ldr	r3, [pc, #120]	@ (8014854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80147dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80147de:	4a1d      	ldr	r2, [pc, #116]	@ (8014854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80147e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80147e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80147e6:	697b      	ldr	r3, [r7, #20]
 80147e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80147ec:	d10b      	bne.n	8014806 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2b80      	cmp	r3, #128	@ 0x80
 80147f2:	d919      	bls.n	8014828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80147f8:	d902      	bls.n	8014800 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80147fa:	2302      	movs	r3, #2
 80147fc:	613b      	str	r3, [r7, #16]
 80147fe:	e013      	b.n	8014828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014800:	2301      	movs	r3, #1
 8014802:	613b      	str	r3, [r7, #16]
 8014804:	e010      	b.n	8014828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2b80      	cmp	r3, #128	@ 0x80
 801480a:	d902      	bls.n	8014812 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801480c:	2303      	movs	r3, #3
 801480e:	613b      	str	r3, [r7, #16]
 8014810:	e00a      	b.n	8014828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2b80      	cmp	r3, #128	@ 0x80
 8014816:	d102      	bne.n	801481e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8014818:	2302      	movs	r3, #2
 801481a:	613b      	str	r3, [r7, #16]
 801481c:	e004      	b.n	8014828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2b70      	cmp	r3, #112	@ 0x70
 8014822:	d101      	bne.n	8014828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014824:	2301      	movs	r3, #1
 8014826:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8014828:	4b0b      	ldr	r3, [pc, #44]	@ (8014858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	f023 0207 	bic.w	r2, r3, #7
 8014830:	4909      	ldr	r1, [pc, #36]	@ (8014858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8014832:	693b      	ldr	r3, [r7, #16]
 8014834:	4313      	orrs	r3, r2
 8014836:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8014838:	4b07      	ldr	r3, [pc, #28]	@ (8014858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	f003 0307 	and.w	r3, r3, #7
 8014840:	693a      	ldr	r2, [r7, #16]
 8014842:	429a      	cmp	r2, r3
 8014844:	d001      	beq.n	801484a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8014846:	2301      	movs	r3, #1
 8014848:	e000      	b.n	801484c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801484a:	2300      	movs	r3, #0
}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	40021000 	.word	0x40021000
 8014858:	40022000 	.word	0x40022000

0801485c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b086      	sub	sp, #24
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8014864:	2300      	movs	r3, #0
 8014866:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8014868:	2300      	movs	r3, #0
 801486a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014874:	2b00      	cmp	r3, #0
 8014876:	d041      	beq.n	80148fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801487c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8014880:	d02a      	beq.n	80148d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8014882:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8014886:	d824      	bhi.n	80148d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8014888:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801488c:	d008      	beq.n	80148a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801488e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014892:	d81e      	bhi.n	80148d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8014894:	2b00      	cmp	r3, #0
 8014896:	d00a      	beq.n	80148ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8014898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801489c:	d010      	beq.n	80148c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801489e:	e018      	b.n	80148d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80148a0:	4b86      	ldr	r3, [pc, #536]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	4a85      	ldr	r2, [pc, #532]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80148a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80148aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80148ac:	e015      	b.n	80148da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	3304      	adds	r3, #4
 80148b2:	2100      	movs	r1, #0
 80148b4:	4618      	mov	r0, r3
 80148b6:	f000 fabb 	bl	8014e30 <RCCEx_PLLSAI1_Config>
 80148ba:	4603      	mov	r3, r0
 80148bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80148be:	e00c      	b.n	80148da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	3320      	adds	r3, #32
 80148c4:	2100      	movs	r1, #0
 80148c6:	4618      	mov	r0, r3
 80148c8:	f000 fba6 	bl	8015018 <RCCEx_PLLSAI2_Config>
 80148cc:	4603      	mov	r3, r0
 80148ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80148d0:	e003      	b.n	80148da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80148d2:	2301      	movs	r3, #1
 80148d4:	74fb      	strb	r3, [r7, #19]
      break;
 80148d6:	e000      	b.n	80148da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80148d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80148da:	7cfb      	ldrb	r3, [r7, #19]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d10b      	bne.n	80148f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80148e0:	4b76      	ldr	r3, [pc, #472]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80148e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80148e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148ee:	4973      	ldr	r1, [pc, #460]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80148f0:	4313      	orrs	r3, r2
 80148f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80148f6:	e001      	b.n	80148fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80148f8:	7cfb      	ldrb	r3, [r7, #19]
 80148fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8014904:	2b00      	cmp	r3, #0
 8014906:	d041      	beq.n	801498c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801490c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014910:	d02a      	beq.n	8014968 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8014912:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014916:	d824      	bhi.n	8014962 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8014918:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801491c:	d008      	beq.n	8014930 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801491e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014922:	d81e      	bhi.n	8014962 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8014924:	2b00      	cmp	r3, #0
 8014926:	d00a      	beq.n	801493e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8014928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801492c:	d010      	beq.n	8014950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801492e:	e018      	b.n	8014962 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8014930:	4b62      	ldr	r3, [pc, #392]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014932:	68db      	ldr	r3, [r3, #12]
 8014934:	4a61      	ldr	r2, [pc, #388]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801493a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801493c:	e015      	b.n	801496a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	3304      	adds	r3, #4
 8014942:	2100      	movs	r1, #0
 8014944:	4618      	mov	r0, r3
 8014946:	f000 fa73 	bl	8014e30 <RCCEx_PLLSAI1_Config>
 801494a:	4603      	mov	r3, r0
 801494c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801494e:	e00c      	b.n	801496a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	3320      	adds	r3, #32
 8014954:	2100      	movs	r1, #0
 8014956:	4618      	mov	r0, r3
 8014958:	f000 fb5e 	bl	8015018 <RCCEx_PLLSAI2_Config>
 801495c:	4603      	mov	r3, r0
 801495e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8014960:	e003      	b.n	801496a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8014962:	2301      	movs	r3, #1
 8014964:	74fb      	strb	r3, [r7, #19]
      break;
 8014966:	e000      	b.n	801496a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8014968:	bf00      	nop
    }

    if(ret == HAL_OK)
 801496a:	7cfb      	ldrb	r3, [r7, #19]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d10b      	bne.n	8014988 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8014970:	4b52      	ldr	r3, [pc, #328]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014976:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801497e:	494f      	ldr	r1, [pc, #316]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014980:	4313      	orrs	r3, r2
 8014982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8014986:	e001      	b.n	801498c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014988:	7cfb      	ldrb	r3, [r7, #19]
 801498a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014994:	2b00      	cmp	r3, #0
 8014996:	f000 80a0 	beq.w	8014ada <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801499a:	2300      	movs	r3, #0
 801499c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801499e:	4b47      	ldr	r3, [pc, #284]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80149a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80149a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d101      	bne.n	80149ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80149aa:	2301      	movs	r3, #1
 80149ac:	e000      	b.n	80149b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80149ae:	2300      	movs	r3, #0
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d00d      	beq.n	80149d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80149b4:	4b41      	ldr	r3, [pc, #260]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80149b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80149b8:	4a40      	ldr	r2, [pc, #256]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80149ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80149be:	6593      	str	r3, [r2, #88]	@ 0x58
 80149c0:	4b3e      	ldr	r3, [pc, #248]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80149c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80149c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80149c8:	60bb      	str	r3, [r7, #8]
 80149ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80149cc:	2301      	movs	r3, #1
 80149ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80149d0:	4b3b      	ldr	r3, [pc, #236]	@ (8014ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	4a3a      	ldr	r2, [pc, #232]	@ (8014ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80149d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80149da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80149dc:	f7fe fd78 	bl	80134d0 <HAL_GetTick>
 80149e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80149e2:	e009      	b.n	80149f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80149e4:	f7fe fd74 	bl	80134d0 <HAL_GetTick>
 80149e8:	4602      	mov	r2, r0
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	1ad3      	subs	r3, r2, r3
 80149ee:	2b02      	cmp	r3, #2
 80149f0:	d902      	bls.n	80149f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80149f2:	2303      	movs	r3, #3
 80149f4:	74fb      	strb	r3, [r7, #19]
        break;
 80149f6:	e005      	b.n	8014a04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80149f8:	4b31      	ldr	r3, [pc, #196]	@ (8014ac0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d0ef      	beq.n	80149e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8014a04:	7cfb      	ldrb	r3, [r7, #19]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d15c      	bne.n	8014ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8014a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014a14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d01f      	beq.n	8014a5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a22:	697a      	ldr	r2, [r7, #20]
 8014a24:	429a      	cmp	r2, r3
 8014a26:	d019      	beq.n	8014a5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8014a28:	4b24      	ldr	r3, [pc, #144]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014a32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014a34:	4b21      	ldr	r3, [pc, #132]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a3a:	4a20      	ldr	r2, [pc, #128]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8014a44:	4b1d      	ldr	r3, [pc, #116]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8014a54:	4a19      	ldr	r2, [pc, #100]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	f003 0301 	and.w	r3, r3, #1
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d016      	beq.n	8014a94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a66:	f7fe fd33 	bl	80134d0 <HAL_GetTick>
 8014a6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014a6c:	e00b      	b.n	8014a86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014a6e:	f7fe fd2f 	bl	80134d0 <HAL_GetTick>
 8014a72:	4602      	mov	r2, r0
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	1ad3      	subs	r3, r2, r3
 8014a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014a7c:	4293      	cmp	r3, r2
 8014a7e:	d902      	bls.n	8014a86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8014a80:	2303      	movs	r3, #3
 8014a82:	74fb      	strb	r3, [r7, #19]
            break;
 8014a84:	e006      	b.n	8014a94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014a86:	4b0d      	ldr	r3, [pc, #52]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a8c:	f003 0302 	and.w	r3, r3, #2
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d0ec      	beq.n	8014a6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8014a94:	7cfb      	ldrb	r3, [r7, #19]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d10c      	bne.n	8014ab4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014a9a:	4b08      	ldr	r3, [pc, #32]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014aaa:	4904      	ldr	r1, [pc, #16]	@ (8014abc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014aac:	4313      	orrs	r3, r2
 8014aae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8014ab2:	e009      	b.n	8014ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014ab4:	7cfb      	ldrb	r3, [r7, #19]
 8014ab6:	74bb      	strb	r3, [r7, #18]
 8014ab8:	e006      	b.n	8014ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8014aba:	bf00      	nop
 8014abc:	40021000 	.word	0x40021000
 8014ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ac4:	7cfb      	ldrb	r3, [r7, #19]
 8014ac6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014ac8:	7c7b      	ldrb	r3, [r7, #17]
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d105      	bne.n	8014ada <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014ace:	4b9e      	ldr	r3, [pc, #632]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014ad2:	4a9d      	ldr	r2, [pc, #628]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014ad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014ad8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	f003 0301 	and.w	r3, r3, #1
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d00a      	beq.n	8014afc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014ae6:	4b98      	ldr	r3, [pc, #608]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014aec:	f023 0203 	bic.w	r2, r3, #3
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014af4:	4994      	ldr	r1, [pc, #592]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014af6:	4313      	orrs	r3, r2
 8014af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f003 0302 	and.w	r3, r3, #2
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d00a      	beq.n	8014b1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014b08:	4b8f      	ldr	r3, [pc, #572]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014b0e:	f023 020c 	bic.w	r2, r3, #12
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b16:	498c      	ldr	r1, [pc, #560]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b18:	4313      	orrs	r3, r2
 8014b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	f003 0304 	and.w	r3, r3, #4
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d00a      	beq.n	8014b40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8014b2a:	4b87      	ldr	r3, [pc, #540]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014b30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b38:	4983      	ldr	r1, [pc, #524]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b3a:	4313      	orrs	r3, r2
 8014b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	f003 0308 	and.w	r3, r3, #8
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d00a      	beq.n	8014b62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8014b4c:	4b7e      	ldr	r3, [pc, #504]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014b52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b5a:	497b      	ldr	r1, [pc, #492]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b5c:	4313      	orrs	r3, r2
 8014b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f003 0310 	and.w	r3, r3, #16
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d00a      	beq.n	8014b84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8014b6e:	4b76      	ldr	r3, [pc, #472]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014b74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014b7c:	4972      	ldr	r1, [pc, #456]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b7e:	4313      	orrs	r3, r2
 8014b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f003 0320 	and.w	r3, r3, #32
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d00a      	beq.n	8014ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014b90:	4b6d      	ldr	r3, [pc, #436]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014b96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b9e:	496a      	ldr	r1, [pc, #424]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d00a      	beq.n	8014bc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014bb2:	4b65      	ldr	r3, [pc, #404]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014bb8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bc0:	4961      	ldr	r1, [pc, #388]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014bc2:	4313      	orrs	r3, r2
 8014bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00a      	beq.n	8014bea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014bd4:	4b5c      	ldr	r3, [pc, #368]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014bda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014be2:	4959      	ldr	r1, [pc, #356]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014be4:	4313      	orrs	r3, r2
 8014be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d00a      	beq.n	8014c0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8014bf6:	4b54      	ldr	r3, [pc, #336]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014bfc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014c04:	4950      	ldr	r1, [pc, #320]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c06:	4313      	orrs	r3, r2
 8014c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d00a      	beq.n	8014c2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8014c18:	4b4b      	ldr	r3, [pc, #300]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014c1e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c26:	4948      	ldr	r1, [pc, #288]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c28:	4313      	orrs	r3, r2
 8014c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d00a      	beq.n	8014c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014c3a:	4b43      	ldr	r3, [pc, #268]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c48:	493f      	ldr	r1, [pc, #252]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c4a:	4313      	orrs	r3, r2
 8014c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d028      	beq.n	8014cae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014c62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c6a:	4937      	ldr	r1, [pc, #220]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c6c:	4313      	orrs	r3, r2
 8014c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014c7a:	d106      	bne.n	8014c8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014c7c:	4b32      	ldr	r3, [pc, #200]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c7e:	68db      	ldr	r3, [r3, #12]
 8014c80:	4a31      	ldr	r2, [pc, #196]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014c86:	60d3      	str	r3, [r2, #12]
 8014c88:	e011      	b.n	8014cae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014c92:	d10c      	bne.n	8014cae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	3304      	adds	r3, #4
 8014c98:	2101      	movs	r1, #1
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f000 f8c8 	bl	8014e30 <RCCEx_PLLSAI1_Config>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8014ca4:	7cfb      	ldrb	r3, [r7, #19]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8014caa:	7cfb      	ldrb	r3, [r7, #19]
 8014cac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d028      	beq.n	8014d0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8014cba:	4b23      	ldr	r3, [pc, #140]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014cc0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014cc8:	491f      	ldr	r1, [pc, #124]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014cca:	4313      	orrs	r3, r2
 8014ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014cd8:	d106      	bne.n	8014ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014cda:	4b1b      	ldr	r3, [pc, #108]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014cdc:	68db      	ldr	r3, [r3, #12]
 8014cde:	4a1a      	ldr	r2, [pc, #104]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014ce0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014ce4:	60d3      	str	r3, [r2, #12]
 8014ce6:	e011      	b.n	8014d0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014cec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014cf0:	d10c      	bne.n	8014d0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	3304      	adds	r3, #4
 8014cf6:	2101      	movs	r1, #1
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f000 f899 	bl	8014e30 <RCCEx_PLLSAI1_Config>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014d02:	7cfb      	ldrb	r3, [r7, #19]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d001      	beq.n	8014d0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8014d08:	7cfb      	ldrb	r3, [r7, #19]
 8014d0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d02b      	beq.n	8014d70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014d18:	4b0b      	ldr	r3, [pc, #44]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d26:	4908      	ldr	r1, [pc, #32]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014d28:	4313      	orrs	r3, r2
 8014d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014d36:	d109      	bne.n	8014d4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014d38:	4b03      	ldr	r3, [pc, #12]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	4a02      	ldr	r2, [pc, #8]	@ (8014d48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014d42:	60d3      	str	r3, [r2, #12]
 8014d44:	e014      	b.n	8014d70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8014d46:	bf00      	nop
 8014d48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014d54:	d10c      	bne.n	8014d70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	3304      	adds	r3, #4
 8014d5a:	2101      	movs	r1, #1
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f000 f867 	bl	8014e30 <RCCEx_PLLSAI1_Config>
 8014d62:	4603      	mov	r3, r0
 8014d64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014d66:	7cfb      	ldrb	r3, [r7, #19]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d001      	beq.n	8014d70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8014d6c:	7cfb      	ldrb	r3, [r7, #19]
 8014d6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d02f      	beq.n	8014ddc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8014d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8014e2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014d8a:	4928      	ldr	r1, [pc, #160]	@ (8014e2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014d8c:	4313      	orrs	r3, r2
 8014d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014d96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014d9a:	d10d      	bne.n	8014db8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	3304      	adds	r3, #4
 8014da0:	2102      	movs	r1, #2
 8014da2:	4618      	mov	r0, r3
 8014da4:	f000 f844 	bl	8014e30 <RCCEx_PLLSAI1_Config>
 8014da8:	4603      	mov	r3, r0
 8014daa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014dac:	7cfb      	ldrb	r3, [r7, #19]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d014      	beq.n	8014ddc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8014db2:	7cfb      	ldrb	r3, [r7, #19]
 8014db4:	74bb      	strb	r3, [r7, #18]
 8014db6:	e011      	b.n	8014ddc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014dc0:	d10c      	bne.n	8014ddc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	3320      	adds	r3, #32
 8014dc6:	2102      	movs	r1, #2
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f000 f925 	bl	8015018 <RCCEx_PLLSAI2_Config>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014dd2:	7cfb      	ldrb	r3, [r7, #19]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d001      	beq.n	8014ddc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8014dd8:	7cfb      	ldrb	r3, [r7, #19]
 8014dda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d00a      	beq.n	8014dfe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8014de8:	4b10      	ldr	r3, [pc, #64]	@ (8014e2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014dee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014df6:	490d      	ldr	r1, [pc, #52]	@ (8014e2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014df8:	4313      	orrs	r3, r2
 8014dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d00b      	beq.n	8014e22 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8014e0a:	4b08      	ldr	r3, [pc, #32]	@ (8014e2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014e1a:	4904      	ldr	r1, [pc, #16]	@ (8014e2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014e1c:	4313      	orrs	r3, r2
 8014e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8014e22:	7cbb      	ldrb	r3, [r7, #18]
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3718      	adds	r7, #24
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	40021000 	.word	0x40021000

08014e30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b084      	sub	sp, #16
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8014e3e:	4b75      	ldr	r3, [pc, #468]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014e40:	68db      	ldr	r3, [r3, #12]
 8014e42:	f003 0303 	and.w	r3, r3, #3
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d018      	beq.n	8014e7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8014e4a:	4b72      	ldr	r3, [pc, #456]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014e4c:	68db      	ldr	r3, [r3, #12]
 8014e4e:	f003 0203 	and.w	r2, r3, #3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d10d      	bne.n	8014e76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681b      	ldr	r3, [r3, #0]
       ||
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d009      	beq.n	8014e76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8014e62:	4b6c      	ldr	r3, [pc, #432]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014e64:	68db      	ldr	r3, [r3, #12]
 8014e66:	091b      	lsrs	r3, r3, #4
 8014e68:	f003 0307 	and.w	r3, r3, #7
 8014e6c:	1c5a      	adds	r2, r3, #1
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	685b      	ldr	r3, [r3, #4]
       ||
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d047      	beq.n	8014f06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8014e76:	2301      	movs	r3, #1
 8014e78:	73fb      	strb	r3, [r7, #15]
 8014e7a:	e044      	b.n	8014f06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	2b03      	cmp	r3, #3
 8014e82:	d018      	beq.n	8014eb6 <RCCEx_PLLSAI1_Config+0x86>
 8014e84:	2b03      	cmp	r3, #3
 8014e86:	d825      	bhi.n	8014ed4 <RCCEx_PLLSAI1_Config+0xa4>
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	d002      	beq.n	8014e92 <RCCEx_PLLSAI1_Config+0x62>
 8014e8c:	2b02      	cmp	r3, #2
 8014e8e:	d009      	beq.n	8014ea4 <RCCEx_PLLSAI1_Config+0x74>
 8014e90:	e020      	b.n	8014ed4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8014e92:	4b60      	ldr	r3, [pc, #384]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	f003 0302 	and.w	r3, r3, #2
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d11d      	bne.n	8014eda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014ea2:	e01a      	b.n	8014eda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8014ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d116      	bne.n	8014ede <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014eb4:	e013      	b.n	8014ede <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8014eb6:	4b57      	ldr	r3, [pc, #348]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d10f      	bne.n	8014ee2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8014ec2:	4b54      	ldr	r3, [pc, #336]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d109      	bne.n	8014ee2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8014ece:	2301      	movs	r3, #1
 8014ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014ed2:	e006      	b.n	8014ee2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8014ed8:	e004      	b.n	8014ee4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8014eda:	bf00      	nop
 8014edc:	e002      	b.n	8014ee4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8014ede:	bf00      	nop
 8014ee0:	e000      	b.n	8014ee4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8014ee2:	bf00      	nop
    }

    if(status == HAL_OK)
 8014ee4:	7bfb      	ldrb	r3, [r7, #15]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d10d      	bne.n	8014f06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8014eea:	4b4a      	ldr	r3, [pc, #296]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	6819      	ldr	r1, [r3, #0]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	3b01      	subs	r3, #1
 8014efc:	011b      	lsls	r3, r3, #4
 8014efe:	430b      	orrs	r3, r1
 8014f00:	4944      	ldr	r1, [pc, #272]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f02:	4313      	orrs	r3, r2
 8014f04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8014f06:	7bfb      	ldrb	r3, [r7, #15]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d17d      	bne.n	8015008 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8014f0c:	4b41      	ldr	r3, [pc, #260]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	4a40      	ldr	r2, [pc, #256]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014f18:	f7fe fada 	bl	80134d0 <HAL_GetTick>
 8014f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8014f1e:	e009      	b.n	8014f34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014f20:	f7fe fad6 	bl	80134d0 <HAL_GetTick>
 8014f24:	4602      	mov	r2, r0
 8014f26:	68bb      	ldr	r3, [r7, #8]
 8014f28:	1ad3      	subs	r3, r2, r3
 8014f2a:	2b02      	cmp	r3, #2
 8014f2c:	d902      	bls.n	8014f34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8014f2e:	2303      	movs	r3, #3
 8014f30:	73fb      	strb	r3, [r7, #15]
        break;
 8014f32:	e005      	b.n	8014f40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8014f34:	4b37      	ldr	r3, [pc, #220]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d1ef      	bne.n	8014f20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8014f40:	7bfb      	ldrb	r3, [r7, #15]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d160      	bne.n	8015008 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d111      	bne.n	8014f70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014f4c:	4b31      	ldr	r3, [pc, #196]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f4e:	691b      	ldr	r3, [r3, #16]
 8014f50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8014f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014f58:	687a      	ldr	r2, [r7, #4]
 8014f5a:	6892      	ldr	r2, [r2, #8]
 8014f5c:	0211      	lsls	r1, r2, #8
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	68d2      	ldr	r2, [r2, #12]
 8014f62:	0912      	lsrs	r2, r2, #4
 8014f64:	0452      	lsls	r2, r2, #17
 8014f66:	430a      	orrs	r2, r1
 8014f68:	492a      	ldr	r1, [pc, #168]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f6a:	4313      	orrs	r3, r2
 8014f6c:	610b      	str	r3, [r1, #16]
 8014f6e:	e027      	b.n	8014fc0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d112      	bne.n	8014f9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014f76:	4b27      	ldr	r3, [pc, #156]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f78:	691b      	ldr	r3, [r3, #16]
 8014f7a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8014f7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8014f82:	687a      	ldr	r2, [r7, #4]
 8014f84:	6892      	ldr	r2, [r2, #8]
 8014f86:	0211      	lsls	r1, r2, #8
 8014f88:	687a      	ldr	r2, [r7, #4]
 8014f8a:	6912      	ldr	r2, [r2, #16]
 8014f8c:	0852      	lsrs	r2, r2, #1
 8014f8e:	3a01      	subs	r2, #1
 8014f90:	0552      	lsls	r2, r2, #21
 8014f92:	430a      	orrs	r2, r1
 8014f94:	491f      	ldr	r1, [pc, #124]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f96:	4313      	orrs	r3, r2
 8014f98:	610b      	str	r3, [r1, #16]
 8014f9a:	e011      	b.n	8014fc0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014f9e:	691b      	ldr	r3, [r3, #16]
 8014fa0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8014fa4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	6892      	ldr	r2, [r2, #8]
 8014fac:	0211      	lsls	r1, r2, #8
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	6952      	ldr	r2, [r2, #20]
 8014fb2:	0852      	lsrs	r2, r2, #1
 8014fb4:	3a01      	subs	r2, #1
 8014fb6:	0652      	lsls	r2, r2, #25
 8014fb8:	430a      	orrs	r2, r1
 8014fba:	4916      	ldr	r1, [pc, #88]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014fbc:	4313      	orrs	r3, r2
 8014fbe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8014fc0:	4b14      	ldr	r3, [pc, #80]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	4a13      	ldr	r2, [pc, #76]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014fc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014fca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014fcc:	f7fe fa80 	bl	80134d0 <HAL_GetTick>
 8014fd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8014fd2:	e009      	b.n	8014fe8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014fd4:	f7fe fa7c 	bl	80134d0 <HAL_GetTick>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	1ad3      	subs	r3, r2, r3
 8014fde:	2b02      	cmp	r3, #2
 8014fe0:	d902      	bls.n	8014fe8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8014fe2:	2303      	movs	r3, #3
 8014fe4:	73fb      	strb	r3, [r7, #15]
          break;
 8014fe6:	e005      	b.n	8014ff4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8014fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d0ef      	beq.n	8014fd4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8014ff4:	7bfb      	ldrb	r3, [r7, #15]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d106      	bne.n	8015008 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8014ffa:	4b06      	ldr	r3, [pc, #24]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014ffc:	691a      	ldr	r2, [r3, #16]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	699b      	ldr	r3, [r3, #24]
 8015002:	4904      	ldr	r1, [pc, #16]	@ (8015014 <RCCEx_PLLSAI1_Config+0x1e4>)
 8015004:	4313      	orrs	r3, r2
 8015006:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8015008:	7bfb      	ldrb	r3, [r7, #15]
}
 801500a:	4618      	mov	r0, r3
 801500c:	3710      	adds	r7, #16
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	40021000 	.word	0x40021000

08015018 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b084      	sub	sp, #16
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015022:	2300      	movs	r3, #0
 8015024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8015026:	4b6a      	ldr	r3, [pc, #424]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015028:	68db      	ldr	r3, [r3, #12]
 801502a:	f003 0303 	and.w	r3, r3, #3
 801502e:	2b00      	cmp	r3, #0
 8015030:	d018      	beq.n	8015064 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8015032:	4b67      	ldr	r3, [pc, #412]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015034:	68db      	ldr	r3, [r3, #12]
 8015036:	f003 0203 	and.w	r2, r3, #3
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	429a      	cmp	r2, r3
 8015040:	d10d      	bne.n	801505e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
       ||
 8015046:	2b00      	cmp	r3, #0
 8015048:	d009      	beq.n	801505e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 801504a:	4b61      	ldr	r3, [pc, #388]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	091b      	lsrs	r3, r3, #4
 8015050:	f003 0307 	and.w	r3, r3, #7
 8015054:	1c5a      	adds	r2, r3, #1
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	685b      	ldr	r3, [r3, #4]
       ||
 801505a:	429a      	cmp	r2, r3
 801505c:	d047      	beq.n	80150ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801505e:	2301      	movs	r3, #1
 8015060:	73fb      	strb	r3, [r7, #15]
 8015062:	e044      	b.n	80150ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	2b03      	cmp	r3, #3
 801506a:	d018      	beq.n	801509e <RCCEx_PLLSAI2_Config+0x86>
 801506c:	2b03      	cmp	r3, #3
 801506e:	d825      	bhi.n	80150bc <RCCEx_PLLSAI2_Config+0xa4>
 8015070:	2b01      	cmp	r3, #1
 8015072:	d002      	beq.n	801507a <RCCEx_PLLSAI2_Config+0x62>
 8015074:	2b02      	cmp	r3, #2
 8015076:	d009      	beq.n	801508c <RCCEx_PLLSAI2_Config+0x74>
 8015078:	e020      	b.n	80150bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801507a:	4b55      	ldr	r3, [pc, #340]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	f003 0302 	and.w	r3, r3, #2
 8015082:	2b00      	cmp	r3, #0
 8015084:	d11d      	bne.n	80150c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8015086:	2301      	movs	r3, #1
 8015088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801508a:	e01a      	b.n	80150c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801508c:	4b50      	ldr	r3, [pc, #320]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015094:	2b00      	cmp	r3, #0
 8015096:	d116      	bne.n	80150c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8015098:	2301      	movs	r3, #1
 801509a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801509c:	e013      	b.n	80150c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801509e:	4b4c      	ldr	r3, [pc, #304]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d10f      	bne.n	80150ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80150aa:	4b49      	ldr	r3, [pc, #292]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d109      	bne.n	80150ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80150b6:	2301      	movs	r3, #1
 80150b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80150ba:	e006      	b.n	80150ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80150bc:	2301      	movs	r3, #1
 80150be:	73fb      	strb	r3, [r7, #15]
      break;
 80150c0:	e004      	b.n	80150cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80150c2:	bf00      	nop
 80150c4:	e002      	b.n	80150cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80150c6:	bf00      	nop
 80150c8:	e000      	b.n	80150cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80150ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80150cc:	7bfb      	ldrb	r3, [r7, #15]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d10d      	bne.n	80150ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80150d2:	4b3f      	ldr	r3, [pc, #252]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6819      	ldr	r1, [r3, #0]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	3b01      	subs	r3, #1
 80150e4:	011b      	lsls	r3, r3, #4
 80150e6:	430b      	orrs	r3, r1
 80150e8:	4939      	ldr	r1, [pc, #228]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80150ea:	4313      	orrs	r3, r2
 80150ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80150ee:	7bfb      	ldrb	r3, [r7, #15]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d167      	bne.n	80151c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80150f4:	4b36      	ldr	r3, [pc, #216]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4a35      	ldr	r2, [pc, #212]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80150fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80150fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015100:	f7fe f9e6 	bl	80134d0 <HAL_GetTick>
 8015104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8015106:	e009      	b.n	801511c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8015108:	f7fe f9e2 	bl	80134d0 <HAL_GetTick>
 801510c:	4602      	mov	r2, r0
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	1ad3      	subs	r3, r2, r3
 8015112:	2b02      	cmp	r3, #2
 8015114:	d902      	bls.n	801511c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8015116:	2303      	movs	r3, #3
 8015118:	73fb      	strb	r3, [r7, #15]
        break;
 801511a:	e005      	b.n	8015128 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801511c:	4b2c      	ldr	r3, [pc, #176]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015124:	2b00      	cmp	r3, #0
 8015126:	d1ef      	bne.n	8015108 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8015128:	7bfb      	ldrb	r3, [r7, #15]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d14a      	bne.n	80151c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d111      	bne.n	8015158 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8015134:	4b26      	ldr	r3, [pc, #152]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015136:	695b      	ldr	r3, [r3, #20]
 8015138:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 801513c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	6892      	ldr	r2, [r2, #8]
 8015144:	0211      	lsls	r1, r2, #8
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	68d2      	ldr	r2, [r2, #12]
 801514a:	0912      	lsrs	r2, r2, #4
 801514c:	0452      	lsls	r2, r2, #17
 801514e:	430a      	orrs	r2, r1
 8015150:	491f      	ldr	r1, [pc, #124]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015152:	4313      	orrs	r3, r2
 8015154:	614b      	str	r3, [r1, #20]
 8015156:	e011      	b.n	801517c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8015158:	4b1d      	ldr	r3, [pc, #116]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801515a:	695b      	ldr	r3, [r3, #20]
 801515c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8015160:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8015164:	687a      	ldr	r2, [r7, #4]
 8015166:	6892      	ldr	r2, [r2, #8]
 8015168:	0211      	lsls	r1, r2, #8
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	6912      	ldr	r2, [r2, #16]
 801516e:	0852      	lsrs	r2, r2, #1
 8015170:	3a01      	subs	r2, #1
 8015172:	0652      	lsls	r2, r2, #25
 8015174:	430a      	orrs	r2, r1
 8015176:	4916      	ldr	r1, [pc, #88]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015178:	4313      	orrs	r3, r2
 801517a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801517c:	4b14      	ldr	r3, [pc, #80]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	4a13      	ldr	r2, [pc, #76]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8015182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015186:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015188:	f7fe f9a2 	bl	80134d0 <HAL_GetTick>
 801518c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801518e:	e009      	b.n	80151a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8015190:	f7fe f99e 	bl	80134d0 <HAL_GetTick>
 8015194:	4602      	mov	r2, r0
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	1ad3      	subs	r3, r2, r3
 801519a:	2b02      	cmp	r3, #2
 801519c:	d902      	bls.n	80151a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 801519e:	2303      	movs	r3, #3
 80151a0:	73fb      	strb	r3, [r7, #15]
          break;
 80151a2:	e005      	b.n	80151b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80151a4:	4b0a      	ldr	r3, [pc, #40]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d0ef      	beq.n	8015190 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80151b0:	7bfb      	ldrb	r3, [r7, #15]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d106      	bne.n	80151c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80151b6:	4b06      	ldr	r3, [pc, #24]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80151b8:	695a      	ldr	r2, [r3, #20]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	695b      	ldr	r3, [r3, #20]
 80151be:	4904      	ldr	r1, [pc, #16]	@ (80151d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80151c0:	4313      	orrs	r3, r2
 80151c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80151c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	3710      	adds	r7, #16
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	bf00      	nop
 80151d0:	40021000 	.word	0x40021000

080151d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80151dc:	2301      	movs	r3, #1
 80151de:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d079      	beq.n	80152da <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80151ec:	b2db      	uxtb	r3, r3
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d106      	bne.n	8015200 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2200      	movs	r2, #0
 80151f6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	f7ef f80c 	bl	8004218 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2202      	movs	r2, #2
 8015204:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	f003 0310 	and.w	r3, r3, #16
 8015212:	2b10      	cmp	r3, #16
 8015214:	d058      	beq.n	80152c8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	22ca      	movs	r2, #202	@ 0xca
 801521c:	625a      	str	r2, [r3, #36]	@ 0x24
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2253      	movs	r2, #83	@ 0x53
 8015224:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f000 fb7a 	bl	8015920 <RTC_EnterInitMode>
 801522c:	4603      	mov	r3, r0
 801522e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8015230:	7bfb      	ldrb	r3, [r7, #15]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d127      	bne.n	8015286 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	689b      	ldr	r3, [r3, #8]
 801523c:	687a      	ldr	r2, [r7, #4]
 801523e:	6812      	ldr	r2, [r2, #0]
 8015240:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015248:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	6899      	ldr	r1, [r3, #8]
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	685a      	ldr	r2, [r3, #4]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	691b      	ldr	r3, [r3, #16]
 8015258:	431a      	orrs	r2, r3
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	699b      	ldr	r3, [r3, #24]
 801525e:	431a      	orrs	r2, r3
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	430a      	orrs	r2, r1
 8015266:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	68d2      	ldr	r2, [r2, #12]
 8015270:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	6919      	ldr	r1, [r3, #16]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	689b      	ldr	r3, [r3, #8]
 801527c:	041a      	lsls	r2, r3, #16
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	430a      	orrs	r2, r1
 8015284:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f000 fb7e 	bl	8015988 <RTC_ExitInitMode>
 801528c:	4603      	mov	r3, r0
 801528e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8015290:	7bfb      	ldrb	r3, [r7, #15]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d113      	bne.n	80152be <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	f022 0203 	bic.w	r2, r2, #3
 80152a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	69da      	ldr	r2, [r3, #28]
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	695b      	ldr	r3, [r3, #20]
 80152b4:	431a      	orrs	r2, r3
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	430a      	orrs	r2, r1
 80152bc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	22ff      	movs	r2, #255	@ 0xff
 80152c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80152c6:	e001      	b.n	80152cc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80152c8:	2300      	movs	r3, #0
 80152ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80152cc:	7bfb      	ldrb	r3, [r7, #15]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d103      	bne.n	80152da <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2201      	movs	r2, #1
 80152d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80152da:	7bfb      	ldrb	r3, [r7, #15]
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3710      	adds	r7, #16
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80152e4:	b590      	push	{r4, r7, lr}
 80152e6:	b087      	sub	sp, #28
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	60b9      	str	r1, [r7, #8]
 80152ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80152f6:	2b01      	cmp	r3, #1
 80152f8:	d101      	bne.n	80152fe <HAL_RTC_SetTime+0x1a>
 80152fa:	2302      	movs	r3, #2
 80152fc:	e08b      	b.n	8015416 <HAL_RTC_SetTime+0x132>
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2201      	movs	r2, #1
 8015302:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2202      	movs	r2, #2
 801530a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	22ca      	movs	r2, #202	@ 0xca
 8015314:	625a      	str	r2, [r3, #36]	@ 0x24
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	2253      	movs	r2, #83	@ 0x53
 801531c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	f000 fafe 	bl	8015920 <RTC_EnterInitMode>
 8015324:	4603      	mov	r3, r0
 8015326:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8015328:	7cfb      	ldrb	r3, [r7, #19]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d163      	bne.n	80153f6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d126      	bne.n	8015382 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	689b      	ldr	r3, [r3, #8]
 801533a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801533e:	2b00      	cmp	r3, #0
 8015340:	d102      	bne.n	8015348 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	2200      	movs	r2, #0
 8015346:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	4618      	mov	r0, r3
 801534e:	f000 fb59 	bl	8015a04 <RTC_ByteToBcd2>
 8015352:	4603      	mov	r3, r0
 8015354:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	785b      	ldrb	r3, [r3, #1]
 801535a:	4618      	mov	r0, r3
 801535c:	f000 fb52 	bl	8015a04 <RTC_ByteToBcd2>
 8015360:	4603      	mov	r3, r0
 8015362:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8015364:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	789b      	ldrb	r3, [r3, #2]
 801536a:	4618      	mov	r0, r3
 801536c:	f000 fb4a 	bl	8015a04 <RTC_ByteToBcd2>
 8015370:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015372:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	78db      	ldrb	r3, [r3, #3]
 801537a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801537c:	4313      	orrs	r3, r2
 801537e:	617b      	str	r3, [r7, #20]
 8015380:	e018      	b.n	80153b4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	689b      	ldr	r3, [r3, #8]
 8015388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801538c:	2b00      	cmp	r3, #0
 801538e:	d102      	bne.n	8015396 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	2200      	movs	r2, #0
 8015394:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8015396:	68bb      	ldr	r3, [r7, #8]
 8015398:	781b      	ldrb	r3, [r3, #0]
 801539a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	785b      	ldrb	r3, [r3, #1]
 80153a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80153a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80153a4:	68ba      	ldr	r2, [r7, #8]
 80153a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80153a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	78db      	ldrb	r3, [r3, #3]
 80153ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80153b0:	4313      	orrs	r3, r2
 80153b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	681a      	ldr	r2, [r3, #0]
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80153be:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80153c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	689a      	ldr	r2, [r3, #8]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80153d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	6899      	ldr	r1, [r3, #8]
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	68da      	ldr	r2, [r3, #12]
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	691b      	ldr	r3, [r3, #16]
 80153e2:	431a      	orrs	r2, r3
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	430a      	orrs	r2, r1
 80153ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80153ec:	68f8      	ldr	r0, [r7, #12]
 80153ee:	f000 facb 	bl	8015988 <RTC_ExitInitMode>
 80153f2:	4603      	mov	r3, r0
 80153f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	22ff      	movs	r2, #255	@ 0xff
 80153fc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80153fe:	7cfb      	ldrb	r3, [r7, #19]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d103      	bne.n	801540c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2201      	movs	r2, #1
 8015408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2200      	movs	r2, #0
 8015410:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8015414:	7cfb      	ldrb	r3, [r7, #19]
}
 8015416:	4618      	mov	r0, r3
 8015418:	371c      	adds	r7, #28
 801541a:	46bd      	mov	sp, r7
 801541c:	bd90      	pop	{r4, r7, pc}

0801541e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801541e:	b580      	push	{r7, lr}
 8015420:	b086      	sub	sp, #24
 8015422:	af00      	add	r7, sp, #0
 8015424:	60f8      	str	r0, [r7, #12]
 8015426:	60b9      	str	r1, [r7, #8]
 8015428:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	691b      	ldr	r3, [r3, #16]
 801543a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 801544c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8015450:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	0c1b      	lsrs	r3, r3, #16
 8015456:	b2db      	uxtb	r3, r3
 8015458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801545c:	b2da      	uxtb	r2, r3
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	0a1b      	lsrs	r3, r3, #8
 8015466:	b2db      	uxtb	r3, r3
 8015468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801546c:	b2da      	uxtb	r2, r3
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	b2db      	uxtb	r3, r3
 8015476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801547a:	b2da      	uxtb	r2, r3
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	0d9b      	lsrs	r3, r3, #22
 8015484:	b2db      	uxtb	r3, r3
 8015486:	f003 0301 	and.w	r3, r3, #1
 801548a:	b2da      	uxtb	r2, r3
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d11a      	bne.n	80154cc <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	781b      	ldrb	r3, [r3, #0]
 801549a:	4618      	mov	r0, r3
 801549c:	f000 fad2 	bl	8015a44 <RTC_Bcd2ToByte>
 80154a0:	4603      	mov	r3, r0
 80154a2:	461a      	mov	r2, r3
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	785b      	ldrb	r3, [r3, #1]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f000 fac9 	bl	8015a44 <RTC_Bcd2ToByte>
 80154b2:	4603      	mov	r3, r0
 80154b4:	461a      	mov	r2, r3
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	789b      	ldrb	r3, [r3, #2]
 80154be:	4618      	mov	r0, r3
 80154c0:	f000 fac0 	bl	8015a44 <RTC_Bcd2ToByte>
 80154c4:	4603      	mov	r3, r0
 80154c6:	461a      	mov	r2, r3
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80154cc:	2300      	movs	r3, #0
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3718      	adds	r7, #24
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80154d6:	b590      	push	{r4, r7, lr}
 80154d8:	b087      	sub	sp, #28
 80154da:	af00      	add	r7, sp, #0
 80154dc:	60f8      	str	r0, [r7, #12]
 80154de:	60b9      	str	r1, [r7, #8]
 80154e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80154e8:	2b01      	cmp	r3, #1
 80154ea:	d101      	bne.n	80154f0 <HAL_RTC_SetDate+0x1a>
 80154ec:	2302      	movs	r3, #2
 80154ee:	e075      	b.n	80155dc <HAL_RTC_SetDate+0x106>
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	2201      	movs	r2, #1
 80154f4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2202      	movs	r2, #2
 80154fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d10e      	bne.n	8015524 <HAL_RTC_SetDate+0x4e>
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	785b      	ldrb	r3, [r3, #1]
 801550a:	f003 0310 	and.w	r3, r3, #16
 801550e:	2b00      	cmp	r3, #0
 8015510:	d008      	beq.n	8015524 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	785b      	ldrb	r3, [r3, #1]
 8015516:	f023 0310 	bic.w	r3, r3, #16
 801551a:	b2db      	uxtb	r3, r3
 801551c:	330a      	adds	r3, #10
 801551e:	b2da      	uxtb	r2, r3
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d11c      	bne.n	8015564 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	78db      	ldrb	r3, [r3, #3]
 801552e:	4618      	mov	r0, r3
 8015530:	f000 fa68 	bl	8015a04 <RTC_ByteToBcd2>
 8015534:	4603      	mov	r3, r0
 8015536:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	785b      	ldrb	r3, [r3, #1]
 801553c:	4618      	mov	r0, r3
 801553e:	f000 fa61 	bl	8015a04 <RTC_ByteToBcd2>
 8015542:	4603      	mov	r3, r0
 8015544:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8015546:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	789b      	ldrb	r3, [r3, #2]
 801554c:	4618      	mov	r0, r3
 801554e:	f000 fa59 	bl	8015a04 <RTC_ByteToBcd2>
 8015552:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015554:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	781b      	ldrb	r3, [r3, #0]
 801555c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801555e:	4313      	orrs	r3, r2
 8015560:	617b      	str	r3, [r7, #20]
 8015562:	e00e      	b.n	8015582 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	78db      	ldrb	r3, [r3, #3]
 8015568:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	785b      	ldrb	r3, [r3, #1]
 801556e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8015570:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8015572:	68ba      	ldr	r2, [r7, #8]
 8015574:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8015576:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	781b      	ldrb	r3, [r3, #0]
 801557c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801557e:	4313      	orrs	r3, r2
 8015580:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	22ca      	movs	r2, #202	@ 0xca
 8015588:	625a      	str	r2, [r3, #36]	@ 0x24
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2253      	movs	r2, #83	@ 0x53
 8015590:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015592:	68f8      	ldr	r0, [r7, #12]
 8015594:	f000 f9c4 	bl	8015920 <RTC_EnterInitMode>
 8015598:	4603      	mov	r3, r0
 801559a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801559c:	7cfb      	ldrb	r3, [r7, #19]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d10c      	bne.n	80155bc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	681a      	ldr	r2, [r3, #0]
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80155ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80155b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80155b2:	68f8      	ldr	r0, [r7, #12]
 80155b4:	f000 f9e8 	bl	8015988 <RTC_ExitInitMode>
 80155b8:	4603      	mov	r3, r0
 80155ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	22ff      	movs	r2, #255	@ 0xff
 80155c2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80155c4:	7cfb      	ldrb	r3, [r7, #19]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d103      	bne.n	80155d2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	2201      	movs	r2, #1
 80155ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	2200      	movs	r2, #0
 80155d6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80155da:	7cfb      	ldrb	r3, [r7, #19]
}
 80155dc:	4618      	mov	r0, r3
 80155de:	371c      	adds	r7, #28
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd90      	pop	{r4, r7, pc}

080155e4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b086      	sub	sp, #24
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80155fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80155fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	0c1b      	lsrs	r3, r3, #16
 8015604:	b2da      	uxtb	r2, r3
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	0a1b      	lsrs	r3, r3, #8
 801560e:	b2db      	uxtb	r3, r3
 8015610:	f003 031f 	and.w	r3, r3, #31
 8015614:	b2da      	uxtb	r2, r3
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	b2db      	uxtb	r3, r3
 801561e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015622:	b2da      	uxtb	r2, r3
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	0b5b      	lsrs	r3, r3, #13
 801562c:	b2db      	uxtb	r3, r3
 801562e:	f003 0307 	and.w	r3, r3, #7
 8015632:	b2da      	uxtb	r2, r3
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d11a      	bne.n	8015674 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	78db      	ldrb	r3, [r3, #3]
 8015642:	4618      	mov	r0, r3
 8015644:	f000 f9fe 	bl	8015a44 <RTC_Bcd2ToByte>
 8015648:	4603      	mov	r3, r0
 801564a:	461a      	mov	r2, r3
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	785b      	ldrb	r3, [r3, #1]
 8015654:	4618      	mov	r0, r3
 8015656:	f000 f9f5 	bl	8015a44 <RTC_Bcd2ToByte>
 801565a:	4603      	mov	r3, r0
 801565c:	461a      	mov	r2, r3
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	789b      	ldrb	r3, [r3, #2]
 8015666:	4618      	mov	r0, r3
 8015668:	f000 f9ec 	bl	8015a44 <RTC_Bcd2ToByte>
 801566c:	4603      	mov	r3, r0
 801566e:	461a      	mov	r2, r3
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8015674:	2300      	movs	r3, #0
}
 8015676:	4618      	mov	r0, r3
 8015678:	3718      	adds	r7, #24
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}

0801567e <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 801567e:	b590      	push	{r4, r7, lr}
 8015680:	b089      	sub	sp, #36	@ 0x24
 8015682:	af00      	add	r7, sp, #0
 8015684:	60f8      	str	r0, [r7, #12]
 8015686:	60b9      	str	r1, [r7, #8]
 8015688:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015690:	2b01      	cmp	r3, #1
 8015692:	d101      	bne.n	8015698 <HAL_RTC_SetAlarm+0x1a>
 8015694:	2302      	movs	r3, #2
 8015696:	e11b      	b.n	80158d0 <HAL_RTC_SetAlarm+0x252>
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2201      	movs	r2, #1
 801569c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2202      	movs	r2, #2
 80156a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d137      	bne.n	801571e <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	689b      	ldr	r3, [r3, #8]
 80156b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d102      	bne.n	80156c2 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	2200      	movs	r2, #0
 80156c0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	4618      	mov	r0, r3
 80156c8:	f000 f99c 	bl	8015a04 <RTC_ByteToBcd2>
 80156cc:	4603      	mov	r3, r0
 80156ce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	785b      	ldrb	r3, [r3, #1]
 80156d4:	4618      	mov	r0, r3
 80156d6:	f000 f995 	bl	8015a04 <RTC_ByteToBcd2>
 80156da:	4603      	mov	r3, r0
 80156dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80156de:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	789b      	ldrb	r3, [r3, #2]
 80156e4:	4618      	mov	r0, r3
 80156e6:	f000 f98d 	bl	8015a04 <RTC_ByteToBcd2>
 80156ea:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80156ec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	78db      	ldrb	r3, [r3, #3]
 80156f4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80156f6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8015700:	4618      	mov	r0, r3
 8015702:	f000 f97f 	bl	8015a04 <RTC_ByteToBcd2>
 8015706:	4603      	mov	r3, r0
 8015708:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 801570a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8015712:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015718:	4313      	orrs	r3, r2
 801571a:	61fb      	str	r3, [r7, #28]
 801571c:	e023      	b.n	8015766 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	689b      	ldr	r3, [r3, #8]
 8015724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015728:	2b00      	cmp	r3, #0
 801572a:	d102      	bne.n	8015732 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	2200      	movs	r2, #0
 8015730:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	785b      	ldrb	r3, [r3, #1]
 801573c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801573e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8015740:	68ba      	ldr	r2, [r7, #8]
 8015742:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8015744:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	78db      	ldrb	r3, [r3, #3]
 801574a:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801574c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8015754:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8015756:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801575c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8015762:	4313      	orrs	r3, r2
 8015764:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	685a      	ldr	r2, [r3, #4]
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	69db      	ldr	r3, [r3, #28]
 801576e:	4313      	orrs	r3, r2
 8015770:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	22ca      	movs	r2, #202	@ 0xca
 8015778:	625a      	str	r2, [r3, #36]	@ 0x24
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	2253      	movs	r2, #83	@ 0x53
 8015780:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801578a:	d14a      	bne.n	8015822 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	689a      	ldr	r2, [r3, #8]
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801579a:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	68db      	ldr	r3, [r3, #12]
 80157a2:	b2da      	uxtb	r2, r3
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80157ac:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	689a      	ldr	r2, [r3, #8]
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80157bc:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80157be:	f7fd fe87 	bl	80134d0 <HAL_GetTick>
 80157c2:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80157c4:	e015      	b.n	80157f2 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80157c6:	f7fd fe83 	bl	80134d0 <HAL_GetTick>
 80157ca:	4602      	mov	r2, r0
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	1ad3      	subs	r3, r2, r3
 80157d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80157d4:	d90d      	bls.n	80157f2 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	22ff      	movs	r2, #255	@ 0xff
 80157dc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	2203      	movs	r2, #3
 80157e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2200      	movs	r2, #0
 80157ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80157ee:	2303      	movs	r3, #3
 80157f0:	e06e      	b.n	80158d0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	68db      	ldr	r3, [r3, #12]
 80157f8:	f003 0301 	and.w	r3, r3, #1
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d0e2      	beq.n	80157c6 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	69fa      	ldr	r2, [r7, #28]
 8015806:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	69ba      	ldr	r2, [r7, #24]
 801580e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	689a      	ldr	r2, [r3, #8]
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801581e:	609a      	str	r2, [r3, #8]
 8015820:	e049      	b.n	80158b6 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	689a      	ldr	r2, [r3, #8]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8015830:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	b2da      	uxtb	r2, r3
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8015842:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	689a      	ldr	r2, [r3, #8]
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8015852:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8015854:	f7fd fe3c 	bl	80134d0 <HAL_GetTick>
 8015858:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 801585a:	e015      	b.n	8015888 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801585c:	f7fd fe38 	bl	80134d0 <HAL_GetTick>
 8015860:	4602      	mov	r2, r0
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801586a:	d90d      	bls.n	8015888 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	22ff      	movs	r2, #255	@ 0xff
 8015872:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	2203      	movs	r2, #3
 8015878:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	2200      	movs	r2, #0
 8015880:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8015884:	2303      	movs	r3, #3
 8015886:	e023      	b.n	80158d0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	f003 0302 	and.w	r3, r3, #2
 8015892:	2b00      	cmp	r3, #0
 8015894:	d0e2      	beq.n	801585c <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	69fa      	ldr	r2, [r7, #28]
 801589c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	69ba      	ldr	r2, [r7, #24]
 80158a4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	689a      	ldr	r2, [r3, #8]
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80158b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	22ff      	movs	r2, #255	@ 0xff
 80158bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	2201      	movs	r2, #1
 80158c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	2200      	movs	r2, #0
 80158ca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80158ce:	2300      	movs	r3, #0
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3724      	adds	r7, #36	@ 0x24
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd90      	pop	{r4, r7, pc}

080158d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	4a0d      	ldr	r2, [pc, #52]	@ (801591c <HAL_RTC_WaitForSynchro+0x44>)
 80158e6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80158e8:	f7fd fdf2 	bl	80134d0 <HAL_GetTick>
 80158ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80158ee:	e009      	b.n	8015904 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80158f0:	f7fd fdee 	bl	80134d0 <HAL_GetTick>
 80158f4:	4602      	mov	r2, r0
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	1ad3      	subs	r3, r2, r3
 80158fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80158fe:	d901      	bls.n	8015904 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8015900:	2303      	movs	r3, #3
 8015902:	e007      	b.n	8015914 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	f003 0320 	and.w	r3, r3, #32
 801590e:	2b00      	cmp	r3, #0
 8015910:	d0ee      	beq.n	80158f0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8015912:	2300      	movs	r3, #0
}
 8015914:	4618      	mov	r0, r3
 8015916:	3710      	adds	r7, #16
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}
 801591c:	0003ff5f 	.word	0x0003ff5f

08015920 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b084      	sub	sp, #16
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015928:	2300      	movs	r3, #0
 801592a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	68db      	ldr	r3, [r3, #12]
 8015932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015936:	2b00      	cmp	r3, #0
 8015938:	d120      	bne.n	801597c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f04f 32ff 	mov.w	r2, #4294967295
 8015942:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8015944:	f7fd fdc4 	bl	80134d0 <HAL_GetTick>
 8015948:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801594a:	e00d      	b.n	8015968 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801594c:	f7fd fdc0 	bl	80134d0 <HAL_GetTick>
 8015950:	4602      	mov	r2, r0
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	1ad3      	subs	r3, r2, r3
 8015956:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801595a:	d905      	bls.n	8015968 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 801595c:	2303      	movs	r3, #3
 801595e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2203      	movs	r2, #3
 8015964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	68db      	ldr	r3, [r3, #12]
 801596e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015972:	2b00      	cmp	r3, #0
 8015974:	d102      	bne.n	801597c <RTC_EnterInitMode+0x5c>
 8015976:	7bfb      	ldrb	r3, [r7, #15]
 8015978:	2b03      	cmp	r3, #3
 801597a:	d1e7      	bne.n	801594c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 801597c:	7bfb      	ldrb	r3, [r7, #15]
}
 801597e:	4618      	mov	r0, r3
 8015980:	3710      	adds	r7, #16
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}
	...

08015988 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b084      	sub	sp, #16
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015990:	2300      	movs	r3, #0
 8015992:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8015994:	4b1a      	ldr	r3, [pc, #104]	@ (8015a00 <RTC_ExitInitMode+0x78>)
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	4a19      	ldr	r2, [pc, #100]	@ (8015a00 <RTC_ExitInitMode+0x78>)
 801599a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801599e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80159a0:	4b17      	ldr	r3, [pc, #92]	@ (8015a00 <RTC_ExitInitMode+0x78>)
 80159a2:	689b      	ldr	r3, [r3, #8]
 80159a4:	f003 0320 	and.w	r3, r3, #32
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d10c      	bne.n	80159c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f7ff ff93 	bl	80158d8 <HAL_RTC_WaitForSynchro>
 80159b2:	4603      	mov	r3, r0
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d01e      	beq.n	80159f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2203      	movs	r2, #3
 80159bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80159c0:	2303      	movs	r3, #3
 80159c2:	73fb      	strb	r3, [r7, #15]
 80159c4:	e017      	b.n	80159f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80159c6:	4b0e      	ldr	r3, [pc, #56]	@ (8015a00 <RTC_ExitInitMode+0x78>)
 80159c8:	689b      	ldr	r3, [r3, #8]
 80159ca:	4a0d      	ldr	r2, [pc, #52]	@ (8015a00 <RTC_ExitInitMode+0x78>)
 80159cc:	f023 0320 	bic.w	r3, r3, #32
 80159d0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f7ff ff80 	bl	80158d8 <HAL_RTC_WaitForSynchro>
 80159d8:	4603      	mov	r3, r0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d005      	beq.n	80159ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2203      	movs	r2, #3
 80159e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80159e6:	2303      	movs	r3, #3
 80159e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80159ea:	4b05      	ldr	r3, [pc, #20]	@ (8015a00 <RTC_ExitInitMode+0x78>)
 80159ec:	689b      	ldr	r3, [r3, #8]
 80159ee:	4a04      	ldr	r2, [pc, #16]	@ (8015a00 <RTC_ExitInitMode+0x78>)
 80159f0:	f043 0320 	orr.w	r3, r3, #32
 80159f4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80159f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3710      	adds	r7, #16
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	40002800 	.word	0x40002800

08015a04 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8015a04:	b480      	push	{r7}
 8015a06:	b085      	sub	sp, #20
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8015a0e:	2300      	movs	r3, #0
 8015a10:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8015a12:	79fb      	ldrb	r3, [r7, #7]
 8015a14:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8015a16:	e005      	b.n	8015a24 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8015a1e:	7afb      	ldrb	r3, [r7, #11]
 8015a20:	3b0a      	subs	r3, #10
 8015a22:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8015a24:	7afb      	ldrb	r3, [r7, #11]
 8015a26:	2b09      	cmp	r3, #9
 8015a28:	d8f6      	bhi.n	8015a18 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	b2db      	uxtb	r3, r3
 8015a2e:	011b      	lsls	r3, r3, #4
 8015a30:	b2da      	uxtb	r2, r3
 8015a32:	7afb      	ldrb	r3, [r7, #11]
 8015a34:	4313      	orrs	r3, r2
 8015a36:	b2db      	uxtb	r3, r3
}
 8015a38:	4618      	mov	r0, r3
 8015a3a:	3714      	adds	r7, #20
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr

08015a44 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8015a44:	b480      	push	{r7}
 8015a46:	b085      	sub	sp, #20
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8015a4e:	79fb      	ldrb	r3, [r7, #7]
 8015a50:	091b      	lsrs	r3, r3, #4
 8015a52:	b2db      	uxtb	r3, r3
 8015a54:	461a      	mov	r2, r3
 8015a56:	0092      	lsls	r2, r2, #2
 8015a58:	4413      	add	r3, r2
 8015a5a:	005b      	lsls	r3, r3, #1
 8015a5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8015a5e:	79fb      	ldrb	r3, [r7, #7]
 8015a60:	f003 030f 	and.w	r3, r3, #15
 8015a64:	b2da      	uxtb	r2, r3
 8015a66:	7bfb      	ldrb	r3, [r7, #15]
 8015a68:	4413      	add	r3, r2
 8015a6a:	b2db      	uxtb	r3, r3
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3714      	adds	r7, #20
 8015a70:	46bd      	mov	sp, r7
 8015a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a76:	4770      	bx	lr

08015a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d101      	bne.n	8015a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015a86:	2301      	movs	r3, #1
 8015a88:	e049      	b.n	8015b1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d106      	bne.n	8015aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015a9e:	6878      	ldr	r0, [r7, #4]
 8015aa0:	f000 f841 	bl	8015b26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2202      	movs	r2, #2
 8015aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681a      	ldr	r2, [r3, #0]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	3304      	adds	r3, #4
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	4610      	mov	r0, r2
 8015ab8:	f000 f9e0 	bl	8015e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2201      	movs	r2, #1
 8015ac0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	2201      	movs	r2, #1
 8015ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2201      	movs	r2, #1
 8015ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	2201      	movs	r2, #1
 8015ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2201      	movs	r2, #1
 8015af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2201      	movs	r2, #1
 8015af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	2201      	movs	r2, #1
 8015b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2201      	movs	r2, #1
 8015b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2201      	movs	r2, #1
 8015b10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2201      	movs	r2, #1
 8015b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015b1c:	2300      	movs	r3, #0
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3708      	adds	r7, #8
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}

08015b26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8015b26:	b480      	push	{r7}
 8015b28:	b083      	sub	sp, #12
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8015b2e:	bf00      	nop
 8015b30:	370c      	adds	r7, #12
 8015b32:	46bd      	mov	sp, r7
 8015b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b38:	4770      	bx	lr
	...

08015b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b085      	sub	sp, #20
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015b4a:	b2db      	uxtb	r3, r3
 8015b4c:	2b01      	cmp	r3, #1
 8015b4e:	d001      	beq.n	8015b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015b50:	2301      	movs	r3, #1
 8015b52:	e04f      	b.n	8015bf4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	2202      	movs	r2, #2
 8015b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	68da      	ldr	r2, [r3, #12]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	f042 0201 	orr.w	r2, r2, #1
 8015b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	4a23      	ldr	r2, [pc, #140]	@ (8015c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8015b72:	4293      	cmp	r3, r2
 8015b74:	d01d      	beq.n	8015bb2 <HAL_TIM_Base_Start_IT+0x76>
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b7e:	d018      	beq.n	8015bb2 <HAL_TIM_Base_Start_IT+0x76>
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	4a1f      	ldr	r2, [pc, #124]	@ (8015c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8015b86:	4293      	cmp	r3, r2
 8015b88:	d013      	beq.n	8015bb2 <HAL_TIM_Base_Start_IT+0x76>
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8015c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8015b90:	4293      	cmp	r3, r2
 8015b92:	d00e      	beq.n	8015bb2 <HAL_TIM_Base_Start_IT+0x76>
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	4a1c      	ldr	r2, [pc, #112]	@ (8015c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8015b9a:	4293      	cmp	r3, r2
 8015b9c:	d009      	beq.n	8015bb2 <HAL_TIM_Base_Start_IT+0x76>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8015c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8015ba4:	4293      	cmp	r3, r2
 8015ba6:	d004      	beq.n	8015bb2 <HAL_TIM_Base_Start_IT+0x76>
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4a19      	ldr	r2, [pc, #100]	@ (8015c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8015bae:	4293      	cmp	r3, r2
 8015bb0:	d115      	bne.n	8015bde <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	689a      	ldr	r2, [r3, #8]
 8015bb8:	4b17      	ldr	r3, [pc, #92]	@ (8015c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8015bba:	4013      	ands	r3, r2
 8015bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	2b06      	cmp	r3, #6
 8015bc2:	d015      	beq.n	8015bf0 <HAL_TIM_Base_Start_IT+0xb4>
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015bca:	d011      	beq.n	8015bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	f042 0201 	orr.w	r2, r2, #1
 8015bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015bdc:	e008      	b.n	8015bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	681a      	ldr	r2, [r3, #0]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	f042 0201 	orr.w	r2, r2, #1
 8015bec:	601a      	str	r2, [r3, #0]
 8015bee:	e000      	b.n	8015bf2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015bf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015bf2:	2300      	movs	r3, #0
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3714      	adds	r7, #20
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr
 8015c00:	40012c00 	.word	0x40012c00
 8015c04:	40000400 	.word	0x40000400
 8015c08:	40000800 	.word	0x40000800
 8015c0c:	40000c00 	.word	0x40000c00
 8015c10:	40013400 	.word	0x40013400
 8015c14:	40014000 	.word	0x40014000
 8015c18:	00010007 	.word	0x00010007

08015c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b084      	sub	sp, #16
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	68db      	ldr	r3, [r3, #12]
 8015c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	691b      	ldr	r3, [r3, #16]
 8015c32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	f003 0302 	and.w	r3, r3, #2
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d020      	beq.n	8015c80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	f003 0302 	and.w	r3, r3, #2
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d01b      	beq.n	8015c80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	f06f 0202 	mvn.w	r2, #2
 8015c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2201      	movs	r2, #1
 8015c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	699b      	ldr	r3, [r3, #24]
 8015c5e:	f003 0303 	and.w	r3, r3, #3
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d003      	beq.n	8015c6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f000 f8e9 	bl	8015e3e <HAL_TIM_IC_CaptureCallback>
 8015c6c:	e005      	b.n	8015c7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f000 f8db 	bl	8015e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f000 f8ec 	bl	8015e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	f003 0304 	and.w	r3, r3, #4
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d020      	beq.n	8015ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	f003 0304 	and.w	r3, r3, #4
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d01b      	beq.n	8015ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	f06f 0204 	mvn.w	r2, #4
 8015c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2202      	movs	r2, #2
 8015ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	699b      	ldr	r3, [r3, #24]
 8015caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d003      	beq.n	8015cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f000 f8c3 	bl	8015e3e <HAL_TIM_IC_CaptureCallback>
 8015cb8:	e005      	b.n	8015cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f000 f8b5 	bl	8015e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	f000 f8c6 	bl	8015e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2200      	movs	r2, #0
 8015cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8015ccc:	68bb      	ldr	r3, [r7, #8]
 8015cce:	f003 0308 	and.w	r3, r3, #8
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d020      	beq.n	8015d18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	f003 0308 	and.w	r3, r3, #8
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d01b      	beq.n	8015d18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f06f 0208 	mvn.w	r2, #8
 8015ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2204      	movs	r2, #4
 8015cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	69db      	ldr	r3, [r3, #28]
 8015cf6:	f003 0303 	and.w	r3, r3, #3
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d003      	beq.n	8015d06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f000 f89d 	bl	8015e3e <HAL_TIM_IC_CaptureCallback>
 8015d04:	e005      	b.n	8015d12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f000 f88f 	bl	8015e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f000 f8a0 	bl	8015e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2200      	movs	r2, #0
 8015d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8015d18:	68bb      	ldr	r3, [r7, #8]
 8015d1a:	f003 0310 	and.w	r3, r3, #16
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d020      	beq.n	8015d64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	f003 0310 	and.w	r3, r3, #16
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d01b      	beq.n	8015d64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	f06f 0210 	mvn.w	r2, #16
 8015d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2208      	movs	r2, #8
 8015d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	69db      	ldr	r3, [r3, #28]
 8015d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d003      	beq.n	8015d52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f000 f877 	bl	8015e3e <HAL_TIM_IC_CaptureCallback>
 8015d50:	e005      	b.n	8015d5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	f000 f869 	bl	8015e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f000 f87a 	bl	8015e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2200      	movs	r2, #0
 8015d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	f003 0301 	and.w	r3, r3, #1
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d00c      	beq.n	8015d88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	f003 0301 	and.w	r3, r3, #1
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d007      	beq.n	8015d88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f06f 0201 	mvn.w	r2, #1
 8015d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	f7ee f858 	bl	8003e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d104      	bne.n	8015d9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d00c      	beq.n	8015db6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d007      	beq.n	8015db6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8015dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f000 f913 	bl	8015fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d00c      	beq.n	8015dda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d007      	beq.n	8015dda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8015dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f000 f90b 	bl	8015ff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8015dda:	68bb      	ldr	r3, [r7, #8]
 8015ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d00c      	beq.n	8015dfe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d007      	beq.n	8015dfe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8015df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f000 f834 	bl	8015e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	f003 0320 	and.w	r3, r3, #32
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d00c      	beq.n	8015e22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	f003 0320 	and.w	r3, r3, #32
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d007      	beq.n	8015e22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	f06f 0220 	mvn.w	r2, #32
 8015e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f000 f8d3 	bl	8015fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015e22:	bf00      	nop
 8015e24:	3710      	adds	r7, #16
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}

08015e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015e2a:	b480      	push	{r7}
 8015e2c:	b083      	sub	sp, #12
 8015e2e:	af00      	add	r7, sp, #0
 8015e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015e32:	bf00      	nop
 8015e34:	370c      	adds	r7, #12
 8015e36:	46bd      	mov	sp, r7
 8015e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3c:	4770      	bx	lr

08015e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015e3e:	b480      	push	{r7}
 8015e40:	b083      	sub	sp, #12
 8015e42:	af00      	add	r7, sp, #0
 8015e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015e46:	bf00      	nop
 8015e48:	370c      	adds	r7, #12
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e50:	4770      	bx	lr

08015e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015e52:	b480      	push	{r7}
 8015e54:	b083      	sub	sp, #12
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015e5a:	bf00      	nop
 8015e5c:	370c      	adds	r7, #12
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e64:	4770      	bx	lr

08015e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015e66:	b480      	push	{r7}
 8015e68:	b083      	sub	sp, #12
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015e6e:	bf00      	nop
 8015e70:	370c      	adds	r7, #12
 8015e72:	46bd      	mov	sp, r7
 8015e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e78:	4770      	bx	lr
	...

08015e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b085      	sub	sp, #20
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	4a46      	ldr	r2, [pc, #280]	@ (8015fa8 <TIM_Base_SetConfig+0x12c>)
 8015e90:	4293      	cmp	r3, r2
 8015e92:	d013      	beq.n	8015ebc <TIM_Base_SetConfig+0x40>
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015e9a:	d00f      	beq.n	8015ebc <TIM_Base_SetConfig+0x40>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	4a43      	ldr	r2, [pc, #268]	@ (8015fac <TIM_Base_SetConfig+0x130>)
 8015ea0:	4293      	cmp	r3, r2
 8015ea2:	d00b      	beq.n	8015ebc <TIM_Base_SetConfig+0x40>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	4a42      	ldr	r2, [pc, #264]	@ (8015fb0 <TIM_Base_SetConfig+0x134>)
 8015ea8:	4293      	cmp	r3, r2
 8015eaa:	d007      	beq.n	8015ebc <TIM_Base_SetConfig+0x40>
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	4a41      	ldr	r2, [pc, #260]	@ (8015fb4 <TIM_Base_SetConfig+0x138>)
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	d003      	beq.n	8015ebc <TIM_Base_SetConfig+0x40>
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	4a40      	ldr	r2, [pc, #256]	@ (8015fb8 <TIM_Base_SetConfig+0x13c>)
 8015eb8:	4293      	cmp	r3, r2
 8015eba:	d108      	bne.n	8015ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8015ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	68fa      	ldr	r2, [r7, #12]
 8015eca:	4313      	orrs	r3, r2
 8015ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	4a35      	ldr	r2, [pc, #212]	@ (8015fa8 <TIM_Base_SetConfig+0x12c>)
 8015ed2:	4293      	cmp	r3, r2
 8015ed4:	d01f      	beq.n	8015f16 <TIM_Base_SetConfig+0x9a>
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015edc:	d01b      	beq.n	8015f16 <TIM_Base_SetConfig+0x9a>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	4a32      	ldr	r2, [pc, #200]	@ (8015fac <TIM_Base_SetConfig+0x130>)
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d017      	beq.n	8015f16 <TIM_Base_SetConfig+0x9a>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	4a31      	ldr	r2, [pc, #196]	@ (8015fb0 <TIM_Base_SetConfig+0x134>)
 8015eea:	4293      	cmp	r3, r2
 8015eec:	d013      	beq.n	8015f16 <TIM_Base_SetConfig+0x9a>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	4a30      	ldr	r2, [pc, #192]	@ (8015fb4 <TIM_Base_SetConfig+0x138>)
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d00f      	beq.n	8015f16 <TIM_Base_SetConfig+0x9a>
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8015fb8 <TIM_Base_SetConfig+0x13c>)
 8015efa:	4293      	cmp	r3, r2
 8015efc:	d00b      	beq.n	8015f16 <TIM_Base_SetConfig+0x9a>
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	4a2e      	ldr	r2, [pc, #184]	@ (8015fbc <TIM_Base_SetConfig+0x140>)
 8015f02:	4293      	cmp	r3, r2
 8015f04:	d007      	beq.n	8015f16 <TIM_Base_SetConfig+0x9a>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	4a2d      	ldr	r2, [pc, #180]	@ (8015fc0 <TIM_Base_SetConfig+0x144>)
 8015f0a:	4293      	cmp	r3, r2
 8015f0c:	d003      	beq.n	8015f16 <TIM_Base_SetConfig+0x9a>
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	4a2c      	ldr	r2, [pc, #176]	@ (8015fc4 <TIM_Base_SetConfig+0x148>)
 8015f12:	4293      	cmp	r3, r2
 8015f14:	d108      	bne.n	8015f28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	68db      	ldr	r3, [r3, #12]
 8015f22:	68fa      	ldr	r2, [r7, #12]
 8015f24:	4313      	orrs	r3, r2
 8015f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	695b      	ldr	r3, [r3, #20]
 8015f32:	4313      	orrs	r3, r2
 8015f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	68fa      	ldr	r2, [r7, #12]
 8015f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	689a      	ldr	r2, [r3, #8]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	681a      	ldr	r2, [r3, #0]
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	4a16      	ldr	r2, [pc, #88]	@ (8015fa8 <TIM_Base_SetConfig+0x12c>)
 8015f50:	4293      	cmp	r3, r2
 8015f52:	d00f      	beq.n	8015f74 <TIM_Base_SetConfig+0xf8>
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	4a18      	ldr	r2, [pc, #96]	@ (8015fb8 <TIM_Base_SetConfig+0x13c>)
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	d00b      	beq.n	8015f74 <TIM_Base_SetConfig+0xf8>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	4a17      	ldr	r2, [pc, #92]	@ (8015fbc <TIM_Base_SetConfig+0x140>)
 8015f60:	4293      	cmp	r3, r2
 8015f62:	d007      	beq.n	8015f74 <TIM_Base_SetConfig+0xf8>
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	4a16      	ldr	r2, [pc, #88]	@ (8015fc0 <TIM_Base_SetConfig+0x144>)
 8015f68:	4293      	cmp	r3, r2
 8015f6a:	d003      	beq.n	8015f74 <TIM_Base_SetConfig+0xf8>
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	4a15      	ldr	r2, [pc, #84]	@ (8015fc4 <TIM_Base_SetConfig+0x148>)
 8015f70:	4293      	cmp	r3, r2
 8015f72:	d103      	bne.n	8015f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	691a      	ldr	r2, [r3, #16]
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2201      	movs	r2, #1
 8015f80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	691b      	ldr	r3, [r3, #16]
 8015f86:	f003 0301 	and.w	r3, r3, #1
 8015f8a:	2b01      	cmp	r3, #1
 8015f8c:	d105      	bne.n	8015f9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	691b      	ldr	r3, [r3, #16]
 8015f92:	f023 0201 	bic.w	r2, r3, #1
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	611a      	str	r2, [r3, #16]
  }
}
 8015f9a:	bf00      	nop
 8015f9c:	3714      	adds	r7, #20
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa4:	4770      	bx	lr
 8015fa6:	bf00      	nop
 8015fa8:	40012c00 	.word	0x40012c00
 8015fac:	40000400 	.word	0x40000400
 8015fb0:	40000800 	.word	0x40000800
 8015fb4:	40000c00 	.word	0x40000c00
 8015fb8:	40013400 	.word	0x40013400
 8015fbc:	40014000 	.word	0x40014000
 8015fc0:	40014400 	.word	0x40014400
 8015fc4:	40014800 	.word	0x40014800

08015fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015fc8:	b480      	push	{r7}
 8015fca:	b083      	sub	sp, #12
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015fd0:	bf00      	nop
 8015fd2:	370c      	adds	r7, #12
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fda:	4770      	bx	lr

08015fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b083      	sub	sp, #12
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015fe4:	bf00      	nop
 8015fe6:	370c      	adds	r7, #12
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015ff0:	b480      	push	{r7}
 8015ff2:	b083      	sub	sp, #12
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015ff8:	bf00      	nop
 8015ffa:	370c      	adds	r7, #12
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr

08016004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b082      	sub	sp, #8
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d101      	bne.n	8016016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016012:	2301      	movs	r3, #1
 8016014:	e040      	b.n	8016098 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801601a:	2b00      	cmp	r3, #0
 801601c:	d106      	bne.n	801602c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2200      	movs	r2, #0
 8016022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f7ee fb3c 	bl	80046a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2224      	movs	r2, #36	@ 0x24
 8016030:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	681a      	ldr	r2, [r3, #0]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	f022 0201 	bic.w	r2, r2, #1
 8016040:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016046:	2b00      	cmp	r3, #0
 8016048:	d002      	beq.n	8016050 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f000 fedc 	bl	8016e08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f000 fc21 	bl	8016898 <UART_SetConfig>
 8016056:	4603      	mov	r3, r0
 8016058:	2b01      	cmp	r3, #1
 801605a:	d101      	bne.n	8016060 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801605c:	2301      	movs	r3, #1
 801605e:	e01b      	b.n	8016098 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	685a      	ldr	r2, [r3, #4]
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801606e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	689a      	ldr	r2, [r3, #8]
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801607e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	681a      	ldr	r2, [r3, #0]
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	f042 0201 	orr.w	r2, r2, #1
 801608e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f000 ff5b 	bl	8016f4c <UART_CheckIdleState>
 8016096:	4603      	mov	r3, r0
}
 8016098:	4618      	mov	r0, r3
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b08a      	sub	sp, #40	@ 0x28
 80160a4:	af02      	add	r7, sp, #8
 80160a6:	60f8      	str	r0, [r7, #12]
 80160a8:	60b9      	str	r1, [r7, #8]
 80160aa:	603b      	str	r3, [r7, #0]
 80160ac:	4613      	mov	r3, r2
 80160ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80160b4:	2b20      	cmp	r3, #32
 80160b6:	d177      	bne.n	80161a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d002      	beq.n	80160c4 <HAL_UART_Transmit+0x24>
 80160be:	88fb      	ldrh	r3, [r7, #6]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d101      	bne.n	80160c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80160c4:	2301      	movs	r3, #1
 80160c6:	e070      	b.n	80161aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	2200      	movs	r2, #0
 80160cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2221      	movs	r2, #33	@ 0x21
 80160d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80160d6:	f7fd f9fb 	bl	80134d0 <HAL_GetTick>
 80160da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	88fa      	ldrh	r2, [r7, #6]
 80160e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	88fa      	ldrh	r2, [r7, #6]
 80160e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	689b      	ldr	r3, [r3, #8]
 80160f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80160f4:	d108      	bne.n	8016108 <HAL_UART_Transmit+0x68>
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	691b      	ldr	r3, [r3, #16]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d104      	bne.n	8016108 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80160fe:	2300      	movs	r3, #0
 8016100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	61bb      	str	r3, [r7, #24]
 8016106:	e003      	b.n	8016110 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801610c:	2300      	movs	r3, #0
 801610e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8016110:	e02f      	b.n	8016172 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	9300      	str	r3, [sp, #0]
 8016116:	697b      	ldr	r3, [r7, #20]
 8016118:	2200      	movs	r2, #0
 801611a:	2180      	movs	r1, #128	@ 0x80
 801611c:	68f8      	ldr	r0, [r7, #12]
 801611e:	f000 ffbd 	bl	801709c <UART_WaitOnFlagUntilTimeout>
 8016122:	4603      	mov	r3, r0
 8016124:	2b00      	cmp	r3, #0
 8016126:	d004      	beq.n	8016132 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	2220      	movs	r2, #32
 801612c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801612e:	2303      	movs	r3, #3
 8016130:	e03b      	b.n	80161aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8016132:	69fb      	ldr	r3, [r7, #28]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d10b      	bne.n	8016150 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016138:	69bb      	ldr	r3, [r7, #24]
 801613a:	881a      	ldrh	r2, [r3, #0]
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016144:	b292      	uxth	r2, r2
 8016146:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016148:	69bb      	ldr	r3, [r7, #24]
 801614a:	3302      	adds	r3, #2
 801614c:	61bb      	str	r3, [r7, #24]
 801614e:	e007      	b.n	8016160 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	781a      	ldrb	r2, [r3, #0]
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801615a:	69fb      	ldr	r3, [r7, #28]
 801615c:	3301      	adds	r3, #1
 801615e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8016166:	b29b      	uxth	r3, r3
 8016168:	3b01      	subs	r3, #1
 801616a:	b29a      	uxth	r2, r3
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8016178:	b29b      	uxth	r3, r3
 801617a:	2b00      	cmp	r3, #0
 801617c:	d1c9      	bne.n	8016112 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	9300      	str	r3, [sp, #0]
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	2200      	movs	r2, #0
 8016186:	2140      	movs	r1, #64	@ 0x40
 8016188:	68f8      	ldr	r0, [r7, #12]
 801618a:	f000 ff87 	bl	801709c <UART_WaitOnFlagUntilTimeout>
 801618e:	4603      	mov	r3, r0
 8016190:	2b00      	cmp	r3, #0
 8016192:	d004      	beq.n	801619e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	2220      	movs	r2, #32
 8016198:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801619a:	2303      	movs	r3, #3
 801619c:	e005      	b.n	80161aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	2220      	movs	r2, #32
 80161a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80161a4:	2300      	movs	r3, #0
 80161a6:	e000      	b.n	80161aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80161a8:	2302      	movs	r3, #2
  }
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3720      	adds	r7, #32
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}
	...

080161b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b08a      	sub	sp, #40	@ 0x28
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	60f8      	str	r0, [r7, #12]
 80161bc:	60b9      	str	r1, [r7, #8]
 80161be:	4613      	mov	r3, r2
 80161c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80161c8:	2b20      	cmp	r3, #32
 80161ca:	d137      	bne.n	801623c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d002      	beq.n	80161d8 <HAL_UART_Receive_IT+0x24>
 80161d2:	88fb      	ldrh	r3, [r7, #6]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d101      	bne.n	80161dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80161d8:	2301      	movs	r3, #1
 80161da:	e030      	b.n	801623e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2200      	movs	r2, #0
 80161e0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	4a18      	ldr	r2, [pc, #96]	@ (8016248 <HAL_UART_Receive_IT+0x94>)
 80161e8:	4293      	cmp	r3, r2
 80161ea:	d01f      	beq.n	801622c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d018      	beq.n	801622c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	e853 3f00 	ldrex	r3, [r3]
 8016206:	613b      	str	r3, [r7, #16]
   return(result);
 8016208:	693b      	ldr	r3, [r7, #16]
 801620a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801620e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	461a      	mov	r2, r3
 8016216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016218:	623b      	str	r3, [r7, #32]
 801621a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801621c:	69f9      	ldr	r1, [r7, #28]
 801621e:	6a3a      	ldr	r2, [r7, #32]
 8016220:	e841 2300 	strex	r3, r2, [r1]
 8016224:	61bb      	str	r3, [r7, #24]
   return(result);
 8016226:	69bb      	ldr	r3, [r7, #24]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d1e6      	bne.n	80161fa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801622c:	88fb      	ldrh	r3, [r7, #6]
 801622e:	461a      	mov	r2, r3
 8016230:	68b9      	ldr	r1, [r7, #8]
 8016232:	68f8      	ldr	r0, [r7, #12]
 8016234:	f000 ffa0 	bl	8017178 <UART_Start_Receive_IT>
 8016238:	4603      	mov	r3, r0
 801623a:	e000      	b.n	801623e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801623c:	2302      	movs	r3, #2
  }
}
 801623e:	4618      	mov	r0, r3
 8016240:	3728      	adds	r7, #40	@ 0x28
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}
 8016246:	bf00      	nop
 8016248:	40008000 	.word	0x40008000

0801624c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b0ba      	sub	sp, #232	@ 0xe8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	69db      	ldr	r3, [r3, #28]
 801625a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	689b      	ldr	r3, [r3, #8]
 801626e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016272:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8016276:	f640 030f 	movw	r3, #2063	@ 0x80f
 801627a:	4013      	ands	r3, r2
 801627c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8016280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8016284:	2b00      	cmp	r3, #0
 8016286:	d115      	bne.n	80162b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8016288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801628c:	f003 0320 	and.w	r3, r3, #32
 8016290:	2b00      	cmp	r3, #0
 8016292:	d00f      	beq.n	80162b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016298:	f003 0320 	and.w	r3, r3, #32
 801629c:	2b00      	cmp	r3, #0
 801629e:	d009      	beq.n	80162b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	f000 82ca 	beq.w	801683e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	4798      	blx	r3
      }
      return;
 80162b2:	e2c4      	b.n	801683e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80162b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	f000 8117 	beq.w	80164ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80162be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80162c2:	f003 0301 	and.w	r3, r3, #1
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d106      	bne.n	80162d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80162ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80162ce:	4b85      	ldr	r3, [pc, #532]	@ (80164e4 <HAL_UART_IRQHandler+0x298>)
 80162d0:	4013      	ands	r3, r2
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	f000 810a 	beq.w	80164ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80162d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80162dc:	f003 0301 	and.w	r3, r3, #1
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d011      	beq.n	8016308 <HAL_UART_IRQHandler+0xbc>
 80162e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80162e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d00b      	beq.n	8016308 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	2201      	movs	r2, #1
 80162f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80162fe:	f043 0201 	orr.w	r2, r3, #1
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801630c:	f003 0302 	and.w	r3, r3, #2
 8016310:	2b00      	cmp	r3, #0
 8016312:	d011      	beq.n	8016338 <HAL_UART_IRQHandler+0xec>
 8016314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016318:	f003 0301 	and.w	r3, r3, #1
 801631c:	2b00      	cmp	r3, #0
 801631e:	d00b      	beq.n	8016338 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	2202      	movs	r2, #2
 8016326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801632e:	f043 0204 	orr.w	r2, r3, #4
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801633c:	f003 0304 	and.w	r3, r3, #4
 8016340:	2b00      	cmp	r3, #0
 8016342:	d011      	beq.n	8016368 <HAL_UART_IRQHandler+0x11c>
 8016344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016348:	f003 0301 	and.w	r3, r3, #1
 801634c:	2b00      	cmp	r3, #0
 801634e:	d00b      	beq.n	8016368 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	2204      	movs	r2, #4
 8016356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801635e:	f043 0202 	orr.w	r2, r3, #2
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801636c:	f003 0308 	and.w	r3, r3, #8
 8016370:	2b00      	cmp	r3, #0
 8016372:	d017      	beq.n	80163a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016378:	f003 0320 	and.w	r3, r3, #32
 801637c:	2b00      	cmp	r3, #0
 801637e:	d105      	bne.n	801638c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016384:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016388:	2b00      	cmp	r3, #0
 801638a:	d00b      	beq.n	80163a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2208      	movs	r2, #8
 8016392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801639a:	f043 0208 	orr.w	r2, r3, #8
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80163a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80163a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d012      	beq.n	80163d6 <HAL_UART_IRQHandler+0x18a>
 80163b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80163b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d00c      	beq.n	80163d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80163c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80163cc:	f043 0220 	orr.w	r2, r3, #32
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80163dc:	2b00      	cmp	r3, #0
 80163de:	f000 8230 	beq.w	8016842 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80163e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80163e6:	f003 0320 	and.w	r3, r3, #32
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d00d      	beq.n	801640a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80163ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80163f2:	f003 0320 	and.w	r3, r3, #32
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d007      	beq.n	801640a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d003      	beq.n	801640a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016406:	6878      	ldr	r0, [r7, #4]
 8016408:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016410:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	689b      	ldr	r3, [r3, #8]
 801641a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801641e:	2b40      	cmp	r3, #64	@ 0x40
 8016420:	d005      	beq.n	801642e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8016426:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801642a:	2b00      	cmp	r3, #0
 801642c:	d04f      	beq.n	80164ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	f000 ff68 	bl	8017304 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	689b      	ldr	r3, [r3, #8]
 801643a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801643e:	2b40      	cmp	r3, #64	@ 0x40
 8016440:	d141      	bne.n	80164c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	3308      	adds	r3, #8
 8016448:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801644c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016450:	e853 3f00 	ldrex	r3, [r3]
 8016454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8016458:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801645c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	3308      	adds	r3, #8
 801646a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801646e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8016472:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801647a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801647e:	e841 2300 	strex	r3, r2, [r1]
 8016482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8016486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801648a:	2b00      	cmp	r3, #0
 801648c:	d1d9      	bne.n	8016442 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016492:	2b00      	cmp	r3, #0
 8016494:	d013      	beq.n	80164be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801649a:	4a13      	ldr	r2, [pc, #76]	@ (80164e8 <HAL_UART_IRQHandler+0x29c>)
 801649c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7fd f940 	bl	8013728 <HAL_DMA_Abort_IT>
 80164a8:	4603      	mov	r3, r0
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d017      	beq.n	80164de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164b4:	687a      	ldr	r2, [r7, #4]
 80164b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80164b8:	4610      	mov	r0, r2
 80164ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164bc:	e00f      	b.n	80164de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	f000 f9d4 	bl	801686c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164c4:	e00b      	b.n	80164de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 f9d0 	bl	801686c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164cc:	e007      	b.n	80164de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 f9cc 	bl	801686c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2200      	movs	r2, #0
 80164d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80164dc:	e1b1      	b.n	8016842 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164de:	bf00      	nop
    return;
 80164e0:	e1af      	b.n	8016842 <HAL_UART_IRQHandler+0x5f6>
 80164e2:	bf00      	nop
 80164e4:	04000120 	.word	0x04000120
 80164e8:	080173cd 	.word	0x080173cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80164f0:	2b01      	cmp	r3, #1
 80164f2:	f040 816a 	bne.w	80167ca <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80164f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80164fa:	f003 0310 	and.w	r3, r3, #16
 80164fe:	2b00      	cmp	r3, #0
 8016500:	f000 8163 	beq.w	80167ca <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016508:	f003 0310 	and.w	r3, r3, #16
 801650c:	2b00      	cmp	r3, #0
 801650e:	f000 815c 	beq.w	80167ca <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	2210      	movs	r2, #16
 8016518:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	689b      	ldr	r3, [r3, #8]
 8016520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016524:	2b40      	cmp	r3, #64	@ 0x40
 8016526:	f040 80d4 	bne.w	80166d2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	685b      	ldr	r3, [r3, #4]
 8016532:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016536:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801653a:	2b00      	cmp	r3, #0
 801653c:	f000 80ad 	beq.w	801669a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8016546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801654a:	429a      	cmp	r2, r3
 801654c:	f080 80a5 	bcs.w	801669a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8016556:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	f003 0320 	and.w	r3, r3, #32
 8016566:	2b00      	cmp	r3, #0
 8016568:	f040 8086 	bne.w	8016678 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016574:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016578:	e853 3f00 	ldrex	r3, [r3]
 801657c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8016580:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	461a      	mov	r2, r3
 8016592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801659a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801659e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80165a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80165a6:	e841 2300 	strex	r3, r2, [r1]
 80165aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80165ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d1da      	bne.n	801656c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	3308      	adds	r3, #8
 80165bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80165c0:	e853 3f00 	ldrex	r3, [r3]
 80165c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80165c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80165c8:	f023 0301 	bic.w	r3, r3, #1
 80165cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	3308      	adds	r3, #8
 80165d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80165da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80165de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80165e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80165e6:	e841 2300 	strex	r3, r2, [r1]
 80165ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80165ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d1e1      	bne.n	80165b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	3308      	adds	r3, #8
 80165f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80165fc:	e853 3f00 	ldrex	r3, [r3]
 8016600:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8016602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	3308      	adds	r3, #8
 8016612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8016616:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8016618:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801661a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801661c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801661e:	e841 2300 	strex	r3, r2, [r1]
 8016622:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8016624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016626:	2b00      	cmp	r3, #0
 8016628:	d1e3      	bne.n	80165f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	2220      	movs	r2, #32
 801662e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2200      	movs	r2, #0
 8016636:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801663e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016640:	e853 3f00 	ldrex	r3, [r3]
 8016644:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8016646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016648:	f023 0310 	bic.w	r3, r3, #16
 801664c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	461a      	mov	r2, r3
 8016656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801665a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801665c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801665e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016662:	e841 2300 	strex	r3, r2, [r1]
 8016666:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8016668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801666a:	2b00      	cmp	r3, #0
 801666c:	d1e4      	bne.n	8016638 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016672:	4618      	mov	r0, r3
 8016674:	f7fd f81a 	bl	80136ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2202      	movs	r2, #2
 801667c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801668a:	b29b      	uxth	r3, r3
 801668c:	1ad3      	subs	r3, r2, r3
 801668e:	b29b      	uxth	r3, r3
 8016690:	4619      	mov	r1, r3
 8016692:	6878      	ldr	r0, [r7, #4]
 8016694:	f000 f8f4 	bl	8016880 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8016698:	e0d5      	b.n	8016846 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80166a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80166a4:	429a      	cmp	r2, r3
 80166a6:	f040 80ce 	bne.w	8016846 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	f003 0320 	and.w	r3, r3, #32
 80166b6:	2b20      	cmp	r3, #32
 80166b8:	f040 80c5 	bne.w	8016846 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2202      	movs	r2, #2
 80166c0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80166c8:	4619      	mov	r1, r3
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f000 f8d8 	bl	8016880 <HAL_UARTEx_RxEventCallback>
      return;
 80166d0:	e0b9      	b.n	8016846 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80166de:	b29b      	uxth	r3, r3
 80166e0:	1ad3      	subs	r3, r2, r3
 80166e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	f000 80ab 	beq.w	801684a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80166f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	f000 80a6 	beq.w	801684a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016706:	e853 3f00 	ldrex	r3, [r3]
 801670a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801670c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801670e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016712:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	461a      	mov	r2, r3
 801671c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8016720:	647b      	str	r3, [r7, #68]	@ 0x44
 8016722:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016728:	e841 2300 	strex	r3, r2, [r1]
 801672c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801672e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016730:	2b00      	cmp	r3, #0
 8016732:	d1e4      	bne.n	80166fe <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	3308      	adds	r3, #8
 801673a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801673e:	e853 3f00 	ldrex	r3, [r3]
 8016742:	623b      	str	r3, [r7, #32]
   return(result);
 8016744:	6a3b      	ldr	r3, [r7, #32]
 8016746:	f023 0301 	bic.w	r3, r3, #1
 801674a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	3308      	adds	r3, #8
 8016754:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8016758:	633a      	str	r2, [r7, #48]	@ 0x30
 801675a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801675c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801675e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016760:	e841 2300 	strex	r3, r2, [r1]
 8016764:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016768:	2b00      	cmp	r3, #0
 801676a:	d1e3      	bne.n	8016734 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2220      	movs	r2, #32
 8016770:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	2200      	movs	r2, #0
 8016778:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	2200      	movs	r2, #0
 801677e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	e853 3f00 	ldrex	r3, [r3]
 801678c:	60fb      	str	r3, [r7, #12]
   return(result);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	f023 0310 	bic.w	r3, r3, #16
 8016794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	461a      	mov	r2, r3
 801679e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80167a2:	61fb      	str	r3, [r7, #28]
 80167a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167a6:	69b9      	ldr	r1, [r7, #24]
 80167a8:	69fa      	ldr	r2, [r7, #28]
 80167aa:	e841 2300 	strex	r3, r2, [r1]
 80167ae:	617b      	str	r3, [r7, #20]
   return(result);
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d1e4      	bne.n	8016780 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	2202      	movs	r2, #2
 80167ba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80167bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80167c0:	4619      	mov	r1, r3
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f000 f85c 	bl	8016880 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80167c8:	e03f      	b.n	801684a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80167ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80167ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d00e      	beq.n	80167f4 <HAL_UART_IRQHandler+0x5a8>
 80167d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80167da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d008      	beq.n	80167f4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80167ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f000 ffe9 	bl	80177c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80167f2:	e02d      	b.n	8016850 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80167f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80167f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00e      	beq.n	801681e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016808:	2b00      	cmp	r3, #0
 801680a:	d008      	beq.n	801681e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016810:	2b00      	cmp	r3, #0
 8016812:	d01c      	beq.n	801684e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	4798      	blx	r3
    }
    return;
 801681c:	e017      	b.n	801684e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016826:	2b00      	cmp	r3, #0
 8016828:	d012      	beq.n	8016850 <HAL_UART_IRQHandler+0x604>
 801682a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801682e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016832:	2b00      	cmp	r3, #0
 8016834:	d00c      	beq.n	8016850 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f000 fdde 	bl	80173f8 <UART_EndTransmit_IT>
    return;
 801683c:	e008      	b.n	8016850 <HAL_UART_IRQHandler+0x604>
      return;
 801683e:	bf00      	nop
 8016840:	e006      	b.n	8016850 <HAL_UART_IRQHandler+0x604>
    return;
 8016842:	bf00      	nop
 8016844:	e004      	b.n	8016850 <HAL_UART_IRQHandler+0x604>
      return;
 8016846:	bf00      	nop
 8016848:	e002      	b.n	8016850 <HAL_UART_IRQHandler+0x604>
      return;
 801684a:	bf00      	nop
 801684c:	e000      	b.n	8016850 <HAL_UART_IRQHandler+0x604>
    return;
 801684e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8016850:	37e8      	adds	r7, #232	@ 0xe8
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop

08016858 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016858:	b480      	push	{r7}
 801685a:	b083      	sub	sp, #12
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016860:	bf00      	nop
 8016862:	370c      	adds	r7, #12
 8016864:	46bd      	mov	sp, r7
 8016866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686a:	4770      	bx	lr

0801686c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801686c:	b480      	push	{r7}
 801686e:	b083      	sub	sp, #12
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016874:	bf00      	nop
 8016876:	370c      	adds	r7, #12
 8016878:	46bd      	mov	sp, r7
 801687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687e:	4770      	bx	lr

08016880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016880:	b480      	push	{r7}
 8016882:	b083      	sub	sp, #12
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
 8016888:	460b      	mov	r3, r1
 801688a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801688c:	bf00      	nop
 801688e:	370c      	adds	r7, #12
 8016890:	46bd      	mov	sp, r7
 8016892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016896:	4770      	bx	lr

08016898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801689c:	b08a      	sub	sp, #40	@ 0x28
 801689e:	af00      	add	r7, sp, #0
 80168a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80168a2:	2300      	movs	r3, #0
 80168a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	689a      	ldr	r2, [r3, #8]
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	691b      	ldr	r3, [r3, #16]
 80168b0:	431a      	orrs	r2, r3
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	695b      	ldr	r3, [r3, #20]
 80168b6:	431a      	orrs	r2, r3
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	69db      	ldr	r3, [r3, #28]
 80168bc:	4313      	orrs	r3, r2
 80168be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	681a      	ldr	r2, [r3, #0]
 80168c6:	4ba4      	ldr	r3, [pc, #656]	@ (8016b58 <UART_SetConfig+0x2c0>)
 80168c8:	4013      	ands	r3, r2
 80168ca:	68fa      	ldr	r2, [r7, #12]
 80168cc:	6812      	ldr	r2, [r2, #0]
 80168ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80168d0:	430b      	orrs	r3, r1
 80168d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	68da      	ldr	r2, [r3, #12]
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	430a      	orrs	r2, r1
 80168e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	699b      	ldr	r3, [r3, #24]
 80168ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	4a99      	ldr	r2, [pc, #612]	@ (8016b5c <UART_SetConfig+0x2c4>)
 80168f6:	4293      	cmp	r3, r2
 80168f8:	d004      	beq.n	8016904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	6a1b      	ldr	r3, [r3, #32]
 80168fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016900:	4313      	orrs	r3, r2
 8016902:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	689b      	ldr	r3, [r3, #8]
 801690a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016914:	430a      	orrs	r2, r1
 8016916:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	4a90      	ldr	r2, [pc, #576]	@ (8016b60 <UART_SetConfig+0x2c8>)
 801691e:	4293      	cmp	r3, r2
 8016920:	d126      	bne.n	8016970 <UART_SetConfig+0xd8>
 8016922:	4b90      	ldr	r3, [pc, #576]	@ (8016b64 <UART_SetConfig+0x2cc>)
 8016924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016928:	f003 0303 	and.w	r3, r3, #3
 801692c:	2b03      	cmp	r3, #3
 801692e:	d81b      	bhi.n	8016968 <UART_SetConfig+0xd0>
 8016930:	a201      	add	r2, pc, #4	@ (adr r2, 8016938 <UART_SetConfig+0xa0>)
 8016932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016936:	bf00      	nop
 8016938:	08016949 	.word	0x08016949
 801693c:	08016959 	.word	0x08016959
 8016940:	08016951 	.word	0x08016951
 8016944:	08016961 	.word	0x08016961
 8016948:	2301      	movs	r3, #1
 801694a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801694e:	e116      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016950:	2302      	movs	r3, #2
 8016952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016956:	e112      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016958:	2304      	movs	r3, #4
 801695a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801695e:	e10e      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016960:	2308      	movs	r3, #8
 8016962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016966:	e10a      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016968:	2310      	movs	r3, #16
 801696a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801696e:	e106      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	4a7c      	ldr	r2, [pc, #496]	@ (8016b68 <UART_SetConfig+0x2d0>)
 8016976:	4293      	cmp	r3, r2
 8016978:	d138      	bne.n	80169ec <UART_SetConfig+0x154>
 801697a:	4b7a      	ldr	r3, [pc, #488]	@ (8016b64 <UART_SetConfig+0x2cc>)
 801697c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016980:	f003 030c 	and.w	r3, r3, #12
 8016984:	2b0c      	cmp	r3, #12
 8016986:	d82d      	bhi.n	80169e4 <UART_SetConfig+0x14c>
 8016988:	a201      	add	r2, pc, #4	@ (adr r2, 8016990 <UART_SetConfig+0xf8>)
 801698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801698e:	bf00      	nop
 8016990:	080169c5 	.word	0x080169c5
 8016994:	080169e5 	.word	0x080169e5
 8016998:	080169e5 	.word	0x080169e5
 801699c:	080169e5 	.word	0x080169e5
 80169a0:	080169d5 	.word	0x080169d5
 80169a4:	080169e5 	.word	0x080169e5
 80169a8:	080169e5 	.word	0x080169e5
 80169ac:	080169e5 	.word	0x080169e5
 80169b0:	080169cd 	.word	0x080169cd
 80169b4:	080169e5 	.word	0x080169e5
 80169b8:	080169e5 	.word	0x080169e5
 80169bc:	080169e5 	.word	0x080169e5
 80169c0:	080169dd 	.word	0x080169dd
 80169c4:	2300      	movs	r3, #0
 80169c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80169ca:	e0d8      	b.n	8016b7e <UART_SetConfig+0x2e6>
 80169cc:	2302      	movs	r3, #2
 80169ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80169d2:	e0d4      	b.n	8016b7e <UART_SetConfig+0x2e6>
 80169d4:	2304      	movs	r3, #4
 80169d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80169da:	e0d0      	b.n	8016b7e <UART_SetConfig+0x2e6>
 80169dc:	2308      	movs	r3, #8
 80169de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80169e2:	e0cc      	b.n	8016b7e <UART_SetConfig+0x2e6>
 80169e4:	2310      	movs	r3, #16
 80169e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80169ea:	e0c8      	b.n	8016b7e <UART_SetConfig+0x2e6>
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	4a5e      	ldr	r2, [pc, #376]	@ (8016b6c <UART_SetConfig+0x2d4>)
 80169f2:	4293      	cmp	r3, r2
 80169f4:	d125      	bne.n	8016a42 <UART_SetConfig+0x1aa>
 80169f6:	4b5b      	ldr	r3, [pc, #364]	@ (8016b64 <UART_SetConfig+0x2cc>)
 80169f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80169fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8016a00:	2b30      	cmp	r3, #48	@ 0x30
 8016a02:	d016      	beq.n	8016a32 <UART_SetConfig+0x19a>
 8016a04:	2b30      	cmp	r3, #48	@ 0x30
 8016a06:	d818      	bhi.n	8016a3a <UART_SetConfig+0x1a2>
 8016a08:	2b20      	cmp	r3, #32
 8016a0a:	d00a      	beq.n	8016a22 <UART_SetConfig+0x18a>
 8016a0c:	2b20      	cmp	r3, #32
 8016a0e:	d814      	bhi.n	8016a3a <UART_SetConfig+0x1a2>
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d002      	beq.n	8016a1a <UART_SetConfig+0x182>
 8016a14:	2b10      	cmp	r3, #16
 8016a16:	d008      	beq.n	8016a2a <UART_SetConfig+0x192>
 8016a18:	e00f      	b.n	8016a3a <UART_SetConfig+0x1a2>
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a20:	e0ad      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a22:	2302      	movs	r3, #2
 8016a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a28:	e0a9      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a2a:	2304      	movs	r3, #4
 8016a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a30:	e0a5      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a32:	2308      	movs	r3, #8
 8016a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a38:	e0a1      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a3a:	2310      	movs	r3, #16
 8016a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a40:	e09d      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	4a4a      	ldr	r2, [pc, #296]	@ (8016b70 <UART_SetConfig+0x2d8>)
 8016a48:	4293      	cmp	r3, r2
 8016a4a:	d125      	bne.n	8016a98 <UART_SetConfig+0x200>
 8016a4c:	4b45      	ldr	r3, [pc, #276]	@ (8016b64 <UART_SetConfig+0x2cc>)
 8016a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016a52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8016a58:	d016      	beq.n	8016a88 <UART_SetConfig+0x1f0>
 8016a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8016a5c:	d818      	bhi.n	8016a90 <UART_SetConfig+0x1f8>
 8016a5e:	2b80      	cmp	r3, #128	@ 0x80
 8016a60:	d00a      	beq.n	8016a78 <UART_SetConfig+0x1e0>
 8016a62:	2b80      	cmp	r3, #128	@ 0x80
 8016a64:	d814      	bhi.n	8016a90 <UART_SetConfig+0x1f8>
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d002      	beq.n	8016a70 <UART_SetConfig+0x1d8>
 8016a6a:	2b40      	cmp	r3, #64	@ 0x40
 8016a6c:	d008      	beq.n	8016a80 <UART_SetConfig+0x1e8>
 8016a6e:	e00f      	b.n	8016a90 <UART_SetConfig+0x1f8>
 8016a70:	2300      	movs	r3, #0
 8016a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a76:	e082      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a78:	2302      	movs	r3, #2
 8016a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a7e:	e07e      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a80:	2304      	movs	r3, #4
 8016a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a86:	e07a      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a88:	2308      	movs	r3, #8
 8016a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a8e:	e076      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a90:	2310      	movs	r3, #16
 8016a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016a96:	e072      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	4a35      	ldr	r2, [pc, #212]	@ (8016b74 <UART_SetConfig+0x2dc>)
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	d12a      	bne.n	8016af8 <UART_SetConfig+0x260>
 8016aa2:	4b30      	ldr	r3, [pc, #192]	@ (8016b64 <UART_SetConfig+0x2cc>)
 8016aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016ab0:	d01a      	beq.n	8016ae8 <UART_SetConfig+0x250>
 8016ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016ab6:	d81b      	bhi.n	8016af0 <UART_SetConfig+0x258>
 8016ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016abc:	d00c      	beq.n	8016ad8 <UART_SetConfig+0x240>
 8016abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016ac2:	d815      	bhi.n	8016af0 <UART_SetConfig+0x258>
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d003      	beq.n	8016ad0 <UART_SetConfig+0x238>
 8016ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016acc:	d008      	beq.n	8016ae0 <UART_SetConfig+0x248>
 8016ace:	e00f      	b.n	8016af0 <UART_SetConfig+0x258>
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016ad6:	e052      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016ad8:	2302      	movs	r3, #2
 8016ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016ade:	e04e      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016ae0:	2304      	movs	r3, #4
 8016ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016ae6:	e04a      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016ae8:	2308      	movs	r3, #8
 8016aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016aee:	e046      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016af0:	2310      	movs	r3, #16
 8016af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016af6:	e042      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	4a17      	ldr	r2, [pc, #92]	@ (8016b5c <UART_SetConfig+0x2c4>)
 8016afe:	4293      	cmp	r3, r2
 8016b00:	d13a      	bne.n	8016b78 <UART_SetConfig+0x2e0>
 8016b02:	4b18      	ldr	r3, [pc, #96]	@ (8016b64 <UART_SetConfig+0x2cc>)
 8016b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8016b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016b10:	d01a      	beq.n	8016b48 <UART_SetConfig+0x2b0>
 8016b12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016b16:	d81b      	bhi.n	8016b50 <UART_SetConfig+0x2b8>
 8016b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016b1c:	d00c      	beq.n	8016b38 <UART_SetConfig+0x2a0>
 8016b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016b22:	d815      	bhi.n	8016b50 <UART_SetConfig+0x2b8>
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d003      	beq.n	8016b30 <UART_SetConfig+0x298>
 8016b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016b2c:	d008      	beq.n	8016b40 <UART_SetConfig+0x2a8>
 8016b2e:	e00f      	b.n	8016b50 <UART_SetConfig+0x2b8>
 8016b30:	2300      	movs	r3, #0
 8016b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016b36:	e022      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016b38:	2302      	movs	r3, #2
 8016b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016b3e:	e01e      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016b40:	2304      	movs	r3, #4
 8016b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016b46:	e01a      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016b48:	2308      	movs	r3, #8
 8016b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016b4e:	e016      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016b50:	2310      	movs	r3, #16
 8016b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016b56:	e012      	b.n	8016b7e <UART_SetConfig+0x2e6>
 8016b58:	efff69f3 	.word	0xefff69f3
 8016b5c:	40008000 	.word	0x40008000
 8016b60:	40013800 	.word	0x40013800
 8016b64:	40021000 	.word	0x40021000
 8016b68:	40004400 	.word	0x40004400
 8016b6c:	40004800 	.word	0x40004800
 8016b70:	40004c00 	.word	0x40004c00
 8016b74:	40005000 	.word	0x40005000
 8016b78:	2310      	movs	r3, #16
 8016b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	4a9f      	ldr	r2, [pc, #636]	@ (8016e00 <UART_SetConfig+0x568>)
 8016b84:	4293      	cmp	r3, r2
 8016b86:	d17a      	bne.n	8016c7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016b88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016b8c:	2b08      	cmp	r3, #8
 8016b8e:	d824      	bhi.n	8016bda <UART_SetConfig+0x342>
 8016b90:	a201      	add	r2, pc, #4	@ (adr r2, 8016b98 <UART_SetConfig+0x300>)
 8016b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b96:	bf00      	nop
 8016b98:	08016bbd 	.word	0x08016bbd
 8016b9c:	08016bdb 	.word	0x08016bdb
 8016ba0:	08016bc5 	.word	0x08016bc5
 8016ba4:	08016bdb 	.word	0x08016bdb
 8016ba8:	08016bcb 	.word	0x08016bcb
 8016bac:	08016bdb 	.word	0x08016bdb
 8016bb0:	08016bdb 	.word	0x08016bdb
 8016bb4:	08016bdb 	.word	0x08016bdb
 8016bb8:	08016bd3 	.word	0x08016bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016bbc:	f7fd fd90 	bl	80146e0 <HAL_RCC_GetPCLK1Freq>
 8016bc0:	61f8      	str	r0, [r7, #28]
        break;
 8016bc2:	e010      	b.n	8016be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8016e04 <UART_SetConfig+0x56c>)
 8016bc6:	61fb      	str	r3, [r7, #28]
        break;
 8016bc8:	e00d      	b.n	8016be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016bca:	f7fd fcf1 	bl	80145b0 <HAL_RCC_GetSysClockFreq>
 8016bce:	61f8      	str	r0, [r7, #28]
        break;
 8016bd0:	e009      	b.n	8016be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016bd6:	61fb      	str	r3, [r7, #28]
        break;
 8016bd8:	e005      	b.n	8016be6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8016bde:	2301      	movs	r3, #1
 8016be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8016be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016be6:	69fb      	ldr	r3, [r7, #28]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	f000 80fb 	beq.w	8016de4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	685a      	ldr	r2, [r3, #4]
 8016bf2:	4613      	mov	r3, r2
 8016bf4:	005b      	lsls	r3, r3, #1
 8016bf6:	4413      	add	r3, r2
 8016bf8:	69fa      	ldr	r2, [r7, #28]
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d305      	bcc.n	8016c0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016c04:	69fa      	ldr	r2, [r7, #28]
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d903      	bls.n	8016c12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016c10:	e0e8      	b.n	8016de4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8016c12:	69fb      	ldr	r3, [r7, #28]
 8016c14:	2200      	movs	r2, #0
 8016c16:	461c      	mov	r4, r3
 8016c18:	4615      	mov	r5, r2
 8016c1a:	f04f 0200 	mov.w	r2, #0
 8016c1e:	f04f 0300 	mov.w	r3, #0
 8016c22:	022b      	lsls	r3, r5, #8
 8016c24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8016c28:	0222      	lsls	r2, r4, #8
 8016c2a:	68f9      	ldr	r1, [r7, #12]
 8016c2c:	6849      	ldr	r1, [r1, #4]
 8016c2e:	0849      	lsrs	r1, r1, #1
 8016c30:	2000      	movs	r0, #0
 8016c32:	4688      	mov	r8, r1
 8016c34:	4681      	mov	r9, r0
 8016c36:	eb12 0a08 	adds.w	sl, r2, r8
 8016c3a:	eb43 0b09 	adc.w	fp, r3, r9
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	2200      	movs	r2, #0
 8016c44:	603b      	str	r3, [r7, #0]
 8016c46:	607a      	str	r2, [r7, #4]
 8016c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c4c:	4650      	mov	r0, sl
 8016c4e:	4659      	mov	r1, fp
 8016c50:	f7ea f87a 	bl	8000d48 <__aeabi_uldivmod>
 8016c54:	4602      	mov	r2, r0
 8016c56:	460b      	mov	r3, r1
 8016c58:	4613      	mov	r3, r2
 8016c5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016c5c:	69bb      	ldr	r3, [r7, #24]
 8016c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016c62:	d308      	bcc.n	8016c76 <UART_SetConfig+0x3de>
 8016c64:	69bb      	ldr	r3, [r7, #24]
 8016c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016c6a:	d204      	bcs.n	8016c76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	69ba      	ldr	r2, [r7, #24]
 8016c72:	60da      	str	r2, [r3, #12]
 8016c74:	e0b6      	b.n	8016de4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8016c76:	2301      	movs	r3, #1
 8016c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016c7c:	e0b2      	b.n	8016de4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	69db      	ldr	r3, [r3, #28]
 8016c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016c86:	d15e      	bne.n	8016d46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8016c88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016c8c:	2b08      	cmp	r3, #8
 8016c8e:	d828      	bhi.n	8016ce2 <UART_SetConfig+0x44a>
 8016c90:	a201      	add	r2, pc, #4	@ (adr r2, 8016c98 <UART_SetConfig+0x400>)
 8016c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c96:	bf00      	nop
 8016c98:	08016cbd 	.word	0x08016cbd
 8016c9c:	08016cc5 	.word	0x08016cc5
 8016ca0:	08016ccd 	.word	0x08016ccd
 8016ca4:	08016ce3 	.word	0x08016ce3
 8016ca8:	08016cd3 	.word	0x08016cd3
 8016cac:	08016ce3 	.word	0x08016ce3
 8016cb0:	08016ce3 	.word	0x08016ce3
 8016cb4:	08016ce3 	.word	0x08016ce3
 8016cb8:	08016cdb 	.word	0x08016cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016cbc:	f7fd fd10 	bl	80146e0 <HAL_RCC_GetPCLK1Freq>
 8016cc0:	61f8      	str	r0, [r7, #28]
        break;
 8016cc2:	e014      	b.n	8016cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016cc4:	f7fd fd22 	bl	801470c <HAL_RCC_GetPCLK2Freq>
 8016cc8:	61f8      	str	r0, [r7, #28]
        break;
 8016cca:	e010      	b.n	8016cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8016e04 <UART_SetConfig+0x56c>)
 8016cce:	61fb      	str	r3, [r7, #28]
        break;
 8016cd0:	e00d      	b.n	8016cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016cd2:	f7fd fc6d 	bl	80145b0 <HAL_RCC_GetSysClockFreq>
 8016cd6:	61f8      	str	r0, [r7, #28]
        break;
 8016cd8:	e009      	b.n	8016cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016cde:	61fb      	str	r3, [r7, #28]
        break;
 8016ce0:	e005      	b.n	8016cee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8016ce6:	2301      	movs	r3, #1
 8016ce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8016cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d077      	beq.n	8016de4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8016cf4:	69fb      	ldr	r3, [r7, #28]
 8016cf6:	005a      	lsls	r2, r3, #1
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	685b      	ldr	r3, [r3, #4]
 8016cfc:	085b      	lsrs	r3, r3, #1
 8016cfe:	441a      	add	r2, r3
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	685b      	ldr	r3, [r3, #4]
 8016d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016d0a:	69bb      	ldr	r3, [r7, #24]
 8016d0c:	2b0f      	cmp	r3, #15
 8016d0e:	d916      	bls.n	8016d3e <UART_SetConfig+0x4a6>
 8016d10:	69bb      	ldr	r3, [r7, #24]
 8016d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016d16:	d212      	bcs.n	8016d3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016d18:	69bb      	ldr	r3, [r7, #24]
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	f023 030f 	bic.w	r3, r3, #15
 8016d20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	085b      	lsrs	r3, r3, #1
 8016d26:	b29b      	uxth	r3, r3
 8016d28:	f003 0307 	and.w	r3, r3, #7
 8016d2c:	b29a      	uxth	r2, r3
 8016d2e:	8afb      	ldrh	r3, [r7, #22]
 8016d30:	4313      	orrs	r3, r2
 8016d32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	8afa      	ldrh	r2, [r7, #22]
 8016d3a:	60da      	str	r2, [r3, #12]
 8016d3c:	e052      	b.n	8016de4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8016d3e:	2301      	movs	r3, #1
 8016d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016d44:	e04e      	b.n	8016de4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016d46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016d4a:	2b08      	cmp	r3, #8
 8016d4c:	d827      	bhi.n	8016d9e <UART_SetConfig+0x506>
 8016d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8016d54 <UART_SetConfig+0x4bc>)
 8016d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d54:	08016d79 	.word	0x08016d79
 8016d58:	08016d81 	.word	0x08016d81
 8016d5c:	08016d89 	.word	0x08016d89
 8016d60:	08016d9f 	.word	0x08016d9f
 8016d64:	08016d8f 	.word	0x08016d8f
 8016d68:	08016d9f 	.word	0x08016d9f
 8016d6c:	08016d9f 	.word	0x08016d9f
 8016d70:	08016d9f 	.word	0x08016d9f
 8016d74:	08016d97 	.word	0x08016d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016d78:	f7fd fcb2 	bl	80146e0 <HAL_RCC_GetPCLK1Freq>
 8016d7c:	61f8      	str	r0, [r7, #28]
        break;
 8016d7e:	e014      	b.n	8016daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016d80:	f7fd fcc4 	bl	801470c <HAL_RCC_GetPCLK2Freq>
 8016d84:	61f8      	str	r0, [r7, #28]
        break;
 8016d86:	e010      	b.n	8016daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016d88:	4b1e      	ldr	r3, [pc, #120]	@ (8016e04 <UART_SetConfig+0x56c>)
 8016d8a:	61fb      	str	r3, [r7, #28]
        break;
 8016d8c:	e00d      	b.n	8016daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016d8e:	f7fd fc0f 	bl	80145b0 <HAL_RCC_GetSysClockFreq>
 8016d92:	61f8      	str	r0, [r7, #28]
        break;
 8016d94:	e009      	b.n	8016daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016d9a:	61fb      	str	r3, [r7, #28]
        break;
 8016d9c:	e005      	b.n	8016daa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8016d9e:	2300      	movs	r3, #0
 8016da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8016da2:	2301      	movs	r3, #1
 8016da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8016da8:	bf00      	nop
    }

    if (pclk != 0U)
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d019      	beq.n	8016de4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	685b      	ldr	r3, [r3, #4]
 8016db4:	085a      	lsrs	r2, r3, #1
 8016db6:	69fb      	ldr	r3, [r7, #28]
 8016db8:	441a      	add	r2, r3
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016dc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016dc4:	69bb      	ldr	r3, [r7, #24]
 8016dc6:	2b0f      	cmp	r3, #15
 8016dc8:	d909      	bls.n	8016dde <UART_SetConfig+0x546>
 8016dca:	69bb      	ldr	r3, [r7, #24]
 8016dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016dd0:	d205      	bcs.n	8016dde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016dd2:	69bb      	ldr	r3, [r7, #24]
 8016dd4:	b29a      	uxth	r2, r3
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	60da      	str	r2, [r3, #12]
 8016ddc:	e002      	b.n	8016de4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8016dde:	2301      	movs	r3, #1
 8016de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	2200      	movs	r2, #0
 8016de8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	2200      	movs	r2, #0
 8016dee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8016df0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	3728      	adds	r7, #40	@ 0x28
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016dfe:	bf00      	nop
 8016e00:	40008000 	.word	0x40008000
 8016e04:	00f42400 	.word	0x00f42400

08016e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e14:	f003 0308 	and.w	r3, r3, #8
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d00a      	beq.n	8016e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	430a      	orrs	r2, r1
 8016e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e36:	f003 0301 	and.w	r3, r3, #1
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d00a      	beq.n	8016e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	685b      	ldr	r3, [r3, #4]
 8016e44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	430a      	orrs	r2, r1
 8016e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e58:	f003 0302 	and.w	r3, r3, #2
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d00a      	beq.n	8016e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	430a      	orrs	r2, r1
 8016e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e7a:	f003 0304 	and.w	r3, r3, #4
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d00a      	beq.n	8016e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	430a      	orrs	r2, r1
 8016e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e9c:	f003 0310 	and.w	r3, r3, #16
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d00a      	beq.n	8016eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	689b      	ldr	r3, [r3, #8]
 8016eaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	430a      	orrs	r2, r1
 8016eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ebe:	f003 0320 	and.w	r3, r3, #32
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d00a      	beq.n	8016edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	689b      	ldr	r3, [r3, #8]
 8016ecc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	430a      	orrs	r2, r1
 8016eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d01a      	beq.n	8016f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	685b      	ldr	r3, [r3, #4]
 8016eee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	430a      	orrs	r2, r1
 8016efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f06:	d10a      	bne.n	8016f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	685b      	ldr	r3, [r3, #4]
 8016f0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	430a      	orrs	r2, r1
 8016f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d00a      	beq.n	8016f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	430a      	orrs	r2, r1
 8016f3e:	605a      	str	r2, [r3, #4]
  }
}
 8016f40:	bf00      	nop
 8016f42:	370c      	adds	r7, #12
 8016f44:	46bd      	mov	sp, r7
 8016f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4a:	4770      	bx	lr

08016f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b098      	sub	sp, #96	@ 0x60
 8016f50:	af02      	add	r7, sp, #8
 8016f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2200      	movs	r2, #0
 8016f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016f5c:	f7fc fab8 	bl	80134d0 <HAL_GetTick>
 8016f60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	f003 0308 	and.w	r3, r3, #8
 8016f6c:	2b08      	cmp	r3, #8
 8016f6e:	d12e      	bne.n	8016fce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016f74:	9300      	str	r3, [sp, #0]
 8016f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f78:	2200      	movs	r2, #0
 8016f7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f000 f88c 	bl	801709c <UART_WaitOnFlagUntilTimeout>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d021      	beq.n	8016fce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f92:	e853 3f00 	ldrex	r3, [r3]
 8016f96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	461a      	mov	r2, r3
 8016fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8016faa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016fb0:	e841 2300 	strex	r3, r2, [r1]
 8016fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d1e6      	bne.n	8016f8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	2220      	movs	r2, #32
 8016fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016fca:	2303      	movs	r3, #3
 8016fcc:	e062      	b.n	8017094 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	f003 0304 	and.w	r3, r3, #4
 8016fd8:	2b04      	cmp	r3, #4
 8016fda:	d149      	bne.n	8017070 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016fe0:	9300      	str	r3, [sp, #0]
 8016fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	f000 f856 	bl	801709c <UART_WaitOnFlagUntilTimeout>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d03c      	beq.n	8017070 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ffe:	e853 3f00 	ldrex	r3, [r3]
 8017002:	623b      	str	r3, [r7, #32]
   return(result);
 8017004:	6a3b      	ldr	r3, [r7, #32]
 8017006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801700a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	461a      	mov	r2, r3
 8017012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017014:	633b      	str	r3, [r7, #48]	@ 0x30
 8017016:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017018:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801701a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801701c:	e841 2300 	strex	r3, r2, [r1]
 8017020:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017024:	2b00      	cmp	r3, #0
 8017026:	d1e6      	bne.n	8016ff6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	3308      	adds	r3, #8
 801702e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	e853 3f00 	ldrex	r3, [r3]
 8017036:	60fb      	str	r3, [r7, #12]
   return(result);
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	f023 0301 	bic.w	r3, r3, #1
 801703e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	3308      	adds	r3, #8
 8017046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017048:	61fa      	str	r2, [r7, #28]
 801704a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801704c:	69b9      	ldr	r1, [r7, #24]
 801704e:	69fa      	ldr	r2, [r7, #28]
 8017050:	e841 2300 	strex	r3, r2, [r1]
 8017054:	617b      	str	r3, [r7, #20]
   return(result);
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d1e5      	bne.n	8017028 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	2220      	movs	r2, #32
 8017060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	2200      	movs	r2, #0
 8017068:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801706c:	2303      	movs	r3, #3
 801706e:	e011      	b.n	8017094 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	2220      	movs	r2, #32
 8017074:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	2220      	movs	r2, #32
 801707a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2200      	movs	r2, #0
 8017082:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2200      	movs	r2, #0
 8017088:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	2200      	movs	r2, #0
 801708e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8017092:	2300      	movs	r3, #0
}
 8017094:	4618      	mov	r0, r3
 8017096:	3758      	adds	r7, #88	@ 0x58
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}

0801709c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	603b      	str	r3, [r7, #0]
 80170a8:	4613      	mov	r3, r2
 80170aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80170ac:	e04f      	b.n	801714e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80170ae:	69bb      	ldr	r3, [r7, #24]
 80170b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170b4:	d04b      	beq.n	801714e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80170b6:	f7fc fa0b 	bl	80134d0 <HAL_GetTick>
 80170ba:	4602      	mov	r2, r0
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	1ad3      	subs	r3, r2, r3
 80170c0:	69ba      	ldr	r2, [r7, #24]
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d302      	bcc.n	80170cc <UART_WaitOnFlagUntilTimeout+0x30>
 80170c6:	69bb      	ldr	r3, [r7, #24]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d101      	bne.n	80170d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80170cc:	2303      	movs	r3, #3
 80170ce:	e04e      	b.n	801716e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	f003 0304 	and.w	r3, r3, #4
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d037      	beq.n	801714e <UART_WaitOnFlagUntilTimeout+0xb2>
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	2b80      	cmp	r3, #128	@ 0x80
 80170e2:	d034      	beq.n	801714e <UART_WaitOnFlagUntilTimeout+0xb2>
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	2b40      	cmp	r3, #64	@ 0x40
 80170e8:	d031      	beq.n	801714e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	69db      	ldr	r3, [r3, #28]
 80170f0:	f003 0308 	and.w	r3, r3, #8
 80170f4:	2b08      	cmp	r3, #8
 80170f6:	d110      	bne.n	801711a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	2208      	movs	r2, #8
 80170fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017100:	68f8      	ldr	r0, [r7, #12]
 8017102:	f000 f8ff 	bl	8017304 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	2208      	movs	r2, #8
 801710a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	2200      	movs	r2, #0
 8017112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8017116:	2301      	movs	r3, #1
 8017118:	e029      	b.n	801716e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	69db      	ldr	r3, [r3, #28]
 8017120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017128:	d111      	bne.n	801714e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017134:	68f8      	ldr	r0, [r7, #12]
 8017136:	f000 f8e5 	bl	8017304 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	2220      	movs	r2, #32
 801713e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	2200      	movs	r2, #0
 8017146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801714a:	2303      	movs	r3, #3
 801714c:	e00f      	b.n	801716e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	69da      	ldr	r2, [r3, #28]
 8017154:	68bb      	ldr	r3, [r7, #8]
 8017156:	4013      	ands	r3, r2
 8017158:	68ba      	ldr	r2, [r7, #8]
 801715a:	429a      	cmp	r2, r3
 801715c:	bf0c      	ite	eq
 801715e:	2301      	moveq	r3, #1
 8017160:	2300      	movne	r3, #0
 8017162:	b2db      	uxtb	r3, r3
 8017164:	461a      	mov	r2, r3
 8017166:	79fb      	ldrb	r3, [r7, #7]
 8017168:	429a      	cmp	r2, r3
 801716a:	d0a0      	beq.n	80170ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801716c:	2300      	movs	r3, #0
}
 801716e:	4618      	mov	r0, r3
 8017170:	3710      	adds	r7, #16
 8017172:	46bd      	mov	sp, r7
 8017174:	bd80      	pop	{r7, pc}
	...

08017178 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017178:	b480      	push	{r7}
 801717a:	b097      	sub	sp, #92	@ 0x5c
 801717c:	af00      	add	r7, sp, #0
 801717e:	60f8      	str	r0, [r7, #12]
 8017180:	60b9      	str	r1, [r7, #8]
 8017182:	4613      	mov	r3, r2
 8017184:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	68ba      	ldr	r2, [r7, #8]
 801718a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	88fa      	ldrh	r2, [r7, #6]
 8017190:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	88fa      	ldrh	r2, [r7, #6]
 8017198:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	2200      	movs	r2, #0
 80171a0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	689b      	ldr	r3, [r3, #8]
 80171a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80171aa:	d10e      	bne.n	80171ca <UART_Start_Receive_IT+0x52>
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	691b      	ldr	r3, [r3, #16]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d105      	bne.n	80171c0 <UART_Start_Receive_IT+0x48>
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80171ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80171be:	e02d      	b.n	801721c <UART_Start_Receive_IT+0xa4>
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	22ff      	movs	r2, #255	@ 0xff
 80171c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80171c8:	e028      	b.n	801721c <UART_Start_Receive_IT+0xa4>
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	689b      	ldr	r3, [r3, #8]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d10d      	bne.n	80171ee <UART_Start_Receive_IT+0x76>
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	691b      	ldr	r3, [r3, #16]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d104      	bne.n	80171e4 <UART_Start_Receive_IT+0x6c>
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	22ff      	movs	r2, #255	@ 0xff
 80171de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80171e2:	e01b      	b.n	801721c <UART_Start_Receive_IT+0xa4>
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	227f      	movs	r2, #127	@ 0x7f
 80171e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80171ec:	e016      	b.n	801721c <UART_Start_Receive_IT+0xa4>
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	689b      	ldr	r3, [r3, #8]
 80171f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80171f6:	d10d      	bne.n	8017214 <UART_Start_Receive_IT+0x9c>
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	691b      	ldr	r3, [r3, #16]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d104      	bne.n	801720a <UART_Start_Receive_IT+0x92>
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	227f      	movs	r2, #127	@ 0x7f
 8017204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8017208:	e008      	b.n	801721c <UART_Start_Receive_IT+0xa4>
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	223f      	movs	r2, #63	@ 0x3f
 801720e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8017212:	e003      	b.n	801721c <UART_Start_Receive_IT+0xa4>
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	2200      	movs	r2, #0
 8017218:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	2200      	movs	r2, #0
 8017220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	2222      	movs	r2, #34	@ 0x22
 8017228:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	3308      	adds	r3, #8
 8017232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017236:	e853 3f00 	ldrex	r3, [r3]
 801723a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801723e:	f043 0301 	orr.w	r3, r3, #1
 8017242:	657b      	str	r3, [r7, #84]	@ 0x54
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	3308      	adds	r3, #8
 801724a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801724c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801724e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017250:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017254:	e841 2300 	strex	r3, r2, [r1]
 8017258:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801725a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801725c:	2b00      	cmp	r3, #0
 801725e:	d1e5      	bne.n	801722c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	689b      	ldr	r3, [r3, #8]
 8017264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017268:	d107      	bne.n	801727a <UART_Start_Receive_IT+0x102>
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	691b      	ldr	r3, [r3, #16]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d103      	bne.n	801727a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	4a21      	ldr	r2, [pc, #132]	@ (80172fc <UART_Start_Receive_IT+0x184>)
 8017276:	669a      	str	r2, [r3, #104]	@ 0x68
 8017278:	e002      	b.n	8017280 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	4a20      	ldr	r2, [pc, #128]	@ (8017300 <UART_Start_Receive_IT+0x188>)
 801727e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	691b      	ldr	r3, [r3, #16]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d019      	beq.n	80172bc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801728e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017290:	e853 3f00 	ldrex	r3, [r3]
 8017294:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017298:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801729c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	461a      	mov	r2, r3
 80172a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80172a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80172a8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80172ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80172ae:	e841 2300 	strex	r3, r2, [r1]
 80172b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80172b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d1e6      	bne.n	8017288 <UART_Start_Receive_IT+0x110>
 80172ba:	e018      	b.n	80172ee <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	e853 3f00 	ldrex	r3, [r3]
 80172c8:	613b      	str	r3, [r7, #16]
   return(result);
 80172ca:	693b      	ldr	r3, [r7, #16]
 80172cc:	f043 0320 	orr.w	r3, r3, #32
 80172d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	461a      	mov	r2, r3
 80172d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172da:	623b      	str	r3, [r7, #32]
 80172dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172de:	69f9      	ldr	r1, [r7, #28]
 80172e0:	6a3a      	ldr	r2, [r7, #32]
 80172e2:	e841 2300 	strex	r3, r2, [r1]
 80172e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80172e8:	69bb      	ldr	r3, [r7, #24]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d1e6      	bne.n	80172bc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80172ee:	2300      	movs	r3, #0
}
 80172f0:	4618      	mov	r0, r3
 80172f2:	375c      	adds	r7, #92	@ 0x5c
 80172f4:	46bd      	mov	sp, r7
 80172f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fa:	4770      	bx	lr
 80172fc:	08017609 	.word	0x08017609
 8017300:	0801744d 	.word	0x0801744d

08017304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017304:	b480      	push	{r7}
 8017306:	b095      	sub	sp, #84	@ 0x54
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017314:	e853 3f00 	ldrex	r3, [r3]
 8017318:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801731c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	461a      	mov	r2, r3
 8017328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801732a:	643b      	str	r3, [r7, #64]	@ 0x40
 801732c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801732e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017330:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017332:	e841 2300 	strex	r3, r2, [r1]
 8017336:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801733a:	2b00      	cmp	r3, #0
 801733c:	d1e6      	bne.n	801730c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	3308      	adds	r3, #8
 8017344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017346:	6a3b      	ldr	r3, [r7, #32]
 8017348:	e853 3f00 	ldrex	r3, [r3]
 801734c:	61fb      	str	r3, [r7, #28]
   return(result);
 801734e:	69fb      	ldr	r3, [r7, #28]
 8017350:	f023 0301 	bic.w	r3, r3, #1
 8017354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	3308      	adds	r3, #8
 801735c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801735e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017366:	e841 2300 	strex	r3, r2, [r1]
 801736a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801736e:	2b00      	cmp	r3, #0
 8017370:	d1e5      	bne.n	801733e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017376:	2b01      	cmp	r3, #1
 8017378:	d118      	bne.n	80173ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	e853 3f00 	ldrex	r3, [r3]
 8017386:	60bb      	str	r3, [r7, #8]
   return(result);
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	f023 0310 	bic.w	r3, r3, #16
 801738e:	647b      	str	r3, [r7, #68]	@ 0x44
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	461a      	mov	r2, r3
 8017396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017398:	61bb      	str	r3, [r7, #24]
 801739a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801739c:	6979      	ldr	r1, [r7, #20]
 801739e:	69ba      	ldr	r2, [r7, #24]
 80173a0:	e841 2300 	strex	r3, r2, [r1]
 80173a4:	613b      	str	r3, [r7, #16]
   return(result);
 80173a6:	693b      	ldr	r3, [r7, #16]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d1e6      	bne.n	801737a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2220      	movs	r2, #32
 80173b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	2200      	movs	r2, #0
 80173b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	2200      	movs	r2, #0
 80173be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80173c0:	bf00      	nop
 80173c2:	3754      	adds	r7, #84	@ 0x54
 80173c4:	46bd      	mov	sp, r7
 80173c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ca:	4770      	bx	lr

080173cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b084      	sub	sp, #16
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	2200      	movs	r2, #0
 80173de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	2200      	movs	r2, #0
 80173e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80173ea:	68f8      	ldr	r0, [r7, #12]
 80173ec:	f7ff fa3e 	bl	801686c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80173f0:	bf00      	nop
 80173f2:	3710      	adds	r7, #16
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}

080173f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b088      	sub	sp, #32
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	e853 3f00 	ldrex	r3, [r3]
 801740c:	60bb      	str	r3, [r7, #8]
   return(result);
 801740e:	68bb      	ldr	r3, [r7, #8]
 8017410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017414:	61fb      	str	r3, [r7, #28]
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	461a      	mov	r2, r3
 801741c:	69fb      	ldr	r3, [r7, #28]
 801741e:	61bb      	str	r3, [r7, #24]
 8017420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017422:	6979      	ldr	r1, [r7, #20]
 8017424:	69ba      	ldr	r2, [r7, #24]
 8017426:	e841 2300 	strex	r3, r2, [r1]
 801742a:	613b      	str	r3, [r7, #16]
   return(result);
 801742c:	693b      	ldr	r3, [r7, #16]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d1e6      	bne.n	8017400 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2220      	movs	r2, #32
 8017436:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	2200      	movs	r2, #0
 801743c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f7ff fa0a 	bl	8016858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017444:	bf00      	nop
 8017446:	3720      	adds	r7, #32
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}

0801744c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b09c      	sub	sp, #112	@ 0x70
 8017450:	af00      	add	r7, sp, #0
 8017452:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801745a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017464:	2b22      	cmp	r3, #34	@ 0x22
 8017466:	f040 80be 	bne.w	80175e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017470:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017474:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8017478:	b2d9      	uxtb	r1, r3
 801747a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801747e:	b2da      	uxtb	r2, r3
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017484:	400a      	ands	r2, r1
 8017486:	b2d2      	uxtb	r2, r2
 8017488:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801748e:	1c5a      	adds	r2, r3, #1
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801749a:	b29b      	uxth	r3, r3
 801749c:	3b01      	subs	r3, #1
 801749e:	b29a      	uxth	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	f040 80a3 	bne.w	80175fa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80174bc:	e853 3f00 	ldrex	r3, [r3]
 80174c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80174c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80174c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	461a      	mov	r2, r3
 80174d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80174d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80174d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80174d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80174da:	e841 2300 	strex	r3, r2, [r1]
 80174de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80174e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d1e6      	bne.n	80174b4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	3308      	adds	r3, #8
 80174ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174f0:	e853 3f00 	ldrex	r3, [r3]
 80174f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80174f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174f8:	f023 0301 	bic.w	r3, r3, #1
 80174fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	3308      	adds	r3, #8
 8017504:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017506:	647a      	str	r2, [r7, #68]	@ 0x44
 8017508:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801750a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801750c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801750e:	e841 2300 	strex	r3, r2, [r1]
 8017512:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017516:	2b00      	cmp	r3, #0
 8017518:	d1e5      	bne.n	80174e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	2220      	movs	r2, #32
 801751e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	2200      	movs	r2, #0
 8017526:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2200      	movs	r2, #0
 801752c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	4a34      	ldr	r2, [pc, #208]	@ (8017604 <UART_RxISR_8BIT+0x1b8>)
 8017534:	4293      	cmp	r3, r2
 8017536:	d01f      	beq.n	8017578 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	685b      	ldr	r3, [r3, #4]
 801753e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017542:	2b00      	cmp	r3, #0
 8017544:	d018      	beq.n	8017578 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801754e:	e853 3f00 	ldrex	r3, [r3]
 8017552:	623b      	str	r3, [r7, #32]
   return(result);
 8017554:	6a3b      	ldr	r3, [r7, #32]
 8017556:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801755a:	663b      	str	r3, [r7, #96]	@ 0x60
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	461a      	mov	r2, r3
 8017562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017564:	633b      	str	r3, [r7, #48]	@ 0x30
 8017566:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801756a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801756c:	e841 2300 	strex	r3, r2, [r1]
 8017570:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017574:	2b00      	cmp	r3, #0
 8017576:	d1e6      	bne.n	8017546 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801757c:	2b01      	cmp	r3, #1
 801757e:	d12e      	bne.n	80175de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2200      	movs	r2, #0
 8017584:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801758c:	693b      	ldr	r3, [r7, #16]
 801758e:	e853 3f00 	ldrex	r3, [r3]
 8017592:	60fb      	str	r3, [r7, #12]
   return(result);
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	f023 0310 	bic.w	r3, r3, #16
 801759a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	461a      	mov	r2, r3
 80175a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80175a4:	61fb      	str	r3, [r7, #28]
 80175a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175a8:	69b9      	ldr	r1, [r7, #24]
 80175aa:	69fa      	ldr	r2, [r7, #28]
 80175ac:	e841 2300 	strex	r3, r2, [r1]
 80175b0:	617b      	str	r3, [r7, #20]
   return(result);
 80175b2:	697b      	ldr	r3, [r7, #20]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d1e6      	bne.n	8017586 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	69db      	ldr	r3, [r3, #28]
 80175be:	f003 0310 	and.w	r3, r3, #16
 80175c2:	2b10      	cmp	r3, #16
 80175c4:	d103      	bne.n	80175ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	2210      	movs	r2, #16
 80175cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80175d4:	4619      	mov	r1, r3
 80175d6:	6878      	ldr	r0, [r7, #4]
 80175d8:	f7ff f952 	bl	8016880 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80175dc:	e00d      	b.n	80175fa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f7ea fdaa 	bl	8002138 <HAL_UART_RxCpltCallback>
}
 80175e4:	e009      	b.n	80175fa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	8b1b      	ldrh	r3, [r3, #24]
 80175ec:	b29a      	uxth	r2, r3
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	f042 0208 	orr.w	r2, r2, #8
 80175f6:	b292      	uxth	r2, r2
 80175f8:	831a      	strh	r2, [r3, #24]
}
 80175fa:	bf00      	nop
 80175fc:	3770      	adds	r7, #112	@ 0x70
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}
 8017602:	bf00      	nop
 8017604:	40008000 	.word	0x40008000

08017608 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b09c      	sub	sp, #112	@ 0x70
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017616:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017620:	2b22      	cmp	r3, #34	@ 0x22
 8017622:	f040 80be 	bne.w	80177a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801762c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017634:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8017636:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801763a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801763e:	4013      	ands	r3, r2
 8017640:	b29a      	uxth	r2, r3
 8017642:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017644:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801764a:	1c9a      	adds	r2, r3, #2
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8017656:	b29b      	uxth	r3, r3
 8017658:	3b01      	subs	r3, #1
 801765a:	b29a      	uxth	r2, r3
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8017668:	b29b      	uxth	r3, r3
 801766a:	2b00      	cmp	r3, #0
 801766c:	f040 80a3 	bne.w	80177b6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017678:	e853 3f00 	ldrex	r3, [r3]
 801767c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801767e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017684:	667b      	str	r3, [r7, #100]	@ 0x64
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	461a      	mov	r2, r3
 801768c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801768e:	657b      	str	r3, [r7, #84]	@ 0x54
 8017690:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017692:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8017694:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017696:	e841 2300 	strex	r3, r2, [r1]
 801769a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801769c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d1e6      	bne.n	8017670 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	3308      	adds	r3, #8
 80176a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176ac:	e853 3f00 	ldrex	r3, [r3]
 80176b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80176b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176b4:	f023 0301 	bic.w	r3, r3, #1
 80176b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	3308      	adds	r3, #8
 80176c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80176c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80176c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80176c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80176ca:	e841 2300 	strex	r3, r2, [r1]
 80176ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80176d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d1e5      	bne.n	80176a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2220      	movs	r2, #32
 80176da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2200      	movs	r2, #0
 80176e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	2200      	movs	r2, #0
 80176e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	4a34      	ldr	r2, [pc, #208]	@ (80177c0 <UART_RxISR_16BIT+0x1b8>)
 80176f0:	4293      	cmp	r3, r2
 80176f2:	d01f      	beq.n	8017734 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	685b      	ldr	r3, [r3, #4]
 80176fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d018      	beq.n	8017734 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017708:	6a3b      	ldr	r3, [r7, #32]
 801770a:	e853 3f00 	ldrex	r3, [r3]
 801770e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017710:	69fb      	ldr	r3, [r7, #28]
 8017712:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017716:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	461a      	mov	r2, r3
 801771e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017722:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017728:	e841 2300 	strex	r3, r2, [r1]
 801772c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017730:	2b00      	cmp	r3, #0
 8017732:	d1e6      	bne.n	8017702 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017738:	2b01      	cmp	r3, #1
 801773a:	d12e      	bne.n	801779a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	2200      	movs	r2, #0
 8017740:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	e853 3f00 	ldrex	r3, [r3]
 801774e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	f023 0310 	bic.w	r3, r3, #16
 8017756:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	461a      	mov	r2, r3
 801775e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017760:	61bb      	str	r3, [r7, #24]
 8017762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017764:	6979      	ldr	r1, [r7, #20]
 8017766:	69ba      	ldr	r2, [r7, #24]
 8017768:	e841 2300 	strex	r3, r2, [r1]
 801776c:	613b      	str	r3, [r7, #16]
   return(result);
 801776e:	693b      	ldr	r3, [r7, #16]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d1e6      	bne.n	8017742 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	69db      	ldr	r3, [r3, #28]
 801777a:	f003 0310 	and.w	r3, r3, #16
 801777e:	2b10      	cmp	r3, #16
 8017780:	d103      	bne.n	801778a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	2210      	movs	r2, #16
 8017788:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8017790:	4619      	mov	r1, r3
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f7ff f874 	bl	8016880 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017798:	e00d      	b.n	80177b6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f7ea fccc 	bl	8002138 <HAL_UART_RxCpltCallback>
}
 80177a0:	e009      	b.n	80177b6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	8b1b      	ldrh	r3, [r3, #24]
 80177a8:	b29a      	uxth	r2, r3
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	f042 0208 	orr.w	r2, r2, #8
 80177b2:	b292      	uxth	r2, r2
 80177b4:	831a      	strh	r2, [r3, #24]
}
 80177b6:	bf00      	nop
 80177b8:	3770      	adds	r7, #112	@ 0x70
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}
 80177be:	bf00      	nop
 80177c0:	40008000 	.word	0x40008000

080177c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80177c4:	b480      	push	{r7}
 80177c6:	b083      	sub	sp, #12
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80177cc:	bf00      	nop
 80177ce:	370c      	adds	r7, #12
 80177d0:	46bd      	mov	sp, r7
 80177d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d6:	4770      	bx	lr

080177d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80177d8:	b480      	push	{r7}
 80177da:	b085      	sub	sp, #20
 80177dc:	af00      	add	r7, sp, #0
 80177de:	4603      	mov	r3, r0
 80177e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80177e2:	2300      	movs	r3, #0
 80177e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80177e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80177ea:	2b84      	cmp	r3, #132	@ 0x84
 80177ec:	d005      	beq.n	80177fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80177ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	4413      	add	r3, r2
 80177f6:	3303      	adds	r3, #3
 80177f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80177fa:	68fb      	ldr	r3, [r7, #12]
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3714      	adds	r7, #20
 8017800:	46bd      	mov	sp, r7
 8017802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017806:	4770      	bx	lr

08017808 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017808:	b580      	push	{r7, lr}
 801780a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801780c:	f000 fe4e 	bl	80184ac <vTaskStartScheduler>
  
  return osOK;
 8017810:	2300      	movs	r3, #0
}
 8017812:	4618      	mov	r0, r3
 8017814:	bd80      	pop	{r7, pc}

08017816 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017818:	b089      	sub	sp, #36	@ 0x24
 801781a:	af04      	add	r7, sp, #16
 801781c:	6078      	str	r0, [r7, #4]
 801781e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	695b      	ldr	r3, [r3, #20]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d020      	beq.n	801786a <osThreadCreate+0x54>
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	699b      	ldr	r3, [r3, #24]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d01c      	beq.n	801786a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	685c      	ldr	r4, [r3, #4]
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	691e      	ldr	r6, [r3, #16]
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017842:	4618      	mov	r0, r3
 8017844:	f7ff ffc8 	bl	80177d8 <makeFreeRtosPriority>
 8017848:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	695b      	ldr	r3, [r3, #20]
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017852:	9202      	str	r2, [sp, #8]
 8017854:	9301      	str	r3, [sp, #4]
 8017856:	9100      	str	r1, [sp, #0]
 8017858:	683b      	ldr	r3, [r7, #0]
 801785a:	4632      	mov	r2, r6
 801785c:	4629      	mov	r1, r5
 801785e:	4620      	mov	r0, r4
 8017860:	f000 fc3f 	bl	80180e2 <xTaskCreateStatic>
 8017864:	4603      	mov	r3, r0
 8017866:	60fb      	str	r3, [r7, #12]
 8017868:	e01c      	b.n	80178a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	685c      	ldr	r4, [r3, #4]
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017876:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801787e:	4618      	mov	r0, r3
 8017880:	f7ff ffaa 	bl	80177d8 <makeFreeRtosPriority>
 8017884:	4602      	mov	r2, r0
 8017886:	f107 030c 	add.w	r3, r7, #12
 801788a:	9301      	str	r3, [sp, #4]
 801788c:	9200      	str	r2, [sp, #0]
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	4632      	mov	r2, r6
 8017892:	4629      	mov	r1, r5
 8017894:	4620      	mov	r0, r4
 8017896:	f000 fc84 	bl	80181a2 <xTaskCreate>
 801789a:	4603      	mov	r3, r0
 801789c:	2b01      	cmp	r3, #1
 801789e:	d001      	beq.n	80178a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80178a0:	2300      	movs	r3, #0
 80178a2:	e000      	b.n	80178a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80178a4:	68fb      	ldr	r3, [r7, #12]
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3714      	adds	r7, #20
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080178ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80178ae:	b580      	push	{r7, lr}
 80178b0:	b084      	sub	sp, #16
 80178b2:	af00      	add	r7, sp, #0
 80178b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d001      	beq.n	80178c4 <osDelay+0x16>
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	e000      	b.n	80178c6 <osDelay+0x18>
 80178c4:	2301      	movs	r3, #1
 80178c6:	4618      	mov	r0, r3
 80178c8:	f000 fdba 	bl	8018440 <vTaskDelay>
  
  return osOK;
 80178cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3710      	adds	r7, #16
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80178d6:	b480      	push	{r7}
 80178d8:	b083      	sub	sp, #12
 80178da:	af00      	add	r7, sp, #0
 80178dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f103 0208 	add.w	r2, r3, #8
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f04f 32ff 	mov.w	r2, #4294967295
 80178ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f103 0208 	add.w	r2, r3, #8
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	f103 0208 	add.w	r2, r3, #8
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	2200      	movs	r2, #0
 8017908:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801790a:	bf00      	nop
 801790c:	370c      	adds	r7, #12
 801790e:	46bd      	mov	sp, r7
 8017910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017914:	4770      	bx	lr

08017916 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017916:	b480      	push	{r7}
 8017918:	b083      	sub	sp, #12
 801791a:	af00      	add	r7, sp, #0
 801791c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2200      	movs	r2, #0
 8017922:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017924:	bf00      	nop
 8017926:	370c      	adds	r7, #12
 8017928:	46bd      	mov	sp, r7
 801792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792e:	4770      	bx	lr

08017930 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017930:	b480      	push	{r7}
 8017932:	b085      	sub	sp, #20
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
 8017938:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	685b      	ldr	r3, [r3, #4]
 801793e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	68fa      	ldr	r2, [r7, #12]
 8017944:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	689a      	ldr	r2, [r3, #8]
 801794a:	683b      	ldr	r3, [r7, #0]
 801794c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	689b      	ldr	r3, [r3, #8]
 8017952:	683a      	ldr	r2, [r7, #0]
 8017954:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	683a      	ldr	r2, [r7, #0]
 801795a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	687a      	ldr	r2, [r7, #4]
 8017960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	1c5a      	adds	r2, r3, #1
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	601a      	str	r2, [r3, #0]
}
 801796c:	bf00      	nop
 801796e:	3714      	adds	r7, #20
 8017970:	46bd      	mov	sp, r7
 8017972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017976:	4770      	bx	lr

08017978 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017978:	b480      	push	{r7}
 801797a:	b085      	sub	sp, #20
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017982:	683b      	ldr	r3, [r7, #0]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801798e:	d103      	bne.n	8017998 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	691b      	ldr	r3, [r3, #16]
 8017994:	60fb      	str	r3, [r7, #12]
 8017996:	e00c      	b.n	80179b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	3308      	adds	r3, #8
 801799c:	60fb      	str	r3, [r7, #12]
 801799e:	e002      	b.n	80179a6 <vListInsert+0x2e>
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	685b      	ldr	r3, [r3, #4]
 80179a4:	60fb      	str	r3, [r7, #12]
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	68ba      	ldr	r2, [r7, #8]
 80179ae:	429a      	cmp	r2, r3
 80179b0:	d2f6      	bcs.n	80179a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	685a      	ldr	r2, [r3, #4]
 80179b6:	683b      	ldr	r3, [r7, #0]
 80179b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	683a      	ldr	r2, [r7, #0]
 80179c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80179c2:	683b      	ldr	r3, [r7, #0]
 80179c4:	68fa      	ldr	r2, [r7, #12]
 80179c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	683a      	ldr	r2, [r7, #0]
 80179cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	687a      	ldr	r2, [r7, #4]
 80179d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	1c5a      	adds	r2, r3, #1
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	601a      	str	r2, [r3, #0]
}
 80179de:	bf00      	nop
 80179e0:	3714      	adds	r7, #20
 80179e2:	46bd      	mov	sp, r7
 80179e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e8:	4770      	bx	lr

080179ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80179ea:	b480      	push	{r7}
 80179ec:	b085      	sub	sp, #20
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	691b      	ldr	r3, [r3, #16]
 80179f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	687a      	ldr	r2, [r7, #4]
 80179fe:	6892      	ldr	r2, [r2, #8]
 8017a00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	689b      	ldr	r3, [r3, #8]
 8017a06:	687a      	ldr	r2, [r7, #4]
 8017a08:	6852      	ldr	r2, [r2, #4]
 8017a0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	685b      	ldr	r3, [r3, #4]
 8017a10:	687a      	ldr	r2, [r7, #4]
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d103      	bne.n	8017a1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	689a      	ldr	r2, [r3, #8]
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	2200      	movs	r2, #0
 8017a22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	1e5a      	subs	r2, r3, #1
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	681b      	ldr	r3, [r3, #0]
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3714      	adds	r7, #20
 8017a36:	46bd      	mov	sp, r7
 8017a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3c:	4770      	bx	lr

08017a3e <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8017a3e:	b580      	push	{r7, lr}
 8017a40:	b08c      	sub	sp, #48	@ 0x30
 8017a42:	af02      	add	r7, sp, #8
 8017a44:	60f8      	str	r0, [r7, #12]
 8017a46:	60b9      	str	r1, [r7, #8]
 8017a48:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	2b01      	cmp	r3, #1
 8017a4e:	d111      	bne.n	8017a74 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8017a50:	2301      	movs	r3, #1
 8017a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	2b04      	cmp	r3, #4
 8017a5a:	d81d      	bhi.n	8017a98 <xStreamBufferGenericCreate+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a60:	f383 8811 	msr	BASEPRI, r3
 8017a64:	f3bf 8f6f 	isb	sy
 8017a68:	f3bf 8f4f 	dsb	sy
 8017a6c:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017a6e:	bf00      	nop
 8017a70:	bf00      	nop
 8017a72:	e7fd      	b.n	8017a70 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8017a74:	2300      	movs	r3, #0
 8017a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d10b      	bne.n	8017a98 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8017a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a84:	f383 8811 	msr	BASEPRI, r3
 8017a88:	f3bf 8f6f 	isb	sy
 8017a8c:	f3bf 8f4f 	dsb	sy
 8017a90:	61bb      	str	r3, [r7, #24]
}
 8017a92:	bf00      	nop
 8017a94:	bf00      	nop
 8017a96:	e7fd      	b.n	8017a94 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8017a98:	68ba      	ldr	r2, [r7, #8]
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d90b      	bls.n	8017ab8 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8017aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017aa4:	f383 8811 	msr	BASEPRI, r3
 8017aa8:	f3bf 8f6f 	isb	sy
 8017aac:	f3bf 8f4f 	dsb	sy
 8017ab0:	617b      	str	r3, [r7, #20]
}
 8017ab2:	bf00      	nop
 8017ab4:	bf00      	nop
 8017ab6:	e7fd      	b.n	8017ab4 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8017ab8:	68bb      	ldr	r3, [r7, #8]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d101      	bne.n	8017ac2 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8017abe:	2301      	movs	r3, #1
 8017ac0:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	3301      	adds	r3, #1
 8017ac6:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	3320      	adds	r3, #32
 8017acc:	4618      	mov	r0, r3
 8017ace:	f001 fcf5 	bl	80194bc <pvPortMalloc>
 8017ad2:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8017ad4:	6a3b      	ldr	r3, [r7, #32]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d00a      	beq.n	8017af0 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8017ada:	6a3b      	ldr	r3, [r7, #32]
 8017adc:	f103 0120 	add.w	r1, r3, #32
 8017ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ae4:	9300      	str	r3, [sp, #0]
 8017ae6:	68bb      	ldr	r3, [r7, #8]
 8017ae8:	68fa      	ldr	r2, [r7, #12]
 8017aea:	6a38      	ldr	r0, [r7, #32]
 8017aec:	f000 fac5 	bl	801807a <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8017af0:	6a3b      	ldr	r3, [r7, #32]
	}
 8017af2:	4618      	mov	r0, r3
 8017af4:	3728      	adds	r7, #40	@ 0x28
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}

08017afa <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8017afa:	b480      	push	{r7}
 8017afc:	b087      	sub	sp, #28
 8017afe:	af00      	add	r7, sp, #0
 8017b00:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8017b06:	693b      	ldr	r3, [r7, #16]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d10b      	bne.n	8017b24 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8017b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b10:	f383 8811 	msr	BASEPRI, r3
 8017b14:	f3bf 8f6f 	isb	sy
 8017b18:	f3bf 8f4f 	dsb	sy
 8017b1c:	60fb      	str	r3, [r7, #12]
}
 8017b1e:	bf00      	nop
 8017b20:	bf00      	nop
 8017b22:	e7fd      	b.n	8017b20 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8017b24:	693b      	ldr	r3, [r7, #16]
 8017b26:	689a      	ldr	r2, [r3, #8]
 8017b28:	693b      	ldr	r3, [r7, #16]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8017b30:	693b      	ldr	r3, [r7, #16]
 8017b32:	685b      	ldr	r3, [r3, #4]
 8017b34:	697a      	ldr	r2, [r7, #20]
 8017b36:	1ad3      	subs	r3, r2, r3
 8017b38:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	3b01      	subs	r3, #1
 8017b3e:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8017b40:	693b      	ldr	r3, [r7, #16]
 8017b42:	689b      	ldr	r3, [r3, #8]
 8017b44:	697a      	ldr	r2, [r7, #20]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d304      	bcc.n	8017b54 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	689b      	ldr	r3, [r3, #8]
 8017b4e:	697a      	ldr	r2, [r7, #20]
 8017b50:	1ad3      	subs	r3, r2, r3
 8017b52:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8017b54:	697b      	ldr	r3, [r7, #20]
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	371c      	adds	r7, #28
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b60:	4770      	bx	lr

08017b62 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017b62:	b580      	push	{r7, lr}
 8017b64:	b090      	sub	sp, #64	@ 0x40
 8017b66:	af02      	add	r7, sp, #8
 8017b68:	60f8      	str	r0, [r7, #12]
 8017b6a:	60b9      	str	r1, [r7, #8]
 8017b6c:	607a      	str	r2, [r7, #4]
 8017b6e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d10b      	bne.n	8017b96 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8017b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b82:	f383 8811 	msr	BASEPRI, r3
 8017b86:	f3bf 8f6f 	isb	sy
 8017b8a:	f3bf 8f4f 	dsb	sy
 8017b8e:	623b      	str	r3, [r7, #32]
}
 8017b90:	bf00      	nop
 8017b92:	bf00      	nop
 8017b94:	e7fd      	b.n	8017b92 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8017b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d10b      	bne.n	8017bb4 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8017b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ba0:	f383 8811 	msr	BASEPRI, r3
 8017ba4:	f3bf 8f6f 	isb	sy
 8017ba8:	f3bf 8f4f 	dsb	sy
 8017bac:	61fb      	str	r3, [r7, #28]
}
 8017bae:	bf00      	nop
 8017bb0:	bf00      	nop
 8017bb2:	e7fd      	b.n	8017bb0 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8017bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bb6:	7f1b      	ldrb	r3, [r3, #28]
 8017bb8:	f003 0301 	and.w	r3, r3, #1
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d002      	beq.n	8017bc6 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8017bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bc2:	3304      	adds	r3, #4
 8017bc4:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8017bc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017bc8:	f7ff ff97 	bl	8017afa <xStreamBufferSpacesAvailable>
 8017bcc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8017bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bd0:	9300      	str	r3, [sp, #0]
 8017bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bd4:	687a      	ldr	r2, [r7, #4]
 8017bd6:	68b9      	ldr	r1, [r7, #8]
 8017bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017bda:	f000 f835 	bl	8017c48 <prvWriteMessageToBuffer>
 8017bde:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8017be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d02b      	beq.n	8017c3e <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8017be6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017be8:	f000 fa27 	bl	801803a <prvBytesInBuffer>
 8017bec:	4602      	mov	r2, r0
 8017bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bf0:	68db      	ldr	r3, [r3, #12]
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	d323      	bcc.n	8017c3e <xStreamBufferSendFromISR+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8017bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017bfe:	f383 8811 	msr	BASEPRI, r3
 8017c02:	f3bf 8f6f 	isb	sy
 8017c06:	f3bf 8f4f 	dsb	sy
 8017c0a:	61ba      	str	r2, [r7, #24]
 8017c0c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017c0e:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8017c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8017c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c14:	691b      	ldr	r3, [r3, #16]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d00b      	beq.n	8017c32 <xStreamBufferSendFromISR+0xd0>
 8017c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c1c:	6918      	ldr	r0, [r3, #16]
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	9300      	str	r3, [sp, #0]
 8017c22:	2300      	movs	r3, #0
 8017c24:	2200      	movs	r2, #0
 8017c26:	2100      	movs	r1, #0
 8017c28:	f001 f882 	bl	8018d30 <xTaskGenericNotifyFromISR>
 8017c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c2e:	2200      	movs	r2, #0
 8017c30:	611a      	str	r2, [r3, #16]
 8017c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017c3c:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8017c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	3738      	adds	r7, #56	@ 0x38
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}

08017c48 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b086      	sub	sp, #24
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	60f8      	str	r0, [r7, #12]
 8017c50:	60b9      	str	r1, [r7, #8]
 8017c52:	607a      	str	r2, [r7, #4]
 8017c54:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d102      	bne.n	8017c62 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	617b      	str	r3, [r7, #20]
 8017c60:	e01d      	b.n	8017c9e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	7f1b      	ldrb	r3, [r3, #28]
 8017c66:	f003 0301 	and.w	r3, r3, #1
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d108      	bne.n	8017c80 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8017c6e:	2301      	movs	r3, #1
 8017c70:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8017c72:	687a      	ldr	r2, [r7, #4]
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	4293      	cmp	r3, r2
 8017c78:	bf28      	it	cs
 8017c7a:	4613      	movcs	r3, r2
 8017c7c:	607b      	str	r3, [r7, #4]
 8017c7e:	e00e      	b.n	8017c9e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8017c80:	683a      	ldr	r2, [r7, #0]
 8017c82:	6a3b      	ldr	r3, [r7, #32]
 8017c84:	429a      	cmp	r2, r3
 8017c86:	d308      	bcc.n	8017c9a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8017c88:	2301      	movs	r3, #1
 8017c8a:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8017c8c:	1d3b      	adds	r3, r7, #4
 8017c8e:	2204      	movs	r2, #4
 8017c90:	4619      	mov	r1, r3
 8017c92:	68f8      	ldr	r0, [r7, #12]
 8017c94:	f000 f8df 	bl	8017e56 <prvWriteBytesToBuffer>
 8017c98:	e001      	b.n	8017c9e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d007      	beq.n	8017cb4 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	68b9      	ldr	r1, [r7, #8]
 8017caa:	68f8      	ldr	r0, [r7, #12]
 8017cac:	f000 f8d3 	bl	8017e56 <prvWriteBytesToBuffer>
 8017cb0:	6138      	str	r0, [r7, #16]
 8017cb2:	e001      	b.n	8017cb8 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8017cb8:	693b      	ldr	r3, [r7, #16]
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	3718      	adds	r7, #24
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}

08017cc2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8017cc2:	b580      	push	{r7, lr}
 8017cc4:	b08e      	sub	sp, #56	@ 0x38
 8017cc6:	af02      	add	r7, sp, #8
 8017cc8:	60f8      	str	r0, [r7, #12]
 8017cca:	60b9      	str	r1, [r7, #8]
 8017ccc:	607a      	str	r2, [r7, #4]
 8017cce:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d10b      	bne.n	8017cf6 <xStreamBufferReceive+0x34>
	__asm volatile
 8017cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ce2:	f383 8811 	msr	BASEPRI, r3
 8017ce6:	f3bf 8f6f 	isb	sy
 8017cea:	f3bf 8f4f 	dsb	sy
 8017cee:	61fb      	str	r3, [r7, #28]
}
 8017cf0:	bf00      	nop
 8017cf2:	bf00      	nop
 8017cf4:	e7fd      	b.n	8017cf2 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8017cf6:	6a3b      	ldr	r3, [r7, #32]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d10b      	bne.n	8017d14 <xStreamBufferReceive+0x52>
	__asm volatile
 8017cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d00:	f383 8811 	msr	BASEPRI, r3
 8017d04:	f3bf 8f6f 	isb	sy
 8017d08:	f3bf 8f4f 	dsb	sy
 8017d0c:	61bb      	str	r3, [r7, #24]
}
 8017d0e:	bf00      	nop
 8017d10:	bf00      	nop
 8017d12:	e7fd      	b.n	8017d10 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8017d14:	6a3b      	ldr	r3, [r7, #32]
 8017d16:	7f1b      	ldrb	r3, [r3, #28]
 8017d18:	f003 0301 	and.w	r3, r3, #1
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d002      	beq.n	8017d26 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8017d20:	2304      	movs	r3, #4
 8017d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8017d24:	e001      	b.n	8017d2a <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8017d26:	2300      	movs	r3, #0
 8017d28:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d035      	beq.n	8017d9c <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8017d30:	f001 faa2 	bl	8019278 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8017d34:	6a38      	ldr	r0, [r7, #32]
 8017d36:	f000 f980 	bl	801803a <prvBytesInBuffer>
 8017d3a:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8017d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d40:	429a      	cmp	r2, r3
 8017d42:	d817      	bhi.n	8017d74 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8017d44:	2000      	movs	r0, #0
 8017d46:	f001 f8d9 	bl	8018efc <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8017d4a:	6a3b      	ldr	r3, [r7, #32]
 8017d4c:	691b      	ldr	r3, [r3, #16]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d00b      	beq.n	8017d6a <xStreamBufferReceive+0xa8>
	__asm volatile
 8017d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d56:	f383 8811 	msr	BASEPRI, r3
 8017d5a:	f3bf 8f6f 	isb	sy
 8017d5e:	f3bf 8f4f 	dsb	sy
 8017d62:	617b      	str	r3, [r7, #20]
}
 8017d64:	bf00      	nop
 8017d66:	bf00      	nop
 8017d68:	e7fd      	b.n	8017d66 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8017d6a:	f000 feaf 	bl	8018acc <xTaskGetCurrentTaskHandle>
 8017d6e:	4602      	mov	r2, r0
 8017d70:	6a3b      	ldr	r3, [r7, #32]
 8017d72:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017d74:	f001 fab2 	bl	80192dc <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8017d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	d811      	bhi.n	8017da4 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	2200      	movs	r2, #0
 8017d84:	2100      	movs	r1, #0
 8017d86:	2000      	movs	r0, #0
 8017d88:	f000 feb0 	bl	8018aec <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8017d8c:	6a3b      	ldr	r3, [r7, #32]
 8017d8e:	2200      	movs	r2, #0
 8017d90:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8017d92:	6a38      	ldr	r0, [r7, #32]
 8017d94:	f000 f951 	bl	801803a <prvBytesInBuffer>
 8017d98:	62b8      	str	r0, [r7, #40]	@ 0x28
 8017d9a:	e003      	b.n	8017da4 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8017d9c:	6a38      	ldr	r0, [r7, #32]
 8017d9e:	f000 f94c 	bl	801803a <prvBytesInBuffer>
 8017da2:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8017da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d91d      	bls.n	8017de8 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8017dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dae:	9300      	str	r3, [sp, #0]
 8017db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017db2:	687a      	ldr	r2, [r7, #4]
 8017db4:	68b9      	ldr	r1, [r7, #8]
 8017db6:	6a38      	ldr	r0, [r7, #32]
 8017db8:	f000 f81b 	bl	8017df2 <prvReadMessageFromBuffer>
 8017dbc:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8017dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d011      	beq.n	8017de8 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8017dc4:	f000 fbdc 	bl	8018580 <vTaskSuspendAll>
 8017dc8:	6a3b      	ldr	r3, [r7, #32]
 8017dca:	695b      	ldr	r3, [r3, #20]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d009      	beq.n	8017de4 <xStreamBufferReceive+0x122>
 8017dd0:	6a3b      	ldr	r3, [r7, #32]
 8017dd2:	6958      	ldr	r0, [r3, #20]
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	2100      	movs	r1, #0
 8017dda:	f000 fee7 	bl	8018bac <xTaskGenericNotify>
 8017dde:	6a3b      	ldr	r3, [r7, #32]
 8017de0:	2200      	movs	r2, #0
 8017de2:	615a      	str	r2, [r3, #20]
 8017de4:	f000 fbda 	bl	801859c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8017de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3730      	adds	r7, #48	@ 0x30
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}

08017df2 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8017df2:	b580      	push	{r7, lr}
 8017df4:	b088      	sub	sp, #32
 8017df6:	af00      	add	r7, sp, #0
 8017df8:	60f8      	str	r0, [r7, #12]
 8017dfa:	60b9      	str	r1, [r7, #8]
 8017dfc:	607a      	str	r2, [r7, #4]
 8017dfe:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8017e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d019      	beq.n	8017e3a <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8017e0c:	f107 0110 	add.w	r1, r7, #16
 8017e10:	683b      	ldr	r3, [r7, #0]
 8017e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e14:	68f8      	ldr	r0, [r7, #12]
 8017e16:	f000 f893 	bl	8017f40 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8017e1a:	693b      	ldr	r3, [r7, #16]
 8017e1c:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8017e1e:	683a      	ldr	r2, [r7, #0]
 8017e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e22:	1ad3      	subs	r3, r2, r3
 8017e24:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8017e26:	69fa      	ldr	r2, [r7, #28]
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d907      	bls.n	8017e3e <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	69ba      	ldr	r2, [r7, #24]
 8017e32:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8017e34:	2300      	movs	r3, #0
 8017e36:	61fb      	str	r3, [r7, #28]
 8017e38:	e001      	b.n	8017e3e <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	69fa      	ldr	r2, [r7, #28]
 8017e42:	68b9      	ldr	r1, [r7, #8]
 8017e44:	68f8      	ldr	r0, [r7, #12]
 8017e46:	f000 f87b 	bl	8017f40 <prvReadBytesFromBuffer>
 8017e4a:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8017e4c:	697b      	ldr	r3, [r7, #20]
}
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3720      	adds	r7, #32
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}

08017e56 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8017e56:	b580      	push	{r7, lr}
 8017e58:	b08a      	sub	sp, #40	@ 0x28
 8017e5a:	af00      	add	r7, sp, #0
 8017e5c:	60f8      	str	r0, [r7, #12]
 8017e5e:	60b9      	str	r1, [r7, #8]
 8017e60:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d10b      	bne.n	8017e80 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8017e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e6c:	f383 8811 	msr	BASEPRI, r3
 8017e70:	f3bf 8f6f 	isb	sy
 8017e74:	f3bf 8f4f 	dsb	sy
 8017e78:	61fb      	str	r3, [r7, #28]
}
 8017e7a:	bf00      	nop
 8017e7c:	bf00      	nop
 8017e7e:	e7fd      	b.n	8017e7c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	685b      	ldr	r3, [r3, #4]
 8017e84:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	689a      	ldr	r2, [r3, #8]
 8017e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e8c:	1ad3      	subs	r3, r2, r3
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	4293      	cmp	r3, r2
 8017e92:	bf28      	it	cs
 8017e94:	4613      	movcs	r3, r2
 8017e96:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8017e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017e9a:	6a3b      	ldr	r3, [r7, #32]
 8017e9c:	441a      	add	r2, r3
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	689b      	ldr	r3, [r3, #8]
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d90b      	bls.n	8017ebe <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8017ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017eaa:	f383 8811 	msr	BASEPRI, r3
 8017eae:	f3bf 8f6f 	isb	sy
 8017eb2:	f3bf 8f4f 	dsb	sy
 8017eb6:	61bb      	str	r3, [r7, #24]
}
 8017eb8:	bf00      	nop
 8017eba:	bf00      	nop
 8017ebc:	e7fd      	b.n	8017eba <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	699a      	ldr	r2, [r3, #24]
 8017ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ec4:	4413      	add	r3, r2
 8017ec6:	6a3a      	ldr	r2, [r7, #32]
 8017ec8:	68b9      	ldr	r1, [r7, #8]
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f004 fd23 	bl	801c916 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8017ed0:	687a      	ldr	r2, [r7, #4]
 8017ed2:	6a3b      	ldr	r3, [r7, #32]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d91d      	bls.n	8017f14 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8017ed8:	687a      	ldr	r2, [r7, #4]
 8017eda:	6a3b      	ldr	r3, [r7, #32]
 8017edc:	1ad2      	subs	r2, r2, r3
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	689b      	ldr	r3, [r3, #8]
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	d90b      	bls.n	8017efe <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8017ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017eea:	f383 8811 	msr	BASEPRI, r3
 8017eee:	f3bf 8f6f 	isb	sy
 8017ef2:	f3bf 8f4f 	dsb	sy
 8017ef6:	617b      	str	r3, [r7, #20]
}
 8017ef8:	bf00      	nop
 8017efa:	bf00      	nop
 8017efc:	e7fd      	b.n	8017efa <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	6998      	ldr	r0, [r3, #24]
 8017f02:	68ba      	ldr	r2, [r7, #8]
 8017f04:	6a3b      	ldr	r3, [r7, #32]
 8017f06:	18d1      	adds	r1, r2, r3
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	6a3b      	ldr	r3, [r7, #32]
 8017f0c:	1ad3      	subs	r3, r2, r3
 8017f0e:	461a      	mov	r2, r3
 8017f10:	f004 fd01 	bl	801c916 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8017f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	4413      	add	r3, r2
 8017f1a:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	689b      	ldr	r3, [r3, #8]
 8017f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f22:	429a      	cmp	r2, r3
 8017f24:	d304      	bcc.n	8017f30 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	689b      	ldr	r3, [r3, #8]
 8017f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f2c:	1ad3      	subs	r3, r2, r3
 8017f2e:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f34:	605a      	str	r2, [r3, #4]

	return xCount;
 8017f36:	687b      	ldr	r3, [r7, #4]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3728      	adds	r7, #40	@ 0x28
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}

08017f40 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b08a      	sub	sp, #40	@ 0x28
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	60f8      	str	r0, [r7, #12]
 8017f48:	60b9      	str	r1, [r7, #8]
 8017f4a:	607a      	str	r2, [r7, #4]
 8017f4c:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8017f4e:	687a      	ldr	r2, [r7, #4]
 8017f50:	683b      	ldr	r3, [r7, #0]
 8017f52:	4293      	cmp	r3, r2
 8017f54:	bf28      	it	cs
 8017f56:	4613      	movcs	r3, r2
 8017f58:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8017f5a:	6a3b      	ldr	r3, [r7, #32]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d067      	beq.n	8018030 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	689a      	ldr	r2, [r3, #8]
 8017f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f6c:	1ad3      	subs	r3, r2, r3
 8017f6e:	6a3a      	ldr	r2, [r7, #32]
 8017f70:	4293      	cmp	r3, r2
 8017f72:	bf28      	it	cs
 8017f74:	4613      	movcs	r3, r2
 8017f76:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8017f78:	69fa      	ldr	r2, [r7, #28]
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d90b      	bls.n	8017f98 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8017f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f84:	f383 8811 	msr	BASEPRI, r3
 8017f88:	f3bf 8f6f 	isb	sy
 8017f8c:	f3bf 8f4f 	dsb	sy
 8017f90:	61bb      	str	r3, [r7, #24]
}
 8017f92:	bf00      	nop
 8017f94:	bf00      	nop
 8017f96:	e7fd      	b.n	8017f94 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8017f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f9a:	69fb      	ldr	r3, [r7, #28]
 8017f9c:	441a      	add	r2, r3
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	689b      	ldr	r3, [r3, #8]
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d90b      	bls.n	8017fbe <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8017fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017faa:	f383 8811 	msr	BASEPRI, r3
 8017fae:	f3bf 8f6f 	isb	sy
 8017fb2:	f3bf 8f4f 	dsb	sy
 8017fb6:	617b      	str	r3, [r7, #20]
}
 8017fb8:	bf00      	nop
 8017fba:	bf00      	nop
 8017fbc:	e7fd      	b.n	8017fba <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	699a      	ldr	r2, [r3, #24]
 8017fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fc4:	4413      	add	r3, r2
 8017fc6:	69fa      	ldr	r2, [r7, #28]
 8017fc8:	4619      	mov	r1, r3
 8017fca:	68b8      	ldr	r0, [r7, #8]
 8017fcc:	f004 fca3 	bl	801c916 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8017fd0:	6a3a      	ldr	r2, [r7, #32]
 8017fd2:	69fb      	ldr	r3, [r7, #28]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d91a      	bls.n	801800e <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8017fd8:	6a3a      	ldr	r2, [r7, #32]
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d90b      	bls.n	8017ff8 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8017fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fe4:	f383 8811 	msr	BASEPRI, r3
 8017fe8:	f3bf 8f6f 	isb	sy
 8017fec:	f3bf 8f4f 	dsb	sy
 8017ff0:	613b      	str	r3, [r7, #16]
}
 8017ff2:	bf00      	nop
 8017ff4:	bf00      	nop
 8017ff6:	e7fd      	b.n	8017ff4 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8017ff8:	68ba      	ldr	r2, [r7, #8]
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	18d0      	adds	r0, r2, r3
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	6999      	ldr	r1, [r3, #24]
 8018002:	6a3a      	ldr	r2, [r7, #32]
 8018004:	69fb      	ldr	r3, [r7, #28]
 8018006:	1ad3      	subs	r3, r2, r3
 8018008:	461a      	mov	r2, r3
 801800a:	f004 fc84 	bl	801c916 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 801800e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018010:	6a3b      	ldr	r3, [r7, #32]
 8018012:	4413      	add	r3, r2
 8018014:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	689b      	ldr	r3, [r3, #8]
 801801a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801801c:	429a      	cmp	r2, r3
 801801e:	d304      	bcc.n	801802a <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	689b      	ldr	r3, [r3, #8]
 8018024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018026:	1ad3      	subs	r3, r2, r3
 8018028:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801802e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8018030:	6a3b      	ldr	r3, [r7, #32]
}
 8018032:	4618      	mov	r0, r3
 8018034:	3728      	adds	r7, #40	@ 0x28
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}

0801803a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 801803a:	b480      	push	{r7}
 801803c:	b085      	sub	sp, #20
 801803e:	af00      	add	r7, sp, #0
 8018040:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	689a      	ldr	r2, [r3, #8]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	4413      	add	r3, r2
 801804c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	68fa      	ldr	r2, [r7, #12]
 8018054:	1ad3      	subs	r3, r2, r3
 8018056:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	689b      	ldr	r3, [r3, #8]
 801805c:	68fa      	ldr	r2, [r7, #12]
 801805e:	429a      	cmp	r2, r3
 8018060:	d304      	bcc.n	801806c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	689b      	ldr	r3, [r3, #8]
 8018066:	68fa      	ldr	r2, [r7, #12]
 8018068:	1ad3      	subs	r3, r2, r3
 801806a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 801806c:	68fb      	ldr	r3, [r7, #12]
}
 801806e:	4618      	mov	r0, r3
 8018070:	3714      	adds	r7, #20
 8018072:	46bd      	mov	sp, r7
 8018074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018078:	4770      	bx	lr

0801807a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 801807a:	b580      	push	{r7, lr}
 801807c:	b086      	sub	sp, #24
 801807e:	af00      	add	r7, sp, #0
 8018080:	60f8      	str	r0, [r7, #12]
 8018082:	60b9      	str	r1, [r7, #8]
 8018084:	607a      	str	r2, [r7, #4]
 8018086:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8018088:	2355      	movs	r3, #85	@ 0x55
 801808a:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 801808c:	687a      	ldr	r2, [r7, #4]
 801808e:	6979      	ldr	r1, [r7, #20]
 8018090:	68b8      	ldr	r0, [r7, #8]
 8018092:	f003 fb68 	bl	801b766 <memset>
 8018096:	4602      	mov	r2, r0
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	4293      	cmp	r3, r2
 801809c:	d00b      	beq.n	80180b6 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 801809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180a2:	f383 8811 	msr	BASEPRI, r3
 80180a6:	f3bf 8f6f 	isb	sy
 80180aa:	f3bf 8f4f 	dsb	sy
 80180ae:	613b      	str	r3, [r7, #16]
}
 80180b0:	bf00      	nop
 80180b2:	bf00      	nop
 80180b4:	e7fd      	b.n	80180b2 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80180b6:	2220      	movs	r2, #32
 80180b8:	2100      	movs	r1, #0
 80180ba:	68f8      	ldr	r0, [r7, #12]
 80180bc:	f003 fb53 	bl	801b766 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	68ba      	ldr	r2, [r7, #8]
 80180c4:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	687a      	ldr	r2, [r7, #4]
 80180ca:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	683a      	ldr	r2, [r7, #0]
 80180d0:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80180d8:	771a      	strb	r2, [r3, #28]
}
 80180da:	bf00      	nop
 80180dc:	3718      	adds	r7, #24
 80180de:	46bd      	mov	sp, r7
 80180e0:	bd80      	pop	{r7, pc}

080180e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80180e2:	b580      	push	{r7, lr}
 80180e4:	b08e      	sub	sp, #56	@ 0x38
 80180e6:	af04      	add	r7, sp, #16
 80180e8:	60f8      	str	r0, [r7, #12]
 80180ea:	60b9      	str	r1, [r7, #8]
 80180ec:	607a      	str	r2, [r7, #4]
 80180ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80180f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d10b      	bne.n	801810e <xTaskCreateStatic+0x2c>
	__asm volatile
 80180f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180fa:	f383 8811 	msr	BASEPRI, r3
 80180fe:	f3bf 8f6f 	isb	sy
 8018102:	f3bf 8f4f 	dsb	sy
 8018106:	623b      	str	r3, [r7, #32]
}
 8018108:	bf00      	nop
 801810a:	bf00      	nop
 801810c:	e7fd      	b.n	801810a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801810e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018110:	2b00      	cmp	r3, #0
 8018112:	d10b      	bne.n	801812c <xTaskCreateStatic+0x4a>
	__asm volatile
 8018114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018118:	f383 8811 	msr	BASEPRI, r3
 801811c:	f3bf 8f6f 	isb	sy
 8018120:	f3bf 8f4f 	dsb	sy
 8018124:	61fb      	str	r3, [r7, #28]
}
 8018126:	bf00      	nop
 8018128:	bf00      	nop
 801812a:	e7fd      	b.n	8018128 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801812c:	23a0      	movs	r3, #160	@ 0xa0
 801812e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	2ba0      	cmp	r3, #160	@ 0xa0
 8018134:	d00b      	beq.n	801814e <xTaskCreateStatic+0x6c>
	__asm volatile
 8018136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801813a:	f383 8811 	msr	BASEPRI, r3
 801813e:	f3bf 8f6f 	isb	sy
 8018142:	f3bf 8f4f 	dsb	sy
 8018146:	61bb      	str	r3, [r7, #24]
}
 8018148:	bf00      	nop
 801814a:	bf00      	nop
 801814c:	e7fd      	b.n	801814a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801814e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018152:	2b00      	cmp	r3, #0
 8018154:	d01e      	beq.n	8018194 <xTaskCreateStatic+0xb2>
 8018156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018158:	2b00      	cmp	r3, #0
 801815a:	d01b      	beq.n	8018194 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801815c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801815e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018164:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018168:	2202      	movs	r2, #2
 801816a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801816e:	2300      	movs	r3, #0
 8018170:	9303      	str	r3, [sp, #12]
 8018172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018174:	9302      	str	r3, [sp, #8]
 8018176:	f107 0314 	add.w	r3, r7, #20
 801817a:	9301      	str	r3, [sp, #4]
 801817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	683b      	ldr	r3, [r7, #0]
 8018182:	687a      	ldr	r2, [r7, #4]
 8018184:	68b9      	ldr	r1, [r7, #8]
 8018186:	68f8      	ldr	r0, [r7, #12]
 8018188:	f000 f850 	bl	801822c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801818c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801818e:	f000 f8ed 	bl	801836c <prvAddNewTaskToReadyList>
 8018192:	e001      	b.n	8018198 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8018194:	2300      	movs	r3, #0
 8018196:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018198:	697b      	ldr	r3, [r7, #20]
	}
 801819a:	4618      	mov	r0, r3
 801819c:	3728      	adds	r7, #40	@ 0x28
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}

080181a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80181a2:	b580      	push	{r7, lr}
 80181a4:	b08c      	sub	sp, #48	@ 0x30
 80181a6:	af04      	add	r7, sp, #16
 80181a8:	60f8      	str	r0, [r7, #12]
 80181aa:	60b9      	str	r1, [r7, #8]
 80181ac:	603b      	str	r3, [r7, #0]
 80181ae:	4613      	mov	r3, r2
 80181b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80181b2:	88fb      	ldrh	r3, [r7, #6]
 80181b4:	009b      	lsls	r3, r3, #2
 80181b6:	4618      	mov	r0, r3
 80181b8:	f001 f980 	bl	80194bc <pvPortMalloc>
 80181bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80181be:	697b      	ldr	r3, [r7, #20]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d00e      	beq.n	80181e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80181c4:	20a0      	movs	r0, #160	@ 0xa0
 80181c6:	f001 f979 	bl	80194bc <pvPortMalloc>
 80181ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80181cc:	69fb      	ldr	r3, [r7, #28]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d003      	beq.n	80181da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80181d2:	69fb      	ldr	r3, [r7, #28]
 80181d4:	697a      	ldr	r2, [r7, #20]
 80181d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80181d8:	e005      	b.n	80181e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80181da:	6978      	ldr	r0, [r7, #20]
 80181dc:	f001 fa3c 	bl	8019658 <vPortFree>
 80181e0:	e001      	b.n	80181e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80181e2:	2300      	movs	r3, #0
 80181e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d017      	beq.n	801821c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80181ec:	69fb      	ldr	r3, [r7, #28]
 80181ee:	2200      	movs	r2, #0
 80181f0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80181f4:	88fa      	ldrh	r2, [r7, #6]
 80181f6:	2300      	movs	r3, #0
 80181f8:	9303      	str	r3, [sp, #12]
 80181fa:	69fb      	ldr	r3, [r7, #28]
 80181fc:	9302      	str	r3, [sp, #8]
 80181fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018200:	9301      	str	r3, [sp, #4]
 8018202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018204:	9300      	str	r3, [sp, #0]
 8018206:	683b      	ldr	r3, [r7, #0]
 8018208:	68b9      	ldr	r1, [r7, #8]
 801820a:	68f8      	ldr	r0, [r7, #12]
 801820c:	f000 f80e 	bl	801822c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018210:	69f8      	ldr	r0, [r7, #28]
 8018212:	f000 f8ab 	bl	801836c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018216:	2301      	movs	r3, #1
 8018218:	61bb      	str	r3, [r7, #24]
 801821a:	e002      	b.n	8018222 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801821c:	f04f 33ff 	mov.w	r3, #4294967295
 8018220:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018222:	69bb      	ldr	r3, [r7, #24]
	}
 8018224:	4618      	mov	r0, r3
 8018226:	3720      	adds	r7, #32
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}

0801822c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b088      	sub	sp, #32
 8018230:	af00      	add	r7, sp, #0
 8018232:	60f8      	str	r0, [r7, #12]
 8018234:	60b9      	str	r1, [r7, #8]
 8018236:	607a      	str	r2, [r7, #4]
 8018238:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801823c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018244:	3b01      	subs	r3, #1
 8018246:	009b      	lsls	r3, r3, #2
 8018248:	4413      	add	r3, r2
 801824a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801824c:	69bb      	ldr	r3, [r7, #24]
 801824e:	f023 0307 	bic.w	r3, r3, #7
 8018252:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018254:	69bb      	ldr	r3, [r7, #24]
 8018256:	f003 0307 	and.w	r3, r3, #7
 801825a:	2b00      	cmp	r3, #0
 801825c:	d00b      	beq.n	8018276 <prvInitialiseNewTask+0x4a>
	__asm volatile
 801825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018262:	f383 8811 	msr	BASEPRI, r3
 8018266:	f3bf 8f6f 	isb	sy
 801826a:	f3bf 8f4f 	dsb	sy
 801826e:	617b      	str	r3, [r7, #20]
}
 8018270:	bf00      	nop
 8018272:	bf00      	nop
 8018274:	e7fd      	b.n	8018272 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d01f      	beq.n	80182bc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801827c:	2300      	movs	r3, #0
 801827e:	61fb      	str	r3, [r7, #28]
 8018280:	e012      	b.n	80182a8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018282:	68ba      	ldr	r2, [r7, #8]
 8018284:	69fb      	ldr	r3, [r7, #28]
 8018286:	4413      	add	r3, r2
 8018288:	7819      	ldrb	r1, [r3, #0]
 801828a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801828c:	69fb      	ldr	r3, [r7, #28]
 801828e:	4413      	add	r3, r2
 8018290:	3334      	adds	r3, #52	@ 0x34
 8018292:	460a      	mov	r2, r1
 8018294:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018296:	68ba      	ldr	r2, [r7, #8]
 8018298:	69fb      	ldr	r3, [r7, #28]
 801829a:	4413      	add	r3, r2
 801829c:	781b      	ldrb	r3, [r3, #0]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d006      	beq.n	80182b0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80182a2:	69fb      	ldr	r3, [r7, #28]
 80182a4:	3301      	adds	r3, #1
 80182a6:	61fb      	str	r3, [r7, #28]
 80182a8:	69fb      	ldr	r3, [r7, #28]
 80182aa:	2b0f      	cmp	r3, #15
 80182ac:	d9e9      	bls.n	8018282 <prvInitialiseNewTask+0x56>
 80182ae:	e000      	b.n	80182b2 <prvInitialiseNewTask+0x86>
			{
				break;
 80182b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80182b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182b4:	2200      	movs	r2, #0
 80182b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80182ba:	e003      	b.n	80182c4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80182bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182be:	2200      	movs	r2, #0
 80182c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80182c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182c6:	2b06      	cmp	r3, #6
 80182c8:	d901      	bls.n	80182ce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80182ca:	2306      	movs	r3, #6
 80182cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80182ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80182d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80182d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80182d8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80182da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182dc:	2200      	movs	r2, #0
 80182de:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80182e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182e2:	3304      	adds	r3, #4
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7ff fb16 	bl	8017916 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80182ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182ec:	3318      	adds	r3, #24
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7ff fb11 	bl	8017916 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80182f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80182f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182fc:	f1c3 0207 	rsb	r2, r3, #7
 8018300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018302:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018308:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801830c:	2200      	movs	r2, #0
 801830e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018314:	2200      	movs	r2, #0
 8018316:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801831c:	334c      	adds	r3, #76	@ 0x4c
 801831e:	224c      	movs	r2, #76	@ 0x4c
 8018320:	2100      	movs	r1, #0
 8018322:	4618      	mov	r0, r3
 8018324:	f003 fa1f 	bl	801b766 <memset>
 8018328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801832a:	4a0d      	ldr	r2, [pc, #52]	@ (8018360 <prvInitialiseNewTask+0x134>)
 801832c:	651a      	str	r2, [r3, #80]	@ 0x50
 801832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018330:	4a0c      	ldr	r2, [pc, #48]	@ (8018364 <prvInitialiseNewTask+0x138>)
 8018332:	655a      	str	r2, [r3, #84]	@ 0x54
 8018334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018336:	4a0c      	ldr	r2, [pc, #48]	@ (8018368 <prvInitialiseNewTask+0x13c>)
 8018338:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801833a:	683a      	ldr	r2, [r7, #0]
 801833c:	68f9      	ldr	r1, [r7, #12]
 801833e:	69b8      	ldr	r0, [r7, #24]
 8018340:	f000 fe68 	bl	8019014 <pxPortInitialiseStack>
 8018344:	4602      	mov	r2, r0
 8018346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018348:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801834c:	2b00      	cmp	r3, #0
 801834e:	d002      	beq.n	8018356 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018356:	bf00      	nop
 8018358:	3720      	adds	r7, #32
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	20006470 	.word	0x20006470
 8018364:	200064d8 	.word	0x200064d8
 8018368:	20006540 	.word	0x20006540

0801836c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b082      	sub	sp, #8
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018374:	f000 ff80 	bl	8019278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018378:	4b2a      	ldr	r3, [pc, #168]	@ (8018424 <prvAddNewTaskToReadyList+0xb8>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	3301      	adds	r3, #1
 801837e:	4a29      	ldr	r2, [pc, #164]	@ (8018424 <prvAddNewTaskToReadyList+0xb8>)
 8018380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018382:	4b29      	ldr	r3, [pc, #164]	@ (8018428 <prvAddNewTaskToReadyList+0xbc>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d109      	bne.n	801839e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801838a:	4a27      	ldr	r2, [pc, #156]	@ (8018428 <prvAddNewTaskToReadyList+0xbc>)
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018390:	4b24      	ldr	r3, [pc, #144]	@ (8018424 <prvAddNewTaskToReadyList+0xb8>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	2b01      	cmp	r3, #1
 8018396:	d110      	bne.n	80183ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018398:	f000 fad4 	bl	8018944 <prvInitialiseTaskLists>
 801839c:	e00d      	b.n	80183ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801839e:	4b23      	ldr	r3, [pc, #140]	@ (801842c <prvAddNewTaskToReadyList+0xc0>)
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d109      	bne.n	80183ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80183a6:	4b20      	ldr	r3, [pc, #128]	@ (8018428 <prvAddNewTaskToReadyList+0xbc>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d802      	bhi.n	80183ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80183b4:	4a1c      	ldr	r2, [pc, #112]	@ (8018428 <prvAddNewTaskToReadyList+0xbc>)
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80183ba:	4b1d      	ldr	r3, [pc, #116]	@ (8018430 <prvAddNewTaskToReadyList+0xc4>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	3301      	adds	r3, #1
 80183c0:	4a1b      	ldr	r2, [pc, #108]	@ (8018430 <prvAddNewTaskToReadyList+0xc4>)
 80183c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183c8:	2201      	movs	r2, #1
 80183ca:	409a      	lsls	r2, r3
 80183cc:	4b19      	ldr	r3, [pc, #100]	@ (8018434 <prvAddNewTaskToReadyList+0xc8>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	4313      	orrs	r3, r2
 80183d2:	4a18      	ldr	r2, [pc, #96]	@ (8018434 <prvAddNewTaskToReadyList+0xc8>)
 80183d4:	6013      	str	r3, [r2, #0]
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80183da:	4613      	mov	r3, r2
 80183dc:	009b      	lsls	r3, r3, #2
 80183de:	4413      	add	r3, r2
 80183e0:	009b      	lsls	r3, r3, #2
 80183e2:	4a15      	ldr	r2, [pc, #84]	@ (8018438 <prvAddNewTaskToReadyList+0xcc>)
 80183e4:	441a      	add	r2, r3
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	3304      	adds	r3, #4
 80183ea:	4619      	mov	r1, r3
 80183ec:	4610      	mov	r0, r2
 80183ee:	f7ff fa9f 	bl	8017930 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80183f2:	f000 ff73 	bl	80192dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80183f6:	4b0d      	ldr	r3, [pc, #52]	@ (801842c <prvAddNewTaskToReadyList+0xc0>)
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d00e      	beq.n	801841c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80183fe:	4b0a      	ldr	r3, [pc, #40]	@ (8018428 <prvAddNewTaskToReadyList+0xbc>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018408:	429a      	cmp	r2, r3
 801840a:	d207      	bcs.n	801841c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801840c:	4b0b      	ldr	r3, [pc, #44]	@ (801843c <prvAddNewTaskToReadyList+0xd0>)
 801840e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018412:	601a      	str	r2, [r3, #0]
 8018414:	f3bf 8f4f 	dsb	sy
 8018418:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801841c:	bf00      	nop
 801841e:	3708      	adds	r7, #8
 8018420:	46bd      	mov	sp, r7
 8018422:	bd80      	pop	{r7, pc}
 8018424:	200015f4 	.word	0x200015f4
 8018428:	200014f4 	.word	0x200014f4
 801842c:	20001600 	.word	0x20001600
 8018430:	20001610 	.word	0x20001610
 8018434:	200015fc 	.word	0x200015fc
 8018438:	200014f8 	.word	0x200014f8
 801843c:	e000ed04 	.word	0xe000ed04

08018440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018440:	b580      	push	{r7, lr}
 8018442:	b084      	sub	sp, #16
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018448:	2300      	movs	r3, #0
 801844a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d018      	beq.n	8018484 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018452:	4b14      	ldr	r3, [pc, #80]	@ (80184a4 <vTaskDelay+0x64>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d00b      	beq.n	8018472 <vTaskDelay+0x32>
	__asm volatile
 801845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801845e:	f383 8811 	msr	BASEPRI, r3
 8018462:	f3bf 8f6f 	isb	sy
 8018466:	f3bf 8f4f 	dsb	sy
 801846a:	60bb      	str	r3, [r7, #8]
}
 801846c:	bf00      	nop
 801846e:	bf00      	nop
 8018470:	e7fd      	b.n	801846e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018472:	f000 f885 	bl	8018580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018476:	2100      	movs	r1, #0
 8018478:	6878      	ldr	r0, [r7, #4]
 801847a:	f000 fd65 	bl	8018f48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801847e:	f000 f88d 	bl	801859c <xTaskResumeAll>
 8018482:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d107      	bne.n	801849a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801848a:	4b07      	ldr	r3, [pc, #28]	@ (80184a8 <vTaskDelay+0x68>)
 801848c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018490:	601a      	str	r2, [r3, #0]
 8018492:	f3bf 8f4f 	dsb	sy
 8018496:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801849a:	bf00      	nop
 801849c:	3710      	adds	r7, #16
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}
 80184a2:	bf00      	nop
 80184a4:	2000161c 	.word	0x2000161c
 80184a8:	e000ed04 	.word	0xe000ed04

080184ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b08a      	sub	sp, #40	@ 0x28
 80184b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80184b2:	2300      	movs	r3, #0
 80184b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80184b6:	2300      	movs	r3, #0
 80184b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80184ba:	463a      	mov	r2, r7
 80184bc:	1d39      	adds	r1, r7, #4
 80184be:	f107 0308 	add.w	r3, r7, #8
 80184c2:	4618      	mov	r0, r3
 80184c4:	f7e9 fa54 	bl	8001970 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80184c8:	6839      	ldr	r1, [r7, #0]
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	68ba      	ldr	r2, [r7, #8]
 80184ce:	9202      	str	r2, [sp, #8]
 80184d0:	9301      	str	r3, [sp, #4]
 80184d2:	2300      	movs	r3, #0
 80184d4:	9300      	str	r3, [sp, #0]
 80184d6:	2300      	movs	r3, #0
 80184d8:	460a      	mov	r2, r1
 80184da:	4921      	ldr	r1, [pc, #132]	@ (8018560 <vTaskStartScheduler+0xb4>)
 80184dc:	4821      	ldr	r0, [pc, #132]	@ (8018564 <vTaskStartScheduler+0xb8>)
 80184de:	f7ff fe00 	bl	80180e2 <xTaskCreateStatic>
 80184e2:	4603      	mov	r3, r0
 80184e4:	4a20      	ldr	r2, [pc, #128]	@ (8018568 <vTaskStartScheduler+0xbc>)
 80184e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80184e8:	4b1f      	ldr	r3, [pc, #124]	@ (8018568 <vTaskStartScheduler+0xbc>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d002      	beq.n	80184f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80184f0:	2301      	movs	r3, #1
 80184f2:	617b      	str	r3, [r7, #20]
 80184f4:	e001      	b.n	80184fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80184f6:	2300      	movs	r3, #0
 80184f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80184fa:	697b      	ldr	r3, [r7, #20]
 80184fc:	2b01      	cmp	r3, #1
 80184fe:	d11b      	bne.n	8018538 <vTaskStartScheduler+0x8c>
	__asm volatile
 8018500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018504:	f383 8811 	msr	BASEPRI, r3
 8018508:	f3bf 8f6f 	isb	sy
 801850c:	f3bf 8f4f 	dsb	sy
 8018510:	613b      	str	r3, [r7, #16]
}
 8018512:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018514:	4b15      	ldr	r3, [pc, #84]	@ (801856c <vTaskStartScheduler+0xc0>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	334c      	adds	r3, #76	@ 0x4c
 801851a:	4a15      	ldr	r2, [pc, #84]	@ (8018570 <vTaskStartScheduler+0xc4>)
 801851c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801851e:	4b15      	ldr	r3, [pc, #84]	@ (8018574 <vTaskStartScheduler+0xc8>)
 8018520:	f04f 32ff 	mov.w	r2, #4294967295
 8018524:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018526:	4b14      	ldr	r3, [pc, #80]	@ (8018578 <vTaskStartScheduler+0xcc>)
 8018528:	2201      	movs	r2, #1
 801852a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801852c:	4b13      	ldr	r3, [pc, #76]	@ (801857c <vTaskStartScheduler+0xd0>)
 801852e:	2200      	movs	r2, #0
 8018530:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018532:	f000 fdfd 	bl	8019130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018536:	e00f      	b.n	8018558 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801853e:	d10b      	bne.n	8018558 <vTaskStartScheduler+0xac>
	__asm volatile
 8018540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018544:	f383 8811 	msr	BASEPRI, r3
 8018548:	f3bf 8f6f 	isb	sy
 801854c:	f3bf 8f4f 	dsb	sy
 8018550:	60fb      	str	r3, [r7, #12]
}
 8018552:	bf00      	nop
 8018554:	bf00      	nop
 8018556:	e7fd      	b.n	8018554 <vTaskStartScheduler+0xa8>
}
 8018558:	bf00      	nop
 801855a:	3718      	adds	r7, #24
 801855c:	46bd      	mov	sp, r7
 801855e:	bd80      	pop	{r7, pc}
 8018560:	08024b1c 	.word	0x08024b1c
 8018564:	08018915 	.word	0x08018915
 8018568:	20001618 	.word	0x20001618
 801856c:	200014f4 	.word	0x200014f4
 8018570:	20000458 	.word	0x20000458
 8018574:	20001614 	.word	0x20001614
 8018578:	20001600 	.word	0x20001600
 801857c:	200015f8 	.word	0x200015f8

08018580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018580:	b480      	push	{r7}
 8018582:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018584:	4b04      	ldr	r3, [pc, #16]	@ (8018598 <vTaskSuspendAll+0x18>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	3301      	adds	r3, #1
 801858a:	4a03      	ldr	r2, [pc, #12]	@ (8018598 <vTaskSuspendAll+0x18>)
 801858c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801858e:	bf00      	nop
 8018590:	46bd      	mov	sp, r7
 8018592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018596:	4770      	bx	lr
 8018598:	2000161c 	.word	0x2000161c

0801859c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b084      	sub	sp, #16
 80185a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80185a2:	2300      	movs	r3, #0
 80185a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80185a6:	2300      	movs	r3, #0
 80185a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80185aa:	4b42      	ldr	r3, [pc, #264]	@ (80186b4 <xTaskResumeAll+0x118>)
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d10b      	bne.n	80185ca <xTaskResumeAll+0x2e>
	__asm volatile
 80185b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185b6:	f383 8811 	msr	BASEPRI, r3
 80185ba:	f3bf 8f6f 	isb	sy
 80185be:	f3bf 8f4f 	dsb	sy
 80185c2:	603b      	str	r3, [r7, #0]
}
 80185c4:	bf00      	nop
 80185c6:	bf00      	nop
 80185c8:	e7fd      	b.n	80185c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80185ca:	f000 fe55 	bl	8019278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80185ce:	4b39      	ldr	r3, [pc, #228]	@ (80186b4 <xTaskResumeAll+0x118>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	3b01      	subs	r3, #1
 80185d4:	4a37      	ldr	r2, [pc, #220]	@ (80186b4 <xTaskResumeAll+0x118>)
 80185d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80185d8:	4b36      	ldr	r3, [pc, #216]	@ (80186b4 <xTaskResumeAll+0x118>)
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d161      	bne.n	80186a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80185e0:	4b35      	ldr	r3, [pc, #212]	@ (80186b8 <xTaskResumeAll+0x11c>)
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d05d      	beq.n	80186a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80185e8:	e02e      	b.n	8018648 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185ea:	4b34      	ldr	r3, [pc, #208]	@ (80186bc <xTaskResumeAll+0x120>)
 80185ec:	68db      	ldr	r3, [r3, #12]
 80185ee:	68db      	ldr	r3, [r3, #12]
 80185f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	3318      	adds	r3, #24
 80185f6:	4618      	mov	r0, r3
 80185f8:	f7ff f9f7 	bl	80179ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	3304      	adds	r3, #4
 8018600:	4618      	mov	r0, r3
 8018602:	f7ff f9f2 	bl	80179ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801860a:	2201      	movs	r2, #1
 801860c:	409a      	lsls	r2, r3
 801860e:	4b2c      	ldr	r3, [pc, #176]	@ (80186c0 <xTaskResumeAll+0x124>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	4313      	orrs	r3, r2
 8018614:	4a2a      	ldr	r2, [pc, #168]	@ (80186c0 <xTaskResumeAll+0x124>)
 8018616:	6013      	str	r3, [r2, #0]
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801861c:	4613      	mov	r3, r2
 801861e:	009b      	lsls	r3, r3, #2
 8018620:	4413      	add	r3, r2
 8018622:	009b      	lsls	r3, r3, #2
 8018624:	4a27      	ldr	r2, [pc, #156]	@ (80186c4 <xTaskResumeAll+0x128>)
 8018626:	441a      	add	r2, r3
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	3304      	adds	r3, #4
 801862c:	4619      	mov	r1, r3
 801862e:	4610      	mov	r0, r2
 8018630:	f7ff f97e 	bl	8017930 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018638:	4b23      	ldr	r3, [pc, #140]	@ (80186c8 <xTaskResumeAll+0x12c>)
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801863e:	429a      	cmp	r2, r3
 8018640:	d302      	bcc.n	8018648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018642:	4b22      	ldr	r3, [pc, #136]	@ (80186cc <xTaskResumeAll+0x130>)
 8018644:	2201      	movs	r2, #1
 8018646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018648:	4b1c      	ldr	r3, [pc, #112]	@ (80186bc <xTaskResumeAll+0x120>)
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d1cc      	bne.n	80185ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d001      	beq.n	801865a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018656:	f000 fa19 	bl	8018a8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801865a:	4b1d      	ldr	r3, [pc, #116]	@ (80186d0 <xTaskResumeAll+0x134>)
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d010      	beq.n	8018688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018666:	f000 f837 	bl	80186d8 <xTaskIncrementTick>
 801866a:	4603      	mov	r3, r0
 801866c:	2b00      	cmp	r3, #0
 801866e:	d002      	beq.n	8018676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018670:	4b16      	ldr	r3, [pc, #88]	@ (80186cc <xTaskResumeAll+0x130>)
 8018672:	2201      	movs	r2, #1
 8018674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	3b01      	subs	r3, #1
 801867a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d1f1      	bne.n	8018666 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018682:	4b13      	ldr	r3, [pc, #76]	@ (80186d0 <xTaskResumeAll+0x134>)
 8018684:	2200      	movs	r2, #0
 8018686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018688:	4b10      	ldr	r3, [pc, #64]	@ (80186cc <xTaskResumeAll+0x130>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d009      	beq.n	80186a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018690:	2301      	movs	r3, #1
 8018692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018694:	4b0f      	ldr	r3, [pc, #60]	@ (80186d4 <xTaskResumeAll+0x138>)
 8018696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801869a:	601a      	str	r2, [r3, #0]
 801869c:	f3bf 8f4f 	dsb	sy
 80186a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80186a4:	f000 fe1a 	bl	80192dc <vPortExitCritical>

	return xAlreadyYielded;
 80186a8:	68bb      	ldr	r3, [r7, #8]
}
 80186aa:	4618      	mov	r0, r3
 80186ac:	3710      	adds	r7, #16
 80186ae:	46bd      	mov	sp, r7
 80186b0:	bd80      	pop	{r7, pc}
 80186b2:	bf00      	nop
 80186b4:	2000161c 	.word	0x2000161c
 80186b8:	200015f4 	.word	0x200015f4
 80186bc:	200015b4 	.word	0x200015b4
 80186c0:	200015fc 	.word	0x200015fc
 80186c4:	200014f8 	.word	0x200014f8
 80186c8:	200014f4 	.word	0x200014f4
 80186cc:	20001608 	.word	0x20001608
 80186d0:	20001604 	.word	0x20001604
 80186d4:	e000ed04 	.word	0xe000ed04

080186d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b086      	sub	sp, #24
 80186dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80186de:	2300      	movs	r3, #0
 80186e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80186e2:	4b4f      	ldr	r3, [pc, #316]	@ (8018820 <xTaskIncrementTick+0x148>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	f040 808f 	bne.w	801880a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80186ec:	4b4d      	ldr	r3, [pc, #308]	@ (8018824 <xTaskIncrementTick+0x14c>)
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	3301      	adds	r3, #1
 80186f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80186f4:	4a4b      	ldr	r2, [pc, #300]	@ (8018824 <xTaskIncrementTick+0x14c>)
 80186f6:	693b      	ldr	r3, [r7, #16]
 80186f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80186fa:	693b      	ldr	r3, [r7, #16]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d121      	bne.n	8018744 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8018700:	4b49      	ldr	r3, [pc, #292]	@ (8018828 <xTaskIncrementTick+0x150>)
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d00b      	beq.n	8018722 <xTaskIncrementTick+0x4a>
	__asm volatile
 801870a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801870e:	f383 8811 	msr	BASEPRI, r3
 8018712:	f3bf 8f6f 	isb	sy
 8018716:	f3bf 8f4f 	dsb	sy
 801871a:	603b      	str	r3, [r7, #0]
}
 801871c:	bf00      	nop
 801871e:	bf00      	nop
 8018720:	e7fd      	b.n	801871e <xTaskIncrementTick+0x46>
 8018722:	4b41      	ldr	r3, [pc, #260]	@ (8018828 <xTaskIncrementTick+0x150>)
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	60fb      	str	r3, [r7, #12]
 8018728:	4b40      	ldr	r3, [pc, #256]	@ (801882c <xTaskIncrementTick+0x154>)
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	4a3e      	ldr	r2, [pc, #248]	@ (8018828 <xTaskIncrementTick+0x150>)
 801872e:	6013      	str	r3, [r2, #0]
 8018730:	4a3e      	ldr	r2, [pc, #248]	@ (801882c <xTaskIncrementTick+0x154>)
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	6013      	str	r3, [r2, #0]
 8018736:	4b3e      	ldr	r3, [pc, #248]	@ (8018830 <xTaskIncrementTick+0x158>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	3301      	adds	r3, #1
 801873c:	4a3c      	ldr	r2, [pc, #240]	@ (8018830 <xTaskIncrementTick+0x158>)
 801873e:	6013      	str	r3, [r2, #0]
 8018740:	f000 f9a4 	bl	8018a8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018744:	4b3b      	ldr	r3, [pc, #236]	@ (8018834 <xTaskIncrementTick+0x15c>)
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	693a      	ldr	r2, [r7, #16]
 801874a:	429a      	cmp	r2, r3
 801874c:	d348      	bcc.n	80187e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801874e:	4b36      	ldr	r3, [pc, #216]	@ (8018828 <xTaskIncrementTick+0x150>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d104      	bne.n	8018762 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018758:	4b36      	ldr	r3, [pc, #216]	@ (8018834 <xTaskIncrementTick+0x15c>)
 801875a:	f04f 32ff 	mov.w	r2, #4294967295
 801875e:	601a      	str	r2, [r3, #0]
					break;
 8018760:	e03e      	b.n	80187e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018762:	4b31      	ldr	r3, [pc, #196]	@ (8018828 <xTaskIncrementTick+0x150>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	68db      	ldr	r3, [r3, #12]
 8018768:	68db      	ldr	r3, [r3, #12]
 801876a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	685b      	ldr	r3, [r3, #4]
 8018770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018772:	693a      	ldr	r2, [r7, #16]
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	429a      	cmp	r2, r3
 8018778:	d203      	bcs.n	8018782 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801877a:	4a2e      	ldr	r2, [pc, #184]	@ (8018834 <xTaskIncrementTick+0x15c>)
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018780:	e02e      	b.n	80187e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018782:	68bb      	ldr	r3, [r7, #8]
 8018784:	3304      	adds	r3, #4
 8018786:	4618      	mov	r0, r3
 8018788:	f7ff f92f 	bl	80179ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801878c:	68bb      	ldr	r3, [r7, #8]
 801878e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018790:	2b00      	cmp	r3, #0
 8018792:	d004      	beq.n	801879e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018794:	68bb      	ldr	r3, [r7, #8]
 8018796:	3318      	adds	r3, #24
 8018798:	4618      	mov	r0, r3
 801879a:	f7ff f926 	bl	80179ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801879e:	68bb      	ldr	r3, [r7, #8]
 80187a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187a2:	2201      	movs	r2, #1
 80187a4:	409a      	lsls	r2, r3
 80187a6:	4b24      	ldr	r3, [pc, #144]	@ (8018838 <xTaskIncrementTick+0x160>)
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	4313      	orrs	r3, r2
 80187ac:	4a22      	ldr	r2, [pc, #136]	@ (8018838 <xTaskIncrementTick+0x160>)
 80187ae:	6013      	str	r3, [r2, #0]
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80187b4:	4613      	mov	r3, r2
 80187b6:	009b      	lsls	r3, r3, #2
 80187b8:	4413      	add	r3, r2
 80187ba:	009b      	lsls	r3, r3, #2
 80187bc:	4a1f      	ldr	r2, [pc, #124]	@ (801883c <xTaskIncrementTick+0x164>)
 80187be:	441a      	add	r2, r3
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	3304      	adds	r3, #4
 80187c4:	4619      	mov	r1, r3
 80187c6:	4610      	mov	r0, r2
 80187c8:	f7ff f8b2 	bl	8017930 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80187d0:	4b1b      	ldr	r3, [pc, #108]	@ (8018840 <xTaskIncrementTick+0x168>)
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d3b9      	bcc.n	801874e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80187da:	2301      	movs	r3, #1
 80187dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80187de:	e7b6      	b.n	801874e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80187e0:	4b17      	ldr	r3, [pc, #92]	@ (8018840 <xTaskIncrementTick+0x168>)
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80187e6:	4915      	ldr	r1, [pc, #84]	@ (801883c <xTaskIncrementTick+0x164>)
 80187e8:	4613      	mov	r3, r2
 80187ea:	009b      	lsls	r3, r3, #2
 80187ec:	4413      	add	r3, r2
 80187ee:	009b      	lsls	r3, r3, #2
 80187f0:	440b      	add	r3, r1
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	2b01      	cmp	r3, #1
 80187f6:	d901      	bls.n	80187fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80187f8:	2301      	movs	r3, #1
 80187fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80187fc:	4b11      	ldr	r3, [pc, #68]	@ (8018844 <xTaskIncrementTick+0x16c>)
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d007      	beq.n	8018814 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018804:	2301      	movs	r3, #1
 8018806:	617b      	str	r3, [r7, #20]
 8018808:	e004      	b.n	8018814 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801880a:	4b0f      	ldr	r3, [pc, #60]	@ (8018848 <xTaskIncrementTick+0x170>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	3301      	adds	r3, #1
 8018810:	4a0d      	ldr	r2, [pc, #52]	@ (8018848 <xTaskIncrementTick+0x170>)
 8018812:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018814:	697b      	ldr	r3, [r7, #20]
}
 8018816:	4618      	mov	r0, r3
 8018818:	3718      	adds	r7, #24
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
 801881e:	bf00      	nop
 8018820:	2000161c 	.word	0x2000161c
 8018824:	200015f8 	.word	0x200015f8
 8018828:	200015ac 	.word	0x200015ac
 801882c:	200015b0 	.word	0x200015b0
 8018830:	2000160c 	.word	0x2000160c
 8018834:	20001614 	.word	0x20001614
 8018838:	200015fc 	.word	0x200015fc
 801883c:	200014f8 	.word	0x200014f8
 8018840:	200014f4 	.word	0x200014f4
 8018844:	20001608 	.word	0x20001608
 8018848:	20001604 	.word	0x20001604

0801884c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801884c:	b480      	push	{r7}
 801884e:	b087      	sub	sp, #28
 8018850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018852:	4b2a      	ldr	r3, [pc, #168]	@ (80188fc <vTaskSwitchContext+0xb0>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d003      	beq.n	8018862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801885a:	4b29      	ldr	r3, [pc, #164]	@ (8018900 <vTaskSwitchContext+0xb4>)
 801885c:	2201      	movs	r2, #1
 801885e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018860:	e045      	b.n	80188ee <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8018862:	4b27      	ldr	r3, [pc, #156]	@ (8018900 <vTaskSwitchContext+0xb4>)
 8018864:	2200      	movs	r2, #0
 8018866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018868:	4b26      	ldr	r3, [pc, #152]	@ (8018904 <vTaskSwitchContext+0xb8>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	fab3 f383 	clz	r3, r3
 8018874:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018876:	7afb      	ldrb	r3, [r7, #11]
 8018878:	f1c3 031f 	rsb	r3, r3, #31
 801887c:	617b      	str	r3, [r7, #20]
 801887e:	4922      	ldr	r1, [pc, #136]	@ (8018908 <vTaskSwitchContext+0xbc>)
 8018880:	697a      	ldr	r2, [r7, #20]
 8018882:	4613      	mov	r3, r2
 8018884:	009b      	lsls	r3, r3, #2
 8018886:	4413      	add	r3, r2
 8018888:	009b      	lsls	r3, r3, #2
 801888a:	440b      	add	r3, r1
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d10b      	bne.n	80188aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8018892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018896:	f383 8811 	msr	BASEPRI, r3
 801889a:	f3bf 8f6f 	isb	sy
 801889e:	f3bf 8f4f 	dsb	sy
 80188a2:	607b      	str	r3, [r7, #4]
}
 80188a4:	bf00      	nop
 80188a6:	bf00      	nop
 80188a8:	e7fd      	b.n	80188a6 <vTaskSwitchContext+0x5a>
 80188aa:	697a      	ldr	r2, [r7, #20]
 80188ac:	4613      	mov	r3, r2
 80188ae:	009b      	lsls	r3, r3, #2
 80188b0:	4413      	add	r3, r2
 80188b2:	009b      	lsls	r3, r3, #2
 80188b4:	4a14      	ldr	r2, [pc, #80]	@ (8018908 <vTaskSwitchContext+0xbc>)
 80188b6:	4413      	add	r3, r2
 80188b8:	613b      	str	r3, [r7, #16]
 80188ba:	693b      	ldr	r3, [r7, #16]
 80188bc:	685b      	ldr	r3, [r3, #4]
 80188be:	685a      	ldr	r2, [r3, #4]
 80188c0:	693b      	ldr	r3, [r7, #16]
 80188c2:	605a      	str	r2, [r3, #4]
 80188c4:	693b      	ldr	r3, [r7, #16]
 80188c6:	685a      	ldr	r2, [r3, #4]
 80188c8:	693b      	ldr	r3, [r7, #16]
 80188ca:	3308      	adds	r3, #8
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d104      	bne.n	80188da <vTaskSwitchContext+0x8e>
 80188d0:	693b      	ldr	r3, [r7, #16]
 80188d2:	685b      	ldr	r3, [r3, #4]
 80188d4:	685a      	ldr	r2, [r3, #4]
 80188d6:	693b      	ldr	r3, [r7, #16]
 80188d8:	605a      	str	r2, [r3, #4]
 80188da:	693b      	ldr	r3, [r7, #16]
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	68db      	ldr	r3, [r3, #12]
 80188e0:	4a0a      	ldr	r2, [pc, #40]	@ (801890c <vTaskSwitchContext+0xc0>)
 80188e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80188e4:	4b09      	ldr	r3, [pc, #36]	@ (801890c <vTaskSwitchContext+0xc0>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	334c      	adds	r3, #76	@ 0x4c
 80188ea:	4a09      	ldr	r2, [pc, #36]	@ (8018910 <vTaskSwitchContext+0xc4>)
 80188ec:	6013      	str	r3, [r2, #0]
}
 80188ee:	bf00      	nop
 80188f0:	371c      	adds	r7, #28
 80188f2:	46bd      	mov	sp, r7
 80188f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f8:	4770      	bx	lr
 80188fa:	bf00      	nop
 80188fc:	2000161c 	.word	0x2000161c
 8018900:	20001608 	.word	0x20001608
 8018904:	200015fc 	.word	0x200015fc
 8018908:	200014f8 	.word	0x200014f8
 801890c:	200014f4 	.word	0x200014f4
 8018910:	20000458 	.word	0x20000458

08018914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b082      	sub	sp, #8
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801891c:	f000 f852 	bl	80189c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018920:	4b06      	ldr	r3, [pc, #24]	@ (801893c <prvIdleTask+0x28>)
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	2b01      	cmp	r3, #1
 8018926:	d9f9      	bls.n	801891c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018928:	4b05      	ldr	r3, [pc, #20]	@ (8018940 <prvIdleTask+0x2c>)
 801892a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801892e:	601a      	str	r2, [r3, #0]
 8018930:	f3bf 8f4f 	dsb	sy
 8018934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018938:	e7f0      	b.n	801891c <prvIdleTask+0x8>
 801893a:	bf00      	nop
 801893c:	200014f8 	.word	0x200014f8
 8018940:	e000ed04 	.word	0xe000ed04

08018944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b082      	sub	sp, #8
 8018948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801894a:	2300      	movs	r3, #0
 801894c:	607b      	str	r3, [r7, #4]
 801894e:	e00c      	b.n	801896a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018950:	687a      	ldr	r2, [r7, #4]
 8018952:	4613      	mov	r3, r2
 8018954:	009b      	lsls	r3, r3, #2
 8018956:	4413      	add	r3, r2
 8018958:	009b      	lsls	r3, r3, #2
 801895a:	4a12      	ldr	r2, [pc, #72]	@ (80189a4 <prvInitialiseTaskLists+0x60>)
 801895c:	4413      	add	r3, r2
 801895e:	4618      	mov	r0, r3
 8018960:	f7fe ffb9 	bl	80178d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	3301      	adds	r3, #1
 8018968:	607b      	str	r3, [r7, #4]
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	2b06      	cmp	r3, #6
 801896e:	d9ef      	bls.n	8018950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018970:	480d      	ldr	r0, [pc, #52]	@ (80189a8 <prvInitialiseTaskLists+0x64>)
 8018972:	f7fe ffb0 	bl	80178d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018976:	480d      	ldr	r0, [pc, #52]	@ (80189ac <prvInitialiseTaskLists+0x68>)
 8018978:	f7fe ffad 	bl	80178d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801897c:	480c      	ldr	r0, [pc, #48]	@ (80189b0 <prvInitialiseTaskLists+0x6c>)
 801897e:	f7fe ffaa 	bl	80178d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018982:	480c      	ldr	r0, [pc, #48]	@ (80189b4 <prvInitialiseTaskLists+0x70>)
 8018984:	f7fe ffa7 	bl	80178d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018988:	480b      	ldr	r0, [pc, #44]	@ (80189b8 <prvInitialiseTaskLists+0x74>)
 801898a:	f7fe ffa4 	bl	80178d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801898e:	4b0b      	ldr	r3, [pc, #44]	@ (80189bc <prvInitialiseTaskLists+0x78>)
 8018990:	4a05      	ldr	r2, [pc, #20]	@ (80189a8 <prvInitialiseTaskLists+0x64>)
 8018992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018994:	4b0a      	ldr	r3, [pc, #40]	@ (80189c0 <prvInitialiseTaskLists+0x7c>)
 8018996:	4a05      	ldr	r2, [pc, #20]	@ (80189ac <prvInitialiseTaskLists+0x68>)
 8018998:	601a      	str	r2, [r3, #0]
}
 801899a:	bf00      	nop
 801899c:	3708      	adds	r7, #8
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	bf00      	nop
 80189a4:	200014f8 	.word	0x200014f8
 80189a8:	20001584 	.word	0x20001584
 80189ac:	20001598 	.word	0x20001598
 80189b0:	200015b4 	.word	0x200015b4
 80189b4:	200015c8 	.word	0x200015c8
 80189b8:	200015e0 	.word	0x200015e0
 80189bc:	200015ac 	.word	0x200015ac
 80189c0:	200015b0 	.word	0x200015b0

080189c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b082      	sub	sp, #8
 80189c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80189ca:	e019      	b.n	8018a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80189cc:	f000 fc54 	bl	8019278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189d0:	4b10      	ldr	r3, [pc, #64]	@ (8018a14 <prvCheckTasksWaitingTermination+0x50>)
 80189d2:	68db      	ldr	r3, [r3, #12]
 80189d4:	68db      	ldr	r3, [r3, #12]
 80189d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	3304      	adds	r3, #4
 80189dc:	4618      	mov	r0, r3
 80189de:	f7ff f804 	bl	80179ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 80189e2:	4b0d      	ldr	r3, [pc, #52]	@ (8018a18 <prvCheckTasksWaitingTermination+0x54>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	3b01      	subs	r3, #1
 80189e8:	4a0b      	ldr	r2, [pc, #44]	@ (8018a18 <prvCheckTasksWaitingTermination+0x54>)
 80189ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80189ec:	4b0b      	ldr	r3, [pc, #44]	@ (8018a1c <prvCheckTasksWaitingTermination+0x58>)
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	3b01      	subs	r3, #1
 80189f2:	4a0a      	ldr	r2, [pc, #40]	@ (8018a1c <prvCheckTasksWaitingTermination+0x58>)
 80189f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80189f6:	f000 fc71 	bl	80192dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80189fa:	6878      	ldr	r0, [r7, #4]
 80189fc:	f000 f810 	bl	8018a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a00:	4b06      	ldr	r3, [pc, #24]	@ (8018a1c <prvCheckTasksWaitingTermination+0x58>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d1e1      	bne.n	80189cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a08:	bf00      	nop
 8018a0a:	bf00      	nop
 8018a0c:	3708      	adds	r7, #8
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bd80      	pop	{r7, pc}
 8018a12:	bf00      	nop
 8018a14:	200015c8 	.word	0x200015c8
 8018a18:	200015f4 	.word	0x200015f4
 8018a1c:	200015dc 	.word	0x200015dc

08018a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b084      	sub	sp, #16
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	334c      	adds	r3, #76	@ 0x4c
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f003 fe85 	bl	801c73c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d108      	bne.n	8018a4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a40:	4618      	mov	r0, r3
 8018a42:	f000 fe09 	bl	8019658 <vPortFree>
				vPortFree( pxTCB );
 8018a46:	6878      	ldr	r0, [r7, #4]
 8018a48:	f000 fe06 	bl	8019658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018a4c:	e019      	b.n	8018a82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8018a54:	2b01      	cmp	r3, #1
 8018a56:	d103      	bne.n	8018a60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8018a58:	6878      	ldr	r0, [r7, #4]
 8018a5a:	f000 fdfd 	bl	8019658 <vPortFree>
	}
 8018a5e:	e010      	b.n	8018a82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8018a66:	2b02      	cmp	r3, #2
 8018a68:	d00b      	beq.n	8018a82 <prvDeleteTCB+0x62>
	__asm volatile
 8018a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a6e:	f383 8811 	msr	BASEPRI, r3
 8018a72:	f3bf 8f6f 	isb	sy
 8018a76:	f3bf 8f4f 	dsb	sy
 8018a7a:	60fb      	str	r3, [r7, #12]
}
 8018a7c:	bf00      	nop
 8018a7e:	bf00      	nop
 8018a80:	e7fd      	b.n	8018a7e <prvDeleteTCB+0x5e>
	}
 8018a82:	bf00      	nop
 8018a84:	3710      	adds	r7, #16
 8018a86:	46bd      	mov	sp, r7
 8018a88:	bd80      	pop	{r7, pc}
	...

08018a8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018a8c:	b480      	push	{r7}
 8018a8e:	b083      	sub	sp, #12
 8018a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018a92:	4b0c      	ldr	r3, [pc, #48]	@ (8018ac4 <prvResetNextTaskUnblockTime+0x38>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d104      	bne.n	8018aa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8018ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8018a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8018aa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018aa4:	e008      	b.n	8018ab8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018aa6:	4b07      	ldr	r3, [pc, #28]	@ (8018ac4 <prvResetNextTaskUnblockTime+0x38>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	68db      	ldr	r3, [r3, #12]
 8018aae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	685b      	ldr	r3, [r3, #4]
 8018ab4:	4a04      	ldr	r2, [pc, #16]	@ (8018ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8018ab6:	6013      	str	r3, [r2, #0]
}
 8018ab8:	bf00      	nop
 8018aba:	370c      	adds	r7, #12
 8018abc:	46bd      	mov	sp, r7
 8018abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac2:	4770      	bx	lr
 8018ac4:	200015ac 	.word	0x200015ac
 8018ac8:	20001614 	.word	0x20001614

08018acc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018acc:	b480      	push	{r7}
 8018ace:	b083      	sub	sp, #12
 8018ad0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018ad2:	4b05      	ldr	r3, [pc, #20]	@ (8018ae8 <xTaskGetCurrentTaskHandle+0x1c>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018ad8:	687b      	ldr	r3, [r7, #4]
	}
 8018ada:	4618      	mov	r0, r3
 8018adc:	370c      	adds	r7, #12
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae4:	4770      	bx	lr
 8018ae6:	bf00      	nop
 8018ae8:	200014f4 	.word	0x200014f4

08018aec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b086      	sub	sp, #24
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	60f8      	str	r0, [r7, #12]
 8018af4:	60b9      	str	r1, [r7, #8]
 8018af6:	607a      	str	r2, [r7, #4]
 8018af8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8018afa:	f000 fbbd 	bl	8019278 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8018afe:	4b29      	ldr	r3, [pc, #164]	@ (8018ba4 <xTaskNotifyWait+0xb8>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8018b06:	b2db      	uxtb	r3, r3
 8018b08:	2b02      	cmp	r3, #2
 8018b0a:	d01c      	beq.n	8018b46 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8018b0c:	4b25      	ldr	r3, [pc, #148]	@ (8018ba4 <xTaskNotifyWait+0xb8>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8018b14:	68fa      	ldr	r2, [r7, #12]
 8018b16:	43d2      	mvns	r2, r2
 8018b18:	400a      	ands	r2, r1
 8018b1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8018b1e:	4b21      	ldr	r3, [pc, #132]	@ (8018ba4 <xTaskNotifyWait+0xb8>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	2201      	movs	r2, #1
 8018b24:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8018b28:	683b      	ldr	r3, [r7, #0]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d00b      	beq.n	8018b46 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018b2e:	2101      	movs	r1, #1
 8018b30:	6838      	ldr	r0, [r7, #0]
 8018b32:	f000 fa09 	bl	8018f48 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8018b36:	4b1c      	ldr	r3, [pc, #112]	@ (8018ba8 <xTaskNotifyWait+0xbc>)
 8018b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b3c:	601a      	str	r2, [r3, #0]
 8018b3e:	f3bf 8f4f 	dsb	sy
 8018b42:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8018b46:	f000 fbc9 	bl	80192dc <vPortExitCritical>

		taskENTER_CRITICAL();
 8018b4a:	f000 fb95 	bl	8019278 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d005      	beq.n	8018b60 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8018b54:	4b13      	ldr	r3, [pc, #76]	@ (8018ba4 <xTaskNotifyWait+0xb8>)
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8018b60:	4b10      	ldr	r3, [pc, #64]	@ (8018ba4 <xTaskNotifyWait+0xb8>)
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8018b68:	b2db      	uxtb	r3, r3
 8018b6a:	2b02      	cmp	r3, #2
 8018b6c:	d002      	beq.n	8018b74 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	617b      	str	r3, [r7, #20]
 8018b72:	e00a      	b.n	8018b8a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8018b74:	4b0b      	ldr	r3, [pc, #44]	@ (8018ba4 <xTaskNotifyWait+0xb8>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8018b7c:	68ba      	ldr	r2, [r7, #8]
 8018b7e:	43d2      	mvns	r2, r2
 8018b80:	400a      	ands	r2, r1
 8018b82:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8018b86:	2301      	movs	r3, #1
 8018b88:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018b8a:	4b06      	ldr	r3, [pc, #24]	@ (8018ba4 <xTaskNotifyWait+0xb8>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	2200      	movs	r2, #0
 8018b90:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8018b94:	f000 fba2 	bl	80192dc <vPortExitCritical>

		return xReturn;
 8018b98:	697b      	ldr	r3, [r7, #20]
	}
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	3718      	adds	r7, #24
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bd80      	pop	{r7, pc}
 8018ba2:	bf00      	nop
 8018ba4:	200014f4 	.word	0x200014f4
 8018ba8:	e000ed04 	.word	0xe000ed04

08018bac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b08a      	sub	sp, #40	@ 0x28
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	60f8      	str	r0, [r7, #12]
 8018bb4:	60b9      	str	r1, [r7, #8]
 8018bb6:	603b      	str	r3, [r7, #0]
 8018bb8:	4613      	mov	r3, r2
 8018bba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d10b      	bne.n	8018bde <xTaskGenericNotify+0x32>
	__asm volatile
 8018bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bca:	f383 8811 	msr	BASEPRI, r3
 8018bce:	f3bf 8f6f 	isb	sy
 8018bd2:	f3bf 8f4f 	dsb	sy
 8018bd6:	61bb      	str	r3, [r7, #24]
}
 8018bd8:	bf00      	nop
 8018bda:	bf00      	nop
 8018bdc:	e7fd      	b.n	8018bda <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8018be2:	f000 fb49 	bl	8019278 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8018be6:	683b      	ldr	r3, [r7, #0]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d004      	beq.n	8018bf6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8018bec:	6a3b      	ldr	r3, [r7, #32]
 8018bee:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8018bf2:	683b      	ldr	r3, [r7, #0]
 8018bf4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018bf6:	6a3b      	ldr	r3, [r7, #32]
 8018bf8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8018bfc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018bfe:	6a3b      	ldr	r3, [r7, #32]
 8018c00:	2202      	movs	r2, #2
 8018c02:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8018c06:	79fb      	ldrb	r3, [r7, #7]
 8018c08:	2b04      	cmp	r3, #4
 8018c0a:	d82e      	bhi.n	8018c6a <xTaskGenericNotify+0xbe>
 8018c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8018c14 <xTaskGenericNotify+0x68>)
 8018c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c12:	bf00      	nop
 8018c14:	08018c8f 	.word	0x08018c8f
 8018c18:	08018c29 	.word	0x08018c29
 8018c1c:	08018c3b 	.word	0x08018c3b
 8018c20:	08018c4b 	.word	0x08018c4b
 8018c24:	08018c55 	.word	0x08018c55
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8018c28:	6a3b      	ldr	r3, [r7, #32]
 8018c2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	431a      	orrs	r2, r3
 8018c32:	6a3b      	ldr	r3, [r7, #32]
 8018c34:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8018c38:	e02c      	b.n	8018c94 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8018c3a:	6a3b      	ldr	r3, [r7, #32]
 8018c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018c40:	1c5a      	adds	r2, r3, #1
 8018c42:	6a3b      	ldr	r3, [r7, #32]
 8018c44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8018c48:	e024      	b.n	8018c94 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8018c4a:	6a3b      	ldr	r3, [r7, #32]
 8018c4c:	68ba      	ldr	r2, [r7, #8]
 8018c4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8018c52:	e01f      	b.n	8018c94 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8018c54:	7ffb      	ldrb	r3, [r7, #31]
 8018c56:	2b02      	cmp	r3, #2
 8018c58:	d004      	beq.n	8018c64 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8018c5a:	6a3b      	ldr	r3, [r7, #32]
 8018c5c:	68ba      	ldr	r2, [r7, #8]
 8018c5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8018c62:	e017      	b.n	8018c94 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8018c64:	2300      	movs	r3, #0
 8018c66:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8018c68:	e014      	b.n	8018c94 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8018c6a:	6a3b      	ldr	r3, [r7, #32]
 8018c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c74:	d00d      	beq.n	8018c92 <xTaskGenericNotify+0xe6>
	__asm volatile
 8018c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c7a:	f383 8811 	msr	BASEPRI, r3
 8018c7e:	f3bf 8f6f 	isb	sy
 8018c82:	f3bf 8f4f 	dsb	sy
 8018c86:	617b      	str	r3, [r7, #20]
}
 8018c88:	bf00      	nop
 8018c8a:	bf00      	nop
 8018c8c:	e7fd      	b.n	8018c8a <xTaskGenericNotify+0xde>
					break;
 8018c8e:	bf00      	nop
 8018c90:	e000      	b.n	8018c94 <xTaskGenericNotify+0xe8>

					break;
 8018c92:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018c94:	7ffb      	ldrb	r3, [r7, #31]
 8018c96:	2b01      	cmp	r3, #1
 8018c98:	d13a      	bne.n	8018d10 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018c9a:	6a3b      	ldr	r3, [r7, #32]
 8018c9c:	3304      	adds	r3, #4
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f7fe fea3 	bl	80179ea <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8018ca4:	6a3b      	ldr	r3, [r7, #32]
 8018ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ca8:	2201      	movs	r2, #1
 8018caa:	409a      	lsls	r2, r3
 8018cac:	4b1c      	ldr	r3, [pc, #112]	@ (8018d20 <xTaskGenericNotify+0x174>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	4313      	orrs	r3, r2
 8018cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8018d20 <xTaskGenericNotify+0x174>)
 8018cb4:	6013      	str	r3, [r2, #0]
 8018cb6:	6a3b      	ldr	r3, [r7, #32]
 8018cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018cba:	4613      	mov	r3, r2
 8018cbc:	009b      	lsls	r3, r3, #2
 8018cbe:	4413      	add	r3, r2
 8018cc0:	009b      	lsls	r3, r3, #2
 8018cc2:	4a18      	ldr	r2, [pc, #96]	@ (8018d24 <xTaskGenericNotify+0x178>)
 8018cc4:	441a      	add	r2, r3
 8018cc6:	6a3b      	ldr	r3, [r7, #32]
 8018cc8:	3304      	adds	r3, #4
 8018cca:	4619      	mov	r1, r3
 8018ccc:	4610      	mov	r0, r2
 8018cce:	f7fe fe2f 	bl	8017930 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018cd2:	6a3b      	ldr	r3, [r7, #32]
 8018cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d00b      	beq.n	8018cf2 <xTaskGenericNotify+0x146>
	__asm volatile
 8018cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cde:	f383 8811 	msr	BASEPRI, r3
 8018ce2:	f3bf 8f6f 	isb	sy
 8018ce6:	f3bf 8f4f 	dsb	sy
 8018cea:	613b      	str	r3, [r7, #16]
}
 8018cec:	bf00      	nop
 8018cee:	bf00      	nop
 8018cf0:	e7fd      	b.n	8018cee <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018cf2:	6a3b      	ldr	r3, [r7, #32]
 8018cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8018d28 <xTaskGenericNotify+0x17c>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cfc:	429a      	cmp	r2, r3
 8018cfe:	d907      	bls.n	8018d10 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8018d00:	4b0a      	ldr	r3, [pc, #40]	@ (8018d2c <xTaskGenericNotify+0x180>)
 8018d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d06:	601a      	str	r2, [r3, #0]
 8018d08:	f3bf 8f4f 	dsb	sy
 8018d0c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8018d10:	f000 fae4 	bl	80192dc <vPortExitCritical>

		return xReturn;
 8018d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8018d16:	4618      	mov	r0, r3
 8018d18:	3728      	adds	r7, #40	@ 0x28
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	200015fc 	.word	0x200015fc
 8018d24:	200014f8 	.word	0x200014f8
 8018d28:	200014f4 	.word	0x200014f4
 8018d2c:	e000ed04 	.word	0xe000ed04

08018d30 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b08e      	sub	sp, #56	@ 0x38
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	60f8      	str	r0, [r7, #12]
 8018d38:	60b9      	str	r1, [r7, #8]
 8018d3a:	603b      	str	r3, [r7, #0]
 8018d3c:	4613      	mov	r3, r2
 8018d3e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8018d40:	2301      	movs	r3, #1
 8018d42:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d10b      	bne.n	8018d62 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8018d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d4e:	f383 8811 	msr	BASEPRI, r3
 8018d52:	f3bf 8f6f 	isb	sy
 8018d56:	f3bf 8f4f 	dsb	sy
 8018d5a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018d5c:	bf00      	nop
 8018d5e:	bf00      	nop
 8018d60:	e7fd      	b.n	8018d5e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018d62:	f000 fb69 	bl	8019438 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8018d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8018d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d72:	f383 8811 	msr	BASEPRI, r3
 8018d76:	f3bf 8f6f 	isb	sy
 8018d7a:	f3bf 8f4f 	dsb	sy
 8018d7e:	623a      	str	r2, [r7, #32]
 8018d80:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8018d82:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d004      	beq.n	8018d96 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8018d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d8e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8018d92:	683b      	ldr	r3, [r7, #0]
 8018d94:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d98:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8018d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018da2:	2202      	movs	r2, #2
 8018da4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8018da8:	79fb      	ldrb	r3, [r7, #7]
 8018daa:	2b04      	cmp	r3, #4
 8018dac:	d82e      	bhi.n	8018e0c <xTaskGenericNotifyFromISR+0xdc>
 8018dae:	a201      	add	r2, pc, #4	@ (adr r2, 8018db4 <xTaskGenericNotifyFromISR+0x84>)
 8018db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018db4:	08018e31 	.word	0x08018e31
 8018db8:	08018dc9 	.word	0x08018dc9
 8018dbc:	08018ddb 	.word	0x08018ddb
 8018dc0:	08018deb 	.word	0x08018deb
 8018dc4:	08018df5 	.word	0x08018df5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8018dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dca:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8018dce:	68bb      	ldr	r3, [r7, #8]
 8018dd0:	431a      	orrs	r2, r3
 8018dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dd4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8018dd8:	e02d      	b.n	8018e36 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8018dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018de0:	1c5a      	adds	r2, r3, #1
 8018de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018de4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8018de8:	e025      	b.n	8018e36 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8018dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dec:	68ba      	ldr	r2, [r7, #8]
 8018dee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8018df2:	e020      	b.n	8018e36 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8018df4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018df8:	2b02      	cmp	r3, #2
 8018dfa:	d004      	beq.n	8018e06 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8018dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dfe:	68ba      	ldr	r2, [r7, #8]
 8018e00:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8018e04:	e017      	b.n	8018e36 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8018e06:	2300      	movs	r3, #0
 8018e08:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8018e0a:	e014      	b.n	8018e36 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8018e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e16:	d00d      	beq.n	8018e34 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8018e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e1c:	f383 8811 	msr	BASEPRI, r3
 8018e20:	f3bf 8f6f 	isb	sy
 8018e24:	f3bf 8f4f 	dsb	sy
 8018e28:	61bb      	str	r3, [r7, #24]
}
 8018e2a:	bf00      	nop
 8018e2c:	bf00      	nop
 8018e2e:	e7fd      	b.n	8018e2c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8018e30:	bf00      	nop
 8018e32:	e000      	b.n	8018e36 <xTaskGenericNotifyFromISR+0x106>
					break;
 8018e34:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018e36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8018e3a:	2b01      	cmp	r3, #1
 8018e3c:	d146      	bne.n	8018ecc <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d00b      	beq.n	8018e5e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8018e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e4a:	f383 8811 	msr	BASEPRI, r3
 8018e4e:	f3bf 8f6f 	isb	sy
 8018e52:	f3bf 8f4f 	dsb	sy
 8018e56:	617b      	str	r3, [r7, #20]
}
 8018e58:	bf00      	nop
 8018e5a:	bf00      	nop
 8018e5c:	e7fd      	b.n	8018e5a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e5e:	4b21      	ldr	r3, [pc, #132]	@ (8018ee4 <xTaskGenericNotifyFromISR+0x1b4>)
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d11c      	bne.n	8018ea0 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e68:	3304      	adds	r3, #4
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7fe fdbd 	bl	80179ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e74:	2201      	movs	r2, #1
 8018e76:	409a      	lsls	r2, r3
 8018e78:	4b1b      	ldr	r3, [pc, #108]	@ (8018ee8 <xTaskGenericNotifyFromISR+0x1b8>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	4313      	orrs	r3, r2
 8018e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8018ee8 <xTaskGenericNotifyFromISR+0x1b8>)
 8018e80:	6013      	str	r3, [r2, #0]
 8018e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e86:	4613      	mov	r3, r2
 8018e88:	009b      	lsls	r3, r3, #2
 8018e8a:	4413      	add	r3, r2
 8018e8c:	009b      	lsls	r3, r3, #2
 8018e8e:	4a17      	ldr	r2, [pc, #92]	@ (8018eec <xTaskGenericNotifyFromISR+0x1bc>)
 8018e90:	441a      	add	r2, r3
 8018e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e94:	3304      	adds	r3, #4
 8018e96:	4619      	mov	r1, r3
 8018e98:	4610      	mov	r0, r2
 8018e9a:	f7fe fd49 	bl	8017930 <vListInsertEnd>
 8018e9e:	e005      	b.n	8018eac <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ea2:	3318      	adds	r3, #24
 8018ea4:	4619      	mov	r1, r3
 8018ea6:	4812      	ldr	r0, [pc, #72]	@ (8018ef0 <xTaskGenericNotifyFromISR+0x1c0>)
 8018ea8:	f7fe fd42 	bl	8017930 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018eb0:	4b10      	ldr	r3, [pc, #64]	@ (8018ef4 <xTaskGenericNotifyFromISR+0x1c4>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	d908      	bls.n	8018ecc <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8018eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d002      	beq.n	8018ec6 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8018ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ec2:	2201      	movs	r2, #1
 8018ec4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8018ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8018ef8 <xTaskGenericNotifyFromISR+0x1c8>)
 8018ec8:	2201      	movs	r2, #1
 8018eca:	601a      	str	r2, [r3, #0]
 8018ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ece:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018ed0:	693b      	ldr	r3, [r7, #16]
 8018ed2:	f383 8811 	msr	BASEPRI, r3
}
 8018ed6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8018ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8018eda:	4618      	mov	r0, r3
 8018edc:	3738      	adds	r7, #56	@ 0x38
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	2000161c 	.word	0x2000161c
 8018ee8:	200015fc 	.word	0x200015fc
 8018eec:	200014f8 	.word	0x200014f8
 8018ef0:	200015b4 	.word	0x200015b4
 8018ef4:	200014f4 	.word	0x200014f4
 8018ef8:	20001608 	.word	0x20001608

08018efc <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b084      	sub	sp, #16
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d102      	bne.n	8018f10 <xTaskNotifyStateClear+0x14>
 8018f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8018f44 <xTaskNotifyStateClear+0x48>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	e000      	b.n	8018f12 <xTaskNotifyStateClear+0x16>
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8018f14:	f000 f9b0 	bl	8019278 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8018f18:	68bb      	ldr	r3, [r7, #8]
 8018f1a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	2b02      	cmp	r3, #2
 8018f22:	d106      	bne.n	8018f32 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	2200      	movs	r2, #0
 8018f28:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	60fb      	str	r3, [r7, #12]
 8018f30:	e001      	b.n	8018f36 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8018f32:	2300      	movs	r3, #0
 8018f34:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8018f36:	f000 f9d1 	bl	80192dc <vPortExitCritical>

		return xReturn;
 8018f3a:	68fb      	ldr	r3, [r7, #12]
	}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	3710      	adds	r7, #16
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	200014f4 	.word	0x200014f4

08018f48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b084      	sub	sp, #16
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
 8018f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018f52:	4b29      	ldr	r3, [pc, #164]	@ (8018ff8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018f58:	4b28      	ldr	r3, [pc, #160]	@ (8018ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	3304      	adds	r3, #4
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7fe fd43 	bl	80179ea <uxListRemove>
 8018f64:	4603      	mov	r3, r0
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d10b      	bne.n	8018f82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018f6a:	4b24      	ldr	r3, [pc, #144]	@ (8018ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f70:	2201      	movs	r2, #1
 8018f72:	fa02 f303 	lsl.w	r3, r2, r3
 8018f76:	43da      	mvns	r2, r3
 8018f78:	4b21      	ldr	r3, [pc, #132]	@ (8019000 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	4013      	ands	r3, r2
 8018f7e:	4a20      	ldr	r2, [pc, #128]	@ (8019000 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018f80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f88:	d10a      	bne.n	8018fa0 <prvAddCurrentTaskToDelayedList+0x58>
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d007      	beq.n	8018fa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f90:	4b1a      	ldr	r3, [pc, #104]	@ (8018ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	3304      	adds	r3, #4
 8018f96:	4619      	mov	r1, r3
 8018f98:	481a      	ldr	r0, [pc, #104]	@ (8019004 <prvAddCurrentTaskToDelayedList+0xbc>)
 8018f9a:	f7fe fcc9 	bl	8017930 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018f9e:	e026      	b.n	8018fee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018fa0:	68fa      	ldr	r2, [r7, #12]
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	4413      	add	r3, r2
 8018fa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018fa8:	4b14      	ldr	r3, [pc, #80]	@ (8018ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	68ba      	ldr	r2, [r7, #8]
 8018fae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018fb0:	68ba      	ldr	r2, [r7, #8]
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	429a      	cmp	r2, r3
 8018fb6:	d209      	bcs.n	8018fcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018fb8:	4b13      	ldr	r3, [pc, #76]	@ (8019008 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018fba:	681a      	ldr	r2, [r3, #0]
 8018fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8018ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	3304      	adds	r3, #4
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	4610      	mov	r0, r2
 8018fc6:	f7fe fcd7 	bl	8017978 <vListInsert>
}
 8018fca:	e010      	b.n	8018fee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018fcc:	4b0f      	ldr	r3, [pc, #60]	@ (801900c <prvAddCurrentTaskToDelayedList+0xc4>)
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8018ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	3304      	adds	r3, #4
 8018fd6:	4619      	mov	r1, r3
 8018fd8:	4610      	mov	r0, r2
 8018fda:	f7fe fccd 	bl	8017978 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018fde:	4b0c      	ldr	r3, [pc, #48]	@ (8019010 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	68ba      	ldr	r2, [r7, #8]
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d202      	bcs.n	8018fee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018fe8:	4a09      	ldr	r2, [pc, #36]	@ (8019010 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018fea:	68bb      	ldr	r3, [r7, #8]
 8018fec:	6013      	str	r3, [r2, #0]
}
 8018fee:	bf00      	nop
 8018ff0:	3710      	adds	r7, #16
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}
 8018ff6:	bf00      	nop
 8018ff8:	200015f8 	.word	0x200015f8
 8018ffc:	200014f4 	.word	0x200014f4
 8019000:	200015fc 	.word	0x200015fc
 8019004:	200015e0 	.word	0x200015e0
 8019008:	200015b0 	.word	0x200015b0
 801900c:	200015ac 	.word	0x200015ac
 8019010:	20001614 	.word	0x20001614

08019014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019014:	b480      	push	{r7}
 8019016:	b085      	sub	sp, #20
 8019018:	af00      	add	r7, sp, #0
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	60b9      	str	r1, [r7, #8]
 801901e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	3b04      	subs	r3, #4
 8019024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801902c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	3b04      	subs	r3, #4
 8019032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019034:	68bb      	ldr	r3, [r7, #8]
 8019036:	f023 0201 	bic.w	r2, r3, #1
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	3b04      	subs	r3, #4
 8019042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019044:	4a0c      	ldr	r2, [pc, #48]	@ (8019078 <pxPortInitialiseStack+0x64>)
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	3b14      	subs	r3, #20
 801904e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019050:	687a      	ldr	r2, [r7, #4]
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	3b04      	subs	r3, #4
 801905a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	f06f 0202 	mvn.w	r2, #2
 8019062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	3b20      	subs	r3, #32
 8019068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801906a:	68fb      	ldr	r3, [r7, #12]
}
 801906c:	4618      	mov	r0, r3
 801906e:	3714      	adds	r7, #20
 8019070:	46bd      	mov	sp, r7
 8019072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019076:	4770      	bx	lr
 8019078:	0801907d 	.word	0x0801907d

0801907c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801907c:	b480      	push	{r7}
 801907e:	b085      	sub	sp, #20
 8019080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019082:	2300      	movs	r3, #0
 8019084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019086:	4b13      	ldr	r3, [pc, #76]	@ (80190d4 <prvTaskExitError+0x58>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801908e:	d00b      	beq.n	80190a8 <prvTaskExitError+0x2c>
	__asm volatile
 8019090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019094:	f383 8811 	msr	BASEPRI, r3
 8019098:	f3bf 8f6f 	isb	sy
 801909c:	f3bf 8f4f 	dsb	sy
 80190a0:	60fb      	str	r3, [r7, #12]
}
 80190a2:	bf00      	nop
 80190a4:	bf00      	nop
 80190a6:	e7fd      	b.n	80190a4 <prvTaskExitError+0x28>
	__asm volatile
 80190a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190ac:	f383 8811 	msr	BASEPRI, r3
 80190b0:	f3bf 8f6f 	isb	sy
 80190b4:	f3bf 8f4f 	dsb	sy
 80190b8:	60bb      	str	r3, [r7, #8]
}
 80190ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80190bc:	bf00      	nop
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d0fc      	beq.n	80190be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80190c4:	bf00      	nop
 80190c6:	bf00      	nop
 80190c8:	3714      	adds	r7, #20
 80190ca:	46bd      	mov	sp, r7
 80190cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d0:	4770      	bx	lr
 80190d2:	bf00      	nop
 80190d4:	200002d4 	.word	0x200002d4
	...

080190e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80190e0:	4b07      	ldr	r3, [pc, #28]	@ (8019100 <pxCurrentTCBConst2>)
 80190e2:	6819      	ldr	r1, [r3, #0]
 80190e4:	6808      	ldr	r0, [r1, #0]
 80190e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190ea:	f380 8809 	msr	PSP, r0
 80190ee:	f3bf 8f6f 	isb	sy
 80190f2:	f04f 0000 	mov.w	r0, #0
 80190f6:	f380 8811 	msr	BASEPRI, r0
 80190fa:	4770      	bx	lr
 80190fc:	f3af 8000 	nop.w

08019100 <pxCurrentTCBConst2>:
 8019100:	200014f4 	.word	0x200014f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019104:	bf00      	nop
 8019106:	bf00      	nop

08019108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019108:	4808      	ldr	r0, [pc, #32]	@ (801912c <prvPortStartFirstTask+0x24>)
 801910a:	6800      	ldr	r0, [r0, #0]
 801910c:	6800      	ldr	r0, [r0, #0]
 801910e:	f380 8808 	msr	MSP, r0
 8019112:	f04f 0000 	mov.w	r0, #0
 8019116:	f380 8814 	msr	CONTROL, r0
 801911a:	b662      	cpsie	i
 801911c:	b661      	cpsie	f
 801911e:	f3bf 8f4f 	dsb	sy
 8019122:	f3bf 8f6f 	isb	sy
 8019126:	df00      	svc	0
 8019128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801912a:	bf00      	nop
 801912c:	e000ed08 	.word	0xe000ed08

08019130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b086      	sub	sp, #24
 8019134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019136:	4b47      	ldr	r3, [pc, #284]	@ (8019254 <xPortStartScheduler+0x124>)
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	4a47      	ldr	r2, [pc, #284]	@ (8019258 <xPortStartScheduler+0x128>)
 801913c:	4293      	cmp	r3, r2
 801913e:	d10b      	bne.n	8019158 <xPortStartScheduler+0x28>
	__asm volatile
 8019140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019144:	f383 8811 	msr	BASEPRI, r3
 8019148:	f3bf 8f6f 	isb	sy
 801914c:	f3bf 8f4f 	dsb	sy
 8019150:	60fb      	str	r3, [r7, #12]
}
 8019152:	bf00      	nop
 8019154:	bf00      	nop
 8019156:	e7fd      	b.n	8019154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019158:	4b3e      	ldr	r3, [pc, #248]	@ (8019254 <xPortStartScheduler+0x124>)
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	4a3f      	ldr	r2, [pc, #252]	@ (801925c <xPortStartScheduler+0x12c>)
 801915e:	4293      	cmp	r3, r2
 8019160:	d10b      	bne.n	801917a <xPortStartScheduler+0x4a>
	__asm volatile
 8019162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019166:	f383 8811 	msr	BASEPRI, r3
 801916a:	f3bf 8f6f 	isb	sy
 801916e:	f3bf 8f4f 	dsb	sy
 8019172:	613b      	str	r3, [r7, #16]
}
 8019174:	bf00      	nop
 8019176:	bf00      	nop
 8019178:	e7fd      	b.n	8019176 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801917a:	4b39      	ldr	r3, [pc, #228]	@ (8019260 <xPortStartScheduler+0x130>)
 801917c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	781b      	ldrb	r3, [r3, #0]
 8019182:	b2db      	uxtb	r3, r3
 8019184:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	22ff      	movs	r2, #255	@ 0xff
 801918a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	781b      	ldrb	r3, [r3, #0]
 8019190:	b2db      	uxtb	r3, r3
 8019192:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019194:	78fb      	ldrb	r3, [r7, #3]
 8019196:	b2db      	uxtb	r3, r3
 8019198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801919c:	b2da      	uxtb	r2, r3
 801919e:	4b31      	ldr	r3, [pc, #196]	@ (8019264 <xPortStartScheduler+0x134>)
 80191a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80191a2:	4b31      	ldr	r3, [pc, #196]	@ (8019268 <xPortStartScheduler+0x138>)
 80191a4:	2207      	movs	r2, #7
 80191a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80191a8:	e009      	b.n	80191be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80191aa:	4b2f      	ldr	r3, [pc, #188]	@ (8019268 <xPortStartScheduler+0x138>)
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	3b01      	subs	r3, #1
 80191b0:	4a2d      	ldr	r2, [pc, #180]	@ (8019268 <xPortStartScheduler+0x138>)
 80191b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80191b4:	78fb      	ldrb	r3, [r7, #3]
 80191b6:	b2db      	uxtb	r3, r3
 80191b8:	005b      	lsls	r3, r3, #1
 80191ba:	b2db      	uxtb	r3, r3
 80191bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80191be:	78fb      	ldrb	r3, [r7, #3]
 80191c0:	b2db      	uxtb	r3, r3
 80191c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80191c6:	2b80      	cmp	r3, #128	@ 0x80
 80191c8:	d0ef      	beq.n	80191aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80191ca:	4b27      	ldr	r3, [pc, #156]	@ (8019268 <xPortStartScheduler+0x138>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	f1c3 0307 	rsb	r3, r3, #7
 80191d2:	2b04      	cmp	r3, #4
 80191d4:	d00b      	beq.n	80191ee <xPortStartScheduler+0xbe>
	__asm volatile
 80191d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191da:	f383 8811 	msr	BASEPRI, r3
 80191de:	f3bf 8f6f 	isb	sy
 80191e2:	f3bf 8f4f 	dsb	sy
 80191e6:	60bb      	str	r3, [r7, #8]
}
 80191e8:	bf00      	nop
 80191ea:	bf00      	nop
 80191ec:	e7fd      	b.n	80191ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80191ee:	4b1e      	ldr	r3, [pc, #120]	@ (8019268 <xPortStartScheduler+0x138>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	021b      	lsls	r3, r3, #8
 80191f4:	4a1c      	ldr	r2, [pc, #112]	@ (8019268 <xPortStartScheduler+0x138>)
 80191f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80191f8:	4b1b      	ldr	r3, [pc, #108]	@ (8019268 <xPortStartScheduler+0x138>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019200:	4a19      	ldr	r2, [pc, #100]	@ (8019268 <xPortStartScheduler+0x138>)
 8019202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	b2da      	uxtb	r2, r3
 8019208:	697b      	ldr	r3, [r7, #20]
 801920a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801920c:	4b17      	ldr	r3, [pc, #92]	@ (801926c <xPortStartScheduler+0x13c>)
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	4a16      	ldr	r2, [pc, #88]	@ (801926c <xPortStartScheduler+0x13c>)
 8019212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019218:	4b14      	ldr	r3, [pc, #80]	@ (801926c <xPortStartScheduler+0x13c>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	4a13      	ldr	r2, [pc, #76]	@ (801926c <xPortStartScheduler+0x13c>)
 801921e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019224:	f000 f8da 	bl	80193dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019228:	4b11      	ldr	r3, [pc, #68]	@ (8019270 <xPortStartScheduler+0x140>)
 801922a:	2200      	movs	r2, #0
 801922c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801922e:	f000 f8f9 	bl	8019424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019232:	4b10      	ldr	r3, [pc, #64]	@ (8019274 <xPortStartScheduler+0x144>)
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	4a0f      	ldr	r2, [pc, #60]	@ (8019274 <xPortStartScheduler+0x144>)
 8019238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801923c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801923e:	f7ff ff63 	bl	8019108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019242:	f7ff fb03 	bl	801884c <vTaskSwitchContext>
	prvTaskExitError();
 8019246:	f7ff ff19 	bl	801907c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801924a:	2300      	movs	r3, #0
}
 801924c:	4618      	mov	r0, r3
 801924e:	3718      	adds	r7, #24
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}
 8019254:	e000ed00 	.word	0xe000ed00
 8019258:	410fc271 	.word	0x410fc271
 801925c:	410fc270 	.word	0x410fc270
 8019260:	e000e400 	.word	0xe000e400
 8019264:	20001620 	.word	0x20001620
 8019268:	20001624 	.word	0x20001624
 801926c:	e000ed20 	.word	0xe000ed20
 8019270:	200002d4 	.word	0x200002d4
 8019274:	e000ef34 	.word	0xe000ef34

08019278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019278:	b480      	push	{r7}
 801927a:	b083      	sub	sp, #12
 801927c:	af00      	add	r7, sp, #0
	__asm volatile
 801927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019282:	f383 8811 	msr	BASEPRI, r3
 8019286:	f3bf 8f6f 	isb	sy
 801928a:	f3bf 8f4f 	dsb	sy
 801928e:	607b      	str	r3, [r7, #4]
}
 8019290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019292:	4b10      	ldr	r3, [pc, #64]	@ (80192d4 <vPortEnterCritical+0x5c>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	3301      	adds	r3, #1
 8019298:	4a0e      	ldr	r2, [pc, #56]	@ (80192d4 <vPortEnterCritical+0x5c>)
 801929a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801929c:	4b0d      	ldr	r3, [pc, #52]	@ (80192d4 <vPortEnterCritical+0x5c>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	2b01      	cmp	r3, #1
 80192a2:	d110      	bne.n	80192c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80192a4:	4b0c      	ldr	r3, [pc, #48]	@ (80192d8 <vPortEnterCritical+0x60>)
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	b2db      	uxtb	r3, r3
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d00b      	beq.n	80192c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80192ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192b2:	f383 8811 	msr	BASEPRI, r3
 80192b6:	f3bf 8f6f 	isb	sy
 80192ba:	f3bf 8f4f 	dsb	sy
 80192be:	603b      	str	r3, [r7, #0]
}
 80192c0:	bf00      	nop
 80192c2:	bf00      	nop
 80192c4:	e7fd      	b.n	80192c2 <vPortEnterCritical+0x4a>
	}
}
 80192c6:	bf00      	nop
 80192c8:	370c      	adds	r7, #12
 80192ca:	46bd      	mov	sp, r7
 80192cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d0:	4770      	bx	lr
 80192d2:	bf00      	nop
 80192d4:	200002d4 	.word	0x200002d4
 80192d8:	e000ed04 	.word	0xe000ed04

080192dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80192dc:	b480      	push	{r7}
 80192de:	b083      	sub	sp, #12
 80192e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80192e2:	4b12      	ldr	r3, [pc, #72]	@ (801932c <vPortExitCritical+0x50>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d10b      	bne.n	8019302 <vPortExitCritical+0x26>
	__asm volatile
 80192ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192ee:	f383 8811 	msr	BASEPRI, r3
 80192f2:	f3bf 8f6f 	isb	sy
 80192f6:	f3bf 8f4f 	dsb	sy
 80192fa:	607b      	str	r3, [r7, #4]
}
 80192fc:	bf00      	nop
 80192fe:	bf00      	nop
 8019300:	e7fd      	b.n	80192fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019302:	4b0a      	ldr	r3, [pc, #40]	@ (801932c <vPortExitCritical+0x50>)
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	3b01      	subs	r3, #1
 8019308:	4a08      	ldr	r2, [pc, #32]	@ (801932c <vPortExitCritical+0x50>)
 801930a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801930c:	4b07      	ldr	r3, [pc, #28]	@ (801932c <vPortExitCritical+0x50>)
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d105      	bne.n	8019320 <vPortExitCritical+0x44>
 8019314:	2300      	movs	r3, #0
 8019316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019318:	683b      	ldr	r3, [r7, #0]
 801931a:	f383 8811 	msr	BASEPRI, r3
}
 801931e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019320:	bf00      	nop
 8019322:	370c      	adds	r7, #12
 8019324:	46bd      	mov	sp, r7
 8019326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932a:	4770      	bx	lr
 801932c:	200002d4 	.word	0x200002d4

08019330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019330:	f3ef 8009 	mrs	r0, PSP
 8019334:	f3bf 8f6f 	isb	sy
 8019338:	4b15      	ldr	r3, [pc, #84]	@ (8019390 <pxCurrentTCBConst>)
 801933a:	681a      	ldr	r2, [r3, #0]
 801933c:	f01e 0f10 	tst.w	lr, #16
 8019340:	bf08      	it	eq
 8019342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801934a:	6010      	str	r0, [r2, #0]
 801934c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019354:	f380 8811 	msr	BASEPRI, r0
 8019358:	f3bf 8f4f 	dsb	sy
 801935c:	f3bf 8f6f 	isb	sy
 8019360:	f7ff fa74 	bl	801884c <vTaskSwitchContext>
 8019364:	f04f 0000 	mov.w	r0, #0
 8019368:	f380 8811 	msr	BASEPRI, r0
 801936c:	bc09      	pop	{r0, r3}
 801936e:	6819      	ldr	r1, [r3, #0]
 8019370:	6808      	ldr	r0, [r1, #0]
 8019372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019376:	f01e 0f10 	tst.w	lr, #16
 801937a:	bf08      	it	eq
 801937c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019380:	f380 8809 	msr	PSP, r0
 8019384:	f3bf 8f6f 	isb	sy
 8019388:	4770      	bx	lr
 801938a:	bf00      	nop
 801938c:	f3af 8000 	nop.w

08019390 <pxCurrentTCBConst>:
 8019390:	200014f4 	.word	0x200014f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019394:	bf00      	nop
 8019396:	bf00      	nop

08019398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
	__asm volatile
 801939e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193a2:	f383 8811 	msr	BASEPRI, r3
 80193a6:	f3bf 8f6f 	isb	sy
 80193aa:	f3bf 8f4f 	dsb	sy
 80193ae:	607b      	str	r3, [r7, #4]
}
 80193b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80193b2:	f7ff f991 	bl	80186d8 <xTaskIncrementTick>
 80193b6:	4603      	mov	r3, r0
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d003      	beq.n	80193c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80193bc:	4b06      	ldr	r3, [pc, #24]	@ (80193d8 <SysTick_Handler+0x40>)
 80193be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80193c2:	601a      	str	r2, [r3, #0]
 80193c4:	2300      	movs	r3, #0
 80193c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	f383 8811 	msr	BASEPRI, r3
}
 80193ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80193d0:	bf00      	nop
 80193d2:	3708      	adds	r7, #8
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}
 80193d8:	e000ed04 	.word	0xe000ed04

080193dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80193dc:	b480      	push	{r7}
 80193de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80193e0:	4b0b      	ldr	r3, [pc, #44]	@ (8019410 <vPortSetupTimerInterrupt+0x34>)
 80193e2:	2200      	movs	r2, #0
 80193e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80193e6:	4b0b      	ldr	r3, [pc, #44]	@ (8019414 <vPortSetupTimerInterrupt+0x38>)
 80193e8:	2200      	movs	r2, #0
 80193ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80193ec:	4b0a      	ldr	r3, [pc, #40]	@ (8019418 <vPortSetupTimerInterrupt+0x3c>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	4a0a      	ldr	r2, [pc, #40]	@ (801941c <vPortSetupTimerInterrupt+0x40>)
 80193f2:	fba2 2303 	umull	r2, r3, r2, r3
 80193f6:	099b      	lsrs	r3, r3, #6
 80193f8:	4a09      	ldr	r2, [pc, #36]	@ (8019420 <vPortSetupTimerInterrupt+0x44>)
 80193fa:	3b01      	subs	r3, #1
 80193fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80193fe:	4b04      	ldr	r3, [pc, #16]	@ (8019410 <vPortSetupTimerInterrupt+0x34>)
 8019400:	2207      	movs	r2, #7
 8019402:	601a      	str	r2, [r3, #0]
}
 8019404:	bf00      	nop
 8019406:	46bd      	mov	sp, r7
 8019408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940c:	4770      	bx	lr
 801940e:	bf00      	nop
 8019410:	e000e010 	.word	0xe000e010
 8019414:	e000e018 	.word	0xe000e018
 8019418:	200002c8 	.word	0x200002c8
 801941c:	10624dd3 	.word	0x10624dd3
 8019420:	e000e014 	.word	0xe000e014

08019424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019434 <vPortEnableVFP+0x10>
 8019428:	6801      	ldr	r1, [r0, #0]
 801942a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801942e:	6001      	str	r1, [r0, #0]
 8019430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019432:	bf00      	nop
 8019434:	e000ed88 	.word	0xe000ed88

08019438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019438:	b480      	push	{r7}
 801943a:	b085      	sub	sp, #20
 801943c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801943e:	f3ef 8305 	mrs	r3, IPSR
 8019442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	2b0f      	cmp	r3, #15
 8019448:	d915      	bls.n	8019476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801944a:	4a18      	ldr	r2, [pc, #96]	@ (80194ac <vPortValidateInterruptPriority+0x74>)
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	4413      	add	r3, r2
 8019450:	781b      	ldrb	r3, [r3, #0]
 8019452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019454:	4b16      	ldr	r3, [pc, #88]	@ (80194b0 <vPortValidateInterruptPriority+0x78>)
 8019456:	781b      	ldrb	r3, [r3, #0]
 8019458:	7afa      	ldrb	r2, [r7, #11]
 801945a:	429a      	cmp	r2, r3
 801945c:	d20b      	bcs.n	8019476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801945e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019462:	f383 8811 	msr	BASEPRI, r3
 8019466:	f3bf 8f6f 	isb	sy
 801946a:	f3bf 8f4f 	dsb	sy
 801946e:	607b      	str	r3, [r7, #4]
}
 8019470:	bf00      	nop
 8019472:	bf00      	nop
 8019474:	e7fd      	b.n	8019472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019476:	4b0f      	ldr	r3, [pc, #60]	@ (80194b4 <vPortValidateInterruptPriority+0x7c>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801947e:	4b0e      	ldr	r3, [pc, #56]	@ (80194b8 <vPortValidateInterruptPriority+0x80>)
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	429a      	cmp	r2, r3
 8019484:	d90b      	bls.n	801949e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8019486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801948a:	f383 8811 	msr	BASEPRI, r3
 801948e:	f3bf 8f6f 	isb	sy
 8019492:	f3bf 8f4f 	dsb	sy
 8019496:	603b      	str	r3, [r7, #0]
}
 8019498:	bf00      	nop
 801949a:	bf00      	nop
 801949c:	e7fd      	b.n	801949a <vPortValidateInterruptPriority+0x62>
	}
 801949e:	bf00      	nop
 80194a0:	3714      	adds	r7, #20
 80194a2:	46bd      	mov	sp, r7
 80194a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a8:	4770      	bx	lr
 80194aa:	bf00      	nop
 80194ac:	e000e3f0 	.word	0xe000e3f0
 80194b0:	20001620 	.word	0x20001620
 80194b4:	e000ed0c 	.word	0xe000ed0c
 80194b8:	20001624 	.word	0x20001624

080194bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	b08a      	sub	sp, #40	@ 0x28
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80194c4:	2300      	movs	r3, #0
 80194c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80194c8:	f7ff f85a 	bl	8018580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80194cc:	4b5c      	ldr	r3, [pc, #368]	@ (8019640 <pvPortMalloc+0x184>)
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d101      	bne.n	80194d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80194d4:	f000 f924 	bl	8019720 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80194d8:	4b5a      	ldr	r3, [pc, #360]	@ (8019644 <pvPortMalloc+0x188>)
 80194da:	681a      	ldr	r2, [r3, #0]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	4013      	ands	r3, r2
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	f040 8095 	bne.w	8019610 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d01e      	beq.n	801952a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80194ec:	2208      	movs	r2, #8
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	4413      	add	r3, r2
 80194f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	f003 0307 	and.w	r3, r3, #7
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d015      	beq.n	801952a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	f023 0307 	bic.w	r3, r3, #7
 8019504:	3308      	adds	r3, #8
 8019506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	f003 0307 	and.w	r3, r3, #7
 801950e:	2b00      	cmp	r3, #0
 8019510:	d00b      	beq.n	801952a <pvPortMalloc+0x6e>
	__asm volatile
 8019512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019516:	f383 8811 	msr	BASEPRI, r3
 801951a:	f3bf 8f6f 	isb	sy
 801951e:	f3bf 8f4f 	dsb	sy
 8019522:	617b      	str	r3, [r7, #20]
}
 8019524:	bf00      	nop
 8019526:	bf00      	nop
 8019528:	e7fd      	b.n	8019526 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d06f      	beq.n	8019610 <pvPortMalloc+0x154>
 8019530:	4b45      	ldr	r3, [pc, #276]	@ (8019648 <pvPortMalloc+0x18c>)
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	687a      	ldr	r2, [r7, #4]
 8019536:	429a      	cmp	r2, r3
 8019538:	d86a      	bhi.n	8019610 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801953a:	4b44      	ldr	r3, [pc, #272]	@ (801964c <pvPortMalloc+0x190>)
 801953c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801953e:	4b43      	ldr	r3, [pc, #268]	@ (801964c <pvPortMalloc+0x190>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019544:	e004      	b.n	8019550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8019546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801954a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019552:	685b      	ldr	r3, [r3, #4]
 8019554:	687a      	ldr	r2, [r7, #4]
 8019556:	429a      	cmp	r2, r3
 8019558:	d903      	bls.n	8019562 <pvPortMalloc+0xa6>
 801955a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d1f1      	bne.n	8019546 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019562:	4b37      	ldr	r3, [pc, #220]	@ (8019640 <pvPortMalloc+0x184>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019568:	429a      	cmp	r2, r3
 801956a:	d051      	beq.n	8019610 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801956c:	6a3b      	ldr	r3, [r7, #32]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	2208      	movs	r2, #8
 8019572:	4413      	add	r3, r2
 8019574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019578:	681a      	ldr	r2, [r3, #0]
 801957a:	6a3b      	ldr	r3, [r7, #32]
 801957c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019580:	685a      	ldr	r2, [r3, #4]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	1ad2      	subs	r2, r2, r3
 8019586:	2308      	movs	r3, #8
 8019588:	005b      	lsls	r3, r3, #1
 801958a:	429a      	cmp	r2, r3
 801958c:	d920      	bls.n	80195d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801958e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	4413      	add	r3, r2
 8019594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019596:	69bb      	ldr	r3, [r7, #24]
 8019598:	f003 0307 	and.w	r3, r3, #7
 801959c:	2b00      	cmp	r3, #0
 801959e:	d00b      	beq.n	80195b8 <pvPortMalloc+0xfc>
	__asm volatile
 80195a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195a4:	f383 8811 	msr	BASEPRI, r3
 80195a8:	f3bf 8f6f 	isb	sy
 80195ac:	f3bf 8f4f 	dsb	sy
 80195b0:	613b      	str	r3, [r7, #16]
}
 80195b2:	bf00      	nop
 80195b4:	bf00      	nop
 80195b6:	e7fd      	b.n	80195b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80195b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195ba:	685a      	ldr	r2, [r3, #4]
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	1ad2      	subs	r2, r2, r3
 80195c0:	69bb      	ldr	r3, [r7, #24]
 80195c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80195c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195c6:	687a      	ldr	r2, [r7, #4]
 80195c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80195ca:	69b8      	ldr	r0, [r7, #24]
 80195cc:	f000 f90a 	bl	80197e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80195d0:	4b1d      	ldr	r3, [pc, #116]	@ (8019648 <pvPortMalloc+0x18c>)
 80195d2:	681a      	ldr	r2, [r3, #0]
 80195d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195d6:	685b      	ldr	r3, [r3, #4]
 80195d8:	1ad3      	subs	r3, r2, r3
 80195da:	4a1b      	ldr	r2, [pc, #108]	@ (8019648 <pvPortMalloc+0x18c>)
 80195dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80195de:	4b1a      	ldr	r3, [pc, #104]	@ (8019648 <pvPortMalloc+0x18c>)
 80195e0:	681a      	ldr	r2, [r3, #0]
 80195e2:	4b1b      	ldr	r3, [pc, #108]	@ (8019650 <pvPortMalloc+0x194>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	429a      	cmp	r2, r3
 80195e8:	d203      	bcs.n	80195f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80195ea:	4b17      	ldr	r3, [pc, #92]	@ (8019648 <pvPortMalloc+0x18c>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	4a18      	ldr	r2, [pc, #96]	@ (8019650 <pvPortMalloc+0x194>)
 80195f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80195f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195f4:	685a      	ldr	r2, [r3, #4]
 80195f6:	4b13      	ldr	r3, [pc, #76]	@ (8019644 <pvPortMalloc+0x188>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	431a      	orrs	r2, r3
 80195fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019602:	2200      	movs	r2, #0
 8019604:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019606:	4b13      	ldr	r3, [pc, #76]	@ (8019654 <pvPortMalloc+0x198>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	3301      	adds	r3, #1
 801960c:	4a11      	ldr	r2, [pc, #68]	@ (8019654 <pvPortMalloc+0x198>)
 801960e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019610:	f7fe ffc4 	bl	801859c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019614:	69fb      	ldr	r3, [r7, #28]
 8019616:	f003 0307 	and.w	r3, r3, #7
 801961a:	2b00      	cmp	r3, #0
 801961c:	d00b      	beq.n	8019636 <pvPortMalloc+0x17a>
	__asm volatile
 801961e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019622:	f383 8811 	msr	BASEPRI, r3
 8019626:	f3bf 8f6f 	isb	sy
 801962a:	f3bf 8f4f 	dsb	sy
 801962e:	60fb      	str	r3, [r7, #12]
}
 8019630:	bf00      	nop
 8019632:	bf00      	nop
 8019634:	e7fd      	b.n	8019632 <pvPortMalloc+0x176>
	return pvReturn;
 8019636:	69fb      	ldr	r3, [r7, #28]
}
 8019638:	4618      	mov	r0, r3
 801963a:	3728      	adds	r7, #40	@ 0x28
 801963c:	46bd      	mov	sp, r7
 801963e:	bd80      	pop	{r7, pc}
 8019640:	20006450 	.word	0x20006450
 8019644:	20006464 	.word	0x20006464
 8019648:	20006454 	.word	0x20006454
 801964c:	20006448 	.word	0x20006448
 8019650:	20006458 	.word	0x20006458
 8019654:	2000645c 	.word	0x2000645c

08019658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b086      	sub	sp, #24
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d04f      	beq.n	801970a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801966a:	2308      	movs	r3, #8
 801966c:	425b      	negs	r3, r3
 801966e:	697a      	ldr	r2, [r7, #20]
 8019670:	4413      	add	r3, r2
 8019672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019674:	697b      	ldr	r3, [r7, #20]
 8019676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019678:	693b      	ldr	r3, [r7, #16]
 801967a:	685a      	ldr	r2, [r3, #4]
 801967c:	4b25      	ldr	r3, [pc, #148]	@ (8019714 <vPortFree+0xbc>)
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	4013      	ands	r3, r2
 8019682:	2b00      	cmp	r3, #0
 8019684:	d10b      	bne.n	801969e <vPortFree+0x46>
	__asm volatile
 8019686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801968a:	f383 8811 	msr	BASEPRI, r3
 801968e:	f3bf 8f6f 	isb	sy
 8019692:	f3bf 8f4f 	dsb	sy
 8019696:	60fb      	str	r3, [r7, #12]
}
 8019698:	bf00      	nop
 801969a:	bf00      	nop
 801969c:	e7fd      	b.n	801969a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801969e:	693b      	ldr	r3, [r7, #16]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d00b      	beq.n	80196be <vPortFree+0x66>
	__asm volatile
 80196a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196aa:	f383 8811 	msr	BASEPRI, r3
 80196ae:	f3bf 8f6f 	isb	sy
 80196b2:	f3bf 8f4f 	dsb	sy
 80196b6:	60bb      	str	r3, [r7, #8]
}
 80196b8:	bf00      	nop
 80196ba:	bf00      	nop
 80196bc:	e7fd      	b.n	80196ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80196be:	693b      	ldr	r3, [r7, #16]
 80196c0:	685a      	ldr	r2, [r3, #4]
 80196c2:	4b14      	ldr	r3, [pc, #80]	@ (8019714 <vPortFree+0xbc>)
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	4013      	ands	r3, r2
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d01e      	beq.n	801970a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80196cc:	693b      	ldr	r3, [r7, #16]
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d11a      	bne.n	801970a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80196d4:	693b      	ldr	r3, [r7, #16]
 80196d6:	685a      	ldr	r2, [r3, #4]
 80196d8:	4b0e      	ldr	r3, [pc, #56]	@ (8019714 <vPortFree+0xbc>)
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	43db      	mvns	r3, r3
 80196de:	401a      	ands	r2, r3
 80196e0:	693b      	ldr	r3, [r7, #16]
 80196e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80196e4:	f7fe ff4c 	bl	8018580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	685a      	ldr	r2, [r3, #4]
 80196ec:	4b0a      	ldr	r3, [pc, #40]	@ (8019718 <vPortFree+0xc0>)
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	4413      	add	r3, r2
 80196f2:	4a09      	ldr	r2, [pc, #36]	@ (8019718 <vPortFree+0xc0>)
 80196f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80196f6:	6938      	ldr	r0, [r7, #16]
 80196f8:	f000 f874 	bl	80197e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80196fc:	4b07      	ldr	r3, [pc, #28]	@ (801971c <vPortFree+0xc4>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	3301      	adds	r3, #1
 8019702:	4a06      	ldr	r2, [pc, #24]	@ (801971c <vPortFree+0xc4>)
 8019704:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019706:	f7fe ff49 	bl	801859c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801970a:	bf00      	nop
 801970c:	3718      	adds	r7, #24
 801970e:	46bd      	mov	sp, r7
 8019710:	bd80      	pop	{r7, pc}
 8019712:	bf00      	nop
 8019714:	20006464 	.word	0x20006464
 8019718:	20006454 	.word	0x20006454
 801971c:	20006460 	.word	0x20006460

08019720 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019720:	b480      	push	{r7}
 8019722:	b085      	sub	sp, #20
 8019724:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019726:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801972a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801972c:	4b27      	ldr	r3, [pc, #156]	@ (80197cc <prvHeapInit+0xac>)
 801972e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	f003 0307 	and.w	r3, r3, #7
 8019736:	2b00      	cmp	r3, #0
 8019738:	d00c      	beq.n	8019754 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	3307      	adds	r3, #7
 801973e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	f023 0307 	bic.w	r3, r3, #7
 8019746:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019748:	68ba      	ldr	r2, [r7, #8]
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	1ad3      	subs	r3, r2, r3
 801974e:	4a1f      	ldr	r2, [pc, #124]	@ (80197cc <prvHeapInit+0xac>)
 8019750:	4413      	add	r3, r2
 8019752:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019758:	4a1d      	ldr	r2, [pc, #116]	@ (80197d0 <prvHeapInit+0xb0>)
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801975e:	4b1c      	ldr	r3, [pc, #112]	@ (80197d0 <prvHeapInit+0xb0>)
 8019760:	2200      	movs	r2, #0
 8019762:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	68ba      	ldr	r2, [r7, #8]
 8019768:	4413      	add	r3, r2
 801976a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801976c:	2208      	movs	r2, #8
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	1a9b      	subs	r3, r3, r2
 8019772:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	f023 0307 	bic.w	r3, r3, #7
 801977a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	4a15      	ldr	r2, [pc, #84]	@ (80197d4 <prvHeapInit+0xb4>)
 8019780:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019782:	4b14      	ldr	r3, [pc, #80]	@ (80197d4 <prvHeapInit+0xb4>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	2200      	movs	r2, #0
 8019788:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801978a:	4b12      	ldr	r3, [pc, #72]	@ (80197d4 <prvHeapInit+0xb4>)
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	2200      	movs	r2, #0
 8019790:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019796:	683b      	ldr	r3, [r7, #0]
 8019798:	68fa      	ldr	r2, [r7, #12]
 801979a:	1ad2      	subs	r2, r2, r3
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80197a0:	4b0c      	ldr	r3, [pc, #48]	@ (80197d4 <prvHeapInit+0xb4>)
 80197a2:	681a      	ldr	r2, [r3, #0]
 80197a4:	683b      	ldr	r3, [r7, #0]
 80197a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	685b      	ldr	r3, [r3, #4]
 80197ac:	4a0a      	ldr	r2, [pc, #40]	@ (80197d8 <prvHeapInit+0xb8>)
 80197ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80197b0:	683b      	ldr	r3, [r7, #0]
 80197b2:	685b      	ldr	r3, [r3, #4]
 80197b4:	4a09      	ldr	r2, [pc, #36]	@ (80197dc <prvHeapInit+0xbc>)
 80197b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80197b8:	4b09      	ldr	r3, [pc, #36]	@ (80197e0 <prvHeapInit+0xc0>)
 80197ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80197be:	601a      	str	r2, [r3, #0]
}
 80197c0:	bf00      	nop
 80197c2:	3714      	adds	r7, #20
 80197c4:	46bd      	mov	sp, r7
 80197c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ca:	4770      	bx	lr
 80197cc:	20001628 	.word	0x20001628
 80197d0:	20006448 	.word	0x20006448
 80197d4:	20006450 	.word	0x20006450
 80197d8:	20006458 	.word	0x20006458
 80197dc:	20006454 	.word	0x20006454
 80197e0:	20006464 	.word	0x20006464

080197e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80197e4:	b480      	push	{r7}
 80197e6:	b085      	sub	sp, #20
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80197ec:	4b28      	ldr	r3, [pc, #160]	@ (8019890 <prvInsertBlockIntoFreeList+0xac>)
 80197ee:	60fb      	str	r3, [r7, #12]
 80197f0:	e002      	b.n	80197f8 <prvInsertBlockIntoFreeList+0x14>
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	60fb      	str	r3, [r7, #12]
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	687a      	ldr	r2, [r7, #4]
 80197fe:	429a      	cmp	r2, r3
 8019800:	d8f7      	bhi.n	80197f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	685b      	ldr	r3, [r3, #4]
 801980a:	68ba      	ldr	r2, [r7, #8]
 801980c:	4413      	add	r3, r2
 801980e:	687a      	ldr	r2, [r7, #4]
 8019810:	429a      	cmp	r2, r3
 8019812:	d108      	bne.n	8019826 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	685a      	ldr	r2, [r3, #4]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	685b      	ldr	r3, [r3, #4]
 801981c:	441a      	add	r2, r3
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	685b      	ldr	r3, [r3, #4]
 801982e:	68ba      	ldr	r2, [r7, #8]
 8019830:	441a      	add	r2, r3
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	429a      	cmp	r2, r3
 8019838:	d118      	bne.n	801986c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	681a      	ldr	r2, [r3, #0]
 801983e:	4b15      	ldr	r3, [pc, #84]	@ (8019894 <prvInsertBlockIntoFreeList+0xb0>)
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	429a      	cmp	r2, r3
 8019844:	d00d      	beq.n	8019862 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	685a      	ldr	r2, [r3, #4]
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	685b      	ldr	r3, [r3, #4]
 8019850:	441a      	add	r2, r3
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	681a      	ldr	r2, [r3, #0]
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	601a      	str	r2, [r3, #0]
 8019860:	e008      	b.n	8019874 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019862:	4b0c      	ldr	r3, [pc, #48]	@ (8019894 <prvInsertBlockIntoFreeList+0xb0>)
 8019864:	681a      	ldr	r2, [r3, #0]
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	601a      	str	r2, [r3, #0]
 801986a:	e003      	b.n	8019874 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	681a      	ldr	r2, [r3, #0]
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019874:	68fa      	ldr	r2, [r7, #12]
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	429a      	cmp	r2, r3
 801987a:	d002      	beq.n	8019882 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	687a      	ldr	r2, [r7, #4]
 8019880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019882:	bf00      	nop
 8019884:	3714      	adds	r7, #20
 8019886:	46bd      	mov	sp, r7
 8019888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988c:	4770      	bx	lr
 801988e:	bf00      	nop
 8019890:	20006448 	.word	0x20006448
 8019894:	20006450 	.word	0x20006450

08019898 <atof>:
 8019898:	2100      	movs	r1, #0
 801989a:	f000 bee3 	b.w	801a664 <strtod>

0801989e <atoi>:
 801989e:	220a      	movs	r2, #10
 80198a0:	2100      	movs	r1, #0
 80198a2:	f000 bf67 	b.w	801a774 <strtol>

080198a6 <atol>:
 80198a6:	220a      	movs	r2, #10
 80198a8:	2100      	movs	r1, #0
 80198aa:	f000 bf63 	b.w	801a774 <strtol>
	...

080198b0 <exit>:
 80198b0:	b508      	push	{r3, lr}
 80198b2:	4b06      	ldr	r3, [pc, #24]	@ (80198cc <exit+0x1c>)
 80198b4:	4604      	mov	r4, r0
 80198b6:	b113      	cbz	r3, 80198be <exit+0xe>
 80198b8:	2100      	movs	r1, #0
 80198ba:	f3af 8000 	nop.w
 80198be:	4b04      	ldr	r3, [pc, #16]	@ (80198d0 <exit+0x20>)
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	b103      	cbz	r3, 80198c6 <exit+0x16>
 80198c4:	4798      	blx	r3
 80198c6:	4620      	mov	r0, r4
 80198c8:	f7ea fdcc 	bl	8004464 <_exit>
 80198cc:	00000000 	.word	0x00000000
 80198d0:	200065a8 	.word	0x200065a8

080198d4 <malloc>:
 80198d4:	4b02      	ldr	r3, [pc, #8]	@ (80198e0 <malloc+0xc>)
 80198d6:	4601      	mov	r1, r0
 80198d8:	6818      	ldr	r0, [r3, #0]
 80198da:	f000 b82d 	b.w	8019938 <_malloc_r>
 80198de:	bf00      	nop
 80198e0:	20000458 	.word	0x20000458

080198e4 <free>:
 80198e4:	4b02      	ldr	r3, [pc, #8]	@ (80198f0 <free+0xc>)
 80198e6:	4601      	mov	r1, r0
 80198e8:	6818      	ldr	r0, [r3, #0]
 80198ea:	f003 bf05 	b.w	801d6f8 <_free_r>
 80198ee:	bf00      	nop
 80198f0:	20000458 	.word	0x20000458

080198f4 <sbrk_aligned>:
 80198f4:	b570      	push	{r4, r5, r6, lr}
 80198f6:	4e0f      	ldr	r6, [pc, #60]	@ (8019934 <sbrk_aligned+0x40>)
 80198f8:	460c      	mov	r4, r1
 80198fa:	6831      	ldr	r1, [r6, #0]
 80198fc:	4605      	mov	r5, r0
 80198fe:	b911      	cbnz	r1, 8019906 <sbrk_aligned+0x12>
 8019900:	f002 ffb0 	bl	801c864 <_sbrk_r>
 8019904:	6030      	str	r0, [r6, #0]
 8019906:	4621      	mov	r1, r4
 8019908:	4628      	mov	r0, r5
 801990a:	f002 ffab 	bl	801c864 <_sbrk_r>
 801990e:	1c43      	adds	r3, r0, #1
 8019910:	d103      	bne.n	801991a <sbrk_aligned+0x26>
 8019912:	f04f 34ff 	mov.w	r4, #4294967295
 8019916:	4620      	mov	r0, r4
 8019918:	bd70      	pop	{r4, r5, r6, pc}
 801991a:	1cc4      	adds	r4, r0, #3
 801991c:	f024 0403 	bic.w	r4, r4, #3
 8019920:	42a0      	cmp	r0, r4
 8019922:	d0f8      	beq.n	8019916 <sbrk_aligned+0x22>
 8019924:	1a21      	subs	r1, r4, r0
 8019926:	4628      	mov	r0, r5
 8019928:	f002 ff9c 	bl	801c864 <_sbrk_r>
 801992c:	3001      	adds	r0, #1
 801992e:	d1f2      	bne.n	8019916 <sbrk_aligned+0x22>
 8019930:	e7ef      	b.n	8019912 <sbrk_aligned+0x1e>
 8019932:	bf00      	nop
 8019934:	20006468 	.word	0x20006468

08019938 <_malloc_r>:
 8019938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801993c:	1ccd      	adds	r5, r1, #3
 801993e:	f025 0503 	bic.w	r5, r5, #3
 8019942:	3508      	adds	r5, #8
 8019944:	2d0c      	cmp	r5, #12
 8019946:	bf38      	it	cc
 8019948:	250c      	movcc	r5, #12
 801994a:	2d00      	cmp	r5, #0
 801994c:	4606      	mov	r6, r0
 801994e:	db01      	blt.n	8019954 <_malloc_r+0x1c>
 8019950:	42a9      	cmp	r1, r5
 8019952:	d904      	bls.n	801995e <_malloc_r+0x26>
 8019954:	230c      	movs	r3, #12
 8019956:	6033      	str	r3, [r6, #0]
 8019958:	2000      	movs	r0, #0
 801995a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801995e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019a34 <_malloc_r+0xfc>
 8019962:	f000 f869 	bl	8019a38 <__malloc_lock>
 8019966:	f8d8 3000 	ldr.w	r3, [r8]
 801996a:	461c      	mov	r4, r3
 801996c:	bb44      	cbnz	r4, 80199c0 <_malloc_r+0x88>
 801996e:	4629      	mov	r1, r5
 8019970:	4630      	mov	r0, r6
 8019972:	f7ff ffbf 	bl	80198f4 <sbrk_aligned>
 8019976:	1c43      	adds	r3, r0, #1
 8019978:	4604      	mov	r4, r0
 801997a:	d158      	bne.n	8019a2e <_malloc_r+0xf6>
 801997c:	f8d8 4000 	ldr.w	r4, [r8]
 8019980:	4627      	mov	r7, r4
 8019982:	2f00      	cmp	r7, #0
 8019984:	d143      	bne.n	8019a0e <_malloc_r+0xd6>
 8019986:	2c00      	cmp	r4, #0
 8019988:	d04b      	beq.n	8019a22 <_malloc_r+0xea>
 801998a:	6823      	ldr	r3, [r4, #0]
 801998c:	4639      	mov	r1, r7
 801998e:	4630      	mov	r0, r6
 8019990:	eb04 0903 	add.w	r9, r4, r3
 8019994:	f002 ff66 	bl	801c864 <_sbrk_r>
 8019998:	4581      	cmp	r9, r0
 801999a:	d142      	bne.n	8019a22 <_malloc_r+0xea>
 801999c:	6821      	ldr	r1, [r4, #0]
 801999e:	1a6d      	subs	r5, r5, r1
 80199a0:	4629      	mov	r1, r5
 80199a2:	4630      	mov	r0, r6
 80199a4:	f7ff ffa6 	bl	80198f4 <sbrk_aligned>
 80199a8:	3001      	adds	r0, #1
 80199aa:	d03a      	beq.n	8019a22 <_malloc_r+0xea>
 80199ac:	6823      	ldr	r3, [r4, #0]
 80199ae:	442b      	add	r3, r5
 80199b0:	6023      	str	r3, [r4, #0]
 80199b2:	f8d8 3000 	ldr.w	r3, [r8]
 80199b6:	685a      	ldr	r2, [r3, #4]
 80199b8:	bb62      	cbnz	r2, 8019a14 <_malloc_r+0xdc>
 80199ba:	f8c8 7000 	str.w	r7, [r8]
 80199be:	e00f      	b.n	80199e0 <_malloc_r+0xa8>
 80199c0:	6822      	ldr	r2, [r4, #0]
 80199c2:	1b52      	subs	r2, r2, r5
 80199c4:	d420      	bmi.n	8019a08 <_malloc_r+0xd0>
 80199c6:	2a0b      	cmp	r2, #11
 80199c8:	d917      	bls.n	80199fa <_malloc_r+0xc2>
 80199ca:	1961      	adds	r1, r4, r5
 80199cc:	42a3      	cmp	r3, r4
 80199ce:	6025      	str	r5, [r4, #0]
 80199d0:	bf18      	it	ne
 80199d2:	6059      	strne	r1, [r3, #4]
 80199d4:	6863      	ldr	r3, [r4, #4]
 80199d6:	bf08      	it	eq
 80199d8:	f8c8 1000 	streq.w	r1, [r8]
 80199dc:	5162      	str	r2, [r4, r5]
 80199de:	604b      	str	r3, [r1, #4]
 80199e0:	4630      	mov	r0, r6
 80199e2:	f000 f82f 	bl	8019a44 <__malloc_unlock>
 80199e6:	f104 000b 	add.w	r0, r4, #11
 80199ea:	1d23      	adds	r3, r4, #4
 80199ec:	f020 0007 	bic.w	r0, r0, #7
 80199f0:	1ac2      	subs	r2, r0, r3
 80199f2:	bf1c      	itt	ne
 80199f4:	1a1b      	subne	r3, r3, r0
 80199f6:	50a3      	strne	r3, [r4, r2]
 80199f8:	e7af      	b.n	801995a <_malloc_r+0x22>
 80199fa:	6862      	ldr	r2, [r4, #4]
 80199fc:	42a3      	cmp	r3, r4
 80199fe:	bf0c      	ite	eq
 8019a00:	f8c8 2000 	streq.w	r2, [r8]
 8019a04:	605a      	strne	r2, [r3, #4]
 8019a06:	e7eb      	b.n	80199e0 <_malloc_r+0xa8>
 8019a08:	4623      	mov	r3, r4
 8019a0a:	6864      	ldr	r4, [r4, #4]
 8019a0c:	e7ae      	b.n	801996c <_malloc_r+0x34>
 8019a0e:	463c      	mov	r4, r7
 8019a10:	687f      	ldr	r7, [r7, #4]
 8019a12:	e7b6      	b.n	8019982 <_malloc_r+0x4a>
 8019a14:	461a      	mov	r2, r3
 8019a16:	685b      	ldr	r3, [r3, #4]
 8019a18:	42a3      	cmp	r3, r4
 8019a1a:	d1fb      	bne.n	8019a14 <_malloc_r+0xdc>
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	6053      	str	r3, [r2, #4]
 8019a20:	e7de      	b.n	80199e0 <_malloc_r+0xa8>
 8019a22:	230c      	movs	r3, #12
 8019a24:	6033      	str	r3, [r6, #0]
 8019a26:	4630      	mov	r0, r6
 8019a28:	f000 f80c 	bl	8019a44 <__malloc_unlock>
 8019a2c:	e794      	b.n	8019958 <_malloc_r+0x20>
 8019a2e:	6005      	str	r5, [r0, #0]
 8019a30:	e7d6      	b.n	80199e0 <_malloc_r+0xa8>
 8019a32:	bf00      	nop
 8019a34:	2000646c 	.word	0x2000646c

08019a38 <__malloc_lock>:
 8019a38:	4801      	ldr	r0, [pc, #4]	@ (8019a40 <__malloc_lock+0x8>)
 8019a3a:	f002 bf61 	b.w	801c900 <__retarget_lock_acquire_recursive>
 8019a3e:	bf00      	nop
 8019a40:	200065d6 	.word	0x200065d6

08019a44 <__malloc_unlock>:
 8019a44:	4801      	ldr	r0, [pc, #4]	@ (8019a4c <__malloc_unlock+0x8>)
 8019a46:	f002 bf5d 	b.w	801c904 <__retarget_lock_release_recursive>
 8019a4a:	bf00      	nop
 8019a4c:	200065d6 	.word	0x200065d6

08019a50 <sulp>:
 8019a50:	b570      	push	{r4, r5, r6, lr}
 8019a52:	4604      	mov	r4, r0
 8019a54:	460d      	mov	r5, r1
 8019a56:	ec45 4b10 	vmov	d0, r4, r5
 8019a5a:	4616      	mov	r6, r2
 8019a5c:	f004 fd92 	bl	801e584 <__ulp>
 8019a60:	ec51 0b10 	vmov	r0, r1, d0
 8019a64:	b17e      	cbz	r6, 8019a86 <sulp+0x36>
 8019a66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019a6a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	dd09      	ble.n	8019a86 <sulp+0x36>
 8019a72:	051b      	lsls	r3, r3, #20
 8019a74:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8019a78:	2400      	movs	r4, #0
 8019a7a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8019a7e:	4622      	mov	r2, r4
 8019a80:	462b      	mov	r3, r5
 8019a82:	f7e6 fdc9 	bl	8000618 <__aeabi_dmul>
 8019a86:	ec41 0b10 	vmov	d0, r0, r1
 8019a8a:	bd70      	pop	{r4, r5, r6, pc}
 8019a8c:	0000      	movs	r0, r0
	...

08019a90 <_strtod_l>:
 8019a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a94:	b09f      	sub	sp, #124	@ 0x7c
 8019a96:	460c      	mov	r4, r1
 8019a98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8019a9e:	9005      	str	r0, [sp, #20]
 8019aa0:	f04f 0a00 	mov.w	sl, #0
 8019aa4:	f04f 0b00 	mov.w	fp, #0
 8019aa8:	460a      	mov	r2, r1
 8019aaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8019aac:	7811      	ldrb	r1, [r2, #0]
 8019aae:	292b      	cmp	r1, #43	@ 0x2b
 8019ab0:	d04a      	beq.n	8019b48 <_strtod_l+0xb8>
 8019ab2:	d838      	bhi.n	8019b26 <_strtod_l+0x96>
 8019ab4:	290d      	cmp	r1, #13
 8019ab6:	d832      	bhi.n	8019b1e <_strtod_l+0x8e>
 8019ab8:	2908      	cmp	r1, #8
 8019aba:	d832      	bhi.n	8019b22 <_strtod_l+0x92>
 8019abc:	2900      	cmp	r1, #0
 8019abe:	d03b      	beq.n	8019b38 <_strtod_l+0xa8>
 8019ac0:	2200      	movs	r2, #0
 8019ac2:	920e      	str	r2, [sp, #56]	@ 0x38
 8019ac4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019ac6:	782a      	ldrb	r2, [r5, #0]
 8019ac8:	2a30      	cmp	r2, #48	@ 0x30
 8019aca:	f040 80b2 	bne.w	8019c32 <_strtod_l+0x1a2>
 8019ace:	786a      	ldrb	r2, [r5, #1]
 8019ad0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019ad4:	2a58      	cmp	r2, #88	@ 0x58
 8019ad6:	d16e      	bne.n	8019bb6 <_strtod_l+0x126>
 8019ad8:	9302      	str	r3, [sp, #8]
 8019ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019adc:	9301      	str	r3, [sp, #4]
 8019ade:	ab1a      	add	r3, sp, #104	@ 0x68
 8019ae0:	9300      	str	r3, [sp, #0]
 8019ae2:	4a8f      	ldr	r2, [pc, #572]	@ (8019d20 <_strtod_l+0x290>)
 8019ae4:	9805      	ldr	r0, [sp, #20]
 8019ae6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019ae8:	a919      	add	r1, sp, #100	@ 0x64
 8019aea:	f003 feb7 	bl	801d85c <__gethex>
 8019aee:	f010 060f 	ands.w	r6, r0, #15
 8019af2:	4604      	mov	r4, r0
 8019af4:	d005      	beq.n	8019b02 <_strtod_l+0x72>
 8019af6:	2e06      	cmp	r6, #6
 8019af8:	d128      	bne.n	8019b4c <_strtod_l+0xbc>
 8019afa:	3501      	adds	r5, #1
 8019afc:	2300      	movs	r3, #0
 8019afe:	9519      	str	r5, [sp, #100]	@ 0x64
 8019b00:	930e      	str	r3, [sp, #56]	@ 0x38
 8019b02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	f040 858e 	bne.w	801a626 <_strtod_l+0xb96>
 8019b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b0c:	b1cb      	cbz	r3, 8019b42 <_strtod_l+0xb2>
 8019b0e:	4652      	mov	r2, sl
 8019b10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8019b14:	ec43 2b10 	vmov	d0, r2, r3
 8019b18:	b01f      	add	sp, #124	@ 0x7c
 8019b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b1e:	2920      	cmp	r1, #32
 8019b20:	d1ce      	bne.n	8019ac0 <_strtod_l+0x30>
 8019b22:	3201      	adds	r2, #1
 8019b24:	e7c1      	b.n	8019aaa <_strtod_l+0x1a>
 8019b26:	292d      	cmp	r1, #45	@ 0x2d
 8019b28:	d1ca      	bne.n	8019ac0 <_strtod_l+0x30>
 8019b2a:	2101      	movs	r1, #1
 8019b2c:	910e      	str	r1, [sp, #56]	@ 0x38
 8019b2e:	1c51      	adds	r1, r2, #1
 8019b30:	9119      	str	r1, [sp, #100]	@ 0x64
 8019b32:	7852      	ldrb	r2, [r2, #1]
 8019b34:	2a00      	cmp	r2, #0
 8019b36:	d1c5      	bne.n	8019ac4 <_strtod_l+0x34>
 8019b38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019b3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	f040 8570 	bne.w	801a622 <_strtod_l+0xb92>
 8019b42:	4652      	mov	r2, sl
 8019b44:	465b      	mov	r3, fp
 8019b46:	e7e5      	b.n	8019b14 <_strtod_l+0x84>
 8019b48:	2100      	movs	r1, #0
 8019b4a:	e7ef      	b.n	8019b2c <_strtod_l+0x9c>
 8019b4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019b4e:	b13a      	cbz	r2, 8019b60 <_strtod_l+0xd0>
 8019b50:	2135      	movs	r1, #53	@ 0x35
 8019b52:	a81c      	add	r0, sp, #112	@ 0x70
 8019b54:	f004 fe10 	bl	801e778 <__copybits>
 8019b58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019b5a:	9805      	ldr	r0, [sp, #20]
 8019b5c:	f004 f9e6 	bl	801df2c <_Bfree>
 8019b60:	3e01      	subs	r6, #1
 8019b62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019b64:	2e04      	cmp	r6, #4
 8019b66:	d806      	bhi.n	8019b76 <_strtod_l+0xe6>
 8019b68:	e8df f006 	tbb	[pc, r6]
 8019b6c:	201d0314 	.word	0x201d0314
 8019b70:	14          	.byte	0x14
 8019b71:	00          	.byte	0x00
 8019b72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8019b76:	05e1      	lsls	r1, r4, #23
 8019b78:	bf48      	it	mi
 8019b7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8019b7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019b82:	0d1b      	lsrs	r3, r3, #20
 8019b84:	051b      	lsls	r3, r3, #20
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d1bb      	bne.n	8019b02 <_strtod_l+0x72>
 8019b8a:	f002 fe8d 	bl	801c8a8 <__errno>
 8019b8e:	2322      	movs	r3, #34	@ 0x22
 8019b90:	6003      	str	r3, [r0, #0]
 8019b92:	e7b6      	b.n	8019b02 <_strtod_l+0x72>
 8019b94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019b98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019b9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019ba0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019ba4:	e7e7      	b.n	8019b76 <_strtod_l+0xe6>
 8019ba6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8019d28 <_strtod_l+0x298>
 8019baa:	e7e4      	b.n	8019b76 <_strtod_l+0xe6>
 8019bac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019bb0:	f04f 3aff 	mov.w	sl, #4294967295
 8019bb4:	e7df      	b.n	8019b76 <_strtod_l+0xe6>
 8019bb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019bb8:	1c5a      	adds	r2, r3, #1
 8019bba:	9219      	str	r2, [sp, #100]	@ 0x64
 8019bbc:	785b      	ldrb	r3, [r3, #1]
 8019bbe:	2b30      	cmp	r3, #48	@ 0x30
 8019bc0:	d0f9      	beq.n	8019bb6 <_strtod_l+0x126>
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d09d      	beq.n	8019b02 <_strtod_l+0x72>
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	2700      	movs	r7, #0
 8019bca:	9308      	str	r3, [sp, #32]
 8019bcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019bce:	930c      	str	r3, [sp, #48]	@ 0x30
 8019bd0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8019bd2:	46b9      	mov	r9, r7
 8019bd4:	220a      	movs	r2, #10
 8019bd6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8019bd8:	7805      	ldrb	r5, [r0, #0]
 8019bda:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019bde:	b2d9      	uxtb	r1, r3
 8019be0:	2909      	cmp	r1, #9
 8019be2:	d928      	bls.n	8019c36 <_strtod_l+0x1a6>
 8019be4:	494f      	ldr	r1, [pc, #316]	@ (8019d24 <_strtod_l+0x294>)
 8019be6:	2201      	movs	r2, #1
 8019be8:	f001 fdc5 	bl	801b776 <strncmp>
 8019bec:	2800      	cmp	r0, #0
 8019bee:	d032      	beq.n	8019c56 <_strtod_l+0x1c6>
 8019bf0:	2000      	movs	r0, #0
 8019bf2:	462a      	mov	r2, r5
 8019bf4:	900a      	str	r0, [sp, #40]	@ 0x28
 8019bf6:	464d      	mov	r5, r9
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	2a65      	cmp	r2, #101	@ 0x65
 8019bfc:	d001      	beq.n	8019c02 <_strtod_l+0x172>
 8019bfe:	2a45      	cmp	r2, #69	@ 0x45
 8019c00:	d114      	bne.n	8019c2c <_strtod_l+0x19c>
 8019c02:	b91d      	cbnz	r5, 8019c0c <_strtod_l+0x17c>
 8019c04:	9a08      	ldr	r2, [sp, #32]
 8019c06:	4302      	orrs	r2, r0
 8019c08:	d096      	beq.n	8019b38 <_strtod_l+0xa8>
 8019c0a:	2500      	movs	r5, #0
 8019c0c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019c0e:	1c62      	adds	r2, r4, #1
 8019c10:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c12:	7862      	ldrb	r2, [r4, #1]
 8019c14:	2a2b      	cmp	r2, #43	@ 0x2b
 8019c16:	d07a      	beq.n	8019d0e <_strtod_l+0x27e>
 8019c18:	2a2d      	cmp	r2, #45	@ 0x2d
 8019c1a:	d07e      	beq.n	8019d1a <_strtod_l+0x28a>
 8019c1c:	f04f 0c00 	mov.w	ip, #0
 8019c20:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8019c24:	2909      	cmp	r1, #9
 8019c26:	f240 8085 	bls.w	8019d34 <_strtod_l+0x2a4>
 8019c2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8019c2c:	f04f 0800 	mov.w	r8, #0
 8019c30:	e0a5      	b.n	8019d7e <_strtod_l+0x2ee>
 8019c32:	2300      	movs	r3, #0
 8019c34:	e7c8      	b.n	8019bc8 <_strtod_l+0x138>
 8019c36:	f1b9 0f08 	cmp.w	r9, #8
 8019c3a:	bfd8      	it	le
 8019c3c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8019c3e:	f100 0001 	add.w	r0, r0, #1
 8019c42:	bfda      	itte	le
 8019c44:	fb02 3301 	mlale	r3, r2, r1, r3
 8019c48:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8019c4a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8019c4e:	f109 0901 	add.w	r9, r9, #1
 8019c52:	9019      	str	r0, [sp, #100]	@ 0x64
 8019c54:	e7bf      	b.n	8019bd6 <_strtod_l+0x146>
 8019c56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c58:	1c5a      	adds	r2, r3, #1
 8019c5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c5c:	785a      	ldrb	r2, [r3, #1]
 8019c5e:	f1b9 0f00 	cmp.w	r9, #0
 8019c62:	d03b      	beq.n	8019cdc <_strtod_l+0x24c>
 8019c64:	900a      	str	r0, [sp, #40]	@ 0x28
 8019c66:	464d      	mov	r5, r9
 8019c68:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8019c6c:	2b09      	cmp	r3, #9
 8019c6e:	d912      	bls.n	8019c96 <_strtod_l+0x206>
 8019c70:	2301      	movs	r3, #1
 8019c72:	e7c2      	b.n	8019bfa <_strtod_l+0x16a>
 8019c74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c76:	1c5a      	adds	r2, r3, #1
 8019c78:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c7a:	785a      	ldrb	r2, [r3, #1]
 8019c7c:	3001      	adds	r0, #1
 8019c7e:	2a30      	cmp	r2, #48	@ 0x30
 8019c80:	d0f8      	beq.n	8019c74 <_strtod_l+0x1e4>
 8019c82:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019c86:	2b08      	cmp	r3, #8
 8019c88:	f200 84d2 	bhi.w	801a630 <_strtod_l+0xba0>
 8019c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c8e:	900a      	str	r0, [sp, #40]	@ 0x28
 8019c90:	2000      	movs	r0, #0
 8019c92:	930c      	str	r3, [sp, #48]	@ 0x30
 8019c94:	4605      	mov	r5, r0
 8019c96:	3a30      	subs	r2, #48	@ 0x30
 8019c98:	f100 0301 	add.w	r3, r0, #1
 8019c9c:	d018      	beq.n	8019cd0 <_strtod_l+0x240>
 8019c9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019ca0:	4419      	add	r1, r3
 8019ca2:	910a      	str	r1, [sp, #40]	@ 0x28
 8019ca4:	462e      	mov	r6, r5
 8019ca6:	f04f 0e0a 	mov.w	lr, #10
 8019caa:	1c71      	adds	r1, r6, #1
 8019cac:	eba1 0c05 	sub.w	ip, r1, r5
 8019cb0:	4563      	cmp	r3, ip
 8019cb2:	dc15      	bgt.n	8019ce0 <_strtod_l+0x250>
 8019cb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8019cb8:	182b      	adds	r3, r5, r0
 8019cba:	2b08      	cmp	r3, #8
 8019cbc:	f105 0501 	add.w	r5, r5, #1
 8019cc0:	4405      	add	r5, r0
 8019cc2:	dc1a      	bgt.n	8019cfa <_strtod_l+0x26a>
 8019cc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019cc6:	230a      	movs	r3, #10
 8019cc8:	fb03 2301 	mla	r3, r3, r1, r2
 8019ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019cce:	2300      	movs	r3, #0
 8019cd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019cd2:	1c51      	adds	r1, r2, #1
 8019cd4:	9119      	str	r1, [sp, #100]	@ 0x64
 8019cd6:	7852      	ldrb	r2, [r2, #1]
 8019cd8:	4618      	mov	r0, r3
 8019cda:	e7c5      	b.n	8019c68 <_strtod_l+0x1d8>
 8019cdc:	4648      	mov	r0, r9
 8019cde:	e7ce      	b.n	8019c7e <_strtod_l+0x1ee>
 8019ce0:	2e08      	cmp	r6, #8
 8019ce2:	dc05      	bgt.n	8019cf0 <_strtod_l+0x260>
 8019ce4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019ce6:	fb0e f606 	mul.w	r6, lr, r6
 8019cea:	960b      	str	r6, [sp, #44]	@ 0x2c
 8019cec:	460e      	mov	r6, r1
 8019cee:	e7dc      	b.n	8019caa <_strtod_l+0x21a>
 8019cf0:	2910      	cmp	r1, #16
 8019cf2:	bfd8      	it	le
 8019cf4:	fb0e f707 	mulle.w	r7, lr, r7
 8019cf8:	e7f8      	b.n	8019cec <_strtod_l+0x25c>
 8019cfa:	2b0f      	cmp	r3, #15
 8019cfc:	bfdc      	itt	le
 8019cfe:	230a      	movle	r3, #10
 8019d00:	fb03 2707 	mlale	r7, r3, r7, r2
 8019d04:	e7e3      	b.n	8019cce <_strtod_l+0x23e>
 8019d06:	2300      	movs	r3, #0
 8019d08:	930a      	str	r3, [sp, #40]	@ 0x28
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	e77a      	b.n	8019c04 <_strtod_l+0x174>
 8019d0e:	f04f 0c00 	mov.w	ip, #0
 8019d12:	1ca2      	adds	r2, r4, #2
 8019d14:	9219      	str	r2, [sp, #100]	@ 0x64
 8019d16:	78a2      	ldrb	r2, [r4, #2]
 8019d18:	e782      	b.n	8019c20 <_strtod_l+0x190>
 8019d1a:	f04f 0c01 	mov.w	ip, #1
 8019d1e:	e7f8      	b.n	8019d12 <_strtod_l+0x282>
 8019d20:	08024e7c 	.word	0x08024e7c
 8019d24:	08024b78 	.word	0x08024b78
 8019d28:	7ff00000 	.word	0x7ff00000
 8019d2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d2e:	1c51      	adds	r1, r2, #1
 8019d30:	9119      	str	r1, [sp, #100]	@ 0x64
 8019d32:	7852      	ldrb	r2, [r2, #1]
 8019d34:	2a30      	cmp	r2, #48	@ 0x30
 8019d36:	d0f9      	beq.n	8019d2c <_strtod_l+0x29c>
 8019d38:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8019d3c:	2908      	cmp	r1, #8
 8019d3e:	f63f af75 	bhi.w	8019c2c <_strtod_l+0x19c>
 8019d42:	3a30      	subs	r2, #48	@ 0x30
 8019d44:	9209      	str	r2, [sp, #36]	@ 0x24
 8019d46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d48:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019d4a:	f04f 080a 	mov.w	r8, #10
 8019d4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d50:	1c56      	adds	r6, r2, #1
 8019d52:	9619      	str	r6, [sp, #100]	@ 0x64
 8019d54:	7852      	ldrb	r2, [r2, #1]
 8019d56:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019d5a:	f1be 0f09 	cmp.w	lr, #9
 8019d5e:	d939      	bls.n	8019dd4 <_strtod_l+0x344>
 8019d60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019d62:	1a76      	subs	r6, r6, r1
 8019d64:	2e08      	cmp	r6, #8
 8019d66:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8019d6a:	dc03      	bgt.n	8019d74 <_strtod_l+0x2e4>
 8019d6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019d6e:	4588      	cmp	r8, r1
 8019d70:	bfa8      	it	ge
 8019d72:	4688      	movge	r8, r1
 8019d74:	f1bc 0f00 	cmp.w	ip, #0
 8019d78:	d001      	beq.n	8019d7e <_strtod_l+0x2ee>
 8019d7a:	f1c8 0800 	rsb	r8, r8, #0
 8019d7e:	2d00      	cmp	r5, #0
 8019d80:	d14e      	bne.n	8019e20 <_strtod_l+0x390>
 8019d82:	9908      	ldr	r1, [sp, #32]
 8019d84:	4308      	orrs	r0, r1
 8019d86:	f47f aebc 	bne.w	8019b02 <_strtod_l+0x72>
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	f47f aed4 	bne.w	8019b38 <_strtod_l+0xa8>
 8019d90:	2a69      	cmp	r2, #105	@ 0x69
 8019d92:	d028      	beq.n	8019de6 <_strtod_l+0x356>
 8019d94:	dc25      	bgt.n	8019de2 <_strtod_l+0x352>
 8019d96:	2a49      	cmp	r2, #73	@ 0x49
 8019d98:	d025      	beq.n	8019de6 <_strtod_l+0x356>
 8019d9a:	2a4e      	cmp	r2, #78	@ 0x4e
 8019d9c:	f47f aecc 	bne.w	8019b38 <_strtod_l+0xa8>
 8019da0:	499a      	ldr	r1, [pc, #616]	@ (801a00c <_strtod_l+0x57c>)
 8019da2:	a819      	add	r0, sp, #100	@ 0x64
 8019da4:	f003 ff7c 	bl	801dca0 <__match>
 8019da8:	2800      	cmp	r0, #0
 8019daa:	f43f aec5 	beq.w	8019b38 <_strtod_l+0xa8>
 8019dae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	2b28      	cmp	r3, #40	@ 0x28
 8019db4:	d12e      	bne.n	8019e14 <_strtod_l+0x384>
 8019db6:	4996      	ldr	r1, [pc, #600]	@ (801a010 <_strtod_l+0x580>)
 8019db8:	aa1c      	add	r2, sp, #112	@ 0x70
 8019dba:	a819      	add	r0, sp, #100	@ 0x64
 8019dbc:	f003 ff84 	bl	801dcc8 <__hexnan>
 8019dc0:	2805      	cmp	r0, #5
 8019dc2:	d127      	bne.n	8019e14 <_strtod_l+0x384>
 8019dc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019dc6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019dca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019dce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019dd2:	e696      	b.n	8019b02 <_strtod_l+0x72>
 8019dd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019dd6:	fb08 2101 	mla	r1, r8, r1, r2
 8019dda:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019dde:	9209      	str	r2, [sp, #36]	@ 0x24
 8019de0:	e7b5      	b.n	8019d4e <_strtod_l+0x2be>
 8019de2:	2a6e      	cmp	r2, #110	@ 0x6e
 8019de4:	e7da      	b.n	8019d9c <_strtod_l+0x30c>
 8019de6:	498b      	ldr	r1, [pc, #556]	@ (801a014 <_strtod_l+0x584>)
 8019de8:	a819      	add	r0, sp, #100	@ 0x64
 8019dea:	f003 ff59 	bl	801dca0 <__match>
 8019dee:	2800      	cmp	r0, #0
 8019df0:	f43f aea2 	beq.w	8019b38 <_strtod_l+0xa8>
 8019df4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019df6:	4988      	ldr	r1, [pc, #544]	@ (801a018 <_strtod_l+0x588>)
 8019df8:	3b01      	subs	r3, #1
 8019dfa:	a819      	add	r0, sp, #100	@ 0x64
 8019dfc:	9319      	str	r3, [sp, #100]	@ 0x64
 8019dfe:	f003 ff4f 	bl	801dca0 <__match>
 8019e02:	b910      	cbnz	r0, 8019e0a <_strtod_l+0x37a>
 8019e04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019e06:	3301      	adds	r3, #1
 8019e08:	9319      	str	r3, [sp, #100]	@ 0x64
 8019e0a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 801a028 <_strtod_l+0x598>
 8019e0e:	f04f 0a00 	mov.w	sl, #0
 8019e12:	e676      	b.n	8019b02 <_strtod_l+0x72>
 8019e14:	4881      	ldr	r0, [pc, #516]	@ (801a01c <_strtod_l+0x58c>)
 8019e16:	f002 fd8f 	bl	801c938 <nan>
 8019e1a:	ec5b ab10 	vmov	sl, fp, d0
 8019e1e:	e670      	b.n	8019b02 <_strtod_l+0x72>
 8019e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e22:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019e24:	eba8 0303 	sub.w	r3, r8, r3
 8019e28:	f1b9 0f00 	cmp.w	r9, #0
 8019e2c:	bf08      	it	eq
 8019e2e:	46a9      	moveq	r9, r5
 8019e30:	2d10      	cmp	r5, #16
 8019e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e34:	462c      	mov	r4, r5
 8019e36:	bfa8      	it	ge
 8019e38:	2410      	movge	r4, #16
 8019e3a:	f7e6 fb73 	bl	8000524 <__aeabi_ui2d>
 8019e3e:	2d09      	cmp	r5, #9
 8019e40:	4682      	mov	sl, r0
 8019e42:	468b      	mov	fp, r1
 8019e44:	dc13      	bgt.n	8019e6e <_strtod_l+0x3de>
 8019e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	f43f ae5a 	beq.w	8019b02 <_strtod_l+0x72>
 8019e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e50:	dd78      	ble.n	8019f44 <_strtod_l+0x4b4>
 8019e52:	2b16      	cmp	r3, #22
 8019e54:	dc5f      	bgt.n	8019f16 <_strtod_l+0x486>
 8019e56:	4972      	ldr	r1, [pc, #456]	@ (801a020 <_strtod_l+0x590>)
 8019e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e60:	4652      	mov	r2, sl
 8019e62:	465b      	mov	r3, fp
 8019e64:	f7e6 fbd8 	bl	8000618 <__aeabi_dmul>
 8019e68:	4682      	mov	sl, r0
 8019e6a:	468b      	mov	fp, r1
 8019e6c:	e649      	b.n	8019b02 <_strtod_l+0x72>
 8019e6e:	4b6c      	ldr	r3, [pc, #432]	@ (801a020 <_strtod_l+0x590>)
 8019e70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019e74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019e78:	f7e6 fbce 	bl	8000618 <__aeabi_dmul>
 8019e7c:	4682      	mov	sl, r0
 8019e7e:	4638      	mov	r0, r7
 8019e80:	468b      	mov	fp, r1
 8019e82:	f7e6 fb4f 	bl	8000524 <__aeabi_ui2d>
 8019e86:	4602      	mov	r2, r0
 8019e88:	460b      	mov	r3, r1
 8019e8a:	4650      	mov	r0, sl
 8019e8c:	4659      	mov	r1, fp
 8019e8e:	f7e6 fa0d 	bl	80002ac <__adddf3>
 8019e92:	2d0f      	cmp	r5, #15
 8019e94:	4682      	mov	sl, r0
 8019e96:	468b      	mov	fp, r1
 8019e98:	ddd5      	ble.n	8019e46 <_strtod_l+0x3b6>
 8019e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e9c:	1b2c      	subs	r4, r5, r4
 8019e9e:	441c      	add	r4, r3
 8019ea0:	2c00      	cmp	r4, #0
 8019ea2:	f340 8093 	ble.w	8019fcc <_strtod_l+0x53c>
 8019ea6:	f014 030f 	ands.w	r3, r4, #15
 8019eaa:	d00a      	beq.n	8019ec2 <_strtod_l+0x432>
 8019eac:	495c      	ldr	r1, [pc, #368]	@ (801a020 <_strtod_l+0x590>)
 8019eae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019eb2:	4652      	mov	r2, sl
 8019eb4:	465b      	mov	r3, fp
 8019eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019eba:	f7e6 fbad 	bl	8000618 <__aeabi_dmul>
 8019ebe:	4682      	mov	sl, r0
 8019ec0:	468b      	mov	fp, r1
 8019ec2:	f034 040f 	bics.w	r4, r4, #15
 8019ec6:	d073      	beq.n	8019fb0 <_strtod_l+0x520>
 8019ec8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019ecc:	dd49      	ble.n	8019f62 <_strtod_l+0x4d2>
 8019ece:	2400      	movs	r4, #0
 8019ed0:	46a0      	mov	r8, r4
 8019ed2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8019ed4:	46a1      	mov	r9, r4
 8019ed6:	9a05      	ldr	r2, [sp, #20]
 8019ed8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801a028 <_strtod_l+0x598>
 8019edc:	2322      	movs	r3, #34	@ 0x22
 8019ede:	6013      	str	r3, [r2, #0]
 8019ee0:	f04f 0a00 	mov.w	sl, #0
 8019ee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f43f ae0b 	beq.w	8019b02 <_strtod_l+0x72>
 8019eec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019eee:	9805      	ldr	r0, [sp, #20]
 8019ef0:	f004 f81c 	bl	801df2c <_Bfree>
 8019ef4:	9805      	ldr	r0, [sp, #20]
 8019ef6:	4649      	mov	r1, r9
 8019ef8:	f004 f818 	bl	801df2c <_Bfree>
 8019efc:	9805      	ldr	r0, [sp, #20]
 8019efe:	4641      	mov	r1, r8
 8019f00:	f004 f814 	bl	801df2c <_Bfree>
 8019f04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019f06:	9805      	ldr	r0, [sp, #20]
 8019f08:	f004 f810 	bl	801df2c <_Bfree>
 8019f0c:	9805      	ldr	r0, [sp, #20]
 8019f0e:	4621      	mov	r1, r4
 8019f10:	f004 f80c 	bl	801df2c <_Bfree>
 8019f14:	e5f5      	b.n	8019b02 <_strtod_l+0x72>
 8019f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019f1c:	4293      	cmp	r3, r2
 8019f1e:	dbbc      	blt.n	8019e9a <_strtod_l+0x40a>
 8019f20:	4c3f      	ldr	r4, [pc, #252]	@ (801a020 <_strtod_l+0x590>)
 8019f22:	f1c5 050f 	rsb	r5, r5, #15
 8019f26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019f2a:	4652      	mov	r2, sl
 8019f2c:	465b      	mov	r3, fp
 8019f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f32:	f7e6 fb71 	bl	8000618 <__aeabi_dmul>
 8019f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f38:	1b5d      	subs	r5, r3, r5
 8019f3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019f3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019f42:	e78f      	b.n	8019e64 <_strtod_l+0x3d4>
 8019f44:	3316      	adds	r3, #22
 8019f46:	dba8      	blt.n	8019e9a <_strtod_l+0x40a>
 8019f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f4a:	eba3 0808 	sub.w	r8, r3, r8
 8019f4e:	4b34      	ldr	r3, [pc, #208]	@ (801a020 <_strtod_l+0x590>)
 8019f50:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019f54:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019f58:	4650      	mov	r0, sl
 8019f5a:	4659      	mov	r1, fp
 8019f5c:	f7e6 fc86 	bl	800086c <__aeabi_ddiv>
 8019f60:	e782      	b.n	8019e68 <_strtod_l+0x3d8>
 8019f62:	2300      	movs	r3, #0
 8019f64:	4f2f      	ldr	r7, [pc, #188]	@ (801a024 <_strtod_l+0x594>)
 8019f66:	1124      	asrs	r4, r4, #4
 8019f68:	4650      	mov	r0, sl
 8019f6a:	4659      	mov	r1, fp
 8019f6c:	461e      	mov	r6, r3
 8019f6e:	2c01      	cmp	r4, #1
 8019f70:	dc21      	bgt.n	8019fb6 <_strtod_l+0x526>
 8019f72:	b10b      	cbz	r3, 8019f78 <_strtod_l+0x4e8>
 8019f74:	4682      	mov	sl, r0
 8019f76:	468b      	mov	fp, r1
 8019f78:	492a      	ldr	r1, [pc, #168]	@ (801a024 <_strtod_l+0x594>)
 8019f7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019f7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019f82:	4652      	mov	r2, sl
 8019f84:	465b      	mov	r3, fp
 8019f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f8a:	f7e6 fb45 	bl	8000618 <__aeabi_dmul>
 8019f8e:	4b26      	ldr	r3, [pc, #152]	@ (801a028 <_strtod_l+0x598>)
 8019f90:	460a      	mov	r2, r1
 8019f92:	400b      	ands	r3, r1
 8019f94:	4925      	ldr	r1, [pc, #148]	@ (801a02c <_strtod_l+0x59c>)
 8019f96:	428b      	cmp	r3, r1
 8019f98:	4682      	mov	sl, r0
 8019f9a:	d898      	bhi.n	8019ece <_strtod_l+0x43e>
 8019f9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019fa0:	428b      	cmp	r3, r1
 8019fa2:	bf86      	itte	hi
 8019fa4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 801a030 <_strtod_l+0x5a0>
 8019fa8:	f04f 3aff 	movhi.w	sl, #4294967295
 8019fac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	9308      	str	r3, [sp, #32]
 8019fb4:	e076      	b.n	801a0a4 <_strtod_l+0x614>
 8019fb6:	07e2      	lsls	r2, r4, #31
 8019fb8:	d504      	bpl.n	8019fc4 <_strtod_l+0x534>
 8019fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019fbe:	f7e6 fb2b 	bl	8000618 <__aeabi_dmul>
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	3601      	adds	r6, #1
 8019fc6:	1064      	asrs	r4, r4, #1
 8019fc8:	3708      	adds	r7, #8
 8019fca:	e7d0      	b.n	8019f6e <_strtod_l+0x4de>
 8019fcc:	d0f0      	beq.n	8019fb0 <_strtod_l+0x520>
 8019fce:	4264      	negs	r4, r4
 8019fd0:	f014 020f 	ands.w	r2, r4, #15
 8019fd4:	d00a      	beq.n	8019fec <_strtod_l+0x55c>
 8019fd6:	4b12      	ldr	r3, [pc, #72]	@ (801a020 <_strtod_l+0x590>)
 8019fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019fdc:	4650      	mov	r0, sl
 8019fde:	4659      	mov	r1, fp
 8019fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe4:	f7e6 fc42 	bl	800086c <__aeabi_ddiv>
 8019fe8:	4682      	mov	sl, r0
 8019fea:	468b      	mov	fp, r1
 8019fec:	1124      	asrs	r4, r4, #4
 8019fee:	d0df      	beq.n	8019fb0 <_strtod_l+0x520>
 8019ff0:	2c1f      	cmp	r4, #31
 8019ff2:	dd1f      	ble.n	801a034 <_strtod_l+0x5a4>
 8019ff4:	2400      	movs	r4, #0
 8019ff6:	46a0      	mov	r8, r4
 8019ff8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8019ffa:	46a1      	mov	r9, r4
 8019ffc:	9a05      	ldr	r2, [sp, #20]
 8019ffe:	2322      	movs	r3, #34	@ 0x22
 801a000:	f04f 0a00 	mov.w	sl, #0
 801a004:	f04f 0b00 	mov.w	fp, #0
 801a008:	6013      	str	r3, [r2, #0]
 801a00a:	e76b      	b.n	8019ee4 <_strtod_l+0x454>
 801a00c:	08024b87 	.word	0x08024b87
 801a010:	08024e68 	.word	0x08024e68
 801a014:	08024b7f 	.word	0x08024b7f
 801a018:	08024d0f 	.word	0x08024d0f
 801a01c:	08024d0b 	.word	0x08024d0b
 801a020:	080250b0 	.word	0x080250b0
 801a024:	08025088 	.word	0x08025088
 801a028:	7ff00000 	.word	0x7ff00000
 801a02c:	7ca00000 	.word	0x7ca00000
 801a030:	7fefffff 	.word	0x7fefffff
 801a034:	f014 0310 	ands.w	r3, r4, #16
 801a038:	bf18      	it	ne
 801a03a:	236a      	movne	r3, #106	@ 0x6a
 801a03c:	4ea9      	ldr	r6, [pc, #676]	@ (801a2e4 <_strtod_l+0x854>)
 801a03e:	9308      	str	r3, [sp, #32]
 801a040:	4650      	mov	r0, sl
 801a042:	4659      	mov	r1, fp
 801a044:	2300      	movs	r3, #0
 801a046:	07e7      	lsls	r7, r4, #31
 801a048:	d504      	bpl.n	801a054 <_strtod_l+0x5c4>
 801a04a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a04e:	f7e6 fae3 	bl	8000618 <__aeabi_dmul>
 801a052:	2301      	movs	r3, #1
 801a054:	1064      	asrs	r4, r4, #1
 801a056:	f106 0608 	add.w	r6, r6, #8
 801a05a:	d1f4      	bne.n	801a046 <_strtod_l+0x5b6>
 801a05c:	b10b      	cbz	r3, 801a062 <_strtod_l+0x5d2>
 801a05e:	4682      	mov	sl, r0
 801a060:	468b      	mov	fp, r1
 801a062:	9b08      	ldr	r3, [sp, #32]
 801a064:	b1b3      	cbz	r3, 801a094 <_strtod_l+0x604>
 801a066:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801a06a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801a06e:	2b00      	cmp	r3, #0
 801a070:	4659      	mov	r1, fp
 801a072:	dd0f      	ble.n	801a094 <_strtod_l+0x604>
 801a074:	2b1f      	cmp	r3, #31
 801a076:	dd56      	ble.n	801a126 <_strtod_l+0x696>
 801a078:	2b34      	cmp	r3, #52	@ 0x34
 801a07a:	bfde      	ittt	le
 801a07c:	f04f 33ff 	movle.w	r3, #4294967295
 801a080:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801a084:	4093      	lslle	r3, r2
 801a086:	f04f 0a00 	mov.w	sl, #0
 801a08a:	bfcc      	ite	gt
 801a08c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801a090:	ea03 0b01 	andle.w	fp, r3, r1
 801a094:	2200      	movs	r2, #0
 801a096:	2300      	movs	r3, #0
 801a098:	4650      	mov	r0, sl
 801a09a:	4659      	mov	r1, fp
 801a09c:	f7e6 fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 801a0a0:	2800      	cmp	r0, #0
 801a0a2:	d1a7      	bne.n	8019ff4 <_strtod_l+0x564>
 801a0a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a0a6:	9300      	str	r3, [sp, #0]
 801a0a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a0aa:	9805      	ldr	r0, [sp, #20]
 801a0ac:	462b      	mov	r3, r5
 801a0ae:	464a      	mov	r2, r9
 801a0b0:	f003 ffa4 	bl	801dffc <__s2b>
 801a0b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a0b6:	2800      	cmp	r0, #0
 801a0b8:	f43f af09 	beq.w	8019ece <_strtod_l+0x43e>
 801a0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a0be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0c0:	2a00      	cmp	r2, #0
 801a0c2:	eba3 0308 	sub.w	r3, r3, r8
 801a0c6:	bfa8      	it	ge
 801a0c8:	2300      	movge	r3, #0
 801a0ca:	9312      	str	r3, [sp, #72]	@ 0x48
 801a0cc:	2400      	movs	r4, #0
 801a0ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a0d2:	9316      	str	r3, [sp, #88]	@ 0x58
 801a0d4:	46a0      	mov	r8, r4
 801a0d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a0d8:	9805      	ldr	r0, [sp, #20]
 801a0da:	6859      	ldr	r1, [r3, #4]
 801a0dc:	f003 fee6 	bl	801deac <_Balloc>
 801a0e0:	4681      	mov	r9, r0
 801a0e2:	2800      	cmp	r0, #0
 801a0e4:	f43f aef7 	beq.w	8019ed6 <_strtod_l+0x446>
 801a0e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a0ea:	691a      	ldr	r2, [r3, #16]
 801a0ec:	3202      	adds	r2, #2
 801a0ee:	f103 010c 	add.w	r1, r3, #12
 801a0f2:	0092      	lsls	r2, r2, #2
 801a0f4:	300c      	adds	r0, #12
 801a0f6:	f002 fc0e 	bl	801c916 <memcpy>
 801a0fa:	ec4b ab10 	vmov	d0, sl, fp
 801a0fe:	9805      	ldr	r0, [sp, #20]
 801a100:	aa1c      	add	r2, sp, #112	@ 0x70
 801a102:	a91b      	add	r1, sp, #108	@ 0x6c
 801a104:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801a108:	f004 faac 	bl	801e664 <__d2b>
 801a10c:	901a      	str	r0, [sp, #104]	@ 0x68
 801a10e:	2800      	cmp	r0, #0
 801a110:	f43f aee1 	beq.w	8019ed6 <_strtod_l+0x446>
 801a114:	9805      	ldr	r0, [sp, #20]
 801a116:	2101      	movs	r1, #1
 801a118:	f004 f806 	bl	801e128 <__i2b>
 801a11c:	4680      	mov	r8, r0
 801a11e:	b948      	cbnz	r0, 801a134 <_strtod_l+0x6a4>
 801a120:	f04f 0800 	mov.w	r8, #0
 801a124:	e6d7      	b.n	8019ed6 <_strtod_l+0x446>
 801a126:	f04f 32ff 	mov.w	r2, #4294967295
 801a12a:	fa02 f303 	lsl.w	r3, r2, r3
 801a12e:	ea03 0a0a 	and.w	sl, r3, sl
 801a132:	e7af      	b.n	801a094 <_strtod_l+0x604>
 801a134:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801a136:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a138:	2d00      	cmp	r5, #0
 801a13a:	bfab      	itete	ge
 801a13c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801a13e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801a140:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801a142:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801a144:	bfac      	ite	ge
 801a146:	18ef      	addge	r7, r5, r3
 801a148:	1b5e      	sublt	r6, r3, r5
 801a14a:	9b08      	ldr	r3, [sp, #32]
 801a14c:	1aed      	subs	r5, r5, r3
 801a14e:	4415      	add	r5, r2
 801a150:	4b65      	ldr	r3, [pc, #404]	@ (801a2e8 <_strtod_l+0x858>)
 801a152:	3d01      	subs	r5, #1
 801a154:	429d      	cmp	r5, r3
 801a156:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a15a:	da50      	bge.n	801a1fe <_strtod_l+0x76e>
 801a15c:	1b5b      	subs	r3, r3, r5
 801a15e:	2b1f      	cmp	r3, #31
 801a160:	eba2 0203 	sub.w	r2, r2, r3
 801a164:	f04f 0101 	mov.w	r1, #1
 801a168:	dc3d      	bgt.n	801a1e6 <_strtod_l+0x756>
 801a16a:	fa01 f303 	lsl.w	r3, r1, r3
 801a16e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a170:	2300      	movs	r3, #0
 801a172:	9310      	str	r3, [sp, #64]	@ 0x40
 801a174:	18bd      	adds	r5, r7, r2
 801a176:	9b08      	ldr	r3, [sp, #32]
 801a178:	42af      	cmp	r7, r5
 801a17a:	4416      	add	r6, r2
 801a17c:	441e      	add	r6, r3
 801a17e:	463b      	mov	r3, r7
 801a180:	bfa8      	it	ge
 801a182:	462b      	movge	r3, r5
 801a184:	42b3      	cmp	r3, r6
 801a186:	bfa8      	it	ge
 801a188:	4633      	movge	r3, r6
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	bfc2      	ittt	gt
 801a18e:	1aed      	subgt	r5, r5, r3
 801a190:	1af6      	subgt	r6, r6, r3
 801a192:	1aff      	subgt	r7, r7, r3
 801a194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a196:	2b00      	cmp	r3, #0
 801a198:	dd16      	ble.n	801a1c8 <_strtod_l+0x738>
 801a19a:	4641      	mov	r1, r8
 801a19c:	9805      	ldr	r0, [sp, #20]
 801a19e:	461a      	mov	r2, r3
 801a1a0:	f004 f87a 	bl	801e298 <__pow5mult>
 801a1a4:	4680      	mov	r8, r0
 801a1a6:	2800      	cmp	r0, #0
 801a1a8:	d0ba      	beq.n	801a120 <_strtod_l+0x690>
 801a1aa:	4601      	mov	r1, r0
 801a1ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a1ae:	9805      	ldr	r0, [sp, #20]
 801a1b0:	f003 ffd0 	bl	801e154 <__multiply>
 801a1b4:	900a      	str	r0, [sp, #40]	@ 0x28
 801a1b6:	2800      	cmp	r0, #0
 801a1b8:	f43f ae8d 	beq.w	8019ed6 <_strtod_l+0x446>
 801a1bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a1be:	9805      	ldr	r0, [sp, #20]
 801a1c0:	f003 feb4 	bl	801df2c <_Bfree>
 801a1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a1c6:	931a      	str	r3, [sp, #104]	@ 0x68
 801a1c8:	2d00      	cmp	r5, #0
 801a1ca:	dc1d      	bgt.n	801a208 <_strtod_l+0x778>
 801a1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	dd23      	ble.n	801a21a <_strtod_l+0x78a>
 801a1d2:	4649      	mov	r1, r9
 801a1d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a1d6:	9805      	ldr	r0, [sp, #20]
 801a1d8:	f004 f85e 	bl	801e298 <__pow5mult>
 801a1dc:	4681      	mov	r9, r0
 801a1de:	b9e0      	cbnz	r0, 801a21a <_strtod_l+0x78a>
 801a1e0:	f04f 0900 	mov.w	r9, #0
 801a1e4:	e677      	b.n	8019ed6 <_strtod_l+0x446>
 801a1e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801a1ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801a1ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801a1f2:	35e2      	adds	r5, #226	@ 0xe2
 801a1f4:	fa01 f305 	lsl.w	r3, r1, r5
 801a1f8:	9310      	str	r3, [sp, #64]	@ 0x40
 801a1fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a1fc:	e7ba      	b.n	801a174 <_strtod_l+0x6e4>
 801a1fe:	2300      	movs	r3, #0
 801a200:	9310      	str	r3, [sp, #64]	@ 0x40
 801a202:	2301      	movs	r3, #1
 801a204:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a206:	e7b5      	b.n	801a174 <_strtod_l+0x6e4>
 801a208:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a20a:	9805      	ldr	r0, [sp, #20]
 801a20c:	462a      	mov	r2, r5
 801a20e:	f004 f89d 	bl	801e34c <__lshift>
 801a212:	901a      	str	r0, [sp, #104]	@ 0x68
 801a214:	2800      	cmp	r0, #0
 801a216:	d1d9      	bne.n	801a1cc <_strtod_l+0x73c>
 801a218:	e65d      	b.n	8019ed6 <_strtod_l+0x446>
 801a21a:	2e00      	cmp	r6, #0
 801a21c:	dd07      	ble.n	801a22e <_strtod_l+0x79e>
 801a21e:	4649      	mov	r1, r9
 801a220:	9805      	ldr	r0, [sp, #20]
 801a222:	4632      	mov	r2, r6
 801a224:	f004 f892 	bl	801e34c <__lshift>
 801a228:	4681      	mov	r9, r0
 801a22a:	2800      	cmp	r0, #0
 801a22c:	d0d8      	beq.n	801a1e0 <_strtod_l+0x750>
 801a22e:	2f00      	cmp	r7, #0
 801a230:	dd08      	ble.n	801a244 <_strtod_l+0x7b4>
 801a232:	4641      	mov	r1, r8
 801a234:	9805      	ldr	r0, [sp, #20]
 801a236:	463a      	mov	r2, r7
 801a238:	f004 f888 	bl	801e34c <__lshift>
 801a23c:	4680      	mov	r8, r0
 801a23e:	2800      	cmp	r0, #0
 801a240:	f43f ae49 	beq.w	8019ed6 <_strtod_l+0x446>
 801a244:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a246:	9805      	ldr	r0, [sp, #20]
 801a248:	464a      	mov	r2, r9
 801a24a:	f004 f907 	bl	801e45c <__mdiff>
 801a24e:	4604      	mov	r4, r0
 801a250:	2800      	cmp	r0, #0
 801a252:	f43f ae40 	beq.w	8019ed6 <_strtod_l+0x446>
 801a256:	68c3      	ldr	r3, [r0, #12]
 801a258:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a25a:	2300      	movs	r3, #0
 801a25c:	60c3      	str	r3, [r0, #12]
 801a25e:	4641      	mov	r1, r8
 801a260:	f004 f8e0 	bl	801e424 <__mcmp>
 801a264:	2800      	cmp	r0, #0
 801a266:	da45      	bge.n	801a2f4 <_strtod_l+0x864>
 801a268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a26a:	ea53 030a 	orrs.w	r3, r3, sl
 801a26e:	d16b      	bne.n	801a348 <_strtod_l+0x8b8>
 801a270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a274:	2b00      	cmp	r3, #0
 801a276:	d167      	bne.n	801a348 <_strtod_l+0x8b8>
 801a278:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a27c:	0d1b      	lsrs	r3, r3, #20
 801a27e:	051b      	lsls	r3, r3, #20
 801a280:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a284:	d960      	bls.n	801a348 <_strtod_l+0x8b8>
 801a286:	6963      	ldr	r3, [r4, #20]
 801a288:	b913      	cbnz	r3, 801a290 <_strtod_l+0x800>
 801a28a:	6923      	ldr	r3, [r4, #16]
 801a28c:	2b01      	cmp	r3, #1
 801a28e:	dd5b      	ble.n	801a348 <_strtod_l+0x8b8>
 801a290:	4621      	mov	r1, r4
 801a292:	2201      	movs	r2, #1
 801a294:	9805      	ldr	r0, [sp, #20]
 801a296:	f004 f859 	bl	801e34c <__lshift>
 801a29a:	4641      	mov	r1, r8
 801a29c:	4604      	mov	r4, r0
 801a29e:	f004 f8c1 	bl	801e424 <__mcmp>
 801a2a2:	2800      	cmp	r0, #0
 801a2a4:	dd50      	ble.n	801a348 <_strtod_l+0x8b8>
 801a2a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a2aa:	9a08      	ldr	r2, [sp, #32]
 801a2ac:	0d1b      	lsrs	r3, r3, #20
 801a2ae:	051b      	lsls	r3, r3, #20
 801a2b0:	2a00      	cmp	r2, #0
 801a2b2:	d06a      	beq.n	801a38a <_strtod_l+0x8fa>
 801a2b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a2b8:	d867      	bhi.n	801a38a <_strtod_l+0x8fa>
 801a2ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801a2be:	f67f ae9d 	bls.w	8019ffc <_strtod_l+0x56c>
 801a2c2:	4b0a      	ldr	r3, [pc, #40]	@ (801a2ec <_strtod_l+0x85c>)
 801a2c4:	4650      	mov	r0, sl
 801a2c6:	4659      	mov	r1, fp
 801a2c8:	2200      	movs	r2, #0
 801a2ca:	f7e6 f9a5 	bl	8000618 <__aeabi_dmul>
 801a2ce:	4b08      	ldr	r3, [pc, #32]	@ (801a2f0 <_strtod_l+0x860>)
 801a2d0:	400b      	ands	r3, r1
 801a2d2:	4682      	mov	sl, r0
 801a2d4:	468b      	mov	fp, r1
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	f47f ae08 	bne.w	8019eec <_strtod_l+0x45c>
 801a2dc:	9a05      	ldr	r2, [sp, #20]
 801a2de:	2322      	movs	r3, #34	@ 0x22
 801a2e0:	6013      	str	r3, [r2, #0]
 801a2e2:	e603      	b.n	8019eec <_strtod_l+0x45c>
 801a2e4:	08024e90 	.word	0x08024e90
 801a2e8:	fffffc02 	.word	0xfffffc02
 801a2ec:	39500000 	.word	0x39500000
 801a2f0:	7ff00000 	.word	0x7ff00000
 801a2f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801a2f8:	d165      	bne.n	801a3c6 <_strtod_l+0x936>
 801a2fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a2fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a300:	b35a      	cbz	r2, 801a35a <_strtod_l+0x8ca>
 801a302:	4a9f      	ldr	r2, [pc, #636]	@ (801a580 <_strtod_l+0xaf0>)
 801a304:	4293      	cmp	r3, r2
 801a306:	d12b      	bne.n	801a360 <_strtod_l+0x8d0>
 801a308:	9b08      	ldr	r3, [sp, #32]
 801a30a:	4651      	mov	r1, sl
 801a30c:	b303      	cbz	r3, 801a350 <_strtod_l+0x8c0>
 801a30e:	4b9d      	ldr	r3, [pc, #628]	@ (801a584 <_strtod_l+0xaf4>)
 801a310:	465a      	mov	r2, fp
 801a312:	4013      	ands	r3, r2
 801a314:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801a318:	f04f 32ff 	mov.w	r2, #4294967295
 801a31c:	d81b      	bhi.n	801a356 <_strtod_l+0x8c6>
 801a31e:	0d1b      	lsrs	r3, r3, #20
 801a320:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a324:	fa02 f303 	lsl.w	r3, r2, r3
 801a328:	4299      	cmp	r1, r3
 801a32a:	d119      	bne.n	801a360 <_strtod_l+0x8d0>
 801a32c:	4b96      	ldr	r3, [pc, #600]	@ (801a588 <_strtod_l+0xaf8>)
 801a32e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a330:	429a      	cmp	r2, r3
 801a332:	d102      	bne.n	801a33a <_strtod_l+0x8aa>
 801a334:	3101      	adds	r1, #1
 801a336:	f43f adce 	beq.w	8019ed6 <_strtod_l+0x446>
 801a33a:	4b92      	ldr	r3, [pc, #584]	@ (801a584 <_strtod_l+0xaf4>)
 801a33c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a33e:	401a      	ands	r2, r3
 801a340:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801a344:	f04f 0a00 	mov.w	sl, #0
 801a348:	9b08      	ldr	r3, [sp, #32]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d1b9      	bne.n	801a2c2 <_strtod_l+0x832>
 801a34e:	e5cd      	b.n	8019eec <_strtod_l+0x45c>
 801a350:	f04f 33ff 	mov.w	r3, #4294967295
 801a354:	e7e8      	b.n	801a328 <_strtod_l+0x898>
 801a356:	4613      	mov	r3, r2
 801a358:	e7e6      	b.n	801a328 <_strtod_l+0x898>
 801a35a:	ea53 030a 	orrs.w	r3, r3, sl
 801a35e:	d0a2      	beq.n	801a2a6 <_strtod_l+0x816>
 801a360:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a362:	b1db      	cbz	r3, 801a39c <_strtod_l+0x90c>
 801a364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a366:	4213      	tst	r3, r2
 801a368:	d0ee      	beq.n	801a348 <_strtod_l+0x8b8>
 801a36a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a36c:	9a08      	ldr	r2, [sp, #32]
 801a36e:	4650      	mov	r0, sl
 801a370:	4659      	mov	r1, fp
 801a372:	b1bb      	cbz	r3, 801a3a4 <_strtod_l+0x914>
 801a374:	f7ff fb6c 	bl	8019a50 <sulp>
 801a378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a37c:	ec53 2b10 	vmov	r2, r3, d0
 801a380:	f7e5 ff94 	bl	80002ac <__adddf3>
 801a384:	4682      	mov	sl, r0
 801a386:	468b      	mov	fp, r1
 801a388:	e7de      	b.n	801a348 <_strtod_l+0x8b8>
 801a38a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a38e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a392:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a396:	f04f 3aff 	mov.w	sl, #4294967295
 801a39a:	e7d5      	b.n	801a348 <_strtod_l+0x8b8>
 801a39c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a39e:	ea13 0f0a 	tst.w	r3, sl
 801a3a2:	e7e1      	b.n	801a368 <_strtod_l+0x8d8>
 801a3a4:	f7ff fb54 	bl	8019a50 <sulp>
 801a3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a3ac:	ec53 2b10 	vmov	r2, r3, d0
 801a3b0:	f7e5 ff7a 	bl	80002a8 <__aeabi_dsub>
 801a3b4:	2200      	movs	r2, #0
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	4682      	mov	sl, r0
 801a3ba:	468b      	mov	fp, r1
 801a3bc:	f7e6 fb94 	bl	8000ae8 <__aeabi_dcmpeq>
 801a3c0:	2800      	cmp	r0, #0
 801a3c2:	d0c1      	beq.n	801a348 <_strtod_l+0x8b8>
 801a3c4:	e61a      	b.n	8019ffc <_strtod_l+0x56c>
 801a3c6:	4641      	mov	r1, r8
 801a3c8:	4620      	mov	r0, r4
 801a3ca:	f004 f9a3 	bl	801e714 <__ratio>
 801a3ce:	ec57 6b10 	vmov	r6, r7, d0
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a3d8:	4630      	mov	r0, r6
 801a3da:	4639      	mov	r1, r7
 801a3dc:	f7e6 fb98 	bl	8000b10 <__aeabi_dcmple>
 801a3e0:	2800      	cmp	r0, #0
 801a3e2:	d06f      	beq.n	801a4c4 <_strtod_l+0xa34>
 801a3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d17a      	bne.n	801a4e0 <_strtod_l+0xa50>
 801a3ea:	f1ba 0f00 	cmp.w	sl, #0
 801a3ee:	d158      	bne.n	801a4a2 <_strtod_l+0xa12>
 801a3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a3f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d15a      	bne.n	801a4b0 <_strtod_l+0xa20>
 801a3fa:	4b64      	ldr	r3, [pc, #400]	@ (801a58c <_strtod_l+0xafc>)
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	4630      	mov	r0, r6
 801a400:	4639      	mov	r1, r7
 801a402:	f7e6 fb7b 	bl	8000afc <__aeabi_dcmplt>
 801a406:	2800      	cmp	r0, #0
 801a408:	d159      	bne.n	801a4be <_strtod_l+0xa2e>
 801a40a:	4630      	mov	r0, r6
 801a40c:	4639      	mov	r1, r7
 801a40e:	4b60      	ldr	r3, [pc, #384]	@ (801a590 <_strtod_l+0xb00>)
 801a410:	2200      	movs	r2, #0
 801a412:	f7e6 f901 	bl	8000618 <__aeabi_dmul>
 801a416:	4606      	mov	r6, r0
 801a418:	460f      	mov	r7, r1
 801a41a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801a41e:	9606      	str	r6, [sp, #24]
 801a420:	9307      	str	r3, [sp, #28]
 801a422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a426:	4d57      	ldr	r5, [pc, #348]	@ (801a584 <_strtod_l+0xaf4>)
 801a428:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a42e:	401d      	ands	r5, r3
 801a430:	4b58      	ldr	r3, [pc, #352]	@ (801a594 <_strtod_l+0xb04>)
 801a432:	429d      	cmp	r5, r3
 801a434:	f040 80b2 	bne.w	801a59c <_strtod_l+0xb0c>
 801a438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a43a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801a43e:	ec4b ab10 	vmov	d0, sl, fp
 801a442:	f004 f89f 	bl	801e584 <__ulp>
 801a446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a44a:	ec51 0b10 	vmov	r0, r1, d0
 801a44e:	f7e6 f8e3 	bl	8000618 <__aeabi_dmul>
 801a452:	4652      	mov	r2, sl
 801a454:	465b      	mov	r3, fp
 801a456:	f7e5 ff29 	bl	80002ac <__adddf3>
 801a45a:	460b      	mov	r3, r1
 801a45c:	4949      	ldr	r1, [pc, #292]	@ (801a584 <_strtod_l+0xaf4>)
 801a45e:	4a4e      	ldr	r2, [pc, #312]	@ (801a598 <_strtod_l+0xb08>)
 801a460:	4019      	ands	r1, r3
 801a462:	4291      	cmp	r1, r2
 801a464:	4682      	mov	sl, r0
 801a466:	d942      	bls.n	801a4ee <_strtod_l+0xa5e>
 801a468:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a46a:	4b47      	ldr	r3, [pc, #284]	@ (801a588 <_strtod_l+0xaf8>)
 801a46c:	429a      	cmp	r2, r3
 801a46e:	d103      	bne.n	801a478 <_strtod_l+0x9e8>
 801a470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a472:	3301      	adds	r3, #1
 801a474:	f43f ad2f 	beq.w	8019ed6 <_strtod_l+0x446>
 801a478:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a588 <_strtod_l+0xaf8>
 801a47c:	f04f 3aff 	mov.w	sl, #4294967295
 801a480:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a482:	9805      	ldr	r0, [sp, #20]
 801a484:	f003 fd52 	bl	801df2c <_Bfree>
 801a488:	9805      	ldr	r0, [sp, #20]
 801a48a:	4649      	mov	r1, r9
 801a48c:	f003 fd4e 	bl	801df2c <_Bfree>
 801a490:	9805      	ldr	r0, [sp, #20]
 801a492:	4641      	mov	r1, r8
 801a494:	f003 fd4a 	bl	801df2c <_Bfree>
 801a498:	9805      	ldr	r0, [sp, #20]
 801a49a:	4621      	mov	r1, r4
 801a49c:	f003 fd46 	bl	801df2c <_Bfree>
 801a4a0:	e619      	b.n	801a0d6 <_strtod_l+0x646>
 801a4a2:	f1ba 0f01 	cmp.w	sl, #1
 801a4a6:	d103      	bne.n	801a4b0 <_strtod_l+0xa20>
 801a4a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	f43f ada6 	beq.w	8019ffc <_strtod_l+0x56c>
 801a4b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a560 <_strtod_l+0xad0>
 801a4b4:	4f35      	ldr	r7, [pc, #212]	@ (801a58c <_strtod_l+0xafc>)
 801a4b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a4ba:	2600      	movs	r6, #0
 801a4bc:	e7b1      	b.n	801a422 <_strtod_l+0x992>
 801a4be:	4f34      	ldr	r7, [pc, #208]	@ (801a590 <_strtod_l+0xb00>)
 801a4c0:	2600      	movs	r6, #0
 801a4c2:	e7aa      	b.n	801a41a <_strtod_l+0x98a>
 801a4c4:	4b32      	ldr	r3, [pc, #200]	@ (801a590 <_strtod_l+0xb00>)
 801a4c6:	4630      	mov	r0, r6
 801a4c8:	4639      	mov	r1, r7
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	f7e6 f8a4 	bl	8000618 <__aeabi_dmul>
 801a4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a4d2:	4606      	mov	r6, r0
 801a4d4:	460f      	mov	r7, r1
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d09f      	beq.n	801a41a <_strtod_l+0x98a>
 801a4da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a4de:	e7a0      	b.n	801a422 <_strtod_l+0x992>
 801a4e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a568 <_strtod_l+0xad8>
 801a4e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a4e8:	ec57 6b17 	vmov	r6, r7, d7
 801a4ec:	e799      	b.n	801a422 <_strtod_l+0x992>
 801a4ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a4f2:	9b08      	ldr	r3, [sp, #32]
 801a4f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d1c1      	bne.n	801a480 <_strtod_l+0x9f0>
 801a4fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a500:	0d1b      	lsrs	r3, r3, #20
 801a502:	051b      	lsls	r3, r3, #20
 801a504:	429d      	cmp	r5, r3
 801a506:	d1bb      	bne.n	801a480 <_strtod_l+0x9f0>
 801a508:	4630      	mov	r0, r6
 801a50a:	4639      	mov	r1, r7
 801a50c:	f7e6 fc34 	bl	8000d78 <__aeabi_d2lz>
 801a510:	f7e6 f854 	bl	80005bc <__aeabi_l2d>
 801a514:	4602      	mov	r2, r0
 801a516:	460b      	mov	r3, r1
 801a518:	4630      	mov	r0, r6
 801a51a:	4639      	mov	r1, r7
 801a51c:	f7e5 fec4 	bl	80002a8 <__aeabi_dsub>
 801a520:	460b      	mov	r3, r1
 801a522:	4602      	mov	r2, r0
 801a524:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a528:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a52e:	ea46 060a 	orr.w	r6, r6, sl
 801a532:	431e      	orrs	r6, r3
 801a534:	d06f      	beq.n	801a616 <_strtod_l+0xb86>
 801a536:	a30e      	add	r3, pc, #56	@ (adr r3, 801a570 <_strtod_l+0xae0>)
 801a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a53c:	f7e6 fade 	bl	8000afc <__aeabi_dcmplt>
 801a540:	2800      	cmp	r0, #0
 801a542:	f47f acd3 	bne.w	8019eec <_strtod_l+0x45c>
 801a546:	a30c      	add	r3, pc, #48	@ (adr r3, 801a578 <_strtod_l+0xae8>)
 801a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a54c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a550:	f7e6 faf2 	bl	8000b38 <__aeabi_dcmpgt>
 801a554:	2800      	cmp	r0, #0
 801a556:	d093      	beq.n	801a480 <_strtod_l+0x9f0>
 801a558:	e4c8      	b.n	8019eec <_strtod_l+0x45c>
 801a55a:	bf00      	nop
 801a55c:	f3af 8000 	nop.w
 801a560:	00000000 	.word	0x00000000
 801a564:	bff00000 	.word	0xbff00000
 801a568:	00000000 	.word	0x00000000
 801a56c:	3ff00000 	.word	0x3ff00000
 801a570:	94a03595 	.word	0x94a03595
 801a574:	3fdfffff 	.word	0x3fdfffff
 801a578:	35afe535 	.word	0x35afe535
 801a57c:	3fe00000 	.word	0x3fe00000
 801a580:	000fffff 	.word	0x000fffff
 801a584:	7ff00000 	.word	0x7ff00000
 801a588:	7fefffff 	.word	0x7fefffff
 801a58c:	3ff00000 	.word	0x3ff00000
 801a590:	3fe00000 	.word	0x3fe00000
 801a594:	7fe00000 	.word	0x7fe00000
 801a598:	7c9fffff 	.word	0x7c9fffff
 801a59c:	9b08      	ldr	r3, [sp, #32]
 801a59e:	b323      	cbz	r3, 801a5ea <_strtod_l+0xb5a>
 801a5a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a5a4:	d821      	bhi.n	801a5ea <_strtod_l+0xb5a>
 801a5a6:	a328      	add	r3, pc, #160	@ (adr r3, 801a648 <_strtod_l+0xbb8>)
 801a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ac:	4630      	mov	r0, r6
 801a5ae:	4639      	mov	r1, r7
 801a5b0:	f7e6 faae 	bl	8000b10 <__aeabi_dcmple>
 801a5b4:	b1a0      	cbz	r0, 801a5e0 <_strtod_l+0xb50>
 801a5b6:	4639      	mov	r1, r7
 801a5b8:	4630      	mov	r0, r6
 801a5ba:	f7e6 fb05 	bl	8000bc8 <__aeabi_d2uiz>
 801a5be:	2801      	cmp	r0, #1
 801a5c0:	bf38      	it	cc
 801a5c2:	2001      	movcc	r0, #1
 801a5c4:	f7e5 ffae 	bl	8000524 <__aeabi_ui2d>
 801a5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a5ca:	4606      	mov	r6, r0
 801a5cc:	460f      	mov	r7, r1
 801a5ce:	b9fb      	cbnz	r3, 801a610 <_strtod_l+0xb80>
 801a5d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a5d4:	9014      	str	r0, [sp, #80]	@ 0x50
 801a5d6:	9315      	str	r3, [sp, #84]	@ 0x54
 801a5d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a5dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a5e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a5e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a5e6:	1b5b      	subs	r3, r3, r5
 801a5e8:	9311      	str	r3, [sp, #68]	@ 0x44
 801a5ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a5ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a5f2:	f003 ffc7 	bl	801e584 <__ulp>
 801a5f6:	4650      	mov	r0, sl
 801a5f8:	ec53 2b10 	vmov	r2, r3, d0
 801a5fc:	4659      	mov	r1, fp
 801a5fe:	f7e6 f80b 	bl	8000618 <__aeabi_dmul>
 801a602:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a606:	f7e5 fe51 	bl	80002ac <__adddf3>
 801a60a:	4682      	mov	sl, r0
 801a60c:	468b      	mov	fp, r1
 801a60e:	e770      	b.n	801a4f2 <_strtod_l+0xa62>
 801a610:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a614:	e7e0      	b.n	801a5d8 <_strtod_l+0xb48>
 801a616:	a30e      	add	r3, pc, #56	@ (adr r3, 801a650 <_strtod_l+0xbc0>)
 801a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a61c:	f7e6 fa6e 	bl	8000afc <__aeabi_dcmplt>
 801a620:	e798      	b.n	801a554 <_strtod_l+0xac4>
 801a622:	2300      	movs	r3, #0
 801a624:	930e      	str	r3, [sp, #56]	@ 0x38
 801a626:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a62a:	6013      	str	r3, [r2, #0]
 801a62c:	f7ff ba6d 	b.w	8019b0a <_strtod_l+0x7a>
 801a630:	2a65      	cmp	r2, #101	@ 0x65
 801a632:	f43f ab68 	beq.w	8019d06 <_strtod_l+0x276>
 801a636:	2a45      	cmp	r2, #69	@ 0x45
 801a638:	f43f ab65 	beq.w	8019d06 <_strtod_l+0x276>
 801a63c:	2301      	movs	r3, #1
 801a63e:	f7ff bba0 	b.w	8019d82 <_strtod_l+0x2f2>
 801a642:	bf00      	nop
 801a644:	f3af 8000 	nop.w
 801a648:	ffc00000 	.word	0xffc00000
 801a64c:	41dfffff 	.word	0x41dfffff
 801a650:	94a03595 	.word	0x94a03595
 801a654:	3fcfffff 	.word	0x3fcfffff

0801a658 <_strtod_r>:
 801a658:	4b01      	ldr	r3, [pc, #4]	@ (801a660 <_strtod_r+0x8>)
 801a65a:	f7ff ba19 	b.w	8019a90 <_strtod_l>
 801a65e:	bf00      	nop
 801a660:	200002ec 	.word	0x200002ec

0801a664 <strtod>:
 801a664:	460a      	mov	r2, r1
 801a666:	4601      	mov	r1, r0
 801a668:	4802      	ldr	r0, [pc, #8]	@ (801a674 <strtod+0x10>)
 801a66a:	4b03      	ldr	r3, [pc, #12]	@ (801a678 <strtod+0x14>)
 801a66c:	6800      	ldr	r0, [r0, #0]
 801a66e:	f7ff ba0f 	b.w	8019a90 <_strtod_l>
 801a672:	bf00      	nop
 801a674:	20000458 	.word	0x20000458
 801a678:	200002ec 	.word	0x200002ec

0801a67c <_strtol_l.isra.0>:
 801a67c:	2b24      	cmp	r3, #36	@ 0x24
 801a67e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a682:	4686      	mov	lr, r0
 801a684:	4690      	mov	r8, r2
 801a686:	d801      	bhi.n	801a68c <_strtol_l.isra.0+0x10>
 801a688:	2b01      	cmp	r3, #1
 801a68a:	d106      	bne.n	801a69a <_strtol_l.isra.0+0x1e>
 801a68c:	f002 f90c 	bl	801c8a8 <__errno>
 801a690:	2316      	movs	r3, #22
 801a692:	6003      	str	r3, [r0, #0]
 801a694:	2000      	movs	r0, #0
 801a696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a69a:	4834      	ldr	r0, [pc, #208]	@ (801a76c <_strtol_l.isra.0+0xf0>)
 801a69c:	460d      	mov	r5, r1
 801a69e:	462a      	mov	r2, r5
 801a6a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a6a4:	5d06      	ldrb	r6, [r0, r4]
 801a6a6:	f016 0608 	ands.w	r6, r6, #8
 801a6aa:	d1f8      	bne.n	801a69e <_strtol_l.isra.0+0x22>
 801a6ac:	2c2d      	cmp	r4, #45	@ 0x2d
 801a6ae:	d110      	bne.n	801a6d2 <_strtol_l.isra.0+0x56>
 801a6b0:	782c      	ldrb	r4, [r5, #0]
 801a6b2:	2601      	movs	r6, #1
 801a6b4:	1c95      	adds	r5, r2, #2
 801a6b6:	f033 0210 	bics.w	r2, r3, #16
 801a6ba:	d115      	bne.n	801a6e8 <_strtol_l.isra.0+0x6c>
 801a6bc:	2c30      	cmp	r4, #48	@ 0x30
 801a6be:	d10d      	bne.n	801a6dc <_strtol_l.isra.0+0x60>
 801a6c0:	782a      	ldrb	r2, [r5, #0]
 801a6c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a6c6:	2a58      	cmp	r2, #88	@ 0x58
 801a6c8:	d108      	bne.n	801a6dc <_strtol_l.isra.0+0x60>
 801a6ca:	786c      	ldrb	r4, [r5, #1]
 801a6cc:	3502      	adds	r5, #2
 801a6ce:	2310      	movs	r3, #16
 801a6d0:	e00a      	b.n	801a6e8 <_strtol_l.isra.0+0x6c>
 801a6d2:	2c2b      	cmp	r4, #43	@ 0x2b
 801a6d4:	bf04      	itt	eq
 801a6d6:	782c      	ldrbeq	r4, [r5, #0]
 801a6d8:	1c95      	addeq	r5, r2, #2
 801a6da:	e7ec      	b.n	801a6b6 <_strtol_l.isra.0+0x3a>
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d1f6      	bne.n	801a6ce <_strtol_l.isra.0+0x52>
 801a6e0:	2c30      	cmp	r4, #48	@ 0x30
 801a6e2:	bf14      	ite	ne
 801a6e4:	230a      	movne	r3, #10
 801a6e6:	2308      	moveq	r3, #8
 801a6e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a6ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a6f0:	2200      	movs	r2, #0
 801a6f2:	fbbc f9f3 	udiv	r9, ip, r3
 801a6f6:	4610      	mov	r0, r2
 801a6f8:	fb03 ca19 	mls	sl, r3, r9, ip
 801a6fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a700:	2f09      	cmp	r7, #9
 801a702:	d80f      	bhi.n	801a724 <_strtol_l.isra.0+0xa8>
 801a704:	463c      	mov	r4, r7
 801a706:	42a3      	cmp	r3, r4
 801a708:	dd1b      	ble.n	801a742 <_strtol_l.isra.0+0xc6>
 801a70a:	1c57      	adds	r7, r2, #1
 801a70c:	d007      	beq.n	801a71e <_strtol_l.isra.0+0xa2>
 801a70e:	4581      	cmp	r9, r0
 801a710:	d314      	bcc.n	801a73c <_strtol_l.isra.0+0xc0>
 801a712:	d101      	bne.n	801a718 <_strtol_l.isra.0+0x9c>
 801a714:	45a2      	cmp	sl, r4
 801a716:	db11      	blt.n	801a73c <_strtol_l.isra.0+0xc0>
 801a718:	fb00 4003 	mla	r0, r0, r3, r4
 801a71c:	2201      	movs	r2, #1
 801a71e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a722:	e7eb      	b.n	801a6fc <_strtol_l.isra.0+0x80>
 801a724:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a728:	2f19      	cmp	r7, #25
 801a72a:	d801      	bhi.n	801a730 <_strtol_l.isra.0+0xb4>
 801a72c:	3c37      	subs	r4, #55	@ 0x37
 801a72e:	e7ea      	b.n	801a706 <_strtol_l.isra.0+0x8a>
 801a730:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a734:	2f19      	cmp	r7, #25
 801a736:	d804      	bhi.n	801a742 <_strtol_l.isra.0+0xc6>
 801a738:	3c57      	subs	r4, #87	@ 0x57
 801a73a:	e7e4      	b.n	801a706 <_strtol_l.isra.0+0x8a>
 801a73c:	f04f 32ff 	mov.w	r2, #4294967295
 801a740:	e7ed      	b.n	801a71e <_strtol_l.isra.0+0xa2>
 801a742:	1c53      	adds	r3, r2, #1
 801a744:	d108      	bne.n	801a758 <_strtol_l.isra.0+0xdc>
 801a746:	2322      	movs	r3, #34	@ 0x22
 801a748:	f8ce 3000 	str.w	r3, [lr]
 801a74c:	4660      	mov	r0, ip
 801a74e:	f1b8 0f00 	cmp.w	r8, #0
 801a752:	d0a0      	beq.n	801a696 <_strtol_l.isra.0+0x1a>
 801a754:	1e69      	subs	r1, r5, #1
 801a756:	e006      	b.n	801a766 <_strtol_l.isra.0+0xea>
 801a758:	b106      	cbz	r6, 801a75c <_strtol_l.isra.0+0xe0>
 801a75a:	4240      	negs	r0, r0
 801a75c:	f1b8 0f00 	cmp.w	r8, #0
 801a760:	d099      	beq.n	801a696 <_strtol_l.isra.0+0x1a>
 801a762:	2a00      	cmp	r2, #0
 801a764:	d1f6      	bne.n	801a754 <_strtol_l.isra.0+0xd8>
 801a766:	f8c8 1000 	str.w	r1, [r8]
 801a76a:	e794      	b.n	801a696 <_strtol_l.isra.0+0x1a>
 801a76c:	08024eb9 	.word	0x08024eb9

0801a770 <_strtol_r>:
 801a770:	f7ff bf84 	b.w	801a67c <_strtol_l.isra.0>

0801a774 <strtol>:
 801a774:	4613      	mov	r3, r2
 801a776:	460a      	mov	r2, r1
 801a778:	4601      	mov	r1, r0
 801a77a:	4802      	ldr	r0, [pc, #8]	@ (801a784 <strtol+0x10>)
 801a77c:	6800      	ldr	r0, [r0, #0]
 801a77e:	f7ff bf7d 	b.w	801a67c <_strtol_l.isra.0>
 801a782:	bf00      	nop
 801a784:	20000458 	.word	0x20000458

0801a788 <__cvt>:
 801a788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a78c:	ec57 6b10 	vmov	r6, r7, d0
 801a790:	2f00      	cmp	r7, #0
 801a792:	460c      	mov	r4, r1
 801a794:	4619      	mov	r1, r3
 801a796:	463b      	mov	r3, r7
 801a798:	bfbb      	ittet	lt
 801a79a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a79e:	461f      	movlt	r7, r3
 801a7a0:	2300      	movge	r3, #0
 801a7a2:	232d      	movlt	r3, #45	@ 0x2d
 801a7a4:	700b      	strb	r3, [r1, #0]
 801a7a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a7a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a7ac:	4691      	mov	r9, r2
 801a7ae:	f023 0820 	bic.w	r8, r3, #32
 801a7b2:	bfbc      	itt	lt
 801a7b4:	4632      	movlt	r2, r6
 801a7b6:	4616      	movlt	r6, r2
 801a7b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a7bc:	d005      	beq.n	801a7ca <__cvt+0x42>
 801a7be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a7c2:	d100      	bne.n	801a7c6 <__cvt+0x3e>
 801a7c4:	3401      	adds	r4, #1
 801a7c6:	2102      	movs	r1, #2
 801a7c8:	e000      	b.n	801a7cc <__cvt+0x44>
 801a7ca:	2103      	movs	r1, #3
 801a7cc:	ab03      	add	r3, sp, #12
 801a7ce:	9301      	str	r3, [sp, #4]
 801a7d0:	ab02      	add	r3, sp, #8
 801a7d2:	9300      	str	r3, [sp, #0]
 801a7d4:	ec47 6b10 	vmov	d0, r6, r7
 801a7d8:	4653      	mov	r3, sl
 801a7da:	4622      	mov	r2, r4
 801a7dc:	f002 f9bc 	bl	801cb58 <_dtoa_r>
 801a7e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a7e4:	4605      	mov	r5, r0
 801a7e6:	d119      	bne.n	801a81c <__cvt+0x94>
 801a7e8:	f019 0f01 	tst.w	r9, #1
 801a7ec:	d00e      	beq.n	801a80c <__cvt+0x84>
 801a7ee:	eb00 0904 	add.w	r9, r0, r4
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	4630      	mov	r0, r6
 801a7f8:	4639      	mov	r1, r7
 801a7fa:	f7e6 f975 	bl	8000ae8 <__aeabi_dcmpeq>
 801a7fe:	b108      	cbz	r0, 801a804 <__cvt+0x7c>
 801a800:	f8cd 900c 	str.w	r9, [sp, #12]
 801a804:	2230      	movs	r2, #48	@ 0x30
 801a806:	9b03      	ldr	r3, [sp, #12]
 801a808:	454b      	cmp	r3, r9
 801a80a:	d31e      	bcc.n	801a84a <__cvt+0xc2>
 801a80c:	9b03      	ldr	r3, [sp, #12]
 801a80e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a810:	1b5b      	subs	r3, r3, r5
 801a812:	4628      	mov	r0, r5
 801a814:	6013      	str	r3, [r2, #0]
 801a816:	b004      	add	sp, #16
 801a818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a81c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a820:	eb00 0904 	add.w	r9, r0, r4
 801a824:	d1e5      	bne.n	801a7f2 <__cvt+0x6a>
 801a826:	7803      	ldrb	r3, [r0, #0]
 801a828:	2b30      	cmp	r3, #48	@ 0x30
 801a82a:	d10a      	bne.n	801a842 <__cvt+0xba>
 801a82c:	2200      	movs	r2, #0
 801a82e:	2300      	movs	r3, #0
 801a830:	4630      	mov	r0, r6
 801a832:	4639      	mov	r1, r7
 801a834:	f7e6 f958 	bl	8000ae8 <__aeabi_dcmpeq>
 801a838:	b918      	cbnz	r0, 801a842 <__cvt+0xba>
 801a83a:	f1c4 0401 	rsb	r4, r4, #1
 801a83e:	f8ca 4000 	str.w	r4, [sl]
 801a842:	f8da 3000 	ldr.w	r3, [sl]
 801a846:	4499      	add	r9, r3
 801a848:	e7d3      	b.n	801a7f2 <__cvt+0x6a>
 801a84a:	1c59      	adds	r1, r3, #1
 801a84c:	9103      	str	r1, [sp, #12]
 801a84e:	701a      	strb	r2, [r3, #0]
 801a850:	e7d9      	b.n	801a806 <__cvt+0x7e>

0801a852 <__exponent>:
 801a852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a854:	2900      	cmp	r1, #0
 801a856:	bfba      	itte	lt
 801a858:	4249      	neglt	r1, r1
 801a85a:	232d      	movlt	r3, #45	@ 0x2d
 801a85c:	232b      	movge	r3, #43	@ 0x2b
 801a85e:	2909      	cmp	r1, #9
 801a860:	7002      	strb	r2, [r0, #0]
 801a862:	7043      	strb	r3, [r0, #1]
 801a864:	dd29      	ble.n	801a8ba <__exponent+0x68>
 801a866:	f10d 0307 	add.w	r3, sp, #7
 801a86a:	461d      	mov	r5, r3
 801a86c:	270a      	movs	r7, #10
 801a86e:	461a      	mov	r2, r3
 801a870:	fbb1 f6f7 	udiv	r6, r1, r7
 801a874:	fb07 1416 	mls	r4, r7, r6, r1
 801a878:	3430      	adds	r4, #48	@ 0x30
 801a87a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a87e:	460c      	mov	r4, r1
 801a880:	2c63      	cmp	r4, #99	@ 0x63
 801a882:	f103 33ff 	add.w	r3, r3, #4294967295
 801a886:	4631      	mov	r1, r6
 801a888:	dcf1      	bgt.n	801a86e <__exponent+0x1c>
 801a88a:	3130      	adds	r1, #48	@ 0x30
 801a88c:	1e94      	subs	r4, r2, #2
 801a88e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a892:	1c41      	adds	r1, r0, #1
 801a894:	4623      	mov	r3, r4
 801a896:	42ab      	cmp	r3, r5
 801a898:	d30a      	bcc.n	801a8b0 <__exponent+0x5e>
 801a89a:	f10d 0309 	add.w	r3, sp, #9
 801a89e:	1a9b      	subs	r3, r3, r2
 801a8a0:	42ac      	cmp	r4, r5
 801a8a2:	bf88      	it	hi
 801a8a4:	2300      	movhi	r3, #0
 801a8a6:	3302      	adds	r3, #2
 801a8a8:	4403      	add	r3, r0
 801a8aa:	1a18      	subs	r0, r3, r0
 801a8ac:	b003      	add	sp, #12
 801a8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a8b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a8b8:	e7ed      	b.n	801a896 <__exponent+0x44>
 801a8ba:	2330      	movs	r3, #48	@ 0x30
 801a8bc:	3130      	adds	r1, #48	@ 0x30
 801a8be:	7083      	strb	r3, [r0, #2]
 801a8c0:	70c1      	strb	r1, [r0, #3]
 801a8c2:	1d03      	adds	r3, r0, #4
 801a8c4:	e7f1      	b.n	801a8aa <__exponent+0x58>
	...

0801a8c8 <_printf_float>:
 801a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8cc:	b08d      	sub	sp, #52	@ 0x34
 801a8ce:	460c      	mov	r4, r1
 801a8d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a8d4:	4616      	mov	r6, r2
 801a8d6:	461f      	mov	r7, r3
 801a8d8:	4605      	mov	r5, r0
 801a8da:	f001 ff1b 	bl	801c714 <_localeconv_r>
 801a8de:	6803      	ldr	r3, [r0, #0]
 801a8e0:	9304      	str	r3, [sp, #16]
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f7e5 fcd4 	bl	8000290 <strlen>
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801a8ec:	f8d8 3000 	ldr.w	r3, [r8]
 801a8f0:	9005      	str	r0, [sp, #20]
 801a8f2:	3307      	adds	r3, #7
 801a8f4:	f023 0307 	bic.w	r3, r3, #7
 801a8f8:	f103 0208 	add.w	r2, r3, #8
 801a8fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a900:	f8d4 b000 	ldr.w	fp, [r4]
 801a904:	f8c8 2000 	str.w	r2, [r8]
 801a908:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a90c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a910:	9307      	str	r3, [sp, #28]
 801a912:	f8cd 8018 	str.w	r8, [sp, #24]
 801a916:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a91a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a91e:	4b9c      	ldr	r3, [pc, #624]	@ (801ab90 <_printf_float+0x2c8>)
 801a920:	f04f 32ff 	mov.w	r2, #4294967295
 801a924:	f7e6 f912 	bl	8000b4c <__aeabi_dcmpun>
 801a928:	bb70      	cbnz	r0, 801a988 <_printf_float+0xc0>
 801a92a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a92e:	4b98      	ldr	r3, [pc, #608]	@ (801ab90 <_printf_float+0x2c8>)
 801a930:	f04f 32ff 	mov.w	r2, #4294967295
 801a934:	f7e6 f8ec 	bl	8000b10 <__aeabi_dcmple>
 801a938:	bb30      	cbnz	r0, 801a988 <_printf_float+0xc0>
 801a93a:	2200      	movs	r2, #0
 801a93c:	2300      	movs	r3, #0
 801a93e:	4640      	mov	r0, r8
 801a940:	4649      	mov	r1, r9
 801a942:	f7e6 f8db 	bl	8000afc <__aeabi_dcmplt>
 801a946:	b110      	cbz	r0, 801a94e <_printf_float+0x86>
 801a948:	232d      	movs	r3, #45	@ 0x2d
 801a94a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a94e:	4a91      	ldr	r2, [pc, #580]	@ (801ab94 <_printf_float+0x2cc>)
 801a950:	4b91      	ldr	r3, [pc, #580]	@ (801ab98 <_printf_float+0x2d0>)
 801a952:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a956:	bf8c      	ite	hi
 801a958:	4690      	movhi	r8, r2
 801a95a:	4698      	movls	r8, r3
 801a95c:	2303      	movs	r3, #3
 801a95e:	6123      	str	r3, [r4, #16]
 801a960:	f02b 0304 	bic.w	r3, fp, #4
 801a964:	6023      	str	r3, [r4, #0]
 801a966:	f04f 0900 	mov.w	r9, #0
 801a96a:	9700      	str	r7, [sp, #0]
 801a96c:	4633      	mov	r3, r6
 801a96e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a970:	4621      	mov	r1, r4
 801a972:	4628      	mov	r0, r5
 801a974:	f000 f9d2 	bl	801ad1c <_printf_common>
 801a978:	3001      	adds	r0, #1
 801a97a:	f040 808d 	bne.w	801aa98 <_printf_float+0x1d0>
 801a97e:	f04f 30ff 	mov.w	r0, #4294967295
 801a982:	b00d      	add	sp, #52	@ 0x34
 801a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a988:	4642      	mov	r2, r8
 801a98a:	464b      	mov	r3, r9
 801a98c:	4640      	mov	r0, r8
 801a98e:	4649      	mov	r1, r9
 801a990:	f7e6 f8dc 	bl	8000b4c <__aeabi_dcmpun>
 801a994:	b140      	cbz	r0, 801a9a8 <_printf_float+0xe0>
 801a996:	464b      	mov	r3, r9
 801a998:	2b00      	cmp	r3, #0
 801a99a:	bfbc      	itt	lt
 801a99c:	232d      	movlt	r3, #45	@ 0x2d
 801a99e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a9a2:	4a7e      	ldr	r2, [pc, #504]	@ (801ab9c <_printf_float+0x2d4>)
 801a9a4:	4b7e      	ldr	r3, [pc, #504]	@ (801aba0 <_printf_float+0x2d8>)
 801a9a6:	e7d4      	b.n	801a952 <_printf_float+0x8a>
 801a9a8:	6863      	ldr	r3, [r4, #4]
 801a9aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a9ae:	9206      	str	r2, [sp, #24]
 801a9b0:	1c5a      	adds	r2, r3, #1
 801a9b2:	d13b      	bne.n	801aa2c <_printf_float+0x164>
 801a9b4:	2306      	movs	r3, #6
 801a9b6:	6063      	str	r3, [r4, #4]
 801a9b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a9bc:	2300      	movs	r3, #0
 801a9be:	6022      	str	r2, [r4, #0]
 801a9c0:	9303      	str	r3, [sp, #12]
 801a9c2:	ab0a      	add	r3, sp, #40	@ 0x28
 801a9c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a9c8:	ab09      	add	r3, sp, #36	@ 0x24
 801a9ca:	9300      	str	r3, [sp, #0]
 801a9cc:	6861      	ldr	r1, [r4, #4]
 801a9ce:	ec49 8b10 	vmov	d0, r8, r9
 801a9d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a9d6:	4628      	mov	r0, r5
 801a9d8:	f7ff fed6 	bl	801a788 <__cvt>
 801a9dc:	9b06      	ldr	r3, [sp, #24]
 801a9de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a9e0:	2b47      	cmp	r3, #71	@ 0x47
 801a9e2:	4680      	mov	r8, r0
 801a9e4:	d129      	bne.n	801aa3a <_printf_float+0x172>
 801a9e6:	1cc8      	adds	r0, r1, #3
 801a9e8:	db02      	blt.n	801a9f0 <_printf_float+0x128>
 801a9ea:	6863      	ldr	r3, [r4, #4]
 801a9ec:	4299      	cmp	r1, r3
 801a9ee:	dd41      	ble.n	801aa74 <_printf_float+0x1ac>
 801a9f0:	f1aa 0a02 	sub.w	sl, sl, #2
 801a9f4:	fa5f fa8a 	uxtb.w	sl, sl
 801a9f8:	3901      	subs	r1, #1
 801a9fa:	4652      	mov	r2, sl
 801a9fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801aa00:	9109      	str	r1, [sp, #36]	@ 0x24
 801aa02:	f7ff ff26 	bl	801a852 <__exponent>
 801aa06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aa08:	1813      	adds	r3, r2, r0
 801aa0a:	2a01      	cmp	r2, #1
 801aa0c:	4681      	mov	r9, r0
 801aa0e:	6123      	str	r3, [r4, #16]
 801aa10:	dc02      	bgt.n	801aa18 <_printf_float+0x150>
 801aa12:	6822      	ldr	r2, [r4, #0]
 801aa14:	07d2      	lsls	r2, r2, #31
 801aa16:	d501      	bpl.n	801aa1c <_printf_float+0x154>
 801aa18:	3301      	adds	r3, #1
 801aa1a:	6123      	str	r3, [r4, #16]
 801aa1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d0a2      	beq.n	801a96a <_printf_float+0xa2>
 801aa24:	232d      	movs	r3, #45	@ 0x2d
 801aa26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aa2a:	e79e      	b.n	801a96a <_printf_float+0xa2>
 801aa2c:	9a06      	ldr	r2, [sp, #24]
 801aa2e:	2a47      	cmp	r2, #71	@ 0x47
 801aa30:	d1c2      	bne.n	801a9b8 <_printf_float+0xf0>
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d1c0      	bne.n	801a9b8 <_printf_float+0xf0>
 801aa36:	2301      	movs	r3, #1
 801aa38:	e7bd      	b.n	801a9b6 <_printf_float+0xee>
 801aa3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801aa3e:	d9db      	bls.n	801a9f8 <_printf_float+0x130>
 801aa40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801aa44:	d118      	bne.n	801aa78 <_printf_float+0x1b0>
 801aa46:	2900      	cmp	r1, #0
 801aa48:	6863      	ldr	r3, [r4, #4]
 801aa4a:	dd0b      	ble.n	801aa64 <_printf_float+0x19c>
 801aa4c:	6121      	str	r1, [r4, #16]
 801aa4e:	b913      	cbnz	r3, 801aa56 <_printf_float+0x18e>
 801aa50:	6822      	ldr	r2, [r4, #0]
 801aa52:	07d0      	lsls	r0, r2, #31
 801aa54:	d502      	bpl.n	801aa5c <_printf_float+0x194>
 801aa56:	3301      	adds	r3, #1
 801aa58:	440b      	add	r3, r1
 801aa5a:	6123      	str	r3, [r4, #16]
 801aa5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801aa5e:	f04f 0900 	mov.w	r9, #0
 801aa62:	e7db      	b.n	801aa1c <_printf_float+0x154>
 801aa64:	b913      	cbnz	r3, 801aa6c <_printf_float+0x1a4>
 801aa66:	6822      	ldr	r2, [r4, #0]
 801aa68:	07d2      	lsls	r2, r2, #31
 801aa6a:	d501      	bpl.n	801aa70 <_printf_float+0x1a8>
 801aa6c:	3302      	adds	r3, #2
 801aa6e:	e7f4      	b.n	801aa5a <_printf_float+0x192>
 801aa70:	2301      	movs	r3, #1
 801aa72:	e7f2      	b.n	801aa5a <_printf_float+0x192>
 801aa74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801aa78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa7a:	4299      	cmp	r1, r3
 801aa7c:	db05      	blt.n	801aa8a <_printf_float+0x1c2>
 801aa7e:	6823      	ldr	r3, [r4, #0]
 801aa80:	6121      	str	r1, [r4, #16]
 801aa82:	07d8      	lsls	r0, r3, #31
 801aa84:	d5ea      	bpl.n	801aa5c <_printf_float+0x194>
 801aa86:	1c4b      	adds	r3, r1, #1
 801aa88:	e7e7      	b.n	801aa5a <_printf_float+0x192>
 801aa8a:	2900      	cmp	r1, #0
 801aa8c:	bfd4      	ite	le
 801aa8e:	f1c1 0202 	rsble	r2, r1, #2
 801aa92:	2201      	movgt	r2, #1
 801aa94:	4413      	add	r3, r2
 801aa96:	e7e0      	b.n	801aa5a <_printf_float+0x192>
 801aa98:	6823      	ldr	r3, [r4, #0]
 801aa9a:	055a      	lsls	r2, r3, #21
 801aa9c:	d407      	bmi.n	801aaae <_printf_float+0x1e6>
 801aa9e:	6923      	ldr	r3, [r4, #16]
 801aaa0:	4642      	mov	r2, r8
 801aaa2:	4631      	mov	r1, r6
 801aaa4:	4628      	mov	r0, r5
 801aaa6:	47b8      	blx	r7
 801aaa8:	3001      	adds	r0, #1
 801aaaa:	d12b      	bne.n	801ab04 <_printf_float+0x23c>
 801aaac:	e767      	b.n	801a97e <_printf_float+0xb6>
 801aaae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801aab2:	f240 80dd 	bls.w	801ac70 <_printf_float+0x3a8>
 801aab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801aaba:	2200      	movs	r2, #0
 801aabc:	2300      	movs	r3, #0
 801aabe:	f7e6 f813 	bl	8000ae8 <__aeabi_dcmpeq>
 801aac2:	2800      	cmp	r0, #0
 801aac4:	d033      	beq.n	801ab2e <_printf_float+0x266>
 801aac6:	4a37      	ldr	r2, [pc, #220]	@ (801aba4 <_printf_float+0x2dc>)
 801aac8:	2301      	movs	r3, #1
 801aaca:	4631      	mov	r1, r6
 801aacc:	4628      	mov	r0, r5
 801aace:	47b8      	blx	r7
 801aad0:	3001      	adds	r0, #1
 801aad2:	f43f af54 	beq.w	801a97e <_printf_float+0xb6>
 801aad6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801aada:	4543      	cmp	r3, r8
 801aadc:	db02      	blt.n	801aae4 <_printf_float+0x21c>
 801aade:	6823      	ldr	r3, [r4, #0]
 801aae0:	07d8      	lsls	r0, r3, #31
 801aae2:	d50f      	bpl.n	801ab04 <_printf_float+0x23c>
 801aae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aae8:	4631      	mov	r1, r6
 801aaea:	4628      	mov	r0, r5
 801aaec:	47b8      	blx	r7
 801aaee:	3001      	adds	r0, #1
 801aaf0:	f43f af45 	beq.w	801a97e <_printf_float+0xb6>
 801aaf4:	f04f 0900 	mov.w	r9, #0
 801aaf8:	f108 38ff 	add.w	r8, r8, #4294967295
 801aafc:	f104 0a1a 	add.w	sl, r4, #26
 801ab00:	45c8      	cmp	r8, r9
 801ab02:	dc09      	bgt.n	801ab18 <_printf_float+0x250>
 801ab04:	6823      	ldr	r3, [r4, #0]
 801ab06:	079b      	lsls	r3, r3, #30
 801ab08:	f100 8103 	bmi.w	801ad12 <_printf_float+0x44a>
 801ab0c:	68e0      	ldr	r0, [r4, #12]
 801ab0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ab10:	4298      	cmp	r0, r3
 801ab12:	bfb8      	it	lt
 801ab14:	4618      	movlt	r0, r3
 801ab16:	e734      	b.n	801a982 <_printf_float+0xba>
 801ab18:	2301      	movs	r3, #1
 801ab1a:	4652      	mov	r2, sl
 801ab1c:	4631      	mov	r1, r6
 801ab1e:	4628      	mov	r0, r5
 801ab20:	47b8      	blx	r7
 801ab22:	3001      	adds	r0, #1
 801ab24:	f43f af2b 	beq.w	801a97e <_printf_float+0xb6>
 801ab28:	f109 0901 	add.w	r9, r9, #1
 801ab2c:	e7e8      	b.n	801ab00 <_printf_float+0x238>
 801ab2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	dc39      	bgt.n	801aba8 <_printf_float+0x2e0>
 801ab34:	4a1b      	ldr	r2, [pc, #108]	@ (801aba4 <_printf_float+0x2dc>)
 801ab36:	2301      	movs	r3, #1
 801ab38:	4631      	mov	r1, r6
 801ab3a:	4628      	mov	r0, r5
 801ab3c:	47b8      	blx	r7
 801ab3e:	3001      	adds	r0, #1
 801ab40:	f43f af1d 	beq.w	801a97e <_printf_float+0xb6>
 801ab44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ab48:	ea59 0303 	orrs.w	r3, r9, r3
 801ab4c:	d102      	bne.n	801ab54 <_printf_float+0x28c>
 801ab4e:	6823      	ldr	r3, [r4, #0]
 801ab50:	07d9      	lsls	r1, r3, #31
 801ab52:	d5d7      	bpl.n	801ab04 <_printf_float+0x23c>
 801ab54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab58:	4631      	mov	r1, r6
 801ab5a:	4628      	mov	r0, r5
 801ab5c:	47b8      	blx	r7
 801ab5e:	3001      	adds	r0, #1
 801ab60:	f43f af0d 	beq.w	801a97e <_printf_float+0xb6>
 801ab64:	f04f 0a00 	mov.w	sl, #0
 801ab68:	f104 0b1a 	add.w	fp, r4, #26
 801ab6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab6e:	425b      	negs	r3, r3
 801ab70:	4553      	cmp	r3, sl
 801ab72:	dc01      	bgt.n	801ab78 <_printf_float+0x2b0>
 801ab74:	464b      	mov	r3, r9
 801ab76:	e793      	b.n	801aaa0 <_printf_float+0x1d8>
 801ab78:	2301      	movs	r3, #1
 801ab7a:	465a      	mov	r2, fp
 801ab7c:	4631      	mov	r1, r6
 801ab7e:	4628      	mov	r0, r5
 801ab80:	47b8      	blx	r7
 801ab82:	3001      	adds	r0, #1
 801ab84:	f43f aefb 	beq.w	801a97e <_printf_float+0xb6>
 801ab88:	f10a 0a01 	add.w	sl, sl, #1
 801ab8c:	e7ee      	b.n	801ab6c <_printf_float+0x2a4>
 801ab8e:	bf00      	nop
 801ab90:	7fefffff 	.word	0x7fefffff
 801ab94:	08024b7e 	.word	0x08024b7e
 801ab98:	08024b7a 	.word	0x08024b7a
 801ab9c:	08024b86 	.word	0x08024b86
 801aba0:	08024b82 	.word	0x08024b82
 801aba4:	08024e62 	.word	0x08024e62
 801aba8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801abaa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801abae:	4553      	cmp	r3, sl
 801abb0:	bfa8      	it	ge
 801abb2:	4653      	movge	r3, sl
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	4699      	mov	r9, r3
 801abb8:	dc36      	bgt.n	801ac28 <_printf_float+0x360>
 801abba:	f04f 0b00 	mov.w	fp, #0
 801abbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801abc2:	f104 021a 	add.w	r2, r4, #26
 801abc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801abc8:	9306      	str	r3, [sp, #24]
 801abca:	eba3 0309 	sub.w	r3, r3, r9
 801abce:	455b      	cmp	r3, fp
 801abd0:	dc31      	bgt.n	801ac36 <_printf_float+0x36e>
 801abd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abd4:	459a      	cmp	sl, r3
 801abd6:	dc3a      	bgt.n	801ac4e <_printf_float+0x386>
 801abd8:	6823      	ldr	r3, [r4, #0]
 801abda:	07da      	lsls	r2, r3, #31
 801abdc:	d437      	bmi.n	801ac4e <_printf_float+0x386>
 801abde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abe0:	ebaa 0903 	sub.w	r9, sl, r3
 801abe4:	9b06      	ldr	r3, [sp, #24]
 801abe6:	ebaa 0303 	sub.w	r3, sl, r3
 801abea:	4599      	cmp	r9, r3
 801abec:	bfa8      	it	ge
 801abee:	4699      	movge	r9, r3
 801abf0:	f1b9 0f00 	cmp.w	r9, #0
 801abf4:	dc33      	bgt.n	801ac5e <_printf_float+0x396>
 801abf6:	f04f 0800 	mov.w	r8, #0
 801abfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801abfe:	f104 0b1a 	add.w	fp, r4, #26
 801ac02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac04:	ebaa 0303 	sub.w	r3, sl, r3
 801ac08:	eba3 0309 	sub.w	r3, r3, r9
 801ac0c:	4543      	cmp	r3, r8
 801ac0e:	f77f af79 	ble.w	801ab04 <_printf_float+0x23c>
 801ac12:	2301      	movs	r3, #1
 801ac14:	465a      	mov	r2, fp
 801ac16:	4631      	mov	r1, r6
 801ac18:	4628      	mov	r0, r5
 801ac1a:	47b8      	blx	r7
 801ac1c:	3001      	adds	r0, #1
 801ac1e:	f43f aeae 	beq.w	801a97e <_printf_float+0xb6>
 801ac22:	f108 0801 	add.w	r8, r8, #1
 801ac26:	e7ec      	b.n	801ac02 <_printf_float+0x33a>
 801ac28:	4642      	mov	r2, r8
 801ac2a:	4631      	mov	r1, r6
 801ac2c:	4628      	mov	r0, r5
 801ac2e:	47b8      	blx	r7
 801ac30:	3001      	adds	r0, #1
 801ac32:	d1c2      	bne.n	801abba <_printf_float+0x2f2>
 801ac34:	e6a3      	b.n	801a97e <_printf_float+0xb6>
 801ac36:	2301      	movs	r3, #1
 801ac38:	4631      	mov	r1, r6
 801ac3a:	4628      	mov	r0, r5
 801ac3c:	9206      	str	r2, [sp, #24]
 801ac3e:	47b8      	blx	r7
 801ac40:	3001      	adds	r0, #1
 801ac42:	f43f ae9c 	beq.w	801a97e <_printf_float+0xb6>
 801ac46:	9a06      	ldr	r2, [sp, #24]
 801ac48:	f10b 0b01 	add.w	fp, fp, #1
 801ac4c:	e7bb      	b.n	801abc6 <_printf_float+0x2fe>
 801ac4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac52:	4631      	mov	r1, r6
 801ac54:	4628      	mov	r0, r5
 801ac56:	47b8      	blx	r7
 801ac58:	3001      	adds	r0, #1
 801ac5a:	d1c0      	bne.n	801abde <_printf_float+0x316>
 801ac5c:	e68f      	b.n	801a97e <_printf_float+0xb6>
 801ac5e:	9a06      	ldr	r2, [sp, #24]
 801ac60:	464b      	mov	r3, r9
 801ac62:	4442      	add	r2, r8
 801ac64:	4631      	mov	r1, r6
 801ac66:	4628      	mov	r0, r5
 801ac68:	47b8      	blx	r7
 801ac6a:	3001      	adds	r0, #1
 801ac6c:	d1c3      	bne.n	801abf6 <_printf_float+0x32e>
 801ac6e:	e686      	b.n	801a97e <_printf_float+0xb6>
 801ac70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ac74:	f1ba 0f01 	cmp.w	sl, #1
 801ac78:	dc01      	bgt.n	801ac7e <_printf_float+0x3b6>
 801ac7a:	07db      	lsls	r3, r3, #31
 801ac7c:	d536      	bpl.n	801acec <_printf_float+0x424>
 801ac7e:	2301      	movs	r3, #1
 801ac80:	4642      	mov	r2, r8
 801ac82:	4631      	mov	r1, r6
 801ac84:	4628      	mov	r0, r5
 801ac86:	47b8      	blx	r7
 801ac88:	3001      	adds	r0, #1
 801ac8a:	f43f ae78 	beq.w	801a97e <_printf_float+0xb6>
 801ac8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac92:	4631      	mov	r1, r6
 801ac94:	4628      	mov	r0, r5
 801ac96:	47b8      	blx	r7
 801ac98:	3001      	adds	r0, #1
 801ac9a:	f43f ae70 	beq.w	801a97e <_printf_float+0xb6>
 801ac9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801aca2:	2200      	movs	r2, #0
 801aca4:	2300      	movs	r3, #0
 801aca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801acaa:	f7e5 ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 801acae:	b9c0      	cbnz	r0, 801ace2 <_printf_float+0x41a>
 801acb0:	4653      	mov	r3, sl
 801acb2:	f108 0201 	add.w	r2, r8, #1
 801acb6:	4631      	mov	r1, r6
 801acb8:	4628      	mov	r0, r5
 801acba:	47b8      	blx	r7
 801acbc:	3001      	adds	r0, #1
 801acbe:	d10c      	bne.n	801acda <_printf_float+0x412>
 801acc0:	e65d      	b.n	801a97e <_printf_float+0xb6>
 801acc2:	2301      	movs	r3, #1
 801acc4:	465a      	mov	r2, fp
 801acc6:	4631      	mov	r1, r6
 801acc8:	4628      	mov	r0, r5
 801acca:	47b8      	blx	r7
 801accc:	3001      	adds	r0, #1
 801acce:	f43f ae56 	beq.w	801a97e <_printf_float+0xb6>
 801acd2:	f108 0801 	add.w	r8, r8, #1
 801acd6:	45d0      	cmp	r8, sl
 801acd8:	dbf3      	blt.n	801acc2 <_printf_float+0x3fa>
 801acda:	464b      	mov	r3, r9
 801acdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ace0:	e6df      	b.n	801aaa2 <_printf_float+0x1da>
 801ace2:	f04f 0800 	mov.w	r8, #0
 801ace6:	f104 0b1a 	add.w	fp, r4, #26
 801acea:	e7f4      	b.n	801acd6 <_printf_float+0x40e>
 801acec:	2301      	movs	r3, #1
 801acee:	4642      	mov	r2, r8
 801acf0:	e7e1      	b.n	801acb6 <_printf_float+0x3ee>
 801acf2:	2301      	movs	r3, #1
 801acf4:	464a      	mov	r2, r9
 801acf6:	4631      	mov	r1, r6
 801acf8:	4628      	mov	r0, r5
 801acfa:	47b8      	blx	r7
 801acfc:	3001      	adds	r0, #1
 801acfe:	f43f ae3e 	beq.w	801a97e <_printf_float+0xb6>
 801ad02:	f108 0801 	add.w	r8, r8, #1
 801ad06:	68e3      	ldr	r3, [r4, #12]
 801ad08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ad0a:	1a5b      	subs	r3, r3, r1
 801ad0c:	4543      	cmp	r3, r8
 801ad0e:	dcf0      	bgt.n	801acf2 <_printf_float+0x42a>
 801ad10:	e6fc      	b.n	801ab0c <_printf_float+0x244>
 801ad12:	f04f 0800 	mov.w	r8, #0
 801ad16:	f104 0919 	add.w	r9, r4, #25
 801ad1a:	e7f4      	b.n	801ad06 <_printf_float+0x43e>

0801ad1c <_printf_common>:
 801ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad20:	4616      	mov	r6, r2
 801ad22:	4698      	mov	r8, r3
 801ad24:	688a      	ldr	r2, [r1, #8]
 801ad26:	690b      	ldr	r3, [r1, #16]
 801ad28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ad2c:	4293      	cmp	r3, r2
 801ad2e:	bfb8      	it	lt
 801ad30:	4613      	movlt	r3, r2
 801ad32:	6033      	str	r3, [r6, #0]
 801ad34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ad38:	4607      	mov	r7, r0
 801ad3a:	460c      	mov	r4, r1
 801ad3c:	b10a      	cbz	r2, 801ad42 <_printf_common+0x26>
 801ad3e:	3301      	adds	r3, #1
 801ad40:	6033      	str	r3, [r6, #0]
 801ad42:	6823      	ldr	r3, [r4, #0]
 801ad44:	0699      	lsls	r1, r3, #26
 801ad46:	bf42      	ittt	mi
 801ad48:	6833      	ldrmi	r3, [r6, #0]
 801ad4a:	3302      	addmi	r3, #2
 801ad4c:	6033      	strmi	r3, [r6, #0]
 801ad4e:	6825      	ldr	r5, [r4, #0]
 801ad50:	f015 0506 	ands.w	r5, r5, #6
 801ad54:	d106      	bne.n	801ad64 <_printf_common+0x48>
 801ad56:	f104 0a19 	add.w	sl, r4, #25
 801ad5a:	68e3      	ldr	r3, [r4, #12]
 801ad5c:	6832      	ldr	r2, [r6, #0]
 801ad5e:	1a9b      	subs	r3, r3, r2
 801ad60:	42ab      	cmp	r3, r5
 801ad62:	dc26      	bgt.n	801adb2 <_printf_common+0x96>
 801ad64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ad68:	6822      	ldr	r2, [r4, #0]
 801ad6a:	3b00      	subs	r3, #0
 801ad6c:	bf18      	it	ne
 801ad6e:	2301      	movne	r3, #1
 801ad70:	0692      	lsls	r2, r2, #26
 801ad72:	d42b      	bmi.n	801adcc <_printf_common+0xb0>
 801ad74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ad78:	4641      	mov	r1, r8
 801ad7a:	4638      	mov	r0, r7
 801ad7c:	47c8      	blx	r9
 801ad7e:	3001      	adds	r0, #1
 801ad80:	d01e      	beq.n	801adc0 <_printf_common+0xa4>
 801ad82:	6823      	ldr	r3, [r4, #0]
 801ad84:	6922      	ldr	r2, [r4, #16]
 801ad86:	f003 0306 	and.w	r3, r3, #6
 801ad8a:	2b04      	cmp	r3, #4
 801ad8c:	bf02      	ittt	eq
 801ad8e:	68e5      	ldreq	r5, [r4, #12]
 801ad90:	6833      	ldreq	r3, [r6, #0]
 801ad92:	1aed      	subeq	r5, r5, r3
 801ad94:	68a3      	ldr	r3, [r4, #8]
 801ad96:	bf0c      	ite	eq
 801ad98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ad9c:	2500      	movne	r5, #0
 801ad9e:	4293      	cmp	r3, r2
 801ada0:	bfc4      	itt	gt
 801ada2:	1a9b      	subgt	r3, r3, r2
 801ada4:	18ed      	addgt	r5, r5, r3
 801ada6:	2600      	movs	r6, #0
 801ada8:	341a      	adds	r4, #26
 801adaa:	42b5      	cmp	r5, r6
 801adac:	d11a      	bne.n	801ade4 <_printf_common+0xc8>
 801adae:	2000      	movs	r0, #0
 801adb0:	e008      	b.n	801adc4 <_printf_common+0xa8>
 801adb2:	2301      	movs	r3, #1
 801adb4:	4652      	mov	r2, sl
 801adb6:	4641      	mov	r1, r8
 801adb8:	4638      	mov	r0, r7
 801adba:	47c8      	blx	r9
 801adbc:	3001      	adds	r0, #1
 801adbe:	d103      	bne.n	801adc8 <_printf_common+0xac>
 801adc0:	f04f 30ff 	mov.w	r0, #4294967295
 801adc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adc8:	3501      	adds	r5, #1
 801adca:	e7c6      	b.n	801ad5a <_printf_common+0x3e>
 801adcc:	18e1      	adds	r1, r4, r3
 801adce:	1c5a      	adds	r2, r3, #1
 801add0:	2030      	movs	r0, #48	@ 0x30
 801add2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801add6:	4422      	add	r2, r4
 801add8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801addc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ade0:	3302      	adds	r3, #2
 801ade2:	e7c7      	b.n	801ad74 <_printf_common+0x58>
 801ade4:	2301      	movs	r3, #1
 801ade6:	4622      	mov	r2, r4
 801ade8:	4641      	mov	r1, r8
 801adea:	4638      	mov	r0, r7
 801adec:	47c8      	blx	r9
 801adee:	3001      	adds	r0, #1
 801adf0:	d0e6      	beq.n	801adc0 <_printf_common+0xa4>
 801adf2:	3601      	adds	r6, #1
 801adf4:	e7d9      	b.n	801adaa <_printf_common+0x8e>
	...

0801adf8 <_printf_i>:
 801adf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801adfc:	7e0f      	ldrb	r7, [r1, #24]
 801adfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ae00:	2f78      	cmp	r7, #120	@ 0x78
 801ae02:	4691      	mov	r9, r2
 801ae04:	4680      	mov	r8, r0
 801ae06:	460c      	mov	r4, r1
 801ae08:	469a      	mov	sl, r3
 801ae0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ae0e:	d807      	bhi.n	801ae20 <_printf_i+0x28>
 801ae10:	2f62      	cmp	r7, #98	@ 0x62
 801ae12:	d80a      	bhi.n	801ae2a <_printf_i+0x32>
 801ae14:	2f00      	cmp	r7, #0
 801ae16:	f000 80d1 	beq.w	801afbc <_printf_i+0x1c4>
 801ae1a:	2f58      	cmp	r7, #88	@ 0x58
 801ae1c:	f000 80b8 	beq.w	801af90 <_printf_i+0x198>
 801ae20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ae24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ae28:	e03a      	b.n	801aea0 <_printf_i+0xa8>
 801ae2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ae2e:	2b15      	cmp	r3, #21
 801ae30:	d8f6      	bhi.n	801ae20 <_printf_i+0x28>
 801ae32:	a101      	add	r1, pc, #4	@ (adr r1, 801ae38 <_printf_i+0x40>)
 801ae34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae38:	0801ae91 	.word	0x0801ae91
 801ae3c:	0801aea5 	.word	0x0801aea5
 801ae40:	0801ae21 	.word	0x0801ae21
 801ae44:	0801ae21 	.word	0x0801ae21
 801ae48:	0801ae21 	.word	0x0801ae21
 801ae4c:	0801ae21 	.word	0x0801ae21
 801ae50:	0801aea5 	.word	0x0801aea5
 801ae54:	0801ae21 	.word	0x0801ae21
 801ae58:	0801ae21 	.word	0x0801ae21
 801ae5c:	0801ae21 	.word	0x0801ae21
 801ae60:	0801ae21 	.word	0x0801ae21
 801ae64:	0801afa3 	.word	0x0801afa3
 801ae68:	0801aecf 	.word	0x0801aecf
 801ae6c:	0801af5d 	.word	0x0801af5d
 801ae70:	0801ae21 	.word	0x0801ae21
 801ae74:	0801ae21 	.word	0x0801ae21
 801ae78:	0801afc5 	.word	0x0801afc5
 801ae7c:	0801ae21 	.word	0x0801ae21
 801ae80:	0801aecf 	.word	0x0801aecf
 801ae84:	0801ae21 	.word	0x0801ae21
 801ae88:	0801ae21 	.word	0x0801ae21
 801ae8c:	0801af65 	.word	0x0801af65
 801ae90:	6833      	ldr	r3, [r6, #0]
 801ae92:	1d1a      	adds	r2, r3, #4
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	6032      	str	r2, [r6, #0]
 801ae98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ae9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aea0:	2301      	movs	r3, #1
 801aea2:	e09c      	b.n	801afde <_printf_i+0x1e6>
 801aea4:	6833      	ldr	r3, [r6, #0]
 801aea6:	6820      	ldr	r0, [r4, #0]
 801aea8:	1d19      	adds	r1, r3, #4
 801aeaa:	6031      	str	r1, [r6, #0]
 801aeac:	0606      	lsls	r6, r0, #24
 801aeae:	d501      	bpl.n	801aeb4 <_printf_i+0xbc>
 801aeb0:	681d      	ldr	r5, [r3, #0]
 801aeb2:	e003      	b.n	801aebc <_printf_i+0xc4>
 801aeb4:	0645      	lsls	r5, r0, #25
 801aeb6:	d5fb      	bpl.n	801aeb0 <_printf_i+0xb8>
 801aeb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801aebc:	2d00      	cmp	r5, #0
 801aebe:	da03      	bge.n	801aec8 <_printf_i+0xd0>
 801aec0:	232d      	movs	r3, #45	@ 0x2d
 801aec2:	426d      	negs	r5, r5
 801aec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aec8:	4858      	ldr	r0, [pc, #352]	@ (801b02c <_printf_i+0x234>)
 801aeca:	230a      	movs	r3, #10
 801aecc:	e011      	b.n	801aef2 <_printf_i+0xfa>
 801aece:	6821      	ldr	r1, [r4, #0]
 801aed0:	6833      	ldr	r3, [r6, #0]
 801aed2:	0608      	lsls	r0, r1, #24
 801aed4:	f853 5b04 	ldr.w	r5, [r3], #4
 801aed8:	d402      	bmi.n	801aee0 <_printf_i+0xe8>
 801aeda:	0649      	lsls	r1, r1, #25
 801aedc:	bf48      	it	mi
 801aede:	b2ad      	uxthmi	r5, r5
 801aee0:	2f6f      	cmp	r7, #111	@ 0x6f
 801aee2:	4852      	ldr	r0, [pc, #328]	@ (801b02c <_printf_i+0x234>)
 801aee4:	6033      	str	r3, [r6, #0]
 801aee6:	bf14      	ite	ne
 801aee8:	230a      	movne	r3, #10
 801aeea:	2308      	moveq	r3, #8
 801aeec:	2100      	movs	r1, #0
 801aeee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801aef2:	6866      	ldr	r6, [r4, #4]
 801aef4:	60a6      	str	r6, [r4, #8]
 801aef6:	2e00      	cmp	r6, #0
 801aef8:	db05      	blt.n	801af06 <_printf_i+0x10e>
 801aefa:	6821      	ldr	r1, [r4, #0]
 801aefc:	432e      	orrs	r6, r5
 801aefe:	f021 0104 	bic.w	r1, r1, #4
 801af02:	6021      	str	r1, [r4, #0]
 801af04:	d04b      	beq.n	801af9e <_printf_i+0x1a6>
 801af06:	4616      	mov	r6, r2
 801af08:	fbb5 f1f3 	udiv	r1, r5, r3
 801af0c:	fb03 5711 	mls	r7, r3, r1, r5
 801af10:	5dc7      	ldrb	r7, [r0, r7]
 801af12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801af16:	462f      	mov	r7, r5
 801af18:	42bb      	cmp	r3, r7
 801af1a:	460d      	mov	r5, r1
 801af1c:	d9f4      	bls.n	801af08 <_printf_i+0x110>
 801af1e:	2b08      	cmp	r3, #8
 801af20:	d10b      	bne.n	801af3a <_printf_i+0x142>
 801af22:	6823      	ldr	r3, [r4, #0]
 801af24:	07df      	lsls	r7, r3, #31
 801af26:	d508      	bpl.n	801af3a <_printf_i+0x142>
 801af28:	6923      	ldr	r3, [r4, #16]
 801af2a:	6861      	ldr	r1, [r4, #4]
 801af2c:	4299      	cmp	r1, r3
 801af2e:	bfde      	ittt	le
 801af30:	2330      	movle	r3, #48	@ 0x30
 801af32:	f806 3c01 	strble.w	r3, [r6, #-1]
 801af36:	f106 36ff 	addle.w	r6, r6, #4294967295
 801af3a:	1b92      	subs	r2, r2, r6
 801af3c:	6122      	str	r2, [r4, #16]
 801af3e:	f8cd a000 	str.w	sl, [sp]
 801af42:	464b      	mov	r3, r9
 801af44:	aa03      	add	r2, sp, #12
 801af46:	4621      	mov	r1, r4
 801af48:	4640      	mov	r0, r8
 801af4a:	f7ff fee7 	bl	801ad1c <_printf_common>
 801af4e:	3001      	adds	r0, #1
 801af50:	d14a      	bne.n	801afe8 <_printf_i+0x1f0>
 801af52:	f04f 30ff 	mov.w	r0, #4294967295
 801af56:	b004      	add	sp, #16
 801af58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af5c:	6823      	ldr	r3, [r4, #0]
 801af5e:	f043 0320 	orr.w	r3, r3, #32
 801af62:	6023      	str	r3, [r4, #0]
 801af64:	4832      	ldr	r0, [pc, #200]	@ (801b030 <_printf_i+0x238>)
 801af66:	2778      	movs	r7, #120	@ 0x78
 801af68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801af6c:	6823      	ldr	r3, [r4, #0]
 801af6e:	6831      	ldr	r1, [r6, #0]
 801af70:	061f      	lsls	r7, r3, #24
 801af72:	f851 5b04 	ldr.w	r5, [r1], #4
 801af76:	d402      	bmi.n	801af7e <_printf_i+0x186>
 801af78:	065f      	lsls	r7, r3, #25
 801af7a:	bf48      	it	mi
 801af7c:	b2ad      	uxthmi	r5, r5
 801af7e:	6031      	str	r1, [r6, #0]
 801af80:	07d9      	lsls	r1, r3, #31
 801af82:	bf44      	itt	mi
 801af84:	f043 0320 	orrmi.w	r3, r3, #32
 801af88:	6023      	strmi	r3, [r4, #0]
 801af8a:	b11d      	cbz	r5, 801af94 <_printf_i+0x19c>
 801af8c:	2310      	movs	r3, #16
 801af8e:	e7ad      	b.n	801aeec <_printf_i+0xf4>
 801af90:	4826      	ldr	r0, [pc, #152]	@ (801b02c <_printf_i+0x234>)
 801af92:	e7e9      	b.n	801af68 <_printf_i+0x170>
 801af94:	6823      	ldr	r3, [r4, #0]
 801af96:	f023 0320 	bic.w	r3, r3, #32
 801af9a:	6023      	str	r3, [r4, #0]
 801af9c:	e7f6      	b.n	801af8c <_printf_i+0x194>
 801af9e:	4616      	mov	r6, r2
 801afa0:	e7bd      	b.n	801af1e <_printf_i+0x126>
 801afa2:	6833      	ldr	r3, [r6, #0]
 801afa4:	6825      	ldr	r5, [r4, #0]
 801afa6:	6961      	ldr	r1, [r4, #20]
 801afa8:	1d18      	adds	r0, r3, #4
 801afaa:	6030      	str	r0, [r6, #0]
 801afac:	062e      	lsls	r6, r5, #24
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	d501      	bpl.n	801afb6 <_printf_i+0x1be>
 801afb2:	6019      	str	r1, [r3, #0]
 801afb4:	e002      	b.n	801afbc <_printf_i+0x1c4>
 801afb6:	0668      	lsls	r0, r5, #25
 801afb8:	d5fb      	bpl.n	801afb2 <_printf_i+0x1ba>
 801afba:	8019      	strh	r1, [r3, #0]
 801afbc:	2300      	movs	r3, #0
 801afbe:	6123      	str	r3, [r4, #16]
 801afc0:	4616      	mov	r6, r2
 801afc2:	e7bc      	b.n	801af3e <_printf_i+0x146>
 801afc4:	6833      	ldr	r3, [r6, #0]
 801afc6:	1d1a      	adds	r2, r3, #4
 801afc8:	6032      	str	r2, [r6, #0]
 801afca:	681e      	ldr	r6, [r3, #0]
 801afcc:	6862      	ldr	r2, [r4, #4]
 801afce:	2100      	movs	r1, #0
 801afd0:	4630      	mov	r0, r6
 801afd2:	f7e5 f90d 	bl	80001f0 <memchr>
 801afd6:	b108      	cbz	r0, 801afdc <_printf_i+0x1e4>
 801afd8:	1b80      	subs	r0, r0, r6
 801afda:	6060      	str	r0, [r4, #4]
 801afdc:	6863      	ldr	r3, [r4, #4]
 801afde:	6123      	str	r3, [r4, #16]
 801afe0:	2300      	movs	r3, #0
 801afe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801afe6:	e7aa      	b.n	801af3e <_printf_i+0x146>
 801afe8:	6923      	ldr	r3, [r4, #16]
 801afea:	4632      	mov	r2, r6
 801afec:	4649      	mov	r1, r9
 801afee:	4640      	mov	r0, r8
 801aff0:	47d0      	blx	sl
 801aff2:	3001      	adds	r0, #1
 801aff4:	d0ad      	beq.n	801af52 <_printf_i+0x15a>
 801aff6:	6823      	ldr	r3, [r4, #0]
 801aff8:	079b      	lsls	r3, r3, #30
 801affa:	d413      	bmi.n	801b024 <_printf_i+0x22c>
 801affc:	68e0      	ldr	r0, [r4, #12]
 801affe:	9b03      	ldr	r3, [sp, #12]
 801b000:	4298      	cmp	r0, r3
 801b002:	bfb8      	it	lt
 801b004:	4618      	movlt	r0, r3
 801b006:	e7a6      	b.n	801af56 <_printf_i+0x15e>
 801b008:	2301      	movs	r3, #1
 801b00a:	4632      	mov	r2, r6
 801b00c:	4649      	mov	r1, r9
 801b00e:	4640      	mov	r0, r8
 801b010:	47d0      	blx	sl
 801b012:	3001      	adds	r0, #1
 801b014:	d09d      	beq.n	801af52 <_printf_i+0x15a>
 801b016:	3501      	adds	r5, #1
 801b018:	68e3      	ldr	r3, [r4, #12]
 801b01a:	9903      	ldr	r1, [sp, #12]
 801b01c:	1a5b      	subs	r3, r3, r1
 801b01e:	42ab      	cmp	r3, r5
 801b020:	dcf2      	bgt.n	801b008 <_printf_i+0x210>
 801b022:	e7eb      	b.n	801affc <_printf_i+0x204>
 801b024:	2500      	movs	r5, #0
 801b026:	f104 0619 	add.w	r6, r4, #25
 801b02a:	e7f5      	b.n	801b018 <_printf_i+0x220>
 801b02c:	08024b8a 	.word	0x08024b8a
 801b030:	08024b9b 	.word	0x08024b9b

0801b034 <_scanf_float>:
 801b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b038:	b087      	sub	sp, #28
 801b03a:	4691      	mov	r9, r2
 801b03c:	9303      	str	r3, [sp, #12]
 801b03e:	688b      	ldr	r3, [r1, #8]
 801b040:	1e5a      	subs	r2, r3, #1
 801b042:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801b046:	bf81      	itttt	hi
 801b048:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801b04c:	eb03 0b05 	addhi.w	fp, r3, r5
 801b050:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801b054:	608b      	strhi	r3, [r1, #8]
 801b056:	680b      	ldr	r3, [r1, #0]
 801b058:	460a      	mov	r2, r1
 801b05a:	f04f 0500 	mov.w	r5, #0
 801b05e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801b062:	f842 3b1c 	str.w	r3, [r2], #28
 801b066:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b06a:	4680      	mov	r8, r0
 801b06c:	460c      	mov	r4, r1
 801b06e:	bf98      	it	ls
 801b070:	f04f 0b00 	movls.w	fp, #0
 801b074:	9201      	str	r2, [sp, #4]
 801b076:	4616      	mov	r6, r2
 801b078:	46aa      	mov	sl, r5
 801b07a:	462f      	mov	r7, r5
 801b07c:	9502      	str	r5, [sp, #8]
 801b07e:	68a2      	ldr	r2, [r4, #8]
 801b080:	b15a      	cbz	r2, 801b09a <_scanf_float+0x66>
 801b082:	f8d9 3000 	ldr.w	r3, [r9]
 801b086:	781b      	ldrb	r3, [r3, #0]
 801b088:	2b4e      	cmp	r3, #78	@ 0x4e
 801b08a:	d863      	bhi.n	801b154 <_scanf_float+0x120>
 801b08c:	2b40      	cmp	r3, #64	@ 0x40
 801b08e:	d83b      	bhi.n	801b108 <_scanf_float+0xd4>
 801b090:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801b094:	b2c8      	uxtb	r0, r1
 801b096:	280e      	cmp	r0, #14
 801b098:	d939      	bls.n	801b10e <_scanf_float+0xda>
 801b09a:	b11f      	cbz	r7, 801b0a4 <_scanf_float+0x70>
 801b09c:	6823      	ldr	r3, [r4, #0]
 801b09e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b0a2:	6023      	str	r3, [r4, #0]
 801b0a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b0a8:	f1ba 0f01 	cmp.w	sl, #1
 801b0ac:	f200 8114 	bhi.w	801b2d8 <_scanf_float+0x2a4>
 801b0b0:	9b01      	ldr	r3, [sp, #4]
 801b0b2:	429e      	cmp	r6, r3
 801b0b4:	f200 8105 	bhi.w	801b2c2 <_scanf_float+0x28e>
 801b0b8:	2001      	movs	r0, #1
 801b0ba:	b007      	add	sp, #28
 801b0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0c0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801b0c4:	2a0d      	cmp	r2, #13
 801b0c6:	d8e8      	bhi.n	801b09a <_scanf_float+0x66>
 801b0c8:	a101      	add	r1, pc, #4	@ (adr r1, 801b0d0 <_scanf_float+0x9c>)
 801b0ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b0ce:	bf00      	nop
 801b0d0:	0801b219 	.word	0x0801b219
 801b0d4:	0801b09b 	.word	0x0801b09b
 801b0d8:	0801b09b 	.word	0x0801b09b
 801b0dc:	0801b09b 	.word	0x0801b09b
 801b0e0:	0801b275 	.word	0x0801b275
 801b0e4:	0801b24f 	.word	0x0801b24f
 801b0e8:	0801b09b 	.word	0x0801b09b
 801b0ec:	0801b09b 	.word	0x0801b09b
 801b0f0:	0801b227 	.word	0x0801b227
 801b0f4:	0801b09b 	.word	0x0801b09b
 801b0f8:	0801b09b 	.word	0x0801b09b
 801b0fc:	0801b09b 	.word	0x0801b09b
 801b100:	0801b09b 	.word	0x0801b09b
 801b104:	0801b1e3 	.word	0x0801b1e3
 801b108:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801b10c:	e7da      	b.n	801b0c4 <_scanf_float+0x90>
 801b10e:	290e      	cmp	r1, #14
 801b110:	d8c3      	bhi.n	801b09a <_scanf_float+0x66>
 801b112:	a001      	add	r0, pc, #4	@ (adr r0, 801b118 <_scanf_float+0xe4>)
 801b114:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b118:	0801b1d3 	.word	0x0801b1d3
 801b11c:	0801b09b 	.word	0x0801b09b
 801b120:	0801b1d3 	.word	0x0801b1d3
 801b124:	0801b263 	.word	0x0801b263
 801b128:	0801b09b 	.word	0x0801b09b
 801b12c:	0801b175 	.word	0x0801b175
 801b130:	0801b1b9 	.word	0x0801b1b9
 801b134:	0801b1b9 	.word	0x0801b1b9
 801b138:	0801b1b9 	.word	0x0801b1b9
 801b13c:	0801b1b9 	.word	0x0801b1b9
 801b140:	0801b1b9 	.word	0x0801b1b9
 801b144:	0801b1b9 	.word	0x0801b1b9
 801b148:	0801b1b9 	.word	0x0801b1b9
 801b14c:	0801b1b9 	.word	0x0801b1b9
 801b150:	0801b1b9 	.word	0x0801b1b9
 801b154:	2b6e      	cmp	r3, #110	@ 0x6e
 801b156:	d809      	bhi.n	801b16c <_scanf_float+0x138>
 801b158:	2b60      	cmp	r3, #96	@ 0x60
 801b15a:	d8b1      	bhi.n	801b0c0 <_scanf_float+0x8c>
 801b15c:	2b54      	cmp	r3, #84	@ 0x54
 801b15e:	d07b      	beq.n	801b258 <_scanf_float+0x224>
 801b160:	2b59      	cmp	r3, #89	@ 0x59
 801b162:	d19a      	bne.n	801b09a <_scanf_float+0x66>
 801b164:	2d07      	cmp	r5, #7
 801b166:	d198      	bne.n	801b09a <_scanf_float+0x66>
 801b168:	2508      	movs	r5, #8
 801b16a:	e02f      	b.n	801b1cc <_scanf_float+0x198>
 801b16c:	2b74      	cmp	r3, #116	@ 0x74
 801b16e:	d073      	beq.n	801b258 <_scanf_float+0x224>
 801b170:	2b79      	cmp	r3, #121	@ 0x79
 801b172:	e7f6      	b.n	801b162 <_scanf_float+0x12e>
 801b174:	6821      	ldr	r1, [r4, #0]
 801b176:	05c8      	lsls	r0, r1, #23
 801b178:	d51e      	bpl.n	801b1b8 <_scanf_float+0x184>
 801b17a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801b17e:	6021      	str	r1, [r4, #0]
 801b180:	3701      	adds	r7, #1
 801b182:	f1bb 0f00 	cmp.w	fp, #0
 801b186:	d003      	beq.n	801b190 <_scanf_float+0x15c>
 801b188:	3201      	adds	r2, #1
 801b18a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b18e:	60a2      	str	r2, [r4, #8]
 801b190:	68a3      	ldr	r3, [r4, #8]
 801b192:	3b01      	subs	r3, #1
 801b194:	60a3      	str	r3, [r4, #8]
 801b196:	6923      	ldr	r3, [r4, #16]
 801b198:	3301      	adds	r3, #1
 801b19a:	6123      	str	r3, [r4, #16]
 801b19c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b1a0:	3b01      	subs	r3, #1
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	f8c9 3004 	str.w	r3, [r9, #4]
 801b1a8:	f340 8082 	ble.w	801b2b0 <_scanf_float+0x27c>
 801b1ac:	f8d9 3000 	ldr.w	r3, [r9]
 801b1b0:	3301      	adds	r3, #1
 801b1b2:	f8c9 3000 	str.w	r3, [r9]
 801b1b6:	e762      	b.n	801b07e <_scanf_float+0x4a>
 801b1b8:	eb1a 0105 	adds.w	r1, sl, r5
 801b1bc:	f47f af6d 	bne.w	801b09a <_scanf_float+0x66>
 801b1c0:	6822      	ldr	r2, [r4, #0]
 801b1c2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801b1c6:	6022      	str	r2, [r4, #0]
 801b1c8:	460d      	mov	r5, r1
 801b1ca:	468a      	mov	sl, r1
 801b1cc:	f806 3b01 	strb.w	r3, [r6], #1
 801b1d0:	e7de      	b.n	801b190 <_scanf_float+0x15c>
 801b1d2:	6822      	ldr	r2, [r4, #0]
 801b1d4:	0610      	lsls	r0, r2, #24
 801b1d6:	f57f af60 	bpl.w	801b09a <_scanf_float+0x66>
 801b1da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b1de:	6022      	str	r2, [r4, #0]
 801b1e0:	e7f4      	b.n	801b1cc <_scanf_float+0x198>
 801b1e2:	f1ba 0f00 	cmp.w	sl, #0
 801b1e6:	d10c      	bne.n	801b202 <_scanf_float+0x1ce>
 801b1e8:	b977      	cbnz	r7, 801b208 <_scanf_float+0x1d4>
 801b1ea:	6822      	ldr	r2, [r4, #0]
 801b1ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b1f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b1f4:	d108      	bne.n	801b208 <_scanf_float+0x1d4>
 801b1f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b1fa:	6022      	str	r2, [r4, #0]
 801b1fc:	f04f 0a01 	mov.w	sl, #1
 801b200:	e7e4      	b.n	801b1cc <_scanf_float+0x198>
 801b202:	f1ba 0f02 	cmp.w	sl, #2
 801b206:	d050      	beq.n	801b2aa <_scanf_float+0x276>
 801b208:	2d01      	cmp	r5, #1
 801b20a:	d002      	beq.n	801b212 <_scanf_float+0x1de>
 801b20c:	2d04      	cmp	r5, #4
 801b20e:	f47f af44 	bne.w	801b09a <_scanf_float+0x66>
 801b212:	3501      	adds	r5, #1
 801b214:	b2ed      	uxtb	r5, r5
 801b216:	e7d9      	b.n	801b1cc <_scanf_float+0x198>
 801b218:	f1ba 0f01 	cmp.w	sl, #1
 801b21c:	f47f af3d 	bne.w	801b09a <_scanf_float+0x66>
 801b220:	f04f 0a02 	mov.w	sl, #2
 801b224:	e7d2      	b.n	801b1cc <_scanf_float+0x198>
 801b226:	b975      	cbnz	r5, 801b246 <_scanf_float+0x212>
 801b228:	2f00      	cmp	r7, #0
 801b22a:	f47f af37 	bne.w	801b09c <_scanf_float+0x68>
 801b22e:	6822      	ldr	r2, [r4, #0]
 801b230:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b234:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b238:	f040 8103 	bne.w	801b442 <_scanf_float+0x40e>
 801b23c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b240:	6022      	str	r2, [r4, #0]
 801b242:	2501      	movs	r5, #1
 801b244:	e7c2      	b.n	801b1cc <_scanf_float+0x198>
 801b246:	2d03      	cmp	r5, #3
 801b248:	d0e3      	beq.n	801b212 <_scanf_float+0x1de>
 801b24a:	2d05      	cmp	r5, #5
 801b24c:	e7df      	b.n	801b20e <_scanf_float+0x1da>
 801b24e:	2d02      	cmp	r5, #2
 801b250:	f47f af23 	bne.w	801b09a <_scanf_float+0x66>
 801b254:	2503      	movs	r5, #3
 801b256:	e7b9      	b.n	801b1cc <_scanf_float+0x198>
 801b258:	2d06      	cmp	r5, #6
 801b25a:	f47f af1e 	bne.w	801b09a <_scanf_float+0x66>
 801b25e:	2507      	movs	r5, #7
 801b260:	e7b4      	b.n	801b1cc <_scanf_float+0x198>
 801b262:	6822      	ldr	r2, [r4, #0]
 801b264:	0591      	lsls	r1, r2, #22
 801b266:	f57f af18 	bpl.w	801b09a <_scanf_float+0x66>
 801b26a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b26e:	6022      	str	r2, [r4, #0]
 801b270:	9702      	str	r7, [sp, #8]
 801b272:	e7ab      	b.n	801b1cc <_scanf_float+0x198>
 801b274:	6822      	ldr	r2, [r4, #0]
 801b276:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801b27a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b27e:	d005      	beq.n	801b28c <_scanf_float+0x258>
 801b280:	0550      	lsls	r0, r2, #21
 801b282:	f57f af0a 	bpl.w	801b09a <_scanf_float+0x66>
 801b286:	2f00      	cmp	r7, #0
 801b288:	f000 80db 	beq.w	801b442 <_scanf_float+0x40e>
 801b28c:	0591      	lsls	r1, r2, #22
 801b28e:	bf58      	it	pl
 801b290:	9902      	ldrpl	r1, [sp, #8]
 801b292:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b296:	bf58      	it	pl
 801b298:	1a79      	subpl	r1, r7, r1
 801b29a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801b29e:	bf58      	it	pl
 801b2a0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b2a4:	6022      	str	r2, [r4, #0]
 801b2a6:	2700      	movs	r7, #0
 801b2a8:	e790      	b.n	801b1cc <_scanf_float+0x198>
 801b2aa:	f04f 0a03 	mov.w	sl, #3
 801b2ae:	e78d      	b.n	801b1cc <_scanf_float+0x198>
 801b2b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b2b4:	4649      	mov	r1, r9
 801b2b6:	4640      	mov	r0, r8
 801b2b8:	4798      	blx	r3
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	f43f aedf 	beq.w	801b07e <_scanf_float+0x4a>
 801b2c0:	e6eb      	b.n	801b09a <_scanf_float+0x66>
 801b2c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b2c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b2ca:	464a      	mov	r2, r9
 801b2cc:	4640      	mov	r0, r8
 801b2ce:	4798      	blx	r3
 801b2d0:	6923      	ldr	r3, [r4, #16]
 801b2d2:	3b01      	subs	r3, #1
 801b2d4:	6123      	str	r3, [r4, #16]
 801b2d6:	e6eb      	b.n	801b0b0 <_scanf_float+0x7c>
 801b2d8:	1e6b      	subs	r3, r5, #1
 801b2da:	2b06      	cmp	r3, #6
 801b2dc:	d824      	bhi.n	801b328 <_scanf_float+0x2f4>
 801b2de:	2d02      	cmp	r5, #2
 801b2e0:	d836      	bhi.n	801b350 <_scanf_float+0x31c>
 801b2e2:	9b01      	ldr	r3, [sp, #4]
 801b2e4:	429e      	cmp	r6, r3
 801b2e6:	f67f aee7 	bls.w	801b0b8 <_scanf_float+0x84>
 801b2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b2ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b2f2:	464a      	mov	r2, r9
 801b2f4:	4640      	mov	r0, r8
 801b2f6:	4798      	blx	r3
 801b2f8:	6923      	ldr	r3, [r4, #16]
 801b2fa:	3b01      	subs	r3, #1
 801b2fc:	6123      	str	r3, [r4, #16]
 801b2fe:	e7f0      	b.n	801b2e2 <_scanf_float+0x2ae>
 801b300:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b304:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b308:	464a      	mov	r2, r9
 801b30a:	4640      	mov	r0, r8
 801b30c:	4798      	blx	r3
 801b30e:	6923      	ldr	r3, [r4, #16]
 801b310:	3b01      	subs	r3, #1
 801b312:	6123      	str	r3, [r4, #16]
 801b314:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b318:	fa5f fa8a 	uxtb.w	sl, sl
 801b31c:	f1ba 0f02 	cmp.w	sl, #2
 801b320:	d1ee      	bne.n	801b300 <_scanf_float+0x2cc>
 801b322:	3d03      	subs	r5, #3
 801b324:	b2ed      	uxtb	r5, r5
 801b326:	1b76      	subs	r6, r6, r5
 801b328:	6823      	ldr	r3, [r4, #0]
 801b32a:	05da      	lsls	r2, r3, #23
 801b32c:	d530      	bpl.n	801b390 <_scanf_float+0x35c>
 801b32e:	055b      	lsls	r3, r3, #21
 801b330:	d511      	bpl.n	801b356 <_scanf_float+0x322>
 801b332:	9b01      	ldr	r3, [sp, #4]
 801b334:	429e      	cmp	r6, r3
 801b336:	f67f aebf 	bls.w	801b0b8 <_scanf_float+0x84>
 801b33a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b33e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b342:	464a      	mov	r2, r9
 801b344:	4640      	mov	r0, r8
 801b346:	4798      	blx	r3
 801b348:	6923      	ldr	r3, [r4, #16]
 801b34a:	3b01      	subs	r3, #1
 801b34c:	6123      	str	r3, [r4, #16]
 801b34e:	e7f0      	b.n	801b332 <_scanf_float+0x2fe>
 801b350:	46aa      	mov	sl, r5
 801b352:	46b3      	mov	fp, r6
 801b354:	e7de      	b.n	801b314 <_scanf_float+0x2e0>
 801b356:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b35a:	6923      	ldr	r3, [r4, #16]
 801b35c:	2965      	cmp	r1, #101	@ 0x65
 801b35e:	f103 33ff 	add.w	r3, r3, #4294967295
 801b362:	f106 35ff 	add.w	r5, r6, #4294967295
 801b366:	6123      	str	r3, [r4, #16]
 801b368:	d00c      	beq.n	801b384 <_scanf_float+0x350>
 801b36a:	2945      	cmp	r1, #69	@ 0x45
 801b36c:	d00a      	beq.n	801b384 <_scanf_float+0x350>
 801b36e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b372:	464a      	mov	r2, r9
 801b374:	4640      	mov	r0, r8
 801b376:	4798      	blx	r3
 801b378:	6923      	ldr	r3, [r4, #16]
 801b37a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b37e:	3b01      	subs	r3, #1
 801b380:	1eb5      	subs	r5, r6, #2
 801b382:	6123      	str	r3, [r4, #16]
 801b384:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b388:	464a      	mov	r2, r9
 801b38a:	4640      	mov	r0, r8
 801b38c:	4798      	blx	r3
 801b38e:	462e      	mov	r6, r5
 801b390:	6822      	ldr	r2, [r4, #0]
 801b392:	f012 0210 	ands.w	r2, r2, #16
 801b396:	d001      	beq.n	801b39c <_scanf_float+0x368>
 801b398:	2000      	movs	r0, #0
 801b39a:	e68e      	b.n	801b0ba <_scanf_float+0x86>
 801b39c:	7032      	strb	r2, [r6, #0]
 801b39e:	6823      	ldr	r3, [r4, #0]
 801b3a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b3a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b3a8:	d125      	bne.n	801b3f6 <_scanf_float+0x3c2>
 801b3aa:	9b02      	ldr	r3, [sp, #8]
 801b3ac:	429f      	cmp	r7, r3
 801b3ae:	d00a      	beq.n	801b3c6 <_scanf_float+0x392>
 801b3b0:	1bda      	subs	r2, r3, r7
 801b3b2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b3b6:	429e      	cmp	r6, r3
 801b3b8:	bf28      	it	cs
 801b3ba:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b3be:	4922      	ldr	r1, [pc, #136]	@ (801b448 <_scanf_float+0x414>)
 801b3c0:	4630      	mov	r0, r6
 801b3c2:	f000 f93d 	bl	801b640 <siprintf>
 801b3c6:	9901      	ldr	r1, [sp, #4]
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	4640      	mov	r0, r8
 801b3cc:	f7ff f944 	bl	801a658 <_strtod_r>
 801b3d0:	9b03      	ldr	r3, [sp, #12]
 801b3d2:	6821      	ldr	r1, [r4, #0]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	f011 0f02 	tst.w	r1, #2
 801b3da:	ec57 6b10 	vmov	r6, r7, d0
 801b3de:	f103 0204 	add.w	r2, r3, #4
 801b3e2:	d015      	beq.n	801b410 <_scanf_float+0x3dc>
 801b3e4:	9903      	ldr	r1, [sp, #12]
 801b3e6:	600a      	str	r2, [r1, #0]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	e9c3 6700 	strd	r6, r7, [r3]
 801b3ee:	68e3      	ldr	r3, [r4, #12]
 801b3f0:	3301      	adds	r3, #1
 801b3f2:	60e3      	str	r3, [r4, #12]
 801b3f4:	e7d0      	b.n	801b398 <_scanf_float+0x364>
 801b3f6:	9b04      	ldr	r3, [sp, #16]
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d0e4      	beq.n	801b3c6 <_scanf_float+0x392>
 801b3fc:	9905      	ldr	r1, [sp, #20]
 801b3fe:	230a      	movs	r3, #10
 801b400:	3101      	adds	r1, #1
 801b402:	4640      	mov	r0, r8
 801b404:	f7ff f9b4 	bl	801a770 <_strtol_r>
 801b408:	9b04      	ldr	r3, [sp, #16]
 801b40a:	9e05      	ldr	r6, [sp, #20]
 801b40c:	1ac2      	subs	r2, r0, r3
 801b40e:	e7d0      	b.n	801b3b2 <_scanf_float+0x37e>
 801b410:	f011 0f04 	tst.w	r1, #4
 801b414:	9903      	ldr	r1, [sp, #12]
 801b416:	600a      	str	r2, [r1, #0]
 801b418:	d1e6      	bne.n	801b3e8 <_scanf_float+0x3b4>
 801b41a:	681d      	ldr	r5, [r3, #0]
 801b41c:	4632      	mov	r2, r6
 801b41e:	463b      	mov	r3, r7
 801b420:	4630      	mov	r0, r6
 801b422:	4639      	mov	r1, r7
 801b424:	f7e5 fb92 	bl	8000b4c <__aeabi_dcmpun>
 801b428:	b128      	cbz	r0, 801b436 <_scanf_float+0x402>
 801b42a:	4808      	ldr	r0, [pc, #32]	@ (801b44c <_scanf_float+0x418>)
 801b42c:	f001 fa8c 	bl	801c948 <nanf>
 801b430:	ed85 0a00 	vstr	s0, [r5]
 801b434:	e7db      	b.n	801b3ee <_scanf_float+0x3ba>
 801b436:	4630      	mov	r0, r6
 801b438:	4639      	mov	r1, r7
 801b43a:	f7e5 fbe5 	bl	8000c08 <__aeabi_d2f>
 801b43e:	6028      	str	r0, [r5, #0]
 801b440:	e7d5      	b.n	801b3ee <_scanf_float+0x3ba>
 801b442:	2700      	movs	r7, #0
 801b444:	e62e      	b.n	801b0a4 <_scanf_float+0x70>
 801b446:	bf00      	nop
 801b448:	08024bac 	.word	0x08024bac
 801b44c:	08024d0b 	.word	0x08024d0b

0801b450 <std>:
 801b450:	2300      	movs	r3, #0
 801b452:	b510      	push	{r4, lr}
 801b454:	4604      	mov	r4, r0
 801b456:	e9c0 3300 	strd	r3, r3, [r0]
 801b45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b45e:	6083      	str	r3, [r0, #8]
 801b460:	8181      	strh	r1, [r0, #12]
 801b462:	6643      	str	r3, [r0, #100]	@ 0x64
 801b464:	81c2      	strh	r2, [r0, #14]
 801b466:	6183      	str	r3, [r0, #24]
 801b468:	4619      	mov	r1, r3
 801b46a:	2208      	movs	r2, #8
 801b46c:	305c      	adds	r0, #92	@ 0x5c
 801b46e:	f000 f97a 	bl	801b766 <memset>
 801b472:	4b0d      	ldr	r3, [pc, #52]	@ (801b4a8 <std+0x58>)
 801b474:	6263      	str	r3, [r4, #36]	@ 0x24
 801b476:	4b0d      	ldr	r3, [pc, #52]	@ (801b4ac <std+0x5c>)
 801b478:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b47a:	4b0d      	ldr	r3, [pc, #52]	@ (801b4b0 <std+0x60>)
 801b47c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b47e:	4b0d      	ldr	r3, [pc, #52]	@ (801b4b4 <std+0x64>)
 801b480:	6323      	str	r3, [r4, #48]	@ 0x30
 801b482:	4b0d      	ldr	r3, [pc, #52]	@ (801b4b8 <std+0x68>)
 801b484:	6224      	str	r4, [r4, #32]
 801b486:	429c      	cmp	r4, r3
 801b488:	d006      	beq.n	801b498 <std+0x48>
 801b48a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b48e:	4294      	cmp	r4, r2
 801b490:	d002      	beq.n	801b498 <std+0x48>
 801b492:	33d0      	adds	r3, #208	@ 0xd0
 801b494:	429c      	cmp	r4, r3
 801b496:	d105      	bne.n	801b4a4 <std+0x54>
 801b498:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4a0:	f001 ba2c 	b.w	801c8fc <__retarget_lock_init_recursive>
 801b4a4:	bd10      	pop	{r4, pc}
 801b4a6:	bf00      	nop
 801b4a8:	0801b6dd 	.word	0x0801b6dd
 801b4ac:	0801b703 	.word	0x0801b703
 801b4b0:	0801b73b 	.word	0x0801b73b
 801b4b4:	0801b75f 	.word	0x0801b75f
 801b4b8:	20006470 	.word	0x20006470

0801b4bc <stdio_exit_handler>:
 801b4bc:	4a02      	ldr	r2, [pc, #8]	@ (801b4c8 <stdio_exit_handler+0xc>)
 801b4be:	4903      	ldr	r1, [pc, #12]	@ (801b4cc <stdio_exit_handler+0x10>)
 801b4c0:	4803      	ldr	r0, [pc, #12]	@ (801b4d0 <stdio_exit_handler+0x14>)
 801b4c2:	f000 b869 	b.w	801b598 <_fwalk_sglue>
 801b4c6:	bf00      	nop
 801b4c8:	200002d8 	.word	0x200002d8
 801b4cc:	0801f301 	.word	0x0801f301
 801b4d0:	2000045c 	.word	0x2000045c

0801b4d4 <cleanup_stdio>:
 801b4d4:	6841      	ldr	r1, [r0, #4]
 801b4d6:	4b0c      	ldr	r3, [pc, #48]	@ (801b508 <cleanup_stdio+0x34>)
 801b4d8:	4299      	cmp	r1, r3
 801b4da:	b510      	push	{r4, lr}
 801b4dc:	4604      	mov	r4, r0
 801b4de:	d001      	beq.n	801b4e4 <cleanup_stdio+0x10>
 801b4e0:	f003 ff0e 	bl	801f300 <_fflush_r>
 801b4e4:	68a1      	ldr	r1, [r4, #8]
 801b4e6:	4b09      	ldr	r3, [pc, #36]	@ (801b50c <cleanup_stdio+0x38>)
 801b4e8:	4299      	cmp	r1, r3
 801b4ea:	d002      	beq.n	801b4f2 <cleanup_stdio+0x1e>
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	f003 ff07 	bl	801f300 <_fflush_r>
 801b4f2:	68e1      	ldr	r1, [r4, #12]
 801b4f4:	4b06      	ldr	r3, [pc, #24]	@ (801b510 <cleanup_stdio+0x3c>)
 801b4f6:	4299      	cmp	r1, r3
 801b4f8:	d004      	beq.n	801b504 <cleanup_stdio+0x30>
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b500:	f003 befe 	b.w	801f300 <_fflush_r>
 801b504:	bd10      	pop	{r4, pc}
 801b506:	bf00      	nop
 801b508:	20006470 	.word	0x20006470
 801b50c:	200064d8 	.word	0x200064d8
 801b510:	20006540 	.word	0x20006540

0801b514 <global_stdio_init.part.0>:
 801b514:	b510      	push	{r4, lr}
 801b516:	4b0b      	ldr	r3, [pc, #44]	@ (801b544 <global_stdio_init.part.0+0x30>)
 801b518:	4c0b      	ldr	r4, [pc, #44]	@ (801b548 <global_stdio_init.part.0+0x34>)
 801b51a:	4a0c      	ldr	r2, [pc, #48]	@ (801b54c <global_stdio_init.part.0+0x38>)
 801b51c:	601a      	str	r2, [r3, #0]
 801b51e:	4620      	mov	r0, r4
 801b520:	2200      	movs	r2, #0
 801b522:	2104      	movs	r1, #4
 801b524:	f7ff ff94 	bl	801b450 <std>
 801b528:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b52c:	2201      	movs	r2, #1
 801b52e:	2109      	movs	r1, #9
 801b530:	f7ff ff8e 	bl	801b450 <std>
 801b534:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b538:	2202      	movs	r2, #2
 801b53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b53e:	2112      	movs	r1, #18
 801b540:	f7ff bf86 	b.w	801b450 <std>
 801b544:	200065a8 	.word	0x200065a8
 801b548:	20006470 	.word	0x20006470
 801b54c:	0801b4bd 	.word	0x0801b4bd

0801b550 <__sfp_lock_acquire>:
 801b550:	4801      	ldr	r0, [pc, #4]	@ (801b558 <__sfp_lock_acquire+0x8>)
 801b552:	f001 b9d5 	b.w	801c900 <__retarget_lock_acquire_recursive>
 801b556:	bf00      	nop
 801b558:	200065d7 	.word	0x200065d7

0801b55c <__sfp_lock_release>:
 801b55c:	4801      	ldr	r0, [pc, #4]	@ (801b564 <__sfp_lock_release+0x8>)
 801b55e:	f001 b9d1 	b.w	801c904 <__retarget_lock_release_recursive>
 801b562:	bf00      	nop
 801b564:	200065d7 	.word	0x200065d7

0801b568 <__sinit>:
 801b568:	b510      	push	{r4, lr}
 801b56a:	4604      	mov	r4, r0
 801b56c:	f7ff fff0 	bl	801b550 <__sfp_lock_acquire>
 801b570:	6a23      	ldr	r3, [r4, #32]
 801b572:	b11b      	cbz	r3, 801b57c <__sinit+0x14>
 801b574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b578:	f7ff bff0 	b.w	801b55c <__sfp_lock_release>
 801b57c:	4b04      	ldr	r3, [pc, #16]	@ (801b590 <__sinit+0x28>)
 801b57e:	6223      	str	r3, [r4, #32]
 801b580:	4b04      	ldr	r3, [pc, #16]	@ (801b594 <__sinit+0x2c>)
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	2b00      	cmp	r3, #0
 801b586:	d1f5      	bne.n	801b574 <__sinit+0xc>
 801b588:	f7ff ffc4 	bl	801b514 <global_stdio_init.part.0>
 801b58c:	e7f2      	b.n	801b574 <__sinit+0xc>
 801b58e:	bf00      	nop
 801b590:	0801b4d5 	.word	0x0801b4d5
 801b594:	200065a8 	.word	0x200065a8

0801b598 <_fwalk_sglue>:
 801b598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b59c:	4607      	mov	r7, r0
 801b59e:	4688      	mov	r8, r1
 801b5a0:	4614      	mov	r4, r2
 801b5a2:	2600      	movs	r6, #0
 801b5a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b5a8:	f1b9 0901 	subs.w	r9, r9, #1
 801b5ac:	d505      	bpl.n	801b5ba <_fwalk_sglue+0x22>
 801b5ae:	6824      	ldr	r4, [r4, #0]
 801b5b0:	2c00      	cmp	r4, #0
 801b5b2:	d1f7      	bne.n	801b5a4 <_fwalk_sglue+0xc>
 801b5b4:	4630      	mov	r0, r6
 801b5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5ba:	89ab      	ldrh	r3, [r5, #12]
 801b5bc:	2b01      	cmp	r3, #1
 801b5be:	d907      	bls.n	801b5d0 <_fwalk_sglue+0x38>
 801b5c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b5c4:	3301      	adds	r3, #1
 801b5c6:	d003      	beq.n	801b5d0 <_fwalk_sglue+0x38>
 801b5c8:	4629      	mov	r1, r5
 801b5ca:	4638      	mov	r0, r7
 801b5cc:	47c0      	blx	r8
 801b5ce:	4306      	orrs	r6, r0
 801b5d0:	3568      	adds	r5, #104	@ 0x68
 801b5d2:	e7e9      	b.n	801b5a8 <_fwalk_sglue+0x10>

0801b5d4 <sniprintf>:
 801b5d4:	b40c      	push	{r2, r3}
 801b5d6:	b530      	push	{r4, r5, lr}
 801b5d8:	4b18      	ldr	r3, [pc, #96]	@ (801b63c <sniprintf+0x68>)
 801b5da:	1e0c      	subs	r4, r1, #0
 801b5dc:	681d      	ldr	r5, [r3, #0]
 801b5de:	b09d      	sub	sp, #116	@ 0x74
 801b5e0:	da08      	bge.n	801b5f4 <sniprintf+0x20>
 801b5e2:	238b      	movs	r3, #139	@ 0x8b
 801b5e4:	602b      	str	r3, [r5, #0]
 801b5e6:	f04f 30ff 	mov.w	r0, #4294967295
 801b5ea:	b01d      	add	sp, #116	@ 0x74
 801b5ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5f0:	b002      	add	sp, #8
 801b5f2:	4770      	bx	lr
 801b5f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b5f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b5fc:	f04f 0300 	mov.w	r3, #0
 801b600:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b602:	bf14      	ite	ne
 801b604:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b608:	4623      	moveq	r3, r4
 801b60a:	9304      	str	r3, [sp, #16]
 801b60c:	9307      	str	r3, [sp, #28]
 801b60e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b612:	9002      	str	r0, [sp, #8]
 801b614:	9006      	str	r0, [sp, #24]
 801b616:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b61a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b61c:	ab21      	add	r3, sp, #132	@ 0x84
 801b61e:	a902      	add	r1, sp, #8
 801b620:	4628      	mov	r0, r5
 801b622:	9301      	str	r3, [sp, #4]
 801b624:	f003 f9ce 	bl	801e9c4 <_svfiprintf_r>
 801b628:	1c43      	adds	r3, r0, #1
 801b62a:	bfbc      	itt	lt
 801b62c:	238b      	movlt	r3, #139	@ 0x8b
 801b62e:	602b      	strlt	r3, [r5, #0]
 801b630:	2c00      	cmp	r4, #0
 801b632:	d0da      	beq.n	801b5ea <sniprintf+0x16>
 801b634:	9b02      	ldr	r3, [sp, #8]
 801b636:	2200      	movs	r2, #0
 801b638:	701a      	strb	r2, [r3, #0]
 801b63a:	e7d6      	b.n	801b5ea <sniprintf+0x16>
 801b63c:	20000458 	.word	0x20000458

0801b640 <siprintf>:
 801b640:	b40e      	push	{r1, r2, r3}
 801b642:	b510      	push	{r4, lr}
 801b644:	b09d      	sub	sp, #116	@ 0x74
 801b646:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b648:	9002      	str	r0, [sp, #8]
 801b64a:	9006      	str	r0, [sp, #24]
 801b64c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b650:	480a      	ldr	r0, [pc, #40]	@ (801b67c <siprintf+0x3c>)
 801b652:	9107      	str	r1, [sp, #28]
 801b654:	9104      	str	r1, [sp, #16]
 801b656:	490a      	ldr	r1, [pc, #40]	@ (801b680 <siprintf+0x40>)
 801b658:	f853 2b04 	ldr.w	r2, [r3], #4
 801b65c:	9105      	str	r1, [sp, #20]
 801b65e:	2400      	movs	r4, #0
 801b660:	a902      	add	r1, sp, #8
 801b662:	6800      	ldr	r0, [r0, #0]
 801b664:	9301      	str	r3, [sp, #4]
 801b666:	941b      	str	r4, [sp, #108]	@ 0x6c
 801b668:	f003 f9ac 	bl	801e9c4 <_svfiprintf_r>
 801b66c:	9b02      	ldr	r3, [sp, #8]
 801b66e:	701c      	strb	r4, [r3, #0]
 801b670:	b01d      	add	sp, #116	@ 0x74
 801b672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b676:	b003      	add	sp, #12
 801b678:	4770      	bx	lr
 801b67a:	bf00      	nop
 801b67c:	20000458 	.word	0x20000458
 801b680:	ffff0208 	.word	0xffff0208

0801b684 <siscanf>:
 801b684:	b40e      	push	{r1, r2, r3}
 801b686:	b570      	push	{r4, r5, r6, lr}
 801b688:	b09d      	sub	sp, #116	@ 0x74
 801b68a:	ac21      	add	r4, sp, #132	@ 0x84
 801b68c:	2500      	movs	r5, #0
 801b68e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801b692:	f854 6b04 	ldr.w	r6, [r4], #4
 801b696:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b69a:	951b      	str	r5, [sp, #108]	@ 0x6c
 801b69c:	9002      	str	r0, [sp, #8]
 801b69e:	9006      	str	r0, [sp, #24]
 801b6a0:	f7e4 fdf6 	bl	8000290 <strlen>
 801b6a4:	4b0b      	ldr	r3, [pc, #44]	@ (801b6d4 <siscanf+0x50>)
 801b6a6:	9003      	str	r0, [sp, #12]
 801b6a8:	9007      	str	r0, [sp, #28]
 801b6aa:	480b      	ldr	r0, [pc, #44]	@ (801b6d8 <siscanf+0x54>)
 801b6ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b6ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b6b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6b6:	4632      	mov	r2, r6
 801b6b8:	4623      	mov	r3, r4
 801b6ba:	a902      	add	r1, sp, #8
 801b6bc:	6800      	ldr	r0, [r0, #0]
 801b6be:	950f      	str	r5, [sp, #60]	@ 0x3c
 801b6c0:	9514      	str	r5, [sp, #80]	@ 0x50
 801b6c2:	9401      	str	r4, [sp, #4]
 801b6c4:	f003 fad4 	bl	801ec70 <__ssvfiscanf_r>
 801b6c8:	b01d      	add	sp, #116	@ 0x74
 801b6ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b6ce:	b003      	add	sp, #12
 801b6d0:	4770      	bx	lr
 801b6d2:	bf00      	nop
 801b6d4:	0801b6ff 	.word	0x0801b6ff
 801b6d8:	20000458 	.word	0x20000458

0801b6dc <__sread>:
 801b6dc:	b510      	push	{r4, lr}
 801b6de:	460c      	mov	r4, r1
 801b6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6e4:	f001 f8ac 	bl	801c840 <_read_r>
 801b6e8:	2800      	cmp	r0, #0
 801b6ea:	bfab      	itete	ge
 801b6ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b6ee:	89a3      	ldrhlt	r3, [r4, #12]
 801b6f0:	181b      	addge	r3, r3, r0
 801b6f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b6f6:	bfac      	ite	ge
 801b6f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b6fa:	81a3      	strhlt	r3, [r4, #12]
 801b6fc:	bd10      	pop	{r4, pc}

0801b6fe <__seofread>:
 801b6fe:	2000      	movs	r0, #0
 801b700:	4770      	bx	lr

0801b702 <__swrite>:
 801b702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b706:	461f      	mov	r7, r3
 801b708:	898b      	ldrh	r3, [r1, #12]
 801b70a:	05db      	lsls	r3, r3, #23
 801b70c:	4605      	mov	r5, r0
 801b70e:	460c      	mov	r4, r1
 801b710:	4616      	mov	r6, r2
 801b712:	d505      	bpl.n	801b720 <__swrite+0x1e>
 801b714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b718:	2302      	movs	r3, #2
 801b71a:	2200      	movs	r2, #0
 801b71c:	f001 f87e 	bl	801c81c <_lseek_r>
 801b720:	89a3      	ldrh	r3, [r4, #12]
 801b722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b72a:	81a3      	strh	r3, [r4, #12]
 801b72c:	4632      	mov	r2, r6
 801b72e:	463b      	mov	r3, r7
 801b730:	4628      	mov	r0, r5
 801b732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b736:	f001 b8a5 	b.w	801c884 <_write_r>

0801b73a <__sseek>:
 801b73a:	b510      	push	{r4, lr}
 801b73c:	460c      	mov	r4, r1
 801b73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b742:	f001 f86b 	bl	801c81c <_lseek_r>
 801b746:	1c43      	adds	r3, r0, #1
 801b748:	89a3      	ldrh	r3, [r4, #12]
 801b74a:	bf15      	itete	ne
 801b74c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b74e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b752:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b756:	81a3      	strheq	r3, [r4, #12]
 801b758:	bf18      	it	ne
 801b75a:	81a3      	strhne	r3, [r4, #12]
 801b75c:	bd10      	pop	{r4, pc}

0801b75e <__sclose>:
 801b75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b762:	f000 bfdb 	b.w	801c71c <_close_r>

0801b766 <memset>:
 801b766:	4402      	add	r2, r0
 801b768:	4603      	mov	r3, r0
 801b76a:	4293      	cmp	r3, r2
 801b76c:	d100      	bne.n	801b770 <memset+0xa>
 801b76e:	4770      	bx	lr
 801b770:	f803 1b01 	strb.w	r1, [r3], #1
 801b774:	e7f9      	b.n	801b76a <memset+0x4>

0801b776 <strncmp>:
 801b776:	b510      	push	{r4, lr}
 801b778:	b16a      	cbz	r2, 801b796 <strncmp+0x20>
 801b77a:	3901      	subs	r1, #1
 801b77c:	1884      	adds	r4, r0, r2
 801b77e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b782:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b786:	429a      	cmp	r2, r3
 801b788:	d103      	bne.n	801b792 <strncmp+0x1c>
 801b78a:	42a0      	cmp	r0, r4
 801b78c:	d001      	beq.n	801b792 <strncmp+0x1c>
 801b78e:	2a00      	cmp	r2, #0
 801b790:	d1f5      	bne.n	801b77e <strncmp+0x8>
 801b792:	1ad0      	subs	r0, r2, r3
 801b794:	bd10      	pop	{r4, pc}
 801b796:	4610      	mov	r0, r2
 801b798:	e7fc      	b.n	801b794 <strncmp+0x1e>

0801b79a <strncpy>:
 801b79a:	b510      	push	{r4, lr}
 801b79c:	3901      	subs	r1, #1
 801b79e:	4603      	mov	r3, r0
 801b7a0:	b132      	cbz	r2, 801b7b0 <strncpy+0x16>
 801b7a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b7a6:	f803 4b01 	strb.w	r4, [r3], #1
 801b7aa:	3a01      	subs	r2, #1
 801b7ac:	2c00      	cmp	r4, #0
 801b7ae:	d1f7      	bne.n	801b7a0 <strncpy+0x6>
 801b7b0:	441a      	add	r2, r3
 801b7b2:	2100      	movs	r1, #0
 801b7b4:	4293      	cmp	r3, r2
 801b7b6:	d100      	bne.n	801b7ba <strncpy+0x20>
 801b7b8:	bd10      	pop	{r4, pc}
 801b7ba:	f803 1b01 	strb.w	r1, [r3], #1
 801b7be:	e7f9      	b.n	801b7b4 <strncpy+0x1a>

0801b7c0 <strtok>:
 801b7c0:	4b16      	ldr	r3, [pc, #88]	@ (801b81c <strtok+0x5c>)
 801b7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7c6:	681f      	ldr	r7, [r3, #0]
 801b7c8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b7ca:	4605      	mov	r5, r0
 801b7cc:	460e      	mov	r6, r1
 801b7ce:	b9ec      	cbnz	r4, 801b80c <strtok+0x4c>
 801b7d0:	2050      	movs	r0, #80	@ 0x50
 801b7d2:	f7fe f87f 	bl	80198d4 <malloc>
 801b7d6:	4602      	mov	r2, r0
 801b7d8:	6478      	str	r0, [r7, #68]	@ 0x44
 801b7da:	b920      	cbnz	r0, 801b7e6 <strtok+0x26>
 801b7dc:	4b10      	ldr	r3, [pc, #64]	@ (801b820 <strtok+0x60>)
 801b7de:	4811      	ldr	r0, [pc, #68]	@ (801b824 <strtok+0x64>)
 801b7e0:	215b      	movs	r1, #91	@ 0x5b
 801b7e2:	f001 f909 	bl	801c9f8 <__assert_func>
 801b7e6:	e9c0 4400 	strd	r4, r4, [r0]
 801b7ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b7ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b7f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b7f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b7fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b7fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b802:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b806:	6184      	str	r4, [r0, #24]
 801b808:	7704      	strb	r4, [r0, #28]
 801b80a:	6244      	str	r4, [r0, #36]	@ 0x24
 801b80c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b80e:	4631      	mov	r1, r6
 801b810:	4628      	mov	r0, r5
 801b812:	2301      	movs	r3, #1
 801b814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b818:	f000 b806 	b.w	801b828 <__strtok_r>
 801b81c:	20000458 	.word	0x20000458
 801b820:	08024bb1 	.word	0x08024bb1
 801b824:	08024bc8 	.word	0x08024bc8

0801b828 <__strtok_r>:
 801b828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b82a:	4604      	mov	r4, r0
 801b82c:	b908      	cbnz	r0, 801b832 <__strtok_r+0xa>
 801b82e:	6814      	ldr	r4, [r2, #0]
 801b830:	b144      	cbz	r4, 801b844 <__strtok_r+0x1c>
 801b832:	4620      	mov	r0, r4
 801b834:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b838:	460f      	mov	r7, r1
 801b83a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b83e:	b91e      	cbnz	r6, 801b848 <__strtok_r+0x20>
 801b840:	b965      	cbnz	r5, 801b85c <__strtok_r+0x34>
 801b842:	6015      	str	r5, [r2, #0]
 801b844:	2000      	movs	r0, #0
 801b846:	e005      	b.n	801b854 <__strtok_r+0x2c>
 801b848:	42b5      	cmp	r5, r6
 801b84a:	d1f6      	bne.n	801b83a <__strtok_r+0x12>
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d1f0      	bne.n	801b832 <__strtok_r+0xa>
 801b850:	6014      	str	r4, [r2, #0]
 801b852:	7003      	strb	r3, [r0, #0]
 801b854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b856:	461c      	mov	r4, r3
 801b858:	e00c      	b.n	801b874 <__strtok_r+0x4c>
 801b85a:	b91d      	cbnz	r5, 801b864 <__strtok_r+0x3c>
 801b85c:	4627      	mov	r7, r4
 801b85e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b862:	460e      	mov	r6, r1
 801b864:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b868:	42ab      	cmp	r3, r5
 801b86a:	d1f6      	bne.n	801b85a <__strtok_r+0x32>
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d0f2      	beq.n	801b856 <__strtok_r+0x2e>
 801b870:	2300      	movs	r3, #0
 801b872:	703b      	strb	r3, [r7, #0]
 801b874:	6014      	str	r4, [r2, #0]
 801b876:	e7ed      	b.n	801b854 <__strtok_r+0x2c>

0801b878 <difftime>:
 801b878:	1a80      	subs	r0, r0, r2
 801b87a:	b508      	push	{r3, lr}
 801b87c:	eb61 0103 	sbc.w	r1, r1, r3
 801b880:	f7e4 fe9c 	bl	80005bc <__aeabi_l2d>
 801b884:	ec41 0b10 	vmov	d0, r0, r1
 801b888:	bd08      	pop	{r3, pc}
	...

0801b88c <gmtime>:
 801b88c:	b538      	push	{r3, r4, r5, lr}
 801b88e:	4b0b      	ldr	r3, [pc, #44]	@ (801b8bc <gmtime+0x30>)
 801b890:	681d      	ldr	r5, [r3, #0]
 801b892:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801b894:	4604      	mov	r4, r0
 801b896:	b953      	cbnz	r3, 801b8ae <gmtime+0x22>
 801b898:	2024      	movs	r0, #36	@ 0x24
 801b89a:	f7fe f81b 	bl	80198d4 <malloc>
 801b89e:	4602      	mov	r2, r0
 801b8a0:	6368      	str	r0, [r5, #52]	@ 0x34
 801b8a2:	b920      	cbnz	r0, 801b8ae <gmtime+0x22>
 801b8a4:	4b06      	ldr	r3, [pc, #24]	@ (801b8c0 <gmtime+0x34>)
 801b8a6:	4807      	ldr	r0, [pc, #28]	@ (801b8c4 <gmtime+0x38>)
 801b8a8:	213d      	movs	r1, #61	@ 0x3d
 801b8aa:	f001 f8a5 	bl	801c9f8 <__assert_func>
 801b8ae:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b8b6:	f000 b807 	b.w	801b8c8 <gmtime_r>
 801b8ba:	bf00      	nop
 801b8bc:	20000458 	.word	0x20000458
 801b8c0:	08024bb1 	.word	0x08024bb1
 801b8c4:	08024c22 	.word	0x08024c22

0801b8c8 <gmtime_r>:
 801b8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8cc:	4a4d      	ldr	r2, [pc, #308]	@ (801ba04 <gmtime_r+0x13c>)
 801b8ce:	460c      	mov	r4, r1
 801b8d0:	2300      	movs	r3, #0
 801b8d2:	e9d0 0100 	ldrd	r0, r1, [r0]
 801b8d6:	f7e5 f9e7 	bl	8000ca8 <__aeabi_ldivmod>
 801b8da:	2a00      	cmp	r2, #0
 801b8dc:	bfbc      	itt	lt
 801b8de:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 801b8e2:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 801b8e6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801b8ea:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 801b8ee:	fbb2 f3f1 	udiv	r3, r2, r1
 801b8f2:	fb01 2213 	mls	r2, r1, r3, r2
 801b8f6:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 801b8fa:	bfac      	ite	ge
 801b8fc:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 801b900:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 801b904:	60a3      	str	r3, [r4, #8]
 801b906:	fbb2 f3f1 	udiv	r3, r2, r1
 801b90a:	fb01 2213 	mls	r2, r1, r3, r2
 801b90e:	6063      	str	r3, [r4, #4]
 801b910:	6022      	str	r2, [r4, #0]
 801b912:	1cc3      	adds	r3, r0, #3
 801b914:	2207      	movs	r2, #7
 801b916:	fb93 f2f2 	sdiv	r2, r3, r2
 801b91a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801b91e:	1a9b      	subs	r3, r3, r2
 801b920:	4939      	ldr	r1, [pc, #228]	@ (801ba08 <gmtime_r+0x140>)
 801b922:	d555      	bpl.n	801b9d0 <gmtime_r+0x108>
 801b924:	3307      	adds	r3, #7
 801b926:	61a3      	str	r3, [r4, #24]
 801b928:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 801b92c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 801b930:	fb93 f1f1 	sdiv	r1, r3, r1
 801b934:	4b35      	ldr	r3, [pc, #212]	@ (801ba0c <gmtime_r+0x144>)
 801b936:	fb03 0001 	mla	r0, r3, r1, r0
 801b93a:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 801b93e:	fbb0 f3f3 	udiv	r3, r0, r3
 801b942:	4403      	add	r3, r0
 801b944:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 801b948:	fbb0 f2fc 	udiv	r2, r0, ip
 801b94c:	1a9b      	subs	r3, r3, r2
 801b94e:	f240 176d 	movw	r7, #365	@ 0x16d
 801b952:	4a2f      	ldr	r2, [pc, #188]	@ (801ba10 <gmtime_r+0x148>)
 801b954:	fbb0 f2f2 	udiv	r2, r0, r2
 801b958:	2664      	movs	r6, #100	@ 0x64
 801b95a:	1a9b      	subs	r3, r3, r2
 801b95c:	fbb3 f2f7 	udiv	r2, r3, r7
 801b960:	fbb3 f3fc 	udiv	r3, r3, ip
 801b964:	fbb2 f5f6 	udiv	r5, r2, r6
 801b968:	1aeb      	subs	r3, r5, r3
 801b96a:	4403      	add	r3, r0
 801b96c:	fb07 3312 	mls	r3, r7, r2, r3
 801b970:	2099      	movs	r0, #153	@ 0x99
 801b972:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 801b976:	3702      	adds	r7, #2
 801b978:	f103 0e01 	add.w	lr, r3, #1
 801b97c:	fbb7 fcf0 	udiv	ip, r7, r0
 801b980:	fb00 f00c 	mul.w	r0, r0, ip
 801b984:	3002      	adds	r0, #2
 801b986:	f04f 0805 	mov.w	r8, #5
 801b98a:	fbb0 f0f8 	udiv	r0, r0, r8
 801b98e:	ebae 0000 	sub.w	r0, lr, r0
 801b992:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 801b996:	4577      	cmp	r7, lr
 801b998:	bf8c      	ite	hi
 801b99a:	f06f 0709 	mvnhi.w	r7, #9
 801b99e:	2702      	movls	r7, #2
 801b9a0:	4467      	add	r7, ip
 801b9a2:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 801b9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 801b9aa:	2f01      	cmp	r7, #1
 801b9ac:	bf98      	it	ls
 801b9ae:	3101      	addls	r1, #1
 801b9b0:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 801b9b4:	d312      	bcc.n	801b9dc <gmtime_r+0x114>
 801b9b6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801b9ba:	61e3      	str	r3, [r4, #28]
 801b9bc:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	60e0      	str	r0, [r4, #12]
 801b9c4:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801b9c8:	6223      	str	r3, [r4, #32]
 801b9ca:	4620      	mov	r0, r4
 801b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9d0:	2800      	cmp	r0, #0
 801b9d2:	61a3      	str	r3, [r4, #24]
 801b9d4:	dba8      	blt.n	801b928 <gmtime_r+0x60>
 801b9d6:	fb90 f1f1 	sdiv	r1, r0, r1
 801b9da:	e7ab      	b.n	801b934 <gmtime_r+0x6c>
 801b9dc:	f012 0f03 	tst.w	r2, #3
 801b9e0:	d102      	bne.n	801b9e8 <gmtime_r+0x120>
 801b9e2:	fb06 2515 	mls	r5, r6, r5, r2
 801b9e6:	b95d      	cbnz	r5, 801ba00 <gmtime_r+0x138>
 801b9e8:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 801b9ec:	fbb2 f6f5 	udiv	r6, r2, r5
 801b9f0:	fb05 2216 	mls	r2, r5, r6, r2
 801b9f4:	fab2 f282 	clz	r2, r2
 801b9f8:	0952      	lsrs	r2, r2, #5
 801b9fa:	333b      	adds	r3, #59	@ 0x3b
 801b9fc:	4413      	add	r3, r2
 801b9fe:	e7dc      	b.n	801b9ba <gmtime_r+0xf2>
 801ba00:	2201      	movs	r2, #1
 801ba02:	e7fa      	b.n	801b9fa <gmtime_r+0x132>
 801ba04:	00015180 	.word	0x00015180
 801ba08:	00023ab1 	.word	0x00023ab1
 801ba0c:	fffdc54f 	.word	0xfffdc54f
 801ba10:	00023ab0 	.word	0x00023ab0

0801ba14 <localtime_r>:
 801ba14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba18:	460c      	mov	r4, r1
 801ba1a:	4607      	mov	r7, r0
 801ba1c:	f003 fd38 	bl	801f490 <__gettzinfo>
 801ba20:	4621      	mov	r1, r4
 801ba22:	4605      	mov	r5, r0
 801ba24:	4638      	mov	r0, r7
 801ba26:	f7ff ff4f 	bl	801b8c8 <gmtime_r>
 801ba2a:	6943      	ldr	r3, [r0, #20]
 801ba2c:	0799      	lsls	r1, r3, #30
 801ba2e:	4604      	mov	r4, r0
 801ba30:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 801ba34:	d106      	bne.n	801ba44 <localtime_r+0x30>
 801ba36:	2264      	movs	r2, #100	@ 0x64
 801ba38:	fb98 f3f2 	sdiv	r3, r8, r2
 801ba3c:	fb02 8313 	mls	r3, r2, r3, r8
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d171      	bne.n	801bb28 <localtime_r+0x114>
 801ba44:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801ba48:	fb98 f3f2 	sdiv	r3, r8, r2
 801ba4c:	fb02 8313 	mls	r3, r2, r3, r8
 801ba50:	fab3 f383 	clz	r3, r3
 801ba54:	095b      	lsrs	r3, r3, #5
 801ba56:	425e      	negs	r6, r3
 801ba58:	4b64      	ldr	r3, [pc, #400]	@ (801bbec <localtime_r+0x1d8>)
 801ba5a:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 801ba5e:	441e      	add	r6, r3
 801ba60:	f000 fc24 	bl	801c2ac <__tz_lock>
 801ba64:	f000 fc2e 	bl	801c2c4 <_tzset_unlocked>
 801ba68:	4b61      	ldr	r3, [pc, #388]	@ (801bbf0 <localtime_r+0x1dc>)
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d06a      	beq.n	801bb46 <localtime_r+0x132>
 801ba70:	686b      	ldr	r3, [r5, #4]
 801ba72:	4543      	cmp	r3, r8
 801ba74:	d15a      	bne.n	801bb2c <localtime_r+0x118>
 801ba76:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ba7a:	682f      	ldr	r7, [r5, #0]
 801ba7c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801ba80:	2f00      	cmp	r7, #0
 801ba82:	d15b      	bne.n	801bb3c <localtime_r+0x128>
 801ba84:	4282      	cmp	r2, r0
 801ba86:	eb73 0101 	sbcs.w	r1, r3, r1
 801ba8a:	db5e      	blt.n	801bb4a <localtime_r+0x136>
 801ba8c:	2301      	movs	r3, #1
 801ba8e:	6223      	str	r3, [r4, #32]
 801ba90:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801ba92:	6861      	ldr	r1, [r4, #4]
 801ba94:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801ba98:	fb93 f0f2 	sdiv	r0, r3, r2
 801ba9c:	fb02 3310 	mls	r3, r2, r0, r3
 801baa0:	223c      	movs	r2, #60	@ 0x3c
 801baa2:	fb93 f5f2 	sdiv	r5, r3, r2
 801baa6:	fb02 3215 	mls	r2, r2, r5, r3
 801baaa:	6823      	ldr	r3, [r4, #0]
 801baac:	1a9b      	subs	r3, r3, r2
 801baae:	68a2      	ldr	r2, [r4, #8]
 801bab0:	6023      	str	r3, [r4, #0]
 801bab2:	1b49      	subs	r1, r1, r5
 801bab4:	1a12      	subs	r2, r2, r0
 801bab6:	2b3b      	cmp	r3, #59	@ 0x3b
 801bab8:	6061      	str	r1, [r4, #4]
 801baba:	60a2      	str	r2, [r4, #8]
 801babc:	dd51      	ble.n	801bb62 <localtime_r+0x14e>
 801babe:	3101      	adds	r1, #1
 801bac0:	6061      	str	r1, [r4, #4]
 801bac2:	3b3c      	subs	r3, #60	@ 0x3c
 801bac4:	6023      	str	r3, [r4, #0]
 801bac6:	6863      	ldr	r3, [r4, #4]
 801bac8:	2b3b      	cmp	r3, #59	@ 0x3b
 801baca:	dd50      	ble.n	801bb6e <localtime_r+0x15a>
 801bacc:	3201      	adds	r2, #1
 801bace:	60a2      	str	r2, [r4, #8]
 801bad0:	3b3c      	subs	r3, #60	@ 0x3c
 801bad2:	6063      	str	r3, [r4, #4]
 801bad4:	68a3      	ldr	r3, [r4, #8]
 801bad6:	2b17      	cmp	r3, #23
 801bad8:	dd4f      	ble.n	801bb7a <localtime_r+0x166>
 801bada:	69e2      	ldr	r2, [r4, #28]
 801badc:	3201      	adds	r2, #1
 801bade:	61e2      	str	r2, [r4, #28]
 801bae0:	69a2      	ldr	r2, [r4, #24]
 801bae2:	3201      	adds	r2, #1
 801bae4:	2a07      	cmp	r2, #7
 801bae6:	bfa8      	it	ge
 801bae8:	2200      	movge	r2, #0
 801baea:	61a2      	str	r2, [r4, #24]
 801baec:	68e2      	ldr	r2, [r4, #12]
 801baee:	3b18      	subs	r3, #24
 801baf0:	3201      	adds	r2, #1
 801baf2:	60a3      	str	r3, [r4, #8]
 801baf4:	6923      	ldr	r3, [r4, #16]
 801baf6:	60e2      	str	r2, [r4, #12]
 801baf8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801bafc:	428a      	cmp	r2, r1
 801bafe:	dd0e      	ble.n	801bb1e <localtime_r+0x10a>
 801bb00:	2b0b      	cmp	r3, #11
 801bb02:	eba2 0201 	sub.w	r2, r2, r1
 801bb06:	60e2      	str	r2, [r4, #12]
 801bb08:	f103 0201 	add.w	r2, r3, #1
 801bb0c:	bf09      	itett	eq
 801bb0e:	6963      	ldreq	r3, [r4, #20]
 801bb10:	6122      	strne	r2, [r4, #16]
 801bb12:	2200      	moveq	r2, #0
 801bb14:	3301      	addeq	r3, #1
 801bb16:	bf02      	ittt	eq
 801bb18:	6122      	streq	r2, [r4, #16]
 801bb1a:	6163      	streq	r3, [r4, #20]
 801bb1c:	61e2      	streq	r2, [r4, #28]
 801bb1e:	f000 fbcb 	bl	801c2b8 <__tz_unlock>
 801bb22:	4620      	mov	r0, r4
 801bb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb28:	2301      	movs	r3, #1
 801bb2a:	e794      	b.n	801ba56 <localtime_r+0x42>
 801bb2c:	4640      	mov	r0, r8
 801bb2e:	f000 fb09 	bl	801c144 <__tzcalc_limits>
 801bb32:	2800      	cmp	r0, #0
 801bb34:	d19f      	bne.n	801ba76 <localtime_r+0x62>
 801bb36:	f04f 33ff 	mov.w	r3, #4294967295
 801bb3a:	e004      	b.n	801bb46 <localtime_r+0x132>
 801bb3c:	4282      	cmp	r2, r0
 801bb3e:	eb73 0101 	sbcs.w	r1, r3, r1
 801bb42:	da02      	bge.n	801bb4a <localtime_r+0x136>
 801bb44:	2300      	movs	r3, #0
 801bb46:	6223      	str	r3, [r4, #32]
 801bb48:	e009      	b.n	801bb5e <localtime_r+0x14a>
 801bb4a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 801bb4e:	4282      	cmp	r2, r0
 801bb50:	418b      	sbcs	r3, r1
 801bb52:	bfb4      	ite	lt
 801bb54:	2301      	movlt	r3, #1
 801bb56:	2300      	movge	r3, #0
 801bb58:	6223      	str	r3, [r4, #32]
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d198      	bne.n	801ba90 <localtime_r+0x7c>
 801bb5e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801bb60:	e797      	b.n	801ba92 <localtime_r+0x7e>
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	daaf      	bge.n	801bac6 <localtime_r+0xb2>
 801bb66:	3901      	subs	r1, #1
 801bb68:	6061      	str	r1, [r4, #4]
 801bb6a:	333c      	adds	r3, #60	@ 0x3c
 801bb6c:	e7aa      	b.n	801bac4 <localtime_r+0xb0>
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	dab0      	bge.n	801bad4 <localtime_r+0xc0>
 801bb72:	3a01      	subs	r2, #1
 801bb74:	60a2      	str	r2, [r4, #8]
 801bb76:	333c      	adds	r3, #60	@ 0x3c
 801bb78:	e7ab      	b.n	801bad2 <localtime_r+0xbe>
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	dacf      	bge.n	801bb1e <localtime_r+0x10a>
 801bb7e:	69e2      	ldr	r2, [r4, #28]
 801bb80:	3a01      	subs	r2, #1
 801bb82:	61e2      	str	r2, [r4, #28]
 801bb84:	69a2      	ldr	r2, [r4, #24]
 801bb86:	3a01      	subs	r2, #1
 801bb88:	bf48      	it	mi
 801bb8a:	2206      	movmi	r2, #6
 801bb8c:	61a2      	str	r2, [r4, #24]
 801bb8e:	68e2      	ldr	r2, [r4, #12]
 801bb90:	3318      	adds	r3, #24
 801bb92:	3a01      	subs	r2, #1
 801bb94:	60e2      	str	r2, [r4, #12]
 801bb96:	60a3      	str	r3, [r4, #8]
 801bb98:	2a00      	cmp	r2, #0
 801bb9a:	d1c0      	bne.n	801bb1e <localtime_r+0x10a>
 801bb9c:	6923      	ldr	r3, [r4, #16]
 801bb9e:	3b01      	subs	r3, #1
 801bba0:	d405      	bmi.n	801bbae <localtime_r+0x19a>
 801bba2:	6123      	str	r3, [r4, #16]
 801bba4:	6923      	ldr	r3, [r4, #16]
 801bba6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bbaa:	60e3      	str	r3, [r4, #12]
 801bbac:	e7b7      	b.n	801bb1e <localtime_r+0x10a>
 801bbae:	230b      	movs	r3, #11
 801bbb0:	6123      	str	r3, [r4, #16]
 801bbb2:	6963      	ldr	r3, [r4, #20]
 801bbb4:	1e5a      	subs	r2, r3, #1
 801bbb6:	6162      	str	r2, [r4, #20]
 801bbb8:	0792      	lsls	r2, r2, #30
 801bbba:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801bbbe:	d105      	bne.n	801bbcc <localtime_r+0x1b8>
 801bbc0:	2164      	movs	r1, #100	@ 0x64
 801bbc2:	fb93 f2f1 	sdiv	r2, r3, r1
 801bbc6:	fb01 3212 	mls	r2, r1, r2, r3
 801bbca:	b962      	cbnz	r2, 801bbe6 <localtime_r+0x1d2>
 801bbcc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801bbd0:	fb93 f1f2 	sdiv	r1, r3, r2
 801bbd4:	fb02 3311 	mls	r3, r2, r1, r3
 801bbd8:	fab3 f383 	clz	r3, r3
 801bbdc:	095b      	lsrs	r3, r3, #5
 801bbde:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 801bbe2:	61e3      	str	r3, [r4, #28]
 801bbe4:	e7de      	b.n	801bba4 <localtime_r+0x190>
 801bbe6:	2301      	movs	r3, #1
 801bbe8:	e7f9      	b.n	801bbde <localtime_r+0x1ca>
 801bbea:	bf00      	nop
 801bbec:	0802501c 	.word	0x0802501c
 801bbf0:	200065cc 	.word	0x200065cc

0801bbf4 <validate_structure>:
 801bbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bbf6:	6801      	ldr	r1, [r0, #0]
 801bbf8:	293b      	cmp	r1, #59	@ 0x3b
 801bbfa:	4604      	mov	r4, r0
 801bbfc:	d911      	bls.n	801bc22 <validate_structure+0x2e>
 801bbfe:	223c      	movs	r2, #60	@ 0x3c
 801bc00:	4668      	mov	r0, sp
 801bc02:	f000 ff17 	bl	801ca34 <div>
 801bc06:	9a01      	ldr	r2, [sp, #4]
 801bc08:	6863      	ldr	r3, [r4, #4]
 801bc0a:	9900      	ldr	r1, [sp, #0]
 801bc0c:	2a00      	cmp	r2, #0
 801bc0e:	440b      	add	r3, r1
 801bc10:	6063      	str	r3, [r4, #4]
 801bc12:	bfbb      	ittet	lt
 801bc14:	323c      	addlt	r2, #60	@ 0x3c
 801bc16:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801bc1a:	6022      	strge	r2, [r4, #0]
 801bc1c:	6022      	strlt	r2, [r4, #0]
 801bc1e:	bfb8      	it	lt
 801bc20:	6063      	strlt	r3, [r4, #4]
 801bc22:	6861      	ldr	r1, [r4, #4]
 801bc24:	293b      	cmp	r1, #59	@ 0x3b
 801bc26:	d911      	bls.n	801bc4c <validate_structure+0x58>
 801bc28:	223c      	movs	r2, #60	@ 0x3c
 801bc2a:	4668      	mov	r0, sp
 801bc2c:	f000 ff02 	bl	801ca34 <div>
 801bc30:	9a01      	ldr	r2, [sp, #4]
 801bc32:	68a3      	ldr	r3, [r4, #8]
 801bc34:	9900      	ldr	r1, [sp, #0]
 801bc36:	2a00      	cmp	r2, #0
 801bc38:	440b      	add	r3, r1
 801bc3a:	60a3      	str	r3, [r4, #8]
 801bc3c:	bfbb      	ittet	lt
 801bc3e:	323c      	addlt	r2, #60	@ 0x3c
 801bc40:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801bc44:	6062      	strge	r2, [r4, #4]
 801bc46:	6062      	strlt	r2, [r4, #4]
 801bc48:	bfb8      	it	lt
 801bc4a:	60a3      	strlt	r3, [r4, #8]
 801bc4c:	68a1      	ldr	r1, [r4, #8]
 801bc4e:	2917      	cmp	r1, #23
 801bc50:	d911      	bls.n	801bc76 <validate_structure+0x82>
 801bc52:	2218      	movs	r2, #24
 801bc54:	4668      	mov	r0, sp
 801bc56:	f000 feed 	bl	801ca34 <div>
 801bc5a:	9a01      	ldr	r2, [sp, #4]
 801bc5c:	68e3      	ldr	r3, [r4, #12]
 801bc5e:	9900      	ldr	r1, [sp, #0]
 801bc60:	2a00      	cmp	r2, #0
 801bc62:	440b      	add	r3, r1
 801bc64:	60e3      	str	r3, [r4, #12]
 801bc66:	bfbb      	ittet	lt
 801bc68:	3218      	addlt	r2, #24
 801bc6a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801bc6e:	60a2      	strge	r2, [r4, #8]
 801bc70:	60a2      	strlt	r2, [r4, #8]
 801bc72:	bfb8      	it	lt
 801bc74:	60e3      	strlt	r3, [r4, #12]
 801bc76:	6921      	ldr	r1, [r4, #16]
 801bc78:	290b      	cmp	r1, #11
 801bc7a:	d911      	bls.n	801bca0 <validate_structure+0xac>
 801bc7c:	220c      	movs	r2, #12
 801bc7e:	4668      	mov	r0, sp
 801bc80:	f000 fed8 	bl	801ca34 <div>
 801bc84:	9a01      	ldr	r2, [sp, #4]
 801bc86:	6963      	ldr	r3, [r4, #20]
 801bc88:	9900      	ldr	r1, [sp, #0]
 801bc8a:	2a00      	cmp	r2, #0
 801bc8c:	440b      	add	r3, r1
 801bc8e:	6163      	str	r3, [r4, #20]
 801bc90:	bfbb      	ittet	lt
 801bc92:	320c      	addlt	r2, #12
 801bc94:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801bc98:	6122      	strge	r2, [r4, #16]
 801bc9a:	6122      	strlt	r2, [r4, #16]
 801bc9c:	bfb8      	it	lt
 801bc9e:	6163      	strlt	r3, [r4, #20]
 801bca0:	6963      	ldr	r3, [r4, #20]
 801bca2:	079a      	lsls	r2, r3, #30
 801bca4:	d11c      	bne.n	801bce0 <validate_structure+0xec>
 801bca6:	2164      	movs	r1, #100	@ 0x64
 801bca8:	fb93 f2f1 	sdiv	r2, r3, r1
 801bcac:	fb01 3212 	mls	r2, r1, r2, r3
 801bcb0:	b9c2      	cbnz	r2, 801bce4 <validate_structure+0xf0>
 801bcb2:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 801bcb6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801bcba:	fb93 f1f2 	sdiv	r1, r3, r2
 801bcbe:	fb02 3311 	mls	r3, r2, r1, r3
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	bf0c      	ite	eq
 801bcc6:	231d      	moveq	r3, #29
 801bcc8:	231c      	movne	r3, #28
 801bcca:	68e2      	ldr	r2, [r4, #12]
 801bccc:	2a00      	cmp	r2, #0
 801bcce:	dc0b      	bgt.n	801bce8 <validate_structure+0xf4>
 801bcd0:	4d31      	ldr	r5, [pc, #196]	@ (801bd98 <validate_structure+0x1a4>)
 801bcd2:	200b      	movs	r0, #11
 801bcd4:	2164      	movs	r1, #100	@ 0x64
 801bcd6:	68e6      	ldr	r6, [r4, #12]
 801bcd8:	2e00      	cmp	r6, #0
 801bcda:	dd30      	ble.n	801bd3e <validate_structure+0x14a>
 801bcdc:	b003      	add	sp, #12
 801bcde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bce0:	231c      	movs	r3, #28
 801bce2:	e7f2      	b.n	801bcca <validate_structure+0xd6>
 801bce4:	231d      	movs	r3, #29
 801bce6:	e7f0      	b.n	801bcca <validate_structure+0xd6>
 801bce8:	4d2b      	ldr	r5, [pc, #172]	@ (801bd98 <validate_structure+0x1a4>)
 801bcea:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801bcee:	2a01      	cmp	r2, #1
 801bcf0:	bf14      	ite	ne
 801bcf2:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 801bcf6:	4618      	moveq	r0, r3
 801bcf8:	4281      	cmp	r1, r0
 801bcfa:	ddef      	ble.n	801bcdc <validate_structure+0xe8>
 801bcfc:	3201      	adds	r2, #1
 801bcfe:	1a09      	subs	r1, r1, r0
 801bd00:	2a0c      	cmp	r2, #12
 801bd02:	60e1      	str	r1, [r4, #12]
 801bd04:	6122      	str	r2, [r4, #16]
 801bd06:	d1f0      	bne.n	801bcea <validate_structure+0xf6>
 801bd08:	6963      	ldr	r3, [r4, #20]
 801bd0a:	2100      	movs	r1, #0
 801bd0c:	1c5a      	adds	r2, r3, #1
 801bd0e:	6121      	str	r1, [r4, #16]
 801bd10:	0791      	lsls	r1, r2, #30
 801bd12:	6162      	str	r2, [r4, #20]
 801bd14:	d13c      	bne.n	801bd90 <validate_structure+0x19c>
 801bd16:	2164      	movs	r1, #100	@ 0x64
 801bd18:	fb92 f0f1 	sdiv	r0, r2, r1
 801bd1c:	fb01 2210 	mls	r2, r1, r0, r2
 801bd20:	2a00      	cmp	r2, #0
 801bd22:	d137      	bne.n	801bd94 <validate_structure+0x1a0>
 801bd24:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 801bd28:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801bd2c:	fb93 f1f2 	sdiv	r1, r3, r2
 801bd30:	fb02 3311 	mls	r3, r2, r1, r3
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	bf0c      	ite	eq
 801bd38:	231d      	moveq	r3, #29
 801bd3a:	231c      	movne	r3, #28
 801bd3c:	e7d5      	b.n	801bcea <validate_structure+0xf6>
 801bd3e:	6922      	ldr	r2, [r4, #16]
 801bd40:	3a01      	subs	r2, #1
 801bd42:	6122      	str	r2, [r4, #16]
 801bd44:	3201      	adds	r2, #1
 801bd46:	d116      	bne.n	801bd76 <validate_structure+0x182>
 801bd48:	6963      	ldr	r3, [r4, #20]
 801bd4a:	1e5a      	subs	r2, r3, #1
 801bd4c:	0797      	lsls	r7, r2, #30
 801bd4e:	e9c4 0204 	strd	r0, r2, [r4, #16]
 801bd52:	d119      	bne.n	801bd88 <validate_structure+0x194>
 801bd54:	fb92 f7f1 	sdiv	r7, r2, r1
 801bd58:	fb01 2217 	mls	r2, r1, r7, r2
 801bd5c:	b9b2      	cbnz	r2, 801bd8c <validate_structure+0x198>
 801bd5e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801bd62:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801bd66:	fb93 f7f2 	sdiv	r7, r3, r2
 801bd6a:	fb02 3317 	mls	r3, r2, r7, r3
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	bf0c      	ite	eq
 801bd72:	231d      	moveq	r3, #29
 801bd74:	231c      	movne	r3, #28
 801bd76:	6922      	ldr	r2, [r4, #16]
 801bd78:	2a01      	cmp	r2, #1
 801bd7a:	bf14      	ite	ne
 801bd7c:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 801bd80:	461a      	moveq	r2, r3
 801bd82:	4432      	add	r2, r6
 801bd84:	60e2      	str	r2, [r4, #12]
 801bd86:	e7a6      	b.n	801bcd6 <validate_structure+0xe2>
 801bd88:	231c      	movs	r3, #28
 801bd8a:	e7f4      	b.n	801bd76 <validate_structure+0x182>
 801bd8c:	231d      	movs	r3, #29
 801bd8e:	e7f2      	b.n	801bd76 <validate_structure+0x182>
 801bd90:	231c      	movs	r3, #28
 801bd92:	e7aa      	b.n	801bcea <validate_structure+0xf6>
 801bd94:	231d      	movs	r3, #29
 801bd96:	e7a8      	b.n	801bcea <validate_structure+0xf6>
 801bd98:	08024fec 	.word	0x08024fec

0801bd9c <mktime>:
 801bd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bda0:	b085      	sub	sp, #20
 801bda2:	4607      	mov	r7, r0
 801bda4:	f003 fb74 	bl	801f490 <__gettzinfo>
 801bda8:	4681      	mov	r9, r0
 801bdaa:	4638      	mov	r0, r7
 801bdac:	f7ff ff22 	bl	801bbf4 <validate_structure>
 801bdb0:	e9d7 4300 	ldrd	r4, r3, [r7]
 801bdb4:	223c      	movs	r2, #60	@ 0x3c
 801bdb6:	fb02 4403 	mla	r4, r2, r3, r4
 801bdba:	68bb      	ldr	r3, [r7, #8]
 801bdbc:	697d      	ldr	r5, [r7, #20]
 801bdbe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801bdc2:	fb02 4403 	mla	r4, r2, r3, r4
 801bdc6:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 801bdca:	4ac3      	ldr	r2, [pc, #780]	@ (801c0d8 <mktime+0x33c>)
 801bdcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801bdd0:	3e01      	subs	r6, #1
 801bdd2:	2b01      	cmp	r3, #1
 801bdd4:	4416      	add	r6, r2
 801bdd6:	dd11      	ble.n	801bdfc <mktime+0x60>
 801bdd8:	07a9      	lsls	r1, r5, #30
 801bdda:	d10f      	bne.n	801bdfc <mktime+0x60>
 801bddc:	2264      	movs	r2, #100	@ 0x64
 801bdde:	fb95 f3f2 	sdiv	r3, r5, r2
 801bde2:	fb02 5313 	mls	r3, r2, r3, r5
 801bde6:	b943      	cbnz	r3, 801bdfa <mktime+0x5e>
 801bde8:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 801bdec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801bdf0:	fb93 f1f2 	sdiv	r1, r3, r2
 801bdf4:	fb02 3311 	mls	r3, r2, r1, r3
 801bdf8:	b903      	cbnz	r3, 801bdfc <mktime+0x60>
 801bdfa:	3601      	adds	r6, #1
 801bdfc:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 801be00:	3310      	adds	r3, #16
 801be02:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801be06:	4293      	cmp	r3, r2
 801be08:	61fe      	str	r6, [r7, #28]
 801be0a:	f200 8170 	bhi.w	801c0ee <mktime+0x352>
 801be0e:	2d46      	cmp	r5, #70	@ 0x46
 801be10:	f340 80b6 	ble.w	801bf80 <mktime+0x1e4>
 801be14:	2346      	movs	r3, #70	@ 0x46
 801be16:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801be1a:	2164      	movs	r1, #100	@ 0x64
 801be1c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801be20:	079a      	lsls	r2, r3, #30
 801be22:	f040 80a7 	bne.w	801bf74 <mktime+0x1d8>
 801be26:	fb93 f2f1 	sdiv	r2, r3, r1
 801be2a:	fb01 3212 	mls	r2, r1, r2, r3
 801be2e:	2a00      	cmp	r2, #0
 801be30:	f040 80a3 	bne.w	801bf7a <mktime+0x1de>
 801be34:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801be38:	fb92 fef0 	sdiv	lr, r2, r0
 801be3c:	fb00 221e 	mls	r2, r0, lr, r2
 801be40:	2a00      	cmp	r2, #0
 801be42:	bf0c      	ite	eq
 801be44:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801be48:	4662      	movne	r2, ip
 801be4a:	3301      	adds	r3, #1
 801be4c:	429d      	cmp	r5, r3
 801be4e:	4416      	add	r6, r2
 801be50:	d1e6      	bne.n	801be20 <mktime+0x84>
 801be52:	4ba2      	ldr	r3, [pc, #648]	@ (801c0dc <mktime+0x340>)
 801be54:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801be58:	fbc6 4803 	smlal	r4, r8, r6, r3
 801be5c:	f000 fa26 	bl	801c2ac <__tz_lock>
 801be60:	f000 fa30 	bl	801c2c4 <_tzset_unlocked>
 801be64:	4b9e      	ldr	r3, [pc, #632]	@ (801c0e0 <mktime+0x344>)
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	f000 8147 	beq.w	801c0fc <mktime+0x360>
 801be6e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 801be72:	6978      	ldr	r0, [r7, #20]
 801be74:	4653      	mov	r3, sl
 801be76:	2b01      	cmp	r3, #1
 801be78:	bfa8      	it	ge
 801be7a:	2301      	movge	r3, #1
 801be7c:	9301      	str	r3, [sp, #4]
 801be7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801be82:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801be86:	4283      	cmp	r3, r0
 801be88:	f040 80bd 	bne.w	801c006 <mktime+0x26a>
 801be8c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 801be90:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 801be94:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 801be98:	1a13      	subs	r3, r2, r0
 801be9a:	9303      	str	r3, [sp, #12]
 801be9c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 801bea0:	9302      	str	r3, [sp, #8]
 801bea2:	9a02      	ldr	r2, [sp, #8]
 801bea4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801bea8:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 801beac:	ebb2 0e03 	subs.w	lr, r2, r3
 801beb0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 801beb4:	4574      	cmp	r4, lr
 801beb6:	eb78 0201 	sbcs.w	r2, r8, r1
 801beba:	f280 80c7 	bge.w	801c04c <mktime+0x2b0>
 801bebe:	f8d9 2000 	ldr.w	r2, [r9]
 801bec2:	2a00      	cmp	r2, #0
 801bec4:	f000 80d0 	beq.w	801c068 <mktime+0x2cc>
 801bec8:	9a03      	ldr	r2, [sp, #12]
 801beca:	4294      	cmp	r4, r2
 801becc:	eb78 020b 	sbcs.w	r2, r8, fp
 801bed0:	f2c0 8111 	blt.w	801c0f6 <mktime+0x35a>
 801bed4:	4574      	cmp	r4, lr
 801bed6:	eb78 0101 	sbcs.w	r1, r8, r1
 801beda:	bfb4      	ite	lt
 801bedc:	f04f 0b01 	movlt.w	fp, #1
 801bee0:	f04f 0b00 	movge.w	fp, #0
 801bee4:	f1ba 0f00 	cmp.w	sl, #0
 801bee8:	f2c0 8094 	blt.w	801c014 <mktime+0x278>
 801beec:	9a01      	ldr	r2, [sp, #4]
 801beee:	ea82 0a0b 	eor.w	sl, r2, fp
 801bef2:	f1ba 0f01 	cmp.w	sl, #1
 801bef6:	f040 808d 	bne.w	801c014 <mktime+0x278>
 801befa:	f1bb 0f00 	cmp.w	fp, #0
 801befe:	f000 80c2 	beq.w	801c086 <mktime+0x2ea>
 801bf02:	1a1b      	subs	r3, r3, r0
 801bf04:	683a      	ldr	r2, [r7, #0]
 801bf06:	441a      	add	r2, r3
 801bf08:	191c      	adds	r4, r3, r4
 801bf0a:	603a      	str	r2, [r7, #0]
 801bf0c:	4638      	mov	r0, r7
 801bf0e:	68fa      	ldr	r2, [r7, #12]
 801bf10:	9201      	str	r2, [sp, #4]
 801bf12:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801bf16:	f7ff fe6d 	bl	801bbf4 <validate_structure>
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	9a01      	ldr	r2, [sp, #4]
 801bf1e:	1a9b      	subs	r3, r3, r2
 801bf20:	d078      	beq.n	801c014 <mktime+0x278>
 801bf22:	2b01      	cmp	r3, #1
 801bf24:	f300 80b1 	bgt.w	801c08a <mktime+0x2ee>
 801bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf2c:	bfa8      	it	ge
 801bf2e:	469a      	movge	sl, r3
 801bf30:	69fb      	ldr	r3, [r7, #28]
 801bf32:	eb1a 0303 	adds.w	r3, sl, r3
 801bf36:	4456      	add	r6, sl
 801bf38:	f140 80b0 	bpl.w	801c09c <mktime+0x300>
 801bf3c:	1e6b      	subs	r3, r5, #1
 801bf3e:	0799      	lsls	r1, r3, #30
 801bf40:	f040 80a6 	bne.w	801c090 <mktime+0x2f4>
 801bf44:	2264      	movs	r2, #100	@ 0x64
 801bf46:	fb93 f1f2 	sdiv	r1, r3, r2
 801bf4a:	fb02 3311 	mls	r3, r2, r1, r3
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	f040 80a1 	bne.w	801c096 <mktime+0x2fa>
 801bf54:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bf58:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 801bf5c:	fb95 f2f3 	sdiv	r2, r5, r3
 801bf60:	fb03 5512 	mls	r5, r3, r2, r5
 801bf64:	2d00      	cmp	r5, #0
 801bf66:	f240 136d 	movw	r3, #365	@ 0x16d
 801bf6a:	bf18      	it	ne
 801bf6c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 801bf70:	61fb      	str	r3, [r7, #28]
 801bf72:	e04f      	b.n	801c014 <mktime+0x278>
 801bf74:	f240 126d 	movw	r2, #365	@ 0x16d
 801bf78:	e767      	b.n	801be4a <mktime+0xae>
 801bf7a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801bf7e:	e764      	b.n	801be4a <mktime+0xae>
 801bf80:	f43f af67 	beq.w	801be52 <mktime+0xb6>
 801bf84:	2345      	movs	r3, #69	@ 0x45
 801bf86:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801bf8a:	2164      	movs	r1, #100	@ 0x64
 801bf8c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801bf90:	e012      	b.n	801bfb8 <mktime+0x21c>
 801bf92:	bb62      	cbnz	r2, 801bfee <mktime+0x252>
 801bf94:	fb93 f2f1 	sdiv	r2, r3, r1
 801bf98:	fb01 3212 	mls	r2, r1, r2, r3
 801bf9c:	bb52      	cbnz	r2, 801bff4 <mktime+0x258>
 801bf9e:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801bfa2:	fb92 fef0 	sdiv	lr, r2, r0
 801bfa6:	fb00 221e 	mls	r2, r0, lr, r2
 801bfaa:	2a00      	cmp	r2, #0
 801bfac:	bf0c      	ite	eq
 801bfae:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801bfb2:	4662      	movne	r2, ip
 801bfb4:	1ab6      	subs	r6, r6, r2
 801bfb6:	3b01      	subs	r3, #1
 801bfb8:	429d      	cmp	r5, r3
 801bfba:	f003 0203 	and.w	r2, r3, #3
 801bfbe:	dbe8      	blt.n	801bf92 <mktime+0x1f6>
 801bfc0:	b9da      	cbnz	r2, 801bffa <mktime+0x25e>
 801bfc2:	2264      	movs	r2, #100	@ 0x64
 801bfc4:	fb95 f3f2 	sdiv	r3, r5, r2
 801bfc8:	fb02 5313 	mls	r3, r2, r3, r5
 801bfcc:	b9c3      	cbnz	r3, 801c000 <mktime+0x264>
 801bfce:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 801bfd2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801bfd6:	fb93 f1f2 	sdiv	r1, r3, r2
 801bfda:	fb02 3311 	mls	r3, r2, r1, r3
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f240 136d 	movw	r3, #365	@ 0x16d
 801bfe4:	bf08      	it	eq
 801bfe6:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 801bfea:	1af6      	subs	r6, r6, r3
 801bfec:	e731      	b.n	801be52 <mktime+0xb6>
 801bfee:	f240 126d 	movw	r2, #365	@ 0x16d
 801bff2:	e7df      	b.n	801bfb4 <mktime+0x218>
 801bff4:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801bff8:	e7dc      	b.n	801bfb4 <mktime+0x218>
 801bffa:	f240 136d 	movw	r3, #365	@ 0x16d
 801bffe:	e7f4      	b.n	801bfea <mktime+0x24e>
 801c000:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 801c004:	e7f1      	b.n	801bfea <mktime+0x24e>
 801c006:	f000 f89d 	bl	801c144 <__tzcalc_limits>
 801c00a:	2800      	cmp	r0, #0
 801c00c:	f47f af3e 	bne.w	801be8c <mktime+0xf0>
 801c010:	f8dd b004 	ldr.w	fp, [sp, #4]
 801c014:	f1bb 0f01 	cmp.w	fp, #1
 801c018:	d172      	bne.n	801c100 <mktime+0x364>
 801c01a:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 801c01e:	191c      	adds	r4, r3, r4
 801c020:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801c024:	f04f 0b01 	mov.w	fp, #1
 801c028:	f000 f946 	bl	801c2b8 <__tz_unlock>
 801c02c:	3604      	adds	r6, #4
 801c02e:	2307      	movs	r3, #7
 801c030:	fb96 f3f3 	sdiv	r3, r6, r3
 801c034:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c038:	1af6      	subs	r6, r6, r3
 801c03a:	d456      	bmi.n	801c0ea <mktime+0x34e>
 801c03c:	f8c7 b020 	str.w	fp, [r7, #32]
 801c040:	61be      	str	r6, [r7, #24]
 801c042:	4620      	mov	r0, r4
 801c044:	4641      	mov	r1, r8
 801c046:	b005      	add	sp, #20
 801c048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c04c:	9a02      	ldr	r2, [sp, #8]
 801c04e:	1a12      	subs	r2, r2, r0
 801c050:	9202      	str	r2, [sp, #8]
 801c052:	ea4f 72e0 	mov.w	r2, r0, asr #31
 801c056:	eb6c 0c02 	sbc.w	ip, ip, r2
 801c05a:	9a02      	ldr	r2, [sp, #8]
 801c05c:	4294      	cmp	r4, r2
 801c05e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 801c062:	f6bf af2c 	bge.w	801bebe <mktime+0x122>
 801c066:	e7d3      	b.n	801c010 <mktime+0x274>
 801c068:	9a03      	ldr	r2, [sp, #12]
 801c06a:	4294      	cmp	r4, r2
 801c06c:	eb78 020b 	sbcs.w	r2, r8, fp
 801c070:	f6ff af30 	blt.w	801bed4 <mktime+0x138>
 801c074:	f1ba 0f00 	cmp.w	sl, #0
 801c078:	dbcf      	blt.n	801c01a <mktime+0x27e>
 801c07a:	f04f 0b01 	mov.w	fp, #1
 801c07e:	e735      	b.n	801beec <mktime+0x150>
 801c080:	f04f 0b00 	mov.w	fp, #0
 801c084:	e732      	b.n	801beec <mktime+0x150>
 801c086:	1ac3      	subs	r3, r0, r3
 801c088:	e73c      	b.n	801bf04 <mktime+0x168>
 801c08a:	f04f 3aff 	mov.w	sl, #4294967295
 801c08e:	e74f      	b.n	801bf30 <mktime+0x194>
 801c090:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 801c094:	e76c      	b.n	801bf70 <mktime+0x1d4>
 801c096:	f240 136d 	movw	r3, #365	@ 0x16d
 801c09a:	e769      	b.n	801bf70 <mktime+0x1d4>
 801c09c:	07aa      	lsls	r2, r5, #30
 801c09e:	d117      	bne.n	801c0d0 <mktime+0x334>
 801c0a0:	2164      	movs	r1, #100	@ 0x64
 801c0a2:	fb95 f2f1 	sdiv	r2, r5, r1
 801c0a6:	fb01 5212 	mls	r2, r1, r2, r5
 801c0aa:	b9da      	cbnz	r2, 801c0e4 <mktime+0x348>
 801c0ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801c0b0:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 801c0b4:	fb95 f1f2 	sdiv	r1, r5, r2
 801c0b8:	fb02 5511 	mls	r5, r2, r1, r5
 801c0bc:	2d00      	cmp	r5, #0
 801c0be:	f240 126d 	movw	r2, #365	@ 0x16d
 801c0c2:	bf08      	it	eq
 801c0c4:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801c0c8:	4293      	cmp	r3, r2
 801c0ca:	bfa8      	it	ge
 801c0cc:	1a9b      	subge	r3, r3, r2
 801c0ce:	e74f      	b.n	801bf70 <mktime+0x1d4>
 801c0d0:	f240 126d 	movw	r2, #365	@ 0x16d
 801c0d4:	e7f8      	b.n	801c0c8 <mktime+0x32c>
 801c0d6:	bf00      	nop
 801c0d8:	08024fbc 	.word	0x08024fbc
 801c0dc:	00015180 	.word	0x00015180
 801c0e0:	200065cc 	.word	0x200065cc
 801c0e4:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801c0e8:	e7ee      	b.n	801c0c8 <mktime+0x32c>
 801c0ea:	3607      	adds	r6, #7
 801c0ec:	e7a6      	b.n	801c03c <mktime+0x2a0>
 801c0ee:	f04f 34ff 	mov.w	r4, #4294967295
 801c0f2:	46a0      	mov	r8, r4
 801c0f4:	e7a5      	b.n	801c042 <mktime+0x2a6>
 801c0f6:	f1ba 0f00 	cmp.w	sl, #0
 801c0fa:	dac1      	bge.n	801c080 <mktime+0x2e4>
 801c0fc:	f04f 0b00 	mov.w	fp, #0
 801c100:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801c104:	191c      	adds	r4, r3, r4
 801c106:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801c10a:	e78d      	b.n	801c028 <mktime+0x28c>

0801c10c <time>:
 801c10c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 801c10e:	4b0c      	ldr	r3, [pc, #48]	@ (801c140 <time+0x34>)
 801c110:	f04f 36ff 	mov.w	r6, #4294967295
 801c114:	f04f 37ff 	mov.w	r7, #4294967295
 801c118:	4669      	mov	r1, sp
 801c11a:	4604      	mov	r4, r0
 801c11c:	2200      	movs	r2, #0
 801c11e:	6818      	ldr	r0, [r3, #0]
 801c120:	e9cd 6700 	strd	r6, r7, [sp]
 801c124:	f000 fb68 	bl	801c7f8 <_gettimeofday_r>
 801c128:	2800      	cmp	r0, #0
 801c12a:	bfb8      	it	lt
 801c12c:	e9cd 6700 	strdlt	r6, r7, [sp]
 801c130:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c134:	b10c      	cbz	r4, 801c13a <time+0x2e>
 801c136:	e9c4 0100 	strd	r0, r1, [r4]
 801c13a:	b004      	add	sp, #16
 801c13c:	bdd0      	pop	{r4, r6, r7, pc}
 801c13e:	bf00      	nop
 801c140:	20000458 	.word	0x20000458

0801c144 <__tzcalc_limits>:
 801c144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c148:	4604      	mov	r4, r0
 801c14a:	f003 f9a1 	bl	801f490 <__gettzinfo>
 801c14e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 801c152:	429c      	cmp	r4, r3
 801c154:	f340 80a3 	ble.w	801c29e <__tzcalc_limits+0x15a>
 801c158:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 801c15c:	1865      	adds	r5, r4, r1
 801c15e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 801c162:	f240 126d 	movw	r2, #365	@ 0x16d
 801c166:	10ad      	asrs	r5, r5, #2
 801c168:	fb02 5503 	mla	r5, r2, r3, r5
 801c16c:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 801c170:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 801c174:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 801c178:	fb93 f3f2 	sdiv	r3, r3, r2
 801c17c:	441d      	add	r5, r3
 801c17e:	19a3      	adds	r3, r4, r6
 801c180:	4e48      	ldr	r6, [pc, #288]	@ (801c2a4 <__tzcalc_limits+0x160>)
 801c182:	6044      	str	r4, [r0, #4]
 801c184:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801c188:	4601      	mov	r1, r0
 801c18a:	fbb3 f3f2 	udiv	r3, r3, r2
 801c18e:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 801c192:	441d      	add	r5, r3
 801c194:	7a0b      	ldrb	r3, [r1, #8]
 801c196:	f8d1 c014 	ldr.w	ip, [r1, #20]
 801c19a:	2b4a      	cmp	r3, #74	@ 0x4a
 801c19c:	d138      	bne.n	801c210 <__tzcalc_limits+0xcc>
 801c19e:	07a2      	lsls	r2, r4, #30
 801c1a0:	eb05 030c 	add.w	r3, r5, ip
 801c1a4:	d106      	bne.n	801c1b4 <__tzcalc_limits+0x70>
 801c1a6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 801c1aa:	fb94 f2fe 	sdiv	r2, r4, lr
 801c1ae:	fb0e 4212 	mls	r2, lr, r2, r4
 801c1b2:	b932      	cbnz	r2, 801c1c2 <__tzcalc_limits+0x7e>
 801c1b4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 801c1b8:	fb94 f2fe 	sdiv	r2, r4, lr
 801c1bc:	fb0e 4212 	mls	r2, lr, r2, r4
 801c1c0:	bb1a      	cbnz	r2, 801c20a <__tzcalc_limits+0xc6>
 801c1c2:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 801c1c6:	bfd4      	ite	le
 801c1c8:	f04f 0c00 	movle.w	ip, #0
 801c1cc:	f04f 0c01 	movgt.w	ip, #1
 801c1d0:	4463      	add	r3, ip
 801c1d2:	3b01      	subs	r3, #1
 801c1d4:	698a      	ldr	r2, [r1, #24]
 801c1d6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 801c1da:	fbc3 2c06 	smlal	r2, ip, r3, r6
 801c1de:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801c1e0:	18d2      	adds	r2, r2, r3
 801c1e2:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 801c1e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
 801c1ea:	3128      	adds	r1, #40	@ 0x28
 801c1ec:	428f      	cmp	r7, r1
 801c1ee:	d1d1      	bne.n	801c194 <__tzcalc_limits+0x50>
 801c1f0:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 801c1f4:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 801c1f8:	428c      	cmp	r4, r1
 801c1fa:	4193      	sbcs	r3, r2
 801c1fc:	bfb4      	ite	lt
 801c1fe:	2301      	movlt	r3, #1
 801c200:	2300      	movge	r3, #0
 801c202:	6003      	str	r3, [r0, #0]
 801c204:	2001      	movs	r0, #1
 801c206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c20a:	f04f 0c00 	mov.w	ip, #0
 801c20e:	e7df      	b.n	801c1d0 <__tzcalc_limits+0x8c>
 801c210:	2b44      	cmp	r3, #68	@ 0x44
 801c212:	d102      	bne.n	801c21a <__tzcalc_limits+0xd6>
 801c214:	eb05 030c 	add.w	r3, r5, ip
 801c218:	e7dc      	b.n	801c1d4 <__tzcalc_limits+0x90>
 801c21a:	07a3      	lsls	r3, r4, #30
 801c21c:	d105      	bne.n	801c22a <__tzcalc_limits+0xe6>
 801c21e:	2264      	movs	r2, #100	@ 0x64
 801c220:	fb94 f3f2 	sdiv	r3, r4, r2
 801c224:	fb02 4313 	mls	r3, r2, r3, r4
 801c228:	bb93      	cbnz	r3, 801c290 <__tzcalc_limits+0x14c>
 801c22a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801c22e:	fb94 f3f2 	sdiv	r3, r4, r2
 801c232:	fb02 4313 	mls	r3, r2, r3, r4
 801c236:	fab3 f383 	clz	r3, r3
 801c23a:	095b      	lsrs	r3, r3, #5
 801c23c:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801c2a8 <__tzcalc_limits+0x164>
 801c240:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801c244:	425b      	negs	r3, r3
 801c246:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801c24a:	462a      	mov	r2, r5
 801c24c:	f04f 0800 	mov.w	r8, #0
 801c250:	4473      	add	r3, lr
 801c252:	f108 0801 	add.w	r8, r8, #1
 801c256:	45c1      	cmp	r9, r8
 801c258:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 801c25c:	dc1a      	bgt.n	801c294 <__tzcalc_limits+0x150>
 801c25e:	f102 0804 	add.w	r8, r2, #4
 801c262:	2307      	movs	r3, #7
 801c264:	fb98 f3f3 	sdiv	r3, r8, r3
 801c268:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c26c:	eba8 0303 	sub.w	r3, r8, r3
 801c270:	ebbc 0c03 	subs.w	ip, ip, r3
 801c274:	690b      	ldr	r3, [r1, #16]
 801c276:	f103 33ff 	add.w	r3, r3, #4294967295
 801c27a:	bf48      	it	mi
 801c27c:	f10c 0c07 	addmi.w	ip, ip, #7
 801c280:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c284:	449c      	add	ip, r3
 801c286:	45f4      	cmp	ip, lr
 801c288:	da06      	bge.n	801c298 <__tzcalc_limits+0x154>
 801c28a:	eb02 030c 	add.w	r3, r2, ip
 801c28e:	e7a1      	b.n	801c1d4 <__tzcalc_limits+0x90>
 801c290:	2301      	movs	r3, #1
 801c292:	e7d3      	b.n	801c23c <__tzcalc_limits+0xf8>
 801c294:	4472      	add	r2, lr
 801c296:	e7dc      	b.n	801c252 <__tzcalc_limits+0x10e>
 801c298:	f1ac 0c07 	sub.w	ip, ip, #7
 801c29c:	e7f3      	b.n	801c286 <__tzcalc_limits+0x142>
 801c29e:	2000      	movs	r0, #0
 801c2a0:	e7b1      	b.n	801c206 <__tzcalc_limits+0xc2>
 801c2a2:	bf00      	nop
 801c2a4:	00015180 	.word	0x00015180
 801c2a8:	08025018 	.word	0x08025018

0801c2ac <__tz_lock>:
 801c2ac:	4801      	ldr	r0, [pc, #4]	@ (801c2b4 <__tz_lock+0x8>)
 801c2ae:	f000 bb26 	b.w	801c8fe <__retarget_lock_acquire>
 801c2b2:	bf00      	nop
 801c2b4:	200065d4 	.word	0x200065d4

0801c2b8 <__tz_unlock>:
 801c2b8:	4801      	ldr	r0, [pc, #4]	@ (801c2c0 <__tz_unlock+0x8>)
 801c2ba:	f000 bb22 	b.w	801c902 <__retarget_lock_release>
 801c2be:	bf00      	nop
 801c2c0:	200065d4 	.word	0x200065d4

0801c2c4 <_tzset_unlocked>:
 801c2c4:	4b01      	ldr	r3, [pc, #4]	@ (801c2cc <_tzset_unlocked+0x8>)
 801c2c6:	6818      	ldr	r0, [r3, #0]
 801c2c8:	f000 b802 	b.w	801c2d0 <_tzset_unlocked_r>
 801c2cc:	20000458 	.word	0x20000458

0801c2d0 <_tzset_unlocked_r>:
 801c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2d4:	b08d      	sub	sp, #52	@ 0x34
 801c2d6:	4607      	mov	r7, r0
 801c2d8:	f003 f8da 	bl	801f490 <__gettzinfo>
 801c2dc:	49bc      	ldr	r1, [pc, #752]	@ (801c5d0 <_tzset_unlocked_r+0x300>)
 801c2de:	4dbd      	ldr	r5, [pc, #756]	@ (801c5d4 <_tzset_unlocked_r+0x304>)
 801c2e0:	4604      	mov	r4, r0
 801c2e2:	4638      	mov	r0, r7
 801c2e4:	f001 fdc8 	bl	801de78 <_getenv_r>
 801c2e8:	4606      	mov	r6, r0
 801c2ea:	bb10      	cbnz	r0, 801c332 <_tzset_unlocked_r+0x62>
 801c2ec:	4bba      	ldr	r3, [pc, #744]	@ (801c5d8 <_tzset_unlocked_r+0x308>)
 801c2ee:	4abb      	ldr	r2, [pc, #748]	@ (801c5dc <_tzset_unlocked_r+0x30c>)
 801c2f0:	6018      	str	r0, [r3, #0]
 801c2f2:	4bbb      	ldr	r3, [pc, #748]	@ (801c5e0 <_tzset_unlocked_r+0x310>)
 801c2f4:	62a0      	str	r0, [r4, #40]	@ 0x28
 801c2f6:	6018      	str	r0, [r3, #0]
 801c2f8:	4bba      	ldr	r3, [pc, #744]	@ (801c5e4 <_tzset_unlocked_r+0x314>)
 801c2fa:	6520      	str	r0, [r4, #80]	@ 0x50
 801c2fc:	e9c3 2200 	strd	r2, r2, [r3]
 801c300:	214a      	movs	r1, #74	@ 0x4a
 801c302:	2200      	movs	r2, #0
 801c304:	2300      	movs	r3, #0
 801c306:	e9c4 0003 	strd	r0, r0, [r4, #12]
 801c30a:	e9c4 0005 	strd	r0, r0, [r4, #20]
 801c30e:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 801c312:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801c316:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c31a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801c31e:	6828      	ldr	r0, [r5, #0]
 801c320:	7221      	strb	r1, [r4, #8]
 801c322:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801c326:	f7fd fadd 	bl	80198e4 <free>
 801c32a:	602e      	str	r6, [r5, #0]
 801c32c:	b00d      	add	sp, #52	@ 0x34
 801c32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c332:	6829      	ldr	r1, [r5, #0]
 801c334:	2900      	cmp	r1, #0
 801c336:	f040 808e 	bne.w	801c456 <_tzset_unlocked_r+0x186>
 801c33a:	6828      	ldr	r0, [r5, #0]
 801c33c:	f7fd fad2 	bl	80198e4 <free>
 801c340:	4630      	mov	r0, r6
 801c342:	f7e3 ffa5 	bl	8000290 <strlen>
 801c346:	1c41      	adds	r1, r0, #1
 801c348:	4638      	mov	r0, r7
 801c34a:	f7fd faf5 	bl	8019938 <_malloc_r>
 801c34e:	6028      	str	r0, [r5, #0]
 801c350:	2800      	cmp	r0, #0
 801c352:	f040 8086 	bne.w	801c462 <_tzset_unlocked_r+0x192>
 801c356:	4aa2      	ldr	r2, [pc, #648]	@ (801c5e0 <_tzset_unlocked_r+0x310>)
 801c358:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 801c5e4 <_tzset_unlocked_r+0x314>
 801c35c:	f8df a278 	ldr.w	sl, [pc, #632]	@ 801c5d8 <_tzset_unlocked_r+0x308>
 801c360:	2300      	movs	r3, #0
 801c362:	6013      	str	r3, [r2, #0]
 801c364:	4aa0      	ldr	r2, [pc, #640]	@ (801c5e8 <_tzset_unlocked_r+0x318>)
 801c366:	f8ca 3000 	str.w	r3, [sl]
 801c36a:	2000      	movs	r0, #0
 801c36c:	2100      	movs	r1, #0
 801c36e:	e9c8 2200 	strd	r2, r2, [r8]
 801c372:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801c376:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801c37a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801c37e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 801c382:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 801c386:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 801c38a:	224a      	movs	r2, #74	@ 0x4a
 801c38c:	7222      	strb	r2, [r4, #8]
 801c38e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c390:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 801c394:	6523      	str	r3, [r4, #80]	@ 0x50
 801c396:	7833      	ldrb	r3, [r6, #0]
 801c398:	2b3a      	cmp	r3, #58	@ 0x3a
 801c39a:	bf08      	it	eq
 801c39c:	3601      	addeq	r6, #1
 801c39e:	7833      	ldrb	r3, [r6, #0]
 801c3a0:	2b3c      	cmp	r3, #60	@ 0x3c
 801c3a2:	d162      	bne.n	801c46a <_tzset_unlocked_r+0x19a>
 801c3a4:	1c75      	adds	r5, r6, #1
 801c3a6:	4a91      	ldr	r2, [pc, #580]	@ (801c5ec <_tzset_unlocked_r+0x31c>)
 801c3a8:	4991      	ldr	r1, [pc, #580]	@ (801c5f0 <_tzset_unlocked_r+0x320>)
 801c3aa:	ab0a      	add	r3, sp, #40	@ 0x28
 801c3ac:	4628      	mov	r0, r5
 801c3ae:	f7ff f969 	bl	801b684 <siscanf>
 801c3b2:	2800      	cmp	r0, #0
 801c3b4:	ddba      	ble.n	801c32c <_tzset_unlocked_r+0x5c>
 801c3b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c3b8:	1eda      	subs	r2, r3, #3
 801c3ba:	2a07      	cmp	r2, #7
 801c3bc:	d8b6      	bhi.n	801c32c <_tzset_unlocked_r+0x5c>
 801c3be:	5ceb      	ldrb	r3, [r5, r3]
 801c3c0:	2b3e      	cmp	r3, #62	@ 0x3e
 801c3c2:	d1b3      	bne.n	801c32c <_tzset_unlocked_r+0x5c>
 801c3c4:	3602      	adds	r6, #2
 801c3c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c3c8:	18f5      	adds	r5, r6, r3
 801c3ca:	5cf3      	ldrb	r3, [r6, r3]
 801c3cc:	2b2d      	cmp	r3, #45	@ 0x2d
 801c3ce:	d15a      	bne.n	801c486 <_tzset_unlocked_r+0x1b6>
 801c3d0:	3501      	adds	r5, #1
 801c3d2:	f04f 39ff 	mov.w	r9, #4294967295
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c3dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c3e0:	af08      	add	r7, sp, #32
 801c3e2:	ab0a      	add	r3, sp, #40	@ 0x28
 801c3e4:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801c3e8:	9303      	str	r3, [sp, #12]
 801c3ea:	f10d 031e 	add.w	r3, sp, #30
 801c3ee:	9300      	str	r3, [sp, #0]
 801c3f0:	4980      	ldr	r1, [pc, #512]	@ (801c5f4 <_tzset_unlocked_r+0x324>)
 801c3f2:	ab0a      	add	r3, sp, #40	@ 0x28
 801c3f4:	aa07      	add	r2, sp, #28
 801c3f6:	4628      	mov	r0, r5
 801c3f8:	f7ff f944 	bl	801b684 <siscanf>
 801c3fc:	2800      	cmp	r0, #0
 801c3fe:	dd95      	ble.n	801c32c <_tzset_unlocked_r+0x5c>
 801c400:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801c404:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801c408:	223c      	movs	r2, #60	@ 0x3c
 801c40a:	fb02 6603 	mla	r6, r2, r3, r6
 801c40e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801c412:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801c416:	fb02 6603 	mla	r6, r2, r3, r6
 801c41a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c41c:	fb09 f606 	mul.w	r6, r9, r6
 801c420:	eb05 0903 	add.w	r9, r5, r3
 801c424:	5ceb      	ldrb	r3, [r5, r3]
 801c426:	2b3c      	cmp	r3, #60	@ 0x3c
 801c428:	f040 80ee 	bne.w	801c608 <_tzset_unlocked_r+0x338>
 801c42c:	f109 0501 	add.w	r5, r9, #1
 801c430:	4a71      	ldr	r2, [pc, #452]	@ (801c5f8 <_tzset_unlocked_r+0x328>)
 801c432:	496f      	ldr	r1, [pc, #444]	@ (801c5f0 <_tzset_unlocked_r+0x320>)
 801c434:	ab0a      	add	r3, sp, #40	@ 0x28
 801c436:	4628      	mov	r0, r5
 801c438:	f7ff f924 	bl	801b684 <siscanf>
 801c43c:	2800      	cmp	r0, #0
 801c43e:	dc28      	bgt.n	801c492 <_tzset_unlocked_r+0x1c2>
 801c440:	f899 3001 	ldrb.w	r3, [r9, #1]
 801c444:	2b3e      	cmp	r3, #62	@ 0x3e
 801c446:	d124      	bne.n	801c492 <_tzset_unlocked_r+0x1c2>
 801c448:	4b68      	ldr	r3, [pc, #416]	@ (801c5ec <_tzset_unlocked_r+0x31c>)
 801c44a:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c44c:	e9c8 3300 	strd	r3, r3, [r8]
 801c450:	f8ca 6000 	str.w	r6, [sl]
 801c454:	e76a      	b.n	801c32c <_tzset_unlocked_r+0x5c>
 801c456:	f7e3 febb 	bl	80001d0 <strcmp>
 801c45a:	2800      	cmp	r0, #0
 801c45c:	f47f af6d 	bne.w	801c33a <_tzset_unlocked_r+0x6a>
 801c460:	e764      	b.n	801c32c <_tzset_unlocked_r+0x5c>
 801c462:	4631      	mov	r1, r6
 801c464:	f000 fa4f 	bl	801c906 <strcpy>
 801c468:	e775      	b.n	801c356 <_tzset_unlocked_r+0x86>
 801c46a:	4a60      	ldr	r2, [pc, #384]	@ (801c5ec <_tzset_unlocked_r+0x31c>)
 801c46c:	4963      	ldr	r1, [pc, #396]	@ (801c5fc <_tzset_unlocked_r+0x32c>)
 801c46e:	ab0a      	add	r3, sp, #40	@ 0x28
 801c470:	4630      	mov	r0, r6
 801c472:	f7ff f907 	bl	801b684 <siscanf>
 801c476:	2800      	cmp	r0, #0
 801c478:	f77f af58 	ble.w	801c32c <_tzset_unlocked_r+0x5c>
 801c47c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c47e:	3b03      	subs	r3, #3
 801c480:	2b07      	cmp	r3, #7
 801c482:	d9a0      	bls.n	801c3c6 <_tzset_unlocked_r+0xf6>
 801c484:	e752      	b.n	801c32c <_tzset_unlocked_r+0x5c>
 801c486:	2b2b      	cmp	r3, #43	@ 0x2b
 801c488:	bf08      	it	eq
 801c48a:	3501      	addeq	r5, #1
 801c48c:	f04f 0901 	mov.w	r9, #1
 801c490:	e7a1      	b.n	801c3d6 <_tzset_unlocked_r+0x106>
 801c492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c494:	1eda      	subs	r2, r3, #3
 801c496:	2a07      	cmp	r2, #7
 801c498:	f63f af48 	bhi.w	801c32c <_tzset_unlocked_r+0x5c>
 801c49c:	5ceb      	ldrb	r3, [r5, r3]
 801c49e:	2b3e      	cmp	r3, #62	@ 0x3e
 801c4a0:	f47f af44 	bne.w	801c32c <_tzset_unlocked_r+0x5c>
 801c4a4:	f109 0902 	add.w	r9, r9, #2
 801c4a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4aa:	eb09 0503 	add.w	r5, r9, r3
 801c4ae:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c4b2:	2b2d      	cmp	r3, #45	@ 0x2d
 801c4b4:	f040 80b7 	bne.w	801c626 <_tzset_unlocked_r+0x356>
 801c4b8:	3501      	adds	r5, #1
 801c4ba:	f04f 39ff 	mov.w	r9, #4294967295
 801c4be:	2300      	movs	r3, #0
 801c4c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c4c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c4c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c4cc:	930a      	str	r3, [sp, #40]	@ 0x28
 801c4ce:	ab0a      	add	r3, sp, #40	@ 0x28
 801c4d0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801c4d4:	9301      	str	r3, [sp, #4]
 801c4d6:	f10d 031e 	add.w	r3, sp, #30
 801c4da:	9300      	str	r3, [sp, #0]
 801c4dc:	4945      	ldr	r1, [pc, #276]	@ (801c5f4 <_tzset_unlocked_r+0x324>)
 801c4de:	ab0a      	add	r3, sp, #40	@ 0x28
 801c4e0:	aa07      	add	r2, sp, #28
 801c4e2:	4628      	mov	r0, r5
 801c4e4:	f7ff f8ce 	bl	801b684 <siscanf>
 801c4e8:	2800      	cmp	r0, #0
 801c4ea:	f300 80a2 	bgt.w	801c632 <_tzset_unlocked_r+0x362>
 801c4ee:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 801c4f2:	9304      	str	r3, [sp, #16]
 801c4f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4f6:	4627      	mov	r7, r4
 801c4f8:	441d      	add	r5, r3
 801c4fa:	f04f 0b00 	mov.w	fp, #0
 801c4fe:	782b      	ldrb	r3, [r5, #0]
 801c500:	2b2c      	cmp	r3, #44	@ 0x2c
 801c502:	bf08      	it	eq
 801c504:	3501      	addeq	r5, #1
 801c506:	f895 9000 	ldrb.w	r9, [r5]
 801c50a:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 801c50e:	f040 80a3 	bne.w	801c658 <_tzset_unlocked_r+0x388>
 801c512:	ab0a      	add	r3, sp, #40	@ 0x28
 801c514:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 801c518:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c51c:	aa09      	add	r2, sp, #36	@ 0x24
 801c51e:	9200      	str	r2, [sp, #0]
 801c520:	4937      	ldr	r1, [pc, #220]	@ (801c600 <_tzset_unlocked_r+0x330>)
 801c522:	9303      	str	r3, [sp, #12]
 801c524:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 801c528:	4628      	mov	r0, r5
 801c52a:	f7ff f8ab 	bl	801b684 <siscanf>
 801c52e:	2803      	cmp	r0, #3
 801c530:	f47f aefc 	bne.w	801c32c <_tzset_unlocked_r+0x5c>
 801c534:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801c538:	1e4b      	subs	r3, r1, #1
 801c53a:	2b0b      	cmp	r3, #11
 801c53c:	f63f aef6 	bhi.w	801c32c <_tzset_unlocked_r+0x5c>
 801c540:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801c544:	1e53      	subs	r3, r2, #1
 801c546:	2b04      	cmp	r3, #4
 801c548:	f63f aef0 	bhi.w	801c32c <_tzset_unlocked_r+0x5c>
 801c54c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801c550:	2b06      	cmp	r3, #6
 801c552:	f63f aeeb 	bhi.w	801c32c <_tzset_unlocked_r+0x5c>
 801c556:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801c55a:	f887 9008 	strb.w	r9, [r7, #8]
 801c55e:	617b      	str	r3, [r7, #20]
 801c560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c562:	eb05 0903 	add.w	r9, r5, r3
 801c566:	2500      	movs	r5, #0
 801c568:	f04f 0302 	mov.w	r3, #2
 801c56c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c570:	f8ad 501e 	strh.w	r5, [sp, #30]
 801c574:	f8ad 5020 	strh.w	r5, [sp, #32]
 801c578:	950a      	str	r5, [sp, #40]	@ 0x28
 801c57a:	f899 3000 	ldrb.w	r3, [r9]
 801c57e:	2b2f      	cmp	r3, #47	@ 0x2f
 801c580:	f040 8096 	bne.w	801c6b0 <_tzset_unlocked_r+0x3e0>
 801c584:	ab0a      	add	r3, sp, #40	@ 0x28
 801c586:	aa08      	add	r2, sp, #32
 801c588:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c58c:	f10d 021e 	add.w	r2, sp, #30
 801c590:	9200      	str	r2, [sp, #0]
 801c592:	491c      	ldr	r1, [pc, #112]	@ (801c604 <_tzset_unlocked_r+0x334>)
 801c594:	9303      	str	r3, [sp, #12]
 801c596:	aa07      	add	r2, sp, #28
 801c598:	4648      	mov	r0, r9
 801c59a:	f7ff f873 	bl	801b684 <siscanf>
 801c59e:	42a8      	cmp	r0, r5
 801c5a0:	f300 8086 	bgt.w	801c6b0 <_tzset_unlocked_r+0x3e0>
 801c5a4:	214a      	movs	r1, #74	@ 0x4a
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	2300      	movs	r3, #0
 801c5aa:	e9c4 5503 	strd	r5, r5, [r4, #12]
 801c5ae:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c5b2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c5b6:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 801c5ba:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 801c5be:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801c5c2:	7221      	strb	r1, [r4, #8]
 801c5c4:	62a5      	str	r5, [r4, #40]	@ 0x28
 801c5c6:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801c5ca:	6525      	str	r5, [r4, #80]	@ 0x50
 801c5cc:	e6ae      	b.n	801c32c <_tzset_unlocked_r+0x5c>
 801c5ce:	bf00      	nop
 801c5d0:	08024c7a 	.word	0x08024c7a
 801c5d4:	200065ac 	.word	0x200065ac
 801c5d8:	200065c8 	.word	0x200065c8
 801c5dc:	08024c7d 	.word	0x08024c7d
 801c5e0:	200065cc 	.word	0x200065cc
 801c5e4:	200002e4 	.word	0x200002e4
 801c5e8:	08024d0b 	.word	0x08024d0b
 801c5ec:	200065bc 	.word	0x200065bc
 801c5f0:	08024c81 	.word	0x08024c81
 801c5f4:	08024cb6 	.word	0x08024cb6
 801c5f8:	200065b0 	.word	0x200065b0
 801c5fc:	08024c94 	.word	0x08024c94
 801c600:	08024ca2 	.word	0x08024ca2
 801c604:	08024cb5 	.word	0x08024cb5
 801c608:	4a3e      	ldr	r2, [pc, #248]	@ (801c704 <_tzset_unlocked_r+0x434>)
 801c60a:	493f      	ldr	r1, [pc, #252]	@ (801c708 <_tzset_unlocked_r+0x438>)
 801c60c:	ab0a      	add	r3, sp, #40	@ 0x28
 801c60e:	4648      	mov	r0, r9
 801c610:	f7ff f838 	bl	801b684 <siscanf>
 801c614:	2800      	cmp	r0, #0
 801c616:	f77f af17 	ble.w	801c448 <_tzset_unlocked_r+0x178>
 801c61a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c61c:	3b03      	subs	r3, #3
 801c61e:	2b07      	cmp	r3, #7
 801c620:	f67f af42 	bls.w	801c4a8 <_tzset_unlocked_r+0x1d8>
 801c624:	e682      	b.n	801c32c <_tzset_unlocked_r+0x5c>
 801c626:	2b2b      	cmp	r3, #43	@ 0x2b
 801c628:	bf08      	it	eq
 801c62a:	3501      	addeq	r5, #1
 801c62c:	f04f 0901 	mov.w	r9, #1
 801c630:	e745      	b.n	801c4be <_tzset_unlocked_r+0x1ee>
 801c632:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c636:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c63a:	213c      	movs	r1, #60	@ 0x3c
 801c63c:	fb01 3302 	mla	r3, r1, r2, r3
 801c640:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801c644:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801c648:	fb01 3302 	mla	r3, r1, r2, r3
 801c64c:	fb09 f303 	mul.w	r3, r9, r3
 801c650:	e74f      	b.n	801c4f2 <_tzset_unlocked_r+0x222>
 801c652:	f04f 0b01 	mov.w	fp, #1
 801c656:	e752      	b.n	801c4fe <_tzset_unlocked_r+0x22e>
 801c658:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 801c65c:	bf06      	itte	eq
 801c65e:	3501      	addeq	r5, #1
 801c660:	464b      	moveq	r3, r9
 801c662:	2344      	movne	r3, #68	@ 0x44
 801c664:	220a      	movs	r2, #10
 801c666:	a90b      	add	r1, sp, #44	@ 0x2c
 801c668:	4628      	mov	r0, r5
 801c66a:	9305      	str	r3, [sp, #20]
 801c66c:	f002 f938 	bl	801e8e0 <strtoul>
 801c670:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 801c674:	9b05      	ldr	r3, [sp, #20]
 801c676:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 801c67a:	45a9      	cmp	r9, r5
 801c67c:	d114      	bne.n	801c6a8 <_tzset_unlocked_r+0x3d8>
 801c67e:	234d      	movs	r3, #77	@ 0x4d
 801c680:	f1bb 0f00 	cmp.w	fp, #0
 801c684:	d107      	bne.n	801c696 <_tzset_unlocked_r+0x3c6>
 801c686:	7223      	strb	r3, [r4, #8]
 801c688:	2103      	movs	r1, #3
 801c68a:	2302      	movs	r3, #2
 801c68c:	e9c4 1303 	strd	r1, r3, [r4, #12]
 801c690:	f8c4 b014 	str.w	fp, [r4, #20]
 801c694:	e767      	b.n	801c566 <_tzset_unlocked_r+0x296>
 801c696:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 801c69a:	220b      	movs	r2, #11
 801c69c:	2301      	movs	r3, #1
 801c69e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 801c6a2:	2300      	movs	r3, #0
 801c6a4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801c6a6:	e75e      	b.n	801c566 <_tzset_unlocked_r+0x296>
 801c6a8:	b280      	uxth	r0, r0
 801c6aa:	723b      	strb	r3, [r7, #8]
 801c6ac:	6178      	str	r0, [r7, #20]
 801c6ae:	e75a      	b.n	801c566 <_tzset_unlocked_r+0x296>
 801c6b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c6b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c6b8:	213c      	movs	r1, #60	@ 0x3c
 801c6ba:	fb01 3302 	mla	r3, r1, r2, r3
 801c6be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801c6c2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801c6c6:	fb01 3302 	mla	r3, r1, r2, r3
 801c6ca:	61bb      	str	r3, [r7, #24]
 801c6cc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c6ce:	3728      	adds	r7, #40	@ 0x28
 801c6d0:	444d      	add	r5, r9
 801c6d2:	f1bb 0f00 	cmp.w	fp, #0
 801c6d6:	d0bc      	beq.n	801c652 <_tzset_unlocked_r+0x382>
 801c6d8:	9b04      	ldr	r3, [sp, #16]
 801c6da:	6523      	str	r3, [r4, #80]	@ 0x50
 801c6dc:	4b0b      	ldr	r3, [pc, #44]	@ (801c70c <_tzset_unlocked_r+0x43c>)
 801c6de:	f8c8 3000 	str.w	r3, [r8]
 801c6e2:	6860      	ldr	r0, [r4, #4]
 801c6e4:	4b07      	ldr	r3, [pc, #28]	@ (801c704 <_tzset_unlocked_r+0x434>)
 801c6e6:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c6e8:	f8c8 3004 	str.w	r3, [r8, #4]
 801c6ec:	f7ff fd2a 	bl	801c144 <__tzcalc_limits>
 801c6f0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801c6f2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801c6f4:	f8ca 2000 	str.w	r2, [sl]
 801c6f8:	1a9b      	subs	r3, r3, r2
 801c6fa:	4a05      	ldr	r2, [pc, #20]	@ (801c710 <_tzset_unlocked_r+0x440>)
 801c6fc:	bf18      	it	ne
 801c6fe:	2301      	movne	r3, #1
 801c700:	6013      	str	r3, [r2, #0]
 801c702:	e613      	b.n	801c32c <_tzset_unlocked_r+0x5c>
 801c704:	200065b0 	.word	0x200065b0
 801c708:	08024c94 	.word	0x08024c94
 801c70c:	200065bc 	.word	0x200065bc
 801c710:	200065cc 	.word	0x200065cc

0801c714 <_localeconv_r>:
 801c714:	4800      	ldr	r0, [pc, #0]	@ (801c718 <_localeconv_r+0x4>)
 801c716:	4770      	bx	lr
 801c718:	200003dc 	.word	0x200003dc

0801c71c <_close_r>:
 801c71c:	b538      	push	{r3, r4, r5, lr}
 801c71e:	4d06      	ldr	r5, [pc, #24]	@ (801c738 <_close_r+0x1c>)
 801c720:	2300      	movs	r3, #0
 801c722:	4604      	mov	r4, r0
 801c724:	4608      	mov	r0, r1
 801c726:	602b      	str	r3, [r5, #0]
 801c728:	f7e7 fee0 	bl	80044ec <_close>
 801c72c:	1c43      	adds	r3, r0, #1
 801c72e:	d102      	bne.n	801c736 <_close_r+0x1a>
 801c730:	682b      	ldr	r3, [r5, #0]
 801c732:	b103      	cbz	r3, 801c736 <_close_r+0x1a>
 801c734:	6023      	str	r3, [r4, #0]
 801c736:	bd38      	pop	{r3, r4, r5, pc}
 801c738:	200065d0 	.word	0x200065d0

0801c73c <_reclaim_reent>:
 801c73c:	4b2d      	ldr	r3, [pc, #180]	@ (801c7f4 <_reclaim_reent+0xb8>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	4283      	cmp	r3, r0
 801c742:	b570      	push	{r4, r5, r6, lr}
 801c744:	4604      	mov	r4, r0
 801c746:	d053      	beq.n	801c7f0 <_reclaim_reent+0xb4>
 801c748:	69c3      	ldr	r3, [r0, #28]
 801c74a:	b31b      	cbz	r3, 801c794 <_reclaim_reent+0x58>
 801c74c:	68db      	ldr	r3, [r3, #12]
 801c74e:	b163      	cbz	r3, 801c76a <_reclaim_reent+0x2e>
 801c750:	2500      	movs	r5, #0
 801c752:	69e3      	ldr	r3, [r4, #28]
 801c754:	68db      	ldr	r3, [r3, #12]
 801c756:	5959      	ldr	r1, [r3, r5]
 801c758:	b9b1      	cbnz	r1, 801c788 <_reclaim_reent+0x4c>
 801c75a:	3504      	adds	r5, #4
 801c75c:	2d80      	cmp	r5, #128	@ 0x80
 801c75e:	d1f8      	bne.n	801c752 <_reclaim_reent+0x16>
 801c760:	69e3      	ldr	r3, [r4, #28]
 801c762:	4620      	mov	r0, r4
 801c764:	68d9      	ldr	r1, [r3, #12]
 801c766:	f000 ffc7 	bl	801d6f8 <_free_r>
 801c76a:	69e3      	ldr	r3, [r4, #28]
 801c76c:	6819      	ldr	r1, [r3, #0]
 801c76e:	b111      	cbz	r1, 801c776 <_reclaim_reent+0x3a>
 801c770:	4620      	mov	r0, r4
 801c772:	f000 ffc1 	bl	801d6f8 <_free_r>
 801c776:	69e3      	ldr	r3, [r4, #28]
 801c778:	689d      	ldr	r5, [r3, #8]
 801c77a:	b15d      	cbz	r5, 801c794 <_reclaim_reent+0x58>
 801c77c:	4629      	mov	r1, r5
 801c77e:	4620      	mov	r0, r4
 801c780:	682d      	ldr	r5, [r5, #0]
 801c782:	f000 ffb9 	bl	801d6f8 <_free_r>
 801c786:	e7f8      	b.n	801c77a <_reclaim_reent+0x3e>
 801c788:	680e      	ldr	r6, [r1, #0]
 801c78a:	4620      	mov	r0, r4
 801c78c:	f000 ffb4 	bl	801d6f8 <_free_r>
 801c790:	4631      	mov	r1, r6
 801c792:	e7e1      	b.n	801c758 <_reclaim_reent+0x1c>
 801c794:	6961      	ldr	r1, [r4, #20]
 801c796:	b111      	cbz	r1, 801c79e <_reclaim_reent+0x62>
 801c798:	4620      	mov	r0, r4
 801c79a:	f000 ffad 	bl	801d6f8 <_free_r>
 801c79e:	69e1      	ldr	r1, [r4, #28]
 801c7a0:	b111      	cbz	r1, 801c7a8 <_reclaim_reent+0x6c>
 801c7a2:	4620      	mov	r0, r4
 801c7a4:	f000 ffa8 	bl	801d6f8 <_free_r>
 801c7a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c7aa:	b111      	cbz	r1, 801c7b2 <_reclaim_reent+0x76>
 801c7ac:	4620      	mov	r0, r4
 801c7ae:	f000 ffa3 	bl	801d6f8 <_free_r>
 801c7b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c7b4:	b111      	cbz	r1, 801c7bc <_reclaim_reent+0x80>
 801c7b6:	4620      	mov	r0, r4
 801c7b8:	f000 ff9e 	bl	801d6f8 <_free_r>
 801c7bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c7be:	b111      	cbz	r1, 801c7c6 <_reclaim_reent+0x8a>
 801c7c0:	4620      	mov	r0, r4
 801c7c2:	f000 ff99 	bl	801d6f8 <_free_r>
 801c7c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c7c8:	b111      	cbz	r1, 801c7d0 <_reclaim_reent+0x94>
 801c7ca:	4620      	mov	r0, r4
 801c7cc:	f000 ff94 	bl	801d6f8 <_free_r>
 801c7d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c7d2:	b111      	cbz	r1, 801c7da <_reclaim_reent+0x9e>
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	f000 ff8f 	bl	801d6f8 <_free_r>
 801c7da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c7dc:	b111      	cbz	r1, 801c7e4 <_reclaim_reent+0xa8>
 801c7de:	4620      	mov	r0, r4
 801c7e0:	f000 ff8a 	bl	801d6f8 <_free_r>
 801c7e4:	6a23      	ldr	r3, [r4, #32]
 801c7e6:	b11b      	cbz	r3, 801c7f0 <_reclaim_reent+0xb4>
 801c7e8:	4620      	mov	r0, r4
 801c7ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7ee:	4718      	bx	r3
 801c7f0:	bd70      	pop	{r4, r5, r6, pc}
 801c7f2:	bf00      	nop
 801c7f4:	20000458 	.word	0x20000458

0801c7f8 <_gettimeofday_r>:
 801c7f8:	b538      	push	{r3, r4, r5, lr}
 801c7fa:	4d07      	ldr	r5, [pc, #28]	@ (801c818 <_gettimeofday_r+0x20>)
 801c7fc:	2300      	movs	r3, #0
 801c7fe:	4604      	mov	r4, r0
 801c800:	4608      	mov	r0, r1
 801c802:	4611      	mov	r1, r2
 801c804:	602b      	str	r3, [r5, #0]
 801c806:	f7e5 f937 	bl	8001a78 <_gettimeofday>
 801c80a:	1c43      	adds	r3, r0, #1
 801c80c:	d102      	bne.n	801c814 <_gettimeofday_r+0x1c>
 801c80e:	682b      	ldr	r3, [r5, #0]
 801c810:	b103      	cbz	r3, 801c814 <_gettimeofday_r+0x1c>
 801c812:	6023      	str	r3, [r4, #0]
 801c814:	bd38      	pop	{r3, r4, r5, pc}
 801c816:	bf00      	nop
 801c818:	200065d0 	.word	0x200065d0

0801c81c <_lseek_r>:
 801c81c:	b538      	push	{r3, r4, r5, lr}
 801c81e:	4d07      	ldr	r5, [pc, #28]	@ (801c83c <_lseek_r+0x20>)
 801c820:	4604      	mov	r4, r0
 801c822:	4608      	mov	r0, r1
 801c824:	4611      	mov	r1, r2
 801c826:	2200      	movs	r2, #0
 801c828:	602a      	str	r2, [r5, #0]
 801c82a:	461a      	mov	r2, r3
 801c82c:	f7e7 fe85 	bl	800453a <_lseek>
 801c830:	1c43      	adds	r3, r0, #1
 801c832:	d102      	bne.n	801c83a <_lseek_r+0x1e>
 801c834:	682b      	ldr	r3, [r5, #0]
 801c836:	b103      	cbz	r3, 801c83a <_lseek_r+0x1e>
 801c838:	6023      	str	r3, [r4, #0]
 801c83a:	bd38      	pop	{r3, r4, r5, pc}
 801c83c:	200065d0 	.word	0x200065d0

0801c840 <_read_r>:
 801c840:	b538      	push	{r3, r4, r5, lr}
 801c842:	4d07      	ldr	r5, [pc, #28]	@ (801c860 <_read_r+0x20>)
 801c844:	4604      	mov	r4, r0
 801c846:	4608      	mov	r0, r1
 801c848:	4611      	mov	r1, r2
 801c84a:	2200      	movs	r2, #0
 801c84c:	602a      	str	r2, [r5, #0]
 801c84e:	461a      	mov	r2, r3
 801c850:	f7e7 fe13 	bl	800447a <_read>
 801c854:	1c43      	adds	r3, r0, #1
 801c856:	d102      	bne.n	801c85e <_read_r+0x1e>
 801c858:	682b      	ldr	r3, [r5, #0]
 801c85a:	b103      	cbz	r3, 801c85e <_read_r+0x1e>
 801c85c:	6023      	str	r3, [r4, #0]
 801c85e:	bd38      	pop	{r3, r4, r5, pc}
 801c860:	200065d0 	.word	0x200065d0

0801c864 <_sbrk_r>:
 801c864:	b538      	push	{r3, r4, r5, lr}
 801c866:	4d06      	ldr	r5, [pc, #24]	@ (801c880 <_sbrk_r+0x1c>)
 801c868:	2300      	movs	r3, #0
 801c86a:	4604      	mov	r4, r0
 801c86c:	4608      	mov	r0, r1
 801c86e:	602b      	str	r3, [r5, #0]
 801c870:	f7e7 fe70 	bl	8004554 <_sbrk>
 801c874:	1c43      	adds	r3, r0, #1
 801c876:	d102      	bne.n	801c87e <_sbrk_r+0x1a>
 801c878:	682b      	ldr	r3, [r5, #0]
 801c87a:	b103      	cbz	r3, 801c87e <_sbrk_r+0x1a>
 801c87c:	6023      	str	r3, [r4, #0]
 801c87e:	bd38      	pop	{r3, r4, r5, pc}
 801c880:	200065d0 	.word	0x200065d0

0801c884 <_write_r>:
 801c884:	b538      	push	{r3, r4, r5, lr}
 801c886:	4d07      	ldr	r5, [pc, #28]	@ (801c8a4 <_write_r+0x20>)
 801c888:	4604      	mov	r4, r0
 801c88a:	4608      	mov	r0, r1
 801c88c:	4611      	mov	r1, r2
 801c88e:	2200      	movs	r2, #0
 801c890:	602a      	str	r2, [r5, #0]
 801c892:	461a      	mov	r2, r3
 801c894:	f7e7 fe0e 	bl	80044b4 <_write>
 801c898:	1c43      	adds	r3, r0, #1
 801c89a:	d102      	bne.n	801c8a2 <_write_r+0x1e>
 801c89c:	682b      	ldr	r3, [r5, #0]
 801c89e:	b103      	cbz	r3, 801c8a2 <_write_r+0x1e>
 801c8a0:	6023      	str	r3, [r4, #0]
 801c8a2:	bd38      	pop	{r3, r4, r5, pc}
 801c8a4:	200065d0 	.word	0x200065d0

0801c8a8 <__errno>:
 801c8a8:	4b01      	ldr	r3, [pc, #4]	@ (801c8b0 <__errno+0x8>)
 801c8aa:	6818      	ldr	r0, [r3, #0]
 801c8ac:	4770      	bx	lr
 801c8ae:	bf00      	nop
 801c8b0:	20000458 	.word	0x20000458

0801c8b4 <__libc_init_array>:
 801c8b4:	b570      	push	{r4, r5, r6, lr}
 801c8b6:	4d0d      	ldr	r5, [pc, #52]	@ (801c8ec <__libc_init_array+0x38>)
 801c8b8:	4c0d      	ldr	r4, [pc, #52]	@ (801c8f0 <__libc_init_array+0x3c>)
 801c8ba:	1b64      	subs	r4, r4, r5
 801c8bc:	10a4      	asrs	r4, r4, #2
 801c8be:	2600      	movs	r6, #0
 801c8c0:	42a6      	cmp	r6, r4
 801c8c2:	d109      	bne.n	801c8d8 <__libc_init_array+0x24>
 801c8c4:	4d0b      	ldr	r5, [pc, #44]	@ (801c8f4 <__libc_init_array+0x40>)
 801c8c6:	4c0c      	ldr	r4, [pc, #48]	@ (801c8f8 <__libc_init_array+0x44>)
 801c8c8:	f006 fca6 	bl	8023218 <_init>
 801c8cc:	1b64      	subs	r4, r4, r5
 801c8ce:	10a4      	asrs	r4, r4, #2
 801c8d0:	2600      	movs	r6, #0
 801c8d2:	42a6      	cmp	r6, r4
 801c8d4:	d105      	bne.n	801c8e2 <__libc_init_array+0x2e>
 801c8d6:	bd70      	pop	{r4, r5, r6, pc}
 801c8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8dc:	4798      	blx	r3
 801c8de:	3601      	adds	r6, #1
 801c8e0:	e7ee      	b.n	801c8c0 <__libc_init_array+0xc>
 801c8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8e6:	4798      	blx	r3
 801c8e8:	3601      	adds	r6, #1
 801c8ea:	e7f2      	b.n	801c8d2 <__libc_init_array+0x1e>
 801c8ec:	08025448 	.word	0x08025448
 801c8f0:	08025448 	.word	0x08025448
 801c8f4:	08025448 	.word	0x08025448
 801c8f8:	0802544c 	.word	0x0802544c

0801c8fc <__retarget_lock_init_recursive>:
 801c8fc:	4770      	bx	lr

0801c8fe <__retarget_lock_acquire>:
 801c8fe:	4770      	bx	lr

0801c900 <__retarget_lock_acquire_recursive>:
 801c900:	4770      	bx	lr

0801c902 <__retarget_lock_release>:
 801c902:	4770      	bx	lr

0801c904 <__retarget_lock_release_recursive>:
 801c904:	4770      	bx	lr

0801c906 <strcpy>:
 801c906:	4603      	mov	r3, r0
 801c908:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c90c:	f803 2b01 	strb.w	r2, [r3], #1
 801c910:	2a00      	cmp	r2, #0
 801c912:	d1f9      	bne.n	801c908 <strcpy+0x2>
 801c914:	4770      	bx	lr

0801c916 <memcpy>:
 801c916:	440a      	add	r2, r1
 801c918:	4291      	cmp	r1, r2
 801c91a:	f100 33ff 	add.w	r3, r0, #4294967295
 801c91e:	d100      	bne.n	801c922 <memcpy+0xc>
 801c920:	4770      	bx	lr
 801c922:	b510      	push	{r4, lr}
 801c924:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c928:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c92c:	4291      	cmp	r1, r2
 801c92e:	d1f9      	bne.n	801c924 <memcpy+0xe>
 801c930:	bd10      	pop	{r4, pc}
 801c932:	0000      	movs	r0, r0
 801c934:	0000      	movs	r0, r0
	...

0801c938 <nan>:
 801c938:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c940 <nan+0x8>
 801c93c:	4770      	bx	lr
 801c93e:	bf00      	nop
 801c940:	00000000 	.word	0x00000000
 801c944:	7ff80000 	.word	0x7ff80000

0801c948 <nanf>:
 801c948:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c950 <nanf+0x8>
 801c94c:	4770      	bx	lr
 801c94e:	bf00      	nop
 801c950:	7fc00000 	.word	0x7fc00000

0801c954 <modf>:
 801c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c956:	ec55 4b10 	vmov	r4, r5, d0
 801c95a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c95e:	f2a3 32ff 	subw	r2, r3, #1023	@ 0x3ff
 801c962:	2a13      	cmp	r2, #19
 801c964:	4606      	mov	r6, r0
 801c966:	462f      	mov	r7, r5
 801c968:	dc21      	bgt.n	801c9ae <modf+0x5a>
 801c96a:	2a00      	cmp	r2, #0
 801c96c:	da07      	bge.n	801c97e <modf+0x2a>
 801c96e:	2200      	movs	r2, #0
 801c970:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 801c974:	e9c0 2300 	strd	r2, r3, [r0]
 801c978:	ec45 4b10 	vmov	d0, r4, r5
 801c97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c97e:	481d      	ldr	r0, [pc, #116]	@ (801c9f4 <modf+0xa0>)
 801c980:	4110      	asrs	r0, r2
 801c982:	ea05 0300 	and.w	r3, r5, r0
 801c986:	4323      	orrs	r3, r4
 801c988:	d105      	bne.n	801c996 <modf+0x42>
 801c98a:	e9c6 4500 	strd	r4, r5, [r6]
 801c98e:	f007 4500 	and.w	r5, r7, #2147483648	@ 0x80000000
 801c992:	461c      	mov	r4, r3
 801c994:	e7f0      	b.n	801c978 <modf+0x24>
 801c996:	2200      	movs	r2, #0
 801c998:	ea25 0300 	bic.w	r3, r5, r0
 801c99c:	4620      	mov	r0, r4
 801c99e:	4629      	mov	r1, r5
 801c9a0:	e9c6 2300 	strd	r2, r3, [r6]
 801c9a4:	f7e3 fc80 	bl	80002a8 <__aeabi_dsub>
 801c9a8:	4604      	mov	r4, r0
 801c9aa:	460d      	mov	r5, r1
 801c9ac:	e7e4      	b.n	801c978 <modf+0x24>
 801c9ae:	2a33      	cmp	r2, #51	@ 0x33
 801c9b0:	dd13      	ble.n	801c9da <modf+0x86>
 801c9b2:	ed86 0b00 	vstr	d0, [r6]
 801c9b6:	f002 fd6f 	bl	801f498 <__fpclassifyd>
 801c9ba:	b950      	cbnz	r0, 801c9d2 <modf+0x7e>
 801c9bc:	4622      	mov	r2, r4
 801c9be:	462b      	mov	r3, r5
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	4629      	mov	r1, r5
 801c9c4:	f7e3 fc72 	bl	80002ac <__adddf3>
 801c9c8:	4604      	mov	r4, r0
 801c9ca:	460d      	mov	r5, r1
 801c9cc:	e9c6 4500 	strd	r4, r5, [r6]
 801c9d0:	e7d2      	b.n	801c978 <modf+0x24>
 801c9d2:	2400      	movs	r4, #0
 801c9d4:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 801c9d8:	e7ce      	b.n	801c978 <modf+0x24>
 801c9da:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801c9de:	f04f 30ff 	mov.w	r0, #4294967295
 801c9e2:	40d8      	lsrs	r0, r3
 801c9e4:	ea14 0300 	ands.w	r3, r4, r0
 801c9e8:	d0cf      	beq.n	801c98a <modf+0x36>
 801c9ea:	462b      	mov	r3, r5
 801c9ec:	ea24 0200 	bic.w	r2, r4, r0
 801c9f0:	e7d4      	b.n	801c99c <modf+0x48>
 801c9f2:	bf00      	nop
 801c9f4:	000fffff 	.word	0x000fffff

0801c9f8 <__assert_func>:
 801c9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c9fa:	4614      	mov	r4, r2
 801c9fc:	461a      	mov	r2, r3
 801c9fe:	4b09      	ldr	r3, [pc, #36]	@ (801ca24 <__assert_func+0x2c>)
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	4605      	mov	r5, r0
 801ca04:	68d8      	ldr	r0, [r3, #12]
 801ca06:	b14c      	cbz	r4, 801ca1c <__assert_func+0x24>
 801ca08:	4b07      	ldr	r3, [pc, #28]	@ (801ca28 <__assert_func+0x30>)
 801ca0a:	9100      	str	r1, [sp, #0]
 801ca0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ca10:	4906      	ldr	r1, [pc, #24]	@ (801ca2c <__assert_func+0x34>)
 801ca12:	462b      	mov	r3, r5
 801ca14:	f002 fc9c 	bl	801f350 <fiprintf>
 801ca18:	f002 fd62 	bl	801f4e0 <abort>
 801ca1c:	4b04      	ldr	r3, [pc, #16]	@ (801ca30 <__assert_func+0x38>)
 801ca1e:	461c      	mov	r4, r3
 801ca20:	e7f3      	b.n	801ca0a <__assert_func+0x12>
 801ca22:	bf00      	nop
 801ca24:	20000458 	.word	0x20000458
 801ca28:	08024cd0 	.word	0x08024cd0
 801ca2c:	08024cdd 	.word	0x08024cdd
 801ca30:	08024d0b 	.word	0x08024d0b

0801ca34 <div>:
 801ca34:	b510      	push	{r4, lr}
 801ca36:	fb91 f4f2 	sdiv	r4, r1, r2
 801ca3a:	fb02 1114 	mls	r1, r2, r4, r1
 801ca3e:	6004      	str	r4, [r0, #0]
 801ca40:	6041      	str	r1, [r0, #4]
 801ca42:	bd10      	pop	{r4, pc}

0801ca44 <quorem>:
 801ca44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca48:	6903      	ldr	r3, [r0, #16]
 801ca4a:	690c      	ldr	r4, [r1, #16]
 801ca4c:	42a3      	cmp	r3, r4
 801ca4e:	4607      	mov	r7, r0
 801ca50:	db7e      	blt.n	801cb50 <quorem+0x10c>
 801ca52:	3c01      	subs	r4, #1
 801ca54:	f101 0814 	add.w	r8, r1, #20
 801ca58:	00a3      	lsls	r3, r4, #2
 801ca5a:	f100 0514 	add.w	r5, r0, #20
 801ca5e:	9300      	str	r3, [sp, #0]
 801ca60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ca64:	9301      	str	r3, [sp, #4]
 801ca66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ca6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ca6e:	3301      	adds	r3, #1
 801ca70:	429a      	cmp	r2, r3
 801ca72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ca76:	fbb2 f6f3 	udiv	r6, r2, r3
 801ca7a:	d32e      	bcc.n	801cada <quorem+0x96>
 801ca7c:	f04f 0a00 	mov.w	sl, #0
 801ca80:	46c4      	mov	ip, r8
 801ca82:	46ae      	mov	lr, r5
 801ca84:	46d3      	mov	fp, sl
 801ca86:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ca8a:	b298      	uxth	r0, r3
 801ca8c:	fb06 a000 	mla	r0, r6, r0, sl
 801ca90:	0c02      	lsrs	r2, r0, #16
 801ca92:	0c1b      	lsrs	r3, r3, #16
 801ca94:	fb06 2303 	mla	r3, r6, r3, r2
 801ca98:	f8de 2000 	ldr.w	r2, [lr]
 801ca9c:	b280      	uxth	r0, r0
 801ca9e:	b292      	uxth	r2, r2
 801caa0:	1a12      	subs	r2, r2, r0
 801caa2:	445a      	add	r2, fp
 801caa4:	f8de 0000 	ldr.w	r0, [lr]
 801caa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801caac:	b29b      	uxth	r3, r3
 801caae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801cab2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801cab6:	b292      	uxth	r2, r2
 801cab8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801cabc:	45e1      	cmp	r9, ip
 801cabe:	f84e 2b04 	str.w	r2, [lr], #4
 801cac2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801cac6:	d2de      	bcs.n	801ca86 <quorem+0x42>
 801cac8:	9b00      	ldr	r3, [sp, #0]
 801caca:	58eb      	ldr	r3, [r5, r3]
 801cacc:	b92b      	cbnz	r3, 801cada <quorem+0x96>
 801cace:	9b01      	ldr	r3, [sp, #4]
 801cad0:	3b04      	subs	r3, #4
 801cad2:	429d      	cmp	r5, r3
 801cad4:	461a      	mov	r2, r3
 801cad6:	d32f      	bcc.n	801cb38 <quorem+0xf4>
 801cad8:	613c      	str	r4, [r7, #16]
 801cada:	4638      	mov	r0, r7
 801cadc:	f001 fca2 	bl	801e424 <__mcmp>
 801cae0:	2800      	cmp	r0, #0
 801cae2:	db25      	blt.n	801cb30 <quorem+0xec>
 801cae4:	4629      	mov	r1, r5
 801cae6:	2000      	movs	r0, #0
 801cae8:	f858 2b04 	ldr.w	r2, [r8], #4
 801caec:	f8d1 c000 	ldr.w	ip, [r1]
 801caf0:	fa1f fe82 	uxth.w	lr, r2
 801caf4:	fa1f f38c 	uxth.w	r3, ip
 801caf8:	eba3 030e 	sub.w	r3, r3, lr
 801cafc:	4403      	add	r3, r0
 801cafe:	0c12      	lsrs	r2, r2, #16
 801cb00:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801cb04:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801cb08:	b29b      	uxth	r3, r3
 801cb0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cb0e:	45c1      	cmp	r9, r8
 801cb10:	f841 3b04 	str.w	r3, [r1], #4
 801cb14:	ea4f 4022 	mov.w	r0, r2, asr #16
 801cb18:	d2e6      	bcs.n	801cae8 <quorem+0xa4>
 801cb1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cb1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cb22:	b922      	cbnz	r2, 801cb2e <quorem+0xea>
 801cb24:	3b04      	subs	r3, #4
 801cb26:	429d      	cmp	r5, r3
 801cb28:	461a      	mov	r2, r3
 801cb2a:	d30b      	bcc.n	801cb44 <quorem+0x100>
 801cb2c:	613c      	str	r4, [r7, #16]
 801cb2e:	3601      	adds	r6, #1
 801cb30:	4630      	mov	r0, r6
 801cb32:	b003      	add	sp, #12
 801cb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb38:	6812      	ldr	r2, [r2, #0]
 801cb3a:	3b04      	subs	r3, #4
 801cb3c:	2a00      	cmp	r2, #0
 801cb3e:	d1cb      	bne.n	801cad8 <quorem+0x94>
 801cb40:	3c01      	subs	r4, #1
 801cb42:	e7c6      	b.n	801cad2 <quorem+0x8e>
 801cb44:	6812      	ldr	r2, [r2, #0]
 801cb46:	3b04      	subs	r3, #4
 801cb48:	2a00      	cmp	r2, #0
 801cb4a:	d1ef      	bne.n	801cb2c <quorem+0xe8>
 801cb4c:	3c01      	subs	r4, #1
 801cb4e:	e7ea      	b.n	801cb26 <quorem+0xe2>
 801cb50:	2000      	movs	r0, #0
 801cb52:	e7ee      	b.n	801cb32 <quorem+0xee>
 801cb54:	0000      	movs	r0, r0
	...

0801cb58 <_dtoa_r>:
 801cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb5c:	69c7      	ldr	r7, [r0, #28]
 801cb5e:	b097      	sub	sp, #92	@ 0x5c
 801cb60:	ed8d 0b04 	vstr	d0, [sp, #16]
 801cb64:	ec55 4b10 	vmov	r4, r5, d0
 801cb68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cb6a:	9107      	str	r1, [sp, #28]
 801cb6c:	4681      	mov	r9, r0
 801cb6e:	920c      	str	r2, [sp, #48]	@ 0x30
 801cb70:	9311      	str	r3, [sp, #68]	@ 0x44
 801cb72:	b97f      	cbnz	r7, 801cb94 <_dtoa_r+0x3c>
 801cb74:	2010      	movs	r0, #16
 801cb76:	f7fc fead 	bl	80198d4 <malloc>
 801cb7a:	4602      	mov	r2, r0
 801cb7c:	f8c9 001c 	str.w	r0, [r9, #28]
 801cb80:	b920      	cbnz	r0, 801cb8c <_dtoa_r+0x34>
 801cb82:	4ba9      	ldr	r3, [pc, #676]	@ (801ce28 <_dtoa_r+0x2d0>)
 801cb84:	21ef      	movs	r1, #239	@ 0xef
 801cb86:	48a9      	ldr	r0, [pc, #676]	@ (801ce2c <_dtoa_r+0x2d4>)
 801cb88:	f7ff ff36 	bl	801c9f8 <__assert_func>
 801cb8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801cb90:	6007      	str	r7, [r0, #0]
 801cb92:	60c7      	str	r7, [r0, #12]
 801cb94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801cb98:	6819      	ldr	r1, [r3, #0]
 801cb9a:	b159      	cbz	r1, 801cbb4 <_dtoa_r+0x5c>
 801cb9c:	685a      	ldr	r2, [r3, #4]
 801cb9e:	604a      	str	r2, [r1, #4]
 801cba0:	2301      	movs	r3, #1
 801cba2:	4093      	lsls	r3, r2
 801cba4:	608b      	str	r3, [r1, #8]
 801cba6:	4648      	mov	r0, r9
 801cba8:	f001 f9c0 	bl	801df2c <_Bfree>
 801cbac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801cbb0:	2200      	movs	r2, #0
 801cbb2:	601a      	str	r2, [r3, #0]
 801cbb4:	1e2b      	subs	r3, r5, #0
 801cbb6:	bfb9      	ittee	lt
 801cbb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801cbbc:	9305      	strlt	r3, [sp, #20]
 801cbbe:	2300      	movge	r3, #0
 801cbc0:	6033      	strge	r3, [r6, #0]
 801cbc2:	9f05      	ldr	r7, [sp, #20]
 801cbc4:	4b9a      	ldr	r3, [pc, #616]	@ (801ce30 <_dtoa_r+0x2d8>)
 801cbc6:	bfbc      	itt	lt
 801cbc8:	2201      	movlt	r2, #1
 801cbca:	6032      	strlt	r2, [r6, #0]
 801cbcc:	43bb      	bics	r3, r7
 801cbce:	d112      	bne.n	801cbf6 <_dtoa_r+0x9e>
 801cbd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cbd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801cbd6:	6013      	str	r3, [r2, #0]
 801cbd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cbdc:	4323      	orrs	r3, r4
 801cbde:	f000 855a 	beq.w	801d696 <_dtoa_r+0xb3e>
 801cbe2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cbe4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801ce44 <_dtoa_r+0x2ec>
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	f000 855c 	beq.w	801d6a6 <_dtoa_r+0xb4e>
 801cbee:	f10a 0303 	add.w	r3, sl, #3
 801cbf2:	f000 bd56 	b.w	801d6a2 <_dtoa_r+0xb4a>
 801cbf6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	ec51 0b17 	vmov	r0, r1, d7
 801cc00:	2300      	movs	r3, #0
 801cc02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801cc06:	f7e3 ff6f 	bl	8000ae8 <__aeabi_dcmpeq>
 801cc0a:	4680      	mov	r8, r0
 801cc0c:	b158      	cbz	r0, 801cc26 <_dtoa_r+0xce>
 801cc0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cc10:	2301      	movs	r3, #1
 801cc12:	6013      	str	r3, [r2, #0]
 801cc14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cc16:	b113      	cbz	r3, 801cc1e <_dtoa_r+0xc6>
 801cc18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801cc1a:	4b86      	ldr	r3, [pc, #536]	@ (801ce34 <_dtoa_r+0x2dc>)
 801cc1c:	6013      	str	r3, [r2, #0]
 801cc1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801ce48 <_dtoa_r+0x2f0>
 801cc22:	f000 bd40 	b.w	801d6a6 <_dtoa_r+0xb4e>
 801cc26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801cc2a:	aa14      	add	r2, sp, #80	@ 0x50
 801cc2c:	a915      	add	r1, sp, #84	@ 0x54
 801cc2e:	4648      	mov	r0, r9
 801cc30:	f001 fd18 	bl	801e664 <__d2b>
 801cc34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801cc38:	9002      	str	r0, [sp, #8]
 801cc3a:	2e00      	cmp	r6, #0
 801cc3c:	d078      	beq.n	801cd30 <_dtoa_r+0x1d8>
 801cc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cc40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801cc44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cc48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801cc4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801cc50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801cc54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801cc58:	4619      	mov	r1, r3
 801cc5a:	2200      	movs	r2, #0
 801cc5c:	4b76      	ldr	r3, [pc, #472]	@ (801ce38 <_dtoa_r+0x2e0>)
 801cc5e:	f7e3 fb23 	bl	80002a8 <__aeabi_dsub>
 801cc62:	a36b      	add	r3, pc, #428	@ (adr r3, 801ce10 <_dtoa_r+0x2b8>)
 801cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc68:	f7e3 fcd6 	bl	8000618 <__aeabi_dmul>
 801cc6c:	a36a      	add	r3, pc, #424	@ (adr r3, 801ce18 <_dtoa_r+0x2c0>)
 801cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc72:	f7e3 fb1b 	bl	80002ac <__adddf3>
 801cc76:	4604      	mov	r4, r0
 801cc78:	4630      	mov	r0, r6
 801cc7a:	460d      	mov	r5, r1
 801cc7c:	f7e3 fc62 	bl	8000544 <__aeabi_i2d>
 801cc80:	a367      	add	r3, pc, #412	@ (adr r3, 801ce20 <_dtoa_r+0x2c8>)
 801cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc86:	f7e3 fcc7 	bl	8000618 <__aeabi_dmul>
 801cc8a:	4602      	mov	r2, r0
 801cc8c:	460b      	mov	r3, r1
 801cc8e:	4620      	mov	r0, r4
 801cc90:	4629      	mov	r1, r5
 801cc92:	f7e3 fb0b 	bl	80002ac <__adddf3>
 801cc96:	4604      	mov	r4, r0
 801cc98:	460d      	mov	r5, r1
 801cc9a:	f7e3 ff6d 	bl	8000b78 <__aeabi_d2iz>
 801cc9e:	2200      	movs	r2, #0
 801cca0:	4607      	mov	r7, r0
 801cca2:	2300      	movs	r3, #0
 801cca4:	4620      	mov	r0, r4
 801cca6:	4629      	mov	r1, r5
 801cca8:	f7e3 ff28 	bl	8000afc <__aeabi_dcmplt>
 801ccac:	b140      	cbz	r0, 801ccc0 <_dtoa_r+0x168>
 801ccae:	4638      	mov	r0, r7
 801ccb0:	f7e3 fc48 	bl	8000544 <__aeabi_i2d>
 801ccb4:	4622      	mov	r2, r4
 801ccb6:	462b      	mov	r3, r5
 801ccb8:	f7e3 ff16 	bl	8000ae8 <__aeabi_dcmpeq>
 801ccbc:	b900      	cbnz	r0, 801ccc0 <_dtoa_r+0x168>
 801ccbe:	3f01      	subs	r7, #1
 801ccc0:	2f16      	cmp	r7, #22
 801ccc2:	d852      	bhi.n	801cd6a <_dtoa_r+0x212>
 801ccc4:	4b5d      	ldr	r3, [pc, #372]	@ (801ce3c <_dtoa_r+0x2e4>)
 801ccc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ccd2:	f7e3 ff13 	bl	8000afc <__aeabi_dcmplt>
 801ccd6:	2800      	cmp	r0, #0
 801ccd8:	d049      	beq.n	801cd6e <_dtoa_r+0x216>
 801ccda:	3f01      	subs	r7, #1
 801ccdc:	2300      	movs	r3, #0
 801ccde:	9310      	str	r3, [sp, #64]	@ 0x40
 801cce0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cce2:	1b9b      	subs	r3, r3, r6
 801cce4:	1e5a      	subs	r2, r3, #1
 801cce6:	bf45      	ittet	mi
 801cce8:	f1c3 0301 	rsbmi	r3, r3, #1
 801ccec:	9300      	strmi	r3, [sp, #0]
 801ccee:	2300      	movpl	r3, #0
 801ccf0:	2300      	movmi	r3, #0
 801ccf2:	9206      	str	r2, [sp, #24]
 801ccf4:	bf54      	ite	pl
 801ccf6:	9300      	strpl	r3, [sp, #0]
 801ccf8:	9306      	strmi	r3, [sp, #24]
 801ccfa:	2f00      	cmp	r7, #0
 801ccfc:	db39      	blt.n	801cd72 <_dtoa_r+0x21a>
 801ccfe:	9b06      	ldr	r3, [sp, #24]
 801cd00:	970d      	str	r7, [sp, #52]	@ 0x34
 801cd02:	443b      	add	r3, r7
 801cd04:	9306      	str	r3, [sp, #24]
 801cd06:	2300      	movs	r3, #0
 801cd08:	9308      	str	r3, [sp, #32]
 801cd0a:	9b07      	ldr	r3, [sp, #28]
 801cd0c:	2b09      	cmp	r3, #9
 801cd0e:	d863      	bhi.n	801cdd8 <_dtoa_r+0x280>
 801cd10:	2b05      	cmp	r3, #5
 801cd12:	bfc4      	itt	gt
 801cd14:	3b04      	subgt	r3, #4
 801cd16:	9307      	strgt	r3, [sp, #28]
 801cd18:	9b07      	ldr	r3, [sp, #28]
 801cd1a:	f1a3 0302 	sub.w	r3, r3, #2
 801cd1e:	bfcc      	ite	gt
 801cd20:	2400      	movgt	r4, #0
 801cd22:	2401      	movle	r4, #1
 801cd24:	2b03      	cmp	r3, #3
 801cd26:	d863      	bhi.n	801cdf0 <_dtoa_r+0x298>
 801cd28:	e8df f003 	tbb	[pc, r3]
 801cd2c:	2b375452 	.word	0x2b375452
 801cd30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801cd34:	441e      	add	r6, r3
 801cd36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801cd3a:	2b20      	cmp	r3, #32
 801cd3c:	bfc1      	itttt	gt
 801cd3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801cd42:	409f      	lslgt	r7, r3
 801cd44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801cd48:	fa24 f303 	lsrgt.w	r3, r4, r3
 801cd4c:	bfd6      	itet	le
 801cd4e:	f1c3 0320 	rsble	r3, r3, #32
 801cd52:	ea47 0003 	orrgt.w	r0, r7, r3
 801cd56:	fa04 f003 	lslle.w	r0, r4, r3
 801cd5a:	f7e3 fbe3 	bl	8000524 <__aeabi_ui2d>
 801cd5e:	2201      	movs	r2, #1
 801cd60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801cd64:	3e01      	subs	r6, #1
 801cd66:	9212      	str	r2, [sp, #72]	@ 0x48
 801cd68:	e776      	b.n	801cc58 <_dtoa_r+0x100>
 801cd6a:	2301      	movs	r3, #1
 801cd6c:	e7b7      	b.n	801ccde <_dtoa_r+0x186>
 801cd6e:	9010      	str	r0, [sp, #64]	@ 0x40
 801cd70:	e7b6      	b.n	801cce0 <_dtoa_r+0x188>
 801cd72:	9b00      	ldr	r3, [sp, #0]
 801cd74:	1bdb      	subs	r3, r3, r7
 801cd76:	9300      	str	r3, [sp, #0]
 801cd78:	427b      	negs	r3, r7
 801cd7a:	9308      	str	r3, [sp, #32]
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	930d      	str	r3, [sp, #52]	@ 0x34
 801cd80:	e7c3      	b.n	801cd0a <_dtoa_r+0x1b2>
 801cd82:	2301      	movs	r3, #1
 801cd84:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cd88:	eb07 0b03 	add.w	fp, r7, r3
 801cd8c:	f10b 0301 	add.w	r3, fp, #1
 801cd90:	2b01      	cmp	r3, #1
 801cd92:	9303      	str	r3, [sp, #12]
 801cd94:	bfb8      	it	lt
 801cd96:	2301      	movlt	r3, #1
 801cd98:	e006      	b.n	801cda8 <_dtoa_r+0x250>
 801cd9a:	2301      	movs	r3, #1
 801cd9c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	dd28      	ble.n	801cdf6 <_dtoa_r+0x29e>
 801cda4:	469b      	mov	fp, r3
 801cda6:	9303      	str	r3, [sp, #12]
 801cda8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801cdac:	2100      	movs	r1, #0
 801cdae:	2204      	movs	r2, #4
 801cdb0:	f102 0514 	add.w	r5, r2, #20
 801cdb4:	429d      	cmp	r5, r3
 801cdb6:	d926      	bls.n	801ce06 <_dtoa_r+0x2ae>
 801cdb8:	6041      	str	r1, [r0, #4]
 801cdba:	4648      	mov	r0, r9
 801cdbc:	f001 f876 	bl	801deac <_Balloc>
 801cdc0:	4682      	mov	sl, r0
 801cdc2:	2800      	cmp	r0, #0
 801cdc4:	d142      	bne.n	801ce4c <_dtoa_r+0x2f4>
 801cdc6:	4b1e      	ldr	r3, [pc, #120]	@ (801ce40 <_dtoa_r+0x2e8>)
 801cdc8:	4602      	mov	r2, r0
 801cdca:	f240 11af 	movw	r1, #431	@ 0x1af
 801cdce:	e6da      	b.n	801cb86 <_dtoa_r+0x2e>
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	e7e3      	b.n	801cd9c <_dtoa_r+0x244>
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	e7d5      	b.n	801cd84 <_dtoa_r+0x22c>
 801cdd8:	2401      	movs	r4, #1
 801cdda:	2300      	movs	r3, #0
 801cddc:	9307      	str	r3, [sp, #28]
 801cdde:	9409      	str	r4, [sp, #36]	@ 0x24
 801cde0:	f04f 3bff 	mov.w	fp, #4294967295
 801cde4:	2200      	movs	r2, #0
 801cde6:	f8cd b00c 	str.w	fp, [sp, #12]
 801cdea:	2312      	movs	r3, #18
 801cdec:	920c      	str	r2, [sp, #48]	@ 0x30
 801cdee:	e7db      	b.n	801cda8 <_dtoa_r+0x250>
 801cdf0:	2301      	movs	r3, #1
 801cdf2:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdf4:	e7f4      	b.n	801cde0 <_dtoa_r+0x288>
 801cdf6:	f04f 0b01 	mov.w	fp, #1
 801cdfa:	f8cd b00c 	str.w	fp, [sp, #12]
 801cdfe:	465b      	mov	r3, fp
 801ce00:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801ce04:	e7d0      	b.n	801cda8 <_dtoa_r+0x250>
 801ce06:	3101      	adds	r1, #1
 801ce08:	0052      	lsls	r2, r2, #1
 801ce0a:	e7d1      	b.n	801cdb0 <_dtoa_r+0x258>
 801ce0c:	f3af 8000 	nop.w
 801ce10:	636f4361 	.word	0x636f4361
 801ce14:	3fd287a7 	.word	0x3fd287a7
 801ce18:	8b60c8b3 	.word	0x8b60c8b3
 801ce1c:	3fc68a28 	.word	0x3fc68a28
 801ce20:	509f79fb 	.word	0x509f79fb
 801ce24:	3fd34413 	.word	0x3fd34413
 801ce28:	08024bb1 	.word	0x08024bb1
 801ce2c:	08024d19 	.word	0x08024d19
 801ce30:	7ff00000 	.word	0x7ff00000
 801ce34:	08024e63 	.word	0x08024e63
 801ce38:	3ff80000 	.word	0x3ff80000
 801ce3c:	080250b0 	.word	0x080250b0
 801ce40:	08024d71 	.word	0x08024d71
 801ce44:	08024d15 	.word	0x08024d15
 801ce48:	08024e62 	.word	0x08024e62
 801ce4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ce50:	6018      	str	r0, [r3, #0]
 801ce52:	9b03      	ldr	r3, [sp, #12]
 801ce54:	2b0e      	cmp	r3, #14
 801ce56:	f200 80a1 	bhi.w	801cf9c <_dtoa_r+0x444>
 801ce5a:	2c00      	cmp	r4, #0
 801ce5c:	f000 809e 	beq.w	801cf9c <_dtoa_r+0x444>
 801ce60:	2f00      	cmp	r7, #0
 801ce62:	dd33      	ble.n	801cecc <_dtoa_r+0x374>
 801ce64:	4b9c      	ldr	r3, [pc, #624]	@ (801d0d8 <_dtoa_r+0x580>)
 801ce66:	f007 020f 	and.w	r2, r7, #15
 801ce6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ce6e:	ed93 7b00 	vldr	d7, [r3]
 801ce72:	05f8      	lsls	r0, r7, #23
 801ce74:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801ce78:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ce7c:	d516      	bpl.n	801ceac <_dtoa_r+0x354>
 801ce7e:	4b97      	ldr	r3, [pc, #604]	@ (801d0dc <_dtoa_r+0x584>)
 801ce80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ce84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ce88:	f7e3 fcf0 	bl	800086c <__aeabi_ddiv>
 801ce8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ce90:	f004 040f 	and.w	r4, r4, #15
 801ce94:	2603      	movs	r6, #3
 801ce96:	4d91      	ldr	r5, [pc, #580]	@ (801d0dc <_dtoa_r+0x584>)
 801ce98:	b954      	cbnz	r4, 801ceb0 <_dtoa_r+0x358>
 801ce9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ce9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cea2:	f7e3 fce3 	bl	800086c <__aeabi_ddiv>
 801cea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ceaa:	e028      	b.n	801cefe <_dtoa_r+0x3a6>
 801ceac:	2602      	movs	r6, #2
 801ceae:	e7f2      	b.n	801ce96 <_dtoa_r+0x33e>
 801ceb0:	07e1      	lsls	r1, r4, #31
 801ceb2:	d508      	bpl.n	801cec6 <_dtoa_r+0x36e>
 801ceb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ceb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cebc:	f7e3 fbac 	bl	8000618 <__aeabi_dmul>
 801cec0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801cec4:	3601      	adds	r6, #1
 801cec6:	1064      	asrs	r4, r4, #1
 801cec8:	3508      	adds	r5, #8
 801ceca:	e7e5      	b.n	801ce98 <_dtoa_r+0x340>
 801cecc:	f000 80af 	beq.w	801d02e <_dtoa_r+0x4d6>
 801ced0:	427c      	negs	r4, r7
 801ced2:	4b81      	ldr	r3, [pc, #516]	@ (801d0d8 <_dtoa_r+0x580>)
 801ced4:	4d81      	ldr	r5, [pc, #516]	@ (801d0dc <_dtoa_r+0x584>)
 801ced6:	f004 020f 	and.w	r2, r4, #15
 801ceda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801cee6:	f7e3 fb97 	bl	8000618 <__aeabi_dmul>
 801ceea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ceee:	1124      	asrs	r4, r4, #4
 801cef0:	2300      	movs	r3, #0
 801cef2:	2602      	movs	r6, #2
 801cef4:	2c00      	cmp	r4, #0
 801cef6:	f040 808f 	bne.w	801d018 <_dtoa_r+0x4c0>
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d1d3      	bne.n	801cea6 <_dtoa_r+0x34e>
 801cefe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cf00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	f000 8094 	beq.w	801d032 <_dtoa_r+0x4da>
 801cf0a:	4b75      	ldr	r3, [pc, #468]	@ (801d0e0 <_dtoa_r+0x588>)
 801cf0c:	2200      	movs	r2, #0
 801cf0e:	4620      	mov	r0, r4
 801cf10:	4629      	mov	r1, r5
 801cf12:	f7e3 fdf3 	bl	8000afc <__aeabi_dcmplt>
 801cf16:	2800      	cmp	r0, #0
 801cf18:	f000 808b 	beq.w	801d032 <_dtoa_r+0x4da>
 801cf1c:	9b03      	ldr	r3, [sp, #12]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	f000 8087 	beq.w	801d032 <_dtoa_r+0x4da>
 801cf24:	f1bb 0f00 	cmp.w	fp, #0
 801cf28:	dd34      	ble.n	801cf94 <_dtoa_r+0x43c>
 801cf2a:	4620      	mov	r0, r4
 801cf2c:	4b6d      	ldr	r3, [pc, #436]	@ (801d0e4 <_dtoa_r+0x58c>)
 801cf2e:	2200      	movs	r2, #0
 801cf30:	4629      	mov	r1, r5
 801cf32:	f7e3 fb71 	bl	8000618 <__aeabi_dmul>
 801cf36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cf3a:	f107 38ff 	add.w	r8, r7, #4294967295
 801cf3e:	3601      	adds	r6, #1
 801cf40:	465c      	mov	r4, fp
 801cf42:	4630      	mov	r0, r6
 801cf44:	f7e3 fafe 	bl	8000544 <__aeabi_i2d>
 801cf48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf4c:	f7e3 fb64 	bl	8000618 <__aeabi_dmul>
 801cf50:	4b65      	ldr	r3, [pc, #404]	@ (801d0e8 <_dtoa_r+0x590>)
 801cf52:	2200      	movs	r2, #0
 801cf54:	f7e3 f9aa 	bl	80002ac <__adddf3>
 801cf58:	4605      	mov	r5, r0
 801cf5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801cf5e:	2c00      	cmp	r4, #0
 801cf60:	d16a      	bne.n	801d038 <_dtoa_r+0x4e0>
 801cf62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cf66:	4b61      	ldr	r3, [pc, #388]	@ (801d0ec <_dtoa_r+0x594>)
 801cf68:	2200      	movs	r2, #0
 801cf6a:	f7e3 f99d 	bl	80002a8 <__aeabi_dsub>
 801cf6e:	4602      	mov	r2, r0
 801cf70:	460b      	mov	r3, r1
 801cf72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cf76:	462a      	mov	r2, r5
 801cf78:	4633      	mov	r3, r6
 801cf7a:	f7e3 fddd 	bl	8000b38 <__aeabi_dcmpgt>
 801cf7e:	2800      	cmp	r0, #0
 801cf80:	f040 8298 	bne.w	801d4b4 <_dtoa_r+0x95c>
 801cf84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cf88:	462a      	mov	r2, r5
 801cf8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801cf8e:	f7e3 fdb5 	bl	8000afc <__aeabi_dcmplt>
 801cf92:	bb38      	cbnz	r0, 801cfe4 <_dtoa_r+0x48c>
 801cf94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801cf98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801cf9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	f2c0 8157 	blt.w	801d252 <_dtoa_r+0x6fa>
 801cfa4:	2f0e      	cmp	r7, #14
 801cfa6:	f300 8154 	bgt.w	801d252 <_dtoa_r+0x6fa>
 801cfaa:	4b4b      	ldr	r3, [pc, #300]	@ (801d0d8 <_dtoa_r+0x580>)
 801cfac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cfb0:	ed93 7b00 	vldr	d7, [r3]
 801cfb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	ed8d 7b00 	vstr	d7, [sp]
 801cfbc:	f280 80e5 	bge.w	801d18a <_dtoa_r+0x632>
 801cfc0:	9b03      	ldr	r3, [sp, #12]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	f300 80e1 	bgt.w	801d18a <_dtoa_r+0x632>
 801cfc8:	d10c      	bne.n	801cfe4 <_dtoa_r+0x48c>
 801cfca:	4b48      	ldr	r3, [pc, #288]	@ (801d0ec <_dtoa_r+0x594>)
 801cfcc:	2200      	movs	r2, #0
 801cfce:	ec51 0b17 	vmov	r0, r1, d7
 801cfd2:	f7e3 fb21 	bl	8000618 <__aeabi_dmul>
 801cfd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cfda:	f7e3 fda3 	bl	8000b24 <__aeabi_dcmpge>
 801cfde:	2800      	cmp	r0, #0
 801cfe0:	f000 8266 	beq.w	801d4b0 <_dtoa_r+0x958>
 801cfe4:	2400      	movs	r4, #0
 801cfe6:	4625      	mov	r5, r4
 801cfe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cfea:	4656      	mov	r6, sl
 801cfec:	ea6f 0803 	mvn.w	r8, r3
 801cff0:	2700      	movs	r7, #0
 801cff2:	4621      	mov	r1, r4
 801cff4:	4648      	mov	r0, r9
 801cff6:	f000 ff99 	bl	801df2c <_Bfree>
 801cffa:	2d00      	cmp	r5, #0
 801cffc:	f000 80bd 	beq.w	801d17a <_dtoa_r+0x622>
 801d000:	b12f      	cbz	r7, 801d00e <_dtoa_r+0x4b6>
 801d002:	42af      	cmp	r7, r5
 801d004:	d003      	beq.n	801d00e <_dtoa_r+0x4b6>
 801d006:	4639      	mov	r1, r7
 801d008:	4648      	mov	r0, r9
 801d00a:	f000 ff8f 	bl	801df2c <_Bfree>
 801d00e:	4629      	mov	r1, r5
 801d010:	4648      	mov	r0, r9
 801d012:	f000 ff8b 	bl	801df2c <_Bfree>
 801d016:	e0b0      	b.n	801d17a <_dtoa_r+0x622>
 801d018:	07e2      	lsls	r2, r4, #31
 801d01a:	d505      	bpl.n	801d028 <_dtoa_r+0x4d0>
 801d01c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d020:	f7e3 fafa 	bl	8000618 <__aeabi_dmul>
 801d024:	3601      	adds	r6, #1
 801d026:	2301      	movs	r3, #1
 801d028:	1064      	asrs	r4, r4, #1
 801d02a:	3508      	adds	r5, #8
 801d02c:	e762      	b.n	801cef4 <_dtoa_r+0x39c>
 801d02e:	2602      	movs	r6, #2
 801d030:	e765      	b.n	801cefe <_dtoa_r+0x3a6>
 801d032:	9c03      	ldr	r4, [sp, #12]
 801d034:	46b8      	mov	r8, r7
 801d036:	e784      	b.n	801cf42 <_dtoa_r+0x3ea>
 801d038:	4b27      	ldr	r3, [pc, #156]	@ (801d0d8 <_dtoa_r+0x580>)
 801d03a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d03c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d040:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d044:	4454      	add	r4, sl
 801d046:	2900      	cmp	r1, #0
 801d048:	d054      	beq.n	801d0f4 <_dtoa_r+0x59c>
 801d04a:	4929      	ldr	r1, [pc, #164]	@ (801d0f0 <_dtoa_r+0x598>)
 801d04c:	2000      	movs	r0, #0
 801d04e:	f7e3 fc0d 	bl	800086c <__aeabi_ddiv>
 801d052:	4633      	mov	r3, r6
 801d054:	462a      	mov	r2, r5
 801d056:	f7e3 f927 	bl	80002a8 <__aeabi_dsub>
 801d05a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d05e:	4656      	mov	r6, sl
 801d060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d064:	f7e3 fd88 	bl	8000b78 <__aeabi_d2iz>
 801d068:	4605      	mov	r5, r0
 801d06a:	f7e3 fa6b 	bl	8000544 <__aeabi_i2d>
 801d06e:	4602      	mov	r2, r0
 801d070:	460b      	mov	r3, r1
 801d072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d076:	f7e3 f917 	bl	80002a8 <__aeabi_dsub>
 801d07a:	3530      	adds	r5, #48	@ 0x30
 801d07c:	4602      	mov	r2, r0
 801d07e:	460b      	mov	r3, r1
 801d080:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d084:	f806 5b01 	strb.w	r5, [r6], #1
 801d088:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d08c:	f7e3 fd36 	bl	8000afc <__aeabi_dcmplt>
 801d090:	2800      	cmp	r0, #0
 801d092:	d172      	bne.n	801d17a <_dtoa_r+0x622>
 801d094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d098:	4911      	ldr	r1, [pc, #68]	@ (801d0e0 <_dtoa_r+0x588>)
 801d09a:	2000      	movs	r0, #0
 801d09c:	f7e3 f904 	bl	80002a8 <__aeabi_dsub>
 801d0a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d0a4:	f7e3 fd2a 	bl	8000afc <__aeabi_dcmplt>
 801d0a8:	2800      	cmp	r0, #0
 801d0aa:	f040 80b4 	bne.w	801d216 <_dtoa_r+0x6be>
 801d0ae:	42a6      	cmp	r6, r4
 801d0b0:	f43f af70 	beq.w	801cf94 <_dtoa_r+0x43c>
 801d0b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801d0b8:	4b0a      	ldr	r3, [pc, #40]	@ (801d0e4 <_dtoa_r+0x58c>)
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	f7e3 faac 	bl	8000618 <__aeabi_dmul>
 801d0c0:	4b08      	ldr	r3, [pc, #32]	@ (801d0e4 <_dtoa_r+0x58c>)
 801d0c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d0c6:	2200      	movs	r2, #0
 801d0c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d0cc:	f7e3 faa4 	bl	8000618 <__aeabi_dmul>
 801d0d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d0d4:	e7c4      	b.n	801d060 <_dtoa_r+0x508>
 801d0d6:	bf00      	nop
 801d0d8:	080250b0 	.word	0x080250b0
 801d0dc:	08025088 	.word	0x08025088
 801d0e0:	3ff00000 	.word	0x3ff00000
 801d0e4:	40240000 	.word	0x40240000
 801d0e8:	401c0000 	.word	0x401c0000
 801d0ec:	40140000 	.word	0x40140000
 801d0f0:	3fe00000 	.word	0x3fe00000
 801d0f4:	4631      	mov	r1, r6
 801d0f6:	4628      	mov	r0, r5
 801d0f8:	f7e3 fa8e 	bl	8000618 <__aeabi_dmul>
 801d0fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d100:	9413      	str	r4, [sp, #76]	@ 0x4c
 801d102:	4656      	mov	r6, sl
 801d104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d108:	f7e3 fd36 	bl	8000b78 <__aeabi_d2iz>
 801d10c:	4605      	mov	r5, r0
 801d10e:	f7e3 fa19 	bl	8000544 <__aeabi_i2d>
 801d112:	4602      	mov	r2, r0
 801d114:	460b      	mov	r3, r1
 801d116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d11a:	f7e3 f8c5 	bl	80002a8 <__aeabi_dsub>
 801d11e:	3530      	adds	r5, #48	@ 0x30
 801d120:	f806 5b01 	strb.w	r5, [r6], #1
 801d124:	4602      	mov	r2, r0
 801d126:	460b      	mov	r3, r1
 801d128:	42a6      	cmp	r6, r4
 801d12a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d12e:	f04f 0200 	mov.w	r2, #0
 801d132:	d124      	bne.n	801d17e <_dtoa_r+0x626>
 801d134:	4baf      	ldr	r3, [pc, #700]	@ (801d3f4 <_dtoa_r+0x89c>)
 801d136:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801d13a:	f7e3 f8b7 	bl	80002ac <__adddf3>
 801d13e:	4602      	mov	r2, r0
 801d140:	460b      	mov	r3, r1
 801d142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d146:	f7e3 fcf7 	bl	8000b38 <__aeabi_dcmpgt>
 801d14a:	2800      	cmp	r0, #0
 801d14c:	d163      	bne.n	801d216 <_dtoa_r+0x6be>
 801d14e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801d152:	49a8      	ldr	r1, [pc, #672]	@ (801d3f4 <_dtoa_r+0x89c>)
 801d154:	2000      	movs	r0, #0
 801d156:	f7e3 f8a7 	bl	80002a8 <__aeabi_dsub>
 801d15a:	4602      	mov	r2, r0
 801d15c:	460b      	mov	r3, r1
 801d15e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d162:	f7e3 fccb 	bl	8000afc <__aeabi_dcmplt>
 801d166:	2800      	cmp	r0, #0
 801d168:	f43f af14 	beq.w	801cf94 <_dtoa_r+0x43c>
 801d16c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d16e:	1e73      	subs	r3, r6, #1
 801d170:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d172:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d176:	2b30      	cmp	r3, #48	@ 0x30
 801d178:	d0f8      	beq.n	801d16c <_dtoa_r+0x614>
 801d17a:	4647      	mov	r7, r8
 801d17c:	e03b      	b.n	801d1f6 <_dtoa_r+0x69e>
 801d17e:	4b9e      	ldr	r3, [pc, #632]	@ (801d3f8 <_dtoa_r+0x8a0>)
 801d180:	f7e3 fa4a 	bl	8000618 <__aeabi_dmul>
 801d184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d188:	e7bc      	b.n	801d104 <_dtoa_r+0x5ac>
 801d18a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801d18e:	4656      	mov	r6, sl
 801d190:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d194:	4620      	mov	r0, r4
 801d196:	4629      	mov	r1, r5
 801d198:	f7e3 fb68 	bl	800086c <__aeabi_ddiv>
 801d19c:	f7e3 fcec 	bl	8000b78 <__aeabi_d2iz>
 801d1a0:	4680      	mov	r8, r0
 801d1a2:	f7e3 f9cf 	bl	8000544 <__aeabi_i2d>
 801d1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d1aa:	f7e3 fa35 	bl	8000618 <__aeabi_dmul>
 801d1ae:	4602      	mov	r2, r0
 801d1b0:	460b      	mov	r3, r1
 801d1b2:	4620      	mov	r0, r4
 801d1b4:	4629      	mov	r1, r5
 801d1b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d1ba:	f7e3 f875 	bl	80002a8 <__aeabi_dsub>
 801d1be:	f806 4b01 	strb.w	r4, [r6], #1
 801d1c2:	9d03      	ldr	r5, [sp, #12]
 801d1c4:	eba6 040a 	sub.w	r4, r6, sl
 801d1c8:	42a5      	cmp	r5, r4
 801d1ca:	4602      	mov	r2, r0
 801d1cc:	460b      	mov	r3, r1
 801d1ce:	d133      	bne.n	801d238 <_dtoa_r+0x6e0>
 801d1d0:	f7e3 f86c 	bl	80002ac <__adddf3>
 801d1d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d1d8:	4604      	mov	r4, r0
 801d1da:	460d      	mov	r5, r1
 801d1dc:	f7e3 fcac 	bl	8000b38 <__aeabi_dcmpgt>
 801d1e0:	b9c0      	cbnz	r0, 801d214 <_dtoa_r+0x6bc>
 801d1e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d1e6:	4620      	mov	r0, r4
 801d1e8:	4629      	mov	r1, r5
 801d1ea:	f7e3 fc7d 	bl	8000ae8 <__aeabi_dcmpeq>
 801d1ee:	b110      	cbz	r0, 801d1f6 <_dtoa_r+0x69e>
 801d1f0:	f018 0f01 	tst.w	r8, #1
 801d1f4:	d10e      	bne.n	801d214 <_dtoa_r+0x6bc>
 801d1f6:	9902      	ldr	r1, [sp, #8]
 801d1f8:	4648      	mov	r0, r9
 801d1fa:	f000 fe97 	bl	801df2c <_Bfree>
 801d1fe:	2300      	movs	r3, #0
 801d200:	7033      	strb	r3, [r6, #0]
 801d202:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d204:	3701      	adds	r7, #1
 801d206:	601f      	str	r7, [r3, #0]
 801d208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	f000 824b 	beq.w	801d6a6 <_dtoa_r+0xb4e>
 801d210:	601e      	str	r6, [r3, #0]
 801d212:	e248      	b.n	801d6a6 <_dtoa_r+0xb4e>
 801d214:	46b8      	mov	r8, r7
 801d216:	4633      	mov	r3, r6
 801d218:	461e      	mov	r6, r3
 801d21a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d21e:	2a39      	cmp	r2, #57	@ 0x39
 801d220:	d106      	bne.n	801d230 <_dtoa_r+0x6d8>
 801d222:	459a      	cmp	sl, r3
 801d224:	d1f8      	bne.n	801d218 <_dtoa_r+0x6c0>
 801d226:	2230      	movs	r2, #48	@ 0x30
 801d228:	f108 0801 	add.w	r8, r8, #1
 801d22c:	f88a 2000 	strb.w	r2, [sl]
 801d230:	781a      	ldrb	r2, [r3, #0]
 801d232:	3201      	adds	r2, #1
 801d234:	701a      	strb	r2, [r3, #0]
 801d236:	e7a0      	b.n	801d17a <_dtoa_r+0x622>
 801d238:	4b6f      	ldr	r3, [pc, #444]	@ (801d3f8 <_dtoa_r+0x8a0>)
 801d23a:	2200      	movs	r2, #0
 801d23c:	f7e3 f9ec 	bl	8000618 <__aeabi_dmul>
 801d240:	2200      	movs	r2, #0
 801d242:	2300      	movs	r3, #0
 801d244:	4604      	mov	r4, r0
 801d246:	460d      	mov	r5, r1
 801d248:	f7e3 fc4e 	bl	8000ae8 <__aeabi_dcmpeq>
 801d24c:	2800      	cmp	r0, #0
 801d24e:	d09f      	beq.n	801d190 <_dtoa_r+0x638>
 801d250:	e7d1      	b.n	801d1f6 <_dtoa_r+0x69e>
 801d252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d254:	2a00      	cmp	r2, #0
 801d256:	f000 80ea 	beq.w	801d42e <_dtoa_r+0x8d6>
 801d25a:	9a07      	ldr	r2, [sp, #28]
 801d25c:	2a01      	cmp	r2, #1
 801d25e:	f300 80cd 	bgt.w	801d3fc <_dtoa_r+0x8a4>
 801d262:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d264:	2a00      	cmp	r2, #0
 801d266:	f000 80c1 	beq.w	801d3ec <_dtoa_r+0x894>
 801d26a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d26e:	9c08      	ldr	r4, [sp, #32]
 801d270:	9e00      	ldr	r6, [sp, #0]
 801d272:	9a00      	ldr	r2, [sp, #0]
 801d274:	441a      	add	r2, r3
 801d276:	9200      	str	r2, [sp, #0]
 801d278:	9a06      	ldr	r2, [sp, #24]
 801d27a:	2101      	movs	r1, #1
 801d27c:	441a      	add	r2, r3
 801d27e:	4648      	mov	r0, r9
 801d280:	9206      	str	r2, [sp, #24]
 801d282:	f000 ff51 	bl	801e128 <__i2b>
 801d286:	4605      	mov	r5, r0
 801d288:	b166      	cbz	r6, 801d2a4 <_dtoa_r+0x74c>
 801d28a:	9b06      	ldr	r3, [sp, #24]
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	dd09      	ble.n	801d2a4 <_dtoa_r+0x74c>
 801d290:	42b3      	cmp	r3, r6
 801d292:	9a00      	ldr	r2, [sp, #0]
 801d294:	bfa8      	it	ge
 801d296:	4633      	movge	r3, r6
 801d298:	1ad2      	subs	r2, r2, r3
 801d29a:	9200      	str	r2, [sp, #0]
 801d29c:	9a06      	ldr	r2, [sp, #24]
 801d29e:	1af6      	subs	r6, r6, r3
 801d2a0:	1ad3      	subs	r3, r2, r3
 801d2a2:	9306      	str	r3, [sp, #24]
 801d2a4:	9b08      	ldr	r3, [sp, #32]
 801d2a6:	b30b      	cbz	r3, 801d2ec <_dtoa_r+0x794>
 801d2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	f000 80c6 	beq.w	801d43c <_dtoa_r+0x8e4>
 801d2b0:	2c00      	cmp	r4, #0
 801d2b2:	f000 80c0 	beq.w	801d436 <_dtoa_r+0x8de>
 801d2b6:	4629      	mov	r1, r5
 801d2b8:	4622      	mov	r2, r4
 801d2ba:	4648      	mov	r0, r9
 801d2bc:	f000 ffec 	bl	801e298 <__pow5mult>
 801d2c0:	9a02      	ldr	r2, [sp, #8]
 801d2c2:	4601      	mov	r1, r0
 801d2c4:	4605      	mov	r5, r0
 801d2c6:	4648      	mov	r0, r9
 801d2c8:	f000 ff44 	bl	801e154 <__multiply>
 801d2cc:	9902      	ldr	r1, [sp, #8]
 801d2ce:	4680      	mov	r8, r0
 801d2d0:	4648      	mov	r0, r9
 801d2d2:	f000 fe2b 	bl	801df2c <_Bfree>
 801d2d6:	9b08      	ldr	r3, [sp, #32]
 801d2d8:	1b1b      	subs	r3, r3, r4
 801d2da:	9308      	str	r3, [sp, #32]
 801d2dc:	f000 80b1 	beq.w	801d442 <_dtoa_r+0x8ea>
 801d2e0:	9a08      	ldr	r2, [sp, #32]
 801d2e2:	4641      	mov	r1, r8
 801d2e4:	4648      	mov	r0, r9
 801d2e6:	f000 ffd7 	bl	801e298 <__pow5mult>
 801d2ea:	9002      	str	r0, [sp, #8]
 801d2ec:	2101      	movs	r1, #1
 801d2ee:	4648      	mov	r0, r9
 801d2f0:	f000 ff1a 	bl	801e128 <__i2b>
 801d2f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2f6:	4604      	mov	r4, r0
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	f000 81d8 	beq.w	801d6ae <_dtoa_r+0xb56>
 801d2fe:	461a      	mov	r2, r3
 801d300:	4601      	mov	r1, r0
 801d302:	4648      	mov	r0, r9
 801d304:	f000 ffc8 	bl	801e298 <__pow5mult>
 801d308:	9b07      	ldr	r3, [sp, #28]
 801d30a:	2b01      	cmp	r3, #1
 801d30c:	4604      	mov	r4, r0
 801d30e:	f300 809f 	bgt.w	801d450 <_dtoa_r+0x8f8>
 801d312:	9b04      	ldr	r3, [sp, #16]
 801d314:	2b00      	cmp	r3, #0
 801d316:	f040 8097 	bne.w	801d448 <_dtoa_r+0x8f0>
 801d31a:	9b05      	ldr	r3, [sp, #20]
 801d31c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d320:	2b00      	cmp	r3, #0
 801d322:	f040 8093 	bne.w	801d44c <_dtoa_r+0x8f4>
 801d326:	9b05      	ldr	r3, [sp, #20]
 801d328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d32c:	0d1b      	lsrs	r3, r3, #20
 801d32e:	051b      	lsls	r3, r3, #20
 801d330:	b133      	cbz	r3, 801d340 <_dtoa_r+0x7e8>
 801d332:	9b00      	ldr	r3, [sp, #0]
 801d334:	3301      	adds	r3, #1
 801d336:	9300      	str	r3, [sp, #0]
 801d338:	9b06      	ldr	r3, [sp, #24]
 801d33a:	3301      	adds	r3, #1
 801d33c:	9306      	str	r3, [sp, #24]
 801d33e:	2301      	movs	r3, #1
 801d340:	9308      	str	r3, [sp, #32]
 801d342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d344:	2b00      	cmp	r3, #0
 801d346:	f000 81b8 	beq.w	801d6ba <_dtoa_r+0xb62>
 801d34a:	6923      	ldr	r3, [r4, #16]
 801d34c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d350:	6918      	ldr	r0, [r3, #16]
 801d352:	f000 fe9d 	bl	801e090 <__hi0bits>
 801d356:	f1c0 0020 	rsb	r0, r0, #32
 801d35a:	9b06      	ldr	r3, [sp, #24]
 801d35c:	4418      	add	r0, r3
 801d35e:	f010 001f 	ands.w	r0, r0, #31
 801d362:	f000 8082 	beq.w	801d46a <_dtoa_r+0x912>
 801d366:	f1c0 0320 	rsb	r3, r0, #32
 801d36a:	2b04      	cmp	r3, #4
 801d36c:	dd73      	ble.n	801d456 <_dtoa_r+0x8fe>
 801d36e:	9b00      	ldr	r3, [sp, #0]
 801d370:	f1c0 001c 	rsb	r0, r0, #28
 801d374:	4403      	add	r3, r0
 801d376:	9300      	str	r3, [sp, #0]
 801d378:	9b06      	ldr	r3, [sp, #24]
 801d37a:	4403      	add	r3, r0
 801d37c:	4406      	add	r6, r0
 801d37e:	9306      	str	r3, [sp, #24]
 801d380:	9b00      	ldr	r3, [sp, #0]
 801d382:	2b00      	cmp	r3, #0
 801d384:	dd05      	ble.n	801d392 <_dtoa_r+0x83a>
 801d386:	9902      	ldr	r1, [sp, #8]
 801d388:	461a      	mov	r2, r3
 801d38a:	4648      	mov	r0, r9
 801d38c:	f000 ffde 	bl	801e34c <__lshift>
 801d390:	9002      	str	r0, [sp, #8]
 801d392:	9b06      	ldr	r3, [sp, #24]
 801d394:	2b00      	cmp	r3, #0
 801d396:	dd05      	ble.n	801d3a4 <_dtoa_r+0x84c>
 801d398:	4621      	mov	r1, r4
 801d39a:	461a      	mov	r2, r3
 801d39c:	4648      	mov	r0, r9
 801d39e:	f000 ffd5 	bl	801e34c <__lshift>
 801d3a2:	4604      	mov	r4, r0
 801d3a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d061      	beq.n	801d46e <_dtoa_r+0x916>
 801d3aa:	9802      	ldr	r0, [sp, #8]
 801d3ac:	4621      	mov	r1, r4
 801d3ae:	f001 f839 	bl	801e424 <__mcmp>
 801d3b2:	2800      	cmp	r0, #0
 801d3b4:	da5b      	bge.n	801d46e <_dtoa_r+0x916>
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	9902      	ldr	r1, [sp, #8]
 801d3ba:	220a      	movs	r2, #10
 801d3bc:	4648      	mov	r0, r9
 801d3be:	f000 fdd7 	bl	801df70 <__multadd>
 801d3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3c4:	9002      	str	r0, [sp, #8]
 801d3c6:	f107 38ff 	add.w	r8, r7, #4294967295
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	f000 8177 	beq.w	801d6be <_dtoa_r+0xb66>
 801d3d0:	4629      	mov	r1, r5
 801d3d2:	2300      	movs	r3, #0
 801d3d4:	220a      	movs	r2, #10
 801d3d6:	4648      	mov	r0, r9
 801d3d8:	f000 fdca 	bl	801df70 <__multadd>
 801d3dc:	f1bb 0f00 	cmp.w	fp, #0
 801d3e0:	4605      	mov	r5, r0
 801d3e2:	dc6f      	bgt.n	801d4c4 <_dtoa_r+0x96c>
 801d3e4:	9b07      	ldr	r3, [sp, #28]
 801d3e6:	2b02      	cmp	r3, #2
 801d3e8:	dc49      	bgt.n	801d47e <_dtoa_r+0x926>
 801d3ea:	e06b      	b.n	801d4c4 <_dtoa_r+0x96c>
 801d3ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d3ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d3f2:	e73c      	b.n	801d26e <_dtoa_r+0x716>
 801d3f4:	3fe00000 	.word	0x3fe00000
 801d3f8:	40240000 	.word	0x40240000
 801d3fc:	9b03      	ldr	r3, [sp, #12]
 801d3fe:	1e5c      	subs	r4, r3, #1
 801d400:	9b08      	ldr	r3, [sp, #32]
 801d402:	42a3      	cmp	r3, r4
 801d404:	db09      	blt.n	801d41a <_dtoa_r+0x8c2>
 801d406:	1b1c      	subs	r4, r3, r4
 801d408:	9b03      	ldr	r3, [sp, #12]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	f6bf af30 	bge.w	801d270 <_dtoa_r+0x718>
 801d410:	9b00      	ldr	r3, [sp, #0]
 801d412:	9a03      	ldr	r2, [sp, #12]
 801d414:	1a9e      	subs	r6, r3, r2
 801d416:	2300      	movs	r3, #0
 801d418:	e72b      	b.n	801d272 <_dtoa_r+0x71a>
 801d41a:	9b08      	ldr	r3, [sp, #32]
 801d41c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d41e:	9408      	str	r4, [sp, #32]
 801d420:	1ae3      	subs	r3, r4, r3
 801d422:	441a      	add	r2, r3
 801d424:	9e00      	ldr	r6, [sp, #0]
 801d426:	9b03      	ldr	r3, [sp, #12]
 801d428:	920d      	str	r2, [sp, #52]	@ 0x34
 801d42a:	2400      	movs	r4, #0
 801d42c:	e721      	b.n	801d272 <_dtoa_r+0x71a>
 801d42e:	9c08      	ldr	r4, [sp, #32]
 801d430:	9e00      	ldr	r6, [sp, #0]
 801d432:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801d434:	e728      	b.n	801d288 <_dtoa_r+0x730>
 801d436:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801d43a:	e751      	b.n	801d2e0 <_dtoa_r+0x788>
 801d43c:	9a08      	ldr	r2, [sp, #32]
 801d43e:	9902      	ldr	r1, [sp, #8]
 801d440:	e750      	b.n	801d2e4 <_dtoa_r+0x78c>
 801d442:	f8cd 8008 	str.w	r8, [sp, #8]
 801d446:	e751      	b.n	801d2ec <_dtoa_r+0x794>
 801d448:	2300      	movs	r3, #0
 801d44a:	e779      	b.n	801d340 <_dtoa_r+0x7e8>
 801d44c:	9b04      	ldr	r3, [sp, #16]
 801d44e:	e777      	b.n	801d340 <_dtoa_r+0x7e8>
 801d450:	2300      	movs	r3, #0
 801d452:	9308      	str	r3, [sp, #32]
 801d454:	e779      	b.n	801d34a <_dtoa_r+0x7f2>
 801d456:	d093      	beq.n	801d380 <_dtoa_r+0x828>
 801d458:	9a00      	ldr	r2, [sp, #0]
 801d45a:	331c      	adds	r3, #28
 801d45c:	441a      	add	r2, r3
 801d45e:	9200      	str	r2, [sp, #0]
 801d460:	9a06      	ldr	r2, [sp, #24]
 801d462:	441a      	add	r2, r3
 801d464:	441e      	add	r6, r3
 801d466:	9206      	str	r2, [sp, #24]
 801d468:	e78a      	b.n	801d380 <_dtoa_r+0x828>
 801d46a:	4603      	mov	r3, r0
 801d46c:	e7f4      	b.n	801d458 <_dtoa_r+0x900>
 801d46e:	9b03      	ldr	r3, [sp, #12]
 801d470:	2b00      	cmp	r3, #0
 801d472:	46b8      	mov	r8, r7
 801d474:	dc20      	bgt.n	801d4b8 <_dtoa_r+0x960>
 801d476:	469b      	mov	fp, r3
 801d478:	9b07      	ldr	r3, [sp, #28]
 801d47a:	2b02      	cmp	r3, #2
 801d47c:	dd1e      	ble.n	801d4bc <_dtoa_r+0x964>
 801d47e:	f1bb 0f00 	cmp.w	fp, #0
 801d482:	f47f adb1 	bne.w	801cfe8 <_dtoa_r+0x490>
 801d486:	4621      	mov	r1, r4
 801d488:	465b      	mov	r3, fp
 801d48a:	2205      	movs	r2, #5
 801d48c:	4648      	mov	r0, r9
 801d48e:	f000 fd6f 	bl	801df70 <__multadd>
 801d492:	4601      	mov	r1, r0
 801d494:	4604      	mov	r4, r0
 801d496:	9802      	ldr	r0, [sp, #8]
 801d498:	f000 ffc4 	bl	801e424 <__mcmp>
 801d49c:	2800      	cmp	r0, #0
 801d49e:	f77f ada3 	ble.w	801cfe8 <_dtoa_r+0x490>
 801d4a2:	4656      	mov	r6, sl
 801d4a4:	2331      	movs	r3, #49	@ 0x31
 801d4a6:	f806 3b01 	strb.w	r3, [r6], #1
 801d4aa:	f108 0801 	add.w	r8, r8, #1
 801d4ae:	e59f      	b.n	801cff0 <_dtoa_r+0x498>
 801d4b0:	9c03      	ldr	r4, [sp, #12]
 801d4b2:	46b8      	mov	r8, r7
 801d4b4:	4625      	mov	r5, r4
 801d4b6:	e7f4      	b.n	801d4a2 <_dtoa_r+0x94a>
 801d4b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801d4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	f000 8101 	beq.w	801d6c6 <_dtoa_r+0xb6e>
 801d4c4:	2e00      	cmp	r6, #0
 801d4c6:	dd05      	ble.n	801d4d4 <_dtoa_r+0x97c>
 801d4c8:	4629      	mov	r1, r5
 801d4ca:	4632      	mov	r2, r6
 801d4cc:	4648      	mov	r0, r9
 801d4ce:	f000 ff3d 	bl	801e34c <__lshift>
 801d4d2:	4605      	mov	r5, r0
 801d4d4:	9b08      	ldr	r3, [sp, #32]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d05c      	beq.n	801d594 <_dtoa_r+0xa3c>
 801d4da:	6869      	ldr	r1, [r5, #4]
 801d4dc:	4648      	mov	r0, r9
 801d4de:	f000 fce5 	bl	801deac <_Balloc>
 801d4e2:	4606      	mov	r6, r0
 801d4e4:	b928      	cbnz	r0, 801d4f2 <_dtoa_r+0x99a>
 801d4e6:	4b82      	ldr	r3, [pc, #520]	@ (801d6f0 <_dtoa_r+0xb98>)
 801d4e8:	4602      	mov	r2, r0
 801d4ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d4ee:	f7ff bb4a 	b.w	801cb86 <_dtoa_r+0x2e>
 801d4f2:	692a      	ldr	r2, [r5, #16]
 801d4f4:	3202      	adds	r2, #2
 801d4f6:	0092      	lsls	r2, r2, #2
 801d4f8:	f105 010c 	add.w	r1, r5, #12
 801d4fc:	300c      	adds	r0, #12
 801d4fe:	f7ff fa0a 	bl	801c916 <memcpy>
 801d502:	2201      	movs	r2, #1
 801d504:	4631      	mov	r1, r6
 801d506:	4648      	mov	r0, r9
 801d508:	f000 ff20 	bl	801e34c <__lshift>
 801d50c:	f10a 0301 	add.w	r3, sl, #1
 801d510:	9300      	str	r3, [sp, #0]
 801d512:	eb0a 030b 	add.w	r3, sl, fp
 801d516:	9308      	str	r3, [sp, #32]
 801d518:	9b04      	ldr	r3, [sp, #16]
 801d51a:	f003 0301 	and.w	r3, r3, #1
 801d51e:	462f      	mov	r7, r5
 801d520:	9306      	str	r3, [sp, #24]
 801d522:	4605      	mov	r5, r0
 801d524:	9b00      	ldr	r3, [sp, #0]
 801d526:	9802      	ldr	r0, [sp, #8]
 801d528:	4621      	mov	r1, r4
 801d52a:	f103 3bff 	add.w	fp, r3, #4294967295
 801d52e:	f7ff fa89 	bl	801ca44 <quorem>
 801d532:	4603      	mov	r3, r0
 801d534:	3330      	adds	r3, #48	@ 0x30
 801d536:	9003      	str	r0, [sp, #12]
 801d538:	4639      	mov	r1, r7
 801d53a:	9802      	ldr	r0, [sp, #8]
 801d53c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d53e:	f000 ff71 	bl	801e424 <__mcmp>
 801d542:	462a      	mov	r2, r5
 801d544:	9004      	str	r0, [sp, #16]
 801d546:	4621      	mov	r1, r4
 801d548:	4648      	mov	r0, r9
 801d54a:	f000 ff87 	bl	801e45c <__mdiff>
 801d54e:	68c2      	ldr	r2, [r0, #12]
 801d550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d552:	4606      	mov	r6, r0
 801d554:	bb02      	cbnz	r2, 801d598 <_dtoa_r+0xa40>
 801d556:	4601      	mov	r1, r0
 801d558:	9802      	ldr	r0, [sp, #8]
 801d55a:	f000 ff63 	bl	801e424 <__mcmp>
 801d55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d560:	4602      	mov	r2, r0
 801d562:	4631      	mov	r1, r6
 801d564:	4648      	mov	r0, r9
 801d566:	920c      	str	r2, [sp, #48]	@ 0x30
 801d568:	9309      	str	r3, [sp, #36]	@ 0x24
 801d56a:	f000 fcdf 	bl	801df2c <_Bfree>
 801d56e:	9b07      	ldr	r3, [sp, #28]
 801d570:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d572:	9e00      	ldr	r6, [sp, #0]
 801d574:	ea42 0103 	orr.w	r1, r2, r3
 801d578:	9b06      	ldr	r3, [sp, #24]
 801d57a:	4319      	orrs	r1, r3
 801d57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d57e:	d10d      	bne.n	801d59c <_dtoa_r+0xa44>
 801d580:	2b39      	cmp	r3, #57	@ 0x39
 801d582:	d027      	beq.n	801d5d4 <_dtoa_r+0xa7c>
 801d584:	9a04      	ldr	r2, [sp, #16]
 801d586:	2a00      	cmp	r2, #0
 801d588:	dd01      	ble.n	801d58e <_dtoa_r+0xa36>
 801d58a:	9b03      	ldr	r3, [sp, #12]
 801d58c:	3331      	adds	r3, #49	@ 0x31
 801d58e:	f88b 3000 	strb.w	r3, [fp]
 801d592:	e52e      	b.n	801cff2 <_dtoa_r+0x49a>
 801d594:	4628      	mov	r0, r5
 801d596:	e7b9      	b.n	801d50c <_dtoa_r+0x9b4>
 801d598:	2201      	movs	r2, #1
 801d59a:	e7e2      	b.n	801d562 <_dtoa_r+0xa0a>
 801d59c:	9904      	ldr	r1, [sp, #16]
 801d59e:	2900      	cmp	r1, #0
 801d5a0:	db04      	blt.n	801d5ac <_dtoa_r+0xa54>
 801d5a2:	9807      	ldr	r0, [sp, #28]
 801d5a4:	4301      	orrs	r1, r0
 801d5a6:	9806      	ldr	r0, [sp, #24]
 801d5a8:	4301      	orrs	r1, r0
 801d5aa:	d120      	bne.n	801d5ee <_dtoa_r+0xa96>
 801d5ac:	2a00      	cmp	r2, #0
 801d5ae:	ddee      	ble.n	801d58e <_dtoa_r+0xa36>
 801d5b0:	9902      	ldr	r1, [sp, #8]
 801d5b2:	9300      	str	r3, [sp, #0]
 801d5b4:	2201      	movs	r2, #1
 801d5b6:	4648      	mov	r0, r9
 801d5b8:	f000 fec8 	bl	801e34c <__lshift>
 801d5bc:	4621      	mov	r1, r4
 801d5be:	9002      	str	r0, [sp, #8]
 801d5c0:	f000 ff30 	bl	801e424 <__mcmp>
 801d5c4:	2800      	cmp	r0, #0
 801d5c6:	9b00      	ldr	r3, [sp, #0]
 801d5c8:	dc02      	bgt.n	801d5d0 <_dtoa_r+0xa78>
 801d5ca:	d1e0      	bne.n	801d58e <_dtoa_r+0xa36>
 801d5cc:	07da      	lsls	r2, r3, #31
 801d5ce:	d5de      	bpl.n	801d58e <_dtoa_r+0xa36>
 801d5d0:	2b39      	cmp	r3, #57	@ 0x39
 801d5d2:	d1da      	bne.n	801d58a <_dtoa_r+0xa32>
 801d5d4:	2339      	movs	r3, #57	@ 0x39
 801d5d6:	f88b 3000 	strb.w	r3, [fp]
 801d5da:	4633      	mov	r3, r6
 801d5dc:	461e      	mov	r6, r3
 801d5de:	3b01      	subs	r3, #1
 801d5e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d5e4:	2a39      	cmp	r2, #57	@ 0x39
 801d5e6:	d04e      	beq.n	801d686 <_dtoa_r+0xb2e>
 801d5e8:	3201      	adds	r2, #1
 801d5ea:	701a      	strb	r2, [r3, #0]
 801d5ec:	e501      	b.n	801cff2 <_dtoa_r+0x49a>
 801d5ee:	2a00      	cmp	r2, #0
 801d5f0:	dd03      	ble.n	801d5fa <_dtoa_r+0xaa2>
 801d5f2:	2b39      	cmp	r3, #57	@ 0x39
 801d5f4:	d0ee      	beq.n	801d5d4 <_dtoa_r+0xa7c>
 801d5f6:	3301      	adds	r3, #1
 801d5f8:	e7c9      	b.n	801d58e <_dtoa_r+0xa36>
 801d5fa:	9a00      	ldr	r2, [sp, #0]
 801d5fc:	9908      	ldr	r1, [sp, #32]
 801d5fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d602:	428a      	cmp	r2, r1
 801d604:	d028      	beq.n	801d658 <_dtoa_r+0xb00>
 801d606:	9902      	ldr	r1, [sp, #8]
 801d608:	2300      	movs	r3, #0
 801d60a:	220a      	movs	r2, #10
 801d60c:	4648      	mov	r0, r9
 801d60e:	f000 fcaf 	bl	801df70 <__multadd>
 801d612:	42af      	cmp	r7, r5
 801d614:	9002      	str	r0, [sp, #8]
 801d616:	f04f 0300 	mov.w	r3, #0
 801d61a:	f04f 020a 	mov.w	r2, #10
 801d61e:	4639      	mov	r1, r7
 801d620:	4648      	mov	r0, r9
 801d622:	d107      	bne.n	801d634 <_dtoa_r+0xadc>
 801d624:	f000 fca4 	bl	801df70 <__multadd>
 801d628:	4607      	mov	r7, r0
 801d62a:	4605      	mov	r5, r0
 801d62c:	9b00      	ldr	r3, [sp, #0]
 801d62e:	3301      	adds	r3, #1
 801d630:	9300      	str	r3, [sp, #0]
 801d632:	e777      	b.n	801d524 <_dtoa_r+0x9cc>
 801d634:	f000 fc9c 	bl	801df70 <__multadd>
 801d638:	4629      	mov	r1, r5
 801d63a:	4607      	mov	r7, r0
 801d63c:	2300      	movs	r3, #0
 801d63e:	220a      	movs	r2, #10
 801d640:	4648      	mov	r0, r9
 801d642:	f000 fc95 	bl	801df70 <__multadd>
 801d646:	4605      	mov	r5, r0
 801d648:	e7f0      	b.n	801d62c <_dtoa_r+0xad4>
 801d64a:	f1bb 0f00 	cmp.w	fp, #0
 801d64e:	bfcc      	ite	gt
 801d650:	465e      	movgt	r6, fp
 801d652:	2601      	movle	r6, #1
 801d654:	4456      	add	r6, sl
 801d656:	2700      	movs	r7, #0
 801d658:	9902      	ldr	r1, [sp, #8]
 801d65a:	9300      	str	r3, [sp, #0]
 801d65c:	2201      	movs	r2, #1
 801d65e:	4648      	mov	r0, r9
 801d660:	f000 fe74 	bl	801e34c <__lshift>
 801d664:	4621      	mov	r1, r4
 801d666:	9002      	str	r0, [sp, #8]
 801d668:	f000 fedc 	bl	801e424 <__mcmp>
 801d66c:	2800      	cmp	r0, #0
 801d66e:	dcb4      	bgt.n	801d5da <_dtoa_r+0xa82>
 801d670:	d102      	bne.n	801d678 <_dtoa_r+0xb20>
 801d672:	9b00      	ldr	r3, [sp, #0]
 801d674:	07db      	lsls	r3, r3, #31
 801d676:	d4b0      	bmi.n	801d5da <_dtoa_r+0xa82>
 801d678:	4633      	mov	r3, r6
 801d67a:	461e      	mov	r6, r3
 801d67c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d680:	2a30      	cmp	r2, #48	@ 0x30
 801d682:	d0fa      	beq.n	801d67a <_dtoa_r+0xb22>
 801d684:	e4b5      	b.n	801cff2 <_dtoa_r+0x49a>
 801d686:	459a      	cmp	sl, r3
 801d688:	d1a8      	bne.n	801d5dc <_dtoa_r+0xa84>
 801d68a:	2331      	movs	r3, #49	@ 0x31
 801d68c:	f108 0801 	add.w	r8, r8, #1
 801d690:	f88a 3000 	strb.w	r3, [sl]
 801d694:	e4ad      	b.n	801cff2 <_dtoa_r+0x49a>
 801d696:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d698:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801d6f4 <_dtoa_r+0xb9c>
 801d69c:	b11b      	cbz	r3, 801d6a6 <_dtoa_r+0xb4e>
 801d69e:	f10a 0308 	add.w	r3, sl, #8
 801d6a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d6a4:	6013      	str	r3, [r2, #0]
 801d6a6:	4650      	mov	r0, sl
 801d6a8:	b017      	add	sp, #92	@ 0x5c
 801d6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6ae:	9b07      	ldr	r3, [sp, #28]
 801d6b0:	2b01      	cmp	r3, #1
 801d6b2:	f77f ae2e 	ble.w	801d312 <_dtoa_r+0x7ba>
 801d6b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d6b8:	9308      	str	r3, [sp, #32]
 801d6ba:	2001      	movs	r0, #1
 801d6bc:	e64d      	b.n	801d35a <_dtoa_r+0x802>
 801d6be:	f1bb 0f00 	cmp.w	fp, #0
 801d6c2:	f77f aed9 	ble.w	801d478 <_dtoa_r+0x920>
 801d6c6:	4656      	mov	r6, sl
 801d6c8:	9802      	ldr	r0, [sp, #8]
 801d6ca:	4621      	mov	r1, r4
 801d6cc:	f7ff f9ba 	bl	801ca44 <quorem>
 801d6d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801d6d4:	f806 3b01 	strb.w	r3, [r6], #1
 801d6d8:	eba6 020a 	sub.w	r2, r6, sl
 801d6dc:	4593      	cmp	fp, r2
 801d6de:	ddb4      	ble.n	801d64a <_dtoa_r+0xaf2>
 801d6e0:	9902      	ldr	r1, [sp, #8]
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	220a      	movs	r2, #10
 801d6e6:	4648      	mov	r0, r9
 801d6e8:	f000 fc42 	bl	801df70 <__multadd>
 801d6ec:	9002      	str	r0, [sp, #8]
 801d6ee:	e7eb      	b.n	801d6c8 <_dtoa_r+0xb70>
 801d6f0:	08024d71 	.word	0x08024d71
 801d6f4:	08024d0c 	.word	0x08024d0c

0801d6f8 <_free_r>:
 801d6f8:	b538      	push	{r3, r4, r5, lr}
 801d6fa:	4605      	mov	r5, r0
 801d6fc:	2900      	cmp	r1, #0
 801d6fe:	d041      	beq.n	801d784 <_free_r+0x8c>
 801d700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d704:	1f0c      	subs	r4, r1, #4
 801d706:	2b00      	cmp	r3, #0
 801d708:	bfb8      	it	lt
 801d70a:	18e4      	addlt	r4, r4, r3
 801d70c:	f7fc f994 	bl	8019a38 <__malloc_lock>
 801d710:	4a1d      	ldr	r2, [pc, #116]	@ (801d788 <_free_r+0x90>)
 801d712:	6813      	ldr	r3, [r2, #0]
 801d714:	b933      	cbnz	r3, 801d724 <_free_r+0x2c>
 801d716:	6063      	str	r3, [r4, #4]
 801d718:	6014      	str	r4, [r2, #0]
 801d71a:	4628      	mov	r0, r5
 801d71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d720:	f7fc b990 	b.w	8019a44 <__malloc_unlock>
 801d724:	42a3      	cmp	r3, r4
 801d726:	d908      	bls.n	801d73a <_free_r+0x42>
 801d728:	6820      	ldr	r0, [r4, #0]
 801d72a:	1821      	adds	r1, r4, r0
 801d72c:	428b      	cmp	r3, r1
 801d72e:	bf01      	itttt	eq
 801d730:	6819      	ldreq	r1, [r3, #0]
 801d732:	685b      	ldreq	r3, [r3, #4]
 801d734:	1809      	addeq	r1, r1, r0
 801d736:	6021      	streq	r1, [r4, #0]
 801d738:	e7ed      	b.n	801d716 <_free_r+0x1e>
 801d73a:	461a      	mov	r2, r3
 801d73c:	685b      	ldr	r3, [r3, #4]
 801d73e:	b10b      	cbz	r3, 801d744 <_free_r+0x4c>
 801d740:	42a3      	cmp	r3, r4
 801d742:	d9fa      	bls.n	801d73a <_free_r+0x42>
 801d744:	6811      	ldr	r1, [r2, #0]
 801d746:	1850      	adds	r0, r2, r1
 801d748:	42a0      	cmp	r0, r4
 801d74a:	d10b      	bne.n	801d764 <_free_r+0x6c>
 801d74c:	6820      	ldr	r0, [r4, #0]
 801d74e:	4401      	add	r1, r0
 801d750:	1850      	adds	r0, r2, r1
 801d752:	4283      	cmp	r3, r0
 801d754:	6011      	str	r1, [r2, #0]
 801d756:	d1e0      	bne.n	801d71a <_free_r+0x22>
 801d758:	6818      	ldr	r0, [r3, #0]
 801d75a:	685b      	ldr	r3, [r3, #4]
 801d75c:	6053      	str	r3, [r2, #4]
 801d75e:	4408      	add	r0, r1
 801d760:	6010      	str	r0, [r2, #0]
 801d762:	e7da      	b.n	801d71a <_free_r+0x22>
 801d764:	d902      	bls.n	801d76c <_free_r+0x74>
 801d766:	230c      	movs	r3, #12
 801d768:	602b      	str	r3, [r5, #0]
 801d76a:	e7d6      	b.n	801d71a <_free_r+0x22>
 801d76c:	6820      	ldr	r0, [r4, #0]
 801d76e:	1821      	adds	r1, r4, r0
 801d770:	428b      	cmp	r3, r1
 801d772:	bf04      	itt	eq
 801d774:	6819      	ldreq	r1, [r3, #0]
 801d776:	685b      	ldreq	r3, [r3, #4]
 801d778:	6063      	str	r3, [r4, #4]
 801d77a:	bf04      	itt	eq
 801d77c:	1809      	addeq	r1, r1, r0
 801d77e:	6021      	streq	r1, [r4, #0]
 801d780:	6054      	str	r4, [r2, #4]
 801d782:	e7ca      	b.n	801d71a <_free_r+0x22>
 801d784:	bd38      	pop	{r3, r4, r5, pc}
 801d786:	bf00      	nop
 801d788:	2000646c 	.word	0x2000646c

0801d78c <rshift>:
 801d78c:	6903      	ldr	r3, [r0, #16]
 801d78e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d796:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d79a:	f100 0414 	add.w	r4, r0, #20
 801d79e:	dd45      	ble.n	801d82c <rshift+0xa0>
 801d7a0:	f011 011f 	ands.w	r1, r1, #31
 801d7a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d7a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d7ac:	d10c      	bne.n	801d7c8 <rshift+0x3c>
 801d7ae:	f100 0710 	add.w	r7, r0, #16
 801d7b2:	4629      	mov	r1, r5
 801d7b4:	42b1      	cmp	r1, r6
 801d7b6:	d334      	bcc.n	801d822 <rshift+0x96>
 801d7b8:	1a9b      	subs	r3, r3, r2
 801d7ba:	009b      	lsls	r3, r3, #2
 801d7bc:	1eea      	subs	r2, r5, #3
 801d7be:	4296      	cmp	r6, r2
 801d7c0:	bf38      	it	cc
 801d7c2:	2300      	movcc	r3, #0
 801d7c4:	4423      	add	r3, r4
 801d7c6:	e015      	b.n	801d7f4 <rshift+0x68>
 801d7c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d7cc:	f1c1 0820 	rsb	r8, r1, #32
 801d7d0:	40cf      	lsrs	r7, r1
 801d7d2:	f105 0e04 	add.w	lr, r5, #4
 801d7d6:	46a1      	mov	r9, r4
 801d7d8:	4576      	cmp	r6, lr
 801d7da:	46f4      	mov	ip, lr
 801d7dc:	d815      	bhi.n	801d80a <rshift+0x7e>
 801d7de:	1a9a      	subs	r2, r3, r2
 801d7e0:	0092      	lsls	r2, r2, #2
 801d7e2:	3a04      	subs	r2, #4
 801d7e4:	3501      	adds	r5, #1
 801d7e6:	42ae      	cmp	r6, r5
 801d7e8:	bf38      	it	cc
 801d7ea:	2200      	movcc	r2, #0
 801d7ec:	18a3      	adds	r3, r4, r2
 801d7ee:	50a7      	str	r7, [r4, r2]
 801d7f0:	b107      	cbz	r7, 801d7f4 <rshift+0x68>
 801d7f2:	3304      	adds	r3, #4
 801d7f4:	1b1a      	subs	r2, r3, r4
 801d7f6:	42a3      	cmp	r3, r4
 801d7f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d7fc:	bf08      	it	eq
 801d7fe:	2300      	moveq	r3, #0
 801d800:	6102      	str	r2, [r0, #16]
 801d802:	bf08      	it	eq
 801d804:	6143      	streq	r3, [r0, #20]
 801d806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d80a:	f8dc c000 	ldr.w	ip, [ip]
 801d80e:	fa0c fc08 	lsl.w	ip, ip, r8
 801d812:	ea4c 0707 	orr.w	r7, ip, r7
 801d816:	f849 7b04 	str.w	r7, [r9], #4
 801d81a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d81e:	40cf      	lsrs	r7, r1
 801d820:	e7da      	b.n	801d7d8 <rshift+0x4c>
 801d822:	f851 cb04 	ldr.w	ip, [r1], #4
 801d826:	f847 cf04 	str.w	ip, [r7, #4]!
 801d82a:	e7c3      	b.n	801d7b4 <rshift+0x28>
 801d82c:	4623      	mov	r3, r4
 801d82e:	e7e1      	b.n	801d7f4 <rshift+0x68>

0801d830 <__hexdig_fun>:
 801d830:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801d834:	2b09      	cmp	r3, #9
 801d836:	d802      	bhi.n	801d83e <__hexdig_fun+0xe>
 801d838:	3820      	subs	r0, #32
 801d83a:	b2c0      	uxtb	r0, r0
 801d83c:	4770      	bx	lr
 801d83e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801d842:	2b05      	cmp	r3, #5
 801d844:	d801      	bhi.n	801d84a <__hexdig_fun+0x1a>
 801d846:	3847      	subs	r0, #71	@ 0x47
 801d848:	e7f7      	b.n	801d83a <__hexdig_fun+0xa>
 801d84a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801d84e:	2b05      	cmp	r3, #5
 801d850:	d801      	bhi.n	801d856 <__hexdig_fun+0x26>
 801d852:	3827      	subs	r0, #39	@ 0x27
 801d854:	e7f1      	b.n	801d83a <__hexdig_fun+0xa>
 801d856:	2000      	movs	r0, #0
 801d858:	4770      	bx	lr
	...

0801d85c <__gethex>:
 801d85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d860:	b085      	sub	sp, #20
 801d862:	468a      	mov	sl, r1
 801d864:	9302      	str	r3, [sp, #8]
 801d866:	680b      	ldr	r3, [r1, #0]
 801d868:	9001      	str	r0, [sp, #4]
 801d86a:	4690      	mov	r8, r2
 801d86c:	1c9c      	adds	r4, r3, #2
 801d86e:	46a1      	mov	r9, r4
 801d870:	f814 0b01 	ldrb.w	r0, [r4], #1
 801d874:	2830      	cmp	r0, #48	@ 0x30
 801d876:	d0fa      	beq.n	801d86e <__gethex+0x12>
 801d878:	eba9 0303 	sub.w	r3, r9, r3
 801d87c:	f1a3 0b02 	sub.w	fp, r3, #2
 801d880:	f7ff ffd6 	bl	801d830 <__hexdig_fun>
 801d884:	4605      	mov	r5, r0
 801d886:	2800      	cmp	r0, #0
 801d888:	d168      	bne.n	801d95c <__gethex+0x100>
 801d88a:	49a0      	ldr	r1, [pc, #640]	@ (801db0c <__gethex+0x2b0>)
 801d88c:	2201      	movs	r2, #1
 801d88e:	4648      	mov	r0, r9
 801d890:	f7fd ff71 	bl	801b776 <strncmp>
 801d894:	4607      	mov	r7, r0
 801d896:	2800      	cmp	r0, #0
 801d898:	d167      	bne.n	801d96a <__gethex+0x10e>
 801d89a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801d89e:	4626      	mov	r6, r4
 801d8a0:	f7ff ffc6 	bl	801d830 <__hexdig_fun>
 801d8a4:	2800      	cmp	r0, #0
 801d8a6:	d062      	beq.n	801d96e <__gethex+0x112>
 801d8a8:	4623      	mov	r3, r4
 801d8aa:	7818      	ldrb	r0, [r3, #0]
 801d8ac:	2830      	cmp	r0, #48	@ 0x30
 801d8ae:	4699      	mov	r9, r3
 801d8b0:	f103 0301 	add.w	r3, r3, #1
 801d8b4:	d0f9      	beq.n	801d8aa <__gethex+0x4e>
 801d8b6:	f7ff ffbb 	bl	801d830 <__hexdig_fun>
 801d8ba:	fab0 f580 	clz	r5, r0
 801d8be:	096d      	lsrs	r5, r5, #5
 801d8c0:	f04f 0b01 	mov.w	fp, #1
 801d8c4:	464a      	mov	r2, r9
 801d8c6:	4616      	mov	r6, r2
 801d8c8:	3201      	adds	r2, #1
 801d8ca:	7830      	ldrb	r0, [r6, #0]
 801d8cc:	f7ff ffb0 	bl	801d830 <__hexdig_fun>
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	d1f8      	bne.n	801d8c6 <__gethex+0x6a>
 801d8d4:	498d      	ldr	r1, [pc, #564]	@ (801db0c <__gethex+0x2b0>)
 801d8d6:	2201      	movs	r2, #1
 801d8d8:	4630      	mov	r0, r6
 801d8da:	f7fd ff4c 	bl	801b776 <strncmp>
 801d8de:	2800      	cmp	r0, #0
 801d8e0:	d13f      	bne.n	801d962 <__gethex+0x106>
 801d8e2:	b944      	cbnz	r4, 801d8f6 <__gethex+0x9a>
 801d8e4:	1c74      	adds	r4, r6, #1
 801d8e6:	4622      	mov	r2, r4
 801d8e8:	4616      	mov	r6, r2
 801d8ea:	3201      	adds	r2, #1
 801d8ec:	7830      	ldrb	r0, [r6, #0]
 801d8ee:	f7ff ff9f 	bl	801d830 <__hexdig_fun>
 801d8f2:	2800      	cmp	r0, #0
 801d8f4:	d1f8      	bne.n	801d8e8 <__gethex+0x8c>
 801d8f6:	1ba4      	subs	r4, r4, r6
 801d8f8:	00a7      	lsls	r7, r4, #2
 801d8fa:	7833      	ldrb	r3, [r6, #0]
 801d8fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801d900:	2b50      	cmp	r3, #80	@ 0x50
 801d902:	d13e      	bne.n	801d982 <__gethex+0x126>
 801d904:	7873      	ldrb	r3, [r6, #1]
 801d906:	2b2b      	cmp	r3, #43	@ 0x2b
 801d908:	d033      	beq.n	801d972 <__gethex+0x116>
 801d90a:	2b2d      	cmp	r3, #45	@ 0x2d
 801d90c:	d034      	beq.n	801d978 <__gethex+0x11c>
 801d90e:	1c71      	adds	r1, r6, #1
 801d910:	2400      	movs	r4, #0
 801d912:	7808      	ldrb	r0, [r1, #0]
 801d914:	f7ff ff8c 	bl	801d830 <__hexdig_fun>
 801d918:	1e43      	subs	r3, r0, #1
 801d91a:	b2db      	uxtb	r3, r3
 801d91c:	2b18      	cmp	r3, #24
 801d91e:	d830      	bhi.n	801d982 <__gethex+0x126>
 801d920:	f1a0 0210 	sub.w	r2, r0, #16
 801d924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d928:	f7ff ff82 	bl	801d830 <__hexdig_fun>
 801d92c:	f100 3cff 	add.w	ip, r0, #4294967295
 801d930:	fa5f fc8c 	uxtb.w	ip, ip
 801d934:	f1bc 0f18 	cmp.w	ip, #24
 801d938:	f04f 030a 	mov.w	r3, #10
 801d93c:	d91e      	bls.n	801d97c <__gethex+0x120>
 801d93e:	b104      	cbz	r4, 801d942 <__gethex+0xe6>
 801d940:	4252      	negs	r2, r2
 801d942:	4417      	add	r7, r2
 801d944:	f8ca 1000 	str.w	r1, [sl]
 801d948:	b1ed      	cbz	r5, 801d986 <__gethex+0x12a>
 801d94a:	f1bb 0f00 	cmp.w	fp, #0
 801d94e:	bf0c      	ite	eq
 801d950:	2506      	moveq	r5, #6
 801d952:	2500      	movne	r5, #0
 801d954:	4628      	mov	r0, r5
 801d956:	b005      	add	sp, #20
 801d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d95c:	2500      	movs	r5, #0
 801d95e:	462c      	mov	r4, r5
 801d960:	e7b0      	b.n	801d8c4 <__gethex+0x68>
 801d962:	2c00      	cmp	r4, #0
 801d964:	d1c7      	bne.n	801d8f6 <__gethex+0x9a>
 801d966:	4627      	mov	r7, r4
 801d968:	e7c7      	b.n	801d8fa <__gethex+0x9e>
 801d96a:	464e      	mov	r6, r9
 801d96c:	462f      	mov	r7, r5
 801d96e:	2501      	movs	r5, #1
 801d970:	e7c3      	b.n	801d8fa <__gethex+0x9e>
 801d972:	2400      	movs	r4, #0
 801d974:	1cb1      	adds	r1, r6, #2
 801d976:	e7cc      	b.n	801d912 <__gethex+0xb6>
 801d978:	2401      	movs	r4, #1
 801d97a:	e7fb      	b.n	801d974 <__gethex+0x118>
 801d97c:	fb03 0002 	mla	r0, r3, r2, r0
 801d980:	e7ce      	b.n	801d920 <__gethex+0xc4>
 801d982:	4631      	mov	r1, r6
 801d984:	e7de      	b.n	801d944 <__gethex+0xe8>
 801d986:	eba6 0309 	sub.w	r3, r6, r9
 801d98a:	3b01      	subs	r3, #1
 801d98c:	4629      	mov	r1, r5
 801d98e:	2b07      	cmp	r3, #7
 801d990:	dc0a      	bgt.n	801d9a8 <__gethex+0x14c>
 801d992:	9801      	ldr	r0, [sp, #4]
 801d994:	f000 fa8a 	bl	801deac <_Balloc>
 801d998:	4604      	mov	r4, r0
 801d99a:	b940      	cbnz	r0, 801d9ae <__gethex+0x152>
 801d99c:	4b5c      	ldr	r3, [pc, #368]	@ (801db10 <__gethex+0x2b4>)
 801d99e:	4602      	mov	r2, r0
 801d9a0:	21e4      	movs	r1, #228	@ 0xe4
 801d9a2:	485c      	ldr	r0, [pc, #368]	@ (801db14 <__gethex+0x2b8>)
 801d9a4:	f7ff f828 	bl	801c9f8 <__assert_func>
 801d9a8:	3101      	adds	r1, #1
 801d9aa:	105b      	asrs	r3, r3, #1
 801d9ac:	e7ef      	b.n	801d98e <__gethex+0x132>
 801d9ae:	f100 0a14 	add.w	sl, r0, #20
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	4655      	mov	r5, sl
 801d9b6:	469b      	mov	fp, r3
 801d9b8:	45b1      	cmp	r9, r6
 801d9ba:	d337      	bcc.n	801da2c <__gethex+0x1d0>
 801d9bc:	f845 bb04 	str.w	fp, [r5], #4
 801d9c0:	eba5 050a 	sub.w	r5, r5, sl
 801d9c4:	10ad      	asrs	r5, r5, #2
 801d9c6:	6125      	str	r5, [r4, #16]
 801d9c8:	4658      	mov	r0, fp
 801d9ca:	f000 fb61 	bl	801e090 <__hi0bits>
 801d9ce:	016d      	lsls	r5, r5, #5
 801d9d0:	f8d8 6000 	ldr.w	r6, [r8]
 801d9d4:	1a2d      	subs	r5, r5, r0
 801d9d6:	42b5      	cmp	r5, r6
 801d9d8:	dd54      	ble.n	801da84 <__gethex+0x228>
 801d9da:	1bad      	subs	r5, r5, r6
 801d9dc:	4629      	mov	r1, r5
 801d9de:	4620      	mov	r0, r4
 801d9e0:	f000 feed 	bl	801e7be <__any_on>
 801d9e4:	4681      	mov	r9, r0
 801d9e6:	b178      	cbz	r0, 801da08 <__gethex+0x1ac>
 801d9e8:	1e6b      	subs	r3, r5, #1
 801d9ea:	1159      	asrs	r1, r3, #5
 801d9ec:	f003 021f 	and.w	r2, r3, #31
 801d9f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801d9f4:	f04f 0901 	mov.w	r9, #1
 801d9f8:	fa09 f202 	lsl.w	r2, r9, r2
 801d9fc:	420a      	tst	r2, r1
 801d9fe:	d003      	beq.n	801da08 <__gethex+0x1ac>
 801da00:	454b      	cmp	r3, r9
 801da02:	dc36      	bgt.n	801da72 <__gethex+0x216>
 801da04:	f04f 0902 	mov.w	r9, #2
 801da08:	4629      	mov	r1, r5
 801da0a:	4620      	mov	r0, r4
 801da0c:	f7ff febe 	bl	801d78c <rshift>
 801da10:	442f      	add	r7, r5
 801da12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801da16:	42bb      	cmp	r3, r7
 801da18:	da42      	bge.n	801daa0 <__gethex+0x244>
 801da1a:	9801      	ldr	r0, [sp, #4]
 801da1c:	4621      	mov	r1, r4
 801da1e:	f000 fa85 	bl	801df2c <_Bfree>
 801da22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801da24:	2300      	movs	r3, #0
 801da26:	6013      	str	r3, [r2, #0]
 801da28:	25a3      	movs	r5, #163	@ 0xa3
 801da2a:	e793      	b.n	801d954 <__gethex+0xf8>
 801da2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801da30:	2a2e      	cmp	r2, #46	@ 0x2e
 801da32:	d012      	beq.n	801da5a <__gethex+0x1fe>
 801da34:	2b20      	cmp	r3, #32
 801da36:	d104      	bne.n	801da42 <__gethex+0x1e6>
 801da38:	f845 bb04 	str.w	fp, [r5], #4
 801da3c:	f04f 0b00 	mov.w	fp, #0
 801da40:	465b      	mov	r3, fp
 801da42:	7830      	ldrb	r0, [r6, #0]
 801da44:	9303      	str	r3, [sp, #12]
 801da46:	f7ff fef3 	bl	801d830 <__hexdig_fun>
 801da4a:	9b03      	ldr	r3, [sp, #12]
 801da4c:	f000 000f 	and.w	r0, r0, #15
 801da50:	4098      	lsls	r0, r3
 801da52:	ea4b 0b00 	orr.w	fp, fp, r0
 801da56:	3304      	adds	r3, #4
 801da58:	e7ae      	b.n	801d9b8 <__gethex+0x15c>
 801da5a:	45b1      	cmp	r9, r6
 801da5c:	d8ea      	bhi.n	801da34 <__gethex+0x1d8>
 801da5e:	492b      	ldr	r1, [pc, #172]	@ (801db0c <__gethex+0x2b0>)
 801da60:	9303      	str	r3, [sp, #12]
 801da62:	2201      	movs	r2, #1
 801da64:	4630      	mov	r0, r6
 801da66:	f7fd fe86 	bl	801b776 <strncmp>
 801da6a:	9b03      	ldr	r3, [sp, #12]
 801da6c:	2800      	cmp	r0, #0
 801da6e:	d1e1      	bne.n	801da34 <__gethex+0x1d8>
 801da70:	e7a2      	b.n	801d9b8 <__gethex+0x15c>
 801da72:	1ea9      	subs	r1, r5, #2
 801da74:	4620      	mov	r0, r4
 801da76:	f000 fea2 	bl	801e7be <__any_on>
 801da7a:	2800      	cmp	r0, #0
 801da7c:	d0c2      	beq.n	801da04 <__gethex+0x1a8>
 801da7e:	f04f 0903 	mov.w	r9, #3
 801da82:	e7c1      	b.n	801da08 <__gethex+0x1ac>
 801da84:	da09      	bge.n	801da9a <__gethex+0x23e>
 801da86:	1b75      	subs	r5, r6, r5
 801da88:	4621      	mov	r1, r4
 801da8a:	9801      	ldr	r0, [sp, #4]
 801da8c:	462a      	mov	r2, r5
 801da8e:	f000 fc5d 	bl	801e34c <__lshift>
 801da92:	1b7f      	subs	r7, r7, r5
 801da94:	4604      	mov	r4, r0
 801da96:	f100 0a14 	add.w	sl, r0, #20
 801da9a:	f04f 0900 	mov.w	r9, #0
 801da9e:	e7b8      	b.n	801da12 <__gethex+0x1b6>
 801daa0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801daa4:	42bd      	cmp	r5, r7
 801daa6:	dd6f      	ble.n	801db88 <__gethex+0x32c>
 801daa8:	1bed      	subs	r5, r5, r7
 801daaa:	42ae      	cmp	r6, r5
 801daac:	dc34      	bgt.n	801db18 <__gethex+0x2bc>
 801daae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dab2:	2b02      	cmp	r3, #2
 801dab4:	d022      	beq.n	801dafc <__gethex+0x2a0>
 801dab6:	2b03      	cmp	r3, #3
 801dab8:	d024      	beq.n	801db04 <__gethex+0x2a8>
 801daba:	2b01      	cmp	r3, #1
 801dabc:	d115      	bne.n	801daea <__gethex+0x28e>
 801dabe:	42ae      	cmp	r6, r5
 801dac0:	d113      	bne.n	801daea <__gethex+0x28e>
 801dac2:	2e01      	cmp	r6, #1
 801dac4:	d10b      	bne.n	801dade <__gethex+0x282>
 801dac6:	9a02      	ldr	r2, [sp, #8]
 801dac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dacc:	6013      	str	r3, [r2, #0]
 801dace:	2301      	movs	r3, #1
 801dad0:	6123      	str	r3, [r4, #16]
 801dad2:	f8ca 3000 	str.w	r3, [sl]
 801dad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dad8:	2562      	movs	r5, #98	@ 0x62
 801dada:	601c      	str	r4, [r3, #0]
 801dadc:	e73a      	b.n	801d954 <__gethex+0xf8>
 801dade:	1e71      	subs	r1, r6, #1
 801dae0:	4620      	mov	r0, r4
 801dae2:	f000 fe6c 	bl	801e7be <__any_on>
 801dae6:	2800      	cmp	r0, #0
 801dae8:	d1ed      	bne.n	801dac6 <__gethex+0x26a>
 801daea:	9801      	ldr	r0, [sp, #4]
 801daec:	4621      	mov	r1, r4
 801daee:	f000 fa1d 	bl	801df2c <_Bfree>
 801daf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801daf4:	2300      	movs	r3, #0
 801daf6:	6013      	str	r3, [r2, #0]
 801daf8:	2550      	movs	r5, #80	@ 0x50
 801dafa:	e72b      	b.n	801d954 <__gethex+0xf8>
 801dafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d1f3      	bne.n	801daea <__gethex+0x28e>
 801db02:	e7e0      	b.n	801dac6 <__gethex+0x26a>
 801db04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db06:	2b00      	cmp	r3, #0
 801db08:	d1dd      	bne.n	801dac6 <__gethex+0x26a>
 801db0a:	e7ee      	b.n	801daea <__gethex+0x28e>
 801db0c:	08024b78 	.word	0x08024b78
 801db10:	08024d71 	.word	0x08024d71
 801db14:	08024d82 	.word	0x08024d82
 801db18:	1e6f      	subs	r7, r5, #1
 801db1a:	f1b9 0f00 	cmp.w	r9, #0
 801db1e:	d130      	bne.n	801db82 <__gethex+0x326>
 801db20:	b127      	cbz	r7, 801db2c <__gethex+0x2d0>
 801db22:	4639      	mov	r1, r7
 801db24:	4620      	mov	r0, r4
 801db26:	f000 fe4a 	bl	801e7be <__any_on>
 801db2a:	4681      	mov	r9, r0
 801db2c:	117a      	asrs	r2, r7, #5
 801db2e:	2301      	movs	r3, #1
 801db30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801db34:	f007 071f 	and.w	r7, r7, #31
 801db38:	40bb      	lsls	r3, r7
 801db3a:	4213      	tst	r3, r2
 801db3c:	4629      	mov	r1, r5
 801db3e:	4620      	mov	r0, r4
 801db40:	bf18      	it	ne
 801db42:	f049 0902 	orrne.w	r9, r9, #2
 801db46:	f7ff fe21 	bl	801d78c <rshift>
 801db4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801db4e:	1b76      	subs	r6, r6, r5
 801db50:	2502      	movs	r5, #2
 801db52:	f1b9 0f00 	cmp.w	r9, #0
 801db56:	d047      	beq.n	801dbe8 <__gethex+0x38c>
 801db58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801db5c:	2b02      	cmp	r3, #2
 801db5e:	d015      	beq.n	801db8c <__gethex+0x330>
 801db60:	2b03      	cmp	r3, #3
 801db62:	d017      	beq.n	801db94 <__gethex+0x338>
 801db64:	2b01      	cmp	r3, #1
 801db66:	d109      	bne.n	801db7c <__gethex+0x320>
 801db68:	f019 0f02 	tst.w	r9, #2
 801db6c:	d006      	beq.n	801db7c <__gethex+0x320>
 801db6e:	f8da 3000 	ldr.w	r3, [sl]
 801db72:	ea49 0903 	orr.w	r9, r9, r3
 801db76:	f019 0f01 	tst.w	r9, #1
 801db7a:	d10e      	bne.n	801db9a <__gethex+0x33e>
 801db7c:	f045 0510 	orr.w	r5, r5, #16
 801db80:	e032      	b.n	801dbe8 <__gethex+0x38c>
 801db82:	f04f 0901 	mov.w	r9, #1
 801db86:	e7d1      	b.n	801db2c <__gethex+0x2d0>
 801db88:	2501      	movs	r5, #1
 801db8a:	e7e2      	b.n	801db52 <__gethex+0x2f6>
 801db8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db8e:	f1c3 0301 	rsb	r3, r3, #1
 801db92:	930f      	str	r3, [sp, #60]	@ 0x3c
 801db94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db96:	2b00      	cmp	r3, #0
 801db98:	d0f0      	beq.n	801db7c <__gethex+0x320>
 801db9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801db9e:	f104 0314 	add.w	r3, r4, #20
 801dba2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801dba6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801dbaa:	f04f 0c00 	mov.w	ip, #0
 801dbae:	4618      	mov	r0, r3
 801dbb0:	f853 2b04 	ldr.w	r2, [r3], #4
 801dbb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 801dbb8:	d01b      	beq.n	801dbf2 <__gethex+0x396>
 801dbba:	3201      	adds	r2, #1
 801dbbc:	6002      	str	r2, [r0, #0]
 801dbbe:	2d02      	cmp	r5, #2
 801dbc0:	f104 0314 	add.w	r3, r4, #20
 801dbc4:	d13c      	bne.n	801dc40 <__gethex+0x3e4>
 801dbc6:	f8d8 2000 	ldr.w	r2, [r8]
 801dbca:	3a01      	subs	r2, #1
 801dbcc:	42b2      	cmp	r2, r6
 801dbce:	d109      	bne.n	801dbe4 <__gethex+0x388>
 801dbd0:	1171      	asrs	r1, r6, #5
 801dbd2:	2201      	movs	r2, #1
 801dbd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801dbd8:	f006 061f 	and.w	r6, r6, #31
 801dbdc:	fa02 f606 	lsl.w	r6, r2, r6
 801dbe0:	421e      	tst	r6, r3
 801dbe2:	d13a      	bne.n	801dc5a <__gethex+0x3fe>
 801dbe4:	f045 0520 	orr.w	r5, r5, #32
 801dbe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbea:	601c      	str	r4, [r3, #0]
 801dbec:	9b02      	ldr	r3, [sp, #8]
 801dbee:	601f      	str	r7, [r3, #0]
 801dbf0:	e6b0      	b.n	801d954 <__gethex+0xf8>
 801dbf2:	4299      	cmp	r1, r3
 801dbf4:	f843 cc04 	str.w	ip, [r3, #-4]
 801dbf8:	d8d9      	bhi.n	801dbae <__gethex+0x352>
 801dbfa:	68a3      	ldr	r3, [r4, #8]
 801dbfc:	459b      	cmp	fp, r3
 801dbfe:	db17      	blt.n	801dc30 <__gethex+0x3d4>
 801dc00:	6861      	ldr	r1, [r4, #4]
 801dc02:	9801      	ldr	r0, [sp, #4]
 801dc04:	3101      	adds	r1, #1
 801dc06:	f000 f951 	bl	801deac <_Balloc>
 801dc0a:	4681      	mov	r9, r0
 801dc0c:	b918      	cbnz	r0, 801dc16 <__gethex+0x3ba>
 801dc0e:	4b1a      	ldr	r3, [pc, #104]	@ (801dc78 <__gethex+0x41c>)
 801dc10:	4602      	mov	r2, r0
 801dc12:	2184      	movs	r1, #132	@ 0x84
 801dc14:	e6c5      	b.n	801d9a2 <__gethex+0x146>
 801dc16:	6922      	ldr	r2, [r4, #16]
 801dc18:	3202      	adds	r2, #2
 801dc1a:	f104 010c 	add.w	r1, r4, #12
 801dc1e:	0092      	lsls	r2, r2, #2
 801dc20:	300c      	adds	r0, #12
 801dc22:	f7fe fe78 	bl	801c916 <memcpy>
 801dc26:	4621      	mov	r1, r4
 801dc28:	9801      	ldr	r0, [sp, #4]
 801dc2a:	f000 f97f 	bl	801df2c <_Bfree>
 801dc2e:	464c      	mov	r4, r9
 801dc30:	6923      	ldr	r3, [r4, #16]
 801dc32:	1c5a      	adds	r2, r3, #1
 801dc34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801dc38:	6122      	str	r2, [r4, #16]
 801dc3a:	2201      	movs	r2, #1
 801dc3c:	615a      	str	r2, [r3, #20]
 801dc3e:	e7be      	b.n	801dbbe <__gethex+0x362>
 801dc40:	6922      	ldr	r2, [r4, #16]
 801dc42:	455a      	cmp	r2, fp
 801dc44:	dd0b      	ble.n	801dc5e <__gethex+0x402>
 801dc46:	2101      	movs	r1, #1
 801dc48:	4620      	mov	r0, r4
 801dc4a:	f7ff fd9f 	bl	801d78c <rshift>
 801dc4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dc52:	3701      	adds	r7, #1
 801dc54:	42bb      	cmp	r3, r7
 801dc56:	f6ff aee0 	blt.w	801da1a <__gethex+0x1be>
 801dc5a:	2501      	movs	r5, #1
 801dc5c:	e7c2      	b.n	801dbe4 <__gethex+0x388>
 801dc5e:	f016 061f 	ands.w	r6, r6, #31
 801dc62:	d0fa      	beq.n	801dc5a <__gethex+0x3fe>
 801dc64:	4453      	add	r3, sl
 801dc66:	f1c6 0620 	rsb	r6, r6, #32
 801dc6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801dc6e:	f000 fa0f 	bl	801e090 <__hi0bits>
 801dc72:	42b0      	cmp	r0, r6
 801dc74:	dbe7      	blt.n	801dc46 <__gethex+0x3ea>
 801dc76:	e7f0      	b.n	801dc5a <__gethex+0x3fe>
 801dc78:	08024d71 	.word	0x08024d71

0801dc7c <L_shift>:
 801dc7c:	f1c2 0208 	rsb	r2, r2, #8
 801dc80:	0092      	lsls	r2, r2, #2
 801dc82:	b570      	push	{r4, r5, r6, lr}
 801dc84:	f1c2 0620 	rsb	r6, r2, #32
 801dc88:	6843      	ldr	r3, [r0, #4]
 801dc8a:	6804      	ldr	r4, [r0, #0]
 801dc8c:	fa03 f506 	lsl.w	r5, r3, r6
 801dc90:	432c      	orrs	r4, r5
 801dc92:	40d3      	lsrs	r3, r2
 801dc94:	6004      	str	r4, [r0, #0]
 801dc96:	f840 3f04 	str.w	r3, [r0, #4]!
 801dc9a:	4288      	cmp	r0, r1
 801dc9c:	d3f4      	bcc.n	801dc88 <L_shift+0xc>
 801dc9e:	bd70      	pop	{r4, r5, r6, pc}

0801dca0 <__match>:
 801dca0:	b530      	push	{r4, r5, lr}
 801dca2:	6803      	ldr	r3, [r0, #0]
 801dca4:	3301      	adds	r3, #1
 801dca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dcaa:	b914      	cbnz	r4, 801dcb2 <__match+0x12>
 801dcac:	6003      	str	r3, [r0, #0]
 801dcae:	2001      	movs	r0, #1
 801dcb0:	bd30      	pop	{r4, r5, pc}
 801dcb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dcb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801dcba:	2d19      	cmp	r5, #25
 801dcbc:	bf98      	it	ls
 801dcbe:	3220      	addls	r2, #32
 801dcc0:	42a2      	cmp	r2, r4
 801dcc2:	d0f0      	beq.n	801dca6 <__match+0x6>
 801dcc4:	2000      	movs	r0, #0
 801dcc6:	e7f3      	b.n	801dcb0 <__match+0x10>

0801dcc8 <__hexnan>:
 801dcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dccc:	680b      	ldr	r3, [r1, #0]
 801dcce:	6801      	ldr	r1, [r0, #0]
 801dcd0:	115e      	asrs	r6, r3, #5
 801dcd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801dcd6:	f013 031f 	ands.w	r3, r3, #31
 801dcda:	b087      	sub	sp, #28
 801dcdc:	bf18      	it	ne
 801dcde:	3604      	addne	r6, #4
 801dce0:	2500      	movs	r5, #0
 801dce2:	1f37      	subs	r7, r6, #4
 801dce4:	4682      	mov	sl, r0
 801dce6:	4690      	mov	r8, r2
 801dce8:	9301      	str	r3, [sp, #4]
 801dcea:	f846 5c04 	str.w	r5, [r6, #-4]
 801dcee:	46b9      	mov	r9, r7
 801dcf0:	463c      	mov	r4, r7
 801dcf2:	9502      	str	r5, [sp, #8]
 801dcf4:	46ab      	mov	fp, r5
 801dcf6:	784a      	ldrb	r2, [r1, #1]
 801dcf8:	1c4b      	adds	r3, r1, #1
 801dcfa:	9303      	str	r3, [sp, #12]
 801dcfc:	b342      	cbz	r2, 801dd50 <__hexnan+0x88>
 801dcfe:	4610      	mov	r0, r2
 801dd00:	9105      	str	r1, [sp, #20]
 801dd02:	9204      	str	r2, [sp, #16]
 801dd04:	f7ff fd94 	bl	801d830 <__hexdig_fun>
 801dd08:	2800      	cmp	r0, #0
 801dd0a:	d151      	bne.n	801ddb0 <__hexnan+0xe8>
 801dd0c:	9a04      	ldr	r2, [sp, #16]
 801dd0e:	9905      	ldr	r1, [sp, #20]
 801dd10:	2a20      	cmp	r2, #32
 801dd12:	d818      	bhi.n	801dd46 <__hexnan+0x7e>
 801dd14:	9b02      	ldr	r3, [sp, #8]
 801dd16:	459b      	cmp	fp, r3
 801dd18:	dd13      	ble.n	801dd42 <__hexnan+0x7a>
 801dd1a:	454c      	cmp	r4, r9
 801dd1c:	d206      	bcs.n	801dd2c <__hexnan+0x64>
 801dd1e:	2d07      	cmp	r5, #7
 801dd20:	dc04      	bgt.n	801dd2c <__hexnan+0x64>
 801dd22:	462a      	mov	r2, r5
 801dd24:	4649      	mov	r1, r9
 801dd26:	4620      	mov	r0, r4
 801dd28:	f7ff ffa8 	bl	801dc7c <L_shift>
 801dd2c:	4544      	cmp	r4, r8
 801dd2e:	d952      	bls.n	801ddd6 <__hexnan+0x10e>
 801dd30:	2300      	movs	r3, #0
 801dd32:	f1a4 0904 	sub.w	r9, r4, #4
 801dd36:	f844 3c04 	str.w	r3, [r4, #-4]
 801dd3a:	f8cd b008 	str.w	fp, [sp, #8]
 801dd3e:	464c      	mov	r4, r9
 801dd40:	461d      	mov	r5, r3
 801dd42:	9903      	ldr	r1, [sp, #12]
 801dd44:	e7d7      	b.n	801dcf6 <__hexnan+0x2e>
 801dd46:	2a29      	cmp	r2, #41	@ 0x29
 801dd48:	d157      	bne.n	801ddfa <__hexnan+0x132>
 801dd4a:	3102      	adds	r1, #2
 801dd4c:	f8ca 1000 	str.w	r1, [sl]
 801dd50:	f1bb 0f00 	cmp.w	fp, #0
 801dd54:	d051      	beq.n	801ddfa <__hexnan+0x132>
 801dd56:	454c      	cmp	r4, r9
 801dd58:	d206      	bcs.n	801dd68 <__hexnan+0xa0>
 801dd5a:	2d07      	cmp	r5, #7
 801dd5c:	dc04      	bgt.n	801dd68 <__hexnan+0xa0>
 801dd5e:	462a      	mov	r2, r5
 801dd60:	4649      	mov	r1, r9
 801dd62:	4620      	mov	r0, r4
 801dd64:	f7ff ff8a 	bl	801dc7c <L_shift>
 801dd68:	4544      	cmp	r4, r8
 801dd6a:	d936      	bls.n	801ddda <__hexnan+0x112>
 801dd6c:	f1a8 0204 	sub.w	r2, r8, #4
 801dd70:	4623      	mov	r3, r4
 801dd72:	f853 1b04 	ldr.w	r1, [r3], #4
 801dd76:	f842 1f04 	str.w	r1, [r2, #4]!
 801dd7a:	429f      	cmp	r7, r3
 801dd7c:	d2f9      	bcs.n	801dd72 <__hexnan+0xaa>
 801dd7e:	1b3b      	subs	r3, r7, r4
 801dd80:	f023 0303 	bic.w	r3, r3, #3
 801dd84:	3304      	adds	r3, #4
 801dd86:	3401      	adds	r4, #1
 801dd88:	3e03      	subs	r6, #3
 801dd8a:	42b4      	cmp	r4, r6
 801dd8c:	bf88      	it	hi
 801dd8e:	2304      	movhi	r3, #4
 801dd90:	4443      	add	r3, r8
 801dd92:	2200      	movs	r2, #0
 801dd94:	f843 2b04 	str.w	r2, [r3], #4
 801dd98:	429f      	cmp	r7, r3
 801dd9a:	d2fb      	bcs.n	801dd94 <__hexnan+0xcc>
 801dd9c:	683b      	ldr	r3, [r7, #0]
 801dd9e:	b91b      	cbnz	r3, 801dda8 <__hexnan+0xe0>
 801dda0:	4547      	cmp	r7, r8
 801dda2:	d128      	bne.n	801ddf6 <__hexnan+0x12e>
 801dda4:	2301      	movs	r3, #1
 801dda6:	603b      	str	r3, [r7, #0]
 801dda8:	2005      	movs	r0, #5
 801ddaa:	b007      	add	sp, #28
 801ddac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddb0:	3501      	adds	r5, #1
 801ddb2:	2d08      	cmp	r5, #8
 801ddb4:	f10b 0b01 	add.w	fp, fp, #1
 801ddb8:	dd06      	ble.n	801ddc8 <__hexnan+0x100>
 801ddba:	4544      	cmp	r4, r8
 801ddbc:	d9c1      	bls.n	801dd42 <__hexnan+0x7a>
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	f844 3c04 	str.w	r3, [r4, #-4]
 801ddc4:	2501      	movs	r5, #1
 801ddc6:	3c04      	subs	r4, #4
 801ddc8:	6822      	ldr	r2, [r4, #0]
 801ddca:	f000 000f 	and.w	r0, r0, #15
 801ddce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ddd2:	6020      	str	r0, [r4, #0]
 801ddd4:	e7b5      	b.n	801dd42 <__hexnan+0x7a>
 801ddd6:	2508      	movs	r5, #8
 801ddd8:	e7b3      	b.n	801dd42 <__hexnan+0x7a>
 801ddda:	9b01      	ldr	r3, [sp, #4]
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d0dd      	beq.n	801dd9c <__hexnan+0xd4>
 801dde0:	f1c3 0320 	rsb	r3, r3, #32
 801dde4:	f04f 32ff 	mov.w	r2, #4294967295
 801dde8:	40da      	lsrs	r2, r3
 801ddea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ddee:	4013      	ands	r3, r2
 801ddf0:	f846 3c04 	str.w	r3, [r6, #-4]
 801ddf4:	e7d2      	b.n	801dd9c <__hexnan+0xd4>
 801ddf6:	3f04      	subs	r7, #4
 801ddf8:	e7d0      	b.n	801dd9c <__hexnan+0xd4>
 801ddfa:	2004      	movs	r0, #4
 801ddfc:	e7d5      	b.n	801ddaa <__hexnan+0xe2>
	...

0801de00 <_findenv_r>:
 801de00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de04:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801de74 <_findenv_r+0x74>
 801de08:	4606      	mov	r6, r0
 801de0a:	4689      	mov	r9, r1
 801de0c:	4617      	mov	r7, r2
 801de0e:	f001 fb83 	bl	801f518 <__env_lock>
 801de12:	f8da 4000 	ldr.w	r4, [sl]
 801de16:	b134      	cbz	r4, 801de26 <_findenv_r+0x26>
 801de18:	464b      	mov	r3, r9
 801de1a:	4698      	mov	r8, r3
 801de1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de20:	b13a      	cbz	r2, 801de32 <_findenv_r+0x32>
 801de22:	2a3d      	cmp	r2, #61	@ 0x3d
 801de24:	d1f9      	bne.n	801de1a <_findenv_r+0x1a>
 801de26:	4630      	mov	r0, r6
 801de28:	f001 fb7c 	bl	801f524 <__env_unlock>
 801de2c:	2000      	movs	r0, #0
 801de2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de32:	eba8 0809 	sub.w	r8, r8, r9
 801de36:	46a3      	mov	fp, r4
 801de38:	f854 0b04 	ldr.w	r0, [r4], #4
 801de3c:	2800      	cmp	r0, #0
 801de3e:	d0f2      	beq.n	801de26 <_findenv_r+0x26>
 801de40:	4642      	mov	r2, r8
 801de42:	4649      	mov	r1, r9
 801de44:	f7fd fc97 	bl	801b776 <strncmp>
 801de48:	2800      	cmp	r0, #0
 801de4a:	d1f4      	bne.n	801de36 <_findenv_r+0x36>
 801de4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801de50:	eb03 0508 	add.w	r5, r3, r8
 801de54:	f813 3008 	ldrb.w	r3, [r3, r8]
 801de58:	2b3d      	cmp	r3, #61	@ 0x3d
 801de5a:	d1ec      	bne.n	801de36 <_findenv_r+0x36>
 801de5c:	f8da 3000 	ldr.w	r3, [sl]
 801de60:	ebab 0303 	sub.w	r3, fp, r3
 801de64:	109b      	asrs	r3, r3, #2
 801de66:	4630      	mov	r0, r6
 801de68:	603b      	str	r3, [r7, #0]
 801de6a:	f001 fb5b 	bl	801f524 <__env_unlock>
 801de6e:	1c68      	adds	r0, r5, #1
 801de70:	e7dd      	b.n	801de2e <_findenv_r+0x2e>
 801de72:	bf00      	nop
 801de74:	200002c4 	.word	0x200002c4

0801de78 <_getenv_r>:
 801de78:	b507      	push	{r0, r1, r2, lr}
 801de7a:	aa01      	add	r2, sp, #4
 801de7c:	f7ff ffc0 	bl	801de00 <_findenv_r>
 801de80:	b003      	add	sp, #12
 801de82:	f85d fb04 	ldr.w	pc, [sp], #4

0801de86 <__ascii_mbtowc>:
 801de86:	b082      	sub	sp, #8
 801de88:	b901      	cbnz	r1, 801de8c <__ascii_mbtowc+0x6>
 801de8a:	a901      	add	r1, sp, #4
 801de8c:	b142      	cbz	r2, 801dea0 <__ascii_mbtowc+0x1a>
 801de8e:	b14b      	cbz	r3, 801dea4 <__ascii_mbtowc+0x1e>
 801de90:	7813      	ldrb	r3, [r2, #0]
 801de92:	600b      	str	r3, [r1, #0]
 801de94:	7812      	ldrb	r2, [r2, #0]
 801de96:	1e10      	subs	r0, r2, #0
 801de98:	bf18      	it	ne
 801de9a:	2001      	movne	r0, #1
 801de9c:	b002      	add	sp, #8
 801de9e:	4770      	bx	lr
 801dea0:	4610      	mov	r0, r2
 801dea2:	e7fb      	b.n	801de9c <__ascii_mbtowc+0x16>
 801dea4:	f06f 0001 	mvn.w	r0, #1
 801dea8:	e7f8      	b.n	801de9c <__ascii_mbtowc+0x16>
	...

0801deac <_Balloc>:
 801deac:	b570      	push	{r4, r5, r6, lr}
 801deae:	69c6      	ldr	r6, [r0, #28]
 801deb0:	4604      	mov	r4, r0
 801deb2:	460d      	mov	r5, r1
 801deb4:	b976      	cbnz	r6, 801ded4 <_Balloc+0x28>
 801deb6:	2010      	movs	r0, #16
 801deb8:	f7fb fd0c 	bl	80198d4 <malloc>
 801debc:	4602      	mov	r2, r0
 801debe:	61e0      	str	r0, [r4, #28]
 801dec0:	b920      	cbnz	r0, 801decc <_Balloc+0x20>
 801dec2:	4b18      	ldr	r3, [pc, #96]	@ (801df24 <_Balloc+0x78>)
 801dec4:	4818      	ldr	r0, [pc, #96]	@ (801df28 <_Balloc+0x7c>)
 801dec6:	216b      	movs	r1, #107	@ 0x6b
 801dec8:	f7fe fd96 	bl	801c9f8 <__assert_func>
 801decc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ded0:	6006      	str	r6, [r0, #0]
 801ded2:	60c6      	str	r6, [r0, #12]
 801ded4:	69e6      	ldr	r6, [r4, #28]
 801ded6:	68f3      	ldr	r3, [r6, #12]
 801ded8:	b183      	cbz	r3, 801defc <_Balloc+0x50>
 801deda:	69e3      	ldr	r3, [r4, #28]
 801dedc:	68db      	ldr	r3, [r3, #12]
 801dede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dee2:	b9b8      	cbnz	r0, 801df14 <_Balloc+0x68>
 801dee4:	2101      	movs	r1, #1
 801dee6:	fa01 f605 	lsl.w	r6, r1, r5
 801deea:	1d72      	adds	r2, r6, #5
 801deec:	0092      	lsls	r2, r2, #2
 801deee:	4620      	mov	r0, r4
 801def0:	f001 fafd 	bl	801f4ee <_calloc_r>
 801def4:	b160      	cbz	r0, 801df10 <_Balloc+0x64>
 801def6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801defa:	e00e      	b.n	801df1a <_Balloc+0x6e>
 801defc:	2221      	movs	r2, #33	@ 0x21
 801defe:	2104      	movs	r1, #4
 801df00:	4620      	mov	r0, r4
 801df02:	f001 faf4 	bl	801f4ee <_calloc_r>
 801df06:	69e3      	ldr	r3, [r4, #28]
 801df08:	60f0      	str	r0, [r6, #12]
 801df0a:	68db      	ldr	r3, [r3, #12]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d1e4      	bne.n	801deda <_Balloc+0x2e>
 801df10:	2000      	movs	r0, #0
 801df12:	bd70      	pop	{r4, r5, r6, pc}
 801df14:	6802      	ldr	r2, [r0, #0]
 801df16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801df1a:	2300      	movs	r3, #0
 801df1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801df20:	e7f7      	b.n	801df12 <_Balloc+0x66>
 801df22:	bf00      	nop
 801df24:	08024bb1 	.word	0x08024bb1
 801df28:	08024de2 	.word	0x08024de2

0801df2c <_Bfree>:
 801df2c:	b570      	push	{r4, r5, r6, lr}
 801df2e:	69c6      	ldr	r6, [r0, #28]
 801df30:	4605      	mov	r5, r0
 801df32:	460c      	mov	r4, r1
 801df34:	b976      	cbnz	r6, 801df54 <_Bfree+0x28>
 801df36:	2010      	movs	r0, #16
 801df38:	f7fb fccc 	bl	80198d4 <malloc>
 801df3c:	4602      	mov	r2, r0
 801df3e:	61e8      	str	r0, [r5, #28]
 801df40:	b920      	cbnz	r0, 801df4c <_Bfree+0x20>
 801df42:	4b09      	ldr	r3, [pc, #36]	@ (801df68 <_Bfree+0x3c>)
 801df44:	4809      	ldr	r0, [pc, #36]	@ (801df6c <_Bfree+0x40>)
 801df46:	218f      	movs	r1, #143	@ 0x8f
 801df48:	f7fe fd56 	bl	801c9f8 <__assert_func>
 801df4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801df50:	6006      	str	r6, [r0, #0]
 801df52:	60c6      	str	r6, [r0, #12]
 801df54:	b13c      	cbz	r4, 801df66 <_Bfree+0x3a>
 801df56:	69eb      	ldr	r3, [r5, #28]
 801df58:	6862      	ldr	r2, [r4, #4]
 801df5a:	68db      	ldr	r3, [r3, #12]
 801df5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801df60:	6021      	str	r1, [r4, #0]
 801df62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801df66:	bd70      	pop	{r4, r5, r6, pc}
 801df68:	08024bb1 	.word	0x08024bb1
 801df6c:	08024de2 	.word	0x08024de2

0801df70 <__multadd>:
 801df70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df74:	690d      	ldr	r5, [r1, #16]
 801df76:	4607      	mov	r7, r0
 801df78:	460c      	mov	r4, r1
 801df7a:	461e      	mov	r6, r3
 801df7c:	f101 0c14 	add.w	ip, r1, #20
 801df80:	2000      	movs	r0, #0
 801df82:	f8dc 3000 	ldr.w	r3, [ip]
 801df86:	b299      	uxth	r1, r3
 801df88:	fb02 6101 	mla	r1, r2, r1, r6
 801df8c:	0c1e      	lsrs	r6, r3, #16
 801df8e:	0c0b      	lsrs	r3, r1, #16
 801df90:	fb02 3306 	mla	r3, r2, r6, r3
 801df94:	b289      	uxth	r1, r1
 801df96:	3001      	adds	r0, #1
 801df98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801df9c:	4285      	cmp	r5, r0
 801df9e:	f84c 1b04 	str.w	r1, [ip], #4
 801dfa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dfa6:	dcec      	bgt.n	801df82 <__multadd+0x12>
 801dfa8:	b30e      	cbz	r6, 801dfee <__multadd+0x7e>
 801dfaa:	68a3      	ldr	r3, [r4, #8]
 801dfac:	42ab      	cmp	r3, r5
 801dfae:	dc19      	bgt.n	801dfe4 <__multadd+0x74>
 801dfb0:	6861      	ldr	r1, [r4, #4]
 801dfb2:	4638      	mov	r0, r7
 801dfb4:	3101      	adds	r1, #1
 801dfb6:	f7ff ff79 	bl	801deac <_Balloc>
 801dfba:	4680      	mov	r8, r0
 801dfbc:	b928      	cbnz	r0, 801dfca <__multadd+0x5a>
 801dfbe:	4602      	mov	r2, r0
 801dfc0:	4b0c      	ldr	r3, [pc, #48]	@ (801dff4 <__multadd+0x84>)
 801dfc2:	480d      	ldr	r0, [pc, #52]	@ (801dff8 <__multadd+0x88>)
 801dfc4:	21ba      	movs	r1, #186	@ 0xba
 801dfc6:	f7fe fd17 	bl	801c9f8 <__assert_func>
 801dfca:	6922      	ldr	r2, [r4, #16]
 801dfcc:	3202      	adds	r2, #2
 801dfce:	f104 010c 	add.w	r1, r4, #12
 801dfd2:	0092      	lsls	r2, r2, #2
 801dfd4:	300c      	adds	r0, #12
 801dfd6:	f7fe fc9e 	bl	801c916 <memcpy>
 801dfda:	4621      	mov	r1, r4
 801dfdc:	4638      	mov	r0, r7
 801dfde:	f7ff ffa5 	bl	801df2c <_Bfree>
 801dfe2:	4644      	mov	r4, r8
 801dfe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dfe8:	3501      	adds	r5, #1
 801dfea:	615e      	str	r6, [r3, #20]
 801dfec:	6125      	str	r5, [r4, #16]
 801dfee:	4620      	mov	r0, r4
 801dff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dff4:	08024d71 	.word	0x08024d71
 801dff8:	08024de2 	.word	0x08024de2

0801dffc <__s2b>:
 801dffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e000:	460c      	mov	r4, r1
 801e002:	4615      	mov	r5, r2
 801e004:	461f      	mov	r7, r3
 801e006:	2209      	movs	r2, #9
 801e008:	3308      	adds	r3, #8
 801e00a:	4606      	mov	r6, r0
 801e00c:	fb93 f3f2 	sdiv	r3, r3, r2
 801e010:	2100      	movs	r1, #0
 801e012:	2201      	movs	r2, #1
 801e014:	429a      	cmp	r2, r3
 801e016:	db09      	blt.n	801e02c <__s2b+0x30>
 801e018:	4630      	mov	r0, r6
 801e01a:	f7ff ff47 	bl	801deac <_Balloc>
 801e01e:	b940      	cbnz	r0, 801e032 <__s2b+0x36>
 801e020:	4602      	mov	r2, r0
 801e022:	4b19      	ldr	r3, [pc, #100]	@ (801e088 <__s2b+0x8c>)
 801e024:	4819      	ldr	r0, [pc, #100]	@ (801e08c <__s2b+0x90>)
 801e026:	21d3      	movs	r1, #211	@ 0xd3
 801e028:	f7fe fce6 	bl	801c9f8 <__assert_func>
 801e02c:	0052      	lsls	r2, r2, #1
 801e02e:	3101      	adds	r1, #1
 801e030:	e7f0      	b.n	801e014 <__s2b+0x18>
 801e032:	9b08      	ldr	r3, [sp, #32]
 801e034:	6143      	str	r3, [r0, #20]
 801e036:	2d09      	cmp	r5, #9
 801e038:	f04f 0301 	mov.w	r3, #1
 801e03c:	6103      	str	r3, [r0, #16]
 801e03e:	dd16      	ble.n	801e06e <__s2b+0x72>
 801e040:	f104 0909 	add.w	r9, r4, #9
 801e044:	46c8      	mov	r8, r9
 801e046:	442c      	add	r4, r5
 801e048:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e04c:	4601      	mov	r1, r0
 801e04e:	3b30      	subs	r3, #48	@ 0x30
 801e050:	220a      	movs	r2, #10
 801e052:	4630      	mov	r0, r6
 801e054:	f7ff ff8c 	bl	801df70 <__multadd>
 801e058:	45a0      	cmp	r8, r4
 801e05a:	d1f5      	bne.n	801e048 <__s2b+0x4c>
 801e05c:	f1a5 0408 	sub.w	r4, r5, #8
 801e060:	444c      	add	r4, r9
 801e062:	1b2d      	subs	r5, r5, r4
 801e064:	1963      	adds	r3, r4, r5
 801e066:	42bb      	cmp	r3, r7
 801e068:	db04      	blt.n	801e074 <__s2b+0x78>
 801e06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e06e:	340a      	adds	r4, #10
 801e070:	2509      	movs	r5, #9
 801e072:	e7f6      	b.n	801e062 <__s2b+0x66>
 801e074:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e078:	4601      	mov	r1, r0
 801e07a:	3b30      	subs	r3, #48	@ 0x30
 801e07c:	220a      	movs	r2, #10
 801e07e:	4630      	mov	r0, r6
 801e080:	f7ff ff76 	bl	801df70 <__multadd>
 801e084:	e7ee      	b.n	801e064 <__s2b+0x68>
 801e086:	bf00      	nop
 801e088:	08024d71 	.word	0x08024d71
 801e08c:	08024de2 	.word	0x08024de2

0801e090 <__hi0bits>:
 801e090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e094:	4603      	mov	r3, r0
 801e096:	bf36      	itet	cc
 801e098:	0403      	lslcc	r3, r0, #16
 801e09a:	2000      	movcs	r0, #0
 801e09c:	2010      	movcc	r0, #16
 801e09e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e0a2:	bf3c      	itt	cc
 801e0a4:	021b      	lslcc	r3, r3, #8
 801e0a6:	3008      	addcc	r0, #8
 801e0a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e0ac:	bf3c      	itt	cc
 801e0ae:	011b      	lslcc	r3, r3, #4
 801e0b0:	3004      	addcc	r0, #4
 801e0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e0b6:	bf3c      	itt	cc
 801e0b8:	009b      	lslcc	r3, r3, #2
 801e0ba:	3002      	addcc	r0, #2
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	db05      	blt.n	801e0cc <__hi0bits+0x3c>
 801e0c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e0c4:	f100 0001 	add.w	r0, r0, #1
 801e0c8:	bf08      	it	eq
 801e0ca:	2020      	moveq	r0, #32
 801e0cc:	4770      	bx	lr

0801e0ce <__lo0bits>:
 801e0ce:	6803      	ldr	r3, [r0, #0]
 801e0d0:	4602      	mov	r2, r0
 801e0d2:	f013 0007 	ands.w	r0, r3, #7
 801e0d6:	d00b      	beq.n	801e0f0 <__lo0bits+0x22>
 801e0d8:	07d9      	lsls	r1, r3, #31
 801e0da:	d421      	bmi.n	801e120 <__lo0bits+0x52>
 801e0dc:	0798      	lsls	r0, r3, #30
 801e0de:	bf49      	itett	mi
 801e0e0:	085b      	lsrmi	r3, r3, #1
 801e0e2:	089b      	lsrpl	r3, r3, #2
 801e0e4:	2001      	movmi	r0, #1
 801e0e6:	6013      	strmi	r3, [r2, #0]
 801e0e8:	bf5c      	itt	pl
 801e0ea:	6013      	strpl	r3, [r2, #0]
 801e0ec:	2002      	movpl	r0, #2
 801e0ee:	4770      	bx	lr
 801e0f0:	b299      	uxth	r1, r3
 801e0f2:	b909      	cbnz	r1, 801e0f8 <__lo0bits+0x2a>
 801e0f4:	0c1b      	lsrs	r3, r3, #16
 801e0f6:	2010      	movs	r0, #16
 801e0f8:	b2d9      	uxtb	r1, r3
 801e0fa:	b909      	cbnz	r1, 801e100 <__lo0bits+0x32>
 801e0fc:	3008      	adds	r0, #8
 801e0fe:	0a1b      	lsrs	r3, r3, #8
 801e100:	0719      	lsls	r1, r3, #28
 801e102:	bf04      	itt	eq
 801e104:	091b      	lsreq	r3, r3, #4
 801e106:	3004      	addeq	r0, #4
 801e108:	0799      	lsls	r1, r3, #30
 801e10a:	bf04      	itt	eq
 801e10c:	089b      	lsreq	r3, r3, #2
 801e10e:	3002      	addeq	r0, #2
 801e110:	07d9      	lsls	r1, r3, #31
 801e112:	d403      	bmi.n	801e11c <__lo0bits+0x4e>
 801e114:	085b      	lsrs	r3, r3, #1
 801e116:	f100 0001 	add.w	r0, r0, #1
 801e11a:	d003      	beq.n	801e124 <__lo0bits+0x56>
 801e11c:	6013      	str	r3, [r2, #0]
 801e11e:	4770      	bx	lr
 801e120:	2000      	movs	r0, #0
 801e122:	4770      	bx	lr
 801e124:	2020      	movs	r0, #32
 801e126:	4770      	bx	lr

0801e128 <__i2b>:
 801e128:	b510      	push	{r4, lr}
 801e12a:	460c      	mov	r4, r1
 801e12c:	2101      	movs	r1, #1
 801e12e:	f7ff febd 	bl	801deac <_Balloc>
 801e132:	4602      	mov	r2, r0
 801e134:	b928      	cbnz	r0, 801e142 <__i2b+0x1a>
 801e136:	4b05      	ldr	r3, [pc, #20]	@ (801e14c <__i2b+0x24>)
 801e138:	4805      	ldr	r0, [pc, #20]	@ (801e150 <__i2b+0x28>)
 801e13a:	f240 1145 	movw	r1, #325	@ 0x145
 801e13e:	f7fe fc5b 	bl	801c9f8 <__assert_func>
 801e142:	2301      	movs	r3, #1
 801e144:	6144      	str	r4, [r0, #20]
 801e146:	6103      	str	r3, [r0, #16]
 801e148:	bd10      	pop	{r4, pc}
 801e14a:	bf00      	nop
 801e14c:	08024d71 	.word	0x08024d71
 801e150:	08024de2 	.word	0x08024de2

0801e154 <__multiply>:
 801e154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e158:	4617      	mov	r7, r2
 801e15a:	690a      	ldr	r2, [r1, #16]
 801e15c:	693b      	ldr	r3, [r7, #16]
 801e15e:	429a      	cmp	r2, r3
 801e160:	bfa8      	it	ge
 801e162:	463b      	movge	r3, r7
 801e164:	4689      	mov	r9, r1
 801e166:	bfa4      	itt	ge
 801e168:	460f      	movge	r7, r1
 801e16a:	4699      	movge	r9, r3
 801e16c:	693d      	ldr	r5, [r7, #16]
 801e16e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e172:	68bb      	ldr	r3, [r7, #8]
 801e174:	6879      	ldr	r1, [r7, #4]
 801e176:	eb05 060a 	add.w	r6, r5, sl
 801e17a:	42b3      	cmp	r3, r6
 801e17c:	b085      	sub	sp, #20
 801e17e:	bfb8      	it	lt
 801e180:	3101      	addlt	r1, #1
 801e182:	f7ff fe93 	bl	801deac <_Balloc>
 801e186:	b930      	cbnz	r0, 801e196 <__multiply+0x42>
 801e188:	4602      	mov	r2, r0
 801e18a:	4b41      	ldr	r3, [pc, #260]	@ (801e290 <__multiply+0x13c>)
 801e18c:	4841      	ldr	r0, [pc, #260]	@ (801e294 <__multiply+0x140>)
 801e18e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e192:	f7fe fc31 	bl	801c9f8 <__assert_func>
 801e196:	f100 0414 	add.w	r4, r0, #20
 801e19a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801e19e:	4623      	mov	r3, r4
 801e1a0:	2200      	movs	r2, #0
 801e1a2:	4573      	cmp	r3, lr
 801e1a4:	d320      	bcc.n	801e1e8 <__multiply+0x94>
 801e1a6:	f107 0814 	add.w	r8, r7, #20
 801e1aa:	f109 0114 	add.w	r1, r9, #20
 801e1ae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801e1b2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801e1b6:	9302      	str	r3, [sp, #8]
 801e1b8:	1beb      	subs	r3, r5, r7
 801e1ba:	3b15      	subs	r3, #21
 801e1bc:	f023 0303 	bic.w	r3, r3, #3
 801e1c0:	3304      	adds	r3, #4
 801e1c2:	3715      	adds	r7, #21
 801e1c4:	42bd      	cmp	r5, r7
 801e1c6:	bf38      	it	cc
 801e1c8:	2304      	movcc	r3, #4
 801e1ca:	9301      	str	r3, [sp, #4]
 801e1cc:	9b02      	ldr	r3, [sp, #8]
 801e1ce:	9103      	str	r1, [sp, #12]
 801e1d0:	428b      	cmp	r3, r1
 801e1d2:	d80c      	bhi.n	801e1ee <__multiply+0x9a>
 801e1d4:	2e00      	cmp	r6, #0
 801e1d6:	dd03      	ble.n	801e1e0 <__multiply+0x8c>
 801e1d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d055      	beq.n	801e28c <__multiply+0x138>
 801e1e0:	6106      	str	r6, [r0, #16]
 801e1e2:	b005      	add	sp, #20
 801e1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1e8:	f843 2b04 	str.w	r2, [r3], #4
 801e1ec:	e7d9      	b.n	801e1a2 <__multiply+0x4e>
 801e1ee:	f8b1 a000 	ldrh.w	sl, [r1]
 801e1f2:	f1ba 0f00 	cmp.w	sl, #0
 801e1f6:	d01f      	beq.n	801e238 <__multiply+0xe4>
 801e1f8:	46c4      	mov	ip, r8
 801e1fa:	46a1      	mov	r9, r4
 801e1fc:	2700      	movs	r7, #0
 801e1fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e202:	f8d9 3000 	ldr.w	r3, [r9]
 801e206:	fa1f fb82 	uxth.w	fp, r2
 801e20a:	b29b      	uxth	r3, r3
 801e20c:	fb0a 330b 	mla	r3, sl, fp, r3
 801e210:	443b      	add	r3, r7
 801e212:	f8d9 7000 	ldr.w	r7, [r9]
 801e216:	0c12      	lsrs	r2, r2, #16
 801e218:	0c3f      	lsrs	r7, r7, #16
 801e21a:	fb0a 7202 	mla	r2, sl, r2, r7
 801e21e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801e222:	b29b      	uxth	r3, r3
 801e224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e228:	4565      	cmp	r5, ip
 801e22a:	f849 3b04 	str.w	r3, [r9], #4
 801e22e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801e232:	d8e4      	bhi.n	801e1fe <__multiply+0xaa>
 801e234:	9b01      	ldr	r3, [sp, #4]
 801e236:	50e7      	str	r7, [r4, r3]
 801e238:	9b03      	ldr	r3, [sp, #12]
 801e23a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e23e:	3104      	adds	r1, #4
 801e240:	f1b9 0f00 	cmp.w	r9, #0
 801e244:	d020      	beq.n	801e288 <__multiply+0x134>
 801e246:	6823      	ldr	r3, [r4, #0]
 801e248:	4647      	mov	r7, r8
 801e24a:	46a4      	mov	ip, r4
 801e24c:	f04f 0a00 	mov.w	sl, #0
 801e250:	f8b7 b000 	ldrh.w	fp, [r7]
 801e254:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801e258:	fb09 220b 	mla	r2, r9, fp, r2
 801e25c:	4452      	add	r2, sl
 801e25e:	b29b      	uxth	r3, r3
 801e260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e264:	f84c 3b04 	str.w	r3, [ip], #4
 801e268:	f857 3b04 	ldr.w	r3, [r7], #4
 801e26c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e270:	f8bc 3000 	ldrh.w	r3, [ip]
 801e274:	fb09 330a 	mla	r3, r9, sl, r3
 801e278:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801e27c:	42bd      	cmp	r5, r7
 801e27e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e282:	d8e5      	bhi.n	801e250 <__multiply+0xfc>
 801e284:	9a01      	ldr	r2, [sp, #4]
 801e286:	50a3      	str	r3, [r4, r2]
 801e288:	3404      	adds	r4, #4
 801e28a:	e79f      	b.n	801e1cc <__multiply+0x78>
 801e28c:	3e01      	subs	r6, #1
 801e28e:	e7a1      	b.n	801e1d4 <__multiply+0x80>
 801e290:	08024d71 	.word	0x08024d71
 801e294:	08024de2 	.word	0x08024de2

0801e298 <__pow5mult>:
 801e298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e29c:	4615      	mov	r5, r2
 801e29e:	f012 0203 	ands.w	r2, r2, #3
 801e2a2:	4607      	mov	r7, r0
 801e2a4:	460e      	mov	r6, r1
 801e2a6:	d007      	beq.n	801e2b8 <__pow5mult+0x20>
 801e2a8:	4c25      	ldr	r4, [pc, #148]	@ (801e340 <__pow5mult+0xa8>)
 801e2aa:	3a01      	subs	r2, #1
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e2b2:	f7ff fe5d 	bl	801df70 <__multadd>
 801e2b6:	4606      	mov	r6, r0
 801e2b8:	10ad      	asrs	r5, r5, #2
 801e2ba:	d03d      	beq.n	801e338 <__pow5mult+0xa0>
 801e2bc:	69fc      	ldr	r4, [r7, #28]
 801e2be:	b97c      	cbnz	r4, 801e2e0 <__pow5mult+0x48>
 801e2c0:	2010      	movs	r0, #16
 801e2c2:	f7fb fb07 	bl	80198d4 <malloc>
 801e2c6:	4602      	mov	r2, r0
 801e2c8:	61f8      	str	r0, [r7, #28]
 801e2ca:	b928      	cbnz	r0, 801e2d8 <__pow5mult+0x40>
 801e2cc:	4b1d      	ldr	r3, [pc, #116]	@ (801e344 <__pow5mult+0xac>)
 801e2ce:	481e      	ldr	r0, [pc, #120]	@ (801e348 <__pow5mult+0xb0>)
 801e2d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e2d4:	f7fe fb90 	bl	801c9f8 <__assert_func>
 801e2d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e2dc:	6004      	str	r4, [r0, #0]
 801e2de:	60c4      	str	r4, [r0, #12]
 801e2e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e2e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e2e8:	b94c      	cbnz	r4, 801e2fe <__pow5mult+0x66>
 801e2ea:	f240 2171 	movw	r1, #625	@ 0x271
 801e2ee:	4638      	mov	r0, r7
 801e2f0:	f7ff ff1a 	bl	801e128 <__i2b>
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	f8c8 0008 	str.w	r0, [r8, #8]
 801e2fa:	4604      	mov	r4, r0
 801e2fc:	6003      	str	r3, [r0, #0]
 801e2fe:	f04f 0900 	mov.w	r9, #0
 801e302:	07eb      	lsls	r3, r5, #31
 801e304:	d50a      	bpl.n	801e31c <__pow5mult+0x84>
 801e306:	4631      	mov	r1, r6
 801e308:	4622      	mov	r2, r4
 801e30a:	4638      	mov	r0, r7
 801e30c:	f7ff ff22 	bl	801e154 <__multiply>
 801e310:	4631      	mov	r1, r6
 801e312:	4680      	mov	r8, r0
 801e314:	4638      	mov	r0, r7
 801e316:	f7ff fe09 	bl	801df2c <_Bfree>
 801e31a:	4646      	mov	r6, r8
 801e31c:	106d      	asrs	r5, r5, #1
 801e31e:	d00b      	beq.n	801e338 <__pow5mult+0xa0>
 801e320:	6820      	ldr	r0, [r4, #0]
 801e322:	b938      	cbnz	r0, 801e334 <__pow5mult+0x9c>
 801e324:	4622      	mov	r2, r4
 801e326:	4621      	mov	r1, r4
 801e328:	4638      	mov	r0, r7
 801e32a:	f7ff ff13 	bl	801e154 <__multiply>
 801e32e:	6020      	str	r0, [r4, #0]
 801e330:	f8c0 9000 	str.w	r9, [r0]
 801e334:	4604      	mov	r4, r0
 801e336:	e7e4      	b.n	801e302 <__pow5mult+0x6a>
 801e338:	4630      	mov	r0, r6
 801e33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e33e:	bf00      	nop
 801e340:	0802507c 	.word	0x0802507c
 801e344:	08024bb1 	.word	0x08024bb1
 801e348:	08024de2 	.word	0x08024de2

0801e34c <__lshift>:
 801e34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e350:	460c      	mov	r4, r1
 801e352:	6849      	ldr	r1, [r1, #4]
 801e354:	6923      	ldr	r3, [r4, #16]
 801e356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e35a:	68a3      	ldr	r3, [r4, #8]
 801e35c:	4607      	mov	r7, r0
 801e35e:	4691      	mov	r9, r2
 801e360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e364:	f108 0601 	add.w	r6, r8, #1
 801e368:	42b3      	cmp	r3, r6
 801e36a:	db0b      	blt.n	801e384 <__lshift+0x38>
 801e36c:	4638      	mov	r0, r7
 801e36e:	f7ff fd9d 	bl	801deac <_Balloc>
 801e372:	4605      	mov	r5, r0
 801e374:	b948      	cbnz	r0, 801e38a <__lshift+0x3e>
 801e376:	4602      	mov	r2, r0
 801e378:	4b28      	ldr	r3, [pc, #160]	@ (801e41c <__lshift+0xd0>)
 801e37a:	4829      	ldr	r0, [pc, #164]	@ (801e420 <__lshift+0xd4>)
 801e37c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e380:	f7fe fb3a 	bl	801c9f8 <__assert_func>
 801e384:	3101      	adds	r1, #1
 801e386:	005b      	lsls	r3, r3, #1
 801e388:	e7ee      	b.n	801e368 <__lshift+0x1c>
 801e38a:	2300      	movs	r3, #0
 801e38c:	f100 0114 	add.w	r1, r0, #20
 801e390:	f100 0210 	add.w	r2, r0, #16
 801e394:	4618      	mov	r0, r3
 801e396:	4553      	cmp	r3, sl
 801e398:	db33      	blt.n	801e402 <__lshift+0xb6>
 801e39a:	6920      	ldr	r0, [r4, #16]
 801e39c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e3a0:	f104 0314 	add.w	r3, r4, #20
 801e3a4:	f019 091f 	ands.w	r9, r9, #31
 801e3a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e3ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e3b0:	d02b      	beq.n	801e40a <__lshift+0xbe>
 801e3b2:	f1c9 0e20 	rsb	lr, r9, #32
 801e3b6:	468a      	mov	sl, r1
 801e3b8:	2200      	movs	r2, #0
 801e3ba:	6818      	ldr	r0, [r3, #0]
 801e3bc:	fa00 f009 	lsl.w	r0, r0, r9
 801e3c0:	4310      	orrs	r0, r2
 801e3c2:	f84a 0b04 	str.w	r0, [sl], #4
 801e3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e3ca:	459c      	cmp	ip, r3
 801e3cc:	fa22 f20e 	lsr.w	r2, r2, lr
 801e3d0:	d8f3      	bhi.n	801e3ba <__lshift+0x6e>
 801e3d2:	ebac 0304 	sub.w	r3, ip, r4
 801e3d6:	3b15      	subs	r3, #21
 801e3d8:	f023 0303 	bic.w	r3, r3, #3
 801e3dc:	3304      	adds	r3, #4
 801e3de:	f104 0015 	add.w	r0, r4, #21
 801e3e2:	4560      	cmp	r0, ip
 801e3e4:	bf88      	it	hi
 801e3e6:	2304      	movhi	r3, #4
 801e3e8:	50ca      	str	r2, [r1, r3]
 801e3ea:	b10a      	cbz	r2, 801e3f0 <__lshift+0xa4>
 801e3ec:	f108 0602 	add.w	r6, r8, #2
 801e3f0:	3e01      	subs	r6, #1
 801e3f2:	4638      	mov	r0, r7
 801e3f4:	612e      	str	r6, [r5, #16]
 801e3f6:	4621      	mov	r1, r4
 801e3f8:	f7ff fd98 	bl	801df2c <_Bfree>
 801e3fc:	4628      	mov	r0, r5
 801e3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e402:	f842 0f04 	str.w	r0, [r2, #4]!
 801e406:	3301      	adds	r3, #1
 801e408:	e7c5      	b.n	801e396 <__lshift+0x4a>
 801e40a:	3904      	subs	r1, #4
 801e40c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e410:	f841 2f04 	str.w	r2, [r1, #4]!
 801e414:	459c      	cmp	ip, r3
 801e416:	d8f9      	bhi.n	801e40c <__lshift+0xc0>
 801e418:	e7ea      	b.n	801e3f0 <__lshift+0xa4>
 801e41a:	bf00      	nop
 801e41c:	08024d71 	.word	0x08024d71
 801e420:	08024de2 	.word	0x08024de2

0801e424 <__mcmp>:
 801e424:	690a      	ldr	r2, [r1, #16]
 801e426:	4603      	mov	r3, r0
 801e428:	6900      	ldr	r0, [r0, #16]
 801e42a:	1a80      	subs	r0, r0, r2
 801e42c:	b530      	push	{r4, r5, lr}
 801e42e:	d10e      	bne.n	801e44e <__mcmp+0x2a>
 801e430:	3314      	adds	r3, #20
 801e432:	3114      	adds	r1, #20
 801e434:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e438:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e43c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e440:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e444:	4295      	cmp	r5, r2
 801e446:	d003      	beq.n	801e450 <__mcmp+0x2c>
 801e448:	d205      	bcs.n	801e456 <__mcmp+0x32>
 801e44a:	f04f 30ff 	mov.w	r0, #4294967295
 801e44e:	bd30      	pop	{r4, r5, pc}
 801e450:	42a3      	cmp	r3, r4
 801e452:	d3f3      	bcc.n	801e43c <__mcmp+0x18>
 801e454:	e7fb      	b.n	801e44e <__mcmp+0x2a>
 801e456:	2001      	movs	r0, #1
 801e458:	e7f9      	b.n	801e44e <__mcmp+0x2a>
	...

0801e45c <__mdiff>:
 801e45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e460:	4689      	mov	r9, r1
 801e462:	4606      	mov	r6, r0
 801e464:	4611      	mov	r1, r2
 801e466:	4648      	mov	r0, r9
 801e468:	4614      	mov	r4, r2
 801e46a:	f7ff ffdb 	bl	801e424 <__mcmp>
 801e46e:	1e05      	subs	r5, r0, #0
 801e470:	d112      	bne.n	801e498 <__mdiff+0x3c>
 801e472:	4629      	mov	r1, r5
 801e474:	4630      	mov	r0, r6
 801e476:	f7ff fd19 	bl	801deac <_Balloc>
 801e47a:	4602      	mov	r2, r0
 801e47c:	b928      	cbnz	r0, 801e48a <__mdiff+0x2e>
 801e47e:	4b3f      	ldr	r3, [pc, #252]	@ (801e57c <__mdiff+0x120>)
 801e480:	f240 2137 	movw	r1, #567	@ 0x237
 801e484:	483e      	ldr	r0, [pc, #248]	@ (801e580 <__mdiff+0x124>)
 801e486:	f7fe fab7 	bl	801c9f8 <__assert_func>
 801e48a:	2301      	movs	r3, #1
 801e48c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e490:	4610      	mov	r0, r2
 801e492:	b003      	add	sp, #12
 801e494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e498:	bfbc      	itt	lt
 801e49a:	464b      	movlt	r3, r9
 801e49c:	46a1      	movlt	r9, r4
 801e49e:	4630      	mov	r0, r6
 801e4a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e4a4:	bfba      	itte	lt
 801e4a6:	461c      	movlt	r4, r3
 801e4a8:	2501      	movlt	r5, #1
 801e4aa:	2500      	movge	r5, #0
 801e4ac:	f7ff fcfe 	bl	801deac <_Balloc>
 801e4b0:	4602      	mov	r2, r0
 801e4b2:	b918      	cbnz	r0, 801e4bc <__mdiff+0x60>
 801e4b4:	4b31      	ldr	r3, [pc, #196]	@ (801e57c <__mdiff+0x120>)
 801e4b6:	f240 2145 	movw	r1, #581	@ 0x245
 801e4ba:	e7e3      	b.n	801e484 <__mdiff+0x28>
 801e4bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e4c0:	6926      	ldr	r6, [r4, #16]
 801e4c2:	60c5      	str	r5, [r0, #12]
 801e4c4:	f109 0310 	add.w	r3, r9, #16
 801e4c8:	f109 0514 	add.w	r5, r9, #20
 801e4cc:	f104 0e14 	add.w	lr, r4, #20
 801e4d0:	f100 0b14 	add.w	fp, r0, #20
 801e4d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e4d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e4dc:	9301      	str	r3, [sp, #4]
 801e4de:	46d9      	mov	r9, fp
 801e4e0:	f04f 0c00 	mov.w	ip, #0
 801e4e4:	9b01      	ldr	r3, [sp, #4]
 801e4e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e4ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e4ee:	9301      	str	r3, [sp, #4]
 801e4f0:	fa1f f38a 	uxth.w	r3, sl
 801e4f4:	4619      	mov	r1, r3
 801e4f6:	b283      	uxth	r3, r0
 801e4f8:	1acb      	subs	r3, r1, r3
 801e4fa:	0c00      	lsrs	r0, r0, #16
 801e4fc:	4463      	add	r3, ip
 801e4fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e502:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e506:	b29b      	uxth	r3, r3
 801e508:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e50c:	4576      	cmp	r6, lr
 801e50e:	f849 3b04 	str.w	r3, [r9], #4
 801e512:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e516:	d8e5      	bhi.n	801e4e4 <__mdiff+0x88>
 801e518:	1b33      	subs	r3, r6, r4
 801e51a:	3b15      	subs	r3, #21
 801e51c:	f023 0303 	bic.w	r3, r3, #3
 801e520:	3415      	adds	r4, #21
 801e522:	3304      	adds	r3, #4
 801e524:	42a6      	cmp	r6, r4
 801e526:	bf38      	it	cc
 801e528:	2304      	movcc	r3, #4
 801e52a:	441d      	add	r5, r3
 801e52c:	445b      	add	r3, fp
 801e52e:	461e      	mov	r6, r3
 801e530:	462c      	mov	r4, r5
 801e532:	4544      	cmp	r4, r8
 801e534:	d30e      	bcc.n	801e554 <__mdiff+0xf8>
 801e536:	f108 0103 	add.w	r1, r8, #3
 801e53a:	1b49      	subs	r1, r1, r5
 801e53c:	f021 0103 	bic.w	r1, r1, #3
 801e540:	3d03      	subs	r5, #3
 801e542:	45a8      	cmp	r8, r5
 801e544:	bf38      	it	cc
 801e546:	2100      	movcc	r1, #0
 801e548:	440b      	add	r3, r1
 801e54a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e54e:	b191      	cbz	r1, 801e576 <__mdiff+0x11a>
 801e550:	6117      	str	r7, [r2, #16]
 801e552:	e79d      	b.n	801e490 <__mdiff+0x34>
 801e554:	f854 1b04 	ldr.w	r1, [r4], #4
 801e558:	46e6      	mov	lr, ip
 801e55a:	0c08      	lsrs	r0, r1, #16
 801e55c:	fa1c fc81 	uxtah	ip, ip, r1
 801e560:	4471      	add	r1, lr
 801e562:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e566:	b289      	uxth	r1, r1
 801e568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e56c:	f846 1b04 	str.w	r1, [r6], #4
 801e570:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e574:	e7dd      	b.n	801e532 <__mdiff+0xd6>
 801e576:	3f01      	subs	r7, #1
 801e578:	e7e7      	b.n	801e54a <__mdiff+0xee>
 801e57a:	bf00      	nop
 801e57c:	08024d71 	.word	0x08024d71
 801e580:	08024de2 	.word	0x08024de2

0801e584 <__ulp>:
 801e584:	b082      	sub	sp, #8
 801e586:	ed8d 0b00 	vstr	d0, [sp]
 801e58a:	9a01      	ldr	r2, [sp, #4]
 801e58c:	4b0f      	ldr	r3, [pc, #60]	@ (801e5cc <__ulp+0x48>)
 801e58e:	4013      	ands	r3, r2
 801e590:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801e594:	2b00      	cmp	r3, #0
 801e596:	dc08      	bgt.n	801e5aa <__ulp+0x26>
 801e598:	425b      	negs	r3, r3
 801e59a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801e59e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e5a2:	da04      	bge.n	801e5ae <__ulp+0x2a>
 801e5a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801e5a8:	4113      	asrs	r3, r2
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	e008      	b.n	801e5c0 <__ulp+0x3c>
 801e5ae:	f1a2 0314 	sub.w	r3, r2, #20
 801e5b2:	2b1e      	cmp	r3, #30
 801e5b4:	bfda      	itte	le
 801e5b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801e5ba:	40da      	lsrle	r2, r3
 801e5bc:	2201      	movgt	r2, #1
 801e5be:	2300      	movs	r3, #0
 801e5c0:	4619      	mov	r1, r3
 801e5c2:	4610      	mov	r0, r2
 801e5c4:	ec41 0b10 	vmov	d0, r0, r1
 801e5c8:	b002      	add	sp, #8
 801e5ca:	4770      	bx	lr
 801e5cc:	7ff00000 	.word	0x7ff00000

0801e5d0 <__b2d>:
 801e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5d4:	6906      	ldr	r6, [r0, #16]
 801e5d6:	f100 0814 	add.w	r8, r0, #20
 801e5da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801e5de:	1f37      	subs	r7, r6, #4
 801e5e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e5e4:	4610      	mov	r0, r2
 801e5e6:	f7ff fd53 	bl	801e090 <__hi0bits>
 801e5ea:	f1c0 0320 	rsb	r3, r0, #32
 801e5ee:	280a      	cmp	r0, #10
 801e5f0:	600b      	str	r3, [r1, #0]
 801e5f2:	491b      	ldr	r1, [pc, #108]	@ (801e660 <__b2d+0x90>)
 801e5f4:	dc15      	bgt.n	801e622 <__b2d+0x52>
 801e5f6:	f1c0 0c0b 	rsb	ip, r0, #11
 801e5fa:	fa22 f30c 	lsr.w	r3, r2, ip
 801e5fe:	45b8      	cmp	r8, r7
 801e600:	ea43 0501 	orr.w	r5, r3, r1
 801e604:	bf34      	ite	cc
 801e606:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801e60a:	2300      	movcs	r3, #0
 801e60c:	3015      	adds	r0, #21
 801e60e:	fa02 f000 	lsl.w	r0, r2, r0
 801e612:	fa23 f30c 	lsr.w	r3, r3, ip
 801e616:	4303      	orrs	r3, r0
 801e618:	461c      	mov	r4, r3
 801e61a:	ec45 4b10 	vmov	d0, r4, r5
 801e61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e622:	45b8      	cmp	r8, r7
 801e624:	bf3a      	itte	cc
 801e626:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801e62a:	f1a6 0708 	subcc.w	r7, r6, #8
 801e62e:	2300      	movcs	r3, #0
 801e630:	380b      	subs	r0, #11
 801e632:	d012      	beq.n	801e65a <__b2d+0x8a>
 801e634:	f1c0 0120 	rsb	r1, r0, #32
 801e638:	fa23 f401 	lsr.w	r4, r3, r1
 801e63c:	4082      	lsls	r2, r0
 801e63e:	4322      	orrs	r2, r4
 801e640:	4547      	cmp	r7, r8
 801e642:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801e646:	bf8c      	ite	hi
 801e648:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801e64c:	2200      	movls	r2, #0
 801e64e:	4083      	lsls	r3, r0
 801e650:	40ca      	lsrs	r2, r1
 801e652:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801e656:	4313      	orrs	r3, r2
 801e658:	e7de      	b.n	801e618 <__b2d+0x48>
 801e65a:	ea42 0501 	orr.w	r5, r2, r1
 801e65e:	e7db      	b.n	801e618 <__b2d+0x48>
 801e660:	3ff00000 	.word	0x3ff00000

0801e664 <__d2b>:
 801e664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e668:	460f      	mov	r7, r1
 801e66a:	2101      	movs	r1, #1
 801e66c:	ec59 8b10 	vmov	r8, r9, d0
 801e670:	4616      	mov	r6, r2
 801e672:	f7ff fc1b 	bl	801deac <_Balloc>
 801e676:	4604      	mov	r4, r0
 801e678:	b930      	cbnz	r0, 801e688 <__d2b+0x24>
 801e67a:	4602      	mov	r2, r0
 801e67c:	4b23      	ldr	r3, [pc, #140]	@ (801e70c <__d2b+0xa8>)
 801e67e:	4824      	ldr	r0, [pc, #144]	@ (801e710 <__d2b+0xac>)
 801e680:	f240 310f 	movw	r1, #783	@ 0x30f
 801e684:	f7fe f9b8 	bl	801c9f8 <__assert_func>
 801e688:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e68c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e690:	b10d      	cbz	r5, 801e696 <__d2b+0x32>
 801e692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e696:	9301      	str	r3, [sp, #4]
 801e698:	f1b8 0300 	subs.w	r3, r8, #0
 801e69c:	d023      	beq.n	801e6e6 <__d2b+0x82>
 801e69e:	4668      	mov	r0, sp
 801e6a0:	9300      	str	r3, [sp, #0]
 801e6a2:	f7ff fd14 	bl	801e0ce <__lo0bits>
 801e6a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e6aa:	b1d0      	cbz	r0, 801e6e2 <__d2b+0x7e>
 801e6ac:	f1c0 0320 	rsb	r3, r0, #32
 801e6b0:	fa02 f303 	lsl.w	r3, r2, r3
 801e6b4:	430b      	orrs	r3, r1
 801e6b6:	40c2      	lsrs	r2, r0
 801e6b8:	6163      	str	r3, [r4, #20]
 801e6ba:	9201      	str	r2, [sp, #4]
 801e6bc:	9b01      	ldr	r3, [sp, #4]
 801e6be:	61a3      	str	r3, [r4, #24]
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	bf0c      	ite	eq
 801e6c4:	2201      	moveq	r2, #1
 801e6c6:	2202      	movne	r2, #2
 801e6c8:	6122      	str	r2, [r4, #16]
 801e6ca:	b1a5      	cbz	r5, 801e6f6 <__d2b+0x92>
 801e6cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e6d0:	4405      	add	r5, r0
 801e6d2:	603d      	str	r5, [r7, #0]
 801e6d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e6d8:	6030      	str	r0, [r6, #0]
 801e6da:	4620      	mov	r0, r4
 801e6dc:	b003      	add	sp, #12
 801e6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6e2:	6161      	str	r1, [r4, #20]
 801e6e4:	e7ea      	b.n	801e6bc <__d2b+0x58>
 801e6e6:	a801      	add	r0, sp, #4
 801e6e8:	f7ff fcf1 	bl	801e0ce <__lo0bits>
 801e6ec:	9b01      	ldr	r3, [sp, #4]
 801e6ee:	6163      	str	r3, [r4, #20]
 801e6f0:	3020      	adds	r0, #32
 801e6f2:	2201      	movs	r2, #1
 801e6f4:	e7e8      	b.n	801e6c8 <__d2b+0x64>
 801e6f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e6fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e6fe:	6038      	str	r0, [r7, #0]
 801e700:	6918      	ldr	r0, [r3, #16]
 801e702:	f7ff fcc5 	bl	801e090 <__hi0bits>
 801e706:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e70a:	e7e5      	b.n	801e6d8 <__d2b+0x74>
 801e70c:	08024d71 	.word	0x08024d71
 801e710:	08024de2 	.word	0x08024de2

0801e714 <__ratio>:
 801e714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e718:	b085      	sub	sp, #20
 801e71a:	e9cd 1000 	strd	r1, r0, [sp]
 801e71e:	a902      	add	r1, sp, #8
 801e720:	f7ff ff56 	bl	801e5d0 <__b2d>
 801e724:	9800      	ldr	r0, [sp, #0]
 801e726:	a903      	add	r1, sp, #12
 801e728:	ec55 4b10 	vmov	r4, r5, d0
 801e72c:	f7ff ff50 	bl	801e5d0 <__b2d>
 801e730:	9b01      	ldr	r3, [sp, #4]
 801e732:	6919      	ldr	r1, [r3, #16]
 801e734:	9b00      	ldr	r3, [sp, #0]
 801e736:	691b      	ldr	r3, [r3, #16]
 801e738:	1ac9      	subs	r1, r1, r3
 801e73a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801e73e:	1a9b      	subs	r3, r3, r2
 801e740:	ec5b ab10 	vmov	sl, fp, d0
 801e744:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801e748:	2b00      	cmp	r3, #0
 801e74a:	bfce      	itee	gt
 801e74c:	462a      	movgt	r2, r5
 801e74e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e752:	465a      	movle	r2, fp
 801e754:	462f      	mov	r7, r5
 801e756:	46d9      	mov	r9, fp
 801e758:	bfcc      	ite	gt
 801e75a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e75e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801e762:	464b      	mov	r3, r9
 801e764:	4652      	mov	r2, sl
 801e766:	4620      	mov	r0, r4
 801e768:	4639      	mov	r1, r7
 801e76a:	f7e2 f87f 	bl	800086c <__aeabi_ddiv>
 801e76e:	ec41 0b10 	vmov	d0, r0, r1
 801e772:	b005      	add	sp, #20
 801e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e778 <__copybits>:
 801e778:	3901      	subs	r1, #1
 801e77a:	b570      	push	{r4, r5, r6, lr}
 801e77c:	1149      	asrs	r1, r1, #5
 801e77e:	6914      	ldr	r4, [r2, #16]
 801e780:	3101      	adds	r1, #1
 801e782:	f102 0314 	add.w	r3, r2, #20
 801e786:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e78a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e78e:	1f05      	subs	r5, r0, #4
 801e790:	42a3      	cmp	r3, r4
 801e792:	d30c      	bcc.n	801e7ae <__copybits+0x36>
 801e794:	1aa3      	subs	r3, r4, r2
 801e796:	3b11      	subs	r3, #17
 801e798:	f023 0303 	bic.w	r3, r3, #3
 801e79c:	3211      	adds	r2, #17
 801e79e:	42a2      	cmp	r2, r4
 801e7a0:	bf88      	it	hi
 801e7a2:	2300      	movhi	r3, #0
 801e7a4:	4418      	add	r0, r3
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	4288      	cmp	r0, r1
 801e7aa:	d305      	bcc.n	801e7b8 <__copybits+0x40>
 801e7ac:	bd70      	pop	{r4, r5, r6, pc}
 801e7ae:	f853 6b04 	ldr.w	r6, [r3], #4
 801e7b2:	f845 6f04 	str.w	r6, [r5, #4]!
 801e7b6:	e7eb      	b.n	801e790 <__copybits+0x18>
 801e7b8:	f840 3b04 	str.w	r3, [r0], #4
 801e7bc:	e7f4      	b.n	801e7a8 <__copybits+0x30>

0801e7be <__any_on>:
 801e7be:	f100 0214 	add.w	r2, r0, #20
 801e7c2:	6900      	ldr	r0, [r0, #16]
 801e7c4:	114b      	asrs	r3, r1, #5
 801e7c6:	4298      	cmp	r0, r3
 801e7c8:	b510      	push	{r4, lr}
 801e7ca:	db11      	blt.n	801e7f0 <__any_on+0x32>
 801e7cc:	dd0a      	ble.n	801e7e4 <__any_on+0x26>
 801e7ce:	f011 011f 	ands.w	r1, r1, #31
 801e7d2:	d007      	beq.n	801e7e4 <__any_on+0x26>
 801e7d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e7d8:	fa24 f001 	lsr.w	r0, r4, r1
 801e7dc:	fa00 f101 	lsl.w	r1, r0, r1
 801e7e0:	428c      	cmp	r4, r1
 801e7e2:	d10b      	bne.n	801e7fc <__any_on+0x3e>
 801e7e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e7e8:	4293      	cmp	r3, r2
 801e7ea:	d803      	bhi.n	801e7f4 <__any_on+0x36>
 801e7ec:	2000      	movs	r0, #0
 801e7ee:	bd10      	pop	{r4, pc}
 801e7f0:	4603      	mov	r3, r0
 801e7f2:	e7f7      	b.n	801e7e4 <__any_on+0x26>
 801e7f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e7f8:	2900      	cmp	r1, #0
 801e7fa:	d0f5      	beq.n	801e7e8 <__any_on+0x2a>
 801e7fc:	2001      	movs	r0, #1
 801e7fe:	e7f6      	b.n	801e7ee <__any_on+0x30>

0801e800 <_strtoul_l.isra.0>:
 801e800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e804:	4e34      	ldr	r6, [pc, #208]	@ (801e8d8 <_strtoul_l.isra.0+0xd8>)
 801e806:	4686      	mov	lr, r0
 801e808:	460d      	mov	r5, r1
 801e80a:	4628      	mov	r0, r5
 801e80c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e810:	5d37      	ldrb	r7, [r6, r4]
 801e812:	f017 0708 	ands.w	r7, r7, #8
 801e816:	d1f8      	bne.n	801e80a <_strtoul_l.isra.0+0xa>
 801e818:	2c2d      	cmp	r4, #45	@ 0x2d
 801e81a:	d110      	bne.n	801e83e <_strtoul_l.isra.0+0x3e>
 801e81c:	782c      	ldrb	r4, [r5, #0]
 801e81e:	2701      	movs	r7, #1
 801e820:	1c85      	adds	r5, r0, #2
 801e822:	f033 0010 	bics.w	r0, r3, #16
 801e826:	d115      	bne.n	801e854 <_strtoul_l.isra.0+0x54>
 801e828:	2c30      	cmp	r4, #48	@ 0x30
 801e82a:	d10d      	bne.n	801e848 <_strtoul_l.isra.0+0x48>
 801e82c:	7828      	ldrb	r0, [r5, #0]
 801e82e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801e832:	2858      	cmp	r0, #88	@ 0x58
 801e834:	d108      	bne.n	801e848 <_strtoul_l.isra.0+0x48>
 801e836:	786c      	ldrb	r4, [r5, #1]
 801e838:	3502      	adds	r5, #2
 801e83a:	2310      	movs	r3, #16
 801e83c:	e00a      	b.n	801e854 <_strtoul_l.isra.0+0x54>
 801e83e:	2c2b      	cmp	r4, #43	@ 0x2b
 801e840:	bf04      	itt	eq
 801e842:	782c      	ldrbeq	r4, [r5, #0]
 801e844:	1c85      	addeq	r5, r0, #2
 801e846:	e7ec      	b.n	801e822 <_strtoul_l.isra.0+0x22>
 801e848:	2b00      	cmp	r3, #0
 801e84a:	d1f6      	bne.n	801e83a <_strtoul_l.isra.0+0x3a>
 801e84c:	2c30      	cmp	r4, #48	@ 0x30
 801e84e:	bf14      	ite	ne
 801e850:	230a      	movne	r3, #10
 801e852:	2308      	moveq	r3, #8
 801e854:	f04f 38ff 	mov.w	r8, #4294967295
 801e858:	2600      	movs	r6, #0
 801e85a:	fbb8 f8f3 	udiv	r8, r8, r3
 801e85e:	fb03 f908 	mul.w	r9, r3, r8
 801e862:	ea6f 0909 	mvn.w	r9, r9
 801e866:	4630      	mov	r0, r6
 801e868:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e86c:	f1bc 0f09 	cmp.w	ip, #9
 801e870:	d810      	bhi.n	801e894 <_strtoul_l.isra.0+0x94>
 801e872:	4664      	mov	r4, ip
 801e874:	42a3      	cmp	r3, r4
 801e876:	dd1e      	ble.n	801e8b6 <_strtoul_l.isra.0+0xb6>
 801e878:	f1b6 3fff 	cmp.w	r6, #4294967295
 801e87c:	d007      	beq.n	801e88e <_strtoul_l.isra.0+0x8e>
 801e87e:	4580      	cmp	r8, r0
 801e880:	d316      	bcc.n	801e8b0 <_strtoul_l.isra.0+0xb0>
 801e882:	d101      	bne.n	801e888 <_strtoul_l.isra.0+0x88>
 801e884:	45a1      	cmp	r9, r4
 801e886:	db13      	blt.n	801e8b0 <_strtoul_l.isra.0+0xb0>
 801e888:	fb00 4003 	mla	r0, r0, r3, r4
 801e88c:	2601      	movs	r6, #1
 801e88e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e892:	e7e9      	b.n	801e868 <_strtoul_l.isra.0+0x68>
 801e894:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801e898:	f1bc 0f19 	cmp.w	ip, #25
 801e89c:	d801      	bhi.n	801e8a2 <_strtoul_l.isra.0+0xa2>
 801e89e:	3c37      	subs	r4, #55	@ 0x37
 801e8a0:	e7e8      	b.n	801e874 <_strtoul_l.isra.0+0x74>
 801e8a2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801e8a6:	f1bc 0f19 	cmp.w	ip, #25
 801e8aa:	d804      	bhi.n	801e8b6 <_strtoul_l.isra.0+0xb6>
 801e8ac:	3c57      	subs	r4, #87	@ 0x57
 801e8ae:	e7e1      	b.n	801e874 <_strtoul_l.isra.0+0x74>
 801e8b0:	f04f 36ff 	mov.w	r6, #4294967295
 801e8b4:	e7eb      	b.n	801e88e <_strtoul_l.isra.0+0x8e>
 801e8b6:	1c73      	adds	r3, r6, #1
 801e8b8:	d106      	bne.n	801e8c8 <_strtoul_l.isra.0+0xc8>
 801e8ba:	2322      	movs	r3, #34	@ 0x22
 801e8bc:	f8ce 3000 	str.w	r3, [lr]
 801e8c0:	4630      	mov	r0, r6
 801e8c2:	b932      	cbnz	r2, 801e8d2 <_strtoul_l.isra.0+0xd2>
 801e8c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8c8:	b107      	cbz	r7, 801e8cc <_strtoul_l.isra.0+0xcc>
 801e8ca:	4240      	negs	r0, r0
 801e8cc:	2a00      	cmp	r2, #0
 801e8ce:	d0f9      	beq.n	801e8c4 <_strtoul_l.isra.0+0xc4>
 801e8d0:	b106      	cbz	r6, 801e8d4 <_strtoul_l.isra.0+0xd4>
 801e8d2:	1e69      	subs	r1, r5, #1
 801e8d4:	6011      	str	r1, [r2, #0]
 801e8d6:	e7f5      	b.n	801e8c4 <_strtoul_l.isra.0+0xc4>
 801e8d8:	08024eb9 	.word	0x08024eb9

0801e8dc <_strtoul_r>:
 801e8dc:	f7ff bf90 	b.w	801e800 <_strtoul_l.isra.0>

0801e8e0 <strtoul>:
 801e8e0:	4613      	mov	r3, r2
 801e8e2:	460a      	mov	r2, r1
 801e8e4:	4601      	mov	r1, r0
 801e8e6:	4802      	ldr	r0, [pc, #8]	@ (801e8f0 <strtoul+0x10>)
 801e8e8:	6800      	ldr	r0, [r0, #0]
 801e8ea:	f7ff bf89 	b.w	801e800 <_strtoul_l.isra.0>
 801e8ee:	bf00      	nop
 801e8f0:	20000458 	.word	0x20000458

0801e8f4 <__ascii_wctomb>:
 801e8f4:	4603      	mov	r3, r0
 801e8f6:	4608      	mov	r0, r1
 801e8f8:	b141      	cbz	r1, 801e90c <__ascii_wctomb+0x18>
 801e8fa:	2aff      	cmp	r2, #255	@ 0xff
 801e8fc:	d904      	bls.n	801e908 <__ascii_wctomb+0x14>
 801e8fe:	228a      	movs	r2, #138	@ 0x8a
 801e900:	601a      	str	r2, [r3, #0]
 801e902:	f04f 30ff 	mov.w	r0, #4294967295
 801e906:	4770      	bx	lr
 801e908:	700a      	strb	r2, [r1, #0]
 801e90a:	2001      	movs	r0, #1
 801e90c:	4770      	bx	lr

0801e90e <__ssputs_r>:
 801e90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e912:	688e      	ldr	r6, [r1, #8]
 801e914:	461f      	mov	r7, r3
 801e916:	42be      	cmp	r6, r7
 801e918:	680b      	ldr	r3, [r1, #0]
 801e91a:	4682      	mov	sl, r0
 801e91c:	460c      	mov	r4, r1
 801e91e:	4690      	mov	r8, r2
 801e920:	d82d      	bhi.n	801e97e <__ssputs_r+0x70>
 801e922:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e926:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e92a:	d026      	beq.n	801e97a <__ssputs_r+0x6c>
 801e92c:	6965      	ldr	r5, [r4, #20]
 801e92e:	6909      	ldr	r1, [r1, #16]
 801e930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e934:	eba3 0901 	sub.w	r9, r3, r1
 801e938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e93c:	1c7b      	adds	r3, r7, #1
 801e93e:	444b      	add	r3, r9
 801e940:	106d      	asrs	r5, r5, #1
 801e942:	429d      	cmp	r5, r3
 801e944:	bf38      	it	cc
 801e946:	461d      	movcc	r5, r3
 801e948:	0553      	lsls	r3, r2, #21
 801e94a:	d527      	bpl.n	801e99c <__ssputs_r+0x8e>
 801e94c:	4629      	mov	r1, r5
 801e94e:	f7fa fff3 	bl	8019938 <_malloc_r>
 801e952:	4606      	mov	r6, r0
 801e954:	b360      	cbz	r0, 801e9b0 <__ssputs_r+0xa2>
 801e956:	6921      	ldr	r1, [r4, #16]
 801e958:	464a      	mov	r2, r9
 801e95a:	f7fd ffdc 	bl	801c916 <memcpy>
 801e95e:	89a3      	ldrh	r3, [r4, #12]
 801e960:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e968:	81a3      	strh	r3, [r4, #12]
 801e96a:	6126      	str	r6, [r4, #16]
 801e96c:	6165      	str	r5, [r4, #20]
 801e96e:	444e      	add	r6, r9
 801e970:	eba5 0509 	sub.w	r5, r5, r9
 801e974:	6026      	str	r6, [r4, #0]
 801e976:	60a5      	str	r5, [r4, #8]
 801e978:	463e      	mov	r6, r7
 801e97a:	42be      	cmp	r6, r7
 801e97c:	d900      	bls.n	801e980 <__ssputs_r+0x72>
 801e97e:	463e      	mov	r6, r7
 801e980:	6820      	ldr	r0, [r4, #0]
 801e982:	4632      	mov	r2, r6
 801e984:	4641      	mov	r1, r8
 801e986:	f000 fd68 	bl	801f45a <memmove>
 801e98a:	68a3      	ldr	r3, [r4, #8]
 801e98c:	1b9b      	subs	r3, r3, r6
 801e98e:	60a3      	str	r3, [r4, #8]
 801e990:	6823      	ldr	r3, [r4, #0]
 801e992:	4433      	add	r3, r6
 801e994:	6023      	str	r3, [r4, #0]
 801e996:	2000      	movs	r0, #0
 801e998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e99c:	462a      	mov	r2, r5
 801e99e:	f000 fdc7 	bl	801f530 <_realloc_r>
 801e9a2:	4606      	mov	r6, r0
 801e9a4:	2800      	cmp	r0, #0
 801e9a6:	d1e0      	bne.n	801e96a <__ssputs_r+0x5c>
 801e9a8:	6921      	ldr	r1, [r4, #16]
 801e9aa:	4650      	mov	r0, sl
 801e9ac:	f7fe fea4 	bl	801d6f8 <_free_r>
 801e9b0:	230c      	movs	r3, #12
 801e9b2:	f8ca 3000 	str.w	r3, [sl]
 801e9b6:	89a3      	ldrh	r3, [r4, #12]
 801e9b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e9bc:	81a3      	strh	r3, [r4, #12]
 801e9be:	f04f 30ff 	mov.w	r0, #4294967295
 801e9c2:	e7e9      	b.n	801e998 <__ssputs_r+0x8a>

0801e9c4 <_svfiprintf_r>:
 801e9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9c8:	4698      	mov	r8, r3
 801e9ca:	898b      	ldrh	r3, [r1, #12]
 801e9cc:	061b      	lsls	r3, r3, #24
 801e9ce:	b09d      	sub	sp, #116	@ 0x74
 801e9d0:	4607      	mov	r7, r0
 801e9d2:	460d      	mov	r5, r1
 801e9d4:	4614      	mov	r4, r2
 801e9d6:	d510      	bpl.n	801e9fa <_svfiprintf_r+0x36>
 801e9d8:	690b      	ldr	r3, [r1, #16]
 801e9da:	b973      	cbnz	r3, 801e9fa <_svfiprintf_r+0x36>
 801e9dc:	2140      	movs	r1, #64	@ 0x40
 801e9de:	f7fa ffab 	bl	8019938 <_malloc_r>
 801e9e2:	6028      	str	r0, [r5, #0]
 801e9e4:	6128      	str	r0, [r5, #16]
 801e9e6:	b930      	cbnz	r0, 801e9f6 <_svfiprintf_r+0x32>
 801e9e8:	230c      	movs	r3, #12
 801e9ea:	603b      	str	r3, [r7, #0]
 801e9ec:	f04f 30ff 	mov.w	r0, #4294967295
 801e9f0:	b01d      	add	sp, #116	@ 0x74
 801e9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9f6:	2340      	movs	r3, #64	@ 0x40
 801e9f8:	616b      	str	r3, [r5, #20]
 801e9fa:	2300      	movs	r3, #0
 801e9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801e9fe:	2320      	movs	r3, #32
 801ea00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ea04:	f8cd 800c 	str.w	r8, [sp, #12]
 801ea08:	2330      	movs	r3, #48	@ 0x30
 801ea0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801eba8 <_svfiprintf_r+0x1e4>
 801ea0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ea12:	f04f 0901 	mov.w	r9, #1
 801ea16:	4623      	mov	r3, r4
 801ea18:	469a      	mov	sl, r3
 801ea1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ea1e:	b10a      	cbz	r2, 801ea24 <_svfiprintf_r+0x60>
 801ea20:	2a25      	cmp	r2, #37	@ 0x25
 801ea22:	d1f9      	bne.n	801ea18 <_svfiprintf_r+0x54>
 801ea24:	ebba 0b04 	subs.w	fp, sl, r4
 801ea28:	d00b      	beq.n	801ea42 <_svfiprintf_r+0x7e>
 801ea2a:	465b      	mov	r3, fp
 801ea2c:	4622      	mov	r2, r4
 801ea2e:	4629      	mov	r1, r5
 801ea30:	4638      	mov	r0, r7
 801ea32:	f7ff ff6c 	bl	801e90e <__ssputs_r>
 801ea36:	3001      	adds	r0, #1
 801ea38:	f000 80a7 	beq.w	801eb8a <_svfiprintf_r+0x1c6>
 801ea3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea3e:	445a      	add	r2, fp
 801ea40:	9209      	str	r2, [sp, #36]	@ 0x24
 801ea42:	f89a 3000 	ldrb.w	r3, [sl]
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	f000 809f 	beq.w	801eb8a <_svfiprintf_r+0x1c6>
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	f04f 32ff 	mov.w	r2, #4294967295
 801ea52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ea56:	f10a 0a01 	add.w	sl, sl, #1
 801ea5a:	9304      	str	r3, [sp, #16]
 801ea5c:	9307      	str	r3, [sp, #28]
 801ea5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ea62:	931a      	str	r3, [sp, #104]	@ 0x68
 801ea64:	4654      	mov	r4, sl
 801ea66:	2205      	movs	r2, #5
 801ea68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea6c:	484e      	ldr	r0, [pc, #312]	@ (801eba8 <_svfiprintf_r+0x1e4>)
 801ea6e:	f7e1 fbbf 	bl	80001f0 <memchr>
 801ea72:	9a04      	ldr	r2, [sp, #16]
 801ea74:	b9d8      	cbnz	r0, 801eaae <_svfiprintf_r+0xea>
 801ea76:	06d0      	lsls	r0, r2, #27
 801ea78:	bf44      	itt	mi
 801ea7a:	2320      	movmi	r3, #32
 801ea7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ea80:	0711      	lsls	r1, r2, #28
 801ea82:	bf44      	itt	mi
 801ea84:	232b      	movmi	r3, #43	@ 0x2b
 801ea86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ea8a:	f89a 3000 	ldrb.w	r3, [sl]
 801ea8e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ea90:	d015      	beq.n	801eabe <_svfiprintf_r+0xfa>
 801ea92:	9a07      	ldr	r2, [sp, #28]
 801ea94:	4654      	mov	r4, sl
 801ea96:	2000      	movs	r0, #0
 801ea98:	f04f 0c0a 	mov.w	ip, #10
 801ea9c:	4621      	mov	r1, r4
 801ea9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eaa2:	3b30      	subs	r3, #48	@ 0x30
 801eaa4:	2b09      	cmp	r3, #9
 801eaa6:	d94b      	bls.n	801eb40 <_svfiprintf_r+0x17c>
 801eaa8:	b1b0      	cbz	r0, 801ead8 <_svfiprintf_r+0x114>
 801eaaa:	9207      	str	r2, [sp, #28]
 801eaac:	e014      	b.n	801ead8 <_svfiprintf_r+0x114>
 801eaae:	eba0 0308 	sub.w	r3, r0, r8
 801eab2:	fa09 f303 	lsl.w	r3, r9, r3
 801eab6:	4313      	orrs	r3, r2
 801eab8:	9304      	str	r3, [sp, #16]
 801eaba:	46a2      	mov	sl, r4
 801eabc:	e7d2      	b.n	801ea64 <_svfiprintf_r+0xa0>
 801eabe:	9b03      	ldr	r3, [sp, #12]
 801eac0:	1d19      	adds	r1, r3, #4
 801eac2:	681b      	ldr	r3, [r3, #0]
 801eac4:	9103      	str	r1, [sp, #12]
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	bfbb      	ittet	lt
 801eaca:	425b      	neglt	r3, r3
 801eacc:	f042 0202 	orrlt.w	r2, r2, #2
 801ead0:	9307      	strge	r3, [sp, #28]
 801ead2:	9307      	strlt	r3, [sp, #28]
 801ead4:	bfb8      	it	lt
 801ead6:	9204      	strlt	r2, [sp, #16]
 801ead8:	7823      	ldrb	r3, [r4, #0]
 801eada:	2b2e      	cmp	r3, #46	@ 0x2e
 801eadc:	d10a      	bne.n	801eaf4 <_svfiprintf_r+0x130>
 801eade:	7863      	ldrb	r3, [r4, #1]
 801eae0:	2b2a      	cmp	r3, #42	@ 0x2a
 801eae2:	d132      	bne.n	801eb4a <_svfiprintf_r+0x186>
 801eae4:	9b03      	ldr	r3, [sp, #12]
 801eae6:	1d1a      	adds	r2, r3, #4
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	9203      	str	r2, [sp, #12]
 801eaec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eaf0:	3402      	adds	r4, #2
 801eaf2:	9305      	str	r3, [sp, #20]
 801eaf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ebb8 <_svfiprintf_r+0x1f4>
 801eaf8:	7821      	ldrb	r1, [r4, #0]
 801eafa:	2203      	movs	r2, #3
 801eafc:	4650      	mov	r0, sl
 801eafe:	f7e1 fb77 	bl	80001f0 <memchr>
 801eb02:	b138      	cbz	r0, 801eb14 <_svfiprintf_r+0x150>
 801eb04:	9b04      	ldr	r3, [sp, #16]
 801eb06:	eba0 000a 	sub.w	r0, r0, sl
 801eb0a:	2240      	movs	r2, #64	@ 0x40
 801eb0c:	4082      	lsls	r2, r0
 801eb0e:	4313      	orrs	r3, r2
 801eb10:	3401      	adds	r4, #1
 801eb12:	9304      	str	r3, [sp, #16]
 801eb14:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb18:	4824      	ldr	r0, [pc, #144]	@ (801ebac <_svfiprintf_r+0x1e8>)
 801eb1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801eb1e:	2206      	movs	r2, #6
 801eb20:	f7e1 fb66 	bl	80001f0 <memchr>
 801eb24:	2800      	cmp	r0, #0
 801eb26:	d036      	beq.n	801eb96 <_svfiprintf_r+0x1d2>
 801eb28:	4b21      	ldr	r3, [pc, #132]	@ (801ebb0 <_svfiprintf_r+0x1ec>)
 801eb2a:	bb1b      	cbnz	r3, 801eb74 <_svfiprintf_r+0x1b0>
 801eb2c:	9b03      	ldr	r3, [sp, #12]
 801eb2e:	3307      	adds	r3, #7
 801eb30:	f023 0307 	bic.w	r3, r3, #7
 801eb34:	3308      	adds	r3, #8
 801eb36:	9303      	str	r3, [sp, #12]
 801eb38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb3a:	4433      	add	r3, r6
 801eb3c:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb3e:	e76a      	b.n	801ea16 <_svfiprintf_r+0x52>
 801eb40:	fb0c 3202 	mla	r2, ip, r2, r3
 801eb44:	460c      	mov	r4, r1
 801eb46:	2001      	movs	r0, #1
 801eb48:	e7a8      	b.n	801ea9c <_svfiprintf_r+0xd8>
 801eb4a:	2300      	movs	r3, #0
 801eb4c:	3401      	adds	r4, #1
 801eb4e:	9305      	str	r3, [sp, #20]
 801eb50:	4619      	mov	r1, r3
 801eb52:	f04f 0c0a 	mov.w	ip, #10
 801eb56:	4620      	mov	r0, r4
 801eb58:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eb5c:	3a30      	subs	r2, #48	@ 0x30
 801eb5e:	2a09      	cmp	r2, #9
 801eb60:	d903      	bls.n	801eb6a <_svfiprintf_r+0x1a6>
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	d0c6      	beq.n	801eaf4 <_svfiprintf_r+0x130>
 801eb66:	9105      	str	r1, [sp, #20]
 801eb68:	e7c4      	b.n	801eaf4 <_svfiprintf_r+0x130>
 801eb6a:	fb0c 2101 	mla	r1, ip, r1, r2
 801eb6e:	4604      	mov	r4, r0
 801eb70:	2301      	movs	r3, #1
 801eb72:	e7f0      	b.n	801eb56 <_svfiprintf_r+0x192>
 801eb74:	ab03      	add	r3, sp, #12
 801eb76:	9300      	str	r3, [sp, #0]
 801eb78:	462a      	mov	r2, r5
 801eb7a:	4b0e      	ldr	r3, [pc, #56]	@ (801ebb4 <_svfiprintf_r+0x1f0>)
 801eb7c:	a904      	add	r1, sp, #16
 801eb7e:	4638      	mov	r0, r7
 801eb80:	f7fb fea2 	bl	801a8c8 <_printf_float>
 801eb84:	1c42      	adds	r2, r0, #1
 801eb86:	4606      	mov	r6, r0
 801eb88:	d1d6      	bne.n	801eb38 <_svfiprintf_r+0x174>
 801eb8a:	89ab      	ldrh	r3, [r5, #12]
 801eb8c:	065b      	lsls	r3, r3, #25
 801eb8e:	f53f af2d 	bmi.w	801e9ec <_svfiprintf_r+0x28>
 801eb92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb94:	e72c      	b.n	801e9f0 <_svfiprintf_r+0x2c>
 801eb96:	ab03      	add	r3, sp, #12
 801eb98:	9300      	str	r3, [sp, #0]
 801eb9a:	462a      	mov	r2, r5
 801eb9c:	4b05      	ldr	r3, [pc, #20]	@ (801ebb4 <_svfiprintf_r+0x1f0>)
 801eb9e:	a904      	add	r1, sp, #16
 801eba0:	4638      	mov	r0, r7
 801eba2:	f7fc f929 	bl	801adf8 <_printf_i>
 801eba6:	e7ed      	b.n	801eb84 <_svfiprintf_r+0x1c0>
 801eba8:	08024e3b 	.word	0x08024e3b
 801ebac:	08024e45 	.word	0x08024e45
 801ebb0:	0801a8c9 	.word	0x0801a8c9
 801ebb4:	0801e90f 	.word	0x0801e90f
 801ebb8:	08024e41 	.word	0x08024e41

0801ebbc <_sungetc_r>:
 801ebbc:	b538      	push	{r3, r4, r5, lr}
 801ebbe:	1c4b      	adds	r3, r1, #1
 801ebc0:	4614      	mov	r4, r2
 801ebc2:	d103      	bne.n	801ebcc <_sungetc_r+0x10>
 801ebc4:	f04f 35ff 	mov.w	r5, #4294967295
 801ebc8:	4628      	mov	r0, r5
 801ebca:	bd38      	pop	{r3, r4, r5, pc}
 801ebcc:	8993      	ldrh	r3, [r2, #12]
 801ebce:	f023 0320 	bic.w	r3, r3, #32
 801ebd2:	8193      	strh	r3, [r2, #12]
 801ebd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ebd6:	6852      	ldr	r2, [r2, #4]
 801ebd8:	b2cd      	uxtb	r5, r1
 801ebda:	b18b      	cbz	r3, 801ec00 <_sungetc_r+0x44>
 801ebdc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ebde:	4293      	cmp	r3, r2
 801ebe0:	dd08      	ble.n	801ebf4 <_sungetc_r+0x38>
 801ebe2:	6823      	ldr	r3, [r4, #0]
 801ebe4:	1e5a      	subs	r2, r3, #1
 801ebe6:	6022      	str	r2, [r4, #0]
 801ebe8:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ebec:	6863      	ldr	r3, [r4, #4]
 801ebee:	3301      	adds	r3, #1
 801ebf0:	6063      	str	r3, [r4, #4]
 801ebf2:	e7e9      	b.n	801ebc8 <_sungetc_r+0xc>
 801ebf4:	4621      	mov	r1, r4
 801ebf6:	f000 fbf6 	bl	801f3e6 <__submore>
 801ebfa:	2800      	cmp	r0, #0
 801ebfc:	d0f1      	beq.n	801ebe2 <_sungetc_r+0x26>
 801ebfe:	e7e1      	b.n	801ebc4 <_sungetc_r+0x8>
 801ec00:	6921      	ldr	r1, [r4, #16]
 801ec02:	6823      	ldr	r3, [r4, #0]
 801ec04:	b151      	cbz	r1, 801ec1c <_sungetc_r+0x60>
 801ec06:	4299      	cmp	r1, r3
 801ec08:	d208      	bcs.n	801ec1c <_sungetc_r+0x60>
 801ec0a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ec0e:	42a9      	cmp	r1, r5
 801ec10:	d104      	bne.n	801ec1c <_sungetc_r+0x60>
 801ec12:	3b01      	subs	r3, #1
 801ec14:	3201      	adds	r2, #1
 801ec16:	6023      	str	r3, [r4, #0]
 801ec18:	6062      	str	r2, [r4, #4]
 801ec1a:	e7d5      	b.n	801ebc8 <_sungetc_r+0xc>
 801ec1c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801ec20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ec24:	6363      	str	r3, [r4, #52]	@ 0x34
 801ec26:	2303      	movs	r3, #3
 801ec28:	63a3      	str	r3, [r4, #56]	@ 0x38
 801ec2a:	4623      	mov	r3, r4
 801ec2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ec30:	6023      	str	r3, [r4, #0]
 801ec32:	2301      	movs	r3, #1
 801ec34:	e7dc      	b.n	801ebf0 <_sungetc_r+0x34>

0801ec36 <__ssrefill_r>:
 801ec36:	b510      	push	{r4, lr}
 801ec38:	460c      	mov	r4, r1
 801ec3a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801ec3c:	b169      	cbz	r1, 801ec5a <__ssrefill_r+0x24>
 801ec3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ec42:	4299      	cmp	r1, r3
 801ec44:	d001      	beq.n	801ec4a <__ssrefill_r+0x14>
 801ec46:	f7fe fd57 	bl	801d6f8 <_free_r>
 801ec4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ec4c:	6063      	str	r3, [r4, #4]
 801ec4e:	2000      	movs	r0, #0
 801ec50:	6360      	str	r0, [r4, #52]	@ 0x34
 801ec52:	b113      	cbz	r3, 801ec5a <__ssrefill_r+0x24>
 801ec54:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801ec56:	6023      	str	r3, [r4, #0]
 801ec58:	bd10      	pop	{r4, pc}
 801ec5a:	6923      	ldr	r3, [r4, #16]
 801ec5c:	6023      	str	r3, [r4, #0]
 801ec5e:	2300      	movs	r3, #0
 801ec60:	6063      	str	r3, [r4, #4]
 801ec62:	89a3      	ldrh	r3, [r4, #12]
 801ec64:	f043 0320 	orr.w	r3, r3, #32
 801ec68:	81a3      	strh	r3, [r4, #12]
 801ec6a:	f04f 30ff 	mov.w	r0, #4294967295
 801ec6e:	e7f3      	b.n	801ec58 <__ssrefill_r+0x22>

0801ec70 <__ssvfiscanf_r>:
 801ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec74:	460c      	mov	r4, r1
 801ec76:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801ec7a:	2100      	movs	r1, #0
 801ec7c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801ec80:	49a6      	ldr	r1, [pc, #664]	@ (801ef1c <__ssvfiscanf_r+0x2ac>)
 801ec82:	91a0      	str	r1, [sp, #640]	@ 0x280
 801ec84:	f10d 0804 	add.w	r8, sp, #4
 801ec88:	49a5      	ldr	r1, [pc, #660]	@ (801ef20 <__ssvfiscanf_r+0x2b0>)
 801ec8a:	4fa6      	ldr	r7, [pc, #664]	@ (801ef24 <__ssvfiscanf_r+0x2b4>)
 801ec8c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801ec90:	4606      	mov	r6, r0
 801ec92:	91a1      	str	r1, [sp, #644]	@ 0x284
 801ec94:	9300      	str	r3, [sp, #0]
 801ec96:	f892 9000 	ldrb.w	r9, [r2]
 801ec9a:	f1b9 0f00 	cmp.w	r9, #0
 801ec9e:	f000 8158 	beq.w	801ef52 <__ssvfiscanf_r+0x2e2>
 801eca2:	f817 3009 	ldrb.w	r3, [r7, r9]
 801eca6:	f013 0308 	ands.w	r3, r3, #8
 801ecaa:	f102 0501 	add.w	r5, r2, #1
 801ecae:	d019      	beq.n	801ece4 <__ssvfiscanf_r+0x74>
 801ecb0:	6863      	ldr	r3, [r4, #4]
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	dd0f      	ble.n	801ecd6 <__ssvfiscanf_r+0x66>
 801ecb6:	6823      	ldr	r3, [r4, #0]
 801ecb8:	781a      	ldrb	r2, [r3, #0]
 801ecba:	5cba      	ldrb	r2, [r7, r2]
 801ecbc:	0712      	lsls	r2, r2, #28
 801ecbe:	d401      	bmi.n	801ecc4 <__ssvfiscanf_r+0x54>
 801ecc0:	462a      	mov	r2, r5
 801ecc2:	e7e8      	b.n	801ec96 <__ssvfiscanf_r+0x26>
 801ecc4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801ecc6:	3201      	adds	r2, #1
 801ecc8:	9245      	str	r2, [sp, #276]	@ 0x114
 801ecca:	6862      	ldr	r2, [r4, #4]
 801eccc:	3301      	adds	r3, #1
 801ecce:	3a01      	subs	r2, #1
 801ecd0:	6062      	str	r2, [r4, #4]
 801ecd2:	6023      	str	r3, [r4, #0]
 801ecd4:	e7ec      	b.n	801ecb0 <__ssvfiscanf_r+0x40>
 801ecd6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801ecd8:	4621      	mov	r1, r4
 801ecda:	4630      	mov	r0, r6
 801ecdc:	4798      	blx	r3
 801ecde:	2800      	cmp	r0, #0
 801ece0:	d0e9      	beq.n	801ecb6 <__ssvfiscanf_r+0x46>
 801ece2:	e7ed      	b.n	801ecc0 <__ssvfiscanf_r+0x50>
 801ece4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801ece8:	f040 8085 	bne.w	801edf6 <__ssvfiscanf_r+0x186>
 801ecec:	9341      	str	r3, [sp, #260]	@ 0x104
 801ecee:	9343      	str	r3, [sp, #268]	@ 0x10c
 801ecf0:	7853      	ldrb	r3, [r2, #1]
 801ecf2:	2b2a      	cmp	r3, #42	@ 0x2a
 801ecf4:	bf02      	ittt	eq
 801ecf6:	2310      	moveq	r3, #16
 801ecf8:	1c95      	addeq	r5, r2, #2
 801ecfa:	9341      	streq	r3, [sp, #260]	@ 0x104
 801ecfc:	220a      	movs	r2, #10
 801ecfe:	46aa      	mov	sl, r5
 801ed00:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801ed04:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801ed08:	2b09      	cmp	r3, #9
 801ed0a:	d91e      	bls.n	801ed4a <__ssvfiscanf_r+0xda>
 801ed0c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801ef28 <__ssvfiscanf_r+0x2b8>
 801ed10:	2203      	movs	r2, #3
 801ed12:	4658      	mov	r0, fp
 801ed14:	f7e1 fa6c 	bl	80001f0 <memchr>
 801ed18:	b138      	cbz	r0, 801ed2a <__ssvfiscanf_r+0xba>
 801ed1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801ed1c:	eba0 000b 	sub.w	r0, r0, fp
 801ed20:	2301      	movs	r3, #1
 801ed22:	4083      	lsls	r3, r0
 801ed24:	4313      	orrs	r3, r2
 801ed26:	9341      	str	r3, [sp, #260]	@ 0x104
 801ed28:	4655      	mov	r5, sl
 801ed2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ed2e:	2b78      	cmp	r3, #120	@ 0x78
 801ed30:	d806      	bhi.n	801ed40 <__ssvfiscanf_r+0xd0>
 801ed32:	2b57      	cmp	r3, #87	@ 0x57
 801ed34:	d810      	bhi.n	801ed58 <__ssvfiscanf_r+0xe8>
 801ed36:	2b25      	cmp	r3, #37	@ 0x25
 801ed38:	d05d      	beq.n	801edf6 <__ssvfiscanf_r+0x186>
 801ed3a:	d857      	bhi.n	801edec <__ssvfiscanf_r+0x17c>
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	d075      	beq.n	801ee2c <__ssvfiscanf_r+0x1bc>
 801ed40:	2303      	movs	r3, #3
 801ed42:	9347      	str	r3, [sp, #284]	@ 0x11c
 801ed44:	230a      	movs	r3, #10
 801ed46:	9342      	str	r3, [sp, #264]	@ 0x108
 801ed48:	e088      	b.n	801ee5c <__ssvfiscanf_r+0x1ec>
 801ed4a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801ed4c:	fb02 1103 	mla	r1, r2, r3, r1
 801ed50:	3930      	subs	r1, #48	@ 0x30
 801ed52:	9143      	str	r1, [sp, #268]	@ 0x10c
 801ed54:	4655      	mov	r5, sl
 801ed56:	e7d2      	b.n	801ecfe <__ssvfiscanf_r+0x8e>
 801ed58:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801ed5c:	2a20      	cmp	r2, #32
 801ed5e:	d8ef      	bhi.n	801ed40 <__ssvfiscanf_r+0xd0>
 801ed60:	a101      	add	r1, pc, #4	@ (adr r1, 801ed68 <__ssvfiscanf_r+0xf8>)
 801ed62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ed66:	bf00      	nop
 801ed68:	0801ee3b 	.word	0x0801ee3b
 801ed6c:	0801ed41 	.word	0x0801ed41
 801ed70:	0801ed41 	.word	0x0801ed41
 801ed74:	0801ee95 	.word	0x0801ee95
 801ed78:	0801ed41 	.word	0x0801ed41
 801ed7c:	0801ed41 	.word	0x0801ed41
 801ed80:	0801ed41 	.word	0x0801ed41
 801ed84:	0801ed41 	.word	0x0801ed41
 801ed88:	0801ed41 	.word	0x0801ed41
 801ed8c:	0801ed41 	.word	0x0801ed41
 801ed90:	0801ed41 	.word	0x0801ed41
 801ed94:	0801eeab 	.word	0x0801eeab
 801ed98:	0801ee91 	.word	0x0801ee91
 801ed9c:	0801edf3 	.word	0x0801edf3
 801eda0:	0801edf3 	.word	0x0801edf3
 801eda4:	0801edf3 	.word	0x0801edf3
 801eda8:	0801ed41 	.word	0x0801ed41
 801edac:	0801ee4d 	.word	0x0801ee4d
 801edb0:	0801ed41 	.word	0x0801ed41
 801edb4:	0801ed41 	.word	0x0801ed41
 801edb8:	0801ed41 	.word	0x0801ed41
 801edbc:	0801ed41 	.word	0x0801ed41
 801edc0:	0801eebb 	.word	0x0801eebb
 801edc4:	0801ee55 	.word	0x0801ee55
 801edc8:	0801ee33 	.word	0x0801ee33
 801edcc:	0801ed41 	.word	0x0801ed41
 801edd0:	0801ed41 	.word	0x0801ed41
 801edd4:	0801eeb7 	.word	0x0801eeb7
 801edd8:	0801ed41 	.word	0x0801ed41
 801eddc:	0801ee91 	.word	0x0801ee91
 801ede0:	0801ed41 	.word	0x0801ed41
 801ede4:	0801ed41 	.word	0x0801ed41
 801ede8:	0801ee3b 	.word	0x0801ee3b
 801edec:	3b45      	subs	r3, #69	@ 0x45
 801edee:	2b02      	cmp	r3, #2
 801edf0:	d8a6      	bhi.n	801ed40 <__ssvfiscanf_r+0xd0>
 801edf2:	2305      	movs	r3, #5
 801edf4:	e031      	b.n	801ee5a <__ssvfiscanf_r+0x1ea>
 801edf6:	6863      	ldr	r3, [r4, #4]
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	dd0d      	ble.n	801ee18 <__ssvfiscanf_r+0x1a8>
 801edfc:	6823      	ldr	r3, [r4, #0]
 801edfe:	781a      	ldrb	r2, [r3, #0]
 801ee00:	454a      	cmp	r2, r9
 801ee02:	f040 80a6 	bne.w	801ef52 <__ssvfiscanf_r+0x2e2>
 801ee06:	3301      	adds	r3, #1
 801ee08:	6862      	ldr	r2, [r4, #4]
 801ee0a:	6023      	str	r3, [r4, #0]
 801ee0c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801ee0e:	3a01      	subs	r2, #1
 801ee10:	3301      	adds	r3, #1
 801ee12:	6062      	str	r2, [r4, #4]
 801ee14:	9345      	str	r3, [sp, #276]	@ 0x114
 801ee16:	e753      	b.n	801ecc0 <__ssvfiscanf_r+0x50>
 801ee18:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801ee1a:	4621      	mov	r1, r4
 801ee1c:	4630      	mov	r0, r6
 801ee1e:	4798      	blx	r3
 801ee20:	2800      	cmp	r0, #0
 801ee22:	d0eb      	beq.n	801edfc <__ssvfiscanf_r+0x18c>
 801ee24:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801ee26:	2800      	cmp	r0, #0
 801ee28:	f040 808b 	bne.w	801ef42 <__ssvfiscanf_r+0x2d2>
 801ee2c:	f04f 30ff 	mov.w	r0, #4294967295
 801ee30:	e08b      	b.n	801ef4a <__ssvfiscanf_r+0x2da>
 801ee32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801ee34:	f042 0220 	orr.w	r2, r2, #32
 801ee38:	9241      	str	r2, [sp, #260]	@ 0x104
 801ee3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801ee3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801ee40:	9241      	str	r2, [sp, #260]	@ 0x104
 801ee42:	2210      	movs	r2, #16
 801ee44:	2b6e      	cmp	r3, #110	@ 0x6e
 801ee46:	9242      	str	r2, [sp, #264]	@ 0x108
 801ee48:	d902      	bls.n	801ee50 <__ssvfiscanf_r+0x1e0>
 801ee4a:	e005      	b.n	801ee58 <__ssvfiscanf_r+0x1e8>
 801ee4c:	2300      	movs	r3, #0
 801ee4e:	9342      	str	r3, [sp, #264]	@ 0x108
 801ee50:	2303      	movs	r3, #3
 801ee52:	e002      	b.n	801ee5a <__ssvfiscanf_r+0x1ea>
 801ee54:	2308      	movs	r3, #8
 801ee56:	9342      	str	r3, [sp, #264]	@ 0x108
 801ee58:	2304      	movs	r3, #4
 801ee5a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801ee5c:	6863      	ldr	r3, [r4, #4]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	dd39      	ble.n	801eed6 <__ssvfiscanf_r+0x266>
 801ee62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801ee64:	0659      	lsls	r1, r3, #25
 801ee66:	d404      	bmi.n	801ee72 <__ssvfiscanf_r+0x202>
 801ee68:	6823      	ldr	r3, [r4, #0]
 801ee6a:	781a      	ldrb	r2, [r3, #0]
 801ee6c:	5cba      	ldrb	r2, [r7, r2]
 801ee6e:	0712      	lsls	r2, r2, #28
 801ee70:	d438      	bmi.n	801eee4 <__ssvfiscanf_r+0x274>
 801ee72:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801ee74:	2b02      	cmp	r3, #2
 801ee76:	dc47      	bgt.n	801ef08 <__ssvfiscanf_r+0x298>
 801ee78:	466b      	mov	r3, sp
 801ee7a:	4622      	mov	r2, r4
 801ee7c:	a941      	add	r1, sp, #260	@ 0x104
 801ee7e:	4630      	mov	r0, r6
 801ee80:	f000 f86c 	bl	801ef5c <_scanf_chars>
 801ee84:	2801      	cmp	r0, #1
 801ee86:	d064      	beq.n	801ef52 <__ssvfiscanf_r+0x2e2>
 801ee88:	2802      	cmp	r0, #2
 801ee8a:	f47f af19 	bne.w	801ecc0 <__ssvfiscanf_r+0x50>
 801ee8e:	e7c9      	b.n	801ee24 <__ssvfiscanf_r+0x1b4>
 801ee90:	220a      	movs	r2, #10
 801ee92:	e7d7      	b.n	801ee44 <__ssvfiscanf_r+0x1d4>
 801ee94:	4629      	mov	r1, r5
 801ee96:	4640      	mov	r0, r8
 801ee98:	f000 fa6c 	bl	801f374 <__sccl>
 801ee9c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801ee9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eea2:	9341      	str	r3, [sp, #260]	@ 0x104
 801eea4:	4605      	mov	r5, r0
 801eea6:	2301      	movs	r3, #1
 801eea8:	e7d7      	b.n	801ee5a <__ssvfiscanf_r+0x1ea>
 801eeaa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801eeac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eeb0:	9341      	str	r3, [sp, #260]	@ 0x104
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	e7d1      	b.n	801ee5a <__ssvfiscanf_r+0x1ea>
 801eeb6:	2302      	movs	r3, #2
 801eeb8:	e7cf      	b.n	801ee5a <__ssvfiscanf_r+0x1ea>
 801eeba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801eebc:	06c3      	lsls	r3, r0, #27
 801eebe:	f53f aeff 	bmi.w	801ecc0 <__ssvfiscanf_r+0x50>
 801eec2:	9b00      	ldr	r3, [sp, #0]
 801eec4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801eec6:	1d19      	adds	r1, r3, #4
 801eec8:	9100      	str	r1, [sp, #0]
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	07c0      	lsls	r0, r0, #31
 801eece:	bf4c      	ite	mi
 801eed0:	801a      	strhmi	r2, [r3, #0]
 801eed2:	601a      	strpl	r2, [r3, #0]
 801eed4:	e6f4      	b.n	801ecc0 <__ssvfiscanf_r+0x50>
 801eed6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801eed8:	4621      	mov	r1, r4
 801eeda:	4630      	mov	r0, r6
 801eedc:	4798      	blx	r3
 801eede:	2800      	cmp	r0, #0
 801eee0:	d0bf      	beq.n	801ee62 <__ssvfiscanf_r+0x1f2>
 801eee2:	e79f      	b.n	801ee24 <__ssvfiscanf_r+0x1b4>
 801eee4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801eee6:	3201      	adds	r2, #1
 801eee8:	9245      	str	r2, [sp, #276]	@ 0x114
 801eeea:	6862      	ldr	r2, [r4, #4]
 801eeec:	3a01      	subs	r2, #1
 801eeee:	2a00      	cmp	r2, #0
 801eef0:	6062      	str	r2, [r4, #4]
 801eef2:	dd02      	ble.n	801eefa <__ssvfiscanf_r+0x28a>
 801eef4:	3301      	adds	r3, #1
 801eef6:	6023      	str	r3, [r4, #0]
 801eef8:	e7b6      	b.n	801ee68 <__ssvfiscanf_r+0x1f8>
 801eefa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801eefc:	4621      	mov	r1, r4
 801eefe:	4630      	mov	r0, r6
 801ef00:	4798      	blx	r3
 801ef02:	2800      	cmp	r0, #0
 801ef04:	d0b0      	beq.n	801ee68 <__ssvfiscanf_r+0x1f8>
 801ef06:	e78d      	b.n	801ee24 <__ssvfiscanf_r+0x1b4>
 801ef08:	2b04      	cmp	r3, #4
 801ef0a:	dc0f      	bgt.n	801ef2c <__ssvfiscanf_r+0x2bc>
 801ef0c:	466b      	mov	r3, sp
 801ef0e:	4622      	mov	r2, r4
 801ef10:	a941      	add	r1, sp, #260	@ 0x104
 801ef12:	4630      	mov	r0, r6
 801ef14:	f000 f87c 	bl	801f010 <_scanf_i>
 801ef18:	e7b4      	b.n	801ee84 <__ssvfiscanf_r+0x214>
 801ef1a:	bf00      	nop
 801ef1c:	0801ebbd 	.word	0x0801ebbd
 801ef20:	0801ec37 	.word	0x0801ec37
 801ef24:	08024eb9 	.word	0x08024eb9
 801ef28:	08024e41 	.word	0x08024e41
 801ef2c:	4b0a      	ldr	r3, [pc, #40]	@ (801ef58 <__ssvfiscanf_r+0x2e8>)
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	f43f aec6 	beq.w	801ecc0 <__ssvfiscanf_r+0x50>
 801ef34:	466b      	mov	r3, sp
 801ef36:	4622      	mov	r2, r4
 801ef38:	a941      	add	r1, sp, #260	@ 0x104
 801ef3a:	4630      	mov	r0, r6
 801ef3c:	f7fc f87a 	bl	801b034 <_scanf_float>
 801ef40:	e7a0      	b.n	801ee84 <__ssvfiscanf_r+0x214>
 801ef42:	89a3      	ldrh	r3, [r4, #12]
 801ef44:	065b      	lsls	r3, r3, #25
 801ef46:	f53f af71 	bmi.w	801ee2c <__ssvfiscanf_r+0x1bc>
 801ef4a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801ef4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef52:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801ef54:	e7f9      	b.n	801ef4a <__ssvfiscanf_r+0x2da>
 801ef56:	bf00      	nop
 801ef58:	0801b035 	.word	0x0801b035

0801ef5c <_scanf_chars>:
 801ef5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef60:	4615      	mov	r5, r2
 801ef62:	688a      	ldr	r2, [r1, #8]
 801ef64:	4680      	mov	r8, r0
 801ef66:	460c      	mov	r4, r1
 801ef68:	b932      	cbnz	r2, 801ef78 <_scanf_chars+0x1c>
 801ef6a:	698a      	ldr	r2, [r1, #24]
 801ef6c:	2a00      	cmp	r2, #0
 801ef6e:	bf14      	ite	ne
 801ef70:	f04f 32ff 	movne.w	r2, #4294967295
 801ef74:	2201      	moveq	r2, #1
 801ef76:	608a      	str	r2, [r1, #8]
 801ef78:	6822      	ldr	r2, [r4, #0]
 801ef7a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801f00c <_scanf_chars+0xb0>
 801ef7e:	06d1      	lsls	r1, r2, #27
 801ef80:	bf5f      	itttt	pl
 801ef82:	681a      	ldrpl	r2, [r3, #0]
 801ef84:	1d11      	addpl	r1, r2, #4
 801ef86:	6019      	strpl	r1, [r3, #0]
 801ef88:	6816      	ldrpl	r6, [r2, #0]
 801ef8a:	2700      	movs	r7, #0
 801ef8c:	69a0      	ldr	r0, [r4, #24]
 801ef8e:	b188      	cbz	r0, 801efb4 <_scanf_chars+0x58>
 801ef90:	2801      	cmp	r0, #1
 801ef92:	d107      	bne.n	801efa4 <_scanf_chars+0x48>
 801ef94:	682b      	ldr	r3, [r5, #0]
 801ef96:	781a      	ldrb	r2, [r3, #0]
 801ef98:	6963      	ldr	r3, [r4, #20]
 801ef9a:	5c9b      	ldrb	r3, [r3, r2]
 801ef9c:	b953      	cbnz	r3, 801efb4 <_scanf_chars+0x58>
 801ef9e:	2f00      	cmp	r7, #0
 801efa0:	d031      	beq.n	801f006 <_scanf_chars+0xaa>
 801efa2:	e022      	b.n	801efea <_scanf_chars+0x8e>
 801efa4:	2802      	cmp	r0, #2
 801efa6:	d120      	bne.n	801efea <_scanf_chars+0x8e>
 801efa8:	682b      	ldr	r3, [r5, #0]
 801efaa:	781b      	ldrb	r3, [r3, #0]
 801efac:	f819 3003 	ldrb.w	r3, [r9, r3]
 801efb0:	071b      	lsls	r3, r3, #28
 801efb2:	d41a      	bmi.n	801efea <_scanf_chars+0x8e>
 801efb4:	6823      	ldr	r3, [r4, #0]
 801efb6:	06da      	lsls	r2, r3, #27
 801efb8:	bf5e      	ittt	pl
 801efba:	682b      	ldrpl	r3, [r5, #0]
 801efbc:	781b      	ldrbpl	r3, [r3, #0]
 801efbe:	f806 3b01 	strbpl.w	r3, [r6], #1
 801efc2:	682a      	ldr	r2, [r5, #0]
 801efc4:	686b      	ldr	r3, [r5, #4]
 801efc6:	3201      	adds	r2, #1
 801efc8:	602a      	str	r2, [r5, #0]
 801efca:	68a2      	ldr	r2, [r4, #8]
 801efcc:	3b01      	subs	r3, #1
 801efce:	3a01      	subs	r2, #1
 801efd0:	606b      	str	r3, [r5, #4]
 801efd2:	3701      	adds	r7, #1
 801efd4:	60a2      	str	r2, [r4, #8]
 801efd6:	b142      	cbz	r2, 801efea <_scanf_chars+0x8e>
 801efd8:	2b00      	cmp	r3, #0
 801efda:	dcd7      	bgt.n	801ef8c <_scanf_chars+0x30>
 801efdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801efe0:	4629      	mov	r1, r5
 801efe2:	4640      	mov	r0, r8
 801efe4:	4798      	blx	r3
 801efe6:	2800      	cmp	r0, #0
 801efe8:	d0d0      	beq.n	801ef8c <_scanf_chars+0x30>
 801efea:	6823      	ldr	r3, [r4, #0]
 801efec:	f013 0310 	ands.w	r3, r3, #16
 801eff0:	d105      	bne.n	801effe <_scanf_chars+0xa2>
 801eff2:	68e2      	ldr	r2, [r4, #12]
 801eff4:	3201      	adds	r2, #1
 801eff6:	60e2      	str	r2, [r4, #12]
 801eff8:	69a2      	ldr	r2, [r4, #24]
 801effa:	b102      	cbz	r2, 801effe <_scanf_chars+0xa2>
 801effc:	7033      	strb	r3, [r6, #0]
 801effe:	6923      	ldr	r3, [r4, #16]
 801f000:	443b      	add	r3, r7
 801f002:	6123      	str	r3, [r4, #16]
 801f004:	2000      	movs	r0, #0
 801f006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f00a:	bf00      	nop
 801f00c:	08024eb9 	.word	0x08024eb9

0801f010 <_scanf_i>:
 801f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f014:	4698      	mov	r8, r3
 801f016:	4b74      	ldr	r3, [pc, #464]	@ (801f1e8 <_scanf_i+0x1d8>)
 801f018:	460c      	mov	r4, r1
 801f01a:	4682      	mov	sl, r0
 801f01c:	4616      	mov	r6, r2
 801f01e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f022:	b087      	sub	sp, #28
 801f024:	ab03      	add	r3, sp, #12
 801f026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f02a:	4b70      	ldr	r3, [pc, #448]	@ (801f1ec <_scanf_i+0x1dc>)
 801f02c:	69a1      	ldr	r1, [r4, #24]
 801f02e:	4a70      	ldr	r2, [pc, #448]	@ (801f1f0 <_scanf_i+0x1e0>)
 801f030:	2903      	cmp	r1, #3
 801f032:	bf08      	it	eq
 801f034:	461a      	moveq	r2, r3
 801f036:	68a3      	ldr	r3, [r4, #8]
 801f038:	9201      	str	r2, [sp, #4]
 801f03a:	1e5a      	subs	r2, r3, #1
 801f03c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801f040:	bf88      	it	hi
 801f042:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801f046:	4627      	mov	r7, r4
 801f048:	bf82      	ittt	hi
 801f04a:	eb03 0905 	addhi.w	r9, r3, r5
 801f04e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801f052:	60a3      	strhi	r3, [r4, #8]
 801f054:	f857 3b1c 	ldr.w	r3, [r7], #28
 801f058:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801f05c:	bf98      	it	ls
 801f05e:	f04f 0900 	movls.w	r9, #0
 801f062:	6023      	str	r3, [r4, #0]
 801f064:	463d      	mov	r5, r7
 801f066:	f04f 0b00 	mov.w	fp, #0
 801f06a:	6831      	ldr	r1, [r6, #0]
 801f06c:	ab03      	add	r3, sp, #12
 801f06e:	7809      	ldrb	r1, [r1, #0]
 801f070:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801f074:	2202      	movs	r2, #2
 801f076:	f7e1 f8bb 	bl	80001f0 <memchr>
 801f07a:	b328      	cbz	r0, 801f0c8 <_scanf_i+0xb8>
 801f07c:	f1bb 0f01 	cmp.w	fp, #1
 801f080:	d159      	bne.n	801f136 <_scanf_i+0x126>
 801f082:	6862      	ldr	r2, [r4, #4]
 801f084:	b92a      	cbnz	r2, 801f092 <_scanf_i+0x82>
 801f086:	6822      	ldr	r2, [r4, #0]
 801f088:	2108      	movs	r1, #8
 801f08a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f08e:	6061      	str	r1, [r4, #4]
 801f090:	6022      	str	r2, [r4, #0]
 801f092:	6822      	ldr	r2, [r4, #0]
 801f094:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801f098:	6022      	str	r2, [r4, #0]
 801f09a:	68a2      	ldr	r2, [r4, #8]
 801f09c:	1e51      	subs	r1, r2, #1
 801f09e:	60a1      	str	r1, [r4, #8]
 801f0a0:	b192      	cbz	r2, 801f0c8 <_scanf_i+0xb8>
 801f0a2:	6832      	ldr	r2, [r6, #0]
 801f0a4:	1c51      	adds	r1, r2, #1
 801f0a6:	6031      	str	r1, [r6, #0]
 801f0a8:	7812      	ldrb	r2, [r2, #0]
 801f0aa:	f805 2b01 	strb.w	r2, [r5], #1
 801f0ae:	6872      	ldr	r2, [r6, #4]
 801f0b0:	3a01      	subs	r2, #1
 801f0b2:	2a00      	cmp	r2, #0
 801f0b4:	6072      	str	r2, [r6, #4]
 801f0b6:	dc07      	bgt.n	801f0c8 <_scanf_i+0xb8>
 801f0b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801f0bc:	4631      	mov	r1, r6
 801f0be:	4650      	mov	r0, sl
 801f0c0:	4790      	blx	r2
 801f0c2:	2800      	cmp	r0, #0
 801f0c4:	f040 8085 	bne.w	801f1d2 <_scanf_i+0x1c2>
 801f0c8:	f10b 0b01 	add.w	fp, fp, #1
 801f0cc:	f1bb 0f03 	cmp.w	fp, #3
 801f0d0:	d1cb      	bne.n	801f06a <_scanf_i+0x5a>
 801f0d2:	6863      	ldr	r3, [r4, #4]
 801f0d4:	b90b      	cbnz	r3, 801f0da <_scanf_i+0xca>
 801f0d6:	230a      	movs	r3, #10
 801f0d8:	6063      	str	r3, [r4, #4]
 801f0da:	6863      	ldr	r3, [r4, #4]
 801f0dc:	4945      	ldr	r1, [pc, #276]	@ (801f1f4 <_scanf_i+0x1e4>)
 801f0de:	6960      	ldr	r0, [r4, #20]
 801f0e0:	1ac9      	subs	r1, r1, r3
 801f0e2:	f000 f947 	bl	801f374 <__sccl>
 801f0e6:	f04f 0b00 	mov.w	fp, #0
 801f0ea:	68a3      	ldr	r3, [r4, #8]
 801f0ec:	6822      	ldr	r2, [r4, #0]
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d03d      	beq.n	801f16e <_scanf_i+0x15e>
 801f0f2:	6831      	ldr	r1, [r6, #0]
 801f0f4:	6960      	ldr	r0, [r4, #20]
 801f0f6:	f891 c000 	ldrb.w	ip, [r1]
 801f0fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f0fe:	2800      	cmp	r0, #0
 801f100:	d035      	beq.n	801f16e <_scanf_i+0x15e>
 801f102:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801f106:	d124      	bne.n	801f152 <_scanf_i+0x142>
 801f108:	0510      	lsls	r0, r2, #20
 801f10a:	d522      	bpl.n	801f152 <_scanf_i+0x142>
 801f10c:	f10b 0b01 	add.w	fp, fp, #1
 801f110:	f1b9 0f00 	cmp.w	r9, #0
 801f114:	d003      	beq.n	801f11e <_scanf_i+0x10e>
 801f116:	3301      	adds	r3, #1
 801f118:	f109 39ff 	add.w	r9, r9, #4294967295
 801f11c:	60a3      	str	r3, [r4, #8]
 801f11e:	6873      	ldr	r3, [r6, #4]
 801f120:	3b01      	subs	r3, #1
 801f122:	2b00      	cmp	r3, #0
 801f124:	6073      	str	r3, [r6, #4]
 801f126:	dd1b      	ble.n	801f160 <_scanf_i+0x150>
 801f128:	6833      	ldr	r3, [r6, #0]
 801f12a:	3301      	adds	r3, #1
 801f12c:	6033      	str	r3, [r6, #0]
 801f12e:	68a3      	ldr	r3, [r4, #8]
 801f130:	3b01      	subs	r3, #1
 801f132:	60a3      	str	r3, [r4, #8]
 801f134:	e7d9      	b.n	801f0ea <_scanf_i+0xda>
 801f136:	f1bb 0f02 	cmp.w	fp, #2
 801f13a:	d1ae      	bne.n	801f09a <_scanf_i+0x8a>
 801f13c:	6822      	ldr	r2, [r4, #0]
 801f13e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801f142:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801f146:	d1c4      	bne.n	801f0d2 <_scanf_i+0xc2>
 801f148:	2110      	movs	r1, #16
 801f14a:	6061      	str	r1, [r4, #4]
 801f14c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f150:	e7a2      	b.n	801f098 <_scanf_i+0x88>
 801f152:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801f156:	6022      	str	r2, [r4, #0]
 801f158:	780b      	ldrb	r3, [r1, #0]
 801f15a:	f805 3b01 	strb.w	r3, [r5], #1
 801f15e:	e7de      	b.n	801f11e <_scanf_i+0x10e>
 801f160:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801f164:	4631      	mov	r1, r6
 801f166:	4650      	mov	r0, sl
 801f168:	4798      	blx	r3
 801f16a:	2800      	cmp	r0, #0
 801f16c:	d0df      	beq.n	801f12e <_scanf_i+0x11e>
 801f16e:	6823      	ldr	r3, [r4, #0]
 801f170:	05d9      	lsls	r1, r3, #23
 801f172:	d50d      	bpl.n	801f190 <_scanf_i+0x180>
 801f174:	42bd      	cmp	r5, r7
 801f176:	d909      	bls.n	801f18c <_scanf_i+0x17c>
 801f178:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f17c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801f180:	4632      	mov	r2, r6
 801f182:	4650      	mov	r0, sl
 801f184:	4798      	blx	r3
 801f186:	f105 39ff 	add.w	r9, r5, #4294967295
 801f18a:	464d      	mov	r5, r9
 801f18c:	42bd      	cmp	r5, r7
 801f18e:	d028      	beq.n	801f1e2 <_scanf_i+0x1d2>
 801f190:	6822      	ldr	r2, [r4, #0]
 801f192:	f012 0210 	ands.w	r2, r2, #16
 801f196:	d113      	bne.n	801f1c0 <_scanf_i+0x1b0>
 801f198:	702a      	strb	r2, [r5, #0]
 801f19a:	6863      	ldr	r3, [r4, #4]
 801f19c:	9e01      	ldr	r6, [sp, #4]
 801f19e:	4639      	mov	r1, r7
 801f1a0:	4650      	mov	r0, sl
 801f1a2:	47b0      	blx	r6
 801f1a4:	f8d8 3000 	ldr.w	r3, [r8]
 801f1a8:	6821      	ldr	r1, [r4, #0]
 801f1aa:	1d1a      	adds	r2, r3, #4
 801f1ac:	f8c8 2000 	str.w	r2, [r8]
 801f1b0:	f011 0f20 	tst.w	r1, #32
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	d00f      	beq.n	801f1d8 <_scanf_i+0x1c8>
 801f1b8:	6018      	str	r0, [r3, #0]
 801f1ba:	68e3      	ldr	r3, [r4, #12]
 801f1bc:	3301      	adds	r3, #1
 801f1be:	60e3      	str	r3, [r4, #12]
 801f1c0:	6923      	ldr	r3, [r4, #16]
 801f1c2:	1bed      	subs	r5, r5, r7
 801f1c4:	445d      	add	r5, fp
 801f1c6:	442b      	add	r3, r5
 801f1c8:	6123      	str	r3, [r4, #16]
 801f1ca:	2000      	movs	r0, #0
 801f1cc:	b007      	add	sp, #28
 801f1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1d2:	f04f 0b00 	mov.w	fp, #0
 801f1d6:	e7ca      	b.n	801f16e <_scanf_i+0x15e>
 801f1d8:	07ca      	lsls	r2, r1, #31
 801f1da:	bf4c      	ite	mi
 801f1dc:	8018      	strhmi	r0, [r3, #0]
 801f1de:	6018      	strpl	r0, [r3, #0]
 801f1e0:	e7eb      	b.n	801f1ba <_scanf_i+0x1aa>
 801f1e2:	2001      	movs	r0, #1
 801f1e4:	e7f2      	b.n	801f1cc <_scanf_i+0x1bc>
 801f1e6:	bf00      	nop
 801f1e8:	08024b24 	.word	0x08024b24
 801f1ec:	0801a771 	.word	0x0801a771
 801f1f0:	0801e8dd 	.word	0x0801e8dd
 801f1f4:	08024e5c 	.word	0x08024e5c

0801f1f8 <__sflush_r>:
 801f1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f200:	0716      	lsls	r6, r2, #28
 801f202:	4605      	mov	r5, r0
 801f204:	460c      	mov	r4, r1
 801f206:	d454      	bmi.n	801f2b2 <__sflush_r+0xba>
 801f208:	684b      	ldr	r3, [r1, #4]
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	dc02      	bgt.n	801f214 <__sflush_r+0x1c>
 801f20e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f210:	2b00      	cmp	r3, #0
 801f212:	dd48      	ble.n	801f2a6 <__sflush_r+0xae>
 801f214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f216:	2e00      	cmp	r6, #0
 801f218:	d045      	beq.n	801f2a6 <__sflush_r+0xae>
 801f21a:	2300      	movs	r3, #0
 801f21c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f220:	682f      	ldr	r7, [r5, #0]
 801f222:	6a21      	ldr	r1, [r4, #32]
 801f224:	602b      	str	r3, [r5, #0]
 801f226:	d030      	beq.n	801f28a <__sflush_r+0x92>
 801f228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f22a:	89a3      	ldrh	r3, [r4, #12]
 801f22c:	0759      	lsls	r1, r3, #29
 801f22e:	d505      	bpl.n	801f23c <__sflush_r+0x44>
 801f230:	6863      	ldr	r3, [r4, #4]
 801f232:	1ad2      	subs	r2, r2, r3
 801f234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f236:	b10b      	cbz	r3, 801f23c <__sflush_r+0x44>
 801f238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f23a:	1ad2      	subs	r2, r2, r3
 801f23c:	2300      	movs	r3, #0
 801f23e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f240:	6a21      	ldr	r1, [r4, #32]
 801f242:	4628      	mov	r0, r5
 801f244:	47b0      	blx	r6
 801f246:	1c43      	adds	r3, r0, #1
 801f248:	89a3      	ldrh	r3, [r4, #12]
 801f24a:	d106      	bne.n	801f25a <__sflush_r+0x62>
 801f24c:	6829      	ldr	r1, [r5, #0]
 801f24e:	291d      	cmp	r1, #29
 801f250:	d82b      	bhi.n	801f2aa <__sflush_r+0xb2>
 801f252:	4a2a      	ldr	r2, [pc, #168]	@ (801f2fc <__sflush_r+0x104>)
 801f254:	40ca      	lsrs	r2, r1
 801f256:	07d6      	lsls	r6, r2, #31
 801f258:	d527      	bpl.n	801f2aa <__sflush_r+0xb2>
 801f25a:	2200      	movs	r2, #0
 801f25c:	6062      	str	r2, [r4, #4]
 801f25e:	04d9      	lsls	r1, r3, #19
 801f260:	6922      	ldr	r2, [r4, #16]
 801f262:	6022      	str	r2, [r4, #0]
 801f264:	d504      	bpl.n	801f270 <__sflush_r+0x78>
 801f266:	1c42      	adds	r2, r0, #1
 801f268:	d101      	bne.n	801f26e <__sflush_r+0x76>
 801f26a:	682b      	ldr	r3, [r5, #0]
 801f26c:	b903      	cbnz	r3, 801f270 <__sflush_r+0x78>
 801f26e:	6560      	str	r0, [r4, #84]	@ 0x54
 801f270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f272:	602f      	str	r7, [r5, #0]
 801f274:	b1b9      	cbz	r1, 801f2a6 <__sflush_r+0xae>
 801f276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f27a:	4299      	cmp	r1, r3
 801f27c:	d002      	beq.n	801f284 <__sflush_r+0x8c>
 801f27e:	4628      	mov	r0, r5
 801f280:	f7fe fa3a 	bl	801d6f8 <_free_r>
 801f284:	2300      	movs	r3, #0
 801f286:	6363      	str	r3, [r4, #52]	@ 0x34
 801f288:	e00d      	b.n	801f2a6 <__sflush_r+0xae>
 801f28a:	2301      	movs	r3, #1
 801f28c:	4628      	mov	r0, r5
 801f28e:	47b0      	blx	r6
 801f290:	4602      	mov	r2, r0
 801f292:	1c50      	adds	r0, r2, #1
 801f294:	d1c9      	bne.n	801f22a <__sflush_r+0x32>
 801f296:	682b      	ldr	r3, [r5, #0]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d0c6      	beq.n	801f22a <__sflush_r+0x32>
 801f29c:	2b1d      	cmp	r3, #29
 801f29e:	d001      	beq.n	801f2a4 <__sflush_r+0xac>
 801f2a0:	2b16      	cmp	r3, #22
 801f2a2:	d11e      	bne.n	801f2e2 <__sflush_r+0xea>
 801f2a4:	602f      	str	r7, [r5, #0]
 801f2a6:	2000      	movs	r0, #0
 801f2a8:	e022      	b.n	801f2f0 <__sflush_r+0xf8>
 801f2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f2ae:	b21b      	sxth	r3, r3
 801f2b0:	e01b      	b.n	801f2ea <__sflush_r+0xf2>
 801f2b2:	690f      	ldr	r7, [r1, #16]
 801f2b4:	2f00      	cmp	r7, #0
 801f2b6:	d0f6      	beq.n	801f2a6 <__sflush_r+0xae>
 801f2b8:	0793      	lsls	r3, r2, #30
 801f2ba:	680e      	ldr	r6, [r1, #0]
 801f2bc:	bf08      	it	eq
 801f2be:	694b      	ldreq	r3, [r1, #20]
 801f2c0:	600f      	str	r7, [r1, #0]
 801f2c2:	bf18      	it	ne
 801f2c4:	2300      	movne	r3, #0
 801f2c6:	eba6 0807 	sub.w	r8, r6, r7
 801f2ca:	608b      	str	r3, [r1, #8]
 801f2cc:	f1b8 0f00 	cmp.w	r8, #0
 801f2d0:	dde9      	ble.n	801f2a6 <__sflush_r+0xae>
 801f2d2:	6a21      	ldr	r1, [r4, #32]
 801f2d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f2d6:	4643      	mov	r3, r8
 801f2d8:	463a      	mov	r2, r7
 801f2da:	4628      	mov	r0, r5
 801f2dc:	47b0      	blx	r6
 801f2de:	2800      	cmp	r0, #0
 801f2e0:	dc08      	bgt.n	801f2f4 <__sflush_r+0xfc>
 801f2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f2ea:	81a3      	strh	r3, [r4, #12]
 801f2ec:	f04f 30ff 	mov.w	r0, #4294967295
 801f2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2f4:	4407      	add	r7, r0
 801f2f6:	eba8 0800 	sub.w	r8, r8, r0
 801f2fa:	e7e7      	b.n	801f2cc <__sflush_r+0xd4>
 801f2fc:	20400001 	.word	0x20400001

0801f300 <_fflush_r>:
 801f300:	b538      	push	{r3, r4, r5, lr}
 801f302:	690b      	ldr	r3, [r1, #16]
 801f304:	4605      	mov	r5, r0
 801f306:	460c      	mov	r4, r1
 801f308:	b913      	cbnz	r3, 801f310 <_fflush_r+0x10>
 801f30a:	2500      	movs	r5, #0
 801f30c:	4628      	mov	r0, r5
 801f30e:	bd38      	pop	{r3, r4, r5, pc}
 801f310:	b118      	cbz	r0, 801f31a <_fflush_r+0x1a>
 801f312:	6a03      	ldr	r3, [r0, #32]
 801f314:	b90b      	cbnz	r3, 801f31a <_fflush_r+0x1a>
 801f316:	f7fc f927 	bl	801b568 <__sinit>
 801f31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	d0f3      	beq.n	801f30a <_fflush_r+0xa>
 801f322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f324:	07d0      	lsls	r0, r2, #31
 801f326:	d404      	bmi.n	801f332 <_fflush_r+0x32>
 801f328:	0599      	lsls	r1, r3, #22
 801f32a:	d402      	bmi.n	801f332 <_fflush_r+0x32>
 801f32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f32e:	f7fd fae7 	bl	801c900 <__retarget_lock_acquire_recursive>
 801f332:	4628      	mov	r0, r5
 801f334:	4621      	mov	r1, r4
 801f336:	f7ff ff5f 	bl	801f1f8 <__sflush_r>
 801f33a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f33c:	07da      	lsls	r2, r3, #31
 801f33e:	4605      	mov	r5, r0
 801f340:	d4e4      	bmi.n	801f30c <_fflush_r+0xc>
 801f342:	89a3      	ldrh	r3, [r4, #12]
 801f344:	059b      	lsls	r3, r3, #22
 801f346:	d4e1      	bmi.n	801f30c <_fflush_r+0xc>
 801f348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f34a:	f7fd fadb 	bl	801c904 <__retarget_lock_release_recursive>
 801f34e:	e7dd      	b.n	801f30c <_fflush_r+0xc>

0801f350 <fiprintf>:
 801f350:	b40e      	push	{r1, r2, r3}
 801f352:	b503      	push	{r0, r1, lr}
 801f354:	4601      	mov	r1, r0
 801f356:	ab03      	add	r3, sp, #12
 801f358:	4805      	ldr	r0, [pc, #20]	@ (801f370 <fiprintf+0x20>)
 801f35a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f35e:	6800      	ldr	r0, [r0, #0]
 801f360:	9301      	str	r3, [sp, #4]
 801f362:	f000 f93d 	bl	801f5e0 <_vfiprintf_r>
 801f366:	b002      	add	sp, #8
 801f368:	f85d eb04 	ldr.w	lr, [sp], #4
 801f36c:	b003      	add	sp, #12
 801f36e:	4770      	bx	lr
 801f370:	20000458 	.word	0x20000458

0801f374 <__sccl>:
 801f374:	b570      	push	{r4, r5, r6, lr}
 801f376:	780b      	ldrb	r3, [r1, #0]
 801f378:	4604      	mov	r4, r0
 801f37a:	2b5e      	cmp	r3, #94	@ 0x5e
 801f37c:	bf0b      	itete	eq
 801f37e:	784b      	ldrbeq	r3, [r1, #1]
 801f380:	1c4a      	addne	r2, r1, #1
 801f382:	1c8a      	addeq	r2, r1, #2
 801f384:	2100      	movne	r1, #0
 801f386:	bf08      	it	eq
 801f388:	2101      	moveq	r1, #1
 801f38a:	3801      	subs	r0, #1
 801f38c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801f390:	f800 1f01 	strb.w	r1, [r0, #1]!
 801f394:	42a8      	cmp	r0, r5
 801f396:	d1fb      	bne.n	801f390 <__sccl+0x1c>
 801f398:	b90b      	cbnz	r3, 801f39e <__sccl+0x2a>
 801f39a:	1e50      	subs	r0, r2, #1
 801f39c:	bd70      	pop	{r4, r5, r6, pc}
 801f39e:	f081 0101 	eor.w	r1, r1, #1
 801f3a2:	54e1      	strb	r1, [r4, r3]
 801f3a4:	4610      	mov	r0, r2
 801f3a6:	4602      	mov	r2, r0
 801f3a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f3ac:	2d2d      	cmp	r5, #45	@ 0x2d
 801f3ae:	d005      	beq.n	801f3bc <__sccl+0x48>
 801f3b0:	2d5d      	cmp	r5, #93	@ 0x5d
 801f3b2:	d016      	beq.n	801f3e2 <__sccl+0x6e>
 801f3b4:	2d00      	cmp	r5, #0
 801f3b6:	d0f1      	beq.n	801f39c <__sccl+0x28>
 801f3b8:	462b      	mov	r3, r5
 801f3ba:	e7f2      	b.n	801f3a2 <__sccl+0x2e>
 801f3bc:	7846      	ldrb	r6, [r0, #1]
 801f3be:	2e5d      	cmp	r6, #93	@ 0x5d
 801f3c0:	d0fa      	beq.n	801f3b8 <__sccl+0x44>
 801f3c2:	42b3      	cmp	r3, r6
 801f3c4:	dcf8      	bgt.n	801f3b8 <__sccl+0x44>
 801f3c6:	3002      	adds	r0, #2
 801f3c8:	461a      	mov	r2, r3
 801f3ca:	3201      	adds	r2, #1
 801f3cc:	4296      	cmp	r6, r2
 801f3ce:	54a1      	strb	r1, [r4, r2]
 801f3d0:	dcfb      	bgt.n	801f3ca <__sccl+0x56>
 801f3d2:	1af2      	subs	r2, r6, r3
 801f3d4:	3a01      	subs	r2, #1
 801f3d6:	1c5d      	adds	r5, r3, #1
 801f3d8:	42b3      	cmp	r3, r6
 801f3da:	bfa8      	it	ge
 801f3dc:	2200      	movge	r2, #0
 801f3de:	18ab      	adds	r3, r5, r2
 801f3e0:	e7e1      	b.n	801f3a6 <__sccl+0x32>
 801f3e2:	4610      	mov	r0, r2
 801f3e4:	e7da      	b.n	801f39c <__sccl+0x28>

0801f3e6 <__submore>:
 801f3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3ea:	460c      	mov	r4, r1
 801f3ec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801f3ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f3f2:	4299      	cmp	r1, r3
 801f3f4:	d11d      	bne.n	801f432 <__submore+0x4c>
 801f3f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801f3fa:	f7fa fa9d 	bl	8019938 <_malloc_r>
 801f3fe:	b918      	cbnz	r0, 801f408 <__submore+0x22>
 801f400:	f04f 30ff 	mov.w	r0, #4294967295
 801f404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f40c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801f40e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801f412:	6360      	str	r0, [r4, #52]	@ 0x34
 801f414:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801f418:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801f41c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801f420:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801f424:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801f428:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801f42c:	6020      	str	r0, [r4, #0]
 801f42e:	2000      	movs	r0, #0
 801f430:	e7e8      	b.n	801f404 <__submore+0x1e>
 801f432:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801f434:	0077      	lsls	r7, r6, #1
 801f436:	463a      	mov	r2, r7
 801f438:	f000 f87a 	bl	801f530 <_realloc_r>
 801f43c:	4605      	mov	r5, r0
 801f43e:	2800      	cmp	r0, #0
 801f440:	d0de      	beq.n	801f400 <__submore+0x1a>
 801f442:	eb00 0806 	add.w	r8, r0, r6
 801f446:	4601      	mov	r1, r0
 801f448:	4632      	mov	r2, r6
 801f44a:	4640      	mov	r0, r8
 801f44c:	f7fd fa63 	bl	801c916 <memcpy>
 801f450:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801f454:	f8c4 8000 	str.w	r8, [r4]
 801f458:	e7e9      	b.n	801f42e <__submore+0x48>

0801f45a <memmove>:
 801f45a:	4288      	cmp	r0, r1
 801f45c:	b510      	push	{r4, lr}
 801f45e:	eb01 0402 	add.w	r4, r1, r2
 801f462:	d902      	bls.n	801f46a <memmove+0x10>
 801f464:	4284      	cmp	r4, r0
 801f466:	4623      	mov	r3, r4
 801f468:	d807      	bhi.n	801f47a <memmove+0x20>
 801f46a:	1e43      	subs	r3, r0, #1
 801f46c:	42a1      	cmp	r1, r4
 801f46e:	d008      	beq.n	801f482 <memmove+0x28>
 801f470:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f474:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f478:	e7f8      	b.n	801f46c <memmove+0x12>
 801f47a:	4402      	add	r2, r0
 801f47c:	4601      	mov	r1, r0
 801f47e:	428a      	cmp	r2, r1
 801f480:	d100      	bne.n	801f484 <memmove+0x2a>
 801f482:	bd10      	pop	{r4, pc}
 801f484:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f488:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f48c:	e7f7      	b.n	801f47e <memmove+0x24>
	...

0801f490 <__gettzinfo>:
 801f490:	4800      	ldr	r0, [pc, #0]	@ (801f494 <__gettzinfo+0x4>)
 801f492:	4770      	bx	lr
 801f494:	200004a8 	.word	0x200004a8

0801f498 <__fpclassifyd>:
 801f498:	ec51 0b10 	vmov	r0, r1, d0
 801f49c:	460b      	mov	r3, r1
 801f49e:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 801f4a2:	b510      	push	{r4, lr}
 801f4a4:	d104      	bne.n	801f4b0 <__fpclassifyd+0x18>
 801f4a6:	2800      	cmp	r0, #0
 801f4a8:	bf0c      	ite	eq
 801f4aa:	2002      	moveq	r0, #2
 801f4ac:	2003      	movne	r0, #3
 801f4ae:	bd10      	pop	{r4, pc}
 801f4b0:	4a09      	ldr	r2, [pc, #36]	@ (801f4d8 <__fpclassifyd+0x40>)
 801f4b2:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 801f4b6:	4294      	cmp	r4, r2
 801f4b8:	d908      	bls.n	801f4cc <__fpclassifyd+0x34>
 801f4ba:	4a08      	ldr	r2, [pc, #32]	@ (801f4dc <__fpclassifyd+0x44>)
 801f4bc:	4213      	tst	r3, r2
 801f4be:	d007      	beq.n	801f4d0 <__fpclassifyd+0x38>
 801f4c0:	4291      	cmp	r1, r2
 801f4c2:	d107      	bne.n	801f4d4 <__fpclassifyd+0x3c>
 801f4c4:	fab0 f080 	clz	r0, r0
 801f4c8:	0940      	lsrs	r0, r0, #5
 801f4ca:	e7f0      	b.n	801f4ae <__fpclassifyd+0x16>
 801f4cc:	2004      	movs	r0, #4
 801f4ce:	e7ee      	b.n	801f4ae <__fpclassifyd+0x16>
 801f4d0:	2003      	movs	r0, #3
 801f4d2:	e7ec      	b.n	801f4ae <__fpclassifyd+0x16>
 801f4d4:	2000      	movs	r0, #0
 801f4d6:	e7ea      	b.n	801f4ae <__fpclassifyd+0x16>
 801f4d8:	7fdfffff 	.word	0x7fdfffff
 801f4dc:	7ff00000 	.word	0x7ff00000

0801f4e0 <abort>:
 801f4e0:	b508      	push	{r3, lr}
 801f4e2:	2006      	movs	r0, #6
 801f4e4:	f000 fa50 	bl	801f988 <raise>
 801f4e8:	2001      	movs	r0, #1
 801f4ea:	f7e4 ffbb 	bl	8004464 <_exit>

0801f4ee <_calloc_r>:
 801f4ee:	b570      	push	{r4, r5, r6, lr}
 801f4f0:	fba1 5402 	umull	r5, r4, r1, r2
 801f4f4:	b934      	cbnz	r4, 801f504 <_calloc_r+0x16>
 801f4f6:	4629      	mov	r1, r5
 801f4f8:	f7fa fa1e 	bl	8019938 <_malloc_r>
 801f4fc:	4606      	mov	r6, r0
 801f4fe:	b928      	cbnz	r0, 801f50c <_calloc_r+0x1e>
 801f500:	4630      	mov	r0, r6
 801f502:	bd70      	pop	{r4, r5, r6, pc}
 801f504:	220c      	movs	r2, #12
 801f506:	6002      	str	r2, [r0, #0]
 801f508:	2600      	movs	r6, #0
 801f50a:	e7f9      	b.n	801f500 <_calloc_r+0x12>
 801f50c:	462a      	mov	r2, r5
 801f50e:	4621      	mov	r1, r4
 801f510:	f7fc f929 	bl	801b766 <memset>
 801f514:	e7f4      	b.n	801f500 <_calloc_r+0x12>
	...

0801f518 <__env_lock>:
 801f518:	4801      	ldr	r0, [pc, #4]	@ (801f520 <__env_lock+0x8>)
 801f51a:	f7fd b9f1 	b.w	801c900 <__retarget_lock_acquire_recursive>
 801f51e:	bf00      	nop
 801f520:	200065d5 	.word	0x200065d5

0801f524 <__env_unlock>:
 801f524:	4801      	ldr	r0, [pc, #4]	@ (801f52c <__env_unlock+0x8>)
 801f526:	f7fd b9ed 	b.w	801c904 <__retarget_lock_release_recursive>
 801f52a:	bf00      	nop
 801f52c:	200065d5 	.word	0x200065d5

0801f530 <_realloc_r>:
 801f530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f534:	4607      	mov	r7, r0
 801f536:	4614      	mov	r4, r2
 801f538:	460d      	mov	r5, r1
 801f53a:	b921      	cbnz	r1, 801f546 <_realloc_r+0x16>
 801f53c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f540:	4611      	mov	r1, r2
 801f542:	f7fa b9f9 	b.w	8019938 <_malloc_r>
 801f546:	b92a      	cbnz	r2, 801f554 <_realloc_r+0x24>
 801f548:	f7fe f8d6 	bl	801d6f8 <_free_r>
 801f54c:	4625      	mov	r5, r4
 801f54e:	4628      	mov	r0, r5
 801f550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f554:	f000 fa34 	bl	801f9c0 <_malloc_usable_size_r>
 801f558:	4284      	cmp	r4, r0
 801f55a:	4606      	mov	r6, r0
 801f55c:	d802      	bhi.n	801f564 <_realloc_r+0x34>
 801f55e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f562:	d8f4      	bhi.n	801f54e <_realloc_r+0x1e>
 801f564:	4621      	mov	r1, r4
 801f566:	4638      	mov	r0, r7
 801f568:	f7fa f9e6 	bl	8019938 <_malloc_r>
 801f56c:	4680      	mov	r8, r0
 801f56e:	b908      	cbnz	r0, 801f574 <_realloc_r+0x44>
 801f570:	4645      	mov	r5, r8
 801f572:	e7ec      	b.n	801f54e <_realloc_r+0x1e>
 801f574:	42b4      	cmp	r4, r6
 801f576:	4622      	mov	r2, r4
 801f578:	4629      	mov	r1, r5
 801f57a:	bf28      	it	cs
 801f57c:	4632      	movcs	r2, r6
 801f57e:	f7fd f9ca 	bl	801c916 <memcpy>
 801f582:	4629      	mov	r1, r5
 801f584:	4638      	mov	r0, r7
 801f586:	f7fe f8b7 	bl	801d6f8 <_free_r>
 801f58a:	e7f1      	b.n	801f570 <_realloc_r+0x40>

0801f58c <__sfputc_r>:
 801f58c:	6893      	ldr	r3, [r2, #8]
 801f58e:	3b01      	subs	r3, #1
 801f590:	2b00      	cmp	r3, #0
 801f592:	b410      	push	{r4}
 801f594:	6093      	str	r3, [r2, #8]
 801f596:	da08      	bge.n	801f5aa <__sfputc_r+0x1e>
 801f598:	6994      	ldr	r4, [r2, #24]
 801f59a:	42a3      	cmp	r3, r4
 801f59c:	db01      	blt.n	801f5a2 <__sfputc_r+0x16>
 801f59e:	290a      	cmp	r1, #10
 801f5a0:	d103      	bne.n	801f5aa <__sfputc_r+0x1e>
 801f5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f5a6:	f000 b933 	b.w	801f810 <__swbuf_r>
 801f5aa:	6813      	ldr	r3, [r2, #0]
 801f5ac:	1c58      	adds	r0, r3, #1
 801f5ae:	6010      	str	r0, [r2, #0]
 801f5b0:	7019      	strb	r1, [r3, #0]
 801f5b2:	4608      	mov	r0, r1
 801f5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f5b8:	4770      	bx	lr

0801f5ba <__sfputs_r>:
 801f5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f5bc:	4606      	mov	r6, r0
 801f5be:	460f      	mov	r7, r1
 801f5c0:	4614      	mov	r4, r2
 801f5c2:	18d5      	adds	r5, r2, r3
 801f5c4:	42ac      	cmp	r4, r5
 801f5c6:	d101      	bne.n	801f5cc <__sfputs_r+0x12>
 801f5c8:	2000      	movs	r0, #0
 801f5ca:	e007      	b.n	801f5dc <__sfputs_r+0x22>
 801f5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5d0:	463a      	mov	r2, r7
 801f5d2:	4630      	mov	r0, r6
 801f5d4:	f7ff ffda 	bl	801f58c <__sfputc_r>
 801f5d8:	1c43      	adds	r3, r0, #1
 801f5da:	d1f3      	bne.n	801f5c4 <__sfputs_r+0xa>
 801f5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f5e0 <_vfiprintf_r>:
 801f5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5e4:	460d      	mov	r5, r1
 801f5e6:	b09d      	sub	sp, #116	@ 0x74
 801f5e8:	4614      	mov	r4, r2
 801f5ea:	4698      	mov	r8, r3
 801f5ec:	4606      	mov	r6, r0
 801f5ee:	b118      	cbz	r0, 801f5f8 <_vfiprintf_r+0x18>
 801f5f0:	6a03      	ldr	r3, [r0, #32]
 801f5f2:	b90b      	cbnz	r3, 801f5f8 <_vfiprintf_r+0x18>
 801f5f4:	f7fb ffb8 	bl	801b568 <__sinit>
 801f5f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f5fa:	07d9      	lsls	r1, r3, #31
 801f5fc:	d405      	bmi.n	801f60a <_vfiprintf_r+0x2a>
 801f5fe:	89ab      	ldrh	r3, [r5, #12]
 801f600:	059a      	lsls	r2, r3, #22
 801f602:	d402      	bmi.n	801f60a <_vfiprintf_r+0x2a>
 801f604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f606:	f7fd f97b 	bl	801c900 <__retarget_lock_acquire_recursive>
 801f60a:	89ab      	ldrh	r3, [r5, #12]
 801f60c:	071b      	lsls	r3, r3, #28
 801f60e:	d501      	bpl.n	801f614 <_vfiprintf_r+0x34>
 801f610:	692b      	ldr	r3, [r5, #16]
 801f612:	b99b      	cbnz	r3, 801f63c <_vfiprintf_r+0x5c>
 801f614:	4629      	mov	r1, r5
 801f616:	4630      	mov	r0, r6
 801f618:	f000 f938 	bl	801f88c <__swsetup_r>
 801f61c:	b170      	cbz	r0, 801f63c <_vfiprintf_r+0x5c>
 801f61e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f620:	07dc      	lsls	r4, r3, #31
 801f622:	d504      	bpl.n	801f62e <_vfiprintf_r+0x4e>
 801f624:	f04f 30ff 	mov.w	r0, #4294967295
 801f628:	b01d      	add	sp, #116	@ 0x74
 801f62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f62e:	89ab      	ldrh	r3, [r5, #12]
 801f630:	0598      	lsls	r0, r3, #22
 801f632:	d4f7      	bmi.n	801f624 <_vfiprintf_r+0x44>
 801f634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f636:	f7fd f965 	bl	801c904 <__retarget_lock_release_recursive>
 801f63a:	e7f3      	b.n	801f624 <_vfiprintf_r+0x44>
 801f63c:	2300      	movs	r3, #0
 801f63e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f640:	2320      	movs	r3, #32
 801f642:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f646:	f8cd 800c 	str.w	r8, [sp, #12]
 801f64a:	2330      	movs	r3, #48	@ 0x30
 801f64c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f7fc <_vfiprintf_r+0x21c>
 801f650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f654:	f04f 0901 	mov.w	r9, #1
 801f658:	4623      	mov	r3, r4
 801f65a:	469a      	mov	sl, r3
 801f65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f660:	b10a      	cbz	r2, 801f666 <_vfiprintf_r+0x86>
 801f662:	2a25      	cmp	r2, #37	@ 0x25
 801f664:	d1f9      	bne.n	801f65a <_vfiprintf_r+0x7a>
 801f666:	ebba 0b04 	subs.w	fp, sl, r4
 801f66a:	d00b      	beq.n	801f684 <_vfiprintf_r+0xa4>
 801f66c:	465b      	mov	r3, fp
 801f66e:	4622      	mov	r2, r4
 801f670:	4629      	mov	r1, r5
 801f672:	4630      	mov	r0, r6
 801f674:	f7ff ffa1 	bl	801f5ba <__sfputs_r>
 801f678:	3001      	adds	r0, #1
 801f67a:	f000 80a7 	beq.w	801f7cc <_vfiprintf_r+0x1ec>
 801f67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f680:	445a      	add	r2, fp
 801f682:	9209      	str	r2, [sp, #36]	@ 0x24
 801f684:	f89a 3000 	ldrb.w	r3, [sl]
 801f688:	2b00      	cmp	r3, #0
 801f68a:	f000 809f 	beq.w	801f7cc <_vfiprintf_r+0x1ec>
 801f68e:	2300      	movs	r3, #0
 801f690:	f04f 32ff 	mov.w	r2, #4294967295
 801f694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f698:	f10a 0a01 	add.w	sl, sl, #1
 801f69c:	9304      	str	r3, [sp, #16]
 801f69e:	9307      	str	r3, [sp, #28]
 801f6a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f6a4:	931a      	str	r3, [sp, #104]	@ 0x68
 801f6a6:	4654      	mov	r4, sl
 801f6a8:	2205      	movs	r2, #5
 801f6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f6ae:	4853      	ldr	r0, [pc, #332]	@ (801f7fc <_vfiprintf_r+0x21c>)
 801f6b0:	f7e0 fd9e 	bl	80001f0 <memchr>
 801f6b4:	9a04      	ldr	r2, [sp, #16]
 801f6b6:	b9d8      	cbnz	r0, 801f6f0 <_vfiprintf_r+0x110>
 801f6b8:	06d1      	lsls	r1, r2, #27
 801f6ba:	bf44      	itt	mi
 801f6bc:	2320      	movmi	r3, #32
 801f6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f6c2:	0713      	lsls	r3, r2, #28
 801f6c4:	bf44      	itt	mi
 801f6c6:	232b      	movmi	r3, #43	@ 0x2b
 801f6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f6cc:	f89a 3000 	ldrb.w	r3, [sl]
 801f6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 801f6d2:	d015      	beq.n	801f700 <_vfiprintf_r+0x120>
 801f6d4:	9a07      	ldr	r2, [sp, #28]
 801f6d6:	4654      	mov	r4, sl
 801f6d8:	2000      	movs	r0, #0
 801f6da:	f04f 0c0a 	mov.w	ip, #10
 801f6de:	4621      	mov	r1, r4
 801f6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f6e4:	3b30      	subs	r3, #48	@ 0x30
 801f6e6:	2b09      	cmp	r3, #9
 801f6e8:	d94b      	bls.n	801f782 <_vfiprintf_r+0x1a2>
 801f6ea:	b1b0      	cbz	r0, 801f71a <_vfiprintf_r+0x13a>
 801f6ec:	9207      	str	r2, [sp, #28]
 801f6ee:	e014      	b.n	801f71a <_vfiprintf_r+0x13a>
 801f6f0:	eba0 0308 	sub.w	r3, r0, r8
 801f6f4:	fa09 f303 	lsl.w	r3, r9, r3
 801f6f8:	4313      	orrs	r3, r2
 801f6fa:	9304      	str	r3, [sp, #16]
 801f6fc:	46a2      	mov	sl, r4
 801f6fe:	e7d2      	b.n	801f6a6 <_vfiprintf_r+0xc6>
 801f700:	9b03      	ldr	r3, [sp, #12]
 801f702:	1d19      	adds	r1, r3, #4
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	9103      	str	r1, [sp, #12]
 801f708:	2b00      	cmp	r3, #0
 801f70a:	bfbb      	ittet	lt
 801f70c:	425b      	neglt	r3, r3
 801f70e:	f042 0202 	orrlt.w	r2, r2, #2
 801f712:	9307      	strge	r3, [sp, #28]
 801f714:	9307      	strlt	r3, [sp, #28]
 801f716:	bfb8      	it	lt
 801f718:	9204      	strlt	r2, [sp, #16]
 801f71a:	7823      	ldrb	r3, [r4, #0]
 801f71c:	2b2e      	cmp	r3, #46	@ 0x2e
 801f71e:	d10a      	bne.n	801f736 <_vfiprintf_r+0x156>
 801f720:	7863      	ldrb	r3, [r4, #1]
 801f722:	2b2a      	cmp	r3, #42	@ 0x2a
 801f724:	d132      	bne.n	801f78c <_vfiprintf_r+0x1ac>
 801f726:	9b03      	ldr	r3, [sp, #12]
 801f728:	1d1a      	adds	r2, r3, #4
 801f72a:	681b      	ldr	r3, [r3, #0]
 801f72c:	9203      	str	r2, [sp, #12]
 801f72e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f732:	3402      	adds	r4, #2
 801f734:	9305      	str	r3, [sp, #20]
 801f736:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f80c <_vfiprintf_r+0x22c>
 801f73a:	7821      	ldrb	r1, [r4, #0]
 801f73c:	2203      	movs	r2, #3
 801f73e:	4650      	mov	r0, sl
 801f740:	f7e0 fd56 	bl	80001f0 <memchr>
 801f744:	b138      	cbz	r0, 801f756 <_vfiprintf_r+0x176>
 801f746:	9b04      	ldr	r3, [sp, #16]
 801f748:	eba0 000a 	sub.w	r0, r0, sl
 801f74c:	2240      	movs	r2, #64	@ 0x40
 801f74e:	4082      	lsls	r2, r0
 801f750:	4313      	orrs	r3, r2
 801f752:	3401      	adds	r4, #1
 801f754:	9304      	str	r3, [sp, #16]
 801f756:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f75a:	4829      	ldr	r0, [pc, #164]	@ (801f800 <_vfiprintf_r+0x220>)
 801f75c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f760:	2206      	movs	r2, #6
 801f762:	f7e0 fd45 	bl	80001f0 <memchr>
 801f766:	2800      	cmp	r0, #0
 801f768:	d03f      	beq.n	801f7ea <_vfiprintf_r+0x20a>
 801f76a:	4b26      	ldr	r3, [pc, #152]	@ (801f804 <_vfiprintf_r+0x224>)
 801f76c:	bb1b      	cbnz	r3, 801f7b6 <_vfiprintf_r+0x1d6>
 801f76e:	9b03      	ldr	r3, [sp, #12]
 801f770:	3307      	adds	r3, #7
 801f772:	f023 0307 	bic.w	r3, r3, #7
 801f776:	3308      	adds	r3, #8
 801f778:	9303      	str	r3, [sp, #12]
 801f77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f77c:	443b      	add	r3, r7
 801f77e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f780:	e76a      	b.n	801f658 <_vfiprintf_r+0x78>
 801f782:	fb0c 3202 	mla	r2, ip, r2, r3
 801f786:	460c      	mov	r4, r1
 801f788:	2001      	movs	r0, #1
 801f78a:	e7a8      	b.n	801f6de <_vfiprintf_r+0xfe>
 801f78c:	2300      	movs	r3, #0
 801f78e:	3401      	adds	r4, #1
 801f790:	9305      	str	r3, [sp, #20]
 801f792:	4619      	mov	r1, r3
 801f794:	f04f 0c0a 	mov.w	ip, #10
 801f798:	4620      	mov	r0, r4
 801f79a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f79e:	3a30      	subs	r2, #48	@ 0x30
 801f7a0:	2a09      	cmp	r2, #9
 801f7a2:	d903      	bls.n	801f7ac <_vfiprintf_r+0x1cc>
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	d0c6      	beq.n	801f736 <_vfiprintf_r+0x156>
 801f7a8:	9105      	str	r1, [sp, #20]
 801f7aa:	e7c4      	b.n	801f736 <_vfiprintf_r+0x156>
 801f7ac:	fb0c 2101 	mla	r1, ip, r1, r2
 801f7b0:	4604      	mov	r4, r0
 801f7b2:	2301      	movs	r3, #1
 801f7b4:	e7f0      	b.n	801f798 <_vfiprintf_r+0x1b8>
 801f7b6:	ab03      	add	r3, sp, #12
 801f7b8:	9300      	str	r3, [sp, #0]
 801f7ba:	462a      	mov	r2, r5
 801f7bc:	4b12      	ldr	r3, [pc, #72]	@ (801f808 <_vfiprintf_r+0x228>)
 801f7be:	a904      	add	r1, sp, #16
 801f7c0:	4630      	mov	r0, r6
 801f7c2:	f7fb f881 	bl	801a8c8 <_printf_float>
 801f7c6:	4607      	mov	r7, r0
 801f7c8:	1c78      	adds	r0, r7, #1
 801f7ca:	d1d6      	bne.n	801f77a <_vfiprintf_r+0x19a>
 801f7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f7ce:	07d9      	lsls	r1, r3, #31
 801f7d0:	d405      	bmi.n	801f7de <_vfiprintf_r+0x1fe>
 801f7d2:	89ab      	ldrh	r3, [r5, #12]
 801f7d4:	059a      	lsls	r2, r3, #22
 801f7d6:	d402      	bmi.n	801f7de <_vfiprintf_r+0x1fe>
 801f7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f7da:	f7fd f893 	bl	801c904 <__retarget_lock_release_recursive>
 801f7de:	89ab      	ldrh	r3, [r5, #12]
 801f7e0:	065b      	lsls	r3, r3, #25
 801f7e2:	f53f af1f 	bmi.w	801f624 <_vfiprintf_r+0x44>
 801f7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7e8:	e71e      	b.n	801f628 <_vfiprintf_r+0x48>
 801f7ea:	ab03      	add	r3, sp, #12
 801f7ec:	9300      	str	r3, [sp, #0]
 801f7ee:	462a      	mov	r2, r5
 801f7f0:	4b05      	ldr	r3, [pc, #20]	@ (801f808 <_vfiprintf_r+0x228>)
 801f7f2:	a904      	add	r1, sp, #16
 801f7f4:	4630      	mov	r0, r6
 801f7f6:	f7fb faff 	bl	801adf8 <_printf_i>
 801f7fa:	e7e4      	b.n	801f7c6 <_vfiprintf_r+0x1e6>
 801f7fc:	08024e3b 	.word	0x08024e3b
 801f800:	08024e45 	.word	0x08024e45
 801f804:	0801a8c9 	.word	0x0801a8c9
 801f808:	0801f5bb 	.word	0x0801f5bb
 801f80c:	08024e41 	.word	0x08024e41

0801f810 <__swbuf_r>:
 801f810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f812:	460e      	mov	r6, r1
 801f814:	4614      	mov	r4, r2
 801f816:	4605      	mov	r5, r0
 801f818:	b118      	cbz	r0, 801f822 <__swbuf_r+0x12>
 801f81a:	6a03      	ldr	r3, [r0, #32]
 801f81c:	b90b      	cbnz	r3, 801f822 <__swbuf_r+0x12>
 801f81e:	f7fb fea3 	bl	801b568 <__sinit>
 801f822:	69a3      	ldr	r3, [r4, #24]
 801f824:	60a3      	str	r3, [r4, #8]
 801f826:	89a3      	ldrh	r3, [r4, #12]
 801f828:	071a      	lsls	r2, r3, #28
 801f82a:	d501      	bpl.n	801f830 <__swbuf_r+0x20>
 801f82c:	6923      	ldr	r3, [r4, #16]
 801f82e:	b943      	cbnz	r3, 801f842 <__swbuf_r+0x32>
 801f830:	4621      	mov	r1, r4
 801f832:	4628      	mov	r0, r5
 801f834:	f000 f82a 	bl	801f88c <__swsetup_r>
 801f838:	b118      	cbz	r0, 801f842 <__swbuf_r+0x32>
 801f83a:	f04f 37ff 	mov.w	r7, #4294967295
 801f83e:	4638      	mov	r0, r7
 801f840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f842:	6823      	ldr	r3, [r4, #0]
 801f844:	6922      	ldr	r2, [r4, #16]
 801f846:	1a98      	subs	r0, r3, r2
 801f848:	6963      	ldr	r3, [r4, #20]
 801f84a:	b2f6      	uxtb	r6, r6
 801f84c:	4283      	cmp	r3, r0
 801f84e:	4637      	mov	r7, r6
 801f850:	dc05      	bgt.n	801f85e <__swbuf_r+0x4e>
 801f852:	4621      	mov	r1, r4
 801f854:	4628      	mov	r0, r5
 801f856:	f7ff fd53 	bl	801f300 <_fflush_r>
 801f85a:	2800      	cmp	r0, #0
 801f85c:	d1ed      	bne.n	801f83a <__swbuf_r+0x2a>
 801f85e:	68a3      	ldr	r3, [r4, #8]
 801f860:	3b01      	subs	r3, #1
 801f862:	60a3      	str	r3, [r4, #8]
 801f864:	6823      	ldr	r3, [r4, #0]
 801f866:	1c5a      	adds	r2, r3, #1
 801f868:	6022      	str	r2, [r4, #0]
 801f86a:	701e      	strb	r6, [r3, #0]
 801f86c:	6962      	ldr	r2, [r4, #20]
 801f86e:	1c43      	adds	r3, r0, #1
 801f870:	429a      	cmp	r2, r3
 801f872:	d004      	beq.n	801f87e <__swbuf_r+0x6e>
 801f874:	89a3      	ldrh	r3, [r4, #12]
 801f876:	07db      	lsls	r3, r3, #31
 801f878:	d5e1      	bpl.n	801f83e <__swbuf_r+0x2e>
 801f87a:	2e0a      	cmp	r6, #10
 801f87c:	d1df      	bne.n	801f83e <__swbuf_r+0x2e>
 801f87e:	4621      	mov	r1, r4
 801f880:	4628      	mov	r0, r5
 801f882:	f7ff fd3d 	bl	801f300 <_fflush_r>
 801f886:	2800      	cmp	r0, #0
 801f888:	d0d9      	beq.n	801f83e <__swbuf_r+0x2e>
 801f88a:	e7d6      	b.n	801f83a <__swbuf_r+0x2a>

0801f88c <__swsetup_r>:
 801f88c:	b538      	push	{r3, r4, r5, lr}
 801f88e:	4b29      	ldr	r3, [pc, #164]	@ (801f934 <__swsetup_r+0xa8>)
 801f890:	4605      	mov	r5, r0
 801f892:	6818      	ldr	r0, [r3, #0]
 801f894:	460c      	mov	r4, r1
 801f896:	b118      	cbz	r0, 801f8a0 <__swsetup_r+0x14>
 801f898:	6a03      	ldr	r3, [r0, #32]
 801f89a:	b90b      	cbnz	r3, 801f8a0 <__swsetup_r+0x14>
 801f89c:	f7fb fe64 	bl	801b568 <__sinit>
 801f8a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f8a4:	0719      	lsls	r1, r3, #28
 801f8a6:	d422      	bmi.n	801f8ee <__swsetup_r+0x62>
 801f8a8:	06da      	lsls	r2, r3, #27
 801f8aa:	d407      	bmi.n	801f8bc <__swsetup_r+0x30>
 801f8ac:	2209      	movs	r2, #9
 801f8ae:	602a      	str	r2, [r5, #0]
 801f8b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f8b4:	81a3      	strh	r3, [r4, #12]
 801f8b6:	f04f 30ff 	mov.w	r0, #4294967295
 801f8ba:	e033      	b.n	801f924 <__swsetup_r+0x98>
 801f8bc:	0758      	lsls	r0, r3, #29
 801f8be:	d512      	bpl.n	801f8e6 <__swsetup_r+0x5a>
 801f8c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f8c2:	b141      	cbz	r1, 801f8d6 <__swsetup_r+0x4a>
 801f8c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f8c8:	4299      	cmp	r1, r3
 801f8ca:	d002      	beq.n	801f8d2 <__swsetup_r+0x46>
 801f8cc:	4628      	mov	r0, r5
 801f8ce:	f7fd ff13 	bl	801d6f8 <_free_r>
 801f8d2:	2300      	movs	r3, #0
 801f8d4:	6363      	str	r3, [r4, #52]	@ 0x34
 801f8d6:	89a3      	ldrh	r3, [r4, #12]
 801f8d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f8dc:	81a3      	strh	r3, [r4, #12]
 801f8de:	2300      	movs	r3, #0
 801f8e0:	6063      	str	r3, [r4, #4]
 801f8e2:	6923      	ldr	r3, [r4, #16]
 801f8e4:	6023      	str	r3, [r4, #0]
 801f8e6:	89a3      	ldrh	r3, [r4, #12]
 801f8e8:	f043 0308 	orr.w	r3, r3, #8
 801f8ec:	81a3      	strh	r3, [r4, #12]
 801f8ee:	6923      	ldr	r3, [r4, #16]
 801f8f0:	b94b      	cbnz	r3, 801f906 <__swsetup_r+0x7a>
 801f8f2:	89a3      	ldrh	r3, [r4, #12]
 801f8f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f8f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f8fc:	d003      	beq.n	801f906 <__swsetup_r+0x7a>
 801f8fe:	4621      	mov	r1, r4
 801f900:	4628      	mov	r0, r5
 801f902:	f000 f88b 	bl	801fa1c <__smakebuf_r>
 801f906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f90a:	f013 0201 	ands.w	r2, r3, #1
 801f90e:	d00a      	beq.n	801f926 <__swsetup_r+0x9a>
 801f910:	2200      	movs	r2, #0
 801f912:	60a2      	str	r2, [r4, #8]
 801f914:	6962      	ldr	r2, [r4, #20]
 801f916:	4252      	negs	r2, r2
 801f918:	61a2      	str	r2, [r4, #24]
 801f91a:	6922      	ldr	r2, [r4, #16]
 801f91c:	b942      	cbnz	r2, 801f930 <__swsetup_r+0xa4>
 801f91e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f922:	d1c5      	bne.n	801f8b0 <__swsetup_r+0x24>
 801f924:	bd38      	pop	{r3, r4, r5, pc}
 801f926:	0799      	lsls	r1, r3, #30
 801f928:	bf58      	it	pl
 801f92a:	6962      	ldrpl	r2, [r4, #20]
 801f92c:	60a2      	str	r2, [r4, #8]
 801f92e:	e7f4      	b.n	801f91a <__swsetup_r+0x8e>
 801f930:	2000      	movs	r0, #0
 801f932:	e7f7      	b.n	801f924 <__swsetup_r+0x98>
 801f934:	20000458 	.word	0x20000458

0801f938 <_raise_r>:
 801f938:	291f      	cmp	r1, #31
 801f93a:	b538      	push	{r3, r4, r5, lr}
 801f93c:	4605      	mov	r5, r0
 801f93e:	460c      	mov	r4, r1
 801f940:	d904      	bls.n	801f94c <_raise_r+0x14>
 801f942:	2316      	movs	r3, #22
 801f944:	6003      	str	r3, [r0, #0]
 801f946:	f04f 30ff 	mov.w	r0, #4294967295
 801f94a:	bd38      	pop	{r3, r4, r5, pc}
 801f94c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f94e:	b112      	cbz	r2, 801f956 <_raise_r+0x1e>
 801f950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f954:	b94b      	cbnz	r3, 801f96a <_raise_r+0x32>
 801f956:	4628      	mov	r0, r5
 801f958:	f000 f830 	bl	801f9bc <_getpid_r>
 801f95c:	4622      	mov	r2, r4
 801f95e:	4601      	mov	r1, r0
 801f960:	4628      	mov	r0, r5
 801f962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f966:	f000 b817 	b.w	801f998 <_kill_r>
 801f96a:	2b01      	cmp	r3, #1
 801f96c:	d00a      	beq.n	801f984 <_raise_r+0x4c>
 801f96e:	1c59      	adds	r1, r3, #1
 801f970:	d103      	bne.n	801f97a <_raise_r+0x42>
 801f972:	2316      	movs	r3, #22
 801f974:	6003      	str	r3, [r0, #0]
 801f976:	2001      	movs	r0, #1
 801f978:	e7e7      	b.n	801f94a <_raise_r+0x12>
 801f97a:	2100      	movs	r1, #0
 801f97c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f980:	4620      	mov	r0, r4
 801f982:	4798      	blx	r3
 801f984:	2000      	movs	r0, #0
 801f986:	e7e0      	b.n	801f94a <_raise_r+0x12>

0801f988 <raise>:
 801f988:	4b02      	ldr	r3, [pc, #8]	@ (801f994 <raise+0xc>)
 801f98a:	4601      	mov	r1, r0
 801f98c:	6818      	ldr	r0, [r3, #0]
 801f98e:	f7ff bfd3 	b.w	801f938 <_raise_r>
 801f992:	bf00      	nop
 801f994:	20000458 	.word	0x20000458

0801f998 <_kill_r>:
 801f998:	b538      	push	{r3, r4, r5, lr}
 801f99a:	4d07      	ldr	r5, [pc, #28]	@ (801f9b8 <_kill_r+0x20>)
 801f99c:	2300      	movs	r3, #0
 801f99e:	4604      	mov	r4, r0
 801f9a0:	4608      	mov	r0, r1
 801f9a2:	4611      	mov	r1, r2
 801f9a4:	602b      	str	r3, [r5, #0]
 801f9a6:	f7e4 fd4d 	bl	8004444 <_kill>
 801f9aa:	1c43      	adds	r3, r0, #1
 801f9ac:	d102      	bne.n	801f9b4 <_kill_r+0x1c>
 801f9ae:	682b      	ldr	r3, [r5, #0]
 801f9b0:	b103      	cbz	r3, 801f9b4 <_kill_r+0x1c>
 801f9b2:	6023      	str	r3, [r4, #0]
 801f9b4:	bd38      	pop	{r3, r4, r5, pc}
 801f9b6:	bf00      	nop
 801f9b8:	200065d0 	.word	0x200065d0

0801f9bc <_getpid_r>:
 801f9bc:	f7e4 bd3a 	b.w	8004434 <_getpid>

0801f9c0 <_malloc_usable_size_r>:
 801f9c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f9c4:	1f18      	subs	r0, r3, #4
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	bfbc      	itt	lt
 801f9ca:	580b      	ldrlt	r3, [r1, r0]
 801f9cc:	18c0      	addlt	r0, r0, r3
 801f9ce:	4770      	bx	lr

0801f9d0 <__swhatbuf_r>:
 801f9d0:	b570      	push	{r4, r5, r6, lr}
 801f9d2:	460c      	mov	r4, r1
 801f9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9d8:	2900      	cmp	r1, #0
 801f9da:	b096      	sub	sp, #88	@ 0x58
 801f9dc:	4615      	mov	r5, r2
 801f9de:	461e      	mov	r6, r3
 801f9e0:	da0d      	bge.n	801f9fe <__swhatbuf_r+0x2e>
 801f9e2:	89a3      	ldrh	r3, [r4, #12]
 801f9e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f9e8:	f04f 0100 	mov.w	r1, #0
 801f9ec:	bf14      	ite	ne
 801f9ee:	2340      	movne	r3, #64	@ 0x40
 801f9f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f9f4:	2000      	movs	r0, #0
 801f9f6:	6031      	str	r1, [r6, #0]
 801f9f8:	602b      	str	r3, [r5, #0]
 801f9fa:	b016      	add	sp, #88	@ 0x58
 801f9fc:	bd70      	pop	{r4, r5, r6, pc}
 801f9fe:	466a      	mov	r2, sp
 801fa00:	f000 f848 	bl	801fa94 <_fstat_r>
 801fa04:	2800      	cmp	r0, #0
 801fa06:	dbec      	blt.n	801f9e2 <__swhatbuf_r+0x12>
 801fa08:	9901      	ldr	r1, [sp, #4]
 801fa0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801fa0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801fa12:	4259      	negs	r1, r3
 801fa14:	4159      	adcs	r1, r3
 801fa16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801fa1a:	e7eb      	b.n	801f9f4 <__swhatbuf_r+0x24>

0801fa1c <__smakebuf_r>:
 801fa1c:	898b      	ldrh	r3, [r1, #12]
 801fa1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fa20:	079d      	lsls	r5, r3, #30
 801fa22:	4606      	mov	r6, r0
 801fa24:	460c      	mov	r4, r1
 801fa26:	d507      	bpl.n	801fa38 <__smakebuf_r+0x1c>
 801fa28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801fa2c:	6023      	str	r3, [r4, #0]
 801fa2e:	6123      	str	r3, [r4, #16]
 801fa30:	2301      	movs	r3, #1
 801fa32:	6163      	str	r3, [r4, #20]
 801fa34:	b003      	add	sp, #12
 801fa36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa38:	ab01      	add	r3, sp, #4
 801fa3a:	466a      	mov	r2, sp
 801fa3c:	f7ff ffc8 	bl	801f9d0 <__swhatbuf_r>
 801fa40:	9f00      	ldr	r7, [sp, #0]
 801fa42:	4605      	mov	r5, r0
 801fa44:	4639      	mov	r1, r7
 801fa46:	4630      	mov	r0, r6
 801fa48:	f7f9 ff76 	bl	8019938 <_malloc_r>
 801fa4c:	b948      	cbnz	r0, 801fa62 <__smakebuf_r+0x46>
 801fa4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa52:	059a      	lsls	r2, r3, #22
 801fa54:	d4ee      	bmi.n	801fa34 <__smakebuf_r+0x18>
 801fa56:	f023 0303 	bic.w	r3, r3, #3
 801fa5a:	f043 0302 	orr.w	r3, r3, #2
 801fa5e:	81a3      	strh	r3, [r4, #12]
 801fa60:	e7e2      	b.n	801fa28 <__smakebuf_r+0xc>
 801fa62:	89a3      	ldrh	r3, [r4, #12]
 801fa64:	6020      	str	r0, [r4, #0]
 801fa66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fa6a:	81a3      	strh	r3, [r4, #12]
 801fa6c:	9b01      	ldr	r3, [sp, #4]
 801fa6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801fa72:	b15b      	cbz	r3, 801fa8c <__smakebuf_r+0x70>
 801fa74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fa78:	4630      	mov	r0, r6
 801fa7a:	f000 f81d 	bl	801fab8 <_isatty_r>
 801fa7e:	b128      	cbz	r0, 801fa8c <__smakebuf_r+0x70>
 801fa80:	89a3      	ldrh	r3, [r4, #12]
 801fa82:	f023 0303 	bic.w	r3, r3, #3
 801fa86:	f043 0301 	orr.w	r3, r3, #1
 801fa8a:	81a3      	strh	r3, [r4, #12]
 801fa8c:	89a3      	ldrh	r3, [r4, #12]
 801fa8e:	431d      	orrs	r5, r3
 801fa90:	81a5      	strh	r5, [r4, #12]
 801fa92:	e7cf      	b.n	801fa34 <__smakebuf_r+0x18>

0801fa94 <_fstat_r>:
 801fa94:	b538      	push	{r3, r4, r5, lr}
 801fa96:	4d07      	ldr	r5, [pc, #28]	@ (801fab4 <_fstat_r+0x20>)
 801fa98:	2300      	movs	r3, #0
 801fa9a:	4604      	mov	r4, r0
 801fa9c:	4608      	mov	r0, r1
 801fa9e:	4611      	mov	r1, r2
 801faa0:	602b      	str	r3, [r5, #0]
 801faa2:	f7e4 fd2f 	bl	8004504 <_fstat>
 801faa6:	1c43      	adds	r3, r0, #1
 801faa8:	d102      	bne.n	801fab0 <_fstat_r+0x1c>
 801faaa:	682b      	ldr	r3, [r5, #0]
 801faac:	b103      	cbz	r3, 801fab0 <_fstat_r+0x1c>
 801faae:	6023      	str	r3, [r4, #0]
 801fab0:	bd38      	pop	{r3, r4, r5, pc}
 801fab2:	bf00      	nop
 801fab4:	200065d0 	.word	0x200065d0

0801fab8 <_isatty_r>:
 801fab8:	b538      	push	{r3, r4, r5, lr}
 801faba:	4d06      	ldr	r5, [pc, #24]	@ (801fad4 <_isatty_r+0x1c>)
 801fabc:	2300      	movs	r3, #0
 801fabe:	4604      	mov	r4, r0
 801fac0:	4608      	mov	r0, r1
 801fac2:	602b      	str	r3, [r5, #0]
 801fac4:	f7e4 fd2e 	bl	8004524 <_isatty>
 801fac8:	1c43      	adds	r3, r0, #1
 801faca:	d102      	bne.n	801fad2 <_isatty_r+0x1a>
 801facc:	682b      	ldr	r3, [r5, #0]
 801face:	b103      	cbz	r3, 801fad2 <_isatty_r+0x1a>
 801fad0:	6023      	str	r3, [r4, #0]
 801fad2:	bd38      	pop	{r3, r4, r5, pc}
 801fad4:	200065d0 	.word	0x200065d0

0801fad8 <acos>:
 801fad8:	b538      	push	{r3, r4, r5, lr}
 801fada:	ed2d 8b02 	vpush	{d8}
 801fade:	ec55 4b10 	vmov	r4, r5, d0
 801fae2:	f000 fee5 	bl	80208b0 <__ieee754_acos>
 801fae6:	4622      	mov	r2, r4
 801fae8:	462b      	mov	r3, r5
 801faea:	4620      	mov	r0, r4
 801faec:	4629      	mov	r1, r5
 801faee:	eeb0 8a40 	vmov.f32	s16, s0
 801faf2:	eef0 8a60 	vmov.f32	s17, s1
 801faf6:	f7e1 f829 	bl	8000b4c <__aeabi_dcmpun>
 801fafa:	b9a8      	cbnz	r0, 801fb28 <acos+0x50>
 801fafc:	ec45 4b10 	vmov	d0, r4, r5
 801fb00:	f000 fb96 	bl	8020230 <fabs>
 801fb04:	4b0c      	ldr	r3, [pc, #48]	@ (801fb38 <acos+0x60>)
 801fb06:	ec51 0b10 	vmov	r0, r1, d0
 801fb0a:	2200      	movs	r2, #0
 801fb0c:	f7e1 f814 	bl	8000b38 <__aeabi_dcmpgt>
 801fb10:	b150      	cbz	r0, 801fb28 <acos+0x50>
 801fb12:	f7fc fec9 	bl	801c8a8 <__errno>
 801fb16:	ecbd 8b02 	vpop	{d8}
 801fb1a:	2321      	movs	r3, #33	@ 0x21
 801fb1c:	6003      	str	r3, [r0, #0]
 801fb1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb22:	4806      	ldr	r0, [pc, #24]	@ (801fb3c <acos+0x64>)
 801fb24:	f7fc bf08 	b.w	801c938 <nan>
 801fb28:	eeb0 0a48 	vmov.f32	s0, s16
 801fb2c:	eef0 0a68 	vmov.f32	s1, s17
 801fb30:	ecbd 8b02 	vpop	{d8}
 801fb34:	bd38      	pop	{r3, r4, r5, pc}
 801fb36:	bf00      	nop
 801fb38:	3ff00000 	.word	0x3ff00000
 801fb3c:	08024d0b 	.word	0x08024d0b

0801fb40 <asin>:
 801fb40:	b538      	push	{r3, r4, r5, lr}
 801fb42:	ed2d 8b02 	vpush	{d8}
 801fb46:	ec55 4b10 	vmov	r4, r5, d0
 801fb4a:	f001 f90d 	bl	8020d68 <__ieee754_asin>
 801fb4e:	4622      	mov	r2, r4
 801fb50:	462b      	mov	r3, r5
 801fb52:	4620      	mov	r0, r4
 801fb54:	4629      	mov	r1, r5
 801fb56:	eeb0 8a40 	vmov.f32	s16, s0
 801fb5a:	eef0 8a60 	vmov.f32	s17, s1
 801fb5e:	f7e0 fff5 	bl	8000b4c <__aeabi_dcmpun>
 801fb62:	b9a8      	cbnz	r0, 801fb90 <asin+0x50>
 801fb64:	ec45 4b10 	vmov	d0, r4, r5
 801fb68:	f000 fb62 	bl	8020230 <fabs>
 801fb6c:	4b0c      	ldr	r3, [pc, #48]	@ (801fba0 <asin+0x60>)
 801fb6e:	ec51 0b10 	vmov	r0, r1, d0
 801fb72:	2200      	movs	r2, #0
 801fb74:	f7e0 ffe0 	bl	8000b38 <__aeabi_dcmpgt>
 801fb78:	b150      	cbz	r0, 801fb90 <asin+0x50>
 801fb7a:	f7fc fe95 	bl	801c8a8 <__errno>
 801fb7e:	ecbd 8b02 	vpop	{d8}
 801fb82:	2321      	movs	r3, #33	@ 0x21
 801fb84:	6003      	str	r3, [r0, #0]
 801fb86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb8a:	4806      	ldr	r0, [pc, #24]	@ (801fba4 <asin+0x64>)
 801fb8c:	f7fc bed4 	b.w	801c938 <nan>
 801fb90:	eeb0 0a48 	vmov.f32	s0, s16
 801fb94:	eef0 0a68 	vmov.f32	s1, s17
 801fb98:	ecbd 8b02 	vpop	{d8}
 801fb9c:	bd38      	pop	{r3, r4, r5, pc}
 801fb9e:	bf00      	nop
 801fba0:	3ff00000 	.word	0x3ff00000
 801fba4:	08024d0b 	.word	0x08024d0b

0801fba8 <atan2>:
 801fba8:	f001 bae2 	b.w	8021170 <__ieee754_atan2>
 801fbac:	0000      	movs	r0, r0
	...

0801fbb0 <exp>:
 801fbb0:	b538      	push	{r3, r4, r5, lr}
 801fbb2:	ed2d 8b02 	vpush	{d8}
 801fbb6:	ec55 4b10 	vmov	r4, r5, d0
 801fbba:	f001 fba1 	bl	8021300 <__ieee754_exp>
 801fbbe:	eeb0 8a40 	vmov.f32	s16, s0
 801fbc2:	eef0 8a60 	vmov.f32	s17, s1
 801fbc6:	ec45 4b10 	vmov	d0, r4, r5
 801fbca:	f000 fb8d 	bl	80202e8 <finite>
 801fbce:	b168      	cbz	r0, 801fbec <exp+0x3c>
 801fbd0:	a317      	add	r3, pc, #92	@ (adr r3, 801fc30 <exp+0x80>)
 801fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbd6:	4620      	mov	r0, r4
 801fbd8:	4629      	mov	r1, r5
 801fbda:	f7e0 ffad 	bl	8000b38 <__aeabi_dcmpgt>
 801fbde:	b160      	cbz	r0, 801fbfa <exp+0x4a>
 801fbe0:	f7fc fe62 	bl	801c8a8 <__errno>
 801fbe4:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 801fc20 <exp+0x70>
 801fbe8:	2322      	movs	r3, #34	@ 0x22
 801fbea:	6003      	str	r3, [r0, #0]
 801fbec:	eeb0 0a48 	vmov.f32	s0, s16
 801fbf0:	eef0 0a68 	vmov.f32	s1, s17
 801fbf4:	ecbd 8b02 	vpop	{d8}
 801fbf8:	bd38      	pop	{r3, r4, r5, pc}
 801fbfa:	a30f      	add	r3, pc, #60	@ (adr r3, 801fc38 <exp+0x88>)
 801fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc00:	4620      	mov	r0, r4
 801fc02:	4629      	mov	r1, r5
 801fc04:	f7e0 ff7a 	bl	8000afc <__aeabi_dcmplt>
 801fc08:	2800      	cmp	r0, #0
 801fc0a:	d0ef      	beq.n	801fbec <exp+0x3c>
 801fc0c:	f7fc fe4c 	bl	801c8a8 <__errno>
 801fc10:	2322      	movs	r3, #34	@ 0x22
 801fc12:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 801fc28 <exp+0x78>
 801fc16:	6003      	str	r3, [r0, #0]
 801fc18:	e7e8      	b.n	801fbec <exp+0x3c>
 801fc1a:	bf00      	nop
 801fc1c:	f3af 8000 	nop.w
 801fc20:	00000000 	.word	0x00000000
 801fc24:	7ff00000 	.word	0x7ff00000
	...
 801fc30:	fefa39ef 	.word	0xfefa39ef
 801fc34:	40862e42 	.word	0x40862e42
 801fc38:	d52d3051 	.word	0xd52d3051
 801fc3c:	c0874910 	.word	0xc0874910

0801fc40 <fmod>:
 801fc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc42:	ed2d 8b02 	vpush	{d8}
 801fc46:	ec57 6b10 	vmov	r6, r7, d0
 801fc4a:	ec55 4b11 	vmov	r4, r5, d1
 801fc4e:	f001 fcd1 	bl	80215f4 <__ieee754_fmod>
 801fc52:	4622      	mov	r2, r4
 801fc54:	462b      	mov	r3, r5
 801fc56:	4630      	mov	r0, r6
 801fc58:	4639      	mov	r1, r7
 801fc5a:	eeb0 8a40 	vmov.f32	s16, s0
 801fc5e:	eef0 8a60 	vmov.f32	s17, s1
 801fc62:	f7e0 ff73 	bl	8000b4c <__aeabi_dcmpun>
 801fc66:	b990      	cbnz	r0, 801fc8e <fmod+0x4e>
 801fc68:	2200      	movs	r2, #0
 801fc6a:	2300      	movs	r3, #0
 801fc6c:	4620      	mov	r0, r4
 801fc6e:	4629      	mov	r1, r5
 801fc70:	f7e0 ff3a 	bl	8000ae8 <__aeabi_dcmpeq>
 801fc74:	b158      	cbz	r0, 801fc8e <fmod+0x4e>
 801fc76:	f7fc fe17 	bl	801c8a8 <__errno>
 801fc7a:	2321      	movs	r3, #33	@ 0x21
 801fc7c:	6003      	str	r3, [r0, #0]
 801fc7e:	2200      	movs	r2, #0
 801fc80:	2300      	movs	r3, #0
 801fc82:	4610      	mov	r0, r2
 801fc84:	4619      	mov	r1, r3
 801fc86:	f7e0 fdf1 	bl	800086c <__aeabi_ddiv>
 801fc8a:	ec41 0b18 	vmov	d8, r0, r1
 801fc8e:	eeb0 0a48 	vmov.f32	s0, s16
 801fc92:	eef0 0a68 	vmov.f32	s1, s17
 801fc96:	ecbd 8b02 	vpop	{d8}
 801fc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc9c:	0000      	movs	r0, r0
	...

0801fca0 <log>:
 801fca0:	b538      	push	{r3, r4, r5, lr}
 801fca2:	ed2d 8b02 	vpush	{d8}
 801fca6:	ec55 4b10 	vmov	r4, r5, d0
 801fcaa:	f001 fdad 	bl	8021808 <__ieee754_log>
 801fcae:	4622      	mov	r2, r4
 801fcb0:	462b      	mov	r3, r5
 801fcb2:	4620      	mov	r0, r4
 801fcb4:	4629      	mov	r1, r5
 801fcb6:	eeb0 8a40 	vmov.f32	s16, s0
 801fcba:	eef0 8a60 	vmov.f32	s17, s1
 801fcbe:	f7e0 ff45 	bl	8000b4c <__aeabi_dcmpun>
 801fcc2:	b998      	cbnz	r0, 801fcec <log+0x4c>
 801fcc4:	2200      	movs	r2, #0
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	4620      	mov	r0, r4
 801fcca:	4629      	mov	r1, r5
 801fccc:	f7e0 ff34 	bl	8000b38 <__aeabi_dcmpgt>
 801fcd0:	b960      	cbnz	r0, 801fcec <log+0x4c>
 801fcd2:	2200      	movs	r2, #0
 801fcd4:	2300      	movs	r3, #0
 801fcd6:	4620      	mov	r0, r4
 801fcd8:	4629      	mov	r1, r5
 801fcda:	f7e0 ff05 	bl	8000ae8 <__aeabi_dcmpeq>
 801fcde:	b160      	cbz	r0, 801fcfa <log+0x5a>
 801fce0:	f7fc fde2 	bl	801c8a8 <__errno>
 801fce4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 801fd10 <log+0x70>
 801fce8:	2322      	movs	r3, #34	@ 0x22
 801fcea:	6003      	str	r3, [r0, #0]
 801fcec:	eeb0 0a48 	vmov.f32	s0, s16
 801fcf0:	eef0 0a68 	vmov.f32	s1, s17
 801fcf4:	ecbd 8b02 	vpop	{d8}
 801fcf8:	bd38      	pop	{r3, r4, r5, pc}
 801fcfa:	f7fc fdd5 	bl	801c8a8 <__errno>
 801fcfe:	ecbd 8b02 	vpop	{d8}
 801fd02:	2321      	movs	r3, #33	@ 0x21
 801fd04:	6003      	str	r3, [r0, #0]
 801fd06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd0a:	4803      	ldr	r0, [pc, #12]	@ (801fd18 <log+0x78>)
 801fd0c:	f7fc be14 	b.w	801c938 <nan>
 801fd10:	00000000 	.word	0x00000000
 801fd14:	fff00000 	.word	0xfff00000
 801fd18:	08024d0b 	.word	0x08024d0b

0801fd1c <pow>:
 801fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd1e:	ed2d 8b02 	vpush	{d8}
 801fd22:	eeb0 8a40 	vmov.f32	s16, s0
 801fd26:	eef0 8a60 	vmov.f32	s17, s1
 801fd2a:	ec55 4b11 	vmov	r4, r5, d1
 801fd2e:	f001 ff23 	bl	8021b78 <__ieee754_pow>
 801fd32:	4622      	mov	r2, r4
 801fd34:	462b      	mov	r3, r5
 801fd36:	4620      	mov	r0, r4
 801fd38:	4629      	mov	r1, r5
 801fd3a:	ec57 6b10 	vmov	r6, r7, d0
 801fd3e:	f7e0 ff05 	bl	8000b4c <__aeabi_dcmpun>
 801fd42:	2800      	cmp	r0, #0
 801fd44:	d13b      	bne.n	801fdbe <pow+0xa2>
 801fd46:	ec51 0b18 	vmov	r0, r1, d8
 801fd4a:	2200      	movs	r2, #0
 801fd4c:	2300      	movs	r3, #0
 801fd4e:	f7e0 fecb 	bl	8000ae8 <__aeabi_dcmpeq>
 801fd52:	b1b8      	cbz	r0, 801fd84 <pow+0x68>
 801fd54:	2200      	movs	r2, #0
 801fd56:	2300      	movs	r3, #0
 801fd58:	4620      	mov	r0, r4
 801fd5a:	4629      	mov	r1, r5
 801fd5c:	f7e0 fec4 	bl	8000ae8 <__aeabi_dcmpeq>
 801fd60:	2800      	cmp	r0, #0
 801fd62:	d146      	bne.n	801fdf2 <pow+0xd6>
 801fd64:	ec45 4b10 	vmov	d0, r4, r5
 801fd68:	f000 fabe 	bl	80202e8 <finite>
 801fd6c:	b338      	cbz	r0, 801fdbe <pow+0xa2>
 801fd6e:	2200      	movs	r2, #0
 801fd70:	2300      	movs	r3, #0
 801fd72:	4620      	mov	r0, r4
 801fd74:	4629      	mov	r1, r5
 801fd76:	f7e0 fec1 	bl	8000afc <__aeabi_dcmplt>
 801fd7a:	b300      	cbz	r0, 801fdbe <pow+0xa2>
 801fd7c:	f7fc fd94 	bl	801c8a8 <__errno>
 801fd80:	2322      	movs	r3, #34	@ 0x22
 801fd82:	e01b      	b.n	801fdbc <pow+0xa0>
 801fd84:	ec47 6b10 	vmov	d0, r6, r7
 801fd88:	f000 faae 	bl	80202e8 <finite>
 801fd8c:	b9e0      	cbnz	r0, 801fdc8 <pow+0xac>
 801fd8e:	eeb0 0a48 	vmov.f32	s0, s16
 801fd92:	eef0 0a68 	vmov.f32	s1, s17
 801fd96:	f000 faa7 	bl	80202e8 <finite>
 801fd9a:	b1a8      	cbz	r0, 801fdc8 <pow+0xac>
 801fd9c:	ec45 4b10 	vmov	d0, r4, r5
 801fda0:	f000 faa2 	bl	80202e8 <finite>
 801fda4:	b180      	cbz	r0, 801fdc8 <pow+0xac>
 801fda6:	4632      	mov	r2, r6
 801fda8:	463b      	mov	r3, r7
 801fdaa:	4630      	mov	r0, r6
 801fdac:	4639      	mov	r1, r7
 801fdae:	f7e0 fecd 	bl	8000b4c <__aeabi_dcmpun>
 801fdb2:	2800      	cmp	r0, #0
 801fdb4:	d0e2      	beq.n	801fd7c <pow+0x60>
 801fdb6:	f7fc fd77 	bl	801c8a8 <__errno>
 801fdba:	2321      	movs	r3, #33	@ 0x21
 801fdbc:	6003      	str	r3, [r0, #0]
 801fdbe:	ecbd 8b02 	vpop	{d8}
 801fdc2:	ec47 6b10 	vmov	d0, r6, r7
 801fdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fdc8:	2200      	movs	r2, #0
 801fdca:	2300      	movs	r3, #0
 801fdcc:	4630      	mov	r0, r6
 801fdce:	4639      	mov	r1, r7
 801fdd0:	f7e0 fe8a 	bl	8000ae8 <__aeabi_dcmpeq>
 801fdd4:	2800      	cmp	r0, #0
 801fdd6:	d0f2      	beq.n	801fdbe <pow+0xa2>
 801fdd8:	eeb0 0a48 	vmov.f32	s0, s16
 801fddc:	eef0 0a68 	vmov.f32	s1, s17
 801fde0:	f000 fa82 	bl	80202e8 <finite>
 801fde4:	2800      	cmp	r0, #0
 801fde6:	d0ea      	beq.n	801fdbe <pow+0xa2>
 801fde8:	ec45 4b10 	vmov	d0, r4, r5
 801fdec:	f000 fa7c 	bl	80202e8 <finite>
 801fdf0:	e7c3      	b.n	801fd7a <pow+0x5e>
 801fdf2:	4f01      	ldr	r7, [pc, #4]	@ (801fdf8 <pow+0xdc>)
 801fdf4:	2600      	movs	r6, #0
 801fdf6:	e7e2      	b.n	801fdbe <pow+0xa2>
 801fdf8:	3ff00000 	.word	0x3ff00000

0801fdfc <sqrt>:
 801fdfc:	b538      	push	{r3, r4, r5, lr}
 801fdfe:	ed2d 8b02 	vpush	{d8}
 801fe02:	ec55 4b10 	vmov	r4, r5, d0
 801fe06:	f000 fa7b 	bl	8020300 <__ieee754_sqrt>
 801fe0a:	4622      	mov	r2, r4
 801fe0c:	462b      	mov	r3, r5
 801fe0e:	4620      	mov	r0, r4
 801fe10:	4629      	mov	r1, r5
 801fe12:	eeb0 8a40 	vmov.f32	s16, s0
 801fe16:	eef0 8a60 	vmov.f32	s17, s1
 801fe1a:	f7e0 fe97 	bl	8000b4c <__aeabi_dcmpun>
 801fe1e:	b990      	cbnz	r0, 801fe46 <sqrt+0x4a>
 801fe20:	2200      	movs	r2, #0
 801fe22:	2300      	movs	r3, #0
 801fe24:	4620      	mov	r0, r4
 801fe26:	4629      	mov	r1, r5
 801fe28:	f7e0 fe68 	bl	8000afc <__aeabi_dcmplt>
 801fe2c:	b158      	cbz	r0, 801fe46 <sqrt+0x4a>
 801fe2e:	f7fc fd3b 	bl	801c8a8 <__errno>
 801fe32:	2321      	movs	r3, #33	@ 0x21
 801fe34:	6003      	str	r3, [r0, #0]
 801fe36:	2200      	movs	r2, #0
 801fe38:	2300      	movs	r3, #0
 801fe3a:	4610      	mov	r0, r2
 801fe3c:	4619      	mov	r1, r3
 801fe3e:	f7e0 fd15 	bl	800086c <__aeabi_ddiv>
 801fe42:	ec41 0b18 	vmov	d8, r0, r1
 801fe46:	eeb0 0a48 	vmov.f32	s0, s16
 801fe4a:	eef0 0a68 	vmov.f32	s1, s17
 801fe4e:	ecbd 8b02 	vpop	{d8}
 801fe52:	bd38      	pop	{r3, r4, r5, pc}
 801fe54:	0000      	movs	r0, r0
	...

0801fe58 <atan>:
 801fe58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe5c:	ec55 4b10 	vmov	r4, r5, d0
 801fe60:	4bbf      	ldr	r3, [pc, #764]	@ (8020160 <atan+0x308>)
 801fe62:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801fe66:	429e      	cmp	r6, r3
 801fe68:	46ab      	mov	fp, r5
 801fe6a:	d918      	bls.n	801fe9e <atan+0x46>
 801fe6c:	4bbd      	ldr	r3, [pc, #756]	@ (8020164 <atan+0x30c>)
 801fe6e:	429e      	cmp	r6, r3
 801fe70:	d801      	bhi.n	801fe76 <atan+0x1e>
 801fe72:	d109      	bne.n	801fe88 <atan+0x30>
 801fe74:	b144      	cbz	r4, 801fe88 <atan+0x30>
 801fe76:	4622      	mov	r2, r4
 801fe78:	462b      	mov	r3, r5
 801fe7a:	4620      	mov	r0, r4
 801fe7c:	4629      	mov	r1, r5
 801fe7e:	f7e0 fa15 	bl	80002ac <__adddf3>
 801fe82:	4604      	mov	r4, r0
 801fe84:	460d      	mov	r5, r1
 801fe86:	e006      	b.n	801fe96 <atan+0x3e>
 801fe88:	f1bb 0f00 	cmp.w	fp, #0
 801fe8c:	f340 812b 	ble.w	80200e6 <atan+0x28e>
 801fe90:	a597      	add	r5, pc, #604	@ (adr r5, 80200f0 <atan+0x298>)
 801fe92:	e9d5 4500 	ldrd	r4, r5, [r5]
 801fe96:	ec45 4b10 	vmov	d0, r4, r5
 801fe9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe9e:	4bb2      	ldr	r3, [pc, #712]	@ (8020168 <atan+0x310>)
 801fea0:	429e      	cmp	r6, r3
 801fea2:	d813      	bhi.n	801fecc <atan+0x74>
 801fea4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801fea8:	429e      	cmp	r6, r3
 801feaa:	d80c      	bhi.n	801fec6 <atan+0x6e>
 801feac:	a392      	add	r3, pc, #584	@ (adr r3, 80200f8 <atan+0x2a0>)
 801feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feb2:	4620      	mov	r0, r4
 801feb4:	4629      	mov	r1, r5
 801feb6:	f7e0 f9f9 	bl	80002ac <__adddf3>
 801feba:	4bac      	ldr	r3, [pc, #688]	@ (802016c <atan+0x314>)
 801febc:	2200      	movs	r2, #0
 801febe:	f7e0 fe3b 	bl	8000b38 <__aeabi_dcmpgt>
 801fec2:	2800      	cmp	r0, #0
 801fec4:	d1e7      	bne.n	801fe96 <atan+0x3e>
 801fec6:	f04f 3aff 	mov.w	sl, #4294967295
 801feca:	e029      	b.n	801ff20 <atan+0xc8>
 801fecc:	f000 f9b0 	bl	8020230 <fabs>
 801fed0:	4ba7      	ldr	r3, [pc, #668]	@ (8020170 <atan+0x318>)
 801fed2:	429e      	cmp	r6, r3
 801fed4:	ec55 4b10 	vmov	r4, r5, d0
 801fed8:	f200 80bc 	bhi.w	8020054 <atan+0x1fc>
 801fedc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801fee0:	429e      	cmp	r6, r3
 801fee2:	f200 809e 	bhi.w	8020022 <atan+0x1ca>
 801fee6:	4622      	mov	r2, r4
 801fee8:	462b      	mov	r3, r5
 801feea:	4620      	mov	r0, r4
 801feec:	4629      	mov	r1, r5
 801feee:	f7e0 f9dd 	bl	80002ac <__adddf3>
 801fef2:	4b9e      	ldr	r3, [pc, #632]	@ (802016c <atan+0x314>)
 801fef4:	2200      	movs	r2, #0
 801fef6:	f7e0 f9d7 	bl	80002a8 <__aeabi_dsub>
 801fefa:	2200      	movs	r2, #0
 801fefc:	4606      	mov	r6, r0
 801fefe:	460f      	mov	r7, r1
 801ff00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ff04:	4620      	mov	r0, r4
 801ff06:	4629      	mov	r1, r5
 801ff08:	f7e0 f9d0 	bl	80002ac <__adddf3>
 801ff0c:	4602      	mov	r2, r0
 801ff0e:	460b      	mov	r3, r1
 801ff10:	4630      	mov	r0, r6
 801ff12:	4639      	mov	r1, r7
 801ff14:	f7e0 fcaa 	bl	800086c <__aeabi_ddiv>
 801ff18:	f04f 0a00 	mov.w	sl, #0
 801ff1c:	4604      	mov	r4, r0
 801ff1e:	460d      	mov	r5, r1
 801ff20:	4622      	mov	r2, r4
 801ff22:	462b      	mov	r3, r5
 801ff24:	4620      	mov	r0, r4
 801ff26:	4629      	mov	r1, r5
 801ff28:	f7e0 fb76 	bl	8000618 <__aeabi_dmul>
 801ff2c:	4602      	mov	r2, r0
 801ff2e:	460b      	mov	r3, r1
 801ff30:	4680      	mov	r8, r0
 801ff32:	4689      	mov	r9, r1
 801ff34:	f7e0 fb70 	bl	8000618 <__aeabi_dmul>
 801ff38:	a371      	add	r3, pc, #452	@ (adr r3, 8020100 <atan+0x2a8>)
 801ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff3e:	4606      	mov	r6, r0
 801ff40:	460f      	mov	r7, r1
 801ff42:	f7e0 fb69 	bl	8000618 <__aeabi_dmul>
 801ff46:	a370      	add	r3, pc, #448	@ (adr r3, 8020108 <atan+0x2b0>)
 801ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff4c:	f7e0 f9ae 	bl	80002ac <__adddf3>
 801ff50:	4632      	mov	r2, r6
 801ff52:	463b      	mov	r3, r7
 801ff54:	f7e0 fb60 	bl	8000618 <__aeabi_dmul>
 801ff58:	a36d      	add	r3, pc, #436	@ (adr r3, 8020110 <atan+0x2b8>)
 801ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff5e:	f7e0 f9a5 	bl	80002ac <__adddf3>
 801ff62:	4632      	mov	r2, r6
 801ff64:	463b      	mov	r3, r7
 801ff66:	f7e0 fb57 	bl	8000618 <__aeabi_dmul>
 801ff6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8020118 <atan+0x2c0>)
 801ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff70:	f7e0 f99c 	bl	80002ac <__adddf3>
 801ff74:	4632      	mov	r2, r6
 801ff76:	463b      	mov	r3, r7
 801ff78:	f7e0 fb4e 	bl	8000618 <__aeabi_dmul>
 801ff7c:	a368      	add	r3, pc, #416	@ (adr r3, 8020120 <atan+0x2c8>)
 801ff7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff82:	f7e0 f993 	bl	80002ac <__adddf3>
 801ff86:	4632      	mov	r2, r6
 801ff88:	463b      	mov	r3, r7
 801ff8a:	f7e0 fb45 	bl	8000618 <__aeabi_dmul>
 801ff8e:	a366      	add	r3, pc, #408	@ (adr r3, 8020128 <atan+0x2d0>)
 801ff90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff94:	f7e0 f98a 	bl	80002ac <__adddf3>
 801ff98:	4642      	mov	r2, r8
 801ff9a:	464b      	mov	r3, r9
 801ff9c:	f7e0 fb3c 	bl	8000618 <__aeabi_dmul>
 801ffa0:	a363      	add	r3, pc, #396	@ (adr r3, 8020130 <atan+0x2d8>)
 801ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffa6:	4680      	mov	r8, r0
 801ffa8:	4689      	mov	r9, r1
 801ffaa:	4630      	mov	r0, r6
 801ffac:	4639      	mov	r1, r7
 801ffae:	f7e0 fb33 	bl	8000618 <__aeabi_dmul>
 801ffb2:	a361      	add	r3, pc, #388	@ (adr r3, 8020138 <atan+0x2e0>)
 801ffb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffb8:	f7e0 f976 	bl	80002a8 <__aeabi_dsub>
 801ffbc:	4632      	mov	r2, r6
 801ffbe:	463b      	mov	r3, r7
 801ffc0:	f7e0 fb2a 	bl	8000618 <__aeabi_dmul>
 801ffc4:	a35e      	add	r3, pc, #376	@ (adr r3, 8020140 <atan+0x2e8>)
 801ffc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffca:	f7e0 f96d 	bl	80002a8 <__aeabi_dsub>
 801ffce:	4632      	mov	r2, r6
 801ffd0:	463b      	mov	r3, r7
 801ffd2:	f7e0 fb21 	bl	8000618 <__aeabi_dmul>
 801ffd6:	a35c      	add	r3, pc, #368	@ (adr r3, 8020148 <atan+0x2f0>)
 801ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffdc:	f7e0 f964 	bl	80002a8 <__aeabi_dsub>
 801ffe0:	4632      	mov	r2, r6
 801ffe2:	463b      	mov	r3, r7
 801ffe4:	f7e0 fb18 	bl	8000618 <__aeabi_dmul>
 801ffe8:	a359      	add	r3, pc, #356	@ (adr r3, 8020150 <atan+0x2f8>)
 801ffea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffee:	f7e0 f95b 	bl	80002a8 <__aeabi_dsub>
 801fff2:	4632      	mov	r2, r6
 801fff4:	463b      	mov	r3, r7
 801fff6:	f7e0 fb0f 	bl	8000618 <__aeabi_dmul>
 801fffa:	4602      	mov	r2, r0
 801fffc:	460b      	mov	r3, r1
 801fffe:	4640      	mov	r0, r8
 8020000:	4649      	mov	r1, r9
 8020002:	f7e0 f953 	bl	80002ac <__adddf3>
 8020006:	4622      	mov	r2, r4
 8020008:	462b      	mov	r3, r5
 802000a:	f7e0 fb05 	bl	8000618 <__aeabi_dmul>
 802000e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8020012:	4602      	mov	r2, r0
 8020014:	460b      	mov	r3, r1
 8020016:	d148      	bne.n	80200aa <atan+0x252>
 8020018:	4620      	mov	r0, r4
 802001a:	4629      	mov	r1, r5
 802001c:	f7e0 f944 	bl	80002a8 <__aeabi_dsub>
 8020020:	e72f      	b.n	801fe82 <atan+0x2a>
 8020022:	4b52      	ldr	r3, [pc, #328]	@ (802016c <atan+0x314>)
 8020024:	2200      	movs	r2, #0
 8020026:	4620      	mov	r0, r4
 8020028:	4629      	mov	r1, r5
 802002a:	f7e0 f93d 	bl	80002a8 <__aeabi_dsub>
 802002e:	4b4f      	ldr	r3, [pc, #316]	@ (802016c <atan+0x314>)
 8020030:	4606      	mov	r6, r0
 8020032:	460f      	mov	r7, r1
 8020034:	2200      	movs	r2, #0
 8020036:	4620      	mov	r0, r4
 8020038:	4629      	mov	r1, r5
 802003a:	f7e0 f937 	bl	80002ac <__adddf3>
 802003e:	4602      	mov	r2, r0
 8020040:	460b      	mov	r3, r1
 8020042:	4630      	mov	r0, r6
 8020044:	4639      	mov	r1, r7
 8020046:	f7e0 fc11 	bl	800086c <__aeabi_ddiv>
 802004a:	f04f 0a01 	mov.w	sl, #1
 802004e:	4604      	mov	r4, r0
 8020050:	460d      	mov	r5, r1
 8020052:	e765      	b.n	801ff20 <atan+0xc8>
 8020054:	4b47      	ldr	r3, [pc, #284]	@ (8020174 <atan+0x31c>)
 8020056:	429e      	cmp	r6, r3
 8020058:	d21c      	bcs.n	8020094 <atan+0x23c>
 802005a:	4b47      	ldr	r3, [pc, #284]	@ (8020178 <atan+0x320>)
 802005c:	2200      	movs	r2, #0
 802005e:	4620      	mov	r0, r4
 8020060:	4629      	mov	r1, r5
 8020062:	f7e0 f921 	bl	80002a8 <__aeabi_dsub>
 8020066:	4b44      	ldr	r3, [pc, #272]	@ (8020178 <atan+0x320>)
 8020068:	4606      	mov	r6, r0
 802006a:	460f      	mov	r7, r1
 802006c:	2200      	movs	r2, #0
 802006e:	4620      	mov	r0, r4
 8020070:	4629      	mov	r1, r5
 8020072:	f7e0 fad1 	bl	8000618 <__aeabi_dmul>
 8020076:	4b3d      	ldr	r3, [pc, #244]	@ (802016c <atan+0x314>)
 8020078:	2200      	movs	r2, #0
 802007a:	f7e0 f917 	bl	80002ac <__adddf3>
 802007e:	4602      	mov	r2, r0
 8020080:	460b      	mov	r3, r1
 8020082:	4630      	mov	r0, r6
 8020084:	4639      	mov	r1, r7
 8020086:	f7e0 fbf1 	bl	800086c <__aeabi_ddiv>
 802008a:	f04f 0a02 	mov.w	sl, #2
 802008e:	4604      	mov	r4, r0
 8020090:	460d      	mov	r5, r1
 8020092:	e745      	b.n	801ff20 <atan+0xc8>
 8020094:	4622      	mov	r2, r4
 8020096:	462b      	mov	r3, r5
 8020098:	4938      	ldr	r1, [pc, #224]	@ (802017c <atan+0x324>)
 802009a:	2000      	movs	r0, #0
 802009c:	f7e0 fbe6 	bl	800086c <__aeabi_ddiv>
 80200a0:	f04f 0a03 	mov.w	sl, #3
 80200a4:	4604      	mov	r4, r0
 80200a6:	460d      	mov	r5, r1
 80200a8:	e73a      	b.n	801ff20 <atan+0xc8>
 80200aa:	4b35      	ldr	r3, [pc, #212]	@ (8020180 <atan+0x328>)
 80200ac:	4e35      	ldr	r6, [pc, #212]	@ (8020184 <atan+0x32c>)
 80200ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80200b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200b6:	f7e0 f8f7 	bl	80002a8 <__aeabi_dsub>
 80200ba:	4622      	mov	r2, r4
 80200bc:	462b      	mov	r3, r5
 80200be:	f7e0 f8f3 	bl	80002a8 <__aeabi_dsub>
 80200c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80200c6:	4602      	mov	r2, r0
 80200c8:	460b      	mov	r3, r1
 80200ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 80200ce:	f7e0 f8eb 	bl	80002a8 <__aeabi_dsub>
 80200d2:	f1bb 0f00 	cmp.w	fp, #0
 80200d6:	4604      	mov	r4, r0
 80200d8:	460d      	mov	r5, r1
 80200da:	f6bf aedc 	bge.w	801fe96 <atan+0x3e>
 80200de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80200e2:	461d      	mov	r5, r3
 80200e4:	e6d7      	b.n	801fe96 <atan+0x3e>
 80200e6:	a51c      	add	r5, pc, #112	@ (adr r5, 8020158 <atan+0x300>)
 80200e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80200ec:	e6d3      	b.n	801fe96 <atan+0x3e>
 80200ee:	bf00      	nop
 80200f0:	54442d18 	.word	0x54442d18
 80200f4:	3ff921fb 	.word	0x3ff921fb
 80200f8:	8800759c 	.word	0x8800759c
 80200fc:	7e37e43c 	.word	0x7e37e43c
 8020100:	e322da11 	.word	0xe322da11
 8020104:	3f90ad3a 	.word	0x3f90ad3a
 8020108:	24760deb 	.word	0x24760deb
 802010c:	3fa97b4b 	.word	0x3fa97b4b
 8020110:	a0d03d51 	.word	0xa0d03d51
 8020114:	3fb10d66 	.word	0x3fb10d66
 8020118:	c54c206e 	.word	0xc54c206e
 802011c:	3fb745cd 	.word	0x3fb745cd
 8020120:	920083ff 	.word	0x920083ff
 8020124:	3fc24924 	.word	0x3fc24924
 8020128:	5555550d 	.word	0x5555550d
 802012c:	3fd55555 	.word	0x3fd55555
 8020130:	2c6a6c2f 	.word	0x2c6a6c2f
 8020134:	bfa2b444 	.word	0xbfa2b444
 8020138:	52defd9a 	.word	0x52defd9a
 802013c:	3fadde2d 	.word	0x3fadde2d
 8020140:	af749a6d 	.word	0xaf749a6d
 8020144:	3fb3b0f2 	.word	0x3fb3b0f2
 8020148:	fe231671 	.word	0xfe231671
 802014c:	3fbc71c6 	.word	0x3fbc71c6
 8020150:	9998ebc4 	.word	0x9998ebc4
 8020154:	3fc99999 	.word	0x3fc99999
 8020158:	54442d18 	.word	0x54442d18
 802015c:	bff921fb 	.word	0xbff921fb
 8020160:	440fffff 	.word	0x440fffff
 8020164:	7ff00000 	.word	0x7ff00000
 8020168:	3fdbffff 	.word	0x3fdbffff
 802016c:	3ff00000 	.word	0x3ff00000
 8020170:	3ff2ffff 	.word	0x3ff2ffff
 8020174:	40038000 	.word	0x40038000
 8020178:	3ff80000 	.word	0x3ff80000
 802017c:	bff00000 	.word	0xbff00000
 8020180:	08025178 	.word	0x08025178
 8020184:	08025198 	.word	0x08025198

08020188 <cos>:
 8020188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802018a:	ec53 2b10 	vmov	r2, r3, d0
 802018e:	4826      	ldr	r0, [pc, #152]	@ (8020228 <cos+0xa0>)
 8020190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8020194:	4281      	cmp	r1, r0
 8020196:	d806      	bhi.n	80201a6 <cos+0x1e>
 8020198:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8020220 <cos+0x98>
 802019c:	b005      	add	sp, #20
 802019e:	f85d eb04 	ldr.w	lr, [sp], #4
 80201a2:	f000 ba01 	b.w	80205a8 <__kernel_cos>
 80201a6:	4821      	ldr	r0, [pc, #132]	@ (802022c <cos+0xa4>)
 80201a8:	4281      	cmp	r1, r0
 80201aa:	d908      	bls.n	80201be <cos+0x36>
 80201ac:	4610      	mov	r0, r2
 80201ae:	4619      	mov	r1, r3
 80201b0:	f7e0 f87a 	bl	80002a8 <__aeabi_dsub>
 80201b4:	ec41 0b10 	vmov	d0, r0, r1
 80201b8:	b005      	add	sp, #20
 80201ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80201be:	4668      	mov	r0, sp
 80201c0:	f002 fa26 	bl	8022610 <__ieee754_rem_pio2>
 80201c4:	f000 0003 	and.w	r0, r0, #3
 80201c8:	2801      	cmp	r0, #1
 80201ca:	d00b      	beq.n	80201e4 <cos+0x5c>
 80201cc:	2802      	cmp	r0, #2
 80201ce:	d015      	beq.n	80201fc <cos+0x74>
 80201d0:	b9d8      	cbnz	r0, 802020a <cos+0x82>
 80201d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80201d6:	ed9d 0b00 	vldr	d0, [sp]
 80201da:	f000 f9e5 	bl	80205a8 <__kernel_cos>
 80201de:	ec51 0b10 	vmov	r0, r1, d0
 80201e2:	e7e7      	b.n	80201b4 <cos+0x2c>
 80201e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80201e8:	ed9d 0b00 	vldr	d0, [sp]
 80201ec:	f000 faa4 	bl	8020738 <__kernel_sin>
 80201f0:	ec53 2b10 	vmov	r2, r3, d0
 80201f4:	4610      	mov	r0, r2
 80201f6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80201fa:	e7db      	b.n	80201b4 <cos+0x2c>
 80201fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020200:	ed9d 0b00 	vldr	d0, [sp]
 8020204:	f000 f9d0 	bl	80205a8 <__kernel_cos>
 8020208:	e7f2      	b.n	80201f0 <cos+0x68>
 802020a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802020e:	ed9d 0b00 	vldr	d0, [sp]
 8020212:	2001      	movs	r0, #1
 8020214:	f000 fa90 	bl	8020738 <__kernel_sin>
 8020218:	e7e1      	b.n	80201de <cos+0x56>
 802021a:	bf00      	nop
 802021c:	f3af 8000 	nop.w
	...
 8020228:	3fe921fb 	.word	0x3fe921fb
 802022c:	7fefffff 	.word	0x7fefffff

08020230 <fabs>:
 8020230:	ec51 0b10 	vmov	r0, r1, d0
 8020234:	4602      	mov	r2, r0
 8020236:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802023a:	ec43 2b10 	vmov	d0, r2, r3
 802023e:	4770      	bx	lr

08020240 <sin>:
 8020240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020242:	ec53 2b10 	vmov	r2, r3, d0
 8020246:	4826      	ldr	r0, [pc, #152]	@ (80202e0 <sin+0xa0>)
 8020248:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802024c:	4281      	cmp	r1, r0
 802024e:	d807      	bhi.n	8020260 <sin+0x20>
 8020250:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80202d8 <sin+0x98>
 8020254:	2000      	movs	r0, #0
 8020256:	b005      	add	sp, #20
 8020258:	f85d eb04 	ldr.w	lr, [sp], #4
 802025c:	f000 ba6c 	b.w	8020738 <__kernel_sin>
 8020260:	4820      	ldr	r0, [pc, #128]	@ (80202e4 <sin+0xa4>)
 8020262:	4281      	cmp	r1, r0
 8020264:	d908      	bls.n	8020278 <sin+0x38>
 8020266:	4610      	mov	r0, r2
 8020268:	4619      	mov	r1, r3
 802026a:	f7e0 f81d 	bl	80002a8 <__aeabi_dsub>
 802026e:	ec41 0b10 	vmov	d0, r0, r1
 8020272:	b005      	add	sp, #20
 8020274:	f85d fb04 	ldr.w	pc, [sp], #4
 8020278:	4668      	mov	r0, sp
 802027a:	f002 f9c9 	bl	8022610 <__ieee754_rem_pio2>
 802027e:	f000 0003 	and.w	r0, r0, #3
 8020282:	2801      	cmp	r0, #1
 8020284:	d00c      	beq.n	80202a0 <sin+0x60>
 8020286:	2802      	cmp	r0, #2
 8020288:	d011      	beq.n	80202ae <sin+0x6e>
 802028a:	b9e8      	cbnz	r0, 80202c8 <sin+0x88>
 802028c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020290:	ed9d 0b00 	vldr	d0, [sp]
 8020294:	2001      	movs	r0, #1
 8020296:	f000 fa4f 	bl	8020738 <__kernel_sin>
 802029a:	ec51 0b10 	vmov	r0, r1, d0
 802029e:	e7e6      	b.n	802026e <sin+0x2e>
 80202a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80202a4:	ed9d 0b00 	vldr	d0, [sp]
 80202a8:	f000 f97e 	bl	80205a8 <__kernel_cos>
 80202ac:	e7f5      	b.n	802029a <sin+0x5a>
 80202ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80202b2:	ed9d 0b00 	vldr	d0, [sp]
 80202b6:	2001      	movs	r0, #1
 80202b8:	f000 fa3e 	bl	8020738 <__kernel_sin>
 80202bc:	ec53 2b10 	vmov	r2, r3, d0
 80202c0:	4610      	mov	r0, r2
 80202c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80202c6:	e7d2      	b.n	802026e <sin+0x2e>
 80202c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80202cc:	ed9d 0b00 	vldr	d0, [sp]
 80202d0:	f000 f96a 	bl	80205a8 <__kernel_cos>
 80202d4:	e7f2      	b.n	80202bc <sin+0x7c>
 80202d6:	bf00      	nop
	...
 80202e0:	3fe921fb 	.word	0x3fe921fb
 80202e4:	7fefffff 	.word	0x7fefffff

080202e8 <finite>:
 80202e8:	b082      	sub	sp, #8
 80202ea:	ed8d 0b00 	vstr	d0, [sp]
 80202ee:	9801      	ldr	r0, [sp, #4]
 80202f0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80202f4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80202f8:	0fc0      	lsrs	r0, r0, #31
 80202fa:	b002      	add	sp, #8
 80202fc:	4770      	bx	lr
	...

08020300 <__ieee754_sqrt>:
 8020300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020304:	4a66      	ldr	r2, [pc, #408]	@ (80204a0 <__ieee754_sqrt+0x1a0>)
 8020306:	ec55 4b10 	vmov	r4, r5, d0
 802030a:	43aa      	bics	r2, r5
 802030c:	462b      	mov	r3, r5
 802030e:	4621      	mov	r1, r4
 8020310:	d110      	bne.n	8020334 <__ieee754_sqrt+0x34>
 8020312:	4622      	mov	r2, r4
 8020314:	4620      	mov	r0, r4
 8020316:	4629      	mov	r1, r5
 8020318:	f7e0 f97e 	bl	8000618 <__aeabi_dmul>
 802031c:	4602      	mov	r2, r0
 802031e:	460b      	mov	r3, r1
 8020320:	4620      	mov	r0, r4
 8020322:	4629      	mov	r1, r5
 8020324:	f7df ffc2 	bl	80002ac <__adddf3>
 8020328:	4604      	mov	r4, r0
 802032a:	460d      	mov	r5, r1
 802032c:	ec45 4b10 	vmov	d0, r4, r5
 8020330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020334:	2d00      	cmp	r5, #0
 8020336:	dc0e      	bgt.n	8020356 <__ieee754_sqrt+0x56>
 8020338:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802033c:	4322      	orrs	r2, r4
 802033e:	d0f5      	beq.n	802032c <__ieee754_sqrt+0x2c>
 8020340:	b19d      	cbz	r5, 802036a <__ieee754_sqrt+0x6a>
 8020342:	4622      	mov	r2, r4
 8020344:	4620      	mov	r0, r4
 8020346:	4629      	mov	r1, r5
 8020348:	f7df ffae 	bl	80002a8 <__aeabi_dsub>
 802034c:	4602      	mov	r2, r0
 802034e:	460b      	mov	r3, r1
 8020350:	f7e0 fa8c 	bl	800086c <__aeabi_ddiv>
 8020354:	e7e8      	b.n	8020328 <__ieee754_sqrt+0x28>
 8020356:	152a      	asrs	r2, r5, #20
 8020358:	d115      	bne.n	8020386 <__ieee754_sqrt+0x86>
 802035a:	2000      	movs	r0, #0
 802035c:	e009      	b.n	8020372 <__ieee754_sqrt+0x72>
 802035e:	0acb      	lsrs	r3, r1, #11
 8020360:	3a15      	subs	r2, #21
 8020362:	0549      	lsls	r1, r1, #21
 8020364:	2b00      	cmp	r3, #0
 8020366:	d0fa      	beq.n	802035e <__ieee754_sqrt+0x5e>
 8020368:	e7f7      	b.n	802035a <__ieee754_sqrt+0x5a>
 802036a:	462a      	mov	r2, r5
 802036c:	e7fa      	b.n	8020364 <__ieee754_sqrt+0x64>
 802036e:	005b      	lsls	r3, r3, #1
 8020370:	3001      	adds	r0, #1
 8020372:	02dc      	lsls	r4, r3, #11
 8020374:	d5fb      	bpl.n	802036e <__ieee754_sqrt+0x6e>
 8020376:	1e44      	subs	r4, r0, #1
 8020378:	1b12      	subs	r2, r2, r4
 802037a:	f1c0 0420 	rsb	r4, r0, #32
 802037e:	fa21 f404 	lsr.w	r4, r1, r4
 8020382:	4323      	orrs	r3, r4
 8020384:	4081      	lsls	r1, r0
 8020386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802038a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 802038e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020392:	07d2      	lsls	r2, r2, #31
 8020394:	bf5c      	itt	pl
 8020396:	005b      	lslpl	r3, r3, #1
 8020398:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 802039c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80203a0:	bf58      	it	pl
 80203a2:	0049      	lslpl	r1, r1, #1
 80203a4:	2600      	movs	r6, #0
 80203a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80203aa:	107f      	asrs	r7, r7, #1
 80203ac:	0049      	lsls	r1, r1, #1
 80203ae:	2016      	movs	r0, #22
 80203b0:	4632      	mov	r2, r6
 80203b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80203b6:	1915      	adds	r5, r2, r4
 80203b8:	429d      	cmp	r5, r3
 80203ba:	bfde      	ittt	le
 80203bc:	192a      	addle	r2, r5, r4
 80203be:	1b5b      	suble	r3, r3, r5
 80203c0:	1936      	addle	r6, r6, r4
 80203c2:	0fcd      	lsrs	r5, r1, #31
 80203c4:	3801      	subs	r0, #1
 80203c6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80203ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80203ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80203d2:	d1f0      	bne.n	80203b6 <__ieee754_sqrt+0xb6>
 80203d4:	4605      	mov	r5, r0
 80203d6:	2420      	movs	r4, #32
 80203d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80203dc:	4293      	cmp	r3, r2
 80203de:	eb0c 0e00 	add.w	lr, ip, r0
 80203e2:	dc02      	bgt.n	80203ea <__ieee754_sqrt+0xea>
 80203e4:	d113      	bne.n	802040e <__ieee754_sqrt+0x10e>
 80203e6:	458e      	cmp	lr, r1
 80203e8:	d811      	bhi.n	802040e <__ieee754_sqrt+0x10e>
 80203ea:	f1be 0f00 	cmp.w	lr, #0
 80203ee:	eb0e 000c 	add.w	r0, lr, ip
 80203f2:	da3f      	bge.n	8020474 <__ieee754_sqrt+0x174>
 80203f4:	2800      	cmp	r0, #0
 80203f6:	db3d      	blt.n	8020474 <__ieee754_sqrt+0x174>
 80203f8:	f102 0801 	add.w	r8, r2, #1
 80203fc:	1a9b      	subs	r3, r3, r2
 80203fe:	458e      	cmp	lr, r1
 8020400:	bf88      	it	hi
 8020402:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8020406:	eba1 010e 	sub.w	r1, r1, lr
 802040a:	4465      	add	r5, ip
 802040c:	4642      	mov	r2, r8
 802040e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8020412:	3c01      	subs	r4, #1
 8020414:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8020418:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802041c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8020420:	d1dc      	bne.n	80203dc <__ieee754_sqrt+0xdc>
 8020422:	4319      	orrs	r1, r3
 8020424:	d01b      	beq.n	802045e <__ieee754_sqrt+0x15e>
 8020426:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80204a4 <__ieee754_sqrt+0x1a4>
 802042a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80204a8 <__ieee754_sqrt+0x1a8>
 802042e:	e9da 0100 	ldrd	r0, r1, [sl]
 8020432:	e9db 2300 	ldrd	r2, r3, [fp]
 8020436:	f7df ff37 	bl	80002a8 <__aeabi_dsub>
 802043a:	e9da 8900 	ldrd	r8, r9, [sl]
 802043e:	4602      	mov	r2, r0
 8020440:	460b      	mov	r3, r1
 8020442:	4640      	mov	r0, r8
 8020444:	4649      	mov	r1, r9
 8020446:	f7e0 fb63 	bl	8000b10 <__aeabi_dcmple>
 802044a:	b140      	cbz	r0, 802045e <__ieee754_sqrt+0x15e>
 802044c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8020450:	e9da 0100 	ldrd	r0, r1, [sl]
 8020454:	e9db 2300 	ldrd	r2, r3, [fp]
 8020458:	d10e      	bne.n	8020478 <__ieee754_sqrt+0x178>
 802045a:	3601      	adds	r6, #1
 802045c:	4625      	mov	r5, r4
 802045e:	1073      	asrs	r3, r6, #1
 8020460:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8020464:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8020468:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 802046c:	086b      	lsrs	r3, r5, #1
 802046e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8020472:	e759      	b.n	8020328 <__ieee754_sqrt+0x28>
 8020474:	4690      	mov	r8, r2
 8020476:	e7c1      	b.n	80203fc <__ieee754_sqrt+0xfc>
 8020478:	f7df ff18 	bl	80002ac <__adddf3>
 802047c:	e9da 8900 	ldrd	r8, r9, [sl]
 8020480:	4602      	mov	r2, r0
 8020482:	460b      	mov	r3, r1
 8020484:	4640      	mov	r0, r8
 8020486:	4649      	mov	r1, r9
 8020488:	f7e0 fb38 	bl	8000afc <__aeabi_dcmplt>
 802048c:	b120      	cbz	r0, 8020498 <__ieee754_sqrt+0x198>
 802048e:	1cab      	adds	r3, r5, #2
 8020490:	bf08      	it	eq
 8020492:	3601      	addeq	r6, #1
 8020494:	3502      	adds	r5, #2
 8020496:	e7e2      	b.n	802045e <__ieee754_sqrt+0x15e>
 8020498:	1c6b      	adds	r3, r5, #1
 802049a:	f023 0501 	bic.w	r5, r3, #1
 802049e:	e7de      	b.n	802045e <__ieee754_sqrt+0x15e>
 80204a0:	7ff00000 	.word	0x7ff00000
 80204a4:	080251c0 	.word	0x080251c0
 80204a8:	080251b8 	.word	0x080251b8
 80204ac:	00000000 	.word	0x00000000

080204b0 <floor>:
 80204b0:	ec51 0b10 	vmov	r0, r1, d0
 80204b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80204b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80204c0:	2e13      	cmp	r6, #19
 80204c2:	460c      	mov	r4, r1
 80204c4:	4605      	mov	r5, r0
 80204c6:	4680      	mov	r8, r0
 80204c8:	dc34      	bgt.n	8020534 <floor+0x84>
 80204ca:	2e00      	cmp	r6, #0
 80204cc:	da17      	bge.n	80204fe <floor+0x4e>
 80204ce:	a332      	add	r3, pc, #200	@ (adr r3, 8020598 <floor+0xe8>)
 80204d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204d4:	f7df feea 	bl	80002ac <__adddf3>
 80204d8:	2200      	movs	r2, #0
 80204da:	2300      	movs	r3, #0
 80204dc:	f7e0 fb2c 	bl	8000b38 <__aeabi_dcmpgt>
 80204e0:	b150      	cbz	r0, 80204f8 <floor+0x48>
 80204e2:	2c00      	cmp	r4, #0
 80204e4:	da55      	bge.n	8020592 <floor+0xe2>
 80204e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80204ea:	432c      	orrs	r4, r5
 80204ec:	2500      	movs	r5, #0
 80204ee:	42ac      	cmp	r4, r5
 80204f0:	4c2b      	ldr	r4, [pc, #172]	@ (80205a0 <floor+0xf0>)
 80204f2:	bf08      	it	eq
 80204f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80204f8:	4621      	mov	r1, r4
 80204fa:	4628      	mov	r0, r5
 80204fc:	e023      	b.n	8020546 <floor+0x96>
 80204fe:	4f29      	ldr	r7, [pc, #164]	@ (80205a4 <floor+0xf4>)
 8020500:	4137      	asrs	r7, r6
 8020502:	ea01 0307 	and.w	r3, r1, r7
 8020506:	4303      	orrs	r3, r0
 8020508:	d01d      	beq.n	8020546 <floor+0x96>
 802050a:	a323      	add	r3, pc, #140	@ (adr r3, 8020598 <floor+0xe8>)
 802050c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020510:	f7df fecc 	bl	80002ac <__adddf3>
 8020514:	2200      	movs	r2, #0
 8020516:	2300      	movs	r3, #0
 8020518:	f7e0 fb0e 	bl	8000b38 <__aeabi_dcmpgt>
 802051c:	2800      	cmp	r0, #0
 802051e:	d0eb      	beq.n	80204f8 <floor+0x48>
 8020520:	2c00      	cmp	r4, #0
 8020522:	bfbe      	ittt	lt
 8020524:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8020528:	4133      	asrlt	r3, r6
 802052a:	18e4      	addlt	r4, r4, r3
 802052c:	ea24 0407 	bic.w	r4, r4, r7
 8020530:	2500      	movs	r5, #0
 8020532:	e7e1      	b.n	80204f8 <floor+0x48>
 8020534:	2e33      	cmp	r6, #51	@ 0x33
 8020536:	dd0a      	ble.n	802054e <floor+0x9e>
 8020538:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 802053c:	d103      	bne.n	8020546 <floor+0x96>
 802053e:	4602      	mov	r2, r0
 8020540:	460b      	mov	r3, r1
 8020542:	f7df feb3 	bl	80002ac <__adddf3>
 8020546:	ec41 0b10 	vmov	d0, r0, r1
 802054a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802054e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8020552:	f04f 37ff 	mov.w	r7, #4294967295
 8020556:	40df      	lsrs	r7, r3
 8020558:	4207      	tst	r7, r0
 802055a:	d0f4      	beq.n	8020546 <floor+0x96>
 802055c:	a30e      	add	r3, pc, #56	@ (adr r3, 8020598 <floor+0xe8>)
 802055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020562:	f7df fea3 	bl	80002ac <__adddf3>
 8020566:	2200      	movs	r2, #0
 8020568:	2300      	movs	r3, #0
 802056a:	f7e0 fae5 	bl	8000b38 <__aeabi_dcmpgt>
 802056e:	2800      	cmp	r0, #0
 8020570:	d0c2      	beq.n	80204f8 <floor+0x48>
 8020572:	2c00      	cmp	r4, #0
 8020574:	da0a      	bge.n	802058c <floor+0xdc>
 8020576:	2e14      	cmp	r6, #20
 8020578:	d101      	bne.n	802057e <floor+0xce>
 802057a:	3401      	adds	r4, #1
 802057c:	e006      	b.n	802058c <floor+0xdc>
 802057e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8020582:	2301      	movs	r3, #1
 8020584:	40b3      	lsls	r3, r6
 8020586:	441d      	add	r5, r3
 8020588:	4545      	cmp	r5, r8
 802058a:	d3f6      	bcc.n	802057a <floor+0xca>
 802058c:	ea25 0507 	bic.w	r5, r5, r7
 8020590:	e7b2      	b.n	80204f8 <floor+0x48>
 8020592:	2500      	movs	r5, #0
 8020594:	462c      	mov	r4, r5
 8020596:	e7af      	b.n	80204f8 <floor+0x48>
 8020598:	8800759c 	.word	0x8800759c
 802059c:	7e37e43c 	.word	0x7e37e43c
 80205a0:	bff00000 	.word	0xbff00000
 80205a4:	000fffff 	.word	0x000fffff

080205a8 <__kernel_cos>:
 80205a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205ac:	ec57 6b10 	vmov	r6, r7, d0
 80205b0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80205b4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80205b8:	ed8d 1b00 	vstr	d1, [sp]
 80205bc:	d206      	bcs.n	80205cc <__kernel_cos+0x24>
 80205be:	4630      	mov	r0, r6
 80205c0:	4639      	mov	r1, r7
 80205c2:	f7e0 fad9 	bl	8000b78 <__aeabi_d2iz>
 80205c6:	2800      	cmp	r0, #0
 80205c8:	f000 8088 	beq.w	80206dc <__kernel_cos+0x134>
 80205cc:	4632      	mov	r2, r6
 80205ce:	463b      	mov	r3, r7
 80205d0:	4630      	mov	r0, r6
 80205d2:	4639      	mov	r1, r7
 80205d4:	f7e0 f820 	bl	8000618 <__aeabi_dmul>
 80205d8:	4b51      	ldr	r3, [pc, #324]	@ (8020720 <__kernel_cos+0x178>)
 80205da:	2200      	movs	r2, #0
 80205dc:	4604      	mov	r4, r0
 80205de:	460d      	mov	r5, r1
 80205e0:	f7e0 f81a 	bl	8000618 <__aeabi_dmul>
 80205e4:	a340      	add	r3, pc, #256	@ (adr r3, 80206e8 <__kernel_cos+0x140>)
 80205e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205ea:	4682      	mov	sl, r0
 80205ec:	468b      	mov	fp, r1
 80205ee:	4620      	mov	r0, r4
 80205f0:	4629      	mov	r1, r5
 80205f2:	f7e0 f811 	bl	8000618 <__aeabi_dmul>
 80205f6:	a33e      	add	r3, pc, #248	@ (adr r3, 80206f0 <__kernel_cos+0x148>)
 80205f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205fc:	f7df fe56 	bl	80002ac <__adddf3>
 8020600:	4622      	mov	r2, r4
 8020602:	462b      	mov	r3, r5
 8020604:	f7e0 f808 	bl	8000618 <__aeabi_dmul>
 8020608:	a33b      	add	r3, pc, #236	@ (adr r3, 80206f8 <__kernel_cos+0x150>)
 802060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802060e:	f7df fe4b 	bl	80002a8 <__aeabi_dsub>
 8020612:	4622      	mov	r2, r4
 8020614:	462b      	mov	r3, r5
 8020616:	f7df ffff 	bl	8000618 <__aeabi_dmul>
 802061a:	a339      	add	r3, pc, #228	@ (adr r3, 8020700 <__kernel_cos+0x158>)
 802061c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020620:	f7df fe44 	bl	80002ac <__adddf3>
 8020624:	4622      	mov	r2, r4
 8020626:	462b      	mov	r3, r5
 8020628:	f7df fff6 	bl	8000618 <__aeabi_dmul>
 802062c:	a336      	add	r3, pc, #216	@ (adr r3, 8020708 <__kernel_cos+0x160>)
 802062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020632:	f7df fe39 	bl	80002a8 <__aeabi_dsub>
 8020636:	4622      	mov	r2, r4
 8020638:	462b      	mov	r3, r5
 802063a:	f7df ffed 	bl	8000618 <__aeabi_dmul>
 802063e:	a334      	add	r3, pc, #208	@ (adr r3, 8020710 <__kernel_cos+0x168>)
 8020640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020644:	f7df fe32 	bl	80002ac <__adddf3>
 8020648:	4622      	mov	r2, r4
 802064a:	462b      	mov	r3, r5
 802064c:	f7df ffe4 	bl	8000618 <__aeabi_dmul>
 8020650:	4622      	mov	r2, r4
 8020652:	462b      	mov	r3, r5
 8020654:	f7df ffe0 	bl	8000618 <__aeabi_dmul>
 8020658:	e9dd 2300 	ldrd	r2, r3, [sp]
 802065c:	4604      	mov	r4, r0
 802065e:	460d      	mov	r5, r1
 8020660:	4630      	mov	r0, r6
 8020662:	4639      	mov	r1, r7
 8020664:	f7df ffd8 	bl	8000618 <__aeabi_dmul>
 8020668:	460b      	mov	r3, r1
 802066a:	4602      	mov	r2, r0
 802066c:	4629      	mov	r1, r5
 802066e:	4620      	mov	r0, r4
 8020670:	f7df fe1a 	bl	80002a8 <__aeabi_dsub>
 8020674:	4b2b      	ldr	r3, [pc, #172]	@ (8020724 <__kernel_cos+0x17c>)
 8020676:	4598      	cmp	r8, r3
 8020678:	4606      	mov	r6, r0
 802067a:	460f      	mov	r7, r1
 802067c:	d810      	bhi.n	80206a0 <__kernel_cos+0xf8>
 802067e:	4602      	mov	r2, r0
 8020680:	460b      	mov	r3, r1
 8020682:	4650      	mov	r0, sl
 8020684:	4659      	mov	r1, fp
 8020686:	f7df fe0f 	bl	80002a8 <__aeabi_dsub>
 802068a:	460b      	mov	r3, r1
 802068c:	4926      	ldr	r1, [pc, #152]	@ (8020728 <__kernel_cos+0x180>)
 802068e:	4602      	mov	r2, r0
 8020690:	2000      	movs	r0, #0
 8020692:	f7df fe09 	bl	80002a8 <__aeabi_dsub>
 8020696:	ec41 0b10 	vmov	d0, r0, r1
 802069a:	b003      	add	sp, #12
 802069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206a0:	4b22      	ldr	r3, [pc, #136]	@ (802072c <__kernel_cos+0x184>)
 80206a2:	4921      	ldr	r1, [pc, #132]	@ (8020728 <__kernel_cos+0x180>)
 80206a4:	4598      	cmp	r8, r3
 80206a6:	bf8c      	ite	hi
 80206a8:	4d21      	ldrhi	r5, [pc, #132]	@ (8020730 <__kernel_cos+0x188>)
 80206aa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80206ae:	2400      	movs	r4, #0
 80206b0:	4622      	mov	r2, r4
 80206b2:	462b      	mov	r3, r5
 80206b4:	2000      	movs	r0, #0
 80206b6:	f7df fdf7 	bl	80002a8 <__aeabi_dsub>
 80206ba:	4622      	mov	r2, r4
 80206bc:	4680      	mov	r8, r0
 80206be:	4689      	mov	r9, r1
 80206c0:	462b      	mov	r3, r5
 80206c2:	4650      	mov	r0, sl
 80206c4:	4659      	mov	r1, fp
 80206c6:	f7df fdef 	bl	80002a8 <__aeabi_dsub>
 80206ca:	4632      	mov	r2, r6
 80206cc:	463b      	mov	r3, r7
 80206ce:	f7df fdeb 	bl	80002a8 <__aeabi_dsub>
 80206d2:	4602      	mov	r2, r0
 80206d4:	460b      	mov	r3, r1
 80206d6:	4640      	mov	r0, r8
 80206d8:	4649      	mov	r1, r9
 80206da:	e7da      	b.n	8020692 <__kernel_cos+0xea>
 80206dc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8020718 <__kernel_cos+0x170>
 80206e0:	e7db      	b.n	802069a <__kernel_cos+0xf2>
 80206e2:	bf00      	nop
 80206e4:	f3af 8000 	nop.w
 80206e8:	be8838d4 	.word	0xbe8838d4
 80206ec:	bda8fae9 	.word	0xbda8fae9
 80206f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80206f4:	3e21ee9e 	.word	0x3e21ee9e
 80206f8:	809c52ad 	.word	0x809c52ad
 80206fc:	3e927e4f 	.word	0x3e927e4f
 8020700:	19cb1590 	.word	0x19cb1590
 8020704:	3efa01a0 	.word	0x3efa01a0
 8020708:	16c15177 	.word	0x16c15177
 802070c:	3f56c16c 	.word	0x3f56c16c
 8020710:	5555554c 	.word	0x5555554c
 8020714:	3fa55555 	.word	0x3fa55555
 8020718:	00000000 	.word	0x00000000
 802071c:	3ff00000 	.word	0x3ff00000
 8020720:	3fe00000 	.word	0x3fe00000
 8020724:	3fd33332 	.word	0x3fd33332
 8020728:	3ff00000 	.word	0x3ff00000
 802072c:	3fe90000 	.word	0x3fe90000
 8020730:	3fd20000 	.word	0x3fd20000
 8020734:	00000000 	.word	0x00000000

08020738 <__kernel_sin>:
 8020738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802073c:	ec55 4b10 	vmov	r4, r5, d0
 8020740:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8020744:	b085      	sub	sp, #20
 8020746:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 802074a:	ed8d 1b02 	vstr	d1, [sp, #8]
 802074e:	4680      	mov	r8, r0
 8020750:	d205      	bcs.n	802075e <__kernel_sin+0x26>
 8020752:	4620      	mov	r0, r4
 8020754:	4629      	mov	r1, r5
 8020756:	f7e0 fa0f 	bl	8000b78 <__aeabi_d2iz>
 802075a:	2800      	cmp	r0, #0
 802075c:	d052      	beq.n	8020804 <__kernel_sin+0xcc>
 802075e:	4622      	mov	r2, r4
 8020760:	462b      	mov	r3, r5
 8020762:	4620      	mov	r0, r4
 8020764:	4629      	mov	r1, r5
 8020766:	f7df ff57 	bl	8000618 <__aeabi_dmul>
 802076a:	4682      	mov	sl, r0
 802076c:	468b      	mov	fp, r1
 802076e:	4602      	mov	r2, r0
 8020770:	460b      	mov	r3, r1
 8020772:	4620      	mov	r0, r4
 8020774:	4629      	mov	r1, r5
 8020776:	f7df ff4f 	bl	8000618 <__aeabi_dmul>
 802077a:	a342      	add	r3, pc, #264	@ (adr r3, 8020884 <__kernel_sin+0x14c>)
 802077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020780:	e9cd 0100 	strd	r0, r1, [sp]
 8020784:	4650      	mov	r0, sl
 8020786:	4659      	mov	r1, fp
 8020788:	f7df ff46 	bl	8000618 <__aeabi_dmul>
 802078c:	a33f      	add	r3, pc, #252	@ (adr r3, 802088c <__kernel_sin+0x154>)
 802078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020792:	f7df fd89 	bl	80002a8 <__aeabi_dsub>
 8020796:	4652      	mov	r2, sl
 8020798:	465b      	mov	r3, fp
 802079a:	f7df ff3d 	bl	8000618 <__aeabi_dmul>
 802079e:	a33d      	add	r3, pc, #244	@ (adr r3, 8020894 <__kernel_sin+0x15c>)
 80207a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207a4:	f7df fd82 	bl	80002ac <__adddf3>
 80207a8:	4652      	mov	r2, sl
 80207aa:	465b      	mov	r3, fp
 80207ac:	f7df ff34 	bl	8000618 <__aeabi_dmul>
 80207b0:	a33a      	add	r3, pc, #232	@ (adr r3, 802089c <__kernel_sin+0x164>)
 80207b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207b6:	f7df fd77 	bl	80002a8 <__aeabi_dsub>
 80207ba:	4652      	mov	r2, sl
 80207bc:	465b      	mov	r3, fp
 80207be:	f7df ff2b 	bl	8000618 <__aeabi_dmul>
 80207c2:	a338      	add	r3, pc, #224	@ (adr r3, 80208a4 <__kernel_sin+0x16c>)
 80207c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207c8:	f7df fd70 	bl	80002ac <__adddf3>
 80207cc:	4606      	mov	r6, r0
 80207ce:	460f      	mov	r7, r1
 80207d0:	f1b8 0f00 	cmp.w	r8, #0
 80207d4:	d11b      	bne.n	802080e <__kernel_sin+0xd6>
 80207d6:	4602      	mov	r2, r0
 80207d8:	460b      	mov	r3, r1
 80207da:	4650      	mov	r0, sl
 80207dc:	4659      	mov	r1, fp
 80207de:	f7df ff1b 	bl	8000618 <__aeabi_dmul>
 80207e2:	a325      	add	r3, pc, #148	@ (adr r3, 8020878 <__kernel_sin+0x140>)
 80207e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207e8:	f7df fd5e 	bl	80002a8 <__aeabi_dsub>
 80207ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80207f0:	f7df ff12 	bl	8000618 <__aeabi_dmul>
 80207f4:	4602      	mov	r2, r0
 80207f6:	460b      	mov	r3, r1
 80207f8:	4620      	mov	r0, r4
 80207fa:	4629      	mov	r1, r5
 80207fc:	f7df fd56 	bl	80002ac <__adddf3>
 8020800:	4604      	mov	r4, r0
 8020802:	460d      	mov	r5, r1
 8020804:	ec45 4b10 	vmov	d0, r4, r5
 8020808:	b005      	add	sp, #20
 802080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802080e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020812:	4b1b      	ldr	r3, [pc, #108]	@ (8020880 <__kernel_sin+0x148>)
 8020814:	2200      	movs	r2, #0
 8020816:	f7df feff 	bl	8000618 <__aeabi_dmul>
 802081a:	4632      	mov	r2, r6
 802081c:	4680      	mov	r8, r0
 802081e:	4689      	mov	r9, r1
 8020820:	463b      	mov	r3, r7
 8020822:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020826:	f7df fef7 	bl	8000618 <__aeabi_dmul>
 802082a:	4602      	mov	r2, r0
 802082c:	460b      	mov	r3, r1
 802082e:	4640      	mov	r0, r8
 8020830:	4649      	mov	r1, r9
 8020832:	f7df fd39 	bl	80002a8 <__aeabi_dsub>
 8020836:	4652      	mov	r2, sl
 8020838:	465b      	mov	r3, fp
 802083a:	f7df feed 	bl	8000618 <__aeabi_dmul>
 802083e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020842:	f7df fd31 	bl	80002a8 <__aeabi_dsub>
 8020846:	a30c      	add	r3, pc, #48	@ (adr r3, 8020878 <__kernel_sin+0x140>)
 8020848:	e9d3 2300 	ldrd	r2, r3, [r3]
 802084c:	4606      	mov	r6, r0
 802084e:	460f      	mov	r7, r1
 8020850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020854:	f7df fee0 	bl	8000618 <__aeabi_dmul>
 8020858:	4602      	mov	r2, r0
 802085a:	460b      	mov	r3, r1
 802085c:	4630      	mov	r0, r6
 802085e:	4639      	mov	r1, r7
 8020860:	f7df fd24 	bl	80002ac <__adddf3>
 8020864:	4602      	mov	r2, r0
 8020866:	460b      	mov	r3, r1
 8020868:	4620      	mov	r0, r4
 802086a:	4629      	mov	r1, r5
 802086c:	f7df fd1c 	bl	80002a8 <__aeabi_dsub>
 8020870:	e7c6      	b.n	8020800 <__kernel_sin+0xc8>
 8020872:	bf00      	nop
 8020874:	f3af 8000 	nop.w
 8020878:	55555549 	.word	0x55555549
 802087c:	3fc55555 	.word	0x3fc55555
 8020880:	3fe00000 	.word	0x3fe00000
 8020884:	5acfd57c 	.word	0x5acfd57c
 8020888:	3de5d93a 	.word	0x3de5d93a
 802088c:	8a2b9ceb 	.word	0x8a2b9ceb
 8020890:	3e5ae5e6 	.word	0x3e5ae5e6
 8020894:	57b1fe7d 	.word	0x57b1fe7d
 8020898:	3ec71de3 	.word	0x3ec71de3
 802089c:	19c161d5 	.word	0x19c161d5
 80208a0:	3f2a01a0 	.word	0x3f2a01a0
 80208a4:	1110f8a6 	.word	0x1110f8a6
 80208a8:	3f811111 	.word	0x3f811111
 80208ac:	00000000 	.word	0x00000000

080208b0 <__ieee754_acos>:
 80208b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208b4:	ec55 4b10 	vmov	r4, r5, d0
 80208b8:	49b7      	ldr	r1, [pc, #732]	@ (8020b98 <__ieee754_acos+0x2e8>)
 80208ba:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80208be:	428b      	cmp	r3, r1
 80208c0:	d919      	bls.n	80208f6 <__ieee754_acos+0x46>
 80208c2:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80208c6:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80208ca:	4323      	orrs	r3, r4
 80208cc:	d106      	bne.n	80208dc <__ieee754_acos+0x2c>
 80208ce:	2d00      	cmp	r5, #0
 80208d0:	f340 8210 	ble.w	8020cf4 <__ieee754_acos+0x444>
 80208d4:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8020b28 <__ieee754_acos+0x278>
 80208d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208dc:	4622      	mov	r2, r4
 80208de:	462b      	mov	r3, r5
 80208e0:	4620      	mov	r0, r4
 80208e2:	4629      	mov	r1, r5
 80208e4:	f7df fce0 	bl	80002a8 <__aeabi_dsub>
 80208e8:	4602      	mov	r2, r0
 80208ea:	460b      	mov	r3, r1
 80208ec:	f7df ffbe 	bl	800086c <__aeabi_ddiv>
 80208f0:	ec41 0b10 	vmov	d0, r0, r1
 80208f4:	e7f0      	b.n	80208d8 <__ieee754_acos+0x28>
 80208f6:	49a9      	ldr	r1, [pc, #676]	@ (8020b9c <__ieee754_acos+0x2ec>)
 80208f8:	428b      	cmp	r3, r1
 80208fa:	f200 8085 	bhi.w	8020a08 <__ieee754_acos+0x158>
 80208fe:	4aa8      	ldr	r2, [pc, #672]	@ (8020ba0 <__ieee754_acos+0x2f0>)
 8020900:	4293      	cmp	r3, r2
 8020902:	f240 81fa 	bls.w	8020cfa <__ieee754_acos+0x44a>
 8020906:	4622      	mov	r2, r4
 8020908:	462b      	mov	r3, r5
 802090a:	4620      	mov	r0, r4
 802090c:	4629      	mov	r1, r5
 802090e:	f7df fe83 	bl	8000618 <__aeabi_dmul>
 8020912:	a387      	add	r3, pc, #540	@ (adr r3, 8020b30 <__ieee754_acos+0x280>)
 8020914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020918:	4606      	mov	r6, r0
 802091a:	460f      	mov	r7, r1
 802091c:	f7df fe7c 	bl	8000618 <__aeabi_dmul>
 8020920:	a385      	add	r3, pc, #532	@ (adr r3, 8020b38 <__ieee754_acos+0x288>)
 8020922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020926:	f7df fcc1 	bl	80002ac <__adddf3>
 802092a:	4632      	mov	r2, r6
 802092c:	463b      	mov	r3, r7
 802092e:	f7df fe73 	bl	8000618 <__aeabi_dmul>
 8020932:	a383      	add	r3, pc, #524	@ (adr r3, 8020b40 <__ieee754_acos+0x290>)
 8020934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020938:	f7df fcb6 	bl	80002a8 <__aeabi_dsub>
 802093c:	4632      	mov	r2, r6
 802093e:	463b      	mov	r3, r7
 8020940:	f7df fe6a 	bl	8000618 <__aeabi_dmul>
 8020944:	a380      	add	r3, pc, #512	@ (adr r3, 8020b48 <__ieee754_acos+0x298>)
 8020946:	e9d3 2300 	ldrd	r2, r3, [r3]
 802094a:	f7df fcaf 	bl	80002ac <__adddf3>
 802094e:	4632      	mov	r2, r6
 8020950:	463b      	mov	r3, r7
 8020952:	f7df fe61 	bl	8000618 <__aeabi_dmul>
 8020956:	a37e      	add	r3, pc, #504	@ (adr r3, 8020b50 <__ieee754_acos+0x2a0>)
 8020958:	e9d3 2300 	ldrd	r2, r3, [r3]
 802095c:	f7df fca4 	bl	80002a8 <__aeabi_dsub>
 8020960:	4632      	mov	r2, r6
 8020962:	463b      	mov	r3, r7
 8020964:	f7df fe58 	bl	8000618 <__aeabi_dmul>
 8020968:	a37b      	add	r3, pc, #492	@ (adr r3, 8020b58 <__ieee754_acos+0x2a8>)
 802096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802096e:	f7df fc9d 	bl	80002ac <__adddf3>
 8020972:	4632      	mov	r2, r6
 8020974:	463b      	mov	r3, r7
 8020976:	f7df fe4f 	bl	8000618 <__aeabi_dmul>
 802097a:	a379      	add	r3, pc, #484	@ (adr r3, 8020b60 <__ieee754_acos+0x2b0>)
 802097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020980:	4680      	mov	r8, r0
 8020982:	4689      	mov	r9, r1
 8020984:	4630      	mov	r0, r6
 8020986:	4639      	mov	r1, r7
 8020988:	f7df fe46 	bl	8000618 <__aeabi_dmul>
 802098c:	a376      	add	r3, pc, #472	@ (adr r3, 8020b68 <__ieee754_acos+0x2b8>)
 802098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020992:	f7df fc89 	bl	80002a8 <__aeabi_dsub>
 8020996:	4632      	mov	r2, r6
 8020998:	463b      	mov	r3, r7
 802099a:	f7df fe3d 	bl	8000618 <__aeabi_dmul>
 802099e:	a374      	add	r3, pc, #464	@ (adr r3, 8020b70 <__ieee754_acos+0x2c0>)
 80209a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209a4:	f7df fc82 	bl	80002ac <__adddf3>
 80209a8:	4632      	mov	r2, r6
 80209aa:	463b      	mov	r3, r7
 80209ac:	f7df fe34 	bl	8000618 <__aeabi_dmul>
 80209b0:	a371      	add	r3, pc, #452	@ (adr r3, 8020b78 <__ieee754_acos+0x2c8>)
 80209b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209b6:	f7df fc77 	bl	80002a8 <__aeabi_dsub>
 80209ba:	4632      	mov	r2, r6
 80209bc:	463b      	mov	r3, r7
 80209be:	f7df fe2b 	bl	8000618 <__aeabi_dmul>
 80209c2:	4b78      	ldr	r3, [pc, #480]	@ (8020ba4 <__ieee754_acos+0x2f4>)
 80209c4:	2200      	movs	r2, #0
 80209c6:	f7df fc71 	bl	80002ac <__adddf3>
 80209ca:	4602      	mov	r2, r0
 80209cc:	460b      	mov	r3, r1
 80209ce:	4640      	mov	r0, r8
 80209d0:	4649      	mov	r1, r9
 80209d2:	f7df ff4b 	bl	800086c <__aeabi_ddiv>
 80209d6:	4622      	mov	r2, r4
 80209d8:	462b      	mov	r3, r5
 80209da:	f7df fe1d 	bl	8000618 <__aeabi_dmul>
 80209de:	4602      	mov	r2, r0
 80209e0:	460b      	mov	r3, r1
 80209e2:	a167      	add	r1, pc, #412	@ (adr r1, 8020b80 <__ieee754_acos+0x2d0>)
 80209e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80209e8:	f7df fc5e 	bl	80002a8 <__aeabi_dsub>
 80209ec:	4602      	mov	r2, r0
 80209ee:	460b      	mov	r3, r1
 80209f0:	4620      	mov	r0, r4
 80209f2:	4629      	mov	r1, r5
 80209f4:	f7df fc58 	bl	80002a8 <__aeabi_dsub>
 80209f8:	4602      	mov	r2, r0
 80209fa:	460b      	mov	r3, r1
 80209fc:	a162      	add	r1, pc, #392	@ (adr r1, 8020b88 <__ieee754_acos+0x2d8>)
 80209fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a02:	f7df fc51 	bl	80002a8 <__aeabi_dsub>
 8020a06:	e773      	b.n	80208f0 <__ieee754_acos+0x40>
 8020a08:	2d00      	cmp	r5, #0
 8020a0a:	f280 80cf 	bge.w	8020bac <__ieee754_acos+0x2fc>
 8020a0e:	4b65      	ldr	r3, [pc, #404]	@ (8020ba4 <__ieee754_acos+0x2f4>)
 8020a10:	2200      	movs	r2, #0
 8020a12:	4620      	mov	r0, r4
 8020a14:	4629      	mov	r1, r5
 8020a16:	f7df fc49 	bl	80002ac <__adddf3>
 8020a1a:	4b63      	ldr	r3, [pc, #396]	@ (8020ba8 <__ieee754_acos+0x2f8>)
 8020a1c:	2200      	movs	r2, #0
 8020a1e:	f7df fdfb 	bl	8000618 <__aeabi_dmul>
 8020a22:	a343      	add	r3, pc, #268	@ (adr r3, 8020b30 <__ieee754_acos+0x280>)
 8020a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a28:	4604      	mov	r4, r0
 8020a2a:	460d      	mov	r5, r1
 8020a2c:	f7df fdf4 	bl	8000618 <__aeabi_dmul>
 8020a30:	a341      	add	r3, pc, #260	@ (adr r3, 8020b38 <__ieee754_acos+0x288>)
 8020a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a36:	f7df fc39 	bl	80002ac <__adddf3>
 8020a3a:	4622      	mov	r2, r4
 8020a3c:	462b      	mov	r3, r5
 8020a3e:	f7df fdeb 	bl	8000618 <__aeabi_dmul>
 8020a42:	a33f      	add	r3, pc, #252	@ (adr r3, 8020b40 <__ieee754_acos+0x290>)
 8020a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a48:	f7df fc2e 	bl	80002a8 <__aeabi_dsub>
 8020a4c:	4622      	mov	r2, r4
 8020a4e:	462b      	mov	r3, r5
 8020a50:	f7df fde2 	bl	8000618 <__aeabi_dmul>
 8020a54:	a33c      	add	r3, pc, #240	@ (adr r3, 8020b48 <__ieee754_acos+0x298>)
 8020a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a5a:	f7df fc27 	bl	80002ac <__adddf3>
 8020a5e:	4622      	mov	r2, r4
 8020a60:	462b      	mov	r3, r5
 8020a62:	f7df fdd9 	bl	8000618 <__aeabi_dmul>
 8020a66:	a33a      	add	r3, pc, #232	@ (adr r3, 8020b50 <__ieee754_acos+0x2a0>)
 8020a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a6c:	f7df fc1c 	bl	80002a8 <__aeabi_dsub>
 8020a70:	4622      	mov	r2, r4
 8020a72:	462b      	mov	r3, r5
 8020a74:	f7df fdd0 	bl	8000618 <__aeabi_dmul>
 8020a78:	a337      	add	r3, pc, #220	@ (adr r3, 8020b58 <__ieee754_acos+0x2a8>)
 8020a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a7e:	f7df fc15 	bl	80002ac <__adddf3>
 8020a82:	4622      	mov	r2, r4
 8020a84:	462b      	mov	r3, r5
 8020a86:	f7df fdc7 	bl	8000618 <__aeabi_dmul>
 8020a8a:	a335      	add	r3, pc, #212	@ (adr r3, 8020b60 <__ieee754_acos+0x2b0>)
 8020a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a90:	4606      	mov	r6, r0
 8020a92:	460f      	mov	r7, r1
 8020a94:	4620      	mov	r0, r4
 8020a96:	4629      	mov	r1, r5
 8020a98:	f7df fdbe 	bl	8000618 <__aeabi_dmul>
 8020a9c:	a332      	add	r3, pc, #200	@ (adr r3, 8020b68 <__ieee754_acos+0x2b8>)
 8020a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aa2:	f7df fc01 	bl	80002a8 <__aeabi_dsub>
 8020aa6:	4622      	mov	r2, r4
 8020aa8:	462b      	mov	r3, r5
 8020aaa:	f7df fdb5 	bl	8000618 <__aeabi_dmul>
 8020aae:	a330      	add	r3, pc, #192	@ (adr r3, 8020b70 <__ieee754_acos+0x2c0>)
 8020ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ab4:	f7df fbfa 	bl	80002ac <__adddf3>
 8020ab8:	4622      	mov	r2, r4
 8020aba:	462b      	mov	r3, r5
 8020abc:	f7df fdac 	bl	8000618 <__aeabi_dmul>
 8020ac0:	a32d      	add	r3, pc, #180	@ (adr r3, 8020b78 <__ieee754_acos+0x2c8>)
 8020ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ac6:	f7df fbef 	bl	80002a8 <__aeabi_dsub>
 8020aca:	4622      	mov	r2, r4
 8020acc:	462b      	mov	r3, r5
 8020ace:	f7df fda3 	bl	8000618 <__aeabi_dmul>
 8020ad2:	4b34      	ldr	r3, [pc, #208]	@ (8020ba4 <__ieee754_acos+0x2f4>)
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	f7df fbe9 	bl	80002ac <__adddf3>
 8020ada:	ec45 4b10 	vmov	d0, r4, r5
 8020ade:	4680      	mov	r8, r0
 8020ae0:	4689      	mov	r9, r1
 8020ae2:	f7ff fc0d 	bl	8020300 <__ieee754_sqrt>
 8020ae6:	ec55 4b10 	vmov	r4, r5, d0
 8020aea:	4642      	mov	r2, r8
 8020aec:	464b      	mov	r3, r9
 8020aee:	4630      	mov	r0, r6
 8020af0:	4639      	mov	r1, r7
 8020af2:	f7df febb 	bl	800086c <__aeabi_ddiv>
 8020af6:	4622      	mov	r2, r4
 8020af8:	462b      	mov	r3, r5
 8020afa:	f7df fd8d 	bl	8000618 <__aeabi_dmul>
 8020afe:	a320      	add	r3, pc, #128	@ (adr r3, 8020b80 <__ieee754_acos+0x2d0>)
 8020b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b04:	f7df fbd0 	bl	80002a8 <__aeabi_dsub>
 8020b08:	4622      	mov	r2, r4
 8020b0a:	462b      	mov	r3, r5
 8020b0c:	f7df fbce 	bl	80002ac <__adddf3>
 8020b10:	4602      	mov	r2, r0
 8020b12:	460b      	mov	r3, r1
 8020b14:	f7df fbca 	bl	80002ac <__adddf3>
 8020b18:	4602      	mov	r2, r0
 8020b1a:	460b      	mov	r3, r1
 8020b1c:	a11c      	add	r1, pc, #112	@ (adr r1, 8020b90 <__ieee754_acos+0x2e0>)
 8020b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b22:	e76e      	b.n	8020a02 <__ieee754_acos+0x152>
 8020b24:	f3af 8000 	nop.w
	...
 8020b30:	0dfdf709 	.word	0x0dfdf709
 8020b34:	3f023de1 	.word	0x3f023de1
 8020b38:	7501b288 	.word	0x7501b288
 8020b3c:	3f49efe0 	.word	0x3f49efe0
 8020b40:	b5688f3b 	.word	0xb5688f3b
 8020b44:	3fa48228 	.word	0x3fa48228
 8020b48:	0e884455 	.word	0x0e884455
 8020b4c:	3fc9c155 	.word	0x3fc9c155
 8020b50:	03eb6f7d 	.word	0x03eb6f7d
 8020b54:	3fd4d612 	.word	0x3fd4d612
 8020b58:	55555555 	.word	0x55555555
 8020b5c:	3fc55555 	.word	0x3fc55555
 8020b60:	b12e9282 	.word	0xb12e9282
 8020b64:	3fb3b8c5 	.word	0x3fb3b8c5
 8020b68:	1b8d0159 	.word	0x1b8d0159
 8020b6c:	3fe6066c 	.word	0x3fe6066c
 8020b70:	9c598ac8 	.word	0x9c598ac8
 8020b74:	40002ae5 	.word	0x40002ae5
 8020b78:	1c8a2d4b 	.word	0x1c8a2d4b
 8020b7c:	40033a27 	.word	0x40033a27
 8020b80:	33145c07 	.word	0x33145c07
 8020b84:	3c91a626 	.word	0x3c91a626
 8020b88:	54442d18 	.word	0x54442d18
 8020b8c:	3ff921fb 	.word	0x3ff921fb
 8020b90:	54442d18 	.word	0x54442d18
 8020b94:	400921fb 	.word	0x400921fb
 8020b98:	3fefffff 	.word	0x3fefffff
 8020b9c:	3fdfffff 	.word	0x3fdfffff
 8020ba0:	3c600000 	.word	0x3c600000
 8020ba4:	3ff00000 	.word	0x3ff00000
 8020ba8:	3fe00000 	.word	0x3fe00000
 8020bac:	4622      	mov	r2, r4
 8020bae:	462b      	mov	r3, r5
 8020bb0:	496b      	ldr	r1, [pc, #428]	@ (8020d60 <__ieee754_acos+0x4b0>)
 8020bb2:	2000      	movs	r0, #0
 8020bb4:	f7df fb78 	bl	80002a8 <__aeabi_dsub>
 8020bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8020d64 <__ieee754_acos+0x4b4>)
 8020bba:	2200      	movs	r2, #0
 8020bbc:	f7df fd2c 	bl	8000618 <__aeabi_dmul>
 8020bc0:	4604      	mov	r4, r0
 8020bc2:	460d      	mov	r5, r1
 8020bc4:	ec45 4b10 	vmov	d0, r4, r5
 8020bc8:	f7ff fb9a 	bl	8020300 <__ieee754_sqrt>
 8020bcc:	a34c      	add	r3, pc, #304	@ (adr r3, 8020d00 <__ieee754_acos+0x450>)
 8020bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bd2:	4620      	mov	r0, r4
 8020bd4:	4629      	mov	r1, r5
 8020bd6:	ec59 8b10 	vmov	r8, r9, d0
 8020bda:	f7df fd1d 	bl	8000618 <__aeabi_dmul>
 8020bde:	a34a      	add	r3, pc, #296	@ (adr r3, 8020d08 <__ieee754_acos+0x458>)
 8020be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020be4:	f7df fb62 	bl	80002ac <__adddf3>
 8020be8:	4622      	mov	r2, r4
 8020bea:	462b      	mov	r3, r5
 8020bec:	f7df fd14 	bl	8000618 <__aeabi_dmul>
 8020bf0:	a347      	add	r3, pc, #284	@ (adr r3, 8020d10 <__ieee754_acos+0x460>)
 8020bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bf6:	f7df fb57 	bl	80002a8 <__aeabi_dsub>
 8020bfa:	4622      	mov	r2, r4
 8020bfc:	462b      	mov	r3, r5
 8020bfe:	f7df fd0b 	bl	8000618 <__aeabi_dmul>
 8020c02:	a345      	add	r3, pc, #276	@ (adr r3, 8020d18 <__ieee754_acos+0x468>)
 8020c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c08:	f7df fb50 	bl	80002ac <__adddf3>
 8020c0c:	4622      	mov	r2, r4
 8020c0e:	462b      	mov	r3, r5
 8020c10:	f7df fd02 	bl	8000618 <__aeabi_dmul>
 8020c14:	a342      	add	r3, pc, #264	@ (adr r3, 8020d20 <__ieee754_acos+0x470>)
 8020c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c1a:	f7df fb45 	bl	80002a8 <__aeabi_dsub>
 8020c1e:	4622      	mov	r2, r4
 8020c20:	462b      	mov	r3, r5
 8020c22:	f7df fcf9 	bl	8000618 <__aeabi_dmul>
 8020c26:	a340      	add	r3, pc, #256	@ (adr r3, 8020d28 <__ieee754_acos+0x478>)
 8020c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c2c:	f7df fb3e 	bl	80002ac <__adddf3>
 8020c30:	4622      	mov	r2, r4
 8020c32:	462b      	mov	r3, r5
 8020c34:	f7df fcf0 	bl	8000618 <__aeabi_dmul>
 8020c38:	a33d      	add	r3, pc, #244	@ (adr r3, 8020d30 <__ieee754_acos+0x480>)
 8020c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c3e:	4682      	mov	sl, r0
 8020c40:	468b      	mov	fp, r1
 8020c42:	4620      	mov	r0, r4
 8020c44:	4629      	mov	r1, r5
 8020c46:	f7df fce7 	bl	8000618 <__aeabi_dmul>
 8020c4a:	a33b      	add	r3, pc, #236	@ (adr r3, 8020d38 <__ieee754_acos+0x488>)
 8020c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c50:	f7df fb2a 	bl	80002a8 <__aeabi_dsub>
 8020c54:	4622      	mov	r2, r4
 8020c56:	462b      	mov	r3, r5
 8020c58:	f7df fcde 	bl	8000618 <__aeabi_dmul>
 8020c5c:	a338      	add	r3, pc, #224	@ (adr r3, 8020d40 <__ieee754_acos+0x490>)
 8020c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c62:	f7df fb23 	bl	80002ac <__adddf3>
 8020c66:	4622      	mov	r2, r4
 8020c68:	462b      	mov	r3, r5
 8020c6a:	f7df fcd5 	bl	8000618 <__aeabi_dmul>
 8020c6e:	a336      	add	r3, pc, #216	@ (adr r3, 8020d48 <__ieee754_acos+0x498>)
 8020c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c74:	f7df fb18 	bl	80002a8 <__aeabi_dsub>
 8020c78:	4622      	mov	r2, r4
 8020c7a:	462b      	mov	r3, r5
 8020c7c:	f7df fccc 	bl	8000618 <__aeabi_dmul>
 8020c80:	4b37      	ldr	r3, [pc, #220]	@ (8020d60 <__ieee754_acos+0x4b0>)
 8020c82:	2200      	movs	r2, #0
 8020c84:	f7df fb12 	bl	80002ac <__adddf3>
 8020c88:	4602      	mov	r2, r0
 8020c8a:	460b      	mov	r3, r1
 8020c8c:	4650      	mov	r0, sl
 8020c8e:	4659      	mov	r1, fp
 8020c90:	f7df fdec 	bl	800086c <__aeabi_ddiv>
 8020c94:	4642      	mov	r2, r8
 8020c96:	464b      	mov	r3, r9
 8020c98:	f7df fcbe 	bl	8000618 <__aeabi_dmul>
 8020c9c:	2600      	movs	r6, #0
 8020c9e:	4682      	mov	sl, r0
 8020ca0:	468b      	mov	fp, r1
 8020ca2:	4632      	mov	r2, r6
 8020ca4:	464b      	mov	r3, r9
 8020ca6:	4630      	mov	r0, r6
 8020ca8:	4649      	mov	r1, r9
 8020caa:	f7df fcb5 	bl	8000618 <__aeabi_dmul>
 8020cae:	4602      	mov	r2, r0
 8020cb0:	460b      	mov	r3, r1
 8020cb2:	4620      	mov	r0, r4
 8020cb4:	4629      	mov	r1, r5
 8020cb6:	f7df faf7 	bl	80002a8 <__aeabi_dsub>
 8020cba:	4632      	mov	r2, r6
 8020cbc:	4604      	mov	r4, r0
 8020cbe:	460d      	mov	r5, r1
 8020cc0:	464b      	mov	r3, r9
 8020cc2:	4640      	mov	r0, r8
 8020cc4:	4649      	mov	r1, r9
 8020cc6:	f7df faf1 	bl	80002ac <__adddf3>
 8020cca:	4602      	mov	r2, r0
 8020ccc:	460b      	mov	r3, r1
 8020cce:	4620      	mov	r0, r4
 8020cd0:	4629      	mov	r1, r5
 8020cd2:	f7df fdcb 	bl	800086c <__aeabi_ddiv>
 8020cd6:	4602      	mov	r2, r0
 8020cd8:	460b      	mov	r3, r1
 8020cda:	4650      	mov	r0, sl
 8020cdc:	4659      	mov	r1, fp
 8020cde:	f7df fae5 	bl	80002ac <__adddf3>
 8020ce2:	4632      	mov	r2, r6
 8020ce4:	464b      	mov	r3, r9
 8020ce6:	f7df fae1 	bl	80002ac <__adddf3>
 8020cea:	4602      	mov	r2, r0
 8020cec:	460b      	mov	r3, r1
 8020cee:	f7df fadd 	bl	80002ac <__adddf3>
 8020cf2:	e5fd      	b.n	80208f0 <__ieee754_acos+0x40>
 8020cf4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8020d50 <__ieee754_acos+0x4a0>
 8020cf8:	e5ee      	b.n	80208d8 <__ieee754_acos+0x28>
 8020cfa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8020d58 <__ieee754_acos+0x4a8>
 8020cfe:	e5eb      	b.n	80208d8 <__ieee754_acos+0x28>
 8020d00:	0dfdf709 	.word	0x0dfdf709
 8020d04:	3f023de1 	.word	0x3f023de1
 8020d08:	7501b288 	.word	0x7501b288
 8020d0c:	3f49efe0 	.word	0x3f49efe0
 8020d10:	b5688f3b 	.word	0xb5688f3b
 8020d14:	3fa48228 	.word	0x3fa48228
 8020d18:	0e884455 	.word	0x0e884455
 8020d1c:	3fc9c155 	.word	0x3fc9c155
 8020d20:	03eb6f7d 	.word	0x03eb6f7d
 8020d24:	3fd4d612 	.word	0x3fd4d612
 8020d28:	55555555 	.word	0x55555555
 8020d2c:	3fc55555 	.word	0x3fc55555
 8020d30:	b12e9282 	.word	0xb12e9282
 8020d34:	3fb3b8c5 	.word	0x3fb3b8c5
 8020d38:	1b8d0159 	.word	0x1b8d0159
 8020d3c:	3fe6066c 	.word	0x3fe6066c
 8020d40:	9c598ac8 	.word	0x9c598ac8
 8020d44:	40002ae5 	.word	0x40002ae5
 8020d48:	1c8a2d4b 	.word	0x1c8a2d4b
 8020d4c:	40033a27 	.word	0x40033a27
 8020d50:	54442d18 	.word	0x54442d18
 8020d54:	400921fb 	.word	0x400921fb
 8020d58:	54442d18 	.word	0x54442d18
 8020d5c:	3ff921fb 	.word	0x3ff921fb
 8020d60:	3ff00000 	.word	0x3ff00000
 8020d64:	3fe00000 	.word	0x3fe00000

08020d68 <__ieee754_asin>:
 8020d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d6c:	ec55 4b10 	vmov	r4, r5, d0
 8020d70:	4bc7      	ldr	r3, [pc, #796]	@ (8021090 <__ieee754_asin+0x328>)
 8020d72:	b087      	sub	sp, #28
 8020d74:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8020d78:	429e      	cmp	r6, r3
 8020d7a:	9501      	str	r5, [sp, #4]
 8020d7c:	d92d      	bls.n	8020dda <__ieee754_asin+0x72>
 8020d7e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8020d82:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8020d86:	4326      	orrs	r6, r4
 8020d88:	d116      	bne.n	8020db8 <__ieee754_asin+0x50>
 8020d8a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8021028 <__ieee754_asin+0x2c0>)
 8020d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d90:	4620      	mov	r0, r4
 8020d92:	4629      	mov	r1, r5
 8020d94:	f7df fc40 	bl	8000618 <__aeabi_dmul>
 8020d98:	a3a5      	add	r3, pc, #660	@ (adr r3, 8021030 <__ieee754_asin+0x2c8>)
 8020d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d9e:	4606      	mov	r6, r0
 8020da0:	460f      	mov	r7, r1
 8020da2:	4620      	mov	r0, r4
 8020da4:	4629      	mov	r1, r5
 8020da6:	f7df fc37 	bl	8000618 <__aeabi_dmul>
 8020daa:	4602      	mov	r2, r0
 8020dac:	460b      	mov	r3, r1
 8020dae:	4630      	mov	r0, r6
 8020db0:	4639      	mov	r1, r7
 8020db2:	f7df fa7b 	bl	80002ac <__adddf3>
 8020db6:	e009      	b.n	8020dcc <__ieee754_asin+0x64>
 8020db8:	4622      	mov	r2, r4
 8020dba:	462b      	mov	r3, r5
 8020dbc:	4620      	mov	r0, r4
 8020dbe:	4629      	mov	r1, r5
 8020dc0:	f7df fa72 	bl	80002a8 <__aeabi_dsub>
 8020dc4:	4602      	mov	r2, r0
 8020dc6:	460b      	mov	r3, r1
 8020dc8:	f7df fd50 	bl	800086c <__aeabi_ddiv>
 8020dcc:	4604      	mov	r4, r0
 8020dce:	460d      	mov	r5, r1
 8020dd0:	ec45 4b10 	vmov	d0, r4, r5
 8020dd4:	b007      	add	sp, #28
 8020dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dda:	4bae      	ldr	r3, [pc, #696]	@ (8021094 <__ieee754_asin+0x32c>)
 8020ddc:	429e      	cmp	r6, r3
 8020dde:	d810      	bhi.n	8020e02 <__ieee754_asin+0x9a>
 8020de0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8020de4:	f080 80ad 	bcs.w	8020f42 <__ieee754_asin+0x1da>
 8020de8:	a393      	add	r3, pc, #588	@ (adr r3, 8021038 <__ieee754_asin+0x2d0>)
 8020dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dee:	4620      	mov	r0, r4
 8020df0:	4629      	mov	r1, r5
 8020df2:	f7df fa5b 	bl	80002ac <__adddf3>
 8020df6:	4ba8      	ldr	r3, [pc, #672]	@ (8021098 <__ieee754_asin+0x330>)
 8020df8:	2200      	movs	r2, #0
 8020dfa:	f7df fe9d 	bl	8000b38 <__aeabi_dcmpgt>
 8020dfe:	2800      	cmp	r0, #0
 8020e00:	d1e6      	bne.n	8020dd0 <__ieee754_asin+0x68>
 8020e02:	ec45 4b10 	vmov	d0, r4, r5
 8020e06:	f7ff fa13 	bl	8020230 <fabs>
 8020e0a:	49a3      	ldr	r1, [pc, #652]	@ (8021098 <__ieee754_asin+0x330>)
 8020e0c:	ec53 2b10 	vmov	r2, r3, d0
 8020e10:	2000      	movs	r0, #0
 8020e12:	f7df fa49 	bl	80002a8 <__aeabi_dsub>
 8020e16:	4ba1      	ldr	r3, [pc, #644]	@ (802109c <__ieee754_asin+0x334>)
 8020e18:	2200      	movs	r2, #0
 8020e1a:	f7df fbfd 	bl	8000618 <__aeabi_dmul>
 8020e1e:	a388      	add	r3, pc, #544	@ (adr r3, 8021040 <__ieee754_asin+0x2d8>)
 8020e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e24:	4604      	mov	r4, r0
 8020e26:	460d      	mov	r5, r1
 8020e28:	f7df fbf6 	bl	8000618 <__aeabi_dmul>
 8020e2c:	a386      	add	r3, pc, #536	@ (adr r3, 8021048 <__ieee754_asin+0x2e0>)
 8020e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e32:	f7df fa3b 	bl	80002ac <__adddf3>
 8020e36:	4622      	mov	r2, r4
 8020e38:	462b      	mov	r3, r5
 8020e3a:	f7df fbed 	bl	8000618 <__aeabi_dmul>
 8020e3e:	a384      	add	r3, pc, #528	@ (adr r3, 8021050 <__ieee754_asin+0x2e8>)
 8020e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e44:	f7df fa30 	bl	80002a8 <__aeabi_dsub>
 8020e48:	4622      	mov	r2, r4
 8020e4a:	462b      	mov	r3, r5
 8020e4c:	f7df fbe4 	bl	8000618 <__aeabi_dmul>
 8020e50:	a381      	add	r3, pc, #516	@ (adr r3, 8021058 <__ieee754_asin+0x2f0>)
 8020e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e56:	f7df fa29 	bl	80002ac <__adddf3>
 8020e5a:	4622      	mov	r2, r4
 8020e5c:	462b      	mov	r3, r5
 8020e5e:	f7df fbdb 	bl	8000618 <__aeabi_dmul>
 8020e62:	a37f      	add	r3, pc, #508	@ (adr r3, 8021060 <__ieee754_asin+0x2f8>)
 8020e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e68:	f7df fa1e 	bl	80002a8 <__aeabi_dsub>
 8020e6c:	4622      	mov	r2, r4
 8020e6e:	462b      	mov	r3, r5
 8020e70:	f7df fbd2 	bl	8000618 <__aeabi_dmul>
 8020e74:	a37c      	add	r3, pc, #496	@ (adr r3, 8021068 <__ieee754_asin+0x300>)
 8020e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e7a:	f7df fa17 	bl	80002ac <__adddf3>
 8020e7e:	4622      	mov	r2, r4
 8020e80:	462b      	mov	r3, r5
 8020e82:	f7df fbc9 	bl	8000618 <__aeabi_dmul>
 8020e86:	a37a      	add	r3, pc, #488	@ (adr r3, 8021070 <__ieee754_asin+0x308>)
 8020e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020e90:	4620      	mov	r0, r4
 8020e92:	4629      	mov	r1, r5
 8020e94:	f7df fbc0 	bl	8000618 <__aeabi_dmul>
 8020e98:	a377      	add	r3, pc, #476	@ (adr r3, 8021078 <__ieee754_asin+0x310>)
 8020e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e9e:	f7df fa03 	bl	80002a8 <__aeabi_dsub>
 8020ea2:	4622      	mov	r2, r4
 8020ea4:	462b      	mov	r3, r5
 8020ea6:	f7df fbb7 	bl	8000618 <__aeabi_dmul>
 8020eaa:	a375      	add	r3, pc, #468	@ (adr r3, 8021080 <__ieee754_asin+0x318>)
 8020eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eb0:	f7df f9fc 	bl	80002ac <__adddf3>
 8020eb4:	4622      	mov	r2, r4
 8020eb6:	462b      	mov	r3, r5
 8020eb8:	f7df fbae 	bl	8000618 <__aeabi_dmul>
 8020ebc:	a372      	add	r3, pc, #456	@ (adr r3, 8021088 <__ieee754_asin+0x320>)
 8020ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ec2:	f7df f9f1 	bl	80002a8 <__aeabi_dsub>
 8020ec6:	4622      	mov	r2, r4
 8020ec8:	462b      	mov	r3, r5
 8020eca:	f7df fba5 	bl	8000618 <__aeabi_dmul>
 8020ece:	4b72      	ldr	r3, [pc, #456]	@ (8021098 <__ieee754_asin+0x330>)
 8020ed0:	2200      	movs	r2, #0
 8020ed2:	f7df f9eb 	bl	80002ac <__adddf3>
 8020ed6:	ec45 4b10 	vmov	d0, r4, r5
 8020eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020ede:	f7ff fa0f 	bl	8020300 <__ieee754_sqrt>
 8020ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80210a0 <__ieee754_asin+0x338>)
 8020ee4:	429e      	cmp	r6, r3
 8020ee6:	ec5b ab10 	vmov	sl, fp, d0
 8020eea:	f240 80db 	bls.w	80210a4 <__ieee754_asin+0x33c>
 8020eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020ef6:	f7df fcb9 	bl	800086c <__aeabi_ddiv>
 8020efa:	4652      	mov	r2, sl
 8020efc:	465b      	mov	r3, fp
 8020efe:	f7df fb8b 	bl	8000618 <__aeabi_dmul>
 8020f02:	4652      	mov	r2, sl
 8020f04:	465b      	mov	r3, fp
 8020f06:	f7df f9d1 	bl	80002ac <__adddf3>
 8020f0a:	4602      	mov	r2, r0
 8020f0c:	460b      	mov	r3, r1
 8020f0e:	f7df f9cd 	bl	80002ac <__adddf3>
 8020f12:	a347      	add	r3, pc, #284	@ (adr r3, 8021030 <__ieee754_asin+0x2c8>)
 8020f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f18:	f7df f9c6 	bl	80002a8 <__aeabi_dsub>
 8020f1c:	4602      	mov	r2, r0
 8020f1e:	460b      	mov	r3, r1
 8020f20:	a141      	add	r1, pc, #260	@ (adr r1, 8021028 <__ieee754_asin+0x2c0>)
 8020f22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020f26:	f7df f9bf 	bl	80002a8 <__aeabi_dsub>
 8020f2a:	9b01      	ldr	r3, [sp, #4]
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	bfdc      	itt	le
 8020f30:	4602      	movle	r2, r0
 8020f32:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8020f36:	4604      	mov	r4, r0
 8020f38:	460d      	mov	r5, r1
 8020f3a:	bfdc      	itt	le
 8020f3c:	4614      	movle	r4, r2
 8020f3e:	461d      	movle	r5, r3
 8020f40:	e746      	b.n	8020dd0 <__ieee754_asin+0x68>
 8020f42:	4622      	mov	r2, r4
 8020f44:	462b      	mov	r3, r5
 8020f46:	4620      	mov	r0, r4
 8020f48:	4629      	mov	r1, r5
 8020f4a:	f7df fb65 	bl	8000618 <__aeabi_dmul>
 8020f4e:	a33c      	add	r3, pc, #240	@ (adr r3, 8021040 <__ieee754_asin+0x2d8>)
 8020f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f54:	4606      	mov	r6, r0
 8020f56:	460f      	mov	r7, r1
 8020f58:	f7df fb5e 	bl	8000618 <__aeabi_dmul>
 8020f5c:	a33a      	add	r3, pc, #232	@ (adr r3, 8021048 <__ieee754_asin+0x2e0>)
 8020f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f62:	f7df f9a3 	bl	80002ac <__adddf3>
 8020f66:	4632      	mov	r2, r6
 8020f68:	463b      	mov	r3, r7
 8020f6a:	f7df fb55 	bl	8000618 <__aeabi_dmul>
 8020f6e:	a338      	add	r3, pc, #224	@ (adr r3, 8021050 <__ieee754_asin+0x2e8>)
 8020f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f74:	f7df f998 	bl	80002a8 <__aeabi_dsub>
 8020f78:	4632      	mov	r2, r6
 8020f7a:	463b      	mov	r3, r7
 8020f7c:	f7df fb4c 	bl	8000618 <__aeabi_dmul>
 8020f80:	a335      	add	r3, pc, #212	@ (adr r3, 8021058 <__ieee754_asin+0x2f0>)
 8020f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f86:	f7df f991 	bl	80002ac <__adddf3>
 8020f8a:	4632      	mov	r2, r6
 8020f8c:	463b      	mov	r3, r7
 8020f8e:	f7df fb43 	bl	8000618 <__aeabi_dmul>
 8020f92:	a333      	add	r3, pc, #204	@ (adr r3, 8021060 <__ieee754_asin+0x2f8>)
 8020f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f98:	f7df f986 	bl	80002a8 <__aeabi_dsub>
 8020f9c:	4632      	mov	r2, r6
 8020f9e:	463b      	mov	r3, r7
 8020fa0:	f7df fb3a 	bl	8000618 <__aeabi_dmul>
 8020fa4:	a330      	add	r3, pc, #192	@ (adr r3, 8021068 <__ieee754_asin+0x300>)
 8020fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020faa:	f7df f97f 	bl	80002ac <__adddf3>
 8020fae:	4632      	mov	r2, r6
 8020fb0:	463b      	mov	r3, r7
 8020fb2:	f7df fb31 	bl	8000618 <__aeabi_dmul>
 8020fb6:	a32e      	add	r3, pc, #184	@ (adr r3, 8021070 <__ieee754_asin+0x308>)
 8020fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fbc:	4680      	mov	r8, r0
 8020fbe:	4689      	mov	r9, r1
 8020fc0:	4630      	mov	r0, r6
 8020fc2:	4639      	mov	r1, r7
 8020fc4:	f7df fb28 	bl	8000618 <__aeabi_dmul>
 8020fc8:	a32b      	add	r3, pc, #172	@ (adr r3, 8021078 <__ieee754_asin+0x310>)
 8020fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fce:	f7df f96b 	bl	80002a8 <__aeabi_dsub>
 8020fd2:	4632      	mov	r2, r6
 8020fd4:	463b      	mov	r3, r7
 8020fd6:	f7df fb1f 	bl	8000618 <__aeabi_dmul>
 8020fda:	a329      	add	r3, pc, #164	@ (adr r3, 8021080 <__ieee754_asin+0x318>)
 8020fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fe0:	f7df f964 	bl	80002ac <__adddf3>
 8020fe4:	4632      	mov	r2, r6
 8020fe6:	463b      	mov	r3, r7
 8020fe8:	f7df fb16 	bl	8000618 <__aeabi_dmul>
 8020fec:	a326      	add	r3, pc, #152	@ (adr r3, 8021088 <__ieee754_asin+0x320>)
 8020fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ff2:	f7df f959 	bl	80002a8 <__aeabi_dsub>
 8020ff6:	4632      	mov	r2, r6
 8020ff8:	463b      	mov	r3, r7
 8020ffa:	f7df fb0d 	bl	8000618 <__aeabi_dmul>
 8020ffe:	4b26      	ldr	r3, [pc, #152]	@ (8021098 <__ieee754_asin+0x330>)
 8021000:	2200      	movs	r2, #0
 8021002:	f7df f953 	bl	80002ac <__adddf3>
 8021006:	4602      	mov	r2, r0
 8021008:	460b      	mov	r3, r1
 802100a:	4640      	mov	r0, r8
 802100c:	4649      	mov	r1, r9
 802100e:	f7df fc2d 	bl	800086c <__aeabi_ddiv>
 8021012:	4622      	mov	r2, r4
 8021014:	462b      	mov	r3, r5
 8021016:	f7df faff 	bl	8000618 <__aeabi_dmul>
 802101a:	4602      	mov	r2, r0
 802101c:	460b      	mov	r3, r1
 802101e:	4620      	mov	r0, r4
 8021020:	4629      	mov	r1, r5
 8021022:	e6c6      	b.n	8020db2 <__ieee754_asin+0x4a>
 8021024:	f3af 8000 	nop.w
 8021028:	54442d18 	.word	0x54442d18
 802102c:	3ff921fb 	.word	0x3ff921fb
 8021030:	33145c07 	.word	0x33145c07
 8021034:	3c91a626 	.word	0x3c91a626
 8021038:	8800759c 	.word	0x8800759c
 802103c:	7e37e43c 	.word	0x7e37e43c
 8021040:	0dfdf709 	.word	0x0dfdf709
 8021044:	3f023de1 	.word	0x3f023de1
 8021048:	7501b288 	.word	0x7501b288
 802104c:	3f49efe0 	.word	0x3f49efe0
 8021050:	b5688f3b 	.word	0xb5688f3b
 8021054:	3fa48228 	.word	0x3fa48228
 8021058:	0e884455 	.word	0x0e884455
 802105c:	3fc9c155 	.word	0x3fc9c155
 8021060:	03eb6f7d 	.word	0x03eb6f7d
 8021064:	3fd4d612 	.word	0x3fd4d612
 8021068:	55555555 	.word	0x55555555
 802106c:	3fc55555 	.word	0x3fc55555
 8021070:	b12e9282 	.word	0xb12e9282
 8021074:	3fb3b8c5 	.word	0x3fb3b8c5
 8021078:	1b8d0159 	.word	0x1b8d0159
 802107c:	3fe6066c 	.word	0x3fe6066c
 8021080:	9c598ac8 	.word	0x9c598ac8
 8021084:	40002ae5 	.word	0x40002ae5
 8021088:	1c8a2d4b 	.word	0x1c8a2d4b
 802108c:	40033a27 	.word	0x40033a27
 8021090:	3fefffff 	.word	0x3fefffff
 8021094:	3fdfffff 	.word	0x3fdfffff
 8021098:	3ff00000 	.word	0x3ff00000
 802109c:	3fe00000 	.word	0x3fe00000
 80210a0:	3fef3332 	.word	0x3fef3332
 80210a4:	4652      	mov	r2, sl
 80210a6:	465b      	mov	r3, fp
 80210a8:	4650      	mov	r0, sl
 80210aa:	4659      	mov	r1, fp
 80210ac:	f7df f8fe 	bl	80002ac <__adddf3>
 80210b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80210b4:	4606      	mov	r6, r0
 80210b6:	460f      	mov	r7, r1
 80210b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80210bc:	f7df fbd6 	bl	800086c <__aeabi_ddiv>
 80210c0:	4602      	mov	r2, r0
 80210c2:	460b      	mov	r3, r1
 80210c4:	4630      	mov	r0, r6
 80210c6:	4639      	mov	r1, r7
 80210c8:	f7df faa6 	bl	8000618 <__aeabi_dmul>
 80210cc:	f04f 0800 	mov.w	r8, #0
 80210d0:	4606      	mov	r6, r0
 80210d2:	460f      	mov	r7, r1
 80210d4:	4642      	mov	r2, r8
 80210d6:	465b      	mov	r3, fp
 80210d8:	4640      	mov	r0, r8
 80210da:	4659      	mov	r1, fp
 80210dc:	f7df fa9c 	bl	8000618 <__aeabi_dmul>
 80210e0:	4602      	mov	r2, r0
 80210e2:	460b      	mov	r3, r1
 80210e4:	4620      	mov	r0, r4
 80210e6:	4629      	mov	r1, r5
 80210e8:	f7df f8de 	bl	80002a8 <__aeabi_dsub>
 80210ec:	4642      	mov	r2, r8
 80210ee:	4604      	mov	r4, r0
 80210f0:	460d      	mov	r5, r1
 80210f2:	465b      	mov	r3, fp
 80210f4:	4650      	mov	r0, sl
 80210f6:	4659      	mov	r1, fp
 80210f8:	f7df f8d8 	bl	80002ac <__adddf3>
 80210fc:	4602      	mov	r2, r0
 80210fe:	460b      	mov	r3, r1
 8021100:	4620      	mov	r0, r4
 8021102:	4629      	mov	r1, r5
 8021104:	f7df fbb2 	bl	800086c <__aeabi_ddiv>
 8021108:	4602      	mov	r2, r0
 802110a:	460b      	mov	r3, r1
 802110c:	f7df f8ce 	bl	80002ac <__adddf3>
 8021110:	4602      	mov	r2, r0
 8021112:	460b      	mov	r3, r1
 8021114:	a112      	add	r1, pc, #72	@ (adr r1, 8021160 <__ieee754_asin+0x3f8>)
 8021116:	e9d1 0100 	ldrd	r0, r1, [r1]
 802111a:	f7df f8c5 	bl	80002a8 <__aeabi_dsub>
 802111e:	4602      	mov	r2, r0
 8021120:	460b      	mov	r3, r1
 8021122:	4630      	mov	r0, r6
 8021124:	4639      	mov	r1, r7
 8021126:	f7df f8bf 	bl	80002a8 <__aeabi_dsub>
 802112a:	4642      	mov	r2, r8
 802112c:	4604      	mov	r4, r0
 802112e:	460d      	mov	r5, r1
 8021130:	465b      	mov	r3, fp
 8021132:	4640      	mov	r0, r8
 8021134:	4659      	mov	r1, fp
 8021136:	f7df f8b9 	bl	80002ac <__adddf3>
 802113a:	4602      	mov	r2, r0
 802113c:	460b      	mov	r3, r1
 802113e:	a10a      	add	r1, pc, #40	@ (adr r1, 8021168 <__ieee754_asin+0x400>)
 8021140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021144:	f7df f8b0 	bl	80002a8 <__aeabi_dsub>
 8021148:	4602      	mov	r2, r0
 802114a:	460b      	mov	r3, r1
 802114c:	4620      	mov	r0, r4
 802114e:	4629      	mov	r1, r5
 8021150:	f7df f8aa 	bl	80002a8 <__aeabi_dsub>
 8021154:	4602      	mov	r2, r0
 8021156:	460b      	mov	r3, r1
 8021158:	a103      	add	r1, pc, #12	@ (adr r1, 8021168 <__ieee754_asin+0x400>)
 802115a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802115e:	e6e2      	b.n	8020f26 <__ieee754_asin+0x1be>
 8021160:	33145c07 	.word	0x33145c07
 8021164:	3c91a626 	.word	0x3c91a626
 8021168:	54442d18 	.word	0x54442d18
 802116c:	3fe921fb 	.word	0x3fe921fb

08021170 <__ieee754_atan2>:
 8021170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021174:	ec57 6b11 	vmov	r6, r7, d1
 8021178:	4273      	negs	r3, r6
 802117a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80212f8 <__ieee754_atan2+0x188>
 802117e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8021182:	4333      	orrs	r3, r6
 8021184:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8021188:	4543      	cmp	r3, r8
 802118a:	ec51 0b10 	vmov	r0, r1, d0
 802118e:	4635      	mov	r5, r6
 8021190:	d809      	bhi.n	80211a6 <__ieee754_atan2+0x36>
 8021192:	4244      	negs	r4, r0
 8021194:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8021198:	4304      	orrs	r4, r0
 802119a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 802119e:	4544      	cmp	r4, r8
 80211a0:	468e      	mov	lr, r1
 80211a2:	4681      	mov	r9, r0
 80211a4:	d907      	bls.n	80211b6 <__ieee754_atan2+0x46>
 80211a6:	4632      	mov	r2, r6
 80211a8:	463b      	mov	r3, r7
 80211aa:	f7df f87f 	bl	80002ac <__adddf3>
 80211ae:	ec41 0b10 	vmov	d0, r0, r1
 80211b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80211b6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80211ba:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80211be:	4334      	orrs	r4, r6
 80211c0:	d103      	bne.n	80211ca <__ieee754_atan2+0x5a>
 80211c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80211c6:	f7fe be47 	b.w	801fe58 <atan>
 80211ca:	17bc      	asrs	r4, r7, #30
 80211cc:	f004 0402 	and.w	r4, r4, #2
 80211d0:	ea53 0909 	orrs.w	r9, r3, r9
 80211d4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80211d8:	d107      	bne.n	80211ea <__ieee754_atan2+0x7a>
 80211da:	2c02      	cmp	r4, #2
 80211dc:	d05f      	beq.n	802129e <__ieee754_atan2+0x12e>
 80211de:	2c03      	cmp	r4, #3
 80211e0:	d1e5      	bne.n	80211ae <__ieee754_atan2+0x3e>
 80211e2:	a143      	add	r1, pc, #268	@ (adr r1, 80212f0 <__ieee754_atan2+0x180>)
 80211e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80211e8:	e7e1      	b.n	80211ae <__ieee754_atan2+0x3e>
 80211ea:	4315      	orrs	r5, r2
 80211ec:	d106      	bne.n	80211fc <__ieee754_atan2+0x8c>
 80211ee:	f1be 0f00 	cmp.w	lr, #0
 80211f2:	db5f      	blt.n	80212b4 <__ieee754_atan2+0x144>
 80211f4:	a136      	add	r1, pc, #216	@ (adr r1, 80212d0 <__ieee754_atan2+0x160>)
 80211f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80211fa:	e7d8      	b.n	80211ae <__ieee754_atan2+0x3e>
 80211fc:	4542      	cmp	r2, r8
 80211fe:	d10f      	bne.n	8021220 <__ieee754_atan2+0xb0>
 8021200:	4293      	cmp	r3, r2
 8021202:	f104 34ff 	add.w	r4, r4, #4294967295
 8021206:	d107      	bne.n	8021218 <__ieee754_atan2+0xa8>
 8021208:	2c02      	cmp	r4, #2
 802120a:	d84c      	bhi.n	80212a6 <__ieee754_atan2+0x136>
 802120c:	4b36      	ldr	r3, [pc, #216]	@ (80212e8 <__ieee754_atan2+0x178>)
 802120e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021216:	e7ca      	b.n	80211ae <__ieee754_atan2+0x3e>
 8021218:	2c02      	cmp	r4, #2
 802121a:	d848      	bhi.n	80212ae <__ieee754_atan2+0x13e>
 802121c:	4b33      	ldr	r3, [pc, #204]	@ (80212ec <__ieee754_atan2+0x17c>)
 802121e:	e7f6      	b.n	802120e <__ieee754_atan2+0x9e>
 8021220:	4543      	cmp	r3, r8
 8021222:	d0e4      	beq.n	80211ee <__ieee754_atan2+0x7e>
 8021224:	1a9b      	subs	r3, r3, r2
 8021226:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 802122a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802122e:	da1e      	bge.n	802126e <__ieee754_atan2+0xfe>
 8021230:	2f00      	cmp	r7, #0
 8021232:	da01      	bge.n	8021238 <__ieee754_atan2+0xc8>
 8021234:	323c      	adds	r2, #60	@ 0x3c
 8021236:	db1e      	blt.n	8021276 <__ieee754_atan2+0x106>
 8021238:	4632      	mov	r2, r6
 802123a:	463b      	mov	r3, r7
 802123c:	f7df fb16 	bl	800086c <__aeabi_ddiv>
 8021240:	ec41 0b10 	vmov	d0, r0, r1
 8021244:	f7fe fff4 	bl	8020230 <fabs>
 8021248:	f7fe fe06 	bl	801fe58 <atan>
 802124c:	ec51 0b10 	vmov	r0, r1, d0
 8021250:	2c01      	cmp	r4, #1
 8021252:	d013      	beq.n	802127c <__ieee754_atan2+0x10c>
 8021254:	2c02      	cmp	r4, #2
 8021256:	d015      	beq.n	8021284 <__ieee754_atan2+0x114>
 8021258:	2c00      	cmp	r4, #0
 802125a:	d0a8      	beq.n	80211ae <__ieee754_atan2+0x3e>
 802125c:	a318      	add	r3, pc, #96	@ (adr r3, 80212c0 <__ieee754_atan2+0x150>)
 802125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021262:	f7df f821 	bl	80002a8 <__aeabi_dsub>
 8021266:	a318      	add	r3, pc, #96	@ (adr r3, 80212c8 <__ieee754_atan2+0x158>)
 8021268:	e9d3 2300 	ldrd	r2, r3, [r3]
 802126c:	e014      	b.n	8021298 <__ieee754_atan2+0x128>
 802126e:	a118      	add	r1, pc, #96	@ (adr r1, 80212d0 <__ieee754_atan2+0x160>)
 8021270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021274:	e7ec      	b.n	8021250 <__ieee754_atan2+0xe0>
 8021276:	2000      	movs	r0, #0
 8021278:	2100      	movs	r1, #0
 802127a:	e7e9      	b.n	8021250 <__ieee754_atan2+0xe0>
 802127c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021280:	4619      	mov	r1, r3
 8021282:	e794      	b.n	80211ae <__ieee754_atan2+0x3e>
 8021284:	a30e      	add	r3, pc, #56	@ (adr r3, 80212c0 <__ieee754_atan2+0x150>)
 8021286:	e9d3 2300 	ldrd	r2, r3, [r3]
 802128a:	f7df f80d 	bl	80002a8 <__aeabi_dsub>
 802128e:	4602      	mov	r2, r0
 8021290:	460b      	mov	r3, r1
 8021292:	a10d      	add	r1, pc, #52	@ (adr r1, 80212c8 <__ieee754_atan2+0x158>)
 8021294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021298:	f7df f806 	bl	80002a8 <__aeabi_dsub>
 802129c:	e787      	b.n	80211ae <__ieee754_atan2+0x3e>
 802129e:	a10a      	add	r1, pc, #40	@ (adr r1, 80212c8 <__ieee754_atan2+0x158>)
 80212a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80212a4:	e783      	b.n	80211ae <__ieee754_atan2+0x3e>
 80212a6:	a10c      	add	r1, pc, #48	@ (adr r1, 80212d8 <__ieee754_atan2+0x168>)
 80212a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80212ac:	e77f      	b.n	80211ae <__ieee754_atan2+0x3e>
 80212ae:	2000      	movs	r0, #0
 80212b0:	2100      	movs	r1, #0
 80212b2:	e77c      	b.n	80211ae <__ieee754_atan2+0x3e>
 80212b4:	a10a      	add	r1, pc, #40	@ (adr r1, 80212e0 <__ieee754_atan2+0x170>)
 80212b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80212ba:	e778      	b.n	80211ae <__ieee754_atan2+0x3e>
 80212bc:	f3af 8000 	nop.w
 80212c0:	33145c07 	.word	0x33145c07
 80212c4:	3ca1a626 	.word	0x3ca1a626
 80212c8:	54442d18 	.word	0x54442d18
 80212cc:	400921fb 	.word	0x400921fb
 80212d0:	54442d18 	.word	0x54442d18
 80212d4:	3ff921fb 	.word	0x3ff921fb
 80212d8:	54442d18 	.word	0x54442d18
 80212dc:	3fe921fb 	.word	0x3fe921fb
 80212e0:	54442d18 	.word	0x54442d18
 80212e4:	bff921fb 	.word	0xbff921fb
 80212e8:	080251e0 	.word	0x080251e0
 80212ec:	080251c8 	.word	0x080251c8
 80212f0:	54442d18 	.word	0x54442d18
 80212f4:	c00921fb 	.word	0xc00921fb
 80212f8:	7ff00000 	.word	0x7ff00000
 80212fc:	00000000 	.word	0x00000000

08021300 <__ieee754_exp>:
 8021300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021304:	ec55 4b10 	vmov	r4, r5, d0
 8021308:	49b1      	ldr	r1, [pc, #708]	@ (80215d0 <__ieee754_exp+0x2d0>)
 802130a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802130e:	428a      	cmp	r2, r1
 8021310:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8021314:	d936      	bls.n	8021384 <__ieee754_exp+0x84>
 8021316:	49af      	ldr	r1, [pc, #700]	@ (80215d4 <__ieee754_exp+0x2d4>)
 8021318:	428a      	cmp	r2, r1
 802131a:	d914      	bls.n	8021346 <__ieee754_exp+0x46>
 802131c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8021320:	4323      	orrs	r3, r4
 8021322:	4622      	mov	r2, r4
 8021324:	d007      	beq.n	8021336 <__ieee754_exp+0x36>
 8021326:	462b      	mov	r3, r5
 8021328:	4620      	mov	r0, r4
 802132a:	4629      	mov	r1, r5
 802132c:	f7de ffbe 	bl	80002ac <__adddf3>
 8021330:	4604      	mov	r4, r0
 8021332:	460d      	mov	r5, r1
 8021334:	e002      	b.n	802133c <__ieee754_exp+0x3c>
 8021336:	2e00      	cmp	r6, #0
 8021338:	f040 8118 	bne.w	802156c <__ieee754_exp+0x26c>
 802133c:	ec45 4b10 	vmov	d0, r4, r5
 8021340:	b004      	add	sp, #16
 8021342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021346:	a38c      	add	r3, pc, #560	@ (adr r3, 8021578 <__ieee754_exp+0x278>)
 8021348:	e9d3 2300 	ldrd	r2, r3, [r3]
 802134c:	4620      	mov	r0, r4
 802134e:	4629      	mov	r1, r5
 8021350:	f7df fbf2 	bl	8000b38 <__aeabi_dcmpgt>
 8021354:	4607      	mov	r7, r0
 8021356:	b128      	cbz	r0, 8021364 <__ieee754_exp+0x64>
 8021358:	2000      	movs	r0, #0
 802135a:	b004      	add	sp, #16
 802135c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021360:	f001 bc02 	b.w	8022b68 <__math_oflow>
 8021364:	a386      	add	r3, pc, #536	@ (adr r3, 8021580 <__ieee754_exp+0x280>)
 8021366:	e9d3 2300 	ldrd	r2, r3, [r3]
 802136a:	4620      	mov	r0, r4
 802136c:	4629      	mov	r1, r5
 802136e:	f7df fbc5 	bl	8000afc <__aeabi_dcmplt>
 8021372:	2800      	cmp	r0, #0
 8021374:	f000 8087 	beq.w	8021486 <__ieee754_exp+0x186>
 8021378:	4638      	mov	r0, r7
 802137a:	b004      	add	sp, #16
 802137c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021380:	f001 bbea 	b.w	8022b58 <__math_uflow>
 8021384:	4b94      	ldr	r3, [pc, #592]	@ (80215d8 <__ieee754_exp+0x2d8>)
 8021386:	429a      	cmp	r2, r3
 8021388:	f240 80a9 	bls.w	80214de <__ieee754_exp+0x1de>
 802138c:	4b93      	ldr	r3, [pc, #588]	@ (80215dc <__ieee754_exp+0x2dc>)
 802138e:	429a      	cmp	r2, r3
 8021390:	d879      	bhi.n	8021486 <__ieee754_exp+0x186>
 8021392:	4b93      	ldr	r3, [pc, #588]	@ (80215e0 <__ieee754_exp+0x2e0>)
 8021394:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021398:	e9d3 2300 	ldrd	r2, r3, [r3]
 802139c:	4620      	mov	r0, r4
 802139e:	4629      	mov	r1, r5
 80213a0:	f7de ff82 	bl	80002a8 <__aeabi_dsub>
 80213a4:	4b8f      	ldr	r3, [pc, #572]	@ (80215e4 <__ieee754_exp+0x2e4>)
 80213a6:	00f7      	lsls	r7, r6, #3
 80213a8:	443b      	add	r3, r7
 80213aa:	ed93 7b00 	vldr	d7, [r3]
 80213ae:	ed8d 7b00 	vstr	d7, [sp]
 80213b2:	f086 0a01 	eor.w	sl, r6, #1
 80213b6:	4680      	mov	r8, r0
 80213b8:	4689      	mov	r9, r1
 80213ba:	ebaa 0a06 	sub.w	sl, sl, r6
 80213be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80213c2:	4640      	mov	r0, r8
 80213c4:	4649      	mov	r1, r9
 80213c6:	f7de ff6f 	bl	80002a8 <__aeabi_dsub>
 80213ca:	4604      	mov	r4, r0
 80213cc:	460d      	mov	r5, r1
 80213ce:	4622      	mov	r2, r4
 80213d0:	462b      	mov	r3, r5
 80213d2:	4620      	mov	r0, r4
 80213d4:	4629      	mov	r1, r5
 80213d6:	f7df f91f 	bl	8000618 <__aeabi_dmul>
 80213da:	a36b      	add	r3, pc, #428	@ (adr r3, 8021588 <__ieee754_exp+0x288>)
 80213dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213e0:	4606      	mov	r6, r0
 80213e2:	460f      	mov	r7, r1
 80213e4:	f7df f918 	bl	8000618 <__aeabi_dmul>
 80213e8:	a369      	add	r3, pc, #420	@ (adr r3, 8021590 <__ieee754_exp+0x290>)
 80213ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213ee:	f7de ff5b 	bl	80002a8 <__aeabi_dsub>
 80213f2:	4632      	mov	r2, r6
 80213f4:	463b      	mov	r3, r7
 80213f6:	f7df f90f 	bl	8000618 <__aeabi_dmul>
 80213fa:	a367      	add	r3, pc, #412	@ (adr r3, 8021598 <__ieee754_exp+0x298>)
 80213fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021400:	f7de ff54 	bl	80002ac <__adddf3>
 8021404:	4632      	mov	r2, r6
 8021406:	463b      	mov	r3, r7
 8021408:	f7df f906 	bl	8000618 <__aeabi_dmul>
 802140c:	a364      	add	r3, pc, #400	@ (adr r3, 80215a0 <__ieee754_exp+0x2a0>)
 802140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021412:	f7de ff49 	bl	80002a8 <__aeabi_dsub>
 8021416:	4632      	mov	r2, r6
 8021418:	463b      	mov	r3, r7
 802141a:	f7df f8fd 	bl	8000618 <__aeabi_dmul>
 802141e:	a362      	add	r3, pc, #392	@ (adr r3, 80215a8 <__ieee754_exp+0x2a8>)
 8021420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021424:	f7de ff42 	bl	80002ac <__adddf3>
 8021428:	4632      	mov	r2, r6
 802142a:	463b      	mov	r3, r7
 802142c:	f7df f8f4 	bl	8000618 <__aeabi_dmul>
 8021430:	4602      	mov	r2, r0
 8021432:	460b      	mov	r3, r1
 8021434:	4620      	mov	r0, r4
 8021436:	4629      	mov	r1, r5
 8021438:	f7de ff36 	bl	80002a8 <__aeabi_dsub>
 802143c:	4602      	mov	r2, r0
 802143e:	460b      	mov	r3, r1
 8021440:	4606      	mov	r6, r0
 8021442:	460f      	mov	r7, r1
 8021444:	4620      	mov	r0, r4
 8021446:	4629      	mov	r1, r5
 8021448:	f7df f8e6 	bl	8000618 <__aeabi_dmul>
 802144c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021450:	f1ba 0f00 	cmp.w	sl, #0
 8021454:	d15c      	bne.n	8021510 <__ieee754_exp+0x210>
 8021456:	2200      	movs	r2, #0
 8021458:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802145c:	4630      	mov	r0, r6
 802145e:	4639      	mov	r1, r7
 8021460:	f7de ff22 	bl	80002a8 <__aeabi_dsub>
 8021464:	4602      	mov	r2, r0
 8021466:	460b      	mov	r3, r1
 8021468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802146c:	f7df f9fe 	bl	800086c <__aeabi_ddiv>
 8021470:	4622      	mov	r2, r4
 8021472:	462b      	mov	r3, r5
 8021474:	f7de ff18 	bl	80002a8 <__aeabi_dsub>
 8021478:	4602      	mov	r2, r0
 802147a:	460b      	mov	r3, r1
 802147c:	2000      	movs	r0, #0
 802147e:	495a      	ldr	r1, [pc, #360]	@ (80215e8 <__ieee754_exp+0x2e8>)
 8021480:	f7de ff12 	bl	80002a8 <__aeabi_dsub>
 8021484:	e754      	b.n	8021330 <__ieee754_exp+0x30>
 8021486:	4b59      	ldr	r3, [pc, #356]	@ (80215ec <__ieee754_exp+0x2ec>)
 8021488:	4620      	mov	r0, r4
 802148a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 802148e:	4629      	mov	r1, r5
 8021490:	a347      	add	r3, pc, #284	@ (adr r3, 80215b0 <__ieee754_exp+0x2b0>)
 8021492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021496:	f7df f8bf 	bl	8000618 <__aeabi_dmul>
 802149a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802149e:	f7de ff05 	bl	80002ac <__adddf3>
 80214a2:	f7df fb69 	bl	8000b78 <__aeabi_d2iz>
 80214a6:	4682      	mov	sl, r0
 80214a8:	f7df f84c 	bl	8000544 <__aeabi_i2d>
 80214ac:	a342      	add	r3, pc, #264	@ (adr r3, 80215b8 <__ieee754_exp+0x2b8>)
 80214ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214b2:	4606      	mov	r6, r0
 80214b4:	460f      	mov	r7, r1
 80214b6:	f7df f8af 	bl	8000618 <__aeabi_dmul>
 80214ba:	4602      	mov	r2, r0
 80214bc:	460b      	mov	r3, r1
 80214be:	4620      	mov	r0, r4
 80214c0:	4629      	mov	r1, r5
 80214c2:	f7de fef1 	bl	80002a8 <__aeabi_dsub>
 80214c6:	a33e      	add	r3, pc, #248	@ (adr r3, 80215c0 <__ieee754_exp+0x2c0>)
 80214c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214cc:	4680      	mov	r8, r0
 80214ce:	4689      	mov	r9, r1
 80214d0:	4630      	mov	r0, r6
 80214d2:	4639      	mov	r1, r7
 80214d4:	f7df f8a0 	bl	8000618 <__aeabi_dmul>
 80214d8:	e9cd 0100 	strd	r0, r1, [sp]
 80214dc:	e76f      	b.n	80213be <__ieee754_exp+0xbe>
 80214de:	4b44      	ldr	r3, [pc, #272]	@ (80215f0 <__ieee754_exp+0x2f0>)
 80214e0:	429a      	cmp	r2, r3
 80214e2:	d810      	bhi.n	8021506 <__ieee754_exp+0x206>
 80214e4:	a338      	add	r3, pc, #224	@ (adr r3, 80215c8 <__ieee754_exp+0x2c8>)
 80214e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214ea:	4620      	mov	r0, r4
 80214ec:	4629      	mov	r1, r5
 80214ee:	f7de fedd 	bl	80002ac <__adddf3>
 80214f2:	4b3d      	ldr	r3, [pc, #244]	@ (80215e8 <__ieee754_exp+0x2e8>)
 80214f4:	2200      	movs	r2, #0
 80214f6:	f7df fb1f 	bl	8000b38 <__aeabi_dcmpgt>
 80214fa:	b138      	cbz	r0, 802150c <__ieee754_exp+0x20c>
 80214fc:	4b3a      	ldr	r3, [pc, #232]	@ (80215e8 <__ieee754_exp+0x2e8>)
 80214fe:	2200      	movs	r2, #0
 8021500:	4620      	mov	r0, r4
 8021502:	4629      	mov	r1, r5
 8021504:	e712      	b.n	802132c <__ieee754_exp+0x2c>
 8021506:	f04f 0a00 	mov.w	sl, #0
 802150a:	e760      	b.n	80213ce <__ieee754_exp+0xce>
 802150c:	4682      	mov	sl, r0
 802150e:	e75e      	b.n	80213ce <__ieee754_exp+0xce>
 8021510:	4632      	mov	r2, r6
 8021512:	463b      	mov	r3, r7
 8021514:	2000      	movs	r0, #0
 8021516:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 802151a:	f7de fec5 	bl	80002a8 <__aeabi_dsub>
 802151e:	4602      	mov	r2, r0
 8021520:	460b      	mov	r3, r1
 8021522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021526:	f7df f9a1 	bl	800086c <__aeabi_ddiv>
 802152a:	4602      	mov	r2, r0
 802152c:	460b      	mov	r3, r1
 802152e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021532:	f7de feb9 	bl	80002a8 <__aeabi_dsub>
 8021536:	4642      	mov	r2, r8
 8021538:	464b      	mov	r3, r9
 802153a:	f7de feb5 	bl	80002a8 <__aeabi_dsub>
 802153e:	4602      	mov	r2, r0
 8021540:	460b      	mov	r3, r1
 8021542:	2000      	movs	r0, #0
 8021544:	4928      	ldr	r1, [pc, #160]	@ (80215e8 <__ieee754_exp+0x2e8>)
 8021546:	f7de feaf 	bl	80002a8 <__aeabi_dsub>
 802154a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 802154e:	4592      	cmp	sl, r2
 8021550:	db02      	blt.n	8021558 <__ieee754_exp+0x258>
 8021552:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021556:	e6eb      	b.n	8021330 <__ieee754_exp+0x30>
 8021558:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 802155c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021560:	2200      	movs	r2, #0
 8021562:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8021566:	f7df f857 	bl	8000618 <__aeabi_dmul>
 802156a:	e6e1      	b.n	8021330 <__ieee754_exp+0x30>
 802156c:	2400      	movs	r4, #0
 802156e:	2500      	movs	r5, #0
 8021570:	e6e4      	b.n	802133c <__ieee754_exp+0x3c>
 8021572:	bf00      	nop
 8021574:	f3af 8000 	nop.w
 8021578:	fefa39ef 	.word	0xfefa39ef
 802157c:	40862e42 	.word	0x40862e42
 8021580:	d52d3051 	.word	0xd52d3051
 8021584:	c0874910 	.word	0xc0874910
 8021588:	72bea4d0 	.word	0x72bea4d0
 802158c:	3e663769 	.word	0x3e663769
 8021590:	c5d26bf1 	.word	0xc5d26bf1
 8021594:	3ebbbd41 	.word	0x3ebbbd41
 8021598:	af25de2c 	.word	0xaf25de2c
 802159c:	3f11566a 	.word	0x3f11566a
 80215a0:	16bebd93 	.word	0x16bebd93
 80215a4:	3f66c16c 	.word	0x3f66c16c
 80215a8:	5555553e 	.word	0x5555553e
 80215ac:	3fc55555 	.word	0x3fc55555
 80215b0:	652b82fe 	.word	0x652b82fe
 80215b4:	3ff71547 	.word	0x3ff71547
 80215b8:	fee00000 	.word	0xfee00000
 80215bc:	3fe62e42 	.word	0x3fe62e42
 80215c0:	35793c76 	.word	0x35793c76
 80215c4:	3dea39ef 	.word	0x3dea39ef
 80215c8:	8800759c 	.word	0x8800759c
 80215cc:	7e37e43c 	.word	0x7e37e43c
 80215d0:	40862e41 	.word	0x40862e41
 80215d4:	7fefffff 	.word	0x7fefffff
 80215d8:	3fd62e42 	.word	0x3fd62e42
 80215dc:	3ff0a2b1 	.word	0x3ff0a2b1
 80215e0:	08025208 	.word	0x08025208
 80215e4:	080251f8 	.word	0x080251f8
 80215e8:	3ff00000 	.word	0x3ff00000
 80215ec:	08025218 	.word	0x08025218
 80215f0:	3defffff 	.word	0x3defffff

080215f4 <__ieee754_fmod>:
 80215f4:	ec53 2b11 	vmov	r2, r3, d1
 80215f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80215fc:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 8021600:	ea52 0408 	orrs.w	r4, r2, r8
 8021604:	ec51 0b10 	vmov	r0, r1, d0
 8021608:	461e      	mov	r6, r3
 802160a:	4696      	mov	lr, r2
 802160c:	4694      	mov	ip, r2
 802160e:	d00c      	beq.n	802162a <__ieee754_fmod+0x36>
 8021610:	4d76      	ldr	r5, [pc, #472]	@ (80217ec <__ieee754_fmod+0x1f8>)
 8021612:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 8021616:	45a9      	cmp	r9, r5
 8021618:	460c      	mov	r4, r1
 802161a:	d806      	bhi.n	802162a <__ieee754_fmod+0x36>
 802161c:	4255      	negs	r5, r2
 802161e:	4f74      	ldr	r7, [pc, #464]	@ (80217f0 <__ieee754_fmod+0x1fc>)
 8021620:	4315      	orrs	r5, r2
 8021622:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 8021626:	42bd      	cmp	r5, r7
 8021628:	d909      	bls.n	802163e <__ieee754_fmod+0x4a>
 802162a:	f7de fff5 	bl	8000618 <__aeabi_dmul>
 802162e:	4602      	mov	r2, r0
 8021630:	460b      	mov	r3, r1
 8021632:	f7df f91b 	bl	800086c <__aeabi_ddiv>
 8021636:	ec41 0b10 	vmov	d0, r0, r1
 802163a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802163e:	45c1      	cmp	r9, r8
 8021640:	4682      	mov	sl, r0
 8021642:	4607      	mov	r7, r0
 8021644:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8021648:	dc09      	bgt.n	802165e <__ieee754_fmod+0x6a>
 802164a:	dbf4      	blt.n	8021636 <__ieee754_fmod+0x42>
 802164c:	4282      	cmp	r2, r0
 802164e:	d8f2      	bhi.n	8021636 <__ieee754_fmod+0x42>
 8021650:	d105      	bne.n	802165e <__ieee754_fmod+0x6a>
 8021652:	4b68      	ldr	r3, [pc, #416]	@ (80217f4 <__ieee754_fmod+0x200>)
 8021654:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8021658:	e9d3 0100 	ldrd	r0, r1, [r3]
 802165c:	e7eb      	b.n	8021636 <__ieee754_fmod+0x42>
 802165e:	4964      	ldr	r1, [pc, #400]	@ (80217f0 <__ieee754_fmod+0x1fc>)
 8021660:	420c      	tst	r4, r1
 8021662:	d148      	bne.n	80216f6 <__ieee754_fmod+0x102>
 8021664:	f1b9 0f00 	cmp.w	r9, #0
 8021668:	d13d      	bne.n	80216e6 <__ieee754_fmod+0xf2>
 802166a:	4a63      	ldr	r2, [pc, #396]	@ (80217f8 <__ieee754_fmod+0x204>)
 802166c:	4653      	mov	r3, sl
 802166e:	2b00      	cmp	r3, #0
 8021670:	dc36      	bgt.n	80216e0 <__ieee754_fmod+0xec>
 8021672:	420e      	tst	r6, r1
 8021674:	d14f      	bne.n	8021716 <__ieee754_fmod+0x122>
 8021676:	f1b8 0f00 	cmp.w	r8, #0
 802167a:	d144      	bne.n	8021706 <__ieee754_fmod+0x112>
 802167c:	4b5e      	ldr	r3, [pc, #376]	@ (80217f8 <__ieee754_fmod+0x204>)
 802167e:	4671      	mov	r1, lr
 8021680:	2900      	cmp	r1, #0
 8021682:	dc3d      	bgt.n	8021700 <__ieee754_fmod+0x10c>
 8021684:	485d      	ldr	r0, [pc, #372]	@ (80217fc <__ieee754_fmod+0x208>)
 8021686:	4282      	cmp	r2, r0
 8021688:	db4a      	blt.n	8021720 <__ieee754_fmod+0x12c>
 802168a:	f3c4 0113 	ubfx	r1, r4, #0, #20
 802168e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8021692:	485a      	ldr	r0, [pc, #360]	@ (80217fc <__ieee754_fmod+0x208>)
 8021694:	4283      	cmp	r3, r0
 8021696:	db57      	blt.n	8021748 <__ieee754_fmod+0x154>
 8021698:	f3c6 0613 	ubfx	r6, r6, #0, #20
 802169c:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80216a0:	1ad0      	subs	r0, r2, r3
 80216a2:	1b8a      	subs	r2, r1, r6
 80216a4:	eba7 040c 	sub.w	r4, r7, ip
 80216a8:	2800      	cmp	r0, #0
 80216aa:	d162      	bne.n	8021772 <__ieee754_fmod+0x17e>
 80216ac:	4567      	cmp	r7, ip
 80216ae:	bf38      	it	cc
 80216b0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80216b4:	2a00      	cmp	r2, #0
 80216b6:	bfbc      	itt	lt
 80216b8:	463c      	movlt	r4, r7
 80216ba:	460a      	movlt	r2, r1
 80216bc:	ea52 0104 	orrs.w	r1, r2, r4
 80216c0:	d0c7      	beq.n	8021652 <__ieee754_fmod+0x5e>
 80216c2:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80216c6:	db69      	blt.n	802179c <__ieee754_fmod+0x1a8>
 80216c8:	494c      	ldr	r1, [pc, #304]	@ (80217fc <__ieee754_fmod+0x208>)
 80216ca:	428b      	cmp	r3, r1
 80216cc:	db6c      	blt.n	80217a8 <__ieee754_fmod+0x1b4>
 80216ce:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 80216d2:	432a      	orrs	r2, r5
 80216d4:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80216d8:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 80216dc:	4620      	mov	r0, r4
 80216de:	e7aa      	b.n	8021636 <__ieee754_fmod+0x42>
 80216e0:	3a01      	subs	r2, #1
 80216e2:	005b      	lsls	r3, r3, #1
 80216e4:	e7c3      	b.n	802166e <__ieee754_fmod+0x7a>
 80216e6:	4a45      	ldr	r2, [pc, #276]	@ (80217fc <__ieee754_fmod+0x208>)
 80216e8:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	ddc0      	ble.n	8021672 <__ieee754_fmod+0x7e>
 80216f0:	3a01      	subs	r2, #1
 80216f2:	005b      	lsls	r3, r3, #1
 80216f4:	e7fa      	b.n	80216ec <__ieee754_fmod+0xf8>
 80216f6:	ea4f 5229 	mov.w	r2, r9, asr #20
 80216fa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80216fe:	e7b8      	b.n	8021672 <__ieee754_fmod+0x7e>
 8021700:	3b01      	subs	r3, #1
 8021702:	0049      	lsls	r1, r1, #1
 8021704:	e7bc      	b.n	8021680 <__ieee754_fmod+0x8c>
 8021706:	4b3d      	ldr	r3, [pc, #244]	@ (80217fc <__ieee754_fmod+0x208>)
 8021708:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 802170c:	2900      	cmp	r1, #0
 802170e:	ddb9      	ble.n	8021684 <__ieee754_fmod+0x90>
 8021710:	3b01      	subs	r3, #1
 8021712:	0049      	lsls	r1, r1, #1
 8021714:	e7fa      	b.n	802170c <__ieee754_fmod+0x118>
 8021716:	ea4f 5328 	mov.w	r3, r8, asr #20
 802171a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802171e:	e7b1      	b.n	8021684 <__ieee754_fmod+0x90>
 8021720:	1a80      	subs	r0, r0, r2
 8021722:	281f      	cmp	r0, #31
 8021724:	dc0a      	bgt.n	802173c <__ieee754_fmod+0x148>
 8021726:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 802172a:	fa09 f900 	lsl.w	r9, r9, r0
 802172e:	fa2a f101 	lsr.w	r1, sl, r1
 8021732:	ea41 0109 	orr.w	r1, r1, r9
 8021736:	fa0a f700 	lsl.w	r7, sl, r0
 802173a:	e7aa      	b.n	8021692 <__ieee754_fmod+0x9e>
 802173c:	4930      	ldr	r1, [pc, #192]	@ (8021800 <__ieee754_fmod+0x20c>)
 802173e:	1a89      	subs	r1, r1, r2
 8021740:	fa0a f101 	lsl.w	r1, sl, r1
 8021744:	2700      	movs	r7, #0
 8021746:	e7a4      	b.n	8021692 <__ieee754_fmod+0x9e>
 8021748:	1ac0      	subs	r0, r0, r3
 802174a:	281f      	cmp	r0, #31
 802174c:	dc0a      	bgt.n	8021764 <__ieee754_fmod+0x170>
 802174e:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 8021752:	fa08 f800 	lsl.w	r8, r8, r0
 8021756:	fa2e f606 	lsr.w	r6, lr, r6
 802175a:	ea46 0608 	orr.w	r6, r6, r8
 802175e:	fa0e fc00 	lsl.w	ip, lr, r0
 8021762:	e79d      	b.n	80216a0 <__ieee754_fmod+0xac>
 8021764:	4e26      	ldr	r6, [pc, #152]	@ (8021800 <__ieee754_fmod+0x20c>)
 8021766:	1af6      	subs	r6, r6, r3
 8021768:	fa0e f606 	lsl.w	r6, lr, r6
 802176c:	f04f 0c00 	mov.w	ip, #0
 8021770:	e796      	b.n	80216a0 <__ieee754_fmod+0xac>
 8021772:	4567      	cmp	r7, ip
 8021774:	bf38      	it	cc
 8021776:	f102 32ff 	addcc.w	r2, r2, #4294967295
 802177a:	2a00      	cmp	r2, #0
 802177c:	da05      	bge.n	802178a <__ieee754_fmod+0x196>
 802177e:	0ffa      	lsrs	r2, r7, #31
 8021780:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021784:	007f      	lsls	r7, r7, #1
 8021786:	3801      	subs	r0, #1
 8021788:	e78b      	b.n	80216a2 <__ieee754_fmod+0xae>
 802178a:	ea52 0104 	orrs.w	r1, r2, r4
 802178e:	f43f af60 	beq.w	8021652 <__ieee754_fmod+0x5e>
 8021792:	0fe1      	lsrs	r1, r4, #31
 8021794:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8021798:	0067      	lsls	r7, r4, #1
 802179a:	e7f4      	b.n	8021786 <__ieee754_fmod+0x192>
 802179c:	0fe1      	lsrs	r1, r4, #31
 802179e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80217a2:	0064      	lsls	r4, r4, #1
 80217a4:	3b01      	subs	r3, #1
 80217a6:	e78c      	b.n	80216c2 <__ieee754_fmod+0xce>
 80217a8:	1ac9      	subs	r1, r1, r3
 80217aa:	2914      	cmp	r1, #20
 80217ac:	dc0a      	bgt.n	80217c4 <__ieee754_fmod+0x1d0>
 80217ae:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 80217b2:	fa02 f303 	lsl.w	r3, r2, r3
 80217b6:	40cc      	lsrs	r4, r1
 80217b8:	4323      	orrs	r3, r4
 80217ba:	410a      	asrs	r2, r1
 80217bc:	ea42 0105 	orr.w	r1, r2, r5
 80217c0:	4618      	mov	r0, r3
 80217c2:	e738      	b.n	8021636 <__ieee754_fmod+0x42>
 80217c4:	291f      	cmp	r1, #31
 80217c6:	dc07      	bgt.n	80217d8 <__ieee754_fmod+0x1e4>
 80217c8:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 80217cc:	40cc      	lsrs	r4, r1
 80217ce:	fa02 f303 	lsl.w	r3, r2, r3
 80217d2:	4323      	orrs	r3, r4
 80217d4:	462a      	mov	r2, r5
 80217d6:	e7f1      	b.n	80217bc <__ieee754_fmod+0x1c8>
 80217d8:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 80217dc:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80217e0:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 80217e4:	33e2      	adds	r3, #226	@ 0xe2
 80217e6:	fa42 f303 	asr.w	r3, r2, r3
 80217ea:	e7f3      	b.n	80217d4 <__ieee754_fmod+0x1e0>
 80217ec:	7fefffff 	.word	0x7fefffff
 80217f0:	7ff00000 	.word	0x7ff00000
 80217f4:	08025228 	.word	0x08025228
 80217f8:	fffffbed 	.word	0xfffffbed
 80217fc:	fffffc02 	.word	0xfffffc02
 8021800:	fffffbe2 	.word	0xfffffbe2
 8021804:	00000000 	.word	0x00000000

08021808 <__ieee754_log>:
 8021808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802180c:	ec51 0b10 	vmov	r0, r1, d0
 8021810:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8021814:	b087      	sub	sp, #28
 8021816:	460d      	mov	r5, r1
 8021818:	da26      	bge.n	8021868 <__ieee754_log+0x60>
 802181a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802181e:	4303      	orrs	r3, r0
 8021820:	4602      	mov	r2, r0
 8021822:	d10a      	bne.n	802183a <__ieee754_log+0x32>
 8021824:	49ce      	ldr	r1, [pc, #824]	@ (8021b60 <__ieee754_log+0x358>)
 8021826:	2200      	movs	r2, #0
 8021828:	2300      	movs	r3, #0
 802182a:	2000      	movs	r0, #0
 802182c:	f7df f81e 	bl	800086c <__aeabi_ddiv>
 8021830:	ec41 0b10 	vmov	d0, r0, r1
 8021834:	b007      	add	sp, #28
 8021836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802183a:	2900      	cmp	r1, #0
 802183c:	da05      	bge.n	802184a <__ieee754_log+0x42>
 802183e:	460b      	mov	r3, r1
 8021840:	f7de fd32 	bl	80002a8 <__aeabi_dsub>
 8021844:	2200      	movs	r2, #0
 8021846:	2300      	movs	r3, #0
 8021848:	e7f0      	b.n	802182c <__ieee754_log+0x24>
 802184a:	4bc6      	ldr	r3, [pc, #792]	@ (8021b64 <__ieee754_log+0x35c>)
 802184c:	2200      	movs	r2, #0
 802184e:	f7de fee3 	bl	8000618 <__aeabi_dmul>
 8021852:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8021856:	460d      	mov	r5, r1
 8021858:	4ac3      	ldr	r2, [pc, #780]	@ (8021b68 <__ieee754_log+0x360>)
 802185a:	4295      	cmp	r5, r2
 802185c:	dd06      	ble.n	802186c <__ieee754_log+0x64>
 802185e:	4602      	mov	r2, r0
 8021860:	460b      	mov	r3, r1
 8021862:	f7de fd23 	bl	80002ac <__adddf3>
 8021866:	e7e3      	b.n	8021830 <__ieee754_log+0x28>
 8021868:	2300      	movs	r3, #0
 802186a:	e7f5      	b.n	8021858 <__ieee754_log+0x50>
 802186c:	152c      	asrs	r4, r5, #20
 802186e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8021872:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8021876:	441c      	add	r4, r3
 8021878:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 802187c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8021880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8021884:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8021888:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 802188c:	ea42 0105 	orr.w	r1, r2, r5
 8021890:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8021894:	2200      	movs	r2, #0
 8021896:	4bb5      	ldr	r3, [pc, #724]	@ (8021b6c <__ieee754_log+0x364>)
 8021898:	f7de fd06 	bl	80002a8 <__aeabi_dsub>
 802189c:	1cab      	adds	r3, r5, #2
 802189e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80218a2:	2b02      	cmp	r3, #2
 80218a4:	4682      	mov	sl, r0
 80218a6:	468b      	mov	fp, r1
 80218a8:	f04f 0200 	mov.w	r2, #0
 80218ac:	dc53      	bgt.n	8021956 <__ieee754_log+0x14e>
 80218ae:	2300      	movs	r3, #0
 80218b0:	f7df f91a 	bl	8000ae8 <__aeabi_dcmpeq>
 80218b4:	b1d0      	cbz	r0, 80218ec <__ieee754_log+0xe4>
 80218b6:	2c00      	cmp	r4, #0
 80218b8:	f000 8120 	beq.w	8021afc <__ieee754_log+0x2f4>
 80218bc:	4620      	mov	r0, r4
 80218be:	f7de fe41 	bl	8000544 <__aeabi_i2d>
 80218c2:	a391      	add	r3, pc, #580	@ (adr r3, 8021b08 <__ieee754_log+0x300>)
 80218c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218c8:	4606      	mov	r6, r0
 80218ca:	460f      	mov	r7, r1
 80218cc:	f7de fea4 	bl	8000618 <__aeabi_dmul>
 80218d0:	a38f      	add	r3, pc, #572	@ (adr r3, 8021b10 <__ieee754_log+0x308>)
 80218d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218d6:	4604      	mov	r4, r0
 80218d8:	460d      	mov	r5, r1
 80218da:	4630      	mov	r0, r6
 80218dc:	4639      	mov	r1, r7
 80218de:	f7de fe9b 	bl	8000618 <__aeabi_dmul>
 80218e2:	4602      	mov	r2, r0
 80218e4:	460b      	mov	r3, r1
 80218e6:	4620      	mov	r0, r4
 80218e8:	4629      	mov	r1, r5
 80218ea:	e7ba      	b.n	8021862 <__ieee754_log+0x5a>
 80218ec:	a38a      	add	r3, pc, #552	@ (adr r3, 8021b18 <__ieee754_log+0x310>)
 80218ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218f2:	4650      	mov	r0, sl
 80218f4:	4659      	mov	r1, fp
 80218f6:	f7de fe8f 	bl	8000618 <__aeabi_dmul>
 80218fa:	4602      	mov	r2, r0
 80218fc:	460b      	mov	r3, r1
 80218fe:	2000      	movs	r0, #0
 8021900:	499b      	ldr	r1, [pc, #620]	@ (8021b70 <__ieee754_log+0x368>)
 8021902:	f7de fcd1 	bl	80002a8 <__aeabi_dsub>
 8021906:	4652      	mov	r2, sl
 8021908:	4606      	mov	r6, r0
 802190a:	460f      	mov	r7, r1
 802190c:	465b      	mov	r3, fp
 802190e:	4650      	mov	r0, sl
 8021910:	4659      	mov	r1, fp
 8021912:	f7de fe81 	bl	8000618 <__aeabi_dmul>
 8021916:	4602      	mov	r2, r0
 8021918:	460b      	mov	r3, r1
 802191a:	4630      	mov	r0, r6
 802191c:	4639      	mov	r1, r7
 802191e:	f7de fe7b 	bl	8000618 <__aeabi_dmul>
 8021922:	4606      	mov	r6, r0
 8021924:	460f      	mov	r7, r1
 8021926:	b914      	cbnz	r4, 802192e <__ieee754_log+0x126>
 8021928:	4632      	mov	r2, r6
 802192a:	463b      	mov	r3, r7
 802192c:	e0a0      	b.n	8021a70 <__ieee754_log+0x268>
 802192e:	4620      	mov	r0, r4
 8021930:	f7de fe08 	bl	8000544 <__aeabi_i2d>
 8021934:	a374      	add	r3, pc, #464	@ (adr r3, 8021b08 <__ieee754_log+0x300>)
 8021936:	e9d3 2300 	ldrd	r2, r3, [r3]
 802193a:	4680      	mov	r8, r0
 802193c:	4689      	mov	r9, r1
 802193e:	f7de fe6b 	bl	8000618 <__aeabi_dmul>
 8021942:	a373      	add	r3, pc, #460	@ (adr r3, 8021b10 <__ieee754_log+0x308>)
 8021944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021948:	4604      	mov	r4, r0
 802194a:	460d      	mov	r5, r1
 802194c:	4640      	mov	r0, r8
 802194e:	4649      	mov	r1, r9
 8021950:	f7de fe62 	bl	8000618 <__aeabi_dmul>
 8021954:	e0a5      	b.n	8021aa2 <__ieee754_log+0x29a>
 8021956:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802195a:	f7de fca7 	bl	80002ac <__adddf3>
 802195e:	4602      	mov	r2, r0
 8021960:	460b      	mov	r3, r1
 8021962:	4650      	mov	r0, sl
 8021964:	4659      	mov	r1, fp
 8021966:	f7de ff81 	bl	800086c <__aeabi_ddiv>
 802196a:	e9cd 0100 	strd	r0, r1, [sp]
 802196e:	4620      	mov	r0, r4
 8021970:	f7de fde8 	bl	8000544 <__aeabi_i2d>
 8021974:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802197c:	4610      	mov	r0, r2
 802197e:	4619      	mov	r1, r3
 8021980:	f7de fe4a 	bl	8000618 <__aeabi_dmul>
 8021984:	4602      	mov	r2, r0
 8021986:	460b      	mov	r3, r1
 8021988:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802198c:	f7de fe44 	bl	8000618 <__aeabi_dmul>
 8021990:	a363      	add	r3, pc, #396	@ (adr r3, 8021b20 <__ieee754_log+0x318>)
 8021992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021996:	4680      	mov	r8, r0
 8021998:	4689      	mov	r9, r1
 802199a:	f7de fe3d 	bl	8000618 <__aeabi_dmul>
 802199e:	a362      	add	r3, pc, #392	@ (adr r3, 8021b28 <__ieee754_log+0x320>)
 80219a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219a4:	f7de fc82 	bl	80002ac <__adddf3>
 80219a8:	4642      	mov	r2, r8
 80219aa:	464b      	mov	r3, r9
 80219ac:	f7de fe34 	bl	8000618 <__aeabi_dmul>
 80219b0:	a35f      	add	r3, pc, #380	@ (adr r3, 8021b30 <__ieee754_log+0x328>)
 80219b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219b6:	f7de fc79 	bl	80002ac <__adddf3>
 80219ba:	4642      	mov	r2, r8
 80219bc:	464b      	mov	r3, r9
 80219be:	f7de fe2b 	bl	8000618 <__aeabi_dmul>
 80219c2:	a35d      	add	r3, pc, #372	@ (adr r3, 8021b38 <__ieee754_log+0x330>)
 80219c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219c8:	f7de fc70 	bl	80002ac <__adddf3>
 80219cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80219d0:	f7de fe22 	bl	8000618 <__aeabi_dmul>
 80219d4:	a35a      	add	r3, pc, #360	@ (adr r3, 8021b40 <__ieee754_log+0x338>)
 80219d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80219de:	4640      	mov	r0, r8
 80219e0:	4649      	mov	r1, r9
 80219e2:	f7de fe19 	bl	8000618 <__aeabi_dmul>
 80219e6:	a358      	add	r3, pc, #352	@ (adr r3, 8021b48 <__ieee754_log+0x340>)
 80219e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219ec:	f7de fc5e 	bl	80002ac <__adddf3>
 80219f0:	4642      	mov	r2, r8
 80219f2:	464b      	mov	r3, r9
 80219f4:	f7de fe10 	bl	8000618 <__aeabi_dmul>
 80219f8:	a355      	add	r3, pc, #340	@ (adr r3, 8021b50 <__ieee754_log+0x348>)
 80219fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219fe:	f7de fc55 	bl	80002ac <__adddf3>
 8021a02:	4642      	mov	r2, r8
 8021a04:	464b      	mov	r3, r9
 8021a06:	f7de fe07 	bl	8000618 <__aeabi_dmul>
 8021a0a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8021a0e:	4602      	mov	r2, r0
 8021a10:	460b      	mov	r3, r1
 8021a12:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8021a16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021a1a:	f7de fc47 	bl	80002ac <__adddf3>
 8021a1e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8021a22:	3551      	adds	r5, #81	@ 0x51
 8021a24:	4335      	orrs	r5, r6
 8021a26:	2d00      	cmp	r5, #0
 8021a28:	4680      	mov	r8, r0
 8021a2a:	4689      	mov	r9, r1
 8021a2c:	dd48      	ble.n	8021ac0 <__ieee754_log+0x2b8>
 8021a2e:	4b50      	ldr	r3, [pc, #320]	@ (8021b70 <__ieee754_log+0x368>)
 8021a30:	2200      	movs	r2, #0
 8021a32:	4650      	mov	r0, sl
 8021a34:	4659      	mov	r1, fp
 8021a36:	f7de fdef 	bl	8000618 <__aeabi_dmul>
 8021a3a:	4652      	mov	r2, sl
 8021a3c:	465b      	mov	r3, fp
 8021a3e:	f7de fdeb 	bl	8000618 <__aeabi_dmul>
 8021a42:	4602      	mov	r2, r0
 8021a44:	460b      	mov	r3, r1
 8021a46:	4606      	mov	r6, r0
 8021a48:	460f      	mov	r7, r1
 8021a4a:	4640      	mov	r0, r8
 8021a4c:	4649      	mov	r1, r9
 8021a4e:	f7de fc2d 	bl	80002ac <__adddf3>
 8021a52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021a56:	f7de fddf 	bl	8000618 <__aeabi_dmul>
 8021a5a:	4680      	mov	r8, r0
 8021a5c:	4689      	mov	r9, r1
 8021a5e:	b964      	cbnz	r4, 8021a7a <__ieee754_log+0x272>
 8021a60:	4602      	mov	r2, r0
 8021a62:	460b      	mov	r3, r1
 8021a64:	4630      	mov	r0, r6
 8021a66:	4639      	mov	r1, r7
 8021a68:	f7de fc1e 	bl	80002a8 <__aeabi_dsub>
 8021a6c:	4602      	mov	r2, r0
 8021a6e:	460b      	mov	r3, r1
 8021a70:	4650      	mov	r0, sl
 8021a72:	4659      	mov	r1, fp
 8021a74:	f7de fc18 	bl	80002a8 <__aeabi_dsub>
 8021a78:	e6da      	b.n	8021830 <__ieee754_log+0x28>
 8021a7a:	a323      	add	r3, pc, #140	@ (adr r3, 8021b08 <__ieee754_log+0x300>)
 8021a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021a84:	f7de fdc8 	bl	8000618 <__aeabi_dmul>
 8021a88:	a321      	add	r3, pc, #132	@ (adr r3, 8021b10 <__ieee754_log+0x308>)
 8021a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a8e:	4604      	mov	r4, r0
 8021a90:	460d      	mov	r5, r1
 8021a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021a96:	f7de fdbf 	bl	8000618 <__aeabi_dmul>
 8021a9a:	4642      	mov	r2, r8
 8021a9c:	464b      	mov	r3, r9
 8021a9e:	f7de fc05 	bl	80002ac <__adddf3>
 8021aa2:	4602      	mov	r2, r0
 8021aa4:	460b      	mov	r3, r1
 8021aa6:	4630      	mov	r0, r6
 8021aa8:	4639      	mov	r1, r7
 8021aaa:	f7de fbfd 	bl	80002a8 <__aeabi_dsub>
 8021aae:	4652      	mov	r2, sl
 8021ab0:	465b      	mov	r3, fp
 8021ab2:	f7de fbf9 	bl	80002a8 <__aeabi_dsub>
 8021ab6:	4602      	mov	r2, r0
 8021ab8:	460b      	mov	r3, r1
 8021aba:	4620      	mov	r0, r4
 8021abc:	4629      	mov	r1, r5
 8021abe:	e7d9      	b.n	8021a74 <__ieee754_log+0x26c>
 8021ac0:	4602      	mov	r2, r0
 8021ac2:	460b      	mov	r3, r1
 8021ac4:	4650      	mov	r0, sl
 8021ac6:	4659      	mov	r1, fp
 8021ac8:	f7de fbee 	bl	80002a8 <__aeabi_dsub>
 8021acc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021ad0:	f7de fda2 	bl	8000618 <__aeabi_dmul>
 8021ad4:	4606      	mov	r6, r0
 8021ad6:	460f      	mov	r7, r1
 8021ad8:	2c00      	cmp	r4, #0
 8021ada:	f43f af25 	beq.w	8021928 <__ieee754_log+0x120>
 8021ade:	a30a      	add	r3, pc, #40	@ (adr r3, 8021b08 <__ieee754_log+0x300>)
 8021ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021ae8:	f7de fd96 	bl	8000618 <__aeabi_dmul>
 8021aec:	a308      	add	r3, pc, #32	@ (adr r3, 8021b10 <__ieee754_log+0x308>)
 8021aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021af2:	4604      	mov	r4, r0
 8021af4:	460d      	mov	r5, r1
 8021af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021afa:	e729      	b.n	8021950 <__ieee754_log+0x148>
 8021afc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8021b58 <__ieee754_log+0x350>
 8021b00:	e698      	b.n	8021834 <__ieee754_log+0x2c>
 8021b02:	bf00      	nop
 8021b04:	f3af 8000 	nop.w
 8021b08:	fee00000 	.word	0xfee00000
 8021b0c:	3fe62e42 	.word	0x3fe62e42
 8021b10:	35793c76 	.word	0x35793c76
 8021b14:	3dea39ef 	.word	0x3dea39ef
 8021b18:	55555555 	.word	0x55555555
 8021b1c:	3fd55555 	.word	0x3fd55555
 8021b20:	df3e5244 	.word	0xdf3e5244
 8021b24:	3fc2f112 	.word	0x3fc2f112
 8021b28:	96cb03de 	.word	0x96cb03de
 8021b2c:	3fc74664 	.word	0x3fc74664
 8021b30:	94229359 	.word	0x94229359
 8021b34:	3fd24924 	.word	0x3fd24924
 8021b38:	55555593 	.word	0x55555593
 8021b3c:	3fe55555 	.word	0x3fe55555
 8021b40:	d078c69f 	.word	0xd078c69f
 8021b44:	3fc39a09 	.word	0x3fc39a09
 8021b48:	1d8e78af 	.word	0x1d8e78af
 8021b4c:	3fcc71c5 	.word	0x3fcc71c5
 8021b50:	9997fa04 	.word	0x9997fa04
 8021b54:	3fd99999 	.word	0x3fd99999
	...
 8021b60:	c3500000 	.word	0xc3500000
 8021b64:	43500000 	.word	0x43500000
 8021b68:	7fefffff 	.word	0x7fefffff
 8021b6c:	3ff00000 	.word	0x3ff00000
 8021b70:	3fe00000 	.word	0x3fe00000
 8021b74:	00000000 	.word	0x00000000

08021b78 <__ieee754_pow>:
 8021b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b7c:	b091      	sub	sp, #68	@ 0x44
 8021b7e:	ed8d 1b00 	vstr	d1, [sp]
 8021b82:	e9dd 1900 	ldrd	r1, r9, [sp]
 8021b86:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8021b8a:	ea5a 0001 	orrs.w	r0, sl, r1
 8021b8e:	ec57 6b10 	vmov	r6, r7, d0
 8021b92:	d113      	bne.n	8021bbc <__ieee754_pow+0x44>
 8021b94:	19b3      	adds	r3, r6, r6
 8021b96:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8021b9a:	4152      	adcs	r2, r2
 8021b9c:	4298      	cmp	r0, r3
 8021b9e:	4b9a      	ldr	r3, [pc, #616]	@ (8021e08 <__ieee754_pow+0x290>)
 8021ba0:	4193      	sbcs	r3, r2
 8021ba2:	f080 84ee 	bcs.w	8022582 <__ieee754_pow+0xa0a>
 8021ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021baa:	4630      	mov	r0, r6
 8021bac:	4639      	mov	r1, r7
 8021bae:	f7de fb7d 	bl	80002ac <__adddf3>
 8021bb2:	ec41 0b10 	vmov	d0, r0, r1
 8021bb6:	b011      	add	sp, #68	@ 0x44
 8021bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bbc:	4a93      	ldr	r2, [pc, #588]	@ (8021e0c <__ieee754_pow+0x294>)
 8021bbe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8021bc2:	4295      	cmp	r5, r2
 8021bc4:	46b8      	mov	r8, r7
 8021bc6:	4633      	mov	r3, r6
 8021bc8:	d80a      	bhi.n	8021be0 <__ieee754_pow+0x68>
 8021bca:	d104      	bne.n	8021bd6 <__ieee754_pow+0x5e>
 8021bcc:	2e00      	cmp	r6, #0
 8021bce:	d1ea      	bne.n	8021ba6 <__ieee754_pow+0x2e>
 8021bd0:	45aa      	cmp	sl, r5
 8021bd2:	d8e8      	bhi.n	8021ba6 <__ieee754_pow+0x2e>
 8021bd4:	e001      	b.n	8021bda <__ieee754_pow+0x62>
 8021bd6:	4592      	cmp	sl, r2
 8021bd8:	d802      	bhi.n	8021be0 <__ieee754_pow+0x68>
 8021bda:	4592      	cmp	sl, r2
 8021bdc:	d10f      	bne.n	8021bfe <__ieee754_pow+0x86>
 8021bde:	b171      	cbz	r1, 8021bfe <__ieee754_pow+0x86>
 8021be0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8021be4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8021be8:	ea58 0803 	orrs.w	r8, r8, r3
 8021bec:	d1db      	bne.n	8021ba6 <__ieee754_pow+0x2e>
 8021bee:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021bf2:	18db      	adds	r3, r3, r3
 8021bf4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8021bf8:	4152      	adcs	r2, r2
 8021bfa:	4598      	cmp	r8, r3
 8021bfc:	e7cf      	b.n	8021b9e <__ieee754_pow+0x26>
 8021bfe:	f1b8 0f00 	cmp.w	r8, #0
 8021c02:	46ab      	mov	fp, r5
 8021c04:	da43      	bge.n	8021c8e <__ieee754_pow+0x116>
 8021c06:	4a82      	ldr	r2, [pc, #520]	@ (8021e10 <__ieee754_pow+0x298>)
 8021c08:	4592      	cmp	sl, r2
 8021c0a:	d856      	bhi.n	8021cba <__ieee754_pow+0x142>
 8021c0c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8021c10:	4592      	cmp	sl, r2
 8021c12:	f240 84c5 	bls.w	80225a0 <__ieee754_pow+0xa28>
 8021c16:	ea4f 522a 	mov.w	r2, sl, asr #20
 8021c1a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8021c1e:	2a14      	cmp	r2, #20
 8021c20:	dd18      	ble.n	8021c54 <__ieee754_pow+0xdc>
 8021c22:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8021c26:	fa21 f402 	lsr.w	r4, r1, r2
 8021c2a:	fa04 f202 	lsl.w	r2, r4, r2
 8021c2e:	428a      	cmp	r2, r1
 8021c30:	f040 84b6 	bne.w	80225a0 <__ieee754_pow+0xa28>
 8021c34:	f004 0401 	and.w	r4, r4, #1
 8021c38:	f1c4 0402 	rsb	r4, r4, #2
 8021c3c:	2900      	cmp	r1, #0
 8021c3e:	d159      	bne.n	8021cf4 <__ieee754_pow+0x17c>
 8021c40:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8021c44:	d148      	bne.n	8021cd8 <__ieee754_pow+0x160>
 8021c46:	4632      	mov	r2, r6
 8021c48:	463b      	mov	r3, r7
 8021c4a:	4630      	mov	r0, r6
 8021c4c:	4639      	mov	r1, r7
 8021c4e:	f7de fce3 	bl	8000618 <__aeabi_dmul>
 8021c52:	e7ae      	b.n	8021bb2 <__ieee754_pow+0x3a>
 8021c54:	2900      	cmp	r1, #0
 8021c56:	d14c      	bne.n	8021cf2 <__ieee754_pow+0x17a>
 8021c58:	f1c2 0214 	rsb	r2, r2, #20
 8021c5c:	fa4a f402 	asr.w	r4, sl, r2
 8021c60:	fa04 f202 	lsl.w	r2, r4, r2
 8021c64:	4552      	cmp	r2, sl
 8021c66:	f040 8498 	bne.w	802259a <__ieee754_pow+0xa22>
 8021c6a:	f004 0401 	and.w	r4, r4, #1
 8021c6e:	f1c4 0402 	rsb	r4, r4, #2
 8021c72:	4a68      	ldr	r2, [pc, #416]	@ (8021e14 <__ieee754_pow+0x29c>)
 8021c74:	4592      	cmp	sl, r2
 8021c76:	d1e3      	bne.n	8021c40 <__ieee754_pow+0xc8>
 8021c78:	f1b9 0f00 	cmp.w	r9, #0
 8021c7c:	f280 8489 	bge.w	8022592 <__ieee754_pow+0xa1a>
 8021c80:	4964      	ldr	r1, [pc, #400]	@ (8021e14 <__ieee754_pow+0x29c>)
 8021c82:	4632      	mov	r2, r6
 8021c84:	463b      	mov	r3, r7
 8021c86:	2000      	movs	r0, #0
 8021c88:	f7de fdf0 	bl	800086c <__aeabi_ddiv>
 8021c8c:	e791      	b.n	8021bb2 <__ieee754_pow+0x3a>
 8021c8e:	2400      	movs	r4, #0
 8021c90:	bb81      	cbnz	r1, 8021cf4 <__ieee754_pow+0x17c>
 8021c92:	4a5e      	ldr	r2, [pc, #376]	@ (8021e0c <__ieee754_pow+0x294>)
 8021c94:	4592      	cmp	sl, r2
 8021c96:	d1ec      	bne.n	8021c72 <__ieee754_pow+0xfa>
 8021c98:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8021c9c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8021ca0:	431a      	orrs	r2, r3
 8021ca2:	f000 846e 	beq.w	8022582 <__ieee754_pow+0xa0a>
 8021ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8021e18 <__ieee754_pow+0x2a0>)
 8021ca8:	429d      	cmp	r5, r3
 8021caa:	d908      	bls.n	8021cbe <__ieee754_pow+0x146>
 8021cac:	f1b9 0f00 	cmp.w	r9, #0
 8021cb0:	f280 846b 	bge.w	802258a <__ieee754_pow+0xa12>
 8021cb4:	2000      	movs	r0, #0
 8021cb6:	2100      	movs	r1, #0
 8021cb8:	e77b      	b.n	8021bb2 <__ieee754_pow+0x3a>
 8021cba:	2402      	movs	r4, #2
 8021cbc:	e7e8      	b.n	8021c90 <__ieee754_pow+0x118>
 8021cbe:	f1b9 0f00 	cmp.w	r9, #0
 8021cc2:	f04f 0000 	mov.w	r0, #0
 8021cc6:	f04f 0100 	mov.w	r1, #0
 8021cca:	f6bf af72 	bge.w	8021bb2 <__ieee754_pow+0x3a>
 8021cce:	e9dd 0300 	ldrd	r0, r3, [sp]
 8021cd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8021cd6:	e76c      	b.n	8021bb2 <__ieee754_pow+0x3a>
 8021cd8:	4a50      	ldr	r2, [pc, #320]	@ (8021e1c <__ieee754_pow+0x2a4>)
 8021cda:	4591      	cmp	r9, r2
 8021cdc:	d10a      	bne.n	8021cf4 <__ieee754_pow+0x17c>
 8021cde:	f1b8 0f00 	cmp.w	r8, #0
 8021ce2:	db07      	blt.n	8021cf4 <__ieee754_pow+0x17c>
 8021ce4:	ec47 6b10 	vmov	d0, r6, r7
 8021ce8:	b011      	add	sp, #68	@ 0x44
 8021cea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cee:	f7fe bb07 	b.w	8020300 <__ieee754_sqrt>
 8021cf2:	2400      	movs	r4, #0
 8021cf4:	ec47 6b10 	vmov	d0, r6, r7
 8021cf8:	9302      	str	r3, [sp, #8]
 8021cfa:	f7fe fa99 	bl	8020230 <fabs>
 8021cfe:	9b02      	ldr	r3, [sp, #8]
 8021d00:	ec51 0b10 	vmov	r0, r1, d0
 8021d04:	bb43      	cbnz	r3, 8021d58 <__ieee754_pow+0x1e0>
 8021d06:	4b43      	ldr	r3, [pc, #268]	@ (8021e14 <__ieee754_pow+0x29c>)
 8021d08:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8021d0c:	429a      	cmp	r2, r3
 8021d0e:	d000      	beq.n	8021d12 <__ieee754_pow+0x19a>
 8021d10:	bb15      	cbnz	r5, 8021d58 <__ieee754_pow+0x1e0>
 8021d12:	f1b9 0f00 	cmp.w	r9, #0
 8021d16:	da05      	bge.n	8021d24 <__ieee754_pow+0x1ac>
 8021d18:	4602      	mov	r2, r0
 8021d1a:	460b      	mov	r3, r1
 8021d1c:	2000      	movs	r0, #0
 8021d1e:	493d      	ldr	r1, [pc, #244]	@ (8021e14 <__ieee754_pow+0x29c>)
 8021d20:	f7de fda4 	bl	800086c <__aeabi_ddiv>
 8021d24:	f1b8 0f00 	cmp.w	r8, #0
 8021d28:	f6bf af43 	bge.w	8021bb2 <__ieee754_pow+0x3a>
 8021d2c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8021d30:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8021d34:	4325      	orrs	r5, r4
 8021d36:	d108      	bne.n	8021d4a <__ieee754_pow+0x1d2>
 8021d38:	4602      	mov	r2, r0
 8021d3a:	460b      	mov	r3, r1
 8021d3c:	4610      	mov	r0, r2
 8021d3e:	4619      	mov	r1, r3
 8021d40:	f7de fab2 	bl	80002a8 <__aeabi_dsub>
 8021d44:	4602      	mov	r2, r0
 8021d46:	460b      	mov	r3, r1
 8021d48:	e79e      	b.n	8021c88 <__ieee754_pow+0x110>
 8021d4a:	2c01      	cmp	r4, #1
 8021d4c:	f47f af31 	bne.w	8021bb2 <__ieee754_pow+0x3a>
 8021d50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021d54:	4619      	mov	r1, r3
 8021d56:	e72c      	b.n	8021bb2 <__ieee754_pow+0x3a>
 8021d58:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8021d5c:	3b01      	subs	r3, #1
 8021d5e:	ea53 0204 	orrs.w	r2, r3, r4
 8021d62:	d102      	bne.n	8021d6a <__ieee754_pow+0x1f2>
 8021d64:	4632      	mov	r2, r6
 8021d66:	463b      	mov	r3, r7
 8021d68:	e7e8      	b.n	8021d3c <__ieee754_pow+0x1c4>
 8021d6a:	3c01      	subs	r4, #1
 8021d6c:	431c      	orrs	r4, r3
 8021d6e:	d016      	beq.n	8021d9e <__ieee754_pow+0x226>
 8021d70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8021df8 <__ieee754_pow+0x280>
 8021d74:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8021d78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021d7c:	f240 8110 	bls.w	8021fa0 <__ieee754_pow+0x428>
 8021d80:	4b27      	ldr	r3, [pc, #156]	@ (8021e20 <__ieee754_pow+0x2a8>)
 8021d82:	459a      	cmp	sl, r3
 8021d84:	4b24      	ldr	r3, [pc, #144]	@ (8021e18 <__ieee754_pow+0x2a0>)
 8021d86:	d916      	bls.n	8021db6 <__ieee754_pow+0x23e>
 8021d88:	429d      	cmp	r5, r3
 8021d8a:	d80b      	bhi.n	8021da4 <__ieee754_pow+0x22c>
 8021d8c:	f1b9 0f00 	cmp.w	r9, #0
 8021d90:	da0b      	bge.n	8021daa <__ieee754_pow+0x232>
 8021d92:	2000      	movs	r0, #0
 8021d94:	b011      	add	sp, #68	@ 0x44
 8021d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d9a:	f000 bee5 	b.w	8022b68 <__math_oflow>
 8021d9e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8021e00 <__ieee754_pow+0x288>
 8021da2:	e7e7      	b.n	8021d74 <__ieee754_pow+0x1fc>
 8021da4:	f1b9 0f00 	cmp.w	r9, #0
 8021da8:	dcf3      	bgt.n	8021d92 <__ieee754_pow+0x21a>
 8021daa:	2000      	movs	r0, #0
 8021dac:	b011      	add	sp, #68	@ 0x44
 8021dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021db2:	f000 bed1 	b.w	8022b58 <__math_uflow>
 8021db6:	429d      	cmp	r5, r3
 8021db8:	d20c      	bcs.n	8021dd4 <__ieee754_pow+0x25c>
 8021dba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021dbe:	2200      	movs	r2, #0
 8021dc0:	2300      	movs	r3, #0
 8021dc2:	f7de fe9b 	bl	8000afc <__aeabi_dcmplt>
 8021dc6:	3800      	subs	r0, #0
 8021dc8:	bf18      	it	ne
 8021dca:	2001      	movne	r0, #1
 8021dcc:	f1b9 0f00 	cmp.w	r9, #0
 8021dd0:	daec      	bge.n	8021dac <__ieee754_pow+0x234>
 8021dd2:	e7df      	b.n	8021d94 <__ieee754_pow+0x21c>
 8021dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8021e14 <__ieee754_pow+0x29c>)
 8021dd6:	429d      	cmp	r5, r3
 8021dd8:	f04f 0200 	mov.w	r2, #0
 8021ddc:	d922      	bls.n	8021e24 <__ieee754_pow+0x2ac>
 8021dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021de2:	2300      	movs	r3, #0
 8021de4:	f7de fe8a 	bl	8000afc <__aeabi_dcmplt>
 8021de8:	3800      	subs	r0, #0
 8021dea:	bf18      	it	ne
 8021dec:	2001      	movne	r0, #1
 8021dee:	f1b9 0f00 	cmp.w	r9, #0
 8021df2:	dccf      	bgt.n	8021d94 <__ieee754_pow+0x21c>
 8021df4:	e7da      	b.n	8021dac <__ieee754_pow+0x234>
 8021df6:	bf00      	nop
 8021df8:	00000000 	.word	0x00000000
 8021dfc:	3ff00000 	.word	0x3ff00000
 8021e00:	00000000 	.word	0x00000000
 8021e04:	bff00000 	.word	0xbff00000
 8021e08:	fff00000 	.word	0xfff00000
 8021e0c:	7ff00000 	.word	0x7ff00000
 8021e10:	433fffff 	.word	0x433fffff
 8021e14:	3ff00000 	.word	0x3ff00000
 8021e18:	3fefffff 	.word	0x3fefffff
 8021e1c:	3fe00000 	.word	0x3fe00000
 8021e20:	43f00000 	.word	0x43f00000
 8021e24:	4b5a      	ldr	r3, [pc, #360]	@ (8021f90 <__ieee754_pow+0x418>)
 8021e26:	f7de fa3f 	bl	80002a8 <__aeabi_dsub>
 8021e2a:	a351      	add	r3, pc, #324	@ (adr r3, 8021f70 <__ieee754_pow+0x3f8>)
 8021e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e30:	4604      	mov	r4, r0
 8021e32:	460d      	mov	r5, r1
 8021e34:	f7de fbf0 	bl	8000618 <__aeabi_dmul>
 8021e38:	a34f      	add	r3, pc, #316	@ (adr r3, 8021f78 <__ieee754_pow+0x400>)
 8021e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e3e:	4606      	mov	r6, r0
 8021e40:	460f      	mov	r7, r1
 8021e42:	4620      	mov	r0, r4
 8021e44:	4629      	mov	r1, r5
 8021e46:	f7de fbe7 	bl	8000618 <__aeabi_dmul>
 8021e4a:	4b52      	ldr	r3, [pc, #328]	@ (8021f94 <__ieee754_pow+0x41c>)
 8021e4c:	4682      	mov	sl, r0
 8021e4e:	468b      	mov	fp, r1
 8021e50:	2200      	movs	r2, #0
 8021e52:	4620      	mov	r0, r4
 8021e54:	4629      	mov	r1, r5
 8021e56:	f7de fbdf 	bl	8000618 <__aeabi_dmul>
 8021e5a:	4602      	mov	r2, r0
 8021e5c:	460b      	mov	r3, r1
 8021e5e:	a148      	add	r1, pc, #288	@ (adr r1, 8021f80 <__ieee754_pow+0x408>)
 8021e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021e64:	f7de fa20 	bl	80002a8 <__aeabi_dsub>
 8021e68:	4622      	mov	r2, r4
 8021e6a:	462b      	mov	r3, r5
 8021e6c:	f7de fbd4 	bl	8000618 <__aeabi_dmul>
 8021e70:	4602      	mov	r2, r0
 8021e72:	460b      	mov	r3, r1
 8021e74:	2000      	movs	r0, #0
 8021e76:	4948      	ldr	r1, [pc, #288]	@ (8021f98 <__ieee754_pow+0x420>)
 8021e78:	f7de fa16 	bl	80002a8 <__aeabi_dsub>
 8021e7c:	4622      	mov	r2, r4
 8021e7e:	4680      	mov	r8, r0
 8021e80:	4689      	mov	r9, r1
 8021e82:	462b      	mov	r3, r5
 8021e84:	4620      	mov	r0, r4
 8021e86:	4629      	mov	r1, r5
 8021e88:	f7de fbc6 	bl	8000618 <__aeabi_dmul>
 8021e8c:	4602      	mov	r2, r0
 8021e8e:	460b      	mov	r3, r1
 8021e90:	4640      	mov	r0, r8
 8021e92:	4649      	mov	r1, r9
 8021e94:	f7de fbc0 	bl	8000618 <__aeabi_dmul>
 8021e98:	a33b      	add	r3, pc, #236	@ (adr r3, 8021f88 <__ieee754_pow+0x410>)
 8021e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e9e:	f7de fbbb 	bl	8000618 <__aeabi_dmul>
 8021ea2:	4602      	mov	r2, r0
 8021ea4:	460b      	mov	r3, r1
 8021ea6:	4650      	mov	r0, sl
 8021ea8:	4659      	mov	r1, fp
 8021eaa:	f7de f9fd 	bl	80002a8 <__aeabi_dsub>
 8021eae:	4602      	mov	r2, r0
 8021eb0:	460b      	mov	r3, r1
 8021eb2:	4680      	mov	r8, r0
 8021eb4:	4689      	mov	r9, r1
 8021eb6:	4630      	mov	r0, r6
 8021eb8:	4639      	mov	r1, r7
 8021eba:	f7de f9f7 	bl	80002ac <__adddf3>
 8021ebe:	2400      	movs	r4, #0
 8021ec0:	4632      	mov	r2, r6
 8021ec2:	463b      	mov	r3, r7
 8021ec4:	4620      	mov	r0, r4
 8021ec6:	460d      	mov	r5, r1
 8021ec8:	f7de f9ee 	bl	80002a8 <__aeabi_dsub>
 8021ecc:	4602      	mov	r2, r0
 8021ece:	460b      	mov	r3, r1
 8021ed0:	4640      	mov	r0, r8
 8021ed2:	4649      	mov	r1, r9
 8021ed4:	f7de f9e8 	bl	80002a8 <__aeabi_dsub>
 8021ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021edc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021ee0:	2300      	movs	r3, #0
 8021ee2:	9304      	str	r3, [sp, #16]
 8021ee4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8021ee8:	4606      	mov	r6, r0
 8021eea:	460f      	mov	r7, r1
 8021eec:	465b      	mov	r3, fp
 8021eee:	4652      	mov	r2, sl
 8021ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021ef4:	f7de f9d8 	bl	80002a8 <__aeabi_dsub>
 8021ef8:	4622      	mov	r2, r4
 8021efa:	462b      	mov	r3, r5
 8021efc:	f7de fb8c 	bl	8000618 <__aeabi_dmul>
 8021f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021f04:	4680      	mov	r8, r0
 8021f06:	4689      	mov	r9, r1
 8021f08:	4630      	mov	r0, r6
 8021f0a:	4639      	mov	r1, r7
 8021f0c:	f7de fb84 	bl	8000618 <__aeabi_dmul>
 8021f10:	4602      	mov	r2, r0
 8021f12:	460b      	mov	r3, r1
 8021f14:	4640      	mov	r0, r8
 8021f16:	4649      	mov	r1, r9
 8021f18:	f7de f9c8 	bl	80002ac <__adddf3>
 8021f1c:	465b      	mov	r3, fp
 8021f1e:	4606      	mov	r6, r0
 8021f20:	460f      	mov	r7, r1
 8021f22:	4652      	mov	r2, sl
 8021f24:	4620      	mov	r0, r4
 8021f26:	4629      	mov	r1, r5
 8021f28:	f7de fb76 	bl	8000618 <__aeabi_dmul>
 8021f2c:	460b      	mov	r3, r1
 8021f2e:	4602      	mov	r2, r0
 8021f30:	4680      	mov	r8, r0
 8021f32:	4689      	mov	r9, r1
 8021f34:	4630      	mov	r0, r6
 8021f36:	4639      	mov	r1, r7
 8021f38:	f7de f9b8 	bl	80002ac <__adddf3>
 8021f3c:	4b17      	ldr	r3, [pc, #92]	@ (8021f9c <__ieee754_pow+0x424>)
 8021f3e:	4299      	cmp	r1, r3
 8021f40:	4604      	mov	r4, r0
 8021f42:	460d      	mov	r5, r1
 8021f44:	468b      	mov	fp, r1
 8021f46:	f340 820b 	ble.w	8022360 <__ieee754_pow+0x7e8>
 8021f4a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8021f4e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8021f52:	4303      	orrs	r3, r0
 8021f54:	f000 81ea 	beq.w	802232c <__ieee754_pow+0x7b4>
 8021f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021f5c:	2200      	movs	r2, #0
 8021f5e:	2300      	movs	r3, #0
 8021f60:	f7de fdcc 	bl	8000afc <__aeabi_dcmplt>
 8021f64:	3800      	subs	r0, #0
 8021f66:	bf18      	it	ne
 8021f68:	2001      	movne	r0, #1
 8021f6a:	e713      	b.n	8021d94 <__ieee754_pow+0x21c>
 8021f6c:	f3af 8000 	nop.w
 8021f70:	60000000 	.word	0x60000000
 8021f74:	3ff71547 	.word	0x3ff71547
 8021f78:	f85ddf44 	.word	0xf85ddf44
 8021f7c:	3e54ae0b 	.word	0x3e54ae0b
 8021f80:	55555555 	.word	0x55555555
 8021f84:	3fd55555 	.word	0x3fd55555
 8021f88:	652b82fe 	.word	0x652b82fe
 8021f8c:	3ff71547 	.word	0x3ff71547
 8021f90:	3ff00000 	.word	0x3ff00000
 8021f94:	3fd00000 	.word	0x3fd00000
 8021f98:	3fe00000 	.word	0x3fe00000
 8021f9c:	408fffff 	.word	0x408fffff
 8021fa0:	4bd5      	ldr	r3, [pc, #852]	@ (80222f8 <__ieee754_pow+0x780>)
 8021fa2:	ea08 0303 	and.w	r3, r8, r3
 8021fa6:	2200      	movs	r2, #0
 8021fa8:	b92b      	cbnz	r3, 8021fb6 <__ieee754_pow+0x43e>
 8021faa:	4bd4      	ldr	r3, [pc, #848]	@ (80222fc <__ieee754_pow+0x784>)
 8021fac:	f7de fb34 	bl	8000618 <__aeabi_dmul>
 8021fb0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8021fb4:	468b      	mov	fp, r1
 8021fb6:	ea4f 532b 	mov.w	r3, fp, asr #20
 8021fba:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8021fbe:	4413      	add	r3, r2
 8021fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8021fc2:	4bcf      	ldr	r3, [pc, #828]	@ (8022300 <__ieee754_pow+0x788>)
 8021fc4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8021fc8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8021fcc:	459b      	cmp	fp, r3
 8021fce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8021fd2:	dd08      	ble.n	8021fe6 <__ieee754_pow+0x46e>
 8021fd4:	4bcb      	ldr	r3, [pc, #812]	@ (8022304 <__ieee754_pow+0x78c>)
 8021fd6:	459b      	cmp	fp, r3
 8021fd8:	f340 81a5 	ble.w	8022326 <__ieee754_pow+0x7ae>
 8021fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021fde:	3301      	adds	r3, #1
 8021fe0:	930a      	str	r3, [sp, #40]	@ 0x28
 8021fe2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8021fe6:	f04f 0a00 	mov.w	sl, #0
 8021fea:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8021fee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021ff0:	4bc5      	ldr	r3, [pc, #788]	@ (8022308 <__ieee754_pow+0x790>)
 8021ff2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021ff6:	ed93 7b00 	vldr	d7, [r3]
 8021ffa:	4629      	mov	r1, r5
 8021ffc:	ec53 2b17 	vmov	r2, r3, d7
 8022000:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022004:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022008:	f7de f94e 	bl	80002a8 <__aeabi_dsub>
 802200c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8022010:	4606      	mov	r6, r0
 8022012:	460f      	mov	r7, r1
 8022014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022018:	f7de f948 	bl	80002ac <__adddf3>
 802201c:	4602      	mov	r2, r0
 802201e:	460b      	mov	r3, r1
 8022020:	2000      	movs	r0, #0
 8022022:	49ba      	ldr	r1, [pc, #744]	@ (802230c <__ieee754_pow+0x794>)
 8022024:	f7de fc22 	bl	800086c <__aeabi_ddiv>
 8022028:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 802202c:	4602      	mov	r2, r0
 802202e:	460b      	mov	r3, r1
 8022030:	4630      	mov	r0, r6
 8022032:	4639      	mov	r1, r7
 8022034:	f7de faf0 	bl	8000618 <__aeabi_dmul>
 8022038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802203c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8022040:	106d      	asrs	r5, r5, #1
 8022042:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8022046:	f04f 0b00 	mov.w	fp, #0
 802204a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 802204e:	4661      	mov	r1, ip
 8022050:	2200      	movs	r2, #0
 8022052:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8022056:	4658      	mov	r0, fp
 8022058:	46e1      	mov	r9, ip
 802205a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 802205e:	4614      	mov	r4, r2
 8022060:	461d      	mov	r5, r3
 8022062:	f7de fad9 	bl	8000618 <__aeabi_dmul>
 8022066:	4602      	mov	r2, r0
 8022068:	460b      	mov	r3, r1
 802206a:	4630      	mov	r0, r6
 802206c:	4639      	mov	r1, r7
 802206e:	f7de f91b 	bl	80002a8 <__aeabi_dsub>
 8022072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022076:	4606      	mov	r6, r0
 8022078:	460f      	mov	r7, r1
 802207a:	4620      	mov	r0, r4
 802207c:	4629      	mov	r1, r5
 802207e:	f7de f913 	bl	80002a8 <__aeabi_dsub>
 8022082:	4602      	mov	r2, r0
 8022084:	460b      	mov	r3, r1
 8022086:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802208a:	f7de f90d 	bl	80002a8 <__aeabi_dsub>
 802208e:	465a      	mov	r2, fp
 8022090:	464b      	mov	r3, r9
 8022092:	f7de fac1 	bl	8000618 <__aeabi_dmul>
 8022096:	4602      	mov	r2, r0
 8022098:	460b      	mov	r3, r1
 802209a:	4630      	mov	r0, r6
 802209c:	4639      	mov	r1, r7
 802209e:	f7de f903 	bl	80002a8 <__aeabi_dsub>
 80220a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80220a6:	f7de fab7 	bl	8000618 <__aeabi_dmul>
 80220aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80220ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80220b2:	4610      	mov	r0, r2
 80220b4:	4619      	mov	r1, r3
 80220b6:	f7de faaf 	bl	8000618 <__aeabi_dmul>
 80220ba:	a37d      	add	r3, pc, #500	@ (adr r3, 80222b0 <__ieee754_pow+0x738>)
 80220bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220c0:	4604      	mov	r4, r0
 80220c2:	460d      	mov	r5, r1
 80220c4:	f7de faa8 	bl	8000618 <__aeabi_dmul>
 80220c8:	a37b      	add	r3, pc, #492	@ (adr r3, 80222b8 <__ieee754_pow+0x740>)
 80220ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220ce:	f7de f8ed 	bl	80002ac <__adddf3>
 80220d2:	4622      	mov	r2, r4
 80220d4:	462b      	mov	r3, r5
 80220d6:	f7de fa9f 	bl	8000618 <__aeabi_dmul>
 80220da:	a379      	add	r3, pc, #484	@ (adr r3, 80222c0 <__ieee754_pow+0x748>)
 80220dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220e0:	f7de f8e4 	bl	80002ac <__adddf3>
 80220e4:	4622      	mov	r2, r4
 80220e6:	462b      	mov	r3, r5
 80220e8:	f7de fa96 	bl	8000618 <__aeabi_dmul>
 80220ec:	a376      	add	r3, pc, #472	@ (adr r3, 80222c8 <__ieee754_pow+0x750>)
 80220ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220f2:	f7de f8db 	bl	80002ac <__adddf3>
 80220f6:	4622      	mov	r2, r4
 80220f8:	462b      	mov	r3, r5
 80220fa:	f7de fa8d 	bl	8000618 <__aeabi_dmul>
 80220fe:	a374      	add	r3, pc, #464	@ (adr r3, 80222d0 <__ieee754_pow+0x758>)
 8022100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022104:	f7de f8d2 	bl	80002ac <__adddf3>
 8022108:	4622      	mov	r2, r4
 802210a:	462b      	mov	r3, r5
 802210c:	f7de fa84 	bl	8000618 <__aeabi_dmul>
 8022110:	a371      	add	r3, pc, #452	@ (adr r3, 80222d8 <__ieee754_pow+0x760>)
 8022112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022116:	f7de f8c9 	bl	80002ac <__adddf3>
 802211a:	4622      	mov	r2, r4
 802211c:	4606      	mov	r6, r0
 802211e:	460f      	mov	r7, r1
 8022120:	462b      	mov	r3, r5
 8022122:	4620      	mov	r0, r4
 8022124:	4629      	mov	r1, r5
 8022126:	f7de fa77 	bl	8000618 <__aeabi_dmul>
 802212a:	4602      	mov	r2, r0
 802212c:	460b      	mov	r3, r1
 802212e:	4630      	mov	r0, r6
 8022130:	4639      	mov	r1, r7
 8022132:	f7de fa71 	bl	8000618 <__aeabi_dmul>
 8022136:	465a      	mov	r2, fp
 8022138:	4604      	mov	r4, r0
 802213a:	460d      	mov	r5, r1
 802213c:	464b      	mov	r3, r9
 802213e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022142:	f7de f8b3 	bl	80002ac <__adddf3>
 8022146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802214a:	f7de fa65 	bl	8000618 <__aeabi_dmul>
 802214e:	4622      	mov	r2, r4
 8022150:	462b      	mov	r3, r5
 8022152:	f7de f8ab 	bl	80002ac <__adddf3>
 8022156:	465a      	mov	r2, fp
 8022158:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802215c:	464b      	mov	r3, r9
 802215e:	4658      	mov	r0, fp
 8022160:	4649      	mov	r1, r9
 8022162:	f7de fa59 	bl	8000618 <__aeabi_dmul>
 8022166:	4b6a      	ldr	r3, [pc, #424]	@ (8022310 <__ieee754_pow+0x798>)
 8022168:	2200      	movs	r2, #0
 802216a:	4606      	mov	r6, r0
 802216c:	460f      	mov	r7, r1
 802216e:	f7de f89d 	bl	80002ac <__adddf3>
 8022172:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8022176:	f7de f899 	bl	80002ac <__adddf3>
 802217a:	46d8      	mov	r8, fp
 802217c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8022180:	460d      	mov	r5, r1
 8022182:	465a      	mov	r2, fp
 8022184:	460b      	mov	r3, r1
 8022186:	4640      	mov	r0, r8
 8022188:	4649      	mov	r1, r9
 802218a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 802218e:	f7de fa43 	bl	8000618 <__aeabi_dmul>
 8022192:	465c      	mov	r4, fp
 8022194:	4680      	mov	r8, r0
 8022196:	4689      	mov	r9, r1
 8022198:	4b5d      	ldr	r3, [pc, #372]	@ (8022310 <__ieee754_pow+0x798>)
 802219a:	2200      	movs	r2, #0
 802219c:	4620      	mov	r0, r4
 802219e:	4629      	mov	r1, r5
 80221a0:	f7de f882 	bl	80002a8 <__aeabi_dsub>
 80221a4:	4632      	mov	r2, r6
 80221a6:	463b      	mov	r3, r7
 80221a8:	f7de f87e 	bl	80002a8 <__aeabi_dsub>
 80221ac:	4602      	mov	r2, r0
 80221ae:	460b      	mov	r3, r1
 80221b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80221b4:	f7de f878 	bl	80002a8 <__aeabi_dsub>
 80221b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80221bc:	f7de fa2c 	bl	8000618 <__aeabi_dmul>
 80221c0:	4622      	mov	r2, r4
 80221c2:	4606      	mov	r6, r0
 80221c4:	460f      	mov	r7, r1
 80221c6:	462b      	mov	r3, r5
 80221c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80221cc:	f7de fa24 	bl	8000618 <__aeabi_dmul>
 80221d0:	4602      	mov	r2, r0
 80221d2:	460b      	mov	r3, r1
 80221d4:	4630      	mov	r0, r6
 80221d6:	4639      	mov	r1, r7
 80221d8:	f7de f868 	bl	80002ac <__adddf3>
 80221dc:	4606      	mov	r6, r0
 80221de:	460f      	mov	r7, r1
 80221e0:	4602      	mov	r2, r0
 80221e2:	460b      	mov	r3, r1
 80221e4:	4640      	mov	r0, r8
 80221e6:	4649      	mov	r1, r9
 80221e8:	f7de f860 	bl	80002ac <__adddf3>
 80221ec:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80221f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80222e0 <__ieee754_pow+0x768>)
 80221f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221f6:	4658      	mov	r0, fp
 80221f8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80221fc:	460d      	mov	r5, r1
 80221fe:	f7de fa0b 	bl	8000618 <__aeabi_dmul>
 8022202:	465c      	mov	r4, fp
 8022204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022208:	4642      	mov	r2, r8
 802220a:	464b      	mov	r3, r9
 802220c:	4620      	mov	r0, r4
 802220e:	4629      	mov	r1, r5
 8022210:	f7de f84a 	bl	80002a8 <__aeabi_dsub>
 8022214:	4602      	mov	r2, r0
 8022216:	460b      	mov	r3, r1
 8022218:	4630      	mov	r0, r6
 802221a:	4639      	mov	r1, r7
 802221c:	f7de f844 	bl	80002a8 <__aeabi_dsub>
 8022220:	a331      	add	r3, pc, #196	@ (adr r3, 80222e8 <__ieee754_pow+0x770>)
 8022222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022226:	f7de f9f7 	bl	8000618 <__aeabi_dmul>
 802222a:	a331      	add	r3, pc, #196	@ (adr r3, 80222f0 <__ieee754_pow+0x778>)
 802222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022230:	4606      	mov	r6, r0
 8022232:	460f      	mov	r7, r1
 8022234:	4620      	mov	r0, r4
 8022236:	4629      	mov	r1, r5
 8022238:	f7de f9ee 	bl	8000618 <__aeabi_dmul>
 802223c:	4602      	mov	r2, r0
 802223e:	460b      	mov	r3, r1
 8022240:	4630      	mov	r0, r6
 8022242:	4639      	mov	r1, r7
 8022244:	f7de f832 	bl	80002ac <__adddf3>
 8022248:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802224a:	4b32      	ldr	r3, [pc, #200]	@ (8022314 <__ieee754_pow+0x79c>)
 802224c:	4413      	add	r3, r2
 802224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022252:	f7de f82b 	bl	80002ac <__adddf3>
 8022256:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802225a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802225c:	f7de f972 	bl	8000544 <__aeabi_i2d>
 8022260:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022262:	4b2d      	ldr	r3, [pc, #180]	@ (8022318 <__ieee754_pow+0x7a0>)
 8022264:	4413      	add	r3, r2
 8022266:	e9d3 8900 	ldrd	r8, r9, [r3]
 802226a:	4606      	mov	r6, r0
 802226c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022270:	460f      	mov	r7, r1
 8022272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022276:	f7de f819 	bl	80002ac <__adddf3>
 802227a:	4642      	mov	r2, r8
 802227c:	464b      	mov	r3, r9
 802227e:	f7de f815 	bl	80002ac <__adddf3>
 8022282:	4632      	mov	r2, r6
 8022284:	463b      	mov	r3, r7
 8022286:	f7de f811 	bl	80002ac <__adddf3>
 802228a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 802228e:	4632      	mov	r2, r6
 8022290:	463b      	mov	r3, r7
 8022292:	4658      	mov	r0, fp
 8022294:	460d      	mov	r5, r1
 8022296:	f7de f807 	bl	80002a8 <__aeabi_dsub>
 802229a:	4642      	mov	r2, r8
 802229c:	464b      	mov	r3, r9
 802229e:	f7de f803 	bl	80002a8 <__aeabi_dsub>
 80222a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80222a6:	f7dd ffff 	bl	80002a8 <__aeabi_dsub>
 80222aa:	465c      	mov	r4, fp
 80222ac:	e036      	b.n	802231c <__ieee754_pow+0x7a4>
 80222ae:	bf00      	nop
 80222b0:	4a454eef 	.word	0x4a454eef
 80222b4:	3fca7e28 	.word	0x3fca7e28
 80222b8:	93c9db65 	.word	0x93c9db65
 80222bc:	3fcd864a 	.word	0x3fcd864a
 80222c0:	a91d4101 	.word	0xa91d4101
 80222c4:	3fd17460 	.word	0x3fd17460
 80222c8:	518f264d 	.word	0x518f264d
 80222cc:	3fd55555 	.word	0x3fd55555
 80222d0:	db6fabff 	.word	0xdb6fabff
 80222d4:	3fdb6db6 	.word	0x3fdb6db6
 80222d8:	33333303 	.word	0x33333303
 80222dc:	3fe33333 	.word	0x3fe33333
 80222e0:	e0000000 	.word	0xe0000000
 80222e4:	3feec709 	.word	0x3feec709
 80222e8:	dc3a03fd 	.word	0xdc3a03fd
 80222ec:	3feec709 	.word	0x3feec709
 80222f0:	145b01f5 	.word	0x145b01f5
 80222f4:	be3e2fe0 	.word	0xbe3e2fe0
 80222f8:	7ff00000 	.word	0x7ff00000
 80222fc:	43400000 	.word	0x43400000
 8022300:	0003988e 	.word	0x0003988e
 8022304:	000bb679 	.word	0x000bb679
 8022308:	08025258 	.word	0x08025258
 802230c:	3ff00000 	.word	0x3ff00000
 8022310:	40080000 	.word	0x40080000
 8022314:	08025238 	.word	0x08025238
 8022318:	08025248 	.word	0x08025248
 802231c:	4602      	mov	r2, r0
 802231e:	460b      	mov	r3, r1
 8022320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022324:	e5d6      	b.n	8021ed4 <__ieee754_pow+0x35c>
 8022326:	f04f 0a01 	mov.w	sl, #1
 802232a:	e65e      	b.n	8021fea <__ieee754_pow+0x472>
 802232c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8022604 <__ieee754_pow+0xa8c>)
 802232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022332:	4630      	mov	r0, r6
 8022334:	4639      	mov	r1, r7
 8022336:	f7dd ffb9 	bl	80002ac <__adddf3>
 802233a:	4642      	mov	r2, r8
 802233c:	e9cd 0100 	strd	r0, r1, [sp]
 8022340:	464b      	mov	r3, r9
 8022342:	4620      	mov	r0, r4
 8022344:	4629      	mov	r1, r5
 8022346:	f7dd ffaf 	bl	80002a8 <__aeabi_dsub>
 802234a:	4602      	mov	r2, r0
 802234c:	460b      	mov	r3, r1
 802234e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022352:	f7de fbf1 	bl	8000b38 <__aeabi_dcmpgt>
 8022356:	2800      	cmp	r0, #0
 8022358:	f47f adfe 	bne.w	8021f58 <__ieee754_pow+0x3e0>
 802235c:	4ba2      	ldr	r3, [pc, #648]	@ (80225e8 <__ieee754_pow+0xa70>)
 802235e:	e022      	b.n	80223a6 <__ieee754_pow+0x82e>
 8022360:	4ca2      	ldr	r4, [pc, #648]	@ (80225ec <__ieee754_pow+0xa74>)
 8022362:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8022366:	42a3      	cmp	r3, r4
 8022368:	d919      	bls.n	802239e <__ieee754_pow+0x826>
 802236a:	4ba1      	ldr	r3, [pc, #644]	@ (80225f0 <__ieee754_pow+0xa78>)
 802236c:	440b      	add	r3, r1
 802236e:	4303      	orrs	r3, r0
 8022370:	d009      	beq.n	8022386 <__ieee754_pow+0x80e>
 8022372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022376:	2200      	movs	r2, #0
 8022378:	2300      	movs	r3, #0
 802237a:	f7de fbbf 	bl	8000afc <__aeabi_dcmplt>
 802237e:	3800      	subs	r0, #0
 8022380:	bf18      	it	ne
 8022382:	2001      	movne	r0, #1
 8022384:	e512      	b.n	8021dac <__ieee754_pow+0x234>
 8022386:	4642      	mov	r2, r8
 8022388:	464b      	mov	r3, r9
 802238a:	f7dd ff8d 	bl	80002a8 <__aeabi_dsub>
 802238e:	4632      	mov	r2, r6
 8022390:	463b      	mov	r3, r7
 8022392:	f7de fbc7 	bl	8000b24 <__aeabi_dcmpge>
 8022396:	2800      	cmp	r0, #0
 8022398:	d1eb      	bne.n	8022372 <__ieee754_pow+0x7fa>
 802239a:	4b96      	ldr	r3, [pc, #600]	@ (80225f4 <__ieee754_pow+0xa7c>)
 802239c:	e003      	b.n	80223a6 <__ieee754_pow+0x82e>
 802239e:	4a96      	ldr	r2, [pc, #600]	@ (80225f8 <__ieee754_pow+0xa80>)
 80223a0:	4293      	cmp	r3, r2
 80223a2:	f240 80e7 	bls.w	8022574 <__ieee754_pow+0x9fc>
 80223a6:	151b      	asrs	r3, r3, #20
 80223a8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80223ac:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80223b0:	fa4a fa03 	asr.w	sl, sl, r3
 80223b4:	44da      	add	sl, fp
 80223b6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80223ba:	4890      	ldr	r0, [pc, #576]	@ (80225fc <__ieee754_pow+0xa84>)
 80223bc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80223c0:	4108      	asrs	r0, r1
 80223c2:	ea00 030a 	and.w	r3, r0, sl
 80223c6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80223ca:	f1c1 0114 	rsb	r1, r1, #20
 80223ce:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80223d2:	fa4a fa01 	asr.w	sl, sl, r1
 80223d6:	f1bb 0f00 	cmp.w	fp, #0
 80223da:	4640      	mov	r0, r8
 80223dc:	4649      	mov	r1, r9
 80223de:	f04f 0200 	mov.w	r2, #0
 80223e2:	bfb8      	it	lt
 80223e4:	f1ca 0a00 	rsblt	sl, sl, #0
 80223e8:	f7dd ff5e 	bl	80002a8 <__aeabi_dsub>
 80223ec:	4680      	mov	r8, r0
 80223ee:	4689      	mov	r9, r1
 80223f0:	4632      	mov	r2, r6
 80223f2:	463b      	mov	r3, r7
 80223f4:	4640      	mov	r0, r8
 80223f6:	4649      	mov	r1, r9
 80223f8:	f7dd ff58 	bl	80002ac <__adddf3>
 80223fc:	2400      	movs	r4, #0
 80223fe:	a36a      	add	r3, pc, #424	@ (adr r3, 80225a8 <__ieee754_pow+0xa30>)
 8022400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022404:	4620      	mov	r0, r4
 8022406:	460d      	mov	r5, r1
 8022408:	f7de f906 	bl	8000618 <__aeabi_dmul>
 802240c:	4642      	mov	r2, r8
 802240e:	e9cd 0100 	strd	r0, r1, [sp]
 8022412:	464b      	mov	r3, r9
 8022414:	4620      	mov	r0, r4
 8022416:	4629      	mov	r1, r5
 8022418:	f7dd ff46 	bl	80002a8 <__aeabi_dsub>
 802241c:	4602      	mov	r2, r0
 802241e:	460b      	mov	r3, r1
 8022420:	4630      	mov	r0, r6
 8022422:	4639      	mov	r1, r7
 8022424:	f7dd ff40 	bl	80002a8 <__aeabi_dsub>
 8022428:	a361      	add	r3, pc, #388	@ (adr r3, 80225b0 <__ieee754_pow+0xa38>)
 802242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802242e:	f7de f8f3 	bl	8000618 <__aeabi_dmul>
 8022432:	a361      	add	r3, pc, #388	@ (adr r3, 80225b8 <__ieee754_pow+0xa40>)
 8022434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022438:	4680      	mov	r8, r0
 802243a:	4689      	mov	r9, r1
 802243c:	4620      	mov	r0, r4
 802243e:	4629      	mov	r1, r5
 8022440:	f7de f8ea 	bl	8000618 <__aeabi_dmul>
 8022444:	4602      	mov	r2, r0
 8022446:	460b      	mov	r3, r1
 8022448:	4640      	mov	r0, r8
 802244a:	4649      	mov	r1, r9
 802244c:	f7dd ff2e 	bl	80002ac <__adddf3>
 8022450:	4604      	mov	r4, r0
 8022452:	460d      	mov	r5, r1
 8022454:	4602      	mov	r2, r0
 8022456:	460b      	mov	r3, r1
 8022458:	e9dd 0100 	ldrd	r0, r1, [sp]
 802245c:	f7dd ff26 	bl	80002ac <__adddf3>
 8022460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022464:	4680      	mov	r8, r0
 8022466:	4689      	mov	r9, r1
 8022468:	f7dd ff1e 	bl	80002a8 <__aeabi_dsub>
 802246c:	4602      	mov	r2, r0
 802246e:	460b      	mov	r3, r1
 8022470:	4620      	mov	r0, r4
 8022472:	4629      	mov	r1, r5
 8022474:	f7dd ff18 	bl	80002a8 <__aeabi_dsub>
 8022478:	4642      	mov	r2, r8
 802247a:	4606      	mov	r6, r0
 802247c:	460f      	mov	r7, r1
 802247e:	464b      	mov	r3, r9
 8022480:	4640      	mov	r0, r8
 8022482:	4649      	mov	r1, r9
 8022484:	f7de f8c8 	bl	8000618 <__aeabi_dmul>
 8022488:	a34d      	add	r3, pc, #308	@ (adr r3, 80225c0 <__ieee754_pow+0xa48>)
 802248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802248e:	4604      	mov	r4, r0
 8022490:	460d      	mov	r5, r1
 8022492:	f7de f8c1 	bl	8000618 <__aeabi_dmul>
 8022496:	a34c      	add	r3, pc, #304	@ (adr r3, 80225c8 <__ieee754_pow+0xa50>)
 8022498:	e9d3 2300 	ldrd	r2, r3, [r3]
 802249c:	f7dd ff04 	bl	80002a8 <__aeabi_dsub>
 80224a0:	4622      	mov	r2, r4
 80224a2:	462b      	mov	r3, r5
 80224a4:	f7de f8b8 	bl	8000618 <__aeabi_dmul>
 80224a8:	a349      	add	r3, pc, #292	@ (adr r3, 80225d0 <__ieee754_pow+0xa58>)
 80224aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224ae:	f7dd fefd 	bl	80002ac <__adddf3>
 80224b2:	4622      	mov	r2, r4
 80224b4:	462b      	mov	r3, r5
 80224b6:	f7de f8af 	bl	8000618 <__aeabi_dmul>
 80224ba:	a347      	add	r3, pc, #284	@ (adr r3, 80225d8 <__ieee754_pow+0xa60>)
 80224bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224c0:	f7dd fef2 	bl	80002a8 <__aeabi_dsub>
 80224c4:	4622      	mov	r2, r4
 80224c6:	462b      	mov	r3, r5
 80224c8:	f7de f8a6 	bl	8000618 <__aeabi_dmul>
 80224cc:	a344      	add	r3, pc, #272	@ (adr r3, 80225e0 <__ieee754_pow+0xa68>)
 80224ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224d2:	f7dd feeb 	bl	80002ac <__adddf3>
 80224d6:	4622      	mov	r2, r4
 80224d8:	462b      	mov	r3, r5
 80224da:	f7de f89d 	bl	8000618 <__aeabi_dmul>
 80224de:	4602      	mov	r2, r0
 80224e0:	460b      	mov	r3, r1
 80224e2:	4640      	mov	r0, r8
 80224e4:	4649      	mov	r1, r9
 80224e6:	f7dd fedf 	bl	80002a8 <__aeabi_dsub>
 80224ea:	4604      	mov	r4, r0
 80224ec:	460d      	mov	r5, r1
 80224ee:	4602      	mov	r2, r0
 80224f0:	460b      	mov	r3, r1
 80224f2:	4640      	mov	r0, r8
 80224f4:	4649      	mov	r1, r9
 80224f6:	f7de f88f 	bl	8000618 <__aeabi_dmul>
 80224fa:	2200      	movs	r2, #0
 80224fc:	e9cd 0100 	strd	r0, r1, [sp]
 8022500:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8022504:	4620      	mov	r0, r4
 8022506:	4629      	mov	r1, r5
 8022508:	f7dd fece 	bl	80002a8 <__aeabi_dsub>
 802250c:	4602      	mov	r2, r0
 802250e:	460b      	mov	r3, r1
 8022510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022514:	f7de f9aa 	bl	800086c <__aeabi_ddiv>
 8022518:	4632      	mov	r2, r6
 802251a:	4604      	mov	r4, r0
 802251c:	460d      	mov	r5, r1
 802251e:	463b      	mov	r3, r7
 8022520:	4640      	mov	r0, r8
 8022522:	4649      	mov	r1, r9
 8022524:	f7de f878 	bl	8000618 <__aeabi_dmul>
 8022528:	4632      	mov	r2, r6
 802252a:	463b      	mov	r3, r7
 802252c:	f7dd febe 	bl	80002ac <__adddf3>
 8022530:	4602      	mov	r2, r0
 8022532:	460b      	mov	r3, r1
 8022534:	4620      	mov	r0, r4
 8022536:	4629      	mov	r1, r5
 8022538:	f7dd feb6 	bl	80002a8 <__aeabi_dsub>
 802253c:	4642      	mov	r2, r8
 802253e:	464b      	mov	r3, r9
 8022540:	f7dd feb2 	bl	80002a8 <__aeabi_dsub>
 8022544:	460b      	mov	r3, r1
 8022546:	4602      	mov	r2, r0
 8022548:	492d      	ldr	r1, [pc, #180]	@ (8022600 <__ieee754_pow+0xa88>)
 802254a:	2000      	movs	r0, #0
 802254c:	f7dd feac 	bl	80002a8 <__aeabi_dsub>
 8022550:	ec41 0b10 	vmov	d0, r0, r1
 8022554:	ee10 3a90 	vmov	r3, s1
 8022558:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802255c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8022560:	da0b      	bge.n	802257a <__ieee754_pow+0xa02>
 8022562:	4650      	mov	r0, sl
 8022564:	f000 fa50 	bl	8022a08 <scalbn>
 8022568:	ec51 0b10 	vmov	r0, r1, d0
 802256c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022570:	f7ff bb6d 	b.w	8021c4e <__ieee754_pow+0xd6>
 8022574:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022578:	e73a      	b.n	80223f0 <__ieee754_pow+0x878>
 802257a:	ec51 0b10 	vmov	r0, r1, d0
 802257e:	4619      	mov	r1, r3
 8022580:	e7f4      	b.n	802256c <__ieee754_pow+0x9f4>
 8022582:	491f      	ldr	r1, [pc, #124]	@ (8022600 <__ieee754_pow+0xa88>)
 8022584:	2000      	movs	r0, #0
 8022586:	f7ff bb14 	b.w	8021bb2 <__ieee754_pow+0x3a>
 802258a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802258e:	f7ff bb10 	b.w	8021bb2 <__ieee754_pow+0x3a>
 8022592:	4630      	mov	r0, r6
 8022594:	4639      	mov	r1, r7
 8022596:	f7ff bb0c 	b.w	8021bb2 <__ieee754_pow+0x3a>
 802259a:	460c      	mov	r4, r1
 802259c:	f7ff bb69 	b.w	8021c72 <__ieee754_pow+0xfa>
 80225a0:	2400      	movs	r4, #0
 80225a2:	f7ff bb4b 	b.w	8021c3c <__ieee754_pow+0xc4>
 80225a6:	bf00      	nop
 80225a8:	00000000 	.word	0x00000000
 80225ac:	3fe62e43 	.word	0x3fe62e43
 80225b0:	fefa39ef 	.word	0xfefa39ef
 80225b4:	3fe62e42 	.word	0x3fe62e42
 80225b8:	0ca86c39 	.word	0x0ca86c39
 80225bc:	be205c61 	.word	0xbe205c61
 80225c0:	72bea4d0 	.word	0x72bea4d0
 80225c4:	3e663769 	.word	0x3e663769
 80225c8:	c5d26bf1 	.word	0xc5d26bf1
 80225cc:	3ebbbd41 	.word	0x3ebbbd41
 80225d0:	af25de2c 	.word	0xaf25de2c
 80225d4:	3f11566a 	.word	0x3f11566a
 80225d8:	16bebd93 	.word	0x16bebd93
 80225dc:	3f66c16c 	.word	0x3f66c16c
 80225e0:	5555553e 	.word	0x5555553e
 80225e4:	3fc55555 	.word	0x3fc55555
 80225e8:	40900000 	.word	0x40900000
 80225ec:	4090cbff 	.word	0x4090cbff
 80225f0:	3f6f3400 	.word	0x3f6f3400
 80225f4:	4090cc00 	.word	0x4090cc00
 80225f8:	3fe00000 	.word	0x3fe00000
 80225fc:	fff00000 	.word	0xfff00000
 8022600:	3ff00000 	.word	0x3ff00000
 8022604:	652b82fe 	.word	0x652b82fe
 8022608:	3c971547 	.word	0x3c971547
 802260c:	00000000 	.word	0x00000000

08022610 <__ieee754_rem_pio2>:
 8022610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022614:	ec57 6b10 	vmov	r6, r7, d0
 8022618:	4bc5      	ldr	r3, [pc, #788]	@ (8022930 <__ieee754_rem_pio2+0x320>)
 802261a:	b08d      	sub	sp, #52	@ 0x34
 802261c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8022620:	4598      	cmp	r8, r3
 8022622:	4604      	mov	r4, r0
 8022624:	9704      	str	r7, [sp, #16]
 8022626:	d807      	bhi.n	8022638 <__ieee754_rem_pio2+0x28>
 8022628:	2200      	movs	r2, #0
 802262a:	2300      	movs	r3, #0
 802262c:	ed80 0b00 	vstr	d0, [r0]
 8022630:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8022634:	2500      	movs	r5, #0
 8022636:	e028      	b.n	802268a <__ieee754_rem_pio2+0x7a>
 8022638:	4bbe      	ldr	r3, [pc, #760]	@ (8022934 <__ieee754_rem_pio2+0x324>)
 802263a:	4598      	cmp	r8, r3
 802263c:	d878      	bhi.n	8022730 <__ieee754_rem_pio2+0x120>
 802263e:	9b04      	ldr	r3, [sp, #16]
 8022640:	4dbd      	ldr	r5, [pc, #756]	@ (8022938 <__ieee754_rem_pio2+0x328>)
 8022642:	2b00      	cmp	r3, #0
 8022644:	4630      	mov	r0, r6
 8022646:	a3ac      	add	r3, pc, #688	@ (adr r3, 80228f8 <__ieee754_rem_pio2+0x2e8>)
 8022648:	e9d3 2300 	ldrd	r2, r3, [r3]
 802264c:	4639      	mov	r1, r7
 802264e:	dd38      	ble.n	80226c2 <__ieee754_rem_pio2+0xb2>
 8022650:	f7dd fe2a 	bl	80002a8 <__aeabi_dsub>
 8022654:	45a8      	cmp	r8, r5
 8022656:	4606      	mov	r6, r0
 8022658:	460f      	mov	r7, r1
 802265a:	d01a      	beq.n	8022692 <__ieee754_rem_pio2+0x82>
 802265c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8022900 <__ieee754_rem_pio2+0x2f0>)
 802265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022662:	f7dd fe21 	bl	80002a8 <__aeabi_dsub>
 8022666:	4602      	mov	r2, r0
 8022668:	460b      	mov	r3, r1
 802266a:	4680      	mov	r8, r0
 802266c:	4689      	mov	r9, r1
 802266e:	4630      	mov	r0, r6
 8022670:	4639      	mov	r1, r7
 8022672:	f7dd fe19 	bl	80002a8 <__aeabi_dsub>
 8022676:	a3a2      	add	r3, pc, #648	@ (adr r3, 8022900 <__ieee754_rem_pio2+0x2f0>)
 8022678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802267c:	f7dd fe14 	bl	80002a8 <__aeabi_dsub>
 8022680:	e9c4 8900 	strd	r8, r9, [r4]
 8022684:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022688:	2501      	movs	r5, #1
 802268a:	4628      	mov	r0, r5
 802268c:	b00d      	add	sp, #52	@ 0x34
 802268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022692:	a39d      	add	r3, pc, #628	@ (adr r3, 8022908 <__ieee754_rem_pio2+0x2f8>)
 8022694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022698:	f7dd fe06 	bl	80002a8 <__aeabi_dsub>
 802269c:	a39c      	add	r3, pc, #624	@ (adr r3, 8022910 <__ieee754_rem_pio2+0x300>)
 802269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226a2:	4606      	mov	r6, r0
 80226a4:	460f      	mov	r7, r1
 80226a6:	f7dd fdff 	bl	80002a8 <__aeabi_dsub>
 80226aa:	4602      	mov	r2, r0
 80226ac:	460b      	mov	r3, r1
 80226ae:	4680      	mov	r8, r0
 80226b0:	4689      	mov	r9, r1
 80226b2:	4630      	mov	r0, r6
 80226b4:	4639      	mov	r1, r7
 80226b6:	f7dd fdf7 	bl	80002a8 <__aeabi_dsub>
 80226ba:	a395      	add	r3, pc, #596	@ (adr r3, 8022910 <__ieee754_rem_pio2+0x300>)
 80226bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226c0:	e7dc      	b.n	802267c <__ieee754_rem_pio2+0x6c>
 80226c2:	f7dd fdf3 	bl	80002ac <__adddf3>
 80226c6:	45a8      	cmp	r8, r5
 80226c8:	4606      	mov	r6, r0
 80226ca:	460f      	mov	r7, r1
 80226cc:	d018      	beq.n	8022700 <__ieee754_rem_pio2+0xf0>
 80226ce:	a38c      	add	r3, pc, #560	@ (adr r3, 8022900 <__ieee754_rem_pio2+0x2f0>)
 80226d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226d4:	f7dd fdea 	bl	80002ac <__adddf3>
 80226d8:	4602      	mov	r2, r0
 80226da:	460b      	mov	r3, r1
 80226dc:	4680      	mov	r8, r0
 80226de:	4689      	mov	r9, r1
 80226e0:	4630      	mov	r0, r6
 80226e2:	4639      	mov	r1, r7
 80226e4:	f7dd fde0 	bl	80002a8 <__aeabi_dsub>
 80226e8:	a385      	add	r3, pc, #532	@ (adr r3, 8022900 <__ieee754_rem_pio2+0x2f0>)
 80226ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226ee:	f7dd fddd 	bl	80002ac <__adddf3>
 80226f2:	f04f 35ff 	mov.w	r5, #4294967295
 80226f6:	e9c4 8900 	strd	r8, r9, [r4]
 80226fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80226fe:	e7c4      	b.n	802268a <__ieee754_rem_pio2+0x7a>
 8022700:	a381      	add	r3, pc, #516	@ (adr r3, 8022908 <__ieee754_rem_pio2+0x2f8>)
 8022702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022706:	f7dd fdd1 	bl	80002ac <__adddf3>
 802270a:	a381      	add	r3, pc, #516	@ (adr r3, 8022910 <__ieee754_rem_pio2+0x300>)
 802270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022710:	4606      	mov	r6, r0
 8022712:	460f      	mov	r7, r1
 8022714:	f7dd fdca 	bl	80002ac <__adddf3>
 8022718:	4602      	mov	r2, r0
 802271a:	460b      	mov	r3, r1
 802271c:	4680      	mov	r8, r0
 802271e:	4689      	mov	r9, r1
 8022720:	4630      	mov	r0, r6
 8022722:	4639      	mov	r1, r7
 8022724:	f7dd fdc0 	bl	80002a8 <__aeabi_dsub>
 8022728:	a379      	add	r3, pc, #484	@ (adr r3, 8022910 <__ieee754_rem_pio2+0x300>)
 802272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802272e:	e7de      	b.n	80226ee <__ieee754_rem_pio2+0xde>
 8022730:	4b82      	ldr	r3, [pc, #520]	@ (802293c <__ieee754_rem_pio2+0x32c>)
 8022732:	4598      	cmp	r8, r3
 8022734:	f200 80d1 	bhi.w	80228da <__ieee754_rem_pio2+0x2ca>
 8022738:	f7fd fd7a 	bl	8020230 <fabs>
 802273c:	ec57 6b10 	vmov	r6, r7, d0
 8022740:	a375      	add	r3, pc, #468	@ (adr r3, 8022918 <__ieee754_rem_pio2+0x308>)
 8022742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022746:	4630      	mov	r0, r6
 8022748:	4639      	mov	r1, r7
 802274a:	f7dd ff65 	bl	8000618 <__aeabi_dmul>
 802274e:	4b7c      	ldr	r3, [pc, #496]	@ (8022940 <__ieee754_rem_pio2+0x330>)
 8022750:	2200      	movs	r2, #0
 8022752:	f7dd fdab 	bl	80002ac <__adddf3>
 8022756:	f7de fa0f 	bl	8000b78 <__aeabi_d2iz>
 802275a:	4605      	mov	r5, r0
 802275c:	f7dd fef2 	bl	8000544 <__aeabi_i2d>
 8022760:	4602      	mov	r2, r0
 8022762:	460b      	mov	r3, r1
 8022764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022768:	a363      	add	r3, pc, #396	@ (adr r3, 80228f8 <__ieee754_rem_pio2+0x2e8>)
 802276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802276e:	f7dd ff53 	bl	8000618 <__aeabi_dmul>
 8022772:	4602      	mov	r2, r0
 8022774:	460b      	mov	r3, r1
 8022776:	4630      	mov	r0, r6
 8022778:	4639      	mov	r1, r7
 802277a:	f7dd fd95 	bl	80002a8 <__aeabi_dsub>
 802277e:	a360      	add	r3, pc, #384	@ (adr r3, 8022900 <__ieee754_rem_pio2+0x2f0>)
 8022780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022784:	4682      	mov	sl, r0
 8022786:	468b      	mov	fp, r1
 8022788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802278c:	f7dd ff44 	bl	8000618 <__aeabi_dmul>
 8022790:	2d1f      	cmp	r5, #31
 8022792:	4606      	mov	r6, r0
 8022794:	460f      	mov	r7, r1
 8022796:	dc0c      	bgt.n	80227b2 <__ieee754_rem_pio2+0x1a2>
 8022798:	4b6a      	ldr	r3, [pc, #424]	@ (8022944 <__ieee754_rem_pio2+0x334>)
 802279a:	1e6a      	subs	r2, r5, #1
 802279c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80227a0:	4543      	cmp	r3, r8
 80227a2:	d006      	beq.n	80227b2 <__ieee754_rem_pio2+0x1a2>
 80227a4:	4632      	mov	r2, r6
 80227a6:	463b      	mov	r3, r7
 80227a8:	4650      	mov	r0, sl
 80227aa:	4659      	mov	r1, fp
 80227ac:	f7dd fd7c 	bl	80002a8 <__aeabi_dsub>
 80227b0:	e00e      	b.n	80227d0 <__ieee754_rem_pio2+0x1c0>
 80227b2:	463b      	mov	r3, r7
 80227b4:	4632      	mov	r2, r6
 80227b6:	4650      	mov	r0, sl
 80227b8:	4659      	mov	r1, fp
 80227ba:	f7dd fd75 	bl	80002a8 <__aeabi_dsub>
 80227be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80227c2:	9305      	str	r3, [sp, #20]
 80227c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80227c8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80227cc:	2b10      	cmp	r3, #16
 80227ce:	dc02      	bgt.n	80227d6 <__ieee754_rem_pio2+0x1c6>
 80227d0:	e9c4 0100 	strd	r0, r1, [r4]
 80227d4:	e039      	b.n	802284a <__ieee754_rem_pio2+0x23a>
 80227d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8022908 <__ieee754_rem_pio2+0x2f8>)
 80227d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80227e0:	f7dd ff1a 	bl	8000618 <__aeabi_dmul>
 80227e4:	4606      	mov	r6, r0
 80227e6:	460f      	mov	r7, r1
 80227e8:	4602      	mov	r2, r0
 80227ea:	460b      	mov	r3, r1
 80227ec:	4650      	mov	r0, sl
 80227ee:	4659      	mov	r1, fp
 80227f0:	f7dd fd5a 	bl	80002a8 <__aeabi_dsub>
 80227f4:	4602      	mov	r2, r0
 80227f6:	460b      	mov	r3, r1
 80227f8:	4680      	mov	r8, r0
 80227fa:	4689      	mov	r9, r1
 80227fc:	4650      	mov	r0, sl
 80227fe:	4659      	mov	r1, fp
 8022800:	f7dd fd52 	bl	80002a8 <__aeabi_dsub>
 8022804:	4632      	mov	r2, r6
 8022806:	463b      	mov	r3, r7
 8022808:	f7dd fd4e 	bl	80002a8 <__aeabi_dsub>
 802280c:	a340      	add	r3, pc, #256	@ (adr r3, 8022910 <__ieee754_rem_pio2+0x300>)
 802280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022812:	4606      	mov	r6, r0
 8022814:	460f      	mov	r7, r1
 8022816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802281a:	f7dd fefd 	bl	8000618 <__aeabi_dmul>
 802281e:	4632      	mov	r2, r6
 8022820:	463b      	mov	r3, r7
 8022822:	f7dd fd41 	bl	80002a8 <__aeabi_dsub>
 8022826:	4602      	mov	r2, r0
 8022828:	460b      	mov	r3, r1
 802282a:	4606      	mov	r6, r0
 802282c:	460f      	mov	r7, r1
 802282e:	4640      	mov	r0, r8
 8022830:	4649      	mov	r1, r9
 8022832:	f7dd fd39 	bl	80002a8 <__aeabi_dsub>
 8022836:	9a05      	ldr	r2, [sp, #20]
 8022838:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802283c:	1ad3      	subs	r3, r2, r3
 802283e:	2b31      	cmp	r3, #49	@ 0x31
 8022840:	dc20      	bgt.n	8022884 <__ieee754_rem_pio2+0x274>
 8022842:	e9c4 0100 	strd	r0, r1, [r4]
 8022846:	46c2      	mov	sl, r8
 8022848:	46cb      	mov	fp, r9
 802284a:	e9d4 8900 	ldrd	r8, r9, [r4]
 802284e:	4650      	mov	r0, sl
 8022850:	4642      	mov	r2, r8
 8022852:	464b      	mov	r3, r9
 8022854:	4659      	mov	r1, fp
 8022856:	f7dd fd27 	bl	80002a8 <__aeabi_dsub>
 802285a:	463b      	mov	r3, r7
 802285c:	4632      	mov	r2, r6
 802285e:	f7dd fd23 	bl	80002a8 <__aeabi_dsub>
 8022862:	9b04      	ldr	r3, [sp, #16]
 8022864:	2b00      	cmp	r3, #0
 8022866:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802286a:	f6bf af0e 	bge.w	802268a <__ieee754_rem_pio2+0x7a>
 802286e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8022872:	6063      	str	r3, [r4, #4]
 8022874:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022878:	f8c4 8000 	str.w	r8, [r4]
 802287c:	60a0      	str	r0, [r4, #8]
 802287e:	60e3      	str	r3, [r4, #12]
 8022880:	426d      	negs	r5, r5
 8022882:	e702      	b.n	802268a <__ieee754_rem_pio2+0x7a>
 8022884:	a326      	add	r3, pc, #152	@ (adr r3, 8022920 <__ieee754_rem_pio2+0x310>)
 8022886:	e9d3 2300 	ldrd	r2, r3, [r3]
 802288a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802288e:	f7dd fec3 	bl	8000618 <__aeabi_dmul>
 8022892:	4606      	mov	r6, r0
 8022894:	460f      	mov	r7, r1
 8022896:	4602      	mov	r2, r0
 8022898:	460b      	mov	r3, r1
 802289a:	4640      	mov	r0, r8
 802289c:	4649      	mov	r1, r9
 802289e:	f7dd fd03 	bl	80002a8 <__aeabi_dsub>
 80228a2:	4602      	mov	r2, r0
 80228a4:	460b      	mov	r3, r1
 80228a6:	4682      	mov	sl, r0
 80228a8:	468b      	mov	fp, r1
 80228aa:	4640      	mov	r0, r8
 80228ac:	4649      	mov	r1, r9
 80228ae:	f7dd fcfb 	bl	80002a8 <__aeabi_dsub>
 80228b2:	4632      	mov	r2, r6
 80228b4:	463b      	mov	r3, r7
 80228b6:	f7dd fcf7 	bl	80002a8 <__aeabi_dsub>
 80228ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8022928 <__ieee754_rem_pio2+0x318>)
 80228bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228c0:	4606      	mov	r6, r0
 80228c2:	460f      	mov	r7, r1
 80228c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80228c8:	f7dd fea6 	bl	8000618 <__aeabi_dmul>
 80228cc:	4632      	mov	r2, r6
 80228ce:	463b      	mov	r3, r7
 80228d0:	f7dd fcea 	bl	80002a8 <__aeabi_dsub>
 80228d4:	4606      	mov	r6, r0
 80228d6:	460f      	mov	r7, r1
 80228d8:	e764      	b.n	80227a4 <__ieee754_rem_pio2+0x194>
 80228da:	4b1b      	ldr	r3, [pc, #108]	@ (8022948 <__ieee754_rem_pio2+0x338>)
 80228dc:	4598      	cmp	r8, r3
 80228de:	d935      	bls.n	802294c <__ieee754_rem_pio2+0x33c>
 80228e0:	4632      	mov	r2, r6
 80228e2:	463b      	mov	r3, r7
 80228e4:	4630      	mov	r0, r6
 80228e6:	4639      	mov	r1, r7
 80228e8:	f7dd fcde 	bl	80002a8 <__aeabi_dsub>
 80228ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80228f0:	e9c4 0100 	strd	r0, r1, [r4]
 80228f4:	e69e      	b.n	8022634 <__ieee754_rem_pio2+0x24>
 80228f6:	bf00      	nop
 80228f8:	54400000 	.word	0x54400000
 80228fc:	3ff921fb 	.word	0x3ff921fb
 8022900:	1a626331 	.word	0x1a626331
 8022904:	3dd0b461 	.word	0x3dd0b461
 8022908:	1a600000 	.word	0x1a600000
 802290c:	3dd0b461 	.word	0x3dd0b461
 8022910:	2e037073 	.word	0x2e037073
 8022914:	3ba3198a 	.word	0x3ba3198a
 8022918:	6dc9c883 	.word	0x6dc9c883
 802291c:	3fe45f30 	.word	0x3fe45f30
 8022920:	2e000000 	.word	0x2e000000
 8022924:	3ba3198a 	.word	0x3ba3198a
 8022928:	252049c1 	.word	0x252049c1
 802292c:	397b839a 	.word	0x397b839a
 8022930:	3fe921fb 	.word	0x3fe921fb
 8022934:	4002d97b 	.word	0x4002d97b
 8022938:	3ff921fb 	.word	0x3ff921fb
 802293c:	413921fb 	.word	0x413921fb
 8022940:	3fe00000 	.word	0x3fe00000
 8022944:	08025268 	.word	0x08025268
 8022948:	7fefffff 	.word	0x7fefffff
 802294c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8022950:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8022954:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8022958:	4630      	mov	r0, r6
 802295a:	460f      	mov	r7, r1
 802295c:	f7de f90c 	bl	8000b78 <__aeabi_d2iz>
 8022960:	f7dd fdf0 	bl	8000544 <__aeabi_i2d>
 8022964:	4602      	mov	r2, r0
 8022966:	460b      	mov	r3, r1
 8022968:	4630      	mov	r0, r6
 802296a:	4639      	mov	r1, r7
 802296c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022970:	f7dd fc9a 	bl	80002a8 <__aeabi_dsub>
 8022974:	4b22      	ldr	r3, [pc, #136]	@ (8022a00 <__ieee754_rem_pio2+0x3f0>)
 8022976:	2200      	movs	r2, #0
 8022978:	f7dd fe4e 	bl	8000618 <__aeabi_dmul>
 802297c:	460f      	mov	r7, r1
 802297e:	4606      	mov	r6, r0
 8022980:	f7de f8fa 	bl	8000b78 <__aeabi_d2iz>
 8022984:	f7dd fdde 	bl	8000544 <__aeabi_i2d>
 8022988:	4602      	mov	r2, r0
 802298a:	460b      	mov	r3, r1
 802298c:	4630      	mov	r0, r6
 802298e:	4639      	mov	r1, r7
 8022990:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022994:	f7dd fc88 	bl	80002a8 <__aeabi_dsub>
 8022998:	4b19      	ldr	r3, [pc, #100]	@ (8022a00 <__ieee754_rem_pio2+0x3f0>)
 802299a:	2200      	movs	r2, #0
 802299c:	f7dd fe3c 	bl	8000618 <__aeabi_dmul>
 80229a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80229a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80229a8:	f04f 0803 	mov.w	r8, #3
 80229ac:	2600      	movs	r6, #0
 80229ae:	2700      	movs	r7, #0
 80229b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80229b4:	4632      	mov	r2, r6
 80229b6:	463b      	mov	r3, r7
 80229b8:	46c2      	mov	sl, r8
 80229ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80229be:	f7de f893 	bl	8000ae8 <__aeabi_dcmpeq>
 80229c2:	2800      	cmp	r0, #0
 80229c4:	d1f4      	bne.n	80229b0 <__ieee754_rem_pio2+0x3a0>
 80229c6:	4b0f      	ldr	r3, [pc, #60]	@ (8022a04 <__ieee754_rem_pio2+0x3f4>)
 80229c8:	9301      	str	r3, [sp, #4]
 80229ca:	2302      	movs	r3, #2
 80229cc:	9300      	str	r3, [sp, #0]
 80229ce:	462a      	mov	r2, r5
 80229d0:	4653      	mov	r3, sl
 80229d2:	4621      	mov	r1, r4
 80229d4:	a806      	add	r0, sp, #24
 80229d6:	f000 f8cf 	bl	8022b78 <__kernel_rem_pio2>
 80229da:	9b04      	ldr	r3, [sp, #16]
 80229dc:	2b00      	cmp	r3, #0
 80229de:	4605      	mov	r5, r0
 80229e0:	f6bf ae53 	bge.w	802268a <__ieee754_rem_pio2+0x7a>
 80229e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80229e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80229ec:	e9c4 2300 	strd	r2, r3, [r4]
 80229f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80229f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80229f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80229fc:	e740      	b.n	8022880 <__ieee754_rem_pio2+0x270>
 80229fe:	bf00      	nop
 8022a00:	41700000 	.word	0x41700000
 8022a04:	080252e8 	.word	0x080252e8

08022a08 <scalbn>:
 8022a08:	b570      	push	{r4, r5, r6, lr}
 8022a0a:	ec55 4b10 	vmov	r4, r5, d0
 8022a0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8022a12:	4606      	mov	r6, r0
 8022a14:	462b      	mov	r3, r5
 8022a16:	b991      	cbnz	r1, 8022a3e <scalbn+0x36>
 8022a18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8022a1c:	4323      	orrs	r3, r4
 8022a1e:	d03b      	beq.n	8022a98 <scalbn+0x90>
 8022a20:	4b33      	ldr	r3, [pc, #204]	@ (8022af0 <scalbn+0xe8>)
 8022a22:	4620      	mov	r0, r4
 8022a24:	4629      	mov	r1, r5
 8022a26:	2200      	movs	r2, #0
 8022a28:	f7dd fdf6 	bl	8000618 <__aeabi_dmul>
 8022a2c:	4b31      	ldr	r3, [pc, #196]	@ (8022af4 <scalbn+0xec>)
 8022a2e:	429e      	cmp	r6, r3
 8022a30:	4604      	mov	r4, r0
 8022a32:	460d      	mov	r5, r1
 8022a34:	da0f      	bge.n	8022a56 <scalbn+0x4e>
 8022a36:	a326      	add	r3, pc, #152	@ (adr r3, 8022ad0 <scalbn+0xc8>)
 8022a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a3c:	e01e      	b.n	8022a7c <scalbn+0x74>
 8022a3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8022a42:	4291      	cmp	r1, r2
 8022a44:	d10b      	bne.n	8022a5e <scalbn+0x56>
 8022a46:	4622      	mov	r2, r4
 8022a48:	4620      	mov	r0, r4
 8022a4a:	4629      	mov	r1, r5
 8022a4c:	f7dd fc2e 	bl	80002ac <__adddf3>
 8022a50:	4604      	mov	r4, r0
 8022a52:	460d      	mov	r5, r1
 8022a54:	e020      	b.n	8022a98 <scalbn+0x90>
 8022a56:	460b      	mov	r3, r1
 8022a58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8022a5c:	3936      	subs	r1, #54	@ 0x36
 8022a5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8022a62:	4296      	cmp	r6, r2
 8022a64:	dd0d      	ble.n	8022a82 <scalbn+0x7a>
 8022a66:	2d00      	cmp	r5, #0
 8022a68:	a11b      	add	r1, pc, #108	@ (adr r1, 8022ad8 <scalbn+0xd0>)
 8022a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022a6e:	da02      	bge.n	8022a76 <scalbn+0x6e>
 8022a70:	a11b      	add	r1, pc, #108	@ (adr r1, 8022ae0 <scalbn+0xd8>)
 8022a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022a76:	a318      	add	r3, pc, #96	@ (adr r3, 8022ad8 <scalbn+0xd0>)
 8022a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a7c:	f7dd fdcc 	bl	8000618 <__aeabi_dmul>
 8022a80:	e7e6      	b.n	8022a50 <scalbn+0x48>
 8022a82:	1872      	adds	r2, r6, r1
 8022a84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8022a88:	428a      	cmp	r2, r1
 8022a8a:	dcec      	bgt.n	8022a66 <scalbn+0x5e>
 8022a8c:	2a00      	cmp	r2, #0
 8022a8e:	dd06      	ble.n	8022a9e <scalbn+0x96>
 8022a90:	f36f 531e 	bfc	r3, #20, #11
 8022a94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022a98:	ec45 4b10 	vmov	d0, r4, r5
 8022a9c:	bd70      	pop	{r4, r5, r6, pc}
 8022a9e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8022aa2:	da08      	bge.n	8022ab6 <scalbn+0xae>
 8022aa4:	2d00      	cmp	r5, #0
 8022aa6:	a10a      	add	r1, pc, #40	@ (adr r1, 8022ad0 <scalbn+0xc8>)
 8022aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022aac:	dac3      	bge.n	8022a36 <scalbn+0x2e>
 8022aae:	a10e      	add	r1, pc, #56	@ (adr r1, 8022ae8 <scalbn+0xe0>)
 8022ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022ab4:	e7bf      	b.n	8022a36 <scalbn+0x2e>
 8022ab6:	3236      	adds	r2, #54	@ 0x36
 8022ab8:	f36f 531e 	bfc	r3, #20, #11
 8022abc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022ac0:	4620      	mov	r0, r4
 8022ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8022af8 <scalbn+0xf0>)
 8022ac4:	4629      	mov	r1, r5
 8022ac6:	2200      	movs	r2, #0
 8022ac8:	e7d8      	b.n	8022a7c <scalbn+0x74>
 8022aca:	bf00      	nop
 8022acc:	f3af 8000 	nop.w
 8022ad0:	c2f8f359 	.word	0xc2f8f359
 8022ad4:	01a56e1f 	.word	0x01a56e1f
 8022ad8:	8800759c 	.word	0x8800759c
 8022adc:	7e37e43c 	.word	0x7e37e43c
 8022ae0:	8800759c 	.word	0x8800759c
 8022ae4:	fe37e43c 	.word	0xfe37e43c
 8022ae8:	c2f8f359 	.word	0xc2f8f359
 8022aec:	81a56e1f 	.word	0x81a56e1f
 8022af0:	43500000 	.word	0x43500000
 8022af4:	ffff3cb0 	.word	0xffff3cb0
 8022af8:	3c900000 	.word	0x3c900000

08022afc <with_errno>:
 8022afc:	b510      	push	{r4, lr}
 8022afe:	ed2d 8b02 	vpush	{d8}
 8022b02:	eeb0 8a40 	vmov.f32	s16, s0
 8022b06:	eef0 8a60 	vmov.f32	s17, s1
 8022b0a:	4604      	mov	r4, r0
 8022b0c:	f7f9 fecc 	bl	801c8a8 <__errno>
 8022b10:	eeb0 0a48 	vmov.f32	s0, s16
 8022b14:	eef0 0a68 	vmov.f32	s1, s17
 8022b18:	ecbd 8b02 	vpop	{d8}
 8022b1c:	6004      	str	r4, [r0, #0]
 8022b1e:	bd10      	pop	{r4, pc}

08022b20 <xflow>:
 8022b20:	4603      	mov	r3, r0
 8022b22:	b507      	push	{r0, r1, r2, lr}
 8022b24:	ec51 0b10 	vmov	r0, r1, d0
 8022b28:	b183      	cbz	r3, 8022b4c <xflow+0x2c>
 8022b2a:	4602      	mov	r2, r0
 8022b2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022b30:	e9cd 2300 	strd	r2, r3, [sp]
 8022b34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022b38:	f7dd fd6e 	bl	8000618 <__aeabi_dmul>
 8022b3c:	ec41 0b10 	vmov	d0, r0, r1
 8022b40:	2022      	movs	r0, #34	@ 0x22
 8022b42:	b003      	add	sp, #12
 8022b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8022b48:	f7ff bfd8 	b.w	8022afc <with_errno>
 8022b4c:	4602      	mov	r2, r0
 8022b4e:	460b      	mov	r3, r1
 8022b50:	e7ee      	b.n	8022b30 <xflow+0x10>
 8022b52:	0000      	movs	r0, r0
 8022b54:	0000      	movs	r0, r0
	...

08022b58 <__math_uflow>:
 8022b58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022b60 <__math_uflow+0x8>
 8022b5c:	f7ff bfe0 	b.w	8022b20 <xflow>
 8022b60:	00000000 	.word	0x00000000
 8022b64:	10000000 	.word	0x10000000

08022b68 <__math_oflow>:
 8022b68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8022b70 <__math_oflow+0x8>
 8022b6c:	f7ff bfd8 	b.w	8022b20 <xflow>
 8022b70:	00000000 	.word	0x00000000
 8022b74:	70000000 	.word	0x70000000

08022b78 <__kernel_rem_pio2>:
 8022b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b7c:	ed2d 8b02 	vpush	{d8}
 8022b80:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8022b84:	f112 0f14 	cmn.w	r2, #20
 8022b88:	9306      	str	r3, [sp, #24]
 8022b8a:	9104      	str	r1, [sp, #16]
 8022b8c:	4bc2      	ldr	r3, [pc, #776]	@ (8022e98 <__kernel_rem_pio2+0x320>)
 8022b8e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8022b90:	9008      	str	r0, [sp, #32]
 8022b92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022b96:	9300      	str	r3, [sp, #0]
 8022b98:	9b06      	ldr	r3, [sp, #24]
 8022b9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8022b9e:	bfa8      	it	ge
 8022ba0:	1ed4      	subge	r4, r2, #3
 8022ba2:	9305      	str	r3, [sp, #20]
 8022ba4:	bfb2      	itee	lt
 8022ba6:	2400      	movlt	r4, #0
 8022ba8:	2318      	movge	r3, #24
 8022baa:	fb94 f4f3 	sdivge	r4, r4, r3
 8022bae:	f06f 0317 	mvn.w	r3, #23
 8022bb2:	fb04 3303 	mla	r3, r4, r3, r3
 8022bb6:	eb03 0b02 	add.w	fp, r3, r2
 8022bba:	9b00      	ldr	r3, [sp, #0]
 8022bbc:	9a05      	ldr	r2, [sp, #20]
 8022bbe:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8022e88 <__kernel_rem_pio2+0x310>
 8022bc2:	eb03 0802 	add.w	r8, r3, r2
 8022bc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8022bc8:	1aa7      	subs	r7, r4, r2
 8022bca:	ae20      	add	r6, sp, #128	@ 0x80
 8022bcc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8022bd0:	2500      	movs	r5, #0
 8022bd2:	4545      	cmp	r5, r8
 8022bd4:	dd12      	ble.n	8022bfc <__kernel_rem_pio2+0x84>
 8022bd6:	9b06      	ldr	r3, [sp, #24]
 8022bd8:	aa20      	add	r2, sp, #128	@ 0x80
 8022bda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8022bde:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8022be2:	2700      	movs	r7, #0
 8022be4:	9b00      	ldr	r3, [sp, #0]
 8022be6:	429f      	cmp	r7, r3
 8022be8:	dc2e      	bgt.n	8022c48 <__kernel_rem_pio2+0xd0>
 8022bea:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8022e88 <__kernel_rem_pio2+0x310>
 8022bee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022bf2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022bf6:	46a8      	mov	r8, r5
 8022bf8:	2600      	movs	r6, #0
 8022bfa:	e01b      	b.n	8022c34 <__kernel_rem_pio2+0xbc>
 8022bfc:	42ef      	cmn	r7, r5
 8022bfe:	d407      	bmi.n	8022c10 <__kernel_rem_pio2+0x98>
 8022c00:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8022c04:	f7dd fc9e 	bl	8000544 <__aeabi_i2d>
 8022c08:	e8e6 0102 	strd	r0, r1, [r6], #8
 8022c0c:	3501      	adds	r5, #1
 8022c0e:	e7e0      	b.n	8022bd2 <__kernel_rem_pio2+0x5a>
 8022c10:	ec51 0b18 	vmov	r0, r1, d8
 8022c14:	e7f8      	b.n	8022c08 <__kernel_rem_pio2+0x90>
 8022c16:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8022c1a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8022c1e:	f7dd fcfb 	bl	8000618 <__aeabi_dmul>
 8022c22:	4602      	mov	r2, r0
 8022c24:	460b      	mov	r3, r1
 8022c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022c2a:	f7dd fb3f 	bl	80002ac <__adddf3>
 8022c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022c32:	3601      	adds	r6, #1
 8022c34:	9b05      	ldr	r3, [sp, #20]
 8022c36:	429e      	cmp	r6, r3
 8022c38:	dded      	ble.n	8022c16 <__kernel_rem_pio2+0x9e>
 8022c3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022c3e:	3701      	adds	r7, #1
 8022c40:	ecaa 7b02 	vstmia	sl!, {d7}
 8022c44:	3508      	adds	r5, #8
 8022c46:	e7cd      	b.n	8022be4 <__kernel_rem_pio2+0x6c>
 8022c48:	9b00      	ldr	r3, [sp, #0]
 8022c4a:	f8dd 8000 	ldr.w	r8, [sp]
 8022c4e:	aa0c      	add	r2, sp, #48	@ 0x30
 8022c50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022c54:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8022c58:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8022c62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022c64:	ab98      	add	r3, sp, #608	@ 0x260
 8022c66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8022c6a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8022c6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022c72:	ac0c      	add	r4, sp, #48	@ 0x30
 8022c74:	ab70      	add	r3, sp, #448	@ 0x1c0
 8022c76:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8022c7a:	46a1      	mov	r9, r4
 8022c7c:	46c2      	mov	sl, r8
 8022c7e:	f1ba 0f00 	cmp.w	sl, #0
 8022c82:	dc77      	bgt.n	8022d74 <__kernel_rem_pio2+0x1fc>
 8022c84:	4658      	mov	r0, fp
 8022c86:	ed9d 0b02 	vldr	d0, [sp, #8]
 8022c8a:	f7ff febd 	bl	8022a08 <scalbn>
 8022c8e:	ec57 6b10 	vmov	r6, r7, d0
 8022c92:	2200      	movs	r2, #0
 8022c94:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8022c98:	4630      	mov	r0, r6
 8022c9a:	4639      	mov	r1, r7
 8022c9c:	f7dd fcbc 	bl	8000618 <__aeabi_dmul>
 8022ca0:	ec41 0b10 	vmov	d0, r0, r1
 8022ca4:	f7fd fc04 	bl	80204b0 <floor>
 8022ca8:	4b7c      	ldr	r3, [pc, #496]	@ (8022e9c <__kernel_rem_pio2+0x324>)
 8022caa:	ec51 0b10 	vmov	r0, r1, d0
 8022cae:	2200      	movs	r2, #0
 8022cb0:	f7dd fcb2 	bl	8000618 <__aeabi_dmul>
 8022cb4:	4602      	mov	r2, r0
 8022cb6:	460b      	mov	r3, r1
 8022cb8:	4630      	mov	r0, r6
 8022cba:	4639      	mov	r1, r7
 8022cbc:	f7dd faf4 	bl	80002a8 <__aeabi_dsub>
 8022cc0:	460f      	mov	r7, r1
 8022cc2:	4606      	mov	r6, r0
 8022cc4:	f7dd ff58 	bl	8000b78 <__aeabi_d2iz>
 8022cc8:	9002      	str	r0, [sp, #8]
 8022cca:	f7dd fc3b 	bl	8000544 <__aeabi_i2d>
 8022cce:	4602      	mov	r2, r0
 8022cd0:	460b      	mov	r3, r1
 8022cd2:	4630      	mov	r0, r6
 8022cd4:	4639      	mov	r1, r7
 8022cd6:	f7dd fae7 	bl	80002a8 <__aeabi_dsub>
 8022cda:	f1bb 0f00 	cmp.w	fp, #0
 8022cde:	4606      	mov	r6, r0
 8022ce0:	460f      	mov	r7, r1
 8022ce2:	dd6c      	ble.n	8022dbe <__kernel_rem_pio2+0x246>
 8022ce4:	f108 31ff 	add.w	r1, r8, #4294967295
 8022ce8:	ab0c      	add	r3, sp, #48	@ 0x30
 8022cea:	9d02      	ldr	r5, [sp, #8]
 8022cec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022cf0:	f1cb 0018 	rsb	r0, fp, #24
 8022cf4:	fa43 f200 	asr.w	r2, r3, r0
 8022cf8:	4415      	add	r5, r2
 8022cfa:	4082      	lsls	r2, r0
 8022cfc:	1a9b      	subs	r3, r3, r2
 8022cfe:	aa0c      	add	r2, sp, #48	@ 0x30
 8022d00:	9502      	str	r5, [sp, #8]
 8022d02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8022d06:	f1cb 0217 	rsb	r2, fp, #23
 8022d0a:	fa43 f902 	asr.w	r9, r3, r2
 8022d0e:	f1b9 0f00 	cmp.w	r9, #0
 8022d12:	dd64      	ble.n	8022dde <__kernel_rem_pio2+0x266>
 8022d14:	9b02      	ldr	r3, [sp, #8]
 8022d16:	2200      	movs	r2, #0
 8022d18:	3301      	adds	r3, #1
 8022d1a:	9302      	str	r3, [sp, #8]
 8022d1c:	4615      	mov	r5, r2
 8022d1e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8022d22:	4590      	cmp	r8, r2
 8022d24:	f300 80a1 	bgt.w	8022e6a <__kernel_rem_pio2+0x2f2>
 8022d28:	f1bb 0f00 	cmp.w	fp, #0
 8022d2c:	dd07      	ble.n	8022d3e <__kernel_rem_pio2+0x1c6>
 8022d2e:	f1bb 0f01 	cmp.w	fp, #1
 8022d32:	f000 80c1 	beq.w	8022eb8 <__kernel_rem_pio2+0x340>
 8022d36:	f1bb 0f02 	cmp.w	fp, #2
 8022d3a:	f000 80c8 	beq.w	8022ece <__kernel_rem_pio2+0x356>
 8022d3e:	f1b9 0f02 	cmp.w	r9, #2
 8022d42:	d14c      	bne.n	8022dde <__kernel_rem_pio2+0x266>
 8022d44:	4632      	mov	r2, r6
 8022d46:	463b      	mov	r3, r7
 8022d48:	4955      	ldr	r1, [pc, #340]	@ (8022ea0 <__kernel_rem_pio2+0x328>)
 8022d4a:	2000      	movs	r0, #0
 8022d4c:	f7dd faac 	bl	80002a8 <__aeabi_dsub>
 8022d50:	4606      	mov	r6, r0
 8022d52:	460f      	mov	r7, r1
 8022d54:	2d00      	cmp	r5, #0
 8022d56:	d042      	beq.n	8022dde <__kernel_rem_pio2+0x266>
 8022d58:	4658      	mov	r0, fp
 8022d5a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8022e90 <__kernel_rem_pio2+0x318>
 8022d5e:	f7ff fe53 	bl	8022a08 <scalbn>
 8022d62:	4630      	mov	r0, r6
 8022d64:	4639      	mov	r1, r7
 8022d66:	ec53 2b10 	vmov	r2, r3, d0
 8022d6a:	f7dd fa9d 	bl	80002a8 <__aeabi_dsub>
 8022d6e:	4606      	mov	r6, r0
 8022d70:	460f      	mov	r7, r1
 8022d72:	e034      	b.n	8022dde <__kernel_rem_pio2+0x266>
 8022d74:	4b4b      	ldr	r3, [pc, #300]	@ (8022ea4 <__kernel_rem_pio2+0x32c>)
 8022d76:	2200      	movs	r2, #0
 8022d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022d7c:	f7dd fc4c 	bl	8000618 <__aeabi_dmul>
 8022d80:	f7dd fefa 	bl	8000b78 <__aeabi_d2iz>
 8022d84:	f7dd fbde 	bl	8000544 <__aeabi_i2d>
 8022d88:	4b47      	ldr	r3, [pc, #284]	@ (8022ea8 <__kernel_rem_pio2+0x330>)
 8022d8a:	2200      	movs	r2, #0
 8022d8c:	4606      	mov	r6, r0
 8022d8e:	460f      	mov	r7, r1
 8022d90:	f7dd fc42 	bl	8000618 <__aeabi_dmul>
 8022d94:	4602      	mov	r2, r0
 8022d96:	460b      	mov	r3, r1
 8022d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022d9c:	f7dd fa84 	bl	80002a8 <__aeabi_dsub>
 8022da0:	f7dd feea 	bl	8000b78 <__aeabi_d2iz>
 8022da4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8022da8:	f849 0b04 	str.w	r0, [r9], #4
 8022dac:	4639      	mov	r1, r7
 8022dae:	4630      	mov	r0, r6
 8022db0:	f7dd fa7c 	bl	80002ac <__adddf3>
 8022db4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022dbc:	e75f      	b.n	8022c7e <__kernel_rem_pio2+0x106>
 8022dbe:	d107      	bne.n	8022dd0 <__kernel_rem_pio2+0x258>
 8022dc0:	f108 33ff 	add.w	r3, r8, #4294967295
 8022dc4:	aa0c      	add	r2, sp, #48	@ 0x30
 8022dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022dca:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8022dce:	e79e      	b.n	8022d0e <__kernel_rem_pio2+0x196>
 8022dd0:	4b36      	ldr	r3, [pc, #216]	@ (8022eac <__kernel_rem_pio2+0x334>)
 8022dd2:	2200      	movs	r2, #0
 8022dd4:	f7dd fea6 	bl	8000b24 <__aeabi_dcmpge>
 8022dd8:	2800      	cmp	r0, #0
 8022dda:	d143      	bne.n	8022e64 <__kernel_rem_pio2+0x2ec>
 8022ddc:	4681      	mov	r9, r0
 8022dde:	2200      	movs	r2, #0
 8022de0:	2300      	movs	r3, #0
 8022de2:	4630      	mov	r0, r6
 8022de4:	4639      	mov	r1, r7
 8022de6:	f7dd fe7f 	bl	8000ae8 <__aeabi_dcmpeq>
 8022dea:	2800      	cmp	r0, #0
 8022dec:	f000 80c1 	beq.w	8022f72 <__kernel_rem_pio2+0x3fa>
 8022df0:	f108 33ff 	add.w	r3, r8, #4294967295
 8022df4:	2200      	movs	r2, #0
 8022df6:	9900      	ldr	r1, [sp, #0]
 8022df8:	428b      	cmp	r3, r1
 8022dfa:	da70      	bge.n	8022ede <__kernel_rem_pio2+0x366>
 8022dfc:	2a00      	cmp	r2, #0
 8022dfe:	f000 808b 	beq.w	8022f18 <__kernel_rem_pio2+0x3a0>
 8022e02:	f108 38ff 	add.w	r8, r8, #4294967295
 8022e06:	ab0c      	add	r3, sp, #48	@ 0x30
 8022e08:	f1ab 0b18 	sub.w	fp, fp, #24
 8022e0c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	d0f6      	beq.n	8022e02 <__kernel_rem_pio2+0x28a>
 8022e14:	4658      	mov	r0, fp
 8022e16:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8022e90 <__kernel_rem_pio2+0x318>
 8022e1a:	f7ff fdf5 	bl	8022a08 <scalbn>
 8022e1e:	f108 0301 	add.w	r3, r8, #1
 8022e22:	00da      	lsls	r2, r3, #3
 8022e24:	9205      	str	r2, [sp, #20]
 8022e26:	ec55 4b10 	vmov	r4, r5, d0
 8022e2a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8022e2c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8022ea4 <__kernel_rem_pio2+0x32c>
 8022e30:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8022e34:	4646      	mov	r6, r8
 8022e36:	f04f 0a00 	mov.w	sl, #0
 8022e3a:	2e00      	cmp	r6, #0
 8022e3c:	f280 80d1 	bge.w	8022fe2 <__kernel_rem_pio2+0x46a>
 8022e40:	4644      	mov	r4, r8
 8022e42:	2c00      	cmp	r4, #0
 8022e44:	f2c0 80ff 	blt.w	8023046 <__kernel_rem_pio2+0x4ce>
 8022e48:	4b19      	ldr	r3, [pc, #100]	@ (8022eb0 <__kernel_rem_pio2+0x338>)
 8022e4a:	461f      	mov	r7, r3
 8022e4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8022e4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022e52:	9306      	str	r3, [sp, #24]
 8022e54:	f04f 0a00 	mov.w	sl, #0
 8022e58:	f04f 0b00 	mov.w	fp, #0
 8022e5c:	2600      	movs	r6, #0
 8022e5e:	eba8 0504 	sub.w	r5, r8, r4
 8022e62:	e0e4      	b.n	802302e <__kernel_rem_pio2+0x4b6>
 8022e64:	f04f 0902 	mov.w	r9, #2
 8022e68:	e754      	b.n	8022d14 <__kernel_rem_pio2+0x19c>
 8022e6a:	f854 3b04 	ldr.w	r3, [r4], #4
 8022e6e:	bb0d      	cbnz	r5, 8022eb4 <__kernel_rem_pio2+0x33c>
 8022e70:	b123      	cbz	r3, 8022e7c <__kernel_rem_pio2+0x304>
 8022e72:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8022e76:	f844 3c04 	str.w	r3, [r4, #-4]
 8022e7a:	2301      	movs	r3, #1
 8022e7c:	3201      	adds	r2, #1
 8022e7e:	461d      	mov	r5, r3
 8022e80:	e74f      	b.n	8022d22 <__kernel_rem_pio2+0x1aa>
 8022e82:	bf00      	nop
 8022e84:	f3af 8000 	nop.w
	...
 8022e94:	3ff00000 	.word	0x3ff00000
 8022e98:	08025430 	.word	0x08025430
 8022e9c:	40200000 	.word	0x40200000
 8022ea0:	3ff00000 	.word	0x3ff00000
 8022ea4:	3e700000 	.word	0x3e700000
 8022ea8:	41700000 	.word	0x41700000
 8022eac:	3fe00000 	.word	0x3fe00000
 8022eb0:	080253f0 	.word	0x080253f0
 8022eb4:	1acb      	subs	r3, r1, r3
 8022eb6:	e7de      	b.n	8022e76 <__kernel_rem_pio2+0x2fe>
 8022eb8:	f108 32ff 	add.w	r2, r8, #4294967295
 8022ebc:	ab0c      	add	r3, sp, #48	@ 0x30
 8022ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022ec2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022ec6:	a90c      	add	r1, sp, #48	@ 0x30
 8022ec8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8022ecc:	e737      	b.n	8022d3e <__kernel_rem_pio2+0x1c6>
 8022ece:	f108 32ff 	add.w	r2, r8, #4294967295
 8022ed2:	ab0c      	add	r3, sp, #48	@ 0x30
 8022ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022ed8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8022edc:	e7f3      	b.n	8022ec6 <__kernel_rem_pio2+0x34e>
 8022ede:	a90c      	add	r1, sp, #48	@ 0x30
 8022ee0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8022ee4:	3b01      	subs	r3, #1
 8022ee6:	430a      	orrs	r2, r1
 8022ee8:	e785      	b.n	8022df6 <__kernel_rem_pio2+0x27e>
 8022eea:	3401      	adds	r4, #1
 8022eec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022ef0:	2a00      	cmp	r2, #0
 8022ef2:	d0fa      	beq.n	8022eea <__kernel_rem_pio2+0x372>
 8022ef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022ef6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8022efa:	eb0d 0503 	add.w	r5, sp, r3
 8022efe:	9b06      	ldr	r3, [sp, #24]
 8022f00:	aa20      	add	r2, sp, #128	@ 0x80
 8022f02:	4443      	add	r3, r8
 8022f04:	f108 0701 	add.w	r7, r8, #1
 8022f08:	3d98      	subs	r5, #152	@ 0x98
 8022f0a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8022f0e:	4444      	add	r4, r8
 8022f10:	42bc      	cmp	r4, r7
 8022f12:	da04      	bge.n	8022f1e <__kernel_rem_pio2+0x3a6>
 8022f14:	46a0      	mov	r8, r4
 8022f16:	e6a2      	b.n	8022c5e <__kernel_rem_pio2+0xe6>
 8022f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f1a:	2401      	movs	r4, #1
 8022f1c:	e7e6      	b.n	8022eec <__kernel_rem_pio2+0x374>
 8022f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f20:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8022f24:	f7dd fb0e 	bl	8000544 <__aeabi_i2d>
 8022f28:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80231e8 <__kernel_rem_pio2+0x670>
 8022f2c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8022f30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022f34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022f38:	46b2      	mov	sl, r6
 8022f3a:	f04f 0800 	mov.w	r8, #0
 8022f3e:	9b05      	ldr	r3, [sp, #20]
 8022f40:	4598      	cmp	r8, r3
 8022f42:	dd05      	ble.n	8022f50 <__kernel_rem_pio2+0x3d8>
 8022f44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022f48:	3701      	adds	r7, #1
 8022f4a:	eca5 7b02 	vstmia	r5!, {d7}
 8022f4e:	e7df      	b.n	8022f10 <__kernel_rem_pio2+0x398>
 8022f50:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8022f54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8022f58:	f7dd fb5e 	bl	8000618 <__aeabi_dmul>
 8022f5c:	4602      	mov	r2, r0
 8022f5e:	460b      	mov	r3, r1
 8022f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022f64:	f7dd f9a2 	bl	80002ac <__adddf3>
 8022f68:	f108 0801 	add.w	r8, r8, #1
 8022f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022f70:	e7e5      	b.n	8022f3e <__kernel_rem_pio2+0x3c6>
 8022f72:	f1cb 0000 	rsb	r0, fp, #0
 8022f76:	ec47 6b10 	vmov	d0, r6, r7
 8022f7a:	f7ff fd45 	bl	8022a08 <scalbn>
 8022f7e:	ec55 4b10 	vmov	r4, r5, d0
 8022f82:	4b9b      	ldr	r3, [pc, #620]	@ (80231f0 <__kernel_rem_pio2+0x678>)
 8022f84:	2200      	movs	r2, #0
 8022f86:	4620      	mov	r0, r4
 8022f88:	4629      	mov	r1, r5
 8022f8a:	f7dd fdcb 	bl	8000b24 <__aeabi_dcmpge>
 8022f8e:	b300      	cbz	r0, 8022fd2 <__kernel_rem_pio2+0x45a>
 8022f90:	4b98      	ldr	r3, [pc, #608]	@ (80231f4 <__kernel_rem_pio2+0x67c>)
 8022f92:	2200      	movs	r2, #0
 8022f94:	4620      	mov	r0, r4
 8022f96:	4629      	mov	r1, r5
 8022f98:	f7dd fb3e 	bl	8000618 <__aeabi_dmul>
 8022f9c:	f7dd fdec 	bl	8000b78 <__aeabi_d2iz>
 8022fa0:	4606      	mov	r6, r0
 8022fa2:	f7dd facf 	bl	8000544 <__aeabi_i2d>
 8022fa6:	4b92      	ldr	r3, [pc, #584]	@ (80231f0 <__kernel_rem_pio2+0x678>)
 8022fa8:	2200      	movs	r2, #0
 8022faa:	f7dd fb35 	bl	8000618 <__aeabi_dmul>
 8022fae:	460b      	mov	r3, r1
 8022fb0:	4602      	mov	r2, r0
 8022fb2:	4629      	mov	r1, r5
 8022fb4:	4620      	mov	r0, r4
 8022fb6:	f7dd f977 	bl	80002a8 <__aeabi_dsub>
 8022fba:	f7dd fddd 	bl	8000b78 <__aeabi_d2iz>
 8022fbe:	ab0c      	add	r3, sp, #48	@ 0x30
 8022fc0:	f10b 0b18 	add.w	fp, fp, #24
 8022fc4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8022fc8:	f108 0801 	add.w	r8, r8, #1
 8022fcc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8022fd0:	e720      	b.n	8022e14 <__kernel_rem_pio2+0x29c>
 8022fd2:	4620      	mov	r0, r4
 8022fd4:	4629      	mov	r1, r5
 8022fd6:	f7dd fdcf 	bl	8000b78 <__aeabi_d2iz>
 8022fda:	ab0c      	add	r3, sp, #48	@ 0x30
 8022fdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8022fe0:	e718      	b.n	8022e14 <__kernel_rem_pio2+0x29c>
 8022fe2:	ab0c      	add	r3, sp, #48	@ 0x30
 8022fe4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8022fe8:	f7dd faac 	bl	8000544 <__aeabi_i2d>
 8022fec:	4622      	mov	r2, r4
 8022fee:	462b      	mov	r3, r5
 8022ff0:	f7dd fb12 	bl	8000618 <__aeabi_dmul>
 8022ff4:	4652      	mov	r2, sl
 8022ff6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8022ffa:	465b      	mov	r3, fp
 8022ffc:	4620      	mov	r0, r4
 8022ffe:	4629      	mov	r1, r5
 8023000:	f7dd fb0a 	bl	8000618 <__aeabi_dmul>
 8023004:	3e01      	subs	r6, #1
 8023006:	4604      	mov	r4, r0
 8023008:	460d      	mov	r5, r1
 802300a:	e716      	b.n	8022e3a <__kernel_rem_pio2+0x2c2>
 802300c:	9906      	ldr	r1, [sp, #24]
 802300e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8023012:	9106      	str	r1, [sp, #24]
 8023014:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8023018:	f7dd fafe 	bl	8000618 <__aeabi_dmul>
 802301c:	4602      	mov	r2, r0
 802301e:	460b      	mov	r3, r1
 8023020:	4650      	mov	r0, sl
 8023022:	4659      	mov	r1, fp
 8023024:	f7dd f942 	bl	80002ac <__adddf3>
 8023028:	3601      	adds	r6, #1
 802302a:	4682      	mov	sl, r0
 802302c:	468b      	mov	fp, r1
 802302e:	9b00      	ldr	r3, [sp, #0]
 8023030:	429e      	cmp	r6, r3
 8023032:	dc01      	bgt.n	8023038 <__kernel_rem_pio2+0x4c0>
 8023034:	42ae      	cmp	r6, r5
 8023036:	dde9      	ble.n	802300c <__kernel_rem_pio2+0x494>
 8023038:	ab48      	add	r3, sp, #288	@ 0x120
 802303a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802303e:	e9c5 ab00 	strd	sl, fp, [r5]
 8023042:	3c01      	subs	r4, #1
 8023044:	e6fd      	b.n	8022e42 <__kernel_rem_pio2+0x2ca>
 8023046:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8023048:	2b02      	cmp	r3, #2
 802304a:	dc0b      	bgt.n	8023064 <__kernel_rem_pio2+0x4ec>
 802304c:	2b00      	cmp	r3, #0
 802304e:	dc35      	bgt.n	80230bc <__kernel_rem_pio2+0x544>
 8023050:	d059      	beq.n	8023106 <__kernel_rem_pio2+0x58e>
 8023052:	9b02      	ldr	r3, [sp, #8]
 8023054:	f003 0007 	and.w	r0, r3, #7
 8023058:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 802305c:	ecbd 8b02 	vpop	{d8}
 8023060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023064:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8023066:	2b03      	cmp	r3, #3
 8023068:	d1f3      	bne.n	8023052 <__kernel_rem_pio2+0x4da>
 802306a:	9b05      	ldr	r3, [sp, #20]
 802306c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8023070:	eb0d 0403 	add.w	r4, sp, r3
 8023074:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8023078:	4625      	mov	r5, r4
 802307a:	46c2      	mov	sl, r8
 802307c:	f1ba 0f00 	cmp.w	sl, #0
 8023080:	dc69      	bgt.n	8023156 <__kernel_rem_pio2+0x5de>
 8023082:	4645      	mov	r5, r8
 8023084:	2d01      	cmp	r5, #1
 8023086:	f300 8087 	bgt.w	8023198 <__kernel_rem_pio2+0x620>
 802308a:	9c05      	ldr	r4, [sp, #20]
 802308c:	ab48      	add	r3, sp, #288	@ 0x120
 802308e:	441c      	add	r4, r3
 8023090:	2000      	movs	r0, #0
 8023092:	2100      	movs	r1, #0
 8023094:	f1b8 0f01 	cmp.w	r8, #1
 8023098:	f300 809c 	bgt.w	80231d4 <__kernel_rem_pio2+0x65c>
 802309c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80230a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80230a4:	f1b9 0f00 	cmp.w	r9, #0
 80230a8:	f040 80a6 	bne.w	80231f8 <__kernel_rem_pio2+0x680>
 80230ac:	9b04      	ldr	r3, [sp, #16]
 80230ae:	e9c3 5600 	strd	r5, r6, [r3]
 80230b2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80230b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80230ba:	e7ca      	b.n	8023052 <__kernel_rem_pio2+0x4da>
 80230bc:	9d05      	ldr	r5, [sp, #20]
 80230be:	ab48      	add	r3, sp, #288	@ 0x120
 80230c0:	441d      	add	r5, r3
 80230c2:	4644      	mov	r4, r8
 80230c4:	2000      	movs	r0, #0
 80230c6:	2100      	movs	r1, #0
 80230c8:	2c00      	cmp	r4, #0
 80230ca:	da35      	bge.n	8023138 <__kernel_rem_pio2+0x5c0>
 80230cc:	f1b9 0f00 	cmp.w	r9, #0
 80230d0:	d038      	beq.n	8023144 <__kernel_rem_pio2+0x5cc>
 80230d2:	4602      	mov	r2, r0
 80230d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80230d8:	9c04      	ldr	r4, [sp, #16]
 80230da:	e9c4 2300 	strd	r2, r3, [r4]
 80230de:	4602      	mov	r2, r0
 80230e0:	460b      	mov	r3, r1
 80230e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80230e6:	f7dd f8df 	bl	80002a8 <__aeabi_dsub>
 80230ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80230ec:	2401      	movs	r4, #1
 80230ee:	45a0      	cmp	r8, r4
 80230f0:	da2b      	bge.n	802314a <__kernel_rem_pio2+0x5d2>
 80230f2:	f1b9 0f00 	cmp.w	r9, #0
 80230f6:	d002      	beq.n	80230fe <__kernel_rem_pio2+0x586>
 80230f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80230fc:	4619      	mov	r1, r3
 80230fe:	9b04      	ldr	r3, [sp, #16]
 8023100:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023104:	e7a5      	b.n	8023052 <__kernel_rem_pio2+0x4da>
 8023106:	9c05      	ldr	r4, [sp, #20]
 8023108:	ab48      	add	r3, sp, #288	@ 0x120
 802310a:	441c      	add	r4, r3
 802310c:	2000      	movs	r0, #0
 802310e:	2100      	movs	r1, #0
 8023110:	f1b8 0f00 	cmp.w	r8, #0
 8023114:	da09      	bge.n	802312a <__kernel_rem_pio2+0x5b2>
 8023116:	f1b9 0f00 	cmp.w	r9, #0
 802311a:	d002      	beq.n	8023122 <__kernel_rem_pio2+0x5aa>
 802311c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023120:	4619      	mov	r1, r3
 8023122:	9b04      	ldr	r3, [sp, #16]
 8023124:	e9c3 0100 	strd	r0, r1, [r3]
 8023128:	e793      	b.n	8023052 <__kernel_rem_pio2+0x4da>
 802312a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802312e:	f7dd f8bd 	bl	80002ac <__adddf3>
 8023132:	f108 38ff 	add.w	r8, r8, #4294967295
 8023136:	e7eb      	b.n	8023110 <__kernel_rem_pio2+0x598>
 8023138:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 802313c:	f7dd f8b6 	bl	80002ac <__adddf3>
 8023140:	3c01      	subs	r4, #1
 8023142:	e7c1      	b.n	80230c8 <__kernel_rem_pio2+0x550>
 8023144:	4602      	mov	r2, r0
 8023146:	460b      	mov	r3, r1
 8023148:	e7c6      	b.n	80230d8 <__kernel_rem_pio2+0x560>
 802314a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 802314e:	f7dd f8ad 	bl	80002ac <__adddf3>
 8023152:	3401      	adds	r4, #1
 8023154:	e7cb      	b.n	80230ee <__kernel_rem_pio2+0x576>
 8023156:	ed35 7b02 	vldmdb	r5!, {d7}
 802315a:	ed8d 7b00 	vstr	d7, [sp]
 802315e:	ed95 7b02 	vldr	d7, [r5, #8]
 8023162:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023166:	ec53 2b17 	vmov	r2, r3, d7
 802316a:	ed8d 7b06 	vstr	d7, [sp, #24]
 802316e:	f7dd f89d 	bl	80002ac <__adddf3>
 8023172:	4602      	mov	r2, r0
 8023174:	460b      	mov	r3, r1
 8023176:	4606      	mov	r6, r0
 8023178:	460f      	mov	r7, r1
 802317a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802317e:	f7dd f893 	bl	80002a8 <__aeabi_dsub>
 8023182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023186:	f7dd f891 	bl	80002ac <__adddf3>
 802318a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802318e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8023192:	e9c5 6700 	strd	r6, r7, [r5]
 8023196:	e771      	b.n	802307c <__kernel_rem_pio2+0x504>
 8023198:	ed34 7b02 	vldmdb	r4!, {d7}
 802319c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80231a0:	ec51 0b17 	vmov	r0, r1, d7
 80231a4:	4652      	mov	r2, sl
 80231a6:	465b      	mov	r3, fp
 80231a8:	ed8d 7b00 	vstr	d7, [sp]
 80231ac:	f7dd f87e 	bl	80002ac <__adddf3>
 80231b0:	4602      	mov	r2, r0
 80231b2:	460b      	mov	r3, r1
 80231b4:	4606      	mov	r6, r0
 80231b6:	460f      	mov	r7, r1
 80231b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80231bc:	f7dd f874 	bl	80002a8 <__aeabi_dsub>
 80231c0:	4652      	mov	r2, sl
 80231c2:	465b      	mov	r3, fp
 80231c4:	f7dd f872 	bl	80002ac <__adddf3>
 80231c8:	3d01      	subs	r5, #1
 80231ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80231ce:	e9c4 6700 	strd	r6, r7, [r4]
 80231d2:	e757      	b.n	8023084 <__kernel_rem_pio2+0x50c>
 80231d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80231d8:	f7dd f868 	bl	80002ac <__adddf3>
 80231dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80231e0:	e758      	b.n	8023094 <__kernel_rem_pio2+0x51c>
 80231e2:	bf00      	nop
 80231e4:	f3af 8000 	nop.w
	...
 80231f0:	41700000 	.word	0x41700000
 80231f4:	3e700000 	.word	0x3e700000
 80231f8:	9b04      	ldr	r3, [sp, #16]
 80231fa:	9a04      	ldr	r2, [sp, #16]
 80231fc:	601d      	str	r5, [r3, #0]
 80231fe:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8023202:	605c      	str	r4, [r3, #4]
 8023204:	609f      	str	r7, [r3, #8]
 8023206:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 802320a:	60d3      	str	r3, [r2, #12]
 802320c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023210:	6110      	str	r0, [r2, #16]
 8023212:	6153      	str	r3, [r2, #20]
 8023214:	e71d      	b.n	8023052 <__kernel_rem_pio2+0x4da>
 8023216:	bf00      	nop

08023218 <_init>:
 8023218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802321a:	bf00      	nop
 802321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802321e:	bc08      	pop	{r3}
 8023220:	469e      	mov	lr, r3
 8023222:	4770      	bx	lr

08023224 <_fini>:
 8023224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023226:	bf00      	nop
 8023228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802322a:	bc08      	pop	{r3}
 802322c:	469e      	mov	lr, r3
 802322e:	4770      	bx	lr
