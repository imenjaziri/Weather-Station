
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  080100d0  080100d0  000110d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010768  08010768  00012204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010768  08010768  00011768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010770  08010770  00012204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010770  08010770  00011770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010774  08010774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  08010778  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000058e0  20000204  0801097c  00012204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005ae4  0801097c  00012ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ca7  00000000  00000000  00012234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005955  00000000  00000000  00039edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  0003f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018dc  00000000  00000000  00041858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000745c  00000000  00000000  00043134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029e69  00000000  00000000  0004a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d2b5  00000000  00000000  000743f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001916ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d74  00000000  00000000  001916f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0019b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080100b4 	.word	0x080100b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	080100b4 	.word	0x080100b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001042:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001044:	4a2f      	ldr	r2, [pc, #188]	@ (8001104 <MX_ADC1_Init+0xe4>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001048:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001062:	2204      	movs	r2, #4
 8001064:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001068:	2200      	movs	r2, #0
 800106a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800106e:	2201      	movs	r2, #1
 8001070:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001074:	2201      	movs	r2, #1
 8001076:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a2:	4817      	ldr	r0, [pc, #92]	@ (8001100 <MX_ADC1_Init+0xe0>)
 80010a4:	f001 fd0e 	bl	8002ac4 <HAL_ADC_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ae:	f000 fe29 	bl	8001d04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4810      	ldr	r0, [pc, #64]	@ (8001100 <MX_ADC1_Init+0xe0>)
 80010be:	f002 fa69 	bl	8003594 <HAL_ADCEx_MultiModeConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010c8:	f000 fe1c 	bl	8001d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_ADC1_Init+0xe8>)
 80010ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d0:	2306      	movs	r3, #6
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d8:	237f      	movs	r3, #127	@ 0x7f
 80010da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010dc:	2304      	movs	r3, #4
 80010de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_ADC1_Init+0xe0>)
 80010ea:	f001 fe3b 	bl	8002d64 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010f4:	f000 fe06 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	@ 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000220 	.word	0x20000220
 8001104:	50040000 	.word	0x50040000
 8001108:	14f00020 	.word	0x14f00020

0800110c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001122:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001124:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001126:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800112e:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001134:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001140:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001142:	2204      	movs	r2, #4
 8001144:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001148:	2200      	movs	r2, #0
 800114a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800114e:	2201      	movs	r2, #1
 8001150:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001154:	2201      	movs	r2, #1
 8001156:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001166:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001168:	2200      	movs	r2, #0
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001176:	2200      	movs	r2, #0
 8001178:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001184:	f001 fc9e 	bl	8002ac4 <HAL_ADC_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800118e:	f000 fdb9 	bl	8001d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_ADC2_Init+0xc4>)
 8001194:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001196:	2306      	movs	r3, #6
 8001198:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119e:	237f      	movs	r3, #127	@ 0x7f
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a2:	2304      	movs	r3, #4
 80011a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 80011b0:	f001 fdd8 	bl	8002d64 <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80011ba:	f000 fda3 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000284 	.word	0x20000284
 80011cc:	50040100 	.word	0x50040100
 80011d0:	04300002 	.word	0x04300002

080011d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	@ 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a33      	ldr	r2, [pc, #204]	@ (80012c0 <HAL_ADC_MspInit+0xec>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12e      	bne.n	8001254 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a31      	ldr	r2, [pc, #196]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 80011fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001200:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10b      	bne.n	8001220 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001208:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a2e      	ldr	r2, [pc, #184]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800120e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	4a28      	ldr	r2, [pc, #160]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122c:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800123c:	230b      	movs	r3, #11
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124e:	f002 fbc1 	bl	80039d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001252:	e031      	b.n	80012b8 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1c      	ldr	r2, [pc, #112]	@ (80012cc <HAL_ADC_MspInit+0xf8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d12c      	bne.n	80012b8 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	4a17      	ldr	r2, [pc, #92]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001266:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001276:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800127a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128c:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012a4:	230b      	movs	r3, #11
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <HAL_ADC_MspInit+0xfc>)
 80012b4:	f002 fb8e 	bl	80039d4 <HAL_GPIO_Init>
}
 80012b8:	bf00      	nop
 80012ba:	3730      	adds	r7, #48	@ 0x30
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	50040000 	.word	0x50040000
 80012c4:	200002e8 	.word	0x200002e8
 80012c8:	40021000 	.word	0x40021000
 80012cc:	50040100 	.word	0x50040100
 80012d0:	48000800 	.word	0x48000800

080012d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <vApplicationGetIdleTaskMemory+0x2c>)
 80012e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <vApplicationGetIdleTaskMemory+0x30>)
 80012ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000304 	.word	0x20000304
 8001304:	200003a4 	.word	0x200003a4

08001308 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b0a4      	sub	sp, #144	@ 0x90
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	GpsToIhm=xQueueCreate(10,sizeof(GPS_IHM));
 800130e:	2200      	movs	r2, #0
 8001310:	210c      	movs	r1, #12
 8001312:	200a      	movs	r0, #10
 8001314:	f007 fd1c 	bl	8008d50 <xQueueGenericCreate>
 8001318:	4603      	mov	r3, r0
 800131a:	4a31      	ldr	r2, [pc, #196]	@ (80013e0 <MX_FREERTOS_Init+0xd8>)
 800131c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800131e:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <MX_FREERTOS_Init+0xdc>)
 8001320:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001324:	461d      	mov	r5, r3
 8001326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800132e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001332:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f007 fafe 	bl	800893a <osThreadCreate>
 800133e:	4603      	mov	r3, r0
 8001340:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <MX_FREERTOS_Init+0xe0>)
 8001342:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <MX_FREERTOS_Init+0xe4>)
 8001346:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800134a:	461d      	mov	r5, r3
 800134c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001350:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 8001358:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f007 faeb 	bl	800893a <osThreadCreate>
 8001364:	4603      	mov	r3, r0
 8001366:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <MX_FREERTOS_Init+0xe8>)
 8001368:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS_Task */
  osThreadDef(GPS_Task, Start_GPS_Task, osPriorityIdle, 0, 1024);
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_FREERTOS_Init+0xec>)
 800136c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001370:	461d      	mov	r5, r3
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800137a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPS_TaskHandle = osThreadCreate(osThread(GPS_Task), NULL);
 800137e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f007 fad8 	bl	800893a <osThreadCreate>
 800138a:	4603      	mov	r3, r0
 800138c:	4a1a      	ldr	r2, [pc, #104]	@ (80013f8 <MX_FREERTOS_Init+0xf0>)
 800138e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SatellitePredic */
  osThreadDef(SatellitePredic, Start_SatellitePrediction_Task, osPriorityIdle, 0, 1024);
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_FREERTOS_Init+0xf4>)
 8001392:	f107 0420 	add.w	r4, r7, #32
 8001396:	461d      	mov	r5, r3
 8001398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SatellitePredicHandle = osThreadCreate(osThread(SatellitePredic), NULL);
 80013a4:	f107 0320 	add.w	r3, r7, #32
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f007 fac5 	bl	800893a <osThreadCreate>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a13      	ldr	r2, [pc, #76]	@ (8001400 <MX_FREERTOS_Init+0xf8>)
 80013b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sensors_Task */
  osThreadDef(Sensors_Task, Start_Sensors_Task, osPriorityIdle, 0, 1024);
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <MX_FREERTOS_Init+0xfc>)
 80013b8:	1d3c      	adds	r4, r7, #4
 80013ba:	461d      	mov	r5, r3
 80013bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sensors_TaskHandle = osThreadCreate(osThread(Sensors_Task), NULL);
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 fab4 	bl	800893a <osThreadCreate>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <MX_FREERTOS_Init+0x100>)
 80013d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013d8:	bf00      	nop
 80013da:	3790      	adds	r7, #144	@ 0x90
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdb0      	pop	{r4, r5, r7, pc}
 80013e0:	200002ec 	.word	0x200002ec
 80013e4:	080100dc 	.word	0x080100dc
 80013e8:	200002f0 	.word	0x200002f0
 80013ec:	08010104 	.word	0x08010104
 80013f0:	200002f4 	.word	0x200002f4
 80013f4:	0801012c 	.word	0x0801012c
 80013f8:	200002f8 	.word	0x200002f8
 80013fc:	08010158 	.word	0x08010158
 8001400:	200002fc 	.word	0x200002fc
 8001404:	08010184 	.word	0x08010184
 8001408:	20000300 	.word	0x20000300

0800140c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8001414:	2001      	movs	r0, #1
 8001416:	f007 fadc 	bl	80089d2 <osDelay>
 800141a:	e7fb      	b.n	8001414 <StartDefaultTask+0x8>

0800141c <Start_IHM_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IHM_Task */
__weak void Start_IHM_Task(void const * argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_IHM_Task */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001424:	2001      	movs	r0, #1
 8001426:	f007 fad4 	bl	80089d2 <osDelay>
 800142a:	e7fb      	b.n	8001424 <Start_IHM_Task+0x8>

0800142c <Start_SatellitePrediction_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SatellitePrediction_Task */
__weak void Start_SatellitePrediction_Task(void const * argument)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SatellitePrediction_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f007 facc 	bl	80089d2 <osDelay>
 800143a:	e7fb      	b.n	8001434 <Start_SatellitePrediction_Task+0x8>

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b36      	ldr	r3, [pc, #216]	@ (800152c <MX_GPIO_Init+0xf0>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a35      	ldr	r2, [pc, #212]	@ (800152c <MX_GPIO_Init+0xf0>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b33      	ldr	r3, [pc, #204]	@ (800152c <MX_GPIO_Init+0xf0>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	4b30      	ldr	r3, [pc, #192]	@ (800152c <MX_GPIO_Init+0xf0>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a2f      	ldr	r2, [pc, #188]	@ (800152c <MX_GPIO_Init+0xf0>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <MX_GPIO_Init+0xf0>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <MX_GPIO_Init+0xf0>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a29      	ldr	r2, [pc, #164]	@ (800152c <MX_GPIO_Init+0xf0>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <MX_GPIO_Init+0xf0>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b24      	ldr	r3, [pc, #144]	@ (800152c <MX_GPIO_Init+0xf0>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a23      	ldr	r2, [pc, #140]	@ (800152c <MX_GPIO_Init+0xf0>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_GPIO_Init+0xf0>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2120      	movs	r1, #32
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ba:	f002 fc35 	bl	8003d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4816      	ldr	r0, [pc, #88]	@ (8001530 <MX_GPIO_Init+0xf4>)
 80014d6:	f002 fa7d 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014da:	2302      	movs	r3, #2
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4810      	ldr	r0, [pc, #64]	@ (8001530 <MX_GPIO_Init+0xf4>)
 80014f0:	f002 fa70 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014f4:	2320      	movs	r3, #32
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150e:	f002 fa61 	bl	80039d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2105      	movs	r1, #5
 8001516:	2007      	movs	r0, #7
 8001518:	f002 f9a4 	bl	8003864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800151c:	2007      	movs	r0, #7
 800151e:	f002 f9bd 	bl	800389c <HAL_NVIC_EnableIRQ>

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	@ 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	48000800 	.word	0x48000800

08001534 <GPS_Init>:
int hr=0,min=0,days=0,mon=0,yr=0;
int daychange = 0;
GPS_t GPS;

void GPS_Init()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	4903      	ldr	r1, [pc, #12]	@ (8001548 <GPS_Init+0x14>)
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <GPS_Init+0x18>)
 800153e:	f005 feaf 	bl	80072a0 <HAL_UART_Receive_IT>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200005a4 	.word	0x200005a4
 800154c:	20000910 	.word	0x20000910

08001550 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i=0;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
	calculated_check=0;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if(nmeastr[i] == '$')
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b24      	cmp	r3, #36	@ 0x24
 800156a:	d103      	bne.n	8001574 <GPS_validate+0x24>
		i++;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001572:	e00c      	b.n	800158e <GPS_validate+0x3e>
		return 0;
 8001574:	2300      	movs	r3, #0
 8001576:	e047      	b.n	8001608 <GPS_validate+0xb8>
		calculated_check ^= nmeastr[i];// calculate the checksum
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4053      	eors	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
		i++;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3301      	adds	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <GPS_validate+0x5c>
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80015a4:	d002      	beq.n	80015ac <GPS_validate+0x5c>
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b4a      	cmp	r3, #74	@ 0x4a
 80015aa:	dde5      	ble.n	8001578 <GPS_validate+0x28>
	}

	if(i >= 75){
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b4a      	cmp	r3, #74	@ 0x4a
 80015b0:	dd01      	ble.n	80015b6 <GPS_validate+0x66>
		return 0;// the string was too long so return an error
 80015b2:	2300      	movs	r3, #0
 80015b4:	e028      	b.n	8001608 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*'){
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b2a      	cmp	r3, #42	@ 0x2a
 80015c0:	d119      	bne.n	80015f6 <GPS_validate+0xa6>
		check[0] = nmeastr[i+1];    //put hex chars in check string
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i+2];
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3302      	adds	r3, #2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;// no checksum separator found there for invalid

	sprintf(checkcalcstr,"%02X",calculated_check);
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	490a      	ldr	r1, [pc, #40]	@ (8001610 <GPS_validate+0xc0>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00b fbce 	bl	800cd88 <siprintf>
	return((checkcalcstr[0] == check[0])
 80015ec:	7a3a      	ldrb	r2, [r7, #8]
 80015ee:	7b3b      	ldrb	r3, [r7, #12]
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d108      	bne.n	8001606 <GPS_validate+0xb6>
 80015f4:	e001      	b.n	80015fa <GPS_validate+0xaa>
		return 0;// no checksum separator found there for invalid
 80015f6:	2300      	movs	r3, #0
 80015f8:	e006      	b.n	8001608 <GPS_validate+0xb8>
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80015fa:	7a7a      	ldrb	r2, [r7, #9]
 80015fc:	7b7b      	ldrb	r3, [r7, #13]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d101      	bne.n	8001606 <GPS_validate+0xb6>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <GPS_validate+0xb8>
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	080101a0 	.word	0x080101a0

08001614 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af08      	add	r7, sp, #32
 800161a:	6078      	str	r0, [r7, #4]
	if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 800161c:	2206      	movs	r2, #6
 800161e:	4952      	ldr	r1, [pc, #328]	@ (8001768 <GPS_parse+0x154>)
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f00b fc4c 	bl	800cebe <strncmp>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d137      	bne.n	800169c <GPS_parse+0x88>
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800162c:	4b4f      	ldr	r3, [pc, #316]	@ (800176c <GPS_parse+0x158>)
 800162e:	9307      	str	r3, [sp, #28]
 8001630:	4b4f      	ldr	r3, [pc, #316]	@ (8001770 <GPS_parse+0x15c>)
 8001632:	9306      	str	r3, [sp, #24]
 8001634:	4b4f      	ldr	r3, [pc, #316]	@ (8001774 <GPS_parse+0x160>)
 8001636:	9305      	str	r3, [sp, #20]
 8001638:	4b4f      	ldr	r3, [pc, #316]	@ (8001778 <GPS_parse+0x164>)
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	4b4f      	ldr	r3, [pc, #316]	@ (800177c <GPS_parse+0x168>)
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	4b4f      	ldr	r3, [pc, #316]	@ (8001780 <GPS_parse+0x16c>)
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	4b4f      	ldr	r3, [pc, #316]	@ (8001784 <GPS_parse+0x170>)
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	4b4f      	ldr	r3, [pc, #316]	@ (8001788 <GPS_parse+0x174>)
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4b4f      	ldr	r3, [pc, #316]	@ (800178c <GPS_parse+0x178>)
 800164e:	4a50      	ldr	r2, [pc, #320]	@ (8001790 <GPS_parse+0x17c>)
 8001650:	4950      	ldr	r1, [pc, #320]	@ (8001794 <GPS_parse+0x180>)
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f00b fbba 	bl	800cdcc <siscanf>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	dd73      	ble.n	8001746 <GPS_parse+0x132>
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800165e:	4b4e      	ldr	r3, [pc, #312]	@ (8001798 <GPS_parse+0x184>)
 8001660:	edd3 7a04 	vldr	s15, [r3, #16]
 8001664:	4b4c      	ldr	r3, [pc, #304]	@ (8001798 <GPS_parse+0x184>)
 8001666:	7e1b      	ldrb	r3, [r3, #24]
 8001668:	4618      	mov	r0, r3
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	f000 f8b9 	bl	80017e4 <GPS_nmea_to_dec>
 8001672:	eef0 7a40 	vmov.f32	s15, s0
 8001676:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <GPS_parse+0x184>)
 8001678:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800167c:	4b46      	ldr	r3, [pc, #280]	@ (8001798 <GPS_parse+0x184>)
 800167e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001682:	4b45      	ldr	r3, [pc, #276]	@ (8001798 <GPS_parse+0x184>)
 8001684:	7e5b      	ldrb	r3, [r3, #25]
 8001686:	4618      	mov	r0, r3
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	f000 f8aa 	bl	80017e4 <GPS_nmea_to_dec>
 8001690:	eef0 7a40 	vmov.f32	s15, s0
 8001694:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <GPS_parse+0x184>)
 8001696:	edc3 7a00 	vstr	s15, [r3]
			return;
 800169a:	e062      	b.n	8001762 <GPS_parse+0x14e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 800169c:	2206      	movs	r2, #6
 800169e:	493f      	ldr	r1, [pc, #252]	@ (800179c <GPS_parse+0x188>)
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f00b fc0c 	bl	800cebe <strncmp>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d115      	bne.n	80016d8 <GPS_parse+0xc4>
		if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80016ac:	4b3c      	ldr	r3, [pc, #240]	@ (80017a0 <GPS_parse+0x18c>)
 80016ae:	9305      	str	r3, [sp, #20]
 80016b0:	4b3c      	ldr	r3, [pc, #240]	@ (80017a4 <GPS_parse+0x190>)
 80016b2:	9304      	str	r3, [sp, #16]
 80016b4:	4b3c      	ldr	r3, [pc, #240]	@ (80017a8 <GPS_parse+0x194>)
 80016b6:	9303      	str	r3, [sp, #12]
 80016b8:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <GPS_parse+0x16c>)
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <GPS_parse+0x170>)
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <GPS_parse+0x174>)
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4b31      	ldr	r3, [pc, #196]	@ (800178c <GPS_parse+0x178>)
 80016c6:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <GPS_parse+0x17c>)
 80016c8:	4938      	ldr	r1, [pc, #224]	@ (80017ac <GPS_parse+0x198>)
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f00b fb7e 	bl	800cdcc <siscanf>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dd37      	ble.n	8001746 <GPS_parse+0x132>
			return;
 80016d6:	e044      	b.n	8001762 <GPS_parse+0x14e>

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80016d8:	2206      	movs	r2, #6
 80016da:	4935      	ldr	r1, [pc, #212]	@ (80017b0 <GPS_parse+0x19c>)
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f00b fbee 	bl	800cebe <strncmp>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <GPS_parse+0xf8>
		if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80016e8:	4b32      	ldr	r3, [pc, #200]	@ (80017b4 <GPS_parse+0x1a0>)
 80016ea:	9303      	str	r3, [sp, #12]
 80016ec:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <GPS_parse+0x17c>)
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <GPS_parse+0x16c>)
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <GPS_parse+0x170>)
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <GPS_parse+0x174>)
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <GPS_parse+0x178>)
 80016fc:	492e      	ldr	r1, [pc, #184]	@ (80017b8 <GPS_parse+0x1a4>)
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f00b fb64 	bl	800cdcc <siscanf>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	dd1d      	ble.n	8001746 <GPS_parse+0x132>
			return;
 800170a:	e02a      	b.n	8001762 <GPS_parse+0x14e>
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800170c:	2206      	movs	r2, #6
 800170e:	492b      	ldr	r1, [pc, #172]	@ (80017bc <GPS_parse+0x1a8>)
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f00b fbd4 	bl	800cebe <strncmp>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d114      	bne.n	8001746 <GPS_parse+0x132>
		if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800171c:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <GPS_parse+0x1ac>)
 800171e:	9305      	str	r3, [sp, #20]
 8001720:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <GPS_parse+0x1b0>)
 8001722:	9304      	str	r3, [sp, #16]
 8001724:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <GPS_parse+0x1b4>)
 8001726:	9303      	str	r3, [sp, #12]
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <GPS_parse+0x194>)
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <GPS_parse+0x1b8>)
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <GPS_parse+0x1bc>)
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <GPS_parse+0x1c0>)
 8001736:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <GPS_parse+0x1c4>)
 8001738:	4928      	ldr	r1, [pc, #160]	@ (80017dc <GPS_parse+0x1c8>)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f00b fb46 	bl	800cdcc <siscanf>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	dc0c      	bgt.n	8001760 <GPS_parse+0x14c>
			return;
	}
	MyGps.alt_gps=GPS.msl_altitude;
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <GPS_parse+0x184>)
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	4a25      	ldr	r2, [pc, #148]	@ (80017e0 <GPS_parse+0x1cc>)
 800174c:	6013      	str	r3, [r2, #0]
	MyGps.lat_gps=GPS.dec_latitude;
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <GPS_parse+0x184>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <GPS_parse+0x1cc>)
 8001754:	6053      	str	r3, [r2, #4]
	MyGps.long_gps=GPS.dec_longitude;
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <GPS_parse+0x184>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <GPS_parse+0x1cc>)
 800175c:	6093      	str	r3, [r2, #8]
 800175e:	e000      	b.n	8001762 <GPS_parse+0x14e>
			return;
 8001760:	bf00      	nop
}
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	080101a8 	.word	0x080101a8
 800176c:	200005ec 	.word	0x200005ec
 8001770:	200005e8 	.word	0x200005e8
 8001774:	200005e4 	.word	0x200005e4
 8001778:	200005e0 	.word	0x200005e0
 800177c:	200005dc 	.word	0x200005dc
 8001780:	200005d9 	.word	0x200005d9
 8001784:	200005cc 	.word	0x200005cc
 8001788:	200005d8 	.word	0x200005d8
 800178c:	200005d0 	.word	0x200005d0
 8001790:	200005d4 	.word	0x200005d4
 8001794:	080101b0 	.word	0x080101b0
 8001798:	200005c0 	.word	0x200005c0
 800179c:	080101d8 	.word	0x080101d8
 80017a0:	200005f8 	.word	0x200005f8
 80017a4:	200005f4 	.word	0x200005f4
 80017a8:	200005f0 	.word	0x200005f0
 80017ac:	080101e0 	.word	0x080101e0
 80017b0:	08010200 	.word	0x08010200
 80017b4:	200005fc 	.word	0x200005fc
 80017b8:	08010208 	.word	0x08010208
 80017bc:	08010224 	.word	0x08010224
 80017c0:	20000614 	.word	0x20000614
 80017c4:	20000610 	.word	0x20000610
 80017c8:	2000060d 	.word	0x2000060d
 80017cc:	2000060c 	.word	0x2000060c
 80017d0:	20000608 	.word	0x20000608
 80017d4:	20000604 	.word	0x20000604
 80017d8:	20000600 	.word	0x20000600
 80017dc:	0801022c 	.word	0x0801022c
 80017e0:	20000000 	.word	0x20000000

080017e4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ee:	4603      	mov	r3, r0
 80017f0:	70fb      	strb	r3, [r7, #3]
	int degree = (int)(deg_coord/100);
 80017f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001878 <GPS_nmea_to_dec+0x94>
 80017fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001802:	ee17 3a90 	vmov	r3, s15
 8001806:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree*100;
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2264      	movs	r2, #100	@ 0x64
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001818:	ed97 7a01 	vldr	s14, [r7, #4]
 800181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001820:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8001824:	ed97 7a03 	vldr	s14, [r7, #12]
 8001828:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800187c <GPS_nmea_to_dec+0x98>
 800182c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001830:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W') { // return negative
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	2b53      	cmp	r3, #83	@ 0x53
 800184e:	d002      	beq.n	8001856 <GPS_nmea_to_dec+0x72>
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	2b57      	cmp	r3, #87	@ 0x57
 8001854:	d105      	bne.n	8001862 <GPS_nmea_to_dec+0x7e>
		decimal *= -1;
 8001856:	edd7 7a05 	vldr	s15, [r7, #20]
 800185a:	eef1 7a67 	vneg.f32	s15, s15
 800185e:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	ee07 3a90 	vmov	s15, r3
}
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	42c80000 	.word	0x42c80000
 800187c:	42700000 	.word	0x42700000

08001880 <GPS_Nmea_time>:
void GPS_Nmea_time(){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	uint32_t time_int = (uint32_t)GPS.utc_time;
 8001886:	4b3d      	ldr	r3, [pc, #244]	@ (800197c <GPS_Nmea_time+0xfc>)
 8001888:	edd3 7a05 	vldr	s15, [r3, #20]
 800188c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001890:	ee17 3a90 	vmov	r3, s15
 8001894:	607b      	str	r3, [r7, #4]
	hr = time_int/10000 + MyGps.offset/100;   // get the hours from the 6 digit number
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a39      	ldr	r2, [pc, #228]	@ (8001980 <GPS_Nmea_time+0x100>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0b5a      	lsrs	r2, r3, #13
 80018a0:	4b38      	ldr	r3, [pc, #224]	@ (8001984 <GPS_Nmea_time+0x104>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	4938      	ldr	r1, [pc, #224]	@ (8001988 <GPS_Nmea_time+0x108>)
 80018a6:	fb81 0103 	smull	r0, r1, r1, r3
 80018aa:	1149      	asrs	r1, r1, #5
 80018ac:	17db      	asrs	r3, r3, #31
 80018ae:	1acb      	subs	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b35      	ldr	r3, [pc, #212]	@ (800198c <GPS_Nmea_time+0x10c>)
 80018b6:	601a      	str	r2, [r3, #0]

	min = (time_int/100)%100 + MyGps.offset%100;  // get the minutes from the 6 digit number
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a33      	ldr	r2, [pc, #204]	@ (8001988 <GPS_Nmea_time+0x108>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	095a      	lsrs	r2, r3, #5
 80018c2:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <GPS_Nmea_time+0x108>)
 80018c4:	fba3 1302 	umull	r1, r3, r3, r2
 80018c8:	095b      	lsrs	r3, r3, #5
 80018ca:	2164      	movs	r1, #100	@ 0x64
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001984 <GPS_Nmea_time+0x104>)
 80018d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018d6:	492c      	ldr	r1, [pc, #176]	@ (8001988 <GPS_Nmea_time+0x108>)
 80018d8:	fb81 0102 	smull	r0, r1, r1, r2
 80018dc:	1148      	asrs	r0, r1, #5
 80018de:	17d1      	asrs	r1, r2, #31
 80018e0:	1a41      	subs	r1, r0, r1
 80018e2:	2064      	movs	r0, #100	@ 0x64
 80018e4:	fb00 f101 	mul.w	r1, r0, r1
 80018e8:	1a51      	subs	r1, r2, r1
 80018ea:	460a      	mov	r2, r1
 80018ec:	4413      	add	r3, r2
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <GPS_Nmea_time+0x110>)
 80018f2:	601a      	str	r2, [r3, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <GPS_Nmea_time+0x110>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80018fa:	dd09      	ble.n	8001910 <GPS_Nmea_time+0x90>
	{
		min = min-60;
 80018fc:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <GPS_Nmea_time+0x110>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3b3c      	subs	r3, #60	@ 0x3c
 8001902:	4a23      	ldr	r2, [pc, #140]	@ (8001990 <GPS_Nmea_time+0x110>)
 8001904:	6013      	str	r3, [r2, #0]
		hr++;
 8001906:	4b21      	ldr	r3, [pc, #132]	@ (800198c <GPS_Nmea_time+0x10c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	4a1f      	ldr	r2, [pc, #124]	@ (800198c <GPS_Nmea_time+0x10c>)
 800190e:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001910:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <GPS_Nmea_time+0x10c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	da09      	bge.n	800192c <GPS_Nmea_time+0xac>
	{
		hr=24+hr;
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <GPS_Nmea_time+0x10c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3318      	adds	r3, #24
 800191e:	4a1b      	ldr	r2, [pc, #108]	@ (800198c <GPS_Nmea_time+0x10c>)
 8001920:	6013      	str	r3, [r2, #0]
		daychange--;
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <GPS_Nmea_time+0x114>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3b01      	subs	r3, #1
 8001928:	4a1a      	ldr	r2, [pc, #104]	@ (8001994 <GPS_Nmea_time+0x114>)
 800192a:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 800192c:	4b17      	ldr	r3, [pc, #92]	@ (800198c <GPS_Nmea_time+0x10c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b17      	cmp	r3, #23
 8001932:	dd09      	ble.n	8001948 <GPS_Nmea_time+0xc8>
	{
		hr=hr-24;
 8001934:	4b15      	ldr	r3, [pc, #84]	@ (800198c <GPS_Nmea_time+0x10c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3b18      	subs	r3, #24
 800193a:	4a14      	ldr	r2, [pc, #80]	@ (800198c <GPS_Nmea_time+0x10c>)
 800193c:	6013      	str	r3, [r2, #0]
		daychange++;
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <GPS_Nmea_time+0x114>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a13      	ldr	r2, [pc, #76]	@ (8001994 <GPS_Nmea_time+0x114>)
 8001946:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	MyGps.hours= hr;
 8001948:	4b10      	ldr	r3, [pc, #64]	@ (800198c <GPS_Nmea_time+0x10c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <GPS_Nmea_time+0x104>)
 800194e:	60d3      	str	r3, [r2, #12]
	MyGps.minutes= min;
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <GPS_Nmea_time+0x110>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <GPS_Nmea_time+0x104>)
 8001956:	6113      	str	r3, [r2, #16]
	MyGps.seconds = time_int%100;
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <GPS_Nmea_time+0x108>)
 800195c:	fba3 1302 	umull	r1, r3, r3, r2
 8001960:	095b      	lsrs	r3, r3, #5
 8001962:	2164      	movs	r1, #100	@ 0x64
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	461a      	mov	r2, r3
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <GPS_Nmea_time+0x104>)
 800196e:	615a      	str	r2, [r3, #20]

}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	200005c0 	.word	0x200005c0
 8001980:	d1b71759 	.word	0xd1b71759
 8001984:	20000000 	.word	0x20000000
 8001988:	51eb851f 	.word	0x51eb851f
 800198c:	200005a8 	.word	0x200005a8
 8001990:	200005ac 	.word	0x200005ac
 8001994:	200005bc 	.word	0x200005bc

08001998 <GPS_Nmea_Date>:
void GPS_Nmea_Date(){
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	// Date in the format 280222
		days = GPS.date/10000;
 800199c:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <GPS_Nmea_Date+0x8c>)
 800199e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a0:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <GPS_Nmea_Date+0x90>)
 80019a2:	fb82 1203 	smull	r1, r2, r2, r3
 80019a6:	1312      	asrs	r2, r2, #12
 80019a8:	17db      	asrs	r3, r3, #31
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	4a1f      	ldr	r2, [pc, #124]	@ (8001a2c <GPS_Nmea_Date+0x94>)
 80019ae:	6013      	str	r3, [r2, #0]
		mon = (GPS.date/100)%100;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a24 <GPS_Nmea_Date+0x8c>)
 80019b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a30 <GPS_Nmea_Date+0x98>)
 80019b6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ba:	1152      	asrs	r2, r2, #5
 80019bc:	17db      	asrs	r3, r3, #31
 80019be:	1ad2      	subs	r2, r2, r3
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <GPS_Nmea_Date+0x98>)
 80019c2:	fb83 1302 	smull	r1, r3, r3, r2
 80019c6:	1159      	asrs	r1, r3, #5
 80019c8:	17d3      	asrs	r3, r2, #31
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	2164      	movs	r1, #100	@ 0x64
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <GPS_Nmea_Date+0x9c>)
 80019d6:	6013      	str	r3, [r2, #0]
		yr = GPS.date%100;
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <GPS_Nmea_Date+0x8c>)
 80019da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <GPS_Nmea_Date+0x98>)
 80019de:	fb83 1302 	smull	r1, r3, r3, r2
 80019e2:	1159      	asrs	r1, r3, #5
 80019e4:	17d3      	asrs	r3, r2, #31
 80019e6:	1acb      	subs	r3, r1, r3
 80019e8:	2164      	movs	r1, #100	@ 0x64
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <GPS_Nmea_Date+0xa0>)
 80019f2:	6013      	str	r3, [r2, #0]

		days = days+daychange;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <GPS_Nmea_Date+0x94>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <GPS_Nmea_Date+0xa4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <GPS_Nmea_Date+0x94>)
 8001a00:	6013      	str	r3, [r2, #0]
		MyGps.day=days;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <GPS_Nmea_Date+0x94>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a0e      	ldr	r2, [pc, #56]	@ (8001a40 <GPS_Nmea_Date+0xa8>)
 8001a08:	6193      	str	r3, [r2, #24]
		MyGps.month=mon;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <GPS_Nmea_Date+0x9c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <GPS_Nmea_Date+0xa8>)
 8001a10:	61d3      	str	r3, [r2, #28]
		MyGps.year=yr;
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <GPS_Nmea_Date+0xa0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <GPS_Nmea_Date+0xa8>)
 8001a18:	6213      	str	r3, [r2, #32]
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	200005c0 	.word	0x200005c0
 8001a28:	68db8bad 	.word	0x68db8bad
 8001a2c:	200005b0 	.word	0x200005b0
 8001a30:	51eb851f 	.word	0x51eb851f
 8001a34:	200005b4 	.word	0x200005b4
 8001a38:	200005b8 	.word	0x200005b8
 8001a3c:	200005bc 	.word	0x200005bc
 8001a40:	20000000 	.word	0x20000000

08001a44 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <MX_I2C2_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <MX_I2C2_Init+0x7c>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a7e:	480e      	ldr	r0, [pc, #56]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a80:	f002 f982 	bl	8003d88 <HAL_I2C_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a8a:	f000 f93b 	bl	8001d04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4809      	ldr	r0, [pc, #36]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001a92:	f003 f82c 	bl	8004aee <HAL_I2CEx_ConfigAnalogFilter>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a9c:	f000 f932 	bl	8001d04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_I2C2_Init+0x74>)
 8001aa4:	f003 f86e 	bl	8004b84 <HAL_I2CEx_ConfigDigitalFilter>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f000 f929 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000618 	.word	0x20000618
 8001abc:	40005800 	.word	0x40005800
 8001ac0:	10d19ce4 	.word	0x10d19ce4

08001ac4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2288      	movs	r2, #136	@ 0x88
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00b f9e2 	bl	800ceae <memset>
  if(i2cHandle->Instance==I2C2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a29      	ldr	r2, [pc, #164]	@ (8001b94 <HAL_I2C_MspInit+0xd0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d14b      	bne.n	8001b8c <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 ff21 	bl	8005948 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b0c:	f000 f8fa 	bl	8001d04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <HAL_I2C_MspInit+0xd4>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	4a20      	ldr	r2, [pc, #128]	@ (8001b98 <HAL_I2C_MspInit+0xd4>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_I2C_MspInit+0xd4>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4813      	ldr	r0, [pc, #76]	@ (8001b9c <HAL_I2C_MspInit+0xd8>)
 8001b50:	f001 ff40 	bl	80039d4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b54:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_I2C_MspInit+0xd4>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b58:	4a0f      	ldr	r2, [pc, #60]	@ (8001b98 <HAL_I2C_MspInit+0xd4>)
 8001b5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b60:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <HAL_I2C_MspInit+0xd4>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2105      	movs	r1, #5
 8001b70:	2021      	movs	r0, #33	@ 0x21
 8001b72:	f001 fe77 	bl	8003864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b76:	2021      	movs	r0, #33	@ 0x21
 8001b78:	f001 fe90 	bl	800389c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	2022      	movs	r0, #34	@ 0x22
 8001b82:	f001 fe6f 	bl	8003864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b86:	2022      	movs	r0, #34	@ 0x22
 8001b88:	f001 fe88 	bl	800389c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	37b0      	adds	r7, #176	@ 0xb0
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40005800 	.word	0x40005800
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	48000400 	.word	0x48000400

08001ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba4:	f000 fdc2 	bl	800272c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba8:	f000 f81c 	bl	8001be4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bac:	f000 f86d 	bl	8001c8a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb0:	f7ff fc44 	bl	800143c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bb4:	f000 fcae 	bl	8002514 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001bb8:	f000 f996 	bl	8001ee8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001bbc:	f000 fc7a 	bl	80024b4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001bc0:	f7ff fa2e 	bl	8001020 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001bc4:	f7ff ff3e 	bl	8001a44 <MX_I2C2_Init>
  MX_ADC2_Init();
 8001bc8:	f7ff faa0 	bl	800110c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  Reset_Flag=1;
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <main+0x40>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001bd2:	f7ff fb99 	bl	8001308 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bd6:	f006 fea9 	bl	800892c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bda:	bf00      	nop
 8001bdc:	e7fd      	b.n	8001bda <main+0x3a>
 8001bde:	bf00      	nop
 8001be0:	2000066c 	.word	0x2000066c

08001be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b096      	sub	sp, #88	@ 0x58
 8001be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	2244      	movs	r2, #68	@ 0x44
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00b f95b 	bl	800ceae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c0a:	f003 f815 	bl	8004c38 <HAL_PWREx_ControlVoltageScaling>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c14:	f000 f876 	bl	8001d04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c18:	230a      	movs	r3, #10
 8001c1a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c20:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c22:	2310      	movs	r3, #16
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c26:	2301      	movs	r3, #1
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c36:	230a      	movs	r3, #10
 8001c38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c42:	2302      	movs	r3, #2
 8001c44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 f84a 	bl	8004ce4 <HAL_RCC_OscConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001c56:	f000 f855 	bl	8001d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2104      	movs	r1, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fc12 	bl	800549c <HAL_RCC_ClockConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c7e:	f000 f841 	bl	8001d04 <Error_Handler>
  }
}
 8001c82:	bf00      	nop
 8001c84:	3758      	adds	r7, #88	@ 0x58
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b0a2      	sub	sp, #136	@ 0x88
 8001c8e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2288      	movs	r2, #136	@ 0x88
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f00b f909 	bl	800ceae <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ca0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ca2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001cc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cc4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fe3d 	bl	8005948 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001cd4:	f000 f816 	bl	8001d04 <Error_Handler>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3788      	adds	r7, #136	@ 0x88
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a04      	ldr	r2, [pc, #16]	@ (8001d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001cf2:	f000 fd3b 	bl	800276c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40001000 	.word	0x40001000

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <Error_Handler+0x8>

08001d10 <Start_GPS_Task>:
GPS_IHM gps_to_ihm={0.0};
// xQueueHandle GpsToIhm;
extern QueueHandle_t GpsToIhm;

void Start_GPS_Task(void const * argument)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	GpsMessageBufferHandle = xMessageBufferCreate(xGpsMessageBufferSizeBytes);
 8001d18:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f007 fa45 	bl	80091b0 <xStreamBufferGenericCreate>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a17      	ldr	r2, [pc, #92]	@ (8001d88 <Start_GPS_Task+0x78>)
 8001d2a:	6013      	str	r3, [r2, #0]
	if( GpsMessageBufferHandle != NULL )
 8001d2c:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <Start_GPS_Task+0x78>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <Start_GPS_Task+0x30>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 8001d34:	2364      	movs	r3, #100	@ 0x64
 8001d36:	2222      	movs	r2, #34	@ 0x22
 8001d38:	4914      	ldr	r1, [pc, #80]	@ (8001d8c <Start_GPS_Task+0x7c>)
 8001d3a:	4815      	ldr	r0, [pc, #84]	@ (8001d90 <Start_GPS_Task+0x80>)
 8001d3c:	f005 fa26 	bl	800718c <HAL_UART_Transmit>
	}
	GPS_Init();
 8001d40:	f7ff fbf8 	bl	8001534 <GPS_Init>
	for(;;)
	{
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8001d44:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <Start_GPS_Task+0x78>)
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d50:	4910      	ldr	r1, [pc, #64]	@ (8001d94 <Start_GPS_Task+0x84>)
 8001d52:	f007 fa8b 	bl	800926c <xStreamBufferReceive>
		Sentence_parse((char*)received_nmea);
 8001d56:	480f      	ldr	r0, [pc, #60]	@ (8001d94 <Start_GPS_Task+0x84>)
 8001d58:	f000 f826 	bl	8001da8 <Sentence_parse>
		if (Assign_Values==1){
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <Start_GPS_Task+0x88>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <Start_GPS_Task+0x62>
			GPS_Nmea_time();
 8001d64:	f7ff fd8c 	bl	8001880 <GPS_Nmea_time>
			GPS_Nmea_Date();
 8001d68:	f7ff fe16 	bl	8001998 <GPS_Nmea_Date>
			GPS_GetFromRTC(&gps_to_rtc);};
 8001d6c:	480b      	ldr	r0, [pc, #44]	@ (8001d9c <Start_GPS_Task+0x8c>)
 8001d6e:	f000 f837 	bl	8001de0 <GPS_GetFromRTC>
		xQueueSend(GpsToIhm, &gps_to_ihm,0);
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <Start_GPS_Task+0x90>)
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	2300      	movs	r3, #0
 8001d78:	2200      	movs	r2, #0
 8001d7a:	490a      	ldr	r1, [pc, #40]	@ (8001da4 <Start_GPS_Task+0x94>)
 8001d7c:	f007 f842 	bl	8008e04 <xQueueGenericSend>

		osDelay(100);
 8001d80:	2064      	movs	r0, #100	@ 0x64
 8001d82:	f006 fe26 	bl	80089d2 <osDelay>
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8001d86:	e7dd      	b.n	8001d44 <Start_GPS_Task+0x34>
 8001d88:	20000670 	.word	0x20000670
 8001d8c:	0801024c 	.word	0x0801024c
 8001d90:	20000998 	.word	0x20000998
 8001d94:	20000674 	.word	0x20000674
 8001d98:	20000868 	.word	0x20000868
 8001d9c:	2000086c 	.word	0x2000086c
 8001da0:	200002ec 	.word	0x200002ec
 8001da4:	20000888 	.word	0x20000888

08001da8 <Sentence_parse>:

	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
}

void Sentence_parse(char* str){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	if (GPS_validate(str)) {
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fbcd 	bl	8001550 <GPS_validate>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <Sentence_parse+0x22>
		GPS_parse(str);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fc29 	bl	8001614 <GPS_parse>
		Assign_Values=1;
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <Sentence_parse+0x30>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
	}
	else GPS_Valid=0;
}
 8001dc8:	e002      	b.n	8001dd0 <Sentence_parse+0x28>
	else GPS_Valid=0;
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <Sentence_parse+0x34>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000868 	.word	0x20000868
 8001ddc:	20000028 	.word	0x20000028

08001de0 <GPS_GetFromRTC>:
void GPS_GetFromRTC(GPS_RTC *gps_rtc){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	@ 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time;
	RTC_DateTypeDef rtc_date;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	2200      	movs	r2, #0
 8001dee:	4619      	mov	r1, r3
 8001df0:	4817      	ldr	r0, [pc, #92]	@ (8001e50 <GPS_GetFromRTC+0x70>)
 8001df2:	f004 fb8a 	bl	800650a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4814      	ldr	r0, [pc, #80]	@ (8001e50 <GPS_GetFromRTC+0x70>)
 8001e00:	f004 fc66 	bl	80066d0 <HAL_RTC_GetDate>
	int rtc_minutes_total = rtc_time.Hours * 60 + rtc_time.Minutes;
 8001e04:	7c3b      	ldrb	r3, [r7, #16]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	461a      	mov	r2, r3
 8001e12:	7c7b      	ldrb	r3, [r7, #17]
 8001e14:	4413      	add	r3, r2
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int gps_minutes_total = gps_rtc->hours * 60 + gps_rtc->minutes;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int diff_minutes = abs(rtc_minutes_total - gps_minutes_total);
 8001e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bfb8      	it	lt
 8001e38:	425b      	neglt	r3, r3
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (diff_minutes >= 5)
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	dd02      	ble.n	8001e48 <GPS_GetFromRTC+0x68>
		RTC_SetFromGPS(gps_rtc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f806 	bl	8001e54 <RTC_SetFromGPS>
	/*	HAL_UART_Transmit(&huart2, (const uint8_t*)"RTC synchronized from GPS\r\n", strlen("RTC synchronized from GPS\r\n"), 1000);
	} else {
		HAL_UART_Transmit(&huart2, (const uint8_t*)"RTC sync skipped (diff < 5 min)\r\n", strlen("RTC sync skipped (diff < 5 min)\r\n"), 1000);
	}*/
}
 8001e48:	bf00      	nop
 8001e4a:	3730      	adds	r7, #48	@ 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000894 	.word	0x20000894

08001e54 <RTC_SetFromGPS>:
void RTC_SetFromGPS(GPS_RTC *gps_rtc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

	RTC_TimeTypeDef sTime={0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate ={0} ;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
	sTime.Hours = gps_rtc->hours;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = gps_rtc->minutes;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = gps_rtc->seconds;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
	sDate.Year = gps_rtc->year;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	72fb      	strb	r3, [r7, #11]
	sDate.Month = gps_rtc->month;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	727b      	strb	r3, [r7, #9]
	sDate.Date = gps_rtc->day;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	72bb      	strb	r3, [r7, #10]
	sDate.WeekDay = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	@ (8001ee4 <RTC_SetFromGPS+0x90>)
 8001eb6:	f004 fa8b 	bl	80063d0 <HAL_RTC_SetTime>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <RTC_SetFromGPS+0x70>
	{
		Error_Handler();
 8001ec0:	f7ff ff20 	bl	8001d04 <Error_Handler>
	}
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <RTC_SetFromGPS+0x90>)
 8001ece:	f004 fb78 	bl	80065c2 <HAL_RTC_SetDate>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <RTC_SetFromGPS+0x88>
	{
		Error_Handler();
 8001ed8:	f7ff ff14 	bl	8001d04 <Error_Handler>
	}
}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000894 	.word	0x20000894

08001ee8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b092      	sub	sp, #72	@ 0x48
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001eee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001efe:	2300      	movs	r3, #0
 8001f00:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	222c      	movs	r2, #44	@ 0x2c
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f00a ffd0 	bl	800ceae <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f10:	4a3c      	ldr	r2, [pc, #240]	@ (8002004 <MX_RTC_Init+0x11c>)
 8001f12:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f14:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f1a:	4b39      	ldr	r3, [pc, #228]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f1c:	227f      	movs	r2, #127	@ 0x7f
 8001f1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f20:	4b37      	ldr	r3, [pc, #220]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f22:	22ff      	movs	r2, #255	@ 0xff
 8001f24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f26:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f2c:	4b34      	ldr	r3, [pc, #208]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f32:	4b33      	ldr	r3, [pc, #204]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f38:	4b31      	ldr	r3, [pc, #196]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f3e:	4830      	ldr	r0, [pc, #192]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f40:	f004 f9be 	bl	80062c0 <HAL_RTC_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001f4a:	f7ff fedb 	bl	8001d04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 8001f4e:	2310      	movs	r3, #16
 8001f50:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 27;
 8001f54:	231b      	movs	r3, #27
 8001f56:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 30;
 8001f5a:	231e      	movs	r3, #30
 8001f5c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4823      	ldr	r0, [pc, #140]	@ (8002000 <MX_RTC_Init+0x118>)
 8001f72:	f004 fa2d 	bl	80063d0 <HAL_RTC_SetTime>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001f7c:	f7ff fec2 	bl	8001d04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001f80:	2302      	movs	r3, #2
 8001f82:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JUNE;
 8001f86:	2306      	movs	r3, #6
 8001f88:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 3;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 25;
 8001f92:	2319      	movs	r3, #25
 8001f94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4817      	ldr	r0, [pc, #92]	@ (8002000 <MX_RTC_Init+0x118>)
 8001fa2:	f004 fb0e 	bl	80065c2 <HAL_RTC_SetDate>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001fac:	f7ff feaa 	bl	8001d04 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	@ (8002000 <MX_RTC_Init+0x118>)
 8001fe8:	f004 fbbf 	bl	800676a <HAL_RTC_SetAlarm>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001ff2:	f7ff fe87 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	3748      	adds	r7, #72	@ 0x48
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000894 	.word	0x20000894
 8002004:	40002800 	.word	0x40002800

08002008 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0a4      	sub	sp, #144	@ 0x90
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	2288      	movs	r2, #136	@ 0x88
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f00a ff48 	bl	800ceae <memset>
  if(rtcHandle->Instance==RTC)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a10      	ldr	r2, [pc, #64]	@ (8002064 <HAL_RTC_MspInit+0x5c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d118      	bne.n	800205a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002028:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800202e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fc84 	bl	8005948 <HAL_RCCEx_PeriphCLKConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002046:	f7ff fe5d 	bl	8001d04 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800204a:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <HAL_RTC_MspInit+0x60>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002050:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <HAL_RTC_MspInit+0x60>)
 8002052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800205a:	bf00      	nop
 800205c:	3790      	adds	r7, #144	@ 0x90
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40002800 	.word	0x40002800
 8002068:	40021000 	.word	0x40021000

0800206c <Start_Sensors_Task>:
uint8_t counter = 0;
uint8_t precipitation_flag=0;
extern osThreadId Sensors_TaskHandle;
#define SIGNAL_RAIN_DETECTED  (1 << 0)

void Start_Sensors_Task(void const * argument) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), portMAX_DELAY);
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*)"Erreur capteur SHT40\r\n", 23, HAL_MAX_DELAY);
			}*/
	for (;;) {
		osEvent evt = osSignalWait(SIGNAL_RAIN_DETECTED, osWaitForever);
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	2101      	movs	r1, #1
 800207e:	4618      	mov	r0, r3
 8002080:	f006 fcfc 	bl	8008a7c <osSignalWait>
		        if (evt.status == osEventSignal) {
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b08      	cmp	r3, #8
 8002088:	d106      	bne.n	8002098 <Start_Sensors_Task+0x2c>
		            HAL_UART_Transmit(&huart2, (uint8_t*)"🌧️ Précipitation détectée!\r\n", 30, HAL_MAX_DELAY);
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	221e      	movs	r2, #30
 8002090:	4904      	ldr	r1, [pc, #16]	@ (80020a4 <Start_Sensors_Task+0x38>)
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <Start_Sensors_Task+0x3c>)
 8002094:	f005 f87a 	bl	800718c <HAL_UART_Transmit>
		        }
		        /*if (precipitation_flag) {
		    HAL_UART_Transmit(&huart2, (uint8_t*)" Précipitation détectée!\r\n", strlen(" Précipitation détectée!\r\n"), 1000);
		    precipitation_flag = 0;
		}*/
		osDelay(2000);
 8002098:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800209c:	f006 fc99 	bl	80089d2 <osDelay>
	for (;;) {
 80020a0:	e7e8      	b.n	8002074 <Start_Sensors_Task+0x8>
 80020a2:	bf00      	nop
 80020a4:	080102a0 	.word	0x080102a0
 80020a8:	20000998 	.word	0x20000998

080020ac <HAL_GPIO_EXTI_Callback>:

	return 0;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_1)
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d121      	bne.n	8002100 <HAL_GPIO_EXTI_Callback+0x54>
	{
		uint32_t now = HAL_GetTick();
 80020bc:	f000 fb6a 	bl	8002794 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]
		if (now - last_press_time > 200) {
 80020c2:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <HAL_GPIO_EXTI_Callback+0x5c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80020cc:	d908      	bls.n	80020e0 <HAL_GPIO_EXTI_Callback+0x34>
			last_press_time = now;
 80020ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002108 <HAL_GPIO_EXTI_Callback+0x5c>)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6013      	str	r3, [r2, #0]
			counter++;
 80020d4:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_GPIO_EXTI_Callback+0x60>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_GPIO_EXTI_Callback+0x60>)
 80020de:	701a      	strb	r2, [r3, #0]
		}
		if (counter >= 2) {
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <HAL_GPIO_EXTI_Callback+0x60>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d905      	bls.n	80020f4 <HAL_GPIO_EXTI_Callback+0x48>
			precipitation_flag = 1;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x64>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <HAL_GPIO_EXTI_Callback+0x60>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
		}
        osSignalSet(Sensors_TaskHandle, SIGNAL_RAIN_DETECTED);
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_GPIO_EXTI_Callback+0x68>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f006 fc7e 	bl	80089fc <osSignalSet>

	}

}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200008b8 	.word	0x200008b8
 800210c:	200008bc 	.word	0x200008bc
 8002110:	200008bd 	.word	0x200008bd
 8002114:	20000300 	.word	0x20000300

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <HAL_MspInit+0x4c>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	4a10      	ldr	r2, [pc, #64]	@ (8002164 <HAL_MspInit+0x4c>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6613      	str	r3, [r2, #96]	@ 0x60
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <HAL_MspInit+0x4c>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <HAL_MspInit+0x4c>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <HAL_MspInit+0x4c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	@ 0x58
 8002142:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_MspInit+0x4c>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	210f      	movs	r1, #15
 8002152:	f06f 0001 	mvn.w	r0, #1
 8002156:	f001 fb85 	bl	8003864 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000

08002168 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	@ 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002176:	4b34      	ldr	r3, [pc, #208]	@ (8002248 <HAL_InitTick+0xe0>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	4a33      	ldr	r2, [pc, #204]	@ (8002248 <HAL_InitTick+0xe0>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6593      	str	r3, [r2, #88]	@ 0x58
 8002182:	4b31      	ldr	r3, [pc, #196]	@ (8002248 <HAL_InitTick+0xe0>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800218e:	f107 0210 	add.w	r2, r7, #16
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fb43 	bl	8005824 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021a8:	f003 fb10 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 80021ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80021ae:	e004      	b.n	80021ba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021b0:	f003 fb0c 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 80021b4:	4603      	mov	r3, r0
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021bc:	4a23      	ldr	r2, [pc, #140]	@ (800224c <HAL_InitTick+0xe4>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9b      	lsrs	r3, r3, #18
 80021c4:	3b01      	subs	r3, #1
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021c8:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <HAL_InitTick+0xe8>)
 80021ca:	4a22      	ldr	r2, [pc, #136]	@ (8002254 <HAL_InitTick+0xec>)
 80021cc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <HAL_InitTick+0xe8>)
 80021d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <HAL_InitTick+0xe8>)
 80021d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <HAL_InitTick+0xe8>)
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_InitTick+0xe8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_InitTick+0xe8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021ee:	4818      	ldr	r0, [pc, #96]	@ (8002250 <HAL_InitTick+0xe8>)
 80021f0:	f004 fcb8 	bl	8006b64 <HAL_TIM_Base_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80021fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d11b      	bne.n	800223a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002202:	4813      	ldr	r0, [pc, #76]	@ (8002250 <HAL_InitTick+0xe8>)
 8002204:	f004 fd10 	bl	8006c28 <HAL_TIM_Base_Start_IT>
 8002208:	4603      	mov	r3, r0
 800220a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800220e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002212:	2b00      	cmp	r3, #0
 8002214:	d111      	bne.n	800223a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002216:	2036      	movs	r0, #54	@ 0x36
 8002218:	f001 fb40 	bl	800389c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	d808      	bhi.n	8002234 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002222:	2200      	movs	r2, #0
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	2036      	movs	r0, #54	@ 0x36
 8002228:	f001 fb1c 	bl	8003864 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800222c:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <HAL_InitTick+0xf0>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e002      	b.n	800223a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800223a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800223e:	4618      	mov	r0, r3
 8002240:	3738      	adds	r7, #56	@ 0x38
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	431bde83 	.word	0x431bde83
 8002250:	200008c0 	.word	0x200008c0
 8002254:	40001000 	.word	0x40001000
 8002258:	20000030 	.word	0x20000030

0800225c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <NMI_Handler+0x4>

08002264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <MemManage_Handler+0x4>

08002274 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <UsageFault_Handler+0x4>

08002284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002296:	2002      	movs	r0, #2
 8002298:	f001 fd5e 	bl	8003d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80022a4:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <I2C2_EV_IRQHandler+0x10>)
 80022a6:	f001 fe0a 	bl	8003ebe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000618 	.word	0x20000618

080022b4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <I2C2_ER_IRQHandler+0x10>)
 80022ba:	f001 fe1a 	bl	8003ef2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000618 	.word	0x20000618

080022c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <USART1_IRQHandler+0x10>)
 80022ce:	f005 f833 	bl	8007338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000910 	.word	0x20000910

080022dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022e0:	4802      	ldr	r0, [pc, #8]	@ (80022ec <USART2_IRQHandler+0x10>)
 80022e2:	f005 f829 	bl	8007338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000998 	.word	0x20000998

080022f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022f4:	4802      	ldr	r0, [pc, #8]	@ (8002300 <TIM6_DAC_IRQHandler+0x10>)
 80022f6:	f004 fd07 	bl	8006d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200008c0 	.word	0x200008c0

08002304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return 1;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_kill>:

int _kill(int pid, int sig)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800231e:	f00a fe99 	bl	800d054 <__errno>
 8002322:	4603      	mov	r3, r0
 8002324:	2216      	movs	r2, #22
 8002326:	601a      	str	r2, [r3, #0]
  return -1;
 8002328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_exit>:

void _exit (int status)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ffe7 	bl	8002314 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002346:	bf00      	nop
 8002348:	e7fd      	b.n	8002346 <_exit+0x12>

0800234a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e00a      	b.n	8002372 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800235c:	f3af 8000 	nop.w
 8002360:	4601      	mov	r1, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	60ba      	str	r2, [r7, #8]
 8002368:	b2ca      	uxtb	r2, r1
 800236a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbf0      	blt.n	800235c <_read+0x12>
  }

  return len;
 800237a:	687b      	ldr	r3, [r7, #4]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e009      	b.n	80023aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	60ba      	str	r2, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	dbf1      	blt.n	8002396 <_write+0x12>
  }
  return len;
 80023b2:	687b      	ldr	r3, [r7, #4]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_close>:

int _close(int file)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023e4:	605a      	str	r2, [r3, #4]
  return 0;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_isatty>:

int _isatty(int file)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023fc:	2301      	movs	r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800242c:	4a14      	ldr	r2, [pc, #80]	@ (8002480 <_sbrk+0x5c>)
 800242e:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <_sbrk+0x60>)
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <_sbrk+0x64>)
 8002442:	4a12      	ldr	r2, [pc, #72]	@ (800248c <_sbrk+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	429a      	cmp	r2, r3
 8002452:	d207      	bcs.n	8002464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002454:	f00a fdfe 	bl	800d054 <__errno>
 8002458:	4603      	mov	r3, r0
 800245a:	220c      	movs	r2, #12
 800245c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	e009      	b.n	8002478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246a:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <_sbrk+0x64>)
 8002474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20018000 	.word	0x20018000
 8002484:	00000400 	.word	0x00000400
 8002488:	2000090c 	.word	0x2000090c
 800248c:	20005ae8 	.word	0x20005ae8

08002490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <SystemInit+0x20>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <SystemInit+0x20>)
 800249c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024b8:	4b14      	ldr	r3, [pc, #80]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024ba:	4a15      	ldr	r2, [pc, #84]	@ (8002510 <MX_USART1_UART_Init+0x5c>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024da:	2204      	movs	r2, #4
 80024dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <MX_USART1_UART_Init+0x58>)
 80024f8:	f004 fdfa 	bl	80070f0 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002502:	f7ff fbff 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000910 	.word	0x20000910
 8002510:	40013800 	.word	0x40013800

08002514 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <MX_USART2_UART_Init+0x58>)
 800251a:	4a15      	ldr	r2, [pc, #84]	@ (8002570 <MX_USART2_UART_Init+0x5c>)
 800251c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800251e:	4b13      	ldr	r3, [pc, #76]	@ (800256c <MX_USART2_UART_Init+0x58>)
 8002520:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002526:	4b11      	ldr	r3, [pc, #68]	@ (800256c <MX_USART2_UART_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800252c:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <MX_USART2_UART_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <MX_USART2_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <MX_USART2_UART_Init+0x58>)
 800253a:	220c      	movs	r2, #12
 800253c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <MX_USART2_UART_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002544:	4b09      	ldr	r3, [pc, #36]	@ (800256c <MX_USART2_UART_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254a:	4b08      	ldr	r3, [pc, #32]	@ (800256c <MX_USART2_UART_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <MX_USART2_UART_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002556:	4805      	ldr	r0, [pc, #20]	@ (800256c <MX_USART2_UART_Init+0x58>)
 8002558:	f004 fdca 	bl	80070f0 <HAL_UART_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002562:	f7ff fbcf 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000998 	.word	0x20000998
 8002570:	40004400 	.word	0x40004400

08002574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0ae      	sub	sp, #184	@ 0xb8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	2288      	movs	r2, #136	@ 0x88
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f00a fc8a 	bl	800ceae <memset>
  if(uartHandle->Instance==USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a4b      	ldr	r2, [pc, #300]	@ (80026cc <HAL_UART_MspInit+0x158>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d145      	bne.n	8002630 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025a4:	2301      	movs	r3, #1
 80025a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025a8:	2300      	movs	r3, #0
 80025aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ac:	f107 031c 	add.w	r3, r7, #28
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 f9c9 	bl	8005948 <HAL_RCCEx_PeriphCLKConfig>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025bc:	f7ff fba2 	bl	8001d04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025c0:	4b43      	ldr	r3, [pc, #268]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 80025c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c4:	4a42      	ldr	r2, [pc, #264]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 80025c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80025cc:	4b40      	ldr	r3, [pc, #256]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 80025ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 80025da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025dc:	4a3c      	ldr	r2, [pc, #240]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e4:	4b3a      	ldr	r3, [pc, #232]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025f0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800260a:	2307      	movs	r3, #7
 800260c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800261a:	f001 f9db 	bl	80039d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2105      	movs	r1, #5
 8002622:	2025      	movs	r0, #37	@ 0x25
 8002624:	f001 f91e 	bl	8003864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002628:	2025      	movs	r0, #37	@ 0x25
 800262a:	f001 f937 	bl	800389c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800262e:	e048      	b.n	80026c2 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a27      	ldr	r2, [pc, #156]	@ (80026d4 <HAL_UART_MspInit+0x160>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d143      	bne.n	80026c2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800263a:	2302      	movs	r3, #2
 800263c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800263e:	2300      	movs	r3, #0
 8002640:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4618      	mov	r0, r3
 8002648:	f003 f97e 	bl	8005948 <HAL_RCCEx_PeriphCLKConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002652:	f7ff fb57 	bl	8001d04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	4a1d      	ldr	r2, [pc, #116]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 800265c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002660:	6593      	str	r3, [r2, #88]	@ 0x58
 8002662:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_UART_MspInit+0x15c>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002686:	230c      	movs	r3, #12
 8002688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269e:	2307      	movs	r3, #7
 80026a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026a8:	4619      	mov	r1, r3
 80026aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ae:	f001 f991 	bl	80039d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2105      	movs	r1, #5
 80026b6:	2026      	movs	r0, #38	@ 0x26
 80026b8:	f001 f8d4 	bl	8003864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026bc:	2026      	movs	r0, #38	@ 0x26
 80026be:	f001 f8ed 	bl	800389c <HAL_NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	37b8      	adds	r7, #184	@ 0xb8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40013800 	.word	0x40013800
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40004400 	.word	0x40004400

080026d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002710 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026dc:	f7ff fed8 	bl	8002490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e0:	480c      	ldr	r0, [pc, #48]	@ (8002714 <LoopForever+0x6>)
  ldr r1, =_edata
 80026e2:	490d      	ldr	r1, [pc, #52]	@ (8002718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026e4:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <LoopForever+0xe>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e8:	e002      	b.n	80026f0 <LoopCopyDataInit>

080026ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ee:	3304      	adds	r3, #4

080026f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f4:	d3f9      	bcc.n	80026ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002724 <LoopForever+0x16>)
  movs r3, #0
 80026fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026fc:	e001      	b.n	8002702 <LoopFillZerobss>

080026fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002700:	3204      	adds	r2, #4

08002702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002704:	d3fb      	bcc.n	80026fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002706:	f00a fcab 	bl	800d060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800270a:	f7ff fa49 	bl	8001ba0 <main>

0800270e <LoopForever>:

LoopForever:
    b LoopForever
 800270e:	e7fe      	b.n	800270e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002710:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002718:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800271c:	08010778 	.word	0x08010778
  ldr r2, =_sbss
 8002720:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002724:	20005ae4 	.word	0x20005ae4

08002728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002728:	e7fe      	b.n	8002728 <ADC1_2_IRQHandler>
	...

0800272c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002736:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <HAL_Init+0x3c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a0b      	ldr	r2, [pc, #44]	@ (8002768 <HAL_Init+0x3c>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002740:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002742:	2003      	movs	r0, #3
 8002744:	f001 f883 	bl	800384e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002748:	200f      	movs	r0, #15
 800274a:	f7ff fd0d 	bl	8002168 <HAL_InitTick>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	71fb      	strb	r3, [r7, #7]
 8002758:	e001      	b.n	800275e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800275a:	f7ff fcdd 	bl	8002118 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800275e:	79fb      	ldrb	r3, [r7, #7]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40022000 	.word	0x40022000

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000034 	.word	0x20000034
 8002790:	20000a20 	.word	0x20000a20

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	@ (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000a20 	.word	0x20000a20

080027ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	609a      	str	r2, [r3, #8]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3360      	adds	r3, #96	@ 0x60
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <LL_ADC_SetOffset+0x44>)
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	4313      	orrs	r3, r2
 8002844:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	03fff000 	.word	0x03fff000

0800285c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3360      	adds	r3, #96	@ 0x60
 800286a:	461a      	mov	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3360      	adds	r3, #96	@ 0x60
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028be:	b480      	push	{r7}
 80028c0:	b087      	sub	sp, #28
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3330      	adds	r3, #48	@ 0x30
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	211f      	movs	r1, #31
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	401a      	ands	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	f003 011f 	and.w	r1, r3, #31
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3314      	adds	r3, #20
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0e5b      	lsrs	r3, r3, #25
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	4413      	add	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0d1b      	lsrs	r3, r3, #20
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2107      	movs	r1, #7
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	0d1b      	lsrs	r3, r3, #20
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	431a      	orrs	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0318 	and.w	r3, r3, #24
 800298e:	4908      	ldr	r1, [pc, #32]	@ (80029b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002990:	40d9      	lsrs	r1, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	400b      	ands	r3, r1
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	0007ffff 	.word	0x0007ffff

080029b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6093      	str	r3, [r2, #8]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ec:	d101      	bne.n	80029f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a3c:	d101      	bne.n	8002a42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <LL_ADC_IsEnabled+0x18>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <LL_ADC_IsEnabled+0x1a>
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d101      	bne.n	8002a8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d101      	bne.n	8002ab4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b089      	sub	sp, #36	@ 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e130      	b.n	8002d40 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fe fb71 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff67 	bl	80029d8 <LL_ADC_IsDeepPowerDownEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff4d 	bl	80029b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff82 	bl	8002a28 <LL_ADC_IsInternalRegulatorEnabled>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d115      	bne.n	8002b56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff66 	bl	8002a00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b34:	4b84      	ldr	r3, [pc, #528]	@ (8002d48 <HAL_ADC_Init+0x284>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	4a84      	ldr	r2, [pc, #528]	@ (8002d4c <HAL_ADC_Init+0x288>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	3301      	adds	r3, #1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b48:	e002      	b.n	8002b50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f9      	bne.n	8002b4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff64 	bl	8002a28 <LL_ADC_IsInternalRegulatorEnabled>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff75 	bl	8002a76 <LL_ADC_REG_IsConversionOngoing>
 8002b8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f040 80c9 	bne.w	8002d2e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 80c5 	bne.w	8002d2e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bac:	f043 0202 	orr.w	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff49 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d115      	bne.n	8002bf0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bc4:	4862      	ldr	r0, [pc, #392]	@ (8002d50 <HAL_ADC_Init+0x28c>)
 8002bc6:	f7ff ff43 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bca:	4604      	mov	r4, r0
 8002bcc:	4861      	ldr	r0, [pc, #388]	@ (8002d54 <HAL_ADC_Init+0x290>)
 8002bce:	f7ff ff3f 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	431c      	orrs	r4, r3
 8002bd6:	4860      	ldr	r0, [pc, #384]	@ (8002d58 <HAL_ADC_Init+0x294>)
 8002bd8:	f7ff ff3a 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4323      	orrs	r3, r4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4619      	mov	r1, r3
 8002bea:	485c      	ldr	r0, [pc, #368]	@ (8002d5c <HAL_ADC_Init+0x298>)
 8002bec:	f7ff fdde 	bl	80027ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7e5b      	ldrb	r3, [r3, #25]
 8002bf4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bfa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d106      	bne.n	8002c2c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	3b01      	subs	r3, #1
 8002c24:	045b      	lsls	r3, r3, #17
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b44      	ldr	r3, [pc, #272]	@ (8002d60 <HAL_ADC_Init+0x29c>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff1b 	bl	8002a9c <LL_ADC_INJ_IsConversionOngoing>
 8002c66:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d13d      	bne.n	8002cea <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d13a      	bne.n	8002cea <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c78:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c80:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c90:	f023 0302 	bic.w	r3, r3, #2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	69b9      	ldr	r1, [r7, #24]
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d118      	bne.n	8002cda <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	611a      	str	r2, [r3, #16]
 8002cd8:	e007      	b.n	8002cea <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10c      	bne.n	8002d0c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	f023 010f 	bic.w	r1, r3, #15
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d0a:	e007      	b.n	8002d1c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020f 	bic.w	r2, r2, #15
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	f023 0303 	bic.w	r3, r3, #3
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d2c:	e007      	b.n	8002d3e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3724      	adds	r7, #36	@ 0x24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	2000002c 	.word	0x2000002c
 8002d4c:	053e2d63 	.word	0x053e2d63
 8002d50:	50040000 	.word	0x50040000
 8002d54:	50040100 	.word	0x50040100
 8002d58:	50040200 	.word	0x50040200
 8002d5c:	50040300 	.word	0x50040300
 8002d60:	fff0c007 	.word	0xfff0c007

08002d64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b0b6      	sub	sp, #216	@ 0xd8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x22>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e3c9      	b.n	800351a <HAL_ADC_ConfigChannel+0x7b6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fe6f 	bl	8002a76 <LL_ADC_REG_IsConversionOngoing>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 83aa 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d824      	bhi.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	3b02      	subs	r3, #2
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d81b      	bhi.n	8002df2 <HAL_ADC_ConfigChannel+0x8e>
 8002dba:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc0 <HAL_ADC_ConfigChannel+0x5c>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002dd9 	.word	0x08002dd9
 8002dc8:	08002de1 	.word	0x08002de1
 8002dcc:	08002de9 	.word	0x08002de9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dd6:	e010      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002dd8:	2312      	movs	r3, #18
 8002dda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dde:	e00c      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002de0:	2318      	movs	r3, #24
 8002de2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002de6:	e008      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002df0:	e003      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002df2:	2306      	movs	r3, #6
 8002df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002df8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e08:	f7ff fd59 	bl	80028be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fe30 	bl	8002a76 <LL_ADC_REG_IsConversionOngoing>
 8002e16:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fe3c 	bl	8002a9c <LL_ADC_INJ_IsConversionOngoing>
 8002e24:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 81a4 	bne.w	800317a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 819f 	bne.w	800317a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff fd64 	bl	8002916 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d00a      	beq.n	8002e86 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6919      	ldr	r1, [r3, #16]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e80:	f7ff fcc8 	bl	8002814 <LL_ADC_SetOffset>
 8002e84:	e179      	b.n	800317a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fce5 	bl	800285c <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x14e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fcda 	bl	800285c <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	e01e      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x18c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fccf 	bl	800285c <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e004      	b.n	8002eee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002ee4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1a4>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	e018      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1d6>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e004      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d106      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fc9e 	bl	8002888 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fc82 	bl	800285c <LL_ADC_GetOffsetChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x214>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fc77 	bl	800285c <LL_ADC_GetOffsetChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	f003 021f 	and.w	r2, r3, #31
 8002f76:	e01e      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x252>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fc6c 	bl	800285c <LL_ADC_GetOffsetChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	e004      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x26a>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	e018      	b.n	8003000 <HAL_ADC_ConfigChannel+0x29c>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fe6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e004      	b.n	8003000 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002ff6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003000:	429a      	cmp	r2, r3
 8003002:	d106      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fc3b 	bl	8002888 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fc1f 	bl	800285c <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_ADC_ConfigChannel+0x2da>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2102      	movs	r1, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fc14 	bl	800285c <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	e01e      	b.n	800307c <HAL_ADC_ConfigChannel+0x318>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2102      	movs	r1, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fc09 	bl	800285c <LL_ADC_GetOffsetChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800305c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e004      	b.n	800307a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x330>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	e014      	b.n	80030be <HAL_ADC_ConfigChannel+0x35a>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80030a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80030a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80030b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030be:	429a      	cmp	r2, r3
 80030c0:	d106      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2102      	movs	r1, #2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fbdc 	bl	8002888 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2103      	movs	r1, #3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fbc0 	bl	800285c <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x398>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2103      	movs	r1, #3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fbb5 	bl	800285c <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	e017      	b.n	800312c <HAL_ADC_ConfigChannel+0x3c8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2103      	movs	r1, #3
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fbaa 	bl	800285c <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003116:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e003      	b.n	800312a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x3e0>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	e011      	b.n	8003168 <HAL_ADC_ConfigChannel+0x404>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003154:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e003      	b.n	8003168 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003160:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	2103      	movs	r1, #3
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fb87 	bl	8002888 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fc66 	bl	8002a50 <LL_ADC_IsEnabled>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 8140 	bne.w	800340c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	461a      	mov	r2, r3
 800319a:	f7ff fbe7 	bl	800296c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a8f      	ldr	r2, [pc, #572]	@ (80033e0 <HAL_ADC_ConfigChannel+0x67c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 8131 	bne.w	800340c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x46e>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0e9b      	lsrs	r3, r3, #26
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2b09      	cmp	r3, #9
 80031c8:	bf94      	ite	ls
 80031ca:	2301      	movls	r3, #1
 80031cc:	2300      	movhi	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e019      	b.n	8003206 <HAL_ADC_ConfigChannel+0x4a2>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80031e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80031ea:	2320      	movs	r3, #32
 80031ec:	e003      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	bf94      	ite	ls
 8003200:	2301      	movls	r3, #1
 8003202:	2300      	movhi	r3, #0
 8003204:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003206:	2b00      	cmp	r3, #0
 8003208:	d079      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x4c2>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	3301      	adds	r3, #1
 800321e:	069b      	lsls	r3, r3, #26
 8003220:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003224:	e015      	b.n	8003252 <HAL_ADC_ConfigChannel+0x4ee>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003236:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	069b      	lsls	r3, r3, #26
 800324e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x50e>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e9b      	lsrs	r3, r3, #26
 8003264:	3301      	adds	r3, #1
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	e017      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x53e>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003282:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e003      	b.n	8003296 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800328e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	ea42 0103 	orr.w	r1, r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x564>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0e9b      	lsrs	r3, r3, #26
 80032b8:	3301      	adds	r3, #1
 80032ba:	f003 021f 	and.w	r2, r3, #31
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	051b      	lsls	r3, r3, #20
 80032c6:	e018      	b.n	80032fa <HAL_ADC_ConfigChannel+0x596>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	e003      	b.n	80032ec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80032e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f003 021f 	and.w	r2, r3, #31
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032fa:	430b      	orrs	r3, r1
 80032fc:	e081      	b.n	8003402 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_ADC_ConfigChannel+0x5b6>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	3301      	adds	r3, #1
 8003312:	069b      	lsls	r3, r3, #26
 8003314:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003318:	e015      	b.n	8003346 <HAL_ADC_ConfigChannel+0x5e2>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003332:	2320      	movs	r3, #32
 8003334:	e003      	b.n	800333e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3301      	adds	r3, #1
 8003340:	069b      	lsls	r3, r3, #26
 8003342:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x602>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	3301      	adds	r3, #1
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	e017      	b.n	8003396 <HAL_ADC_ConfigChannel+0x632>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	61bb      	str	r3, [r7, #24]
  return result;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	ea42 0103 	orr.w	r1, r2, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x65e>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	0e9b      	lsrs	r3, r3, #26
 80033ac:	3301      	adds	r3, #1
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	3b1e      	subs	r3, #30
 80033ba:	051b      	lsls	r3, r3, #20
 80033bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033c0:	e01e      	b.n	8003400 <HAL_ADC_ConfigChannel+0x69c>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	60fb      	str	r3, [r7, #12]
  return result;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e006      	b.n	80033ec <HAL_ADC_ConfigChannel+0x688>
 80033de:	bf00      	nop
 80033e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f003 021f 	and.w	r2, r3, #31
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	3b1e      	subs	r3, #30
 80033fa:	051b      	lsls	r3, r3, #20
 80033fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003400:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003406:	4619      	mov	r1, r3
 8003408:	f7ff fa85 	bl	8002916 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b44      	ldr	r3, [pc, #272]	@ (8003524 <HAL_ADC_ConfigChannel+0x7c0>)
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d07a      	beq.n	800350e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003418:	4843      	ldr	r0, [pc, #268]	@ (8003528 <HAL_ADC_ConfigChannel+0x7c4>)
 800341a:	f7ff f9ed 	bl	80027f8 <LL_ADC_GetCommonPathInternalCh>
 800341e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a41      	ldr	r2, [pc, #260]	@ (800352c <HAL_ADC_ConfigChannel+0x7c8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d12c      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800342c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d126      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a3c      	ldr	r2, [pc, #240]	@ (8003530 <HAL_ADC_ConfigChannel+0x7cc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_ADC_ConfigChannel+0x6e8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a3b      	ldr	r2, [pc, #236]	@ (8003534 <HAL_ADC_ConfigChannel+0x7d0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d15d      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800344c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003454:	4619      	mov	r1, r3
 8003456:	4834      	ldr	r0, [pc, #208]	@ (8003528 <HAL_ADC_ConfigChannel+0x7c4>)
 8003458:	f7ff f9bb 	bl	80027d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800345c:	4b36      	ldr	r3, [pc, #216]	@ (8003538 <HAL_ADC_ConfigChannel+0x7d4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	4a36      	ldr	r2, [pc, #216]	@ (800353c <HAL_ADC_ConfigChannel+0x7d8>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003476:	e002      	b.n	800347e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	3b01      	subs	r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f9      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003484:	e040      	b.n	8003508 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2d      	ldr	r2, [pc, #180]	@ (8003540 <HAL_ADC_ConfigChannel+0x7dc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d118      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d112      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a23      	ldr	r2, [pc, #140]	@ (8003530 <HAL_ADC_ConfigChannel+0x7cc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_ADC_ConfigChannel+0x74c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a22      	ldr	r2, [pc, #136]	@ (8003534 <HAL_ADC_ConfigChannel+0x7d0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d12d      	bne.n	800350c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b8:	4619      	mov	r1, r3
 80034ba:	481b      	ldr	r0, [pc, #108]	@ (8003528 <HAL_ADC_ConfigChannel+0x7c4>)
 80034bc:	f7ff f989 	bl	80027d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034c0:	e024      	b.n	800350c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003544 <HAL_ADC_ConfigChannel+0x7e0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d120      	bne.n	800350e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11a      	bne.n	800350e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a14      	ldr	r2, [pc, #80]	@ (8003530 <HAL_ADC_ConfigChannel+0x7cc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d115      	bne.n	800350e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ea:	4619      	mov	r1, r3
 80034ec:	480e      	ldr	r0, [pc, #56]	@ (8003528 <HAL_ADC_ConfigChannel+0x7c4>)
 80034ee:	f7ff f970 	bl	80027d2 <LL_ADC_SetCommonPathInternalCh>
 80034f2:	e00c      	b.n	800350e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003506:	e002      	b.n	800350e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800350c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003516:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800351a:	4618      	mov	r0, r3
 800351c:	37d8      	adds	r7, #216	@ 0xd8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	80080000 	.word	0x80080000
 8003528:	50040300 	.word	0x50040300
 800352c:	c7520000 	.word	0xc7520000
 8003530:	50040000 	.word	0x50040000
 8003534:	50040200 	.word	0x50040200
 8003538:	2000002c 	.word	0x2000002c
 800353c:	053e2d63 	.word	0x053e2d63
 8003540:	cb840000 	.word	0xcb840000
 8003544:	80000001 	.word	0x80000001

08003548 <LL_ADC_IsEnabled>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <LL_ADC_IsEnabled+0x18>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <LL_ADC_IsEnabled+0x1a>
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_ADC_REG_IsConversionOngoing>:
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d101      	bne.n	8003586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b09f      	sub	sp, #124	@ 0x7c
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e093      	b.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035ba:	2300      	movs	r3, #0
 80035bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035be:	2300      	movs	r3, #0
 80035c0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a47      	ldr	r2, [pc, #284]	@ (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d102      	bne.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035cc:	4b46      	ldr	r3, [pc, #280]	@ (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	e001      	b.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e072      	b.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ffb9 	bl	800356e <LL_ADC_REG_IsConversionOngoing>
 80035fc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ffb3 	bl	800356e <LL_ADC_REG_IsConversionOngoing>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d154      	bne.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800360e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003610:	2b00      	cmp	r3, #0
 8003612:	d151      	bne.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003614:	4b35      	ldr	r3, [pc, #212]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003616:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02c      	beq.n	800367a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003632:	035b      	lsls	r3, r3, #13
 8003634:	430b      	orrs	r3, r1
 8003636:	431a      	orrs	r2, r3
 8003638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800363a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800363c:	4829      	ldr	r0, [pc, #164]	@ (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800363e:	f7ff ff83 	bl	8003548 <LL_ADC_IsEnabled>
 8003642:	4604      	mov	r4, r0
 8003644:	4828      	ldr	r0, [pc, #160]	@ (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003646:	f7ff ff7f 	bl	8003548 <LL_ADC_IsEnabled>
 800364a:	4603      	mov	r3, r0
 800364c:	431c      	orrs	r4, r3
 800364e:	4828      	ldr	r0, [pc, #160]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003650:	f7ff ff7a 	bl	8003548 <LL_ADC_IsEnabled>
 8003654:	4603      	mov	r3, r0
 8003656:	4323      	orrs	r3, r4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d137      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800365c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003664:	f023 030f 	bic.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	6811      	ldr	r1, [r2, #0]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	430a      	orrs	r2, r1
 8003672:	431a      	orrs	r2, r3
 8003674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003676:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003678:	e028      	b.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800367a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003684:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003686:	4817      	ldr	r0, [pc, #92]	@ (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003688:	f7ff ff5e 	bl	8003548 <LL_ADC_IsEnabled>
 800368c:	4604      	mov	r4, r0
 800368e:	4816      	ldr	r0, [pc, #88]	@ (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003690:	f7ff ff5a 	bl	8003548 <LL_ADC_IsEnabled>
 8003694:	4603      	mov	r3, r0
 8003696:	431c      	orrs	r4, r3
 8003698:	4815      	ldr	r0, [pc, #84]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800369a:	f7ff ff55 	bl	8003548 <LL_ADC_IsEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	4323      	orrs	r3, r4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d112      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036ae:	f023 030f 	bic.w	r3, r3, #15
 80036b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036b6:	e009      	b.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80036ca:	e000      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80036da:	4618      	mov	r0, r3
 80036dc:	377c      	adds	r7, #124	@ 0x7c
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	50040000 	.word	0x50040000
 80036e8:	50040100 	.word	0x50040100
 80036ec:	50040300 	.word	0x50040300
 80036f0:	50040200 	.word	0x50040200

080036f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003704:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003710:	4013      	ands	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800371c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	@ (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <__NVIC_GetPriorityGrouping+0x18>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0307 	and.w	r3, r3, #7
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db0b      	blt.n	8003782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	4907      	ldr	r1, [pc, #28]	@ (8003790 <__NVIC_EnableIRQ+0x38>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2001      	movs	r0, #1
 800377a:	fa00 f202 	lsl.w	r2, r0, r2
 800377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	@ (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	@ (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	@ 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
         );
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ff4c 	bl	80036f4 <__NVIC_SetPriorityGrouping>
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003876:	f7ff ff61 	bl	800373c <__NVIC_GetPriorityGrouping>
 800387a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	6978      	ldr	r0, [r7, #20]
 8003882:	f7ff ffb1 	bl	80037e8 <NVIC_EncodePriority>
 8003886:	4602      	mov	r2, r0
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff80 	bl	8003794 <__NVIC_SetPriority>
}
 8003894:	bf00      	nop
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff54 	bl	8003758 <__NVIC_EnableIRQ>
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d008      	beq.n	80038e2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2204      	movs	r2, #4
 80038d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e022      	b.n	8003928 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 020e 	bic.w	r2, r2, #14
 80038f0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003906:	f003 021c 	and.w	r2, r3, #28
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	2101      	movs	r1, #1
 8003910:	fa01 f202 	lsl.w	r2, r1, r2
 8003914:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d005      	beq.n	8003958 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2204      	movs	r2, #4
 8003950:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	e029      	b.n	80039ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 020e 	bic.w	r2, r2, #14
 8003966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	f003 021c 	and.w	r2, r3, #28
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	2101      	movs	r1, #1
 8003986:	fa01 f202 	lsl.w	r2, r1, r2
 800398a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
    }
  }
  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039c4:	b2db      	uxtb	r3, r3
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e2:	e17f      	b.n	8003ce4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8171 	beq.w	8003cde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d005      	beq.n	8003a14 <HAL_GPIO_Init+0x40>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d130      	bne.n	8003a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	2203      	movs	r2, #3
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4013      	ands	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 0201 	and.w	r2, r3, #1
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d118      	bne.n	8003ab4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f003 0201 	and.w	r2, r3, #1
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d017      	beq.n	8003af0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2203      	movs	r2, #3
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d123      	bne.n	8003b44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	08da      	lsrs	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3208      	adds	r2, #8
 8003b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	220f      	movs	r2, #15
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	08da      	lsrs	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3208      	adds	r2, #8
 8003b3e:	6939      	ldr	r1, [r7, #16]
 8003b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0203 	and.w	r2, r3, #3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80ac 	beq.w	8003cde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b86:	4b5f      	ldr	r3, [pc, #380]	@ (8003d04 <HAL_GPIO_Init+0x330>)
 8003b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003d04 <HAL_GPIO_Init+0x330>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b92:	4b5c      	ldr	r3, [pc, #368]	@ (8003d04 <HAL_GPIO_Init+0x330>)
 8003b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8003d08 <HAL_GPIO_Init+0x334>)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bc8:	d025      	beq.n	8003c16 <HAL_GPIO_Init+0x242>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4f      	ldr	r2, [pc, #316]	@ (8003d0c <HAL_GPIO_Init+0x338>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01f      	beq.n	8003c12 <HAL_GPIO_Init+0x23e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d10 <HAL_GPIO_Init+0x33c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d019      	beq.n	8003c0e <HAL_GPIO_Init+0x23a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4d      	ldr	r2, [pc, #308]	@ (8003d14 <HAL_GPIO_Init+0x340>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_GPIO_Init+0x236>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4c      	ldr	r2, [pc, #304]	@ (8003d18 <HAL_GPIO_Init+0x344>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00d      	beq.n	8003c06 <HAL_GPIO_Init+0x232>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4b      	ldr	r2, [pc, #300]	@ (8003d1c <HAL_GPIO_Init+0x348>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <HAL_GPIO_Init+0x22e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4a      	ldr	r2, [pc, #296]	@ (8003d20 <HAL_GPIO_Init+0x34c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_GPIO_Init+0x22a>
 8003bfa:	2306      	movs	r3, #6
 8003bfc:	e00c      	b.n	8003c18 <HAL_GPIO_Init+0x244>
 8003bfe:	2307      	movs	r3, #7
 8003c00:	e00a      	b.n	8003c18 <HAL_GPIO_Init+0x244>
 8003c02:	2305      	movs	r3, #5
 8003c04:	e008      	b.n	8003c18 <HAL_GPIO_Init+0x244>
 8003c06:	2304      	movs	r3, #4
 8003c08:	e006      	b.n	8003c18 <HAL_GPIO_Init+0x244>
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e004      	b.n	8003c18 <HAL_GPIO_Init+0x244>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e002      	b.n	8003c18 <HAL_GPIO_Init+0x244>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_GPIO_Init+0x244>
 8003c16:	2300      	movs	r3, #0
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	f002 0203 	and.w	r2, r2, #3
 8003c1e:	0092      	lsls	r2, r2, #2
 8003c20:	4093      	lsls	r3, r2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c28:	4937      	ldr	r1, [pc, #220]	@ (8003d08 <HAL_GPIO_Init+0x334>)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	3302      	adds	r3, #2
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c36:	4b3b      	ldr	r3, [pc, #236]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c5a:	4a32      	ldr	r2, [pc, #200]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c60:	4b30      	ldr	r3, [pc, #192]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c84:	4a27      	ldr	r2, [pc, #156]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c8a:	4b26      	ldr	r3, [pc, #152]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cae:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cd8:	4a12      	ldr	r2, [pc, #72]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f47f ae78 	bne.w	80039e4 <HAL_GPIO_Init+0x10>
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	48000400 	.word	0x48000400
 8003d10:	48000800 	.word	0x48000800
 8003d14:	48000c00 	.word	0x48000c00
 8003d18:	48001000 	.word	0x48001000
 8003d1c:	48001400 	.word	0x48001400
 8003d20:	48001800 	.word	0x48001800
 8003d24:	40010400 	.word	0x40010400

08003d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
 8003d34:	4613      	mov	r3, r2
 8003d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d38:	787b      	ldrb	r3, [r7, #1]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d6e:	4a05      	ldr	r2, [pc, #20]	@ (8003d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe f998 	bl	80020ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40010400 	.word	0x40010400

08003d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e08d      	b.n	8003eb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fe88 	bl	8001ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	@ 0x24
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003dd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003de8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	e006      	b.n	8003e10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d108      	bne.n	8003e2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	e007      	b.n	8003e3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69d9      	ldr	r1, [r3, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	68f9      	ldr	r1, [r7, #12]
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
  }
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d010      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	09db      	lsrs	r3, r3, #7
 8003f1a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	0a9b      	lsrs	r3, r3, #10
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	09db      	lsrs	r3, r3, #7
 8003f48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f54:	f043 0208 	orr.w	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f64:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	0a5b      	lsrs	r3, r3, #9
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d010      	beq.n	8003f94 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	09db      	lsrs	r3, r3, #7
 8003f76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f043 0202 	orr.w	r2, r3, #2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f92:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 030b 	and.w	r3, r3, #11
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fbea 	bl	8004780 <I2C_ITError>
  }
}
 8003fac:	bf00      	nop
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <I2C_Slave_ISR_IT+0x24>
 8004054:	2302      	movs	r3, #2
 8004056:	e0ed      	b.n	8004234 <I2C_Slave_ISR_IT+0x200>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004074:	2b00      	cmp	r3, #0
 8004076:	d004      	beq.n	8004082 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004078:	6939      	ldr	r1, [r7, #16]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f9c0 	bl	8004400 <I2C_ITSlaveCplt>
 8004080:	e0d3      	b.n	800422a <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d04d      	beq.n	800412a <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004096:	2b00      	cmp	r3, #0
 8004098:	d047      	beq.n	800412a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d128      	bne.n	80040f6 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b28      	cmp	r3, #40	@ 0x28
 80040ae:	d108      	bne.n	80040c2 <I2C_Slave_ISR_IT+0x8e>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040b6:	d104      	bne.n	80040c2 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80040b8:	6939      	ldr	r1, [r7, #16]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fb0a 	bl	80046d4 <I2C_ITListenCplt>
 80040c0:	e032      	b.n	8004128 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b29      	cmp	r3, #41	@ 0x29
 80040cc:	d10e      	bne.n	80040ec <I2C_Slave_ISR_IT+0xb8>
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040d4:	d00a      	beq.n	80040ec <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2210      	movs	r2, #16
 80040dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fc65 	bl	80049ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f92d 	bl	8004344 <I2C_ITSlaveSeqCplt>
 80040ea:	e01d      	b.n	8004128 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2210      	movs	r2, #16
 80040f2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80040f4:	e096      	b.n	8004224 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2210      	movs	r2, #16
 80040fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f043 0204 	orr.w	r2, r3, #4
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <I2C_Slave_ISR_IT+0xe6>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004116:	f040 8085 	bne.w	8004224 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411e:	4619      	mov	r1, r3
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fb2d 	bl	8004780 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004126:	e07d      	b.n	8004224 <I2C_Slave_ISR_IT+0x1f0>
 8004128:	e07c      	b.n	8004224 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d030      	beq.n	8004198 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02a      	beq.n	8004198 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d018      	beq.n	800417e <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d14f      	bne.n	8004228 <I2C_Slave_ISR_IT+0x1f4>
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800418e:	d04b      	beq.n	8004228 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f8d7 	bl	8004344 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004196:	e047      	b.n	8004228 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	08db      	lsrs	r3, r3, #3
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	08db      	lsrs	r3, r3, #3
 80041a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80041b0:	6939      	ldr	r1, [r7, #16]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f842 	bl	800423c <I2C_ITAddrCplt>
 80041b8:	e037      	b.n	800422a <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d031      	beq.n	800422a <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02b      	beq.n	800422a <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d018      	beq.n	800420e <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800420c:	e00d      	b.n	800422a <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004214:	d002      	beq.n	800421c <I2C_Slave_ISR_IT+0x1e8>
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f891 	bl	8004344 <I2C_ITSlaveSeqCplt>
 8004222:	e002      	b.n	800422a <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004228:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004252:	2b28      	cmp	r3, #40	@ 0x28
 8004254:	d16a      	bne.n	800432c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b29b      	uxth	r3, r3
 8004270:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004274:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004282:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004290:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d138      	bne.n	800430c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800429a:	897b      	ldrh	r3, [r7, #10]
 800429c:	09db      	lsrs	r3, r3, #7
 800429e:	b29a      	uxth	r2, r3
 80042a0:	89bb      	ldrh	r3, [r7, #12]
 80042a2:	4053      	eors	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f003 0306 	and.w	r3, r3, #6
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11c      	bne.n	80042e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d13b      	bne.n	800433c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2208      	movs	r2, #8
 80042d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042da:	89ba      	ldrh	r2, [r7, #12]
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fe7b 	bl	8003fdc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042e6:	e029      	b.n	800433c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80042e8:	893b      	ldrh	r3, [r7, #8]
 80042ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80042ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fb9e 	bl	8004a32 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042fe:	89ba      	ldrh	r2, [r7, #12]
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	4619      	mov	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fe69 	bl	8003fdc <HAL_I2C_AddrCallback>
}
 800430a:	e017      	b.n	800433c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800430c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fb8e 	bl	8004a32 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800431e:	89ba      	ldrh	r2, [r7, #12]
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff fe59 	bl	8003fdc <HAL_I2C_AddrCallback>
}
 800432a:	e007      	b.n	800433c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2208      	movs	r2, #8
 8004332:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	0b9b      	lsrs	r3, r3, #14
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e00d      	b.n	8004396 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	0bdb      	lsrs	r3, r3, #15
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004394:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b29      	cmp	r3, #41	@ 0x29
 80043a0:	d112      	bne.n	80043c8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2228      	movs	r2, #40	@ 0x28
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2221      	movs	r2, #33	@ 0x21
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043b0:	2101      	movs	r1, #1
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fb3d 	bl	8004a32 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fdf7 	bl	8003fb4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80043c6:	e017      	b.n	80043f8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d2:	d111      	bne.n	80043f8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2228      	movs	r2, #40	@ 0x28
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2222      	movs	r2, #34	@ 0x22
 80043e0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043e2:	2102      	movs	r1, #2
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb24 	bl	8004a32 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fde8 	bl	8003fc8 <HAL_I2C_SlaveRxCpltCallback>
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004422:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2220      	movs	r2, #32
 800442a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800442c:	7afb      	ldrb	r3, [r7, #11]
 800442e:	2b21      	cmp	r3, #33	@ 0x21
 8004430:	d002      	beq.n	8004438 <I2C_ITSlaveCplt+0x38>
 8004432:	7afb      	ldrb	r3, [r7, #11]
 8004434:	2b29      	cmp	r3, #41	@ 0x29
 8004436:	d108      	bne.n	800444a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004438:	f248 0101 	movw	r1, #32769	@ 0x8001
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 faf8 	bl	8004a32 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2221      	movs	r2, #33	@ 0x21
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
 8004448:	e019      	b.n	800447e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	2b22      	cmp	r3, #34	@ 0x22
 800444e:	d002      	beq.n	8004456 <I2C_ITSlaveCplt+0x56>
 8004450:	7afb      	ldrb	r3, [r7, #11]
 8004452:	2b2a      	cmp	r3, #42	@ 0x2a
 8004454:	d108      	bne.n	8004468 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004456:	f248 0102 	movw	r1, #32770	@ 0x8002
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fae9 	bl	8004a32 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2222      	movs	r2, #34	@ 0x22
 8004464:	631a      	str	r2, [r3, #48]	@ 0x30
 8004466:	e00a      	b.n	800447e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004468:	7afb      	ldrb	r3, [r7, #11]
 800446a:	2b28      	cmp	r3, #40	@ 0x28
 800446c:	d107      	bne.n	800447e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800446e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fadd 	bl	8004a32 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800448c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b8c      	ldr	r3, [pc, #560]	@ (80046cc <I2C_ITSlaveCplt+0x2cc>)
 800449a:	400b      	ands	r3, r1
 800449c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa85 	bl	80049ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	0b9b      	lsrs	r3, r3, #14
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044d6:	e018      	b.n	800450a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	0bdb      	lsrs	r3, r3, #15
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d012      	beq.n	800450a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00c      	beq.n	8004558 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	f043 0204 	orr.w	r2, r3, #4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d04a      	beq.n	8004610 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004582:	2b00      	cmp	r3, #0
 8004584:	d044      	beq.n	8004610 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d128      	bne.n	80045e2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b28      	cmp	r3, #40	@ 0x28
 800459a:	d108      	bne.n	80045ae <I2C_ITSlaveCplt+0x1ae>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045a2:	d104      	bne.n	80045ae <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045a4:	6979      	ldr	r1, [r7, #20]
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f894 	bl	80046d4 <I2C_ITListenCplt>
 80045ac:	e030      	b.n	8004610 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b29      	cmp	r3, #41	@ 0x29
 80045b8:	d10e      	bne.n	80045d8 <I2C_ITSlaveCplt+0x1d8>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045c0:	d00a      	beq.n	80045d8 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2210      	movs	r2, #16
 80045c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9ef 	bl	80049ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff feb7 	bl	8004344 <I2C_ITSlaveSeqCplt>
 80045d6:	e01b      	b.n	8004610 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2210      	movs	r2, #16
 80045de:	61da      	str	r2, [r3, #28]
 80045e0:	e016      	b.n	8004610 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2210      	movs	r2, #16
 80045e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ee:	f043 0204 	orr.w	r2, r3, #4
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <I2C_ITSlaveCplt+0x204>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004602:	d105      	bne.n	8004610 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f8b8 	bl	8004780 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	2b00      	cmp	r3, #0
 8004624:	d010      	beq.n	8004648 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8a7 	bl	8004780 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b28      	cmp	r3, #40	@ 0x28
 800463c:	d141      	bne.n	80046c2 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800463e:	6979      	ldr	r1, [r7, #20]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f847 	bl	80046d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004646:	e03c      	b.n	80046c2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004650:	d014      	beq.n	800467c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fe76 	bl	8004344 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <I2C_ITSlaveCplt+0x2d0>)
 800465c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff fcbf 	bl	8003ff8 <HAL_I2C_ListenCpltCallback>
}
 800467a:	e022      	b.n	80046c2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b22      	cmp	r3, #34	@ 0x22
 8004686:	d10e      	bne.n	80046a6 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fc92 	bl	8003fc8 <HAL_I2C_SlaveRxCpltCallback>
}
 80046a4:	e00d      	b.n	80046c2 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fc79 	bl	8003fb4 <HAL_I2C_SlaveTxCpltCallback>
}
 80046c2:	bf00      	nop
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	fe00e800 	.word	0xfe00e800
 80046d0:	ffff0000 	.word	0xffff0000

080046d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a26      	ldr	r2, [pc, #152]	@ (800477c <I2C_ITListenCplt+0xa8>)
 80046e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d022      	beq.n	8004752 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	d012      	beq.n	8004752 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004752:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f96b 	bl	8004a32 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2210      	movs	r2, #16
 8004762:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fc43 	bl	8003ff8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	ffff0000 	.word	0xffff0000

08004780 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004790:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a6d      	ldr	r2, [pc, #436]	@ (8004954 <I2C_ITError+0x1d4>)
 800479e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b28      	cmp	r3, #40	@ 0x28
 80047b6:	d005      	beq.n	80047c4 <I2C_ITError+0x44>
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b29      	cmp	r3, #41	@ 0x29
 80047bc:	d002      	beq.n	80047c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80047c2:	d10b      	bne.n	80047dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047c4:	2103      	movs	r1, #3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f933 	bl	8004a32 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2228      	movs	r2, #40	@ 0x28
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a60      	ldr	r2, [pc, #384]	@ (8004958 <I2C_ITError+0x1d8>)
 80047d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80047da:	e030      	b.n	800483e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047dc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f926 	bl	8004a32 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8e1 	bl	80049ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b60      	cmp	r3, #96	@ 0x60
 80047f6:	d01f      	beq.n	8004838 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b20      	cmp	r3, #32
 800480c:	d114      	bne.n	8004838 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b10      	cmp	r3, #16
 800481a:	d109      	bne.n	8004830 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2210      	movs	r2, #16
 8004822:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004828:	f043 0204 	orr.w	r2, r3, #4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2220      	movs	r2, #32
 8004836:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d039      	beq.n	80048c0 <I2C_ITError+0x140>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b11      	cmp	r3, #17
 8004850:	d002      	beq.n	8004858 <I2C_ITError+0xd8>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b21      	cmp	r3, #33	@ 0x21
 8004856:	d133      	bne.n	80048c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004866:	d107      	bne.n	8004878 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004876:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff f89a 	bl	80039b6 <HAL_DMA_GetState>
 8004882:	4603      	mov	r3, r0
 8004884:	2b01      	cmp	r3, #1
 8004886:	d017      	beq.n	80048b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	4a33      	ldr	r2, [pc, #204]	@ (800495c <I2C_ITError+0x1dc>)
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff f849 	bl	8003934 <HAL_DMA_Abort_IT>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d04d      	beq.n	8004944 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048b2:	4610      	mov	r0, r2
 80048b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048b6:	e045      	b.n	8004944 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f851 	bl	8004960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048be:	e041      	b.n	8004944 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d039      	beq.n	800493c <I2C_ITError+0x1bc>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b12      	cmp	r3, #18
 80048cc:	d002      	beq.n	80048d4 <I2C_ITError+0x154>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b22      	cmp	r3, #34	@ 0x22
 80048d2:	d133      	bne.n	800493c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048e2:	d107      	bne.n	80048f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff f85c 	bl	80039b6 <HAL_DMA_GetState>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b01      	cmp	r3, #1
 8004902:	d017      	beq.n	8004934 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004908:	4a14      	ldr	r2, [pc, #80]	@ (800495c <I2C_ITError+0x1dc>)
 800490a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff f80b 	bl	8003934 <HAL_DMA_Abort_IT>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d011      	beq.n	8004948 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800492e:	4610      	mov	r0, r2
 8004930:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004932:	e009      	b.n	8004948 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f813 	bl	8004960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800493a:	e005      	b.n	8004948 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f80f 	bl	8004960 <I2C_TreatErrorCallback>
  }
}
 8004942:	e002      	b.n	800494a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004944:	bf00      	nop
 8004946:	e000      	b.n	800494a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004948:	bf00      	nop
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	ffff0000 	.word	0xffff0000
 8004958:	08004035 	.word	0x08004035
 800495c:	080049f7 	.word	0x080049f7

08004960 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b60      	cmp	r3, #96	@ 0x60
 8004972:	d10e      	bne.n	8004992 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fb48 	bl	8004020 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004990:	e009      	b.n	80049a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fb33 	bl	800400c <HAL_I2C_ErrorCallback>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d103      	bne.n	80049cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2200      	movs	r2, #0
 80049ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d007      	beq.n	80049ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	619a      	str	r2, [r3, #24]
  }
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a10:	2200      	movs	r2, #0
 8004a12:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	2200      	movs	r2, #0
 8004a22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff ff9b 	bl	8004960 <I2C_TreatErrorCallback>
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00f      	beq.n	8004a6c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004a52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a60:	2b28      	cmp	r3, #40	@ 0x28
 8004a62:	d003      	beq.n	8004a6c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004a6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a6c:	887b      	ldrh	r3, [r7, #2]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00f      	beq.n	8004a96 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004a7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a8a:	2b28      	cmp	r3, #40	@ 0x28
 8004a8c:	d003      	beq.n	8004a96 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004a94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da03      	bge.n	8004aa6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004aa6:	887b      	ldrh	r3, [r7, #2]
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d103      	bne.n	8004ab4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004ab2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d103      	bne.n	8004ac2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f043 0320 	orr.w	r3, r3, #32
 8004ac0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ac2:	887b      	ldrh	r3, [r7, #2]
 8004ac4:	2b40      	cmp	r3, #64	@ 0x40
 8004ac6:	d103      	bne.n	8004ad0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	43da      	mvns	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	400a      	ands	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d138      	bne.n	8004b76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e032      	b.n	8004b78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2224      	movs	r2, #36	@ 0x24
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e000      	b.n	8004b78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b76:	2302      	movs	r3, #2
  }
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d139      	bne.n	8004c0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e033      	b.n	8004c10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2224      	movs	r2, #36	@ 0x24
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e000      	b.n	8004c10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
  }
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c20:	4b04      	ldr	r3, [pc, #16]	@ (8004c34 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40007000 	.word	0x40007000

08004c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c46:	d130      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c48:	4b23      	ldr	r3, [pc, #140]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c54:	d038      	beq.n	8004cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c56:	4b20      	ldr	r3, [pc, #128]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c66:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2232      	movs	r2, #50	@ 0x32
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	0c9b      	lsrs	r3, r3, #18
 8004c78:	3301      	adds	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c7c:	e002      	b.n	8004c84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c84:	4b14      	ldr	r3, [pc, #80]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c90:	d102      	bne.n	8004c98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f2      	bne.n	8004c7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c98:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca4:	d110      	bne.n	8004cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e00f      	b.n	8004cca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004caa:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb6:	d007      	beq.n	8004cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cb8:	4b07      	ldr	r3, [pc, #28]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cc0:	4a05      	ldr	r2, [pc, #20]	@ (8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	2000002c 	.word	0x2000002c
 8004ce0:	431bde83 	.word	0x431bde83

08004ce4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e3ca      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf6:	4b97      	ldr	r3, [pc, #604]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d00:	4b94      	ldr	r3, [pc, #592]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80e4 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_RCC_OscConfig+0x4a>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	f040 808b 	bne.w	8004e3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	f040 8087 	bne.w	8004e3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d2e:	4b89      	ldr	r3, [pc, #548]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_RCC_OscConfig+0x62>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e3a2      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1a      	ldr	r2, [r3, #32]
 8004d4a:	4b82      	ldr	r3, [pc, #520]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <HAL_RCC_OscConfig+0x7c>
 8004d56:	4b7f      	ldr	r3, [pc, #508]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d5e:	e005      	b.n	8004d6c <HAL_RCC_OscConfig+0x88>
 8004d60:	4b7c      	ldr	r3, [pc, #496]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d223      	bcs.n	8004db8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fd87 	bl	8005888 <RCC_SetFlashLatencyFromMSIRange>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e383      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d84:	4b73      	ldr	r3, [pc, #460]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a72      	ldr	r2, [pc, #456]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	f043 0308 	orr.w	r3, r3, #8
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	4b70      	ldr	r3, [pc, #448]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	496d      	ldr	r1, [pc, #436]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004da2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	4968      	ldr	r1, [pc, #416]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]
 8004db6:	e025      	b.n	8004e04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004db8:	4b66      	ldr	r3, [pc, #408]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a65      	ldr	r2, [pc, #404]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004dbe:	f043 0308 	orr.w	r3, r3, #8
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	4b63      	ldr	r3, [pc, #396]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	4960      	ldr	r1, [pc, #384]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	495b      	ldr	r1, [pc, #364]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fd47 	bl	8005888 <RCC_SetFlashLatencyFromMSIRange>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e343      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e04:	f000 fc4a 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b52      	ldr	r3, [pc, #328]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	4950      	ldr	r1, [pc, #320]	@ (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e16:	5ccb      	ldrb	r3, [r1, r3]
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	4a4e      	ldr	r2, [pc, #312]	@ (8004f5c <HAL_RCC_OscConfig+0x278>)
 8004e22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e24:	4b4e      	ldr	r3, [pc, #312]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fd f99d 	bl	8002168 <HAL_InitTick>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d052      	beq.n	8004ede <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	e327      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d032      	beq.n	8004eaa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e44:	4b43      	ldr	r3, [pc, #268]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a42      	ldr	r2, [pc, #264]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e50:	f7fd fca0 	bl	8002794 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e58:	f7fd fc9c 	bl	8002794 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e310      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e76:	4b37      	ldr	r3, [pc, #220]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a36      	ldr	r2, [pc, #216]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	4b34      	ldr	r3, [pc, #208]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4931      	ldr	r1, [pc, #196]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e94:	4b2f      	ldr	r3, [pc, #188]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	492c      	ldr	r1, [pc, #176]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	604b      	str	r3, [r1, #4]
 8004ea8:	e01a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a29      	ldr	r2, [pc, #164]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004eb6:	f7fd fc6d 	bl	8002794 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ebe:	f7fd fc69 	bl	8002794 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e2dd      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ed0:	4b20      	ldr	r3, [pc, #128]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <HAL_RCC_OscConfig+0x1da>
 8004edc:	e000      	b.n	8004ee0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ede:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d074      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d005      	beq.n	8004efe <HAL_RCC_OscConfig+0x21a>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d10e      	bne.n	8004f16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d10b      	bne.n	8004f16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efe:	4b15      	ldr	r3, [pc, #84]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d064      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x2f0>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d160      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e2ba      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCC_OscConfig+0x24a>
 8004f20:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a0b      	ldr	r2, [pc, #44]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e026      	b.n	8004f7c <HAL_RCC_OscConfig+0x298>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f36:	d115      	bne.n	8004f64 <HAL_RCC_OscConfig+0x280>
 8004f38:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a05      	ldr	r2, [pc, #20]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004f3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	4b03      	ldr	r3, [pc, #12]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a02      	ldr	r2, [pc, #8]	@ (8004f54 <HAL_RCC_OscConfig+0x270>)
 8004f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	e014      	b.n	8004f7c <HAL_RCC_OscConfig+0x298>
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	080102dc 	.word	0x080102dc
 8004f5c:	2000002c 	.word	0x2000002c
 8004f60:	20000030 	.word	0x20000030
 8004f64:	4ba0      	ldr	r3, [pc, #640]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a9f      	ldr	r2, [pc, #636]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	4b9d      	ldr	r3, [pc, #628]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a9c      	ldr	r2, [pc, #624]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8004f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d013      	beq.n	8004fac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fd fc06 	bl	8002794 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f8c:	f7fd fc02 	bl	8002794 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	@ 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e276      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9e:	4b92      	ldr	r3, [pc, #584]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x2a8>
 8004faa:	e014      	b.n	8004fd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fbf2 	bl	8002794 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7fd fbee 	bl	8002794 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	@ 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e262      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fc6:	4b88      	ldr	r3, [pc, #544]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2d0>
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d060      	beq.n	80050a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x310>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b0c      	cmp	r3, #12
 8004fec:	d119      	bne.n	8005022 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d116      	bne.n	8005022 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ff4:	4b7c      	ldr	r3, [pc, #496]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_OscConfig+0x328>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e23f      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500c:	4b76      	ldr	r3, [pc, #472]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	4973      	ldr	r1, [pc, #460]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800501c:	4313      	orrs	r3, r2
 800501e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005020:	e040      	b.n	80050a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d023      	beq.n	8005072 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800502a:	4b6f      	ldr	r3, [pc, #444]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a6e      	ldr	r2, [pc, #440]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8005030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005036:	f7fd fbad 	bl	8002794 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800503e:	f7fd fba9 	bl	8002794 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e21d      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005050:	4b65      	ldr	r3, [pc, #404]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505c:	4b62      	ldr	r3, [pc, #392]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	495f      	ldr	r1, [pc, #380]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800506c:	4313      	orrs	r3, r2
 800506e:	604b      	str	r3, [r1, #4]
 8005070:	e018      	b.n	80050a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005072:	4b5d      	ldr	r3, [pc, #372]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a5c      	ldr	r2, [pc, #368]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8005078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800507c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507e:	f7fd fb89 	bl	8002794 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005086:	f7fd fb85 	bl	8002794 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e1f9      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005098:	4b53      	ldr	r3, [pc, #332]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d03c      	beq.n	800512a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01c      	beq.n	80050f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050b8:	4b4b      	ldr	r3, [pc, #300]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80050ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050be:	4a4a      	ldr	r2, [pc, #296]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7fd fb64 	bl	8002794 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d0:	f7fd fb60 	bl	8002794 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e1d4      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050e2:	4b41      	ldr	r3, [pc, #260]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80050e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0ef      	beq.n	80050d0 <HAL_RCC_OscConfig+0x3ec>
 80050f0:	e01b      	b.n	800512a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f2:	4b3d      	ldr	r3, [pc, #244]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80050f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f8:	4a3b      	ldr	r2, [pc, #236]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fd fb47 	bl	8002794 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510a:	f7fd fb43 	bl	8002794 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1b7      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800511c:	4b32      	ldr	r3, [pc, #200]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800511e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1ef      	bne.n	800510a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80a6 	beq.w	8005284 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005138:	2300      	movs	r3, #0
 800513a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800513c:	4b2a      	ldr	r3, [pc, #168]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10d      	bne.n	8005164 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005148:	4b27      	ldr	r3, [pc, #156]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514c:	4a26      	ldr	r2, [pc, #152]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 800514e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005152:	6593      	str	r3, [r2, #88]	@ 0x58
 8005154:	4b24      	ldr	r3, [pc, #144]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005160:	2301      	movs	r3, #1
 8005162:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005164:	4b21      	ldr	r3, [pc, #132]	@ (80051ec <HAL_RCC_OscConfig+0x508>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d118      	bne.n	80051a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005170:	4b1e      	ldr	r3, [pc, #120]	@ (80051ec <HAL_RCC_OscConfig+0x508>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1d      	ldr	r2, [pc, #116]	@ (80051ec <HAL_RCC_OscConfig+0x508>)
 8005176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800517c:	f7fd fb0a 	bl	8002794 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005184:	f7fd fb06 	bl	8002794 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e17a      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005196:	4b15      	ldr	r3, [pc, #84]	@ (80051ec <HAL_RCC_OscConfig+0x508>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d108      	bne.n	80051bc <HAL_RCC_OscConfig+0x4d8>
 80051aa:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b0:	4a0d      	ldr	r2, [pc, #52]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051ba:	e029      	b.n	8005210 <HAL_RCC_OscConfig+0x52c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b05      	cmp	r3, #5
 80051c2:	d115      	bne.n	80051f0 <HAL_RCC_OscConfig+0x50c>
 80051c4:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ca:	4a07      	ldr	r2, [pc, #28]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80051cc:	f043 0304 	orr.w	r3, r3, #4
 80051d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051d4:	4b04      	ldr	r3, [pc, #16]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051da:	4a03      	ldr	r2, [pc, #12]	@ (80051e8 <HAL_RCC_OscConfig+0x504>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051e4:	e014      	b.n	8005210 <HAL_RCC_OscConfig+0x52c>
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40007000 	.word	0x40007000
 80051f0:	4b9c      	ldr	r3, [pc, #624]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f6:	4a9b      	ldr	r2, [pc, #620]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005200:	4b98      	ldr	r3, [pc, #608]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005206:	4a97      	ldr	r2, [pc, #604]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005208:	f023 0304 	bic.w	r3, r3, #4
 800520c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d016      	beq.n	8005246 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005218:	f7fd fabc 	bl	8002794 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800521e:	e00a      	b.n	8005236 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005220:	f7fd fab8 	bl	8002794 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e12a      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005236:	4b8b      	ldr	r3, [pc, #556]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0ed      	beq.n	8005220 <HAL_RCC_OscConfig+0x53c>
 8005244:	e015      	b.n	8005272 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005246:	f7fd faa5 	bl	8002794 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800524c:	e00a      	b.n	8005264 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fd faa1 	bl	8002794 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e113      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005264:	4b7f      	ldr	r3, [pc, #508]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1ed      	bne.n	800524e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005272:	7ffb      	ldrb	r3, [r7, #31]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d105      	bne.n	8005284 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005278:	4b7a      	ldr	r3, [pc, #488]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 800527a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527c:	4a79      	ldr	r2, [pc, #484]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 800527e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005282:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80fe 	beq.w	800548a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	2b02      	cmp	r3, #2
 8005294:	f040 80d0 	bne.w	8005438 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005298:	4b72      	ldr	r3, [pc, #456]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f003 0203 	and.w	r2, r3, #3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d130      	bne.n	800530e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	3b01      	subs	r3, #1
 80052b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d127      	bne.n	800530e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d11f      	bne.n	800530e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052d8:	2a07      	cmp	r2, #7
 80052da:	bf14      	ite	ne
 80052dc:	2201      	movne	r2, #1
 80052de:	2200      	moveq	r2, #0
 80052e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d113      	bne.n	800530e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	3b01      	subs	r3, #1
 80052f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d109      	bne.n	800530e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	3b01      	subs	r3, #1
 8005308:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d06e      	beq.n	80053ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d069      	beq.n	80053e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005314:	4b53      	ldr	r3, [pc, #332]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005320:	4b50      	ldr	r3, [pc, #320]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0ad      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005330:	4b4c      	ldr	r3, [pc, #304]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a4b      	ldr	r2, [pc, #300]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800533c:	f7fd fa2a 	bl	8002794 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fd fa26 	bl	8002794 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e09a      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005356:	4b43      	ldr	r3, [pc, #268]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005362:	4b40      	ldr	r3, [pc, #256]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	4b40      	ldr	r3, [pc, #256]	@ (8005468 <HAL_RCC_OscConfig+0x784>)
 8005368:	4013      	ands	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005372:	3a01      	subs	r2, #1
 8005374:	0112      	lsls	r2, r2, #4
 8005376:	4311      	orrs	r1, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800537c:	0212      	lsls	r2, r2, #8
 800537e:	4311      	orrs	r1, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005384:	0852      	lsrs	r2, r2, #1
 8005386:	3a01      	subs	r2, #1
 8005388:	0552      	lsls	r2, r2, #21
 800538a:	4311      	orrs	r1, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005390:	0852      	lsrs	r2, r2, #1
 8005392:	3a01      	subs	r2, #1
 8005394:	0652      	lsls	r2, r2, #25
 8005396:	4311      	orrs	r1, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800539c:	0912      	lsrs	r2, r2, #4
 800539e:	0452      	lsls	r2, r2, #17
 80053a0:	430a      	orrs	r2, r1
 80053a2:	4930      	ldr	r1, [pc, #192]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053c0:	f7fd f9e8 	bl	8002794 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c8:	f7fd f9e4 	bl	8002794 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e058      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053da:	4b22      	ldr	r3, [pc, #136]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053e6:	e050      	b.n	800548a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e04f      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d148      	bne.n	800548a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80053f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a19      	ldr	r2, [pc, #100]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 80053fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005402:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005404:	4b17      	ldr	r3, [pc, #92]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4a16      	ldr	r2, [pc, #88]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 800540a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005410:	f7fd f9c0 	bl	8002794 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005418:	f7fd f9bc 	bl	8002794 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e030      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542a:	4b0e      	ldr	r3, [pc, #56]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x734>
 8005436:	e028      	b.n	800548a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b0c      	cmp	r3, #12
 800543c:	d023      	beq.n	8005486 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a08      	ldr	r2, [pc, #32]	@ (8005464 <HAL_RCC_OscConfig+0x780>)
 8005444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544a:	f7fd f9a3 	bl	8002794 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005450:	e00c      	b.n	800546c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005452:	f7fd f99f 	bl	8002794 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d905      	bls.n	800546c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e013      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
 8005464:	40021000 	.word	0x40021000
 8005468:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546c:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <HAL_RCC_OscConfig+0x7b0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1ec      	bne.n	8005452 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005478:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCC_OscConfig+0x7b0>)
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	4905      	ldr	r1, [pc, #20]	@ (8005494 <HAL_RCC_OscConfig+0x7b0>)
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCC_OscConfig+0x7b4>)
 8005480:	4013      	ands	r3, r2
 8005482:	60cb      	str	r3, [r1, #12]
 8005484:	e001      	b.n	800548a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000
 8005498:	feeefffc 	.word	0xfeeefffc

0800549c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0e7      	b.n	8005680 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b75      	ldr	r3, [pc, #468]	@ (8005688 <HAL_RCC_ClockConfig+0x1ec>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d910      	bls.n	80054e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b72      	ldr	r3, [pc, #456]	@ (8005688 <HAL_RCC_ClockConfig+0x1ec>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 0207 	bic.w	r2, r3, #7
 80054c6:	4970      	ldr	r1, [pc, #448]	@ (8005688 <HAL_RCC_ClockConfig+0x1ec>)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b6e      	ldr	r3, [pc, #440]	@ (8005688 <HAL_RCC_ClockConfig+0x1ec>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0cf      	b.n	8005680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d010      	beq.n	800550e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	4b66      	ldr	r3, [pc, #408]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d908      	bls.n	800550e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fc:	4b63      	ldr	r3, [pc, #396]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4960      	ldr	r1, [pc, #384]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d04c      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b03      	cmp	r3, #3
 8005520:	d107      	bne.n	8005532 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005522:	4b5a      	ldr	r3, [pc, #360]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d121      	bne.n	8005572 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0a6      	b.n	8005680 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800553a:	4b54      	ldr	r3, [pc, #336]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d115      	bne.n	8005572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e09a      	b.n	8005680 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005552:	4b4e      	ldr	r3, [pc, #312]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e08e      	b.n	8005680 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005562:	4b4a      	ldr	r3, [pc, #296]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e086      	b.n	8005680 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005572:	4b46      	ldr	r3, [pc, #280]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f023 0203 	bic.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4943      	ldr	r1, [pc, #268]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 8005580:	4313      	orrs	r3, r2
 8005582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005584:	f7fd f906 	bl	8002794 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558c:	f7fd f902 	bl	8002794 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e06e      	b.n	8005680 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	4b3a      	ldr	r3, [pc, #232]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 020c 	and.w	r2, r3, #12
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1eb      	bne.n	800558c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	4b31      	ldr	r3, [pc, #196]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d208      	bcs.n	80055e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d0:	4b2e      	ldr	r3, [pc, #184]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	492b      	ldr	r1, [pc, #172]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055e2:	4b29      	ldr	r3, [pc, #164]	@ (8005688 <HAL_RCC_ClockConfig+0x1ec>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d210      	bcs.n	8005612 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f0:	4b25      	ldr	r3, [pc, #148]	@ (8005688 <HAL_RCC_ClockConfig+0x1ec>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f023 0207 	bic.w	r2, r3, #7
 80055f8:	4923      	ldr	r1, [pc, #140]	@ (8005688 <HAL_RCC_ClockConfig+0x1ec>)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005600:	4b21      	ldr	r3, [pc, #132]	@ (8005688 <HAL_RCC_ClockConfig+0x1ec>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d001      	beq.n	8005612 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e036      	b.n	8005680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800561e:	4b1b      	ldr	r3, [pc, #108]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	4918      	ldr	r1, [pc, #96]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 800562c:	4313      	orrs	r3, r2
 800562e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800563c:	4b13      	ldr	r3, [pc, #76]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4910      	ldr	r1, [pc, #64]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 800564c:	4313      	orrs	r3, r2
 800564e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005650:	f000 f824 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <HAL_RCC_ClockConfig+0x1f0>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	091b      	lsrs	r3, r3, #4
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	490b      	ldr	r1, [pc, #44]	@ (8005690 <HAL_RCC_ClockConfig+0x1f4>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
 800566c:	4a09      	ldr	r2, [pc, #36]	@ (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 800566e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005670:	4b09      	ldr	r3, [pc, #36]	@ (8005698 <HAL_RCC_ClockConfig+0x1fc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7fc fd77 	bl	8002168 <HAL_InitTick>
 800567a:	4603      	mov	r3, r0
 800567c:	72fb      	strb	r3, [r7, #11]

  return status;
 800567e:	7afb      	ldrb	r3, [r7, #11]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40022000 	.word	0x40022000
 800568c:	40021000 	.word	0x40021000
 8005690:	080102dc 	.word	0x080102dc
 8005694:	2000002c 	.word	0x2000002c
 8005698:	20000030 	.word	0x20000030

0800569c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	@ 0x24
 80056a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056aa:	4b3e      	ldr	r3, [pc, #248]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056b4:	4b3b      	ldr	r3, [pc, #236]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0x34>
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d121      	bne.n	800570e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d11e      	bne.n	800570e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056d0:	4b34      	ldr	r3, [pc, #208]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d107      	bne.n	80056ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056dc:	4b31      	ldr	r3, [pc, #196]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	e005      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056ec:	4b2d      	ldr	r3, [pc, #180]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	091b      	lsrs	r3, r3, #4
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80056f8:	4a2b      	ldr	r2, [pc, #172]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10d      	bne.n	8005724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b04      	cmp	r3, #4
 8005712:	d102      	bne.n	800571a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005714:	4b25      	ldr	r3, [pc, #148]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e004      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d101      	bne.n	8005724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005720:	4b23      	ldr	r3, [pc, #140]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d134      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800572a:	4b1e      	ldr	r3, [pc, #120]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d003      	beq.n	8005742 <HAL_RCC_GetSysClockFreq+0xa6>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d003      	beq.n	8005748 <HAL_RCC_GetSysClockFreq+0xac>
 8005740:	e005      	b.n	800574e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005742:	4b1a      	ldr	r3, [pc, #104]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005744:	617b      	str	r3, [r7, #20]
      break;
 8005746:	e005      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005748:	4b19      	ldr	r3, [pc, #100]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800574a:	617b      	str	r3, [r7, #20]
      break;
 800574c:	e002      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	617b      	str	r3, [r7, #20]
      break;
 8005752:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005754:	4b13      	ldr	r3, [pc, #76]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	3301      	adds	r3, #1
 8005760:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005762:	4b10      	ldr	r3, [pc, #64]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	fb03 f202 	mul.w	r2, r3, r2
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	fbb2 f3f3 	udiv	r3, r2, r3
 8005778:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800577a:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	0e5b      	lsrs	r3, r3, #25
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	3301      	adds	r3, #1
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005792:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005794:	69bb      	ldr	r3, [r7, #24]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3724      	adds	r7, #36	@ 0x24
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40021000 	.word	0x40021000
 80057a8:	080102f4 	.word	0x080102f4
 80057ac:	00f42400 	.word	0x00f42400
 80057b0:	007a1200 	.word	0x007a1200

080057b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b8:	4b03      	ldr	r3, [pc, #12]	@ (80057c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ba:	681b      	ldr	r3, [r3, #0]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	2000002c 	.word	0x2000002c

080057cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057d0:	f7ff fff0 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4904      	ldr	r1, [pc, #16]	@ (80057f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	080102ec 	.word	0x080102ec

080057f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057fc:	f7ff ffda 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b06      	ldr	r3, [pc, #24]	@ (800581c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	0adb      	lsrs	r3, r3, #11
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4904      	ldr	r1, [pc, #16]	@ (8005820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	080102ec 	.word	0x080102ec

08005824 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	220f      	movs	r2, #15
 8005832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_RCC_GetClockConfig+0x5c>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0203 	and.w	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005840:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <HAL_RCC_GetClockConfig+0x5c>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800584c:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <HAL_RCC_GetClockConfig+0x5c>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <HAL_RCC_GetClockConfig+0x5c>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	08db      	lsrs	r3, r3, #3
 800585e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005866:	4b07      	ldr	r3, [pc, #28]	@ (8005884 <HAL_RCC_GetClockConfig+0x60>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0207 	and.w	r2, r3, #7
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	601a      	str	r2, [r3, #0]
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000
 8005884:	40022000 	.word	0x40022000

08005888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005894:	4b2a      	ldr	r3, [pc, #168]	@ (8005940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058a0:	f7ff f9bc 	bl	8004c1c <HAL_PWREx_GetVoltageRange>
 80058a4:	6178      	str	r0, [r7, #20]
 80058a6:	e014      	b.n	80058d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058a8:	4b25      	ldr	r3, [pc, #148]	@ (8005940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ac:	4a24      	ldr	r2, [pc, #144]	@ (8005940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058b4:	4b22      	ldr	r3, [pc, #136]	@ (8005940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058c0:	f7ff f9ac 	bl	8004c1c <HAL_PWREx_GetVoltageRange>
 80058c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d8:	d10b      	bne.n	80058f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b80      	cmp	r3, #128	@ 0x80
 80058de:	d919      	bls.n	8005914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80058e4:	d902      	bls.n	80058ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058e6:	2302      	movs	r3, #2
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	e013      	b.n	8005914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058ec:	2301      	movs	r3, #1
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	e010      	b.n	8005914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b80      	cmp	r3, #128	@ 0x80
 80058f6:	d902      	bls.n	80058fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80058f8:	2303      	movs	r3, #3
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	e00a      	b.n	8005914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b80      	cmp	r3, #128	@ 0x80
 8005902:	d102      	bne.n	800590a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005904:	2302      	movs	r3, #2
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	e004      	b.n	8005914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b70      	cmp	r3, #112	@ 0x70
 800590e:	d101      	bne.n	8005914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005910:	2301      	movs	r3, #1
 8005912:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005914:	4b0b      	ldr	r3, [pc, #44]	@ (8005944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 0207 	bic.w	r2, r3, #7
 800591c:	4909      	ldr	r1, [pc, #36]	@ (8005944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005924:	4b07      	ldr	r3, [pc, #28]	@ (8005944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	429a      	cmp	r2, r3
 8005930:	d001      	beq.n	8005936 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40021000 	.word	0x40021000
 8005944:	40022000 	.word	0x40022000

08005948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005950:	2300      	movs	r3, #0
 8005952:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005954:	2300      	movs	r3, #0
 8005956:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005960:	2b00      	cmp	r3, #0
 8005962:	d041      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005968:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800596c:	d02a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800596e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005972:	d824      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005974:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005978:	d008      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800597a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800597e:	d81e      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005988:	d010      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800598a:	e018      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800598c:	4b86      	ldr	r3, [pc, #536]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4a85      	ldr	r2, [pc, #532]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005996:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005998:	e015      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fabb 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059aa:	e00c      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3320      	adds	r3, #32
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fba6 	bl	8006104 <RCCEx_PLLSAI2_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059bc:	e003      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	74fb      	strb	r3, [r7, #19]
      break;
 80059c2:	e000      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059c6:	7cfb      	ldrb	r3, [r7, #19]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059cc:	4b76      	ldr	r3, [pc, #472]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059da:	4973      	ldr	r1, [pc, #460]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80059e2:	e001      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d041      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059fc:	d02a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80059fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a02:	d824      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a08:	d008      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a0e:	d81e      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a18:	d010      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a1a:	e018      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a1c:	4b62      	ldr	r3, [pc, #392]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a61      	ldr	r2, [pc, #388]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a28:	e015      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fa73 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a3a:	e00c      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3320      	adds	r3, #32
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fb5e 	bl	8006104 <RCCEx_PLLSAI2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a4c:	e003      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	74fb      	strb	r3, [r7, #19]
      break;
 8005a52:	e000      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a56:	7cfb      	ldrb	r3, [r7, #19]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a5c:	4b52      	ldr	r3, [pc, #328]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a6a:	494f      	ldr	r1, [pc, #316]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005a72:	e001      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80a0 	beq.w	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a86:	2300      	movs	r3, #0
 8005a88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa0:	4b41      	ldr	r3, [pc, #260]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa4:	4a40      	ldr	r2, [pc, #256]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aac:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005abc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ac6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ac8:	f7fc fe64 	bl	8002794 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ace:	e009      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad0:	f7fc fe60 	bl	8002794 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d902      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	74fb      	strb	r3, [r7, #19]
        break;
 8005ae2:	e005      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ae4:	4b31      	ldr	r3, [pc, #196]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0ef      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d15c      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005af6:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d019      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b14:	4b24      	ldr	r3, [pc, #144]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b20:	4b21      	ldr	r3, [pc, #132]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	4a20      	ldr	r2, [pc, #128]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b40:	4a19      	ldr	r2, [pc, #100]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b52:	f7fc fe1f 	bl	8002794 <HAL_GetTick>
 8005b56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b58:	e00b      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5a:	f7fc fe1b 	bl	8002794 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d902      	bls.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b70:	e006      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0ec      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005b80:	7cfb      	ldrb	r3, [r7, #19]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b86:	4b08      	ldr	r3, [pc, #32]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b96:	4904      	ldr	r1, [pc, #16]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b9e:	e009      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	74bb      	strb	r3, [r7, #18]
 8005ba4:	e006      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ba6:	bf00      	nop
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	7cfb      	ldrb	r3, [r7, #19]
 8005bb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bb4:	7c7b      	ldrb	r3, [r7, #17]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d105      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bba:	4b9e      	ldr	r3, [pc, #632]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	4a9d      	ldr	r2, [pc, #628]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bd2:	4b98      	ldr	r3, [pc, #608]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd8:	f023 0203 	bic.w	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	4994      	ldr	r1, [pc, #592]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bf4:	4b8f      	ldr	r3, [pc, #572]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfa:	f023 020c 	bic.w	r2, r3, #12
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c02:	498c      	ldr	r1, [pc, #560]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c16:	4b87      	ldr	r3, [pc, #540]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c24:	4983      	ldr	r1, [pc, #524]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c38:	4b7e      	ldr	r3, [pc, #504]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c46:	497b      	ldr	r1, [pc, #492]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c5a:	4b76      	ldr	r3, [pc, #472]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c68:	4972      	ldr	r1, [pc, #456]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c7c:	4b6d      	ldr	r3, [pc, #436]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8a:	496a      	ldr	r1, [pc, #424]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c9e:	4b65      	ldr	r3, [pc, #404]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cac:	4961      	ldr	r1, [pc, #388]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cce:	4959      	ldr	r1, [pc, #356]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ce2:	4b54      	ldr	r3, [pc, #336]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf0:	4950      	ldr	r1, [pc, #320]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d04:	4b4b      	ldr	r3, [pc, #300]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d12:	4948      	ldr	r1, [pc, #288]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d26:	4b43      	ldr	r3, [pc, #268]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d34:	493f      	ldr	r1, [pc, #252]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d028      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d48:	4b3a      	ldr	r3, [pc, #232]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d56:	4937      	ldr	r1, [pc, #220]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d66:	d106      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d68:	4b32      	ldr	r3, [pc, #200]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4a31      	ldr	r2, [pc, #196]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d72:	60d3      	str	r3, [r2, #12]
 8005d74:	e011      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d7e:	d10c      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3304      	adds	r3, #4
 8005d84:	2101      	movs	r1, #1
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f8c8 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d90:	7cfb      	ldrb	r3, [r7, #19]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
 8005d98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d028      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005da6:	4b23      	ldr	r3, [pc, #140]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db4:	491f      	ldr	r1, [pc, #124]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	4a1a      	ldr	r2, [pc, #104]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dd0:	60d3      	str	r3, [r2, #12]
 8005dd2:	e011      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f899 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02b      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e04:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e12:	4908      	ldr	r1, [pc, #32]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e22:	d109      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e24:	4b03      	ldr	r3, [pc, #12]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a02      	ldr	r2, [pc, #8]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e2e:	60d3      	str	r3, [r2, #12]
 8005e30:	e014      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3304      	adds	r3, #4
 8005e46:	2101      	movs	r1, #1
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f867 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d02f      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e68:	4b2b      	ldr	r3, [pc, #172]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e76:	4928      	ldr	r1, [pc, #160]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e86:	d10d      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f844 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e98:	7cfb      	ldrb	r3, [r7, #19]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d014      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	74bb      	strb	r3, [r7, #18]
 8005ea2:	e011      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3320      	adds	r3, #32
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f925 	bl	8006104 <RCCEx_PLLSAI2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ebe:	7cfb      	ldrb	r3, [r7, #19]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ec4:	7cfb      	ldrb	r3, [r7, #19]
 8005ec6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ed4:	4b10      	ldr	r3, [pc, #64]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ee2:	490d      	ldr	r1, [pc, #52]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ef6:	4b08      	ldr	r3, [pc, #32]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f06:	4904      	ldr	r1, [pc, #16]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000

08005f1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f2a:	4b75      	ldr	r3, [pc, #468]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d018      	beq.n	8005f68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f36:	4b72      	ldr	r3, [pc, #456]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0203 	and.w	r2, r3, #3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d10d      	bne.n	8005f62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
       ||
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d047      	beq.n	8005ff2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e044      	b.n	8005ff2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d018      	beq.n	8005fa2 <RCCEx_PLLSAI1_Config+0x86>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d825      	bhi.n	8005fc0 <RCCEx_PLLSAI1_Config+0xa4>
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d002      	beq.n	8005f7e <RCCEx_PLLSAI1_Config+0x62>
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d009      	beq.n	8005f90 <RCCEx_PLLSAI1_Config+0x74>
 8005f7c:	e020      	b.n	8005fc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f7e:	4b60      	ldr	r3, [pc, #384]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11d      	bne.n	8005fc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f8e:	e01a      	b.n	8005fc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f90:	4b5b      	ldr	r3, [pc, #364]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d116      	bne.n	8005fca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa0:	e013      	b.n	8005fca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fa2:	4b57      	ldr	r3, [pc, #348]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10f      	bne.n	8005fce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fae:	4b54      	ldr	r3, [pc, #336]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fbe:	e006      	b.n	8005fce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc4:	e004      	b.n	8005fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fc6:	bf00      	nop
 8005fc8:	e002      	b.n	8005fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fca:	bf00      	nop
 8005fcc:	e000      	b.n	8005fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fce:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6819      	ldr	r1, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	430b      	orrs	r3, r1
 8005fec:	4944      	ldr	r1, [pc, #272]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d17d      	bne.n	80060f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ff8:	4b41      	ldr	r3, [pc, #260]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a40      	ldr	r2, [pc, #256]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ffe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006004:	f7fc fbc6 	bl	8002794 <HAL_GetTick>
 8006008:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800600a:	e009      	b.n	8006020 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800600c:	f7fc fbc2 	bl	8002794 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d902      	bls.n	8006020 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	73fb      	strb	r3, [r7, #15]
        break;
 800601e:	e005      	b.n	800602c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006020:	4b37      	ldr	r3, [pc, #220]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1ef      	bne.n	800600c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d160      	bne.n	80060f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d111      	bne.n	800605c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006038:	4b31      	ldr	r3, [pc, #196]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6892      	ldr	r2, [r2, #8]
 8006048:	0211      	lsls	r1, r2, #8
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68d2      	ldr	r2, [r2, #12]
 800604e:	0912      	lsrs	r2, r2, #4
 8006050:	0452      	lsls	r2, r2, #17
 8006052:	430a      	orrs	r2, r1
 8006054:	492a      	ldr	r1, [pc, #168]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006056:	4313      	orrs	r3, r2
 8006058:	610b      	str	r3, [r1, #16]
 800605a:	e027      	b.n	80060ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d112      	bne.n	8006088 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006062:	4b27      	ldr	r3, [pc, #156]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800606a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6892      	ldr	r2, [r2, #8]
 8006072:	0211      	lsls	r1, r2, #8
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6912      	ldr	r2, [r2, #16]
 8006078:	0852      	lsrs	r2, r2, #1
 800607a:	3a01      	subs	r2, #1
 800607c:	0552      	lsls	r2, r2, #21
 800607e:	430a      	orrs	r2, r1
 8006080:	491f      	ldr	r1, [pc, #124]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006082:	4313      	orrs	r3, r2
 8006084:	610b      	str	r3, [r1, #16]
 8006086:	e011      	b.n	80060ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006088:	4b1d      	ldr	r3, [pc, #116]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006090:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6892      	ldr	r2, [r2, #8]
 8006098:	0211      	lsls	r1, r2, #8
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6952      	ldr	r2, [r2, #20]
 800609e:	0852      	lsrs	r2, r2, #1
 80060a0:	3a01      	subs	r2, #1
 80060a2:	0652      	lsls	r2, r2, #25
 80060a4:	430a      	orrs	r2, r1
 80060a6:	4916      	ldr	r1, [pc, #88]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060ac:	4b14      	ldr	r3, [pc, #80]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a13      	ldr	r2, [pc, #76]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b8:	f7fc fb6c 	bl	8002794 <HAL_GetTick>
 80060bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060be:	e009      	b.n	80060d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060c0:	f7fc fb68 	bl	8002794 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d902      	bls.n	80060d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	73fb      	strb	r3, [r7, #15]
          break;
 80060d2:	e005      	b.n	80060e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0ef      	beq.n	80060c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060e6:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	4904      	ldr	r1, [pc, #16]	@ (8006100 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000

08006104 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006112:	4b6a      	ldr	r3, [pc, #424]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d018      	beq.n	8006150 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800611e:	4b67      	ldr	r3, [pc, #412]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f003 0203 	and.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d10d      	bne.n	800614a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
       ||
 8006132:	2b00      	cmp	r3, #0
 8006134:	d009      	beq.n	800614a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006136:	4b61      	ldr	r3, [pc, #388]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	091b      	lsrs	r3, r3, #4
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
       ||
 8006146:	429a      	cmp	r2, r3
 8006148:	d047      	beq.n	80061da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	73fb      	strb	r3, [r7, #15]
 800614e:	e044      	b.n	80061da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b03      	cmp	r3, #3
 8006156:	d018      	beq.n	800618a <RCCEx_PLLSAI2_Config+0x86>
 8006158:	2b03      	cmp	r3, #3
 800615a:	d825      	bhi.n	80061a8 <RCCEx_PLLSAI2_Config+0xa4>
 800615c:	2b01      	cmp	r3, #1
 800615e:	d002      	beq.n	8006166 <RCCEx_PLLSAI2_Config+0x62>
 8006160:	2b02      	cmp	r3, #2
 8006162:	d009      	beq.n	8006178 <RCCEx_PLLSAI2_Config+0x74>
 8006164:	e020      	b.n	80061a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006166:	4b55      	ldr	r3, [pc, #340]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d11d      	bne.n	80061ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006176:	e01a      	b.n	80061ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006178:	4b50      	ldr	r3, [pc, #320]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006180:	2b00      	cmp	r3, #0
 8006182:	d116      	bne.n	80061b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006188:	e013      	b.n	80061b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800618a:	4b4c      	ldr	r3, [pc, #304]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10f      	bne.n	80061b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006196:	4b49      	ldr	r3, [pc, #292]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061a6:	e006      	b.n	80061b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
      break;
 80061ac:	e004      	b.n	80061b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061ae:	bf00      	nop
 80061b0:	e002      	b.n	80061b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10d      	bne.n	80061da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061be:	4b3f      	ldr	r3, [pc, #252]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6819      	ldr	r1, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	430b      	orrs	r3, r1
 80061d4:	4939      	ldr	r1, [pc, #228]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d167      	bne.n	80062b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061e0:	4b36      	ldr	r3, [pc, #216]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a35      	ldr	r2, [pc, #212]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ec:	f7fc fad2 	bl	8002794 <HAL_GetTick>
 80061f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061f2:	e009      	b.n	8006208 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061f4:	f7fc face 	bl	8002794 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d902      	bls.n	8006208 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	73fb      	strb	r3, [r7, #15]
        break;
 8006206:	e005      	b.n	8006214 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006208:	4b2c      	ldr	r3, [pc, #176]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1ef      	bne.n	80061f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d14a      	bne.n	80062b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d111      	bne.n	8006244 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006220:	4b26      	ldr	r3, [pc, #152]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6892      	ldr	r2, [r2, #8]
 8006230:	0211      	lsls	r1, r2, #8
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	68d2      	ldr	r2, [r2, #12]
 8006236:	0912      	lsrs	r2, r2, #4
 8006238:	0452      	lsls	r2, r2, #17
 800623a:	430a      	orrs	r2, r1
 800623c:	491f      	ldr	r1, [pc, #124]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800623e:	4313      	orrs	r3, r2
 8006240:	614b      	str	r3, [r1, #20]
 8006242:	e011      	b.n	8006268 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006244:	4b1d      	ldr	r3, [pc, #116]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800624c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6892      	ldr	r2, [r2, #8]
 8006254:	0211      	lsls	r1, r2, #8
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6912      	ldr	r2, [r2, #16]
 800625a:	0852      	lsrs	r2, r2, #1
 800625c:	3a01      	subs	r2, #1
 800625e:	0652      	lsls	r2, r2, #25
 8006260:	430a      	orrs	r2, r1
 8006262:	4916      	ldr	r1, [pc, #88]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006264:	4313      	orrs	r3, r2
 8006266:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006268:	4b14      	ldr	r3, [pc, #80]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a13      	ldr	r2, [pc, #76]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800626e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006272:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fc fa8e 	bl	8002794 <HAL_GetTick>
 8006278:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800627a:	e009      	b.n	8006290 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800627c:	f7fc fa8a 	bl	8002794 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d902      	bls.n	8006290 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	73fb      	strb	r3, [r7, #15]
          break;
 800628e:	e005      	b.n	800629c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006290:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0ef      	beq.n	800627c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062a2:	4b06      	ldr	r3, [pc, #24]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a4:	695a      	ldr	r2, [r3, #20]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	4904      	ldr	r1, [pc, #16]	@ (80062bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000

080062c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d079      	beq.n	80063c6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fb fe8e 	bl	8002008 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d058      	beq.n	80063b4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	22ca      	movs	r2, #202	@ 0xca
 8006308:	625a      	str	r2, [r3, #36]	@ 0x24
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2253      	movs	r2, #83	@ 0x53
 8006310:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fb7a 	bl	8006a0c <RTC_EnterInitMode>
 8006318:	4603      	mov	r3, r0
 800631a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d127      	bne.n	8006372 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006334:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6899      	ldr	r1, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	68d2      	ldr	r2, [r2, #12]
 800635c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6919      	ldr	r1, [r3, #16]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	041a      	lsls	r2, r3, #16
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fb7e 	bl	8006a74 <RTC_ExitInitMode>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d113      	bne.n	80063aa <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0203 	bic.w	r2, r2, #3
 8006390:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	22ff      	movs	r2, #255	@ 0xff
 80063b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80063b2:	e001      	b.n	80063b8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063d0:	b590      	push	{r4, r7, lr}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_RTC_SetTime+0x1a>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e08b      	b.n	8006502 <HAL_RTC_SetTime+0x132>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2202      	movs	r2, #2
 80063f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	22ca      	movs	r2, #202	@ 0xca
 8006400:	625a      	str	r2, [r3, #36]	@ 0x24
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2253      	movs	r2, #83	@ 0x53
 8006408:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fafe 	bl	8006a0c <RTC_EnterInitMode>
 8006410:	4603      	mov	r3, r0
 8006412:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d163      	bne.n	80064e2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d126      	bne.n	800646e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	d102      	bne.n	8006434 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2200      	movs	r2, #0
 8006432:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fb59 	bl	8006af0 <RTC_ByteToBcd2>
 800643e:	4603      	mov	r3, r0
 8006440:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fb52 	bl	8006af0 <RTC_ByteToBcd2>
 800644c:	4603      	mov	r3, r0
 800644e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006450:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	789b      	ldrb	r3, [r3, #2]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fb4a 	bl	8006af0 <RTC_ByteToBcd2>
 800645c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800645e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	78db      	ldrb	r3, [r3, #3]
 8006466:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e018      	b.n	80064a0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800648e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006494:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	78db      	ldrb	r3, [r3, #3]
 800649a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80064aa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80064ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6899      	ldr	r1, [r3, #8]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 facb 	bl	8006a74 <RTC_ExitInitMode>
 80064de:	4603      	mov	r3, r0
 80064e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	22ff      	movs	r2, #255	@ 0xff
 80064e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006500:	7cfb      	ldrb	r3, [r7, #19]
}
 8006502:	4618      	mov	r0, r3
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd90      	pop	{r4, r7, pc}

0800650a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b086      	sub	sp, #24
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006538:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800653c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	0c1b      	lsrs	r3, r3, #16
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006548:	b2da      	uxtb	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	0a1b      	lsrs	r3, r3, #8
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006566:	b2da      	uxtb	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	0d9b      	lsrs	r3, r3, #22
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d11a      	bne.n	80065b8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fad2 	bl	8006b30 <RTC_Bcd2ToByte>
 800658c:	4603      	mov	r3, r0
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	785b      	ldrb	r3, [r3, #1]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fac9 	bl	8006b30 <RTC_Bcd2ToByte>
 800659e:	4603      	mov	r3, r0
 80065a0:	461a      	mov	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	789b      	ldrb	r3, [r3, #2]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fac0 	bl	8006b30 <RTC_Bcd2ToByte>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80065c2:	b590      	push	{r4, r7, lr}
 80065c4:	b087      	sub	sp, #28
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_RTC_SetDate+0x1a>
 80065d8:	2302      	movs	r3, #2
 80065da:	e075      	b.n	80066c8 <HAL_RTC_SetDate+0x106>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10e      	bne.n	8006610 <HAL_RTC_SetDate+0x4e>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	f003 0310 	and.w	r3, r3, #16
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	f023 0310 	bic.w	r3, r3, #16
 8006606:	b2db      	uxtb	r3, r3
 8006608:	330a      	adds	r3, #10
 800660a:	b2da      	uxtb	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d11c      	bne.n	8006650 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	78db      	ldrb	r3, [r3, #3]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fa68 	bl	8006af0 <RTC_ByteToBcd2>
 8006620:	4603      	mov	r3, r0
 8006622:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fa61 	bl	8006af0 <RTC_ByteToBcd2>
 800662e:	4603      	mov	r3, r0
 8006630:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006632:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	789b      	ldrb	r3, [r3, #2]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fa59 	bl	8006af0 <RTC_ByteToBcd2>
 800663e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006640:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	e00e      	b.n	800666e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	78db      	ldrb	r3, [r3, #3]
 8006654:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800665c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006662:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	22ca      	movs	r2, #202	@ 0xca
 8006674:	625a      	str	r2, [r3, #36]	@ 0x24
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2253      	movs	r2, #83	@ 0x53
 800667c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 f9c4 	bl	8006a0c <RTC_EnterInitMode>
 8006684:	4603      	mov	r3, r0
 8006686:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006688:	7cfb      	ldrb	r3, [r7, #19]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006698:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800669c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f9e8 	bl	8006a74 <RTC_ExitInitMode>
 80066a4:	4603      	mov	r3, r0
 80066a6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	22ff      	movs	r2, #255	@ 0xff
 80066ae:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80066b0:	7cfb      	ldrb	r3, [r7, #19]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80066c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd90      	pop	{r4, r7, pc}

080066d0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80066e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80066ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	0c1b      	lsrs	r3, r3, #16
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	0a1b      	lsrs	r3, r3, #8
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	b2da      	uxtb	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800670e:	b2da      	uxtb	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	0b5b      	lsrs	r3, r3, #13
 8006718:	b2db      	uxtb	r3, r3
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	b2da      	uxtb	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d11a      	bne.n	8006760 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	78db      	ldrb	r3, [r3, #3]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f9fe 	bl	8006b30 <RTC_Bcd2ToByte>
 8006734:	4603      	mov	r3, r0
 8006736:	461a      	mov	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	4618      	mov	r0, r3
 8006742:	f000 f9f5 	bl	8006b30 <RTC_Bcd2ToByte>
 8006746:	4603      	mov	r3, r0
 8006748:	461a      	mov	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	789b      	ldrb	r3, [r3, #2]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f9ec 	bl	8006b30 <RTC_Bcd2ToByte>
 8006758:	4603      	mov	r3, r0
 800675a:	461a      	mov	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800676a:	b590      	push	{r4, r7, lr}
 800676c:	b089      	sub	sp, #36	@ 0x24
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_RTC_SetAlarm+0x1a>
 8006780:	2302      	movs	r3, #2
 8006782:	e11b      	b.n	80069bc <HAL_RTC_SetAlarm+0x252>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d137      	bne.n	800680a <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 f99c 	bl	8006af0 <RTC_ByteToBcd2>
 80067b8:	4603      	mov	r3, r0
 80067ba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f995 	bl	8006af0 <RTC_ByteToBcd2>
 80067c6:	4603      	mov	r3, r0
 80067c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067ca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	789b      	ldrb	r3, [r3, #2]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f98d 	bl	8006af0 <RTC_ByteToBcd2>
 80067d6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067d8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	78db      	ldrb	r3, [r3, #3]
 80067e0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067e2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 f97f 	bl	8006af0 <RTC_ByteToBcd2>
 80067f2:	4603      	mov	r3, r0
 80067f4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067f6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006804:	4313      	orrs	r3, r2
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	e023      	b.n	8006852 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2200      	movs	r2, #0
 800681c:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800682a:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006830:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	78db      	ldrb	r3, [r3, #3]
 8006836:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006838:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006840:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006842:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006848:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800684e:	4313      	orrs	r3, r2
 8006850:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	4313      	orrs	r3, r2
 800685c:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	22ca      	movs	r2, #202	@ 0xca
 8006864:	625a      	str	r2, [r3, #36]	@ 0x24
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2253      	movs	r2, #83	@ 0x53
 800686c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006876:	d14a      	bne.n	800690e <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006886:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006898:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068a8:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80068aa:	f7fb ff73 	bl	8002794 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80068b0:	e015      	b.n	80068de <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068b2:	f7fb ff6f 	bl	8002794 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068c0:	d90d      	bls.n	80068de <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	22ff      	movs	r2, #255	@ 0xff
 80068c8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2203      	movs	r2, #3
 80068ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e06e      	b.n	80069bc <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0e2      	beq.n	80068b2 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800690a:	609a      	str	r2, [r3, #8]
 800690c:	e049      	b.n	80069a2 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800691c:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800692e:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800693e:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006940:	f7fb ff28 	bl	8002794 <HAL_GetTick>
 8006944:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006946:	e015      	b.n	8006974 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006948:	f7fb ff24 	bl	8002794 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006956:	d90d      	bls.n	8006974 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	22ff      	movs	r2, #255	@ 0xff
 800695e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2203      	movs	r2, #3
 8006964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e023      	b.n	80069bc <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0e2      	beq.n	8006948 <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	22ff      	movs	r2, #255	@ 0xff
 80069a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3724      	adds	r7, #36	@ 0x24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd90      	pop	{r4, r7, pc}

080069c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006a08 <HAL_RTC_WaitForSynchro+0x44>)
 80069d2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80069d4:	f7fb fede 	bl	8002794 <HAL_GetTick>
 80069d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069da:	e009      	b.n	80069f0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069dc:	f7fb feda 	bl	8002794 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069ea:	d901      	bls.n	80069f0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e007      	b.n	8006a00 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0ee      	beq.n	80069dc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	0003ff5f 	.word	0x0003ff5f

08006a0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d120      	bne.n	8006a68 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a30:	f7fb feb0 	bl	8002794 <HAL_GetTick>
 8006a34:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a36:	e00d      	b.n	8006a54 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a38:	f7fb feac 	bl	8002794 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a46:	d905      	bls.n	8006a54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <RTC_EnterInitMode+0x5c>
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d1e7      	bne.n	8006a38 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006a80:	4b1a      	ldr	r3, [pc, #104]	@ (8006aec <RTC_ExitInitMode+0x78>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	4a19      	ldr	r2, [pc, #100]	@ (8006aec <RTC_ExitInitMode+0x78>)
 8006a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a8a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a8c:	4b17      	ldr	r3, [pc, #92]	@ (8006aec <RTC_ExitInitMode+0x78>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10c      	bne.n	8006ab2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff ff93 	bl	80069c4 <HAL_RTC_WaitForSynchro>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01e      	beq.n	8006ae2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2203      	movs	r2, #3
 8006aa8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	73fb      	strb	r3, [r7, #15]
 8006ab0:	e017      	b.n	8006ae2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8006aec <RTC_ExitInitMode+0x78>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8006aec <RTC_ExitInitMode+0x78>)
 8006ab8:	f023 0320 	bic.w	r3, r3, #32
 8006abc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff ff80 	bl	80069c4 <HAL_RTC_WaitForSynchro>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2203      	movs	r2, #3
 8006ace:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ad6:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <RTC_ExitInitMode+0x78>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	4a04      	ldr	r2, [pc, #16]	@ (8006aec <RTC_ExitInitMode+0x78>)
 8006adc:	f043 0320 	orr.w	r3, r3, #32
 8006ae0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40002800 	.word	0x40002800

08006af0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006b02:	e005      	b.n	8006b10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	3b0a      	subs	r3, #10
 8006b0e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	2b09      	cmp	r3, #9
 8006b14:	d8f6      	bhi.n	8006b04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	7afb      	ldrb	r3, [r7, #11]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	b2db      	uxtb	r3, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	0092      	lsls	r2, r2, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	4413      	add	r3, r2
 8006b56:	b2db      	uxtb	r3, r3
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e049      	b.n	8006c0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f841 	bl	8006c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	f000 f9e0 	bl	8006f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
	...

08006c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d001      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e04f      	b.n	8006ce0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a23      	ldr	r2, [pc, #140]	@ (8006cec <HAL_TIM_Base_Start_IT+0xc4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01d      	beq.n	8006c9e <HAL_TIM_Base_Start_IT+0x76>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6a:	d018      	beq.n	8006c9e <HAL_TIM_Base_Start_IT+0x76>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_TIM_Base_Start_IT+0x76>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00e      	beq.n	8006c9e <HAL_TIM_Base_Start_IT+0x76>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d009      	beq.n	8006c9e <HAL_TIM_Base_Start_IT+0x76>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d004      	beq.n	8006c9e <HAL_TIM_Base_Start_IT+0x76>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a19      	ldr	r2, [pc, #100]	@ (8006d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d115      	bne.n	8006cca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	4b17      	ldr	r3, [pc, #92]	@ (8006d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b06      	cmp	r3, #6
 8006cae:	d015      	beq.n	8006cdc <HAL_TIM_Base_Start_IT+0xb4>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb6:	d011      	beq.n	8006cdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc8:	e008      	b.n	8006cdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0201 	orr.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e000      	b.n	8006cde <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40013400 	.word	0x40013400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	00010007 	.word	0x00010007

08006d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d020      	beq.n	8006d6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01b      	beq.n	8006d6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0202 	mvn.w	r2, #2
 8006d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8e9 	bl	8006f2a <HAL_TIM_IC_CaptureCallback>
 8006d58:	e005      	b.n	8006d66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8db 	bl	8006f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8ec 	bl	8006f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d020      	beq.n	8006db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01b      	beq.n	8006db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0204 	mvn.w	r2, #4
 8006d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f8c3 	bl	8006f2a <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f8b5 	bl	8006f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f8c6 	bl	8006f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d020      	beq.n	8006e04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01b      	beq.n	8006e04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0208 	mvn.w	r2, #8
 8006dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2204      	movs	r2, #4
 8006dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f89d 	bl	8006f2a <HAL_TIM_IC_CaptureCallback>
 8006df0:	e005      	b.n	8006dfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f88f 	bl	8006f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f8a0 	bl	8006f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d020      	beq.n	8006e50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01b      	beq.n	8006e50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0210 	mvn.w	r2, #16
 8006e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2208      	movs	r2, #8
 8006e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f877 	bl	8006f2a <HAL_TIM_IC_CaptureCallback>
 8006e3c:	e005      	b.n	8006e4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f869 	bl	8006f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f87a 	bl	8006f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00c      	beq.n	8006e74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d007      	beq.n	8006e74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0201 	mvn.w	r2, #1
 8006e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fa ff36 	bl	8001ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00c      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f913 	bl	80070c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d007      	beq.n	8006ec6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f90b 	bl	80070dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f834 	bl	8006f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00c      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0220 	mvn.w	r2, #32
 8006f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f8d3 	bl	80070b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a46      	ldr	r2, [pc, #280]	@ (8007094 <TIM_Base_SetConfig+0x12c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f86:	d00f      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a43      	ldr	r2, [pc, #268]	@ (8007098 <TIM_Base_SetConfig+0x130>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00b      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a42      	ldr	r2, [pc, #264]	@ (800709c <TIM_Base_SetConfig+0x134>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a41      	ldr	r2, [pc, #260]	@ (80070a0 <TIM_Base_SetConfig+0x138>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a40      	ldr	r2, [pc, #256]	@ (80070a4 <TIM_Base_SetConfig+0x13c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d108      	bne.n	8006fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a35      	ldr	r2, [pc, #212]	@ (8007094 <TIM_Base_SetConfig+0x12c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01f      	beq.n	8007002 <TIM_Base_SetConfig+0x9a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc8:	d01b      	beq.n	8007002 <TIM_Base_SetConfig+0x9a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a32      	ldr	r2, [pc, #200]	@ (8007098 <TIM_Base_SetConfig+0x130>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d017      	beq.n	8007002 <TIM_Base_SetConfig+0x9a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a31      	ldr	r2, [pc, #196]	@ (800709c <TIM_Base_SetConfig+0x134>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d013      	beq.n	8007002 <TIM_Base_SetConfig+0x9a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a30      	ldr	r2, [pc, #192]	@ (80070a0 <TIM_Base_SetConfig+0x138>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00f      	beq.n	8007002 <TIM_Base_SetConfig+0x9a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80070a4 <TIM_Base_SetConfig+0x13c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00b      	beq.n	8007002 <TIM_Base_SetConfig+0x9a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2e      	ldr	r2, [pc, #184]	@ (80070a8 <TIM_Base_SetConfig+0x140>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d007      	beq.n	8007002 <TIM_Base_SetConfig+0x9a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80070ac <TIM_Base_SetConfig+0x144>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d003      	beq.n	8007002 <TIM_Base_SetConfig+0x9a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80070b0 <TIM_Base_SetConfig+0x148>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d108      	bne.n	8007014 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a16      	ldr	r2, [pc, #88]	@ (8007094 <TIM_Base_SetConfig+0x12c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00f      	beq.n	8007060 <TIM_Base_SetConfig+0xf8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a18      	ldr	r2, [pc, #96]	@ (80070a4 <TIM_Base_SetConfig+0x13c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00b      	beq.n	8007060 <TIM_Base_SetConfig+0xf8>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a17      	ldr	r2, [pc, #92]	@ (80070a8 <TIM_Base_SetConfig+0x140>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <TIM_Base_SetConfig+0xf8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a16      	ldr	r2, [pc, #88]	@ (80070ac <TIM_Base_SetConfig+0x144>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_Base_SetConfig+0xf8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a15      	ldr	r2, [pc, #84]	@ (80070b0 <TIM_Base_SetConfig+0x148>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d103      	bne.n	8007068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b01      	cmp	r3, #1
 8007078:	d105      	bne.n	8007086 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f023 0201 	bic.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	611a      	str	r2, [r3, #16]
  }
}
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40012c00 	.word	0x40012c00
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800
 80070a0:	40000c00 	.word	0x40000c00
 80070a4:	40013400 	.word	0x40013400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800

080070b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e040      	b.n	8007184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fb fa2e 	bl	8002574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2224      	movs	r2, #36	@ 0x24
 800711c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0201 	bic.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fee6 	bl	8007f08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fc2b 	bl	8007998 <UART_SetConfig>
 8007142:	4603      	mov	r3, r0
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e01b      	b.n	8007184 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800715a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800716a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 ff65 	bl	800804c <UART_CheckIdleState>
 8007182:	4603      	mov	r3, r0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08a      	sub	sp, #40	@ 0x28
 8007190:	af02      	add	r7, sp, #8
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	4613      	mov	r3, r2
 800719a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d177      	bne.n	8007294 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_UART_Transmit+0x24>
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e070      	b.n	8007296 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2221      	movs	r2, #33	@ 0x21
 80071c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071c2:	f7fb fae7 	bl	8002794 <HAL_GetTick>
 80071c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	88fa      	ldrh	r2, [r7, #6]
 80071d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e0:	d108      	bne.n	80071f4 <HAL_UART_Transmit+0x68>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d104      	bne.n	80071f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	e003      	b.n	80071fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071fc:	e02f      	b.n	800725e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2200      	movs	r2, #0
 8007206:	2180      	movs	r1, #128	@ 0x80
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 ffc7 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e03b      	b.n	8007296 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	881a      	ldrh	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007230:	b292      	uxth	r2, r2
 8007232:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	3302      	adds	r3, #2
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e007      	b.n	800724c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	3301      	adds	r3, #1
 800724a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1c9      	bne.n	80071fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2140      	movs	r1, #64	@ 0x40
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 ff91 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e005      	b.n	8007296 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2220      	movs	r2, #32
 800728e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	e000      	b.n	8007296 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007294:	2302      	movs	r3, #2
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3720      	adds	r7, #32
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08a      	sub	sp, #40	@ 0x28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d137      	bne.n	8007328 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_UART_Receive_IT+0x24>
 80072be:	88fb      	ldrh	r3, [r7, #6]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e030      	b.n	800732a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a18      	ldr	r2, [pc, #96]	@ (8007334 <HAL_UART_Receive_IT+0x94>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d01f      	beq.n	8007318 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d018      	beq.n	8007318 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	613b      	str	r3, [r7, #16]
   return(result);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	623b      	str	r3, [r7, #32]
 8007306:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	69f9      	ldr	r1, [r7, #28]
 800730a:	6a3a      	ldr	r2, [r7, #32]
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	61bb      	str	r3, [r7, #24]
   return(result);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e6      	bne.n	80072e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007318:	88fb      	ldrh	r3, [r7, #6]
 800731a:	461a      	mov	r2, r3
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 ffaa 	bl	8008278 <UART_Start_Receive_IT>
 8007324:	4603      	mov	r3, r0
 8007326:	e000      	b.n	800732a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007328:	2302      	movs	r3, #2
  }
}
 800732a:	4618      	mov	r0, r3
 800732c:	3728      	adds	r7, #40	@ 0x28
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	40008000 	.word	0x40008000

08007338 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b0ba      	sub	sp, #232	@ 0xe8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800735e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007362:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007366:	4013      	ands	r3, r2
 8007368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800736c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d115      	bne.n	80073a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00f      	beq.n	80073a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 82ca 	beq.w	800792a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
      }
      return;
 800739e:	e2c4      	b.n	800792a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80073a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8117 	beq.w	80075d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80073b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80073ba:	4b85      	ldr	r3, [pc, #532]	@ (80075d0 <HAL_UART_IRQHandler+0x298>)
 80073bc:	4013      	ands	r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 810a 	beq.w	80075d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d011      	beq.n	80073f4 <HAL_UART_IRQHandler+0xbc>
 80073d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2201      	movs	r2, #1
 80073e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ea:	f043 0201 	orr.w	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d011      	beq.n	8007424 <HAL_UART_IRQHandler+0xec>
 8007400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2202      	movs	r2, #2
 8007412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800741a:	f043 0204 	orr.w	r2, r3, #4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d011      	beq.n	8007454 <HAL_UART_IRQHandler+0x11c>
 8007430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2204      	movs	r2, #4
 8007442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800744a:	f043 0202 	orr.w	r2, r3, #2
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d017      	beq.n	8007490 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800746c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007470:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2208      	movs	r2, #8
 800747e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007486:	f043 0208 	orr.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007498:	2b00      	cmp	r3, #0
 800749a:	d012      	beq.n	80074c2 <HAL_UART_IRQHandler+0x18a>
 800749c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00c      	beq.n	80074c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8230 	beq.w	800792e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80074ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00d      	beq.n	80074f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750a:	2b40      	cmp	r3, #64	@ 0x40
 800750c:	d005      	beq.n	800751a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800750e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007512:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007516:	2b00      	cmp	r3, #0
 8007518:	d04f      	beq.n	80075ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 ff72 	bl	8008404 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752a:	2b40      	cmp	r3, #64	@ 0x40
 800752c:	d141      	bne.n	80075b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800754c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800755a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800755e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1d9      	bne.n	800752e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800757e:	2b00      	cmp	r3, #0
 8007580:	d013      	beq.n	80075aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007586:	4a13      	ldr	r2, [pc, #76]	@ (80075d4 <HAL_UART_IRQHandler+0x29c>)
 8007588:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800758e:	4618      	mov	r0, r3
 8007590:	f7fc f9d0 	bl	8003934 <HAL_DMA_Abort_IT>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d017      	beq.n	80075ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	e00f      	b.n	80075ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f9de 	bl	800796c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b0:	e00b      	b.n	80075ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9da 	bl	800796c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	e007      	b.n	80075ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9d6 	bl	800796c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80075c8:	e1b1      	b.n	800792e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ca:	bf00      	nop
    return;
 80075cc:	e1af      	b.n	800792e <HAL_UART_IRQHandler+0x5f6>
 80075ce:	bf00      	nop
 80075d0:	04000120 	.word	0x04000120
 80075d4:	080084cd 	.word	0x080084cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075dc:	2b01      	cmp	r3, #1
 80075de:	f040 816a 	bne.w	80078b6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8163 	beq.w	80078b6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 815c 	beq.w	80078b6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2210      	movs	r2, #16
 8007604:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	2b40      	cmp	r3, #64	@ 0x40
 8007612:	f040 80d4 	bne.w	80077be <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007622:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 80ad 	beq.w	8007786 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007636:	429a      	cmp	r2, r3
 8007638:	f080 80a5 	bcs.w	8007786 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007642:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	f040 8086 	bne.w	8007764 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800766c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007686:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800768e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800769a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1da      	bne.n	8007658 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076b4:	f023 0301 	bic.w	r3, r3, #1
 80076b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e1      	bne.n	80076a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007702:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007704:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e3      	bne.n	80076de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007734:	f023 0310 	bic.w	r3, r3, #16
 8007738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007746:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007748:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800774c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e4      	bne.n	8007724 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800775e:	4618      	mov	r0, r3
 8007760:	f7fc f8aa 	bl	80038b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007776:	b29b      	uxth	r3, r3
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	b29b      	uxth	r3, r3
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f8fe 	bl	8007980 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007784:	e0d5      	b.n	8007932 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800778c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007790:	429a      	cmp	r2, r3
 8007792:	f040 80ce 	bne.w	8007932 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	f040 80c5 	bne.w	8007932 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f8e2 	bl	8007980 <HAL_UARTEx_RxEventCallback>
      return;
 80077bc:	e0b9      	b.n	8007932 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 80ab 	beq.w	8007936 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80077e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80a6 	beq.w	8007936 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800780c:	647b      	str	r3, [r7, #68]	@ 0x44
 800780e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800781a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e4      	bne.n	80077ea <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	623b      	str	r3, [r7, #32]
   return(result);
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	f023 0301 	bic.w	r3, r3, #1
 8007836:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007844:	633a      	str	r2, [r7, #48]	@ 0x30
 8007846:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800784a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e3      	bne.n	8007820 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	60fb      	str	r3, [r7, #12]
   return(result);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f023 0310 	bic.w	r3, r3, #16
 8007880:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800788e:	61fb      	str	r3, [r7, #28]
 8007890:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	69b9      	ldr	r1, [r7, #24]
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	617b      	str	r3, [r7, #20]
   return(result);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e4      	bne.n	800786c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2202      	movs	r2, #2
 80078a6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f866 	bl	8007980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078b4:	e03f      	b.n	8007936 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00e      	beq.n	80078e0 <HAL_UART_IRQHandler+0x5a8>
 80078c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d008      	beq.n	80078e0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80078d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fff3 	bl	80088c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078de:	e02d      	b.n	800793c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00e      	beq.n	800790a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01c      	beq.n	800793a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
    }
    return;
 8007908:	e017      	b.n	800793a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d012      	beq.n	800793c <HAL_UART_IRQHandler+0x604>
 8007916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800791a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00c      	beq.n	800793c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fde8 	bl	80084f8 <UART_EndTransmit_IT>
    return;
 8007928:	e008      	b.n	800793c <HAL_UART_IRQHandler+0x604>
      return;
 800792a:	bf00      	nop
 800792c:	e006      	b.n	800793c <HAL_UART_IRQHandler+0x604>
    return;
 800792e:	bf00      	nop
 8007930:	e004      	b.n	800793c <HAL_UART_IRQHandler+0x604>
      return;
 8007932:	bf00      	nop
 8007934:	e002      	b.n	800793c <HAL_UART_IRQHandler+0x604>
      return;
 8007936:	bf00      	nop
 8007938:	e000      	b.n	800793c <HAL_UART_IRQHandler+0x604>
    return;
 800793a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800793c:	37e8      	adds	r7, #232	@ 0xe8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop

08007944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800799c:	b08a      	sub	sp, #40	@ 0x28
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	431a      	orrs	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	4313      	orrs	r3, r2
 80079be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4ba4      	ldr	r3, [pc, #656]	@ (8007c58 <UART_SetConfig+0x2c0>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079d0:	430b      	orrs	r3, r1
 80079d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a99      	ldr	r2, [pc, #612]	@ (8007c5c <UART_SetConfig+0x2c4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a00:	4313      	orrs	r3, r2
 8007a02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a14:	430a      	orrs	r2, r1
 8007a16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a90      	ldr	r2, [pc, #576]	@ (8007c60 <UART_SetConfig+0x2c8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d126      	bne.n	8007a70 <UART_SetConfig+0xd8>
 8007a22:	4b90      	ldr	r3, [pc, #576]	@ (8007c64 <UART_SetConfig+0x2cc>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a28:	f003 0303 	and.w	r3, r3, #3
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d81b      	bhi.n	8007a68 <UART_SetConfig+0xd0>
 8007a30:	a201      	add	r2, pc, #4	@ (adr r2, 8007a38 <UART_SetConfig+0xa0>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007a49 	.word	0x08007a49
 8007a3c:	08007a59 	.word	0x08007a59
 8007a40:	08007a51 	.word	0x08007a51
 8007a44:	08007a61 	.word	0x08007a61
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4e:	e116      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007a50:	2302      	movs	r3, #2
 8007a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a56:	e112      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5e:	e10e      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007a60:	2308      	movs	r3, #8
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a66:	e10a      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6e:	e106      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a7c      	ldr	r2, [pc, #496]	@ (8007c68 <UART_SetConfig+0x2d0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d138      	bne.n	8007aec <UART_SetConfig+0x154>
 8007a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8007c64 <UART_SetConfig+0x2cc>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a80:	f003 030c 	and.w	r3, r3, #12
 8007a84:	2b0c      	cmp	r3, #12
 8007a86:	d82d      	bhi.n	8007ae4 <UART_SetConfig+0x14c>
 8007a88:	a201      	add	r2, pc, #4	@ (adr r2, 8007a90 <UART_SetConfig+0xf8>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007ac5 	.word	0x08007ac5
 8007a94:	08007ae5 	.word	0x08007ae5
 8007a98:	08007ae5 	.word	0x08007ae5
 8007a9c:	08007ae5 	.word	0x08007ae5
 8007aa0:	08007ad5 	.word	0x08007ad5
 8007aa4:	08007ae5 	.word	0x08007ae5
 8007aa8:	08007ae5 	.word	0x08007ae5
 8007aac:	08007ae5 	.word	0x08007ae5
 8007ab0:	08007acd 	.word	0x08007acd
 8007ab4:	08007ae5 	.word	0x08007ae5
 8007ab8:	08007ae5 	.word	0x08007ae5
 8007abc:	08007ae5 	.word	0x08007ae5
 8007ac0:	08007add 	.word	0x08007add
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aca:	e0d8      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007acc:	2302      	movs	r3, #2
 8007ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad2:	e0d4      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ada:	e0d0      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007adc:	2308      	movs	r3, #8
 8007ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ae2:	e0cc      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aea:	e0c8      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a5e      	ldr	r2, [pc, #376]	@ (8007c6c <UART_SetConfig+0x2d4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d125      	bne.n	8007b42 <UART_SetConfig+0x1aa>
 8007af6:	4b5b      	ldr	r3, [pc, #364]	@ (8007c64 <UART_SetConfig+0x2cc>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007afc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b00:	2b30      	cmp	r3, #48	@ 0x30
 8007b02:	d016      	beq.n	8007b32 <UART_SetConfig+0x19a>
 8007b04:	2b30      	cmp	r3, #48	@ 0x30
 8007b06:	d818      	bhi.n	8007b3a <UART_SetConfig+0x1a2>
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	d00a      	beq.n	8007b22 <UART_SetConfig+0x18a>
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d814      	bhi.n	8007b3a <UART_SetConfig+0x1a2>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <UART_SetConfig+0x182>
 8007b14:	2b10      	cmp	r3, #16
 8007b16:	d008      	beq.n	8007b2a <UART_SetConfig+0x192>
 8007b18:	e00f      	b.n	8007b3a <UART_SetConfig+0x1a2>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b20:	e0ad      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b22:	2302      	movs	r3, #2
 8007b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b28:	e0a9      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b2a:	2304      	movs	r3, #4
 8007b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b30:	e0a5      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b32:	2308      	movs	r3, #8
 8007b34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b38:	e0a1      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b3a:	2310      	movs	r3, #16
 8007b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b40:	e09d      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a4a      	ldr	r2, [pc, #296]	@ (8007c70 <UART_SetConfig+0x2d8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d125      	bne.n	8007b98 <UART_SetConfig+0x200>
 8007b4c:	4b45      	ldr	r3, [pc, #276]	@ (8007c64 <UART_SetConfig+0x2cc>)
 8007b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b56:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b58:	d016      	beq.n	8007b88 <UART_SetConfig+0x1f0>
 8007b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b5c:	d818      	bhi.n	8007b90 <UART_SetConfig+0x1f8>
 8007b5e:	2b80      	cmp	r3, #128	@ 0x80
 8007b60:	d00a      	beq.n	8007b78 <UART_SetConfig+0x1e0>
 8007b62:	2b80      	cmp	r3, #128	@ 0x80
 8007b64:	d814      	bhi.n	8007b90 <UART_SetConfig+0x1f8>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <UART_SetConfig+0x1d8>
 8007b6a:	2b40      	cmp	r3, #64	@ 0x40
 8007b6c:	d008      	beq.n	8007b80 <UART_SetConfig+0x1e8>
 8007b6e:	e00f      	b.n	8007b90 <UART_SetConfig+0x1f8>
 8007b70:	2300      	movs	r3, #0
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b76:	e082      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b7e:	e07e      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b86:	e07a      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b8e:	e076      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b96:	e072      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a35      	ldr	r2, [pc, #212]	@ (8007c74 <UART_SetConfig+0x2dc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d12a      	bne.n	8007bf8 <UART_SetConfig+0x260>
 8007ba2:	4b30      	ldr	r3, [pc, #192]	@ (8007c64 <UART_SetConfig+0x2cc>)
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bb0:	d01a      	beq.n	8007be8 <UART_SetConfig+0x250>
 8007bb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bb6:	d81b      	bhi.n	8007bf0 <UART_SetConfig+0x258>
 8007bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bbc:	d00c      	beq.n	8007bd8 <UART_SetConfig+0x240>
 8007bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bc2:	d815      	bhi.n	8007bf0 <UART_SetConfig+0x258>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <UART_SetConfig+0x238>
 8007bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bcc:	d008      	beq.n	8007be0 <UART_SetConfig+0x248>
 8007bce:	e00f      	b.n	8007bf0 <UART_SetConfig+0x258>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bd6:	e052      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bde:	e04e      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007be0:	2304      	movs	r3, #4
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007be6:	e04a      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bee:	e046      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bf6:	e042      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a17      	ldr	r2, [pc, #92]	@ (8007c5c <UART_SetConfig+0x2c4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d13a      	bne.n	8007c78 <UART_SetConfig+0x2e0>
 8007c02:	4b18      	ldr	r3, [pc, #96]	@ (8007c64 <UART_SetConfig+0x2cc>)
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c10:	d01a      	beq.n	8007c48 <UART_SetConfig+0x2b0>
 8007c12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c16:	d81b      	bhi.n	8007c50 <UART_SetConfig+0x2b8>
 8007c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c1c:	d00c      	beq.n	8007c38 <UART_SetConfig+0x2a0>
 8007c1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c22:	d815      	bhi.n	8007c50 <UART_SetConfig+0x2b8>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <UART_SetConfig+0x298>
 8007c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c2c:	d008      	beq.n	8007c40 <UART_SetConfig+0x2a8>
 8007c2e:	e00f      	b.n	8007c50 <UART_SetConfig+0x2b8>
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c36:	e022      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c3e:	e01e      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007c40:	2304      	movs	r3, #4
 8007c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c46:	e01a      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007c48:	2308      	movs	r3, #8
 8007c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c4e:	e016      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007c50:	2310      	movs	r3, #16
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c56:	e012      	b.n	8007c7e <UART_SetConfig+0x2e6>
 8007c58:	efff69f3 	.word	0xefff69f3
 8007c5c:	40008000 	.word	0x40008000
 8007c60:	40013800 	.word	0x40013800
 8007c64:	40021000 	.word	0x40021000
 8007c68:	40004400 	.word	0x40004400
 8007c6c:	40004800 	.word	0x40004800
 8007c70:	40004c00 	.word	0x40004c00
 8007c74:	40005000 	.word	0x40005000
 8007c78:	2310      	movs	r3, #16
 8007c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a9f      	ldr	r2, [pc, #636]	@ (8007f00 <UART_SetConfig+0x568>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d17a      	bne.n	8007d7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d824      	bhi.n	8007cda <UART_SetConfig+0x342>
 8007c90:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <UART_SetConfig+0x300>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cdb 	.word	0x08007cdb
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007cdb 	.word	0x08007cdb
 8007ca8:	08007ccb 	.word	0x08007ccb
 8007cac:	08007cdb 	.word	0x08007cdb
 8007cb0:	08007cdb 	.word	0x08007cdb
 8007cb4:	08007cdb 	.word	0x08007cdb
 8007cb8:	08007cd3 	.word	0x08007cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cbc:	f7fd fd86 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8007cc0:	61f8      	str	r0, [r7, #28]
        break;
 8007cc2:	e010      	b.n	8007ce6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8007f04 <UART_SetConfig+0x56c>)
 8007cc6:	61fb      	str	r3, [r7, #28]
        break;
 8007cc8:	e00d      	b.n	8007ce6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cca:	f7fd fce7 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8007cce:	61f8      	str	r0, [r7, #28]
        break;
 8007cd0:	e009      	b.n	8007ce6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cd6:	61fb      	str	r3, [r7, #28]
        break;
 8007cd8:	e005      	b.n	8007ce6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ce4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 80fb 	beq.w	8007ee4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	4413      	add	r3, r2
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d305      	bcc.n	8007d0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d04:	69fa      	ldr	r2, [r7, #28]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d903      	bls.n	8007d12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d10:	e0e8      	b.n	8007ee4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	2200      	movs	r2, #0
 8007d16:	461c      	mov	r4, r3
 8007d18:	4615      	mov	r5, r2
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	022b      	lsls	r3, r5, #8
 8007d24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007d28:	0222      	lsls	r2, r4, #8
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	6849      	ldr	r1, [r1, #4]
 8007d2e:	0849      	lsrs	r1, r1, #1
 8007d30:	2000      	movs	r0, #0
 8007d32:	4688      	mov	r8, r1
 8007d34:	4681      	mov	r9, r0
 8007d36:	eb12 0a08 	adds.w	sl, r2, r8
 8007d3a:	eb43 0b09 	adc.w	fp, r3, r9
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	603b      	str	r3, [r7, #0]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	4659      	mov	r1, fp
 8007d50:	f7f8 ff9a 	bl	8000c88 <__aeabi_uldivmod>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4613      	mov	r3, r2
 8007d5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d62:	d308      	bcc.n	8007d76 <UART_SetConfig+0x3de>
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d6a:	d204      	bcs.n	8007d76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	60da      	str	r2, [r3, #12]
 8007d74:	e0b6      	b.n	8007ee4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d7c:	e0b2      	b.n	8007ee4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d86:	d15e      	bne.n	8007e46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007d88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d828      	bhi.n	8007de2 <UART_SetConfig+0x44a>
 8007d90:	a201      	add	r2, pc, #4	@ (adr r2, 8007d98 <UART_SetConfig+0x400>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007dbd 	.word	0x08007dbd
 8007d9c:	08007dc5 	.word	0x08007dc5
 8007da0:	08007dcd 	.word	0x08007dcd
 8007da4:	08007de3 	.word	0x08007de3
 8007da8:	08007dd3 	.word	0x08007dd3
 8007dac:	08007de3 	.word	0x08007de3
 8007db0:	08007de3 	.word	0x08007de3
 8007db4:	08007de3 	.word	0x08007de3
 8007db8:	08007ddb 	.word	0x08007ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dbc:	f7fd fd06 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8007dc0:	61f8      	str	r0, [r7, #28]
        break;
 8007dc2:	e014      	b.n	8007dee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dc4:	f7fd fd18 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 8007dc8:	61f8      	str	r0, [r7, #28]
        break;
 8007dca:	e010      	b.n	8007dee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8007f04 <UART_SetConfig+0x56c>)
 8007dce:	61fb      	str	r3, [r7, #28]
        break;
 8007dd0:	e00d      	b.n	8007dee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dd2:	f7fd fc63 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8007dd6:	61f8      	str	r0, [r7, #28]
        break;
 8007dd8:	e009      	b.n	8007dee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dde:	61fb      	str	r3, [r7, #28]
        break;
 8007de0:	e005      	b.n	8007dee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007dec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d077      	beq.n	8007ee4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	005a      	lsls	r2, r3, #1
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	085b      	lsrs	r3, r3, #1
 8007dfe:	441a      	add	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	2b0f      	cmp	r3, #15
 8007e0e:	d916      	bls.n	8007e3e <UART_SetConfig+0x4a6>
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e16:	d212      	bcs.n	8007e3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f023 030f 	bic.w	r3, r3, #15
 8007e20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	085b      	lsrs	r3, r3, #1
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	8afb      	ldrh	r3, [r7, #22]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	8afa      	ldrh	r2, [r7, #22]
 8007e3a:	60da      	str	r2, [r3, #12]
 8007e3c:	e052      	b.n	8007ee4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e44:	e04e      	b.n	8007ee4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d827      	bhi.n	8007e9e <UART_SetConfig+0x506>
 8007e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <UART_SetConfig+0x4bc>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e79 	.word	0x08007e79
 8007e58:	08007e81 	.word	0x08007e81
 8007e5c:	08007e89 	.word	0x08007e89
 8007e60:	08007e9f 	.word	0x08007e9f
 8007e64:	08007e8f 	.word	0x08007e8f
 8007e68:	08007e9f 	.word	0x08007e9f
 8007e6c:	08007e9f 	.word	0x08007e9f
 8007e70:	08007e9f 	.word	0x08007e9f
 8007e74:	08007e97 	.word	0x08007e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e78:	f7fd fca8 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8007e7c:	61f8      	str	r0, [r7, #28]
        break;
 8007e7e:	e014      	b.n	8007eaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e80:	f7fd fcba 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 8007e84:	61f8      	str	r0, [r7, #28]
        break;
 8007e86:	e010      	b.n	8007eaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e88:	4b1e      	ldr	r3, [pc, #120]	@ (8007f04 <UART_SetConfig+0x56c>)
 8007e8a:	61fb      	str	r3, [r7, #28]
        break;
 8007e8c:	e00d      	b.n	8007eaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e8e:	f7fd fc05 	bl	800569c <HAL_RCC_GetSysClockFreq>
 8007e92:	61f8      	str	r0, [r7, #28]
        break;
 8007e94:	e009      	b.n	8007eaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e9a:	61fb      	str	r3, [r7, #28]
        break;
 8007e9c:	e005      	b.n	8007eaa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ea8:	bf00      	nop
    }

    if (pclk != 0U)
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d019      	beq.n	8007ee4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	085a      	lsrs	r2, r3, #1
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	441a      	add	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	d909      	bls.n	8007ede <UART_SetConfig+0x546>
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed0:	d205      	bcs.n	8007ede <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60da      	str	r2, [r3, #12]
 8007edc:	e002      	b.n	8007ee4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007ef0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3728      	adds	r7, #40	@ 0x28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007efe:	bf00      	nop
 8007f00:	40008000 	.word	0x40008000
 8007f04:	00f42400 	.word	0x00f42400

08007f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9c:	f003 0310 	and.w	r3, r3, #16
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	f003 0320 	and.w	r3, r3, #32
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01a      	beq.n	800801e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008006:	d10a      	bne.n	800801e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	605a      	str	r2, [r3, #4]
  }
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b098      	sub	sp, #96	@ 0x60
 8008050:	af02      	add	r7, sp, #8
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800805c:	f7fa fb9a 	bl	8002794 <HAL_GetTick>
 8008060:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b08      	cmp	r3, #8
 800806e:	d12e      	bne.n	80080ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008070:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008078:	2200      	movs	r2, #0
 800807a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f88c 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d021      	beq.n	80080ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800809a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800809e:	653b      	str	r3, [r7, #80]	@ 0x50
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e6      	bne.n	800808a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e062      	b.n	8008194 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d149      	bne.n	8008170 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080e4:	2200      	movs	r2, #0
 80080e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f856 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d03c      	beq.n	8008170 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	623b      	str	r3, [r7, #32]
   return(result);
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800810a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008114:	633b      	str	r3, [r7, #48]	@ 0x30
 8008116:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800811a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e6      	bne.n	80080f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3308      	adds	r3, #8
 800812e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	60fb      	str	r3, [r7, #12]
   return(result);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0301 	bic.w	r3, r3, #1
 800813e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3308      	adds	r3, #8
 8008146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008148:	61fa      	str	r2, [r7, #28]
 800814a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	69b9      	ldr	r1, [r7, #24]
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	617b      	str	r3, [r7, #20]
   return(result);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e5      	bne.n	8008128 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e011      	b.n	8008194 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3758      	adds	r7, #88	@ 0x58
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	4613      	mov	r3, r2
 80081aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ac:	e04f      	b.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b4:	d04b      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b6:	f7fa faed 	bl	8002794 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <UART_WaitOnFlagUntilTimeout+0x30>
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e04e      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d037      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b80      	cmp	r3, #128	@ 0x80
 80081e2:	d034      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b40      	cmp	r3, #64	@ 0x40
 80081e8:	d031      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	d110      	bne.n	800821a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2208      	movs	r2, #8
 80081fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f8ff 	bl	8008404 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2208      	movs	r2, #8
 800820a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e029      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008228:	d111      	bne.n	800824e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f8e5 	bl	8008404 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e00f      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	429a      	cmp	r2, r3
 800825c:	bf0c      	ite	eq
 800825e:	2301      	moveq	r3, #1
 8008260:	2300      	movne	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	429a      	cmp	r2, r3
 800826a:	d0a0      	beq.n	80081ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008278:	b480      	push	{r7}
 800827a:	b097      	sub	sp, #92	@ 0x5c
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	88fa      	ldrh	r2, [r7, #6]
 8008298:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082aa:	d10e      	bne.n	80082ca <UART_Start_Receive_IT+0x52>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d105      	bne.n	80082c0 <UART_Start_Receive_IT+0x48>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80082ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082be:	e02d      	b.n	800831c <UART_Start_Receive_IT+0xa4>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	22ff      	movs	r2, #255	@ 0xff
 80082c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082c8:	e028      	b.n	800831c <UART_Start_Receive_IT+0xa4>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10d      	bne.n	80082ee <UART_Start_Receive_IT+0x76>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d104      	bne.n	80082e4 <UART_Start_Receive_IT+0x6c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	22ff      	movs	r2, #255	@ 0xff
 80082de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082e2:	e01b      	b.n	800831c <UART_Start_Receive_IT+0xa4>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	227f      	movs	r2, #127	@ 0x7f
 80082e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082ec:	e016      	b.n	800831c <UART_Start_Receive_IT+0xa4>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082f6:	d10d      	bne.n	8008314 <UART_Start_Receive_IT+0x9c>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <UART_Start_Receive_IT+0x92>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	227f      	movs	r2, #127	@ 0x7f
 8008304:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008308:	e008      	b.n	800831c <UART_Start_Receive_IT+0xa4>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	223f      	movs	r2, #63	@ 0x3f
 800830e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008312:	e003      	b.n	800831c <UART_Start_Receive_IT+0xa4>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2222      	movs	r2, #34	@ 0x22
 8008328:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800833c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	657b      	str	r3, [r7, #84]	@ 0x54
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800834c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800834e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800835a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008368:	d107      	bne.n	800837a <UART_Start_Receive_IT+0x102>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d103      	bne.n	800837a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4a21      	ldr	r2, [pc, #132]	@ (80083fc <UART_Start_Receive_IT+0x184>)
 8008376:	669a      	str	r2, [r3, #104]	@ 0x68
 8008378:	e002      	b.n	8008380 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a20      	ldr	r2, [pc, #128]	@ (8008400 <UART_Start_Receive_IT+0x188>)
 800837e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d019      	beq.n	80083bc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008398:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800839c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e6      	bne.n	8008388 <UART_Start_Receive_IT+0x110>
 80083ba:	e018      	b.n	80083ee <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f043 0320 	orr.w	r3, r3, #32
 80083d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083da:	623b      	str	r3, [r7, #32]
 80083dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	69f9      	ldr	r1, [r7, #28]
 80083e0:	6a3a      	ldr	r2, [r7, #32]
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e6      	bne.n	80083bc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	375c      	adds	r7, #92	@ 0x5c
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	08008709 	.word	0x08008709
 8008400:	0800854d 	.word	0x0800854d

08008404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008404:	b480      	push	{r7}
 8008406:	b095      	sub	sp, #84	@ 0x54
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842a:	643b      	str	r3, [r7, #64]	@ 0x40
 800842c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008430:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e6      	bne.n	800840c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3308      	adds	r3, #8
 8008444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	61fb      	str	r3, [r7, #28]
   return(result);
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	f023 0301 	bic.w	r3, r3, #1
 8008454:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800845e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800846c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e5      	bne.n	800843e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008476:	2b01      	cmp	r3, #1
 8008478:	d118      	bne.n	80084ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	e853 3f00 	ldrex	r3, [r3]
 8008486:	60bb      	str	r3, [r7, #8]
   return(result);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f023 0310 	bic.w	r3, r3, #16
 800848e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	6979      	ldr	r1, [r7, #20]
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	613b      	str	r3, [r7, #16]
   return(result);
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e6      	bne.n	800847a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80084c0:	bf00      	nop
 80084c2:	3754      	adds	r7, #84	@ 0x54
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f7ff fa3e 	bl	800796c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084f0:	bf00      	nop
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	60bb      	str	r3, [r7, #8]
   return(result);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008514:	61fb      	str	r3, [r7, #28]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	61bb      	str	r3, [r7, #24]
 8008520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	613b      	str	r3, [r7, #16]
   return(result);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e6      	bne.n	8008500 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff fa00 	bl	8007944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008544:	bf00      	nop
 8008546:	3720      	adds	r7, #32
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b09c      	sub	sp, #112	@ 0x70
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800855a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008564:	2b22      	cmp	r3, #34	@ 0x22
 8008566:	f040 80be 	bne.w	80086e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008570:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008574:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008578:	b2d9      	uxtb	r1, r3
 800857a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800857e:	b2da      	uxtb	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008584:	400a      	ands	r2, r1
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800859a:	b29b      	uxth	r3, r3
 800859c:	3b01      	subs	r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 80a3 	bne.w	80086fa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e6      	bne.n	80085b4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3308      	adds	r3, #8
 80085ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f8:	f023 0301 	bic.w	r3, r3, #1
 80085fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008606:	647a      	str	r2, [r7, #68]	@ 0x44
 8008608:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800860c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e5      	bne.n	80085e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a34      	ldr	r2, [pc, #208]	@ (8008704 <UART_RxISR_8BIT+0x1b8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d01f      	beq.n	8008678 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d018      	beq.n	8008678 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	623b      	str	r3, [r7, #32]
   return(result);
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800865a:	663b      	str	r3, [r7, #96]	@ 0x60
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008664:	633b      	str	r3, [r7, #48]	@ 0x30
 8008666:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800866a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e6      	bne.n	8008646 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800867c:	2b01      	cmp	r3, #1
 800867e:	d12e      	bne.n	80086de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	60fb      	str	r3, [r7, #12]
   return(result);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0310 	bic.w	r3, r3, #16
 800869a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	69b9      	ldr	r1, [r7, #24]
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	617b      	str	r3, [r7, #20]
   return(result);
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e6      	bne.n	8008686 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f003 0310 	and.w	r3, r3, #16
 80086c2:	2b10      	cmp	r3, #16
 80086c4:	d103      	bne.n	80086ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2210      	movs	r2, #16
 80086cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff f952 	bl	8007980 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086dc:	e00d      	b.n	80086fa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff f93a 	bl	8007958 <HAL_UART_RxCpltCallback>
}
 80086e4:	e009      	b.n	80086fa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	8b1b      	ldrh	r3, [r3, #24]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 0208 	orr.w	r2, r2, #8
 80086f6:	b292      	uxth	r2, r2
 80086f8:	831a      	strh	r2, [r3, #24]
}
 80086fa:	bf00      	nop
 80086fc:	3770      	adds	r7, #112	@ 0x70
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	40008000 	.word	0x40008000

08008708 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b09c      	sub	sp, #112	@ 0x70
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008716:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008720:	2b22      	cmp	r3, #34	@ 0x22
 8008722:	f040 80be 	bne.w	80088a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800872c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008734:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008736:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800873a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800873e:	4013      	ands	r3, r2
 8008740:	b29a      	uxth	r2, r3
 8008742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008744:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874a:	1c9a      	adds	r2, r3, #2
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	b29a      	uxth	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008768:	b29b      	uxth	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	f040 80a3 	bne.w	80088b6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800877e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008784:	667b      	str	r3, [r7, #100]	@ 0x64
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800878e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008790:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008794:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800879c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e6      	bne.n	8008770 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80087c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e5      	bne.n	80087a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a34      	ldr	r2, [pc, #208]	@ (80088c0 <UART_RxISR_16BIT+0x1b8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d01f      	beq.n	8008834 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d018      	beq.n	8008834 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008822:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e6      	bne.n	8008802 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008838:	2b01      	cmp	r3, #1
 800883a:	d12e      	bne.n	800889a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f023 0310 	bic.w	r3, r3, #16
 8008856:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	461a      	mov	r2, r3
 800885e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6979      	ldr	r1, [r7, #20]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	613b      	str	r3, [r7, #16]
   return(result);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e6      	bne.n	8008842 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	2b10      	cmp	r3, #16
 8008880:	d103      	bne.n	800888a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2210      	movs	r2, #16
 8008888:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff f874 	bl	8007980 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008898:	e00d      	b.n	80088b6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff f85c 	bl	8007958 <HAL_UART_RxCpltCallback>
}
 80088a0:	e009      	b.n	80088b6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	8b1b      	ldrh	r3, [r3, #24]
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0208 	orr.w	r2, r2, #8
 80088b2:	b292      	uxth	r2, r2
 80088b4:	831a      	strh	r2, [r3, #24]
}
 80088b6:	bf00      	nop
 80088b8:	3770      	adds	r7, #112	@ 0x70
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	40008000 	.word	0x40008000

080088c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80088e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088ea:	2b84      	cmp	r3, #132	@ 0x84
 80088ec:	d005      	beq.n	80088fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80088ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	3303      	adds	r3, #3
 80088f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80088fa:	68fb      	ldr	r3, [r7, #12]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800890e:	f3ef 8305 	mrs	r3, IPSR
 8008912:	607b      	str	r3, [r7, #4]
  return(result);
 8008914:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008916:	2b00      	cmp	r3, #0
 8008918:	bf14      	ite	ne
 800891a:	2301      	movne	r3, #1
 800891c:	2300      	moveq	r3, #0
 800891e:	b2db      	uxtb	r3, r3
}
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008930:	f001 f81c 	bl	800996c <vTaskStartScheduler>
  
  return osOK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	bd80      	pop	{r7, pc}

0800893a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800893a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893c:	b089      	sub	sp, #36	@ 0x24
 800893e:	af04      	add	r7, sp, #16
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d020      	beq.n	800898e <osThreadCreate+0x54>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01c      	beq.n	800898e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685c      	ldr	r4, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691e      	ldr	r6, [r3, #16]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff ffb6 	bl	80088d8 <makeFreeRtosPriority>
 800896c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008976:	9202      	str	r2, [sp, #8]
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	9100      	str	r1, [sp, #0]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	4632      	mov	r2, r6
 8008980:	4629      	mov	r1, r5
 8008982:	4620      	mov	r0, r4
 8008984:	f000 fe0d 	bl	80095a2 <xTaskCreateStatic>
 8008988:	4603      	mov	r3, r0
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e01c      	b.n	80089c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685c      	ldr	r4, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800899a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7ff ff98 	bl	80088d8 <makeFreeRtosPriority>
 80089a8:	4602      	mov	r2, r0
 80089aa:	f107 030c 	add.w	r3, r7, #12
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	9200      	str	r2, [sp, #0]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	4632      	mov	r2, r6
 80089b6:	4629      	mov	r1, r5
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fe52 	bl	8009662 <xTaskCreate>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d001      	beq.n	80089c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e000      	b.n	80089ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80089c8:	68fb      	ldr	r3, [r7, #12]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <osDelay+0x16>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	e000      	b.n	80089ea <osDelay+0x18>
 80089e8:	2301      	movs	r3, #1
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 ff88 	bl	8009900 <vTaskDelay>
  
  return osOK;
 80089f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8008a0e:	f7ff ff7b 	bl	8008908 <inHandlerMode>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01c      	beq.n	8008a52 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	f107 0208 	add.w	r2, r7, #8
 8008a1e:	f107 030c 	add.w	r3, r7, #12
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	4613      	mov	r3, r2
 8008a26:	2201      	movs	r2, #1
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 fd97 	bl	800a55c <xTaskGenericNotifyFromISR>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d002      	beq.n	8008a3a <osSignalSet+0x3e>
      return 0x80000000;
 8008a34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a38:	e019      	b.n	8008a6e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d015      	beq.n	8008a6c <osSignalSet+0x70>
 8008a40:	4b0d      	ldr	r3, [pc, #52]	@ (8008a78 <osSignalSet+0x7c>)
 8008a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	e00c      	b.n	8008a6c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	f107 0308 	add.w	r3, r7, #8
 8008a58:	2201      	movs	r2, #1
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f001 fcbc 	bl	800a3d8 <xTaskGenericNotify>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d002      	beq.n	8008a6c <osSignalSet+0x70>
    return 0x80000000;
 8008a66:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a6a:	e000      	b.n	8008a6e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008a7c:	b590      	push	{r4, r7, lr}
 8008a7e:	b089      	sub	sp, #36	@ 0x24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8008a88:	2300      	movs	r3, #0
 8008a8a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a96:	d103      	bne.n	8008aa0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	e009      	b.n	8008ab4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d006      	beq.n	8008ab4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <osSignalWait+0x38>
      ticks = 1;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8008ab4:	f7ff ff28 	bl	8008908 <inHandlerMode>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8008abe:	2382      	movs	r3, #130	@ 0x82
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	e01b      	b.n	8008afc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	f107 0310 	add.w	r3, r7, #16
 8008aca:	1d1a      	adds	r2, r3, #4
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	2000      	movs	r0, #0
 8008ad0:	f001 fc22 	bl	800a318 <xTaskNotifyWait>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d008      	beq.n	8008aec <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <osSignalWait+0x6a>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	e00a      	b.n	8008afc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8008ae6:	2340      	movs	r3, #64	@ 0x40
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	e007      	b.n	8008afc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da02      	bge.n	8008af8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8008af2:	2386      	movs	r3, #134	@ 0x86
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	e001      	b.n	8008afc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8008af8:	2308      	movs	r3, #8
 8008afa:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	461c      	mov	r4, r3
 8008b00:	f107 0310 	add.w	r3, r7, #16
 8008b04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	3724      	adds	r7, #36	@ 0x24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd90      	pop	{r4, r7, pc}

08008b14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f103 0208 	add.w	r2, r3, #8
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f103 0208 	add.w	r2, r3, #8
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f103 0208 	add.w	r2, r3, #8
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b085      	sub	sp, #20
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
}
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d103      	bne.n	8008bd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e00c      	b.n	8008bf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	e002      	b.n	8008be4 <vListInsert+0x2e>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d2f6      	bcs.n	8008bde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	601a      	str	r2, [r3, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6892      	ldr	r2, [r2, #8]
 8008c3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	6852      	ldr	r2, [r2, #4]
 8008c48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d103      	bne.n	8008c5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ca8:	f001 fefe 	bl	800aaa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb4:	68f9      	ldr	r1, [r7, #12]
 8008cb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	441a      	add	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	68f9      	ldr	r1, [r7, #12]
 8008cdc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cde:	fb01 f303 	mul.w	r3, r1, r3
 8008ce2:	441a      	add	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	22ff      	movs	r2, #255	@ 0xff
 8008cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	22ff      	movs	r2, #255	@ 0xff
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d114      	bne.n	8008d28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d01a      	beq.n	8008d3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3310      	adds	r3, #16
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 f888 	bl	8009e20 <xTaskRemoveFromEventList>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d012      	beq.n	8008d3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d16:	4b0d      	ldr	r3, [pc, #52]	@ (8008d4c <xQueueGenericReset+0xd0>)
 8008d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	e009      	b.n	8008d3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3310      	adds	r3, #16
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fef1 	bl	8008b14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3324      	adds	r3, #36	@ 0x24
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7ff feec 	bl	8008b14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d3c:	f001 fee6 	bl	800ab0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d40:	2301      	movs	r3, #1
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	@ 0x28
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10b      	bne.n	8008d7c <xQueueGenericCreate+0x2c>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	613b      	str	r3, [r7, #16]
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	fb02 f303 	mul.w	r3, r2, r3
 8008d84:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	3348      	adds	r3, #72	@ 0x48
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 ffae 	bl	800acec <pvPortMalloc>
 8008d90:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d011      	beq.n	8008dbc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	3348      	adds	r3, #72	@ 0x48
 8008da0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008daa:	79fa      	ldrb	r2, [r7, #7]
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	4613      	mov	r3, r2
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 f805 	bl	8008dc6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
	}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3720      	adds	r7, #32
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607a      	str	r2, [r7, #4]
 8008dd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d103      	bne.n	8008de2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e002      	b.n	8008de8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008df4:	2101      	movs	r1, #1
 8008df6:	69b8      	ldr	r0, [r7, #24]
 8008df8:	f7ff ff40 	bl	8008c7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08e      	sub	sp, #56	@ 0x38
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e12:	2300      	movs	r3, #0
 8008e14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10b      	bne.n	8008e38 <xQueueGenericSend+0x34>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	e7fd      	b.n	8008e34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d103      	bne.n	8008e46 <xQueueGenericSend+0x42>
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <xQueueGenericSend+0x46>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e000      	b.n	8008e4c <xQueueGenericSend+0x48>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10b      	bne.n	8008e68 <xQueueGenericSend+0x64>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	e7fd      	b.n	8008e64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d103      	bne.n	8008e76 <xQueueGenericSend+0x72>
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <xQueueGenericSend+0x76>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e000      	b.n	8008e7c <xQueueGenericSend+0x78>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <xQueueGenericSend+0x94>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	623b      	str	r3, [r7, #32]
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e98:	f001 f998 	bl	800a1cc <xTaskGetSchedulerState>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d102      	bne.n	8008ea8 <xQueueGenericSend+0xa4>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <xQueueGenericSend+0xa8>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e000      	b.n	8008eae <xQueueGenericSend+0xaa>
 8008eac:	2300      	movs	r3, #0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <xQueueGenericSend+0xc6>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	61fb      	str	r3, [r7, #28]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008eca:	f001 fded 	bl	800aaa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d302      	bcc.n	8008ee0 <xQueueGenericSend+0xdc>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d129      	bne.n	8008f34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ee6:	f000 f88f 	bl	8009008 <prvCopyDataToQueue>
 8008eea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d010      	beq.n	8008f16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	3324      	adds	r3, #36	@ 0x24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 ff91 	bl	8009e20 <xTaskRemoveFromEventList>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d013      	beq.n	8008f2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f04:	4b3f      	ldr	r3, [pc, #252]	@ (8009004 <xQueueGenericSend+0x200>)
 8008f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	e00a      	b.n	8008f2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f1c:	4b39      	ldr	r3, [pc, #228]	@ (8009004 <xQueueGenericSend+0x200>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f2c:	f001 fdee 	bl	800ab0c <vPortExitCritical>
				return pdPASS;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e063      	b.n	8008ffc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f3a:	f001 fde7 	bl	800ab0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e05c      	b.n	8008ffc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d106      	bne.n	8008f56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 ffcb 	bl	8009ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f52:	2301      	movs	r3, #1
 8008f54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f56:	f001 fdd9 	bl	800ab0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f5a:	f000 fd71 	bl	8009a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f5e:	f001 fda3 	bl	800aaa8 <vPortEnterCritical>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f68:	b25b      	sxtb	r3, r3
 8008f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6e:	d103      	bne.n	8008f78 <xQueueGenericSend+0x174>
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f7e:	b25b      	sxtb	r3, r3
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d103      	bne.n	8008f8e <xQueueGenericSend+0x18a>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f8e:	f001 fdbd 	bl	800ab0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f92:	1d3a      	adds	r2, r7, #4
 8008f94:	f107 0314 	add.w	r3, r7, #20
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 ffba 	bl	8009f14 <xTaskCheckForTimeOut>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d124      	bne.n	8008ff0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fa8:	f000 f8ea 	bl	8009180 <prvIsQueueFull>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d018      	beq.n	8008fe4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	3310      	adds	r3, #16
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 ff0a 	bl	8009dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fc2:	f000 f88b 	bl	80090dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008fc6:	f000 fd49 	bl	8009a5c <xTaskResumeAll>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f47f af7c 	bne.w	8008eca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009004 <xQueueGenericSend+0x200>)
 8008fd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	e772      	b.n	8008eca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fe6:	f000 f879 	bl	80090dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fea:	f000 fd37 	bl	8009a5c <xTaskResumeAll>
 8008fee:	e76c      	b.n	8008eca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ff2:	f000 f873 	bl	80090dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ff6:	f000 fd31 	bl	8009a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ffa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3738      	adds	r7, #56	@ 0x38
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	e000ed04 	.word	0xe000ed04

08009008 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009014:	2300      	movs	r3, #0
 8009016:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10d      	bne.n	8009042 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d14d      	bne.n	80090ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	4618      	mov	r0, r3
 8009034:	f001 f8e8 	bl	800a208 <xTaskPriorityDisinherit>
 8009038:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	609a      	str	r2, [r3, #8]
 8009040:	e043      	b.n	80090ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d119      	bne.n	800907c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6858      	ldr	r0, [r3, #4]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009050:	461a      	mov	r2, r3
 8009052:	68b9      	ldr	r1, [r7, #8]
 8009054:	f004 f82b 	bl	800d0ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009060:	441a      	add	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	429a      	cmp	r2, r3
 8009070:	d32b      	bcc.n	80090ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	605a      	str	r2, [r3, #4]
 800907a:	e026      	b.n	80090ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	68d8      	ldr	r0, [r3, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009084:	461a      	mov	r2, r3
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	f004 f811 	bl	800d0ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009094:	425b      	negs	r3, r3
 8009096:	441a      	add	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d207      	bcs.n	80090b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b0:	425b      	negs	r3, r3
 80090b2:	441a      	add	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d105      	bne.n	80090ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80090d2:	697b      	ldr	r3, [r7, #20]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090e4:	f001 fce0 	bl	800aaa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090f0:	e011      	b.n	8009116 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d012      	beq.n	8009120 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3324      	adds	r3, #36	@ 0x24
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fe8e 	bl	8009e20 <xTaskRemoveFromEventList>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800910a:	f000 ff67 	bl	8009fdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	3b01      	subs	r3, #1
 8009112:	b2db      	uxtb	r3, r3
 8009114:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911a:	2b00      	cmp	r3, #0
 800911c:	dce9      	bgt.n	80090f2 <prvUnlockQueue+0x16>
 800911e:	e000      	b.n	8009122 <prvUnlockQueue+0x46>
					break;
 8009120:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	22ff      	movs	r2, #255	@ 0xff
 8009126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800912a:	f001 fcef 	bl	800ab0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800912e:	f001 fcbb 	bl	800aaa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009138:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800913a:	e011      	b.n	8009160 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d012      	beq.n	800916a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3310      	adds	r3, #16
 8009148:	4618      	mov	r0, r3
 800914a:	f000 fe69 	bl	8009e20 <xTaskRemoveFromEventList>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009154:	f000 ff42 	bl	8009fdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	3b01      	subs	r3, #1
 800915c:	b2db      	uxtb	r3, r3
 800915e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009164:	2b00      	cmp	r3, #0
 8009166:	dce9      	bgt.n	800913c <prvUnlockQueue+0x60>
 8009168:	e000      	b.n	800916c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800916a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	22ff      	movs	r2, #255	@ 0xff
 8009170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009174:	f001 fcca 	bl	800ab0c <vPortExitCritical>
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009188:	f001 fc8e 	bl	800aaa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009194:	429a      	cmp	r2, r3
 8009196:	d102      	bne.n	800919e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009198:	2301      	movs	r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	e001      	b.n	80091a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091a2:	f001 fcb3 	bl	800ab0c <vPortExitCritical>

	return xReturn;
 80091a6:	68fb      	ldr	r3, [r7, #12]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08c      	sub	sp, #48	@ 0x30
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d111      	bne.n	80091e6 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d81d      	bhi.n	800920a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	61fb      	str	r3, [r7, #28]
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	e7fd      	b.n	80091e2 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10b      	bne.n	800920a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	61bb      	str	r3, [r7, #24]
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	e7fd      	b.n	8009206 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	429a      	cmp	r2, r3
 8009210:	d90b      	bls.n	800922a <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	617b      	str	r3, [r7, #20]
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop
 8009228:	e7fd      	b.n	8009226 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009230:	2301      	movs	r3, #1
 8009232:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3301      	adds	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3320      	adds	r3, #32
 800923e:	4618      	mov	r0, r3
 8009240:	f001 fd54 	bl	800acec <pvPortMalloc>
 8009244:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	f103 0120 	add.w	r1, r3, #32
 8009252:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	6a38      	ldr	r0, [r7, #32]
 800925e:	f000 f96c 	bl	800953a <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009262:	6a3b      	ldr	r3, [r7, #32]
	}
 8009264:	4618      	mov	r0, r3
 8009266:	3728      	adds	r7, #40	@ 0x28
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08e      	sub	sp, #56	@ 0x38
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800927e:	2300      	movs	r3, #0
 8009280:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10b      	bne.n	80092a0 <xStreamBufferReceive+0x34>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61fb      	str	r3, [r7, #28]
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	e7fd      	b.n	800929c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10b      	bne.n	80092be <xStreamBufferReceive+0x52>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	61bb      	str	r3, [r7, #24]
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	e7fd      	b.n	80092ba <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	7f1b      	ldrb	r3, [r3, #28]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80092ca:	2304      	movs	r3, #4
 80092cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80092ce:	e001      	b.n	80092d4 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d035      	beq.n	8009346 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80092da:	f001 fbe5 	bl	800aaa8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80092de:	6a38      	ldr	r0, [r7, #32]
 80092e0:	f000 f90b 	bl	80094fa <prvBytesInBuffer>
 80092e4:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80092e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d817      	bhi.n	800931e <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80092ee:	2000      	movs	r0, #0
 80092f0:	f001 fa1a 	bl	800a728 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <xStreamBufferReceive+0xa8>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	617b      	str	r3, [r7, #20]
}
 800930e:	bf00      	nop
 8009310:	bf00      	nop
 8009312:	e7fd      	b.n	8009310 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8009314:	f000 ff4a 	bl	800a1ac <xTaskGetCurrentTaskHandle>
 8009318:	4602      	mov	r2, r0
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800931e:	f001 fbf5 	bl	800ab0c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	429a      	cmp	r2, r3
 8009328:	d811      	bhi.n	800934e <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2200      	movs	r2, #0
 800932e:	2100      	movs	r1, #0
 8009330:	2000      	movs	r0, #0
 8009332:	f000 fff1 	bl	800a318 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	2200      	movs	r2, #0
 800933a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800933c:	6a38      	ldr	r0, [r7, #32]
 800933e:	f000 f8dc 	bl	80094fa <prvBytesInBuffer>
 8009342:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009344:	e003      	b.n	800934e <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009346:	6a38      	ldr	r0, [r7, #32]
 8009348:	f000 f8d7 	bl	80094fa <prvBytesInBuffer>
 800934c:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800934e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	429a      	cmp	r2, r3
 8009354:	d91d      	bls.n	8009392 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	6a38      	ldr	r0, [r7, #32]
 8009362:	f000 f81b 	bl	800939c <prvReadMessageFromBuffer>
 8009366:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8009368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800936e:	f000 fb67 	bl	8009a40 <vTaskSuspendAll>
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d009      	beq.n	800938e <xStreamBufferReceive+0x122>
 800937a:	6a3b      	ldr	r3, [r7, #32]
 800937c:	6958      	ldr	r0, [r3, #20]
 800937e:	2300      	movs	r3, #0
 8009380:	2200      	movs	r2, #0
 8009382:	2100      	movs	r1, #0
 8009384:	f001 f828 	bl	800a3d8 <xTaskGenericNotify>
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	2200      	movs	r2, #0
 800938c:	615a      	str	r2, [r3, #20]
 800938e:	f000 fb65 	bl	8009a5c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009394:	4618      	mov	r0, r3
 8009396:	3730      	adds	r7, #48	@ 0x30
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80093aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d019      	beq.n	80093e4 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80093b6:	f107 0110 	add.w	r1, r7, #16
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 f81e 	bl	8009400 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d907      	bls.n	80093e8 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	61fb      	str	r3, [r7, #28]
 80093e2:	e001      	b.n	80093e8 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	69fa      	ldr	r2, [r7, #28]
 80093ec:	68b9      	ldr	r1, [r7, #8]
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 f806 	bl	8009400 <prvReadBytesFromBuffer>
 80093f4:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80093f6:	697b      	ldr	r3, [r7, #20]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3720      	adds	r7, #32
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <prvReadBytesFromBuffer>:
	return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08a      	sub	sp, #40	@ 0x28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	4293      	cmp	r3, r2
 8009414:	bf28      	it	cs
 8009416:	4613      	movcs	r3, r2
 8009418:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d067      	beq.n	80094f0 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	6a3a      	ldr	r2, [r7, #32]
 8009430:	4293      	cmp	r3, r2
 8009432:	bf28      	it	cs
 8009434:	4613      	movcs	r3, r2
 8009436:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d90b      	bls.n	8009458 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	61bb      	str	r3, [r7, #24]
}
 8009452:	bf00      	nop
 8009454:	bf00      	nop
 8009456:	e7fd      	b.n	8009454 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8009458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	441a      	add	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	429a      	cmp	r2, r3
 8009464:	d90b      	bls.n	800947e <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	617b      	str	r3, [r7, #20]
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	e7fd      	b.n	800947a <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009484:	4413      	add	r3, r2
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	4619      	mov	r1, r3
 800948a:	68b8      	ldr	r0, [r7, #8]
 800948c:	f003 fe0f 	bl	800d0ae <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8009490:	6a3a      	ldr	r2, [r7, #32]
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	429a      	cmp	r2, r3
 8009496:	d91a      	bls.n	80094ce <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8009498:	6a3a      	ldr	r2, [r7, #32]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d90b      	bls.n	80094b8 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	613b      	str	r3, [r7, #16]
}
 80094b2:	bf00      	nop
 80094b4:	bf00      	nop
 80094b6:	e7fd      	b.n	80094b4 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	18d0      	adds	r0, r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6999      	ldr	r1, [r3, #24]
 80094c2:	6a3a      	ldr	r2, [r7, #32]
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	461a      	mov	r2, r3
 80094ca:	f003 fdf0 	bl	800d0ae <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80094ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	4413      	add	r3, r2
 80094d4:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094dc:	429a      	cmp	r2, r3
 80094de:	d304      	bcc.n	80094ea <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ee:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80094f0:	6a3b      	ldr	r3, [r7, #32]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3728      	adds	r7, #40	@ 0x28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	4413      	add	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	429a      	cmp	r2, r3
 8009520:	d304      	bcc.n	800952c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800952c:	68fb      	ldr	r3, [r7, #12]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b086      	sub	sp, #24
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
 8009546:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8009548:	2355      	movs	r3, #85	@ 0x55
 800954a:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	6979      	ldr	r1, [r7, #20]
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f003 fcac 	bl	800ceae <memset>
 8009556:	4602      	mov	r2, r0
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	4293      	cmp	r3, r2
 800955c:	d00b      	beq.n	8009576 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	613b      	str	r3, [r7, #16]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8009576:	2220      	movs	r2, #32
 8009578:	2100      	movs	r1, #0
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f003 fc97 	bl	800ceae <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009598:	771a      	strb	r2, [r3, #28]
}
 800959a:	bf00      	nop
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b08e      	sub	sp, #56	@ 0x38
 80095a6:	af04      	add	r7, sp, #16
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
 80095ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <xTaskCreateStatic+0x2c>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	623b      	str	r3, [r7, #32]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80095ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10b      	bne.n	80095ec <xTaskCreateStatic+0x4a>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	61fb      	str	r3, [r7, #28]
}
 80095e6:	bf00      	nop
 80095e8:	bf00      	nop
 80095ea:	e7fd      	b.n	80095e8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095ec:	23a0      	movs	r3, #160	@ 0xa0
 80095ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80095f4:	d00b      	beq.n	800960e <xTaskCreateStatic+0x6c>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	61bb      	str	r3, [r7, #24]
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800960e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01e      	beq.n	8009654 <xTaskCreateStatic+0xb2>
 8009616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01b      	beq.n	8009654 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800961c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009624:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	2202      	movs	r2, #2
 800962a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800962e:	2300      	movs	r3, #0
 8009630:	9303      	str	r3, [sp, #12]
 8009632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009634:	9302      	str	r3, [sp, #8]
 8009636:	f107 0314 	add.w	r3, r7, #20
 800963a:	9301      	str	r3, [sp, #4]
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 f850 	bl	80096ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800964c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800964e:	f000 f8ed 	bl	800982c <prvAddNewTaskToReadyList>
 8009652:	e001      	b.n	8009658 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009658:	697b      	ldr	r3, [r7, #20]
	}
 800965a:	4618      	mov	r0, r3
 800965c:	3728      	adds	r7, #40	@ 0x28
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009662:	b580      	push	{r7, lr}
 8009664:	b08c      	sub	sp, #48	@ 0x30
 8009666:	af04      	add	r7, sp, #16
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009672:	88fb      	ldrh	r3, [r7, #6]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4618      	mov	r0, r3
 8009678:	f001 fb38 	bl	800acec <pvPortMalloc>
 800967c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00e      	beq.n	80096a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009684:	20a0      	movs	r0, #160	@ 0xa0
 8009686:	f001 fb31 	bl	800acec <pvPortMalloc>
 800968a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	631a      	str	r2, [r3, #48]	@ 0x30
 8009698:	e005      	b.n	80096a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800969a:	6978      	ldr	r0, [r7, #20]
 800969c:	f001 fbf4 	bl	800ae88 <vPortFree>
 80096a0:	e001      	b.n	80096a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d017      	beq.n	80096dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096b4:	88fa      	ldrh	r2, [r7, #6]
 80096b6:	2300      	movs	r3, #0
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	9302      	str	r3, [sp, #8]
 80096be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68b9      	ldr	r1, [r7, #8]
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 f80e 	bl	80096ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096d0:	69f8      	ldr	r0, [r7, #28]
 80096d2:	f000 f8ab 	bl	800982c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096d6:	2301      	movs	r3, #1
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	e002      	b.n	80096e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096dc:	f04f 33ff 	mov.w	r3, #4294967295
 80096e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096e2:	69bb      	ldr	r3, [r7, #24]
	}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3720      	adds	r7, #32
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009704:	3b01      	subs	r3, #1
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	f023 0307 	bic.w	r3, r3, #7
 8009712:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	f003 0307 	and.w	r3, r3, #7
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00b      	beq.n	8009736 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	617b      	str	r3, [r7, #20]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01f      	beq.n	800977c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800973c:	2300      	movs	r3, #0
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	e012      	b.n	8009768 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	4413      	add	r3, r2
 8009748:	7819      	ldrb	r1, [r3, #0]
 800974a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	4413      	add	r3, r2
 8009750:	3334      	adds	r3, #52	@ 0x34
 8009752:	460a      	mov	r2, r1
 8009754:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d006      	beq.n	8009770 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	3301      	adds	r3, #1
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	2b0f      	cmp	r3, #15
 800976c:	d9e9      	bls.n	8009742 <prvInitialiseNewTask+0x56>
 800976e:	e000      	b.n	8009772 <prvInitialiseNewTask+0x86>
			{
				break;
 8009770:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800977a:	e003      	b.n	8009784 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800977c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	2b06      	cmp	r3, #6
 8009788:	d901      	bls.n	800978e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800978a:	2306      	movs	r3, #6
 800978c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009792:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009798:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	2200      	movs	r2, #0
 800979e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	3304      	adds	r3, #4
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff f9d5 	bl	8008b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	3318      	adds	r3, #24
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff f9d0 	bl	8008b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097bc:	f1c3 0207 	rsb	r2, r3, #7
 80097c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	334c      	adds	r3, #76	@ 0x4c
 80097de:	224c      	movs	r2, #76	@ 0x4c
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f003 fb63 	bl	800ceae <memset>
 80097e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ea:	4a0d      	ldr	r2, [pc, #52]	@ (8009820 <prvInitialiseNewTask+0x134>)
 80097ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80097ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f0:	4a0c      	ldr	r2, [pc, #48]	@ (8009824 <prvInitialiseNewTask+0x138>)
 80097f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80097f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009828 <prvInitialiseNewTask+0x13c>)
 80097f8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	68f9      	ldr	r1, [r7, #12]
 80097fe:	69b8      	ldr	r0, [r7, #24]
 8009800:	f001 f81e 	bl	800a840 <pxPortInitialiseStack>
 8009804:	4602      	mov	r2, r0
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800980a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009816:	bf00      	nop
 8009818:	3720      	adds	r7, #32
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	200059a0 	.word	0x200059a0
 8009824:	20005a08 	.word	0x20005a08
 8009828:	20005a70 	.word	0x20005a70

0800982c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009834:	f001 f938 	bl	800aaa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009838:	4b2a      	ldr	r3, [pc, #168]	@ (80098e4 <prvAddNewTaskToReadyList+0xb8>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3301      	adds	r3, #1
 800983e:	4a29      	ldr	r2, [pc, #164]	@ (80098e4 <prvAddNewTaskToReadyList+0xb8>)
 8009840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009842:	4b29      	ldr	r3, [pc, #164]	@ (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d109      	bne.n	800985e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800984a:	4a27      	ldr	r2, [pc, #156]	@ (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009850:	4b24      	ldr	r3, [pc, #144]	@ (80098e4 <prvAddNewTaskToReadyList+0xb8>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d110      	bne.n	800987a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009858:	f000 fbe4 	bl	800a024 <prvInitialiseTaskLists>
 800985c:	e00d      	b.n	800987a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800985e:	4b23      	ldr	r3, [pc, #140]	@ (80098ec <prvAddNewTaskToReadyList+0xc0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d109      	bne.n	800987a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009866:	4b20      	ldr	r3, [pc, #128]	@ (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009870:	429a      	cmp	r2, r3
 8009872:	d802      	bhi.n	800987a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009874:	4a1c      	ldr	r2, [pc, #112]	@ (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800987a:	4b1d      	ldr	r3, [pc, #116]	@ (80098f0 <prvAddNewTaskToReadyList+0xc4>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3301      	adds	r3, #1
 8009880:	4a1b      	ldr	r2, [pc, #108]	@ (80098f0 <prvAddNewTaskToReadyList+0xc4>)
 8009882:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	2201      	movs	r2, #1
 800988a:	409a      	lsls	r2, r3
 800988c:	4b19      	ldr	r3, [pc, #100]	@ (80098f4 <prvAddNewTaskToReadyList+0xc8>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4313      	orrs	r3, r2
 8009892:	4a18      	ldr	r2, [pc, #96]	@ (80098f4 <prvAddNewTaskToReadyList+0xc8>)
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4a15      	ldr	r2, [pc, #84]	@ (80098f8 <prvAddNewTaskToReadyList+0xcc>)
 80098a4:	441a      	add	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3304      	adds	r3, #4
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7ff f95e 	bl	8008b6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098b2:	f001 f92b 	bl	800ab0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098b6:	4b0d      	ldr	r3, [pc, #52]	@ (80098ec <prvAddNewTaskToReadyList+0xc0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00e      	beq.n	80098dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098be:	4b0a      	ldr	r3, [pc, #40]	@ (80098e8 <prvAddNewTaskToReadyList+0xbc>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d207      	bcs.n	80098dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098cc:	4b0b      	ldr	r3, [pc, #44]	@ (80098fc <prvAddNewTaskToReadyList+0xd0>)
 80098ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20000b24 	.word	0x20000b24
 80098e8:	20000a24 	.word	0x20000a24
 80098ec:	20000b30 	.word	0x20000b30
 80098f0:	20000b40 	.word	0x20000b40
 80098f4:	20000b2c 	.word	0x20000b2c
 80098f8:	20000a28 	.word	0x20000a28
 80098fc:	e000ed04 	.word	0xe000ed04

08009900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d018      	beq.n	8009944 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009912:	4b14      	ldr	r3, [pc, #80]	@ (8009964 <vTaskDelay+0x64>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00b      	beq.n	8009932 <vTaskDelay+0x32>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	60bb      	str	r3, [r7, #8]
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	e7fd      	b.n	800992e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009932:	f000 f885 	bl	8009a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009936:	2100      	movs	r1, #0
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 ff1b 	bl	800a774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800993e:	f000 f88d 	bl	8009a5c <xTaskResumeAll>
 8009942:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d107      	bne.n	800995a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800994a:	4b07      	ldr	r3, [pc, #28]	@ (8009968 <vTaskDelay+0x68>)
 800994c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000b4c 	.word	0x20000b4c
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08a      	sub	sp, #40	@ 0x28
 8009970:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009972:	2300      	movs	r3, #0
 8009974:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800997a:	463a      	mov	r2, r7
 800997c:	1d39      	adds	r1, r7, #4
 800997e:	f107 0308 	add.w	r3, r7, #8
 8009982:	4618      	mov	r0, r3
 8009984:	f7f7 fca6 	bl	80012d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	9202      	str	r2, [sp, #8]
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	2300      	movs	r3, #0
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	2300      	movs	r3, #0
 8009998:	460a      	mov	r2, r1
 800999a:	4921      	ldr	r1, [pc, #132]	@ (8009a20 <vTaskStartScheduler+0xb4>)
 800999c:	4821      	ldr	r0, [pc, #132]	@ (8009a24 <vTaskStartScheduler+0xb8>)
 800999e:	f7ff fe00 	bl	80095a2 <xTaskCreateStatic>
 80099a2:	4603      	mov	r3, r0
 80099a4:	4a20      	ldr	r2, [pc, #128]	@ (8009a28 <vTaskStartScheduler+0xbc>)
 80099a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099a8:	4b1f      	ldr	r3, [pc, #124]	@ (8009a28 <vTaskStartScheduler+0xbc>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099b0:	2301      	movs	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	e001      	b.n	80099ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d11b      	bne.n	80099f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099d4:	4b15      	ldr	r3, [pc, #84]	@ (8009a2c <vTaskStartScheduler+0xc0>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	334c      	adds	r3, #76	@ 0x4c
 80099da:	4a15      	ldr	r2, [pc, #84]	@ (8009a30 <vTaskStartScheduler+0xc4>)
 80099dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099de:	4b15      	ldr	r3, [pc, #84]	@ (8009a34 <vTaskStartScheduler+0xc8>)
 80099e0:	f04f 32ff 	mov.w	r2, #4294967295
 80099e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099e6:	4b14      	ldr	r3, [pc, #80]	@ (8009a38 <vTaskStartScheduler+0xcc>)
 80099e8:	2201      	movs	r2, #1
 80099ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099ec:	4b13      	ldr	r3, [pc, #76]	@ (8009a3c <vTaskStartScheduler+0xd0>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099f2:	f000 ffb5 	bl	800a960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099f6:	e00f      	b.n	8009a18 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fe:	d10b      	bne.n	8009a18 <vTaskStartScheduler+0xac>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	60fb      	str	r3, [r7, #12]
}
 8009a12:	bf00      	nop
 8009a14:	bf00      	nop
 8009a16:	e7fd      	b.n	8009a14 <vTaskStartScheduler+0xa8>
}
 8009a18:	bf00      	nop
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	080102c8 	.word	0x080102c8
 8009a24:	08009ff5 	.word	0x08009ff5
 8009a28:	20000b48 	.word	0x20000b48
 8009a2c:	20000a24 	.word	0x20000a24
 8009a30:	200001b4 	.word	0x200001b4
 8009a34:	20000b44 	.word	0x20000b44
 8009a38:	20000b30 	.word	0x20000b30
 8009a3c:	20000b28 	.word	0x20000b28

08009a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a44:	4b04      	ldr	r3, [pc, #16]	@ (8009a58 <vTaskSuspendAll+0x18>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	4a03      	ldr	r2, [pc, #12]	@ (8009a58 <vTaskSuspendAll+0x18>)
 8009a4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a4e:	bf00      	nop
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	20000b4c 	.word	0x20000b4c

08009a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a6a:	4b42      	ldr	r3, [pc, #264]	@ (8009b74 <xTaskResumeAll+0x118>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <xTaskResumeAll+0x2e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	603b      	str	r3, [r7, #0]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a8a:	f001 f80d 	bl	800aaa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a8e:	4b39      	ldr	r3, [pc, #228]	@ (8009b74 <xTaskResumeAll+0x118>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	4a37      	ldr	r2, [pc, #220]	@ (8009b74 <xTaskResumeAll+0x118>)
 8009a96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a98:	4b36      	ldr	r3, [pc, #216]	@ (8009b74 <xTaskResumeAll+0x118>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d161      	bne.n	8009b64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aa0:	4b35      	ldr	r3, [pc, #212]	@ (8009b78 <xTaskResumeAll+0x11c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d05d      	beq.n	8009b64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aa8:	e02e      	b.n	8009b08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aaa:	4b34      	ldr	r3, [pc, #208]	@ (8009b7c <xTaskResumeAll+0x120>)
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3318      	adds	r3, #24
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff f8b6 	bl	8008c28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7ff f8b1 	bl	8008c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aca:	2201      	movs	r2, #1
 8009acc:	409a      	lsls	r2, r3
 8009ace:	4b2c      	ldr	r3, [pc, #176]	@ (8009b80 <xTaskResumeAll+0x124>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8009b80 <xTaskResumeAll+0x124>)
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4a27      	ldr	r2, [pc, #156]	@ (8009b84 <xTaskResumeAll+0x128>)
 8009ae6:	441a      	add	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3304      	adds	r3, #4
 8009aec:	4619      	mov	r1, r3
 8009aee:	4610      	mov	r0, r2
 8009af0:	f7ff f83d 	bl	8008b6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af8:	4b23      	ldr	r3, [pc, #140]	@ (8009b88 <xTaskResumeAll+0x12c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d302      	bcc.n	8009b08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b02:	4b22      	ldr	r3, [pc, #136]	@ (8009b8c <xTaskResumeAll+0x130>)
 8009b04:	2201      	movs	r2, #1
 8009b06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b08:	4b1c      	ldr	r3, [pc, #112]	@ (8009b7c <xTaskResumeAll+0x120>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1cc      	bne.n	8009aaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b16:	f000 fb29 	bl	800a16c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8009b90 <xTaskResumeAll+0x134>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d010      	beq.n	8009b48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b26:	f000 f837 	bl	8009b98 <xTaskIncrementTick>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b30:	4b16      	ldr	r3, [pc, #88]	@ (8009b8c <xTaskResumeAll+0x130>)
 8009b32:	2201      	movs	r2, #1
 8009b34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1f1      	bne.n	8009b26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b42:	4b13      	ldr	r3, [pc, #76]	@ (8009b90 <xTaskResumeAll+0x134>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b48:	4b10      	ldr	r3, [pc, #64]	@ (8009b8c <xTaskResumeAll+0x130>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d009      	beq.n	8009b64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b50:	2301      	movs	r3, #1
 8009b52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b54:	4b0f      	ldr	r3, [pc, #60]	@ (8009b94 <xTaskResumeAll+0x138>)
 8009b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b64:	f000 ffd2 	bl	800ab0c <vPortExitCritical>

	return xAlreadyYielded;
 8009b68:	68bb      	ldr	r3, [r7, #8]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000b4c 	.word	0x20000b4c
 8009b78:	20000b24 	.word	0x20000b24
 8009b7c:	20000ae4 	.word	0x20000ae4
 8009b80:	20000b2c 	.word	0x20000b2c
 8009b84:	20000a28 	.word	0x20000a28
 8009b88:	20000a24 	.word	0x20000a24
 8009b8c:	20000b38 	.word	0x20000b38
 8009b90:	20000b34 	.word	0x20000b34
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8009ce0 <xTaskIncrementTick+0x148>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f040 808f 	bne.w	8009cca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bac:	4b4d      	ldr	r3, [pc, #308]	@ (8009ce4 <xTaskIncrementTick+0x14c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8009ce4 <xTaskIncrementTick+0x14c>)
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d121      	bne.n	8009c04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bc0:	4b49      	ldr	r3, [pc, #292]	@ (8009ce8 <xTaskIncrementTick+0x150>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00b      	beq.n	8009be2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	603b      	str	r3, [r7, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
 8009be0:	e7fd      	b.n	8009bde <xTaskIncrementTick+0x46>
 8009be2:	4b41      	ldr	r3, [pc, #260]	@ (8009ce8 <xTaskIncrementTick+0x150>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	4b40      	ldr	r3, [pc, #256]	@ (8009cec <xTaskIncrementTick+0x154>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a3e      	ldr	r2, [pc, #248]	@ (8009ce8 <xTaskIncrementTick+0x150>)
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	4a3e      	ldr	r2, [pc, #248]	@ (8009cec <xTaskIncrementTick+0x154>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8009cf0 <xTaskIncrementTick+0x158>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8009cf0 <xTaskIncrementTick+0x158>)
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	f000 fab4 	bl	800a16c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c04:	4b3b      	ldr	r3, [pc, #236]	@ (8009cf4 <xTaskIncrementTick+0x15c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d348      	bcc.n	8009ca0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c0e:	4b36      	ldr	r3, [pc, #216]	@ (8009ce8 <xTaskIncrementTick+0x150>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d104      	bne.n	8009c22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c18:	4b36      	ldr	r3, [pc, #216]	@ (8009cf4 <xTaskIncrementTick+0x15c>)
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	601a      	str	r2, [r3, #0]
					break;
 8009c20:	e03e      	b.n	8009ca0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c22:	4b31      	ldr	r3, [pc, #196]	@ (8009ce8 <xTaskIncrementTick+0x150>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d203      	bcs.n	8009c42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8009cf4 <xTaskIncrementTick+0x15c>)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c40:	e02e      	b.n	8009ca0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe ffee 	bl	8008c28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d004      	beq.n	8009c5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	3318      	adds	r3, #24
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fe ffe5 	bl	8008c28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c62:	2201      	movs	r2, #1
 8009c64:	409a      	lsls	r2, r3
 8009c66:	4b24      	ldr	r3, [pc, #144]	@ (8009cf8 <xTaskIncrementTick+0x160>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	4a22      	ldr	r2, [pc, #136]	@ (8009cf8 <xTaskIncrementTick+0x160>)
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8009cfc <xTaskIncrementTick+0x164>)
 8009c7e:	441a      	add	r2, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f7fe ff71 	bl	8008b6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c90:	4b1b      	ldr	r3, [pc, #108]	@ (8009d00 <xTaskIncrementTick+0x168>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d3b9      	bcc.n	8009c0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c9e:	e7b6      	b.n	8009c0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ca0:	4b17      	ldr	r3, [pc, #92]	@ (8009d00 <xTaskIncrementTick+0x168>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca6:	4915      	ldr	r1, [pc, #84]	@ (8009cfc <xTaskIncrementTick+0x164>)
 8009ca8:	4613      	mov	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	440b      	add	r3, r1
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d901      	bls.n	8009cbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cbc:	4b11      	ldr	r3, [pc, #68]	@ (8009d04 <xTaskIncrementTick+0x16c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d007      	beq.n	8009cd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	617b      	str	r3, [r7, #20]
 8009cc8:	e004      	b.n	8009cd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cca:	4b0f      	ldr	r3, [pc, #60]	@ (8009d08 <xTaskIncrementTick+0x170>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8009d08 <xTaskIncrementTick+0x170>)
 8009cd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cd4:	697b      	ldr	r3, [r7, #20]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	20000b4c 	.word	0x20000b4c
 8009ce4:	20000b28 	.word	0x20000b28
 8009ce8:	20000adc 	.word	0x20000adc
 8009cec:	20000ae0 	.word	0x20000ae0
 8009cf0:	20000b3c 	.word	0x20000b3c
 8009cf4:	20000b44 	.word	0x20000b44
 8009cf8:	20000b2c 	.word	0x20000b2c
 8009cfc:	20000a28 	.word	0x20000a28
 8009d00:	20000a24 	.word	0x20000a24
 8009d04:	20000b38 	.word	0x20000b38
 8009d08:	20000b34 	.word	0x20000b34

08009d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d12:	4b2a      	ldr	r3, [pc, #168]	@ (8009dbc <vTaskSwitchContext+0xb0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d1a:	4b29      	ldr	r3, [pc, #164]	@ (8009dc0 <vTaskSwitchContext+0xb4>)
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d20:	e045      	b.n	8009dae <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009d22:	4b27      	ldr	r3, [pc, #156]	@ (8009dc0 <vTaskSwitchContext+0xb4>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d28:	4b26      	ldr	r3, [pc, #152]	@ (8009dc4 <vTaskSwitchContext+0xb8>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	fab3 f383 	clz	r3, r3
 8009d34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009d36:	7afb      	ldrb	r3, [r7, #11]
 8009d38:	f1c3 031f 	rsb	r3, r3, #31
 8009d3c:	617b      	str	r3, [r7, #20]
 8009d3e:	4922      	ldr	r1, [pc, #136]	@ (8009dc8 <vTaskSwitchContext+0xbc>)
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10b      	bne.n	8009d6a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	607b      	str	r3, [r7, #4]
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop
 8009d68:	e7fd      	b.n	8009d66 <vTaskSwitchContext+0x5a>
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4a14      	ldr	r2, [pc, #80]	@ (8009dc8 <vTaskSwitchContext+0xbc>)
 8009d76:	4413      	add	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	605a      	str	r2, [r3, #4]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d104      	bne.n	8009d9a <vTaskSwitchContext+0x8e>
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	605a      	str	r2, [r3, #4]
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dcc <vTaskSwitchContext+0xc0>)
 8009da2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009da4:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <vTaskSwitchContext+0xc0>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	334c      	adds	r3, #76	@ 0x4c
 8009daa:	4a09      	ldr	r2, [pc, #36]	@ (8009dd0 <vTaskSwitchContext+0xc4>)
 8009dac:	6013      	str	r3, [r2, #0]
}
 8009dae:	bf00      	nop
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	20000b4c 	.word	0x20000b4c
 8009dc0:	20000b38 	.word	0x20000b38
 8009dc4:	20000b2c 	.word	0x20000b2c
 8009dc8:	20000a28 	.word	0x20000a28
 8009dcc:	20000a24 	.word	0x20000a24
 8009dd0:	200001b4 	.word	0x200001b4

08009dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10b      	bne.n	8009dfc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60fb      	str	r3, [r7, #12]
}
 8009df6:	bf00      	nop
 8009df8:	bf00      	nop
 8009dfa:	e7fd      	b.n	8009df8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dfc:	4b07      	ldr	r3, [pc, #28]	@ (8009e1c <vTaskPlaceOnEventList+0x48>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3318      	adds	r3, #24
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7fe fed6 	bl	8008bb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	6838      	ldr	r0, [r7, #0]
 8009e0e:	f000 fcb1 	bl	800a774 <prvAddCurrentTaskToDelayedList>
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000a24 	.word	0x20000a24

08009e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10b      	bne.n	8009e4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60fb      	str	r3, [r7, #12]
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	e7fd      	b.n	8009e4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3318      	adds	r3, #24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fee8 	bl	8008c28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e58:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed0 <xTaskRemoveFromEventList+0xb0>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d11c      	bne.n	8009e9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe fedf 	bl	8008c28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	2201      	movs	r2, #1
 8009e70:	409a      	lsls	r2, r3
 8009e72:	4b18      	ldr	r3, [pc, #96]	@ (8009ed4 <xTaskRemoveFromEventList+0xb4>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	4a16      	ldr	r2, [pc, #88]	@ (8009ed4 <xTaskRemoveFromEventList+0xb4>)
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4a13      	ldr	r2, [pc, #76]	@ (8009ed8 <xTaskRemoveFromEventList+0xb8>)
 8009e8a:	441a      	add	r2, r3
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4619      	mov	r1, r3
 8009e92:	4610      	mov	r0, r2
 8009e94:	f7fe fe6b 	bl	8008b6e <vListInsertEnd>
 8009e98:	e005      	b.n	8009ea6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	3318      	adds	r3, #24
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	480e      	ldr	r0, [pc, #56]	@ (8009edc <xTaskRemoveFromEventList+0xbc>)
 8009ea2:	f7fe fe64 	bl	8008b6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee0 <xTaskRemoveFromEventList+0xc0>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d905      	bls.n	8009ec0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee4 <xTaskRemoveFromEventList+0xc4>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e001      	b.n	8009ec4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ec4:	697b      	ldr	r3, [r7, #20]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000b4c 	.word	0x20000b4c
 8009ed4:	20000b2c 	.word	0x20000b2c
 8009ed8:	20000a28 	.word	0x20000a28
 8009edc:	20000ae4 	.word	0x20000ae4
 8009ee0:	20000a24 	.word	0x20000a24
 8009ee4:	20000b38 	.word	0x20000b38

08009ee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ef0:	4b06      	ldr	r3, [pc, #24]	@ (8009f0c <vTaskInternalSetTimeOutState+0x24>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ef8:	4b05      	ldr	r3, [pc, #20]	@ (8009f10 <vTaskInternalSetTimeOutState+0x28>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	605a      	str	r2, [r3, #4]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	20000b3c 	.word	0x20000b3c
 8009f10:	20000b28 	.word	0x20000b28

08009f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10b      	bne.n	8009f3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	613b      	str	r3, [r7, #16]
}
 8009f36:	bf00      	nop
 8009f38:	bf00      	nop
 8009f3a:	e7fd      	b.n	8009f38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10b      	bne.n	8009f5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60fb      	str	r3, [r7, #12]
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009f5a:	f000 fda5 	bl	800aaa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd4 <xTaskCheckForTimeOut+0xc0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d102      	bne.n	8009f7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61fb      	str	r3, [r7, #28]
 8009f7c:	e023      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	4b15      	ldr	r3, [pc, #84]	@ (8009fd8 <xTaskCheckForTimeOut+0xc4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d007      	beq.n	8009f9a <xTaskCheckForTimeOut+0x86>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d302      	bcc.n	8009f9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	61fb      	str	r3, [r7, #28]
 8009f98:	e015      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d20b      	bcs.n	8009fbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	1ad2      	subs	r2, r2, r3
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff ff99 	bl	8009ee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	e004      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fc6:	f000 fda1 	bl	800ab0c <vPortExitCritical>

	return xReturn;
 8009fca:	69fb      	ldr	r3, [r7, #28]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000b28 	.word	0x20000b28
 8009fd8:	20000b3c 	.word	0x20000b3c

08009fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fe0:	4b03      	ldr	r3, [pc, #12]	@ (8009ff0 <vTaskMissedYield+0x14>)
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	601a      	str	r2, [r3, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	20000b38 	.word	0x20000b38

08009ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ffc:	f000 f852 	bl	800a0a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a000:	4b06      	ldr	r3, [pc, #24]	@ (800a01c <prvIdleTask+0x28>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d9f9      	bls.n	8009ffc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a008:	4b05      	ldr	r3, [pc, #20]	@ (800a020 <prvIdleTask+0x2c>)
 800a00a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a018:	e7f0      	b.n	8009ffc <prvIdleTask+0x8>
 800a01a:	bf00      	nop
 800a01c:	20000a28 	.word	0x20000a28
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]
 800a02e:	e00c      	b.n	800a04a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4a12      	ldr	r2, [pc, #72]	@ (800a084 <prvInitialiseTaskLists+0x60>)
 800a03c:	4413      	add	r3, r2
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fd68 	bl	8008b14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3301      	adds	r3, #1
 800a048:	607b      	str	r3, [r7, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b06      	cmp	r3, #6
 800a04e:	d9ef      	bls.n	800a030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a050:	480d      	ldr	r0, [pc, #52]	@ (800a088 <prvInitialiseTaskLists+0x64>)
 800a052:	f7fe fd5f 	bl	8008b14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a056:	480d      	ldr	r0, [pc, #52]	@ (800a08c <prvInitialiseTaskLists+0x68>)
 800a058:	f7fe fd5c 	bl	8008b14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a05c:	480c      	ldr	r0, [pc, #48]	@ (800a090 <prvInitialiseTaskLists+0x6c>)
 800a05e:	f7fe fd59 	bl	8008b14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a062:	480c      	ldr	r0, [pc, #48]	@ (800a094 <prvInitialiseTaskLists+0x70>)
 800a064:	f7fe fd56 	bl	8008b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a068:	480b      	ldr	r0, [pc, #44]	@ (800a098 <prvInitialiseTaskLists+0x74>)
 800a06a:	f7fe fd53 	bl	8008b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a06e:	4b0b      	ldr	r3, [pc, #44]	@ (800a09c <prvInitialiseTaskLists+0x78>)
 800a070:	4a05      	ldr	r2, [pc, #20]	@ (800a088 <prvInitialiseTaskLists+0x64>)
 800a072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a074:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a0 <prvInitialiseTaskLists+0x7c>)
 800a076:	4a05      	ldr	r2, [pc, #20]	@ (800a08c <prvInitialiseTaskLists+0x68>)
 800a078:	601a      	str	r2, [r3, #0]
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000a28 	.word	0x20000a28
 800a088:	20000ab4 	.word	0x20000ab4
 800a08c:	20000ac8 	.word	0x20000ac8
 800a090:	20000ae4 	.word	0x20000ae4
 800a094:	20000af8 	.word	0x20000af8
 800a098:	20000b10 	.word	0x20000b10
 800a09c:	20000adc 	.word	0x20000adc
 800a0a0:	20000ae0 	.word	0x20000ae0

0800a0a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0aa:	e019      	b.n	800a0e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0ac:	f000 fcfc 	bl	800aaa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b0:	4b10      	ldr	r3, [pc, #64]	@ (800a0f4 <prvCheckTasksWaitingTermination+0x50>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fdb3 	bl	8008c28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0f8 <prvCheckTasksWaitingTermination+0x54>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	4a0b      	ldr	r2, [pc, #44]	@ (800a0f8 <prvCheckTasksWaitingTermination+0x54>)
 800a0ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0d6:	f000 fd19 	bl	800ab0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f810 	bl	800a100 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0e0:	4b06      	ldr	r3, [pc, #24]	@ (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e1      	bne.n	800a0ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000af8 	.word	0x20000af8
 800a0f8:	20000b24 	.word	0x20000b24
 800a0fc:	20000b0c 	.word	0x20000b0c

0800a100 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	334c      	adds	r3, #76	@ 0x4c
 800a10c:	4618      	mov	r0, r3
 800a10e:	f002 fefd 	bl	800cf0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d108      	bne.n	800a12e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a120:	4618      	mov	r0, r3
 800a122:	f000 feb1 	bl	800ae88 <vPortFree>
				vPortFree( pxTCB );
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 feae 	bl	800ae88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a12c:	e019      	b.n	800a162 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a134:	2b01      	cmp	r3, #1
 800a136:	d103      	bne.n	800a140 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fea5 	bl	800ae88 <vPortFree>
	}
 800a13e:	e010      	b.n	800a162 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a146:	2b02      	cmp	r3, #2
 800a148:	d00b      	beq.n	800a162 <prvDeleteTCB+0x62>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	60fb      	str	r3, [r7, #12]
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	e7fd      	b.n	800a15e <prvDeleteTCB+0x5e>
	}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a172:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a4 <prvResetNextTaskUnblockTime+0x38>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d104      	bne.n	800a186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295
 800a182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a184:	e008      	b.n	800a198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a186:	4b07      	ldr	r3, [pc, #28]	@ (800a1a4 <prvResetNextTaskUnblockTime+0x38>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	4a04      	ldr	r2, [pc, #16]	@ (800a1a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a196:	6013      	str	r3, [r2, #0]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	20000adc 	.word	0x20000adc
 800a1a8:	20000b44 	.word	0x20000b44

0800a1ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a1b2:	4b05      	ldr	r3, [pc, #20]	@ (800a1c8 <xTaskGetCurrentTaskHandle+0x1c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a1b8:	687b      	ldr	r3, [r7, #4]
	}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	20000a24 	.word	0x20000a24

0800a1cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a200 <xTaskGetSchedulerState+0x34>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	607b      	str	r3, [r7, #4]
 800a1de:	e008      	b.n	800a1f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1e0:	4b08      	ldr	r3, [pc, #32]	@ (800a204 <xTaskGetSchedulerState+0x38>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	607b      	str	r3, [r7, #4]
 800a1ec:	e001      	b.n	800a1f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1f2:	687b      	ldr	r3, [r7, #4]
	}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	20000b30 	.word	0x20000b30
 800a204:	20000b4c 	.word	0x20000b4c

0800a208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d070      	beq.n	800a300 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a21e:	4b3b      	ldr	r3, [pc, #236]	@ (800a30c <xTaskPriorityDisinherit+0x104>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	429a      	cmp	r2, r3
 800a226:	d00b      	beq.n	800a240 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	60fb      	str	r3, [r7, #12]
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	e7fd      	b.n	800a23c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10b      	bne.n	800a260 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	60bb      	str	r3, [r7, #8]
}
 800a25a:	bf00      	nop
 800a25c:	bf00      	nop
 800a25e:	e7fd      	b.n	800a25c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a264:	1e5a      	subs	r2, r3, #1
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a272:	429a      	cmp	r2, r3
 800a274:	d044      	beq.n	800a300 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d140      	bne.n	800a300 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	3304      	adds	r3, #4
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fcd0 	bl	8008c28 <uxListRemove>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d115      	bne.n	800a2ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a292:	491f      	ldr	r1, [pc, #124]	@ (800a310 <xTaskPriorityDisinherit+0x108>)
 800a294:	4613      	mov	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	440b      	add	r3, r1
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10a      	bne.n	800a2ba <xTaskPriorityDisinherit+0xb2>
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ae:	43da      	mvns	r2, r3
 800a2b0:	4b18      	ldr	r3, [pc, #96]	@ (800a314 <xTaskPriorityDisinherit+0x10c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	4a17      	ldr	r2, [pc, #92]	@ (800a314 <xTaskPriorityDisinherit+0x10c>)
 800a2b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c6:	f1c3 0207 	rsb	r2, r3, #7
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	409a      	lsls	r2, r3
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a314 <xTaskPriorityDisinherit+0x10c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a314 <xTaskPriorityDisinherit+0x10c>)
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4a08      	ldr	r2, [pc, #32]	@ (800a310 <xTaskPriorityDisinherit+0x108>)
 800a2ee:	441a      	add	r2, r3
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	f7fe fc39 	bl	8008b6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a300:	697b      	ldr	r3, [r7, #20]
	}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	20000a24 	.word	0x20000a24
 800a310:	20000a28 	.word	0x20000a28
 800a314:	20000b2c 	.word	0x20000b2c

0800a318 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a326:	f000 fbbf 	bl	800aaa8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a32a:	4b29      	ldr	r3, [pc, #164]	@ (800a3d0 <xTaskNotifyWait+0xb8>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d01c      	beq.n	800a372 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a338:	4b25      	ldr	r3, [pc, #148]	@ (800a3d0 <xTaskNotifyWait+0xb8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	43d2      	mvns	r2, r2
 800a344:	400a      	ands	r2, r1
 800a346:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a34a:	4b21      	ldr	r3, [pc, #132]	@ (800a3d0 <xTaskNotifyWait+0xb8>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00b      	beq.n	800a372 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a35a:	2101      	movs	r1, #1
 800a35c:	6838      	ldr	r0, [r7, #0]
 800a35e:	f000 fa09 	bl	800a774 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a362:	4b1c      	ldr	r3, [pc, #112]	@ (800a3d4 <xTaskNotifyWait+0xbc>)
 800a364:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a372:	f000 fbcb 	bl	800ab0c <vPortExitCritical>

		taskENTER_CRITICAL();
 800a376:	f000 fb97 	bl	800aaa8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a380:	4b13      	ldr	r3, [pc, #76]	@ (800a3d0 <xTaskNotifyWait+0xb8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a38c:	4b10      	ldr	r3, [pc, #64]	@ (800a3d0 <xTaskNotifyWait+0xb8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b02      	cmp	r3, #2
 800a398:	d002      	beq.n	800a3a0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a39a:	2300      	movs	r3, #0
 800a39c:	617b      	str	r3, [r7, #20]
 800a39e:	e00a      	b.n	800a3b6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d0 <xTaskNotifyWait+0xb8>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	43d2      	mvns	r2, r2
 800a3ac:	400a      	ands	r2, r1
 800a3ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3b6:	4b06      	ldr	r3, [pc, #24]	@ (800a3d0 <xTaskNotifyWait+0xb8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800a3c0:	f000 fba4 	bl	800ab0c <vPortExitCritical>

		return xReturn;
 800a3c4:	697b      	ldr	r3, [r7, #20]
	}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000a24 	.word	0x20000a24
 800a3d4:	e000ed04 	.word	0xe000ed04

0800a3d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08a      	sub	sp, #40	@ 0x28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10b      	bne.n	800a40a <xTaskGenericNotify+0x32>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	61bb      	str	r3, [r7, #24]
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop
 800a408:	e7fd      	b.n	800a406 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a40e:	f000 fb4b 	bl	800aaa8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d004      	beq.n	800a422 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a428:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	2202      	movs	r2, #2
 800a42e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	2b04      	cmp	r3, #4
 800a436:	d82e      	bhi.n	800a496 <xTaskGenericNotify+0xbe>
 800a438:	a201      	add	r2, pc, #4	@ (adr r2, 800a440 <xTaskGenericNotify+0x68>)
 800a43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43e:	bf00      	nop
 800a440:	0800a4bb 	.word	0x0800a4bb
 800a444:	0800a455 	.word	0x0800a455
 800a448:	0800a467 	.word	0x0800a467
 800a44c:	0800a477 	.word	0x0800a477
 800a450:	0800a481 	.word	0x0800a481
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	431a      	orrs	r2, r3
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a464:	e02c      	b.n	800a4c0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a474:	e024      	b.n	800a4c0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a47e:	e01f      	b.n	800a4c0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a480:	7ffb      	ldrb	r3, [r7, #31]
 800a482:	2b02      	cmp	r3, #2
 800a484:	d004      	beq.n	800a490 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a48e:	e017      	b.n	800a4c0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800a490:	2300      	movs	r3, #0
 800a492:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800a494:	e014      	b.n	800a4c0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a0:	d00d      	beq.n	800a4be <xTaskGenericNotify+0xe6>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	617b      	str	r3, [r7, #20]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <xTaskGenericNotify+0xde>
					break;
 800a4ba:	bf00      	nop
 800a4bc:	e000      	b.n	800a4c0 <xTaskGenericNotify+0xe8>

					break;
 800a4be:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a4c0:	7ffb      	ldrb	r3, [r7, #31]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d13a      	bne.n	800a53c <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fbac 	bl	8008c28 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	409a      	lsls	r2, r3
 800a4d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a54c <xTaskGenericNotify+0x174>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	4a1b      	ldr	r2, [pc, #108]	@ (800a54c <xTaskGenericNotify+0x174>)
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4a18      	ldr	r2, [pc, #96]	@ (800a550 <xTaskGenericNotify+0x178>)
 800a4f0:	441a      	add	r2, r3
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7fe fb38 	bl	8008b6e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00b      	beq.n	800a51e <xTaskGenericNotify+0x146>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	613b      	str	r3, [r7, #16]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a522:	4b0c      	ldr	r3, [pc, #48]	@ (800a554 <xTaskGenericNotify+0x17c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a528:	429a      	cmp	r2, r3
 800a52a:	d907      	bls.n	800a53c <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a52c:	4b0a      	ldr	r3, [pc, #40]	@ (800a558 <xTaskGenericNotify+0x180>)
 800a52e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a53c:	f000 fae6 	bl	800ab0c <vPortExitCritical>

		return xReturn;
 800a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a542:	4618      	mov	r0, r3
 800a544:	3728      	adds	r7, #40	@ 0x28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000b2c 	.word	0x20000b2c
 800a550:	20000a28 	.word	0x20000a28
 800a554:	20000a24 	.word	0x20000a24
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08e      	sub	sp, #56	@ 0x38
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	603b      	str	r3, [r7, #0]
 800a568:	4613      	mov	r3, r2
 800a56a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a56c:	2301      	movs	r3, #1
 800a56e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10b      	bne.n	800a58e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800a576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a588:	bf00      	nop
 800a58a:	bf00      	nop
 800a58c:	e7fd      	b.n	800a58a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a58e:	f000 fb6b 	bl	800ac68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a596:	f3ef 8211 	mrs	r2, BASEPRI
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	623a      	str	r2, [r7, #32]
 800a5ac:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5ae:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a5c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d82e      	bhi.n	800a638 <xTaskGenericNotifyFromISR+0xdc>
 800a5da:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e0 <xTaskGenericNotifyFromISR+0x84>)
 800a5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e0:	0800a65d 	.word	0x0800a65d
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a607 	.word	0x0800a607
 800a5ec:	0800a617 	.word	0x0800a617
 800a5f0:	0800a621 	.word	0x0800a621
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a604:	e02d      	b.n	800a662 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a608:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a614:	e025      	b.n	800a662 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a61e:	e020      	b.n	800a662 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a620:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a624:	2b02      	cmp	r3, #2
 800a626:	d004      	beq.n	800a632 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a630:	e017      	b.n	800a662 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800a632:	2300      	movs	r3, #0
 800a634:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800a636:	e014      	b.n	800a662 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a642:	d00d      	beq.n	800a660 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	61bb      	str	r3, [r7, #24]
}
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	e7fd      	b.n	800a658 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a65c:	bf00      	nop
 800a65e:	e000      	b.n	800a662 <xTaskGenericNotifyFromISR+0x106>
					break;
 800a660:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a662:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a666:	2b01      	cmp	r3, #1
 800a668:	d146      	bne.n	800a6f8 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	617b      	str	r3, [r7, #20]
}
 800a684:	bf00      	nop
 800a686:	bf00      	nop
 800a688:	e7fd      	b.n	800a686 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a68a:	4b21      	ldr	r3, [pc, #132]	@ (800a710 <xTaskGenericNotifyFromISR+0x1b4>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d11c      	bne.n	800a6cc <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	3304      	adds	r3, #4
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fac6 	bl	8008c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	409a      	lsls	r2, r3
 800a6a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a714 <xTaskGenericNotifyFromISR+0x1b8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	4a1a      	ldr	r2, [pc, #104]	@ (800a714 <xTaskGenericNotifyFromISR+0x1b8>)
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4a17      	ldr	r2, [pc, #92]	@ (800a718 <xTaskGenericNotifyFromISR+0x1bc>)
 800a6bc:	441a      	add	r2, r3
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	f7fe fa52 	bl	8008b6e <vListInsertEnd>
 800a6ca:	e005      	b.n	800a6d8 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ce:	3318      	adds	r3, #24
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4812      	ldr	r0, [pc, #72]	@ (800a71c <xTaskGenericNotifyFromISR+0x1c0>)
 800a6d4:	f7fe fa4b 	bl	8008b6e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6dc:	4b10      	ldr	r3, [pc, #64]	@ (800a720 <xTaskGenericNotifyFromISR+0x1c4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d908      	bls.n	800a6f8 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a6e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a6ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a6f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a724 <xTaskGenericNotifyFromISR+0x1c8>)
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a702:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800a706:	4618      	mov	r0, r3
 800a708:	3738      	adds	r7, #56	@ 0x38
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20000b4c 	.word	0x20000b4c
 800a714:	20000b2c 	.word	0x20000b2c
 800a718:	20000a28 	.word	0x20000a28
 800a71c:	20000ae4 	.word	0x20000ae4
 800a720:	20000a24 	.word	0x20000a24
 800a724:	20000b38 	.word	0x20000b38

0800a728 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d102      	bne.n	800a73c <xTaskNotifyStateClear+0x14>
 800a736:	4b0e      	ldr	r3, [pc, #56]	@ (800a770 <xTaskNotifyStateClear+0x48>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	e000      	b.n	800a73e <xTaskNotifyStateClear+0x16>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a740:	f000 f9b2 	bl	800aaa8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d106      	bne.n	800a75e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 800a758:	2301      	movs	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e001      	b.n	800a762 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a75e:	2300      	movs	r3, #0
 800a760:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a762:	f000 f9d3 	bl	800ab0c <vPortExitCritical>

		return xReturn;
 800a766:	68fb      	ldr	r3, [r7, #12]
	}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20000a24 	.word	0x20000a24

0800a774 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a77e:	4b29      	ldr	r3, [pc, #164]	@ (800a824 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a784:	4b28      	ldr	r3, [pc, #160]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	3304      	adds	r3, #4
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fa4c 	bl	8008c28 <uxListRemove>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a796:	4b24      	ldr	r3, [pc, #144]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79c:	2201      	movs	r2, #1
 800a79e:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a2:	43da      	mvns	r2, r3
 800a7a4:	4b21      	ldr	r3, [pc, #132]	@ (800a82c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	4a20      	ldr	r2, [pc, #128]	@ (800a82c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b4:	d10a      	bne.n	800a7cc <prvAddCurrentTaskToDelayedList+0x58>
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d007      	beq.n	800a7cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7bc:	4b1a      	ldr	r3, [pc, #104]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	481a      	ldr	r0, [pc, #104]	@ (800a830 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a7c6:	f7fe f9d2 	bl	8008b6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7ca:	e026      	b.n	800a81a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7d4:	4b14      	ldr	r3, [pc, #80]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d209      	bcs.n	800a7f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7e4:	4b13      	ldr	r3, [pc, #76]	@ (800a834 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7fe f9e0 	bl	8008bb6 <vListInsert>
}
 800a7f6:	e010      	b.n	800a81a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a838 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3304      	adds	r3, #4
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	f7fe f9d6 	bl	8008bb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a80a:	4b0c      	ldr	r3, [pc, #48]	@ (800a83c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	429a      	cmp	r2, r3
 800a812:	d202      	bcs.n	800a81a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a814:	4a09      	ldr	r2, [pc, #36]	@ (800a83c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	6013      	str	r3, [r2, #0]
}
 800a81a:	bf00      	nop
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20000b28 	.word	0x20000b28
 800a828:	20000a24 	.word	0x20000a24
 800a82c:	20000b2c 	.word	0x20000b2c
 800a830:	20000b10 	.word	0x20000b10
 800a834:	20000ae0 	.word	0x20000ae0
 800a838:	20000adc 	.word	0x20000adc
 800a83c:	20000b44 	.word	0x20000b44

0800a840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	3b04      	subs	r3, #4
 800a850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3b04      	subs	r3, #4
 800a85e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f023 0201 	bic.w	r2, r3, #1
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3b04      	subs	r3, #4
 800a86e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a870:	4a0c      	ldr	r2, [pc, #48]	@ (800a8a4 <pxPortInitialiseStack+0x64>)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3b14      	subs	r3, #20
 800a87a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3b04      	subs	r3, #4
 800a886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f06f 0202 	mvn.w	r2, #2
 800a88e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3b20      	subs	r3, #32
 800a894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a896:	68fb      	ldr	r3, [r7, #12]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	0800a8a9 	.word	0x0800a8a9

0800a8a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8b2:	4b13      	ldr	r3, [pc, #76]	@ (800a900 <prvTaskExitError+0x58>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d00b      	beq.n	800a8d4 <prvTaskExitError+0x2c>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	60fb      	str	r3, [r7, #12]
}
 800a8ce:	bf00      	nop
 800a8d0:	bf00      	nop
 800a8d2:	e7fd      	b.n	800a8d0 <prvTaskExitError+0x28>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	60bb      	str	r3, [r7, #8]
}
 800a8e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8e8:	bf00      	nop
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d0fc      	beq.n	800a8ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	20000038 	.word	0x20000038
	...

0800a910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a910:	4b07      	ldr	r3, [pc, #28]	@ (800a930 <pxCurrentTCBConst2>)
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	6808      	ldr	r0, [r1, #0]
 800a916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	f380 8809 	msr	PSP, r0
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f380 8811 	msr	BASEPRI, r0
 800a92a:	4770      	bx	lr
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst2>:
 800a930:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a938:	4808      	ldr	r0, [pc, #32]	@ (800a95c <prvPortStartFirstTask+0x24>)
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f380 8808 	msr	MSP, r0
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8814 	msr	CONTROL, r0
 800a94a:	b662      	cpsie	i
 800a94c:	b661      	cpsie	f
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	df00      	svc	0
 800a958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a95a:	bf00      	nop
 800a95c:	e000ed08 	.word	0xe000ed08

0800a960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a966:	4b47      	ldr	r3, [pc, #284]	@ (800aa84 <xPortStartScheduler+0x124>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a47      	ldr	r2, [pc, #284]	@ (800aa88 <xPortStartScheduler+0x128>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d10b      	bne.n	800a988 <xPortStartScheduler+0x28>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	60fb      	str	r3, [r7, #12]
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	e7fd      	b.n	800a984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a988:	4b3e      	ldr	r3, [pc, #248]	@ (800aa84 <xPortStartScheduler+0x124>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa8c <xPortStartScheduler+0x12c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d10b      	bne.n	800a9aa <xPortStartScheduler+0x4a>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	613b      	str	r3, [r7, #16]
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop
 800a9a8:	e7fd      	b.n	800a9a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9aa:	4b39      	ldr	r3, [pc, #228]	@ (800aa90 <xPortStartScheduler+0x130>)
 800a9ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	22ff      	movs	r2, #255	@ 0xff
 800a9ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	4b31      	ldr	r3, [pc, #196]	@ (800aa94 <xPortStartScheduler+0x134>)
 800a9d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9d2:	4b31      	ldr	r3, [pc, #196]	@ (800aa98 <xPortStartScheduler+0x138>)
 800a9d4:	2207      	movs	r2, #7
 800a9d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9d8:	e009      	b.n	800a9ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a9da:	4b2f      	ldr	r3, [pc, #188]	@ (800aa98 <xPortStartScheduler+0x138>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	4a2d      	ldr	r2, [pc, #180]	@ (800aa98 <xPortStartScheduler+0x138>)
 800a9e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9f6:	2b80      	cmp	r3, #128	@ 0x80
 800a9f8:	d0ef      	beq.n	800a9da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9fa:	4b27      	ldr	r3, [pc, #156]	@ (800aa98 <xPortStartScheduler+0x138>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f1c3 0307 	rsb	r3, r3, #7
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d00b      	beq.n	800aa1e <xPortStartScheduler+0xbe>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	60bb      	str	r3, [r7, #8]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa1e:	4b1e      	ldr	r3, [pc, #120]	@ (800aa98 <xPortStartScheduler+0x138>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	4a1c      	ldr	r2, [pc, #112]	@ (800aa98 <xPortStartScheduler+0x138>)
 800aa26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa28:	4b1b      	ldr	r3, [pc, #108]	@ (800aa98 <xPortStartScheduler+0x138>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa30:	4a19      	ldr	r2, [pc, #100]	@ (800aa98 <xPortStartScheduler+0x138>)
 800aa32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa3c:	4b17      	ldr	r3, [pc, #92]	@ (800aa9c <xPortStartScheduler+0x13c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a16      	ldr	r2, [pc, #88]	@ (800aa9c <xPortStartScheduler+0x13c>)
 800aa42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa48:	4b14      	ldr	r3, [pc, #80]	@ (800aa9c <xPortStartScheduler+0x13c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a13      	ldr	r2, [pc, #76]	@ (800aa9c <xPortStartScheduler+0x13c>)
 800aa4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa54:	f000 f8da 	bl	800ac0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa58:	4b11      	ldr	r3, [pc, #68]	@ (800aaa0 <xPortStartScheduler+0x140>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa5e:	f000 f8f9 	bl	800ac54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa62:	4b10      	ldr	r3, [pc, #64]	@ (800aaa4 <xPortStartScheduler+0x144>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a0f      	ldr	r2, [pc, #60]	@ (800aaa4 <xPortStartScheduler+0x144>)
 800aa68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa6e:	f7ff ff63 	bl	800a938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa72:	f7ff f94b 	bl	8009d0c <vTaskSwitchContext>
	prvTaskExitError();
 800aa76:	f7ff ff17 	bl	800a8a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	e000ed00 	.word	0xe000ed00
 800aa88:	410fc271 	.word	0x410fc271
 800aa8c:	410fc270 	.word	0x410fc270
 800aa90:	e000e400 	.word	0xe000e400
 800aa94:	20000b50 	.word	0x20000b50
 800aa98:	20000b54 	.word	0x20000b54
 800aa9c:	e000ed20 	.word	0xe000ed20
 800aaa0:	20000038 	.word	0x20000038
 800aaa4:	e000ef34 	.word	0xe000ef34

0800aaa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	607b      	str	r3, [r7, #4]
}
 800aac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aac2:	4b10      	ldr	r3, [pc, #64]	@ (800ab04 <vPortEnterCritical+0x5c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3301      	adds	r3, #1
 800aac8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab04 <vPortEnterCritical+0x5c>)
 800aaca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aacc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab04 <vPortEnterCritical+0x5c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d110      	bne.n	800aaf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aad4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab08 <vPortEnterCritical+0x60>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00b      	beq.n	800aaf6 <vPortEnterCritical+0x4e>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	603b      	str	r3, [r7, #0]
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	e7fd      	b.n	800aaf2 <vPortEnterCritical+0x4a>
	}
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	20000038 	.word	0x20000038
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab12:	4b12      	ldr	r3, [pc, #72]	@ (800ab5c <vPortExitCritical+0x50>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10b      	bne.n	800ab32 <vPortExitCritical+0x26>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	607b      	str	r3, [r7, #4]
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	e7fd      	b.n	800ab2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab32:	4b0a      	ldr	r3, [pc, #40]	@ (800ab5c <vPortExitCritical+0x50>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	4a08      	ldr	r2, [pc, #32]	@ (800ab5c <vPortExitCritical+0x50>)
 800ab3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab3c:	4b07      	ldr	r3, [pc, #28]	@ (800ab5c <vPortExitCritical+0x50>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <vPortExitCritical+0x44>
 800ab44:	2300      	movs	r3, #0
 800ab46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f383 8811 	msr	BASEPRI, r3
}
 800ab4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20000038 	.word	0x20000038

0800ab60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab60:	f3ef 8009 	mrs	r0, PSP
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	4b15      	ldr	r3, [pc, #84]	@ (800abc0 <pxCurrentTCBConst>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	f01e 0f10 	tst.w	lr, #16
 800ab70:	bf08      	it	eq
 800ab72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7a:	6010      	str	r0, [r2, #0]
 800ab7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab84:	f380 8811 	msr	BASEPRI, r0
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f7ff f8bc 	bl	8009d0c <vTaskSwitchContext>
 800ab94:	f04f 0000 	mov.w	r0, #0
 800ab98:	f380 8811 	msr	BASEPRI, r0
 800ab9c:	bc09      	pop	{r0, r3}
 800ab9e:	6819      	ldr	r1, [r3, #0]
 800aba0:	6808      	ldr	r0, [r1, #0]
 800aba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba6:	f01e 0f10 	tst.w	lr, #16
 800abaa:	bf08      	it	eq
 800abac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abb0:	f380 8809 	msr	PSP, r0
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	f3af 8000 	nop.w

0800abc0 <pxCurrentTCBConst>:
 800abc0:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop

0800abc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	607b      	str	r3, [r7, #4]
}
 800abe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abe2:	f7fe ffd9 	bl	8009b98 <xTaskIncrementTick>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abec:	4b06      	ldr	r3, [pc, #24]	@ (800ac08 <SysTick_Handler+0x40>)
 800abee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f383 8811 	msr	BASEPRI, r3
}
 800abfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac10:	4b0b      	ldr	r3, [pc, #44]	@ (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <vPortSetupTimerInterrupt+0x38>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac48 <vPortSetupTimerInterrupt+0x3c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a0a      	ldr	r2, [pc, #40]	@ (800ac4c <vPortSetupTimerInterrupt+0x40>)
 800ac22:	fba2 2303 	umull	r2, r3, r2, r3
 800ac26:	099b      	lsrs	r3, r3, #6
 800ac28:	4a09      	ldr	r2, [pc, #36]	@ (800ac50 <vPortSetupTimerInterrupt+0x44>)
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac2e:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac30:	2207      	movs	r2, #7
 800ac32:	601a      	str	r2, [r3, #0]
}
 800ac34:	bf00      	nop
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	e000e010 	.word	0xe000e010
 800ac44:	e000e018 	.word	0xe000e018
 800ac48:	2000002c 	.word	0x2000002c
 800ac4c:	10624dd3 	.word	0x10624dd3
 800ac50:	e000e014 	.word	0xe000e014

0800ac54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac64 <vPortEnableVFP+0x10>
 800ac58:	6801      	ldr	r1, [r0, #0]
 800ac5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac5e:	6001      	str	r1, [r0, #0]
 800ac60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac62:	bf00      	nop
 800ac64:	e000ed88 	.word	0xe000ed88

0800ac68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac6e:	f3ef 8305 	mrs	r3, IPSR
 800ac72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b0f      	cmp	r3, #15
 800ac78:	d915      	bls.n	800aca6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac7a:	4a18      	ldr	r2, [pc, #96]	@ (800acdc <vPortValidateInterruptPriority+0x74>)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac84:	4b16      	ldr	r3, [pc, #88]	@ (800ace0 <vPortValidateInterruptPriority+0x78>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	7afa      	ldrb	r2, [r7, #11]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d20b      	bcs.n	800aca6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	607b      	str	r3, [r7, #4]
}
 800aca0:	bf00      	nop
 800aca2:	bf00      	nop
 800aca4:	e7fd      	b.n	800aca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aca6:	4b0f      	ldr	r3, [pc, #60]	@ (800ace4 <vPortValidateInterruptPriority+0x7c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acae:	4b0e      	ldr	r3, [pc, #56]	@ (800ace8 <vPortValidateInterruptPriority+0x80>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d90b      	bls.n	800acce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	603b      	str	r3, [r7, #0]
}
 800acc8:	bf00      	nop
 800acca:	bf00      	nop
 800accc:	e7fd      	b.n	800acca <vPortValidateInterruptPriority+0x62>
	}
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	e000e3f0 	.word	0xe000e3f0
 800ace0:	20000b50 	.word	0x20000b50
 800ace4:	e000ed0c 	.word	0xe000ed0c
 800ace8:	20000b54 	.word	0x20000b54

0800acec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	@ 0x28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acf4:	2300      	movs	r3, #0
 800acf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acf8:	f7fe fea2 	bl	8009a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acfc:	4b5c      	ldr	r3, [pc, #368]	@ (800ae70 <pvPortMalloc+0x184>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad04:	f000 f924 	bl	800af50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad08:	4b5a      	ldr	r3, [pc, #360]	@ (800ae74 <pvPortMalloc+0x188>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4013      	ands	r3, r2
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f040 8095 	bne.w	800ae40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01e      	beq.n	800ad5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ad1c:	2208      	movs	r2, #8
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4413      	add	r3, r2
 800ad22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d015      	beq.n	800ad5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f023 0307 	bic.w	r3, r3, #7
 800ad34:	3308      	adds	r3, #8
 800ad36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00b      	beq.n	800ad5a <pvPortMalloc+0x6e>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	617b      	str	r3, [r7, #20]
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	e7fd      	b.n	800ad56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d06f      	beq.n	800ae40 <pvPortMalloc+0x154>
 800ad60:	4b45      	ldr	r3, [pc, #276]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d86a      	bhi.n	800ae40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad6a:	4b44      	ldr	r3, [pc, #272]	@ (800ae7c <pvPortMalloc+0x190>)
 800ad6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad6e:	4b43      	ldr	r3, [pc, #268]	@ (800ae7c <pvPortMalloc+0x190>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad74:	e004      	b.n	800ad80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d903      	bls.n	800ad92 <pvPortMalloc+0xa6>
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1f1      	bne.n	800ad76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad92:	4b37      	ldr	r3, [pc, #220]	@ (800ae70 <pvPortMalloc+0x184>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d051      	beq.n	800ae40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2208      	movs	r2, #8
 800ada2:	4413      	add	r3, r2
 800ada4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	1ad2      	subs	r2, r2, r3
 800adb6:	2308      	movs	r3, #8
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	429a      	cmp	r2, r3
 800adbc:	d920      	bls.n	800ae00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4413      	add	r3, r2
 800adc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00b      	beq.n	800ade8 <pvPortMalloc+0xfc>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	613b      	str	r3, [r7, #16]
}
 800ade2:	bf00      	nop
 800ade4:	bf00      	nop
 800ade6:	e7fd      	b.n	800ade4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ade8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	1ad2      	subs	r2, r2, r3
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adfa:	69b8      	ldr	r0, [r7, #24]
 800adfc:	f000 f90a 	bl	800b014 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae00:	4b1d      	ldr	r3, [pc, #116]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ae0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	4b1b      	ldr	r3, [pc, #108]	@ (800ae80 <pvPortMalloc+0x194>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d203      	bcs.n	800ae22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae1a:	4b17      	ldr	r3, [pc, #92]	@ (800ae78 <pvPortMalloc+0x18c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a18      	ldr	r2, [pc, #96]	@ (800ae80 <pvPortMalloc+0x194>)
 800ae20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	4b13      	ldr	r3, [pc, #76]	@ (800ae74 <pvPortMalloc+0x188>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae36:	4b13      	ldr	r3, [pc, #76]	@ (800ae84 <pvPortMalloc+0x198>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	4a11      	ldr	r2, [pc, #68]	@ (800ae84 <pvPortMalloc+0x198>)
 800ae3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae40:	f7fe fe0c 	bl	8009a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <pvPortMalloc+0x17a>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	60fb      	str	r3, [r7, #12]
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	e7fd      	b.n	800ae62 <pvPortMalloc+0x176>
	return pvReturn;
 800ae66:	69fb      	ldr	r3, [r7, #28]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3728      	adds	r7, #40	@ 0x28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	20005980 	.word	0x20005980
 800ae74:	20005994 	.word	0x20005994
 800ae78:	20005984 	.word	0x20005984
 800ae7c:	20005978 	.word	0x20005978
 800ae80:	20005988 	.word	0x20005988
 800ae84:	2000598c 	.word	0x2000598c

0800ae88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d04f      	beq.n	800af3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae9a:	2308      	movs	r3, #8
 800ae9c:	425b      	negs	r3, r3
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	4413      	add	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	4b25      	ldr	r3, [pc, #148]	@ (800af44 <vPortFree+0xbc>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10b      	bne.n	800aece <vPortFree+0x46>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	60fb      	str	r3, [r7, #12]
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	e7fd      	b.n	800aeca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00b      	beq.n	800aeee <vPortFree+0x66>
	__asm volatile
 800aed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	60bb      	str	r3, [r7, #8]
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	e7fd      	b.n	800aeea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	4b14      	ldr	r3, [pc, #80]	@ (800af44 <vPortFree+0xbc>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4013      	ands	r3, r2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01e      	beq.n	800af3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d11a      	bne.n	800af3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	4b0e      	ldr	r3, [pc, #56]	@ (800af44 <vPortFree+0xbc>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	43db      	mvns	r3, r3
 800af0e:	401a      	ands	r2, r3
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af14:	f7fe fd94 	bl	8009a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	4b0a      	ldr	r3, [pc, #40]	@ (800af48 <vPortFree+0xc0>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4413      	add	r3, r2
 800af22:	4a09      	ldr	r2, [pc, #36]	@ (800af48 <vPortFree+0xc0>)
 800af24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af26:	6938      	ldr	r0, [r7, #16]
 800af28:	f000 f874 	bl	800b014 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af2c:	4b07      	ldr	r3, [pc, #28]	@ (800af4c <vPortFree+0xc4>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3301      	adds	r3, #1
 800af32:	4a06      	ldr	r2, [pc, #24]	@ (800af4c <vPortFree+0xc4>)
 800af34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af36:	f7fe fd91 	bl	8009a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af3a:	bf00      	nop
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20005994 	.word	0x20005994
 800af48:	20005984 	.word	0x20005984
 800af4c:	20005990 	.word	0x20005990

0800af50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af56:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800af5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af5c:	4b27      	ldr	r3, [pc, #156]	@ (800affc <prvHeapInit+0xac>)
 800af5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00c      	beq.n	800af84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3307      	adds	r3, #7
 800af6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0307 	bic.w	r3, r3, #7
 800af76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	4a1f      	ldr	r2, [pc, #124]	@ (800affc <prvHeapInit+0xac>)
 800af80:	4413      	add	r3, r2
 800af82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af88:	4a1d      	ldr	r2, [pc, #116]	@ (800b000 <prvHeapInit+0xb0>)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af8e:	4b1c      	ldr	r3, [pc, #112]	@ (800b000 <prvHeapInit+0xb0>)
 800af90:	2200      	movs	r2, #0
 800af92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	4413      	add	r3, r2
 800af9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af9c:	2208      	movs	r2, #8
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	1a9b      	subs	r3, r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 0307 	bic.w	r3, r3, #7
 800afaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4a15      	ldr	r2, [pc, #84]	@ (800b004 <prvHeapInit+0xb4>)
 800afb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afb2:	4b14      	ldr	r3, [pc, #80]	@ (800b004 <prvHeapInit+0xb4>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2200      	movs	r2, #0
 800afb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afba:	4b12      	ldr	r3, [pc, #72]	@ (800b004 <prvHeapInit+0xb4>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afd0:	4b0c      	ldr	r3, [pc, #48]	@ (800b004 <prvHeapInit+0xb4>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	4a0a      	ldr	r2, [pc, #40]	@ (800b008 <prvHeapInit+0xb8>)
 800afde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	4a09      	ldr	r2, [pc, #36]	@ (800b00c <prvHeapInit+0xbc>)
 800afe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afe8:	4b09      	ldr	r3, [pc, #36]	@ (800b010 <prvHeapInit+0xc0>)
 800afea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800afee:	601a      	str	r2, [r3, #0]
}
 800aff0:	bf00      	nop
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20000b58 	.word	0x20000b58
 800b000:	20005978 	.word	0x20005978
 800b004:	20005980 	.word	0x20005980
 800b008:	20005988 	.word	0x20005988
 800b00c:	20005984 	.word	0x20005984
 800b010:	20005994 	.word	0x20005994

0800b014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b01c:	4b28      	ldr	r3, [pc, #160]	@ (800b0c0 <prvInsertBlockIntoFreeList+0xac>)
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	e002      	b.n	800b028 <prvInsertBlockIntoFreeList+0x14>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d8f7      	bhi.n	800b022 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	4413      	add	r3, r2
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	429a      	cmp	r2, r3
 800b042:	d108      	bne.n	800b056 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	441a      	add	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	441a      	add	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d118      	bne.n	800b09c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	4b15      	ldr	r3, [pc, #84]	@ (800b0c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d00d      	beq.n	800b092 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	441a      	add	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	e008      	b.n	800b0a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b092:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	601a      	str	r2, [r3, #0]
 800b09a:	e003      	b.n	800b0a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d002      	beq.n	800b0b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	20005978 	.word	0x20005978
 800b0c4:	20005980 	.word	0x20005980

0800b0c8 <malloc>:
 800b0c8:	4b02      	ldr	r3, [pc, #8]	@ (800b0d4 <malloc+0xc>)
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	6818      	ldr	r0, [r3, #0]
 800b0ce:	f000 b825 	b.w	800b11c <_malloc_r>
 800b0d2:	bf00      	nop
 800b0d4:	200001b4 	.word	0x200001b4

0800b0d8 <sbrk_aligned>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	4e0f      	ldr	r6, [pc, #60]	@ (800b118 <sbrk_aligned+0x40>)
 800b0dc:	460c      	mov	r4, r1
 800b0de:	6831      	ldr	r1, [r6, #0]
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	b911      	cbnz	r1, 800b0ea <sbrk_aligned+0x12>
 800b0e4:	f001 ff94 	bl	800d010 <_sbrk_r>
 800b0e8:	6030      	str	r0, [r6, #0]
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f001 ff8f 	bl	800d010 <_sbrk_r>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d103      	bne.n	800b0fe <sbrk_aligned+0x26>
 800b0f6:	f04f 34ff 	mov.w	r4, #4294967295
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
 800b0fe:	1cc4      	adds	r4, r0, #3
 800b100:	f024 0403 	bic.w	r4, r4, #3
 800b104:	42a0      	cmp	r0, r4
 800b106:	d0f8      	beq.n	800b0fa <sbrk_aligned+0x22>
 800b108:	1a21      	subs	r1, r4, r0
 800b10a:	4628      	mov	r0, r5
 800b10c:	f001 ff80 	bl	800d010 <_sbrk_r>
 800b110:	3001      	adds	r0, #1
 800b112:	d1f2      	bne.n	800b0fa <sbrk_aligned+0x22>
 800b114:	e7ef      	b.n	800b0f6 <sbrk_aligned+0x1e>
 800b116:	bf00      	nop
 800b118:	20005998 	.word	0x20005998

0800b11c <_malloc_r>:
 800b11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b120:	1ccd      	adds	r5, r1, #3
 800b122:	f025 0503 	bic.w	r5, r5, #3
 800b126:	3508      	adds	r5, #8
 800b128:	2d0c      	cmp	r5, #12
 800b12a:	bf38      	it	cc
 800b12c:	250c      	movcc	r5, #12
 800b12e:	2d00      	cmp	r5, #0
 800b130:	4606      	mov	r6, r0
 800b132:	db01      	blt.n	800b138 <_malloc_r+0x1c>
 800b134:	42a9      	cmp	r1, r5
 800b136:	d904      	bls.n	800b142 <_malloc_r+0x26>
 800b138:	230c      	movs	r3, #12
 800b13a:	6033      	str	r3, [r6, #0]
 800b13c:	2000      	movs	r0, #0
 800b13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b218 <_malloc_r+0xfc>
 800b146:	f000 f869 	bl	800b21c <__malloc_lock>
 800b14a:	f8d8 3000 	ldr.w	r3, [r8]
 800b14e:	461c      	mov	r4, r3
 800b150:	bb44      	cbnz	r4, 800b1a4 <_malloc_r+0x88>
 800b152:	4629      	mov	r1, r5
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff ffbf 	bl	800b0d8 <sbrk_aligned>
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	4604      	mov	r4, r0
 800b15e:	d158      	bne.n	800b212 <_malloc_r+0xf6>
 800b160:	f8d8 4000 	ldr.w	r4, [r8]
 800b164:	4627      	mov	r7, r4
 800b166:	2f00      	cmp	r7, #0
 800b168:	d143      	bne.n	800b1f2 <_malloc_r+0xd6>
 800b16a:	2c00      	cmp	r4, #0
 800b16c:	d04b      	beq.n	800b206 <_malloc_r+0xea>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	4639      	mov	r1, r7
 800b172:	4630      	mov	r0, r6
 800b174:	eb04 0903 	add.w	r9, r4, r3
 800b178:	f001 ff4a 	bl	800d010 <_sbrk_r>
 800b17c:	4581      	cmp	r9, r0
 800b17e:	d142      	bne.n	800b206 <_malloc_r+0xea>
 800b180:	6821      	ldr	r1, [r4, #0]
 800b182:	1a6d      	subs	r5, r5, r1
 800b184:	4629      	mov	r1, r5
 800b186:	4630      	mov	r0, r6
 800b188:	f7ff ffa6 	bl	800b0d8 <sbrk_aligned>
 800b18c:	3001      	adds	r0, #1
 800b18e:	d03a      	beq.n	800b206 <_malloc_r+0xea>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	442b      	add	r3, r5
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	f8d8 3000 	ldr.w	r3, [r8]
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	bb62      	cbnz	r2, 800b1f8 <_malloc_r+0xdc>
 800b19e:	f8c8 7000 	str.w	r7, [r8]
 800b1a2:	e00f      	b.n	800b1c4 <_malloc_r+0xa8>
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	1b52      	subs	r2, r2, r5
 800b1a8:	d420      	bmi.n	800b1ec <_malloc_r+0xd0>
 800b1aa:	2a0b      	cmp	r2, #11
 800b1ac:	d917      	bls.n	800b1de <_malloc_r+0xc2>
 800b1ae:	1961      	adds	r1, r4, r5
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	6025      	str	r5, [r4, #0]
 800b1b4:	bf18      	it	ne
 800b1b6:	6059      	strne	r1, [r3, #4]
 800b1b8:	6863      	ldr	r3, [r4, #4]
 800b1ba:	bf08      	it	eq
 800b1bc:	f8c8 1000 	streq.w	r1, [r8]
 800b1c0:	5162      	str	r2, [r4, r5]
 800b1c2:	604b      	str	r3, [r1, #4]
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f000 f82f 	bl	800b228 <__malloc_unlock>
 800b1ca:	f104 000b 	add.w	r0, r4, #11
 800b1ce:	1d23      	adds	r3, r4, #4
 800b1d0:	f020 0007 	bic.w	r0, r0, #7
 800b1d4:	1ac2      	subs	r2, r0, r3
 800b1d6:	bf1c      	itt	ne
 800b1d8:	1a1b      	subne	r3, r3, r0
 800b1da:	50a3      	strne	r3, [r4, r2]
 800b1dc:	e7af      	b.n	800b13e <_malloc_r+0x22>
 800b1de:	6862      	ldr	r2, [r4, #4]
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	bf0c      	ite	eq
 800b1e4:	f8c8 2000 	streq.w	r2, [r8]
 800b1e8:	605a      	strne	r2, [r3, #4]
 800b1ea:	e7eb      	b.n	800b1c4 <_malloc_r+0xa8>
 800b1ec:	4623      	mov	r3, r4
 800b1ee:	6864      	ldr	r4, [r4, #4]
 800b1f0:	e7ae      	b.n	800b150 <_malloc_r+0x34>
 800b1f2:	463c      	mov	r4, r7
 800b1f4:	687f      	ldr	r7, [r7, #4]
 800b1f6:	e7b6      	b.n	800b166 <_malloc_r+0x4a>
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	d1fb      	bne.n	800b1f8 <_malloc_r+0xdc>
 800b200:	2300      	movs	r3, #0
 800b202:	6053      	str	r3, [r2, #4]
 800b204:	e7de      	b.n	800b1c4 <_malloc_r+0xa8>
 800b206:	230c      	movs	r3, #12
 800b208:	6033      	str	r3, [r6, #0]
 800b20a:	4630      	mov	r0, r6
 800b20c:	f000 f80c 	bl	800b228 <__malloc_unlock>
 800b210:	e794      	b.n	800b13c <_malloc_r+0x20>
 800b212:	6005      	str	r5, [r0, #0]
 800b214:	e7d6      	b.n	800b1c4 <_malloc_r+0xa8>
 800b216:	bf00      	nop
 800b218:	2000599c 	.word	0x2000599c

0800b21c <__malloc_lock>:
 800b21c:	4801      	ldr	r0, [pc, #4]	@ (800b224 <__malloc_lock+0x8>)
 800b21e:	f001 bf44 	b.w	800d0aa <__retarget_lock_acquire_recursive>
 800b222:	bf00      	nop
 800b224:	20005ae0 	.word	0x20005ae0

0800b228 <__malloc_unlock>:
 800b228:	4801      	ldr	r0, [pc, #4]	@ (800b230 <__malloc_unlock+0x8>)
 800b22a:	f001 bf3f 	b.w	800d0ac <__retarget_lock_release_recursive>
 800b22e:	bf00      	nop
 800b230:	20005ae0 	.word	0x20005ae0

0800b234 <sulp>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	4604      	mov	r4, r0
 800b238:	460d      	mov	r5, r1
 800b23a:	ec45 4b10 	vmov	d0, r4, r5
 800b23e:	4616      	mov	r6, r2
 800b240:	f003 fcb0 	bl	800eba4 <__ulp>
 800b244:	ec51 0b10 	vmov	r0, r1, d0
 800b248:	b17e      	cbz	r6, 800b26a <sulp+0x36>
 800b24a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b24e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b252:	2b00      	cmp	r3, #0
 800b254:	dd09      	ble.n	800b26a <sulp+0x36>
 800b256:	051b      	lsls	r3, r3, #20
 800b258:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b25c:	2400      	movs	r4, #0
 800b25e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b262:	4622      	mov	r2, r4
 800b264:	462b      	mov	r3, r5
 800b266:	f7f5 f9c7 	bl	80005f8 <__aeabi_dmul>
 800b26a:	ec41 0b10 	vmov	d0, r0, r1
 800b26e:	bd70      	pop	{r4, r5, r6, pc}

0800b270 <_strtod_l>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	b09f      	sub	sp, #124	@ 0x7c
 800b276:	460c      	mov	r4, r1
 800b278:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b27a:	2200      	movs	r2, #0
 800b27c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b27e:	9005      	str	r0, [sp, #20]
 800b280:	f04f 0a00 	mov.w	sl, #0
 800b284:	f04f 0b00 	mov.w	fp, #0
 800b288:	460a      	mov	r2, r1
 800b28a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b28c:	7811      	ldrb	r1, [r2, #0]
 800b28e:	292b      	cmp	r1, #43	@ 0x2b
 800b290:	d04a      	beq.n	800b328 <_strtod_l+0xb8>
 800b292:	d838      	bhi.n	800b306 <_strtod_l+0x96>
 800b294:	290d      	cmp	r1, #13
 800b296:	d832      	bhi.n	800b2fe <_strtod_l+0x8e>
 800b298:	2908      	cmp	r1, #8
 800b29a:	d832      	bhi.n	800b302 <_strtod_l+0x92>
 800b29c:	2900      	cmp	r1, #0
 800b29e:	d03b      	beq.n	800b318 <_strtod_l+0xa8>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b2a6:	782a      	ldrb	r2, [r5, #0]
 800b2a8:	2a30      	cmp	r2, #48	@ 0x30
 800b2aa:	f040 80b2 	bne.w	800b412 <_strtod_l+0x1a2>
 800b2ae:	786a      	ldrb	r2, [r5, #1]
 800b2b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2b4:	2a58      	cmp	r2, #88	@ 0x58
 800b2b6:	d16e      	bne.n	800b396 <_strtod_l+0x126>
 800b2b8:	9302      	str	r3, [sp, #8]
 800b2ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	ab1a      	add	r3, sp, #104	@ 0x68
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	4a8f      	ldr	r2, [pc, #572]	@ (800b500 <_strtod_l+0x290>)
 800b2c4:	9805      	ldr	r0, [sp, #20]
 800b2c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b2c8:	a919      	add	r1, sp, #100	@ 0x64
 800b2ca:	f002 fe1b 	bl	800df04 <__gethex>
 800b2ce:	f010 060f 	ands.w	r6, r0, #15
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	d005      	beq.n	800b2e2 <_strtod_l+0x72>
 800b2d6:	2e06      	cmp	r6, #6
 800b2d8:	d128      	bne.n	800b32c <_strtod_l+0xbc>
 800b2da:	3501      	adds	r5, #1
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9519      	str	r5, [sp, #100]	@ 0x64
 800b2e0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b2e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f040 858e 	bne.w	800be06 <_strtod_l+0xb96>
 800b2ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ec:	b1cb      	cbz	r3, 800b322 <_strtod_l+0xb2>
 800b2ee:	4652      	mov	r2, sl
 800b2f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b2f4:	ec43 2b10 	vmov	d0, r2, r3
 800b2f8:	b01f      	add	sp, #124	@ 0x7c
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fe:	2920      	cmp	r1, #32
 800b300:	d1ce      	bne.n	800b2a0 <_strtod_l+0x30>
 800b302:	3201      	adds	r2, #1
 800b304:	e7c1      	b.n	800b28a <_strtod_l+0x1a>
 800b306:	292d      	cmp	r1, #45	@ 0x2d
 800b308:	d1ca      	bne.n	800b2a0 <_strtod_l+0x30>
 800b30a:	2101      	movs	r1, #1
 800b30c:	910e      	str	r1, [sp, #56]	@ 0x38
 800b30e:	1c51      	adds	r1, r2, #1
 800b310:	9119      	str	r1, [sp, #100]	@ 0x64
 800b312:	7852      	ldrb	r2, [r2, #1]
 800b314:	2a00      	cmp	r2, #0
 800b316:	d1c5      	bne.n	800b2a4 <_strtod_l+0x34>
 800b318:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b31a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f040 8570 	bne.w	800be02 <_strtod_l+0xb92>
 800b322:	4652      	mov	r2, sl
 800b324:	465b      	mov	r3, fp
 800b326:	e7e5      	b.n	800b2f4 <_strtod_l+0x84>
 800b328:	2100      	movs	r1, #0
 800b32a:	e7ef      	b.n	800b30c <_strtod_l+0x9c>
 800b32c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b32e:	b13a      	cbz	r2, 800b340 <_strtod_l+0xd0>
 800b330:	2135      	movs	r1, #53	@ 0x35
 800b332:	a81c      	add	r0, sp, #112	@ 0x70
 800b334:	f003 fd30 	bl	800ed98 <__copybits>
 800b338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b33a:	9805      	ldr	r0, [sp, #20]
 800b33c:	f003 f906 	bl	800e54c <_Bfree>
 800b340:	3e01      	subs	r6, #1
 800b342:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b344:	2e04      	cmp	r6, #4
 800b346:	d806      	bhi.n	800b356 <_strtod_l+0xe6>
 800b348:	e8df f006 	tbb	[pc, r6]
 800b34c:	201d0314 	.word	0x201d0314
 800b350:	14          	.byte	0x14
 800b351:	00          	.byte	0x00
 800b352:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b356:	05e1      	lsls	r1, r4, #23
 800b358:	bf48      	it	mi
 800b35a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b35e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b362:	0d1b      	lsrs	r3, r3, #20
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1bb      	bne.n	800b2e2 <_strtod_l+0x72>
 800b36a:	f001 fe73 	bl	800d054 <__errno>
 800b36e:	2322      	movs	r3, #34	@ 0x22
 800b370:	6003      	str	r3, [r0, #0]
 800b372:	e7b6      	b.n	800b2e2 <_strtod_l+0x72>
 800b374:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b378:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b37c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b380:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b384:	e7e7      	b.n	800b356 <_strtod_l+0xe6>
 800b386:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b508 <_strtod_l+0x298>
 800b38a:	e7e4      	b.n	800b356 <_strtod_l+0xe6>
 800b38c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b390:	f04f 3aff 	mov.w	sl, #4294967295
 800b394:	e7df      	b.n	800b356 <_strtod_l+0xe6>
 800b396:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b39c:	785b      	ldrb	r3, [r3, #1]
 800b39e:	2b30      	cmp	r3, #48	@ 0x30
 800b3a0:	d0f9      	beq.n	800b396 <_strtod_l+0x126>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d09d      	beq.n	800b2e2 <_strtod_l+0x72>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	2700      	movs	r7, #0
 800b3aa:	9308      	str	r3, [sp, #32]
 800b3ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3ae:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3b0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b3b2:	46b9      	mov	r9, r7
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b3b8:	7805      	ldrb	r5, [r0, #0]
 800b3ba:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b3be:	b2d9      	uxtb	r1, r3
 800b3c0:	2909      	cmp	r1, #9
 800b3c2:	d928      	bls.n	800b416 <_strtod_l+0x1a6>
 800b3c4:	494f      	ldr	r1, [pc, #316]	@ (800b504 <_strtod_l+0x294>)
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f001 fd79 	bl	800cebe <strncmp>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d032      	beq.n	800b436 <_strtod_l+0x1c6>
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b3d6:	464d      	mov	r5, r9
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2a65      	cmp	r2, #101	@ 0x65
 800b3dc:	d001      	beq.n	800b3e2 <_strtod_l+0x172>
 800b3de:	2a45      	cmp	r2, #69	@ 0x45
 800b3e0:	d114      	bne.n	800b40c <_strtod_l+0x19c>
 800b3e2:	b91d      	cbnz	r5, 800b3ec <_strtod_l+0x17c>
 800b3e4:	9a08      	ldr	r2, [sp, #32]
 800b3e6:	4302      	orrs	r2, r0
 800b3e8:	d096      	beq.n	800b318 <_strtod_l+0xa8>
 800b3ea:	2500      	movs	r5, #0
 800b3ec:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b3ee:	1c62      	adds	r2, r4, #1
 800b3f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3f2:	7862      	ldrb	r2, [r4, #1]
 800b3f4:	2a2b      	cmp	r2, #43	@ 0x2b
 800b3f6:	d07a      	beq.n	800b4ee <_strtod_l+0x27e>
 800b3f8:	2a2d      	cmp	r2, #45	@ 0x2d
 800b3fa:	d07e      	beq.n	800b4fa <_strtod_l+0x28a>
 800b3fc:	f04f 0c00 	mov.w	ip, #0
 800b400:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b404:	2909      	cmp	r1, #9
 800b406:	f240 8085 	bls.w	800b514 <_strtod_l+0x2a4>
 800b40a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b40c:	f04f 0800 	mov.w	r8, #0
 800b410:	e0a5      	b.n	800b55e <_strtod_l+0x2ee>
 800b412:	2300      	movs	r3, #0
 800b414:	e7c8      	b.n	800b3a8 <_strtod_l+0x138>
 800b416:	f1b9 0f08 	cmp.w	r9, #8
 800b41a:	bfd8      	it	le
 800b41c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b41e:	f100 0001 	add.w	r0, r0, #1
 800b422:	bfda      	itte	le
 800b424:	fb02 3301 	mlale	r3, r2, r1, r3
 800b428:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b42a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b42e:	f109 0901 	add.w	r9, r9, #1
 800b432:	9019      	str	r0, [sp, #100]	@ 0x64
 800b434:	e7bf      	b.n	800b3b6 <_strtod_l+0x146>
 800b436:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b43c:	785a      	ldrb	r2, [r3, #1]
 800b43e:	f1b9 0f00 	cmp.w	r9, #0
 800b442:	d03b      	beq.n	800b4bc <_strtod_l+0x24c>
 800b444:	900a      	str	r0, [sp, #40]	@ 0x28
 800b446:	464d      	mov	r5, r9
 800b448:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b44c:	2b09      	cmp	r3, #9
 800b44e:	d912      	bls.n	800b476 <_strtod_l+0x206>
 800b450:	2301      	movs	r3, #1
 800b452:	e7c2      	b.n	800b3da <_strtod_l+0x16a>
 800b454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b456:	1c5a      	adds	r2, r3, #1
 800b458:	9219      	str	r2, [sp, #100]	@ 0x64
 800b45a:	785a      	ldrb	r2, [r3, #1]
 800b45c:	3001      	adds	r0, #1
 800b45e:	2a30      	cmp	r2, #48	@ 0x30
 800b460:	d0f8      	beq.n	800b454 <_strtod_l+0x1e4>
 800b462:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b466:	2b08      	cmp	r3, #8
 800b468:	f200 84d2 	bhi.w	800be10 <_strtod_l+0xba0>
 800b46c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b46e:	900a      	str	r0, [sp, #40]	@ 0x28
 800b470:	2000      	movs	r0, #0
 800b472:	930c      	str	r3, [sp, #48]	@ 0x30
 800b474:	4605      	mov	r5, r0
 800b476:	3a30      	subs	r2, #48	@ 0x30
 800b478:	f100 0301 	add.w	r3, r0, #1
 800b47c:	d018      	beq.n	800b4b0 <_strtod_l+0x240>
 800b47e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b480:	4419      	add	r1, r3
 800b482:	910a      	str	r1, [sp, #40]	@ 0x28
 800b484:	462e      	mov	r6, r5
 800b486:	f04f 0e0a 	mov.w	lr, #10
 800b48a:	1c71      	adds	r1, r6, #1
 800b48c:	eba1 0c05 	sub.w	ip, r1, r5
 800b490:	4563      	cmp	r3, ip
 800b492:	dc15      	bgt.n	800b4c0 <_strtod_l+0x250>
 800b494:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b498:	182b      	adds	r3, r5, r0
 800b49a:	2b08      	cmp	r3, #8
 800b49c:	f105 0501 	add.w	r5, r5, #1
 800b4a0:	4405      	add	r5, r0
 800b4a2:	dc1a      	bgt.n	800b4da <_strtod_l+0x26a>
 800b4a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4a6:	230a      	movs	r3, #10
 800b4a8:	fb03 2301 	mla	r3, r3, r1, r2
 800b4ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b4b2:	1c51      	adds	r1, r2, #1
 800b4b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4b6:	7852      	ldrb	r2, [r2, #1]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	e7c5      	b.n	800b448 <_strtod_l+0x1d8>
 800b4bc:	4648      	mov	r0, r9
 800b4be:	e7ce      	b.n	800b45e <_strtod_l+0x1ee>
 800b4c0:	2e08      	cmp	r6, #8
 800b4c2:	dc05      	bgt.n	800b4d0 <_strtod_l+0x260>
 800b4c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b4c6:	fb0e f606 	mul.w	r6, lr, r6
 800b4ca:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b4cc:	460e      	mov	r6, r1
 800b4ce:	e7dc      	b.n	800b48a <_strtod_l+0x21a>
 800b4d0:	2910      	cmp	r1, #16
 800b4d2:	bfd8      	it	le
 800b4d4:	fb0e f707 	mulle.w	r7, lr, r7
 800b4d8:	e7f8      	b.n	800b4cc <_strtod_l+0x25c>
 800b4da:	2b0f      	cmp	r3, #15
 800b4dc:	bfdc      	itt	le
 800b4de:	230a      	movle	r3, #10
 800b4e0:	fb03 2707 	mlale	r7, r3, r7, r2
 800b4e4:	e7e3      	b.n	800b4ae <_strtod_l+0x23e>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e77a      	b.n	800b3e4 <_strtod_l+0x174>
 800b4ee:	f04f 0c00 	mov.w	ip, #0
 800b4f2:	1ca2      	adds	r2, r4, #2
 800b4f4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4f6:	78a2      	ldrb	r2, [r4, #2]
 800b4f8:	e782      	b.n	800b400 <_strtod_l+0x190>
 800b4fa:	f04f 0c01 	mov.w	ip, #1
 800b4fe:	e7f8      	b.n	800b4f2 <_strtod_l+0x282>
 800b500:	08010528 	.word	0x08010528
 800b504:	08010324 	.word	0x08010324
 800b508:	7ff00000 	.word	0x7ff00000
 800b50c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b50e:	1c51      	adds	r1, r2, #1
 800b510:	9119      	str	r1, [sp, #100]	@ 0x64
 800b512:	7852      	ldrb	r2, [r2, #1]
 800b514:	2a30      	cmp	r2, #48	@ 0x30
 800b516:	d0f9      	beq.n	800b50c <_strtod_l+0x29c>
 800b518:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b51c:	2908      	cmp	r1, #8
 800b51e:	f63f af75 	bhi.w	800b40c <_strtod_l+0x19c>
 800b522:	3a30      	subs	r2, #48	@ 0x30
 800b524:	9209      	str	r2, [sp, #36]	@ 0x24
 800b526:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b528:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b52a:	f04f 080a 	mov.w	r8, #10
 800b52e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b530:	1c56      	adds	r6, r2, #1
 800b532:	9619      	str	r6, [sp, #100]	@ 0x64
 800b534:	7852      	ldrb	r2, [r2, #1]
 800b536:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b53a:	f1be 0f09 	cmp.w	lr, #9
 800b53e:	d939      	bls.n	800b5b4 <_strtod_l+0x344>
 800b540:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b542:	1a76      	subs	r6, r6, r1
 800b544:	2e08      	cmp	r6, #8
 800b546:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b54a:	dc03      	bgt.n	800b554 <_strtod_l+0x2e4>
 800b54c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b54e:	4588      	cmp	r8, r1
 800b550:	bfa8      	it	ge
 800b552:	4688      	movge	r8, r1
 800b554:	f1bc 0f00 	cmp.w	ip, #0
 800b558:	d001      	beq.n	800b55e <_strtod_l+0x2ee>
 800b55a:	f1c8 0800 	rsb	r8, r8, #0
 800b55e:	2d00      	cmp	r5, #0
 800b560:	d14e      	bne.n	800b600 <_strtod_l+0x390>
 800b562:	9908      	ldr	r1, [sp, #32]
 800b564:	4308      	orrs	r0, r1
 800b566:	f47f aebc 	bne.w	800b2e2 <_strtod_l+0x72>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f47f aed4 	bne.w	800b318 <_strtod_l+0xa8>
 800b570:	2a69      	cmp	r2, #105	@ 0x69
 800b572:	d028      	beq.n	800b5c6 <_strtod_l+0x356>
 800b574:	dc25      	bgt.n	800b5c2 <_strtod_l+0x352>
 800b576:	2a49      	cmp	r2, #73	@ 0x49
 800b578:	d025      	beq.n	800b5c6 <_strtod_l+0x356>
 800b57a:	2a4e      	cmp	r2, #78	@ 0x4e
 800b57c:	f47f aecc 	bne.w	800b318 <_strtod_l+0xa8>
 800b580:	499a      	ldr	r1, [pc, #616]	@ (800b7ec <_strtod_l+0x57c>)
 800b582:	a819      	add	r0, sp, #100	@ 0x64
 800b584:	f002 fee0 	bl	800e348 <__match>
 800b588:	2800      	cmp	r0, #0
 800b58a:	f43f aec5 	beq.w	800b318 <_strtod_l+0xa8>
 800b58e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b28      	cmp	r3, #40	@ 0x28
 800b594:	d12e      	bne.n	800b5f4 <_strtod_l+0x384>
 800b596:	4996      	ldr	r1, [pc, #600]	@ (800b7f0 <_strtod_l+0x580>)
 800b598:	aa1c      	add	r2, sp, #112	@ 0x70
 800b59a:	a819      	add	r0, sp, #100	@ 0x64
 800b59c:	f002 fee8 	bl	800e370 <__hexnan>
 800b5a0:	2805      	cmp	r0, #5
 800b5a2:	d127      	bne.n	800b5f4 <_strtod_l+0x384>
 800b5a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5a6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b5aa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b5ae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b5b2:	e696      	b.n	800b2e2 <_strtod_l+0x72>
 800b5b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5b6:	fb08 2101 	mla	r1, r8, r1, r2
 800b5ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b5be:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5c0:	e7b5      	b.n	800b52e <_strtod_l+0x2be>
 800b5c2:	2a6e      	cmp	r2, #110	@ 0x6e
 800b5c4:	e7da      	b.n	800b57c <_strtod_l+0x30c>
 800b5c6:	498b      	ldr	r1, [pc, #556]	@ (800b7f4 <_strtod_l+0x584>)
 800b5c8:	a819      	add	r0, sp, #100	@ 0x64
 800b5ca:	f002 febd 	bl	800e348 <__match>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f aea2 	beq.w	800b318 <_strtod_l+0xa8>
 800b5d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5d6:	4988      	ldr	r1, [pc, #544]	@ (800b7f8 <_strtod_l+0x588>)
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	a819      	add	r0, sp, #100	@ 0x64
 800b5dc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5de:	f002 feb3 	bl	800e348 <__match>
 800b5e2:	b910      	cbnz	r0, 800b5ea <_strtod_l+0x37a>
 800b5e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5ea:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b808 <_strtod_l+0x598>
 800b5ee:	f04f 0a00 	mov.w	sl, #0
 800b5f2:	e676      	b.n	800b2e2 <_strtod_l+0x72>
 800b5f4:	4881      	ldr	r0, [pc, #516]	@ (800b7fc <_strtod_l+0x58c>)
 800b5f6:	f001 fd6b 	bl	800d0d0 <nan>
 800b5fa:	ec5b ab10 	vmov	sl, fp, d0
 800b5fe:	e670      	b.n	800b2e2 <_strtod_l+0x72>
 800b600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b602:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b604:	eba8 0303 	sub.w	r3, r8, r3
 800b608:	f1b9 0f00 	cmp.w	r9, #0
 800b60c:	bf08      	it	eq
 800b60e:	46a9      	moveq	r9, r5
 800b610:	2d10      	cmp	r5, #16
 800b612:	9309      	str	r3, [sp, #36]	@ 0x24
 800b614:	462c      	mov	r4, r5
 800b616:	bfa8      	it	ge
 800b618:	2410      	movge	r4, #16
 800b61a:	f7f4 ff73 	bl	8000504 <__aeabi_ui2d>
 800b61e:	2d09      	cmp	r5, #9
 800b620:	4682      	mov	sl, r0
 800b622:	468b      	mov	fp, r1
 800b624:	dc13      	bgt.n	800b64e <_strtod_l+0x3de>
 800b626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f43f ae5a 	beq.w	800b2e2 <_strtod_l+0x72>
 800b62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b630:	dd78      	ble.n	800b724 <_strtod_l+0x4b4>
 800b632:	2b16      	cmp	r3, #22
 800b634:	dc5f      	bgt.n	800b6f6 <_strtod_l+0x486>
 800b636:	4972      	ldr	r1, [pc, #456]	@ (800b800 <_strtod_l+0x590>)
 800b638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b640:	4652      	mov	r2, sl
 800b642:	465b      	mov	r3, fp
 800b644:	f7f4 ffd8 	bl	80005f8 <__aeabi_dmul>
 800b648:	4682      	mov	sl, r0
 800b64a:	468b      	mov	fp, r1
 800b64c:	e649      	b.n	800b2e2 <_strtod_l+0x72>
 800b64e:	4b6c      	ldr	r3, [pc, #432]	@ (800b800 <_strtod_l+0x590>)
 800b650:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b654:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b658:	f7f4 ffce 	bl	80005f8 <__aeabi_dmul>
 800b65c:	4682      	mov	sl, r0
 800b65e:	4638      	mov	r0, r7
 800b660:	468b      	mov	fp, r1
 800b662:	f7f4 ff4f 	bl	8000504 <__aeabi_ui2d>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4650      	mov	r0, sl
 800b66c:	4659      	mov	r1, fp
 800b66e:	f7f4 fe0d 	bl	800028c <__adddf3>
 800b672:	2d0f      	cmp	r5, #15
 800b674:	4682      	mov	sl, r0
 800b676:	468b      	mov	fp, r1
 800b678:	ddd5      	ble.n	800b626 <_strtod_l+0x3b6>
 800b67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b67c:	1b2c      	subs	r4, r5, r4
 800b67e:	441c      	add	r4, r3
 800b680:	2c00      	cmp	r4, #0
 800b682:	f340 8093 	ble.w	800b7ac <_strtod_l+0x53c>
 800b686:	f014 030f 	ands.w	r3, r4, #15
 800b68a:	d00a      	beq.n	800b6a2 <_strtod_l+0x432>
 800b68c:	495c      	ldr	r1, [pc, #368]	@ (800b800 <_strtod_l+0x590>)
 800b68e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b692:	4652      	mov	r2, sl
 800b694:	465b      	mov	r3, fp
 800b696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b69a:	f7f4 ffad 	bl	80005f8 <__aeabi_dmul>
 800b69e:	4682      	mov	sl, r0
 800b6a0:	468b      	mov	fp, r1
 800b6a2:	f034 040f 	bics.w	r4, r4, #15
 800b6a6:	d073      	beq.n	800b790 <_strtod_l+0x520>
 800b6a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b6ac:	dd49      	ble.n	800b742 <_strtod_l+0x4d2>
 800b6ae:	2400      	movs	r4, #0
 800b6b0:	46a0      	mov	r8, r4
 800b6b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6b4:	46a1      	mov	r9, r4
 800b6b6:	9a05      	ldr	r2, [sp, #20]
 800b6b8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b808 <_strtod_l+0x598>
 800b6bc:	2322      	movs	r3, #34	@ 0x22
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	f04f 0a00 	mov.w	sl, #0
 800b6c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f43f ae0b 	beq.w	800b2e2 <_strtod_l+0x72>
 800b6cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6ce:	9805      	ldr	r0, [sp, #20]
 800b6d0:	f002 ff3c 	bl	800e54c <_Bfree>
 800b6d4:	9805      	ldr	r0, [sp, #20]
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	f002 ff38 	bl	800e54c <_Bfree>
 800b6dc:	9805      	ldr	r0, [sp, #20]
 800b6de:	4641      	mov	r1, r8
 800b6e0:	f002 ff34 	bl	800e54c <_Bfree>
 800b6e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6e6:	9805      	ldr	r0, [sp, #20]
 800b6e8:	f002 ff30 	bl	800e54c <_Bfree>
 800b6ec:	9805      	ldr	r0, [sp, #20]
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	f002 ff2c 	bl	800e54c <_Bfree>
 800b6f4:	e5f5      	b.n	800b2e2 <_strtod_l+0x72>
 800b6f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	dbbc      	blt.n	800b67a <_strtod_l+0x40a>
 800b700:	4c3f      	ldr	r4, [pc, #252]	@ (800b800 <_strtod_l+0x590>)
 800b702:	f1c5 050f 	rsb	r5, r5, #15
 800b706:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b70a:	4652      	mov	r2, sl
 800b70c:	465b      	mov	r3, fp
 800b70e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b712:	f7f4 ff71 	bl	80005f8 <__aeabi_dmul>
 800b716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b718:	1b5d      	subs	r5, r3, r5
 800b71a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b71e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b722:	e78f      	b.n	800b644 <_strtod_l+0x3d4>
 800b724:	3316      	adds	r3, #22
 800b726:	dba8      	blt.n	800b67a <_strtod_l+0x40a>
 800b728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b72a:	eba3 0808 	sub.w	r8, r3, r8
 800b72e:	4b34      	ldr	r3, [pc, #208]	@ (800b800 <_strtod_l+0x590>)
 800b730:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b734:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b738:	4650      	mov	r0, sl
 800b73a:	4659      	mov	r1, fp
 800b73c:	f7f5 f886 	bl	800084c <__aeabi_ddiv>
 800b740:	e782      	b.n	800b648 <_strtod_l+0x3d8>
 800b742:	2300      	movs	r3, #0
 800b744:	4f2f      	ldr	r7, [pc, #188]	@ (800b804 <_strtod_l+0x594>)
 800b746:	1124      	asrs	r4, r4, #4
 800b748:	4650      	mov	r0, sl
 800b74a:	4659      	mov	r1, fp
 800b74c:	461e      	mov	r6, r3
 800b74e:	2c01      	cmp	r4, #1
 800b750:	dc21      	bgt.n	800b796 <_strtod_l+0x526>
 800b752:	b10b      	cbz	r3, 800b758 <_strtod_l+0x4e8>
 800b754:	4682      	mov	sl, r0
 800b756:	468b      	mov	fp, r1
 800b758:	492a      	ldr	r1, [pc, #168]	@ (800b804 <_strtod_l+0x594>)
 800b75a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b75e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b762:	4652      	mov	r2, sl
 800b764:	465b      	mov	r3, fp
 800b766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b76a:	f7f4 ff45 	bl	80005f8 <__aeabi_dmul>
 800b76e:	4b26      	ldr	r3, [pc, #152]	@ (800b808 <_strtod_l+0x598>)
 800b770:	460a      	mov	r2, r1
 800b772:	400b      	ands	r3, r1
 800b774:	4925      	ldr	r1, [pc, #148]	@ (800b80c <_strtod_l+0x59c>)
 800b776:	428b      	cmp	r3, r1
 800b778:	4682      	mov	sl, r0
 800b77a:	d898      	bhi.n	800b6ae <_strtod_l+0x43e>
 800b77c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b780:	428b      	cmp	r3, r1
 800b782:	bf86      	itte	hi
 800b784:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b810 <_strtod_l+0x5a0>
 800b788:	f04f 3aff 	movhi.w	sl, #4294967295
 800b78c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b790:	2300      	movs	r3, #0
 800b792:	9308      	str	r3, [sp, #32]
 800b794:	e076      	b.n	800b884 <_strtod_l+0x614>
 800b796:	07e2      	lsls	r2, r4, #31
 800b798:	d504      	bpl.n	800b7a4 <_strtod_l+0x534>
 800b79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b79e:	f7f4 ff2b 	bl	80005f8 <__aeabi_dmul>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	3601      	adds	r6, #1
 800b7a6:	1064      	asrs	r4, r4, #1
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	e7d0      	b.n	800b74e <_strtod_l+0x4de>
 800b7ac:	d0f0      	beq.n	800b790 <_strtod_l+0x520>
 800b7ae:	4264      	negs	r4, r4
 800b7b0:	f014 020f 	ands.w	r2, r4, #15
 800b7b4:	d00a      	beq.n	800b7cc <_strtod_l+0x55c>
 800b7b6:	4b12      	ldr	r3, [pc, #72]	@ (800b800 <_strtod_l+0x590>)
 800b7b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7bc:	4650      	mov	r0, sl
 800b7be:	4659      	mov	r1, fp
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	f7f5 f842 	bl	800084c <__aeabi_ddiv>
 800b7c8:	4682      	mov	sl, r0
 800b7ca:	468b      	mov	fp, r1
 800b7cc:	1124      	asrs	r4, r4, #4
 800b7ce:	d0df      	beq.n	800b790 <_strtod_l+0x520>
 800b7d0:	2c1f      	cmp	r4, #31
 800b7d2:	dd1f      	ble.n	800b814 <_strtod_l+0x5a4>
 800b7d4:	2400      	movs	r4, #0
 800b7d6:	46a0      	mov	r8, r4
 800b7d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b7da:	46a1      	mov	r9, r4
 800b7dc:	9a05      	ldr	r2, [sp, #20]
 800b7de:	2322      	movs	r3, #34	@ 0x22
 800b7e0:	f04f 0a00 	mov.w	sl, #0
 800b7e4:	f04f 0b00 	mov.w	fp, #0
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	e76b      	b.n	800b6c4 <_strtod_l+0x454>
 800b7ec:	08010333 	.word	0x08010333
 800b7f0:	08010514 	.word	0x08010514
 800b7f4:	0801032b 	.word	0x0801032b
 800b7f8:	08010368 	.word	0x08010368
 800b7fc:	08010512 	.word	0x08010512
 800b800:	080106a0 	.word	0x080106a0
 800b804:	08010678 	.word	0x08010678
 800b808:	7ff00000 	.word	0x7ff00000
 800b80c:	7ca00000 	.word	0x7ca00000
 800b810:	7fefffff 	.word	0x7fefffff
 800b814:	f014 0310 	ands.w	r3, r4, #16
 800b818:	bf18      	it	ne
 800b81a:	236a      	movne	r3, #106	@ 0x6a
 800b81c:	4ea9      	ldr	r6, [pc, #676]	@ (800bac4 <_strtod_l+0x854>)
 800b81e:	9308      	str	r3, [sp, #32]
 800b820:	4650      	mov	r0, sl
 800b822:	4659      	mov	r1, fp
 800b824:	2300      	movs	r3, #0
 800b826:	07e7      	lsls	r7, r4, #31
 800b828:	d504      	bpl.n	800b834 <_strtod_l+0x5c4>
 800b82a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b82e:	f7f4 fee3 	bl	80005f8 <__aeabi_dmul>
 800b832:	2301      	movs	r3, #1
 800b834:	1064      	asrs	r4, r4, #1
 800b836:	f106 0608 	add.w	r6, r6, #8
 800b83a:	d1f4      	bne.n	800b826 <_strtod_l+0x5b6>
 800b83c:	b10b      	cbz	r3, 800b842 <_strtod_l+0x5d2>
 800b83e:	4682      	mov	sl, r0
 800b840:	468b      	mov	fp, r1
 800b842:	9b08      	ldr	r3, [sp, #32]
 800b844:	b1b3      	cbz	r3, 800b874 <_strtod_l+0x604>
 800b846:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b84a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b84e:	2b00      	cmp	r3, #0
 800b850:	4659      	mov	r1, fp
 800b852:	dd0f      	ble.n	800b874 <_strtod_l+0x604>
 800b854:	2b1f      	cmp	r3, #31
 800b856:	dd56      	ble.n	800b906 <_strtod_l+0x696>
 800b858:	2b34      	cmp	r3, #52	@ 0x34
 800b85a:	bfde      	ittt	le
 800b85c:	f04f 33ff 	movle.w	r3, #4294967295
 800b860:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b864:	4093      	lslle	r3, r2
 800b866:	f04f 0a00 	mov.w	sl, #0
 800b86a:	bfcc      	ite	gt
 800b86c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b870:	ea03 0b01 	andle.w	fp, r3, r1
 800b874:	2200      	movs	r2, #0
 800b876:	2300      	movs	r3, #0
 800b878:	4650      	mov	r0, sl
 800b87a:	4659      	mov	r1, fp
 800b87c:	f7f5 f924 	bl	8000ac8 <__aeabi_dcmpeq>
 800b880:	2800      	cmp	r0, #0
 800b882:	d1a7      	bne.n	800b7d4 <_strtod_l+0x564>
 800b884:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b88a:	9805      	ldr	r0, [sp, #20]
 800b88c:	462b      	mov	r3, r5
 800b88e:	464a      	mov	r2, r9
 800b890:	f002 fec4 	bl	800e61c <__s2b>
 800b894:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b896:	2800      	cmp	r0, #0
 800b898:	f43f af09 	beq.w	800b6ae <_strtod_l+0x43e>
 800b89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b89e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	eba3 0308 	sub.w	r3, r3, r8
 800b8a6:	bfa8      	it	ge
 800b8a8:	2300      	movge	r3, #0
 800b8aa:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8ac:	2400      	movs	r4, #0
 800b8ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b8b2:	9316      	str	r3, [sp, #88]	@ 0x58
 800b8b4:	46a0      	mov	r8, r4
 800b8b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8b8:	9805      	ldr	r0, [sp, #20]
 800b8ba:	6859      	ldr	r1, [r3, #4]
 800b8bc:	f002 fe06 	bl	800e4cc <_Balloc>
 800b8c0:	4681      	mov	r9, r0
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	f43f aef7 	beq.w	800b6b6 <_strtod_l+0x446>
 800b8c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	3202      	adds	r2, #2
 800b8ce:	f103 010c 	add.w	r1, r3, #12
 800b8d2:	0092      	lsls	r2, r2, #2
 800b8d4:	300c      	adds	r0, #12
 800b8d6:	f001 fbea 	bl	800d0ae <memcpy>
 800b8da:	ec4b ab10 	vmov	d0, sl, fp
 800b8de:	9805      	ldr	r0, [sp, #20]
 800b8e0:	aa1c      	add	r2, sp, #112	@ 0x70
 800b8e2:	a91b      	add	r1, sp, #108	@ 0x6c
 800b8e4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b8e8:	f003 f9cc 	bl	800ec84 <__d2b>
 800b8ec:	901a      	str	r0, [sp, #104]	@ 0x68
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	f43f aee1 	beq.w	800b6b6 <_strtod_l+0x446>
 800b8f4:	9805      	ldr	r0, [sp, #20]
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	f002 ff26 	bl	800e748 <__i2b>
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	b948      	cbnz	r0, 800b914 <_strtod_l+0x6a4>
 800b900:	f04f 0800 	mov.w	r8, #0
 800b904:	e6d7      	b.n	800b6b6 <_strtod_l+0x446>
 800b906:	f04f 32ff 	mov.w	r2, #4294967295
 800b90a:	fa02 f303 	lsl.w	r3, r2, r3
 800b90e:	ea03 0a0a 	and.w	sl, r3, sl
 800b912:	e7af      	b.n	800b874 <_strtod_l+0x604>
 800b914:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b916:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b918:	2d00      	cmp	r5, #0
 800b91a:	bfab      	itete	ge
 800b91c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b91e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b920:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b922:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b924:	bfac      	ite	ge
 800b926:	18ef      	addge	r7, r5, r3
 800b928:	1b5e      	sublt	r6, r3, r5
 800b92a:	9b08      	ldr	r3, [sp, #32]
 800b92c:	1aed      	subs	r5, r5, r3
 800b92e:	4415      	add	r5, r2
 800b930:	4b65      	ldr	r3, [pc, #404]	@ (800bac8 <_strtod_l+0x858>)
 800b932:	3d01      	subs	r5, #1
 800b934:	429d      	cmp	r5, r3
 800b936:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b93a:	da50      	bge.n	800b9de <_strtod_l+0x76e>
 800b93c:	1b5b      	subs	r3, r3, r5
 800b93e:	2b1f      	cmp	r3, #31
 800b940:	eba2 0203 	sub.w	r2, r2, r3
 800b944:	f04f 0101 	mov.w	r1, #1
 800b948:	dc3d      	bgt.n	800b9c6 <_strtod_l+0x756>
 800b94a:	fa01 f303 	lsl.w	r3, r1, r3
 800b94e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b950:	2300      	movs	r3, #0
 800b952:	9310      	str	r3, [sp, #64]	@ 0x40
 800b954:	18bd      	adds	r5, r7, r2
 800b956:	9b08      	ldr	r3, [sp, #32]
 800b958:	42af      	cmp	r7, r5
 800b95a:	4416      	add	r6, r2
 800b95c:	441e      	add	r6, r3
 800b95e:	463b      	mov	r3, r7
 800b960:	bfa8      	it	ge
 800b962:	462b      	movge	r3, r5
 800b964:	42b3      	cmp	r3, r6
 800b966:	bfa8      	it	ge
 800b968:	4633      	movge	r3, r6
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	bfc2      	ittt	gt
 800b96e:	1aed      	subgt	r5, r5, r3
 800b970:	1af6      	subgt	r6, r6, r3
 800b972:	1aff      	subgt	r7, r7, r3
 800b974:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b976:	2b00      	cmp	r3, #0
 800b978:	dd16      	ble.n	800b9a8 <_strtod_l+0x738>
 800b97a:	4641      	mov	r1, r8
 800b97c:	9805      	ldr	r0, [sp, #20]
 800b97e:	461a      	mov	r2, r3
 800b980:	f002 ff9a 	bl	800e8b8 <__pow5mult>
 800b984:	4680      	mov	r8, r0
 800b986:	2800      	cmp	r0, #0
 800b988:	d0ba      	beq.n	800b900 <_strtod_l+0x690>
 800b98a:	4601      	mov	r1, r0
 800b98c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b98e:	9805      	ldr	r0, [sp, #20]
 800b990:	f002 fef0 	bl	800e774 <__multiply>
 800b994:	900a      	str	r0, [sp, #40]	@ 0x28
 800b996:	2800      	cmp	r0, #0
 800b998:	f43f ae8d 	beq.w	800b6b6 <_strtod_l+0x446>
 800b99c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b99e:	9805      	ldr	r0, [sp, #20]
 800b9a0:	f002 fdd4 	bl	800e54c <_Bfree>
 800b9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9a8:	2d00      	cmp	r5, #0
 800b9aa:	dc1d      	bgt.n	800b9e8 <_strtod_l+0x778>
 800b9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	dd23      	ble.n	800b9fa <_strtod_l+0x78a>
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b9b6:	9805      	ldr	r0, [sp, #20]
 800b9b8:	f002 ff7e 	bl	800e8b8 <__pow5mult>
 800b9bc:	4681      	mov	r9, r0
 800b9be:	b9e0      	cbnz	r0, 800b9fa <_strtod_l+0x78a>
 800b9c0:	f04f 0900 	mov.w	r9, #0
 800b9c4:	e677      	b.n	800b6b6 <_strtod_l+0x446>
 800b9c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b9ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b9ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b9d2:	35e2      	adds	r5, #226	@ 0xe2
 800b9d4:	fa01 f305 	lsl.w	r3, r1, r5
 800b9d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9da:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b9dc:	e7ba      	b.n	800b954 <_strtod_l+0x6e4>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9e6:	e7b5      	b.n	800b954 <_strtod_l+0x6e4>
 800b9e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9ea:	9805      	ldr	r0, [sp, #20]
 800b9ec:	462a      	mov	r2, r5
 800b9ee:	f002 ffbd 	bl	800e96c <__lshift>
 800b9f2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d1d9      	bne.n	800b9ac <_strtod_l+0x73c>
 800b9f8:	e65d      	b.n	800b6b6 <_strtod_l+0x446>
 800b9fa:	2e00      	cmp	r6, #0
 800b9fc:	dd07      	ble.n	800ba0e <_strtod_l+0x79e>
 800b9fe:	4649      	mov	r1, r9
 800ba00:	9805      	ldr	r0, [sp, #20]
 800ba02:	4632      	mov	r2, r6
 800ba04:	f002 ffb2 	bl	800e96c <__lshift>
 800ba08:	4681      	mov	r9, r0
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d0d8      	beq.n	800b9c0 <_strtod_l+0x750>
 800ba0e:	2f00      	cmp	r7, #0
 800ba10:	dd08      	ble.n	800ba24 <_strtod_l+0x7b4>
 800ba12:	4641      	mov	r1, r8
 800ba14:	9805      	ldr	r0, [sp, #20]
 800ba16:	463a      	mov	r2, r7
 800ba18:	f002 ffa8 	bl	800e96c <__lshift>
 800ba1c:	4680      	mov	r8, r0
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	f43f ae49 	beq.w	800b6b6 <_strtod_l+0x446>
 800ba24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba26:	9805      	ldr	r0, [sp, #20]
 800ba28:	464a      	mov	r2, r9
 800ba2a:	f003 f827 	bl	800ea7c <__mdiff>
 800ba2e:	4604      	mov	r4, r0
 800ba30:	2800      	cmp	r0, #0
 800ba32:	f43f ae40 	beq.w	800b6b6 <_strtod_l+0x446>
 800ba36:	68c3      	ldr	r3, [r0, #12]
 800ba38:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60c3      	str	r3, [r0, #12]
 800ba3e:	4641      	mov	r1, r8
 800ba40:	f003 f800 	bl	800ea44 <__mcmp>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	da45      	bge.n	800bad4 <_strtod_l+0x864>
 800ba48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba4a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba4e:	d16b      	bne.n	800bb28 <_strtod_l+0x8b8>
 800ba50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d167      	bne.n	800bb28 <_strtod_l+0x8b8>
 800ba58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba5c:	0d1b      	lsrs	r3, r3, #20
 800ba5e:	051b      	lsls	r3, r3, #20
 800ba60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ba64:	d960      	bls.n	800bb28 <_strtod_l+0x8b8>
 800ba66:	6963      	ldr	r3, [r4, #20]
 800ba68:	b913      	cbnz	r3, 800ba70 <_strtod_l+0x800>
 800ba6a:	6923      	ldr	r3, [r4, #16]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	dd5b      	ble.n	800bb28 <_strtod_l+0x8b8>
 800ba70:	4621      	mov	r1, r4
 800ba72:	2201      	movs	r2, #1
 800ba74:	9805      	ldr	r0, [sp, #20]
 800ba76:	f002 ff79 	bl	800e96c <__lshift>
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	f002 ffe1 	bl	800ea44 <__mcmp>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	dd50      	ble.n	800bb28 <_strtod_l+0x8b8>
 800ba86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba8a:	9a08      	ldr	r2, [sp, #32]
 800ba8c:	0d1b      	lsrs	r3, r3, #20
 800ba8e:	051b      	lsls	r3, r3, #20
 800ba90:	2a00      	cmp	r2, #0
 800ba92:	d06a      	beq.n	800bb6a <_strtod_l+0x8fa>
 800ba94:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ba98:	d867      	bhi.n	800bb6a <_strtod_l+0x8fa>
 800ba9a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ba9e:	f67f ae9d 	bls.w	800b7dc <_strtod_l+0x56c>
 800baa2:	4b0a      	ldr	r3, [pc, #40]	@ (800bacc <_strtod_l+0x85c>)
 800baa4:	4650      	mov	r0, sl
 800baa6:	4659      	mov	r1, fp
 800baa8:	2200      	movs	r2, #0
 800baaa:	f7f4 fda5 	bl	80005f8 <__aeabi_dmul>
 800baae:	4b08      	ldr	r3, [pc, #32]	@ (800bad0 <_strtod_l+0x860>)
 800bab0:	400b      	ands	r3, r1
 800bab2:	4682      	mov	sl, r0
 800bab4:	468b      	mov	fp, r1
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f47f ae08 	bne.w	800b6cc <_strtod_l+0x45c>
 800babc:	9a05      	ldr	r2, [sp, #20]
 800babe:	2322      	movs	r3, #34	@ 0x22
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	e603      	b.n	800b6cc <_strtod_l+0x45c>
 800bac4:	08010540 	.word	0x08010540
 800bac8:	fffffc02 	.word	0xfffffc02
 800bacc:	39500000 	.word	0x39500000
 800bad0:	7ff00000 	.word	0x7ff00000
 800bad4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bad8:	d165      	bne.n	800bba6 <_strtod_l+0x936>
 800bada:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800badc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bae0:	b35a      	cbz	r2, 800bb3a <_strtod_l+0x8ca>
 800bae2:	4a9f      	ldr	r2, [pc, #636]	@ (800bd60 <_strtod_l+0xaf0>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d12b      	bne.n	800bb40 <_strtod_l+0x8d0>
 800bae8:	9b08      	ldr	r3, [sp, #32]
 800baea:	4651      	mov	r1, sl
 800baec:	b303      	cbz	r3, 800bb30 <_strtod_l+0x8c0>
 800baee:	4b9d      	ldr	r3, [pc, #628]	@ (800bd64 <_strtod_l+0xaf4>)
 800baf0:	465a      	mov	r2, fp
 800baf2:	4013      	ands	r3, r2
 800baf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	d81b      	bhi.n	800bb36 <_strtod_l+0x8c6>
 800bafe:	0d1b      	lsrs	r3, r3, #20
 800bb00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb04:	fa02 f303 	lsl.w	r3, r2, r3
 800bb08:	4299      	cmp	r1, r3
 800bb0a:	d119      	bne.n	800bb40 <_strtod_l+0x8d0>
 800bb0c:	4b96      	ldr	r3, [pc, #600]	@ (800bd68 <_strtod_l+0xaf8>)
 800bb0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d102      	bne.n	800bb1a <_strtod_l+0x8aa>
 800bb14:	3101      	adds	r1, #1
 800bb16:	f43f adce 	beq.w	800b6b6 <_strtod_l+0x446>
 800bb1a:	4b92      	ldr	r3, [pc, #584]	@ (800bd64 <_strtod_l+0xaf4>)
 800bb1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb1e:	401a      	ands	r2, r3
 800bb20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bb24:	f04f 0a00 	mov.w	sl, #0
 800bb28:	9b08      	ldr	r3, [sp, #32]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1b9      	bne.n	800baa2 <_strtod_l+0x832>
 800bb2e:	e5cd      	b.n	800b6cc <_strtod_l+0x45c>
 800bb30:	f04f 33ff 	mov.w	r3, #4294967295
 800bb34:	e7e8      	b.n	800bb08 <_strtod_l+0x898>
 800bb36:	4613      	mov	r3, r2
 800bb38:	e7e6      	b.n	800bb08 <_strtod_l+0x898>
 800bb3a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb3e:	d0a2      	beq.n	800ba86 <_strtod_l+0x816>
 800bb40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb42:	b1db      	cbz	r3, 800bb7c <_strtod_l+0x90c>
 800bb44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb46:	4213      	tst	r3, r2
 800bb48:	d0ee      	beq.n	800bb28 <_strtod_l+0x8b8>
 800bb4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb4c:	9a08      	ldr	r2, [sp, #32]
 800bb4e:	4650      	mov	r0, sl
 800bb50:	4659      	mov	r1, fp
 800bb52:	b1bb      	cbz	r3, 800bb84 <_strtod_l+0x914>
 800bb54:	f7ff fb6e 	bl	800b234 <sulp>
 800bb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb5c:	ec53 2b10 	vmov	r2, r3, d0
 800bb60:	f7f4 fb94 	bl	800028c <__adddf3>
 800bb64:	4682      	mov	sl, r0
 800bb66:	468b      	mov	fp, r1
 800bb68:	e7de      	b.n	800bb28 <_strtod_l+0x8b8>
 800bb6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bb6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb76:	f04f 3aff 	mov.w	sl, #4294967295
 800bb7a:	e7d5      	b.n	800bb28 <_strtod_l+0x8b8>
 800bb7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb7e:	ea13 0f0a 	tst.w	r3, sl
 800bb82:	e7e1      	b.n	800bb48 <_strtod_l+0x8d8>
 800bb84:	f7ff fb56 	bl	800b234 <sulp>
 800bb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb8c:	ec53 2b10 	vmov	r2, r3, d0
 800bb90:	f7f4 fb7a 	bl	8000288 <__aeabi_dsub>
 800bb94:	2200      	movs	r2, #0
 800bb96:	2300      	movs	r3, #0
 800bb98:	4682      	mov	sl, r0
 800bb9a:	468b      	mov	fp, r1
 800bb9c:	f7f4 ff94 	bl	8000ac8 <__aeabi_dcmpeq>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d0c1      	beq.n	800bb28 <_strtod_l+0x8b8>
 800bba4:	e61a      	b.n	800b7dc <_strtod_l+0x56c>
 800bba6:	4641      	mov	r1, r8
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f003 f8c3 	bl	800ed34 <__ratio>
 800bbae:	ec57 6b10 	vmov	r6, r7, d0
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bbb8:	4630      	mov	r0, r6
 800bbba:	4639      	mov	r1, r7
 800bbbc:	f7f4 ff98 	bl	8000af0 <__aeabi_dcmple>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d06f      	beq.n	800bca4 <_strtod_l+0xa34>
 800bbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d17a      	bne.n	800bcc0 <_strtod_l+0xa50>
 800bbca:	f1ba 0f00 	cmp.w	sl, #0
 800bbce:	d158      	bne.n	800bc82 <_strtod_l+0xa12>
 800bbd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d15a      	bne.n	800bc90 <_strtod_l+0xa20>
 800bbda:	4b64      	ldr	r3, [pc, #400]	@ (800bd6c <_strtod_l+0xafc>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	4630      	mov	r0, r6
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f4 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d159      	bne.n	800bc9e <_strtod_l+0xa2e>
 800bbea:	4630      	mov	r0, r6
 800bbec:	4639      	mov	r1, r7
 800bbee:	4b60      	ldr	r3, [pc, #384]	@ (800bd70 <_strtod_l+0xb00>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f7f4 fd01 	bl	80005f8 <__aeabi_dmul>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bbfe:	9606      	str	r6, [sp, #24]
 800bc00:	9307      	str	r3, [sp, #28]
 800bc02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc06:	4d57      	ldr	r5, [pc, #348]	@ (800bd64 <_strtod_l+0xaf4>)
 800bc08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0e:	401d      	ands	r5, r3
 800bc10:	4b58      	ldr	r3, [pc, #352]	@ (800bd74 <_strtod_l+0xb04>)
 800bc12:	429d      	cmp	r5, r3
 800bc14:	f040 80b2 	bne.w	800bd7c <_strtod_l+0xb0c>
 800bc18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bc1e:	ec4b ab10 	vmov	d0, sl, fp
 800bc22:	f002 ffbf 	bl	800eba4 <__ulp>
 800bc26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc2a:	ec51 0b10 	vmov	r0, r1, d0
 800bc2e:	f7f4 fce3 	bl	80005f8 <__aeabi_dmul>
 800bc32:	4652      	mov	r2, sl
 800bc34:	465b      	mov	r3, fp
 800bc36:	f7f4 fb29 	bl	800028c <__adddf3>
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4949      	ldr	r1, [pc, #292]	@ (800bd64 <_strtod_l+0xaf4>)
 800bc3e:	4a4e      	ldr	r2, [pc, #312]	@ (800bd78 <_strtod_l+0xb08>)
 800bc40:	4019      	ands	r1, r3
 800bc42:	4291      	cmp	r1, r2
 800bc44:	4682      	mov	sl, r0
 800bc46:	d942      	bls.n	800bcce <_strtod_l+0xa5e>
 800bc48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc4a:	4b47      	ldr	r3, [pc, #284]	@ (800bd68 <_strtod_l+0xaf8>)
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d103      	bne.n	800bc58 <_strtod_l+0x9e8>
 800bc50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc52:	3301      	adds	r3, #1
 800bc54:	f43f ad2f 	beq.w	800b6b6 <_strtod_l+0x446>
 800bc58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bd68 <_strtod_l+0xaf8>
 800bc5c:	f04f 3aff 	mov.w	sl, #4294967295
 800bc60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc62:	9805      	ldr	r0, [sp, #20]
 800bc64:	f002 fc72 	bl	800e54c <_Bfree>
 800bc68:	9805      	ldr	r0, [sp, #20]
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	f002 fc6e 	bl	800e54c <_Bfree>
 800bc70:	9805      	ldr	r0, [sp, #20]
 800bc72:	4641      	mov	r1, r8
 800bc74:	f002 fc6a 	bl	800e54c <_Bfree>
 800bc78:	9805      	ldr	r0, [sp, #20]
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	f002 fc66 	bl	800e54c <_Bfree>
 800bc80:	e619      	b.n	800b8b6 <_strtod_l+0x646>
 800bc82:	f1ba 0f01 	cmp.w	sl, #1
 800bc86:	d103      	bne.n	800bc90 <_strtod_l+0xa20>
 800bc88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f43f ada6 	beq.w	800b7dc <_strtod_l+0x56c>
 800bc90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bd40 <_strtod_l+0xad0>
 800bc94:	4f35      	ldr	r7, [pc, #212]	@ (800bd6c <_strtod_l+0xafc>)
 800bc96:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc9a:	2600      	movs	r6, #0
 800bc9c:	e7b1      	b.n	800bc02 <_strtod_l+0x992>
 800bc9e:	4f34      	ldr	r7, [pc, #208]	@ (800bd70 <_strtod_l+0xb00>)
 800bca0:	2600      	movs	r6, #0
 800bca2:	e7aa      	b.n	800bbfa <_strtod_l+0x98a>
 800bca4:	4b32      	ldr	r3, [pc, #200]	@ (800bd70 <_strtod_l+0xb00>)
 800bca6:	4630      	mov	r0, r6
 800bca8:	4639      	mov	r1, r7
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f7f4 fca4 	bl	80005f8 <__aeabi_dmul>
 800bcb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d09f      	beq.n	800bbfa <_strtod_l+0x98a>
 800bcba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bcbe:	e7a0      	b.n	800bc02 <_strtod_l+0x992>
 800bcc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bd48 <_strtod_l+0xad8>
 800bcc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcc8:	ec57 6b17 	vmov	r6, r7, d7
 800bccc:	e799      	b.n	800bc02 <_strtod_l+0x992>
 800bcce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bcd2:	9b08      	ldr	r3, [sp, #32]
 800bcd4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1c1      	bne.n	800bc60 <_strtod_l+0x9f0>
 800bcdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bce0:	0d1b      	lsrs	r3, r3, #20
 800bce2:	051b      	lsls	r3, r3, #20
 800bce4:	429d      	cmp	r5, r3
 800bce6:	d1bb      	bne.n	800bc60 <_strtod_l+0x9f0>
 800bce8:	4630      	mov	r0, r6
 800bcea:	4639      	mov	r1, r7
 800bcec:	f7f4 ffe4 	bl	8000cb8 <__aeabi_d2lz>
 800bcf0:	f7f4 fc54 	bl	800059c <__aeabi_l2d>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	f7f4 fac4 	bl	8000288 <__aeabi_dsub>
 800bd00:	460b      	mov	r3, r1
 800bd02:	4602      	mov	r2, r0
 800bd04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd0e:	ea46 060a 	orr.w	r6, r6, sl
 800bd12:	431e      	orrs	r6, r3
 800bd14:	d06f      	beq.n	800bdf6 <_strtod_l+0xb86>
 800bd16:	a30e      	add	r3, pc, #56	@ (adr r3, 800bd50 <_strtod_l+0xae0>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fede 	bl	8000adc <__aeabi_dcmplt>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	f47f acd3 	bne.w	800b6cc <_strtod_l+0x45c>
 800bd26:	a30c      	add	r3, pc, #48	@ (adr r3, 800bd58 <_strtod_l+0xae8>)
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd30:	f7f4 fef2 	bl	8000b18 <__aeabi_dcmpgt>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d093      	beq.n	800bc60 <_strtod_l+0x9f0>
 800bd38:	e4c8      	b.n	800b6cc <_strtod_l+0x45c>
 800bd3a:	bf00      	nop
 800bd3c:	f3af 8000 	nop.w
 800bd40:	00000000 	.word	0x00000000
 800bd44:	bff00000 	.word	0xbff00000
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	3ff00000 	.word	0x3ff00000
 800bd50:	94a03595 	.word	0x94a03595
 800bd54:	3fdfffff 	.word	0x3fdfffff
 800bd58:	35afe535 	.word	0x35afe535
 800bd5c:	3fe00000 	.word	0x3fe00000
 800bd60:	000fffff 	.word	0x000fffff
 800bd64:	7ff00000 	.word	0x7ff00000
 800bd68:	7fefffff 	.word	0x7fefffff
 800bd6c:	3ff00000 	.word	0x3ff00000
 800bd70:	3fe00000 	.word	0x3fe00000
 800bd74:	7fe00000 	.word	0x7fe00000
 800bd78:	7c9fffff 	.word	0x7c9fffff
 800bd7c:	9b08      	ldr	r3, [sp, #32]
 800bd7e:	b323      	cbz	r3, 800bdca <_strtod_l+0xb5a>
 800bd80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bd84:	d821      	bhi.n	800bdca <_strtod_l+0xb5a>
 800bd86:	a328      	add	r3, pc, #160	@ (adr r3, 800be28 <_strtod_l+0xbb8>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 feae 	bl	8000af0 <__aeabi_dcmple>
 800bd94:	b1a0      	cbz	r0, 800bdc0 <_strtod_l+0xb50>
 800bd96:	4639      	mov	r1, r7
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f7f4 ff05 	bl	8000ba8 <__aeabi_d2uiz>
 800bd9e:	2801      	cmp	r0, #1
 800bda0:	bf38      	it	cc
 800bda2:	2001      	movcc	r0, #1
 800bda4:	f7f4 fbae 	bl	8000504 <__aeabi_ui2d>
 800bda8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdaa:	4606      	mov	r6, r0
 800bdac:	460f      	mov	r7, r1
 800bdae:	b9fb      	cbnz	r3, 800bdf0 <_strtod_l+0xb80>
 800bdb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdb4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bdb6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bdbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bdc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bdc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bdc6:	1b5b      	subs	r3, r3, r5
 800bdc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bdca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bdce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bdd2:	f002 fee7 	bl	800eba4 <__ulp>
 800bdd6:	4650      	mov	r0, sl
 800bdd8:	ec53 2b10 	vmov	r2, r3, d0
 800bddc:	4659      	mov	r1, fp
 800bdde:	f7f4 fc0b 	bl	80005f8 <__aeabi_dmul>
 800bde2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bde6:	f7f4 fa51 	bl	800028c <__adddf3>
 800bdea:	4682      	mov	sl, r0
 800bdec:	468b      	mov	fp, r1
 800bdee:	e770      	b.n	800bcd2 <_strtod_l+0xa62>
 800bdf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bdf4:	e7e0      	b.n	800bdb8 <_strtod_l+0xb48>
 800bdf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800be30 <_strtod_l+0xbc0>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fe6e 	bl	8000adc <__aeabi_dcmplt>
 800be00:	e798      	b.n	800bd34 <_strtod_l+0xac4>
 800be02:	2300      	movs	r3, #0
 800be04:	930e      	str	r3, [sp, #56]	@ 0x38
 800be06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800be08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	f7ff ba6d 	b.w	800b2ea <_strtod_l+0x7a>
 800be10:	2a65      	cmp	r2, #101	@ 0x65
 800be12:	f43f ab68 	beq.w	800b4e6 <_strtod_l+0x276>
 800be16:	2a45      	cmp	r2, #69	@ 0x45
 800be18:	f43f ab65 	beq.w	800b4e6 <_strtod_l+0x276>
 800be1c:	2301      	movs	r3, #1
 800be1e:	f7ff bba0 	b.w	800b562 <_strtod_l+0x2f2>
 800be22:	bf00      	nop
 800be24:	f3af 8000 	nop.w
 800be28:	ffc00000 	.word	0xffc00000
 800be2c:	41dfffff 	.word	0x41dfffff
 800be30:	94a03595 	.word	0x94a03595
 800be34:	3fcfffff 	.word	0x3fcfffff

0800be38 <_strtod_r>:
 800be38:	4b01      	ldr	r3, [pc, #4]	@ (800be40 <_strtod_r+0x8>)
 800be3a:	f7ff ba19 	b.w	800b270 <_strtod_l>
 800be3e:	bf00      	nop
 800be40:	20000048 	.word	0x20000048

0800be44 <_strtol_l.isra.0>:
 800be44:	2b24      	cmp	r3, #36	@ 0x24
 800be46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be4a:	4686      	mov	lr, r0
 800be4c:	4690      	mov	r8, r2
 800be4e:	d801      	bhi.n	800be54 <_strtol_l.isra.0+0x10>
 800be50:	2b01      	cmp	r3, #1
 800be52:	d106      	bne.n	800be62 <_strtol_l.isra.0+0x1e>
 800be54:	f001 f8fe 	bl	800d054 <__errno>
 800be58:	2316      	movs	r3, #22
 800be5a:	6003      	str	r3, [r0, #0]
 800be5c:	2000      	movs	r0, #0
 800be5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be62:	4834      	ldr	r0, [pc, #208]	@ (800bf34 <_strtol_l.isra.0+0xf0>)
 800be64:	460d      	mov	r5, r1
 800be66:	462a      	mov	r2, r5
 800be68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be6c:	5d06      	ldrb	r6, [r0, r4]
 800be6e:	f016 0608 	ands.w	r6, r6, #8
 800be72:	d1f8      	bne.n	800be66 <_strtol_l.isra.0+0x22>
 800be74:	2c2d      	cmp	r4, #45	@ 0x2d
 800be76:	d110      	bne.n	800be9a <_strtol_l.isra.0+0x56>
 800be78:	782c      	ldrb	r4, [r5, #0]
 800be7a:	2601      	movs	r6, #1
 800be7c:	1c95      	adds	r5, r2, #2
 800be7e:	f033 0210 	bics.w	r2, r3, #16
 800be82:	d115      	bne.n	800beb0 <_strtol_l.isra.0+0x6c>
 800be84:	2c30      	cmp	r4, #48	@ 0x30
 800be86:	d10d      	bne.n	800bea4 <_strtol_l.isra.0+0x60>
 800be88:	782a      	ldrb	r2, [r5, #0]
 800be8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be8e:	2a58      	cmp	r2, #88	@ 0x58
 800be90:	d108      	bne.n	800bea4 <_strtol_l.isra.0+0x60>
 800be92:	786c      	ldrb	r4, [r5, #1]
 800be94:	3502      	adds	r5, #2
 800be96:	2310      	movs	r3, #16
 800be98:	e00a      	b.n	800beb0 <_strtol_l.isra.0+0x6c>
 800be9a:	2c2b      	cmp	r4, #43	@ 0x2b
 800be9c:	bf04      	itt	eq
 800be9e:	782c      	ldrbeq	r4, [r5, #0]
 800bea0:	1c95      	addeq	r5, r2, #2
 800bea2:	e7ec      	b.n	800be7e <_strtol_l.isra.0+0x3a>
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1f6      	bne.n	800be96 <_strtol_l.isra.0+0x52>
 800bea8:	2c30      	cmp	r4, #48	@ 0x30
 800beaa:	bf14      	ite	ne
 800beac:	230a      	movne	r3, #10
 800beae:	2308      	moveq	r3, #8
 800beb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800beb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800beb8:	2200      	movs	r2, #0
 800beba:	fbbc f9f3 	udiv	r9, ip, r3
 800bebe:	4610      	mov	r0, r2
 800bec0:	fb03 ca19 	mls	sl, r3, r9, ip
 800bec4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bec8:	2f09      	cmp	r7, #9
 800beca:	d80f      	bhi.n	800beec <_strtol_l.isra.0+0xa8>
 800becc:	463c      	mov	r4, r7
 800bece:	42a3      	cmp	r3, r4
 800bed0:	dd1b      	ble.n	800bf0a <_strtol_l.isra.0+0xc6>
 800bed2:	1c57      	adds	r7, r2, #1
 800bed4:	d007      	beq.n	800bee6 <_strtol_l.isra.0+0xa2>
 800bed6:	4581      	cmp	r9, r0
 800bed8:	d314      	bcc.n	800bf04 <_strtol_l.isra.0+0xc0>
 800beda:	d101      	bne.n	800bee0 <_strtol_l.isra.0+0x9c>
 800bedc:	45a2      	cmp	sl, r4
 800bede:	db11      	blt.n	800bf04 <_strtol_l.isra.0+0xc0>
 800bee0:	fb00 4003 	mla	r0, r0, r3, r4
 800bee4:	2201      	movs	r2, #1
 800bee6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800beea:	e7eb      	b.n	800bec4 <_strtol_l.isra.0+0x80>
 800beec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bef0:	2f19      	cmp	r7, #25
 800bef2:	d801      	bhi.n	800bef8 <_strtol_l.isra.0+0xb4>
 800bef4:	3c37      	subs	r4, #55	@ 0x37
 800bef6:	e7ea      	b.n	800bece <_strtol_l.isra.0+0x8a>
 800bef8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800befc:	2f19      	cmp	r7, #25
 800befe:	d804      	bhi.n	800bf0a <_strtol_l.isra.0+0xc6>
 800bf00:	3c57      	subs	r4, #87	@ 0x57
 800bf02:	e7e4      	b.n	800bece <_strtol_l.isra.0+0x8a>
 800bf04:	f04f 32ff 	mov.w	r2, #4294967295
 800bf08:	e7ed      	b.n	800bee6 <_strtol_l.isra.0+0xa2>
 800bf0a:	1c53      	adds	r3, r2, #1
 800bf0c:	d108      	bne.n	800bf20 <_strtol_l.isra.0+0xdc>
 800bf0e:	2322      	movs	r3, #34	@ 0x22
 800bf10:	f8ce 3000 	str.w	r3, [lr]
 800bf14:	4660      	mov	r0, ip
 800bf16:	f1b8 0f00 	cmp.w	r8, #0
 800bf1a:	d0a0      	beq.n	800be5e <_strtol_l.isra.0+0x1a>
 800bf1c:	1e69      	subs	r1, r5, #1
 800bf1e:	e006      	b.n	800bf2e <_strtol_l.isra.0+0xea>
 800bf20:	b106      	cbz	r6, 800bf24 <_strtol_l.isra.0+0xe0>
 800bf22:	4240      	negs	r0, r0
 800bf24:	f1b8 0f00 	cmp.w	r8, #0
 800bf28:	d099      	beq.n	800be5e <_strtol_l.isra.0+0x1a>
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	d1f6      	bne.n	800bf1c <_strtol_l.isra.0+0xd8>
 800bf2e:	f8c8 1000 	str.w	r1, [r8]
 800bf32:	e794      	b.n	800be5e <_strtol_l.isra.0+0x1a>
 800bf34:	08010569 	.word	0x08010569

0800bf38 <_strtol_r>:
 800bf38:	f7ff bf84 	b.w	800be44 <_strtol_l.isra.0>

0800bf3c <__cvt>:
 800bf3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf40:	ec57 6b10 	vmov	r6, r7, d0
 800bf44:	2f00      	cmp	r7, #0
 800bf46:	460c      	mov	r4, r1
 800bf48:	4619      	mov	r1, r3
 800bf4a:	463b      	mov	r3, r7
 800bf4c:	bfbb      	ittet	lt
 800bf4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bf52:	461f      	movlt	r7, r3
 800bf54:	2300      	movge	r3, #0
 800bf56:	232d      	movlt	r3, #45	@ 0x2d
 800bf58:	700b      	strb	r3, [r1, #0]
 800bf5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bf60:	4691      	mov	r9, r2
 800bf62:	f023 0820 	bic.w	r8, r3, #32
 800bf66:	bfbc      	itt	lt
 800bf68:	4632      	movlt	r2, r6
 800bf6a:	4616      	movlt	r6, r2
 800bf6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bf70:	d005      	beq.n	800bf7e <__cvt+0x42>
 800bf72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bf76:	d100      	bne.n	800bf7a <__cvt+0x3e>
 800bf78:	3401      	adds	r4, #1
 800bf7a:	2102      	movs	r1, #2
 800bf7c:	e000      	b.n	800bf80 <__cvt+0x44>
 800bf7e:	2103      	movs	r1, #3
 800bf80:	ab03      	add	r3, sp, #12
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	ab02      	add	r3, sp, #8
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	ec47 6b10 	vmov	d0, r6, r7
 800bf8c:	4653      	mov	r3, sl
 800bf8e:	4622      	mov	r2, r4
 800bf90:	f001 f936 	bl	800d200 <_dtoa_r>
 800bf94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bf98:	4605      	mov	r5, r0
 800bf9a:	d119      	bne.n	800bfd0 <__cvt+0x94>
 800bf9c:	f019 0f01 	tst.w	r9, #1
 800bfa0:	d00e      	beq.n	800bfc0 <__cvt+0x84>
 800bfa2:	eb00 0904 	add.w	r9, r0, r4
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4630      	mov	r0, r6
 800bfac:	4639      	mov	r1, r7
 800bfae:	f7f4 fd8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfb2:	b108      	cbz	r0, 800bfb8 <__cvt+0x7c>
 800bfb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfb8:	2230      	movs	r2, #48	@ 0x30
 800bfba:	9b03      	ldr	r3, [sp, #12]
 800bfbc:	454b      	cmp	r3, r9
 800bfbe:	d31e      	bcc.n	800bffe <__cvt+0xc2>
 800bfc0:	9b03      	ldr	r3, [sp, #12]
 800bfc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfc4:	1b5b      	subs	r3, r3, r5
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	b004      	add	sp, #16
 800bfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bfd4:	eb00 0904 	add.w	r9, r0, r4
 800bfd8:	d1e5      	bne.n	800bfa6 <__cvt+0x6a>
 800bfda:	7803      	ldrb	r3, [r0, #0]
 800bfdc:	2b30      	cmp	r3, #48	@ 0x30
 800bfde:	d10a      	bne.n	800bff6 <__cvt+0xba>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	f7f4 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfec:	b918      	cbnz	r0, 800bff6 <__cvt+0xba>
 800bfee:	f1c4 0401 	rsb	r4, r4, #1
 800bff2:	f8ca 4000 	str.w	r4, [sl]
 800bff6:	f8da 3000 	ldr.w	r3, [sl]
 800bffa:	4499      	add	r9, r3
 800bffc:	e7d3      	b.n	800bfa6 <__cvt+0x6a>
 800bffe:	1c59      	adds	r1, r3, #1
 800c000:	9103      	str	r1, [sp, #12]
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	e7d9      	b.n	800bfba <__cvt+0x7e>

0800c006 <__exponent>:
 800c006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c008:	2900      	cmp	r1, #0
 800c00a:	bfba      	itte	lt
 800c00c:	4249      	neglt	r1, r1
 800c00e:	232d      	movlt	r3, #45	@ 0x2d
 800c010:	232b      	movge	r3, #43	@ 0x2b
 800c012:	2909      	cmp	r1, #9
 800c014:	7002      	strb	r2, [r0, #0]
 800c016:	7043      	strb	r3, [r0, #1]
 800c018:	dd29      	ble.n	800c06e <__exponent+0x68>
 800c01a:	f10d 0307 	add.w	r3, sp, #7
 800c01e:	461d      	mov	r5, r3
 800c020:	270a      	movs	r7, #10
 800c022:	461a      	mov	r2, r3
 800c024:	fbb1 f6f7 	udiv	r6, r1, r7
 800c028:	fb07 1416 	mls	r4, r7, r6, r1
 800c02c:	3430      	adds	r4, #48	@ 0x30
 800c02e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c032:	460c      	mov	r4, r1
 800c034:	2c63      	cmp	r4, #99	@ 0x63
 800c036:	f103 33ff 	add.w	r3, r3, #4294967295
 800c03a:	4631      	mov	r1, r6
 800c03c:	dcf1      	bgt.n	800c022 <__exponent+0x1c>
 800c03e:	3130      	adds	r1, #48	@ 0x30
 800c040:	1e94      	subs	r4, r2, #2
 800c042:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c046:	1c41      	adds	r1, r0, #1
 800c048:	4623      	mov	r3, r4
 800c04a:	42ab      	cmp	r3, r5
 800c04c:	d30a      	bcc.n	800c064 <__exponent+0x5e>
 800c04e:	f10d 0309 	add.w	r3, sp, #9
 800c052:	1a9b      	subs	r3, r3, r2
 800c054:	42ac      	cmp	r4, r5
 800c056:	bf88      	it	hi
 800c058:	2300      	movhi	r3, #0
 800c05a:	3302      	adds	r3, #2
 800c05c:	4403      	add	r3, r0
 800c05e:	1a18      	subs	r0, r3, r0
 800c060:	b003      	add	sp, #12
 800c062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c064:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c068:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c06c:	e7ed      	b.n	800c04a <__exponent+0x44>
 800c06e:	2330      	movs	r3, #48	@ 0x30
 800c070:	3130      	adds	r1, #48	@ 0x30
 800c072:	7083      	strb	r3, [r0, #2]
 800c074:	70c1      	strb	r1, [r0, #3]
 800c076:	1d03      	adds	r3, r0, #4
 800c078:	e7f1      	b.n	800c05e <__exponent+0x58>
	...

0800c07c <_printf_float>:
 800c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	b08d      	sub	sp, #52	@ 0x34
 800c082:	460c      	mov	r4, r1
 800c084:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c088:	4616      	mov	r6, r2
 800c08a:	461f      	mov	r7, r3
 800c08c:	4605      	mov	r5, r0
 800c08e:	f000 ff29 	bl	800cee4 <_localeconv_r>
 800c092:	6803      	ldr	r3, [r0, #0]
 800c094:	9304      	str	r3, [sp, #16]
 800c096:	4618      	mov	r0, r3
 800c098:	f7f4 f8ea 	bl	8000270 <strlen>
 800c09c:	2300      	movs	r3, #0
 800c09e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a4:	9005      	str	r0, [sp, #20]
 800c0a6:	3307      	adds	r3, #7
 800c0a8:	f023 0307 	bic.w	r3, r3, #7
 800c0ac:	f103 0208 	add.w	r2, r3, #8
 800c0b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c0b4:	f8d4 b000 	ldr.w	fp, [r4]
 800c0b8:	f8c8 2000 	str.w	r2, [r8]
 800c0bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c0c4:	9307      	str	r3, [sp, #28]
 800c0c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c0ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0d2:	4b9c      	ldr	r3, [pc, #624]	@ (800c344 <_printf_float+0x2c8>)
 800c0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d8:	f7f4 fd28 	bl	8000b2c <__aeabi_dcmpun>
 800c0dc:	bb70      	cbnz	r0, 800c13c <_printf_float+0xc0>
 800c0de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0e2:	4b98      	ldr	r3, [pc, #608]	@ (800c344 <_printf_float+0x2c8>)
 800c0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e8:	f7f4 fd02 	bl	8000af0 <__aeabi_dcmple>
 800c0ec:	bb30      	cbnz	r0, 800c13c <_printf_float+0xc0>
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	f7f4 fcf1 	bl	8000adc <__aeabi_dcmplt>
 800c0fa:	b110      	cbz	r0, 800c102 <_printf_float+0x86>
 800c0fc:	232d      	movs	r3, #45	@ 0x2d
 800c0fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c102:	4a91      	ldr	r2, [pc, #580]	@ (800c348 <_printf_float+0x2cc>)
 800c104:	4b91      	ldr	r3, [pc, #580]	@ (800c34c <_printf_float+0x2d0>)
 800c106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c10a:	bf8c      	ite	hi
 800c10c:	4690      	movhi	r8, r2
 800c10e:	4698      	movls	r8, r3
 800c110:	2303      	movs	r3, #3
 800c112:	6123      	str	r3, [r4, #16]
 800c114:	f02b 0304 	bic.w	r3, fp, #4
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	f04f 0900 	mov.w	r9, #0
 800c11e:	9700      	str	r7, [sp, #0]
 800c120:	4633      	mov	r3, r6
 800c122:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c124:	4621      	mov	r1, r4
 800c126:	4628      	mov	r0, r5
 800c128:	f000 f9d2 	bl	800c4d0 <_printf_common>
 800c12c:	3001      	adds	r0, #1
 800c12e:	f040 808d 	bne.w	800c24c <_printf_float+0x1d0>
 800c132:	f04f 30ff 	mov.w	r0, #4294967295
 800c136:	b00d      	add	sp, #52	@ 0x34
 800c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13c:	4642      	mov	r2, r8
 800c13e:	464b      	mov	r3, r9
 800c140:	4640      	mov	r0, r8
 800c142:	4649      	mov	r1, r9
 800c144:	f7f4 fcf2 	bl	8000b2c <__aeabi_dcmpun>
 800c148:	b140      	cbz	r0, 800c15c <_printf_float+0xe0>
 800c14a:	464b      	mov	r3, r9
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bfbc      	itt	lt
 800c150:	232d      	movlt	r3, #45	@ 0x2d
 800c152:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c156:	4a7e      	ldr	r2, [pc, #504]	@ (800c350 <_printf_float+0x2d4>)
 800c158:	4b7e      	ldr	r3, [pc, #504]	@ (800c354 <_printf_float+0x2d8>)
 800c15a:	e7d4      	b.n	800c106 <_printf_float+0x8a>
 800c15c:	6863      	ldr	r3, [r4, #4]
 800c15e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c162:	9206      	str	r2, [sp, #24]
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	d13b      	bne.n	800c1e0 <_printf_float+0x164>
 800c168:	2306      	movs	r3, #6
 800c16a:	6063      	str	r3, [r4, #4]
 800c16c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c170:	2300      	movs	r3, #0
 800c172:	6022      	str	r2, [r4, #0]
 800c174:	9303      	str	r3, [sp, #12]
 800c176:	ab0a      	add	r3, sp, #40	@ 0x28
 800c178:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c17c:	ab09      	add	r3, sp, #36	@ 0x24
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	6861      	ldr	r1, [r4, #4]
 800c182:	ec49 8b10 	vmov	d0, r8, r9
 800c186:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c18a:	4628      	mov	r0, r5
 800c18c:	f7ff fed6 	bl	800bf3c <__cvt>
 800c190:	9b06      	ldr	r3, [sp, #24]
 800c192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c194:	2b47      	cmp	r3, #71	@ 0x47
 800c196:	4680      	mov	r8, r0
 800c198:	d129      	bne.n	800c1ee <_printf_float+0x172>
 800c19a:	1cc8      	adds	r0, r1, #3
 800c19c:	db02      	blt.n	800c1a4 <_printf_float+0x128>
 800c19e:	6863      	ldr	r3, [r4, #4]
 800c1a0:	4299      	cmp	r1, r3
 800c1a2:	dd41      	ble.n	800c228 <_printf_float+0x1ac>
 800c1a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c1a8:	fa5f fa8a 	uxtb.w	sl, sl
 800c1ac:	3901      	subs	r1, #1
 800c1ae:	4652      	mov	r2, sl
 800c1b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c1b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1b6:	f7ff ff26 	bl	800c006 <__exponent>
 800c1ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1bc:	1813      	adds	r3, r2, r0
 800c1be:	2a01      	cmp	r2, #1
 800c1c0:	4681      	mov	r9, r0
 800c1c2:	6123      	str	r3, [r4, #16]
 800c1c4:	dc02      	bgt.n	800c1cc <_printf_float+0x150>
 800c1c6:	6822      	ldr	r2, [r4, #0]
 800c1c8:	07d2      	lsls	r2, r2, #31
 800c1ca:	d501      	bpl.n	800c1d0 <_printf_float+0x154>
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	6123      	str	r3, [r4, #16]
 800c1d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0a2      	beq.n	800c11e <_printf_float+0xa2>
 800c1d8:	232d      	movs	r3, #45	@ 0x2d
 800c1da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1de:	e79e      	b.n	800c11e <_printf_float+0xa2>
 800c1e0:	9a06      	ldr	r2, [sp, #24]
 800c1e2:	2a47      	cmp	r2, #71	@ 0x47
 800c1e4:	d1c2      	bne.n	800c16c <_printf_float+0xf0>
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1c0      	bne.n	800c16c <_printf_float+0xf0>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e7bd      	b.n	800c16a <_printf_float+0xee>
 800c1ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c1f2:	d9db      	bls.n	800c1ac <_printf_float+0x130>
 800c1f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c1f8:	d118      	bne.n	800c22c <_printf_float+0x1b0>
 800c1fa:	2900      	cmp	r1, #0
 800c1fc:	6863      	ldr	r3, [r4, #4]
 800c1fe:	dd0b      	ble.n	800c218 <_printf_float+0x19c>
 800c200:	6121      	str	r1, [r4, #16]
 800c202:	b913      	cbnz	r3, 800c20a <_printf_float+0x18e>
 800c204:	6822      	ldr	r2, [r4, #0]
 800c206:	07d0      	lsls	r0, r2, #31
 800c208:	d502      	bpl.n	800c210 <_printf_float+0x194>
 800c20a:	3301      	adds	r3, #1
 800c20c:	440b      	add	r3, r1
 800c20e:	6123      	str	r3, [r4, #16]
 800c210:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c212:	f04f 0900 	mov.w	r9, #0
 800c216:	e7db      	b.n	800c1d0 <_printf_float+0x154>
 800c218:	b913      	cbnz	r3, 800c220 <_printf_float+0x1a4>
 800c21a:	6822      	ldr	r2, [r4, #0]
 800c21c:	07d2      	lsls	r2, r2, #31
 800c21e:	d501      	bpl.n	800c224 <_printf_float+0x1a8>
 800c220:	3302      	adds	r3, #2
 800c222:	e7f4      	b.n	800c20e <_printf_float+0x192>
 800c224:	2301      	movs	r3, #1
 800c226:	e7f2      	b.n	800c20e <_printf_float+0x192>
 800c228:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c22e:	4299      	cmp	r1, r3
 800c230:	db05      	blt.n	800c23e <_printf_float+0x1c2>
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	6121      	str	r1, [r4, #16]
 800c236:	07d8      	lsls	r0, r3, #31
 800c238:	d5ea      	bpl.n	800c210 <_printf_float+0x194>
 800c23a:	1c4b      	adds	r3, r1, #1
 800c23c:	e7e7      	b.n	800c20e <_printf_float+0x192>
 800c23e:	2900      	cmp	r1, #0
 800c240:	bfd4      	ite	le
 800c242:	f1c1 0202 	rsble	r2, r1, #2
 800c246:	2201      	movgt	r2, #1
 800c248:	4413      	add	r3, r2
 800c24a:	e7e0      	b.n	800c20e <_printf_float+0x192>
 800c24c:	6823      	ldr	r3, [r4, #0]
 800c24e:	055a      	lsls	r2, r3, #21
 800c250:	d407      	bmi.n	800c262 <_printf_float+0x1e6>
 800c252:	6923      	ldr	r3, [r4, #16]
 800c254:	4642      	mov	r2, r8
 800c256:	4631      	mov	r1, r6
 800c258:	4628      	mov	r0, r5
 800c25a:	47b8      	blx	r7
 800c25c:	3001      	adds	r0, #1
 800c25e:	d12b      	bne.n	800c2b8 <_printf_float+0x23c>
 800c260:	e767      	b.n	800c132 <_printf_float+0xb6>
 800c262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c266:	f240 80dd 	bls.w	800c424 <_printf_float+0x3a8>
 800c26a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c26e:	2200      	movs	r2, #0
 800c270:	2300      	movs	r3, #0
 800c272:	f7f4 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 800c276:	2800      	cmp	r0, #0
 800c278:	d033      	beq.n	800c2e2 <_printf_float+0x266>
 800c27a:	4a37      	ldr	r2, [pc, #220]	@ (800c358 <_printf_float+0x2dc>)
 800c27c:	2301      	movs	r3, #1
 800c27e:	4631      	mov	r1, r6
 800c280:	4628      	mov	r0, r5
 800c282:	47b8      	blx	r7
 800c284:	3001      	adds	r0, #1
 800c286:	f43f af54 	beq.w	800c132 <_printf_float+0xb6>
 800c28a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c28e:	4543      	cmp	r3, r8
 800c290:	db02      	blt.n	800c298 <_printf_float+0x21c>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	07d8      	lsls	r0, r3, #31
 800c296:	d50f      	bpl.n	800c2b8 <_printf_float+0x23c>
 800c298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c29c:	4631      	mov	r1, r6
 800c29e:	4628      	mov	r0, r5
 800c2a0:	47b8      	blx	r7
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	f43f af45 	beq.w	800c132 <_printf_float+0xb6>
 800c2a8:	f04f 0900 	mov.w	r9, #0
 800c2ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2b0:	f104 0a1a 	add.w	sl, r4, #26
 800c2b4:	45c8      	cmp	r8, r9
 800c2b6:	dc09      	bgt.n	800c2cc <_printf_float+0x250>
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	079b      	lsls	r3, r3, #30
 800c2bc:	f100 8103 	bmi.w	800c4c6 <_printf_float+0x44a>
 800c2c0:	68e0      	ldr	r0, [r4, #12]
 800c2c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2c4:	4298      	cmp	r0, r3
 800c2c6:	bfb8      	it	lt
 800c2c8:	4618      	movlt	r0, r3
 800c2ca:	e734      	b.n	800c136 <_printf_float+0xba>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	4652      	mov	r2, sl
 800c2d0:	4631      	mov	r1, r6
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	47b8      	blx	r7
 800c2d6:	3001      	adds	r0, #1
 800c2d8:	f43f af2b 	beq.w	800c132 <_printf_float+0xb6>
 800c2dc:	f109 0901 	add.w	r9, r9, #1
 800c2e0:	e7e8      	b.n	800c2b4 <_printf_float+0x238>
 800c2e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dc39      	bgt.n	800c35c <_printf_float+0x2e0>
 800c2e8:	4a1b      	ldr	r2, [pc, #108]	@ (800c358 <_printf_float+0x2dc>)
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	4631      	mov	r1, r6
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	47b8      	blx	r7
 800c2f2:	3001      	adds	r0, #1
 800c2f4:	f43f af1d 	beq.w	800c132 <_printf_float+0xb6>
 800c2f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c2fc:	ea59 0303 	orrs.w	r3, r9, r3
 800c300:	d102      	bne.n	800c308 <_printf_float+0x28c>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	07d9      	lsls	r1, r3, #31
 800c306:	d5d7      	bpl.n	800c2b8 <_printf_float+0x23c>
 800c308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c30c:	4631      	mov	r1, r6
 800c30e:	4628      	mov	r0, r5
 800c310:	47b8      	blx	r7
 800c312:	3001      	adds	r0, #1
 800c314:	f43f af0d 	beq.w	800c132 <_printf_float+0xb6>
 800c318:	f04f 0a00 	mov.w	sl, #0
 800c31c:	f104 0b1a 	add.w	fp, r4, #26
 800c320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c322:	425b      	negs	r3, r3
 800c324:	4553      	cmp	r3, sl
 800c326:	dc01      	bgt.n	800c32c <_printf_float+0x2b0>
 800c328:	464b      	mov	r3, r9
 800c32a:	e793      	b.n	800c254 <_printf_float+0x1d8>
 800c32c:	2301      	movs	r3, #1
 800c32e:	465a      	mov	r2, fp
 800c330:	4631      	mov	r1, r6
 800c332:	4628      	mov	r0, r5
 800c334:	47b8      	blx	r7
 800c336:	3001      	adds	r0, #1
 800c338:	f43f aefb 	beq.w	800c132 <_printf_float+0xb6>
 800c33c:	f10a 0a01 	add.w	sl, sl, #1
 800c340:	e7ee      	b.n	800c320 <_printf_float+0x2a4>
 800c342:	bf00      	nop
 800c344:	7fefffff 	.word	0x7fefffff
 800c348:	0801032a 	.word	0x0801032a
 800c34c:	08010326 	.word	0x08010326
 800c350:	08010332 	.word	0x08010332
 800c354:	0801032e 	.word	0x0801032e
 800c358:	080104d2 	.word	0x080104d2
 800c35c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c35e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c362:	4553      	cmp	r3, sl
 800c364:	bfa8      	it	ge
 800c366:	4653      	movge	r3, sl
 800c368:	2b00      	cmp	r3, #0
 800c36a:	4699      	mov	r9, r3
 800c36c:	dc36      	bgt.n	800c3dc <_printf_float+0x360>
 800c36e:	f04f 0b00 	mov.w	fp, #0
 800c372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c376:	f104 021a 	add.w	r2, r4, #26
 800c37a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c37c:	9306      	str	r3, [sp, #24]
 800c37e:	eba3 0309 	sub.w	r3, r3, r9
 800c382:	455b      	cmp	r3, fp
 800c384:	dc31      	bgt.n	800c3ea <_printf_float+0x36e>
 800c386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c388:	459a      	cmp	sl, r3
 800c38a:	dc3a      	bgt.n	800c402 <_printf_float+0x386>
 800c38c:	6823      	ldr	r3, [r4, #0]
 800c38e:	07da      	lsls	r2, r3, #31
 800c390:	d437      	bmi.n	800c402 <_printf_float+0x386>
 800c392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c394:	ebaa 0903 	sub.w	r9, sl, r3
 800c398:	9b06      	ldr	r3, [sp, #24]
 800c39a:	ebaa 0303 	sub.w	r3, sl, r3
 800c39e:	4599      	cmp	r9, r3
 800c3a0:	bfa8      	it	ge
 800c3a2:	4699      	movge	r9, r3
 800c3a4:	f1b9 0f00 	cmp.w	r9, #0
 800c3a8:	dc33      	bgt.n	800c412 <_printf_float+0x396>
 800c3aa:	f04f 0800 	mov.w	r8, #0
 800c3ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3b2:	f104 0b1a 	add.w	fp, r4, #26
 800c3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b8:	ebaa 0303 	sub.w	r3, sl, r3
 800c3bc:	eba3 0309 	sub.w	r3, r3, r9
 800c3c0:	4543      	cmp	r3, r8
 800c3c2:	f77f af79 	ble.w	800c2b8 <_printf_float+0x23c>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	465a      	mov	r2, fp
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	47b8      	blx	r7
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	f43f aeae 	beq.w	800c132 <_printf_float+0xb6>
 800c3d6:	f108 0801 	add.w	r8, r8, #1
 800c3da:	e7ec      	b.n	800c3b6 <_printf_float+0x33a>
 800c3dc:	4642      	mov	r2, r8
 800c3de:	4631      	mov	r1, r6
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	47b8      	blx	r7
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	d1c2      	bne.n	800c36e <_printf_float+0x2f2>
 800c3e8:	e6a3      	b.n	800c132 <_printf_float+0xb6>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	9206      	str	r2, [sp, #24]
 800c3f2:	47b8      	blx	r7
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	f43f ae9c 	beq.w	800c132 <_printf_float+0xb6>
 800c3fa:	9a06      	ldr	r2, [sp, #24]
 800c3fc:	f10b 0b01 	add.w	fp, fp, #1
 800c400:	e7bb      	b.n	800c37a <_printf_float+0x2fe>
 800c402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c406:	4631      	mov	r1, r6
 800c408:	4628      	mov	r0, r5
 800c40a:	47b8      	blx	r7
 800c40c:	3001      	adds	r0, #1
 800c40e:	d1c0      	bne.n	800c392 <_printf_float+0x316>
 800c410:	e68f      	b.n	800c132 <_printf_float+0xb6>
 800c412:	9a06      	ldr	r2, [sp, #24]
 800c414:	464b      	mov	r3, r9
 800c416:	4442      	add	r2, r8
 800c418:	4631      	mov	r1, r6
 800c41a:	4628      	mov	r0, r5
 800c41c:	47b8      	blx	r7
 800c41e:	3001      	adds	r0, #1
 800c420:	d1c3      	bne.n	800c3aa <_printf_float+0x32e>
 800c422:	e686      	b.n	800c132 <_printf_float+0xb6>
 800c424:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c428:	f1ba 0f01 	cmp.w	sl, #1
 800c42c:	dc01      	bgt.n	800c432 <_printf_float+0x3b6>
 800c42e:	07db      	lsls	r3, r3, #31
 800c430:	d536      	bpl.n	800c4a0 <_printf_float+0x424>
 800c432:	2301      	movs	r3, #1
 800c434:	4642      	mov	r2, r8
 800c436:	4631      	mov	r1, r6
 800c438:	4628      	mov	r0, r5
 800c43a:	47b8      	blx	r7
 800c43c:	3001      	adds	r0, #1
 800c43e:	f43f ae78 	beq.w	800c132 <_printf_float+0xb6>
 800c442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c446:	4631      	mov	r1, r6
 800c448:	4628      	mov	r0, r5
 800c44a:	47b8      	blx	r7
 800c44c:	3001      	adds	r0, #1
 800c44e:	f43f ae70 	beq.w	800c132 <_printf_float+0xb6>
 800c452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c456:	2200      	movs	r2, #0
 800c458:	2300      	movs	r3, #0
 800c45a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c45e:	f7f4 fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 800c462:	b9c0      	cbnz	r0, 800c496 <_printf_float+0x41a>
 800c464:	4653      	mov	r3, sl
 800c466:	f108 0201 	add.w	r2, r8, #1
 800c46a:	4631      	mov	r1, r6
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b8      	blx	r7
 800c470:	3001      	adds	r0, #1
 800c472:	d10c      	bne.n	800c48e <_printf_float+0x412>
 800c474:	e65d      	b.n	800c132 <_printf_float+0xb6>
 800c476:	2301      	movs	r3, #1
 800c478:	465a      	mov	r2, fp
 800c47a:	4631      	mov	r1, r6
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b8      	blx	r7
 800c480:	3001      	adds	r0, #1
 800c482:	f43f ae56 	beq.w	800c132 <_printf_float+0xb6>
 800c486:	f108 0801 	add.w	r8, r8, #1
 800c48a:	45d0      	cmp	r8, sl
 800c48c:	dbf3      	blt.n	800c476 <_printf_float+0x3fa>
 800c48e:	464b      	mov	r3, r9
 800c490:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c494:	e6df      	b.n	800c256 <_printf_float+0x1da>
 800c496:	f04f 0800 	mov.w	r8, #0
 800c49a:	f104 0b1a 	add.w	fp, r4, #26
 800c49e:	e7f4      	b.n	800c48a <_printf_float+0x40e>
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	4642      	mov	r2, r8
 800c4a4:	e7e1      	b.n	800c46a <_printf_float+0x3ee>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	464a      	mov	r2, r9
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	f43f ae3e 	beq.w	800c132 <_printf_float+0xb6>
 800c4b6:	f108 0801 	add.w	r8, r8, #1
 800c4ba:	68e3      	ldr	r3, [r4, #12]
 800c4bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4be:	1a5b      	subs	r3, r3, r1
 800c4c0:	4543      	cmp	r3, r8
 800c4c2:	dcf0      	bgt.n	800c4a6 <_printf_float+0x42a>
 800c4c4:	e6fc      	b.n	800c2c0 <_printf_float+0x244>
 800c4c6:	f04f 0800 	mov.w	r8, #0
 800c4ca:	f104 0919 	add.w	r9, r4, #25
 800c4ce:	e7f4      	b.n	800c4ba <_printf_float+0x43e>

0800c4d0 <_printf_common>:
 800c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d4:	4616      	mov	r6, r2
 800c4d6:	4698      	mov	r8, r3
 800c4d8:	688a      	ldr	r2, [r1, #8]
 800c4da:	690b      	ldr	r3, [r1, #16]
 800c4dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	bfb8      	it	lt
 800c4e4:	4613      	movlt	r3, r2
 800c4e6:	6033      	str	r3, [r6, #0]
 800c4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	b10a      	cbz	r2, 800c4f6 <_printf_common+0x26>
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	6033      	str	r3, [r6, #0]
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	0699      	lsls	r1, r3, #26
 800c4fa:	bf42      	ittt	mi
 800c4fc:	6833      	ldrmi	r3, [r6, #0]
 800c4fe:	3302      	addmi	r3, #2
 800c500:	6033      	strmi	r3, [r6, #0]
 800c502:	6825      	ldr	r5, [r4, #0]
 800c504:	f015 0506 	ands.w	r5, r5, #6
 800c508:	d106      	bne.n	800c518 <_printf_common+0x48>
 800c50a:	f104 0a19 	add.w	sl, r4, #25
 800c50e:	68e3      	ldr	r3, [r4, #12]
 800c510:	6832      	ldr	r2, [r6, #0]
 800c512:	1a9b      	subs	r3, r3, r2
 800c514:	42ab      	cmp	r3, r5
 800c516:	dc26      	bgt.n	800c566 <_printf_common+0x96>
 800c518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c51c:	6822      	ldr	r2, [r4, #0]
 800c51e:	3b00      	subs	r3, #0
 800c520:	bf18      	it	ne
 800c522:	2301      	movne	r3, #1
 800c524:	0692      	lsls	r2, r2, #26
 800c526:	d42b      	bmi.n	800c580 <_printf_common+0xb0>
 800c528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c52c:	4641      	mov	r1, r8
 800c52e:	4638      	mov	r0, r7
 800c530:	47c8      	blx	r9
 800c532:	3001      	adds	r0, #1
 800c534:	d01e      	beq.n	800c574 <_printf_common+0xa4>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	6922      	ldr	r2, [r4, #16]
 800c53a:	f003 0306 	and.w	r3, r3, #6
 800c53e:	2b04      	cmp	r3, #4
 800c540:	bf02      	ittt	eq
 800c542:	68e5      	ldreq	r5, [r4, #12]
 800c544:	6833      	ldreq	r3, [r6, #0]
 800c546:	1aed      	subeq	r5, r5, r3
 800c548:	68a3      	ldr	r3, [r4, #8]
 800c54a:	bf0c      	ite	eq
 800c54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c550:	2500      	movne	r5, #0
 800c552:	4293      	cmp	r3, r2
 800c554:	bfc4      	itt	gt
 800c556:	1a9b      	subgt	r3, r3, r2
 800c558:	18ed      	addgt	r5, r5, r3
 800c55a:	2600      	movs	r6, #0
 800c55c:	341a      	adds	r4, #26
 800c55e:	42b5      	cmp	r5, r6
 800c560:	d11a      	bne.n	800c598 <_printf_common+0xc8>
 800c562:	2000      	movs	r0, #0
 800c564:	e008      	b.n	800c578 <_printf_common+0xa8>
 800c566:	2301      	movs	r3, #1
 800c568:	4652      	mov	r2, sl
 800c56a:	4641      	mov	r1, r8
 800c56c:	4638      	mov	r0, r7
 800c56e:	47c8      	blx	r9
 800c570:	3001      	adds	r0, #1
 800c572:	d103      	bne.n	800c57c <_printf_common+0xac>
 800c574:	f04f 30ff 	mov.w	r0, #4294967295
 800c578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c57c:	3501      	adds	r5, #1
 800c57e:	e7c6      	b.n	800c50e <_printf_common+0x3e>
 800c580:	18e1      	adds	r1, r4, r3
 800c582:	1c5a      	adds	r2, r3, #1
 800c584:	2030      	movs	r0, #48	@ 0x30
 800c586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c58a:	4422      	add	r2, r4
 800c58c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c594:	3302      	adds	r3, #2
 800c596:	e7c7      	b.n	800c528 <_printf_common+0x58>
 800c598:	2301      	movs	r3, #1
 800c59a:	4622      	mov	r2, r4
 800c59c:	4641      	mov	r1, r8
 800c59e:	4638      	mov	r0, r7
 800c5a0:	47c8      	blx	r9
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	d0e6      	beq.n	800c574 <_printf_common+0xa4>
 800c5a6:	3601      	adds	r6, #1
 800c5a8:	e7d9      	b.n	800c55e <_printf_common+0x8e>
	...

0800c5ac <_printf_i>:
 800c5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b0:	7e0f      	ldrb	r7, [r1, #24]
 800c5b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5b4:	2f78      	cmp	r7, #120	@ 0x78
 800c5b6:	4691      	mov	r9, r2
 800c5b8:	4680      	mov	r8, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	469a      	mov	sl, r3
 800c5be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5c2:	d807      	bhi.n	800c5d4 <_printf_i+0x28>
 800c5c4:	2f62      	cmp	r7, #98	@ 0x62
 800c5c6:	d80a      	bhi.n	800c5de <_printf_i+0x32>
 800c5c8:	2f00      	cmp	r7, #0
 800c5ca:	f000 80d1 	beq.w	800c770 <_printf_i+0x1c4>
 800c5ce:	2f58      	cmp	r7, #88	@ 0x58
 800c5d0:	f000 80b8 	beq.w	800c744 <_printf_i+0x198>
 800c5d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5dc:	e03a      	b.n	800c654 <_printf_i+0xa8>
 800c5de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5e2:	2b15      	cmp	r3, #21
 800c5e4:	d8f6      	bhi.n	800c5d4 <_printf_i+0x28>
 800c5e6:	a101      	add	r1, pc, #4	@ (adr r1, 800c5ec <_printf_i+0x40>)
 800c5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5ec:	0800c645 	.word	0x0800c645
 800c5f0:	0800c659 	.word	0x0800c659
 800c5f4:	0800c5d5 	.word	0x0800c5d5
 800c5f8:	0800c5d5 	.word	0x0800c5d5
 800c5fc:	0800c5d5 	.word	0x0800c5d5
 800c600:	0800c5d5 	.word	0x0800c5d5
 800c604:	0800c659 	.word	0x0800c659
 800c608:	0800c5d5 	.word	0x0800c5d5
 800c60c:	0800c5d5 	.word	0x0800c5d5
 800c610:	0800c5d5 	.word	0x0800c5d5
 800c614:	0800c5d5 	.word	0x0800c5d5
 800c618:	0800c757 	.word	0x0800c757
 800c61c:	0800c683 	.word	0x0800c683
 800c620:	0800c711 	.word	0x0800c711
 800c624:	0800c5d5 	.word	0x0800c5d5
 800c628:	0800c5d5 	.word	0x0800c5d5
 800c62c:	0800c779 	.word	0x0800c779
 800c630:	0800c5d5 	.word	0x0800c5d5
 800c634:	0800c683 	.word	0x0800c683
 800c638:	0800c5d5 	.word	0x0800c5d5
 800c63c:	0800c5d5 	.word	0x0800c5d5
 800c640:	0800c719 	.word	0x0800c719
 800c644:	6833      	ldr	r3, [r6, #0]
 800c646:	1d1a      	adds	r2, r3, #4
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6032      	str	r2, [r6, #0]
 800c64c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c654:	2301      	movs	r3, #1
 800c656:	e09c      	b.n	800c792 <_printf_i+0x1e6>
 800c658:	6833      	ldr	r3, [r6, #0]
 800c65a:	6820      	ldr	r0, [r4, #0]
 800c65c:	1d19      	adds	r1, r3, #4
 800c65e:	6031      	str	r1, [r6, #0]
 800c660:	0606      	lsls	r6, r0, #24
 800c662:	d501      	bpl.n	800c668 <_printf_i+0xbc>
 800c664:	681d      	ldr	r5, [r3, #0]
 800c666:	e003      	b.n	800c670 <_printf_i+0xc4>
 800c668:	0645      	lsls	r5, r0, #25
 800c66a:	d5fb      	bpl.n	800c664 <_printf_i+0xb8>
 800c66c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c670:	2d00      	cmp	r5, #0
 800c672:	da03      	bge.n	800c67c <_printf_i+0xd0>
 800c674:	232d      	movs	r3, #45	@ 0x2d
 800c676:	426d      	negs	r5, r5
 800c678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c67c:	4858      	ldr	r0, [pc, #352]	@ (800c7e0 <_printf_i+0x234>)
 800c67e:	230a      	movs	r3, #10
 800c680:	e011      	b.n	800c6a6 <_printf_i+0xfa>
 800c682:	6821      	ldr	r1, [r4, #0]
 800c684:	6833      	ldr	r3, [r6, #0]
 800c686:	0608      	lsls	r0, r1, #24
 800c688:	f853 5b04 	ldr.w	r5, [r3], #4
 800c68c:	d402      	bmi.n	800c694 <_printf_i+0xe8>
 800c68e:	0649      	lsls	r1, r1, #25
 800c690:	bf48      	it	mi
 800c692:	b2ad      	uxthmi	r5, r5
 800c694:	2f6f      	cmp	r7, #111	@ 0x6f
 800c696:	4852      	ldr	r0, [pc, #328]	@ (800c7e0 <_printf_i+0x234>)
 800c698:	6033      	str	r3, [r6, #0]
 800c69a:	bf14      	ite	ne
 800c69c:	230a      	movne	r3, #10
 800c69e:	2308      	moveq	r3, #8
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6a6:	6866      	ldr	r6, [r4, #4]
 800c6a8:	60a6      	str	r6, [r4, #8]
 800c6aa:	2e00      	cmp	r6, #0
 800c6ac:	db05      	blt.n	800c6ba <_printf_i+0x10e>
 800c6ae:	6821      	ldr	r1, [r4, #0]
 800c6b0:	432e      	orrs	r6, r5
 800c6b2:	f021 0104 	bic.w	r1, r1, #4
 800c6b6:	6021      	str	r1, [r4, #0]
 800c6b8:	d04b      	beq.n	800c752 <_printf_i+0x1a6>
 800c6ba:	4616      	mov	r6, r2
 800c6bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6c0:	fb03 5711 	mls	r7, r3, r1, r5
 800c6c4:	5dc7      	ldrb	r7, [r0, r7]
 800c6c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6ca:	462f      	mov	r7, r5
 800c6cc:	42bb      	cmp	r3, r7
 800c6ce:	460d      	mov	r5, r1
 800c6d0:	d9f4      	bls.n	800c6bc <_printf_i+0x110>
 800c6d2:	2b08      	cmp	r3, #8
 800c6d4:	d10b      	bne.n	800c6ee <_printf_i+0x142>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	07df      	lsls	r7, r3, #31
 800c6da:	d508      	bpl.n	800c6ee <_printf_i+0x142>
 800c6dc:	6923      	ldr	r3, [r4, #16]
 800c6de:	6861      	ldr	r1, [r4, #4]
 800c6e0:	4299      	cmp	r1, r3
 800c6e2:	bfde      	ittt	le
 800c6e4:	2330      	movle	r3, #48	@ 0x30
 800c6e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6ee:	1b92      	subs	r2, r2, r6
 800c6f0:	6122      	str	r2, [r4, #16]
 800c6f2:	f8cd a000 	str.w	sl, [sp]
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	aa03      	add	r2, sp, #12
 800c6fa:	4621      	mov	r1, r4
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	f7ff fee7 	bl	800c4d0 <_printf_common>
 800c702:	3001      	adds	r0, #1
 800c704:	d14a      	bne.n	800c79c <_printf_i+0x1f0>
 800c706:	f04f 30ff 	mov.w	r0, #4294967295
 800c70a:	b004      	add	sp, #16
 800c70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	f043 0320 	orr.w	r3, r3, #32
 800c716:	6023      	str	r3, [r4, #0]
 800c718:	4832      	ldr	r0, [pc, #200]	@ (800c7e4 <_printf_i+0x238>)
 800c71a:	2778      	movs	r7, #120	@ 0x78
 800c71c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c720:	6823      	ldr	r3, [r4, #0]
 800c722:	6831      	ldr	r1, [r6, #0]
 800c724:	061f      	lsls	r7, r3, #24
 800c726:	f851 5b04 	ldr.w	r5, [r1], #4
 800c72a:	d402      	bmi.n	800c732 <_printf_i+0x186>
 800c72c:	065f      	lsls	r7, r3, #25
 800c72e:	bf48      	it	mi
 800c730:	b2ad      	uxthmi	r5, r5
 800c732:	6031      	str	r1, [r6, #0]
 800c734:	07d9      	lsls	r1, r3, #31
 800c736:	bf44      	itt	mi
 800c738:	f043 0320 	orrmi.w	r3, r3, #32
 800c73c:	6023      	strmi	r3, [r4, #0]
 800c73e:	b11d      	cbz	r5, 800c748 <_printf_i+0x19c>
 800c740:	2310      	movs	r3, #16
 800c742:	e7ad      	b.n	800c6a0 <_printf_i+0xf4>
 800c744:	4826      	ldr	r0, [pc, #152]	@ (800c7e0 <_printf_i+0x234>)
 800c746:	e7e9      	b.n	800c71c <_printf_i+0x170>
 800c748:	6823      	ldr	r3, [r4, #0]
 800c74a:	f023 0320 	bic.w	r3, r3, #32
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	e7f6      	b.n	800c740 <_printf_i+0x194>
 800c752:	4616      	mov	r6, r2
 800c754:	e7bd      	b.n	800c6d2 <_printf_i+0x126>
 800c756:	6833      	ldr	r3, [r6, #0]
 800c758:	6825      	ldr	r5, [r4, #0]
 800c75a:	6961      	ldr	r1, [r4, #20]
 800c75c:	1d18      	adds	r0, r3, #4
 800c75e:	6030      	str	r0, [r6, #0]
 800c760:	062e      	lsls	r6, r5, #24
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	d501      	bpl.n	800c76a <_printf_i+0x1be>
 800c766:	6019      	str	r1, [r3, #0]
 800c768:	e002      	b.n	800c770 <_printf_i+0x1c4>
 800c76a:	0668      	lsls	r0, r5, #25
 800c76c:	d5fb      	bpl.n	800c766 <_printf_i+0x1ba>
 800c76e:	8019      	strh	r1, [r3, #0]
 800c770:	2300      	movs	r3, #0
 800c772:	6123      	str	r3, [r4, #16]
 800c774:	4616      	mov	r6, r2
 800c776:	e7bc      	b.n	800c6f2 <_printf_i+0x146>
 800c778:	6833      	ldr	r3, [r6, #0]
 800c77a:	1d1a      	adds	r2, r3, #4
 800c77c:	6032      	str	r2, [r6, #0]
 800c77e:	681e      	ldr	r6, [r3, #0]
 800c780:	6862      	ldr	r2, [r4, #4]
 800c782:	2100      	movs	r1, #0
 800c784:	4630      	mov	r0, r6
 800c786:	f7f3 fd23 	bl	80001d0 <memchr>
 800c78a:	b108      	cbz	r0, 800c790 <_printf_i+0x1e4>
 800c78c:	1b80      	subs	r0, r0, r6
 800c78e:	6060      	str	r0, [r4, #4]
 800c790:	6863      	ldr	r3, [r4, #4]
 800c792:	6123      	str	r3, [r4, #16]
 800c794:	2300      	movs	r3, #0
 800c796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c79a:	e7aa      	b.n	800c6f2 <_printf_i+0x146>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	4632      	mov	r2, r6
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	47d0      	blx	sl
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d0ad      	beq.n	800c706 <_printf_i+0x15a>
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	079b      	lsls	r3, r3, #30
 800c7ae:	d413      	bmi.n	800c7d8 <_printf_i+0x22c>
 800c7b0:	68e0      	ldr	r0, [r4, #12]
 800c7b2:	9b03      	ldr	r3, [sp, #12]
 800c7b4:	4298      	cmp	r0, r3
 800c7b6:	bfb8      	it	lt
 800c7b8:	4618      	movlt	r0, r3
 800c7ba:	e7a6      	b.n	800c70a <_printf_i+0x15e>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	4632      	mov	r2, r6
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	47d0      	blx	sl
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	d09d      	beq.n	800c706 <_printf_i+0x15a>
 800c7ca:	3501      	adds	r5, #1
 800c7cc:	68e3      	ldr	r3, [r4, #12]
 800c7ce:	9903      	ldr	r1, [sp, #12]
 800c7d0:	1a5b      	subs	r3, r3, r1
 800c7d2:	42ab      	cmp	r3, r5
 800c7d4:	dcf2      	bgt.n	800c7bc <_printf_i+0x210>
 800c7d6:	e7eb      	b.n	800c7b0 <_printf_i+0x204>
 800c7d8:	2500      	movs	r5, #0
 800c7da:	f104 0619 	add.w	r6, r4, #25
 800c7de:	e7f5      	b.n	800c7cc <_printf_i+0x220>
 800c7e0:	08010336 	.word	0x08010336
 800c7e4:	08010347 	.word	0x08010347

0800c7e8 <_scanf_float>:
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	b087      	sub	sp, #28
 800c7ee:	4691      	mov	r9, r2
 800c7f0:	9303      	str	r3, [sp, #12]
 800c7f2:	688b      	ldr	r3, [r1, #8]
 800c7f4:	1e5a      	subs	r2, r3, #1
 800c7f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c7fa:	bf81      	itttt	hi
 800c7fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c800:	eb03 0b05 	addhi.w	fp, r3, r5
 800c804:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c808:	608b      	strhi	r3, [r1, #8]
 800c80a:	680b      	ldr	r3, [r1, #0]
 800c80c:	460a      	mov	r2, r1
 800c80e:	f04f 0500 	mov.w	r5, #0
 800c812:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c816:	f842 3b1c 	str.w	r3, [r2], #28
 800c81a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c81e:	4680      	mov	r8, r0
 800c820:	460c      	mov	r4, r1
 800c822:	bf98      	it	ls
 800c824:	f04f 0b00 	movls.w	fp, #0
 800c828:	9201      	str	r2, [sp, #4]
 800c82a:	4616      	mov	r6, r2
 800c82c:	46aa      	mov	sl, r5
 800c82e:	462f      	mov	r7, r5
 800c830:	9502      	str	r5, [sp, #8]
 800c832:	68a2      	ldr	r2, [r4, #8]
 800c834:	b15a      	cbz	r2, 800c84e <_scanf_float+0x66>
 800c836:	f8d9 3000 	ldr.w	r3, [r9]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2b4e      	cmp	r3, #78	@ 0x4e
 800c83e:	d863      	bhi.n	800c908 <_scanf_float+0x120>
 800c840:	2b40      	cmp	r3, #64	@ 0x40
 800c842:	d83b      	bhi.n	800c8bc <_scanf_float+0xd4>
 800c844:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c848:	b2c8      	uxtb	r0, r1
 800c84a:	280e      	cmp	r0, #14
 800c84c:	d939      	bls.n	800c8c2 <_scanf_float+0xda>
 800c84e:	b11f      	cbz	r7, 800c858 <_scanf_float+0x70>
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c85c:	f1ba 0f01 	cmp.w	sl, #1
 800c860:	f200 8114 	bhi.w	800ca8c <_scanf_float+0x2a4>
 800c864:	9b01      	ldr	r3, [sp, #4]
 800c866:	429e      	cmp	r6, r3
 800c868:	f200 8105 	bhi.w	800ca76 <_scanf_float+0x28e>
 800c86c:	2001      	movs	r0, #1
 800c86e:	b007      	add	sp, #28
 800c870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c874:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c878:	2a0d      	cmp	r2, #13
 800c87a:	d8e8      	bhi.n	800c84e <_scanf_float+0x66>
 800c87c:	a101      	add	r1, pc, #4	@ (adr r1, 800c884 <_scanf_float+0x9c>)
 800c87e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c882:	bf00      	nop
 800c884:	0800c9cd 	.word	0x0800c9cd
 800c888:	0800c84f 	.word	0x0800c84f
 800c88c:	0800c84f 	.word	0x0800c84f
 800c890:	0800c84f 	.word	0x0800c84f
 800c894:	0800ca29 	.word	0x0800ca29
 800c898:	0800ca03 	.word	0x0800ca03
 800c89c:	0800c84f 	.word	0x0800c84f
 800c8a0:	0800c84f 	.word	0x0800c84f
 800c8a4:	0800c9db 	.word	0x0800c9db
 800c8a8:	0800c84f 	.word	0x0800c84f
 800c8ac:	0800c84f 	.word	0x0800c84f
 800c8b0:	0800c84f 	.word	0x0800c84f
 800c8b4:	0800c84f 	.word	0x0800c84f
 800c8b8:	0800c997 	.word	0x0800c997
 800c8bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c8c0:	e7da      	b.n	800c878 <_scanf_float+0x90>
 800c8c2:	290e      	cmp	r1, #14
 800c8c4:	d8c3      	bhi.n	800c84e <_scanf_float+0x66>
 800c8c6:	a001      	add	r0, pc, #4	@ (adr r0, 800c8cc <_scanf_float+0xe4>)
 800c8c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c8cc:	0800c987 	.word	0x0800c987
 800c8d0:	0800c84f 	.word	0x0800c84f
 800c8d4:	0800c987 	.word	0x0800c987
 800c8d8:	0800ca17 	.word	0x0800ca17
 800c8dc:	0800c84f 	.word	0x0800c84f
 800c8e0:	0800c929 	.word	0x0800c929
 800c8e4:	0800c96d 	.word	0x0800c96d
 800c8e8:	0800c96d 	.word	0x0800c96d
 800c8ec:	0800c96d 	.word	0x0800c96d
 800c8f0:	0800c96d 	.word	0x0800c96d
 800c8f4:	0800c96d 	.word	0x0800c96d
 800c8f8:	0800c96d 	.word	0x0800c96d
 800c8fc:	0800c96d 	.word	0x0800c96d
 800c900:	0800c96d 	.word	0x0800c96d
 800c904:	0800c96d 	.word	0x0800c96d
 800c908:	2b6e      	cmp	r3, #110	@ 0x6e
 800c90a:	d809      	bhi.n	800c920 <_scanf_float+0x138>
 800c90c:	2b60      	cmp	r3, #96	@ 0x60
 800c90e:	d8b1      	bhi.n	800c874 <_scanf_float+0x8c>
 800c910:	2b54      	cmp	r3, #84	@ 0x54
 800c912:	d07b      	beq.n	800ca0c <_scanf_float+0x224>
 800c914:	2b59      	cmp	r3, #89	@ 0x59
 800c916:	d19a      	bne.n	800c84e <_scanf_float+0x66>
 800c918:	2d07      	cmp	r5, #7
 800c91a:	d198      	bne.n	800c84e <_scanf_float+0x66>
 800c91c:	2508      	movs	r5, #8
 800c91e:	e02f      	b.n	800c980 <_scanf_float+0x198>
 800c920:	2b74      	cmp	r3, #116	@ 0x74
 800c922:	d073      	beq.n	800ca0c <_scanf_float+0x224>
 800c924:	2b79      	cmp	r3, #121	@ 0x79
 800c926:	e7f6      	b.n	800c916 <_scanf_float+0x12e>
 800c928:	6821      	ldr	r1, [r4, #0]
 800c92a:	05c8      	lsls	r0, r1, #23
 800c92c:	d51e      	bpl.n	800c96c <_scanf_float+0x184>
 800c92e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c932:	6021      	str	r1, [r4, #0]
 800c934:	3701      	adds	r7, #1
 800c936:	f1bb 0f00 	cmp.w	fp, #0
 800c93a:	d003      	beq.n	800c944 <_scanf_float+0x15c>
 800c93c:	3201      	adds	r2, #1
 800c93e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c942:	60a2      	str	r2, [r4, #8]
 800c944:	68a3      	ldr	r3, [r4, #8]
 800c946:	3b01      	subs	r3, #1
 800c948:	60a3      	str	r3, [r4, #8]
 800c94a:	6923      	ldr	r3, [r4, #16]
 800c94c:	3301      	adds	r3, #1
 800c94e:	6123      	str	r3, [r4, #16]
 800c950:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c954:	3b01      	subs	r3, #1
 800c956:	2b00      	cmp	r3, #0
 800c958:	f8c9 3004 	str.w	r3, [r9, #4]
 800c95c:	f340 8082 	ble.w	800ca64 <_scanf_float+0x27c>
 800c960:	f8d9 3000 	ldr.w	r3, [r9]
 800c964:	3301      	adds	r3, #1
 800c966:	f8c9 3000 	str.w	r3, [r9]
 800c96a:	e762      	b.n	800c832 <_scanf_float+0x4a>
 800c96c:	eb1a 0105 	adds.w	r1, sl, r5
 800c970:	f47f af6d 	bne.w	800c84e <_scanf_float+0x66>
 800c974:	6822      	ldr	r2, [r4, #0]
 800c976:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c97a:	6022      	str	r2, [r4, #0]
 800c97c:	460d      	mov	r5, r1
 800c97e:	468a      	mov	sl, r1
 800c980:	f806 3b01 	strb.w	r3, [r6], #1
 800c984:	e7de      	b.n	800c944 <_scanf_float+0x15c>
 800c986:	6822      	ldr	r2, [r4, #0]
 800c988:	0610      	lsls	r0, r2, #24
 800c98a:	f57f af60 	bpl.w	800c84e <_scanf_float+0x66>
 800c98e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c992:	6022      	str	r2, [r4, #0]
 800c994:	e7f4      	b.n	800c980 <_scanf_float+0x198>
 800c996:	f1ba 0f00 	cmp.w	sl, #0
 800c99a:	d10c      	bne.n	800c9b6 <_scanf_float+0x1ce>
 800c99c:	b977      	cbnz	r7, 800c9bc <_scanf_float+0x1d4>
 800c99e:	6822      	ldr	r2, [r4, #0]
 800c9a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c9a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9a8:	d108      	bne.n	800c9bc <_scanf_float+0x1d4>
 800c9aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9ae:	6022      	str	r2, [r4, #0]
 800c9b0:	f04f 0a01 	mov.w	sl, #1
 800c9b4:	e7e4      	b.n	800c980 <_scanf_float+0x198>
 800c9b6:	f1ba 0f02 	cmp.w	sl, #2
 800c9ba:	d050      	beq.n	800ca5e <_scanf_float+0x276>
 800c9bc:	2d01      	cmp	r5, #1
 800c9be:	d002      	beq.n	800c9c6 <_scanf_float+0x1de>
 800c9c0:	2d04      	cmp	r5, #4
 800c9c2:	f47f af44 	bne.w	800c84e <_scanf_float+0x66>
 800c9c6:	3501      	adds	r5, #1
 800c9c8:	b2ed      	uxtb	r5, r5
 800c9ca:	e7d9      	b.n	800c980 <_scanf_float+0x198>
 800c9cc:	f1ba 0f01 	cmp.w	sl, #1
 800c9d0:	f47f af3d 	bne.w	800c84e <_scanf_float+0x66>
 800c9d4:	f04f 0a02 	mov.w	sl, #2
 800c9d8:	e7d2      	b.n	800c980 <_scanf_float+0x198>
 800c9da:	b975      	cbnz	r5, 800c9fa <_scanf_float+0x212>
 800c9dc:	2f00      	cmp	r7, #0
 800c9de:	f47f af37 	bne.w	800c850 <_scanf_float+0x68>
 800c9e2:	6822      	ldr	r2, [r4, #0]
 800c9e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c9e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9ec:	f040 8103 	bne.w	800cbf6 <_scanf_float+0x40e>
 800c9f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9f4:	6022      	str	r2, [r4, #0]
 800c9f6:	2501      	movs	r5, #1
 800c9f8:	e7c2      	b.n	800c980 <_scanf_float+0x198>
 800c9fa:	2d03      	cmp	r5, #3
 800c9fc:	d0e3      	beq.n	800c9c6 <_scanf_float+0x1de>
 800c9fe:	2d05      	cmp	r5, #5
 800ca00:	e7df      	b.n	800c9c2 <_scanf_float+0x1da>
 800ca02:	2d02      	cmp	r5, #2
 800ca04:	f47f af23 	bne.w	800c84e <_scanf_float+0x66>
 800ca08:	2503      	movs	r5, #3
 800ca0a:	e7b9      	b.n	800c980 <_scanf_float+0x198>
 800ca0c:	2d06      	cmp	r5, #6
 800ca0e:	f47f af1e 	bne.w	800c84e <_scanf_float+0x66>
 800ca12:	2507      	movs	r5, #7
 800ca14:	e7b4      	b.n	800c980 <_scanf_float+0x198>
 800ca16:	6822      	ldr	r2, [r4, #0]
 800ca18:	0591      	lsls	r1, r2, #22
 800ca1a:	f57f af18 	bpl.w	800c84e <_scanf_float+0x66>
 800ca1e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ca22:	6022      	str	r2, [r4, #0]
 800ca24:	9702      	str	r7, [sp, #8]
 800ca26:	e7ab      	b.n	800c980 <_scanf_float+0x198>
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ca2e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ca32:	d005      	beq.n	800ca40 <_scanf_float+0x258>
 800ca34:	0550      	lsls	r0, r2, #21
 800ca36:	f57f af0a 	bpl.w	800c84e <_scanf_float+0x66>
 800ca3a:	2f00      	cmp	r7, #0
 800ca3c:	f000 80db 	beq.w	800cbf6 <_scanf_float+0x40e>
 800ca40:	0591      	lsls	r1, r2, #22
 800ca42:	bf58      	it	pl
 800ca44:	9902      	ldrpl	r1, [sp, #8]
 800ca46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca4a:	bf58      	it	pl
 800ca4c:	1a79      	subpl	r1, r7, r1
 800ca4e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ca52:	bf58      	it	pl
 800ca54:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ca58:	6022      	str	r2, [r4, #0]
 800ca5a:	2700      	movs	r7, #0
 800ca5c:	e790      	b.n	800c980 <_scanf_float+0x198>
 800ca5e:	f04f 0a03 	mov.w	sl, #3
 800ca62:	e78d      	b.n	800c980 <_scanf_float+0x198>
 800ca64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ca68:	4649      	mov	r1, r9
 800ca6a:	4640      	mov	r0, r8
 800ca6c:	4798      	blx	r3
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	f43f aedf 	beq.w	800c832 <_scanf_float+0x4a>
 800ca74:	e6eb      	b.n	800c84e <_scanf_float+0x66>
 800ca76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca7e:	464a      	mov	r2, r9
 800ca80:	4640      	mov	r0, r8
 800ca82:	4798      	blx	r3
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	6123      	str	r3, [r4, #16]
 800ca8a:	e6eb      	b.n	800c864 <_scanf_float+0x7c>
 800ca8c:	1e6b      	subs	r3, r5, #1
 800ca8e:	2b06      	cmp	r3, #6
 800ca90:	d824      	bhi.n	800cadc <_scanf_float+0x2f4>
 800ca92:	2d02      	cmp	r5, #2
 800ca94:	d836      	bhi.n	800cb04 <_scanf_float+0x31c>
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	429e      	cmp	r6, r3
 800ca9a:	f67f aee7 	bls.w	800c86c <_scanf_float+0x84>
 800ca9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800caa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800caa6:	464a      	mov	r2, r9
 800caa8:	4640      	mov	r0, r8
 800caaa:	4798      	blx	r3
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	3b01      	subs	r3, #1
 800cab0:	6123      	str	r3, [r4, #16]
 800cab2:	e7f0      	b.n	800ca96 <_scanf_float+0x2ae>
 800cab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cab8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cabc:	464a      	mov	r2, r9
 800cabe:	4640      	mov	r0, r8
 800cac0:	4798      	blx	r3
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	6123      	str	r3, [r4, #16]
 800cac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cacc:	fa5f fa8a 	uxtb.w	sl, sl
 800cad0:	f1ba 0f02 	cmp.w	sl, #2
 800cad4:	d1ee      	bne.n	800cab4 <_scanf_float+0x2cc>
 800cad6:	3d03      	subs	r5, #3
 800cad8:	b2ed      	uxtb	r5, r5
 800cada:	1b76      	subs	r6, r6, r5
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	05da      	lsls	r2, r3, #23
 800cae0:	d530      	bpl.n	800cb44 <_scanf_float+0x35c>
 800cae2:	055b      	lsls	r3, r3, #21
 800cae4:	d511      	bpl.n	800cb0a <_scanf_float+0x322>
 800cae6:	9b01      	ldr	r3, [sp, #4]
 800cae8:	429e      	cmp	r6, r3
 800caea:	f67f aebf 	bls.w	800c86c <_scanf_float+0x84>
 800caee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800caf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800caf6:	464a      	mov	r2, r9
 800caf8:	4640      	mov	r0, r8
 800cafa:	4798      	blx	r3
 800cafc:	6923      	ldr	r3, [r4, #16]
 800cafe:	3b01      	subs	r3, #1
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	e7f0      	b.n	800cae6 <_scanf_float+0x2fe>
 800cb04:	46aa      	mov	sl, r5
 800cb06:	46b3      	mov	fp, r6
 800cb08:	e7de      	b.n	800cac8 <_scanf_float+0x2e0>
 800cb0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	2965      	cmp	r1, #101	@ 0x65
 800cb12:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb16:	f106 35ff 	add.w	r5, r6, #4294967295
 800cb1a:	6123      	str	r3, [r4, #16]
 800cb1c:	d00c      	beq.n	800cb38 <_scanf_float+0x350>
 800cb1e:	2945      	cmp	r1, #69	@ 0x45
 800cb20:	d00a      	beq.n	800cb38 <_scanf_float+0x350>
 800cb22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb26:	464a      	mov	r2, r9
 800cb28:	4640      	mov	r0, r8
 800cb2a:	4798      	blx	r3
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb32:	3b01      	subs	r3, #1
 800cb34:	1eb5      	subs	r5, r6, #2
 800cb36:	6123      	str	r3, [r4, #16]
 800cb38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb3c:	464a      	mov	r2, r9
 800cb3e:	4640      	mov	r0, r8
 800cb40:	4798      	blx	r3
 800cb42:	462e      	mov	r6, r5
 800cb44:	6822      	ldr	r2, [r4, #0]
 800cb46:	f012 0210 	ands.w	r2, r2, #16
 800cb4a:	d001      	beq.n	800cb50 <_scanf_float+0x368>
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	e68e      	b.n	800c86e <_scanf_float+0x86>
 800cb50:	7032      	strb	r2, [r6, #0]
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cb58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb5c:	d125      	bne.n	800cbaa <_scanf_float+0x3c2>
 800cb5e:	9b02      	ldr	r3, [sp, #8]
 800cb60:	429f      	cmp	r7, r3
 800cb62:	d00a      	beq.n	800cb7a <_scanf_float+0x392>
 800cb64:	1bda      	subs	r2, r3, r7
 800cb66:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cb6a:	429e      	cmp	r6, r3
 800cb6c:	bf28      	it	cs
 800cb6e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cb72:	4922      	ldr	r1, [pc, #136]	@ (800cbfc <_scanf_float+0x414>)
 800cb74:	4630      	mov	r0, r6
 800cb76:	f000 f907 	bl	800cd88 <siprintf>
 800cb7a:	9901      	ldr	r1, [sp, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4640      	mov	r0, r8
 800cb80:	f7ff f95a 	bl	800be38 <_strtod_r>
 800cb84:	9b03      	ldr	r3, [sp, #12]
 800cb86:	6821      	ldr	r1, [r4, #0]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f011 0f02 	tst.w	r1, #2
 800cb8e:	ec57 6b10 	vmov	r6, r7, d0
 800cb92:	f103 0204 	add.w	r2, r3, #4
 800cb96:	d015      	beq.n	800cbc4 <_scanf_float+0x3dc>
 800cb98:	9903      	ldr	r1, [sp, #12]
 800cb9a:	600a      	str	r2, [r1, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	e9c3 6700 	strd	r6, r7, [r3]
 800cba2:	68e3      	ldr	r3, [r4, #12]
 800cba4:	3301      	adds	r3, #1
 800cba6:	60e3      	str	r3, [r4, #12]
 800cba8:	e7d0      	b.n	800cb4c <_scanf_float+0x364>
 800cbaa:	9b04      	ldr	r3, [sp, #16]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d0e4      	beq.n	800cb7a <_scanf_float+0x392>
 800cbb0:	9905      	ldr	r1, [sp, #20]
 800cbb2:	230a      	movs	r3, #10
 800cbb4:	3101      	adds	r1, #1
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	f7ff f9be 	bl	800bf38 <_strtol_r>
 800cbbc:	9b04      	ldr	r3, [sp, #16]
 800cbbe:	9e05      	ldr	r6, [sp, #20]
 800cbc0:	1ac2      	subs	r2, r0, r3
 800cbc2:	e7d0      	b.n	800cb66 <_scanf_float+0x37e>
 800cbc4:	f011 0f04 	tst.w	r1, #4
 800cbc8:	9903      	ldr	r1, [sp, #12]
 800cbca:	600a      	str	r2, [r1, #0]
 800cbcc:	d1e6      	bne.n	800cb9c <_scanf_float+0x3b4>
 800cbce:	681d      	ldr	r5, [r3, #0]
 800cbd0:	4632      	mov	r2, r6
 800cbd2:	463b      	mov	r3, r7
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 ffa8 	bl	8000b2c <__aeabi_dcmpun>
 800cbdc:	b128      	cbz	r0, 800cbea <_scanf_float+0x402>
 800cbde:	4808      	ldr	r0, [pc, #32]	@ (800cc00 <_scanf_float+0x418>)
 800cbe0:	f000 fa7e 	bl	800d0e0 <nanf>
 800cbe4:	ed85 0a00 	vstr	s0, [r5]
 800cbe8:	e7db      	b.n	800cba2 <_scanf_float+0x3ba>
 800cbea:	4630      	mov	r0, r6
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 fffb 	bl	8000be8 <__aeabi_d2f>
 800cbf2:	6028      	str	r0, [r5, #0]
 800cbf4:	e7d5      	b.n	800cba2 <_scanf_float+0x3ba>
 800cbf6:	2700      	movs	r7, #0
 800cbf8:	e62e      	b.n	800c858 <_scanf_float+0x70>
 800cbfa:	bf00      	nop
 800cbfc:	08010358 	.word	0x08010358
 800cc00:	08010512 	.word	0x08010512

0800cc04 <std>:
 800cc04:	2300      	movs	r3, #0
 800cc06:	b510      	push	{r4, lr}
 800cc08:	4604      	mov	r4, r0
 800cc0a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc12:	6083      	str	r3, [r0, #8]
 800cc14:	8181      	strh	r1, [r0, #12]
 800cc16:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc18:	81c2      	strh	r2, [r0, #14]
 800cc1a:	6183      	str	r3, [r0, #24]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	2208      	movs	r2, #8
 800cc20:	305c      	adds	r0, #92	@ 0x5c
 800cc22:	f000 f944 	bl	800ceae <memset>
 800cc26:	4b0d      	ldr	r3, [pc, #52]	@ (800cc5c <std+0x58>)
 800cc28:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <std+0x5c>)
 800cc2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc64 <std+0x60>)
 800cc30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc32:	4b0d      	ldr	r3, [pc, #52]	@ (800cc68 <std+0x64>)
 800cc34:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc36:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <std+0x68>)
 800cc38:	6224      	str	r4, [r4, #32]
 800cc3a:	429c      	cmp	r4, r3
 800cc3c:	d006      	beq.n	800cc4c <std+0x48>
 800cc3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc42:	4294      	cmp	r4, r2
 800cc44:	d002      	beq.n	800cc4c <std+0x48>
 800cc46:	33d0      	adds	r3, #208	@ 0xd0
 800cc48:	429c      	cmp	r4, r3
 800cc4a:	d105      	bne.n	800cc58 <std+0x54>
 800cc4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc54:	f000 ba28 	b.w	800d0a8 <__retarget_lock_init_recursive>
 800cc58:	bd10      	pop	{r4, pc}
 800cc5a:	bf00      	nop
 800cc5c:	0800ce25 	.word	0x0800ce25
 800cc60:	0800ce4b 	.word	0x0800ce4b
 800cc64:	0800ce83 	.word	0x0800ce83
 800cc68:	0800cea7 	.word	0x0800cea7
 800cc6c:	200059a0 	.word	0x200059a0

0800cc70 <stdio_exit_handler>:
 800cc70:	4a02      	ldr	r2, [pc, #8]	@ (800cc7c <stdio_exit_handler+0xc>)
 800cc72:	4903      	ldr	r1, [pc, #12]	@ (800cc80 <stdio_exit_handler+0x10>)
 800cc74:	4803      	ldr	r0, [pc, #12]	@ (800cc84 <stdio_exit_handler+0x14>)
 800cc76:	f000 b869 	b.w	800cd4c <_fwalk_sglue>
 800cc7a:	bf00      	nop
 800cc7c:	2000003c 	.word	0x2000003c
 800cc80:	0800f90d 	.word	0x0800f90d
 800cc84:	200001b8 	.word	0x200001b8

0800cc88 <cleanup_stdio>:
 800cc88:	6841      	ldr	r1, [r0, #4]
 800cc8a:	4b0c      	ldr	r3, [pc, #48]	@ (800ccbc <cleanup_stdio+0x34>)
 800cc8c:	4299      	cmp	r1, r3
 800cc8e:	b510      	push	{r4, lr}
 800cc90:	4604      	mov	r4, r0
 800cc92:	d001      	beq.n	800cc98 <cleanup_stdio+0x10>
 800cc94:	f002 fe3a 	bl	800f90c <_fflush_r>
 800cc98:	68a1      	ldr	r1, [r4, #8]
 800cc9a:	4b09      	ldr	r3, [pc, #36]	@ (800ccc0 <cleanup_stdio+0x38>)
 800cc9c:	4299      	cmp	r1, r3
 800cc9e:	d002      	beq.n	800cca6 <cleanup_stdio+0x1e>
 800cca0:	4620      	mov	r0, r4
 800cca2:	f002 fe33 	bl	800f90c <_fflush_r>
 800cca6:	68e1      	ldr	r1, [r4, #12]
 800cca8:	4b06      	ldr	r3, [pc, #24]	@ (800ccc4 <cleanup_stdio+0x3c>)
 800ccaa:	4299      	cmp	r1, r3
 800ccac:	d004      	beq.n	800ccb8 <cleanup_stdio+0x30>
 800ccae:	4620      	mov	r0, r4
 800ccb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccb4:	f002 be2a 	b.w	800f90c <_fflush_r>
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	bf00      	nop
 800ccbc:	200059a0 	.word	0x200059a0
 800ccc0:	20005a08 	.word	0x20005a08
 800ccc4:	20005a70 	.word	0x20005a70

0800ccc8 <global_stdio_init.part.0>:
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	4b0b      	ldr	r3, [pc, #44]	@ (800ccf8 <global_stdio_init.part.0+0x30>)
 800cccc:	4c0b      	ldr	r4, [pc, #44]	@ (800ccfc <global_stdio_init.part.0+0x34>)
 800ccce:	4a0c      	ldr	r2, [pc, #48]	@ (800cd00 <global_stdio_init.part.0+0x38>)
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2104      	movs	r1, #4
 800ccd8:	f7ff ff94 	bl	800cc04 <std>
 800ccdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cce0:	2201      	movs	r2, #1
 800cce2:	2109      	movs	r1, #9
 800cce4:	f7ff ff8e 	bl	800cc04 <std>
 800cce8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ccec:	2202      	movs	r2, #2
 800ccee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf2:	2112      	movs	r1, #18
 800ccf4:	f7ff bf86 	b.w	800cc04 <std>
 800ccf8:	20005ad8 	.word	0x20005ad8
 800ccfc:	200059a0 	.word	0x200059a0
 800cd00:	0800cc71 	.word	0x0800cc71

0800cd04 <__sfp_lock_acquire>:
 800cd04:	4801      	ldr	r0, [pc, #4]	@ (800cd0c <__sfp_lock_acquire+0x8>)
 800cd06:	f000 b9d0 	b.w	800d0aa <__retarget_lock_acquire_recursive>
 800cd0a:	bf00      	nop
 800cd0c:	20005ae1 	.word	0x20005ae1

0800cd10 <__sfp_lock_release>:
 800cd10:	4801      	ldr	r0, [pc, #4]	@ (800cd18 <__sfp_lock_release+0x8>)
 800cd12:	f000 b9cb 	b.w	800d0ac <__retarget_lock_release_recursive>
 800cd16:	bf00      	nop
 800cd18:	20005ae1 	.word	0x20005ae1

0800cd1c <__sinit>:
 800cd1c:	b510      	push	{r4, lr}
 800cd1e:	4604      	mov	r4, r0
 800cd20:	f7ff fff0 	bl	800cd04 <__sfp_lock_acquire>
 800cd24:	6a23      	ldr	r3, [r4, #32]
 800cd26:	b11b      	cbz	r3, 800cd30 <__sinit+0x14>
 800cd28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd2c:	f7ff bff0 	b.w	800cd10 <__sfp_lock_release>
 800cd30:	4b04      	ldr	r3, [pc, #16]	@ (800cd44 <__sinit+0x28>)
 800cd32:	6223      	str	r3, [r4, #32]
 800cd34:	4b04      	ldr	r3, [pc, #16]	@ (800cd48 <__sinit+0x2c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1f5      	bne.n	800cd28 <__sinit+0xc>
 800cd3c:	f7ff ffc4 	bl	800ccc8 <global_stdio_init.part.0>
 800cd40:	e7f2      	b.n	800cd28 <__sinit+0xc>
 800cd42:	bf00      	nop
 800cd44:	0800cc89 	.word	0x0800cc89
 800cd48:	20005ad8 	.word	0x20005ad8

0800cd4c <_fwalk_sglue>:
 800cd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd50:	4607      	mov	r7, r0
 800cd52:	4688      	mov	r8, r1
 800cd54:	4614      	mov	r4, r2
 800cd56:	2600      	movs	r6, #0
 800cd58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd5c:	f1b9 0901 	subs.w	r9, r9, #1
 800cd60:	d505      	bpl.n	800cd6e <_fwalk_sglue+0x22>
 800cd62:	6824      	ldr	r4, [r4, #0]
 800cd64:	2c00      	cmp	r4, #0
 800cd66:	d1f7      	bne.n	800cd58 <_fwalk_sglue+0xc>
 800cd68:	4630      	mov	r0, r6
 800cd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd6e:	89ab      	ldrh	r3, [r5, #12]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d907      	bls.n	800cd84 <_fwalk_sglue+0x38>
 800cd74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	d003      	beq.n	800cd84 <_fwalk_sglue+0x38>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4638      	mov	r0, r7
 800cd80:	47c0      	blx	r8
 800cd82:	4306      	orrs	r6, r0
 800cd84:	3568      	adds	r5, #104	@ 0x68
 800cd86:	e7e9      	b.n	800cd5c <_fwalk_sglue+0x10>

0800cd88 <siprintf>:
 800cd88:	b40e      	push	{r1, r2, r3}
 800cd8a:	b510      	push	{r4, lr}
 800cd8c:	b09d      	sub	sp, #116	@ 0x74
 800cd8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cd90:	9002      	str	r0, [sp, #8]
 800cd92:	9006      	str	r0, [sp, #24]
 800cd94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cd98:	480a      	ldr	r0, [pc, #40]	@ (800cdc4 <siprintf+0x3c>)
 800cd9a:	9107      	str	r1, [sp, #28]
 800cd9c:	9104      	str	r1, [sp, #16]
 800cd9e:	490a      	ldr	r1, [pc, #40]	@ (800cdc8 <siprintf+0x40>)
 800cda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda4:	9105      	str	r1, [sp, #20]
 800cda6:	2400      	movs	r4, #0
 800cda8:	a902      	add	r1, sp, #8
 800cdaa:	6800      	ldr	r0, [r0, #0]
 800cdac:	9301      	str	r3, [sp, #4]
 800cdae:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cdb0:	f002 f90e 	bl	800efd0 <_svfiprintf_r>
 800cdb4:	9b02      	ldr	r3, [sp, #8]
 800cdb6:	701c      	strb	r4, [r3, #0]
 800cdb8:	b01d      	add	sp, #116	@ 0x74
 800cdba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdbe:	b003      	add	sp, #12
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	200001b4 	.word	0x200001b4
 800cdc8:	ffff0208 	.word	0xffff0208

0800cdcc <siscanf>:
 800cdcc:	b40e      	push	{r1, r2, r3}
 800cdce:	b570      	push	{r4, r5, r6, lr}
 800cdd0:	b09d      	sub	sp, #116	@ 0x74
 800cdd2:	ac21      	add	r4, sp, #132	@ 0x84
 800cdd4:	2500      	movs	r5, #0
 800cdd6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800cdda:	f854 6b04 	ldr.w	r6, [r4], #4
 800cdde:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cde2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800cde4:	9002      	str	r0, [sp, #8]
 800cde6:	9006      	str	r0, [sp, #24]
 800cde8:	f7f3 fa42 	bl	8000270 <strlen>
 800cdec:	4b0b      	ldr	r3, [pc, #44]	@ (800ce1c <siscanf+0x50>)
 800cdee:	9003      	str	r0, [sp, #12]
 800cdf0:	9007      	str	r0, [sp, #28]
 800cdf2:	480b      	ldr	r0, [pc, #44]	@ (800ce20 <siscanf+0x54>)
 800cdf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdfa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cdfe:	4632      	mov	r2, r6
 800ce00:	4623      	mov	r3, r4
 800ce02:	a902      	add	r1, sp, #8
 800ce04:	6800      	ldr	r0, [r0, #0]
 800ce06:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ce08:	9514      	str	r5, [sp, #80]	@ 0x50
 800ce0a:	9401      	str	r4, [sp, #4]
 800ce0c:	f002 fa36 	bl	800f27c <__ssvfiscanf_r>
 800ce10:	b01d      	add	sp, #116	@ 0x74
 800ce12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce16:	b003      	add	sp, #12
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	0800ce47 	.word	0x0800ce47
 800ce20:	200001b4 	.word	0x200001b4

0800ce24 <__sread>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	460c      	mov	r4, r1
 800ce28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce2c:	f000 f8de 	bl	800cfec <_read_r>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	bfab      	itete	ge
 800ce34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce36:	89a3      	ldrhlt	r3, [r4, #12]
 800ce38:	181b      	addge	r3, r3, r0
 800ce3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce3e:	bfac      	ite	ge
 800ce40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce42:	81a3      	strhlt	r3, [r4, #12]
 800ce44:	bd10      	pop	{r4, pc}

0800ce46 <__seofread>:
 800ce46:	2000      	movs	r0, #0
 800ce48:	4770      	bx	lr

0800ce4a <__swrite>:
 800ce4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4e:	461f      	mov	r7, r3
 800ce50:	898b      	ldrh	r3, [r1, #12]
 800ce52:	05db      	lsls	r3, r3, #23
 800ce54:	4605      	mov	r5, r0
 800ce56:	460c      	mov	r4, r1
 800ce58:	4616      	mov	r6, r2
 800ce5a:	d505      	bpl.n	800ce68 <__swrite+0x1e>
 800ce5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce60:	2302      	movs	r3, #2
 800ce62:	2200      	movs	r2, #0
 800ce64:	f000 f8b0 	bl	800cfc8 <_lseek_r>
 800ce68:	89a3      	ldrh	r3, [r4, #12]
 800ce6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce72:	81a3      	strh	r3, [r4, #12]
 800ce74:	4632      	mov	r2, r6
 800ce76:	463b      	mov	r3, r7
 800ce78:	4628      	mov	r0, r5
 800ce7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7e:	f000 b8d7 	b.w	800d030 <_write_r>

0800ce82 <__sseek>:
 800ce82:	b510      	push	{r4, lr}
 800ce84:	460c      	mov	r4, r1
 800ce86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce8a:	f000 f89d 	bl	800cfc8 <_lseek_r>
 800ce8e:	1c43      	adds	r3, r0, #1
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	bf15      	itete	ne
 800ce94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce9e:	81a3      	strheq	r3, [r4, #12]
 800cea0:	bf18      	it	ne
 800cea2:	81a3      	strhne	r3, [r4, #12]
 800cea4:	bd10      	pop	{r4, pc}

0800cea6 <__sclose>:
 800cea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceaa:	f000 b81f 	b.w	800ceec <_close_r>

0800ceae <memset>:
 800ceae:	4402      	add	r2, r0
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d100      	bne.n	800ceb8 <memset+0xa>
 800ceb6:	4770      	bx	lr
 800ceb8:	f803 1b01 	strb.w	r1, [r3], #1
 800cebc:	e7f9      	b.n	800ceb2 <memset+0x4>

0800cebe <strncmp>:
 800cebe:	b510      	push	{r4, lr}
 800cec0:	b16a      	cbz	r2, 800cede <strncmp+0x20>
 800cec2:	3901      	subs	r1, #1
 800cec4:	1884      	adds	r4, r0, r2
 800cec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cece:	429a      	cmp	r2, r3
 800ced0:	d103      	bne.n	800ceda <strncmp+0x1c>
 800ced2:	42a0      	cmp	r0, r4
 800ced4:	d001      	beq.n	800ceda <strncmp+0x1c>
 800ced6:	2a00      	cmp	r2, #0
 800ced8:	d1f5      	bne.n	800cec6 <strncmp+0x8>
 800ceda:	1ad0      	subs	r0, r2, r3
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	4610      	mov	r0, r2
 800cee0:	e7fc      	b.n	800cedc <strncmp+0x1e>
	...

0800cee4 <_localeconv_r>:
 800cee4:	4800      	ldr	r0, [pc, #0]	@ (800cee8 <_localeconv_r+0x4>)
 800cee6:	4770      	bx	lr
 800cee8:	20000138 	.word	0x20000138

0800ceec <_close_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d06      	ldr	r5, [pc, #24]	@ (800cf08 <_close_r+0x1c>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	602b      	str	r3, [r5, #0]
 800cef8:	f7f5 fa60 	bl	80023bc <_close>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d102      	bne.n	800cf06 <_close_r+0x1a>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	b103      	cbz	r3, 800cf06 <_close_r+0x1a>
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	20005adc 	.word	0x20005adc

0800cf0c <_reclaim_reent>:
 800cf0c:	4b2d      	ldr	r3, [pc, #180]	@ (800cfc4 <_reclaim_reent+0xb8>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4283      	cmp	r3, r0
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	4604      	mov	r4, r0
 800cf16:	d053      	beq.n	800cfc0 <_reclaim_reent+0xb4>
 800cf18:	69c3      	ldr	r3, [r0, #28]
 800cf1a:	b31b      	cbz	r3, 800cf64 <_reclaim_reent+0x58>
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	b163      	cbz	r3, 800cf3a <_reclaim_reent+0x2e>
 800cf20:	2500      	movs	r5, #0
 800cf22:	69e3      	ldr	r3, [r4, #28]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	5959      	ldr	r1, [r3, r5]
 800cf28:	b9b1      	cbnz	r1, 800cf58 <_reclaim_reent+0x4c>
 800cf2a:	3504      	adds	r5, #4
 800cf2c:	2d80      	cmp	r5, #128	@ 0x80
 800cf2e:	d1f8      	bne.n	800cf22 <_reclaim_reent+0x16>
 800cf30:	69e3      	ldr	r3, [r4, #28]
 800cf32:	4620      	mov	r0, r4
 800cf34:	68d9      	ldr	r1, [r3, #12]
 800cf36:	f000 ff33 	bl	800dda0 <_free_r>
 800cf3a:	69e3      	ldr	r3, [r4, #28]
 800cf3c:	6819      	ldr	r1, [r3, #0]
 800cf3e:	b111      	cbz	r1, 800cf46 <_reclaim_reent+0x3a>
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 ff2d 	bl	800dda0 <_free_r>
 800cf46:	69e3      	ldr	r3, [r4, #28]
 800cf48:	689d      	ldr	r5, [r3, #8]
 800cf4a:	b15d      	cbz	r5, 800cf64 <_reclaim_reent+0x58>
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	4620      	mov	r0, r4
 800cf50:	682d      	ldr	r5, [r5, #0]
 800cf52:	f000 ff25 	bl	800dda0 <_free_r>
 800cf56:	e7f8      	b.n	800cf4a <_reclaim_reent+0x3e>
 800cf58:	680e      	ldr	r6, [r1, #0]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 ff20 	bl	800dda0 <_free_r>
 800cf60:	4631      	mov	r1, r6
 800cf62:	e7e1      	b.n	800cf28 <_reclaim_reent+0x1c>
 800cf64:	6961      	ldr	r1, [r4, #20]
 800cf66:	b111      	cbz	r1, 800cf6e <_reclaim_reent+0x62>
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f000 ff19 	bl	800dda0 <_free_r>
 800cf6e:	69e1      	ldr	r1, [r4, #28]
 800cf70:	b111      	cbz	r1, 800cf78 <_reclaim_reent+0x6c>
 800cf72:	4620      	mov	r0, r4
 800cf74:	f000 ff14 	bl	800dda0 <_free_r>
 800cf78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cf7a:	b111      	cbz	r1, 800cf82 <_reclaim_reent+0x76>
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 ff0f 	bl	800dda0 <_free_r>
 800cf82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf84:	b111      	cbz	r1, 800cf8c <_reclaim_reent+0x80>
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 ff0a 	bl	800dda0 <_free_r>
 800cf8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cf8e:	b111      	cbz	r1, 800cf96 <_reclaim_reent+0x8a>
 800cf90:	4620      	mov	r0, r4
 800cf92:	f000 ff05 	bl	800dda0 <_free_r>
 800cf96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cf98:	b111      	cbz	r1, 800cfa0 <_reclaim_reent+0x94>
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f000 ff00 	bl	800dda0 <_free_r>
 800cfa0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cfa2:	b111      	cbz	r1, 800cfaa <_reclaim_reent+0x9e>
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fefb 	bl	800dda0 <_free_r>
 800cfaa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cfac:	b111      	cbz	r1, 800cfb4 <_reclaim_reent+0xa8>
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f000 fef6 	bl	800dda0 <_free_r>
 800cfb4:	6a23      	ldr	r3, [r4, #32]
 800cfb6:	b11b      	cbz	r3, 800cfc0 <_reclaim_reent+0xb4>
 800cfb8:	4620      	mov	r0, r4
 800cfba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfbe:	4718      	bx	r3
 800cfc0:	bd70      	pop	{r4, r5, r6, pc}
 800cfc2:	bf00      	nop
 800cfc4:	200001b4 	.word	0x200001b4

0800cfc8 <_lseek_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4d07      	ldr	r5, [pc, #28]	@ (800cfe8 <_lseek_r+0x20>)
 800cfcc:	4604      	mov	r4, r0
 800cfce:	4608      	mov	r0, r1
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	602a      	str	r2, [r5, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f7f5 fa17 	bl	800240a <_lseek>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_lseek_r+0x1e>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_lseek_r+0x1e>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20005adc 	.word	0x20005adc

0800cfec <_read_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4d07      	ldr	r5, [pc, #28]	@ (800d00c <_read_r+0x20>)
 800cff0:	4604      	mov	r4, r0
 800cff2:	4608      	mov	r0, r1
 800cff4:	4611      	mov	r1, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	602a      	str	r2, [r5, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	f7f5 f9a5 	bl	800234a <_read>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d102      	bne.n	800d00a <_read_r+0x1e>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	b103      	cbz	r3, 800d00a <_read_r+0x1e>
 800d008:	6023      	str	r3, [r4, #0]
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	20005adc 	.word	0x20005adc

0800d010 <_sbrk_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d06      	ldr	r5, [pc, #24]	@ (800d02c <_sbrk_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f5 fa02 	bl	8002424 <_sbrk>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_sbrk_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_sbrk_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20005adc 	.word	0x20005adc

0800d030 <_write_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4d07      	ldr	r5, [pc, #28]	@ (800d050 <_write_r+0x20>)
 800d034:	4604      	mov	r4, r0
 800d036:	4608      	mov	r0, r1
 800d038:	4611      	mov	r1, r2
 800d03a:	2200      	movs	r2, #0
 800d03c:	602a      	str	r2, [r5, #0]
 800d03e:	461a      	mov	r2, r3
 800d040:	f7f5 f9a0 	bl	8002384 <_write>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d102      	bne.n	800d04e <_write_r+0x1e>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	b103      	cbz	r3, 800d04e <_write_r+0x1e>
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	20005adc 	.word	0x20005adc

0800d054 <__errno>:
 800d054:	4b01      	ldr	r3, [pc, #4]	@ (800d05c <__errno+0x8>)
 800d056:	6818      	ldr	r0, [r3, #0]
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	200001b4 	.word	0x200001b4

0800d060 <__libc_init_array>:
 800d060:	b570      	push	{r4, r5, r6, lr}
 800d062:	4d0d      	ldr	r5, [pc, #52]	@ (800d098 <__libc_init_array+0x38>)
 800d064:	4c0d      	ldr	r4, [pc, #52]	@ (800d09c <__libc_init_array+0x3c>)
 800d066:	1b64      	subs	r4, r4, r5
 800d068:	10a4      	asrs	r4, r4, #2
 800d06a:	2600      	movs	r6, #0
 800d06c:	42a6      	cmp	r6, r4
 800d06e:	d109      	bne.n	800d084 <__libc_init_array+0x24>
 800d070:	4d0b      	ldr	r5, [pc, #44]	@ (800d0a0 <__libc_init_array+0x40>)
 800d072:	4c0c      	ldr	r4, [pc, #48]	@ (800d0a4 <__libc_init_array+0x44>)
 800d074:	f003 f81e 	bl	80100b4 <_init>
 800d078:	1b64      	subs	r4, r4, r5
 800d07a:	10a4      	asrs	r4, r4, #2
 800d07c:	2600      	movs	r6, #0
 800d07e:	42a6      	cmp	r6, r4
 800d080:	d105      	bne.n	800d08e <__libc_init_array+0x2e>
 800d082:	bd70      	pop	{r4, r5, r6, pc}
 800d084:	f855 3b04 	ldr.w	r3, [r5], #4
 800d088:	4798      	blx	r3
 800d08a:	3601      	adds	r6, #1
 800d08c:	e7ee      	b.n	800d06c <__libc_init_array+0xc>
 800d08e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d092:	4798      	blx	r3
 800d094:	3601      	adds	r6, #1
 800d096:	e7f2      	b.n	800d07e <__libc_init_array+0x1e>
 800d098:	08010770 	.word	0x08010770
 800d09c:	08010770 	.word	0x08010770
 800d0a0:	08010770 	.word	0x08010770
 800d0a4:	08010774 	.word	0x08010774

0800d0a8 <__retarget_lock_init_recursive>:
 800d0a8:	4770      	bx	lr

0800d0aa <__retarget_lock_acquire_recursive>:
 800d0aa:	4770      	bx	lr

0800d0ac <__retarget_lock_release_recursive>:
 800d0ac:	4770      	bx	lr

0800d0ae <memcpy>:
 800d0ae:	440a      	add	r2, r1
 800d0b0:	4291      	cmp	r1, r2
 800d0b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0b6:	d100      	bne.n	800d0ba <memcpy+0xc>
 800d0b8:	4770      	bx	lr
 800d0ba:	b510      	push	{r4, lr}
 800d0bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0c4:	4291      	cmp	r1, r2
 800d0c6:	d1f9      	bne.n	800d0bc <memcpy+0xe>
 800d0c8:	bd10      	pop	{r4, pc}
 800d0ca:	0000      	movs	r0, r0
 800d0cc:	0000      	movs	r0, r0
	...

0800d0d0 <nan>:
 800d0d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d0d8 <nan+0x8>
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	00000000 	.word	0x00000000
 800d0dc:	7ff80000 	.word	0x7ff80000

0800d0e0 <nanf>:
 800d0e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d0e8 <nanf+0x8>
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	7fc00000 	.word	0x7fc00000

0800d0ec <quorem>:
 800d0ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	6903      	ldr	r3, [r0, #16]
 800d0f2:	690c      	ldr	r4, [r1, #16]
 800d0f4:	42a3      	cmp	r3, r4
 800d0f6:	4607      	mov	r7, r0
 800d0f8:	db7e      	blt.n	800d1f8 <quorem+0x10c>
 800d0fa:	3c01      	subs	r4, #1
 800d0fc:	f101 0814 	add.w	r8, r1, #20
 800d100:	00a3      	lsls	r3, r4, #2
 800d102:	f100 0514 	add.w	r5, r0, #20
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d10c:	9301      	str	r3, [sp, #4]
 800d10e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d116:	3301      	adds	r3, #1
 800d118:	429a      	cmp	r2, r3
 800d11a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d11e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d122:	d32e      	bcc.n	800d182 <quorem+0x96>
 800d124:	f04f 0a00 	mov.w	sl, #0
 800d128:	46c4      	mov	ip, r8
 800d12a:	46ae      	mov	lr, r5
 800d12c:	46d3      	mov	fp, sl
 800d12e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d132:	b298      	uxth	r0, r3
 800d134:	fb06 a000 	mla	r0, r6, r0, sl
 800d138:	0c02      	lsrs	r2, r0, #16
 800d13a:	0c1b      	lsrs	r3, r3, #16
 800d13c:	fb06 2303 	mla	r3, r6, r3, r2
 800d140:	f8de 2000 	ldr.w	r2, [lr]
 800d144:	b280      	uxth	r0, r0
 800d146:	b292      	uxth	r2, r2
 800d148:	1a12      	subs	r2, r2, r0
 800d14a:	445a      	add	r2, fp
 800d14c:	f8de 0000 	ldr.w	r0, [lr]
 800d150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d154:	b29b      	uxth	r3, r3
 800d156:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d15a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d15e:	b292      	uxth	r2, r2
 800d160:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d164:	45e1      	cmp	r9, ip
 800d166:	f84e 2b04 	str.w	r2, [lr], #4
 800d16a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d16e:	d2de      	bcs.n	800d12e <quorem+0x42>
 800d170:	9b00      	ldr	r3, [sp, #0]
 800d172:	58eb      	ldr	r3, [r5, r3]
 800d174:	b92b      	cbnz	r3, 800d182 <quorem+0x96>
 800d176:	9b01      	ldr	r3, [sp, #4]
 800d178:	3b04      	subs	r3, #4
 800d17a:	429d      	cmp	r5, r3
 800d17c:	461a      	mov	r2, r3
 800d17e:	d32f      	bcc.n	800d1e0 <quorem+0xf4>
 800d180:	613c      	str	r4, [r7, #16]
 800d182:	4638      	mov	r0, r7
 800d184:	f001 fc5e 	bl	800ea44 <__mcmp>
 800d188:	2800      	cmp	r0, #0
 800d18a:	db25      	blt.n	800d1d8 <quorem+0xec>
 800d18c:	4629      	mov	r1, r5
 800d18e:	2000      	movs	r0, #0
 800d190:	f858 2b04 	ldr.w	r2, [r8], #4
 800d194:	f8d1 c000 	ldr.w	ip, [r1]
 800d198:	fa1f fe82 	uxth.w	lr, r2
 800d19c:	fa1f f38c 	uxth.w	r3, ip
 800d1a0:	eba3 030e 	sub.w	r3, r3, lr
 800d1a4:	4403      	add	r3, r0
 800d1a6:	0c12      	lsrs	r2, r2, #16
 800d1a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d1ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1b6:	45c1      	cmp	r9, r8
 800d1b8:	f841 3b04 	str.w	r3, [r1], #4
 800d1bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d1c0:	d2e6      	bcs.n	800d190 <quorem+0xa4>
 800d1c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1ca:	b922      	cbnz	r2, 800d1d6 <quorem+0xea>
 800d1cc:	3b04      	subs	r3, #4
 800d1ce:	429d      	cmp	r5, r3
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	d30b      	bcc.n	800d1ec <quorem+0x100>
 800d1d4:	613c      	str	r4, [r7, #16]
 800d1d6:	3601      	adds	r6, #1
 800d1d8:	4630      	mov	r0, r6
 800d1da:	b003      	add	sp, #12
 800d1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e0:	6812      	ldr	r2, [r2, #0]
 800d1e2:	3b04      	subs	r3, #4
 800d1e4:	2a00      	cmp	r2, #0
 800d1e6:	d1cb      	bne.n	800d180 <quorem+0x94>
 800d1e8:	3c01      	subs	r4, #1
 800d1ea:	e7c6      	b.n	800d17a <quorem+0x8e>
 800d1ec:	6812      	ldr	r2, [r2, #0]
 800d1ee:	3b04      	subs	r3, #4
 800d1f0:	2a00      	cmp	r2, #0
 800d1f2:	d1ef      	bne.n	800d1d4 <quorem+0xe8>
 800d1f4:	3c01      	subs	r4, #1
 800d1f6:	e7ea      	b.n	800d1ce <quorem+0xe2>
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	e7ee      	b.n	800d1da <quorem+0xee>
 800d1fc:	0000      	movs	r0, r0
	...

0800d200 <_dtoa_r>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	69c7      	ldr	r7, [r0, #28]
 800d206:	b097      	sub	sp, #92	@ 0x5c
 800d208:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d20c:	ec55 4b10 	vmov	r4, r5, d0
 800d210:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d212:	9107      	str	r1, [sp, #28]
 800d214:	4681      	mov	r9, r0
 800d216:	920c      	str	r2, [sp, #48]	@ 0x30
 800d218:	9311      	str	r3, [sp, #68]	@ 0x44
 800d21a:	b97f      	cbnz	r7, 800d23c <_dtoa_r+0x3c>
 800d21c:	2010      	movs	r0, #16
 800d21e:	f7fd ff53 	bl	800b0c8 <malloc>
 800d222:	4602      	mov	r2, r0
 800d224:	f8c9 001c 	str.w	r0, [r9, #28]
 800d228:	b920      	cbnz	r0, 800d234 <_dtoa_r+0x34>
 800d22a:	4ba9      	ldr	r3, [pc, #676]	@ (800d4d0 <_dtoa_r+0x2d0>)
 800d22c:	21ef      	movs	r1, #239	@ 0xef
 800d22e:	48a9      	ldr	r0, [pc, #676]	@ (800d4d4 <_dtoa_r+0x2d4>)
 800d230:	f002 fc22 	bl	800fa78 <__assert_func>
 800d234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d238:	6007      	str	r7, [r0, #0]
 800d23a:	60c7      	str	r7, [r0, #12]
 800d23c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d240:	6819      	ldr	r1, [r3, #0]
 800d242:	b159      	cbz	r1, 800d25c <_dtoa_r+0x5c>
 800d244:	685a      	ldr	r2, [r3, #4]
 800d246:	604a      	str	r2, [r1, #4]
 800d248:	2301      	movs	r3, #1
 800d24a:	4093      	lsls	r3, r2
 800d24c:	608b      	str	r3, [r1, #8]
 800d24e:	4648      	mov	r0, r9
 800d250:	f001 f97c 	bl	800e54c <_Bfree>
 800d254:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	1e2b      	subs	r3, r5, #0
 800d25e:	bfb9      	ittee	lt
 800d260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d264:	9305      	strlt	r3, [sp, #20]
 800d266:	2300      	movge	r3, #0
 800d268:	6033      	strge	r3, [r6, #0]
 800d26a:	9f05      	ldr	r7, [sp, #20]
 800d26c:	4b9a      	ldr	r3, [pc, #616]	@ (800d4d8 <_dtoa_r+0x2d8>)
 800d26e:	bfbc      	itt	lt
 800d270:	2201      	movlt	r2, #1
 800d272:	6032      	strlt	r2, [r6, #0]
 800d274:	43bb      	bics	r3, r7
 800d276:	d112      	bne.n	800d29e <_dtoa_r+0x9e>
 800d278:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d27a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d284:	4323      	orrs	r3, r4
 800d286:	f000 855a 	beq.w	800dd3e <_dtoa_r+0xb3e>
 800d28a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d28c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d4ec <_dtoa_r+0x2ec>
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 855c 	beq.w	800dd4e <_dtoa_r+0xb4e>
 800d296:	f10a 0303 	add.w	r3, sl, #3
 800d29a:	f000 bd56 	b.w	800dd4a <_dtoa_r+0xb4a>
 800d29e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	ec51 0b17 	vmov	r0, r1, d7
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d2ae:	f7f3 fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2b2:	4680      	mov	r8, r0
 800d2b4:	b158      	cbz	r0, 800d2ce <_dtoa_r+0xce>
 800d2b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d2be:	b113      	cbz	r3, 800d2c6 <_dtoa_r+0xc6>
 800d2c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d2c2:	4b86      	ldr	r3, [pc, #536]	@ (800d4dc <_dtoa_r+0x2dc>)
 800d2c4:	6013      	str	r3, [r2, #0]
 800d2c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d4f0 <_dtoa_r+0x2f0>
 800d2ca:	f000 bd40 	b.w	800dd4e <_dtoa_r+0xb4e>
 800d2ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d2d2:	aa14      	add	r2, sp, #80	@ 0x50
 800d2d4:	a915      	add	r1, sp, #84	@ 0x54
 800d2d6:	4648      	mov	r0, r9
 800d2d8:	f001 fcd4 	bl	800ec84 <__d2b>
 800d2dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d2e0:	9002      	str	r0, [sp, #8]
 800d2e2:	2e00      	cmp	r6, #0
 800d2e4:	d078      	beq.n	800d3d8 <_dtoa_r+0x1d8>
 800d2e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d2f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d2fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d300:	4619      	mov	r1, r3
 800d302:	2200      	movs	r2, #0
 800d304:	4b76      	ldr	r3, [pc, #472]	@ (800d4e0 <_dtoa_r+0x2e0>)
 800d306:	f7f2 ffbf 	bl	8000288 <__aeabi_dsub>
 800d30a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d4b8 <_dtoa_r+0x2b8>)
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	f7f3 f972 	bl	80005f8 <__aeabi_dmul>
 800d314:	a36a      	add	r3, pc, #424	@ (adr r3, 800d4c0 <_dtoa_r+0x2c0>)
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	f7f2 ffb7 	bl	800028c <__adddf3>
 800d31e:	4604      	mov	r4, r0
 800d320:	4630      	mov	r0, r6
 800d322:	460d      	mov	r5, r1
 800d324:	f7f3 f8fe 	bl	8000524 <__aeabi_i2d>
 800d328:	a367      	add	r3, pc, #412	@ (adr r3, 800d4c8 <_dtoa_r+0x2c8>)
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	f7f3 f963 	bl	80005f8 <__aeabi_dmul>
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	4620      	mov	r0, r4
 800d338:	4629      	mov	r1, r5
 800d33a:	f7f2 ffa7 	bl	800028c <__adddf3>
 800d33e:	4604      	mov	r4, r0
 800d340:	460d      	mov	r5, r1
 800d342:	f7f3 fc09 	bl	8000b58 <__aeabi_d2iz>
 800d346:	2200      	movs	r2, #0
 800d348:	4607      	mov	r7, r0
 800d34a:	2300      	movs	r3, #0
 800d34c:	4620      	mov	r0, r4
 800d34e:	4629      	mov	r1, r5
 800d350:	f7f3 fbc4 	bl	8000adc <__aeabi_dcmplt>
 800d354:	b140      	cbz	r0, 800d368 <_dtoa_r+0x168>
 800d356:	4638      	mov	r0, r7
 800d358:	f7f3 f8e4 	bl	8000524 <__aeabi_i2d>
 800d35c:	4622      	mov	r2, r4
 800d35e:	462b      	mov	r3, r5
 800d360:	f7f3 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d364:	b900      	cbnz	r0, 800d368 <_dtoa_r+0x168>
 800d366:	3f01      	subs	r7, #1
 800d368:	2f16      	cmp	r7, #22
 800d36a:	d852      	bhi.n	800d412 <_dtoa_r+0x212>
 800d36c:	4b5d      	ldr	r3, [pc, #372]	@ (800d4e4 <_dtoa_r+0x2e4>)
 800d36e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d37a:	f7f3 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d049      	beq.n	800d416 <_dtoa_r+0x216>
 800d382:	3f01      	subs	r7, #1
 800d384:	2300      	movs	r3, #0
 800d386:	9310      	str	r3, [sp, #64]	@ 0x40
 800d388:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d38a:	1b9b      	subs	r3, r3, r6
 800d38c:	1e5a      	subs	r2, r3, #1
 800d38e:	bf45      	ittet	mi
 800d390:	f1c3 0301 	rsbmi	r3, r3, #1
 800d394:	9300      	strmi	r3, [sp, #0]
 800d396:	2300      	movpl	r3, #0
 800d398:	2300      	movmi	r3, #0
 800d39a:	9206      	str	r2, [sp, #24]
 800d39c:	bf54      	ite	pl
 800d39e:	9300      	strpl	r3, [sp, #0]
 800d3a0:	9306      	strmi	r3, [sp, #24]
 800d3a2:	2f00      	cmp	r7, #0
 800d3a4:	db39      	blt.n	800d41a <_dtoa_r+0x21a>
 800d3a6:	9b06      	ldr	r3, [sp, #24]
 800d3a8:	970d      	str	r7, [sp, #52]	@ 0x34
 800d3aa:	443b      	add	r3, r7
 800d3ac:	9306      	str	r3, [sp, #24]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	9308      	str	r3, [sp, #32]
 800d3b2:	9b07      	ldr	r3, [sp, #28]
 800d3b4:	2b09      	cmp	r3, #9
 800d3b6:	d863      	bhi.n	800d480 <_dtoa_r+0x280>
 800d3b8:	2b05      	cmp	r3, #5
 800d3ba:	bfc4      	itt	gt
 800d3bc:	3b04      	subgt	r3, #4
 800d3be:	9307      	strgt	r3, [sp, #28]
 800d3c0:	9b07      	ldr	r3, [sp, #28]
 800d3c2:	f1a3 0302 	sub.w	r3, r3, #2
 800d3c6:	bfcc      	ite	gt
 800d3c8:	2400      	movgt	r4, #0
 800d3ca:	2401      	movle	r4, #1
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d863      	bhi.n	800d498 <_dtoa_r+0x298>
 800d3d0:	e8df f003 	tbb	[pc, r3]
 800d3d4:	2b375452 	.word	0x2b375452
 800d3d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d3dc:	441e      	add	r6, r3
 800d3de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d3e2:	2b20      	cmp	r3, #32
 800d3e4:	bfc1      	itttt	gt
 800d3e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d3ea:	409f      	lslgt	r7, r3
 800d3ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d3f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d3f4:	bfd6      	itet	le
 800d3f6:	f1c3 0320 	rsble	r3, r3, #32
 800d3fa:	ea47 0003 	orrgt.w	r0, r7, r3
 800d3fe:	fa04 f003 	lslle.w	r0, r4, r3
 800d402:	f7f3 f87f 	bl	8000504 <__aeabi_ui2d>
 800d406:	2201      	movs	r2, #1
 800d408:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d40c:	3e01      	subs	r6, #1
 800d40e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d410:	e776      	b.n	800d300 <_dtoa_r+0x100>
 800d412:	2301      	movs	r3, #1
 800d414:	e7b7      	b.n	800d386 <_dtoa_r+0x186>
 800d416:	9010      	str	r0, [sp, #64]	@ 0x40
 800d418:	e7b6      	b.n	800d388 <_dtoa_r+0x188>
 800d41a:	9b00      	ldr	r3, [sp, #0]
 800d41c:	1bdb      	subs	r3, r3, r7
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	427b      	negs	r3, r7
 800d422:	9308      	str	r3, [sp, #32]
 800d424:	2300      	movs	r3, #0
 800d426:	930d      	str	r3, [sp, #52]	@ 0x34
 800d428:	e7c3      	b.n	800d3b2 <_dtoa_r+0x1b2>
 800d42a:	2301      	movs	r3, #1
 800d42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d42e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d430:	eb07 0b03 	add.w	fp, r7, r3
 800d434:	f10b 0301 	add.w	r3, fp, #1
 800d438:	2b01      	cmp	r3, #1
 800d43a:	9303      	str	r3, [sp, #12]
 800d43c:	bfb8      	it	lt
 800d43e:	2301      	movlt	r3, #1
 800d440:	e006      	b.n	800d450 <_dtoa_r+0x250>
 800d442:	2301      	movs	r3, #1
 800d444:	9309      	str	r3, [sp, #36]	@ 0x24
 800d446:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d448:	2b00      	cmp	r3, #0
 800d44a:	dd28      	ble.n	800d49e <_dtoa_r+0x29e>
 800d44c:	469b      	mov	fp, r3
 800d44e:	9303      	str	r3, [sp, #12]
 800d450:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d454:	2100      	movs	r1, #0
 800d456:	2204      	movs	r2, #4
 800d458:	f102 0514 	add.w	r5, r2, #20
 800d45c:	429d      	cmp	r5, r3
 800d45e:	d926      	bls.n	800d4ae <_dtoa_r+0x2ae>
 800d460:	6041      	str	r1, [r0, #4]
 800d462:	4648      	mov	r0, r9
 800d464:	f001 f832 	bl	800e4cc <_Balloc>
 800d468:	4682      	mov	sl, r0
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d142      	bne.n	800d4f4 <_dtoa_r+0x2f4>
 800d46e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4e8 <_dtoa_r+0x2e8>)
 800d470:	4602      	mov	r2, r0
 800d472:	f240 11af 	movw	r1, #431	@ 0x1af
 800d476:	e6da      	b.n	800d22e <_dtoa_r+0x2e>
 800d478:	2300      	movs	r3, #0
 800d47a:	e7e3      	b.n	800d444 <_dtoa_r+0x244>
 800d47c:	2300      	movs	r3, #0
 800d47e:	e7d5      	b.n	800d42c <_dtoa_r+0x22c>
 800d480:	2401      	movs	r4, #1
 800d482:	2300      	movs	r3, #0
 800d484:	9307      	str	r3, [sp, #28]
 800d486:	9409      	str	r4, [sp, #36]	@ 0x24
 800d488:	f04f 3bff 	mov.w	fp, #4294967295
 800d48c:	2200      	movs	r2, #0
 800d48e:	f8cd b00c 	str.w	fp, [sp, #12]
 800d492:	2312      	movs	r3, #18
 800d494:	920c      	str	r2, [sp, #48]	@ 0x30
 800d496:	e7db      	b.n	800d450 <_dtoa_r+0x250>
 800d498:	2301      	movs	r3, #1
 800d49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d49c:	e7f4      	b.n	800d488 <_dtoa_r+0x288>
 800d49e:	f04f 0b01 	mov.w	fp, #1
 800d4a2:	f8cd b00c 	str.w	fp, [sp, #12]
 800d4a6:	465b      	mov	r3, fp
 800d4a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d4ac:	e7d0      	b.n	800d450 <_dtoa_r+0x250>
 800d4ae:	3101      	adds	r1, #1
 800d4b0:	0052      	lsls	r2, r2, #1
 800d4b2:	e7d1      	b.n	800d458 <_dtoa_r+0x258>
 800d4b4:	f3af 8000 	nop.w
 800d4b8:	636f4361 	.word	0x636f4361
 800d4bc:	3fd287a7 	.word	0x3fd287a7
 800d4c0:	8b60c8b3 	.word	0x8b60c8b3
 800d4c4:	3fc68a28 	.word	0x3fc68a28
 800d4c8:	509f79fb 	.word	0x509f79fb
 800d4cc:	3fd34413 	.word	0x3fd34413
 800d4d0:	08010372 	.word	0x08010372
 800d4d4:	08010389 	.word	0x08010389
 800d4d8:	7ff00000 	.word	0x7ff00000
 800d4dc:	080104d3 	.word	0x080104d3
 800d4e0:	3ff80000 	.word	0x3ff80000
 800d4e4:	080106a0 	.word	0x080106a0
 800d4e8:	080103e1 	.word	0x080103e1
 800d4ec:	0801036e 	.word	0x0801036e
 800d4f0:	080104d2 	.word	0x080104d2
 800d4f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d4f8:	6018      	str	r0, [r3, #0]
 800d4fa:	9b03      	ldr	r3, [sp, #12]
 800d4fc:	2b0e      	cmp	r3, #14
 800d4fe:	f200 80a1 	bhi.w	800d644 <_dtoa_r+0x444>
 800d502:	2c00      	cmp	r4, #0
 800d504:	f000 809e 	beq.w	800d644 <_dtoa_r+0x444>
 800d508:	2f00      	cmp	r7, #0
 800d50a:	dd33      	ble.n	800d574 <_dtoa_r+0x374>
 800d50c:	4b9c      	ldr	r3, [pc, #624]	@ (800d780 <_dtoa_r+0x580>)
 800d50e:	f007 020f 	and.w	r2, r7, #15
 800d512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d516:	ed93 7b00 	vldr	d7, [r3]
 800d51a:	05f8      	lsls	r0, r7, #23
 800d51c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d520:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d524:	d516      	bpl.n	800d554 <_dtoa_r+0x354>
 800d526:	4b97      	ldr	r3, [pc, #604]	@ (800d784 <_dtoa_r+0x584>)
 800d528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d52c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d530:	f7f3 f98c 	bl	800084c <__aeabi_ddiv>
 800d534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d538:	f004 040f 	and.w	r4, r4, #15
 800d53c:	2603      	movs	r6, #3
 800d53e:	4d91      	ldr	r5, [pc, #580]	@ (800d784 <_dtoa_r+0x584>)
 800d540:	b954      	cbnz	r4, 800d558 <_dtoa_r+0x358>
 800d542:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d54a:	f7f3 f97f 	bl	800084c <__aeabi_ddiv>
 800d54e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d552:	e028      	b.n	800d5a6 <_dtoa_r+0x3a6>
 800d554:	2602      	movs	r6, #2
 800d556:	e7f2      	b.n	800d53e <_dtoa_r+0x33e>
 800d558:	07e1      	lsls	r1, r4, #31
 800d55a:	d508      	bpl.n	800d56e <_dtoa_r+0x36e>
 800d55c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d560:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d564:	f7f3 f848 	bl	80005f8 <__aeabi_dmul>
 800d568:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d56c:	3601      	adds	r6, #1
 800d56e:	1064      	asrs	r4, r4, #1
 800d570:	3508      	adds	r5, #8
 800d572:	e7e5      	b.n	800d540 <_dtoa_r+0x340>
 800d574:	f000 80af 	beq.w	800d6d6 <_dtoa_r+0x4d6>
 800d578:	427c      	negs	r4, r7
 800d57a:	4b81      	ldr	r3, [pc, #516]	@ (800d780 <_dtoa_r+0x580>)
 800d57c:	4d81      	ldr	r5, [pc, #516]	@ (800d784 <_dtoa_r+0x584>)
 800d57e:	f004 020f 	and.w	r2, r4, #15
 800d582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d58e:	f7f3 f833 	bl	80005f8 <__aeabi_dmul>
 800d592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d596:	1124      	asrs	r4, r4, #4
 800d598:	2300      	movs	r3, #0
 800d59a:	2602      	movs	r6, #2
 800d59c:	2c00      	cmp	r4, #0
 800d59e:	f040 808f 	bne.w	800d6c0 <_dtoa_r+0x4c0>
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1d3      	bne.n	800d54e <_dtoa_r+0x34e>
 800d5a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d5a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 8094 	beq.w	800d6da <_dtoa_r+0x4da>
 800d5b2:	4b75      	ldr	r3, [pc, #468]	@ (800d788 <_dtoa_r+0x588>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	f7f3 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	f000 808b 	beq.w	800d6da <_dtoa_r+0x4da>
 800d5c4:	9b03      	ldr	r3, [sp, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f000 8087 	beq.w	800d6da <_dtoa_r+0x4da>
 800d5cc:	f1bb 0f00 	cmp.w	fp, #0
 800d5d0:	dd34      	ble.n	800d63c <_dtoa_r+0x43c>
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	4b6d      	ldr	r3, [pc, #436]	@ (800d78c <_dtoa_r+0x58c>)
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	4629      	mov	r1, r5
 800d5da:	f7f3 f80d 	bl	80005f8 <__aeabi_dmul>
 800d5de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5e2:	f107 38ff 	add.w	r8, r7, #4294967295
 800d5e6:	3601      	adds	r6, #1
 800d5e8:	465c      	mov	r4, fp
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	f7f2 ff9a 	bl	8000524 <__aeabi_i2d>
 800d5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5f4:	f7f3 f800 	bl	80005f8 <__aeabi_dmul>
 800d5f8:	4b65      	ldr	r3, [pc, #404]	@ (800d790 <_dtoa_r+0x590>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f7f2 fe46 	bl	800028c <__adddf3>
 800d600:	4605      	mov	r5, r0
 800d602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d606:	2c00      	cmp	r4, #0
 800d608:	d16a      	bne.n	800d6e0 <_dtoa_r+0x4e0>
 800d60a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d60e:	4b61      	ldr	r3, [pc, #388]	@ (800d794 <_dtoa_r+0x594>)
 800d610:	2200      	movs	r2, #0
 800d612:	f7f2 fe39 	bl	8000288 <__aeabi_dsub>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d61e:	462a      	mov	r2, r5
 800d620:	4633      	mov	r3, r6
 800d622:	f7f3 fa79 	bl	8000b18 <__aeabi_dcmpgt>
 800d626:	2800      	cmp	r0, #0
 800d628:	f040 8298 	bne.w	800db5c <_dtoa_r+0x95c>
 800d62c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d630:	462a      	mov	r2, r5
 800d632:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d636:	f7f3 fa51 	bl	8000adc <__aeabi_dcmplt>
 800d63a:	bb38      	cbnz	r0, 800d68c <_dtoa_r+0x48c>
 800d63c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d640:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d644:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d646:	2b00      	cmp	r3, #0
 800d648:	f2c0 8157 	blt.w	800d8fa <_dtoa_r+0x6fa>
 800d64c:	2f0e      	cmp	r7, #14
 800d64e:	f300 8154 	bgt.w	800d8fa <_dtoa_r+0x6fa>
 800d652:	4b4b      	ldr	r3, [pc, #300]	@ (800d780 <_dtoa_r+0x580>)
 800d654:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d658:	ed93 7b00 	vldr	d7, [r3]
 800d65c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d65e:	2b00      	cmp	r3, #0
 800d660:	ed8d 7b00 	vstr	d7, [sp]
 800d664:	f280 80e5 	bge.w	800d832 <_dtoa_r+0x632>
 800d668:	9b03      	ldr	r3, [sp, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f300 80e1 	bgt.w	800d832 <_dtoa_r+0x632>
 800d670:	d10c      	bne.n	800d68c <_dtoa_r+0x48c>
 800d672:	4b48      	ldr	r3, [pc, #288]	@ (800d794 <_dtoa_r+0x594>)
 800d674:	2200      	movs	r2, #0
 800d676:	ec51 0b17 	vmov	r0, r1, d7
 800d67a:	f7f2 ffbd 	bl	80005f8 <__aeabi_dmul>
 800d67e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d682:	f7f3 fa3f 	bl	8000b04 <__aeabi_dcmpge>
 800d686:	2800      	cmp	r0, #0
 800d688:	f000 8266 	beq.w	800db58 <_dtoa_r+0x958>
 800d68c:	2400      	movs	r4, #0
 800d68e:	4625      	mov	r5, r4
 800d690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d692:	4656      	mov	r6, sl
 800d694:	ea6f 0803 	mvn.w	r8, r3
 800d698:	2700      	movs	r7, #0
 800d69a:	4621      	mov	r1, r4
 800d69c:	4648      	mov	r0, r9
 800d69e:	f000 ff55 	bl	800e54c <_Bfree>
 800d6a2:	2d00      	cmp	r5, #0
 800d6a4:	f000 80bd 	beq.w	800d822 <_dtoa_r+0x622>
 800d6a8:	b12f      	cbz	r7, 800d6b6 <_dtoa_r+0x4b6>
 800d6aa:	42af      	cmp	r7, r5
 800d6ac:	d003      	beq.n	800d6b6 <_dtoa_r+0x4b6>
 800d6ae:	4639      	mov	r1, r7
 800d6b0:	4648      	mov	r0, r9
 800d6b2:	f000 ff4b 	bl	800e54c <_Bfree>
 800d6b6:	4629      	mov	r1, r5
 800d6b8:	4648      	mov	r0, r9
 800d6ba:	f000 ff47 	bl	800e54c <_Bfree>
 800d6be:	e0b0      	b.n	800d822 <_dtoa_r+0x622>
 800d6c0:	07e2      	lsls	r2, r4, #31
 800d6c2:	d505      	bpl.n	800d6d0 <_dtoa_r+0x4d0>
 800d6c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6c8:	f7f2 ff96 	bl	80005f8 <__aeabi_dmul>
 800d6cc:	3601      	adds	r6, #1
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	1064      	asrs	r4, r4, #1
 800d6d2:	3508      	adds	r5, #8
 800d6d4:	e762      	b.n	800d59c <_dtoa_r+0x39c>
 800d6d6:	2602      	movs	r6, #2
 800d6d8:	e765      	b.n	800d5a6 <_dtoa_r+0x3a6>
 800d6da:	9c03      	ldr	r4, [sp, #12]
 800d6dc:	46b8      	mov	r8, r7
 800d6de:	e784      	b.n	800d5ea <_dtoa_r+0x3ea>
 800d6e0:	4b27      	ldr	r3, [pc, #156]	@ (800d780 <_dtoa_r+0x580>)
 800d6e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6ec:	4454      	add	r4, sl
 800d6ee:	2900      	cmp	r1, #0
 800d6f0:	d054      	beq.n	800d79c <_dtoa_r+0x59c>
 800d6f2:	4929      	ldr	r1, [pc, #164]	@ (800d798 <_dtoa_r+0x598>)
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	f7f3 f8a9 	bl	800084c <__aeabi_ddiv>
 800d6fa:	4633      	mov	r3, r6
 800d6fc:	462a      	mov	r2, r5
 800d6fe:	f7f2 fdc3 	bl	8000288 <__aeabi_dsub>
 800d702:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d706:	4656      	mov	r6, sl
 800d708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d70c:	f7f3 fa24 	bl	8000b58 <__aeabi_d2iz>
 800d710:	4605      	mov	r5, r0
 800d712:	f7f2 ff07 	bl	8000524 <__aeabi_i2d>
 800d716:	4602      	mov	r2, r0
 800d718:	460b      	mov	r3, r1
 800d71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d71e:	f7f2 fdb3 	bl	8000288 <__aeabi_dsub>
 800d722:	3530      	adds	r5, #48	@ 0x30
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d72c:	f806 5b01 	strb.w	r5, [r6], #1
 800d730:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d734:	f7f3 f9d2 	bl	8000adc <__aeabi_dcmplt>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d172      	bne.n	800d822 <_dtoa_r+0x622>
 800d73c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d740:	4911      	ldr	r1, [pc, #68]	@ (800d788 <_dtoa_r+0x588>)
 800d742:	2000      	movs	r0, #0
 800d744:	f7f2 fda0 	bl	8000288 <__aeabi_dsub>
 800d748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d74c:	f7f3 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800d750:	2800      	cmp	r0, #0
 800d752:	f040 80b4 	bne.w	800d8be <_dtoa_r+0x6be>
 800d756:	42a6      	cmp	r6, r4
 800d758:	f43f af70 	beq.w	800d63c <_dtoa_r+0x43c>
 800d75c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d760:	4b0a      	ldr	r3, [pc, #40]	@ (800d78c <_dtoa_r+0x58c>)
 800d762:	2200      	movs	r2, #0
 800d764:	f7f2 ff48 	bl	80005f8 <__aeabi_dmul>
 800d768:	4b08      	ldr	r3, [pc, #32]	@ (800d78c <_dtoa_r+0x58c>)
 800d76a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d76e:	2200      	movs	r2, #0
 800d770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d774:	f7f2 ff40 	bl	80005f8 <__aeabi_dmul>
 800d778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d77c:	e7c4      	b.n	800d708 <_dtoa_r+0x508>
 800d77e:	bf00      	nop
 800d780:	080106a0 	.word	0x080106a0
 800d784:	08010678 	.word	0x08010678
 800d788:	3ff00000 	.word	0x3ff00000
 800d78c:	40240000 	.word	0x40240000
 800d790:	401c0000 	.word	0x401c0000
 800d794:	40140000 	.word	0x40140000
 800d798:	3fe00000 	.word	0x3fe00000
 800d79c:	4631      	mov	r1, r6
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7f2 ff2a 	bl	80005f8 <__aeabi_dmul>
 800d7a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d7a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d7aa:	4656      	mov	r6, sl
 800d7ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7b0:	f7f3 f9d2 	bl	8000b58 <__aeabi_d2iz>
 800d7b4:	4605      	mov	r5, r0
 800d7b6:	f7f2 feb5 	bl	8000524 <__aeabi_i2d>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7c2:	f7f2 fd61 	bl	8000288 <__aeabi_dsub>
 800d7c6:	3530      	adds	r5, #48	@ 0x30
 800d7c8:	f806 5b01 	strb.w	r5, [r6], #1
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	42a6      	cmp	r6, r4
 800d7d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d7d6:	f04f 0200 	mov.w	r2, #0
 800d7da:	d124      	bne.n	800d826 <_dtoa_r+0x626>
 800d7dc:	4baf      	ldr	r3, [pc, #700]	@ (800da9c <_dtoa_r+0x89c>)
 800d7de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d7e2:	f7f2 fd53 	bl	800028c <__adddf3>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7ee:	f7f3 f993 	bl	8000b18 <__aeabi_dcmpgt>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d163      	bne.n	800d8be <_dtoa_r+0x6be>
 800d7f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d7fa:	49a8      	ldr	r1, [pc, #672]	@ (800da9c <_dtoa_r+0x89c>)
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	f7f2 fd43 	bl	8000288 <__aeabi_dsub>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d80a:	f7f3 f967 	bl	8000adc <__aeabi_dcmplt>
 800d80e:	2800      	cmp	r0, #0
 800d810:	f43f af14 	beq.w	800d63c <_dtoa_r+0x43c>
 800d814:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d816:	1e73      	subs	r3, r6, #1
 800d818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d81a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d81e:	2b30      	cmp	r3, #48	@ 0x30
 800d820:	d0f8      	beq.n	800d814 <_dtoa_r+0x614>
 800d822:	4647      	mov	r7, r8
 800d824:	e03b      	b.n	800d89e <_dtoa_r+0x69e>
 800d826:	4b9e      	ldr	r3, [pc, #632]	@ (800daa0 <_dtoa_r+0x8a0>)
 800d828:	f7f2 fee6 	bl	80005f8 <__aeabi_dmul>
 800d82c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d830:	e7bc      	b.n	800d7ac <_dtoa_r+0x5ac>
 800d832:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d836:	4656      	mov	r6, sl
 800d838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d83c:	4620      	mov	r0, r4
 800d83e:	4629      	mov	r1, r5
 800d840:	f7f3 f804 	bl	800084c <__aeabi_ddiv>
 800d844:	f7f3 f988 	bl	8000b58 <__aeabi_d2iz>
 800d848:	4680      	mov	r8, r0
 800d84a:	f7f2 fe6b 	bl	8000524 <__aeabi_i2d>
 800d84e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d852:	f7f2 fed1 	bl	80005f8 <__aeabi_dmul>
 800d856:	4602      	mov	r2, r0
 800d858:	460b      	mov	r3, r1
 800d85a:	4620      	mov	r0, r4
 800d85c:	4629      	mov	r1, r5
 800d85e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d862:	f7f2 fd11 	bl	8000288 <__aeabi_dsub>
 800d866:	f806 4b01 	strb.w	r4, [r6], #1
 800d86a:	9d03      	ldr	r5, [sp, #12]
 800d86c:	eba6 040a 	sub.w	r4, r6, sl
 800d870:	42a5      	cmp	r5, r4
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	d133      	bne.n	800d8e0 <_dtoa_r+0x6e0>
 800d878:	f7f2 fd08 	bl	800028c <__adddf3>
 800d87c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d880:	4604      	mov	r4, r0
 800d882:	460d      	mov	r5, r1
 800d884:	f7f3 f948 	bl	8000b18 <__aeabi_dcmpgt>
 800d888:	b9c0      	cbnz	r0, 800d8bc <_dtoa_r+0x6bc>
 800d88a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d88e:	4620      	mov	r0, r4
 800d890:	4629      	mov	r1, r5
 800d892:	f7f3 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 800d896:	b110      	cbz	r0, 800d89e <_dtoa_r+0x69e>
 800d898:	f018 0f01 	tst.w	r8, #1
 800d89c:	d10e      	bne.n	800d8bc <_dtoa_r+0x6bc>
 800d89e:	9902      	ldr	r1, [sp, #8]
 800d8a0:	4648      	mov	r0, r9
 800d8a2:	f000 fe53 	bl	800e54c <_Bfree>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	7033      	strb	r3, [r6, #0]
 800d8aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d8ac:	3701      	adds	r7, #1
 800d8ae:	601f      	str	r7, [r3, #0]
 800d8b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f000 824b 	beq.w	800dd4e <_dtoa_r+0xb4e>
 800d8b8:	601e      	str	r6, [r3, #0]
 800d8ba:	e248      	b.n	800dd4e <_dtoa_r+0xb4e>
 800d8bc:	46b8      	mov	r8, r7
 800d8be:	4633      	mov	r3, r6
 800d8c0:	461e      	mov	r6, r3
 800d8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8c6:	2a39      	cmp	r2, #57	@ 0x39
 800d8c8:	d106      	bne.n	800d8d8 <_dtoa_r+0x6d8>
 800d8ca:	459a      	cmp	sl, r3
 800d8cc:	d1f8      	bne.n	800d8c0 <_dtoa_r+0x6c0>
 800d8ce:	2230      	movs	r2, #48	@ 0x30
 800d8d0:	f108 0801 	add.w	r8, r8, #1
 800d8d4:	f88a 2000 	strb.w	r2, [sl]
 800d8d8:	781a      	ldrb	r2, [r3, #0]
 800d8da:	3201      	adds	r2, #1
 800d8dc:	701a      	strb	r2, [r3, #0]
 800d8de:	e7a0      	b.n	800d822 <_dtoa_r+0x622>
 800d8e0:	4b6f      	ldr	r3, [pc, #444]	@ (800daa0 <_dtoa_r+0x8a0>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f7f2 fe88 	bl	80005f8 <__aeabi_dmul>
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	460d      	mov	r5, r1
 800d8f0:	f7f3 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d09f      	beq.n	800d838 <_dtoa_r+0x638>
 800d8f8:	e7d1      	b.n	800d89e <_dtoa_r+0x69e>
 800d8fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8fc:	2a00      	cmp	r2, #0
 800d8fe:	f000 80ea 	beq.w	800dad6 <_dtoa_r+0x8d6>
 800d902:	9a07      	ldr	r2, [sp, #28]
 800d904:	2a01      	cmp	r2, #1
 800d906:	f300 80cd 	bgt.w	800daa4 <_dtoa_r+0x8a4>
 800d90a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d90c:	2a00      	cmp	r2, #0
 800d90e:	f000 80c1 	beq.w	800da94 <_dtoa_r+0x894>
 800d912:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d916:	9c08      	ldr	r4, [sp, #32]
 800d918:	9e00      	ldr	r6, [sp, #0]
 800d91a:	9a00      	ldr	r2, [sp, #0]
 800d91c:	441a      	add	r2, r3
 800d91e:	9200      	str	r2, [sp, #0]
 800d920:	9a06      	ldr	r2, [sp, #24]
 800d922:	2101      	movs	r1, #1
 800d924:	441a      	add	r2, r3
 800d926:	4648      	mov	r0, r9
 800d928:	9206      	str	r2, [sp, #24]
 800d92a:	f000 ff0d 	bl	800e748 <__i2b>
 800d92e:	4605      	mov	r5, r0
 800d930:	b166      	cbz	r6, 800d94c <_dtoa_r+0x74c>
 800d932:	9b06      	ldr	r3, [sp, #24]
 800d934:	2b00      	cmp	r3, #0
 800d936:	dd09      	ble.n	800d94c <_dtoa_r+0x74c>
 800d938:	42b3      	cmp	r3, r6
 800d93a:	9a00      	ldr	r2, [sp, #0]
 800d93c:	bfa8      	it	ge
 800d93e:	4633      	movge	r3, r6
 800d940:	1ad2      	subs	r2, r2, r3
 800d942:	9200      	str	r2, [sp, #0]
 800d944:	9a06      	ldr	r2, [sp, #24]
 800d946:	1af6      	subs	r6, r6, r3
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	9306      	str	r3, [sp, #24]
 800d94c:	9b08      	ldr	r3, [sp, #32]
 800d94e:	b30b      	cbz	r3, 800d994 <_dtoa_r+0x794>
 800d950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 80c6 	beq.w	800dae4 <_dtoa_r+0x8e4>
 800d958:	2c00      	cmp	r4, #0
 800d95a:	f000 80c0 	beq.w	800dade <_dtoa_r+0x8de>
 800d95e:	4629      	mov	r1, r5
 800d960:	4622      	mov	r2, r4
 800d962:	4648      	mov	r0, r9
 800d964:	f000 ffa8 	bl	800e8b8 <__pow5mult>
 800d968:	9a02      	ldr	r2, [sp, #8]
 800d96a:	4601      	mov	r1, r0
 800d96c:	4605      	mov	r5, r0
 800d96e:	4648      	mov	r0, r9
 800d970:	f000 ff00 	bl	800e774 <__multiply>
 800d974:	9902      	ldr	r1, [sp, #8]
 800d976:	4680      	mov	r8, r0
 800d978:	4648      	mov	r0, r9
 800d97a:	f000 fde7 	bl	800e54c <_Bfree>
 800d97e:	9b08      	ldr	r3, [sp, #32]
 800d980:	1b1b      	subs	r3, r3, r4
 800d982:	9308      	str	r3, [sp, #32]
 800d984:	f000 80b1 	beq.w	800daea <_dtoa_r+0x8ea>
 800d988:	9a08      	ldr	r2, [sp, #32]
 800d98a:	4641      	mov	r1, r8
 800d98c:	4648      	mov	r0, r9
 800d98e:	f000 ff93 	bl	800e8b8 <__pow5mult>
 800d992:	9002      	str	r0, [sp, #8]
 800d994:	2101      	movs	r1, #1
 800d996:	4648      	mov	r0, r9
 800d998:	f000 fed6 	bl	800e748 <__i2b>
 800d99c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d99e:	4604      	mov	r4, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 81d8 	beq.w	800dd56 <_dtoa_r+0xb56>
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	4601      	mov	r1, r0
 800d9aa:	4648      	mov	r0, r9
 800d9ac:	f000 ff84 	bl	800e8b8 <__pow5mult>
 800d9b0:	9b07      	ldr	r3, [sp, #28]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	f300 809f 	bgt.w	800daf8 <_dtoa_r+0x8f8>
 800d9ba:	9b04      	ldr	r3, [sp, #16]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f040 8097 	bne.w	800daf0 <_dtoa_r+0x8f0>
 800d9c2:	9b05      	ldr	r3, [sp, #20]
 800d9c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	f040 8093 	bne.w	800daf4 <_dtoa_r+0x8f4>
 800d9ce:	9b05      	ldr	r3, [sp, #20]
 800d9d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d9d4:	0d1b      	lsrs	r3, r3, #20
 800d9d6:	051b      	lsls	r3, r3, #20
 800d9d8:	b133      	cbz	r3, 800d9e8 <_dtoa_r+0x7e8>
 800d9da:	9b00      	ldr	r3, [sp, #0]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	9b06      	ldr	r3, [sp, #24]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	9306      	str	r3, [sp, #24]
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	9308      	str	r3, [sp, #32]
 800d9ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f000 81b8 	beq.w	800dd62 <_dtoa_r+0xb62>
 800d9f2:	6923      	ldr	r3, [r4, #16]
 800d9f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9f8:	6918      	ldr	r0, [r3, #16]
 800d9fa:	f000 fe59 	bl	800e6b0 <__hi0bits>
 800d9fe:	f1c0 0020 	rsb	r0, r0, #32
 800da02:	9b06      	ldr	r3, [sp, #24]
 800da04:	4418      	add	r0, r3
 800da06:	f010 001f 	ands.w	r0, r0, #31
 800da0a:	f000 8082 	beq.w	800db12 <_dtoa_r+0x912>
 800da0e:	f1c0 0320 	rsb	r3, r0, #32
 800da12:	2b04      	cmp	r3, #4
 800da14:	dd73      	ble.n	800dafe <_dtoa_r+0x8fe>
 800da16:	9b00      	ldr	r3, [sp, #0]
 800da18:	f1c0 001c 	rsb	r0, r0, #28
 800da1c:	4403      	add	r3, r0
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	9b06      	ldr	r3, [sp, #24]
 800da22:	4403      	add	r3, r0
 800da24:	4406      	add	r6, r0
 800da26:	9306      	str	r3, [sp, #24]
 800da28:	9b00      	ldr	r3, [sp, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	dd05      	ble.n	800da3a <_dtoa_r+0x83a>
 800da2e:	9902      	ldr	r1, [sp, #8]
 800da30:	461a      	mov	r2, r3
 800da32:	4648      	mov	r0, r9
 800da34:	f000 ff9a 	bl	800e96c <__lshift>
 800da38:	9002      	str	r0, [sp, #8]
 800da3a:	9b06      	ldr	r3, [sp, #24]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	dd05      	ble.n	800da4c <_dtoa_r+0x84c>
 800da40:	4621      	mov	r1, r4
 800da42:	461a      	mov	r2, r3
 800da44:	4648      	mov	r0, r9
 800da46:	f000 ff91 	bl	800e96c <__lshift>
 800da4a:	4604      	mov	r4, r0
 800da4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d061      	beq.n	800db16 <_dtoa_r+0x916>
 800da52:	9802      	ldr	r0, [sp, #8]
 800da54:	4621      	mov	r1, r4
 800da56:	f000 fff5 	bl	800ea44 <__mcmp>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	da5b      	bge.n	800db16 <_dtoa_r+0x916>
 800da5e:	2300      	movs	r3, #0
 800da60:	9902      	ldr	r1, [sp, #8]
 800da62:	220a      	movs	r2, #10
 800da64:	4648      	mov	r0, r9
 800da66:	f000 fd93 	bl	800e590 <__multadd>
 800da6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da6c:	9002      	str	r0, [sp, #8]
 800da6e:	f107 38ff 	add.w	r8, r7, #4294967295
 800da72:	2b00      	cmp	r3, #0
 800da74:	f000 8177 	beq.w	800dd66 <_dtoa_r+0xb66>
 800da78:	4629      	mov	r1, r5
 800da7a:	2300      	movs	r3, #0
 800da7c:	220a      	movs	r2, #10
 800da7e:	4648      	mov	r0, r9
 800da80:	f000 fd86 	bl	800e590 <__multadd>
 800da84:	f1bb 0f00 	cmp.w	fp, #0
 800da88:	4605      	mov	r5, r0
 800da8a:	dc6f      	bgt.n	800db6c <_dtoa_r+0x96c>
 800da8c:	9b07      	ldr	r3, [sp, #28]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	dc49      	bgt.n	800db26 <_dtoa_r+0x926>
 800da92:	e06b      	b.n	800db6c <_dtoa_r+0x96c>
 800da94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da9a:	e73c      	b.n	800d916 <_dtoa_r+0x716>
 800da9c:	3fe00000 	.word	0x3fe00000
 800daa0:	40240000 	.word	0x40240000
 800daa4:	9b03      	ldr	r3, [sp, #12]
 800daa6:	1e5c      	subs	r4, r3, #1
 800daa8:	9b08      	ldr	r3, [sp, #32]
 800daaa:	42a3      	cmp	r3, r4
 800daac:	db09      	blt.n	800dac2 <_dtoa_r+0x8c2>
 800daae:	1b1c      	subs	r4, r3, r4
 800dab0:	9b03      	ldr	r3, [sp, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f6bf af30 	bge.w	800d918 <_dtoa_r+0x718>
 800dab8:	9b00      	ldr	r3, [sp, #0]
 800daba:	9a03      	ldr	r2, [sp, #12]
 800dabc:	1a9e      	subs	r6, r3, r2
 800dabe:	2300      	movs	r3, #0
 800dac0:	e72b      	b.n	800d91a <_dtoa_r+0x71a>
 800dac2:	9b08      	ldr	r3, [sp, #32]
 800dac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dac6:	9408      	str	r4, [sp, #32]
 800dac8:	1ae3      	subs	r3, r4, r3
 800daca:	441a      	add	r2, r3
 800dacc:	9e00      	ldr	r6, [sp, #0]
 800dace:	9b03      	ldr	r3, [sp, #12]
 800dad0:	920d      	str	r2, [sp, #52]	@ 0x34
 800dad2:	2400      	movs	r4, #0
 800dad4:	e721      	b.n	800d91a <_dtoa_r+0x71a>
 800dad6:	9c08      	ldr	r4, [sp, #32]
 800dad8:	9e00      	ldr	r6, [sp, #0]
 800dada:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dadc:	e728      	b.n	800d930 <_dtoa_r+0x730>
 800dade:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dae2:	e751      	b.n	800d988 <_dtoa_r+0x788>
 800dae4:	9a08      	ldr	r2, [sp, #32]
 800dae6:	9902      	ldr	r1, [sp, #8]
 800dae8:	e750      	b.n	800d98c <_dtoa_r+0x78c>
 800daea:	f8cd 8008 	str.w	r8, [sp, #8]
 800daee:	e751      	b.n	800d994 <_dtoa_r+0x794>
 800daf0:	2300      	movs	r3, #0
 800daf2:	e779      	b.n	800d9e8 <_dtoa_r+0x7e8>
 800daf4:	9b04      	ldr	r3, [sp, #16]
 800daf6:	e777      	b.n	800d9e8 <_dtoa_r+0x7e8>
 800daf8:	2300      	movs	r3, #0
 800dafa:	9308      	str	r3, [sp, #32]
 800dafc:	e779      	b.n	800d9f2 <_dtoa_r+0x7f2>
 800dafe:	d093      	beq.n	800da28 <_dtoa_r+0x828>
 800db00:	9a00      	ldr	r2, [sp, #0]
 800db02:	331c      	adds	r3, #28
 800db04:	441a      	add	r2, r3
 800db06:	9200      	str	r2, [sp, #0]
 800db08:	9a06      	ldr	r2, [sp, #24]
 800db0a:	441a      	add	r2, r3
 800db0c:	441e      	add	r6, r3
 800db0e:	9206      	str	r2, [sp, #24]
 800db10:	e78a      	b.n	800da28 <_dtoa_r+0x828>
 800db12:	4603      	mov	r3, r0
 800db14:	e7f4      	b.n	800db00 <_dtoa_r+0x900>
 800db16:	9b03      	ldr	r3, [sp, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	46b8      	mov	r8, r7
 800db1c:	dc20      	bgt.n	800db60 <_dtoa_r+0x960>
 800db1e:	469b      	mov	fp, r3
 800db20:	9b07      	ldr	r3, [sp, #28]
 800db22:	2b02      	cmp	r3, #2
 800db24:	dd1e      	ble.n	800db64 <_dtoa_r+0x964>
 800db26:	f1bb 0f00 	cmp.w	fp, #0
 800db2a:	f47f adb1 	bne.w	800d690 <_dtoa_r+0x490>
 800db2e:	4621      	mov	r1, r4
 800db30:	465b      	mov	r3, fp
 800db32:	2205      	movs	r2, #5
 800db34:	4648      	mov	r0, r9
 800db36:	f000 fd2b 	bl	800e590 <__multadd>
 800db3a:	4601      	mov	r1, r0
 800db3c:	4604      	mov	r4, r0
 800db3e:	9802      	ldr	r0, [sp, #8]
 800db40:	f000 ff80 	bl	800ea44 <__mcmp>
 800db44:	2800      	cmp	r0, #0
 800db46:	f77f ada3 	ble.w	800d690 <_dtoa_r+0x490>
 800db4a:	4656      	mov	r6, sl
 800db4c:	2331      	movs	r3, #49	@ 0x31
 800db4e:	f806 3b01 	strb.w	r3, [r6], #1
 800db52:	f108 0801 	add.w	r8, r8, #1
 800db56:	e59f      	b.n	800d698 <_dtoa_r+0x498>
 800db58:	9c03      	ldr	r4, [sp, #12]
 800db5a:	46b8      	mov	r8, r7
 800db5c:	4625      	mov	r5, r4
 800db5e:	e7f4      	b.n	800db4a <_dtoa_r+0x94a>
 800db60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800db64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db66:	2b00      	cmp	r3, #0
 800db68:	f000 8101 	beq.w	800dd6e <_dtoa_r+0xb6e>
 800db6c:	2e00      	cmp	r6, #0
 800db6e:	dd05      	ble.n	800db7c <_dtoa_r+0x97c>
 800db70:	4629      	mov	r1, r5
 800db72:	4632      	mov	r2, r6
 800db74:	4648      	mov	r0, r9
 800db76:	f000 fef9 	bl	800e96c <__lshift>
 800db7a:	4605      	mov	r5, r0
 800db7c:	9b08      	ldr	r3, [sp, #32]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d05c      	beq.n	800dc3c <_dtoa_r+0xa3c>
 800db82:	6869      	ldr	r1, [r5, #4]
 800db84:	4648      	mov	r0, r9
 800db86:	f000 fca1 	bl	800e4cc <_Balloc>
 800db8a:	4606      	mov	r6, r0
 800db8c:	b928      	cbnz	r0, 800db9a <_dtoa_r+0x99a>
 800db8e:	4b82      	ldr	r3, [pc, #520]	@ (800dd98 <_dtoa_r+0xb98>)
 800db90:	4602      	mov	r2, r0
 800db92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db96:	f7ff bb4a 	b.w	800d22e <_dtoa_r+0x2e>
 800db9a:	692a      	ldr	r2, [r5, #16]
 800db9c:	3202      	adds	r2, #2
 800db9e:	0092      	lsls	r2, r2, #2
 800dba0:	f105 010c 	add.w	r1, r5, #12
 800dba4:	300c      	adds	r0, #12
 800dba6:	f7ff fa82 	bl	800d0ae <memcpy>
 800dbaa:	2201      	movs	r2, #1
 800dbac:	4631      	mov	r1, r6
 800dbae:	4648      	mov	r0, r9
 800dbb0:	f000 fedc 	bl	800e96c <__lshift>
 800dbb4:	f10a 0301 	add.w	r3, sl, #1
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	eb0a 030b 	add.w	r3, sl, fp
 800dbbe:	9308      	str	r3, [sp, #32]
 800dbc0:	9b04      	ldr	r3, [sp, #16]
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	462f      	mov	r7, r5
 800dbc8:	9306      	str	r3, [sp, #24]
 800dbca:	4605      	mov	r5, r0
 800dbcc:	9b00      	ldr	r3, [sp, #0]
 800dbce:	9802      	ldr	r0, [sp, #8]
 800dbd0:	4621      	mov	r1, r4
 800dbd2:	f103 3bff 	add.w	fp, r3, #4294967295
 800dbd6:	f7ff fa89 	bl	800d0ec <quorem>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	3330      	adds	r3, #48	@ 0x30
 800dbde:	9003      	str	r0, [sp, #12]
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	9802      	ldr	r0, [sp, #8]
 800dbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbe6:	f000 ff2d 	bl	800ea44 <__mcmp>
 800dbea:	462a      	mov	r2, r5
 800dbec:	9004      	str	r0, [sp, #16]
 800dbee:	4621      	mov	r1, r4
 800dbf0:	4648      	mov	r0, r9
 800dbf2:	f000 ff43 	bl	800ea7c <__mdiff>
 800dbf6:	68c2      	ldr	r2, [r0, #12]
 800dbf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	bb02      	cbnz	r2, 800dc40 <_dtoa_r+0xa40>
 800dbfe:	4601      	mov	r1, r0
 800dc00:	9802      	ldr	r0, [sp, #8]
 800dc02:	f000 ff1f 	bl	800ea44 <__mcmp>
 800dc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc08:	4602      	mov	r2, r0
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	4648      	mov	r0, r9
 800dc0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc10:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc12:	f000 fc9b 	bl	800e54c <_Bfree>
 800dc16:	9b07      	ldr	r3, [sp, #28]
 800dc18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc1a:	9e00      	ldr	r6, [sp, #0]
 800dc1c:	ea42 0103 	orr.w	r1, r2, r3
 800dc20:	9b06      	ldr	r3, [sp, #24]
 800dc22:	4319      	orrs	r1, r3
 800dc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc26:	d10d      	bne.n	800dc44 <_dtoa_r+0xa44>
 800dc28:	2b39      	cmp	r3, #57	@ 0x39
 800dc2a:	d027      	beq.n	800dc7c <_dtoa_r+0xa7c>
 800dc2c:	9a04      	ldr	r2, [sp, #16]
 800dc2e:	2a00      	cmp	r2, #0
 800dc30:	dd01      	ble.n	800dc36 <_dtoa_r+0xa36>
 800dc32:	9b03      	ldr	r3, [sp, #12]
 800dc34:	3331      	adds	r3, #49	@ 0x31
 800dc36:	f88b 3000 	strb.w	r3, [fp]
 800dc3a:	e52e      	b.n	800d69a <_dtoa_r+0x49a>
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	e7b9      	b.n	800dbb4 <_dtoa_r+0x9b4>
 800dc40:	2201      	movs	r2, #1
 800dc42:	e7e2      	b.n	800dc0a <_dtoa_r+0xa0a>
 800dc44:	9904      	ldr	r1, [sp, #16]
 800dc46:	2900      	cmp	r1, #0
 800dc48:	db04      	blt.n	800dc54 <_dtoa_r+0xa54>
 800dc4a:	9807      	ldr	r0, [sp, #28]
 800dc4c:	4301      	orrs	r1, r0
 800dc4e:	9806      	ldr	r0, [sp, #24]
 800dc50:	4301      	orrs	r1, r0
 800dc52:	d120      	bne.n	800dc96 <_dtoa_r+0xa96>
 800dc54:	2a00      	cmp	r2, #0
 800dc56:	ddee      	ble.n	800dc36 <_dtoa_r+0xa36>
 800dc58:	9902      	ldr	r1, [sp, #8]
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	4648      	mov	r0, r9
 800dc60:	f000 fe84 	bl	800e96c <__lshift>
 800dc64:	4621      	mov	r1, r4
 800dc66:	9002      	str	r0, [sp, #8]
 800dc68:	f000 feec 	bl	800ea44 <__mcmp>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	9b00      	ldr	r3, [sp, #0]
 800dc70:	dc02      	bgt.n	800dc78 <_dtoa_r+0xa78>
 800dc72:	d1e0      	bne.n	800dc36 <_dtoa_r+0xa36>
 800dc74:	07da      	lsls	r2, r3, #31
 800dc76:	d5de      	bpl.n	800dc36 <_dtoa_r+0xa36>
 800dc78:	2b39      	cmp	r3, #57	@ 0x39
 800dc7a:	d1da      	bne.n	800dc32 <_dtoa_r+0xa32>
 800dc7c:	2339      	movs	r3, #57	@ 0x39
 800dc7e:	f88b 3000 	strb.w	r3, [fp]
 800dc82:	4633      	mov	r3, r6
 800dc84:	461e      	mov	r6, r3
 800dc86:	3b01      	subs	r3, #1
 800dc88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc8c:	2a39      	cmp	r2, #57	@ 0x39
 800dc8e:	d04e      	beq.n	800dd2e <_dtoa_r+0xb2e>
 800dc90:	3201      	adds	r2, #1
 800dc92:	701a      	strb	r2, [r3, #0]
 800dc94:	e501      	b.n	800d69a <_dtoa_r+0x49a>
 800dc96:	2a00      	cmp	r2, #0
 800dc98:	dd03      	ble.n	800dca2 <_dtoa_r+0xaa2>
 800dc9a:	2b39      	cmp	r3, #57	@ 0x39
 800dc9c:	d0ee      	beq.n	800dc7c <_dtoa_r+0xa7c>
 800dc9e:	3301      	adds	r3, #1
 800dca0:	e7c9      	b.n	800dc36 <_dtoa_r+0xa36>
 800dca2:	9a00      	ldr	r2, [sp, #0]
 800dca4:	9908      	ldr	r1, [sp, #32]
 800dca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dcaa:	428a      	cmp	r2, r1
 800dcac:	d028      	beq.n	800dd00 <_dtoa_r+0xb00>
 800dcae:	9902      	ldr	r1, [sp, #8]
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	220a      	movs	r2, #10
 800dcb4:	4648      	mov	r0, r9
 800dcb6:	f000 fc6b 	bl	800e590 <__multadd>
 800dcba:	42af      	cmp	r7, r5
 800dcbc:	9002      	str	r0, [sp, #8]
 800dcbe:	f04f 0300 	mov.w	r3, #0
 800dcc2:	f04f 020a 	mov.w	r2, #10
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	4648      	mov	r0, r9
 800dcca:	d107      	bne.n	800dcdc <_dtoa_r+0xadc>
 800dccc:	f000 fc60 	bl	800e590 <__multadd>
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	9b00      	ldr	r3, [sp, #0]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	e777      	b.n	800dbcc <_dtoa_r+0x9cc>
 800dcdc:	f000 fc58 	bl	800e590 <__multadd>
 800dce0:	4629      	mov	r1, r5
 800dce2:	4607      	mov	r7, r0
 800dce4:	2300      	movs	r3, #0
 800dce6:	220a      	movs	r2, #10
 800dce8:	4648      	mov	r0, r9
 800dcea:	f000 fc51 	bl	800e590 <__multadd>
 800dcee:	4605      	mov	r5, r0
 800dcf0:	e7f0      	b.n	800dcd4 <_dtoa_r+0xad4>
 800dcf2:	f1bb 0f00 	cmp.w	fp, #0
 800dcf6:	bfcc      	ite	gt
 800dcf8:	465e      	movgt	r6, fp
 800dcfa:	2601      	movle	r6, #1
 800dcfc:	4456      	add	r6, sl
 800dcfe:	2700      	movs	r7, #0
 800dd00:	9902      	ldr	r1, [sp, #8]
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	2201      	movs	r2, #1
 800dd06:	4648      	mov	r0, r9
 800dd08:	f000 fe30 	bl	800e96c <__lshift>
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	9002      	str	r0, [sp, #8]
 800dd10:	f000 fe98 	bl	800ea44 <__mcmp>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	dcb4      	bgt.n	800dc82 <_dtoa_r+0xa82>
 800dd18:	d102      	bne.n	800dd20 <_dtoa_r+0xb20>
 800dd1a:	9b00      	ldr	r3, [sp, #0]
 800dd1c:	07db      	lsls	r3, r3, #31
 800dd1e:	d4b0      	bmi.n	800dc82 <_dtoa_r+0xa82>
 800dd20:	4633      	mov	r3, r6
 800dd22:	461e      	mov	r6, r3
 800dd24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd28:	2a30      	cmp	r2, #48	@ 0x30
 800dd2a:	d0fa      	beq.n	800dd22 <_dtoa_r+0xb22>
 800dd2c:	e4b5      	b.n	800d69a <_dtoa_r+0x49a>
 800dd2e:	459a      	cmp	sl, r3
 800dd30:	d1a8      	bne.n	800dc84 <_dtoa_r+0xa84>
 800dd32:	2331      	movs	r3, #49	@ 0x31
 800dd34:	f108 0801 	add.w	r8, r8, #1
 800dd38:	f88a 3000 	strb.w	r3, [sl]
 800dd3c:	e4ad      	b.n	800d69a <_dtoa_r+0x49a>
 800dd3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dd9c <_dtoa_r+0xb9c>
 800dd44:	b11b      	cbz	r3, 800dd4e <_dtoa_r+0xb4e>
 800dd46:	f10a 0308 	add.w	r3, sl, #8
 800dd4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dd4c:	6013      	str	r3, [r2, #0]
 800dd4e:	4650      	mov	r0, sl
 800dd50:	b017      	add	sp, #92	@ 0x5c
 800dd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd56:	9b07      	ldr	r3, [sp, #28]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	f77f ae2e 	ble.w	800d9ba <_dtoa_r+0x7ba>
 800dd5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd60:	9308      	str	r3, [sp, #32]
 800dd62:	2001      	movs	r0, #1
 800dd64:	e64d      	b.n	800da02 <_dtoa_r+0x802>
 800dd66:	f1bb 0f00 	cmp.w	fp, #0
 800dd6a:	f77f aed9 	ble.w	800db20 <_dtoa_r+0x920>
 800dd6e:	4656      	mov	r6, sl
 800dd70:	9802      	ldr	r0, [sp, #8]
 800dd72:	4621      	mov	r1, r4
 800dd74:	f7ff f9ba 	bl	800d0ec <quorem>
 800dd78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dd7c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd80:	eba6 020a 	sub.w	r2, r6, sl
 800dd84:	4593      	cmp	fp, r2
 800dd86:	ddb4      	ble.n	800dcf2 <_dtoa_r+0xaf2>
 800dd88:	9902      	ldr	r1, [sp, #8]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	220a      	movs	r2, #10
 800dd8e:	4648      	mov	r0, r9
 800dd90:	f000 fbfe 	bl	800e590 <__multadd>
 800dd94:	9002      	str	r0, [sp, #8]
 800dd96:	e7eb      	b.n	800dd70 <_dtoa_r+0xb70>
 800dd98:	080103e1 	.word	0x080103e1
 800dd9c:	08010365 	.word	0x08010365

0800dda0 <_free_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4605      	mov	r5, r0
 800dda4:	2900      	cmp	r1, #0
 800dda6:	d041      	beq.n	800de2c <_free_r+0x8c>
 800dda8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddac:	1f0c      	subs	r4, r1, #4
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	bfb8      	it	lt
 800ddb2:	18e4      	addlt	r4, r4, r3
 800ddb4:	f7fd fa32 	bl	800b21c <__malloc_lock>
 800ddb8:	4a1d      	ldr	r2, [pc, #116]	@ (800de30 <_free_r+0x90>)
 800ddba:	6813      	ldr	r3, [r2, #0]
 800ddbc:	b933      	cbnz	r3, 800ddcc <_free_r+0x2c>
 800ddbe:	6063      	str	r3, [r4, #4]
 800ddc0:	6014      	str	r4, [r2, #0]
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddc8:	f7fd ba2e 	b.w	800b228 <__malloc_unlock>
 800ddcc:	42a3      	cmp	r3, r4
 800ddce:	d908      	bls.n	800dde2 <_free_r+0x42>
 800ddd0:	6820      	ldr	r0, [r4, #0]
 800ddd2:	1821      	adds	r1, r4, r0
 800ddd4:	428b      	cmp	r3, r1
 800ddd6:	bf01      	itttt	eq
 800ddd8:	6819      	ldreq	r1, [r3, #0]
 800ddda:	685b      	ldreq	r3, [r3, #4]
 800dddc:	1809      	addeq	r1, r1, r0
 800ddde:	6021      	streq	r1, [r4, #0]
 800dde0:	e7ed      	b.n	800ddbe <_free_r+0x1e>
 800dde2:	461a      	mov	r2, r3
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	b10b      	cbz	r3, 800ddec <_free_r+0x4c>
 800dde8:	42a3      	cmp	r3, r4
 800ddea:	d9fa      	bls.n	800dde2 <_free_r+0x42>
 800ddec:	6811      	ldr	r1, [r2, #0]
 800ddee:	1850      	adds	r0, r2, r1
 800ddf0:	42a0      	cmp	r0, r4
 800ddf2:	d10b      	bne.n	800de0c <_free_r+0x6c>
 800ddf4:	6820      	ldr	r0, [r4, #0]
 800ddf6:	4401      	add	r1, r0
 800ddf8:	1850      	adds	r0, r2, r1
 800ddfa:	4283      	cmp	r3, r0
 800ddfc:	6011      	str	r1, [r2, #0]
 800ddfe:	d1e0      	bne.n	800ddc2 <_free_r+0x22>
 800de00:	6818      	ldr	r0, [r3, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	6053      	str	r3, [r2, #4]
 800de06:	4408      	add	r0, r1
 800de08:	6010      	str	r0, [r2, #0]
 800de0a:	e7da      	b.n	800ddc2 <_free_r+0x22>
 800de0c:	d902      	bls.n	800de14 <_free_r+0x74>
 800de0e:	230c      	movs	r3, #12
 800de10:	602b      	str	r3, [r5, #0]
 800de12:	e7d6      	b.n	800ddc2 <_free_r+0x22>
 800de14:	6820      	ldr	r0, [r4, #0]
 800de16:	1821      	adds	r1, r4, r0
 800de18:	428b      	cmp	r3, r1
 800de1a:	bf04      	itt	eq
 800de1c:	6819      	ldreq	r1, [r3, #0]
 800de1e:	685b      	ldreq	r3, [r3, #4]
 800de20:	6063      	str	r3, [r4, #4]
 800de22:	bf04      	itt	eq
 800de24:	1809      	addeq	r1, r1, r0
 800de26:	6021      	streq	r1, [r4, #0]
 800de28:	6054      	str	r4, [r2, #4]
 800de2a:	e7ca      	b.n	800ddc2 <_free_r+0x22>
 800de2c:	bd38      	pop	{r3, r4, r5, pc}
 800de2e:	bf00      	nop
 800de30:	2000599c 	.word	0x2000599c

0800de34 <rshift>:
 800de34:	6903      	ldr	r3, [r0, #16]
 800de36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800de3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800de42:	f100 0414 	add.w	r4, r0, #20
 800de46:	dd45      	ble.n	800ded4 <rshift+0xa0>
 800de48:	f011 011f 	ands.w	r1, r1, #31
 800de4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800de50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800de54:	d10c      	bne.n	800de70 <rshift+0x3c>
 800de56:	f100 0710 	add.w	r7, r0, #16
 800de5a:	4629      	mov	r1, r5
 800de5c:	42b1      	cmp	r1, r6
 800de5e:	d334      	bcc.n	800deca <rshift+0x96>
 800de60:	1a9b      	subs	r3, r3, r2
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	1eea      	subs	r2, r5, #3
 800de66:	4296      	cmp	r6, r2
 800de68:	bf38      	it	cc
 800de6a:	2300      	movcc	r3, #0
 800de6c:	4423      	add	r3, r4
 800de6e:	e015      	b.n	800de9c <rshift+0x68>
 800de70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800de74:	f1c1 0820 	rsb	r8, r1, #32
 800de78:	40cf      	lsrs	r7, r1
 800de7a:	f105 0e04 	add.w	lr, r5, #4
 800de7e:	46a1      	mov	r9, r4
 800de80:	4576      	cmp	r6, lr
 800de82:	46f4      	mov	ip, lr
 800de84:	d815      	bhi.n	800deb2 <rshift+0x7e>
 800de86:	1a9a      	subs	r2, r3, r2
 800de88:	0092      	lsls	r2, r2, #2
 800de8a:	3a04      	subs	r2, #4
 800de8c:	3501      	adds	r5, #1
 800de8e:	42ae      	cmp	r6, r5
 800de90:	bf38      	it	cc
 800de92:	2200      	movcc	r2, #0
 800de94:	18a3      	adds	r3, r4, r2
 800de96:	50a7      	str	r7, [r4, r2]
 800de98:	b107      	cbz	r7, 800de9c <rshift+0x68>
 800de9a:	3304      	adds	r3, #4
 800de9c:	1b1a      	subs	r2, r3, r4
 800de9e:	42a3      	cmp	r3, r4
 800dea0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dea4:	bf08      	it	eq
 800dea6:	2300      	moveq	r3, #0
 800dea8:	6102      	str	r2, [r0, #16]
 800deaa:	bf08      	it	eq
 800deac:	6143      	streq	r3, [r0, #20]
 800deae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800deb2:	f8dc c000 	ldr.w	ip, [ip]
 800deb6:	fa0c fc08 	lsl.w	ip, ip, r8
 800deba:	ea4c 0707 	orr.w	r7, ip, r7
 800debe:	f849 7b04 	str.w	r7, [r9], #4
 800dec2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dec6:	40cf      	lsrs	r7, r1
 800dec8:	e7da      	b.n	800de80 <rshift+0x4c>
 800deca:	f851 cb04 	ldr.w	ip, [r1], #4
 800dece:	f847 cf04 	str.w	ip, [r7, #4]!
 800ded2:	e7c3      	b.n	800de5c <rshift+0x28>
 800ded4:	4623      	mov	r3, r4
 800ded6:	e7e1      	b.n	800de9c <rshift+0x68>

0800ded8 <__hexdig_fun>:
 800ded8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dedc:	2b09      	cmp	r3, #9
 800dede:	d802      	bhi.n	800dee6 <__hexdig_fun+0xe>
 800dee0:	3820      	subs	r0, #32
 800dee2:	b2c0      	uxtb	r0, r0
 800dee4:	4770      	bx	lr
 800dee6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800deea:	2b05      	cmp	r3, #5
 800deec:	d801      	bhi.n	800def2 <__hexdig_fun+0x1a>
 800deee:	3847      	subs	r0, #71	@ 0x47
 800def0:	e7f7      	b.n	800dee2 <__hexdig_fun+0xa>
 800def2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800def6:	2b05      	cmp	r3, #5
 800def8:	d801      	bhi.n	800defe <__hexdig_fun+0x26>
 800defa:	3827      	subs	r0, #39	@ 0x27
 800defc:	e7f1      	b.n	800dee2 <__hexdig_fun+0xa>
 800defe:	2000      	movs	r0, #0
 800df00:	4770      	bx	lr
	...

0800df04 <__gethex>:
 800df04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df08:	b085      	sub	sp, #20
 800df0a:	468a      	mov	sl, r1
 800df0c:	9302      	str	r3, [sp, #8]
 800df0e:	680b      	ldr	r3, [r1, #0]
 800df10:	9001      	str	r0, [sp, #4]
 800df12:	4690      	mov	r8, r2
 800df14:	1c9c      	adds	r4, r3, #2
 800df16:	46a1      	mov	r9, r4
 800df18:	f814 0b01 	ldrb.w	r0, [r4], #1
 800df1c:	2830      	cmp	r0, #48	@ 0x30
 800df1e:	d0fa      	beq.n	800df16 <__gethex+0x12>
 800df20:	eba9 0303 	sub.w	r3, r9, r3
 800df24:	f1a3 0b02 	sub.w	fp, r3, #2
 800df28:	f7ff ffd6 	bl	800ded8 <__hexdig_fun>
 800df2c:	4605      	mov	r5, r0
 800df2e:	2800      	cmp	r0, #0
 800df30:	d168      	bne.n	800e004 <__gethex+0x100>
 800df32:	49a0      	ldr	r1, [pc, #640]	@ (800e1b4 <__gethex+0x2b0>)
 800df34:	2201      	movs	r2, #1
 800df36:	4648      	mov	r0, r9
 800df38:	f7fe ffc1 	bl	800cebe <strncmp>
 800df3c:	4607      	mov	r7, r0
 800df3e:	2800      	cmp	r0, #0
 800df40:	d167      	bne.n	800e012 <__gethex+0x10e>
 800df42:	f899 0001 	ldrb.w	r0, [r9, #1]
 800df46:	4626      	mov	r6, r4
 800df48:	f7ff ffc6 	bl	800ded8 <__hexdig_fun>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d062      	beq.n	800e016 <__gethex+0x112>
 800df50:	4623      	mov	r3, r4
 800df52:	7818      	ldrb	r0, [r3, #0]
 800df54:	2830      	cmp	r0, #48	@ 0x30
 800df56:	4699      	mov	r9, r3
 800df58:	f103 0301 	add.w	r3, r3, #1
 800df5c:	d0f9      	beq.n	800df52 <__gethex+0x4e>
 800df5e:	f7ff ffbb 	bl	800ded8 <__hexdig_fun>
 800df62:	fab0 f580 	clz	r5, r0
 800df66:	096d      	lsrs	r5, r5, #5
 800df68:	f04f 0b01 	mov.w	fp, #1
 800df6c:	464a      	mov	r2, r9
 800df6e:	4616      	mov	r6, r2
 800df70:	3201      	adds	r2, #1
 800df72:	7830      	ldrb	r0, [r6, #0]
 800df74:	f7ff ffb0 	bl	800ded8 <__hexdig_fun>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d1f8      	bne.n	800df6e <__gethex+0x6a>
 800df7c:	498d      	ldr	r1, [pc, #564]	@ (800e1b4 <__gethex+0x2b0>)
 800df7e:	2201      	movs	r2, #1
 800df80:	4630      	mov	r0, r6
 800df82:	f7fe ff9c 	bl	800cebe <strncmp>
 800df86:	2800      	cmp	r0, #0
 800df88:	d13f      	bne.n	800e00a <__gethex+0x106>
 800df8a:	b944      	cbnz	r4, 800df9e <__gethex+0x9a>
 800df8c:	1c74      	adds	r4, r6, #1
 800df8e:	4622      	mov	r2, r4
 800df90:	4616      	mov	r6, r2
 800df92:	3201      	adds	r2, #1
 800df94:	7830      	ldrb	r0, [r6, #0]
 800df96:	f7ff ff9f 	bl	800ded8 <__hexdig_fun>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d1f8      	bne.n	800df90 <__gethex+0x8c>
 800df9e:	1ba4      	subs	r4, r4, r6
 800dfa0:	00a7      	lsls	r7, r4, #2
 800dfa2:	7833      	ldrb	r3, [r6, #0]
 800dfa4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dfa8:	2b50      	cmp	r3, #80	@ 0x50
 800dfaa:	d13e      	bne.n	800e02a <__gethex+0x126>
 800dfac:	7873      	ldrb	r3, [r6, #1]
 800dfae:	2b2b      	cmp	r3, #43	@ 0x2b
 800dfb0:	d033      	beq.n	800e01a <__gethex+0x116>
 800dfb2:	2b2d      	cmp	r3, #45	@ 0x2d
 800dfb4:	d034      	beq.n	800e020 <__gethex+0x11c>
 800dfb6:	1c71      	adds	r1, r6, #1
 800dfb8:	2400      	movs	r4, #0
 800dfba:	7808      	ldrb	r0, [r1, #0]
 800dfbc:	f7ff ff8c 	bl	800ded8 <__hexdig_fun>
 800dfc0:	1e43      	subs	r3, r0, #1
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	2b18      	cmp	r3, #24
 800dfc6:	d830      	bhi.n	800e02a <__gethex+0x126>
 800dfc8:	f1a0 0210 	sub.w	r2, r0, #16
 800dfcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dfd0:	f7ff ff82 	bl	800ded8 <__hexdig_fun>
 800dfd4:	f100 3cff 	add.w	ip, r0, #4294967295
 800dfd8:	fa5f fc8c 	uxtb.w	ip, ip
 800dfdc:	f1bc 0f18 	cmp.w	ip, #24
 800dfe0:	f04f 030a 	mov.w	r3, #10
 800dfe4:	d91e      	bls.n	800e024 <__gethex+0x120>
 800dfe6:	b104      	cbz	r4, 800dfea <__gethex+0xe6>
 800dfe8:	4252      	negs	r2, r2
 800dfea:	4417      	add	r7, r2
 800dfec:	f8ca 1000 	str.w	r1, [sl]
 800dff0:	b1ed      	cbz	r5, 800e02e <__gethex+0x12a>
 800dff2:	f1bb 0f00 	cmp.w	fp, #0
 800dff6:	bf0c      	ite	eq
 800dff8:	2506      	moveq	r5, #6
 800dffa:	2500      	movne	r5, #0
 800dffc:	4628      	mov	r0, r5
 800dffe:	b005      	add	sp, #20
 800e000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e004:	2500      	movs	r5, #0
 800e006:	462c      	mov	r4, r5
 800e008:	e7b0      	b.n	800df6c <__gethex+0x68>
 800e00a:	2c00      	cmp	r4, #0
 800e00c:	d1c7      	bne.n	800df9e <__gethex+0x9a>
 800e00e:	4627      	mov	r7, r4
 800e010:	e7c7      	b.n	800dfa2 <__gethex+0x9e>
 800e012:	464e      	mov	r6, r9
 800e014:	462f      	mov	r7, r5
 800e016:	2501      	movs	r5, #1
 800e018:	e7c3      	b.n	800dfa2 <__gethex+0x9e>
 800e01a:	2400      	movs	r4, #0
 800e01c:	1cb1      	adds	r1, r6, #2
 800e01e:	e7cc      	b.n	800dfba <__gethex+0xb6>
 800e020:	2401      	movs	r4, #1
 800e022:	e7fb      	b.n	800e01c <__gethex+0x118>
 800e024:	fb03 0002 	mla	r0, r3, r2, r0
 800e028:	e7ce      	b.n	800dfc8 <__gethex+0xc4>
 800e02a:	4631      	mov	r1, r6
 800e02c:	e7de      	b.n	800dfec <__gethex+0xe8>
 800e02e:	eba6 0309 	sub.w	r3, r6, r9
 800e032:	3b01      	subs	r3, #1
 800e034:	4629      	mov	r1, r5
 800e036:	2b07      	cmp	r3, #7
 800e038:	dc0a      	bgt.n	800e050 <__gethex+0x14c>
 800e03a:	9801      	ldr	r0, [sp, #4]
 800e03c:	f000 fa46 	bl	800e4cc <_Balloc>
 800e040:	4604      	mov	r4, r0
 800e042:	b940      	cbnz	r0, 800e056 <__gethex+0x152>
 800e044:	4b5c      	ldr	r3, [pc, #368]	@ (800e1b8 <__gethex+0x2b4>)
 800e046:	4602      	mov	r2, r0
 800e048:	21e4      	movs	r1, #228	@ 0xe4
 800e04a:	485c      	ldr	r0, [pc, #368]	@ (800e1bc <__gethex+0x2b8>)
 800e04c:	f001 fd14 	bl	800fa78 <__assert_func>
 800e050:	3101      	adds	r1, #1
 800e052:	105b      	asrs	r3, r3, #1
 800e054:	e7ef      	b.n	800e036 <__gethex+0x132>
 800e056:	f100 0a14 	add.w	sl, r0, #20
 800e05a:	2300      	movs	r3, #0
 800e05c:	4655      	mov	r5, sl
 800e05e:	469b      	mov	fp, r3
 800e060:	45b1      	cmp	r9, r6
 800e062:	d337      	bcc.n	800e0d4 <__gethex+0x1d0>
 800e064:	f845 bb04 	str.w	fp, [r5], #4
 800e068:	eba5 050a 	sub.w	r5, r5, sl
 800e06c:	10ad      	asrs	r5, r5, #2
 800e06e:	6125      	str	r5, [r4, #16]
 800e070:	4658      	mov	r0, fp
 800e072:	f000 fb1d 	bl	800e6b0 <__hi0bits>
 800e076:	016d      	lsls	r5, r5, #5
 800e078:	f8d8 6000 	ldr.w	r6, [r8]
 800e07c:	1a2d      	subs	r5, r5, r0
 800e07e:	42b5      	cmp	r5, r6
 800e080:	dd54      	ble.n	800e12c <__gethex+0x228>
 800e082:	1bad      	subs	r5, r5, r6
 800e084:	4629      	mov	r1, r5
 800e086:	4620      	mov	r0, r4
 800e088:	f000 fea9 	bl	800edde <__any_on>
 800e08c:	4681      	mov	r9, r0
 800e08e:	b178      	cbz	r0, 800e0b0 <__gethex+0x1ac>
 800e090:	1e6b      	subs	r3, r5, #1
 800e092:	1159      	asrs	r1, r3, #5
 800e094:	f003 021f 	and.w	r2, r3, #31
 800e098:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e09c:	f04f 0901 	mov.w	r9, #1
 800e0a0:	fa09 f202 	lsl.w	r2, r9, r2
 800e0a4:	420a      	tst	r2, r1
 800e0a6:	d003      	beq.n	800e0b0 <__gethex+0x1ac>
 800e0a8:	454b      	cmp	r3, r9
 800e0aa:	dc36      	bgt.n	800e11a <__gethex+0x216>
 800e0ac:	f04f 0902 	mov.w	r9, #2
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f7ff febe 	bl	800de34 <rshift>
 800e0b8:	442f      	add	r7, r5
 800e0ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0be:	42bb      	cmp	r3, r7
 800e0c0:	da42      	bge.n	800e148 <__gethex+0x244>
 800e0c2:	9801      	ldr	r0, [sp, #4]
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	f000 fa41 	bl	800e54c <_Bfree>
 800e0ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	6013      	str	r3, [r2, #0]
 800e0d0:	25a3      	movs	r5, #163	@ 0xa3
 800e0d2:	e793      	b.n	800dffc <__gethex+0xf8>
 800e0d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e0d8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e0da:	d012      	beq.n	800e102 <__gethex+0x1fe>
 800e0dc:	2b20      	cmp	r3, #32
 800e0de:	d104      	bne.n	800e0ea <__gethex+0x1e6>
 800e0e0:	f845 bb04 	str.w	fp, [r5], #4
 800e0e4:	f04f 0b00 	mov.w	fp, #0
 800e0e8:	465b      	mov	r3, fp
 800e0ea:	7830      	ldrb	r0, [r6, #0]
 800e0ec:	9303      	str	r3, [sp, #12]
 800e0ee:	f7ff fef3 	bl	800ded8 <__hexdig_fun>
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	f000 000f 	and.w	r0, r0, #15
 800e0f8:	4098      	lsls	r0, r3
 800e0fa:	ea4b 0b00 	orr.w	fp, fp, r0
 800e0fe:	3304      	adds	r3, #4
 800e100:	e7ae      	b.n	800e060 <__gethex+0x15c>
 800e102:	45b1      	cmp	r9, r6
 800e104:	d8ea      	bhi.n	800e0dc <__gethex+0x1d8>
 800e106:	492b      	ldr	r1, [pc, #172]	@ (800e1b4 <__gethex+0x2b0>)
 800e108:	9303      	str	r3, [sp, #12]
 800e10a:	2201      	movs	r2, #1
 800e10c:	4630      	mov	r0, r6
 800e10e:	f7fe fed6 	bl	800cebe <strncmp>
 800e112:	9b03      	ldr	r3, [sp, #12]
 800e114:	2800      	cmp	r0, #0
 800e116:	d1e1      	bne.n	800e0dc <__gethex+0x1d8>
 800e118:	e7a2      	b.n	800e060 <__gethex+0x15c>
 800e11a:	1ea9      	subs	r1, r5, #2
 800e11c:	4620      	mov	r0, r4
 800e11e:	f000 fe5e 	bl	800edde <__any_on>
 800e122:	2800      	cmp	r0, #0
 800e124:	d0c2      	beq.n	800e0ac <__gethex+0x1a8>
 800e126:	f04f 0903 	mov.w	r9, #3
 800e12a:	e7c1      	b.n	800e0b0 <__gethex+0x1ac>
 800e12c:	da09      	bge.n	800e142 <__gethex+0x23e>
 800e12e:	1b75      	subs	r5, r6, r5
 800e130:	4621      	mov	r1, r4
 800e132:	9801      	ldr	r0, [sp, #4]
 800e134:	462a      	mov	r2, r5
 800e136:	f000 fc19 	bl	800e96c <__lshift>
 800e13a:	1b7f      	subs	r7, r7, r5
 800e13c:	4604      	mov	r4, r0
 800e13e:	f100 0a14 	add.w	sl, r0, #20
 800e142:	f04f 0900 	mov.w	r9, #0
 800e146:	e7b8      	b.n	800e0ba <__gethex+0x1b6>
 800e148:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e14c:	42bd      	cmp	r5, r7
 800e14e:	dd6f      	ble.n	800e230 <__gethex+0x32c>
 800e150:	1bed      	subs	r5, r5, r7
 800e152:	42ae      	cmp	r6, r5
 800e154:	dc34      	bgt.n	800e1c0 <__gethex+0x2bc>
 800e156:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	d022      	beq.n	800e1a4 <__gethex+0x2a0>
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d024      	beq.n	800e1ac <__gethex+0x2a8>
 800e162:	2b01      	cmp	r3, #1
 800e164:	d115      	bne.n	800e192 <__gethex+0x28e>
 800e166:	42ae      	cmp	r6, r5
 800e168:	d113      	bne.n	800e192 <__gethex+0x28e>
 800e16a:	2e01      	cmp	r6, #1
 800e16c:	d10b      	bne.n	800e186 <__gethex+0x282>
 800e16e:	9a02      	ldr	r2, [sp, #8]
 800e170:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	2301      	movs	r3, #1
 800e178:	6123      	str	r3, [r4, #16]
 800e17a:	f8ca 3000 	str.w	r3, [sl]
 800e17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e180:	2562      	movs	r5, #98	@ 0x62
 800e182:	601c      	str	r4, [r3, #0]
 800e184:	e73a      	b.n	800dffc <__gethex+0xf8>
 800e186:	1e71      	subs	r1, r6, #1
 800e188:	4620      	mov	r0, r4
 800e18a:	f000 fe28 	bl	800edde <__any_on>
 800e18e:	2800      	cmp	r0, #0
 800e190:	d1ed      	bne.n	800e16e <__gethex+0x26a>
 800e192:	9801      	ldr	r0, [sp, #4]
 800e194:	4621      	mov	r1, r4
 800e196:	f000 f9d9 	bl	800e54c <_Bfree>
 800e19a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e19c:	2300      	movs	r3, #0
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	2550      	movs	r5, #80	@ 0x50
 800e1a2:	e72b      	b.n	800dffc <__gethex+0xf8>
 800e1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1f3      	bne.n	800e192 <__gethex+0x28e>
 800e1aa:	e7e0      	b.n	800e16e <__gethex+0x26a>
 800e1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1dd      	bne.n	800e16e <__gethex+0x26a>
 800e1b2:	e7ee      	b.n	800e192 <__gethex+0x28e>
 800e1b4:	08010324 	.word	0x08010324
 800e1b8:	080103e1 	.word	0x080103e1
 800e1bc:	080103f2 	.word	0x080103f2
 800e1c0:	1e6f      	subs	r7, r5, #1
 800e1c2:	f1b9 0f00 	cmp.w	r9, #0
 800e1c6:	d130      	bne.n	800e22a <__gethex+0x326>
 800e1c8:	b127      	cbz	r7, 800e1d4 <__gethex+0x2d0>
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f000 fe06 	bl	800edde <__any_on>
 800e1d2:	4681      	mov	r9, r0
 800e1d4:	117a      	asrs	r2, r7, #5
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e1dc:	f007 071f 	and.w	r7, r7, #31
 800e1e0:	40bb      	lsls	r3, r7
 800e1e2:	4213      	tst	r3, r2
 800e1e4:	4629      	mov	r1, r5
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	bf18      	it	ne
 800e1ea:	f049 0902 	orrne.w	r9, r9, #2
 800e1ee:	f7ff fe21 	bl	800de34 <rshift>
 800e1f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e1f6:	1b76      	subs	r6, r6, r5
 800e1f8:	2502      	movs	r5, #2
 800e1fa:	f1b9 0f00 	cmp.w	r9, #0
 800e1fe:	d047      	beq.n	800e290 <__gethex+0x38c>
 800e200:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e204:	2b02      	cmp	r3, #2
 800e206:	d015      	beq.n	800e234 <__gethex+0x330>
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d017      	beq.n	800e23c <__gethex+0x338>
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d109      	bne.n	800e224 <__gethex+0x320>
 800e210:	f019 0f02 	tst.w	r9, #2
 800e214:	d006      	beq.n	800e224 <__gethex+0x320>
 800e216:	f8da 3000 	ldr.w	r3, [sl]
 800e21a:	ea49 0903 	orr.w	r9, r9, r3
 800e21e:	f019 0f01 	tst.w	r9, #1
 800e222:	d10e      	bne.n	800e242 <__gethex+0x33e>
 800e224:	f045 0510 	orr.w	r5, r5, #16
 800e228:	e032      	b.n	800e290 <__gethex+0x38c>
 800e22a:	f04f 0901 	mov.w	r9, #1
 800e22e:	e7d1      	b.n	800e1d4 <__gethex+0x2d0>
 800e230:	2501      	movs	r5, #1
 800e232:	e7e2      	b.n	800e1fa <__gethex+0x2f6>
 800e234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e236:	f1c3 0301 	rsb	r3, r3, #1
 800e23a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d0f0      	beq.n	800e224 <__gethex+0x320>
 800e242:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e246:	f104 0314 	add.w	r3, r4, #20
 800e24a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e24e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e252:	f04f 0c00 	mov.w	ip, #0
 800e256:	4618      	mov	r0, r3
 800e258:	f853 2b04 	ldr.w	r2, [r3], #4
 800e25c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e260:	d01b      	beq.n	800e29a <__gethex+0x396>
 800e262:	3201      	adds	r2, #1
 800e264:	6002      	str	r2, [r0, #0]
 800e266:	2d02      	cmp	r5, #2
 800e268:	f104 0314 	add.w	r3, r4, #20
 800e26c:	d13c      	bne.n	800e2e8 <__gethex+0x3e4>
 800e26e:	f8d8 2000 	ldr.w	r2, [r8]
 800e272:	3a01      	subs	r2, #1
 800e274:	42b2      	cmp	r2, r6
 800e276:	d109      	bne.n	800e28c <__gethex+0x388>
 800e278:	1171      	asrs	r1, r6, #5
 800e27a:	2201      	movs	r2, #1
 800e27c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e280:	f006 061f 	and.w	r6, r6, #31
 800e284:	fa02 f606 	lsl.w	r6, r2, r6
 800e288:	421e      	tst	r6, r3
 800e28a:	d13a      	bne.n	800e302 <__gethex+0x3fe>
 800e28c:	f045 0520 	orr.w	r5, r5, #32
 800e290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e292:	601c      	str	r4, [r3, #0]
 800e294:	9b02      	ldr	r3, [sp, #8]
 800e296:	601f      	str	r7, [r3, #0]
 800e298:	e6b0      	b.n	800dffc <__gethex+0xf8>
 800e29a:	4299      	cmp	r1, r3
 800e29c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e2a0:	d8d9      	bhi.n	800e256 <__gethex+0x352>
 800e2a2:	68a3      	ldr	r3, [r4, #8]
 800e2a4:	459b      	cmp	fp, r3
 800e2a6:	db17      	blt.n	800e2d8 <__gethex+0x3d4>
 800e2a8:	6861      	ldr	r1, [r4, #4]
 800e2aa:	9801      	ldr	r0, [sp, #4]
 800e2ac:	3101      	adds	r1, #1
 800e2ae:	f000 f90d 	bl	800e4cc <_Balloc>
 800e2b2:	4681      	mov	r9, r0
 800e2b4:	b918      	cbnz	r0, 800e2be <__gethex+0x3ba>
 800e2b6:	4b1a      	ldr	r3, [pc, #104]	@ (800e320 <__gethex+0x41c>)
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	2184      	movs	r1, #132	@ 0x84
 800e2bc:	e6c5      	b.n	800e04a <__gethex+0x146>
 800e2be:	6922      	ldr	r2, [r4, #16]
 800e2c0:	3202      	adds	r2, #2
 800e2c2:	f104 010c 	add.w	r1, r4, #12
 800e2c6:	0092      	lsls	r2, r2, #2
 800e2c8:	300c      	adds	r0, #12
 800e2ca:	f7fe fef0 	bl	800d0ae <memcpy>
 800e2ce:	4621      	mov	r1, r4
 800e2d0:	9801      	ldr	r0, [sp, #4]
 800e2d2:	f000 f93b 	bl	800e54c <_Bfree>
 800e2d6:	464c      	mov	r4, r9
 800e2d8:	6923      	ldr	r3, [r4, #16]
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e2e0:	6122      	str	r2, [r4, #16]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	615a      	str	r2, [r3, #20]
 800e2e6:	e7be      	b.n	800e266 <__gethex+0x362>
 800e2e8:	6922      	ldr	r2, [r4, #16]
 800e2ea:	455a      	cmp	r2, fp
 800e2ec:	dd0b      	ble.n	800e306 <__gethex+0x402>
 800e2ee:	2101      	movs	r1, #1
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f7ff fd9f 	bl	800de34 <rshift>
 800e2f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2fa:	3701      	adds	r7, #1
 800e2fc:	42bb      	cmp	r3, r7
 800e2fe:	f6ff aee0 	blt.w	800e0c2 <__gethex+0x1be>
 800e302:	2501      	movs	r5, #1
 800e304:	e7c2      	b.n	800e28c <__gethex+0x388>
 800e306:	f016 061f 	ands.w	r6, r6, #31
 800e30a:	d0fa      	beq.n	800e302 <__gethex+0x3fe>
 800e30c:	4453      	add	r3, sl
 800e30e:	f1c6 0620 	rsb	r6, r6, #32
 800e312:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e316:	f000 f9cb 	bl	800e6b0 <__hi0bits>
 800e31a:	42b0      	cmp	r0, r6
 800e31c:	dbe7      	blt.n	800e2ee <__gethex+0x3ea>
 800e31e:	e7f0      	b.n	800e302 <__gethex+0x3fe>
 800e320:	080103e1 	.word	0x080103e1

0800e324 <L_shift>:
 800e324:	f1c2 0208 	rsb	r2, r2, #8
 800e328:	0092      	lsls	r2, r2, #2
 800e32a:	b570      	push	{r4, r5, r6, lr}
 800e32c:	f1c2 0620 	rsb	r6, r2, #32
 800e330:	6843      	ldr	r3, [r0, #4]
 800e332:	6804      	ldr	r4, [r0, #0]
 800e334:	fa03 f506 	lsl.w	r5, r3, r6
 800e338:	432c      	orrs	r4, r5
 800e33a:	40d3      	lsrs	r3, r2
 800e33c:	6004      	str	r4, [r0, #0]
 800e33e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e342:	4288      	cmp	r0, r1
 800e344:	d3f4      	bcc.n	800e330 <L_shift+0xc>
 800e346:	bd70      	pop	{r4, r5, r6, pc}

0800e348 <__match>:
 800e348:	b530      	push	{r4, r5, lr}
 800e34a:	6803      	ldr	r3, [r0, #0]
 800e34c:	3301      	adds	r3, #1
 800e34e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e352:	b914      	cbnz	r4, 800e35a <__match+0x12>
 800e354:	6003      	str	r3, [r0, #0]
 800e356:	2001      	movs	r0, #1
 800e358:	bd30      	pop	{r4, r5, pc}
 800e35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e35e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e362:	2d19      	cmp	r5, #25
 800e364:	bf98      	it	ls
 800e366:	3220      	addls	r2, #32
 800e368:	42a2      	cmp	r2, r4
 800e36a:	d0f0      	beq.n	800e34e <__match+0x6>
 800e36c:	2000      	movs	r0, #0
 800e36e:	e7f3      	b.n	800e358 <__match+0x10>

0800e370 <__hexnan>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	680b      	ldr	r3, [r1, #0]
 800e376:	6801      	ldr	r1, [r0, #0]
 800e378:	115e      	asrs	r6, r3, #5
 800e37a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e37e:	f013 031f 	ands.w	r3, r3, #31
 800e382:	b087      	sub	sp, #28
 800e384:	bf18      	it	ne
 800e386:	3604      	addne	r6, #4
 800e388:	2500      	movs	r5, #0
 800e38a:	1f37      	subs	r7, r6, #4
 800e38c:	4682      	mov	sl, r0
 800e38e:	4690      	mov	r8, r2
 800e390:	9301      	str	r3, [sp, #4]
 800e392:	f846 5c04 	str.w	r5, [r6, #-4]
 800e396:	46b9      	mov	r9, r7
 800e398:	463c      	mov	r4, r7
 800e39a:	9502      	str	r5, [sp, #8]
 800e39c:	46ab      	mov	fp, r5
 800e39e:	784a      	ldrb	r2, [r1, #1]
 800e3a0:	1c4b      	adds	r3, r1, #1
 800e3a2:	9303      	str	r3, [sp, #12]
 800e3a4:	b342      	cbz	r2, 800e3f8 <__hexnan+0x88>
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	9105      	str	r1, [sp, #20]
 800e3aa:	9204      	str	r2, [sp, #16]
 800e3ac:	f7ff fd94 	bl	800ded8 <__hexdig_fun>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d151      	bne.n	800e458 <__hexnan+0xe8>
 800e3b4:	9a04      	ldr	r2, [sp, #16]
 800e3b6:	9905      	ldr	r1, [sp, #20]
 800e3b8:	2a20      	cmp	r2, #32
 800e3ba:	d818      	bhi.n	800e3ee <__hexnan+0x7e>
 800e3bc:	9b02      	ldr	r3, [sp, #8]
 800e3be:	459b      	cmp	fp, r3
 800e3c0:	dd13      	ble.n	800e3ea <__hexnan+0x7a>
 800e3c2:	454c      	cmp	r4, r9
 800e3c4:	d206      	bcs.n	800e3d4 <__hexnan+0x64>
 800e3c6:	2d07      	cmp	r5, #7
 800e3c8:	dc04      	bgt.n	800e3d4 <__hexnan+0x64>
 800e3ca:	462a      	mov	r2, r5
 800e3cc:	4649      	mov	r1, r9
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f7ff ffa8 	bl	800e324 <L_shift>
 800e3d4:	4544      	cmp	r4, r8
 800e3d6:	d952      	bls.n	800e47e <__hexnan+0x10e>
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f1a4 0904 	sub.w	r9, r4, #4
 800e3de:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3e2:	f8cd b008 	str.w	fp, [sp, #8]
 800e3e6:	464c      	mov	r4, r9
 800e3e8:	461d      	mov	r5, r3
 800e3ea:	9903      	ldr	r1, [sp, #12]
 800e3ec:	e7d7      	b.n	800e39e <__hexnan+0x2e>
 800e3ee:	2a29      	cmp	r2, #41	@ 0x29
 800e3f0:	d157      	bne.n	800e4a2 <__hexnan+0x132>
 800e3f2:	3102      	adds	r1, #2
 800e3f4:	f8ca 1000 	str.w	r1, [sl]
 800e3f8:	f1bb 0f00 	cmp.w	fp, #0
 800e3fc:	d051      	beq.n	800e4a2 <__hexnan+0x132>
 800e3fe:	454c      	cmp	r4, r9
 800e400:	d206      	bcs.n	800e410 <__hexnan+0xa0>
 800e402:	2d07      	cmp	r5, #7
 800e404:	dc04      	bgt.n	800e410 <__hexnan+0xa0>
 800e406:	462a      	mov	r2, r5
 800e408:	4649      	mov	r1, r9
 800e40a:	4620      	mov	r0, r4
 800e40c:	f7ff ff8a 	bl	800e324 <L_shift>
 800e410:	4544      	cmp	r4, r8
 800e412:	d936      	bls.n	800e482 <__hexnan+0x112>
 800e414:	f1a8 0204 	sub.w	r2, r8, #4
 800e418:	4623      	mov	r3, r4
 800e41a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e41e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e422:	429f      	cmp	r7, r3
 800e424:	d2f9      	bcs.n	800e41a <__hexnan+0xaa>
 800e426:	1b3b      	subs	r3, r7, r4
 800e428:	f023 0303 	bic.w	r3, r3, #3
 800e42c:	3304      	adds	r3, #4
 800e42e:	3401      	adds	r4, #1
 800e430:	3e03      	subs	r6, #3
 800e432:	42b4      	cmp	r4, r6
 800e434:	bf88      	it	hi
 800e436:	2304      	movhi	r3, #4
 800e438:	4443      	add	r3, r8
 800e43a:	2200      	movs	r2, #0
 800e43c:	f843 2b04 	str.w	r2, [r3], #4
 800e440:	429f      	cmp	r7, r3
 800e442:	d2fb      	bcs.n	800e43c <__hexnan+0xcc>
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	b91b      	cbnz	r3, 800e450 <__hexnan+0xe0>
 800e448:	4547      	cmp	r7, r8
 800e44a:	d128      	bne.n	800e49e <__hexnan+0x12e>
 800e44c:	2301      	movs	r3, #1
 800e44e:	603b      	str	r3, [r7, #0]
 800e450:	2005      	movs	r0, #5
 800e452:	b007      	add	sp, #28
 800e454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e458:	3501      	adds	r5, #1
 800e45a:	2d08      	cmp	r5, #8
 800e45c:	f10b 0b01 	add.w	fp, fp, #1
 800e460:	dd06      	ble.n	800e470 <__hexnan+0x100>
 800e462:	4544      	cmp	r4, r8
 800e464:	d9c1      	bls.n	800e3ea <__hexnan+0x7a>
 800e466:	2300      	movs	r3, #0
 800e468:	f844 3c04 	str.w	r3, [r4, #-4]
 800e46c:	2501      	movs	r5, #1
 800e46e:	3c04      	subs	r4, #4
 800e470:	6822      	ldr	r2, [r4, #0]
 800e472:	f000 000f 	and.w	r0, r0, #15
 800e476:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e47a:	6020      	str	r0, [r4, #0]
 800e47c:	e7b5      	b.n	800e3ea <__hexnan+0x7a>
 800e47e:	2508      	movs	r5, #8
 800e480:	e7b3      	b.n	800e3ea <__hexnan+0x7a>
 800e482:	9b01      	ldr	r3, [sp, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d0dd      	beq.n	800e444 <__hexnan+0xd4>
 800e488:	f1c3 0320 	rsb	r3, r3, #32
 800e48c:	f04f 32ff 	mov.w	r2, #4294967295
 800e490:	40da      	lsrs	r2, r3
 800e492:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e496:	4013      	ands	r3, r2
 800e498:	f846 3c04 	str.w	r3, [r6, #-4]
 800e49c:	e7d2      	b.n	800e444 <__hexnan+0xd4>
 800e49e:	3f04      	subs	r7, #4
 800e4a0:	e7d0      	b.n	800e444 <__hexnan+0xd4>
 800e4a2:	2004      	movs	r0, #4
 800e4a4:	e7d5      	b.n	800e452 <__hexnan+0xe2>

0800e4a6 <__ascii_mbtowc>:
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	b901      	cbnz	r1, 800e4ac <__ascii_mbtowc+0x6>
 800e4aa:	a901      	add	r1, sp, #4
 800e4ac:	b142      	cbz	r2, 800e4c0 <__ascii_mbtowc+0x1a>
 800e4ae:	b14b      	cbz	r3, 800e4c4 <__ascii_mbtowc+0x1e>
 800e4b0:	7813      	ldrb	r3, [r2, #0]
 800e4b2:	600b      	str	r3, [r1, #0]
 800e4b4:	7812      	ldrb	r2, [r2, #0]
 800e4b6:	1e10      	subs	r0, r2, #0
 800e4b8:	bf18      	it	ne
 800e4ba:	2001      	movne	r0, #1
 800e4bc:	b002      	add	sp, #8
 800e4be:	4770      	bx	lr
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	e7fb      	b.n	800e4bc <__ascii_mbtowc+0x16>
 800e4c4:	f06f 0001 	mvn.w	r0, #1
 800e4c8:	e7f8      	b.n	800e4bc <__ascii_mbtowc+0x16>
	...

0800e4cc <_Balloc>:
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	69c6      	ldr	r6, [r0, #28]
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	460d      	mov	r5, r1
 800e4d4:	b976      	cbnz	r6, 800e4f4 <_Balloc+0x28>
 800e4d6:	2010      	movs	r0, #16
 800e4d8:	f7fc fdf6 	bl	800b0c8 <malloc>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	61e0      	str	r0, [r4, #28]
 800e4e0:	b920      	cbnz	r0, 800e4ec <_Balloc+0x20>
 800e4e2:	4b18      	ldr	r3, [pc, #96]	@ (800e544 <_Balloc+0x78>)
 800e4e4:	4818      	ldr	r0, [pc, #96]	@ (800e548 <_Balloc+0x7c>)
 800e4e6:	216b      	movs	r1, #107	@ 0x6b
 800e4e8:	f001 fac6 	bl	800fa78 <__assert_func>
 800e4ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4f0:	6006      	str	r6, [r0, #0]
 800e4f2:	60c6      	str	r6, [r0, #12]
 800e4f4:	69e6      	ldr	r6, [r4, #28]
 800e4f6:	68f3      	ldr	r3, [r6, #12]
 800e4f8:	b183      	cbz	r3, 800e51c <_Balloc+0x50>
 800e4fa:	69e3      	ldr	r3, [r4, #28]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e502:	b9b8      	cbnz	r0, 800e534 <_Balloc+0x68>
 800e504:	2101      	movs	r1, #1
 800e506:	fa01 f605 	lsl.w	r6, r1, r5
 800e50a:	1d72      	adds	r2, r6, #5
 800e50c:	0092      	lsls	r2, r2, #2
 800e50e:	4620      	mov	r0, r4
 800e510:	f001 fad0 	bl	800fab4 <_calloc_r>
 800e514:	b160      	cbz	r0, 800e530 <_Balloc+0x64>
 800e516:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e51a:	e00e      	b.n	800e53a <_Balloc+0x6e>
 800e51c:	2221      	movs	r2, #33	@ 0x21
 800e51e:	2104      	movs	r1, #4
 800e520:	4620      	mov	r0, r4
 800e522:	f001 fac7 	bl	800fab4 <_calloc_r>
 800e526:	69e3      	ldr	r3, [r4, #28]
 800e528:	60f0      	str	r0, [r6, #12]
 800e52a:	68db      	ldr	r3, [r3, #12]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1e4      	bne.n	800e4fa <_Balloc+0x2e>
 800e530:	2000      	movs	r0, #0
 800e532:	bd70      	pop	{r4, r5, r6, pc}
 800e534:	6802      	ldr	r2, [r0, #0]
 800e536:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e53a:	2300      	movs	r3, #0
 800e53c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e540:	e7f7      	b.n	800e532 <_Balloc+0x66>
 800e542:	bf00      	nop
 800e544:	08010372 	.word	0x08010372
 800e548:	08010452 	.word	0x08010452

0800e54c <_Bfree>:
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	69c6      	ldr	r6, [r0, #28]
 800e550:	4605      	mov	r5, r0
 800e552:	460c      	mov	r4, r1
 800e554:	b976      	cbnz	r6, 800e574 <_Bfree+0x28>
 800e556:	2010      	movs	r0, #16
 800e558:	f7fc fdb6 	bl	800b0c8 <malloc>
 800e55c:	4602      	mov	r2, r0
 800e55e:	61e8      	str	r0, [r5, #28]
 800e560:	b920      	cbnz	r0, 800e56c <_Bfree+0x20>
 800e562:	4b09      	ldr	r3, [pc, #36]	@ (800e588 <_Bfree+0x3c>)
 800e564:	4809      	ldr	r0, [pc, #36]	@ (800e58c <_Bfree+0x40>)
 800e566:	218f      	movs	r1, #143	@ 0x8f
 800e568:	f001 fa86 	bl	800fa78 <__assert_func>
 800e56c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e570:	6006      	str	r6, [r0, #0]
 800e572:	60c6      	str	r6, [r0, #12]
 800e574:	b13c      	cbz	r4, 800e586 <_Bfree+0x3a>
 800e576:	69eb      	ldr	r3, [r5, #28]
 800e578:	6862      	ldr	r2, [r4, #4]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e580:	6021      	str	r1, [r4, #0]
 800e582:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e586:	bd70      	pop	{r4, r5, r6, pc}
 800e588:	08010372 	.word	0x08010372
 800e58c:	08010452 	.word	0x08010452

0800e590 <__multadd>:
 800e590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e594:	690d      	ldr	r5, [r1, #16]
 800e596:	4607      	mov	r7, r0
 800e598:	460c      	mov	r4, r1
 800e59a:	461e      	mov	r6, r3
 800e59c:	f101 0c14 	add.w	ip, r1, #20
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	f8dc 3000 	ldr.w	r3, [ip]
 800e5a6:	b299      	uxth	r1, r3
 800e5a8:	fb02 6101 	mla	r1, r2, r1, r6
 800e5ac:	0c1e      	lsrs	r6, r3, #16
 800e5ae:	0c0b      	lsrs	r3, r1, #16
 800e5b0:	fb02 3306 	mla	r3, r2, r6, r3
 800e5b4:	b289      	uxth	r1, r1
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5bc:	4285      	cmp	r5, r0
 800e5be:	f84c 1b04 	str.w	r1, [ip], #4
 800e5c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5c6:	dcec      	bgt.n	800e5a2 <__multadd+0x12>
 800e5c8:	b30e      	cbz	r6, 800e60e <__multadd+0x7e>
 800e5ca:	68a3      	ldr	r3, [r4, #8]
 800e5cc:	42ab      	cmp	r3, r5
 800e5ce:	dc19      	bgt.n	800e604 <__multadd+0x74>
 800e5d0:	6861      	ldr	r1, [r4, #4]
 800e5d2:	4638      	mov	r0, r7
 800e5d4:	3101      	adds	r1, #1
 800e5d6:	f7ff ff79 	bl	800e4cc <_Balloc>
 800e5da:	4680      	mov	r8, r0
 800e5dc:	b928      	cbnz	r0, 800e5ea <__multadd+0x5a>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	4b0c      	ldr	r3, [pc, #48]	@ (800e614 <__multadd+0x84>)
 800e5e2:	480d      	ldr	r0, [pc, #52]	@ (800e618 <__multadd+0x88>)
 800e5e4:	21ba      	movs	r1, #186	@ 0xba
 800e5e6:	f001 fa47 	bl	800fa78 <__assert_func>
 800e5ea:	6922      	ldr	r2, [r4, #16]
 800e5ec:	3202      	adds	r2, #2
 800e5ee:	f104 010c 	add.w	r1, r4, #12
 800e5f2:	0092      	lsls	r2, r2, #2
 800e5f4:	300c      	adds	r0, #12
 800e5f6:	f7fe fd5a 	bl	800d0ae <memcpy>
 800e5fa:	4621      	mov	r1, r4
 800e5fc:	4638      	mov	r0, r7
 800e5fe:	f7ff ffa5 	bl	800e54c <_Bfree>
 800e602:	4644      	mov	r4, r8
 800e604:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e608:	3501      	adds	r5, #1
 800e60a:	615e      	str	r6, [r3, #20]
 800e60c:	6125      	str	r5, [r4, #16]
 800e60e:	4620      	mov	r0, r4
 800e610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e614:	080103e1 	.word	0x080103e1
 800e618:	08010452 	.word	0x08010452

0800e61c <__s2b>:
 800e61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e620:	460c      	mov	r4, r1
 800e622:	4615      	mov	r5, r2
 800e624:	461f      	mov	r7, r3
 800e626:	2209      	movs	r2, #9
 800e628:	3308      	adds	r3, #8
 800e62a:	4606      	mov	r6, r0
 800e62c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e630:	2100      	movs	r1, #0
 800e632:	2201      	movs	r2, #1
 800e634:	429a      	cmp	r2, r3
 800e636:	db09      	blt.n	800e64c <__s2b+0x30>
 800e638:	4630      	mov	r0, r6
 800e63a:	f7ff ff47 	bl	800e4cc <_Balloc>
 800e63e:	b940      	cbnz	r0, 800e652 <__s2b+0x36>
 800e640:	4602      	mov	r2, r0
 800e642:	4b19      	ldr	r3, [pc, #100]	@ (800e6a8 <__s2b+0x8c>)
 800e644:	4819      	ldr	r0, [pc, #100]	@ (800e6ac <__s2b+0x90>)
 800e646:	21d3      	movs	r1, #211	@ 0xd3
 800e648:	f001 fa16 	bl	800fa78 <__assert_func>
 800e64c:	0052      	lsls	r2, r2, #1
 800e64e:	3101      	adds	r1, #1
 800e650:	e7f0      	b.n	800e634 <__s2b+0x18>
 800e652:	9b08      	ldr	r3, [sp, #32]
 800e654:	6143      	str	r3, [r0, #20]
 800e656:	2d09      	cmp	r5, #9
 800e658:	f04f 0301 	mov.w	r3, #1
 800e65c:	6103      	str	r3, [r0, #16]
 800e65e:	dd16      	ble.n	800e68e <__s2b+0x72>
 800e660:	f104 0909 	add.w	r9, r4, #9
 800e664:	46c8      	mov	r8, r9
 800e666:	442c      	add	r4, r5
 800e668:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e66c:	4601      	mov	r1, r0
 800e66e:	3b30      	subs	r3, #48	@ 0x30
 800e670:	220a      	movs	r2, #10
 800e672:	4630      	mov	r0, r6
 800e674:	f7ff ff8c 	bl	800e590 <__multadd>
 800e678:	45a0      	cmp	r8, r4
 800e67a:	d1f5      	bne.n	800e668 <__s2b+0x4c>
 800e67c:	f1a5 0408 	sub.w	r4, r5, #8
 800e680:	444c      	add	r4, r9
 800e682:	1b2d      	subs	r5, r5, r4
 800e684:	1963      	adds	r3, r4, r5
 800e686:	42bb      	cmp	r3, r7
 800e688:	db04      	blt.n	800e694 <__s2b+0x78>
 800e68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68e:	340a      	adds	r4, #10
 800e690:	2509      	movs	r5, #9
 800e692:	e7f6      	b.n	800e682 <__s2b+0x66>
 800e694:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e698:	4601      	mov	r1, r0
 800e69a:	3b30      	subs	r3, #48	@ 0x30
 800e69c:	220a      	movs	r2, #10
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f7ff ff76 	bl	800e590 <__multadd>
 800e6a4:	e7ee      	b.n	800e684 <__s2b+0x68>
 800e6a6:	bf00      	nop
 800e6a8:	080103e1 	.word	0x080103e1
 800e6ac:	08010452 	.word	0x08010452

0800e6b0 <__hi0bits>:
 800e6b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	bf36      	itet	cc
 800e6b8:	0403      	lslcc	r3, r0, #16
 800e6ba:	2000      	movcs	r0, #0
 800e6bc:	2010      	movcc	r0, #16
 800e6be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e6c2:	bf3c      	itt	cc
 800e6c4:	021b      	lslcc	r3, r3, #8
 800e6c6:	3008      	addcc	r0, #8
 800e6c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e6cc:	bf3c      	itt	cc
 800e6ce:	011b      	lslcc	r3, r3, #4
 800e6d0:	3004      	addcc	r0, #4
 800e6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6d6:	bf3c      	itt	cc
 800e6d8:	009b      	lslcc	r3, r3, #2
 800e6da:	3002      	addcc	r0, #2
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	db05      	blt.n	800e6ec <__hi0bits+0x3c>
 800e6e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e6e4:	f100 0001 	add.w	r0, r0, #1
 800e6e8:	bf08      	it	eq
 800e6ea:	2020      	moveq	r0, #32
 800e6ec:	4770      	bx	lr

0800e6ee <__lo0bits>:
 800e6ee:	6803      	ldr	r3, [r0, #0]
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	f013 0007 	ands.w	r0, r3, #7
 800e6f6:	d00b      	beq.n	800e710 <__lo0bits+0x22>
 800e6f8:	07d9      	lsls	r1, r3, #31
 800e6fa:	d421      	bmi.n	800e740 <__lo0bits+0x52>
 800e6fc:	0798      	lsls	r0, r3, #30
 800e6fe:	bf49      	itett	mi
 800e700:	085b      	lsrmi	r3, r3, #1
 800e702:	089b      	lsrpl	r3, r3, #2
 800e704:	2001      	movmi	r0, #1
 800e706:	6013      	strmi	r3, [r2, #0]
 800e708:	bf5c      	itt	pl
 800e70a:	6013      	strpl	r3, [r2, #0]
 800e70c:	2002      	movpl	r0, #2
 800e70e:	4770      	bx	lr
 800e710:	b299      	uxth	r1, r3
 800e712:	b909      	cbnz	r1, 800e718 <__lo0bits+0x2a>
 800e714:	0c1b      	lsrs	r3, r3, #16
 800e716:	2010      	movs	r0, #16
 800e718:	b2d9      	uxtb	r1, r3
 800e71a:	b909      	cbnz	r1, 800e720 <__lo0bits+0x32>
 800e71c:	3008      	adds	r0, #8
 800e71e:	0a1b      	lsrs	r3, r3, #8
 800e720:	0719      	lsls	r1, r3, #28
 800e722:	bf04      	itt	eq
 800e724:	091b      	lsreq	r3, r3, #4
 800e726:	3004      	addeq	r0, #4
 800e728:	0799      	lsls	r1, r3, #30
 800e72a:	bf04      	itt	eq
 800e72c:	089b      	lsreq	r3, r3, #2
 800e72e:	3002      	addeq	r0, #2
 800e730:	07d9      	lsls	r1, r3, #31
 800e732:	d403      	bmi.n	800e73c <__lo0bits+0x4e>
 800e734:	085b      	lsrs	r3, r3, #1
 800e736:	f100 0001 	add.w	r0, r0, #1
 800e73a:	d003      	beq.n	800e744 <__lo0bits+0x56>
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	4770      	bx	lr
 800e740:	2000      	movs	r0, #0
 800e742:	4770      	bx	lr
 800e744:	2020      	movs	r0, #32
 800e746:	4770      	bx	lr

0800e748 <__i2b>:
 800e748:	b510      	push	{r4, lr}
 800e74a:	460c      	mov	r4, r1
 800e74c:	2101      	movs	r1, #1
 800e74e:	f7ff febd 	bl	800e4cc <_Balloc>
 800e752:	4602      	mov	r2, r0
 800e754:	b928      	cbnz	r0, 800e762 <__i2b+0x1a>
 800e756:	4b05      	ldr	r3, [pc, #20]	@ (800e76c <__i2b+0x24>)
 800e758:	4805      	ldr	r0, [pc, #20]	@ (800e770 <__i2b+0x28>)
 800e75a:	f240 1145 	movw	r1, #325	@ 0x145
 800e75e:	f001 f98b 	bl	800fa78 <__assert_func>
 800e762:	2301      	movs	r3, #1
 800e764:	6144      	str	r4, [r0, #20]
 800e766:	6103      	str	r3, [r0, #16]
 800e768:	bd10      	pop	{r4, pc}
 800e76a:	bf00      	nop
 800e76c:	080103e1 	.word	0x080103e1
 800e770:	08010452 	.word	0x08010452

0800e774 <__multiply>:
 800e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	4617      	mov	r7, r2
 800e77a:	690a      	ldr	r2, [r1, #16]
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	429a      	cmp	r2, r3
 800e780:	bfa8      	it	ge
 800e782:	463b      	movge	r3, r7
 800e784:	4689      	mov	r9, r1
 800e786:	bfa4      	itt	ge
 800e788:	460f      	movge	r7, r1
 800e78a:	4699      	movge	r9, r3
 800e78c:	693d      	ldr	r5, [r7, #16]
 800e78e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	6879      	ldr	r1, [r7, #4]
 800e796:	eb05 060a 	add.w	r6, r5, sl
 800e79a:	42b3      	cmp	r3, r6
 800e79c:	b085      	sub	sp, #20
 800e79e:	bfb8      	it	lt
 800e7a0:	3101      	addlt	r1, #1
 800e7a2:	f7ff fe93 	bl	800e4cc <_Balloc>
 800e7a6:	b930      	cbnz	r0, 800e7b6 <__multiply+0x42>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	4b41      	ldr	r3, [pc, #260]	@ (800e8b0 <__multiply+0x13c>)
 800e7ac:	4841      	ldr	r0, [pc, #260]	@ (800e8b4 <__multiply+0x140>)
 800e7ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e7b2:	f001 f961 	bl	800fa78 <__assert_func>
 800e7b6:	f100 0414 	add.w	r4, r0, #20
 800e7ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e7be:	4623      	mov	r3, r4
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	4573      	cmp	r3, lr
 800e7c4:	d320      	bcc.n	800e808 <__multiply+0x94>
 800e7c6:	f107 0814 	add.w	r8, r7, #20
 800e7ca:	f109 0114 	add.w	r1, r9, #20
 800e7ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e7d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e7d6:	9302      	str	r3, [sp, #8]
 800e7d8:	1beb      	subs	r3, r5, r7
 800e7da:	3b15      	subs	r3, #21
 800e7dc:	f023 0303 	bic.w	r3, r3, #3
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	3715      	adds	r7, #21
 800e7e4:	42bd      	cmp	r5, r7
 800e7e6:	bf38      	it	cc
 800e7e8:	2304      	movcc	r3, #4
 800e7ea:	9301      	str	r3, [sp, #4]
 800e7ec:	9b02      	ldr	r3, [sp, #8]
 800e7ee:	9103      	str	r1, [sp, #12]
 800e7f0:	428b      	cmp	r3, r1
 800e7f2:	d80c      	bhi.n	800e80e <__multiply+0x9a>
 800e7f4:	2e00      	cmp	r6, #0
 800e7f6:	dd03      	ble.n	800e800 <__multiply+0x8c>
 800e7f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d055      	beq.n	800e8ac <__multiply+0x138>
 800e800:	6106      	str	r6, [r0, #16]
 800e802:	b005      	add	sp, #20
 800e804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e808:	f843 2b04 	str.w	r2, [r3], #4
 800e80c:	e7d9      	b.n	800e7c2 <__multiply+0x4e>
 800e80e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e812:	f1ba 0f00 	cmp.w	sl, #0
 800e816:	d01f      	beq.n	800e858 <__multiply+0xe4>
 800e818:	46c4      	mov	ip, r8
 800e81a:	46a1      	mov	r9, r4
 800e81c:	2700      	movs	r7, #0
 800e81e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e822:	f8d9 3000 	ldr.w	r3, [r9]
 800e826:	fa1f fb82 	uxth.w	fp, r2
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e830:	443b      	add	r3, r7
 800e832:	f8d9 7000 	ldr.w	r7, [r9]
 800e836:	0c12      	lsrs	r2, r2, #16
 800e838:	0c3f      	lsrs	r7, r7, #16
 800e83a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e83e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e842:	b29b      	uxth	r3, r3
 800e844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e848:	4565      	cmp	r5, ip
 800e84a:	f849 3b04 	str.w	r3, [r9], #4
 800e84e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e852:	d8e4      	bhi.n	800e81e <__multiply+0xaa>
 800e854:	9b01      	ldr	r3, [sp, #4]
 800e856:	50e7      	str	r7, [r4, r3]
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e85e:	3104      	adds	r1, #4
 800e860:	f1b9 0f00 	cmp.w	r9, #0
 800e864:	d020      	beq.n	800e8a8 <__multiply+0x134>
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	4647      	mov	r7, r8
 800e86a:	46a4      	mov	ip, r4
 800e86c:	f04f 0a00 	mov.w	sl, #0
 800e870:	f8b7 b000 	ldrh.w	fp, [r7]
 800e874:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e878:	fb09 220b 	mla	r2, r9, fp, r2
 800e87c:	4452      	add	r2, sl
 800e87e:	b29b      	uxth	r3, r3
 800e880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e884:	f84c 3b04 	str.w	r3, [ip], #4
 800e888:	f857 3b04 	ldr.w	r3, [r7], #4
 800e88c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e890:	f8bc 3000 	ldrh.w	r3, [ip]
 800e894:	fb09 330a 	mla	r3, r9, sl, r3
 800e898:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e89c:	42bd      	cmp	r5, r7
 800e89e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8a2:	d8e5      	bhi.n	800e870 <__multiply+0xfc>
 800e8a4:	9a01      	ldr	r2, [sp, #4]
 800e8a6:	50a3      	str	r3, [r4, r2]
 800e8a8:	3404      	adds	r4, #4
 800e8aa:	e79f      	b.n	800e7ec <__multiply+0x78>
 800e8ac:	3e01      	subs	r6, #1
 800e8ae:	e7a1      	b.n	800e7f4 <__multiply+0x80>
 800e8b0:	080103e1 	.word	0x080103e1
 800e8b4:	08010452 	.word	0x08010452

0800e8b8 <__pow5mult>:
 800e8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8bc:	4615      	mov	r5, r2
 800e8be:	f012 0203 	ands.w	r2, r2, #3
 800e8c2:	4607      	mov	r7, r0
 800e8c4:	460e      	mov	r6, r1
 800e8c6:	d007      	beq.n	800e8d8 <__pow5mult+0x20>
 800e8c8:	4c25      	ldr	r4, [pc, #148]	@ (800e960 <__pow5mult+0xa8>)
 800e8ca:	3a01      	subs	r2, #1
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8d2:	f7ff fe5d 	bl	800e590 <__multadd>
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	10ad      	asrs	r5, r5, #2
 800e8da:	d03d      	beq.n	800e958 <__pow5mult+0xa0>
 800e8dc:	69fc      	ldr	r4, [r7, #28]
 800e8de:	b97c      	cbnz	r4, 800e900 <__pow5mult+0x48>
 800e8e0:	2010      	movs	r0, #16
 800e8e2:	f7fc fbf1 	bl	800b0c8 <malloc>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	61f8      	str	r0, [r7, #28]
 800e8ea:	b928      	cbnz	r0, 800e8f8 <__pow5mult+0x40>
 800e8ec:	4b1d      	ldr	r3, [pc, #116]	@ (800e964 <__pow5mult+0xac>)
 800e8ee:	481e      	ldr	r0, [pc, #120]	@ (800e968 <__pow5mult+0xb0>)
 800e8f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e8f4:	f001 f8c0 	bl	800fa78 <__assert_func>
 800e8f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8fc:	6004      	str	r4, [r0, #0]
 800e8fe:	60c4      	str	r4, [r0, #12]
 800e900:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e908:	b94c      	cbnz	r4, 800e91e <__pow5mult+0x66>
 800e90a:	f240 2171 	movw	r1, #625	@ 0x271
 800e90e:	4638      	mov	r0, r7
 800e910:	f7ff ff1a 	bl	800e748 <__i2b>
 800e914:	2300      	movs	r3, #0
 800e916:	f8c8 0008 	str.w	r0, [r8, #8]
 800e91a:	4604      	mov	r4, r0
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	f04f 0900 	mov.w	r9, #0
 800e922:	07eb      	lsls	r3, r5, #31
 800e924:	d50a      	bpl.n	800e93c <__pow5mult+0x84>
 800e926:	4631      	mov	r1, r6
 800e928:	4622      	mov	r2, r4
 800e92a:	4638      	mov	r0, r7
 800e92c:	f7ff ff22 	bl	800e774 <__multiply>
 800e930:	4631      	mov	r1, r6
 800e932:	4680      	mov	r8, r0
 800e934:	4638      	mov	r0, r7
 800e936:	f7ff fe09 	bl	800e54c <_Bfree>
 800e93a:	4646      	mov	r6, r8
 800e93c:	106d      	asrs	r5, r5, #1
 800e93e:	d00b      	beq.n	800e958 <__pow5mult+0xa0>
 800e940:	6820      	ldr	r0, [r4, #0]
 800e942:	b938      	cbnz	r0, 800e954 <__pow5mult+0x9c>
 800e944:	4622      	mov	r2, r4
 800e946:	4621      	mov	r1, r4
 800e948:	4638      	mov	r0, r7
 800e94a:	f7ff ff13 	bl	800e774 <__multiply>
 800e94e:	6020      	str	r0, [r4, #0]
 800e950:	f8c0 9000 	str.w	r9, [r0]
 800e954:	4604      	mov	r4, r0
 800e956:	e7e4      	b.n	800e922 <__pow5mult+0x6a>
 800e958:	4630      	mov	r0, r6
 800e95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e95e:	bf00      	nop
 800e960:	0801066c 	.word	0x0801066c
 800e964:	08010372 	.word	0x08010372
 800e968:	08010452 	.word	0x08010452

0800e96c <__lshift>:
 800e96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e970:	460c      	mov	r4, r1
 800e972:	6849      	ldr	r1, [r1, #4]
 800e974:	6923      	ldr	r3, [r4, #16]
 800e976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e97a:	68a3      	ldr	r3, [r4, #8]
 800e97c:	4607      	mov	r7, r0
 800e97e:	4691      	mov	r9, r2
 800e980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e984:	f108 0601 	add.w	r6, r8, #1
 800e988:	42b3      	cmp	r3, r6
 800e98a:	db0b      	blt.n	800e9a4 <__lshift+0x38>
 800e98c:	4638      	mov	r0, r7
 800e98e:	f7ff fd9d 	bl	800e4cc <_Balloc>
 800e992:	4605      	mov	r5, r0
 800e994:	b948      	cbnz	r0, 800e9aa <__lshift+0x3e>
 800e996:	4602      	mov	r2, r0
 800e998:	4b28      	ldr	r3, [pc, #160]	@ (800ea3c <__lshift+0xd0>)
 800e99a:	4829      	ldr	r0, [pc, #164]	@ (800ea40 <__lshift+0xd4>)
 800e99c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e9a0:	f001 f86a 	bl	800fa78 <__assert_func>
 800e9a4:	3101      	adds	r1, #1
 800e9a6:	005b      	lsls	r3, r3, #1
 800e9a8:	e7ee      	b.n	800e988 <__lshift+0x1c>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f100 0114 	add.w	r1, r0, #20
 800e9b0:	f100 0210 	add.w	r2, r0, #16
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	4553      	cmp	r3, sl
 800e9b8:	db33      	blt.n	800ea22 <__lshift+0xb6>
 800e9ba:	6920      	ldr	r0, [r4, #16]
 800e9bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9c0:	f104 0314 	add.w	r3, r4, #20
 800e9c4:	f019 091f 	ands.w	r9, r9, #31
 800e9c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e9d0:	d02b      	beq.n	800ea2a <__lshift+0xbe>
 800e9d2:	f1c9 0e20 	rsb	lr, r9, #32
 800e9d6:	468a      	mov	sl, r1
 800e9d8:	2200      	movs	r2, #0
 800e9da:	6818      	ldr	r0, [r3, #0]
 800e9dc:	fa00 f009 	lsl.w	r0, r0, r9
 800e9e0:	4310      	orrs	r0, r2
 800e9e2:	f84a 0b04 	str.w	r0, [sl], #4
 800e9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ea:	459c      	cmp	ip, r3
 800e9ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800e9f0:	d8f3      	bhi.n	800e9da <__lshift+0x6e>
 800e9f2:	ebac 0304 	sub.w	r3, ip, r4
 800e9f6:	3b15      	subs	r3, #21
 800e9f8:	f023 0303 	bic.w	r3, r3, #3
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	f104 0015 	add.w	r0, r4, #21
 800ea02:	4560      	cmp	r0, ip
 800ea04:	bf88      	it	hi
 800ea06:	2304      	movhi	r3, #4
 800ea08:	50ca      	str	r2, [r1, r3]
 800ea0a:	b10a      	cbz	r2, 800ea10 <__lshift+0xa4>
 800ea0c:	f108 0602 	add.w	r6, r8, #2
 800ea10:	3e01      	subs	r6, #1
 800ea12:	4638      	mov	r0, r7
 800ea14:	612e      	str	r6, [r5, #16]
 800ea16:	4621      	mov	r1, r4
 800ea18:	f7ff fd98 	bl	800e54c <_Bfree>
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea22:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea26:	3301      	adds	r3, #1
 800ea28:	e7c5      	b.n	800e9b6 <__lshift+0x4a>
 800ea2a:	3904      	subs	r1, #4
 800ea2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea30:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea34:	459c      	cmp	ip, r3
 800ea36:	d8f9      	bhi.n	800ea2c <__lshift+0xc0>
 800ea38:	e7ea      	b.n	800ea10 <__lshift+0xa4>
 800ea3a:	bf00      	nop
 800ea3c:	080103e1 	.word	0x080103e1
 800ea40:	08010452 	.word	0x08010452

0800ea44 <__mcmp>:
 800ea44:	690a      	ldr	r2, [r1, #16]
 800ea46:	4603      	mov	r3, r0
 800ea48:	6900      	ldr	r0, [r0, #16]
 800ea4a:	1a80      	subs	r0, r0, r2
 800ea4c:	b530      	push	{r4, r5, lr}
 800ea4e:	d10e      	bne.n	800ea6e <__mcmp+0x2a>
 800ea50:	3314      	adds	r3, #20
 800ea52:	3114      	adds	r1, #20
 800ea54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ea58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ea5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea64:	4295      	cmp	r5, r2
 800ea66:	d003      	beq.n	800ea70 <__mcmp+0x2c>
 800ea68:	d205      	bcs.n	800ea76 <__mcmp+0x32>
 800ea6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea6e:	bd30      	pop	{r4, r5, pc}
 800ea70:	42a3      	cmp	r3, r4
 800ea72:	d3f3      	bcc.n	800ea5c <__mcmp+0x18>
 800ea74:	e7fb      	b.n	800ea6e <__mcmp+0x2a>
 800ea76:	2001      	movs	r0, #1
 800ea78:	e7f9      	b.n	800ea6e <__mcmp+0x2a>
	...

0800ea7c <__mdiff>:
 800ea7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea80:	4689      	mov	r9, r1
 800ea82:	4606      	mov	r6, r0
 800ea84:	4611      	mov	r1, r2
 800ea86:	4648      	mov	r0, r9
 800ea88:	4614      	mov	r4, r2
 800ea8a:	f7ff ffdb 	bl	800ea44 <__mcmp>
 800ea8e:	1e05      	subs	r5, r0, #0
 800ea90:	d112      	bne.n	800eab8 <__mdiff+0x3c>
 800ea92:	4629      	mov	r1, r5
 800ea94:	4630      	mov	r0, r6
 800ea96:	f7ff fd19 	bl	800e4cc <_Balloc>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	b928      	cbnz	r0, 800eaaa <__mdiff+0x2e>
 800ea9e:	4b3f      	ldr	r3, [pc, #252]	@ (800eb9c <__mdiff+0x120>)
 800eaa0:	f240 2137 	movw	r1, #567	@ 0x237
 800eaa4:	483e      	ldr	r0, [pc, #248]	@ (800eba0 <__mdiff+0x124>)
 800eaa6:	f000 ffe7 	bl	800fa78 <__assert_func>
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eab0:	4610      	mov	r0, r2
 800eab2:	b003      	add	sp, #12
 800eab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab8:	bfbc      	itt	lt
 800eaba:	464b      	movlt	r3, r9
 800eabc:	46a1      	movlt	r9, r4
 800eabe:	4630      	mov	r0, r6
 800eac0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eac4:	bfba      	itte	lt
 800eac6:	461c      	movlt	r4, r3
 800eac8:	2501      	movlt	r5, #1
 800eaca:	2500      	movge	r5, #0
 800eacc:	f7ff fcfe 	bl	800e4cc <_Balloc>
 800ead0:	4602      	mov	r2, r0
 800ead2:	b918      	cbnz	r0, 800eadc <__mdiff+0x60>
 800ead4:	4b31      	ldr	r3, [pc, #196]	@ (800eb9c <__mdiff+0x120>)
 800ead6:	f240 2145 	movw	r1, #581	@ 0x245
 800eada:	e7e3      	b.n	800eaa4 <__mdiff+0x28>
 800eadc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eae0:	6926      	ldr	r6, [r4, #16]
 800eae2:	60c5      	str	r5, [r0, #12]
 800eae4:	f109 0310 	add.w	r3, r9, #16
 800eae8:	f109 0514 	add.w	r5, r9, #20
 800eaec:	f104 0e14 	add.w	lr, r4, #20
 800eaf0:	f100 0b14 	add.w	fp, r0, #20
 800eaf4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eaf8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eafc:	9301      	str	r3, [sp, #4]
 800eafe:	46d9      	mov	r9, fp
 800eb00:	f04f 0c00 	mov.w	ip, #0
 800eb04:	9b01      	ldr	r3, [sp, #4]
 800eb06:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eb0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eb0e:	9301      	str	r3, [sp, #4]
 800eb10:	fa1f f38a 	uxth.w	r3, sl
 800eb14:	4619      	mov	r1, r3
 800eb16:	b283      	uxth	r3, r0
 800eb18:	1acb      	subs	r3, r1, r3
 800eb1a:	0c00      	lsrs	r0, r0, #16
 800eb1c:	4463      	add	r3, ip
 800eb1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eb22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eb2c:	4576      	cmp	r6, lr
 800eb2e:	f849 3b04 	str.w	r3, [r9], #4
 800eb32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb36:	d8e5      	bhi.n	800eb04 <__mdiff+0x88>
 800eb38:	1b33      	subs	r3, r6, r4
 800eb3a:	3b15      	subs	r3, #21
 800eb3c:	f023 0303 	bic.w	r3, r3, #3
 800eb40:	3415      	adds	r4, #21
 800eb42:	3304      	adds	r3, #4
 800eb44:	42a6      	cmp	r6, r4
 800eb46:	bf38      	it	cc
 800eb48:	2304      	movcc	r3, #4
 800eb4a:	441d      	add	r5, r3
 800eb4c:	445b      	add	r3, fp
 800eb4e:	461e      	mov	r6, r3
 800eb50:	462c      	mov	r4, r5
 800eb52:	4544      	cmp	r4, r8
 800eb54:	d30e      	bcc.n	800eb74 <__mdiff+0xf8>
 800eb56:	f108 0103 	add.w	r1, r8, #3
 800eb5a:	1b49      	subs	r1, r1, r5
 800eb5c:	f021 0103 	bic.w	r1, r1, #3
 800eb60:	3d03      	subs	r5, #3
 800eb62:	45a8      	cmp	r8, r5
 800eb64:	bf38      	it	cc
 800eb66:	2100      	movcc	r1, #0
 800eb68:	440b      	add	r3, r1
 800eb6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb6e:	b191      	cbz	r1, 800eb96 <__mdiff+0x11a>
 800eb70:	6117      	str	r7, [r2, #16]
 800eb72:	e79d      	b.n	800eab0 <__mdiff+0x34>
 800eb74:	f854 1b04 	ldr.w	r1, [r4], #4
 800eb78:	46e6      	mov	lr, ip
 800eb7a:	0c08      	lsrs	r0, r1, #16
 800eb7c:	fa1c fc81 	uxtah	ip, ip, r1
 800eb80:	4471      	add	r1, lr
 800eb82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eb86:	b289      	uxth	r1, r1
 800eb88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb8c:	f846 1b04 	str.w	r1, [r6], #4
 800eb90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb94:	e7dd      	b.n	800eb52 <__mdiff+0xd6>
 800eb96:	3f01      	subs	r7, #1
 800eb98:	e7e7      	b.n	800eb6a <__mdiff+0xee>
 800eb9a:	bf00      	nop
 800eb9c:	080103e1 	.word	0x080103e1
 800eba0:	08010452 	.word	0x08010452

0800eba4 <__ulp>:
 800eba4:	b082      	sub	sp, #8
 800eba6:	ed8d 0b00 	vstr	d0, [sp]
 800ebaa:	9a01      	ldr	r2, [sp, #4]
 800ebac:	4b0f      	ldr	r3, [pc, #60]	@ (800ebec <__ulp+0x48>)
 800ebae:	4013      	ands	r3, r2
 800ebb0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	dc08      	bgt.n	800ebca <__ulp+0x26>
 800ebb8:	425b      	negs	r3, r3
 800ebba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ebbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ebc2:	da04      	bge.n	800ebce <__ulp+0x2a>
 800ebc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ebc8:	4113      	asrs	r3, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	e008      	b.n	800ebe0 <__ulp+0x3c>
 800ebce:	f1a2 0314 	sub.w	r3, r2, #20
 800ebd2:	2b1e      	cmp	r3, #30
 800ebd4:	bfda      	itte	le
 800ebd6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ebda:	40da      	lsrle	r2, r3
 800ebdc:	2201      	movgt	r2, #1
 800ebde:	2300      	movs	r3, #0
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	ec41 0b10 	vmov	d0, r0, r1
 800ebe8:	b002      	add	sp, #8
 800ebea:	4770      	bx	lr
 800ebec:	7ff00000 	.word	0x7ff00000

0800ebf0 <__b2d>:
 800ebf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf4:	6906      	ldr	r6, [r0, #16]
 800ebf6:	f100 0814 	add.w	r8, r0, #20
 800ebfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ebfe:	1f37      	subs	r7, r6, #4
 800ec00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec04:	4610      	mov	r0, r2
 800ec06:	f7ff fd53 	bl	800e6b0 <__hi0bits>
 800ec0a:	f1c0 0320 	rsb	r3, r0, #32
 800ec0e:	280a      	cmp	r0, #10
 800ec10:	600b      	str	r3, [r1, #0]
 800ec12:	491b      	ldr	r1, [pc, #108]	@ (800ec80 <__b2d+0x90>)
 800ec14:	dc15      	bgt.n	800ec42 <__b2d+0x52>
 800ec16:	f1c0 0c0b 	rsb	ip, r0, #11
 800ec1a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ec1e:	45b8      	cmp	r8, r7
 800ec20:	ea43 0501 	orr.w	r5, r3, r1
 800ec24:	bf34      	ite	cc
 800ec26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec2a:	2300      	movcs	r3, #0
 800ec2c:	3015      	adds	r0, #21
 800ec2e:	fa02 f000 	lsl.w	r0, r2, r0
 800ec32:	fa23 f30c 	lsr.w	r3, r3, ip
 800ec36:	4303      	orrs	r3, r0
 800ec38:	461c      	mov	r4, r3
 800ec3a:	ec45 4b10 	vmov	d0, r4, r5
 800ec3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec42:	45b8      	cmp	r8, r7
 800ec44:	bf3a      	itte	cc
 800ec46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec4a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ec4e:	2300      	movcs	r3, #0
 800ec50:	380b      	subs	r0, #11
 800ec52:	d012      	beq.n	800ec7a <__b2d+0x8a>
 800ec54:	f1c0 0120 	rsb	r1, r0, #32
 800ec58:	fa23 f401 	lsr.w	r4, r3, r1
 800ec5c:	4082      	lsls	r2, r0
 800ec5e:	4322      	orrs	r2, r4
 800ec60:	4547      	cmp	r7, r8
 800ec62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ec66:	bf8c      	ite	hi
 800ec68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ec6c:	2200      	movls	r2, #0
 800ec6e:	4083      	lsls	r3, r0
 800ec70:	40ca      	lsrs	r2, r1
 800ec72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ec76:	4313      	orrs	r3, r2
 800ec78:	e7de      	b.n	800ec38 <__b2d+0x48>
 800ec7a:	ea42 0501 	orr.w	r5, r2, r1
 800ec7e:	e7db      	b.n	800ec38 <__b2d+0x48>
 800ec80:	3ff00000 	.word	0x3ff00000

0800ec84 <__d2b>:
 800ec84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec88:	460f      	mov	r7, r1
 800ec8a:	2101      	movs	r1, #1
 800ec8c:	ec59 8b10 	vmov	r8, r9, d0
 800ec90:	4616      	mov	r6, r2
 800ec92:	f7ff fc1b 	bl	800e4cc <_Balloc>
 800ec96:	4604      	mov	r4, r0
 800ec98:	b930      	cbnz	r0, 800eca8 <__d2b+0x24>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	4b23      	ldr	r3, [pc, #140]	@ (800ed2c <__d2b+0xa8>)
 800ec9e:	4824      	ldr	r0, [pc, #144]	@ (800ed30 <__d2b+0xac>)
 800eca0:	f240 310f 	movw	r1, #783	@ 0x30f
 800eca4:	f000 fee8 	bl	800fa78 <__assert_func>
 800eca8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ecac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ecb0:	b10d      	cbz	r5, 800ecb6 <__d2b+0x32>
 800ecb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ecb6:	9301      	str	r3, [sp, #4]
 800ecb8:	f1b8 0300 	subs.w	r3, r8, #0
 800ecbc:	d023      	beq.n	800ed06 <__d2b+0x82>
 800ecbe:	4668      	mov	r0, sp
 800ecc0:	9300      	str	r3, [sp, #0]
 800ecc2:	f7ff fd14 	bl	800e6ee <__lo0bits>
 800ecc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ecca:	b1d0      	cbz	r0, 800ed02 <__d2b+0x7e>
 800eccc:	f1c0 0320 	rsb	r3, r0, #32
 800ecd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd4:	430b      	orrs	r3, r1
 800ecd6:	40c2      	lsrs	r2, r0
 800ecd8:	6163      	str	r3, [r4, #20]
 800ecda:	9201      	str	r2, [sp, #4]
 800ecdc:	9b01      	ldr	r3, [sp, #4]
 800ecde:	61a3      	str	r3, [r4, #24]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	bf0c      	ite	eq
 800ece4:	2201      	moveq	r2, #1
 800ece6:	2202      	movne	r2, #2
 800ece8:	6122      	str	r2, [r4, #16]
 800ecea:	b1a5      	cbz	r5, 800ed16 <__d2b+0x92>
 800ecec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ecf0:	4405      	add	r5, r0
 800ecf2:	603d      	str	r5, [r7, #0]
 800ecf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ecf8:	6030      	str	r0, [r6, #0]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	b003      	add	sp, #12
 800ecfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed02:	6161      	str	r1, [r4, #20]
 800ed04:	e7ea      	b.n	800ecdc <__d2b+0x58>
 800ed06:	a801      	add	r0, sp, #4
 800ed08:	f7ff fcf1 	bl	800e6ee <__lo0bits>
 800ed0c:	9b01      	ldr	r3, [sp, #4]
 800ed0e:	6163      	str	r3, [r4, #20]
 800ed10:	3020      	adds	r0, #32
 800ed12:	2201      	movs	r2, #1
 800ed14:	e7e8      	b.n	800ece8 <__d2b+0x64>
 800ed16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ed1e:	6038      	str	r0, [r7, #0]
 800ed20:	6918      	ldr	r0, [r3, #16]
 800ed22:	f7ff fcc5 	bl	800e6b0 <__hi0bits>
 800ed26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed2a:	e7e5      	b.n	800ecf8 <__d2b+0x74>
 800ed2c:	080103e1 	.word	0x080103e1
 800ed30:	08010452 	.word	0x08010452

0800ed34 <__ratio>:
 800ed34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed38:	b085      	sub	sp, #20
 800ed3a:	e9cd 1000 	strd	r1, r0, [sp]
 800ed3e:	a902      	add	r1, sp, #8
 800ed40:	f7ff ff56 	bl	800ebf0 <__b2d>
 800ed44:	9800      	ldr	r0, [sp, #0]
 800ed46:	a903      	add	r1, sp, #12
 800ed48:	ec55 4b10 	vmov	r4, r5, d0
 800ed4c:	f7ff ff50 	bl	800ebf0 <__b2d>
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	6919      	ldr	r1, [r3, #16]
 800ed54:	9b00      	ldr	r3, [sp, #0]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	1ac9      	subs	r1, r1, r3
 800ed5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ed5e:	1a9b      	subs	r3, r3, r2
 800ed60:	ec5b ab10 	vmov	sl, fp, d0
 800ed64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	bfce      	itee	gt
 800ed6c:	462a      	movgt	r2, r5
 800ed6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed72:	465a      	movle	r2, fp
 800ed74:	462f      	mov	r7, r5
 800ed76:	46d9      	mov	r9, fp
 800ed78:	bfcc      	ite	gt
 800ed7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed7e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ed82:	464b      	mov	r3, r9
 800ed84:	4652      	mov	r2, sl
 800ed86:	4620      	mov	r0, r4
 800ed88:	4639      	mov	r1, r7
 800ed8a:	f7f1 fd5f 	bl	800084c <__aeabi_ddiv>
 800ed8e:	ec41 0b10 	vmov	d0, r0, r1
 800ed92:	b005      	add	sp, #20
 800ed94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed98 <__copybits>:
 800ed98:	3901      	subs	r1, #1
 800ed9a:	b570      	push	{r4, r5, r6, lr}
 800ed9c:	1149      	asrs	r1, r1, #5
 800ed9e:	6914      	ldr	r4, [r2, #16]
 800eda0:	3101      	adds	r1, #1
 800eda2:	f102 0314 	add.w	r3, r2, #20
 800eda6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800edaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800edae:	1f05      	subs	r5, r0, #4
 800edb0:	42a3      	cmp	r3, r4
 800edb2:	d30c      	bcc.n	800edce <__copybits+0x36>
 800edb4:	1aa3      	subs	r3, r4, r2
 800edb6:	3b11      	subs	r3, #17
 800edb8:	f023 0303 	bic.w	r3, r3, #3
 800edbc:	3211      	adds	r2, #17
 800edbe:	42a2      	cmp	r2, r4
 800edc0:	bf88      	it	hi
 800edc2:	2300      	movhi	r3, #0
 800edc4:	4418      	add	r0, r3
 800edc6:	2300      	movs	r3, #0
 800edc8:	4288      	cmp	r0, r1
 800edca:	d305      	bcc.n	800edd8 <__copybits+0x40>
 800edcc:	bd70      	pop	{r4, r5, r6, pc}
 800edce:	f853 6b04 	ldr.w	r6, [r3], #4
 800edd2:	f845 6f04 	str.w	r6, [r5, #4]!
 800edd6:	e7eb      	b.n	800edb0 <__copybits+0x18>
 800edd8:	f840 3b04 	str.w	r3, [r0], #4
 800eddc:	e7f4      	b.n	800edc8 <__copybits+0x30>

0800edde <__any_on>:
 800edde:	f100 0214 	add.w	r2, r0, #20
 800ede2:	6900      	ldr	r0, [r0, #16]
 800ede4:	114b      	asrs	r3, r1, #5
 800ede6:	4298      	cmp	r0, r3
 800ede8:	b510      	push	{r4, lr}
 800edea:	db11      	blt.n	800ee10 <__any_on+0x32>
 800edec:	dd0a      	ble.n	800ee04 <__any_on+0x26>
 800edee:	f011 011f 	ands.w	r1, r1, #31
 800edf2:	d007      	beq.n	800ee04 <__any_on+0x26>
 800edf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800edf8:	fa24 f001 	lsr.w	r0, r4, r1
 800edfc:	fa00 f101 	lsl.w	r1, r0, r1
 800ee00:	428c      	cmp	r4, r1
 800ee02:	d10b      	bne.n	800ee1c <__any_on+0x3e>
 800ee04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d803      	bhi.n	800ee14 <__any_on+0x36>
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	bd10      	pop	{r4, pc}
 800ee10:	4603      	mov	r3, r0
 800ee12:	e7f7      	b.n	800ee04 <__any_on+0x26>
 800ee14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee18:	2900      	cmp	r1, #0
 800ee1a:	d0f5      	beq.n	800ee08 <__any_on+0x2a>
 800ee1c:	2001      	movs	r0, #1
 800ee1e:	e7f6      	b.n	800ee0e <__any_on+0x30>

0800ee20 <_strtoul_l.isra.0>:
 800ee20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee24:	4e34      	ldr	r6, [pc, #208]	@ (800eef8 <_strtoul_l.isra.0+0xd8>)
 800ee26:	4686      	mov	lr, r0
 800ee28:	460d      	mov	r5, r1
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee30:	5d37      	ldrb	r7, [r6, r4]
 800ee32:	f017 0708 	ands.w	r7, r7, #8
 800ee36:	d1f8      	bne.n	800ee2a <_strtoul_l.isra.0+0xa>
 800ee38:	2c2d      	cmp	r4, #45	@ 0x2d
 800ee3a:	d110      	bne.n	800ee5e <_strtoul_l.isra.0+0x3e>
 800ee3c:	782c      	ldrb	r4, [r5, #0]
 800ee3e:	2701      	movs	r7, #1
 800ee40:	1c85      	adds	r5, r0, #2
 800ee42:	f033 0010 	bics.w	r0, r3, #16
 800ee46:	d115      	bne.n	800ee74 <_strtoul_l.isra.0+0x54>
 800ee48:	2c30      	cmp	r4, #48	@ 0x30
 800ee4a:	d10d      	bne.n	800ee68 <_strtoul_l.isra.0+0x48>
 800ee4c:	7828      	ldrb	r0, [r5, #0]
 800ee4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ee52:	2858      	cmp	r0, #88	@ 0x58
 800ee54:	d108      	bne.n	800ee68 <_strtoul_l.isra.0+0x48>
 800ee56:	786c      	ldrb	r4, [r5, #1]
 800ee58:	3502      	adds	r5, #2
 800ee5a:	2310      	movs	r3, #16
 800ee5c:	e00a      	b.n	800ee74 <_strtoul_l.isra.0+0x54>
 800ee5e:	2c2b      	cmp	r4, #43	@ 0x2b
 800ee60:	bf04      	itt	eq
 800ee62:	782c      	ldrbeq	r4, [r5, #0]
 800ee64:	1c85      	addeq	r5, r0, #2
 800ee66:	e7ec      	b.n	800ee42 <_strtoul_l.isra.0+0x22>
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1f6      	bne.n	800ee5a <_strtoul_l.isra.0+0x3a>
 800ee6c:	2c30      	cmp	r4, #48	@ 0x30
 800ee6e:	bf14      	ite	ne
 800ee70:	230a      	movne	r3, #10
 800ee72:	2308      	moveq	r3, #8
 800ee74:	f04f 38ff 	mov.w	r8, #4294967295
 800ee78:	2600      	movs	r6, #0
 800ee7a:	fbb8 f8f3 	udiv	r8, r8, r3
 800ee7e:	fb03 f908 	mul.w	r9, r3, r8
 800ee82:	ea6f 0909 	mvn.w	r9, r9
 800ee86:	4630      	mov	r0, r6
 800ee88:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ee8c:	f1bc 0f09 	cmp.w	ip, #9
 800ee90:	d810      	bhi.n	800eeb4 <_strtoul_l.isra.0+0x94>
 800ee92:	4664      	mov	r4, ip
 800ee94:	42a3      	cmp	r3, r4
 800ee96:	dd1e      	ble.n	800eed6 <_strtoul_l.isra.0+0xb6>
 800ee98:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ee9c:	d007      	beq.n	800eeae <_strtoul_l.isra.0+0x8e>
 800ee9e:	4580      	cmp	r8, r0
 800eea0:	d316      	bcc.n	800eed0 <_strtoul_l.isra.0+0xb0>
 800eea2:	d101      	bne.n	800eea8 <_strtoul_l.isra.0+0x88>
 800eea4:	45a1      	cmp	r9, r4
 800eea6:	db13      	blt.n	800eed0 <_strtoul_l.isra.0+0xb0>
 800eea8:	fb00 4003 	mla	r0, r0, r3, r4
 800eeac:	2601      	movs	r6, #1
 800eeae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eeb2:	e7e9      	b.n	800ee88 <_strtoul_l.isra.0+0x68>
 800eeb4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800eeb8:	f1bc 0f19 	cmp.w	ip, #25
 800eebc:	d801      	bhi.n	800eec2 <_strtoul_l.isra.0+0xa2>
 800eebe:	3c37      	subs	r4, #55	@ 0x37
 800eec0:	e7e8      	b.n	800ee94 <_strtoul_l.isra.0+0x74>
 800eec2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800eec6:	f1bc 0f19 	cmp.w	ip, #25
 800eeca:	d804      	bhi.n	800eed6 <_strtoul_l.isra.0+0xb6>
 800eecc:	3c57      	subs	r4, #87	@ 0x57
 800eece:	e7e1      	b.n	800ee94 <_strtoul_l.isra.0+0x74>
 800eed0:	f04f 36ff 	mov.w	r6, #4294967295
 800eed4:	e7eb      	b.n	800eeae <_strtoul_l.isra.0+0x8e>
 800eed6:	1c73      	adds	r3, r6, #1
 800eed8:	d106      	bne.n	800eee8 <_strtoul_l.isra.0+0xc8>
 800eeda:	2322      	movs	r3, #34	@ 0x22
 800eedc:	f8ce 3000 	str.w	r3, [lr]
 800eee0:	4630      	mov	r0, r6
 800eee2:	b932      	cbnz	r2, 800eef2 <_strtoul_l.isra.0+0xd2>
 800eee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eee8:	b107      	cbz	r7, 800eeec <_strtoul_l.isra.0+0xcc>
 800eeea:	4240      	negs	r0, r0
 800eeec:	2a00      	cmp	r2, #0
 800eeee:	d0f9      	beq.n	800eee4 <_strtoul_l.isra.0+0xc4>
 800eef0:	b106      	cbz	r6, 800eef4 <_strtoul_l.isra.0+0xd4>
 800eef2:	1e69      	subs	r1, r5, #1
 800eef4:	6011      	str	r1, [r2, #0]
 800eef6:	e7f5      	b.n	800eee4 <_strtoul_l.isra.0+0xc4>
 800eef8:	08010569 	.word	0x08010569

0800eefc <_strtoul_r>:
 800eefc:	f7ff bf90 	b.w	800ee20 <_strtoul_l.isra.0>

0800ef00 <__ascii_wctomb>:
 800ef00:	4603      	mov	r3, r0
 800ef02:	4608      	mov	r0, r1
 800ef04:	b141      	cbz	r1, 800ef18 <__ascii_wctomb+0x18>
 800ef06:	2aff      	cmp	r2, #255	@ 0xff
 800ef08:	d904      	bls.n	800ef14 <__ascii_wctomb+0x14>
 800ef0a:	228a      	movs	r2, #138	@ 0x8a
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef12:	4770      	bx	lr
 800ef14:	700a      	strb	r2, [r1, #0]
 800ef16:	2001      	movs	r0, #1
 800ef18:	4770      	bx	lr

0800ef1a <__ssputs_r>:
 800ef1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1e:	688e      	ldr	r6, [r1, #8]
 800ef20:	461f      	mov	r7, r3
 800ef22:	42be      	cmp	r6, r7
 800ef24:	680b      	ldr	r3, [r1, #0]
 800ef26:	4682      	mov	sl, r0
 800ef28:	460c      	mov	r4, r1
 800ef2a:	4690      	mov	r8, r2
 800ef2c:	d82d      	bhi.n	800ef8a <__ssputs_r+0x70>
 800ef2e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef32:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef36:	d026      	beq.n	800ef86 <__ssputs_r+0x6c>
 800ef38:	6965      	ldr	r5, [r4, #20]
 800ef3a:	6909      	ldr	r1, [r1, #16]
 800ef3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef40:	eba3 0901 	sub.w	r9, r3, r1
 800ef44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef48:	1c7b      	adds	r3, r7, #1
 800ef4a:	444b      	add	r3, r9
 800ef4c:	106d      	asrs	r5, r5, #1
 800ef4e:	429d      	cmp	r5, r3
 800ef50:	bf38      	it	cc
 800ef52:	461d      	movcc	r5, r3
 800ef54:	0553      	lsls	r3, r2, #21
 800ef56:	d527      	bpl.n	800efa8 <__ssputs_r+0x8e>
 800ef58:	4629      	mov	r1, r5
 800ef5a:	f7fc f8df 	bl	800b11c <_malloc_r>
 800ef5e:	4606      	mov	r6, r0
 800ef60:	b360      	cbz	r0, 800efbc <__ssputs_r+0xa2>
 800ef62:	6921      	ldr	r1, [r4, #16]
 800ef64:	464a      	mov	r2, r9
 800ef66:	f7fe f8a2 	bl	800d0ae <memcpy>
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef74:	81a3      	strh	r3, [r4, #12]
 800ef76:	6126      	str	r6, [r4, #16]
 800ef78:	6165      	str	r5, [r4, #20]
 800ef7a:	444e      	add	r6, r9
 800ef7c:	eba5 0509 	sub.w	r5, r5, r9
 800ef80:	6026      	str	r6, [r4, #0]
 800ef82:	60a5      	str	r5, [r4, #8]
 800ef84:	463e      	mov	r6, r7
 800ef86:	42be      	cmp	r6, r7
 800ef88:	d900      	bls.n	800ef8c <__ssputs_r+0x72>
 800ef8a:	463e      	mov	r6, r7
 800ef8c:	6820      	ldr	r0, [r4, #0]
 800ef8e:	4632      	mov	r2, r6
 800ef90:	4641      	mov	r1, r8
 800ef92:	f000 fd56 	bl	800fa42 <memmove>
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	1b9b      	subs	r3, r3, r6
 800ef9a:	60a3      	str	r3, [r4, #8]
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	4433      	add	r3, r6
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	2000      	movs	r0, #0
 800efa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efa8:	462a      	mov	r2, r5
 800efaa:	f000 fd97 	bl	800fadc <_realloc_r>
 800efae:	4606      	mov	r6, r0
 800efb0:	2800      	cmp	r0, #0
 800efb2:	d1e0      	bne.n	800ef76 <__ssputs_r+0x5c>
 800efb4:	6921      	ldr	r1, [r4, #16]
 800efb6:	4650      	mov	r0, sl
 800efb8:	f7fe fef2 	bl	800dda0 <_free_r>
 800efbc:	230c      	movs	r3, #12
 800efbe:	f8ca 3000 	str.w	r3, [sl]
 800efc2:	89a3      	ldrh	r3, [r4, #12]
 800efc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efc8:	81a3      	strh	r3, [r4, #12]
 800efca:	f04f 30ff 	mov.w	r0, #4294967295
 800efce:	e7e9      	b.n	800efa4 <__ssputs_r+0x8a>

0800efd0 <_svfiprintf_r>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	4698      	mov	r8, r3
 800efd6:	898b      	ldrh	r3, [r1, #12]
 800efd8:	061b      	lsls	r3, r3, #24
 800efda:	b09d      	sub	sp, #116	@ 0x74
 800efdc:	4607      	mov	r7, r0
 800efde:	460d      	mov	r5, r1
 800efe0:	4614      	mov	r4, r2
 800efe2:	d510      	bpl.n	800f006 <_svfiprintf_r+0x36>
 800efe4:	690b      	ldr	r3, [r1, #16]
 800efe6:	b973      	cbnz	r3, 800f006 <_svfiprintf_r+0x36>
 800efe8:	2140      	movs	r1, #64	@ 0x40
 800efea:	f7fc f897 	bl	800b11c <_malloc_r>
 800efee:	6028      	str	r0, [r5, #0]
 800eff0:	6128      	str	r0, [r5, #16]
 800eff2:	b930      	cbnz	r0, 800f002 <_svfiprintf_r+0x32>
 800eff4:	230c      	movs	r3, #12
 800eff6:	603b      	str	r3, [r7, #0]
 800eff8:	f04f 30ff 	mov.w	r0, #4294967295
 800effc:	b01d      	add	sp, #116	@ 0x74
 800effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f002:	2340      	movs	r3, #64	@ 0x40
 800f004:	616b      	str	r3, [r5, #20]
 800f006:	2300      	movs	r3, #0
 800f008:	9309      	str	r3, [sp, #36]	@ 0x24
 800f00a:	2320      	movs	r3, #32
 800f00c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f010:	f8cd 800c 	str.w	r8, [sp, #12]
 800f014:	2330      	movs	r3, #48	@ 0x30
 800f016:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f1b4 <_svfiprintf_r+0x1e4>
 800f01a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f01e:	f04f 0901 	mov.w	r9, #1
 800f022:	4623      	mov	r3, r4
 800f024:	469a      	mov	sl, r3
 800f026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f02a:	b10a      	cbz	r2, 800f030 <_svfiprintf_r+0x60>
 800f02c:	2a25      	cmp	r2, #37	@ 0x25
 800f02e:	d1f9      	bne.n	800f024 <_svfiprintf_r+0x54>
 800f030:	ebba 0b04 	subs.w	fp, sl, r4
 800f034:	d00b      	beq.n	800f04e <_svfiprintf_r+0x7e>
 800f036:	465b      	mov	r3, fp
 800f038:	4622      	mov	r2, r4
 800f03a:	4629      	mov	r1, r5
 800f03c:	4638      	mov	r0, r7
 800f03e:	f7ff ff6c 	bl	800ef1a <__ssputs_r>
 800f042:	3001      	adds	r0, #1
 800f044:	f000 80a7 	beq.w	800f196 <_svfiprintf_r+0x1c6>
 800f048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f04a:	445a      	add	r2, fp
 800f04c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f04e:	f89a 3000 	ldrb.w	r3, [sl]
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 809f 	beq.w	800f196 <_svfiprintf_r+0x1c6>
 800f058:	2300      	movs	r3, #0
 800f05a:	f04f 32ff 	mov.w	r2, #4294967295
 800f05e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f062:	f10a 0a01 	add.w	sl, sl, #1
 800f066:	9304      	str	r3, [sp, #16]
 800f068:	9307      	str	r3, [sp, #28]
 800f06a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f06e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f070:	4654      	mov	r4, sl
 800f072:	2205      	movs	r2, #5
 800f074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f078:	484e      	ldr	r0, [pc, #312]	@ (800f1b4 <_svfiprintf_r+0x1e4>)
 800f07a:	f7f1 f8a9 	bl	80001d0 <memchr>
 800f07e:	9a04      	ldr	r2, [sp, #16]
 800f080:	b9d8      	cbnz	r0, 800f0ba <_svfiprintf_r+0xea>
 800f082:	06d0      	lsls	r0, r2, #27
 800f084:	bf44      	itt	mi
 800f086:	2320      	movmi	r3, #32
 800f088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f08c:	0711      	lsls	r1, r2, #28
 800f08e:	bf44      	itt	mi
 800f090:	232b      	movmi	r3, #43	@ 0x2b
 800f092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f096:	f89a 3000 	ldrb.w	r3, [sl]
 800f09a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f09c:	d015      	beq.n	800f0ca <_svfiprintf_r+0xfa>
 800f09e:	9a07      	ldr	r2, [sp, #28]
 800f0a0:	4654      	mov	r4, sl
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	f04f 0c0a 	mov.w	ip, #10
 800f0a8:	4621      	mov	r1, r4
 800f0aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0ae:	3b30      	subs	r3, #48	@ 0x30
 800f0b0:	2b09      	cmp	r3, #9
 800f0b2:	d94b      	bls.n	800f14c <_svfiprintf_r+0x17c>
 800f0b4:	b1b0      	cbz	r0, 800f0e4 <_svfiprintf_r+0x114>
 800f0b6:	9207      	str	r2, [sp, #28]
 800f0b8:	e014      	b.n	800f0e4 <_svfiprintf_r+0x114>
 800f0ba:	eba0 0308 	sub.w	r3, r0, r8
 800f0be:	fa09 f303 	lsl.w	r3, r9, r3
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	9304      	str	r3, [sp, #16]
 800f0c6:	46a2      	mov	sl, r4
 800f0c8:	e7d2      	b.n	800f070 <_svfiprintf_r+0xa0>
 800f0ca:	9b03      	ldr	r3, [sp, #12]
 800f0cc:	1d19      	adds	r1, r3, #4
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	9103      	str	r1, [sp, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	bfbb      	ittet	lt
 800f0d6:	425b      	neglt	r3, r3
 800f0d8:	f042 0202 	orrlt.w	r2, r2, #2
 800f0dc:	9307      	strge	r3, [sp, #28]
 800f0de:	9307      	strlt	r3, [sp, #28]
 800f0e0:	bfb8      	it	lt
 800f0e2:	9204      	strlt	r2, [sp, #16]
 800f0e4:	7823      	ldrb	r3, [r4, #0]
 800f0e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0e8:	d10a      	bne.n	800f100 <_svfiprintf_r+0x130>
 800f0ea:	7863      	ldrb	r3, [r4, #1]
 800f0ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0ee:	d132      	bne.n	800f156 <_svfiprintf_r+0x186>
 800f0f0:	9b03      	ldr	r3, [sp, #12]
 800f0f2:	1d1a      	adds	r2, r3, #4
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	9203      	str	r2, [sp, #12]
 800f0f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0fc:	3402      	adds	r4, #2
 800f0fe:	9305      	str	r3, [sp, #20]
 800f100:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f1c4 <_svfiprintf_r+0x1f4>
 800f104:	7821      	ldrb	r1, [r4, #0]
 800f106:	2203      	movs	r2, #3
 800f108:	4650      	mov	r0, sl
 800f10a:	f7f1 f861 	bl	80001d0 <memchr>
 800f10e:	b138      	cbz	r0, 800f120 <_svfiprintf_r+0x150>
 800f110:	9b04      	ldr	r3, [sp, #16]
 800f112:	eba0 000a 	sub.w	r0, r0, sl
 800f116:	2240      	movs	r2, #64	@ 0x40
 800f118:	4082      	lsls	r2, r0
 800f11a:	4313      	orrs	r3, r2
 800f11c:	3401      	adds	r4, #1
 800f11e:	9304      	str	r3, [sp, #16]
 800f120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f124:	4824      	ldr	r0, [pc, #144]	@ (800f1b8 <_svfiprintf_r+0x1e8>)
 800f126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f12a:	2206      	movs	r2, #6
 800f12c:	f7f1 f850 	bl	80001d0 <memchr>
 800f130:	2800      	cmp	r0, #0
 800f132:	d036      	beq.n	800f1a2 <_svfiprintf_r+0x1d2>
 800f134:	4b21      	ldr	r3, [pc, #132]	@ (800f1bc <_svfiprintf_r+0x1ec>)
 800f136:	bb1b      	cbnz	r3, 800f180 <_svfiprintf_r+0x1b0>
 800f138:	9b03      	ldr	r3, [sp, #12]
 800f13a:	3307      	adds	r3, #7
 800f13c:	f023 0307 	bic.w	r3, r3, #7
 800f140:	3308      	adds	r3, #8
 800f142:	9303      	str	r3, [sp, #12]
 800f144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f146:	4433      	add	r3, r6
 800f148:	9309      	str	r3, [sp, #36]	@ 0x24
 800f14a:	e76a      	b.n	800f022 <_svfiprintf_r+0x52>
 800f14c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f150:	460c      	mov	r4, r1
 800f152:	2001      	movs	r0, #1
 800f154:	e7a8      	b.n	800f0a8 <_svfiprintf_r+0xd8>
 800f156:	2300      	movs	r3, #0
 800f158:	3401      	adds	r4, #1
 800f15a:	9305      	str	r3, [sp, #20]
 800f15c:	4619      	mov	r1, r3
 800f15e:	f04f 0c0a 	mov.w	ip, #10
 800f162:	4620      	mov	r0, r4
 800f164:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f168:	3a30      	subs	r2, #48	@ 0x30
 800f16a:	2a09      	cmp	r2, #9
 800f16c:	d903      	bls.n	800f176 <_svfiprintf_r+0x1a6>
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d0c6      	beq.n	800f100 <_svfiprintf_r+0x130>
 800f172:	9105      	str	r1, [sp, #20]
 800f174:	e7c4      	b.n	800f100 <_svfiprintf_r+0x130>
 800f176:	fb0c 2101 	mla	r1, ip, r1, r2
 800f17a:	4604      	mov	r4, r0
 800f17c:	2301      	movs	r3, #1
 800f17e:	e7f0      	b.n	800f162 <_svfiprintf_r+0x192>
 800f180:	ab03      	add	r3, sp, #12
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	462a      	mov	r2, r5
 800f186:	4b0e      	ldr	r3, [pc, #56]	@ (800f1c0 <_svfiprintf_r+0x1f0>)
 800f188:	a904      	add	r1, sp, #16
 800f18a:	4638      	mov	r0, r7
 800f18c:	f7fc ff76 	bl	800c07c <_printf_float>
 800f190:	1c42      	adds	r2, r0, #1
 800f192:	4606      	mov	r6, r0
 800f194:	d1d6      	bne.n	800f144 <_svfiprintf_r+0x174>
 800f196:	89ab      	ldrh	r3, [r5, #12]
 800f198:	065b      	lsls	r3, r3, #25
 800f19a:	f53f af2d 	bmi.w	800eff8 <_svfiprintf_r+0x28>
 800f19e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1a0:	e72c      	b.n	800effc <_svfiprintf_r+0x2c>
 800f1a2:	ab03      	add	r3, sp, #12
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	462a      	mov	r2, r5
 800f1a8:	4b05      	ldr	r3, [pc, #20]	@ (800f1c0 <_svfiprintf_r+0x1f0>)
 800f1aa:	a904      	add	r1, sp, #16
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	f7fd f9fd 	bl	800c5ac <_printf_i>
 800f1b2:	e7ed      	b.n	800f190 <_svfiprintf_r+0x1c0>
 800f1b4:	080104ab 	.word	0x080104ab
 800f1b8:	080104b5 	.word	0x080104b5
 800f1bc:	0800c07d 	.word	0x0800c07d
 800f1c0:	0800ef1b 	.word	0x0800ef1b
 800f1c4:	080104b1 	.word	0x080104b1

0800f1c8 <_sungetc_r>:
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	1c4b      	adds	r3, r1, #1
 800f1cc:	4614      	mov	r4, r2
 800f1ce:	d103      	bne.n	800f1d8 <_sungetc_r+0x10>
 800f1d0:	f04f 35ff 	mov.w	r5, #4294967295
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	8993      	ldrh	r3, [r2, #12]
 800f1da:	f023 0320 	bic.w	r3, r3, #32
 800f1de:	8193      	strh	r3, [r2, #12]
 800f1e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1e2:	6852      	ldr	r2, [r2, #4]
 800f1e4:	b2cd      	uxtb	r5, r1
 800f1e6:	b18b      	cbz	r3, 800f20c <_sungetc_r+0x44>
 800f1e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	dd08      	ble.n	800f200 <_sungetc_r+0x38>
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	1e5a      	subs	r2, r3, #1
 800f1f2:	6022      	str	r2, [r4, #0]
 800f1f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f1f8:	6863      	ldr	r3, [r4, #4]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	6063      	str	r3, [r4, #4]
 800f1fe:	e7e9      	b.n	800f1d4 <_sungetc_r+0xc>
 800f200:	4621      	mov	r1, r4
 800f202:	f000 fbe4 	bl	800f9ce <__submore>
 800f206:	2800      	cmp	r0, #0
 800f208:	d0f1      	beq.n	800f1ee <_sungetc_r+0x26>
 800f20a:	e7e1      	b.n	800f1d0 <_sungetc_r+0x8>
 800f20c:	6921      	ldr	r1, [r4, #16]
 800f20e:	6823      	ldr	r3, [r4, #0]
 800f210:	b151      	cbz	r1, 800f228 <_sungetc_r+0x60>
 800f212:	4299      	cmp	r1, r3
 800f214:	d208      	bcs.n	800f228 <_sungetc_r+0x60>
 800f216:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f21a:	42a9      	cmp	r1, r5
 800f21c:	d104      	bne.n	800f228 <_sungetc_r+0x60>
 800f21e:	3b01      	subs	r3, #1
 800f220:	3201      	adds	r2, #1
 800f222:	6023      	str	r3, [r4, #0]
 800f224:	6062      	str	r2, [r4, #4]
 800f226:	e7d5      	b.n	800f1d4 <_sungetc_r+0xc>
 800f228:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800f22c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f230:	6363      	str	r3, [r4, #52]	@ 0x34
 800f232:	2303      	movs	r3, #3
 800f234:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f236:	4623      	mov	r3, r4
 800f238:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	2301      	movs	r3, #1
 800f240:	e7dc      	b.n	800f1fc <_sungetc_r+0x34>

0800f242 <__ssrefill_r>:
 800f242:	b510      	push	{r4, lr}
 800f244:	460c      	mov	r4, r1
 800f246:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f248:	b169      	cbz	r1, 800f266 <__ssrefill_r+0x24>
 800f24a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f24e:	4299      	cmp	r1, r3
 800f250:	d001      	beq.n	800f256 <__ssrefill_r+0x14>
 800f252:	f7fe fda5 	bl	800dda0 <_free_r>
 800f256:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f258:	6063      	str	r3, [r4, #4]
 800f25a:	2000      	movs	r0, #0
 800f25c:	6360      	str	r0, [r4, #52]	@ 0x34
 800f25e:	b113      	cbz	r3, 800f266 <__ssrefill_r+0x24>
 800f260:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f262:	6023      	str	r3, [r4, #0]
 800f264:	bd10      	pop	{r4, pc}
 800f266:	6923      	ldr	r3, [r4, #16]
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	2300      	movs	r3, #0
 800f26c:	6063      	str	r3, [r4, #4]
 800f26e:	89a3      	ldrh	r3, [r4, #12]
 800f270:	f043 0320 	orr.w	r3, r3, #32
 800f274:	81a3      	strh	r3, [r4, #12]
 800f276:	f04f 30ff 	mov.w	r0, #4294967295
 800f27a:	e7f3      	b.n	800f264 <__ssrefill_r+0x22>

0800f27c <__ssvfiscanf_r>:
 800f27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f280:	460c      	mov	r4, r1
 800f282:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800f286:	2100      	movs	r1, #0
 800f288:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f28c:	49a6      	ldr	r1, [pc, #664]	@ (800f528 <__ssvfiscanf_r+0x2ac>)
 800f28e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f290:	f10d 0804 	add.w	r8, sp, #4
 800f294:	49a5      	ldr	r1, [pc, #660]	@ (800f52c <__ssvfiscanf_r+0x2b0>)
 800f296:	4fa6      	ldr	r7, [pc, #664]	@ (800f530 <__ssvfiscanf_r+0x2b4>)
 800f298:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f29c:	4606      	mov	r6, r0
 800f29e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	f892 9000 	ldrb.w	r9, [r2]
 800f2a6:	f1b9 0f00 	cmp.w	r9, #0
 800f2aa:	f000 8158 	beq.w	800f55e <__ssvfiscanf_r+0x2e2>
 800f2ae:	f817 3009 	ldrb.w	r3, [r7, r9]
 800f2b2:	f013 0308 	ands.w	r3, r3, #8
 800f2b6:	f102 0501 	add.w	r5, r2, #1
 800f2ba:	d019      	beq.n	800f2f0 <__ssvfiscanf_r+0x74>
 800f2bc:	6863      	ldr	r3, [r4, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	dd0f      	ble.n	800f2e2 <__ssvfiscanf_r+0x66>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	781a      	ldrb	r2, [r3, #0]
 800f2c6:	5cba      	ldrb	r2, [r7, r2]
 800f2c8:	0712      	lsls	r2, r2, #28
 800f2ca:	d401      	bmi.n	800f2d0 <__ssvfiscanf_r+0x54>
 800f2cc:	462a      	mov	r2, r5
 800f2ce:	e7e8      	b.n	800f2a2 <__ssvfiscanf_r+0x26>
 800f2d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f2d2:	3201      	adds	r2, #1
 800f2d4:	9245      	str	r2, [sp, #276]	@ 0x114
 800f2d6:	6862      	ldr	r2, [r4, #4]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	3a01      	subs	r2, #1
 800f2dc:	6062      	str	r2, [r4, #4]
 800f2de:	6023      	str	r3, [r4, #0]
 800f2e0:	e7ec      	b.n	800f2bc <__ssvfiscanf_r+0x40>
 800f2e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	4798      	blx	r3
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d0e9      	beq.n	800f2c2 <__ssvfiscanf_r+0x46>
 800f2ee:	e7ed      	b.n	800f2cc <__ssvfiscanf_r+0x50>
 800f2f0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800f2f4:	f040 8085 	bne.w	800f402 <__ssvfiscanf_r+0x186>
 800f2f8:	9341      	str	r3, [sp, #260]	@ 0x104
 800f2fa:	9343      	str	r3, [sp, #268]	@ 0x10c
 800f2fc:	7853      	ldrb	r3, [r2, #1]
 800f2fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800f300:	bf02      	ittt	eq
 800f302:	2310      	moveq	r3, #16
 800f304:	1c95      	addeq	r5, r2, #2
 800f306:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f308:	220a      	movs	r2, #10
 800f30a:	46aa      	mov	sl, r5
 800f30c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f310:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f314:	2b09      	cmp	r3, #9
 800f316:	d91e      	bls.n	800f356 <__ssvfiscanf_r+0xda>
 800f318:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800f534 <__ssvfiscanf_r+0x2b8>
 800f31c:	2203      	movs	r2, #3
 800f31e:	4658      	mov	r0, fp
 800f320:	f7f0 ff56 	bl	80001d0 <memchr>
 800f324:	b138      	cbz	r0, 800f336 <__ssvfiscanf_r+0xba>
 800f326:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f328:	eba0 000b 	sub.w	r0, r0, fp
 800f32c:	2301      	movs	r3, #1
 800f32e:	4083      	lsls	r3, r0
 800f330:	4313      	orrs	r3, r2
 800f332:	9341      	str	r3, [sp, #260]	@ 0x104
 800f334:	4655      	mov	r5, sl
 800f336:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f33a:	2b78      	cmp	r3, #120	@ 0x78
 800f33c:	d806      	bhi.n	800f34c <__ssvfiscanf_r+0xd0>
 800f33e:	2b57      	cmp	r3, #87	@ 0x57
 800f340:	d810      	bhi.n	800f364 <__ssvfiscanf_r+0xe8>
 800f342:	2b25      	cmp	r3, #37	@ 0x25
 800f344:	d05d      	beq.n	800f402 <__ssvfiscanf_r+0x186>
 800f346:	d857      	bhi.n	800f3f8 <__ssvfiscanf_r+0x17c>
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d075      	beq.n	800f438 <__ssvfiscanf_r+0x1bc>
 800f34c:	2303      	movs	r3, #3
 800f34e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f350:	230a      	movs	r3, #10
 800f352:	9342      	str	r3, [sp, #264]	@ 0x108
 800f354:	e088      	b.n	800f468 <__ssvfiscanf_r+0x1ec>
 800f356:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f358:	fb02 1103 	mla	r1, r2, r3, r1
 800f35c:	3930      	subs	r1, #48	@ 0x30
 800f35e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f360:	4655      	mov	r5, sl
 800f362:	e7d2      	b.n	800f30a <__ssvfiscanf_r+0x8e>
 800f364:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f368:	2a20      	cmp	r2, #32
 800f36a:	d8ef      	bhi.n	800f34c <__ssvfiscanf_r+0xd0>
 800f36c:	a101      	add	r1, pc, #4	@ (adr r1, 800f374 <__ssvfiscanf_r+0xf8>)
 800f36e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f372:	bf00      	nop
 800f374:	0800f447 	.word	0x0800f447
 800f378:	0800f34d 	.word	0x0800f34d
 800f37c:	0800f34d 	.word	0x0800f34d
 800f380:	0800f4a1 	.word	0x0800f4a1
 800f384:	0800f34d 	.word	0x0800f34d
 800f388:	0800f34d 	.word	0x0800f34d
 800f38c:	0800f34d 	.word	0x0800f34d
 800f390:	0800f34d 	.word	0x0800f34d
 800f394:	0800f34d 	.word	0x0800f34d
 800f398:	0800f34d 	.word	0x0800f34d
 800f39c:	0800f34d 	.word	0x0800f34d
 800f3a0:	0800f4b7 	.word	0x0800f4b7
 800f3a4:	0800f49d 	.word	0x0800f49d
 800f3a8:	0800f3ff 	.word	0x0800f3ff
 800f3ac:	0800f3ff 	.word	0x0800f3ff
 800f3b0:	0800f3ff 	.word	0x0800f3ff
 800f3b4:	0800f34d 	.word	0x0800f34d
 800f3b8:	0800f459 	.word	0x0800f459
 800f3bc:	0800f34d 	.word	0x0800f34d
 800f3c0:	0800f34d 	.word	0x0800f34d
 800f3c4:	0800f34d 	.word	0x0800f34d
 800f3c8:	0800f34d 	.word	0x0800f34d
 800f3cc:	0800f4c7 	.word	0x0800f4c7
 800f3d0:	0800f461 	.word	0x0800f461
 800f3d4:	0800f43f 	.word	0x0800f43f
 800f3d8:	0800f34d 	.word	0x0800f34d
 800f3dc:	0800f34d 	.word	0x0800f34d
 800f3e0:	0800f4c3 	.word	0x0800f4c3
 800f3e4:	0800f34d 	.word	0x0800f34d
 800f3e8:	0800f49d 	.word	0x0800f49d
 800f3ec:	0800f34d 	.word	0x0800f34d
 800f3f0:	0800f34d 	.word	0x0800f34d
 800f3f4:	0800f447 	.word	0x0800f447
 800f3f8:	3b45      	subs	r3, #69	@ 0x45
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d8a6      	bhi.n	800f34c <__ssvfiscanf_r+0xd0>
 800f3fe:	2305      	movs	r3, #5
 800f400:	e031      	b.n	800f466 <__ssvfiscanf_r+0x1ea>
 800f402:	6863      	ldr	r3, [r4, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	dd0d      	ble.n	800f424 <__ssvfiscanf_r+0x1a8>
 800f408:	6823      	ldr	r3, [r4, #0]
 800f40a:	781a      	ldrb	r2, [r3, #0]
 800f40c:	454a      	cmp	r2, r9
 800f40e:	f040 80a6 	bne.w	800f55e <__ssvfiscanf_r+0x2e2>
 800f412:	3301      	adds	r3, #1
 800f414:	6862      	ldr	r2, [r4, #4]
 800f416:	6023      	str	r3, [r4, #0]
 800f418:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f41a:	3a01      	subs	r2, #1
 800f41c:	3301      	adds	r3, #1
 800f41e:	6062      	str	r2, [r4, #4]
 800f420:	9345      	str	r3, [sp, #276]	@ 0x114
 800f422:	e753      	b.n	800f2cc <__ssvfiscanf_r+0x50>
 800f424:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f426:	4621      	mov	r1, r4
 800f428:	4630      	mov	r0, r6
 800f42a:	4798      	blx	r3
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d0eb      	beq.n	800f408 <__ssvfiscanf_r+0x18c>
 800f430:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f432:	2800      	cmp	r0, #0
 800f434:	f040 808b 	bne.w	800f54e <__ssvfiscanf_r+0x2d2>
 800f438:	f04f 30ff 	mov.w	r0, #4294967295
 800f43c:	e08b      	b.n	800f556 <__ssvfiscanf_r+0x2da>
 800f43e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f440:	f042 0220 	orr.w	r2, r2, #32
 800f444:	9241      	str	r2, [sp, #260]	@ 0x104
 800f446:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f44c:	9241      	str	r2, [sp, #260]	@ 0x104
 800f44e:	2210      	movs	r2, #16
 800f450:	2b6e      	cmp	r3, #110	@ 0x6e
 800f452:	9242      	str	r2, [sp, #264]	@ 0x108
 800f454:	d902      	bls.n	800f45c <__ssvfiscanf_r+0x1e0>
 800f456:	e005      	b.n	800f464 <__ssvfiscanf_r+0x1e8>
 800f458:	2300      	movs	r3, #0
 800f45a:	9342      	str	r3, [sp, #264]	@ 0x108
 800f45c:	2303      	movs	r3, #3
 800f45e:	e002      	b.n	800f466 <__ssvfiscanf_r+0x1ea>
 800f460:	2308      	movs	r3, #8
 800f462:	9342      	str	r3, [sp, #264]	@ 0x108
 800f464:	2304      	movs	r3, #4
 800f466:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f468:	6863      	ldr	r3, [r4, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	dd39      	ble.n	800f4e2 <__ssvfiscanf_r+0x266>
 800f46e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f470:	0659      	lsls	r1, r3, #25
 800f472:	d404      	bmi.n	800f47e <__ssvfiscanf_r+0x202>
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	781a      	ldrb	r2, [r3, #0]
 800f478:	5cba      	ldrb	r2, [r7, r2]
 800f47a:	0712      	lsls	r2, r2, #28
 800f47c:	d438      	bmi.n	800f4f0 <__ssvfiscanf_r+0x274>
 800f47e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f480:	2b02      	cmp	r3, #2
 800f482:	dc47      	bgt.n	800f514 <__ssvfiscanf_r+0x298>
 800f484:	466b      	mov	r3, sp
 800f486:	4622      	mov	r2, r4
 800f488:	a941      	add	r1, sp, #260	@ 0x104
 800f48a:	4630      	mov	r0, r6
 800f48c:	f000 f86c 	bl	800f568 <_scanf_chars>
 800f490:	2801      	cmp	r0, #1
 800f492:	d064      	beq.n	800f55e <__ssvfiscanf_r+0x2e2>
 800f494:	2802      	cmp	r0, #2
 800f496:	f47f af19 	bne.w	800f2cc <__ssvfiscanf_r+0x50>
 800f49a:	e7c9      	b.n	800f430 <__ssvfiscanf_r+0x1b4>
 800f49c:	220a      	movs	r2, #10
 800f49e:	e7d7      	b.n	800f450 <__ssvfiscanf_r+0x1d4>
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	4640      	mov	r0, r8
 800f4a4:	f000 fa5a 	bl	800f95c <__sccl>
 800f4a8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f4aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4ae:	9341      	str	r3, [sp, #260]	@ 0x104
 800f4b0:	4605      	mov	r5, r0
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e7d7      	b.n	800f466 <__ssvfiscanf_r+0x1ea>
 800f4b6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f4b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4bc:	9341      	str	r3, [sp, #260]	@ 0x104
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e7d1      	b.n	800f466 <__ssvfiscanf_r+0x1ea>
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	e7cf      	b.n	800f466 <__ssvfiscanf_r+0x1ea>
 800f4c6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f4c8:	06c3      	lsls	r3, r0, #27
 800f4ca:	f53f aeff 	bmi.w	800f2cc <__ssvfiscanf_r+0x50>
 800f4ce:	9b00      	ldr	r3, [sp, #0]
 800f4d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f4d2:	1d19      	adds	r1, r3, #4
 800f4d4:	9100      	str	r1, [sp, #0]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	07c0      	lsls	r0, r0, #31
 800f4da:	bf4c      	ite	mi
 800f4dc:	801a      	strhmi	r2, [r3, #0]
 800f4de:	601a      	strpl	r2, [r3, #0]
 800f4e0:	e6f4      	b.n	800f2cc <__ssvfiscanf_r+0x50>
 800f4e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	4798      	blx	r3
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d0bf      	beq.n	800f46e <__ssvfiscanf_r+0x1f2>
 800f4ee:	e79f      	b.n	800f430 <__ssvfiscanf_r+0x1b4>
 800f4f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f4f2:	3201      	adds	r2, #1
 800f4f4:	9245      	str	r2, [sp, #276]	@ 0x114
 800f4f6:	6862      	ldr	r2, [r4, #4]
 800f4f8:	3a01      	subs	r2, #1
 800f4fa:	2a00      	cmp	r2, #0
 800f4fc:	6062      	str	r2, [r4, #4]
 800f4fe:	dd02      	ble.n	800f506 <__ssvfiscanf_r+0x28a>
 800f500:	3301      	adds	r3, #1
 800f502:	6023      	str	r3, [r4, #0]
 800f504:	e7b6      	b.n	800f474 <__ssvfiscanf_r+0x1f8>
 800f506:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f508:	4621      	mov	r1, r4
 800f50a:	4630      	mov	r0, r6
 800f50c:	4798      	blx	r3
 800f50e:	2800      	cmp	r0, #0
 800f510:	d0b0      	beq.n	800f474 <__ssvfiscanf_r+0x1f8>
 800f512:	e78d      	b.n	800f430 <__ssvfiscanf_r+0x1b4>
 800f514:	2b04      	cmp	r3, #4
 800f516:	dc0f      	bgt.n	800f538 <__ssvfiscanf_r+0x2bc>
 800f518:	466b      	mov	r3, sp
 800f51a:	4622      	mov	r2, r4
 800f51c:	a941      	add	r1, sp, #260	@ 0x104
 800f51e:	4630      	mov	r0, r6
 800f520:	f000 f87c 	bl	800f61c <_scanf_i>
 800f524:	e7b4      	b.n	800f490 <__ssvfiscanf_r+0x214>
 800f526:	bf00      	nop
 800f528:	0800f1c9 	.word	0x0800f1c9
 800f52c:	0800f243 	.word	0x0800f243
 800f530:	08010569 	.word	0x08010569
 800f534:	080104b1 	.word	0x080104b1
 800f538:	4b0a      	ldr	r3, [pc, #40]	@ (800f564 <__ssvfiscanf_r+0x2e8>)
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f43f aec6 	beq.w	800f2cc <__ssvfiscanf_r+0x50>
 800f540:	466b      	mov	r3, sp
 800f542:	4622      	mov	r2, r4
 800f544:	a941      	add	r1, sp, #260	@ 0x104
 800f546:	4630      	mov	r0, r6
 800f548:	f7fd f94e 	bl	800c7e8 <_scanf_float>
 800f54c:	e7a0      	b.n	800f490 <__ssvfiscanf_r+0x214>
 800f54e:	89a3      	ldrh	r3, [r4, #12]
 800f550:	065b      	lsls	r3, r3, #25
 800f552:	f53f af71 	bmi.w	800f438 <__ssvfiscanf_r+0x1bc>
 800f556:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800f55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f55e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f560:	e7f9      	b.n	800f556 <__ssvfiscanf_r+0x2da>
 800f562:	bf00      	nop
 800f564:	0800c7e9 	.word	0x0800c7e9

0800f568 <_scanf_chars>:
 800f568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f56c:	4615      	mov	r5, r2
 800f56e:	688a      	ldr	r2, [r1, #8]
 800f570:	4680      	mov	r8, r0
 800f572:	460c      	mov	r4, r1
 800f574:	b932      	cbnz	r2, 800f584 <_scanf_chars+0x1c>
 800f576:	698a      	ldr	r2, [r1, #24]
 800f578:	2a00      	cmp	r2, #0
 800f57a:	bf14      	ite	ne
 800f57c:	f04f 32ff 	movne.w	r2, #4294967295
 800f580:	2201      	moveq	r2, #1
 800f582:	608a      	str	r2, [r1, #8]
 800f584:	6822      	ldr	r2, [r4, #0]
 800f586:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f618 <_scanf_chars+0xb0>
 800f58a:	06d1      	lsls	r1, r2, #27
 800f58c:	bf5f      	itttt	pl
 800f58e:	681a      	ldrpl	r2, [r3, #0]
 800f590:	1d11      	addpl	r1, r2, #4
 800f592:	6019      	strpl	r1, [r3, #0]
 800f594:	6816      	ldrpl	r6, [r2, #0]
 800f596:	2700      	movs	r7, #0
 800f598:	69a0      	ldr	r0, [r4, #24]
 800f59a:	b188      	cbz	r0, 800f5c0 <_scanf_chars+0x58>
 800f59c:	2801      	cmp	r0, #1
 800f59e:	d107      	bne.n	800f5b0 <_scanf_chars+0x48>
 800f5a0:	682b      	ldr	r3, [r5, #0]
 800f5a2:	781a      	ldrb	r2, [r3, #0]
 800f5a4:	6963      	ldr	r3, [r4, #20]
 800f5a6:	5c9b      	ldrb	r3, [r3, r2]
 800f5a8:	b953      	cbnz	r3, 800f5c0 <_scanf_chars+0x58>
 800f5aa:	2f00      	cmp	r7, #0
 800f5ac:	d031      	beq.n	800f612 <_scanf_chars+0xaa>
 800f5ae:	e022      	b.n	800f5f6 <_scanf_chars+0x8e>
 800f5b0:	2802      	cmp	r0, #2
 800f5b2:	d120      	bne.n	800f5f6 <_scanf_chars+0x8e>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f5bc:	071b      	lsls	r3, r3, #28
 800f5be:	d41a      	bmi.n	800f5f6 <_scanf_chars+0x8e>
 800f5c0:	6823      	ldr	r3, [r4, #0]
 800f5c2:	06da      	lsls	r2, r3, #27
 800f5c4:	bf5e      	ittt	pl
 800f5c6:	682b      	ldrpl	r3, [r5, #0]
 800f5c8:	781b      	ldrbpl	r3, [r3, #0]
 800f5ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f5ce:	682a      	ldr	r2, [r5, #0]
 800f5d0:	686b      	ldr	r3, [r5, #4]
 800f5d2:	3201      	adds	r2, #1
 800f5d4:	602a      	str	r2, [r5, #0]
 800f5d6:	68a2      	ldr	r2, [r4, #8]
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	3a01      	subs	r2, #1
 800f5dc:	606b      	str	r3, [r5, #4]
 800f5de:	3701      	adds	r7, #1
 800f5e0:	60a2      	str	r2, [r4, #8]
 800f5e2:	b142      	cbz	r2, 800f5f6 <_scanf_chars+0x8e>
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	dcd7      	bgt.n	800f598 <_scanf_chars+0x30>
 800f5e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	4640      	mov	r0, r8
 800f5f0:	4798      	blx	r3
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d0d0      	beq.n	800f598 <_scanf_chars+0x30>
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	f013 0310 	ands.w	r3, r3, #16
 800f5fc:	d105      	bne.n	800f60a <_scanf_chars+0xa2>
 800f5fe:	68e2      	ldr	r2, [r4, #12]
 800f600:	3201      	adds	r2, #1
 800f602:	60e2      	str	r2, [r4, #12]
 800f604:	69a2      	ldr	r2, [r4, #24]
 800f606:	b102      	cbz	r2, 800f60a <_scanf_chars+0xa2>
 800f608:	7033      	strb	r3, [r6, #0]
 800f60a:	6923      	ldr	r3, [r4, #16]
 800f60c:	443b      	add	r3, r7
 800f60e:	6123      	str	r3, [r4, #16]
 800f610:	2000      	movs	r0, #0
 800f612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f616:	bf00      	nop
 800f618:	08010569 	.word	0x08010569

0800f61c <_scanf_i>:
 800f61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f620:	4698      	mov	r8, r3
 800f622:	4b74      	ldr	r3, [pc, #464]	@ (800f7f4 <_scanf_i+0x1d8>)
 800f624:	460c      	mov	r4, r1
 800f626:	4682      	mov	sl, r0
 800f628:	4616      	mov	r6, r2
 800f62a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f62e:	b087      	sub	sp, #28
 800f630:	ab03      	add	r3, sp, #12
 800f632:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f636:	4b70      	ldr	r3, [pc, #448]	@ (800f7f8 <_scanf_i+0x1dc>)
 800f638:	69a1      	ldr	r1, [r4, #24]
 800f63a:	4a70      	ldr	r2, [pc, #448]	@ (800f7fc <_scanf_i+0x1e0>)
 800f63c:	2903      	cmp	r1, #3
 800f63e:	bf08      	it	eq
 800f640:	461a      	moveq	r2, r3
 800f642:	68a3      	ldr	r3, [r4, #8]
 800f644:	9201      	str	r2, [sp, #4]
 800f646:	1e5a      	subs	r2, r3, #1
 800f648:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f64c:	bf88      	it	hi
 800f64e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f652:	4627      	mov	r7, r4
 800f654:	bf82      	ittt	hi
 800f656:	eb03 0905 	addhi.w	r9, r3, r5
 800f65a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f65e:	60a3      	strhi	r3, [r4, #8]
 800f660:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f664:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f668:	bf98      	it	ls
 800f66a:	f04f 0900 	movls.w	r9, #0
 800f66e:	6023      	str	r3, [r4, #0]
 800f670:	463d      	mov	r5, r7
 800f672:	f04f 0b00 	mov.w	fp, #0
 800f676:	6831      	ldr	r1, [r6, #0]
 800f678:	ab03      	add	r3, sp, #12
 800f67a:	7809      	ldrb	r1, [r1, #0]
 800f67c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f680:	2202      	movs	r2, #2
 800f682:	f7f0 fda5 	bl	80001d0 <memchr>
 800f686:	b328      	cbz	r0, 800f6d4 <_scanf_i+0xb8>
 800f688:	f1bb 0f01 	cmp.w	fp, #1
 800f68c:	d159      	bne.n	800f742 <_scanf_i+0x126>
 800f68e:	6862      	ldr	r2, [r4, #4]
 800f690:	b92a      	cbnz	r2, 800f69e <_scanf_i+0x82>
 800f692:	6822      	ldr	r2, [r4, #0]
 800f694:	2108      	movs	r1, #8
 800f696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f69a:	6061      	str	r1, [r4, #4]
 800f69c:	6022      	str	r2, [r4, #0]
 800f69e:	6822      	ldr	r2, [r4, #0]
 800f6a0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f6a4:	6022      	str	r2, [r4, #0]
 800f6a6:	68a2      	ldr	r2, [r4, #8]
 800f6a8:	1e51      	subs	r1, r2, #1
 800f6aa:	60a1      	str	r1, [r4, #8]
 800f6ac:	b192      	cbz	r2, 800f6d4 <_scanf_i+0xb8>
 800f6ae:	6832      	ldr	r2, [r6, #0]
 800f6b0:	1c51      	adds	r1, r2, #1
 800f6b2:	6031      	str	r1, [r6, #0]
 800f6b4:	7812      	ldrb	r2, [r2, #0]
 800f6b6:	f805 2b01 	strb.w	r2, [r5], #1
 800f6ba:	6872      	ldr	r2, [r6, #4]
 800f6bc:	3a01      	subs	r2, #1
 800f6be:	2a00      	cmp	r2, #0
 800f6c0:	6072      	str	r2, [r6, #4]
 800f6c2:	dc07      	bgt.n	800f6d4 <_scanf_i+0xb8>
 800f6c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f6c8:	4631      	mov	r1, r6
 800f6ca:	4650      	mov	r0, sl
 800f6cc:	4790      	blx	r2
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	f040 8085 	bne.w	800f7de <_scanf_i+0x1c2>
 800f6d4:	f10b 0b01 	add.w	fp, fp, #1
 800f6d8:	f1bb 0f03 	cmp.w	fp, #3
 800f6dc:	d1cb      	bne.n	800f676 <_scanf_i+0x5a>
 800f6de:	6863      	ldr	r3, [r4, #4]
 800f6e0:	b90b      	cbnz	r3, 800f6e6 <_scanf_i+0xca>
 800f6e2:	230a      	movs	r3, #10
 800f6e4:	6063      	str	r3, [r4, #4]
 800f6e6:	6863      	ldr	r3, [r4, #4]
 800f6e8:	4945      	ldr	r1, [pc, #276]	@ (800f800 <_scanf_i+0x1e4>)
 800f6ea:	6960      	ldr	r0, [r4, #20]
 800f6ec:	1ac9      	subs	r1, r1, r3
 800f6ee:	f000 f935 	bl	800f95c <__sccl>
 800f6f2:	f04f 0b00 	mov.w	fp, #0
 800f6f6:	68a3      	ldr	r3, [r4, #8]
 800f6f8:	6822      	ldr	r2, [r4, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d03d      	beq.n	800f77a <_scanf_i+0x15e>
 800f6fe:	6831      	ldr	r1, [r6, #0]
 800f700:	6960      	ldr	r0, [r4, #20]
 800f702:	f891 c000 	ldrb.w	ip, [r1]
 800f706:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f70a:	2800      	cmp	r0, #0
 800f70c:	d035      	beq.n	800f77a <_scanf_i+0x15e>
 800f70e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f712:	d124      	bne.n	800f75e <_scanf_i+0x142>
 800f714:	0510      	lsls	r0, r2, #20
 800f716:	d522      	bpl.n	800f75e <_scanf_i+0x142>
 800f718:	f10b 0b01 	add.w	fp, fp, #1
 800f71c:	f1b9 0f00 	cmp.w	r9, #0
 800f720:	d003      	beq.n	800f72a <_scanf_i+0x10e>
 800f722:	3301      	adds	r3, #1
 800f724:	f109 39ff 	add.w	r9, r9, #4294967295
 800f728:	60a3      	str	r3, [r4, #8]
 800f72a:	6873      	ldr	r3, [r6, #4]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	2b00      	cmp	r3, #0
 800f730:	6073      	str	r3, [r6, #4]
 800f732:	dd1b      	ble.n	800f76c <_scanf_i+0x150>
 800f734:	6833      	ldr	r3, [r6, #0]
 800f736:	3301      	adds	r3, #1
 800f738:	6033      	str	r3, [r6, #0]
 800f73a:	68a3      	ldr	r3, [r4, #8]
 800f73c:	3b01      	subs	r3, #1
 800f73e:	60a3      	str	r3, [r4, #8]
 800f740:	e7d9      	b.n	800f6f6 <_scanf_i+0xda>
 800f742:	f1bb 0f02 	cmp.w	fp, #2
 800f746:	d1ae      	bne.n	800f6a6 <_scanf_i+0x8a>
 800f748:	6822      	ldr	r2, [r4, #0]
 800f74a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f74e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f752:	d1c4      	bne.n	800f6de <_scanf_i+0xc2>
 800f754:	2110      	movs	r1, #16
 800f756:	6061      	str	r1, [r4, #4]
 800f758:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f75c:	e7a2      	b.n	800f6a4 <_scanf_i+0x88>
 800f75e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f762:	6022      	str	r2, [r4, #0]
 800f764:	780b      	ldrb	r3, [r1, #0]
 800f766:	f805 3b01 	strb.w	r3, [r5], #1
 800f76a:	e7de      	b.n	800f72a <_scanf_i+0x10e>
 800f76c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f770:	4631      	mov	r1, r6
 800f772:	4650      	mov	r0, sl
 800f774:	4798      	blx	r3
 800f776:	2800      	cmp	r0, #0
 800f778:	d0df      	beq.n	800f73a <_scanf_i+0x11e>
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	05d9      	lsls	r1, r3, #23
 800f77e:	d50d      	bpl.n	800f79c <_scanf_i+0x180>
 800f780:	42bd      	cmp	r5, r7
 800f782:	d909      	bls.n	800f798 <_scanf_i+0x17c>
 800f784:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f788:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f78c:	4632      	mov	r2, r6
 800f78e:	4650      	mov	r0, sl
 800f790:	4798      	blx	r3
 800f792:	f105 39ff 	add.w	r9, r5, #4294967295
 800f796:	464d      	mov	r5, r9
 800f798:	42bd      	cmp	r5, r7
 800f79a:	d028      	beq.n	800f7ee <_scanf_i+0x1d2>
 800f79c:	6822      	ldr	r2, [r4, #0]
 800f79e:	f012 0210 	ands.w	r2, r2, #16
 800f7a2:	d113      	bne.n	800f7cc <_scanf_i+0x1b0>
 800f7a4:	702a      	strb	r2, [r5, #0]
 800f7a6:	6863      	ldr	r3, [r4, #4]
 800f7a8:	9e01      	ldr	r6, [sp, #4]
 800f7aa:	4639      	mov	r1, r7
 800f7ac:	4650      	mov	r0, sl
 800f7ae:	47b0      	blx	r6
 800f7b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f7b4:	6821      	ldr	r1, [r4, #0]
 800f7b6:	1d1a      	adds	r2, r3, #4
 800f7b8:	f8c8 2000 	str.w	r2, [r8]
 800f7bc:	f011 0f20 	tst.w	r1, #32
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	d00f      	beq.n	800f7e4 <_scanf_i+0x1c8>
 800f7c4:	6018      	str	r0, [r3, #0]
 800f7c6:	68e3      	ldr	r3, [r4, #12]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	60e3      	str	r3, [r4, #12]
 800f7cc:	6923      	ldr	r3, [r4, #16]
 800f7ce:	1bed      	subs	r5, r5, r7
 800f7d0:	445d      	add	r5, fp
 800f7d2:	442b      	add	r3, r5
 800f7d4:	6123      	str	r3, [r4, #16]
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	b007      	add	sp, #28
 800f7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7de:	f04f 0b00 	mov.w	fp, #0
 800f7e2:	e7ca      	b.n	800f77a <_scanf_i+0x15e>
 800f7e4:	07ca      	lsls	r2, r1, #31
 800f7e6:	bf4c      	ite	mi
 800f7e8:	8018      	strhmi	r0, [r3, #0]
 800f7ea:	6018      	strpl	r0, [r3, #0]
 800f7ec:	e7eb      	b.n	800f7c6 <_scanf_i+0x1aa>
 800f7ee:	2001      	movs	r0, #1
 800f7f0:	e7f2      	b.n	800f7d8 <_scanf_i+0x1bc>
 800f7f2:	bf00      	nop
 800f7f4:	080102d0 	.word	0x080102d0
 800f7f8:	0800bf39 	.word	0x0800bf39
 800f7fc:	0800eefd 	.word	0x0800eefd
 800f800:	080104cc 	.word	0x080104cc

0800f804 <__sflush_r>:
 800f804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f80c:	0716      	lsls	r6, r2, #28
 800f80e:	4605      	mov	r5, r0
 800f810:	460c      	mov	r4, r1
 800f812:	d454      	bmi.n	800f8be <__sflush_r+0xba>
 800f814:	684b      	ldr	r3, [r1, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	dc02      	bgt.n	800f820 <__sflush_r+0x1c>
 800f81a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	dd48      	ble.n	800f8b2 <__sflush_r+0xae>
 800f820:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f822:	2e00      	cmp	r6, #0
 800f824:	d045      	beq.n	800f8b2 <__sflush_r+0xae>
 800f826:	2300      	movs	r3, #0
 800f828:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f82c:	682f      	ldr	r7, [r5, #0]
 800f82e:	6a21      	ldr	r1, [r4, #32]
 800f830:	602b      	str	r3, [r5, #0]
 800f832:	d030      	beq.n	800f896 <__sflush_r+0x92>
 800f834:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f836:	89a3      	ldrh	r3, [r4, #12]
 800f838:	0759      	lsls	r1, r3, #29
 800f83a:	d505      	bpl.n	800f848 <__sflush_r+0x44>
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	1ad2      	subs	r2, r2, r3
 800f840:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f842:	b10b      	cbz	r3, 800f848 <__sflush_r+0x44>
 800f844:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f846:	1ad2      	subs	r2, r2, r3
 800f848:	2300      	movs	r3, #0
 800f84a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f84c:	6a21      	ldr	r1, [r4, #32]
 800f84e:	4628      	mov	r0, r5
 800f850:	47b0      	blx	r6
 800f852:	1c43      	adds	r3, r0, #1
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	d106      	bne.n	800f866 <__sflush_r+0x62>
 800f858:	6829      	ldr	r1, [r5, #0]
 800f85a:	291d      	cmp	r1, #29
 800f85c:	d82b      	bhi.n	800f8b6 <__sflush_r+0xb2>
 800f85e:	4a2a      	ldr	r2, [pc, #168]	@ (800f908 <__sflush_r+0x104>)
 800f860:	40ca      	lsrs	r2, r1
 800f862:	07d6      	lsls	r6, r2, #31
 800f864:	d527      	bpl.n	800f8b6 <__sflush_r+0xb2>
 800f866:	2200      	movs	r2, #0
 800f868:	6062      	str	r2, [r4, #4]
 800f86a:	04d9      	lsls	r1, r3, #19
 800f86c:	6922      	ldr	r2, [r4, #16]
 800f86e:	6022      	str	r2, [r4, #0]
 800f870:	d504      	bpl.n	800f87c <__sflush_r+0x78>
 800f872:	1c42      	adds	r2, r0, #1
 800f874:	d101      	bne.n	800f87a <__sflush_r+0x76>
 800f876:	682b      	ldr	r3, [r5, #0]
 800f878:	b903      	cbnz	r3, 800f87c <__sflush_r+0x78>
 800f87a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f87c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f87e:	602f      	str	r7, [r5, #0]
 800f880:	b1b9      	cbz	r1, 800f8b2 <__sflush_r+0xae>
 800f882:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f886:	4299      	cmp	r1, r3
 800f888:	d002      	beq.n	800f890 <__sflush_r+0x8c>
 800f88a:	4628      	mov	r0, r5
 800f88c:	f7fe fa88 	bl	800dda0 <_free_r>
 800f890:	2300      	movs	r3, #0
 800f892:	6363      	str	r3, [r4, #52]	@ 0x34
 800f894:	e00d      	b.n	800f8b2 <__sflush_r+0xae>
 800f896:	2301      	movs	r3, #1
 800f898:	4628      	mov	r0, r5
 800f89a:	47b0      	blx	r6
 800f89c:	4602      	mov	r2, r0
 800f89e:	1c50      	adds	r0, r2, #1
 800f8a0:	d1c9      	bne.n	800f836 <__sflush_r+0x32>
 800f8a2:	682b      	ldr	r3, [r5, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d0c6      	beq.n	800f836 <__sflush_r+0x32>
 800f8a8:	2b1d      	cmp	r3, #29
 800f8aa:	d001      	beq.n	800f8b0 <__sflush_r+0xac>
 800f8ac:	2b16      	cmp	r3, #22
 800f8ae:	d11e      	bne.n	800f8ee <__sflush_r+0xea>
 800f8b0:	602f      	str	r7, [r5, #0]
 800f8b2:	2000      	movs	r0, #0
 800f8b4:	e022      	b.n	800f8fc <__sflush_r+0xf8>
 800f8b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8ba:	b21b      	sxth	r3, r3
 800f8bc:	e01b      	b.n	800f8f6 <__sflush_r+0xf2>
 800f8be:	690f      	ldr	r7, [r1, #16]
 800f8c0:	2f00      	cmp	r7, #0
 800f8c2:	d0f6      	beq.n	800f8b2 <__sflush_r+0xae>
 800f8c4:	0793      	lsls	r3, r2, #30
 800f8c6:	680e      	ldr	r6, [r1, #0]
 800f8c8:	bf08      	it	eq
 800f8ca:	694b      	ldreq	r3, [r1, #20]
 800f8cc:	600f      	str	r7, [r1, #0]
 800f8ce:	bf18      	it	ne
 800f8d0:	2300      	movne	r3, #0
 800f8d2:	eba6 0807 	sub.w	r8, r6, r7
 800f8d6:	608b      	str	r3, [r1, #8]
 800f8d8:	f1b8 0f00 	cmp.w	r8, #0
 800f8dc:	dde9      	ble.n	800f8b2 <__sflush_r+0xae>
 800f8de:	6a21      	ldr	r1, [r4, #32]
 800f8e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f8e2:	4643      	mov	r3, r8
 800f8e4:	463a      	mov	r2, r7
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	47b0      	blx	r6
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	dc08      	bgt.n	800f900 <__sflush_r+0xfc>
 800f8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8f6:	81a3      	strh	r3, [r4, #12]
 800f8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f900:	4407      	add	r7, r0
 800f902:	eba8 0800 	sub.w	r8, r8, r0
 800f906:	e7e7      	b.n	800f8d8 <__sflush_r+0xd4>
 800f908:	20400001 	.word	0x20400001

0800f90c <_fflush_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	690b      	ldr	r3, [r1, #16]
 800f910:	4605      	mov	r5, r0
 800f912:	460c      	mov	r4, r1
 800f914:	b913      	cbnz	r3, 800f91c <_fflush_r+0x10>
 800f916:	2500      	movs	r5, #0
 800f918:	4628      	mov	r0, r5
 800f91a:	bd38      	pop	{r3, r4, r5, pc}
 800f91c:	b118      	cbz	r0, 800f926 <_fflush_r+0x1a>
 800f91e:	6a03      	ldr	r3, [r0, #32]
 800f920:	b90b      	cbnz	r3, 800f926 <_fflush_r+0x1a>
 800f922:	f7fd f9fb 	bl	800cd1c <__sinit>
 800f926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d0f3      	beq.n	800f916 <_fflush_r+0xa>
 800f92e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f930:	07d0      	lsls	r0, r2, #31
 800f932:	d404      	bmi.n	800f93e <_fflush_r+0x32>
 800f934:	0599      	lsls	r1, r3, #22
 800f936:	d402      	bmi.n	800f93e <_fflush_r+0x32>
 800f938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f93a:	f7fd fbb6 	bl	800d0aa <__retarget_lock_acquire_recursive>
 800f93e:	4628      	mov	r0, r5
 800f940:	4621      	mov	r1, r4
 800f942:	f7ff ff5f 	bl	800f804 <__sflush_r>
 800f946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f948:	07da      	lsls	r2, r3, #31
 800f94a:	4605      	mov	r5, r0
 800f94c:	d4e4      	bmi.n	800f918 <_fflush_r+0xc>
 800f94e:	89a3      	ldrh	r3, [r4, #12]
 800f950:	059b      	lsls	r3, r3, #22
 800f952:	d4e1      	bmi.n	800f918 <_fflush_r+0xc>
 800f954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f956:	f7fd fba9 	bl	800d0ac <__retarget_lock_release_recursive>
 800f95a:	e7dd      	b.n	800f918 <_fflush_r+0xc>

0800f95c <__sccl>:
 800f95c:	b570      	push	{r4, r5, r6, lr}
 800f95e:	780b      	ldrb	r3, [r1, #0]
 800f960:	4604      	mov	r4, r0
 800f962:	2b5e      	cmp	r3, #94	@ 0x5e
 800f964:	bf0b      	itete	eq
 800f966:	784b      	ldrbeq	r3, [r1, #1]
 800f968:	1c4a      	addne	r2, r1, #1
 800f96a:	1c8a      	addeq	r2, r1, #2
 800f96c:	2100      	movne	r1, #0
 800f96e:	bf08      	it	eq
 800f970:	2101      	moveq	r1, #1
 800f972:	3801      	subs	r0, #1
 800f974:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f978:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f97c:	42a8      	cmp	r0, r5
 800f97e:	d1fb      	bne.n	800f978 <__sccl+0x1c>
 800f980:	b90b      	cbnz	r3, 800f986 <__sccl+0x2a>
 800f982:	1e50      	subs	r0, r2, #1
 800f984:	bd70      	pop	{r4, r5, r6, pc}
 800f986:	f081 0101 	eor.w	r1, r1, #1
 800f98a:	54e1      	strb	r1, [r4, r3]
 800f98c:	4610      	mov	r0, r2
 800f98e:	4602      	mov	r2, r0
 800f990:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f994:	2d2d      	cmp	r5, #45	@ 0x2d
 800f996:	d005      	beq.n	800f9a4 <__sccl+0x48>
 800f998:	2d5d      	cmp	r5, #93	@ 0x5d
 800f99a:	d016      	beq.n	800f9ca <__sccl+0x6e>
 800f99c:	2d00      	cmp	r5, #0
 800f99e:	d0f1      	beq.n	800f984 <__sccl+0x28>
 800f9a0:	462b      	mov	r3, r5
 800f9a2:	e7f2      	b.n	800f98a <__sccl+0x2e>
 800f9a4:	7846      	ldrb	r6, [r0, #1]
 800f9a6:	2e5d      	cmp	r6, #93	@ 0x5d
 800f9a8:	d0fa      	beq.n	800f9a0 <__sccl+0x44>
 800f9aa:	42b3      	cmp	r3, r6
 800f9ac:	dcf8      	bgt.n	800f9a0 <__sccl+0x44>
 800f9ae:	3002      	adds	r0, #2
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	3201      	adds	r2, #1
 800f9b4:	4296      	cmp	r6, r2
 800f9b6:	54a1      	strb	r1, [r4, r2]
 800f9b8:	dcfb      	bgt.n	800f9b2 <__sccl+0x56>
 800f9ba:	1af2      	subs	r2, r6, r3
 800f9bc:	3a01      	subs	r2, #1
 800f9be:	1c5d      	adds	r5, r3, #1
 800f9c0:	42b3      	cmp	r3, r6
 800f9c2:	bfa8      	it	ge
 800f9c4:	2200      	movge	r2, #0
 800f9c6:	18ab      	adds	r3, r5, r2
 800f9c8:	e7e1      	b.n	800f98e <__sccl+0x32>
 800f9ca:	4610      	mov	r0, r2
 800f9cc:	e7da      	b.n	800f984 <__sccl+0x28>

0800f9ce <__submore>:
 800f9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d2:	460c      	mov	r4, r1
 800f9d4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f9d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f9da:	4299      	cmp	r1, r3
 800f9dc:	d11d      	bne.n	800fa1a <__submore+0x4c>
 800f9de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f9e2:	f7fb fb9b 	bl	800b11c <_malloc_r>
 800f9e6:	b918      	cbnz	r0, 800f9f0 <__submore+0x22>
 800f9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f9f6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f9fa:	6360      	str	r0, [r4, #52]	@ 0x34
 800f9fc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800fa00:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800fa04:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800fa08:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fa0c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800fa10:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800fa14:	6020      	str	r0, [r4, #0]
 800fa16:	2000      	movs	r0, #0
 800fa18:	e7e8      	b.n	800f9ec <__submore+0x1e>
 800fa1a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800fa1c:	0077      	lsls	r7, r6, #1
 800fa1e:	463a      	mov	r2, r7
 800fa20:	f000 f85c 	bl	800fadc <_realloc_r>
 800fa24:	4605      	mov	r5, r0
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d0de      	beq.n	800f9e8 <__submore+0x1a>
 800fa2a:	eb00 0806 	add.w	r8, r0, r6
 800fa2e:	4601      	mov	r1, r0
 800fa30:	4632      	mov	r2, r6
 800fa32:	4640      	mov	r0, r8
 800fa34:	f7fd fb3b 	bl	800d0ae <memcpy>
 800fa38:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800fa3c:	f8c4 8000 	str.w	r8, [r4]
 800fa40:	e7e9      	b.n	800fa16 <__submore+0x48>

0800fa42 <memmove>:
 800fa42:	4288      	cmp	r0, r1
 800fa44:	b510      	push	{r4, lr}
 800fa46:	eb01 0402 	add.w	r4, r1, r2
 800fa4a:	d902      	bls.n	800fa52 <memmove+0x10>
 800fa4c:	4284      	cmp	r4, r0
 800fa4e:	4623      	mov	r3, r4
 800fa50:	d807      	bhi.n	800fa62 <memmove+0x20>
 800fa52:	1e43      	subs	r3, r0, #1
 800fa54:	42a1      	cmp	r1, r4
 800fa56:	d008      	beq.n	800fa6a <memmove+0x28>
 800fa58:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa60:	e7f8      	b.n	800fa54 <memmove+0x12>
 800fa62:	4402      	add	r2, r0
 800fa64:	4601      	mov	r1, r0
 800fa66:	428a      	cmp	r2, r1
 800fa68:	d100      	bne.n	800fa6c <memmove+0x2a>
 800fa6a:	bd10      	pop	{r4, pc}
 800fa6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa74:	e7f7      	b.n	800fa66 <memmove+0x24>
	...

0800fa78 <__assert_func>:
 800fa78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa7a:	4614      	mov	r4, r2
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	4b09      	ldr	r3, [pc, #36]	@ (800faa4 <__assert_func+0x2c>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4605      	mov	r5, r0
 800fa84:	68d8      	ldr	r0, [r3, #12]
 800fa86:	b14c      	cbz	r4, 800fa9c <__assert_func+0x24>
 800fa88:	4b07      	ldr	r3, [pc, #28]	@ (800faa8 <__assert_func+0x30>)
 800fa8a:	9100      	str	r1, [sp, #0]
 800fa8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa90:	4906      	ldr	r1, [pc, #24]	@ (800faac <__assert_func+0x34>)
 800fa92:	462b      	mov	r3, r5
 800fa94:	f000 f850 	bl	800fb38 <fiprintf>
 800fa98:	f000 f860 	bl	800fb5c <abort>
 800fa9c:	4b04      	ldr	r3, [pc, #16]	@ (800fab0 <__assert_func+0x38>)
 800fa9e:	461c      	mov	r4, r3
 800faa0:	e7f3      	b.n	800fa8a <__assert_func+0x12>
 800faa2:	bf00      	nop
 800faa4:	200001b4 	.word	0x200001b4
 800faa8:	080104d7 	.word	0x080104d7
 800faac:	080104e4 	.word	0x080104e4
 800fab0:	08010512 	.word	0x08010512

0800fab4 <_calloc_r>:
 800fab4:	b570      	push	{r4, r5, r6, lr}
 800fab6:	fba1 5402 	umull	r5, r4, r1, r2
 800faba:	b934      	cbnz	r4, 800faca <_calloc_r+0x16>
 800fabc:	4629      	mov	r1, r5
 800fabe:	f7fb fb2d 	bl	800b11c <_malloc_r>
 800fac2:	4606      	mov	r6, r0
 800fac4:	b928      	cbnz	r0, 800fad2 <_calloc_r+0x1e>
 800fac6:	4630      	mov	r0, r6
 800fac8:	bd70      	pop	{r4, r5, r6, pc}
 800faca:	220c      	movs	r2, #12
 800facc:	6002      	str	r2, [r0, #0]
 800face:	2600      	movs	r6, #0
 800fad0:	e7f9      	b.n	800fac6 <_calloc_r+0x12>
 800fad2:	462a      	mov	r2, r5
 800fad4:	4621      	mov	r1, r4
 800fad6:	f7fd f9ea 	bl	800ceae <memset>
 800fada:	e7f4      	b.n	800fac6 <_calloc_r+0x12>

0800fadc <_realloc_r>:
 800fadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae0:	4607      	mov	r7, r0
 800fae2:	4614      	mov	r4, r2
 800fae4:	460d      	mov	r5, r1
 800fae6:	b921      	cbnz	r1, 800faf2 <_realloc_r+0x16>
 800fae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faec:	4611      	mov	r1, r2
 800faee:	f7fb bb15 	b.w	800b11c <_malloc_r>
 800faf2:	b92a      	cbnz	r2, 800fb00 <_realloc_r+0x24>
 800faf4:	f7fe f954 	bl	800dda0 <_free_r>
 800faf8:	4625      	mov	r5, r4
 800fafa:	4628      	mov	r0, r5
 800fafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb00:	f000 f833 	bl	800fb6a <_malloc_usable_size_r>
 800fb04:	4284      	cmp	r4, r0
 800fb06:	4606      	mov	r6, r0
 800fb08:	d802      	bhi.n	800fb10 <_realloc_r+0x34>
 800fb0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb0e:	d8f4      	bhi.n	800fafa <_realloc_r+0x1e>
 800fb10:	4621      	mov	r1, r4
 800fb12:	4638      	mov	r0, r7
 800fb14:	f7fb fb02 	bl	800b11c <_malloc_r>
 800fb18:	4680      	mov	r8, r0
 800fb1a:	b908      	cbnz	r0, 800fb20 <_realloc_r+0x44>
 800fb1c:	4645      	mov	r5, r8
 800fb1e:	e7ec      	b.n	800fafa <_realloc_r+0x1e>
 800fb20:	42b4      	cmp	r4, r6
 800fb22:	4622      	mov	r2, r4
 800fb24:	4629      	mov	r1, r5
 800fb26:	bf28      	it	cs
 800fb28:	4632      	movcs	r2, r6
 800fb2a:	f7fd fac0 	bl	800d0ae <memcpy>
 800fb2e:	4629      	mov	r1, r5
 800fb30:	4638      	mov	r0, r7
 800fb32:	f7fe f935 	bl	800dda0 <_free_r>
 800fb36:	e7f1      	b.n	800fb1c <_realloc_r+0x40>

0800fb38 <fiprintf>:
 800fb38:	b40e      	push	{r1, r2, r3}
 800fb3a:	b503      	push	{r0, r1, lr}
 800fb3c:	4601      	mov	r1, r0
 800fb3e:	ab03      	add	r3, sp, #12
 800fb40:	4805      	ldr	r0, [pc, #20]	@ (800fb58 <fiprintf+0x20>)
 800fb42:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb46:	6800      	ldr	r0, [r0, #0]
 800fb48:	9301      	str	r3, [sp, #4]
 800fb4a:	f000 f83f 	bl	800fbcc <_vfiprintf_r>
 800fb4e:	b002      	add	sp, #8
 800fb50:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb54:	b003      	add	sp, #12
 800fb56:	4770      	bx	lr
 800fb58:	200001b4 	.word	0x200001b4

0800fb5c <abort>:
 800fb5c:	b508      	push	{r3, lr}
 800fb5e:	2006      	movs	r0, #6
 800fb60:	f000 fa08 	bl	800ff74 <raise>
 800fb64:	2001      	movs	r0, #1
 800fb66:	f7f2 fbe5 	bl	8002334 <_exit>

0800fb6a <_malloc_usable_size_r>:
 800fb6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb6e:	1f18      	subs	r0, r3, #4
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	bfbc      	itt	lt
 800fb74:	580b      	ldrlt	r3, [r1, r0]
 800fb76:	18c0      	addlt	r0, r0, r3
 800fb78:	4770      	bx	lr

0800fb7a <__sfputc_r>:
 800fb7a:	6893      	ldr	r3, [r2, #8]
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	b410      	push	{r4}
 800fb82:	6093      	str	r3, [r2, #8]
 800fb84:	da08      	bge.n	800fb98 <__sfputc_r+0x1e>
 800fb86:	6994      	ldr	r4, [r2, #24]
 800fb88:	42a3      	cmp	r3, r4
 800fb8a:	db01      	blt.n	800fb90 <__sfputc_r+0x16>
 800fb8c:	290a      	cmp	r1, #10
 800fb8e:	d103      	bne.n	800fb98 <__sfputc_r+0x1e>
 800fb90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb94:	f000 b932 	b.w	800fdfc <__swbuf_r>
 800fb98:	6813      	ldr	r3, [r2, #0]
 800fb9a:	1c58      	adds	r0, r3, #1
 800fb9c:	6010      	str	r0, [r2, #0]
 800fb9e:	7019      	strb	r1, [r3, #0]
 800fba0:	4608      	mov	r0, r1
 800fba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <__sfputs_r>:
 800fba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbaa:	4606      	mov	r6, r0
 800fbac:	460f      	mov	r7, r1
 800fbae:	4614      	mov	r4, r2
 800fbb0:	18d5      	adds	r5, r2, r3
 800fbb2:	42ac      	cmp	r4, r5
 800fbb4:	d101      	bne.n	800fbba <__sfputs_r+0x12>
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	e007      	b.n	800fbca <__sfputs_r+0x22>
 800fbba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbbe:	463a      	mov	r2, r7
 800fbc0:	4630      	mov	r0, r6
 800fbc2:	f7ff ffda 	bl	800fb7a <__sfputc_r>
 800fbc6:	1c43      	adds	r3, r0, #1
 800fbc8:	d1f3      	bne.n	800fbb2 <__sfputs_r+0xa>
 800fbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fbcc <_vfiprintf_r>:
 800fbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd0:	460d      	mov	r5, r1
 800fbd2:	b09d      	sub	sp, #116	@ 0x74
 800fbd4:	4614      	mov	r4, r2
 800fbd6:	4698      	mov	r8, r3
 800fbd8:	4606      	mov	r6, r0
 800fbda:	b118      	cbz	r0, 800fbe4 <_vfiprintf_r+0x18>
 800fbdc:	6a03      	ldr	r3, [r0, #32]
 800fbde:	b90b      	cbnz	r3, 800fbe4 <_vfiprintf_r+0x18>
 800fbe0:	f7fd f89c 	bl	800cd1c <__sinit>
 800fbe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbe6:	07d9      	lsls	r1, r3, #31
 800fbe8:	d405      	bmi.n	800fbf6 <_vfiprintf_r+0x2a>
 800fbea:	89ab      	ldrh	r3, [r5, #12]
 800fbec:	059a      	lsls	r2, r3, #22
 800fbee:	d402      	bmi.n	800fbf6 <_vfiprintf_r+0x2a>
 800fbf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbf2:	f7fd fa5a 	bl	800d0aa <__retarget_lock_acquire_recursive>
 800fbf6:	89ab      	ldrh	r3, [r5, #12]
 800fbf8:	071b      	lsls	r3, r3, #28
 800fbfa:	d501      	bpl.n	800fc00 <_vfiprintf_r+0x34>
 800fbfc:	692b      	ldr	r3, [r5, #16]
 800fbfe:	b99b      	cbnz	r3, 800fc28 <_vfiprintf_r+0x5c>
 800fc00:	4629      	mov	r1, r5
 800fc02:	4630      	mov	r0, r6
 800fc04:	f000 f938 	bl	800fe78 <__swsetup_r>
 800fc08:	b170      	cbz	r0, 800fc28 <_vfiprintf_r+0x5c>
 800fc0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc0c:	07dc      	lsls	r4, r3, #31
 800fc0e:	d504      	bpl.n	800fc1a <_vfiprintf_r+0x4e>
 800fc10:	f04f 30ff 	mov.w	r0, #4294967295
 800fc14:	b01d      	add	sp, #116	@ 0x74
 800fc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1a:	89ab      	ldrh	r3, [r5, #12]
 800fc1c:	0598      	lsls	r0, r3, #22
 800fc1e:	d4f7      	bmi.n	800fc10 <_vfiprintf_r+0x44>
 800fc20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc22:	f7fd fa43 	bl	800d0ac <__retarget_lock_release_recursive>
 800fc26:	e7f3      	b.n	800fc10 <_vfiprintf_r+0x44>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc2c:	2320      	movs	r3, #32
 800fc2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc32:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc36:	2330      	movs	r3, #48	@ 0x30
 800fc38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fde8 <_vfiprintf_r+0x21c>
 800fc3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc40:	f04f 0901 	mov.w	r9, #1
 800fc44:	4623      	mov	r3, r4
 800fc46:	469a      	mov	sl, r3
 800fc48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc4c:	b10a      	cbz	r2, 800fc52 <_vfiprintf_r+0x86>
 800fc4e:	2a25      	cmp	r2, #37	@ 0x25
 800fc50:	d1f9      	bne.n	800fc46 <_vfiprintf_r+0x7a>
 800fc52:	ebba 0b04 	subs.w	fp, sl, r4
 800fc56:	d00b      	beq.n	800fc70 <_vfiprintf_r+0xa4>
 800fc58:	465b      	mov	r3, fp
 800fc5a:	4622      	mov	r2, r4
 800fc5c:	4629      	mov	r1, r5
 800fc5e:	4630      	mov	r0, r6
 800fc60:	f7ff ffa2 	bl	800fba8 <__sfputs_r>
 800fc64:	3001      	adds	r0, #1
 800fc66:	f000 80a7 	beq.w	800fdb8 <_vfiprintf_r+0x1ec>
 800fc6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc6c:	445a      	add	r2, fp
 800fc6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc70:	f89a 3000 	ldrb.w	r3, [sl]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f000 809f 	beq.w	800fdb8 <_vfiprintf_r+0x1ec>
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc84:	f10a 0a01 	add.w	sl, sl, #1
 800fc88:	9304      	str	r3, [sp, #16]
 800fc8a:	9307      	str	r3, [sp, #28]
 800fc8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc90:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc92:	4654      	mov	r4, sl
 800fc94:	2205      	movs	r2, #5
 800fc96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc9a:	4853      	ldr	r0, [pc, #332]	@ (800fde8 <_vfiprintf_r+0x21c>)
 800fc9c:	f7f0 fa98 	bl	80001d0 <memchr>
 800fca0:	9a04      	ldr	r2, [sp, #16]
 800fca2:	b9d8      	cbnz	r0, 800fcdc <_vfiprintf_r+0x110>
 800fca4:	06d1      	lsls	r1, r2, #27
 800fca6:	bf44      	itt	mi
 800fca8:	2320      	movmi	r3, #32
 800fcaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcae:	0713      	lsls	r3, r2, #28
 800fcb0:	bf44      	itt	mi
 800fcb2:	232b      	movmi	r3, #43	@ 0x2b
 800fcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcbe:	d015      	beq.n	800fcec <_vfiprintf_r+0x120>
 800fcc0:	9a07      	ldr	r2, [sp, #28]
 800fcc2:	4654      	mov	r4, sl
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	f04f 0c0a 	mov.w	ip, #10
 800fcca:	4621      	mov	r1, r4
 800fccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcd0:	3b30      	subs	r3, #48	@ 0x30
 800fcd2:	2b09      	cmp	r3, #9
 800fcd4:	d94b      	bls.n	800fd6e <_vfiprintf_r+0x1a2>
 800fcd6:	b1b0      	cbz	r0, 800fd06 <_vfiprintf_r+0x13a>
 800fcd8:	9207      	str	r2, [sp, #28]
 800fcda:	e014      	b.n	800fd06 <_vfiprintf_r+0x13a>
 800fcdc:	eba0 0308 	sub.w	r3, r0, r8
 800fce0:	fa09 f303 	lsl.w	r3, r9, r3
 800fce4:	4313      	orrs	r3, r2
 800fce6:	9304      	str	r3, [sp, #16]
 800fce8:	46a2      	mov	sl, r4
 800fcea:	e7d2      	b.n	800fc92 <_vfiprintf_r+0xc6>
 800fcec:	9b03      	ldr	r3, [sp, #12]
 800fcee:	1d19      	adds	r1, r3, #4
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	9103      	str	r1, [sp, #12]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	bfbb      	ittet	lt
 800fcf8:	425b      	neglt	r3, r3
 800fcfa:	f042 0202 	orrlt.w	r2, r2, #2
 800fcfe:	9307      	strge	r3, [sp, #28]
 800fd00:	9307      	strlt	r3, [sp, #28]
 800fd02:	bfb8      	it	lt
 800fd04:	9204      	strlt	r2, [sp, #16]
 800fd06:	7823      	ldrb	r3, [r4, #0]
 800fd08:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd0a:	d10a      	bne.n	800fd22 <_vfiprintf_r+0x156>
 800fd0c:	7863      	ldrb	r3, [r4, #1]
 800fd0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd10:	d132      	bne.n	800fd78 <_vfiprintf_r+0x1ac>
 800fd12:	9b03      	ldr	r3, [sp, #12]
 800fd14:	1d1a      	adds	r2, r3, #4
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	9203      	str	r2, [sp, #12]
 800fd1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd1e:	3402      	adds	r4, #2
 800fd20:	9305      	str	r3, [sp, #20]
 800fd22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fdf8 <_vfiprintf_r+0x22c>
 800fd26:	7821      	ldrb	r1, [r4, #0]
 800fd28:	2203      	movs	r2, #3
 800fd2a:	4650      	mov	r0, sl
 800fd2c:	f7f0 fa50 	bl	80001d0 <memchr>
 800fd30:	b138      	cbz	r0, 800fd42 <_vfiprintf_r+0x176>
 800fd32:	9b04      	ldr	r3, [sp, #16]
 800fd34:	eba0 000a 	sub.w	r0, r0, sl
 800fd38:	2240      	movs	r2, #64	@ 0x40
 800fd3a:	4082      	lsls	r2, r0
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	3401      	adds	r4, #1
 800fd40:	9304      	str	r3, [sp, #16]
 800fd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd46:	4829      	ldr	r0, [pc, #164]	@ (800fdec <_vfiprintf_r+0x220>)
 800fd48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd4c:	2206      	movs	r2, #6
 800fd4e:	f7f0 fa3f 	bl	80001d0 <memchr>
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d03f      	beq.n	800fdd6 <_vfiprintf_r+0x20a>
 800fd56:	4b26      	ldr	r3, [pc, #152]	@ (800fdf0 <_vfiprintf_r+0x224>)
 800fd58:	bb1b      	cbnz	r3, 800fda2 <_vfiprintf_r+0x1d6>
 800fd5a:	9b03      	ldr	r3, [sp, #12]
 800fd5c:	3307      	adds	r3, #7
 800fd5e:	f023 0307 	bic.w	r3, r3, #7
 800fd62:	3308      	adds	r3, #8
 800fd64:	9303      	str	r3, [sp, #12]
 800fd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd68:	443b      	add	r3, r7
 800fd6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd6c:	e76a      	b.n	800fc44 <_vfiprintf_r+0x78>
 800fd6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd72:	460c      	mov	r4, r1
 800fd74:	2001      	movs	r0, #1
 800fd76:	e7a8      	b.n	800fcca <_vfiprintf_r+0xfe>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	3401      	adds	r4, #1
 800fd7c:	9305      	str	r3, [sp, #20]
 800fd7e:	4619      	mov	r1, r3
 800fd80:	f04f 0c0a 	mov.w	ip, #10
 800fd84:	4620      	mov	r0, r4
 800fd86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd8a:	3a30      	subs	r2, #48	@ 0x30
 800fd8c:	2a09      	cmp	r2, #9
 800fd8e:	d903      	bls.n	800fd98 <_vfiprintf_r+0x1cc>
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d0c6      	beq.n	800fd22 <_vfiprintf_r+0x156>
 800fd94:	9105      	str	r1, [sp, #20]
 800fd96:	e7c4      	b.n	800fd22 <_vfiprintf_r+0x156>
 800fd98:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e7f0      	b.n	800fd84 <_vfiprintf_r+0x1b8>
 800fda2:	ab03      	add	r3, sp, #12
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	462a      	mov	r2, r5
 800fda8:	4b12      	ldr	r3, [pc, #72]	@ (800fdf4 <_vfiprintf_r+0x228>)
 800fdaa:	a904      	add	r1, sp, #16
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7fc f965 	bl	800c07c <_printf_float>
 800fdb2:	4607      	mov	r7, r0
 800fdb4:	1c78      	adds	r0, r7, #1
 800fdb6:	d1d6      	bne.n	800fd66 <_vfiprintf_r+0x19a>
 800fdb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdba:	07d9      	lsls	r1, r3, #31
 800fdbc:	d405      	bmi.n	800fdca <_vfiprintf_r+0x1fe>
 800fdbe:	89ab      	ldrh	r3, [r5, #12]
 800fdc0:	059a      	lsls	r2, r3, #22
 800fdc2:	d402      	bmi.n	800fdca <_vfiprintf_r+0x1fe>
 800fdc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdc6:	f7fd f971 	bl	800d0ac <__retarget_lock_release_recursive>
 800fdca:	89ab      	ldrh	r3, [r5, #12]
 800fdcc:	065b      	lsls	r3, r3, #25
 800fdce:	f53f af1f 	bmi.w	800fc10 <_vfiprintf_r+0x44>
 800fdd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdd4:	e71e      	b.n	800fc14 <_vfiprintf_r+0x48>
 800fdd6:	ab03      	add	r3, sp, #12
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	462a      	mov	r2, r5
 800fddc:	4b05      	ldr	r3, [pc, #20]	@ (800fdf4 <_vfiprintf_r+0x228>)
 800fdde:	a904      	add	r1, sp, #16
 800fde0:	4630      	mov	r0, r6
 800fde2:	f7fc fbe3 	bl	800c5ac <_printf_i>
 800fde6:	e7e4      	b.n	800fdb2 <_vfiprintf_r+0x1e6>
 800fde8:	080104ab 	.word	0x080104ab
 800fdec:	080104b5 	.word	0x080104b5
 800fdf0:	0800c07d 	.word	0x0800c07d
 800fdf4:	0800fba9 	.word	0x0800fba9
 800fdf8:	080104b1 	.word	0x080104b1

0800fdfc <__swbuf_r>:
 800fdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfe:	460e      	mov	r6, r1
 800fe00:	4614      	mov	r4, r2
 800fe02:	4605      	mov	r5, r0
 800fe04:	b118      	cbz	r0, 800fe0e <__swbuf_r+0x12>
 800fe06:	6a03      	ldr	r3, [r0, #32]
 800fe08:	b90b      	cbnz	r3, 800fe0e <__swbuf_r+0x12>
 800fe0a:	f7fc ff87 	bl	800cd1c <__sinit>
 800fe0e:	69a3      	ldr	r3, [r4, #24]
 800fe10:	60a3      	str	r3, [r4, #8]
 800fe12:	89a3      	ldrh	r3, [r4, #12]
 800fe14:	071a      	lsls	r2, r3, #28
 800fe16:	d501      	bpl.n	800fe1c <__swbuf_r+0x20>
 800fe18:	6923      	ldr	r3, [r4, #16]
 800fe1a:	b943      	cbnz	r3, 800fe2e <__swbuf_r+0x32>
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f000 f82a 	bl	800fe78 <__swsetup_r>
 800fe24:	b118      	cbz	r0, 800fe2e <__swbuf_r+0x32>
 800fe26:	f04f 37ff 	mov.w	r7, #4294967295
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	6922      	ldr	r2, [r4, #16]
 800fe32:	1a98      	subs	r0, r3, r2
 800fe34:	6963      	ldr	r3, [r4, #20]
 800fe36:	b2f6      	uxtb	r6, r6
 800fe38:	4283      	cmp	r3, r0
 800fe3a:	4637      	mov	r7, r6
 800fe3c:	dc05      	bgt.n	800fe4a <__swbuf_r+0x4e>
 800fe3e:	4621      	mov	r1, r4
 800fe40:	4628      	mov	r0, r5
 800fe42:	f7ff fd63 	bl	800f90c <_fflush_r>
 800fe46:	2800      	cmp	r0, #0
 800fe48:	d1ed      	bne.n	800fe26 <__swbuf_r+0x2a>
 800fe4a:	68a3      	ldr	r3, [r4, #8]
 800fe4c:	3b01      	subs	r3, #1
 800fe4e:	60a3      	str	r3, [r4, #8]
 800fe50:	6823      	ldr	r3, [r4, #0]
 800fe52:	1c5a      	adds	r2, r3, #1
 800fe54:	6022      	str	r2, [r4, #0]
 800fe56:	701e      	strb	r6, [r3, #0]
 800fe58:	6962      	ldr	r2, [r4, #20]
 800fe5a:	1c43      	adds	r3, r0, #1
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d004      	beq.n	800fe6a <__swbuf_r+0x6e>
 800fe60:	89a3      	ldrh	r3, [r4, #12]
 800fe62:	07db      	lsls	r3, r3, #31
 800fe64:	d5e1      	bpl.n	800fe2a <__swbuf_r+0x2e>
 800fe66:	2e0a      	cmp	r6, #10
 800fe68:	d1df      	bne.n	800fe2a <__swbuf_r+0x2e>
 800fe6a:	4621      	mov	r1, r4
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	f7ff fd4d 	bl	800f90c <_fflush_r>
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d0d9      	beq.n	800fe2a <__swbuf_r+0x2e>
 800fe76:	e7d6      	b.n	800fe26 <__swbuf_r+0x2a>

0800fe78 <__swsetup_r>:
 800fe78:	b538      	push	{r3, r4, r5, lr}
 800fe7a:	4b29      	ldr	r3, [pc, #164]	@ (800ff20 <__swsetup_r+0xa8>)
 800fe7c:	4605      	mov	r5, r0
 800fe7e:	6818      	ldr	r0, [r3, #0]
 800fe80:	460c      	mov	r4, r1
 800fe82:	b118      	cbz	r0, 800fe8c <__swsetup_r+0x14>
 800fe84:	6a03      	ldr	r3, [r0, #32]
 800fe86:	b90b      	cbnz	r3, 800fe8c <__swsetup_r+0x14>
 800fe88:	f7fc ff48 	bl	800cd1c <__sinit>
 800fe8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe90:	0719      	lsls	r1, r3, #28
 800fe92:	d422      	bmi.n	800feda <__swsetup_r+0x62>
 800fe94:	06da      	lsls	r2, r3, #27
 800fe96:	d407      	bmi.n	800fea8 <__swsetup_r+0x30>
 800fe98:	2209      	movs	r2, #9
 800fe9a:	602a      	str	r2, [r5, #0]
 800fe9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fea0:	81a3      	strh	r3, [r4, #12]
 800fea2:	f04f 30ff 	mov.w	r0, #4294967295
 800fea6:	e033      	b.n	800ff10 <__swsetup_r+0x98>
 800fea8:	0758      	lsls	r0, r3, #29
 800feaa:	d512      	bpl.n	800fed2 <__swsetup_r+0x5a>
 800feac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800feae:	b141      	cbz	r1, 800fec2 <__swsetup_r+0x4a>
 800feb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800feb4:	4299      	cmp	r1, r3
 800feb6:	d002      	beq.n	800febe <__swsetup_r+0x46>
 800feb8:	4628      	mov	r0, r5
 800feba:	f7fd ff71 	bl	800dda0 <_free_r>
 800febe:	2300      	movs	r3, #0
 800fec0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fec8:	81a3      	strh	r3, [r4, #12]
 800feca:	2300      	movs	r3, #0
 800fecc:	6063      	str	r3, [r4, #4]
 800fece:	6923      	ldr	r3, [r4, #16]
 800fed0:	6023      	str	r3, [r4, #0]
 800fed2:	89a3      	ldrh	r3, [r4, #12]
 800fed4:	f043 0308 	orr.w	r3, r3, #8
 800fed8:	81a3      	strh	r3, [r4, #12]
 800feda:	6923      	ldr	r3, [r4, #16]
 800fedc:	b94b      	cbnz	r3, 800fef2 <__swsetup_r+0x7a>
 800fede:	89a3      	ldrh	r3, [r4, #12]
 800fee0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fee8:	d003      	beq.n	800fef2 <__swsetup_r+0x7a>
 800feea:	4621      	mov	r1, r4
 800feec:	4628      	mov	r0, r5
 800feee:	f000 f883 	bl	800fff8 <__smakebuf_r>
 800fef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fef6:	f013 0201 	ands.w	r2, r3, #1
 800fefa:	d00a      	beq.n	800ff12 <__swsetup_r+0x9a>
 800fefc:	2200      	movs	r2, #0
 800fefe:	60a2      	str	r2, [r4, #8]
 800ff00:	6962      	ldr	r2, [r4, #20]
 800ff02:	4252      	negs	r2, r2
 800ff04:	61a2      	str	r2, [r4, #24]
 800ff06:	6922      	ldr	r2, [r4, #16]
 800ff08:	b942      	cbnz	r2, 800ff1c <__swsetup_r+0xa4>
 800ff0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff0e:	d1c5      	bne.n	800fe9c <__swsetup_r+0x24>
 800ff10:	bd38      	pop	{r3, r4, r5, pc}
 800ff12:	0799      	lsls	r1, r3, #30
 800ff14:	bf58      	it	pl
 800ff16:	6962      	ldrpl	r2, [r4, #20]
 800ff18:	60a2      	str	r2, [r4, #8]
 800ff1a:	e7f4      	b.n	800ff06 <__swsetup_r+0x8e>
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	e7f7      	b.n	800ff10 <__swsetup_r+0x98>
 800ff20:	200001b4 	.word	0x200001b4

0800ff24 <_raise_r>:
 800ff24:	291f      	cmp	r1, #31
 800ff26:	b538      	push	{r3, r4, r5, lr}
 800ff28:	4605      	mov	r5, r0
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	d904      	bls.n	800ff38 <_raise_r+0x14>
 800ff2e:	2316      	movs	r3, #22
 800ff30:	6003      	str	r3, [r0, #0]
 800ff32:	f04f 30ff 	mov.w	r0, #4294967295
 800ff36:	bd38      	pop	{r3, r4, r5, pc}
 800ff38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff3a:	b112      	cbz	r2, 800ff42 <_raise_r+0x1e>
 800ff3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff40:	b94b      	cbnz	r3, 800ff56 <_raise_r+0x32>
 800ff42:	4628      	mov	r0, r5
 800ff44:	f000 f830 	bl	800ffa8 <_getpid_r>
 800ff48:	4622      	mov	r2, r4
 800ff4a:	4601      	mov	r1, r0
 800ff4c:	4628      	mov	r0, r5
 800ff4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff52:	f000 b817 	b.w	800ff84 <_kill_r>
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d00a      	beq.n	800ff70 <_raise_r+0x4c>
 800ff5a:	1c59      	adds	r1, r3, #1
 800ff5c:	d103      	bne.n	800ff66 <_raise_r+0x42>
 800ff5e:	2316      	movs	r3, #22
 800ff60:	6003      	str	r3, [r0, #0]
 800ff62:	2001      	movs	r0, #1
 800ff64:	e7e7      	b.n	800ff36 <_raise_r+0x12>
 800ff66:	2100      	movs	r1, #0
 800ff68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	4798      	blx	r3
 800ff70:	2000      	movs	r0, #0
 800ff72:	e7e0      	b.n	800ff36 <_raise_r+0x12>

0800ff74 <raise>:
 800ff74:	4b02      	ldr	r3, [pc, #8]	@ (800ff80 <raise+0xc>)
 800ff76:	4601      	mov	r1, r0
 800ff78:	6818      	ldr	r0, [r3, #0]
 800ff7a:	f7ff bfd3 	b.w	800ff24 <_raise_r>
 800ff7e:	bf00      	nop
 800ff80:	200001b4 	.word	0x200001b4

0800ff84 <_kill_r>:
 800ff84:	b538      	push	{r3, r4, r5, lr}
 800ff86:	4d07      	ldr	r5, [pc, #28]	@ (800ffa4 <_kill_r+0x20>)
 800ff88:	2300      	movs	r3, #0
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	4608      	mov	r0, r1
 800ff8e:	4611      	mov	r1, r2
 800ff90:	602b      	str	r3, [r5, #0]
 800ff92:	f7f2 f9bf 	bl	8002314 <_kill>
 800ff96:	1c43      	adds	r3, r0, #1
 800ff98:	d102      	bne.n	800ffa0 <_kill_r+0x1c>
 800ff9a:	682b      	ldr	r3, [r5, #0]
 800ff9c:	b103      	cbz	r3, 800ffa0 <_kill_r+0x1c>
 800ff9e:	6023      	str	r3, [r4, #0]
 800ffa0:	bd38      	pop	{r3, r4, r5, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20005adc 	.word	0x20005adc

0800ffa8 <_getpid_r>:
 800ffa8:	f7f2 b9ac 	b.w	8002304 <_getpid>

0800ffac <__swhatbuf_r>:
 800ffac:	b570      	push	{r4, r5, r6, lr}
 800ffae:	460c      	mov	r4, r1
 800ffb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb4:	2900      	cmp	r1, #0
 800ffb6:	b096      	sub	sp, #88	@ 0x58
 800ffb8:	4615      	mov	r5, r2
 800ffba:	461e      	mov	r6, r3
 800ffbc:	da0d      	bge.n	800ffda <__swhatbuf_r+0x2e>
 800ffbe:	89a3      	ldrh	r3, [r4, #12]
 800ffc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ffc4:	f04f 0100 	mov.w	r1, #0
 800ffc8:	bf14      	ite	ne
 800ffca:	2340      	movne	r3, #64	@ 0x40
 800ffcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	6031      	str	r1, [r6, #0]
 800ffd4:	602b      	str	r3, [r5, #0]
 800ffd6:	b016      	add	sp, #88	@ 0x58
 800ffd8:	bd70      	pop	{r4, r5, r6, pc}
 800ffda:	466a      	mov	r2, sp
 800ffdc:	f000 f848 	bl	8010070 <_fstat_r>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	dbec      	blt.n	800ffbe <__swhatbuf_r+0x12>
 800ffe4:	9901      	ldr	r1, [sp, #4]
 800ffe6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ffea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ffee:	4259      	negs	r1, r3
 800fff0:	4159      	adcs	r1, r3
 800fff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fff6:	e7eb      	b.n	800ffd0 <__swhatbuf_r+0x24>

0800fff8 <__smakebuf_r>:
 800fff8:	898b      	ldrh	r3, [r1, #12]
 800fffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fffc:	079d      	lsls	r5, r3, #30
 800fffe:	4606      	mov	r6, r0
 8010000:	460c      	mov	r4, r1
 8010002:	d507      	bpl.n	8010014 <__smakebuf_r+0x1c>
 8010004:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010008:	6023      	str	r3, [r4, #0]
 801000a:	6123      	str	r3, [r4, #16]
 801000c:	2301      	movs	r3, #1
 801000e:	6163      	str	r3, [r4, #20]
 8010010:	b003      	add	sp, #12
 8010012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010014:	ab01      	add	r3, sp, #4
 8010016:	466a      	mov	r2, sp
 8010018:	f7ff ffc8 	bl	800ffac <__swhatbuf_r>
 801001c:	9f00      	ldr	r7, [sp, #0]
 801001e:	4605      	mov	r5, r0
 8010020:	4639      	mov	r1, r7
 8010022:	4630      	mov	r0, r6
 8010024:	f7fb f87a 	bl	800b11c <_malloc_r>
 8010028:	b948      	cbnz	r0, 801003e <__smakebuf_r+0x46>
 801002a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801002e:	059a      	lsls	r2, r3, #22
 8010030:	d4ee      	bmi.n	8010010 <__smakebuf_r+0x18>
 8010032:	f023 0303 	bic.w	r3, r3, #3
 8010036:	f043 0302 	orr.w	r3, r3, #2
 801003a:	81a3      	strh	r3, [r4, #12]
 801003c:	e7e2      	b.n	8010004 <__smakebuf_r+0xc>
 801003e:	89a3      	ldrh	r3, [r4, #12]
 8010040:	6020      	str	r0, [r4, #0]
 8010042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010046:	81a3      	strh	r3, [r4, #12]
 8010048:	9b01      	ldr	r3, [sp, #4]
 801004a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801004e:	b15b      	cbz	r3, 8010068 <__smakebuf_r+0x70>
 8010050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010054:	4630      	mov	r0, r6
 8010056:	f000 f81d 	bl	8010094 <_isatty_r>
 801005a:	b128      	cbz	r0, 8010068 <__smakebuf_r+0x70>
 801005c:	89a3      	ldrh	r3, [r4, #12]
 801005e:	f023 0303 	bic.w	r3, r3, #3
 8010062:	f043 0301 	orr.w	r3, r3, #1
 8010066:	81a3      	strh	r3, [r4, #12]
 8010068:	89a3      	ldrh	r3, [r4, #12]
 801006a:	431d      	orrs	r5, r3
 801006c:	81a5      	strh	r5, [r4, #12]
 801006e:	e7cf      	b.n	8010010 <__smakebuf_r+0x18>

08010070 <_fstat_r>:
 8010070:	b538      	push	{r3, r4, r5, lr}
 8010072:	4d07      	ldr	r5, [pc, #28]	@ (8010090 <_fstat_r+0x20>)
 8010074:	2300      	movs	r3, #0
 8010076:	4604      	mov	r4, r0
 8010078:	4608      	mov	r0, r1
 801007a:	4611      	mov	r1, r2
 801007c:	602b      	str	r3, [r5, #0]
 801007e:	f7f2 f9a9 	bl	80023d4 <_fstat>
 8010082:	1c43      	adds	r3, r0, #1
 8010084:	d102      	bne.n	801008c <_fstat_r+0x1c>
 8010086:	682b      	ldr	r3, [r5, #0]
 8010088:	b103      	cbz	r3, 801008c <_fstat_r+0x1c>
 801008a:	6023      	str	r3, [r4, #0]
 801008c:	bd38      	pop	{r3, r4, r5, pc}
 801008e:	bf00      	nop
 8010090:	20005adc 	.word	0x20005adc

08010094 <_isatty_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	4d06      	ldr	r5, [pc, #24]	@ (80100b0 <_isatty_r+0x1c>)
 8010098:	2300      	movs	r3, #0
 801009a:	4604      	mov	r4, r0
 801009c:	4608      	mov	r0, r1
 801009e:	602b      	str	r3, [r5, #0]
 80100a0:	f7f2 f9a8 	bl	80023f4 <_isatty>
 80100a4:	1c43      	adds	r3, r0, #1
 80100a6:	d102      	bne.n	80100ae <_isatty_r+0x1a>
 80100a8:	682b      	ldr	r3, [r5, #0]
 80100aa:	b103      	cbz	r3, 80100ae <_isatty_r+0x1a>
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	bd38      	pop	{r3, r4, r5, pc}
 80100b0:	20005adc 	.word	0x20005adc

080100b4 <_init>:
 80100b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b6:	bf00      	nop
 80100b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ba:	bc08      	pop	{r3}
 80100bc:	469e      	mov	lr, r3
 80100be:	4770      	bx	lr

080100c0 <_fini>:
 80100c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c2:	bf00      	nop
 80100c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100c6:	bc08      	pop	{r3}
 80100c8:	469e      	mov	lr, r3
 80100ca:	4770      	bx	lr
