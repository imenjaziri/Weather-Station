
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012764  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  080128f8  080128f8  000138f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fa0  08012fa0  00014204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012fa0  08012fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fa8  08012fa8  00014204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fa8  08012fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012fac  08012fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  08012fb0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fa8  20000204  080131b4  00014204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200061ac  080131b4  000151ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002affb  00000000  00000000  00014234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f78  00000000  00000000  0003f22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002188  00000000  00000000  000451a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019ea  00000000  00000000  00047330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000789f  00000000  00000000  00048d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b7f8  00000000  00000000  000505b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011da2d  00000000  00000000  0007bdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001997de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a374  00000000  00000000  00199824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001a3b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080128dc 	.word	0x080128dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	080128dc 	.word	0x080128dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001042:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001044:	4a2f      	ldr	r2, [pc, #188]	@ (8001104 <MX_ADC1_Init+0xe4>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001048:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001062:	2204      	movs	r2, #4
 8001064:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001068:	2200      	movs	r2, #0
 800106a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800106e:	2201      	movs	r2, #1
 8001070:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001074:	2201      	movs	r2, #1
 8001076:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_ADC1_Init+0xe0>)
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_ADC1_Init+0xe0>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a2:	4817      	ldr	r0, [pc, #92]	@ (8001100 <MX_ADC1_Init+0xe0>)
 80010a4:	f001 fff0 	bl	8003088 <HAL_ADC_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ae:	f000 fe79 	bl	8001da4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4810      	ldr	r0, [pc, #64]	@ (8001100 <MX_ADC1_Init+0xe0>)
 80010be:	f002 fd4b 	bl	8003b58 <HAL_ADCEx_MultiModeConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010c8:	f000 fe6c 	bl	8001da4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_ADC1_Init+0xe8>)
 80010ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d0:	2306      	movs	r3, #6
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d8:	237f      	movs	r3, #127	@ 0x7f
 80010da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010dc:	2304      	movs	r3, #4
 80010de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_ADC1_Init+0xe0>)
 80010ea:	f002 f91d 	bl	8003328 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010f4:	f000 fe56 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	@ 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000220 	.word	0x20000220
 8001104:	50040000 	.word	0x50040000
 8001108:	14f00020 	.word	0x14f00020

0800110c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001122:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001124:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001126:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800112e:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001134:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001140:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001142:	2204      	movs	r2, #4
 8001144:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001148:	2200      	movs	r2, #0
 800114a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800114e:	2201      	movs	r2, #1
 8001150:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001154:	2201      	movs	r2, #1
 8001156:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001166:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001168:	2200      	movs	r2, #0
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001176:	2200      	movs	r2, #0
 8001178:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 8001184:	f001 ff80 	bl	8003088 <HAL_ADC_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800118e:	f000 fe09 	bl	8001da4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_ADC2_Init+0xc4>)
 8001194:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001196:	2306      	movs	r3, #6
 8001198:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119e:	237f      	movs	r3, #127	@ 0x7f
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a2:	2304      	movs	r3, #4
 80011a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_ADC2_Init+0xbc>)
 80011b0:	f002 f8ba 	bl	8003328 <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80011ba:	f000 fdf3 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000284 	.word	0x20000284
 80011cc:	50040100 	.word	0x50040100
 80011d0:	04300002 	.word	0x04300002

080011d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	@ 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a33      	ldr	r2, [pc, #204]	@ (80012c0 <HAL_ADC_MspInit+0xec>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12e      	bne.n	8001254 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a31      	ldr	r2, [pc, #196]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 80011fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001200:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10b      	bne.n	8001220 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001208:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a2e      	ldr	r2, [pc, #184]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800120e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	4a28      	ldr	r2, [pc, #160]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122c:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800123c:	230b      	movs	r3, #11
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124e:	f002 fea3 	bl	8003f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001252:	e031      	b.n	80012b8 <HAL_ADC_MspInit+0xe4>
  else if(adcHandle->Instance==ADC2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1c      	ldr	r2, [pc, #112]	@ (80012cc <HAL_ADC_MspInit+0xf8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d12c      	bne.n	80012b8 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	4a17      	ldr	r2, [pc, #92]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 8001266:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <HAL_ADC_MspInit+0xf0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001276:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800127a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128c:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_ADC_MspInit+0xf4>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012a4:	230b      	movs	r3, #11
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <HAL_ADC_MspInit+0xfc>)
 80012b4:	f002 fe70 	bl	8003f98 <HAL_GPIO_Init>
}
 80012b8:	bf00      	nop
 80012ba:	3730      	adds	r7, #48	@ 0x30
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	50040000 	.word	0x50040000
 80012c4:	200002e8 	.word	0x200002e8
 80012c8:	40021000 	.word	0x40021000
 80012cc:	50040100 	.word	0x50040100
 80012d0:	48000800 	.word	0x48000800

080012d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <vApplicationGetIdleTaskMemory+0x2c>)
 80012e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <vApplicationGetIdleTaskMemory+0x30>)
 80012ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000308 	.word	0x20000308
 8001304:	200003a8 	.word	0x200003a8

08001308 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <vApplicationGetTimerTaskMemory+0x2c>)
 8001318:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <vApplicationGetTimerTaskMemory+0x30>)
 800131e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001326:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	200005a8 	.word	0x200005a8
 8001338:	20000648 	.word	0x20000648

0800133c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b0a6      	sub	sp, #152	@ 0x98
 8001340:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of FanTimer */
  osTimerDef(FanTimer, FanTimerCallback);
 8001342:	4b3c      	ldr	r3, [pc, #240]	@ (8001434 <MX_FREERTOS_Init+0xf8>)
 8001344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  FanTimerHandle = osTimerCreate(osTimer(FanTimer), osTimerPeriodic, NULL);
 800134e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001352:	2200      	movs	r2, #0
 8001354:	2101      	movs	r1, #1
 8001356:	4618      	mov	r0, r3
 8001358:	f009 f978 	bl	800a64c <osTimerCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a36      	ldr	r2, [pc, #216]	@ (8001438 <MX_FREERTOS_Init+0xfc>)
 8001360:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	GpsToIhm=xQueueCreate(10,sizeof(GPS_IHM));
 8001362:	2200      	movs	r2, #0
 8001364:	210c      	movs	r1, #12
 8001366:	200a      	movs	r0, #10
 8001368:	f009 fb83 	bl	800aa72 <xQueueGenericCreate>
 800136c:	4603      	mov	r3, r0
 800136e:	4a33      	ldr	r2, [pc, #204]	@ (800143c <MX_FREERTOS_Init+0x100>)
 8001370:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001372:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <MX_FREERTOS_Init+0x104>)
 8001374:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001378:	461d      	mov	r5, r3
 800137a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001386:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f009 f8fc 	bl	800a58a <osThreadCreate>
 8001392:	4603      	mov	r3, r0
 8001394:	4a2b      	ldr	r2, [pc, #172]	@ (8001444 <MX_FREERTOS_Init+0x108>)
 8001396:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 8001398:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <MX_FREERTOS_Init+0x10c>)
 800139a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800139e:	461d      	mov	r5, r3
 80013a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 80013ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f009 f8e9 	bl	800a58a <osThreadCreate>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a24      	ldr	r2, [pc, #144]	@ (800144c <MX_FREERTOS_Init+0x110>)
 80013bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS_Task */
  osThreadDef(GPS_Task, Start_GPS_Task, osPriorityIdle, 0, 1024);
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <MX_FREERTOS_Init+0x114>)
 80013c0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80013c4:	461d      	mov	r5, r3
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPS_TaskHandle = osThreadCreate(osThread(GPS_Task), NULL);
 80013d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f009 f8d6 	bl	800a58a <osThreadCreate>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <MX_FREERTOS_Init+0x118>)
 80013e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of SatellitePredic */
  osThreadDef(SatellitePredic, Start_SatellitePrediction_Task, osPriorityIdle, 0, 1024);
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_FREERTOS_Init+0x11c>)
 80013e6:	f107 0420 	add.w	r4, r7, #32
 80013ea:	461d      	mov	r5, r3
 80013ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SatellitePredicHandle = osThreadCreate(osThread(SatellitePredic), NULL);
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f009 f8c3 	bl	800a58a <osThreadCreate>
 8001404:	4603      	mov	r3, r0
 8001406:	4a15      	ldr	r2, [pc, #84]	@ (800145c <MX_FREERTOS_Init+0x120>)
 8001408:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sensors_Task */
  osThreadDef(Sensors_Task, Start_Sensors_Task, osPriorityIdle, 0, 1024);
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <MX_FREERTOS_Init+0x124>)
 800140c:	1d3c      	adds	r4, r7, #4
 800140e:	461d      	mov	r5, r3
 8001410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sensors_TaskHandle = osThreadCreate(osThread(Sensors_Task), NULL);
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f009 f8b2 	bl	800a58a <osThreadCreate>
 8001426:	4603      	mov	r3, r0
 8001428:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <MX_FREERTOS_Init+0x128>)
 800142a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800142c:	bf00      	nop
 800142e:	3798      	adds	r7, #152	@ 0x98
 8001430:	46bd      	mov	sp, r7
 8001432:	bdb0      	pop	{r4, r5, r7, pc}
 8001434:	0800210d 	.word	0x0800210d
 8001438:	20000304 	.word	0x20000304
 800143c:	200002ec 	.word	0x200002ec
 8001440:	08012904 	.word	0x08012904
 8001444:	200002f0 	.word	0x200002f0
 8001448:	0801292c 	.word	0x0801292c
 800144c:	200002f4 	.word	0x200002f4
 8001450:	08012954 	.word	0x08012954
 8001454:	200002f8 	.word	0x200002f8
 8001458:	08012980 	.word	0x08012980
 800145c:	200002fc 	.word	0x200002fc
 8001460:	080129ac 	.word	0x080129ac
 8001464:	20000300 	.word	0x20000300

08001468 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f009 f8d6 	bl	800a622 <osDelay>
 8001476:	e7fb      	b.n	8001470 <StartDefaultTask+0x8>

08001478 <Start_IHM_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IHM_Task */
__weak void Start_IHM_Task(void const * argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_IHM_Task */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f009 f8ce 	bl	800a622 <osDelay>
 8001486:	e7fb      	b.n	8001480 <Start_IHM_Task+0x8>

08001488 <Start_SatellitePrediction_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SatellitePrediction_Task */
__weak void Start_SatellitePrediction_Task(void const * argument)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SatellitePrediction_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f009 f8c6 	bl	800a622 <osDelay>
 8001496:	e7fb      	b.n	8001490 <Start_SatellitePrediction_Task+0x8>

08001498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	4a35      	ldr	r2, [pc, #212]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ba:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a29      	ldr	r2, [pc, #164]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <MX_GPIO_Init+0xf0>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <MX_GPIO_Init+0xf0>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2120      	movs	r1, #32
 8001512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001516:	f002 ff01 	bl	800431c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800151a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001520:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4816      	ldr	r0, [pc, #88]	@ (800158c <MX_GPIO_Init+0xf4>)
 8001532:	f002 fd31 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001536:	2302      	movs	r3, #2
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001540:	2302      	movs	r3, #2
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4810      	ldr	r0, [pc, #64]	@ (800158c <MX_GPIO_Init+0xf4>)
 800154c:	f002 fd24 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001550:	2320      	movs	r3, #32
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156a:	f002 fd15 	bl	8003f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	2007      	movs	r0, #7
 8001574:	f002 fc58 	bl	8003e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001578:	2007      	movs	r0, #7
 800157a:	f002 fc71 	bl	8003e60 <HAL_NVIC_EnableIRQ>

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	48000800 	.word	0x48000800

08001590 <GPS_Init>:
int hr=0,min=0,days=0,mon=0,yr=0;
int daychange = 0;
GPS_t GPS;

void GPS_Init()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	4903      	ldr	r1, [pc, #12]	@ (80015a4 <GPS_Init+0x14>)
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <GPS_Init+0x18>)
 800159a:	f007 fca9 	bl	8008ef0 <HAL_UART_Receive_IT>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000a48 	.word	0x20000a48
 80015a8:	20000e9c 	.word	0x20000e9c

080015ac <GPS_validate>:


int GPS_validate(char *nmeastr){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i=0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
	calculated_check=0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if(nmeastr[i] == '$')
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b24      	cmp	r3, #36	@ 0x24
 80015c6:	d103      	bne.n	80015d0 <GPS_validate+0x24>
		i++;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80015ce:	e00c      	b.n	80015ea <GPS_validate+0x3e>
		return 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e047      	b.n	8001664 <GPS_validate+0xb8>
		calculated_check ^= nmeastr[i];// calculate the checksum
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4053      	eors	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
		i++;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	3301      	adds	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
	while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <GPS_validate+0x5c>
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8001600:	d002      	beq.n	8001608 <GPS_validate+0x5c>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b4a      	cmp	r3, #74	@ 0x4a
 8001606:	dde5      	ble.n	80015d4 <GPS_validate+0x28>
	}

	if(i >= 75){
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b4a      	cmp	r3, #74	@ 0x4a
 800160c:	dd01      	ble.n	8001612 <GPS_validate+0x66>
		return 0;// the string was too long so return an error
 800160e:	2300      	movs	r3, #0
 8001610:	e028      	b.n	8001664 <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*'){
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b2a      	cmp	r3, #42	@ 0x2a
 800161c:	d119      	bne.n	8001652 <GPS_validate+0xa6>
		check[0] = nmeastr[i+1];    //put hex chars in check string
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i+2];
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3302      	adds	r3, #2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	73bb      	strb	r3, [r7, #14]
	}
	else
		return 0;// no checksum separator found there for invalid

	sprintf(checkcalcstr,"%02X",calculated_check);
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	490a      	ldr	r1, [pc, #40]	@ (800166c <GPS_validate+0xc0>)
 8001642:	4618      	mov	r0, r3
 8001644:	f00d ffb6 	bl	800f5b4 <siprintf>
	return((checkcalcstr[0] == check[0])
 8001648:	7a3a      	ldrb	r2, [r7, #8]
 800164a:	7b3b      	ldrb	r3, [r7, #12]
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800164c:	429a      	cmp	r2, r3
 800164e:	d108      	bne.n	8001662 <GPS_validate+0xb6>
 8001650:	e001      	b.n	8001656 <GPS_validate+0xaa>
		return 0;// no checksum separator found there for invalid
 8001652:	2300      	movs	r3, #0
 8001654:	e006      	b.n	8001664 <GPS_validate+0xb8>
			&& (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001656:	7a7a      	ldrb	r2, [r7, #9]
 8001658:	7b7b      	ldrb	r3, [r7, #13]
 800165a:	429a      	cmp	r2, r3
 800165c:	d101      	bne.n	8001662 <GPS_validate+0xb6>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <GPS_validate+0xb8>
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	080129c8 	.word	0x080129c8

08001670 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af08      	add	r7, sp, #32
 8001676:	6078      	str	r0, [r7, #4]
	if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001678:	2206      	movs	r2, #6
 800167a:	4952      	ldr	r1, [pc, #328]	@ (80017c4 <GPS_parse+0x154>)
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f00e f834 	bl	800f6ea <strncmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d137      	bne.n	80016f8 <GPS_parse+0x88>
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001688:	4b4f      	ldr	r3, [pc, #316]	@ (80017c8 <GPS_parse+0x158>)
 800168a:	9307      	str	r3, [sp, #28]
 800168c:	4b4f      	ldr	r3, [pc, #316]	@ (80017cc <GPS_parse+0x15c>)
 800168e:	9306      	str	r3, [sp, #24]
 8001690:	4b4f      	ldr	r3, [pc, #316]	@ (80017d0 <GPS_parse+0x160>)
 8001692:	9305      	str	r3, [sp, #20]
 8001694:	4b4f      	ldr	r3, [pc, #316]	@ (80017d4 <GPS_parse+0x164>)
 8001696:	9304      	str	r3, [sp, #16]
 8001698:	4b4f      	ldr	r3, [pc, #316]	@ (80017d8 <GPS_parse+0x168>)
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	4b4f      	ldr	r3, [pc, #316]	@ (80017dc <GPS_parse+0x16c>)
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	4b4f      	ldr	r3, [pc, #316]	@ (80017e0 <GPS_parse+0x170>)
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	4b4f      	ldr	r3, [pc, #316]	@ (80017e4 <GPS_parse+0x174>)
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4b4f      	ldr	r3, [pc, #316]	@ (80017e8 <GPS_parse+0x178>)
 80016aa:	4a50      	ldr	r2, [pc, #320]	@ (80017ec <GPS_parse+0x17c>)
 80016ac:	4950      	ldr	r1, [pc, #320]	@ (80017f0 <GPS_parse+0x180>)
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f00d ffa2 	bl	800f5f8 <siscanf>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dd73      	ble.n	80017a2 <GPS_parse+0x132>
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80016ba:	4b4e      	ldr	r3, [pc, #312]	@ (80017f4 <GPS_parse+0x184>)
 80016bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80016c0:	4b4c      	ldr	r3, [pc, #304]	@ (80017f4 <GPS_parse+0x184>)
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	4618      	mov	r0, r3
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	f000 f8b9 	bl	8001840 <GPS_nmea_to_dec>
 80016ce:	eef0 7a40 	vmov.f32	s15, s0
 80016d2:	4b48      	ldr	r3, [pc, #288]	@ (80017f4 <GPS_parse+0x184>)
 80016d4:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80016d8:	4b46      	ldr	r3, [pc, #280]	@ (80017f4 <GPS_parse+0x184>)
 80016da:	edd3 7a03 	vldr	s15, [r3, #12]
 80016de:	4b45      	ldr	r3, [pc, #276]	@ (80017f4 <GPS_parse+0x184>)
 80016e0:	7e5b      	ldrb	r3, [r3, #25]
 80016e2:	4618      	mov	r0, r3
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	f000 f8aa 	bl	8001840 <GPS_nmea_to_dec>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	4b40      	ldr	r3, [pc, #256]	@ (80017f4 <GPS_parse+0x184>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]
			return;
 80016f6:	e062      	b.n	80017be <GPS_parse+0x14e>
		}
	}
	else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80016f8:	2206      	movs	r2, #6
 80016fa:	493f      	ldr	r1, [pc, #252]	@ (80017f8 <GPS_parse+0x188>)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f00d fff4 	bl	800f6ea <strncmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d115      	bne.n	8001734 <GPS_parse+0xc4>
		if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001708:	4b3c      	ldr	r3, [pc, #240]	@ (80017fc <GPS_parse+0x18c>)
 800170a:	9305      	str	r3, [sp, #20]
 800170c:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <GPS_parse+0x190>)
 800170e:	9304      	str	r3, [sp, #16]
 8001710:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <GPS_parse+0x194>)
 8001712:	9303      	str	r3, [sp, #12]
 8001714:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <GPS_parse+0x16c>)
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <GPS_parse+0x170>)
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	4b31      	ldr	r3, [pc, #196]	@ (80017e4 <GPS_parse+0x174>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <GPS_parse+0x178>)
 8001722:	4a32      	ldr	r2, [pc, #200]	@ (80017ec <GPS_parse+0x17c>)
 8001724:	4938      	ldr	r1, [pc, #224]	@ (8001808 <GPS_parse+0x198>)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f00d ff66 	bl	800f5f8 <siscanf>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	dd37      	ble.n	80017a2 <GPS_parse+0x132>
			return;
 8001732:	e044      	b.n	80017be <GPS_parse+0x14e>

	}
	else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001734:	2206      	movs	r2, #6
 8001736:	4935      	ldr	r1, [pc, #212]	@ (800180c <GPS_parse+0x19c>)
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f00d ffd6 	bl	800f6ea <strncmp>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d111      	bne.n	8001768 <GPS_parse+0xf8>
		if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001744:	4b32      	ldr	r3, [pc, #200]	@ (8001810 <GPS_parse+0x1a0>)
 8001746:	9303      	str	r3, [sp, #12]
 8001748:	4b28      	ldr	r3, [pc, #160]	@ (80017ec <GPS_parse+0x17c>)
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <GPS_parse+0x16c>)
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <GPS_parse+0x170>)
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <GPS_parse+0x174>)
 8001756:	4a24      	ldr	r2, [pc, #144]	@ (80017e8 <GPS_parse+0x178>)
 8001758:	492e      	ldr	r1, [pc, #184]	@ (8001814 <GPS_parse+0x1a4>)
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f00d ff4c 	bl	800f5f8 <siscanf>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	dd1d      	ble.n	80017a2 <GPS_parse+0x132>
			return;
 8001766:	e02a      	b.n	80017be <GPS_parse+0x14e>
	}
	else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001768:	2206      	movs	r2, #6
 800176a:	492b      	ldr	r1, [pc, #172]	@ (8001818 <GPS_parse+0x1a8>)
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f00d ffbc 	bl	800f6ea <strncmp>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d114      	bne.n	80017a2 <GPS_parse+0x132>
		if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001778:	4b28      	ldr	r3, [pc, #160]	@ (800181c <GPS_parse+0x1ac>)
 800177a:	9305      	str	r3, [sp, #20]
 800177c:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <GPS_parse+0x1b0>)
 800177e:	9304      	str	r3, [sp, #16]
 8001780:	4b28      	ldr	r3, [pc, #160]	@ (8001824 <GPS_parse+0x1b4>)
 8001782:	9303      	str	r3, [sp, #12]
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <GPS_parse+0x194>)
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <GPS_parse+0x1b8>)
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <GPS_parse+0x1bc>)
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <GPS_parse+0x1c0>)
 8001792:	4a28      	ldr	r2, [pc, #160]	@ (8001834 <GPS_parse+0x1c4>)
 8001794:	4928      	ldr	r1, [pc, #160]	@ (8001838 <GPS_parse+0x1c8>)
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f00d ff2e 	bl	800f5f8 <siscanf>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	dc0c      	bgt.n	80017bc <GPS_parse+0x14c>
			return;
	}
	MyGps.alt_gps=GPS.msl_altitude;
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <GPS_parse+0x184>)
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	4a25      	ldr	r2, [pc, #148]	@ (800183c <GPS_parse+0x1cc>)
 80017a8:	6013      	str	r3, [r2, #0]
	MyGps.lat_gps=GPS.dec_latitude;
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <GPS_parse+0x184>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a23      	ldr	r2, [pc, #140]	@ (800183c <GPS_parse+0x1cc>)
 80017b0:	6053      	str	r3, [r2, #4]
	MyGps.long_gps=GPS.dec_longitude;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <GPS_parse+0x184>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a21      	ldr	r2, [pc, #132]	@ (800183c <GPS_parse+0x1cc>)
 80017b8:	6093      	str	r3, [r2, #8]
 80017ba:	e000      	b.n	80017be <GPS_parse+0x14e>
			return;
 80017bc:	bf00      	nop
}
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	080129d0 	.word	0x080129d0
 80017c8:	20000a90 	.word	0x20000a90
 80017cc:	20000a8c 	.word	0x20000a8c
 80017d0:	20000a88 	.word	0x20000a88
 80017d4:	20000a84 	.word	0x20000a84
 80017d8:	20000a80 	.word	0x20000a80
 80017dc:	20000a7d 	.word	0x20000a7d
 80017e0:	20000a70 	.word	0x20000a70
 80017e4:	20000a7c 	.word	0x20000a7c
 80017e8:	20000a74 	.word	0x20000a74
 80017ec:	20000a78 	.word	0x20000a78
 80017f0:	080129d8 	.word	0x080129d8
 80017f4:	20000a64 	.word	0x20000a64
 80017f8:	08012a00 	.word	0x08012a00
 80017fc:	20000a9c 	.word	0x20000a9c
 8001800:	20000a98 	.word	0x20000a98
 8001804:	20000a94 	.word	0x20000a94
 8001808:	08012a08 	.word	0x08012a08
 800180c:	08012a28 	.word	0x08012a28
 8001810:	20000aa0 	.word	0x20000aa0
 8001814:	08012a30 	.word	0x08012a30
 8001818:	08012a4c 	.word	0x08012a4c
 800181c:	20000ab8 	.word	0x20000ab8
 8001820:	20000ab4 	.word	0x20000ab4
 8001824:	20000ab1 	.word	0x20000ab1
 8001828:	20000ab0 	.word	0x20000ab0
 800182c:	20000aac 	.word	0x20000aac
 8001830:	20000aa8 	.word	0x20000aa8
 8001834:	20000aa4 	.word	0x20000aa4
 8001838:	08012a54 	.word	0x08012a54
 800183c:	20000000 	.word	0x20000000

08001840 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	ed87 0a01 	vstr	s0, [r7, #4]
 800184a:	4603      	mov	r3, r0
 800184c:	70fb      	strb	r3, [r7, #3]
	int degree = (int)(deg_coord/100);
 800184e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001852:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80018d4 <GPS_nmea_to_dec+0x94>
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185e:	ee17 3a90 	vmov	r3, s15
 8001862:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree*100;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2264      	movs	r2, #100	@ 0x64
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001874:	ed97 7a01 	vldr	s14, [r7, #4]
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	edc7 7a03 	vstr	s15, [r7, #12]
	float dec_deg = minutes / 60;
 8001880:	ed97 7a03 	vldr	s14, [r7, #12]
 8001884:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80018d8 <GPS_nmea_to_dec+0x98>
 8001888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188c:	edc7 7a02 	vstr	s15, [r7, #8]
	float decimal = degree + dec_deg;
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189a:	ed97 7a02 	vldr	s14, [r7, #8]
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	edc7 7a05 	vstr	s15, [r7, #20]
	if (nsew == 'S' || nsew == 'W') { // return negative
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	2b53      	cmp	r3, #83	@ 0x53
 80018aa:	d002      	beq.n	80018b2 <GPS_nmea_to_dec+0x72>
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	2b57      	cmp	r3, #87	@ 0x57
 80018b0:	d105      	bne.n	80018be <GPS_nmea_to_dec+0x7e>
		decimal *= -1;
 80018b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b6:	eef1 7a67 	vneg.f32	s15, s15
 80018ba:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return decimal;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	ee07 3a90 	vmov	s15, r3
}
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	42c80000 	.word	0x42c80000
 80018d8:	42700000 	.word	0x42700000

080018dc <GPS_Nmea_time>:
void GPS_Nmea_time(){
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
	uint32_t time_int = (uint32_t)GPS.utc_time;
 80018e2:	4b3d      	ldr	r3, [pc, #244]	@ (80019d8 <GPS_Nmea_time+0xfc>)
 80018e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80018e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ec:	ee17 3a90 	vmov	r3, s15
 80018f0:	607b      	str	r3, [r7, #4]
	hr = time_int/10000 + MyGps.offset/100;   // get the hours from the 6 digit number
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a39      	ldr	r2, [pc, #228]	@ (80019dc <GPS_Nmea_time+0x100>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0b5a      	lsrs	r2, r3, #13
 80018fc:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <GPS_Nmea_time+0x104>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	4938      	ldr	r1, [pc, #224]	@ (80019e4 <GPS_Nmea_time+0x108>)
 8001902:	fb81 0103 	smull	r0, r1, r1, r3
 8001906:	1149      	asrs	r1, r1, #5
 8001908:	17db      	asrs	r3, r3, #31
 800190a:	1acb      	subs	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	461a      	mov	r2, r3
 8001910:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 8001912:	601a      	str	r2, [r3, #0]

	min = (time_int/100)%100 + MyGps.offset%100;  // get the minutes from the 6 digit number
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a33      	ldr	r2, [pc, #204]	@ (80019e4 <GPS_Nmea_time+0x108>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	095a      	lsrs	r2, r3, #5
 800191e:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <GPS_Nmea_time+0x108>)
 8001920:	fba3 1302 	umull	r1, r3, r3, r2
 8001924:	095b      	lsrs	r3, r3, #5
 8001926:	2164      	movs	r1, #100	@ 0x64
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a2c      	ldr	r2, [pc, #176]	@ (80019e0 <GPS_Nmea_time+0x104>)
 8001930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001932:	492c      	ldr	r1, [pc, #176]	@ (80019e4 <GPS_Nmea_time+0x108>)
 8001934:	fb81 0102 	smull	r0, r1, r1, r2
 8001938:	1148      	asrs	r0, r1, #5
 800193a:	17d1      	asrs	r1, r2, #31
 800193c:	1a41      	subs	r1, r0, r1
 800193e:	2064      	movs	r0, #100	@ 0x64
 8001940:	fb00 f101 	mul.w	r1, r0, r1
 8001944:	1a51      	subs	r1, r2, r1
 8001946:	460a      	mov	r2, r1
 8001948:	4413      	add	r3, r2
 800194a:	461a      	mov	r2, r3
 800194c:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <GPS_Nmea_time+0x110>)
 800194e:	601a      	str	r2, [r3, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001950:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <GPS_Nmea_time+0x110>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b3b      	cmp	r3, #59	@ 0x3b
 8001956:	dd09      	ble.n	800196c <GPS_Nmea_time+0x90>
	{
		min = min-60;
 8001958:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <GPS_Nmea_time+0x110>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3b3c      	subs	r3, #60	@ 0x3c
 800195e:	4a23      	ldr	r2, [pc, #140]	@ (80019ec <GPS_Nmea_time+0x110>)
 8001960:	6013      	str	r3, [r2, #0]
		hr++;
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4a1f      	ldr	r2, [pc, #124]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 800196a:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	da09      	bge.n	8001988 <GPS_Nmea_time+0xac>
	{
		hr=24+hr;
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3318      	adds	r3, #24
 800197a:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 800197c:	6013      	str	r3, [r2, #0]
		daychange--;
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <GPS_Nmea_time+0x114>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3b01      	subs	r3, #1
 8001984:	4a1a      	ldr	r2, [pc, #104]	@ (80019f0 <GPS_Nmea_time+0x114>)
 8001986:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b17      	cmp	r3, #23
 800198e:	dd09      	ble.n	80019a4 <GPS_Nmea_time+0xc8>
	{
		hr=hr-24;
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3b18      	subs	r3, #24
 8001996:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 8001998:	6013      	str	r3, [r2, #0]
		daychange++;
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <GPS_Nmea_time+0x114>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a13      	ldr	r2, [pc, #76]	@ (80019f0 <GPS_Nmea_time+0x114>)
 80019a2:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	MyGps.hours= hr;
 80019a4:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <GPS_Nmea_time+0x10c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <GPS_Nmea_time+0x104>)
 80019aa:	60d3      	str	r3, [r2, #12]
	MyGps.minutes= min;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <GPS_Nmea_time+0x110>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <GPS_Nmea_time+0x104>)
 80019b2:	6113      	str	r3, [r2, #16]
	MyGps.seconds = time_int%100;
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <GPS_Nmea_time+0x108>)
 80019b8:	fba3 1302 	umull	r1, r3, r3, r2
 80019bc:	095b      	lsrs	r3, r3, #5
 80019be:	2164      	movs	r1, #100	@ 0x64
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <GPS_Nmea_time+0x104>)
 80019ca:	615a      	str	r2, [r3, #20]

}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	20000a64 	.word	0x20000a64
 80019dc:	d1b71759 	.word	0xd1b71759
 80019e0:	20000000 	.word	0x20000000
 80019e4:	51eb851f 	.word	0x51eb851f
 80019e8:	20000a4c 	.word	0x20000a4c
 80019ec:	20000a50 	.word	0x20000a50
 80019f0:	20000a60 	.word	0x20000a60

080019f4 <GPS_Nmea_Date>:
void GPS_Nmea_Date(){
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	// Date in the format 280222
		days = GPS.date/10000;
 80019f8:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <GPS_Nmea_Date+0x8c>)
 80019fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fc:	4a21      	ldr	r2, [pc, #132]	@ (8001a84 <GPS_Nmea_Date+0x90>)
 80019fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001a02:	1312      	asrs	r2, r2, #12
 8001a04:	17db      	asrs	r3, r3, #31
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <GPS_Nmea_Date+0x94>)
 8001a0a:	6013      	str	r3, [r2, #0]
		mon = (GPS.date/100)%100;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <GPS_Nmea_Date+0x8c>)
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a10:	4a1e      	ldr	r2, [pc, #120]	@ (8001a8c <GPS_Nmea_Date+0x98>)
 8001a12:	fb82 1203 	smull	r1, r2, r2, r3
 8001a16:	1152      	asrs	r2, r2, #5
 8001a18:	17db      	asrs	r3, r3, #31
 8001a1a:	1ad2      	subs	r2, r2, r3
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <GPS_Nmea_Date+0x98>)
 8001a1e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a22:	1159      	asrs	r1, r3, #5
 8001a24:	17d3      	asrs	r3, r2, #31
 8001a26:	1acb      	subs	r3, r1, r3
 8001a28:	2164      	movs	r1, #100	@ 0x64
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	4a17      	ldr	r2, [pc, #92]	@ (8001a90 <GPS_Nmea_Date+0x9c>)
 8001a32:	6013      	str	r3, [r2, #0]
		yr = GPS.date%100;
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <GPS_Nmea_Date+0x8c>)
 8001a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <GPS_Nmea_Date+0x98>)
 8001a3a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a3e:	1159      	asrs	r1, r3, #5
 8001a40:	17d3      	asrs	r3, r2, #31
 8001a42:	1acb      	subs	r3, r1, r3
 8001a44:	2164      	movs	r1, #100	@ 0x64
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	4a11      	ldr	r2, [pc, #68]	@ (8001a94 <GPS_Nmea_Date+0xa0>)
 8001a4e:	6013      	str	r3, [r2, #0]

		days = days+daychange;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <GPS_Nmea_Date+0x94>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <GPS_Nmea_Date+0xa4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <GPS_Nmea_Date+0x94>)
 8001a5c:	6013      	str	r3, [r2, #0]
		MyGps.day=days;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <GPS_Nmea_Date+0x94>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <GPS_Nmea_Date+0xa8>)
 8001a64:	6193      	str	r3, [r2, #24]
		MyGps.month=mon;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <GPS_Nmea_Date+0x9c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <GPS_Nmea_Date+0xa8>)
 8001a6c:	61d3      	str	r3, [r2, #28]
		MyGps.year=yr;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <GPS_Nmea_Date+0xa0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <GPS_Nmea_Date+0xa8>)
 8001a74:	6213      	str	r3, [r2, #32]
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	20000a64 	.word	0x20000a64
 8001a84:	68db8bad 	.word	0x68db8bad
 8001a88:	20000a54 	.word	0x20000a54
 8001a8c:	51eb851f 	.word	0x51eb851f
 8001a90:	20000a58 	.word	0x20000a58
 8001a94:	20000a5c 	.word	0x20000a5c
 8001a98:	20000a60 	.word	0x20000a60
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <MX_I2C2_Init+0x78>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001aac:	4a1b      	ldr	r2, [pc, #108]	@ (8001b1c <MX_I2C2_Init+0x7c>)
 8001aae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab6:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ada:	480e      	ldr	r0, [pc, #56]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001adc:	f002 fc4e 	bl	800437c <HAL_I2C_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ae6:	f000 f95d 	bl	8001da4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aea:	2100      	movs	r1, #0
 8001aec:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001aee:	f003 faf8 	bl	80050e2 <HAL_I2CEx_ConfigAnalogFilter>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001af8:	f000 f954 	bl	8001da4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001afc:	2100      	movs	r1, #0
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <MX_I2C2_Init+0x74>)
 8001b00:	f003 fb3a 	bl	8005178 <HAL_I2CEx_ConfigDigitalFilter>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b0a:	f000 f94b 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000abc 	.word	0x20000abc
 8001b18:	40005800 	.word	0x40005800
 8001b1c:	10d19ce4 	.word	0x10d19ce4

08001b20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b0ac      	sub	sp, #176	@ 0xb0
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2288      	movs	r2, #136	@ 0x88
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f00d fdca 	bl	800f6da <memset>
  if(i2cHandle->Instance==I2C2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a29      	ldr	r2, [pc, #164]	@ (8001bf0 <HAL_I2C_MspInit+0xd0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d14b      	bne.n	8001be8 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f004 f9ed 	bl	8005f3c <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b68:	f000 f91c 	bl	8001da4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <HAL_I2C_MspInit+0xd4>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b70:	4a20      	ldr	r2, [pc, #128]	@ (8001bf4 <HAL_I2C_MspInit+0xd4>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b78:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <HAL_I2C_MspInit+0xd4>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8c:	2312      	movs	r3, #18
 8001b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <HAL_I2C_MspInit+0xd8>)
 8001bac:	f002 f9f4 	bl	8003f98 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bb0:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <HAL_I2C_MspInit+0xd4>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf4 <HAL_I2C_MspInit+0xd4>)
 8001bb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <HAL_I2C_MspInit+0xd4>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2105      	movs	r1, #5
 8001bcc:	2021      	movs	r0, #33	@ 0x21
 8001bce:	f002 f92b 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001bd2:	2021      	movs	r0, #33	@ 0x21
 8001bd4:	f002 f944 	bl	8003e60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2105      	movs	r1, #5
 8001bdc:	2022      	movs	r0, #34	@ 0x22
 8001bde:	f002 f923 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001be2:	2022      	movs	r0, #34	@ 0x22
 8001be4:	f002 f93c 	bl	8003e60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001be8:	bf00      	nop
 8001bea:	37b0      	adds	r7, #176	@ 0xb0
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40005800 	.word	0x40005800
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48000400 	.word	0x48000400

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f001 f876 	bl	8002cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c04:	f000 f822 	bl	8001c4c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c08:	f000 f873 	bl	8001cf2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0c:	f7ff fc44 	bl	8001498 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c10:	f000 ff62 	bl	8002ad8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001c14:	f000 f9b8 	bl	8001f88 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001c18:	f000 ff2e 	bl	8002a78 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001c1c:	f7ff fa00 	bl	8001020 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001c20:	f7ff ff3e 	bl	8001aa0 <MX_I2C2_Init>
  MX_ADC2_Init();
 8001c24:	f7ff fa72 	bl	800110c <MX_ADC2_Init>
  MX_TIM2_Init();
 8001c28:	f000 fd3e 	bl	80026a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c2c:	f000 fd8a 	bl	8002744 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c30:	f000 fe00 	bl	8002834 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Reset_Flag=1;
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <main+0x4c>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001c3a:	f7ff fb7f 	bl	800133c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c3e:	f008 fc9d 	bl	800a57c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c42:	bf00      	nop
 8001c44:	e7fd      	b.n	8001c42 <main+0x46>
 8001c46:	bf00      	nop
 8001c48:	20000b10 	.word	0x20000b10

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	@ 0x58
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2244      	movs	r2, #68	@ 0x44
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00d fd3d 	bl	800f6da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	463b      	mov	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c72:	f003 fadb 	bl	800522c <HAL_PWREx_ControlVoltageScaling>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c7c:	f000 f892 	bl	8001da4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c80:	230a      	movs	r3, #10
 8001c82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c92:	2302      	movs	r3, #2
 8001c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c96:	2302      	movs	r3, #2
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001caa:	2302      	movs	r3, #2
 8001cac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fb10 	bl	80052d8 <HAL_RCC_OscConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001cbe:	f000 f871 	bl	8001da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	2104      	movs	r1, #4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fed8 	bl	8005a90 <HAL_RCC_ClockConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001ce6:	f000 f85d 	bl	8001da4 <Error_Handler>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3758      	adds	r7, #88	@ 0x58
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b0a2      	sub	sp, #136	@ 0x88
 8001cf6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2288      	movs	r2, #136	@ 0x88
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f00d fceb 	bl	800f6da <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d08:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d0a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001d0e:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001d10:	2302      	movs	r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d20:	2302      	movs	r3, #2
 8001d22:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d2c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 f903 	bl	8005f3c <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001d3c:	f000 f832 	bl	8001da4 <Error_Handler>
  }
}
 8001d40:	bf00      	nop
 8001d42:	3788      	adds	r7, #136	@ 0x88
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0e      	ldr	r2, [pc, #56]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001d5a:	f000 ffe9 	bl	8002d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d66:	d10f      	bne.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x40>
  	{
  		HAL_TIM_Base_Stop_IT(&htim2);
 8001d68:	480a      	ldr	r0, [pc, #40]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d6a:	f005 fabd 	bl	80072e8 <HAL_TIM_Base_Stop_IT>
  		debounce_active = 0;
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]

  		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8001d74:	2102      	movs	r1, #2
 8001d76:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001d78:	f002 fab8 	bl	80042ec <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x40>
  		{
  			valid_press = 1;
 8001d82:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
  		}
  	}
  /* USER CODE END Callback 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40001000 	.word	0x40001000
 8001d94:	20000db8 	.word	0x20000db8
 8001d98:	20000b11 	.word	0x20000b11
 8001d9c:	48000800 	.word	0x48000800
 8001da0:	20000b12 	.word	0x20000b12

08001da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <Error_Handler+0x8>

08001db0 <Start_GPS_Task>:
GPS_IHM gps_to_ihm={0.0};
// xQueueHandle GpsToIhm;
extern QueueHandle_t GpsToIhm;

void Start_GPS_Task(void const * argument)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	GpsMessageBufferHandle = xMessageBufferCreate(xGpsMessageBufferSizeBytes);
 8001db8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f009 faa1 	bl	800b308 <xStreamBufferGenericCreate>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <Start_GPS_Task+0x78>)
 8001dca:	6013      	str	r3, [r2, #0]
	if( GpsMessageBufferHandle != NULL )
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <Start_GPS_Task+0x78>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <Start_GPS_Task+0x30>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 8001dd4:	2364      	movs	r3, #100	@ 0x64
 8001dd6:	2222      	movs	r2, #34	@ 0x22
 8001dd8:	4914      	ldr	r1, [pc, #80]	@ (8001e2c <Start_GPS_Task+0x7c>)
 8001dda:	4815      	ldr	r0, [pc, #84]	@ (8001e30 <Start_GPS_Task+0x80>)
 8001ddc:	f006 fffe 	bl	8008ddc <HAL_UART_Transmit>
	}
	GPS_Init();
 8001de0:	f7ff fbd6 	bl	8001590 <GPS_Init>
	for(;;)
	{
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <Start_GPS_Task+0x78>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001df0:	4910      	ldr	r1, [pc, #64]	@ (8001e34 <Start_GPS_Task+0x84>)
 8001df2:	f009 fae7 	bl	800b3c4 <xStreamBufferReceive>
		Sentence_parse((char*)received_nmea);
 8001df6:	480f      	ldr	r0, [pc, #60]	@ (8001e34 <Start_GPS_Task+0x84>)
 8001df8:	f000 f826 	bl	8001e48 <Sentence_parse>
		if (Assign_Values==1){
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <Start_GPS_Task+0x88>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <Start_GPS_Task+0x62>
			GPS_Nmea_time();
 8001e04:	f7ff fd6a 	bl	80018dc <GPS_Nmea_time>
			GPS_Nmea_Date();
 8001e08:	f7ff fdf4 	bl	80019f4 <GPS_Nmea_Date>
			GPS_GetFromRTC(&gps_to_rtc);};
 8001e0c:	480b      	ldr	r0, [pc, #44]	@ (8001e3c <Start_GPS_Task+0x8c>)
 8001e0e:	f000 f837 	bl	8001e80 <GPS_GetFromRTC>
		xQueueSend(GpsToIhm, &gps_to_ihm,0);
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <Start_GPS_Task+0x90>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	2300      	movs	r3, #0
 8001e18:	2200      	movs	r2, #0
 8001e1a:	490a      	ldr	r1, [pc, #40]	@ (8001e44 <Start_GPS_Task+0x94>)
 8001e1c:	f008 fe84 	bl	800ab28 <xQueueGenericSend>

		osDelay(100);
 8001e20:	2064      	movs	r0, #100	@ 0x64
 8001e22:	f008 fbfe 	bl	800a622 <osDelay>
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8001e26:	e7dd      	b.n	8001de4 <Start_GPS_Task+0x34>
 8001e28:	20000b14 	.word	0x20000b14
 8001e2c:	08012a74 	.word	0x08012a74
 8001e30:	20000f24 	.word	0x20000f24
 8001e34:	20000b18 	.word	0x20000b18
 8001e38:	20000d0c 	.word	0x20000d0c
 8001e3c:	20000d10 	.word	0x20000d10
 8001e40:	200002ec 	.word	0x200002ec
 8001e44:	20000d2c 	.word	0x20000d2c

08001e48 <Sentence_parse>:

	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
}

void Sentence_parse(char* str){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	if (GPS_validate(str)) {
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fbab 	bl	80015ac <GPS_validate>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <Sentence_parse+0x22>
		GPS_parse(str);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fc07 	bl	8001670 <GPS_parse>
		Assign_Values=1;
 8001e62:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <Sentence_parse+0x30>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
	}
	else GPS_Valid=0;
}
 8001e68:	e002      	b.n	8001e70 <Sentence_parse+0x28>
	else GPS_Valid=0;
 8001e6a:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <Sentence_parse+0x34>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000d0c 	.word	0x20000d0c
 8001e7c:	20000028 	.word	0x20000028

08001e80 <GPS_GetFromRTC>:
void GPS_GetFromRTC(GPS_RTC *gps_rtc){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	@ 0x30
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time;
	RTC_DateTypeDef rtc_date;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4817      	ldr	r0, [pc, #92]	@ (8001ef0 <GPS_GetFromRTC+0x70>)
 8001e92:	f004 fe34 	bl	8006afe <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4814      	ldr	r0, [pc, #80]	@ (8001ef0 <GPS_GetFromRTC+0x70>)
 8001ea0:	f004 ff10 	bl	8006cc4 <HAL_RTC_GetDate>
	int rtc_minutes_total = rtc_time.Hours * 60 + rtc_time.Minutes;
 8001ea4:	7c3b      	ldrb	r3, [r7, #16]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	7c7b      	ldrb	r3, [r7, #17]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int gps_minutes_total = gps_rtc->hours * 60 + gps_rtc->minutes;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int diff_minutes = abs(rtc_minutes_total - gps_minutes_total);
 8001ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bfb8      	it	lt
 8001ed8:	425b      	neglt	r3, r3
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
	if (diff_minutes >= 5)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	dd02      	ble.n	8001ee8 <GPS_GetFromRTC+0x68>
		RTC_SetFromGPS(gps_rtc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f806 	bl	8001ef4 <RTC_SetFromGPS>
	/*	HAL_UART_Transmit(&huart2, (const uint8_t*)"RTC synchronized from GPS\r\n", strlen("RTC synchronized from GPS\r\n"), 1000);
	} else {
		HAL_UART_Transmit(&huart2, (const uint8_t*)"RTC sync skipped (diff < 5 min)\r\n", strlen("RTC sync skipped (diff < 5 min)\r\n"), 1000);
	}*/
}
 8001ee8:	bf00      	nop
 8001eea:	3730      	adds	r7, #48	@ 0x30
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000d38 	.word	0x20000d38

08001ef4 <RTC_SetFromGPS>:
void RTC_SetFromGPS(GPS_RTC *gps_rtc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

	RTC_TimeTypeDef sTime={0};
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate ={0} ;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
	sTime.Hours = gps_rtc->hours;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = gps_rtc->minutes;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = gps_rtc->seconds;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
	sDate.Year = gps_rtc->year;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	72fb      	strb	r3, [r7, #11]
	sDate.Month = gps_rtc->month;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	727b      	strb	r3, [r7, #9]
	sDate.Date = gps_rtc->day;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	72bb      	strb	r3, [r7, #10]
	sDate.WeekDay = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	480b      	ldr	r0, [pc, #44]	@ (8001f84 <RTC_SetFromGPS+0x90>)
 8001f56:	f004 fd35 	bl	80069c4 <HAL_RTC_SetTime>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <RTC_SetFromGPS+0x70>
	{
		Error_Handler();
 8001f60:	f7ff ff20 	bl	8001da4 <Error_Handler>
	}
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f64:	f107 0308 	add.w	r3, r7, #8
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <RTC_SetFromGPS+0x90>)
 8001f6e:	f004 fe22 	bl	8006bb6 <HAL_RTC_SetDate>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <RTC_SetFromGPS+0x88>
	{
		Error_Handler();
 8001f78:	f7ff ff14 	bl	8001da4 <Error_Handler>
	}
}
 8001f7c:	bf00      	nop
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000d38 	.word	0x20000d38

08001f88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b092      	sub	sp, #72	@ 0x48
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	222c      	movs	r2, #44	@ 0x2c
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00d fb96 	bl	800f6da <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fae:	4b3c      	ldr	r3, [pc, #240]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80020a4 <MX_RTC_Init+0x11c>)
 8001fb2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fba:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fbc:	227f      	movs	r2, #127	@ 0x7f
 8001fbe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fc0:	4b37      	ldr	r3, [pc, #220]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fc2:	22ff      	movs	r2, #255	@ 0xff
 8001fc4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fc6:	4b36      	ldr	r3, [pc, #216]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001fcc:	4b34      	ldr	r3, [pc, #208]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fd2:	4b33      	ldr	r3, [pc, #204]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fd8:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fde:	4830      	ldr	r0, [pc, #192]	@ (80020a0 <MX_RTC_Init+0x118>)
 8001fe0:	f004 fc68 	bl	80068b4 <HAL_RTC_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001fea:	f7ff fedb 	bl	8001da4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 8001fee:	2310      	movs	r3, #16
 8001ff0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 27;
 8001ff4:	231b      	movs	r3, #27
 8001ff6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 30;
 8001ffa:	231e      	movs	r3, #30
 8001ffc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002000:	2300      	movs	r3, #0
 8002002:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002008:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800200c:	2200      	movs	r2, #0
 800200e:	4619      	mov	r1, r3
 8002010:	4823      	ldr	r0, [pc, #140]	@ (80020a0 <MX_RTC_Init+0x118>)
 8002012:	f004 fcd7 	bl	80069c4 <HAL_RTC_SetTime>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800201c:	f7ff fec2 	bl	8001da4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002020:	2302      	movs	r3, #2
 8002022:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JUNE;
 8002026:	2306      	movs	r3, #6
 8002028:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 3;
 800202c:	2303      	movs	r3, #3
 800202e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 25;
 8002032:	2319      	movs	r3, #25
 8002034:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002038:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800203c:	2200      	movs	r2, #0
 800203e:	4619      	mov	r1, r3
 8002040:	4817      	ldr	r0, [pc, #92]	@ (80020a0 <MX_RTC_Init+0x118>)
 8002042:	f004 fdb8 	bl	8006bb6 <HAL_RTC_SetDate>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800204c:	f7ff feaa 	bl	8001da4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800207a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	2200      	movs	r2, #0
 8002084:	4619      	mov	r1, r3
 8002086:	4806      	ldr	r0, [pc, #24]	@ (80020a0 <MX_RTC_Init+0x118>)
 8002088:	f004 fe69 	bl	8006d5e <HAL_RTC_SetAlarm>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8002092:	f7ff fe87 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	3748      	adds	r7, #72	@ 0x48
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000d38 	.word	0x20000d38
 80020a4:	40002800 	.word	0x40002800

080020a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0a4      	sub	sp, #144	@ 0x90
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	2288      	movs	r2, #136	@ 0x88
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00d fb0e 	bl	800f6da <memset>
  if(rtcHandle->Instance==RTC)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a10      	ldr	r2, [pc, #64]	@ (8002104 <HAL_RTC_MspInit+0x5c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d118      	bne.n	80020fa <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 ff2e 	bl	8005f3c <HAL_RCCEx_PeriphCLKConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80020e6:	f7ff fe5d 	bl	8001da4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_RTC_MspInit+0x60>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f0:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <HAL_RTC_MspInit+0x60>)
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020fa:	bf00      	nop
 80020fc:	3790      	adds	r7, #144	@ 0x90
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40002800 	.word	0x40002800
 8002108:	40021000 	.word	0x40021000

0800210c <FanTimerCallback>:
volatile float measured_rpm = 0;
volatile uint32_t last_capture = 0;
const uint8_t duty_cycles[] = {2,10,50,75, 100};
uint8_t duty_index = 0;

void FanTimerCallback(void const *arg) {
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b09f      	sub	sp, #124	@ 0x7c
 8002110:	af02      	add	r7, sp, #8
 8002112:	6078      	str	r0, [r7, #4]
    // 1. Appliquer le duty cycle actuel
    uint8_t duty = duty_cycles[duty_index];
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <FanTimerCallback+0x84>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <FanTimerCallback+0x88>)
 800211c:	5c9b      	ldrb	r3, [r3, r2]
 800211e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    SetFanSpeedPercent(duty);
 8002122:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f85c 	bl	80021e4 <SetFanSpeedPercent>

    // 2. Afficher le duty et le RPM
    char msg[100];
    snprintf(msg, sizeof(msg), "⏱️ Duty: %d%% | RPM: %.2f\r\n", duty, measured_rpm);
 800212c:	f897 406f 	ldrb.w	r4, [r7, #111]	@ 0x6f
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <FanTimerCallback+0x8c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fa07 	bl	8000548 <__aeabi_f2d>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	f107 0008 	add.w	r0, r7, #8
 8002142:	e9cd 2300 	strd	r2, r3, [sp]
 8002146:	4623      	mov	r3, r4
 8002148:	4a14      	ldr	r2, [pc, #80]	@ (800219c <FanTimerCallback+0x90>)
 800214a:	2164      	movs	r1, #100	@ 0x64
 800214c:	f00d f9fc 	bl	800f548 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f88b 	bl	8000270 <strlen>
 800215a:	4603      	mov	r3, r0
 800215c:	b29a      	uxth	r2, r3
 800215e:	f107 0108 	add.w	r1, r7, #8
 8002162:	2364      	movs	r3, #100	@ 0x64
 8002164:	480e      	ldr	r0, [pc, #56]	@ (80021a0 <FanTimerCallback+0x94>)
 8002166:	f006 fe39 	bl	8008ddc <HAL_UART_Transmit>

    // 3. Prochaine valeur
    duty_index = (duty_index + 1) % (sizeof(duty_cycles) / sizeof(duty_cycles[0]));
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <FanTimerCallback+0x84>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	4619      	mov	r1, r3
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <FanTimerCallback+0x98>)
 8002174:	fba3 2301 	umull	r2, r3, r3, r1
 8002178:	089a      	lsrs	r2, r3, #2
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	1aca      	subs	r2, r1, r3
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	4b02      	ldr	r3, [pc, #8]	@ (8002190 <FanTimerCallback+0x84>)
 8002186:	701a      	strb	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	3774      	adds	r7, #116	@ 0x74
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	20000d64 	.word	0x20000d64
 8002194:	08012b10 	.word	0x08012b10
 8002198:	20000d5c 	.word	0x20000d5c
 800219c:	08012ac8 	.word	0x08012ac8
 80021a0:	20000f24 	.word	0x20000f24
 80021a4:	cccccccd 	.word	0xcccccccd

080021a8 <Start_Sensors_Task>:
void Start_Sensors_Task(void const * argument) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 1000);
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*)"Erreur capteur SHT40\r\n", 23, 1000);
	}
	*/
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80021b0:	2100      	movs	r1, #0
 80021b2:	4809      	ldr	r0, [pc, #36]	@ (80021d8 <Start_Sensors_Task+0x30>)
 80021b4:	f005 f928 	bl	8007408 <HAL_TIM_PWM_Start>

	    // 2. Démarrer la capture TACH avec interruption
	    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80021b8:	2100      	movs	r1, #0
 80021ba:	4808      	ldr	r0, [pc, #32]	@ (80021dc <Start_Sensors_Task+0x34>)
 80021bc:	f005 fa8c 	bl	80076d8 <HAL_TIM_IC_Start_IT>
	    osTimerStart(FanTimerHandle, 20000);  // 30 sec
 80021c0:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <Start_Sensors_Task+0x38>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80021c8:	4618      	mov	r0, r3
 80021ca:	f008 fa73 	bl	800a6b4 <osTimerStart>
			char buffer[50];
			snprintf(buffer, sizeof(buffer), "Counter = %d\r\n", counter);
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
		}*/

		osDelay(500);
 80021ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021d2:	f008 fa26 	bl	800a622 <osDelay>
 80021d6:	e7fa      	b.n	80021ce <Start_Sensors_Task+0x26>
 80021d8:	20000e04 	.word	0x20000e04
 80021dc:	20000e50 	.word	0x20000e50
 80021e0:	20000304 	.word	0x20000304

080021e4 <SetFanSpeedPercent>:
	}
}

void SetFanSpeedPercent(uint8_t percent) {
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
    uint32_t pulse = (percent * (__HAL_TIM_GET_AUTORELOAD(&htim3) + 1)) / 100;
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <SetFanSpeedPercent+0x38>)
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021f6:	3201      	adds	r2, #1
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <SetFanSpeedPercent+0x3c>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8002206:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SetFanSpeedPercent+0x38>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000e04 	.word	0x20000e04
 8002220:	51eb851f 	.word	0x51eb851f

08002224 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a18      	ldr	r2, [pc, #96]	@ (8002294 <HAL_TIM_IC_CaptureCallback+0x70>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d129      	bne.n	800228a <HAL_TIM_IC_CaptureCallback+0x66>
        uint32_t now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002236:	2100      	movs	r1, #0
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f005 ff19 	bl	8008070 <HAL_TIM_ReadCapturedValue>
 800223e:	60f8      	str	r0, [r7, #12]
        uint32_t delta = (now >= last_capture) ? now - last_capture : (0xFFFF - last_capture + now);
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	429a      	cmp	r2, r3
 8002248:	d304      	bcc.n	8002254 <HAL_TIM_IC_CaptureCallback+0x30>
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <HAL_TIM_IC_CaptureCallback+0x74>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	e006      	b.n	8002262 <HAL_TIM_IC_CaptureCallback+0x3e>
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002260:	33ff      	adds	r3, #255	@ 0xff
 8002262:	60bb      	str	r3, [r7, #8]
        last_capture = now;
 8002264:	4a0c      	ldr	r2, [pc, #48]	@ (8002298 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6013      	str	r3, [r2, #0]

        if (delta > 0) {
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00c      	beq.n	800228a <HAL_TIM_IC_CaptureCallback+0x66>
            measured_rpm = 60.0f * 1e6f / (delta * 2); // 2 impulsions par tour
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800227c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800229c <HAL_TIM_IC_CaptureCallback+0x78>
 8002280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002286:	edc3 7a00 	vstr	s15, [r3]
        }
    }
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40000800 	.word	0x40000800
 8002298:	20000d60 	.word	0x20000d60
 800229c:	4c64e1c0 	.word	0x4c64e1c0
 80022a0:	20000d5c 	.word	0x20000d5c

080022a4 <HAL_GPIO_EXTI_Callback>:

	return 0;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_1 && debounce_active == 0)
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d10e      	bne.n	80022d2 <HAL_GPIO_EXTI_Callback+0x2e>
 80022b4:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_GPIO_EXTI_Callback+0x38>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_GPIO_EXTI_Callback+0x2e>
	{   debounce_active=1;
 80022be:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <HAL_GPIO_EXTI_Callback+0x38>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 80022cc:	4804      	ldr	r0, [pc, #16]	@ (80022e0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80022ce:	f004 ff9b 	bl	8007208 <HAL_TIM_Base_Start_IT>
	}

}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000b11 	.word	0x20000b11
 80022e0:	20000db8 	.word	0x20000db8

080022e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_MspInit+0x4c>)
 80022ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ee:	4a10      	ldr	r2, [pc, #64]	@ (8002330 <HAL_MspInit+0x4c>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_MspInit+0x4c>)
 80022f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_MspInit+0x4c>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_MspInit+0x4c>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230c:	6593      	str	r3, [r2, #88]	@ 0x58
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_MspInit+0x4c>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	210f      	movs	r1, #15
 800231e:	f06f 0001 	mvn.w	r0, #1
 8002322:	f001 fd81 	bl	8003e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	@ 0x38
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002342:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HAL_InitTick+0xe0>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	4a33      	ldr	r2, [pc, #204]	@ (8002414 <HAL_InitTick+0xe0>)
 8002348:	f043 0310 	orr.w	r3, r3, #16
 800234c:	6593      	str	r3, [r2, #88]	@ 0x58
 800234e:	4b31      	ldr	r3, [pc, #196]	@ (8002414 <HAL_InitTick+0xe0>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800235a:	f107 0210 	add.w	r2, r7, #16
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f003 fd57 	bl	8005e18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800236e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002374:	f003 fd24 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8002378:	6378      	str	r0, [r7, #52]	@ 0x34
 800237a:	e004      	b.n	8002386 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800237c:	f003 fd20 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8002380:	4603      	mov	r3, r0
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002388:	4a23      	ldr	r2, [pc, #140]	@ (8002418 <HAL_InitTick+0xe4>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9b      	lsrs	r3, r3, #18
 8002390:	3b01      	subs	r3, #1
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_InitTick+0xe8>)
 8002396:	4a22      	ldr	r2, [pc, #136]	@ (8002420 <HAL_InitTick+0xec>)
 8002398:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_InitTick+0xe8>)
 800239c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023a2:	4a1e      	ldr	r2, [pc, #120]	@ (800241c <HAL_InitTick+0xe8>)
 80023a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <HAL_InitTick+0xe8>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ae:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_InitTick+0xe8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_InitTick+0xe8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023ba:	4818      	ldr	r0, [pc, #96]	@ (800241c <HAL_InitTick+0xe8>)
 80023bc:	f004 fecc 	bl	8007158 <HAL_TIM_Base_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11b      	bne.n	8002406 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023ce:	4813      	ldr	r0, [pc, #76]	@ (800241c <HAL_InitTick+0xe8>)
 80023d0:	f004 ff1a 	bl	8007208 <HAL_TIM_Base_Start_IT>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d111      	bne.n	8002406 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e2:	2036      	movs	r0, #54	@ 0x36
 80023e4:	f001 fd3c 	bl	8003e60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b0f      	cmp	r3, #15
 80023ec:	d808      	bhi.n	8002400 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023ee:	2200      	movs	r2, #0
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	2036      	movs	r0, #54	@ 0x36
 80023f4:	f001 fd18 	bl	8003e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <HAL_InitTick+0xf0>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e002      	b.n	8002406 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002406:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800240a:	4618      	mov	r0, r3
 800240c:	3738      	adds	r7, #56	@ 0x38
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	431bde83 	.word	0x431bde83
 800241c:	20000d68 	.word	0x20000d68
 8002420:	40001000 	.word	0x40001000
 8002424:	20000030 	.word	0x20000030

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <NMI_Handler+0x4>

08002430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <MemManage_Handler+0x4>

08002440 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <BusFault_Handler+0x4>

08002448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <UsageFault_Handler+0x4>

08002450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002462:	2002      	movs	r0, #2
 8002464:	f001 ff72 	bl	800434c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <TIM2_IRQHandler+0x10>)
 8002472:	f005 fa7b 	bl	800796c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000db8 	.word	0x20000db8

08002480 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <TIM4_IRQHandler+0x10>)
 8002486:	f005 fa71 	bl	800796c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000e50 	.word	0x20000e50

08002494 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002498:	4802      	ldr	r0, [pc, #8]	@ (80024a4 <I2C2_EV_IRQHandler+0x10>)
 800249a:	f002 f80a 	bl	80044b2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000abc 	.word	0x20000abc

080024a8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <I2C2_ER_IRQHandler+0x10>)
 80024ae:	f002 f81a 	bl	80044e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000abc 	.word	0x20000abc

080024bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <USART1_IRQHandler+0x10>)
 80024c2:	f006 fd61 	bl	8008f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000e9c 	.word	0x20000e9c

080024d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <USART2_IRQHandler+0x10>)
 80024d6:	f006 fd57 	bl	8008f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000f24 	.word	0x20000f24

080024e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <TIM6_DAC_IRQHandler+0x10>)
 80024ea:	f005 fa3f 	bl	800796c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000d68 	.word	0x20000d68

080024f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return 1;
 80024fc:	2301      	movs	r3, #1
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_kill>:

int _kill(int pid, int sig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002512:	f00d f9b5 	bl	800f880 <__errno>
 8002516:	4603      	mov	r3, r0
 8002518:	2216      	movs	r2, #22
 800251a:	601a      	str	r2, [r3, #0]
  return -1;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_exit>:

void _exit (int status)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ffe7 	bl	8002508 <_kill>
  while (1) {}    /* Make sure we hang here */
 800253a:	bf00      	nop
 800253c:	e7fd      	b.n	800253a <_exit+0x12>

0800253e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e00a      	b.n	8002566 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002550:	f3af 8000 	nop.w
 8002554:	4601      	mov	r1, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	60ba      	str	r2, [r7, #8]
 800255c:	b2ca      	uxtb	r2, r1
 800255e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	dbf0      	blt.n	8002550 <_read+0x12>
  }

  return len;
 800256e:	687b      	ldr	r3, [r7, #4]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e009      	b.n	800259e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	60ba      	str	r2, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	dbf1      	blt.n	800258a <_write+0x12>
  }
  return len;
 80025a6:	687b      	ldr	r3, [r7, #4]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_close>:

int _close(int file)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025d8:	605a      	str	r2, [r3, #4]
  return 0;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_isatty>:

int _isatty(int file)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002620:	4a14      	ldr	r2, [pc, #80]	@ (8002674 <_sbrk+0x5c>)
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <_sbrk+0x60>)
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <_sbrk+0x64>)
 8002636:	4a12      	ldr	r2, [pc, #72]	@ (8002680 <_sbrk+0x68>)
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	429a      	cmp	r2, r3
 8002646:	d207      	bcs.n	8002658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002648:	f00d f91a 	bl	800f880 <__errno>
 800264c:	4603      	mov	r3, r0
 800264e:	220c      	movs	r2, #12
 8002650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	e009      	b.n	800266c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002658:	4b08      	ldr	r3, [pc, #32]	@ (800267c <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265e:	4b07      	ldr	r3, [pc, #28]	@ (800267c <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <_sbrk+0x64>)
 8002668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20018000 	.word	0x20018000
 8002678:	00000400 	.word	0x00000400
 800267c:	20000db4 	.word	0x20000db4
 8002680:	200061b0 	.word	0x200061b0

08002684 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <SystemInit+0x20>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <SystemInit+0x20>)
 8002690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <MX_TIM2_Init+0x98>)
 80026c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <MX_TIM2_Init+0x98>)
 80026d0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80026d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002740 <MX_TIM2_Init+0x98>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 160-1;
 80026dc:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <MX_TIM2_Init+0x98>)
 80026de:	229f      	movs	r2, #159	@ 0x9f
 80026e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e2:	4b17      	ldr	r3, [pc, #92]	@ (8002740 <MX_TIM2_Init+0x98>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e8:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <MX_TIM2_Init+0x98>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026ee:	4814      	ldr	r0, [pc, #80]	@ (8002740 <MX_TIM2_Init+0x98>)
 80026f0:	f004 fd32 	bl	8007158 <HAL_TIM_Base_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026fa:	f7ff fb53 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002702:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4619      	mov	r1, r3
 800270a:	480d      	ldr	r0, [pc, #52]	@ (8002740 <MX_TIM2_Init+0x98>)
 800270c:	f005 fbe6 	bl	8007edc <HAL_TIM_ConfigClockSource>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002716:	f7ff fb45 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4806      	ldr	r0, [pc, #24]	@ (8002740 <MX_TIM2_Init+0x98>)
 8002728:	f006 fa64 	bl	8008bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002732:	f7ff fb37 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000db8 	.word	0x20000db8

08002744 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	@ 0x38
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800274a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002764:	463b      	mov	r3, r7
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	615a      	str	r2, [r3, #20]
 8002774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002776:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <MX_TIM3_Init+0xe8>)
 8002778:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <MX_TIM3_Init+0xec>)
 800277a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <MX_TIM3_Init+0xe8>)
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <MX_TIM3_Init+0xe8>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8002788:	4b28      	ldr	r3, [pc, #160]	@ (800282c <MX_TIM3_Init+0xe8>)
 800278a:	f640 427f 	movw	r2, #3199	@ 0xc7f
 800278e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b26      	ldr	r3, [pc, #152]	@ (800282c <MX_TIM3_Init+0xe8>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b25      	ldr	r3, [pc, #148]	@ (800282c <MX_TIM3_Init+0xe8>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800279c:	4823      	ldr	r0, [pc, #140]	@ (800282c <MX_TIM3_Init+0xe8>)
 800279e:	f004 fcdb 	bl	8007158 <HAL_TIM_Base_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80027a8:	f7ff fafc 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027b6:	4619      	mov	r1, r3
 80027b8:	481c      	ldr	r0, [pc, #112]	@ (800282c <MX_TIM3_Init+0xe8>)
 80027ba:	f005 fb8f 	bl	8007edc <HAL_TIM_ConfigClockSource>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80027c4:	f7ff faee 	bl	8001da4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027c8:	4818      	ldr	r0, [pc, #96]	@ (800282c <MX_TIM3_Init+0xe8>)
 80027ca:	f004 fdbc 	bl	8007346 <HAL_TIM_PWM_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80027d4:	f7ff fae6 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4811      	ldr	r0, [pc, #68]	@ (800282c <MX_TIM3_Init+0xe8>)
 80027e8:	f006 fa04 	bl	8008bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80027f2:	f7ff fad7 	bl	8001da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027f6:	2360      	movs	r3, #96	@ 0x60
 80027f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002806:	463b      	mov	r3, r7
 8002808:	2200      	movs	r2, #0
 800280a:	4619      	mov	r1, r3
 800280c:	4807      	ldr	r0, [pc, #28]	@ (800282c <MX_TIM3_Init+0xe8>)
 800280e:	f005 fa51 	bl	8007cb4 <HAL_TIM_PWM_ConfigChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002818:	f7ff fac4 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800281c:	4803      	ldr	r0, [pc, #12]	@ (800282c <MX_TIM3_Init+0xe8>)
 800281e:	f000 f8f5 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 8002822:	bf00      	nop
 8002824:	3738      	adds	r7, #56	@ 0x38
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000e04 	.word	0x20000e04
 8002830:	40000400 	.word	0x40000400

08002834 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	@ 0x30
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800283a:	f107 0320 	add.w	r3, r7, #32
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002860:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <MX_TIM4_Init+0xdc>)
 8002862:	4a2c      	ldr	r2, [pc, #176]	@ (8002914 <MX_TIM4_Init+0xe0>)
 8002864:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002866:	4b2a      	ldr	r3, [pc, #168]	@ (8002910 <MX_TIM4_Init+0xdc>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b28      	ldr	r3, [pc, #160]	@ (8002910 <MX_TIM4_Init+0xdc>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002872:	4b27      	ldr	r3, [pc, #156]	@ (8002910 <MX_TIM4_Init+0xdc>)
 8002874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002878:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287a:	4b25      	ldr	r3, [pc, #148]	@ (8002910 <MX_TIM4_Init+0xdc>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002880:	4b23      	ldr	r3, [pc, #140]	@ (8002910 <MX_TIM4_Init+0xdc>)
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002886:	4822      	ldr	r0, [pc, #136]	@ (8002910 <MX_TIM4_Init+0xdc>)
 8002888:	f004 fc66 	bl	8007158 <HAL_TIM_Base_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002892:	f7ff fa87 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800289a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800289c:	f107 0320 	add.w	r3, r7, #32
 80028a0:	4619      	mov	r1, r3
 80028a2:	481b      	ldr	r0, [pc, #108]	@ (8002910 <MX_TIM4_Init+0xdc>)
 80028a4:	f005 fb1a 	bl	8007edc <HAL_TIM_ConfigClockSource>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80028ae:	f7ff fa79 	bl	8001da4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80028b2:	4817      	ldr	r0, [pc, #92]	@ (8002910 <MX_TIM4_Init+0xdc>)
 80028b4:	f004 feae 	bl	8007614 <HAL_TIM_IC_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80028be:	f7ff fa71 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	480f      	ldr	r0, [pc, #60]	@ (8002910 <MX_TIM4_Init+0xdc>)
 80028d2:	f006 f98f 	bl	8008bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80028dc:	f7ff fa62 	bl	8001da4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028e4:	2301      	movs	r3, #1
 80028e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	2200      	movs	r2, #0
 80028f4:	4619      	mov	r1, r3
 80028f6:	4806      	ldr	r0, [pc, #24]	@ (8002910 <MX_TIM4_Init+0xdc>)
 80028f8:	f005 f93f 	bl	8007b7a <HAL_TIM_IC_ConfigChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002902:	f7ff fa4f 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	3730      	adds	r7, #48	@ 0x30
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000e50 	.word	0x20000e50
 8002914:	40000800 	.word	0x40000800

08002918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08c      	sub	sp, #48	@ 0x30
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002938:	d114      	bne.n	8002964 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800293a:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	4a2f      	ldr	r2, [pc, #188]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6593      	str	r3, [r2, #88]	@ 0x58
 8002946:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2105      	movs	r1, #5
 8002956:	201c      	movs	r0, #28
 8002958:	f001 fa66 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800295c:	201c      	movs	r0, #28
 800295e:	f001 fa7f 	bl	8003e60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002962:	e046      	b.n	80029f2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a25      	ldr	r2, [pc, #148]	@ (8002a00 <HAL_TIM_Base_MspInit+0xe8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10c      	bne.n	8002988 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800296e:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
}
 8002986:	e034      	b.n	80029f2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_TIM_Base_MspInit+0xec>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d12f      	bne.n	80029f2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002992:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	4a19      	ldr	r2, [pc, #100]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6593      	str	r3, [r2, #88]	@ 0x58
 800299e:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_TIM_Base_MspInit+0xe4>)
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029c2:	2340      	movs	r3, #64	@ 0x40
 80029c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d2:	2302      	movs	r3, #2
 80029d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	480a      	ldr	r0, [pc, #40]	@ (8002a08 <HAL_TIM_Base_MspInit+0xf0>)
 80029de:	f001 fadb 	bl	8003f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2105      	movs	r1, #5
 80029e6:	201e      	movs	r0, #30
 80029e8:	f001 fa1e 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029ec:	201e      	movs	r0, #30
 80029ee:	f001 fa37 	bl	8003e60 <HAL_NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3730      	adds	r7, #48	@ 0x30
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	48000400 	.word	0x48000400

08002a0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a11      	ldr	r2, [pc, #68]	@ (8002a70 <HAL_TIM_MspPostInit+0x64>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d11c      	bne.n	8002a68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_TIM_MspPostInit+0x68>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <HAL_TIM_MspPostInit+0x68>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a74 <HAL_TIM_MspPostInit+0x68>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a46:	2340      	movs	r3, #64	@ 0x40
 8002a48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a52:	2302      	movs	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a56:	2302      	movs	r3, #2
 8002a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a64:	f001 fa98 	bl	8003f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a68:	bf00      	nop
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40021000 	.word	0x40021000

08002a78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002a7e:	4a15      	ldr	r2, [pc, #84]	@ (8002ad4 <MX_USART1_UART_Init+0x5c>)
 8002a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a82:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002a84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	@ (8002ad0 <MX_USART1_UART_Init+0x58>)
 8002abc:	f006 f940 	bl	8008d40 <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ac6:	f7ff f96d 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000e9c 	.word	0x20000e9c
 8002ad4:	40013800 	.word	0x40013800

08002ad8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002ade:	4a15      	ldr	r2, [pc, #84]	@ (8002b34 <MX_USART2_UART_Init+0x5c>)
 8002ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002ae4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aea:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b1a:	4805      	ldr	r0, [pc, #20]	@ (8002b30 <MX_USART2_UART_Init+0x58>)
 8002b1c:	f006 f910 	bl	8008d40 <HAL_UART_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b26:	f7ff f93d 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000f24 	.word	0x20000f24
 8002b34:	40004400 	.word	0x40004400

08002b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0ae      	sub	sp, #184	@ 0xb8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	2288      	movs	r2, #136	@ 0x88
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00c fdbe 	bl	800f6da <memset>
  if(uartHandle->Instance==USART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a4b      	ldr	r2, [pc, #300]	@ (8002c90 <HAL_UART_MspInit+0x158>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d145      	bne.n	8002bf4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 f9e1 	bl	8005f3c <HAL_RCCEx_PeriphCLKConfig>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b80:	f7ff f910 	bl	8001da4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b84:	4b43      	ldr	r3, [pc, #268]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b88:	4a42      	ldr	r2, [pc, #264]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b90:	4b40      	ldr	r3, [pc, #256]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bb4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bce:	2307      	movs	r3, #7
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bde:	f001 f9db 	bl	8003f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2105      	movs	r1, #5
 8002be6:	2025      	movs	r0, #37	@ 0x25
 8002be8:	f001 f91e 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bec:	2025      	movs	r0, #37	@ 0x25
 8002bee:	f001 f937 	bl	8003e60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bf2:	e048      	b.n	8002c86 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <HAL_UART_MspInit+0x160>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d143      	bne.n	8002c86 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c02:	2300      	movs	r3, #0
 8002c04:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 f996 	bl	8005f3c <HAL_RCCEx_PeriphCLKConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002c16:	f7ff f8c5 	bl	8001da4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c26:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c36:	4a17      	ldr	r2, [pc, #92]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c3e:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <HAL_UART_MspInit+0x15c>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c62:	2307      	movs	r3, #7
 8002c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c72:	f001 f991 	bl	8003f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2105      	movs	r1, #5
 8002c7a:	2026      	movs	r0, #38	@ 0x26
 8002c7c:	f001 f8d4 	bl	8003e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c80:	2026      	movs	r0, #38	@ 0x26
 8002c82:	f001 f8ed 	bl	8003e60 <HAL_NVIC_EnableIRQ>
}
 8002c86:	bf00      	nop
 8002c88:	37b8      	adds	r7, #184	@ 0xb8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40013800 	.word	0x40013800
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40004400 	.word	0x40004400

08002c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca0:	f7ff fcf0 	bl	8002684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca4:	480c      	ldr	r0, [pc, #48]	@ (8002cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ca6:	490d      	ldr	r1, [pc, #52]	@ (8002cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <LoopForever+0xe>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce8 <LoopForever+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cca:	f00c fddf 	bl	800f88c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cce:	f7fe ff95 	bl	8001bfc <main>

08002cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd2:	e7fe      	b.n	8002cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002ce0:	08012fb0 	.word	0x08012fb0
  ldr r2, =_sbss
 8002ce4:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002ce8:	200061ac 	.word	0x200061ac

08002cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_2_IRQHandler>
	...

08002cf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <HAL_Init+0x3c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002d2c <HAL_Init+0x3c>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d06:	2003      	movs	r0, #3
 8002d08:	f001 f883 	bl	8003e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0c:	200f      	movs	r0, #15
 8002d0e:	f7ff fb11 	bl	8002334 <HAL_InitTick>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	e001      	b.n	8002d22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d1e:	f7ff fae1 	bl	80022e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40022000 	.word	0x40022000

08002d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_IncTick+0x20>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_IncTick+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	@ (8002d54 <HAL_IncTick+0x24>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000034 	.word	0x20000034
 8002d54:	20000fac 	.word	0x20000fac

08002d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <HAL_GetTick+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000fac 	.word	0x20000fac

08002d70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	609a      	str	r2, [r3, #8]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3360      	adds	r3, #96	@ 0x60
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <LL_ADC_SetOffset+0x44>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e10:	bf00      	nop
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	03fff000 	.word	0x03fff000

08002e20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3360      	adds	r3, #96	@ 0x60
 8002e2e:	461a      	mov	r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3360      	adds	r3, #96	@ 0x60
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3330      	adds	r3, #48	@ 0x30
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	4413      	add	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	211f      	movs	r1, #31
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	f003 011f 	and.w	r1, r3, #31
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	461a      	mov	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	0e5b      	lsrs	r3, r3, #25
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	4413      	add	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0d1b      	lsrs	r3, r3, #20
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2107      	movs	r1, #7
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	0d1b      	lsrs	r3, r3, #20
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0318 	and.w	r3, r3, #24
 8002f52:	4908      	ldr	r1, [pc, #32]	@ (8002f74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f54:	40d9      	lsrs	r1, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	400b      	ands	r3, r1
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	0007ffff 	.word	0x0007ffff

08002f78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6093      	str	r3, [r2, #8]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb0:	d101      	bne.n	8002fb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002fd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fd8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003000:	d101      	bne.n	8003006 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <LL_ADC_IsEnabled+0x18>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <LL_ADC_IsEnabled+0x1a>
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d101      	bne.n	8003052 <LL_ADC_REG_IsConversionOngoing+0x18>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b08      	cmp	r3, #8
 8003072:	d101      	bne.n	8003078 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e130      	b.n	8003304 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fe f88f 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff67 	bl	8002f9c <LL_ADC_IsDeepPowerDownEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff4d 	bl	8002f78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff82 	bl	8002fec <LL_ADC_IsInternalRegulatorEnabled>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d115      	bne.n	800311a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ff66 	bl	8002fc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f8:	4b84      	ldr	r3, [pc, #528]	@ (800330c <HAL_ADC_Init+0x284>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	4a84      	ldr	r2, [pc, #528]	@ (8003310 <HAL_ADC_Init+0x288>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	3301      	adds	r3, #1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800310c:	e002      	b.n	8003114 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3b01      	subs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f9      	bne.n	800310e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff64 	bl	8002fec <LL_ADC_IsInternalRegulatorEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	f043 0210 	orr.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff75 	bl	800303a <LL_ADC_REG_IsConversionOngoing>
 8003150:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 80c9 	bne.w	80032f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 80c5 	bne.w	80032f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003170:	f043 0202 	orr.w	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff49 	bl	8003014 <LL_ADC_IsEnabled>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d115      	bne.n	80031b4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003188:	4862      	ldr	r0, [pc, #392]	@ (8003314 <HAL_ADC_Init+0x28c>)
 800318a:	f7ff ff43 	bl	8003014 <LL_ADC_IsEnabled>
 800318e:	4604      	mov	r4, r0
 8003190:	4861      	ldr	r0, [pc, #388]	@ (8003318 <HAL_ADC_Init+0x290>)
 8003192:	f7ff ff3f 	bl	8003014 <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	431c      	orrs	r4, r3
 800319a:	4860      	ldr	r0, [pc, #384]	@ (800331c <HAL_ADC_Init+0x294>)
 800319c:	f7ff ff3a 	bl	8003014 <LL_ADC_IsEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4323      	orrs	r3, r4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4619      	mov	r1, r3
 80031ae:	485c      	ldr	r0, [pc, #368]	@ (8003320 <HAL_ADC_Init+0x298>)
 80031b0:	f7ff fdde 	bl	8002d70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7e5b      	ldrb	r3, [r3, #25]
 80031b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80031c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80031ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d106      	bne.n	80031f0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	3b01      	subs	r3, #1
 80031e8:	045b      	lsls	r3, r3, #17
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d009      	beq.n	800320c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b44      	ldr	r3, [pc, #272]	@ (8003324 <HAL_ADC_Init+0x29c>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	69b9      	ldr	r1, [r7, #24]
 800321c:	430b      	orrs	r3, r1
 800321e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff1b 	bl	8003060 <LL_ADC_INJ_IsConversionOngoing>
 800322a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d13d      	bne.n	80032ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d13a      	bne.n	80032ae <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800323c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003244:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003254:	f023 0302 	bic.w	r3, r3, #2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	69b9      	ldr	r1, [r7, #24]
 800325e:	430b      	orrs	r3, r1
 8003260:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003268:	2b01      	cmp	r3, #1
 800326a:	d118      	bne.n	800329e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003276:	f023 0304 	bic.w	r3, r3, #4
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800328e:	430a      	orrs	r2, r1
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	611a      	str	r2, [r3, #16]
 800329c:	e007      	b.n	80032ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10c      	bne.n	80032d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	f023 010f 	bic.w	r1, r3, #15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	1e5a      	subs	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80032ce:	e007      	b.n	80032e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 020f 	bic.w	r2, r2, #15
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	f023 0303 	bic.w	r3, r3, #3
 80032e8:	f043 0201 	orr.w	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80032f0:	e007      	b.n	8003302 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003302:	7ffb      	ldrb	r3, [r7, #31]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3724      	adds	r7, #36	@ 0x24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	2000002c 	.word	0x2000002c
 8003310:	053e2d63 	.word	0x053e2d63
 8003314:	50040000 	.word	0x50040000
 8003318:	50040100 	.word	0x50040100
 800331c:	50040200 	.word	0x50040200
 8003320:	50040300 	.word	0x50040300
 8003324:	fff0c007 	.word	0xfff0c007

08003328 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b0b6      	sub	sp, #216	@ 0xd8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_ConfigChannel+0x22>
 8003346:	2302      	movs	r3, #2
 8003348:	e3c9      	b.n	8003ade <HAL_ADC_ConfigChannel+0x7b6>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe6f 	bl	800303a <LL_ADC_REG_IsConversionOngoing>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 83aa 	bne.w	8003ab8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b05      	cmp	r3, #5
 8003372:	d824      	bhi.n	80033be <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	3b02      	subs	r3, #2
 800337a:	2b03      	cmp	r3, #3
 800337c:	d81b      	bhi.n	80033b6 <HAL_ADC_ConfigChannel+0x8e>
 800337e:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <HAL_ADC_ConfigChannel+0x5c>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	08003395 	.word	0x08003395
 8003388:	0800339d 	.word	0x0800339d
 800338c:	080033a5 	.word	0x080033a5
 8003390:	080033ad 	.word	0x080033ad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003394:	230c      	movs	r3, #12
 8003396:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800339a:	e010      	b.n	80033be <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800339c:	2312      	movs	r3, #18
 800339e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033a2:	e00c      	b.n	80033be <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80033a4:	2318      	movs	r3, #24
 80033a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033aa:	e008      	b.n	80033be <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80033ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033b4:	e003      	b.n	80033be <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80033b6:	2306      	movs	r3, #6
 80033b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033bc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80033cc:	f7ff fd59 	bl	8002e82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fe30 	bl	800303a <LL_ADC_REG_IsConversionOngoing>
 80033da:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe3c 	bl	8003060 <LL_ADC_INJ_IsConversionOngoing>
 80033e8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 81a4 	bne.w	800373e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 819f 	bne.w	800373e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6819      	ldr	r1, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	461a      	mov	r2, r3
 800340e:	f7ff fd64 	bl	8002eda <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	08db      	lsrs	r3, r3, #3
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d00a      	beq.n	800344a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6919      	ldr	r1, [r3, #16]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003444:	f7ff fcc8 	bl	8002dd8 <LL_ADC_SetOffset>
 8003448:	e179      	b.n	800373e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fce5 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 8003456:	4603      	mov	r3, r0
 8003458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x14e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fcda 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 800346c:	4603      	mov	r3, r0
 800346e:	0e9b      	lsrs	r3, r3, #26
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	e01e      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x18c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fccf 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800349c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e004      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80034a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x1a4>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	e018      	b.n	80034fe <HAL_ADC_ConfigChannel+0x1d6>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80034e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80034e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e004      	b.n	80034fe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80034f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034fe:	429a      	cmp	r2, r3
 8003500:	d106      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fc9e 	bl	8002e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fc82 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <HAL_ADC_ConfigChannel+0x214>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fc77 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	f003 021f 	and.w	r2, r3, #31
 800353a:	e01e      	b.n	800357a <HAL_ADC_ConfigChannel+0x252>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fc6c 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800355a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800355e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800356a:	2320      	movs	r3, #32
 800356c:	e004      	b.n	8003578 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800356e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x26a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	e018      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x29c>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80035a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80035ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80035b6:	2320      	movs	r3, #32
 80035b8:	e004      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80035ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d106      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fc3b 	bl	8002e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2102      	movs	r1, #2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fc1f 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x2da>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2102      	movs	r1, #2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fc14 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 80035f8:	4603      	mov	r3, r0
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	e01e      	b.n	8003640 <HAL_ADC_ConfigChannel+0x318>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fc09 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 800360e:	4603      	mov	r3, r0
 8003610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e004      	b.n	800363e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x330>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	e014      	b.n	8003682 <HAL_ADC_ConfigChannel+0x35a>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003666:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800366c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e004      	b.n	8003682 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003678:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003682:	429a      	cmp	r2, r3
 8003684:	d106      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fbdc 	bl	8002e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2103      	movs	r1, #3
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fbc0 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x398>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2103      	movs	r1, #3
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fbb5 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 80036b6:	4603      	mov	r3, r0
 80036b8:	0e9b      	lsrs	r3, r3, #26
 80036ba:	f003 021f 	and.w	r2, r3, #31
 80036be:	e017      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x3c8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2103      	movs	r1, #3
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fbaa 	bl	8002e20 <LL_ADC_GetOffsetChannel>
 80036cc:	4603      	mov	r3, r0
 80036ce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80036d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80036dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e003      	b.n	80036ee <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80036e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x3e0>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	0e9b      	lsrs	r3, r3, #26
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	e011      	b.n	800372c <HAL_ADC_ConfigChannel+0x404>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003718:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800371a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003720:	2320      	movs	r3, #32
 8003722:	e003      	b.n	800372c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003724:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800372c:	429a      	cmp	r2, r3
 800372e:	d106      	bne.n	800373e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2200      	movs	r2, #0
 8003736:	2103      	movs	r1, #3
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fb87 	bl	8002e4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fc66 	bl	8003014 <LL_ADC_IsEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 8140 	bne.w	80039d0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	f7ff fbe7 	bl	8002f30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4a8f      	ldr	r2, [pc, #572]	@ (80039a4 <HAL_ADC_ConfigChannel+0x67c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	f040 8131 	bne.w	80039d0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x46e>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	3301      	adds	r3, #1
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2b09      	cmp	r3, #9
 800378c:	bf94      	ite	ls
 800378e:	2301      	movls	r3, #1
 8003790:	2300      	movhi	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e019      	b.n	80037ca <HAL_ADC_ConfigChannel+0x4a2>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80037a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80037a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80037ae:	2320      	movs	r3, #32
 80037b0:	e003      	b.n	80037ba <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80037b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	bf94      	ite	ls
 80037c4:	2301      	movls	r3, #1
 80037c6:	2300      	movhi	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d079      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x4c2>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	3301      	adds	r3, #1
 80037e2:	069b      	lsls	r3, r3, #26
 80037e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037e8:	e015      	b.n	8003816 <HAL_ADC_ConfigChannel+0x4ee>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80037f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80037fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003802:	2320      	movs	r3, #32
 8003804:	e003      	b.n	800380e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3301      	adds	r3, #1
 8003810:	069b      	lsls	r3, r3, #26
 8003812:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x50e>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	3301      	adds	r3, #1
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	e017      	b.n	8003866 <HAL_ADC_ConfigChannel+0x53e>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003846:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800384e:	2320      	movs	r3, #32
 8003850:	e003      	b.n	800385a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	ea42 0103 	orr.w	r1, r2, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <HAL_ADC_ConfigChannel+0x564>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0e9b      	lsrs	r3, r3, #26
 800387c:	3301      	adds	r3, #1
 800387e:	f003 021f 	and.w	r2, r3, #31
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	051b      	lsls	r3, r3, #20
 800388a:	e018      	b.n	80038be <HAL_ADC_ConfigChannel+0x596>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800389e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80038a4:	2320      	movs	r3, #32
 80038a6:	e003      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80038a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038be:	430b      	orrs	r3, r1
 80038c0:	e081      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d107      	bne.n	80038de <HAL_ADC_ConfigChannel+0x5b6>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0e9b      	lsrs	r3, r3, #26
 80038d4:	3301      	adds	r3, #1
 80038d6:	069b      	lsls	r3, r3, #26
 80038d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038dc:	e015      	b.n	800390a <HAL_ADC_ConfigChannel+0x5e2>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80038f6:	2320      	movs	r3, #32
 80038f8:	e003      	b.n	8003902 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80038fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	3301      	adds	r3, #1
 8003904:	069b      	lsls	r3, r3, #26
 8003906:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_ADC_ConfigChannel+0x602>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	0e9b      	lsrs	r3, r3, #26
 800391c:	3301      	adds	r3, #1
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	e017      	b.n	800395a <HAL_ADC_ConfigChannel+0x632>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	61bb      	str	r3, [r7, #24]
  return result;
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003942:	2320      	movs	r3, #32
 8003944:	e003      	b.n	800394e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	ea42 0103 	orr.w	r1, r2, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10d      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x65e>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	3301      	adds	r3, #1
 8003972:	f003 021f 	and.w	r2, r3, #31
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	3b1e      	subs	r3, #30
 800397e:	051b      	lsls	r3, r3, #20
 8003980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003984:	e01e      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x69c>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	60fb      	str	r3, [r7, #12]
  return result;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800399e:	2320      	movs	r3, #32
 80039a0:	e006      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x688>
 80039a2:	bf00      	nop
 80039a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f003 021f 	and.w	r2, r3, #31
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	3b1e      	subs	r3, #30
 80039be:	051b      	lsls	r3, r3, #20
 80039c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ca:	4619      	mov	r1, r3
 80039cc:	f7ff fa85 	bl	8002eda <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b44      	ldr	r3, [pc, #272]	@ (8003ae8 <HAL_ADC_ConfigChannel+0x7c0>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d07a      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039dc:	4843      	ldr	r0, [pc, #268]	@ (8003aec <HAL_ADC_ConfigChannel+0x7c4>)
 80039de:	f7ff f9ed 	bl	8002dbc <LL_ADC_GetCommonPathInternalCh>
 80039e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a41      	ldr	r2, [pc, #260]	@ (8003af0 <HAL_ADC_ConfigChannel+0x7c8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d12c      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d126      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a3c      	ldr	r2, [pc, #240]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_ADC_ConfigChannel+0x6e8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003af8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d15d      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4834      	ldr	r0, [pc, #208]	@ (8003aec <HAL_ADC_ConfigChannel+0x7c4>)
 8003a1c:	f7ff f9bb 	bl	8002d96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a20:	4b36      	ldr	r3, [pc, #216]	@ (8003afc <HAL_ADC_ConfigChannel+0x7d4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a28:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2c:	099b      	lsrs	r3, r3, #6
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a3a:	e002      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f9      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a48:	e040      	b.n	8003acc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b04 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d118      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d112      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a23      	ldr	r2, [pc, #140]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0x74c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a22      	ldr	r2, [pc, #136]	@ (8003af8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d12d      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	481b      	ldr	r0, [pc, #108]	@ (8003aec <HAL_ADC_ConfigChannel+0x7c4>)
 8003a80:	f7ff f989 	bl	8002d96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a84:	e024      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <HAL_ADC_ConfigChannel+0x7e0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d120      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11a      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d115      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aaa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003aae:	4619      	mov	r1, r3
 8003ab0:	480e      	ldr	r0, [pc, #56]	@ (8003aec <HAL_ADC_ConfigChannel+0x7c4>)
 8003ab2:	f7ff f970 	bl	8002d96 <LL_ADC_SetCommonPathInternalCh>
 8003ab6:	e00c      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003aca:	e002      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003acc:	bf00      	nop
 8003ace:	e000      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ada:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	37d8      	adds	r7, #216	@ 0xd8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	80080000 	.word	0x80080000
 8003aec:	50040300 	.word	0x50040300
 8003af0:	c7520000 	.word	0xc7520000
 8003af4:	50040000 	.word	0x50040000
 8003af8:	50040200 	.word	0x50040200
 8003afc:	2000002c 	.word	0x2000002c
 8003b00:	053e2d63 	.word	0x053e2d63
 8003b04:	cb840000 	.word	0xcb840000
 8003b08:	80000001 	.word	0x80000001

08003b0c <LL_ADC_IsEnabled>:
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <LL_ADC_IsEnabled+0x18>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <LL_ADC_IsEnabled+0x1a>
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d101      	bne.n	8003b4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b09f      	sub	sp, #124	@ 0x7c
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e093      	b.n	8003c9e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b82:	2300      	movs	r3, #0
 8003b84:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a47      	ldr	r2, [pc, #284]	@ (8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d102      	bne.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b90:	4b46      	ldr	r3, [pc, #280]	@ (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	e001      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e072      	b.n	8003c9e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ffb9 	bl	8003b32 <LL_ADC_REG_IsConversionOngoing>
 8003bc0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ffb3 	bl	8003b32 <LL_ADC_REG_IsConversionOngoing>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d154      	bne.n	8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003bd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d151      	bne.n	8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bd8:	4b35      	ldr	r3, [pc, #212]	@ (8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003bda:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02c      	beq.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bf6:	035b      	lsls	r3, r3, #13
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c00:	4829      	ldr	r0, [pc, #164]	@ (8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c02:	f7ff ff83 	bl	8003b0c <LL_ADC_IsEnabled>
 8003c06:	4604      	mov	r4, r0
 8003c08:	4828      	ldr	r0, [pc, #160]	@ (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c0a:	f7ff ff7f 	bl	8003b0c <LL_ADC_IsEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	431c      	orrs	r4, r3
 8003c12:	4828      	ldr	r0, [pc, #160]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c14:	f7ff ff7a 	bl	8003b0c <LL_ADC_IsEnabled>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4323      	orrs	r3, r4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d137      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c28:	f023 030f 	bic.w	r3, r3, #15
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c3a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c3c:	e028      	b.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c48:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c4a:	4817      	ldr	r0, [pc, #92]	@ (8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c4c:	f7ff ff5e 	bl	8003b0c <LL_ADC_IsEnabled>
 8003c50:	4604      	mov	r4, r0
 8003c52:	4816      	ldr	r0, [pc, #88]	@ (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c54:	f7ff ff5a 	bl	8003b0c <LL_ADC_IsEnabled>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	431c      	orrs	r4, r3
 8003c5c:	4815      	ldr	r0, [pc, #84]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c5e:	f7ff ff55 	bl	8003b0c <LL_ADC_IsEnabled>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4323      	orrs	r3, r4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d112      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c72:	f023 030f 	bic.w	r3, r3, #15
 8003c76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c78:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c7a:	e009      	b.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	f043 0220 	orr.w	r2, r3, #32
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003c8e:	e000      	b.n	8003c92 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c9a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	377c      	adds	r7, #124	@ 0x7c
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd90      	pop	{r4, r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	50040000 	.word	0x50040000
 8003cac:	50040100 	.word	0x50040100
 8003cb0:	50040300 	.word	0x50040300
 8003cb4:	50040200 	.word	0x50040200

08003cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <__NVIC_SetPriorityGrouping+0x44>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cea:	4a04      	ldr	r2, [pc, #16]	@ (8003cfc <__NVIC_SetPriorityGrouping+0x44>)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	60d3      	str	r3, [r2, #12]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d04:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <__NVIC_GetPriorityGrouping+0x18>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	f003 0307 	and.w	r3, r3, #7
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	db0b      	blt.n	8003d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	f003 021f 	and.w	r2, r3, #31
 8003d34:	4907      	ldr	r1, [pc, #28]	@ (8003d54 <__NVIC_EnableIRQ+0x38>)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	e000e100 	.word	0xe000e100

08003d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	db0a      	blt.n	8003d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	490c      	ldr	r1, [pc, #48]	@ (8003da4 <__NVIC_SetPriority+0x4c>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	0112      	lsls	r2, r2, #4
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d80:	e00a      	b.n	8003d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4908      	ldr	r1, [pc, #32]	@ (8003da8 <__NVIC_SetPriority+0x50>)
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	440b      	add	r3, r1
 8003d96:	761a      	strb	r2, [r3, #24]
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000e100 	.word	0xe000e100
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	@ 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f1c3 0307 	rsb	r3, r3, #7
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	bf28      	it	cs
 8003dca:	2304      	movcs	r3, #4
 8003dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d902      	bls.n	8003ddc <NVIC_EncodePriority+0x30>
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3b03      	subs	r3, #3
 8003dda:	e000      	b.n	8003dde <NVIC_EncodePriority+0x32>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	401a      	ands	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	43d9      	mvns	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e04:	4313      	orrs	r3, r2
         );
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3724      	adds	r7, #36	@ 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ff4c 	bl	8003cb8 <__NVIC_SetPriorityGrouping>
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e3a:	f7ff ff61 	bl	8003d00 <__NVIC_GetPriorityGrouping>
 8003e3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	6978      	ldr	r0, [r7, #20]
 8003e46:	f7ff ffb1 	bl	8003dac <NVIC_EncodePriority>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e50:	4611      	mov	r1, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff80 	bl	8003d58 <__NVIC_SetPriority>
}
 8003e58:	bf00      	nop
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff ff54 	bl	8003d1c <__NVIC_EnableIRQ>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d008      	beq.n	8003ea6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e022      	b.n	8003eec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 020e 	bic.w	r2, r2, #14
 8003eb4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	f003 021c 	and.w	r2, r3, #28
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d005      	beq.n	8003f1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2204      	movs	r2, #4
 8003f14:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	e029      	b.n	8003f70 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 020e 	bic.w	r2, r2, #14
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	f003 021c 	and.w	r2, r3, #28
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
    }
  }
  return status;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f88:	b2db      	uxtb	r3, r3
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa6:	e17f      	b.n	80042a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8171 	beq.w	80042a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d005      	beq.n	8003fd8 <HAL_GPIO_Init+0x40>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d130      	bne.n	800403a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800400e:	2201      	movs	r2, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	f003 0201 	and.w	r2, r3, #1
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b03      	cmp	r3, #3
 8004044:	d118      	bne.n	8004078 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800404c:	2201      	movs	r2, #1
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	f003 0201 	and.w	r2, r3, #1
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d017      	beq.n	80040b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d123      	bne.n	8004108 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	6939      	ldr	r1, [r7, #16]
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	2203      	movs	r2, #3
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4013      	ands	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80ac 	beq.w	80042a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414a:	4b5f      	ldr	r3, [pc, #380]	@ (80042c8 <HAL_GPIO_Init+0x330>)
 800414c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414e:	4a5e      	ldr	r2, [pc, #376]	@ (80042c8 <HAL_GPIO_Init+0x330>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6613      	str	r3, [r2, #96]	@ 0x60
 8004156:	4b5c      	ldr	r3, [pc, #368]	@ (80042c8 <HAL_GPIO_Init+0x330>)
 8004158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004162:	4a5a      	ldr	r2, [pc, #360]	@ (80042cc <HAL_GPIO_Init+0x334>)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	3302      	adds	r3, #2
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800418c:	d025      	beq.n	80041da <HAL_GPIO_Init+0x242>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4f      	ldr	r2, [pc, #316]	@ (80042d0 <HAL_GPIO_Init+0x338>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01f      	beq.n	80041d6 <HAL_GPIO_Init+0x23e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4e      	ldr	r2, [pc, #312]	@ (80042d4 <HAL_GPIO_Init+0x33c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d019      	beq.n	80041d2 <HAL_GPIO_Init+0x23a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4d      	ldr	r2, [pc, #308]	@ (80042d8 <HAL_GPIO_Init+0x340>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_GPIO_Init+0x236>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4c      	ldr	r2, [pc, #304]	@ (80042dc <HAL_GPIO_Init+0x344>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00d      	beq.n	80041ca <HAL_GPIO_Init+0x232>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4b      	ldr	r2, [pc, #300]	@ (80042e0 <HAL_GPIO_Init+0x348>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <HAL_GPIO_Init+0x22e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4a      	ldr	r2, [pc, #296]	@ (80042e4 <HAL_GPIO_Init+0x34c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_GPIO_Init+0x22a>
 80041be:	2306      	movs	r3, #6
 80041c0:	e00c      	b.n	80041dc <HAL_GPIO_Init+0x244>
 80041c2:	2307      	movs	r3, #7
 80041c4:	e00a      	b.n	80041dc <HAL_GPIO_Init+0x244>
 80041c6:	2305      	movs	r3, #5
 80041c8:	e008      	b.n	80041dc <HAL_GPIO_Init+0x244>
 80041ca:	2304      	movs	r3, #4
 80041cc:	e006      	b.n	80041dc <HAL_GPIO_Init+0x244>
 80041ce:	2303      	movs	r3, #3
 80041d0:	e004      	b.n	80041dc <HAL_GPIO_Init+0x244>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e002      	b.n	80041dc <HAL_GPIO_Init+0x244>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_GPIO_Init+0x244>
 80041da:	2300      	movs	r3, #0
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	f002 0203 	and.w	r2, r2, #3
 80041e2:	0092      	lsls	r2, r2, #2
 80041e4:	4093      	lsls	r3, r2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041ec:	4937      	ldr	r1, [pc, #220]	@ (80042cc <HAL_GPIO_Init+0x334>)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	3302      	adds	r3, #2
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041fa:	4b3b      	ldr	r3, [pc, #236]	@ (80042e8 <HAL_GPIO_Init+0x350>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	43db      	mvns	r3, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800421e:	4a32      	ldr	r2, [pc, #200]	@ (80042e8 <HAL_GPIO_Init+0x350>)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004224:	4b30      	ldr	r3, [pc, #192]	@ (80042e8 <HAL_GPIO_Init+0x350>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	43db      	mvns	r3, r3
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4013      	ands	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004248:	4a27      	ldr	r2, [pc, #156]	@ (80042e8 <HAL_GPIO_Init+0x350>)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800424e:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <HAL_GPIO_Init+0x350>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	43db      	mvns	r3, r3
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004272:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <HAL_GPIO_Init+0x350>)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004278:	4b1b      	ldr	r3, [pc, #108]	@ (80042e8 <HAL_GPIO_Init+0x350>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	43db      	mvns	r3, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800429c:	4a12      	ldr	r2, [pc, #72]	@ (80042e8 <HAL_GPIO_Init+0x350>)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	3301      	adds	r3, #1
 80042a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa22 f303 	lsr.w	r3, r2, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f47f ae78 	bne.w	8003fa8 <HAL_GPIO_Init+0x10>
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40010000 	.word	0x40010000
 80042d0:	48000400 	.word	0x48000400
 80042d4:	48000800 	.word	0x48000800
 80042d8:	48000c00 	.word	0x48000c00
 80042dc:	48001000 	.word	0x48001000
 80042e0:	48001400 	.word	0x48001400
 80042e4:	48001800 	.word	0x48001800
 80042e8:	40010400 	.word	0x40010400

080042ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	887b      	ldrh	r3, [r7, #2]
 80042fe:	4013      	ands	r3, r2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	e001      	b.n	800430e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	807b      	strh	r3, [r7, #2]
 8004328:	4613      	mov	r3, r2
 800432a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800432c:	787b      	ldrb	r3, [r7, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004338:	e002      	b.n	8004340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004356:	4b08      	ldr	r3, [pc, #32]	@ (8004378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	4013      	ands	r3, r2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004362:	4a05      	ldr	r2, [pc, #20]	@ (8004378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd ff9a 	bl	80022a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40010400 	.word	0x40010400

0800437c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e08d      	b.n	80044aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd fbbc 	bl	8001b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2224      	movs	r2, #36	@ 0x24
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	e006      	b.n	8004404 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004402:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d108      	bne.n	800441e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	e007      	b.n	800442e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800442c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800443c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69d9      	ldr	r1, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	68f9      	ldr	r1, [r7, #12]
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
  }
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b086      	sub	sp, #24
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	09db      	lsrs	r3, r3, #7
 800450e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800452a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d010      	beq.n	800455a <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	09db      	lsrs	r3, r3, #7
 800453c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004548:	f043 0208 	orr.w	r2, r3, #8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004558:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	0a5b      	lsrs	r3, r3, #9
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	09db      	lsrs	r3, r3, #7
 800456a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	f043 0202 	orr.w	r2, r3, #2
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004586:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 030b 	and.w	r3, r3, #11
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004598:	68f9      	ldr	r1, [r7, #12]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fbea 	bl	8004d74 <I2C_ITError>
  }
}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
 80045dc:	4613      	mov	r3, r2
 80045de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <I2C_Slave_ISR_IT+0x24>
 8004648:	2302      	movs	r3, #2
 800464a:	e0ed      	b.n	8004828 <I2C_Slave_ISR_IT+0x200>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800466c:	6939      	ldr	r1, [r7, #16]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f9c0 	bl	80049f4 <I2C_ITSlaveCplt>
 8004674:	e0d3      	b.n	800481e <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d04d      	beq.n	800471e <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800468a:	2b00      	cmp	r3, #0
 800468c:	d047      	beq.n	800471e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d128      	bne.n	80046ea <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b28      	cmp	r3, #40	@ 0x28
 80046a2:	d108      	bne.n	80046b6 <I2C_Slave_ISR_IT+0x8e>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046aa:	d104      	bne.n	80046b6 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046ac:	6939      	ldr	r1, [r7, #16]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fb0a 	bl	8004cc8 <I2C_ITListenCplt>
 80046b4:	e032      	b.n	800471c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b29      	cmp	r3, #41	@ 0x29
 80046c0:	d10e      	bne.n	80046e0 <I2C_Slave_ISR_IT+0xb8>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046c8:	d00a      	beq.n	80046e0 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2210      	movs	r2, #16
 80046d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fc65 	bl	8004fa2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f92d 	bl	8004938 <I2C_ITSlaveSeqCplt>
 80046de:	e01d      	b.n	800471c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2210      	movs	r2, #16
 80046e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80046e8:	e096      	b.n	8004818 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2210      	movs	r2, #16
 80046f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f043 0204 	orr.w	r2, r3, #4
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <I2C_Slave_ISR_IT+0xe6>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800470a:	f040 8085 	bne.w	8004818 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	4619      	mov	r1, r3
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fb2d 	bl	8004d74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800471a:	e07d      	b.n	8004818 <I2C_Slave_ISR_IT+0x1f0>
 800471c:	e07c      	b.n	8004818 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d030      	beq.n	800478c <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004732:	2b00      	cmp	r3, #0
 8004734:	d02a      	beq.n	800478c <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d018      	beq.n	8004772 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d14f      	bne.n	800481c <I2C_Slave_ISR_IT+0x1f4>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004782:	d04b      	beq.n	800481c <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f8d7 	bl	8004938 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800478a:	e047      	b.n	800481c <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	08db      	lsrs	r3, r3, #3
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80047a4:	6939      	ldr	r1, [r7, #16]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f842 	bl	8004830 <I2C_ITAddrCplt>
 80047ac:	e037      	b.n	800481e <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d031      	beq.n	800481e <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02b      	beq.n	800481e <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d018      	beq.n	8004802 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004800:	e00d      	b.n	800481e <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004808:	d002      	beq.n	8004810 <I2C_Slave_ISR_IT+0x1e8>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f891 	bl	8004938 <I2C_ITSlaveSeqCplt>
 8004816:	e002      	b.n	800481e <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800481c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004846:	2b28      	cmp	r3, #40	@ 0x28
 8004848:	d16a      	bne.n	8004920 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	b29b      	uxth	r3, r3
 8004864:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004868:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004876:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004884:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d138      	bne.n	8004900 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800488e:	897b      	ldrh	r3, [r7, #10]
 8004890:	09db      	lsrs	r3, r3, #7
 8004892:	b29a      	uxth	r2, r3
 8004894:	89bb      	ldrh	r3, [r7, #12]
 8004896:	4053      	eors	r3, r2
 8004898:	b29b      	uxth	r3, r3
 800489a:	f003 0306 	and.w	r3, r3, #6
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d11c      	bne.n	80048dc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80048a2:	897b      	ldrh	r3, [r7, #10]
 80048a4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d13b      	bne.n	8004930 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2208      	movs	r2, #8
 80048c4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048ce:	89ba      	ldrh	r2, [r7, #12]
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fe7b 	bl	80045d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048da:	e029      	b.n	8004930 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80048dc:	893b      	ldrh	r3, [r7, #8]
 80048de:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb9e 	bl	8005026 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048f2:	89ba      	ldrh	r2, [r7, #12]
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fe69 	bl	80045d0 <HAL_I2C_AddrCallback>
}
 80048fe:	e017      	b.n	8004930 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fb8e 	bl	8005026 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004912:	89ba      	ldrh	r2, [r7, #12]
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff fe59 	bl	80045d0 <HAL_I2C_AddrCallback>
}
 800491e:	e007      	b.n	8004930 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2208      	movs	r2, #8
 8004926:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	0b9b      	lsrs	r3, r3, #14
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e00d      	b.n	800498a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	0bdb      	lsrs	r3, r3, #15
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004988:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b29      	cmp	r3, #41	@ 0x29
 8004994:	d112      	bne.n	80049bc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2228      	movs	r2, #40	@ 0x28
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2221      	movs	r2, #33	@ 0x21
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049a4:	2101      	movs	r1, #1
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fb3d 	bl	8005026 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff fdf7 	bl	80045a8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049ba:	e017      	b.n	80049ec <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c6:	d111      	bne.n	80049ec <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2228      	movs	r2, #40	@ 0x28
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2222      	movs	r2, #34	@ 0x22
 80049d4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049d6:	2102      	movs	r1, #2
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fb24 	bl	8005026 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fde8 	bl	80045bc <HAL_I2C_SlaveRxCpltCallback>
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a16:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a20:	7afb      	ldrb	r3, [r7, #11]
 8004a22:	2b21      	cmp	r3, #33	@ 0x21
 8004a24:	d002      	beq.n	8004a2c <I2C_ITSlaveCplt+0x38>
 8004a26:	7afb      	ldrb	r3, [r7, #11]
 8004a28:	2b29      	cmp	r3, #41	@ 0x29
 8004a2a:	d108      	bne.n	8004a3e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004a2c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 faf8 	bl	8005026 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2221      	movs	r2, #33	@ 0x21
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a3c:	e019      	b.n	8004a72 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
 8004a40:	2b22      	cmp	r3, #34	@ 0x22
 8004a42:	d002      	beq.n	8004a4a <I2C_ITSlaveCplt+0x56>
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a48:	d108      	bne.n	8004a5c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004a4a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fae9 	bl	8005026 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2222      	movs	r2, #34	@ 0x22
 8004a58:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a5a:	e00a      	b.n	8004a72 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004a5c:	7afb      	ldrb	r3, [r7, #11]
 8004a5e:	2b28      	cmp	r3, #40	@ 0x28
 8004a60:	d107      	bne.n	8004a72 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004a62:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fadd 	bl	8005026 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a80:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b8c      	ldr	r3, [pc, #560]	@ (8004cc0 <I2C_ITSlaveCplt+0x2cc>)
 8004a8e:	400b      	ands	r3, r1
 8004a90:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa85 	bl	8004fa2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	0b9b      	lsrs	r3, r3, #14
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ab2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004aca:	e018      	b.n	8004afe <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	0bdb      	lsrs	r3, r3, #15
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d012      	beq.n	8004afe <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ae6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	089b      	lsrs	r3, r3, #2
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d020      	beq.n	8004b4c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00c      	beq.n	8004b4c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	f043 0204 	orr.w	r2, r3, #4
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d04a      	beq.n	8004c04 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d044      	beq.n	8004c04 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d128      	bne.n	8004bd6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b28      	cmp	r3, #40	@ 0x28
 8004b8e:	d108      	bne.n	8004ba2 <I2C_ITSlaveCplt+0x1ae>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b96:	d104      	bne.n	8004ba2 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f894 	bl	8004cc8 <I2C_ITListenCplt>
 8004ba0:	e030      	b.n	8004c04 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b29      	cmp	r3, #41	@ 0x29
 8004bac:	d10e      	bne.n	8004bcc <I2C_ITSlaveCplt+0x1d8>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bb4:	d00a      	beq.n	8004bcc <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2210      	movs	r2, #16
 8004bbc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9ef 	bl	8004fa2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff feb7 	bl	8004938 <I2C_ITSlaveSeqCplt>
 8004bca:	e01b      	b.n	8004c04 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	61da      	str	r2, [r3, #28]
 8004bd4:	e016      	b.n	8004c04 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2210      	movs	r2, #16
 8004bdc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f043 0204 	orr.w	r2, r3, #4
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <I2C_ITSlaveCplt+0x204>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bf6:	d105      	bne.n	8004c04 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8b8 	bl	8004d74 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d010      	beq.n	8004c3c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8a7 	bl	8004d74 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b28      	cmp	r3, #40	@ 0x28
 8004c30:	d141      	bne.n	8004cb6 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f847 	bl	8004cc8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c3a:	e03c      	b.n	8004cb6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c44:	d014      	beq.n	8004c70 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fe76 	bl	8004938 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <I2C_ITSlaveCplt+0x2d0>)
 8004c50:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fcbf 	bl	80045ec <HAL_I2C_ListenCpltCallback>
}
 8004c6e:	e022      	b.n	8004cb6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b22      	cmp	r3, #34	@ 0x22
 8004c7a:	d10e      	bne.n	8004c9a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fc92 	bl	80045bc <HAL_I2C_SlaveRxCpltCallback>
}
 8004c98:	e00d      	b.n	8004cb6 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fc79 	bl	80045a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	fe00e800 	.word	0xfe00e800
 8004cc4:	ffff0000 	.word	0xffff0000

08004cc8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	@ (8004d70 <I2C_ITListenCplt+0xa8>)
 8004cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d022      	beq.n	8004d46 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d012      	beq.n	8004d46 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0204 	orr.w	r2, r3, #4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d46:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f96b 	bl	8005026 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2210      	movs	r2, #16
 8004d56:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fc43 	bl	80045ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	ffff0000 	.word	0xffff0000

08004d74 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d84:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a6d      	ldr	r2, [pc, #436]	@ (8004f48 <I2C_ITError+0x1d4>)
 8004d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	2b28      	cmp	r3, #40	@ 0x28
 8004daa:	d005      	beq.n	8004db8 <I2C_ITError+0x44>
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b29      	cmp	r3, #41	@ 0x29
 8004db0:	d002      	beq.n	8004db8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004db6:	d10b      	bne.n	8004dd0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004db8:	2103      	movs	r1, #3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f933 	bl	8005026 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2228      	movs	r2, #40	@ 0x28
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a60      	ldr	r2, [pc, #384]	@ (8004f4c <I2C_ITError+0x1d8>)
 8004dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004dce:	e030      	b.n	8004e32 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004dd0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f926 	bl	8005026 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8e1 	bl	8004fa2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b60      	cmp	r3, #96	@ 0x60
 8004dea:	d01f      	beq.n	8004e2c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d114      	bne.n	8004e2c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d109      	bne.n	8004e24 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2210      	movs	r2, #16
 8004e16:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1c:	f043 0204 	orr.w	r2, r3, #4
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d039      	beq.n	8004eb4 <I2C_ITError+0x140>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b11      	cmp	r3, #17
 8004e44:	d002      	beq.n	8004e4c <I2C_ITError+0xd8>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b21      	cmp	r3, #33	@ 0x21
 8004e4a:	d133      	bne.n	8004eb4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e5a:	d107      	bne.n	8004e6c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff f882 	bl	8003f7a <HAL_DMA_GetState>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d017      	beq.n	8004eac <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e80:	4a33      	ldr	r2, [pc, #204]	@ (8004f50 <I2C_ITError+0x1dc>)
 8004e82:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff f831 	bl	8003ef8 <HAL_DMA_Abort_IT>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d04d      	beq.n	8004f38 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eaa:	e045      	b.n	8004f38 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f851 	bl	8004f54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eb2:	e041      	b.n	8004f38 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d039      	beq.n	8004f30 <I2C_ITError+0x1bc>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b12      	cmp	r3, #18
 8004ec0:	d002      	beq.n	8004ec8 <I2C_ITError+0x154>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b22      	cmp	r3, #34	@ 0x22
 8004ec6:	d133      	bne.n	8004f30 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ed6:	d107      	bne.n	8004ee8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ee6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff f844 	bl	8003f7a <HAL_DMA_GetState>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d017      	beq.n	8004f28 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efc:	4a14      	ldr	r2, [pc, #80]	@ (8004f50 <I2C_ITError+0x1dc>)
 8004efe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fe fff3 	bl	8003ef8 <HAL_DMA_Abort_IT>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d011      	beq.n	8004f3c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f22:	4610      	mov	r0, r2
 8004f24:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f26:	e009      	b.n	8004f3c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f813 	bl	8004f54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f2e:	e005      	b.n	8004f3c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f80f 	bl	8004f54 <I2C_TreatErrorCallback>
  }
}
 8004f36:	e002      	b.n	8004f3e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f38:	bf00      	nop
 8004f3a:	e000      	b.n	8004f3e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f3c:	bf00      	nop
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	ffff0000 	.word	0xffff0000
 8004f4c:	08004629 	.word	0x08004629
 8004f50:	08004feb 	.word	0x08004feb

08004f54 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b60      	cmp	r3, #96	@ 0x60
 8004f66:	d10e      	bne.n	8004f86 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fb48 	bl	8004614 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f84:	e009      	b.n	8004f9a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fb33 	bl	8004600 <HAL_I2C_ErrorCallback>
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d103      	bne.n	8004fc0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d007      	beq.n	8004fde <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	619a      	str	r2, [r3, #24]
  }
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	2200      	movs	r2, #0
 8005006:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	2200      	movs	r2, #0
 8005016:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7ff ff9b 	bl	8004f54 <I2C_TreatErrorCallback>
}
 800501e:	bf00      	nop
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00f      	beq.n	8005060 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005046:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005054:	2b28      	cmp	r3, #40	@ 0x28
 8005056:	d003      	beq.n	8005060 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800505e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005060:	887b      	ldrh	r3, [r7, #2]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00f      	beq.n	800508a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005070:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800507e:	2b28      	cmp	r3, #40	@ 0x28
 8005080:	d003      	beq.n	800508a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005088:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800508a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800508e:	2b00      	cmp	r3, #0
 8005090:	da03      	bge.n	800509a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005098:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800509a:	887b      	ldrh	r3, [r7, #2]
 800509c:	2b10      	cmp	r3, #16
 800509e:	d103      	bne.n	80050a8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80050a8:	887b      	ldrh	r3, [r7, #2]
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d103      	bne.n	80050b6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f043 0320 	orr.w	r3, r3, #32
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80050b6:	887b      	ldrh	r3, [r7, #2]
 80050b8:	2b40      	cmp	r3, #64	@ 0x40
 80050ba:	d103      	bne.n	80050c4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	43da      	mvns	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	400a      	ands	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d138      	bne.n	800516a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005102:	2302      	movs	r3, #2
 8005104:	e032      	b.n	800516c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2224      	movs	r2, #36	@ 0x24
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005134:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6819      	ldr	r1, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800516a:	2302      	movs	r3, #2
  }
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b20      	cmp	r3, #32
 800518c:	d139      	bne.n	8005202 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005198:	2302      	movs	r3, #2
 800519a:	e033      	b.n	8005204 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2224      	movs	r2, #36	@ 0x24
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e000      	b.n	8005204 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005202:	2302      	movs	r3, #2
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005214:	4b04      	ldr	r3, [pc, #16]	@ (8005228 <HAL_PWREx_GetVoltageRange+0x18>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40007000 	.word	0x40007000

0800522c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800523a:	d130      	bne.n	800529e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800523c:	4b23      	ldr	r3, [pc, #140]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005248:	d038      	beq.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800524a:	4b20      	ldr	r3, [pc, #128]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005252:	4a1e      	ldr	r2, [pc, #120]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005254:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005258:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800525a:	4b1d      	ldr	r3, [pc, #116]	@ (80052d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2232      	movs	r2, #50	@ 0x32
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	4a1b      	ldr	r2, [pc, #108]	@ (80052d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0c9b      	lsrs	r3, r3, #18
 800526c:	3301      	adds	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005270:	e002      	b.n	8005278 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3b01      	subs	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005278:	4b14      	ldr	r3, [pc, #80]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005284:	d102      	bne.n	800528c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f2      	bne.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800528c:	4b0f      	ldr	r3, [pc, #60]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005298:	d110      	bne.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e00f      	b.n	80052be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800529e:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052aa:	d007      	beq.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052b4:	4a05      	ldr	r2, [pc, #20]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40007000 	.word	0x40007000
 80052d0:	2000002c 	.word	0x2000002c
 80052d4:	431bde83 	.word	0x431bde83

080052d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e3ca      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ea:	4b97      	ldr	r3, [pc, #604]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f4:	4b94      	ldr	r3, [pc, #592]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80e4 	beq.w	80054d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_RCC_OscConfig+0x4a>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b0c      	cmp	r3, #12
 8005316:	f040 808b 	bne.w	8005430 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b01      	cmp	r3, #1
 800531e:	f040 8087 	bne.w	8005430 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005322:	4b89      	ldr	r3, [pc, #548]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_RCC_OscConfig+0x62>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e3a2      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	4b82      	ldr	r3, [pc, #520]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <HAL_RCC_OscConfig+0x7c>
 800534a:	4b7f      	ldr	r3, [pc, #508]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005352:	e005      	b.n	8005360 <HAL_RCC_OscConfig+0x88>
 8005354:	4b7c      	ldr	r3, [pc, #496]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005360:	4293      	cmp	r3, r2
 8005362:	d223      	bcs.n	80053ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fd87 	bl	8005e7c <RCC_SetFlashLatencyFromMSIRange>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e383      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005378:	4b73      	ldr	r3, [pc, #460]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a72      	ldr	r2, [pc, #456]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800537e:	f043 0308 	orr.w	r3, r3, #8
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4b70      	ldr	r3, [pc, #448]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	496d      	ldr	r1, [pc, #436]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005396:	4b6c      	ldr	r3, [pc, #432]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	4968      	ldr	r1, [pc, #416]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	604b      	str	r3, [r1, #4]
 80053aa:	e025      	b.n	80053f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ac:	4b66      	ldr	r3, [pc, #408]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a65      	ldr	r2, [pc, #404]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80053b2:	f043 0308 	orr.w	r3, r3, #8
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	4b63      	ldr	r3, [pc, #396]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	4960      	ldr	r1, [pc, #384]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	495b      	ldr	r1, [pc, #364]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fd47 	bl	8005e7c <RCC_SetFlashLatencyFromMSIRange>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e343      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053f8:	f000 fc4a 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 80053fc:	4602      	mov	r2, r0
 80053fe:	4b52      	ldr	r3, [pc, #328]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	4950      	ldr	r1, [pc, #320]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800540a:	5ccb      	ldrb	r3, [r1, r3]
 800540c:	f003 031f 	and.w	r3, r3, #31
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
 8005414:	4a4e      	ldr	r2, [pc, #312]	@ (8005550 <HAL_RCC_OscConfig+0x278>)
 8005416:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005418:	4b4e      	ldr	r3, [pc, #312]	@ (8005554 <HAL_RCC_OscConfig+0x27c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fc ff89 	bl	8002334 <HAL_InitTick>
 8005422:	4603      	mov	r3, r0
 8005424:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d052      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	e327      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d032      	beq.n	800549e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005438:	4b43      	ldr	r3, [pc, #268]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a42      	ldr	r2, [pc, #264]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005444:	f7fd fc88 	bl	8002d58 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800544c:	f7fd fc84 	bl	8002d58 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e310      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800545e:	4b3a      	ldr	r3, [pc, #232]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800546a:	4b37      	ldr	r3, [pc, #220]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a36      	ldr	r2, [pc, #216]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005470:	f043 0308 	orr.w	r3, r3, #8
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b34      	ldr	r3, [pc, #208]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	4931      	ldr	r1, [pc, #196]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005488:	4b2f      	ldr	r3, [pc, #188]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	492c      	ldr	r1, [pc, #176]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
 800549c:	e01a      	b.n	80054d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800549e:	4b2a      	ldr	r3, [pc, #168]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054aa:	f7fd fc55 	bl	8002d58 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054b2:	f7fd fc51 	bl	8002d58 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e2dd      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054c4:	4b20      	ldr	r3, [pc, #128]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f0      	bne.n	80054b2 <HAL_RCC_OscConfig+0x1da>
 80054d0:	e000      	b.n	80054d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d074      	beq.n	80055ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d005      	beq.n	80054f2 <HAL_RCC_OscConfig+0x21a>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d10e      	bne.n	800550a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d10b      	bne.n	800550a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f2:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d064      	beq.n	80055c8 <HAL_RCC_OscConfig+0x2f0>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d160      	bne.n	80055c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e2ba      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005512:	d106      	bne.n	8005522 <HAL_RCC_OscConfig+0x24a>
 8005514:	4b0c      	ldr	r3, [pc, #48]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a0b      	ldr	r2, [pc, #44]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800551a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e026      	b.n	8005570 <HAL_RCC_OscConfig+0x298>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800552a:	d115      	bne.n	8005558 <HAL_RCC_OscConfig+0x280>
 800552c:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a05      	ldr	r2, [pc, #20]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 8005532:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b03      	ldr	r3, [pc, #12]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a02      	ldr	r2, [pc, #8]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e014      	b.n	8005570 <HAL_RCC_OscConfig+0x298>
 8005546:	bf00      	nop
 8005548:	40021000 	.word	0x40021000
 800554c:	08012b18 	.word	0x08012b18
 8005550:	2000002c 	.word	0x2000002c
 8005554:	20000030 	.word	0x20000030
 8005558:	4ba0      	ldr	r3, [pc, #640]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a9f      	ldr	r2, [pc, #636]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 800555e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b9d      	ldr	r3, [pc, #628]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a9c      	ldr	r2, [pc, #624]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 800556a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800556e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d013      	beq.n	80055a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fd fbee 	bl	8002d58 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005580:	f7fd fbea 	bl	8002d58 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	@ 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e276      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005592:	4b92      	ldr	r3, [pc, #584]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x2a8>
 800559e:	e014      	b.n	80055ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd fbda 	bl	8002d58 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a8:	f7fd fbd6 	bl	8002d58 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	@ 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e262      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ba:	4b88      	ldr	r3, [pc, #544]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x2d0>
 80055c6:	e000      	b.n	80055ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d060      	beq.n	8005698 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_OscConfig+0x310>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d119      	bne.n	8005616 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d116      	bne.n	8005616 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e8:	4b7c      	ldr	r3, [pc, #496]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_OscConfig+0x328>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e23f      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005600:	4b76      	ldr	r3, [pc, #472]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	061b      	lsls	r3, r3, #24
 800560e:	4973      	ldr	r1, [pc, #460]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005610:	4313      	orrs	r3, r2
 8005612:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005614:	e040      	b.n	8005698 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d023      	beq.n	8005666 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800561e:	4b6f      	ldr	r3, [pc, #444]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6e      	ldr	r2, [pc, #440]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562a:	f7fd fb95 	bl	8002d58 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005632:	f7fd fb91 	bl	8002d58 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e21d      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005644:	4b65      	ldr	r3, [pc, #404]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005650:	4b62      	ldr	r3, [pc, #392]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	495f      	ldr	r1, [pc, #380]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005660:	4313      	orrs	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
 8005664:	e018      	b.n	8005698 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005666:	4b5d      	ldr	r3, [pc, #372]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a5c      	ldr	r2, [pc, #368]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 800566c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005672:	f7fd fb71 	bl	8002d58 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800567a:	f7fd fb6d 	bl	8002d58 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e1f9      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800568c:	4b53      	ldr	r3, [pc, #332]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f0      	bne.n	800567a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d03c      	beq.n	800571e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01c      	beq.n	80056e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ac:	4b4b      	ldr	r3, [pc, #300]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80056ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056b2:	4a4a      	ldr	r2, [pc, #296]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fd fb4c 	bl	8002d58 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c4:	f7fd fb48 	bl	8002d58 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e1d4      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056d6:	4b41      	ldr	r3, [pc, #260]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80056d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ef      	beq.n	80056c4 <HAL_RCC_OscConfig+0x3ec>
 80056e4:	e01b      	b.n	800571e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e6:	4b3d      	ldr	r3, [pc, #244]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80056e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ec:	4a3b      	ldr	r2, [pc, #236]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f6:	f7fd fb2f 	bl	8002d58 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056fe:	f7fd fb2b 	bl	8002d58 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e1b7      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005710:	4b32      	ldr	r3, [pc, #200]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1ef      	bne.n	80056fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80a6 	beq.w	8005878 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572c:	2300      	movs	r3, #0
 800572e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005730:	4b2a      	ldr	r3, [pc, #168]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10d      	bne.n	8005758 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573c:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 800573e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005740:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 8005742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005746:	6593      	str	r3, [r2, #88]	@ 0x58
 8005748:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005754:	2301      	movs	r3, #1
 8005756:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005758:	4b21      	ldr	r3, [pc, #132]	@ (80057e0 <HAL_RCC_OscConfig+0x508>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d118      	bne.n	8005796 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005764:	4b1e      	ldr	r3, [pc, #120]	@ (80057e0 <HAL_RCC_OscConfig+0x508>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1d      	ldr	r2, [pc, #116]	@ (80057e0 <HAL_RCC_OscConfig+0x508>)
 800576a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800576e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005770:	f7fd faf2 	bl	8002d58 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005778:	f7fd faee 	bl	8002d58 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e17a      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800578a:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <HAL_RCC_OscConfig+0x508>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d108      	bne.n	80057b0 <HAL_RCC_OscConfig+0x4d8>
 800579e:	4b0f      	ldr	r3, [pc, #60]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a4:	4a0d      	ldr	r2, [pc, #52]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057ae:	e029      	b.n	8005804 <HAL_RCC_OscConfig+0x52c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	d115      	bne.n	80057e4 <HAL_RCC_OscConfig+0x50c>
 80057b8:	4b08      	ldr	r3, [pc, #32]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057be:	4a07      	ldr	r2, [pc, #28]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80057c0:	f043 0304 	orr.w	r3, r3, #4
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057c8:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ce:	4a03      	ldr	r2, [pc, #12]	@ (80057dc <HAL_RCC_OscConfig+0x504>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057d8:	e014      	b.n	8005804 <HAL_RCC_OscConfig+0x52c>
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000
 80057e0:	40007000 	.word	0x40007000
 80057e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ea:	4a9b      	ldr	r2, [pc, #620]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057f4:	4b98      	ldr	r3, [pc, #608]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fa:	4a97      	ldr	r2, [pc, #604]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d016      	beq.n	800583a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fd faa4 	bl	8002d58 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005812:	e00a      	b.n	800582a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005814:	f7fd faa0 	bl	8002d58 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e12a      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800582a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0ed      	beq.n	8005814 <HAL_RCC_OscConfig+0x53c>
 8005838:	e015      	b.n	8005866 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583a:	f7fd fa8d 	bl	8002d58 <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005840:	e00a      	b.n	8005858 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fd fa89 	bl	8002d58 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005850:	4293      	cmp	r3, r2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e113      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005858:	4b7f      	ldr	r3, [pc, #508]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1ed      	bne.n	8005842 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005866:	7ffb      	ldrb	r3, [r7, #31]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d105      	bne.n	8005878 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800586c:	4b7a      	ldr	r3, [pc, #488]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 800586e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005870:	4a79      	ldr	r2, [pc, #484]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 8005872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005876:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80fe 	beq.w	8005a7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	2b02      	cmp	r3, #2
 8005888:	f040 80d0 	bne.w	8005a2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800588c:	4b72      	ldr	r3, [pc, #456]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f003 0203 	and.w	r2, r3, #3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d130      	bne.n	8005902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	3b01      	subs	r3, #1
 80058ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d127      	bne.n	8005902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d11f      	bne.n	8005902 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058cc:	2a07      	cmp	r2, #7
 80058ce:	bf14      	ite	ne
 80058d0:	2201      	movne	r2, #1
 80058d2:	2200      	moveq	r2, #0
 80058d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d113      	bne.n	8005902 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	3b01      	subs	r3, #1
 80058e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d109      	bne.n	8005902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	3b01      	subs	r3, #1
 80058fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d06e      	beq.n	80059e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d069      	beq.n	80059dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005908:	4b53      	ldr	r3, [pc, #332]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d105      	bne.n	8005920 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005914:	4b50      	ldr	r3, [pc, #320]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e0ad      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005924:	4b4c      	ldr	r3, [pc, #304]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a4b      	ldr	r2, [pc, #300]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 800592a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800592e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005930:	f7fd fa12 	bl	8002d58 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005938:	f7fd fa0e 	bl	8002d58 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e09a      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800594a:	4b43      	ldr	r3, [pc, #268]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005956:	4b40      	ldr	r3, [pc, #256]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	4b40      	ldr	r3, [pc, #256]	@ (8005a5c <HAL_RCC_OscConfig+0x784>)
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005966:	3a01      	subs	r2, #1
 8005968:	0112      	lsls	r2, r2, #4
 800596a:	4311      	orrs	r1, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005970:	0212      	lsls	r2, r2, #8
 8005972:	4311      	orrs	r1, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005978:	0852      	lsrs	r2, r2, #1
 800597a:	3a01      	subs	r2, #1
 800597c:	0552      	lsls	r2, r2, #21
 800597e:	4311      	orrs	r1, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005984:	0852      	lsrs	r2, r2, #1
 8005986:	3a01      	subs	r2, #1
 8005988:	0652      	lsls	r2, r2, #25
 800598a:	4311      	orrs	r1, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005990:	0912      	lsrs	r2, r2, #4
 8005992:	0452      	lsls	r2, r2, #17
 8005994:	430a      	orrs	r2, r1
 8005996:	4930      	ldr	r1, [pc, #192]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 8005998:	4313      	orrs	r3, r2
 800599a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800599c:	4b2e      	ldr	r3, [pc, #184]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059b4:	f7fd f9d0 	bl	8002d58 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059bc:	f7fd f9cc 	bl	8002d58 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e058      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ce:	4b22      	ldr	r3, [pc, #136]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059da:	e050      	b.n	8005a7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e04f      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d148      	bne.n	8005a7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a19      	ldr	r2, [pc, #100]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059f8:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4a16      	ldr	r2, [pc, #88]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 80059fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a04:	f7fd f9a8 	bl	8002d58 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0c:	f7fd f9a4 	bl	8002d58 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e030      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0x734>
 8005a2a:	e028      	b.n	8005a7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b0c      	cmp	r3, #12
 8005a30:	d023      	beq.n	8005a7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a32:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a08      	ldr	r2, [pc, #32]	@ (8005a58 <HAL_RCC_OscConfig+0x780>)
 8005a38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3e:	f7fd f98b 	bl	8002d58 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a44:	e00c      	b.n	8005a60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a46:	f7fd f987 	bl	8002d58 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d905      	bls.n	8005a60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e013      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a60:	4b09      	ldr	r3, [pc, #36]	@ (8005a88 <HAL_RCC_OscConfig+0x7b0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ec      	bne.n	8005a46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a6c:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <HAL_RCC_OscConfig+0x7b0>)
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	4905      	ldr	r1, [pc, #20]	@ (8005a88 <HAL_RCC_OscConfig+0x7b0>)
 8005a72:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <HAL_RCC_OscConfig+0x7b4>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	60cb      	str	r3, [r1, #12]
 8005a78:	e001      	b.n	8005a7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3720      	adds	r7, #32
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	feeefffc 	.word	0xfeeefffc

08005a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0e7      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa4:	4b75      	ldr	r3, [pc, #468]	@ (8005c7c <HAL_RCC_ClockConfig+0x1ec>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d910      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab2:	4b72      	ldr	r3, [pc, #456]	@ (8005c7c <HAL_RCC_ClockConfig+0x1ec>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f023 0207 	bic.w	r2, r3, #7
 8005aba:	4970      	ldr	r1, [pc, #448]	@ (8005c7c <HAL_RCC_ClockConfig+0x1ec>)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8005c7c <HAL_RCC_ClockConfig+0x1ec>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0cf      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d010      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	4b66      	ldr	r3, [pc, #408]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d908      	bls.n	8005b02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af0:	4b63      	ldr	r3, [pc, #396]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4960      	ldr	r1, [pc, #384]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d04c      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b16:	4b5a      	ldr	r3, [pc, #360]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d121      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0a6      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b2e:	4b54      	ldr	r3, [pc, #336]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d115      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e09a      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b46:	4b4e      	ldr	r3, [pc, #312]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e08e      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b56:	4b4a      	ldr	r3, [pc, #296]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e086      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b46      	ldr	r3, [pc, #280]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4943      	ldr	r1, [pc, #268]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b78:	f7fd f8ee 	bl	8002d58 <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fd f8ea 	bl	8002d58 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e06e      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	4b3a      	ldr	r3, [pc, #232]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 020c 	and.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1eb      	bne.n	8005b80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d010      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	4b31      	ldr	r3, [pc, #196]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d208      	bcs.n	8005bd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	492b      	ldr	r1, [pc, #172]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd6:	4b29      	ldr	r3, [pc, #164]	@ (8005c7c <HAL_RCC_ClockConfig+0x1ec>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d210      	bcs.n	8005c06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be4:	4b25      	ldr	r3, [pc, #148]	@ (8005c7c <HAL_RCC_ClockConfig+0x1ec>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f023 0207 	bic.w	r2, r3, #7
 8005bec:	4923      	ldr	r1, [pc, #140]	@ (8005c7c <HAL_RCC_ClockConfig+0x1ec>)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf4:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <HAL_RCC_ClockConfig+0x1ec>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d001      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e036      	b.n	8005c74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c12:	4b1b      	ldr	r3, [pc, #108]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	4918      	ldr	r1, [pc, #96]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c30:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4910      	ldr	r1, [pc, #64]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c44:	f000 f824 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <HAL_RCC_ClockConfig+0x1f0>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	091b      	lsrs	r3, r3, #4
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	490b      	ldr	r1, [pc, #44]	@ (8005c84 <HAL_RCC_ClockConfig+0x1f4>)
 8005c56:	5ccb      	ldrb	r3, [r1, r3]
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	4a09      	ldr	r2, [pc, #36]	@ (8005c88 <HAL_RCC_ClockConfig+0x1f8>)
 8005c62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c64:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <HAL_RCC_ClockConfig+0x1fc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fc fb63 	bl	8002334 <HAL_InitTick>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c72:	7afb      	ldrb	r3, [r7, #11]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40022000 	.word	0x40022000
 8005c80:	40021000 	.word	0x40021000
 8005c84:	08012b18 	.word	0x08012b18
 8005c88:	2000002c 	.word	0x2000002c
 8005c8c:	20000030 	.word	0x20000030

08005c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b089      	sub	sp, #36	@ 0x24
 8005c94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b0c      	cmp	r3, #12
 8005cbc:	d121      	bne.n	8005d02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d11e      	bne.n	8005d02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cc4:	4b34      	ldr	r3, [pc, #208]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d107      	bne.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cd0:	4b31      	ldr	r3, [pc, #196]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	e005      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	091b      	lsrs	r3, r3, #4
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cec:	4a2b      	ldr	r2, [pc, #172]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10d      	bne.n	8005d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d00:	e00a      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d102      	bne.n	8005d0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d08:	4b25      	ldr	r3, [pc, #148]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	e004      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d101      	bne.n	8005d18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d14:	4b23      	ldr	r3, [pc, #140]	@ (8005da4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2b0c      	cmp	r3, #12
 8005d1c:	d134      	bne.n	8005d88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCC_GetSysClockFreq+0xa6>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d003      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0xac>
 8005d34:	e005      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d36:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d38:	617b      	str	r3, [r7, #20]
      break;
 8005d3a:	e005      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d3c:	4b19      	ldr	r3, [pc, #100]	@ (8005da4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d3e:	617b      	str	r3, [r7, #20]
      break;
 8005d40:	e002      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	617b      	str	r3, [r7, #20]
      break;
 8005d46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d48:	4b13      	ldr	r3, [pc, #76]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	091b      	lsrs	r3, r3, #4
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	3301      	adds	r3, #1
 8005d54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d56:	4b10      	ldr	r3, [pc, #64]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	fb03 f202 	mul.w	r2, r3, r2
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	0e5b      	lsrs	r3, r3, #25
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	3301      	adds	r3, #1
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d88:	69bb      	ldr	r3, [r7, #24]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3724      	adds	r7, #36	@ 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	08012b30 	.word	0x08012b30
 8005da0:	00f42400 	.word	0x00f42400
 8005da4:	007a1200 	.word	0x007a1200

08005da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dac:	4b03      	ldr	r3, [pc, #12]	@ (8005dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dae:	681b      	ldr	r3, [r3, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	2000002c 	.word	0x2000002c

08005dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005dc4:	f7ff fff0 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b06      	ldr	r3, [pc, #24]	@ (8005de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	0a1b      	lsrs	r3, r3, #8
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4904      	ldr	r1, [pc, #16]	@ (8005de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40021000 	.word	0x40021000
 8005de8:	08012b28 	.word	0x08012b28

08005dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005df0:	f7ff ffda 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	0adb      	lsrs	r3, r3, #11
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	4904      	ldr	r1, [pc, #16]	@ (8005e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40021000 	.word	0x40021000
 8005e14:	08012b28 	.word	0x08012b28

08005e18 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	220f      	movs	r2, #15
 8005e26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005e28:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0203 	and.w	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005e34:	4b0f      	ldr	r3, [pc, #60]	@ (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005e40:	4b0c      	ldr	r3, [pc, #48]	@ (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005e4c:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	08db      	lsrs	r3, r3, #3
 8005e52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e5a:	4b07      	ldr	r3, [pc, #28]	@ (8005e78 <HAL_RCC_GetClockConfig+0x60>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0207 	and.w	r2, r3, #7
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	601a      	str	r2, [r3, #0]
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40022000 	.word	0x40022000

08005e7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e88:	4b2a      	ldr	r3, [pc, #168]	@ (8005f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e94:	f7ff f9bc 	bl	8005210 <HAL_PWREx_GetVoltageRange>
 8005e98:	6178      	str	r0, [r7, #20]
 8005e9a:	e014      	b.n	8005ec6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e9c:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea0:	4a24      	ldr	r2, [pc, #144]	@ (8005f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea8:	4b22      	ldr	r3, [pc, #136]	@ (8005f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005eb4:	f7ff f9ac 	bl	8005210 <HAL_PWREx_GetVoltageRange>
 8005eb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005eba:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8005f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ecc:	d10b      	bne.n	8005ee6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b80      	cmp	r3, #128	@ 0x80
 8005ed2:	d919      	bls.n	8005f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ed8:	d902      	bls.n	8005ee0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005eda:	2302      	movs	r3, #2
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e013      	b.n	8005f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	e010      	b.n	8005f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b80      	cmp	r3, #128	@ 0x80
 8005eea:	d902      	bls.n	8005ef2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005eec:	2303      	movs	r3, #3
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	e00a      	b.n	8005f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b80      	cmp	r3, #128	@ 0x80
 8005ef6:	d102      	bne.n	8005efe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ef8:	2302      	movs	r3, #2
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	e004      	b.n	8005f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b70      	cmp	r3, #112	@ 0x70
 8005f02:	d101      	bne.n	8005f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f04:	2301      	movs	r3, #1
 8005f06:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f08:	4b0b      	ldr	r3, [pc, #44]	@ (8005f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f023 0207 	bic.w	r2, r3, #7
 8005f10:	4909      	ldr	r1, [pc, #36]	@ (8005f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f18:	4b07      	ldr	r3, [pc, #28]	@ (8005f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d001      	beq.n	8005f2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	40022000 	.word	0x40022000

08005f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f44:	2300      	movs	r3, #0
 8005f46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f48:	2300      	movs	r3, #0
 8005f4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d041      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f5c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f60:	d02a      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f62:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f66:	d824      	bhi.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f6c:	d008      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f72:	d81e      	bhi.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f7c:	d010      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f7e:	e018      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f80:	4b86      	ldr	r3, [pc, #536]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a85      	ldr	r2, [pc, #532]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f8c:	e015      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3304      	adds	r3, #4
 8005f92:	2100      	movs	r1, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fabb 	bl	8006510 <RCCEx_PLLSAI1_Config>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f9e:	e00c      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3320      	adds	r3, #32
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fba6 	bl	80066f8 <RCCEx_PLLSAI2_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fb0:	e003      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8005fb6:	e000      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fba:	7cfb      	ldrb	r3, [r7, #19]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fc0:	4b76      	ldr	r3, [pc, #472]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fce:	4973      	ldr	r1, [pc, #460]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005fd6:	e001      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d041      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ff0:	d02a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005ff2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ff6:	d824      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ffc:	d008      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ffe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006002:	d81e      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800600c:	d010      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800600e:	e018      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006010:	4b62      	ldr	r3, [pc, #392]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4a61      	ldr	r2, [pc, #388]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800601a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800601c:	e015      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3304      	adds	r3, #4
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fa73 	bl	8006510 <RCCEx_PLLSAI1_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800602e:	e00c      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3320      	adds	r3, #32
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fb5e 	bl	80066f8 <RCCEx_PLLSAI2_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006040:	e003      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	74fb      	strb	r3, [r7, #19]
      break;
 8006046:	e000      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800604a:	7cfb      	ldrb	r3, [r7, #19]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006050:	4b52      	ldr	r3, [pc, #328]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006056:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800605e:	494f      	ldr	r1, [pc, #316]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006066:	e001      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006068:	7cfb      	ldrb	r3, [r7, #19]
 800606a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80a0 	beq.w	80061ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800607a:	2300      	movs	r3, #0
 800607c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800607e:	4b47      	ldr	r3, [pc, #284]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00d      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006094:	4b41      	ldr	r3, [pc, #260]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006098:	4a40      	ldr	r2, [pc, #256]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800609e:	6593      	str	r3, [r2, #88]	@ 0x58
 80060a0:	4b3e      	ldr	r3, [pc, #248]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ac:	2301      	movs	r3, #1
 80060ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060b0:	4b3b      	ldr	r3, [pc, #236]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a3a      	ldr	r2, [pc, #232]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060bc:	f7fc fe4c 	bl	8002d58 <HAL_GetTick>
 80060c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060c2:	e009      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c4:	f7fc fe48 	bl	8002d58 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d902      	bls.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	74fb      	strb	r3, [r7, #19]
        break;
 80060d6:	e005      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060d8:	4b31      	ldr	r3, [pc, #196]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0ef      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80060e4:	7cfb      	ldrb	r3, [r7, #19]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d15c      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060ea:	4b2c      	ldr	r3, [pc, #176]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01f      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	429a      	cmp	r2, r3
 8006106:	d019      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006108:	4b24      	ldr	r3, [pc, #144]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006112:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006114:	4b21      	ldr	r3, [pc, #132]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611a:	4a20      	ldr	r2, [pc, #128]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006124:	4b1d      	ldr	r3, [pc, #116]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	4a1c      	ldr	r2, [pc, #112]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800612c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006134:	4a19      	ldr	r2, [pc, #100]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006146:	f7fc fe07 	bl	8002d58 <HAL_GetTick>
 800614a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800614c:	e00b      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614e:	f7fc fe03 	bl	8002d58 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615c:	4293      	cmp	r3, r2
 800615e:	d902      	bls.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	74fb      	strb	r3, [r7, #19]
            break;
 8006164:	e006      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0ec      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006174:	7cfb      	ldrb	r3, [r7, #19]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10c      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800617a:	4b08      	ldr	r3, [pc, #32]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800618a:	4904      	ldr	r1, [pc, #16]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006192:	e009      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006194:	7cfb      	ldrb	r3, [r7, #19]
 8006196:	74bb      	strb	r3, [r7, #18]
 8006198:	e006      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000
 80061a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061a8:	7c7b      	ldrb	r3, [r7, #17]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d105      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ae:	4b9e      	ldr	r3, [pc, #632]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b2:	4a9d      	ldr	r2, [pc, #628]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061c6:	4b98      	ldr	r3, [pc, #608]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061cc:	f023 0203 	bic.w	r2, r3, #3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	4994      	ldr	r1, [pc, #592]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061e8:	4b8f      	ldr	r3, [pc, #572]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ee:	f023 020c 	bic.w	r2, r3, #12
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f6:	498c      	ldr	r1, [pc, #560]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800620a:	4b87      	ldr	r3, [pc, #540]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	4983      	ldr	r1, [pc, #524]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800622c:	4b7e      	ldr	r3, [pc, #504]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006232:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623a:	497b      	ldr	r1, [pc, #492]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800624e:	4b76      	ldr	r3, [pc, #472]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006254:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800625c:	4972      	ldr	r1, [pc, #456]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006270:	4b6d      	ldr	r3, [pc, #436]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006276:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800627e:	496a      	ldr	r1, [pc, #424]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006292:	4b65      	ldr	r3, [pc, #404]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006298:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a0:	4961      	ldr	r1, [pc, #388]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062b4:	4b5c      	ldr	r3, [pc, #368]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c2:	4959      	ldr	r1, [pc, #356]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062d6:	4b54      	ldr	r3, [pc, #336]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e4:	4950      	ldr	r1, [pc, #320]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006306:	4948      	ldr	r1, [pc, #288]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800631a:	4b43      	ldr	r3, [pc, #268]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006320:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006328:	493f      	ldr	r1, [pc, #252]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d028      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800633c:	4b3a      	ldr	r3, [pc, #232]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006342:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800634a:	4937      	ldr	r1, [pc, #220]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800635a:	d106      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800635c:	4b32      	ldr	r3, [pc, #200]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4a31      	ldr	r2, [pc, #196]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006366:	60d3      	str	r3, [r2, #12]
 8006368:	e011      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800636e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006372:	d10c      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	2101      	movs	r1, #1
 800637a:	4618      	mov	r0, r3
 800637c:	f000 f8c8 	bl	8006510 <RCCEx_PLLSAI1_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800638a:	7cfb      	ldrb	r3, [r7, #19]
 800638c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d028      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800639a:	4b23      	ldr	r3, [pc, #140]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a8:	491f      	ldr	r1, [pc, #124]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063b8:	d106      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4a1a      	ldr	r2, [pc, #104]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063c4:	60d3      	str	r3, [r2, #12]
 80063c6:	e011      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063d0:	d10c      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3304      	adds	r3, #4
 80063d6:	2101      	movs	r1, #1
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 f899 	bl	8006510 <RCCEx_PLLSAI1_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063e2:	7cfb      	ldrb	r3, [r7, #19]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80063e8:	7cfb      	ldrb	r3, [r7, #19]
 80063ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d02b      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006406:	4908      	ldr	r1, [pc, #32]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006416:	d109      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006418:	4b03      	ldr	r3, [pc, #12]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4a02      	ldr	r2, [pc, #8]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800641e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006422:	60d3      	str	r3, [r2, #12]
 8006424:	e014      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006426:	bf00      	nop
 8006428:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006430:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006434:	d10c      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3304      	adds	r3, #4
 800643a:	2101      	movs	r1, #1
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f867 	bl	8006510 <RCCEx_PLLSAI1_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006446:	7cfb      	ldrb	r3, [r7, #19]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800644c:	7cfb      	ldrb	r3, [r7, #19]
 800644e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d02f      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800645c:	4b2b      	ldr	r3, [pc, #172]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006462:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800646a:	4928      	ldr	r1, [pc, #160]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800647a:	d10d      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3304      	adds	r3, #4
 8006480:	2102      	movs	r1, #2
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f844 	bl	8006510 <RCCEx_PLLSAI1_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800648c:	7cfb      	ldrb	r3, [r7, #19]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d014      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006492:	7cfb      	ldrb	r3, [r7, #19]
 8006494:	74bb      	strb	r3, [r7, #18]
 8006496:	e011      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800649c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064a0:	d10c      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3320      	adds	r3, #32
 80064a6:	2102      	movs	r1, #2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 f925 	bl	80066f8 <RCCEx_PLLSAI2_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064b2:	7cfb      	ldrb	r3, [r7, #19]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80064b8:	7cfb      	ldrb	r3, [r7, #19]
 80064ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064c8:	4b10      	ldr	r3, [pc, #64]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064d6:	490d      	ldr	r1, [pc, #52]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00b      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064ea:	4b08      	ldr	r3, [pc, #32]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064fa:	4904      	ldr	r1, [pc, #16]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006502:	7cbb      	ldrb	r3, [r7, #18]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40021000 	.word	0x40021000

08006510 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800651e:	4b75      	ldr	r3, [pc, #468]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800652a:	4b72      	ldr	r3, [pc, #456]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0203 	and.w	r2, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d10d      	bne.n	8006556 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
       ||
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006542:	4b6c      	ldr	r3, [pc, #432]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	091b      	lsrs	r3, r3, #4
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
       ||
 8006552:	429a      	cmp	r2, r3
 8006554:	d047      	beq.n	80065e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
 800655a:	e044      	b.n	80065e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d018      	beq.n	8006596 <RCCEx_PLLSAI1_Config+0x86>
 8006564:	2b03      	cmp	r3, #3
 8006566:	d825      	bhi.n	80065b4 <RCCEx_PLLSAI1_Config+0xa4>
 8006568:	2b01      	cmp	r3, #1
 800656a:	d002      	beq.n	8006572 <RCCEx_PLLSAI1_Config+0x62>
 800656c:	2b02      	cmp	r3, #2
 800656e:	d009      	beq.n	8006584 <RCCEx_PLLSAI1_Config+0x74>
 8006570:	e020      	b.n	80065b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006572:	4b60      	ldr	r3, [pc, #384]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d11d      	bne.n	80065ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006582:	e01a      	b.n	80065ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006584:	4b5b      	ldr	r3, [pc, #364]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800658c:	2b00      	cmp	r3, #0
 800658e:	d116      	bne.n	80065be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006594:	e013      	b.n	80065be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006596:	4b57      	ldr	r3, [pc, #348]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065a2:	4b54      	ldr	r3, [pc, #336]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d109      	bne.n	80065c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065b2:	e006      	b.n	80065c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e004      	b.n	80065c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065ba:	bf00      	nop
 80065bc:	e002      	b.n	80065c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10d      	bne.n	80065e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065ca:	4b4a      	ldr	r3, [pc, #296]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	3b01      	subs	r3, #1
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	430b      	orrs	r3, r1
 80065e0:	4944      	ldr	r1, [pc, #272]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d17d      	bne.n	80066e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065ec:	4b41      	ldr	r3, [pc, #260]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a40      	ldr	r2, [pc, #256]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f8:	f7fc fbae 	bl	8002d58 <HAL_GetTick>
 80065fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065fe:	e009      	b.n	8006614 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006600:	f7fc fbaa 	bl	8002d58 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d902      	bls.n	8006614 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	73fb      	strb	r3, [r7, #15]
        break;
 8006612:	e005      	b.n	8006620 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006614:	4b37      	ldr	r3, [pc, #220]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1ef      	bne.n	8006600 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d160      	bne.n	80066e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d111      	bne.n	8006650 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800662c:	4b31      	ldr	r3, [pc, #196]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6892      	ldr	r2, [r2, #8]
 800663c:	0211      	lsls	r1, r2, #8
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68d2      	ldr	r2, [r2, #12]
 8006642:	0912      	lsrs	r2, r2, #4
 8006644:	0452      	lsls	r2, r2, #17
 8006646:	430a      	orrs	r2, r1
 8006648:	492a      	ldr	r1, [pc, #168]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800664a:	4313      	orrs	r3, r2
 800664c:	610b      	str	r3, [r1, #16]
 800664e:	e027      	b.n	80066a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d112      	bne.n	800667c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006656:	4b27      	ldr	r3, [pc, #156]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800665e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6892      	ldr	r2, [r2, #8]
 8006666:	0211      	lsls	r1, r2, #8
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6912      	ldr	r2, [r2, #16]
 800666c:	0852      	lsrs	r2, r2, #1
 800666e:	3a01      	subs	r2, #1
 8006670:	0552      	lsls	r2, r2, #21
 8006672:	430a      	orrs	r2, r1
 8006674:	491f      	ldr	r1, [pc, #124]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006676:	4313      	orrs	r3, r2
 8006678:	610b      	str	r3, [r1, #16]
 800667a:	e011      	b.n	80066a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800667c:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006684:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6892      	ldr	r2, [r2, #8]
 800668c:	0211      	lsls	r1, r2, #8
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6952      	ldr	r2, [r2, #20]
 8006692:	0852      	lsrs	r2, r2, #1
 8006694:	3a01      	subs	r2, #1
 8006696:	0652      	lsls	r2, r2, #25
 8006698:	430a      	orrs	r2, r1
 800669a:	4916      	ldr	r1, [pc, #88]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800669c:	4313      	orrs	r3, r2
 800669e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066a0:	4b14      	ldr	r3, [pc, #80]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a13      	ldr	r2, [pc, #76]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ac:	f7fc fb54 	bl	8002d58 <HAL_GetTick>
 80066b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066b2:	e009      	b.n	80066c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066b4:	f7fc fb50 	bl	8002d58 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d902      	bls.n	80066c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	73fb      	strb	r3, [r7, #15]
          break;
 80066c6:	e005      	b.n	80066d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066c8:	4b0a      	ldr	r3, [pc, #40]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0ef      	beq.n	80066b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066da:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	4904      	ldr	r1, [pc, #16]	@ (80066f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40021000 	.word	0x40021000

080066f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006706:	4b6a      	ldr	r3, [pc, #424]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d018      	beq.n	8006744 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006712:	4b67      	ldr	r3, [pc, #412]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f003 0203 	and.w	r2, r3, #3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d10d      	bne.n	800673e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
       ||
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800672a:	4b61      	ldr	r3, [pc, #388]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
       ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d047      	beq.n	80067ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	73fb      	strb	r3, [r7, #15]
 8006742:	e044      	b.n	80067ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d018      	beq.n	800677e <RCCEx_PLLSAI2_Config+0x86>
 800674c:	2b03      	cmp	r3, #3
 800674e:	d825      	bhi.n	800679c <RCCEx_PLLSAI2_Config+0xa4>
 8006750:	2b01      	cmp	r3, #1
 8006752:	d002      	beq.n	800675a <RCCEx_PLLSAI2_Config+0x62>
 8006754:	2b02      	cmp	r3, #2
 8006756:	d009      	beq.n	800676c <RCCEx_PLLSAI2_Config+0x74>
 8006758:	e020      	b.n	800679c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800675a:	4b55      	ldr	r3, [pc, #340]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d11d      	bne.n	80067a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800676a:	e01a      	b.n	80067a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800676c:	4b50      	ldr	r3, [pc, #320]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006774:	2b00      	cmp	r3, #0
 8006776:	d116      	bne.n	80067a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800677c:	e013      	b.n	80067a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800677e:	4b4c      	ldr	r3, [pc, #304]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10f      	bne.n	80067aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800678a:	4b49      	ldr	r3, [pc, #292]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800679a:	e006      	b.n	80067aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	73fb      	strb	r3, [r7, #15]
      break;
 80067a0:	e004      	b.n	80067ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80067a2:	bf00      	nop
 80067a4:	e002      	b.n	80067ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80067aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10d      	bne.n	80067ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067b2:	4b3f      	ldr	r3, [pc, #252]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6819      	ldr	r1, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	430b      	orrs	r3, r1
 80067c8:	4939      	ldr	r1, [pc, #228]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d167      	bne.n	80068a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80067d4:	4b36      	ldr	r3, [pc, #216]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a35      	ldr	r2, [pc, #212]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e0:	f7fc faba 	bl	8002d58 <HAL_GetTick>
 80067e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067e6:	e009      	b.n	80067fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067e8:	f7fc fab6 	bl	8002d58 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d902      	bls.n	80067fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	73fb      	strb	r3, [r7, #15]
        break;
 80067fa:	e005      	b.n	8006808 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067fc:	4b2c      	ldr	r3, [pc, #176]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1ef      	bne.n	80067e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d14a      	bne.n	80068a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d111      	bne.n	8006838 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006814:	4b26      	ldr	r3, [pc, #152]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800681c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6892      	ldr	r2, [r2, #8]
 8006824:	0211      	lsls	r1, r2, #8
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	68d2      	ldr	r2, [r2, #12]
 800682a:	0912      	lsrs	r2, r2, #4
 800682c:	0452      	lsls	r2, r2, #17
 800682e:	430a      	orrs	r2, r1
 8006830:	491f      	ldr	r1, [pc, #124]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006832:	4313      	orrs	r3, r2
 8006834:	614b      	str	r3, [r1, #20]
 8006836:	e011      	b.n	800685c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006838:	4b1d      	ldr	r3, [pc, #116]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006840:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6892      	ldr	r2, [r2, #8]
 8006848:	0211      	lsls	r1, r2, #8
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6912      	ldr	r2, [r2, #16]
 800684e:	0852      	lsrs	r2, r2, #1
 8006850:	3a01      	subs	r2, #1
 8006852:	0652      	lsls	r2, r2, #25
 8006854:	430a      	orrs	r2, r1
 8006856:	4916      	ldr	r1, [pc, #88]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006858:	4313      	orrs	r3, r2
 800685a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800685c:	4b14      	ldr	r3, [pc, #80]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a13      	ldr	r2, [pc, #76]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006868:	f7fc fa76 	bl	8002d58 <HAL_GetTick>
 800686c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800686e:	e009      	b.n	8006884 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006870:	f7fc fa72 	bl	8002d58 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d902      	bls.n	8006884 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	73fb      	strb	r3, [r7, #15]
          break;
 8006882:	e005      	b.n	8006890 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006884:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0ef      	beq.n	8006870 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006896:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	4904      	ldr	r1, [pc, #16]	@ (80068b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40021000 	.word	0x40021000

080068b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d079      	beq.n	80069ba <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fb fbe4 	bl	80020a8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b10      	cmp	r3, #16
 80068f4:	d058      	beq.n	80069a8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	22ca      	movs	r2, #202	@ 0xca
 80068fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2253      	movs	r2, #83	@ 0x53
 8006904:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fb7a 	bl	8007000 <RTC_EnterInitMode>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d127      	bne.n	8006966 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006928:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6899      	ldr	r1, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68d2      	ldr	r2, [r2, #12]
 8006950:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6919      	ldr	r1, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	041a      	lsls	r2, r3, #16
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fb7e 	bl	8007068 <RTC_ExitInitMode>
 800696c:	4603      	mov	r3, r0
 800696e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d113      	bne.n	800699e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0203 	bic.w	r2, r2, #3
 8006984:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	22ff      	movs	r2, #255	@ 0xff
 80069a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80069a6:	e001      	b.n	80069ac <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069c4:	b590      	push	{r4, r7, lr}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <HAL_RTC_SetTime+0x1a>
 80069da:	2302      	movs	r3, #2
 80069dc:	e08b      	b.n	8006af6 <HAL_RTC_SetTime+0x132>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	22ca      	movs	r2, #202	@ 0xca
 80069f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2253      	movs	r2, #83	@ 0x53
 80069fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fafe 	bl	8007000 <RTC_EnterInitMode>
 8006a04:	4603      	mov	r3, r0
 8006a06:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006a08:	7cfb      	ldrb	r3, [r7, #19]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d163      	bne.n	8006ad6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d126      	bne.n	8006a62 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d102      	bne.n	8006a28 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fb59 	bl	80070e4 <RTC_ByteToBcd2>
 8006a32:	4603      	mov	r3, r0
 8006a34:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	785b      	ldrb	r3, [r3, #1]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fb52 	bl	80070e4 <RTC_ByteToBcd2>
 8006a40:	4603      	mov	r3, r0
 8006a42:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a44:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	789b      	ldrb	r3, [r3, #2]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fb4a 	bl	80070e4 <RTC_ByteToBcd2>
 8006a50:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a52:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	e018      	b.n	8006a94 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a82:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a88:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	78db      	ldrb	r3, [r3, #3]
 8006a8e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006a9e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006aa2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ab2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6899      	ldr	r1, [r3, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 facb 	bl	8007068 <RTC_ExitInitMode>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	22ff      	movs	r2, #255	@ 0xff
 8006adc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006ade:	7cfb      	ldrb	r3, [r7, #19]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006af4:	7cfb      	ldrb	r3, [r7, #19]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd90      	pop	{r4, r7, pc}

08006afe <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006b2c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006b30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	0a1b      	lsrs	r3, r3, #8
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	0d9b      	lsrs	r3, r3, #22
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d11a      	bne.n	8006bac <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fad2 	bl	8007124 <RTC_Bcd2ToByte>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fac9 	bl	8007124 <RTC_Bcd2ToByte>
 8006b92:	4603      	mov	r3, r0
 8006b94:	461a      	mov	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	789b      	ldrb	r3, [r3, #2]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fac0 	bl	8007124 <RTC_Bcd2ToByte>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bb6:	b590      	push	{r4, r7, lr}
 8006bb8:	b087      	sub	sp, #28
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_RTC_SetDate+0x1a>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e075      	b.n	8006cbc <HAL_RTC_SetDate+0x106>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10e      	bne.n	8006c04 <HAL_RTC_SetDate+0x4e>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	f023 0310 	bic.w	r3, r3, #16
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	330a      	adds	r3, #10
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d11c      	bne.n	8006c44 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	78db      	ldrb	r3, [r3, #3]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fa68 	bl	80070e4 <RTC_ByteToBcd2>
 8006c14:	4603      	mov	r3, r0
 8006c16:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fa61 	bl	80070e4 <RTC_ByteToBcd2>
 8006c22:	4603      	mov	r3, r0
 8006c24:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c26:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	789b      	ldrb	r3, [r3, #2]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fa59 	bl	80070e4 <RTC_ByteToBcd2>
 8006c32:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c34:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	e00e      	b.n	8006c62 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	78db      	ldrb	r3, [r3, #3]
 8006c48:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c50:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006c56:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	22ca      	movs	r2, #202	@ 0xca
 8006c68:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2253      	movs	r2, #83	@ 0x53
 8006c70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f9c4 	bl	8007000 <RTC_EnterInitMode>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006c7c:	7cfb      	ldrb	r3, [r7, #19]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c8c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c90:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f9e8 	bl	8007068 <RTC_ExitInitMode>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	22ff      	movs	r2, #255	@ 0xff
 8006ca2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006ca4:	7cfb      	ldrb	r3, [r7, #19]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006cba:	7cfb      	ldrb	r3, [r7, #19]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd90      	pop	{r4, r7, pc}

08006cc4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006cda:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006cde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	0c1b      	lsrs	r3, r3, #16
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	0a1b      	lsrs	r3, r3, #8
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	0b5b      	lsrs	r3, r3, #13
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d11a      	bne.n	8006d54 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	78db      	ldrb	r3, [r3, #3]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f9fe 	bl	8007124 <RTC_Bcd2ToByte>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 f9f5 	bl	8007124 <RTC_Bcd2ToByte>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	789b      	ldrb	r3, [r3, #2]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f9ec 	bl	8007124 <RTC_Bcd2ToByte>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006d5e:	b590      	push	{r4, r7, lr}
 8006d60:	b089      	sub	sp, #36	@ 0x24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_RTC_SetAlarm+0x1a>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e11b      	b.n	8006fb0 <HAL_RTC_SetAlarm+0x252>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d137      	bne.n	8006dfe <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f99c 	bl	80070e4 <RTC_ByteToBcd2>
 8006dac:	4603      	mov	r3, r0
 8006dae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 f995 	bl	80070e4 <RTC_ByteToBcd2>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006dbe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	789b      	ldrb	r3, [r3, #2]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f98d 	bl	80070e4 <RTC_ByteToBcd2>
 8006dca:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006dcc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	78db      	ldrb	r3, [r3, #3]
 8006dd4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006dd6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 f97f 	bl	80070e4 <RTC_ByteToBcd2>
 8006de6:	4603      	mov	r3, r0
 8006de8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006dea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006df2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	61fb      	str	r3, [r7, #28]
 8006dfc:	e023      	b.n	8006e46 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d102      	bne.n	8006e12 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e1e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	78db      	ldrb	r3, [r3, #3]
 8006e2a:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e2c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e34:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e42:	4313      	orrs	r3, r2
 8006e44:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	22ca      	movs	r2, #202	@ 0xca
 8006e58:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2253      	movs	r2, #83	@ 0x53
 8006e60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e6a:	d14a      	bne.n	8006f02 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e7a:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006e8c:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e9c:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8006e9e:	f7fb ff5b 	bl	8002d58 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006ea4:	e015      	b.n	8006ed2 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ea6:	f7fb ff57 	bl	8002d58 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eb4:	d90d      	bls.n	8006ed2 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	22ff      	movs	r2, #255	@ 0xff
 8006ebc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2203      	movs	r2, #3
 8006ec2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e06e      	b.n	8006fb0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0e2      	beq.n	8006ea6 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006efe:	609a      	str	r2, [r3, #8]
 8006f00:	e049      	b.n	8006f96 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006f10:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006f22:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f32:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006f34:	f7fb ff10 	bl	8002d58 <HAL_GetTick>
 8006f38:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006f3a:	e015      	b.n	8006f68 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f3c:	f7fb ff0c 	bl	8002d58 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f4a:	d90d      	bls.n	8006f68 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	22ff      	movs	r2, #255	@ 0xff
 8006f52:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2203      	movs	r2, #3
 8006f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e023      	b.n	8006fb0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0e2      	beq.n	8006f3c <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f94:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	22ff      	movs	r2, #255	@ 0xff
 8006f9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3724      	adds	r7, #36	@ 0x24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd90      	pop	{r4, r7, pc}

08006fb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8006ffc <HAL_RTC_WaitForSynchro+0x44>)
 8006fc6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006fc8:	f7fb fec6 	bl	8002d58 <HAL_GetTick>
 8006fcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fce:	e009      	b.n	8006fe4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fd0:	f7fb fec2 	bl	8002d58 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fde:	d901      	bls.n	8006fe4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e007      	b.n	8006ff4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0ee      	beq.n	8006fd0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	0003ff5f 	.word	0x0003ff5f

08007000 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d120      	bne.n	800705c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f04f 32ff 	mov.w	r2, #4294967295
 8007022:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007024:	f7fb fe98 	bl	8002d58 <HAL_GetTick>
 8007028:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800702a:	e00d      	b.n	8007048 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800702c:	f7fb fe94 	bl	8002d58 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800703a:	d905      	bls.n	8007048 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2203      	movs	r2, #3
 8007044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d102      	bne.n	800705c <RTC_EnterInitMode+0x5c>
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	2b03      	cmp	r3, #3
 800705a:	d1e7      	bne.n	800702c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007074:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <RTC_ExitInitMode+0x78>)
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <RTC_ExitInitMode+0x78>)
 800707a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800707e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007080:	4b17      	ldr	r3, [pc, #92]	@ (80070e0 <RTC_ExitInitMode+0x78>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10c      	bne.n	80070a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff ff93 	bl	8006fb8 <HAL_RTC_WaitForSynchro>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01e      	beq.n	80070d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2203      	movs	r2, #3
 800709c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	73fb      	strb	r3, [r7, #15]
 80070a4:	e017      	b.n	80070d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070a6:	4b0e      	ldr	r3, [pc, #56]	@ (80070e0 <RTC_ExitInitMode+0x78>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	4a0d      	ldr	r2, [pc, #52]	@ (80070e0 <RTC_ExitInitMode+0x78>)
 80070ac:	f023 0320 	bic.w	r3, r3, #32
 80070b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff ff80 	bl	8006fb8 <HAL_RTC_WaitForSynchro>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2203      	movs	r2, #3
 80070c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070ca:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <RTC_ExitInitMode+0x78>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	4a04      	ldr	r2, [pc, #16]	@ (80070e0 <RTC_ExitInitMode+0x78>)
 80070d0:	f043 0320 	orr.w	r3, r3, #32
 80070d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40002800 	.word	0x40002800

080070e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80070f6:	e005      	b.n	8007104 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	3b0a      	subs	r3, #10
 8007102:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	2b09      	cmp	r3, #9
 8007108:	d8f6      	bhi.n	80070f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	b2da      	uxtb	r2, r3
 8007112:	7afb      	ldrb	r3, [r7, #11]
 8007114:	4313      	orrs	r3, r2
 8007116:	b2db      	uxtb	r3, r3
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	091b      	lsrs	r3, r3, #4
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	0092      	lsls	r2, r2, #2
 8007138:	4413      	add	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	b2da      	uxtb	r2, r3
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	4413      	add	r3, r2
 800714a:	b2db      	uxtb	r3, r3
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e049      	b.n	80071fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fb fbca 	bl	8002918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3304      	adds	r3, #4
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f000 ffcc 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d001      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e04f      	b.n	80072c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a23      	ldr	r2, [pc, #140]	@ (80072cc <HAL_TIM_Base_Start_IT+0xc4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01d      	beq.n	800727e <HAL_TIM_Base_Start_IT+0x76>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800724a:	d018      	beq.n	800727e <HAL_TIM_Base_Start_IT+0x76>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1f      	ldr	r2, [pc, #124]	@ (80072d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d013      	beq.n	800727e <HAL_TIM_Base_Start_IT+0x76>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1e      	ldr	r2, [pc, #120]	@ (80072d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00e      	beq.n	800727e <HAL_TIM_Base_Start_IT+0x76>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a1c      	ldr	r2, [pc, #112]	@ (80072d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d009      	beq.n	800727e <HAL_TIM_Base_Start_IT+0x76>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1b      	ldr	r2, [pc, #108]	@ (80072dc <HAL_TIM_Base_Start_IT+0xd4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d004      	beq.n	800727e <HAL_TIM_Base_Start_IT+0x76>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a19      	ldr	r2, [pc, #100]	@ (80072e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d115      	bne.n	80072aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	4b17      	ldr	r3, [pc, #92]	@ (80072e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007286:	4013      	ands	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b06      	cmp	r3, #6
 800728e:	d015      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0xb4>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007296:	d011      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a8:	e008      	b.n	80072bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0201 	orr.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e000      	b.n	80072be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40000400 	.word	0x40000400
 80072d4:	40000800 	.word	0x40000800
 80072d8:	40000c00 	.word	0x40000c00
 80072dc:	40013400 	.word	0x40013400
 80072e0:	40014000 	.word	0x40014000
 80072e4:	00010007 	.word	0x00010007

080072e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6a1a      	ldr	r2, [r3, #32]
 8007306:	f241 1311 	movw	r3, #4369	@ 0x1111
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10f      	bne.n	8007330 <HAL_TIM_Base_Stop_IT+0x48>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6a1a      	ldr	r2, [r3, #32]
 8007316:	f240 4344 	movw	r3, #1092	@ 0x444
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d107      	bne.n	8007330 <HAL_TIM_Base_Stop_IT+0x48>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0201 	bic.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e049      	b.n	80073ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f841 	bl	80073f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2202      	movs	r2, #2
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f000 fed5 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d109      	bne.n	800742c <HAL_TIM_PWM_Start+0x24>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	e03c      	b.n	80074a6 <HAL_TIM_PWM_Start+0x9e>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b04      	cmp	r3, #4
 8007430:	d109      	bne.n	8007446 <HAL_TIM_PWM_Start+0x3e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b01      	cmp	r3, #1
 800743c:	bf14      	ite	ne
 800743e:	2301      	movne	r3, #1
 8007440:	2300      	moveq	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	e02f      	b.n	80074a6 <HAL_TIM_PWM_Start+0x9e>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d109      	bne.n	8007460 <HAL_TIM_PWM_Start+0x58>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b01      	cmp	r3, #1
 8007456:	bf14      	ite	ne
 8007458:	2301      	movne	r3, #1
 800745a:	2300      	moveq	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	e022      	b.n	80074a6 <HAL_TIM_PWM_Start+0x9e>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b0c      	cmp	r3, #12
 8007464:	d109      	bne.n	800747a <HAL_TIM_PWM_Start+0x72>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b01      	cmp	r3, #1
 8007470:	bf14      	ite	ne
 8007472:	2301      	movne	r3, #1
 8007474:	2300      	moveq	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	e015      	b.n	80074a6 <HAL_TIM_PWM_Start+0x9e>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b10      	cmp	r3, #16
 800747e:	d109      	bne.n	8007494 <HAL_TIM_PWM_Start+0x8c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b01      	cmp	r3, #1
 800748a:	bf14      	ite	ne
 800748c:	2301      	movne	r3, #1
 800748e:	2300      	moveq	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	e008      	b.n	80074a6 <HAL_TIM_PWM_Start+0x9e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b01      	cmp	r3, #1
 800749e:	bf14      	ite	ne
 80074a0:	2301      	movne	r3, #1
 80074a2:	2300      	moveq	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e09c      	b.n	80075e8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_TIM_PWM_Start+0xb6>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074bc:	e023      	b.n	8007506 <HAL_TIM_PWM_Start+0xfe>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d104      	bne.n	80074ce <HAL_TIM_PWM_Start+0xc6>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074cc:	e01b      	b.n	8007506 <HAL_TIM_PWM_Start+0xfe>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d104      	bne.n	80074de <HAL_TIM_PWM_Start+0xd6>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074dc:	e013      	b.n	8007506 <HAL_TIM_PWM_Start+0xfe>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d104      	bne.n	80074ee <HAL_TIM_PWM_Start+0xe6>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074ec:	e00b      	b.n	8007506 <HAL_TIM_PWM_Start+0xfe>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_PWM_Start+0xf6>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074fc:	e003      	b.n	8007506 <HAL_TIM_PWM_Start+0xfe>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2201      	movs	r2, #1
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f001 fb4a 	bl	8008ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a35      	ldr	r2, [pc, #212]	@ (80075f0 <HAL_TIM_PWM_Start+0x1e8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <HAL_TIM_PWM_Start+0x13e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a34      	ldr	r2, [pc, #208]	@ (80075f4 <HAL_TIM_PWM_Start+0x1ec>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00e      	beq.n	8007546 <HAL_TIM_PWM_Start+0x13e>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a32      	ldr	r2, [pc, #200]	@ (80075f8 <HAL_TIM_PWM_Start+0x1f0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d009      	beq.n	8007546 <HAL_TIM_PWM_Start+0x13e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a31      	ldr	r2, [pc, #196]	@ (80075fc <HAL_TIM_PWM_Start+0x1f4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d004      	beq.n	8007546 <HAL_TIM_PWM_Start+0x13e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a2f      	ldr	r2, [pc, #188]	@ (8007600 <HAL_TIM_PWM_Start+0x1f8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d101      	bne.n	800754a <HAL_TIM_PWM_Start+0x142>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <HAL_TIM_PWM_Start+0x144>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800755e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a22      	ldr	r2, [pc, #136]	@ (80075f0 <HAL_TIM_PWM_Start+0x1e8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d01d      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x19e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007572:	d018      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x19e>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a22      	ldr	r2, [pc, #136]	@ (8007604 <HAL_TIM_PWM_Start+0x1fc>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d013      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x19e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a21      	ldr	r2, [pc, #132]	@ (8007608 <HAL_TIM_PWM_Start+0x200>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00e      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x19e>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1f      	ldr	r2, [pc, #124]	@ (800760c <HAL_TIM_PWM_Start+0x204>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d009      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x19e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a17      	ldr	r2, [pc, #92]	@ (80075f4 <HAL_TIM_PWM_Start+0x1ec>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d004      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x19e>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a15      	ldr	r2, [pc, #84]	@ (80075f8 <HAL_TIM_PWM_Start+0x1f0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d115      	bne.n	80075d2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	4b18      	ldr	r3, [pc, #96]	@ (8007610 <HAL_TIM_PWM_Start+0x208>)
 80075ae:	4013      	ands	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b06      	cmp	r3, #6
 80075b6:	d015      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1dc>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075be:	d011      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d0:	e008      	b.n	80075e4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0201 	orr.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	e000      	b.n	80075e6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40012c00 	.word	0x40012c00
 80075f4:	40013400 	.word	0x40013400
 80075f8:	40014000 	.word	0x40014000
 80075fc:	40014400 	.word	0x40014400
 8007600:	40014800 	.word	0x40014800
 8007604:	40000400 	.word	0x40000400
 8007608:	40000800 	.word	0x40000800
 800760c:	40000c00 	.word	0x40000c00
 8007610:	00010007 	.word	0x00010007

08007614 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e049      	b.n	80076ba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f841 	bl	80076c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3304      	adds	r3, #4
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f000 fd6e 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <HAL_TIM_IC_Start_IT+0x1e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	e023      	b.n	800773e <HAL_TIM_IC_Start_IT+0x66>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d104      	bne.n	8007706 <HAL_TIM_IC_Start_IT+0x2e>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007702:	b2db      	uxtb	r3, r3
 8007704:	e01b      	b.n	800773e <HAL_TIM_IC_Start_IT+0x66>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b08      	cmp	r3, #8
 800770a:	d104      	bne.n	8007716 <HAL_TIM_IC_Start_IT+0x3e>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007712:	b2db      	uxtb	r3, r3
 8007714:	e013      	b.n	800773e <HAL_TIM_IC_Start_IT+0x66>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b0c      	cmp	r3, #12
 800771a:	d104      	bne.n	8007726 <HAL_TIM_IC_Start_IT+0x4e>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007722:	b2db      	uxtb	r3, r3
 8007724:	e00b      	b.n	800773e <HAL_TIM_IC_Start_IT+0x66>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b10      	cmp	r3, #16
 800772a:	d104      	bne.n	8007736 <HAL_TIM_IC_Start_IT+0x5e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007732:	b2db      	uxtb	r3, r3
 8007734:	e003      	b.n	800773e <HAL_TIM_IC_Start_IT+0x66>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800773c:	b2db      	uxtb	r3, r3
 800773e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <HAL_TIM_IC_Start_IT+0x78>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800774c:	b2db      	uxtb	r3, r3
 800774e:	e013      	b.n	8007778 <HAL_TIM_IC_Start_IT+0xa0>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b04      	cmp	r3, #4
 8007754:	d104      	bne.n	8007760 <HAL_TIM_IC_Start_IT+0x88>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800775c:	b2db      	uxtb	r3, r3
 800775e:	e00b      	b.n	8007778 <HAL_TIM_IC_Start_IT+0xa0>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b08      	cmp	r3, #8
 8007764:	d104      	bne.n	8007770 <HAL_TIM_IC_Start_IT+0x98>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800776c:	b2db      	uxtb	r3, r3
 800776e:	e003      	b.n	8007778 <HAL_TIM_IC_Start_IT+0xa0>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007776:	b2db      	uxtb	r3, r3
 8007778:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d102      	bne.n	8007786 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007780:	7b7b      	ldrb	r3, [r7, #13]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d001      	beq.n	800778a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e0dd      	b.n	8007946 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <HAL_TIM_IC_Start_IT+0xc2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007798:	e023      	b.n	80077e2 <HAL_TIM_IC_Start_IT+0x10a>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b04      	cmp	r3, #4
 800779e:	d104      	bne.n	80077aa <HAL_TIM_IC_Start_IT+0xd2>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077a8:	e01b      	b.n	80077e2 <HAL_TIM_IC_Start_IT+0x10a>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d104      	bne.n	80077ba <HAL_TIM_IC_Start_IT+0xe2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077b8:	e013      	b.n	80077e2 <HAL_TIM_IC_Start_IT+0x10a>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b0c      	cmp	r3, #12
 80077be:	d104      	bne.n	80077ca <HAL_TIM_IC_Start_IT+0xf2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077c8:	e00b      	b.n	80077e2 <HAL_TIM_IC_Start_IT+0x10a>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b10      	cmp	r3, #16
 80077ce:	d104      	bne.n	80077da <HAL_TIM_IC_Start_IT+0x102>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077d8:	e003      	b.n	80077e2 <HAL_TIM_IC_Start_IT+0x10a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_IC_Start_IT+0x11a>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f0:	e013      	b.n	800781a <HAL_TIM_IC_Start_IT+0x142>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_IC_Start_IT+0x12a>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007800:	e00b      	b.n	800781a <HAL_TIM_IC_Start_IT+0x142>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d104      	bne.n	8007812 <HAL_TIM_IC_Start_IT+0x13a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007810:	e003      	b.n	800781a <HAL_TIM_IC_Start_IT+0x142>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2202      	movs	r2, #2
 8007816:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b0c      	cmp	r3, #12
 800781e:	d841      	bhi.n	80078a4 <HAL_TIM_IC_Start_IT+0x1cc>
 8007820:	a201      	add	r2, pc, #4	@ (adr r2, 8007828 <HAL_TIM_IC_Start_IT+0x150>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	0800785d 	.word	0x0800785d
 800782c:	080078a5 	.word	0x080078a5
 8007830:	080078a5 	.word	0x080078a5
 8007834:	080078a5 	.word	0x080078a5
 8007838:	0800786f 	.word	0x0800786f
 800783c:	080078a5 	.word	0x080078a5
 8007840:	080078a5 	.word	0x080078a5
 8007844:	080078a5 	.word	0x080078a5
 8007848:	08007881 	.word	0x08007881
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078a5 	.word	0x080078a5
 8007854:	080078a5 	.word	0x080078a5
 8007858:	08007893 	.word	0x08007893
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0202 	orr.w	r2, r2, #2
 800786a:	60da      	str	r2, [r3, #12]
      break;
 800786c:	e01d      	b.n	80078aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0204 	orr.w	r2, r2, #4
 800787c:	60da      	str	r2, [r3, #12]
      break;
 800787e:	e014      	b.n	80078aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0208 	orr.w	r2, r2, #8
 800788e:	60da      	str	r2, [r3, #12]
      break;
 8007890:	e00b      	b.n	80078aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f042 0210 	orr.w	r2, r2, #16
 80078a0:	60da      	str	r2, [r3, #12]
      break;
 80078a2:	e002      	b.n	80078aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
      break;
 80078a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d149      	bne.n	8007944 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2201      	movs	r2, #1
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 f975 	bl	8008ba8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a23      	ldr	r2, [pc, #140]	@ (8007950 <HAL_TIM_IC_Start_IT+0x278>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d01d      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x22c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d0:	d018      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x22c>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007954 <HAL_TIM_IC_Start_IT+0x27c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d013      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x22c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007958 <HAL_TIM_IC_Start_IT+0x280>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00e      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x22c>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1c      	ldr	r2, [pc, #112]	@ (800795c <HAL_TIM_IC_Start_IT+0x284>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d009      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x22c>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007960 <HAL_TIM_IC_Start_IT+0x288>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_TIM_IC_Start_IT+0x22c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a19      	ldr	r2, [pc, #100]	@ (8007964 <HAL_TIM_IC_Start_IT+0x28c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d115      	bne.n	8007930 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	4b17      	ldr	r3, [pc, #92]	@ (8007968 <HAL_TIM_IC_Start_IT+0x290>)
 800790c:	4013      	ands	r3, r2
 800790e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b06      	cmp	r3, #6
 8007914:	d015      	beq.n	8007942 <HAL_TIM_IC_Start_IT+0x26a>
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800791c:	d011      	beq.n	8007942 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0201 	orr.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792e:	e008      	b.n	8007942 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	e000      	b.n	8007944 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007942:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40012c00 	.word	0x40012c00
 8007954:	40000400 	.word	0x40000400
 8007958:	40000800 	.word	0x40000800
 800795c:	40000c00 	.word	0x40000c00
 8007960:	40013400 	.word	0x40013400
 8007964:	40014000 	.word	0x40014000
 8007968:	00010007 	.word	0x00010007

0800796c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d020      	beq.n	80079d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01b      	beq.n	80079d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0202 	mvn.w	r2, #2
 80079a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fa fc34 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 80079bc:	e005      	b.n	80079ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fb9a 	bl	80080f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fba1 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d020      	beq.n	8007a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01b      	beq.n	8007a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0204 	mvn.w	r2, #4
 80079ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2202      	movs	r2, #2
 80079f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fa fc0e 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8007a08:	e005      	b.n	8007a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fb74 	bl	80080f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fb7b 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d020      	beq.n	8007a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01b      	beq.n	8007a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0208 	mvn.w	r2, #8
 8007a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fa fbe8 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8007a54:	e005      	b.n	8007a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fb4e 	bl	80080f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fb55 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d020      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01b      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0210 	mvn.w	r2, #16
 8007a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2208      	movs	r2, #8
 8007a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fa fbc2 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8007aa0:	e005      	b.n	8007aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fb28 	bl	80080f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fb2f 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0201 	mvn.w	r2, #1
 8007ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7fa f938 	bl	8001d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d104      	bne.n	8007aec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00c      	beq.n	8007b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f909 	bl	8008d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f901 	bl	8008d2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00c      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fae9 	bl	8008120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00c      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d007      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f06f 0220 	mvn.w	r2, #32
 8007b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f8c9 	bl	8008d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b086      	sub	sp, #24
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e088      	b.n	8007caa <HAL_TIM_IC_ConfigChannel+0x130>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d11b      	bne.n	8007bde <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007bb6:	f000 fe39 	bl	800882c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 020c 	bic.w	r2, r2, #12
 8007bc8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6999      	ldr	r1, [r3, #24]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	619a      	str	r2, [r3, #24]
 8007bdc:	e060      	b.n	8007ca0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d11c      	bne.n	8007c1e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007bf4:	f000 feb7 	bl	8008966 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007c06:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6999      	ldr	r1, [r3, #24]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	021a      	lsls	r2, r3, #8
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	619a      	str	r2, [r3, #24]
 8007c1c:	e040      	b.n	8007ca0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d11b      	bne.n	8007c5c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007c34:	f000 ff04 	bl	8008a40 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	69da      	ldr	r2, [r3, #28]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 020c 	bic.w	r2, r2, #12
 8007c46:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69d9      	ldr	r1, [r3, #28]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	61da      	str	r2, [r3, #28]
 8007c5a:	e021      	b.n	8007ca0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b0c      	cmp	r3, #12
 8007c60:	d11c      	bne.n	8007c9c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007c72:	f000 ff21 	bl	8008ab8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69da      	ldr	r2, [r3, #28]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007c84:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69d9      	ldr	r1, [r3, #28]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	021a      	lsls	r2, r3, #8
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	61da      	str	r2, [r3, #28]
 8007c9a:	e001      	b.n	8007ca0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d101      	bne.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cce:	2302      	movs	r3, #2
 8007cd0:	e0ff      	b.n	8007ed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b14      	cmp	r3, #20
 8007cde:	f200 80f0 	bhi.w	8007ec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007ec3 	.word	0x08007ec3
 8007cf0:	08007ec3 	.word	0x08007ec3
 8007cf4:	08007ec3 	.word	0x08007ec3
 8007cf8:	08007d7d 	.word	0x08007d7d
 8007cfc:	08007ec3 	.word	0x08007ec3
 8007d00:	08007ec3 	.word	0x08007ec3
 8007d04:	08007ec3 	.word	0x08007ec3
 8007d08:	08007dbf 	.word	0x08007dbf
 8007d0c:	08007ec3 	.word	0x08007ec3
 8007d10:	08007ec3 	.word	0x08007ec3
 8007d14:	08007ec3 	.word	0x08007ec3
 8007d18:	08007dff 	.word	0x08007dff
 8007d1c:	08007ec3 	.word	0x08007ec3
 8007d20:	08007ec3 	.word	0x08007ec3
 8007d24:	08007ec3 	.word	0x08007ec3
 8007d28:	08007e41 	.word	0x08007e41
 8007d2c:	08007ec3 	.word	0x08007ec3
 8007d30:	08007ec3 	.word	0x08007ec3
 8007d34:	08007ec3 	.word	0x08007ec3
 8007d38:	08007e81 	.word	0x08007e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fa9c 	bl	8008280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699a      	ldr	r2, [r3, #24]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0208 	orr.w	r2, r2, #8
 8007d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0204 	bic.w	r2, r2, #4
 8007d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6999      	ldr	r1, [r3, #24]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	691a      	ldr	r2, [r3, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	619a      	str	r2, [r3, #24]
      break;
 8007d7a:	e0a5      	b.n	8007ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fb0c 	bl	80083a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6999      	ldr	r1, [r3, #24]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	021a      	lsls	r2, r3, #8
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	619a      	str	r2, [r3, #24]
      break;
 8007dbc:	e084      	b.n	8007ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fb75 	bl	80084b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f042 0208 	orr.w	r2, r2, #8
 8007dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69da      	ldr	r2, [r3, #28]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0204 	bic.w	r2, r2, #4
 8007de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69d9      	ldr	r1, [r3, #28]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	61da      	str	r2, [r3, #28]
      break;
 8007dfc:	e064      	b.n	8007ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fbdd 	bl	80085c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69da      	ldr	r2, [r3, #28]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69d9      	ldr	r1, [r3, #28]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	021a      	lsls	r2, r3, #8
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	61da      	str	r2, [r3, #28]
      break;
 8007e3e:	e043      	b.n	8007ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fc26 	bl	8008698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0208 	orr.w	r2, r2, #8
 8007e5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0204 	bic.w	r2, r2, #4
 8007e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	691a      	ldr	r2, [r3, #16]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007e7e:	e023      	b.n	8007ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fc6a 	bl	8008760 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	021a      	lsls	r2, r3, #8
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ec0:	e002      	b.n	8007ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop

08007edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e0b6      	b.n	8008066 <HAL_TIM_ConfigClockSource+0x18a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f34:	d03e      	beq.n	8007fb4 <HAL_TIM_ConfigClockSource+0xd8>
 8007f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f3a:	f200 8087 	bhi.w	800804c <HAL_TIM_ConfigClockSource+0x170>
 8007f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f42:	f000 8086 	beq.w	8008052 <HAL_TIM_ConfigClockSource+0x176>
 8007f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f4a:	d87f      	bhi.n	800804c <HAL_TIM_ConfigClockSource+0x170>
 8007f4c:	2b70      	cmp	r3, #112	@ 0x70
 8007f4e:	d01a      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0xaa>
 8007f50:	2b70      	cmp	r3, #112	@ 0x70
 8007f52:	d87b      	bhi.n	800804c <HAL_TIM_ConfigClockSource+0x170>
 8007f54:	2b60      	cmp	r3, #96	@ 0x60
 8007f56:	d050      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x11e>
 8007f58:	2b60      	cmp	r3, #96	@ 0x60
 8007f5a:	d877      	bhi.n	800804c <HAL_TIM_ConfigClockSource+0x170>
 8007f5c:	2b50      	cmp	r3, #80	@ 0x50
 8007f5e:	d03c      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0xfe>
 8007f60:	2b50      	cmp	r3, #80	@ 0x50
 8007f62:	d873      	bhi.n	800804c <HAL_TIM_ConfigClockSource+0x170>
 8007f64:	2b40      	cmp	r3, #64	@ 0x40
 8007f66:	d058      	beq.n	800801a <HAL_TIM_ConfigClockSource+0x13e>
 8007f68:	2b40      	cmp	r3, #64	@ 0x40
 8007f6a:	d86f      	bhi.n	800804c <HAL_TIM_ConfigClockSource+0x170>
 8007f6c:	2b30      	cmp	r3, #48	@ 0x30
 8007f6e:	d064      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x15e>
 8007f70:	2b30      	cmp	r3, #48	@ 0x30
 8007f72:	d86b      	bhi.n	800804c <HAL_TIM_ConfigClockSource+0x170>
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d060      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x15e>
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	d867      	bhi.n	800804c <HAL_TIM_ConfigClockSource+0x170>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d05c      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x15e>
 8007f80:	2b10      	cmp	r3, #16
 8007f82:	d05a      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x15e>
 8007f84:	e062      	b.n	800804c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f96:	f000 fde7 	bl	8008b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	609a      	str	r2, [r3, #8]
      break;
 8007fb2:	e04f      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fc4:	f000 fdd0 	bl	8008b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fd6:	609a      	str	r2, [r3, #8]
      break;
 8007fd8:	e03c      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f000 fc8e 	bl	8008908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2150      	movs	r1, #80	@ 0x50
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fd9d 	bl	8008b32 <TIM_ITRx_SetConfig>
      break;
 8007ff8:	e02c      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008006:	461a      	mov	r2, r3
 8008008:	f000 fcea 	bl	80089e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2160      	movs	r1, #96	@ 0x60
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fd8d 	bl	8008b32 <TIM_ITRx_SetConfig>
      break;
 8008018:	e01c      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008026:	461a      	mov	r2, r3
 8008028:	f000 fc6e 	bl	8008908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2140      	movs	r1, #64	@ 0x40
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fd7d 	bl	8008b32 <TIM_ITRx_SetConfig>
      break;
 8008038:	e00c      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f000 fd74 	bl	8008b32 <TIM_ITRx_SetConfig>
      break;
 800804a:	e003      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]
      break;
 8008050:	e000      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b0c      	cmp	r3, #12
 8008082:	d831      	bhi.n	80080e8 <HAL_TIM_ReadCapturedValue+0x78>
 8008084:	a201      	add	r2, pc, #4	@ (adr r2, 800808c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080c1 	.word	0x080080c1
 8008090:	080080e9 	.word	0x080080e9
 8008094:	080080e9 	.word	0x080080e9
 8008098:	080080e9 	.word	0x080080e9
 800809c:	080080cb 	.word	0x080080cb
 80080a0:	080080e9 	.word	0x080080e9
 80080a4:	080080e9 	.word	0x080080e9
 80080a8:	080080e9 	.word	0x080080e9
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080e9 	.word	0x080080e9
 80080b4:	080080e9 	.word	0x080080e9
 80080b8:	080080e9 	.word	0x080080e9
 80080bc:	080080df 	.word	0x080080df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c6:	60fb      	str	r3, [r7, #12]

      break;
 80080c8:	e00f      	b.n	80080ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d0:	60fb      	str	r3, [r7, #12]

      break;
 80080d2:	e00a      	b.n	80080ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080da:	60fb      	str	r3, [r7, #12]

      break;
 80080dc:	e005      	b.n	80080ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e4:	60fb      	str	r3, [r7, #12]

      break;
 80080e6:	e000      	b.n	80080ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80080e8:	bf00      	nop
  }

  return tmpreg;
 80080ea:	68fb      	ldr	r3, [r7, #12]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a46      	ldr	r2, [pc, #280]	@ (8008260 <TIM_Base_SetConfig+0x12c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d013      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008152:	d00f      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a43      	ldr	r2, [pc, #268]	@ (8008264 <TIM_Base_SetConfig+0x130>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00b      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a42      	ldr	r2, [pc, #264]	@ (8008268 <TIM_Base_SetConfig+0x134>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d007      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a41      	ldr	r2, [pc, #260]	@ (800826c <TIM_Base_SetConfig+0x138>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d003      	beq.n	8008174 <TIM_Base_SetConfig+0x40>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a40      	ldr	r2, [pc, #256]	@ (8008270 <TIM_Base_SetConfig+0x13c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d108      	bne.n	8008186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a35      	ldr	r2, [pc, #212]	@ (8008260 <TIM_Base_SetConfig+0x12c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d01f      	beq.n	80081ce <TIM_Base_SetConfig+0x9a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008194:	d01b      	beq.n	80081ce <TIM_Base_SetConfig+0x9a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a32      	ldr	r2, [pc, #200]	@ (8008264 <TIM_Base_SetConfig+0x130>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d017      	beq.n	80081ce <TIM_Base_SetConfig+0x9a>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a31      	ldr	r2, [pc, #196]	@ (8008268 <TIM_Base_SetConfig+0x134>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d013      	beq.n	80081ce <TIM_Base_SetConfig+0x9a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a30      	ldr	r2, [pc, #192]	@ (800826c <TIM_Base_SetConfig+0x138>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00f      	beq.n	80081ce <TIM_Base_SetConfig+0x9a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008270 <TIM_Base_SetConfig+0x13c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00b      	beq.n	80081ce <TIM_Base_SetConfig+0x9a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a2e      	ldr	r2, [pc, #184]	@ (8008274 <TIM_Base_SetConfig+0x140>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d007      	beq.n	80081ce <TIM_Base_SetConfig+0x9a>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008278 <TIM_Base_SetConfig+0x144>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d003      	beq.n	80081ce <TIM_Base_SetConfig+0x9a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2c      	ldr	r2, [pc, #176]	@ (800827c <TIM_Base_SetConfig+0x148>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d108      	bne.n	80081e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a16      	ldr	r2, [pc, #88]	@ (8008260 <TIM_Base_SetConfig+0x12c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00f      	beq.n	800822c <TIM_Base_SetConfig+0xf8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a18      	ldr	r2, [pc, #96]	@ (8008270 <TIM_Base_SetConfig+0x13c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00b      	beq.n	800822c <TIM_Base_SetConfig+0xf8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a17      	ldr	r2, [pc, #92]	@ (8008274 <TIM_Base_SetConfig+0x140>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <TIM_Base_SetConfig+0xf8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a16      	ldr	r2, [pc, #88]	@ (8008278 <TIM_Base_SetConfig+0x144>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_Base_SetConfig+0xf8>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a15      	ldr	r2, [pc, #84]	@ (800827c <TIM_Base_SetConfig+0x148>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d103      	bne.n	8008234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	691a      	ldr	r2, [r3, #16]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b01      	cmp	r3, #1
 8008244:	d105      	bne.n	8008252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	611a      	str	r2, [r3, #16]
  }
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	40012c00 	.word	0x40012c00
 8008264:	40000400 	.word	0x40000400
 8008268:	40000800 	.word	0x40000800
 800826c:	40000c00 	.word	0x40000c00
 8008270:	40013400 	.word	0x40013400
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400
 800827c:	40014800 	.word	0x40014800

08008280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	f023 0201 	bic.w	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f023 0302 	bic.w	r3, r3, #2
 80082cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a2c      	ldr	r2, [pc, #176]	@ (800838c <TIM_OC1_SetConfig+0x10c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00f      	beq.n	8008300 <TIM_OC1_SetConfig+0x80>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a2b      	ldr	r2, [pc, #172]	@ (8008390 <TIM_OC1_SetConfig+0x110>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00b      	beq.n	8008300 <TIM_OC1_SetConfig+0x80>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008394 <TIM_OC1_SetConfig+0x114>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d007      	beq.n	8008300 <TIM_OC1_SetConfig+0x80>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a29      	ldr	r2, [pc, #164]	@ (8008398 <TIM_OC1_SetConfig+0x118>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_OC1_SetConfig+0x80>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a28      	ldr	r2, [pc, #160]	@ (800839c <TIM_OC1_SetConfig+0x11c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10c      	bne.n	800831a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0308 	bic.w	r3, r3, #8
 8008306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f023 0304 	bic.w	r3, r3, #4
 8008318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a1b      	ldr	r2, [pc, #108]	@ (800838c <TIM_OC1_SetConfig+0x10c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00f      	beq.n	8008342 <TIM_OC1_SetConfig+0xc2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a1a      	ldr	r2, [pc, #104]	@ (8008390 <TIM_OC1_SetConfig+0x110>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00b      	beq.n	8008342 <TIM_OC1_SetConfig+0xc2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a19      	ldr	r2, [pc, #100]	@ (8008394 <TIM_OC1_SetConfig+0x114>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d007      	beq.n	8008342 <TIM_OC1_SetConfig+0xc2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a18      	ldr	r2, [pc, #96]	@ (8008398 <TIM_OC1_SetConfig+0x118>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d003      	beq.n	8008342 <TIM_OC1_SetConfig+0xc2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a17      	ldr	r2, [pc, #92]	@ (800839c <TIM_OC1_SetConfig+0x11c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d111      	bne.n	8008366 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	4313      	orrs	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40012c00 	.word	0x40012c00
 8008390:	40013400 	.word	0x40013400
 8008394:	40014000 	.word	0x40014000
 8008398:	40014400 	.word	0x40014400
 800839c:	40014800 	.word	0x40014800

080083a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	f023 0210 	bic.w	r2, r3, #16
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f023 0320 	bic.w	r3, r3, #32
 80083ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	011b      	lsls	r3, r3, #4
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a28      	ldr	r2, [pc, #160]	@ (80084a0 <TIM_OC2_SetConfig+0x100>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d003      	beq.n	800840c <TIM_OC2_SetConfig+0x6c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a27      	ldr	r2, [pc, #156]	@ (80084a4 <TIM_OC2_SetConfig+0x104>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d10d      	bne.n	8008428 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	4313      	orrs	r3, r2
 800841e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a1d      	ldr	r2, [pc, #116]	@ (80084a0 <TIM_OC2_SetConfig+0x100>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00f      	beq.n	8008450 <TIM_OC2_SetConfig+0xb0>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a1c      	ldr	r2, [pc, #112]	@ (80084a4 <TIM_OC2_SetConfig+0x104>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00b      	beq.n	8008450 <TIM_OC2_SetConfig+0xb0>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a1b      	ldr	r2, [pc, #108]	@ (80084a8 <TIM_OC2_SetConfig+0x108>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d007      	beq.n	8008450 <TIM_OC2_SetConfig+0xb0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a1a      	ldr	r2, [pc, #104]	@ (80084ac <TIM_OC2_SetConfig+0x10c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d003      	beq.n	8008450 <TIM_OC2_SetConfig+0xb0>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a19      	ldr	r2, [pc, #100]	@ (80084b0 <TIM_OC2_SetConfig+0x110>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d113      	bne.n	8008478 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800845e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	4313      	orrs	r3, r2
 800846a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	621a      	str	r2, [r3, #32]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40012c00 	.word	0x40012c00
 80084a4:	40013400 	.word	0x40013400
 80084a8:	40014000 	.word	0x40014000
 80084ac:	40014400 	.word	0x40014400
 80084b0:	40014800 	.word	0x40014800

080084b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0303 	bic.w	r3, r3, #3
 80084ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a27      	ldr	r2, [pc, #156]	@ (80085b0 <TIM_OC3_SetConfig+0xfc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d003      	beq.n	800851e <TIM_OC3_SetConfig+0x6a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a26      	ldr	r2, [pc, #152]	@ (80085b4 <TIM_OC3_SetConfig+0x100>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d10d      	bne.n	800853a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a1c      	ldr	r2, [pc, #112]	@ (80085b0 <TIM_OC3_SetConfig+0xfc>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00f      	beq.n	8008562 <TIM_OC3_SetConfig+0xae>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a1b      	ldr	r2, [pc, #108]	@ (80085b4 <TIM_OC3_SetConfig+0x100>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00b      	beq.n	8008562 <TIM_OC3_SetConfig+0xae>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a1a      	ldr	r2, [pc, #104]	@ (80085b8 <TIM_OC3_SetConfig+0x104>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d007      	beq.n	8008562 <TIM_OC3_SetConfig+0xae>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a19      	ldr	r2, [pc, #100]	@ (80085bc <TIM_OC3_SetConfig+0x108>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d003      	beq.n	8008562 <TIM_OC3_SetConfig+0xae>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a18      	ldr	r2, [pc, #96]	@ (80085c0 <TIM_OC3_SetConfig+0x10c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d113      	bne.n	800858a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	621a      	str	r2, [r3, #32]
}
 80085a4:	bf00      	nop
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	40012c00 	.word	0x40012c00
 80085b4:	40013400 	.word	0x40013400
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800

080085c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	031b      	lsls	r3, r3, #12
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a18      	ldr	r2, [pc, #96]	@ (8008684 <TIM_OC4_SetConfig+0xc0>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00f      	beq.n	8008648 <TIM_OC4_SetConfig+0x84>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a17      	ldr	r2, [pc, #92]	@ (8008688 <TIM_OC4_SetConfig+0xc4>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00b      	beq.n	8008648 <TIM_OC4_SetConfig+0x84>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a16      	ldr	r2, [pc, #88]	@ (800868c <TIM_OC4_SetConfig+0xc8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d007      	beq.n	8008648 <TIM_OC4_SetConfig+0x84>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a15      	ldr	r2, [pc, #84]	@ (8008690 <TIM_OC4_SetConfig+0xcc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d003      	beq.n	8008648 <TIM_OC4_SetConfig+0x84>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a14      	ldr	r2, [pc, #80]	@ (8008694 <TIM_OC4_SetConfig+0xd0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d109      	bne.n	800865c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800864e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	019b      	lsls	r3, r3, #6
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	40012c00 	.word	0x40012c00
 8008688:	40013400 	.word	0x40013400
 800868c:	40014000 	.word	0x40014000
 8008690:	40014400 	.word	0x40014400
 8008694:	40014800 	.word	0x40014800

08008698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80086dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	041b      	lsls	r3, r3, #16
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a17      	ldr	r2, [pc, #92]	@ (800874c <TIM_OC5_SetConfig+0xb4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00f      	beq.n	8008712 <TIM_OC5_SetConfig+0x7a>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a16      	ldr	r2, [pc, #88]	@ (8008750 <TIM_OC5_SetConfig+0xb8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00b      	beq.n	8008712 <TIM_OC5_SetConfig+0x7a>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <TIM_OC5_SetConfig+0xbc>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d007      	beq.n	8008712 <TIM_OC5_SetConfig+0x7a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a14      	ldr	r2, [pc, #80]	@ (8008758 <TIM_OC5_SetConfig+0xc0>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d003      	beq.n	8008712 <TIM_OC5_SetConfig+0x7a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a13      	ldr	r2, [pc, #76]	@ (800875c <TIM_OC5_SetConfig+0xc4>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d109      	bne.n	8008726 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008718:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	621a      	str	r2, [r3, #32]
}
 8008740:	bf00      	nop
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	40012c00 	.word	0x40012c00
 8008750:	40013400 	.word	0x40013400
 8008754:	40014000 	.word	0x40014000
 8008758:	40014400 	.word	0x40014400
 800875c:	40014800 	.word	0x40014800

08008760 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800878e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	051b      	lsls	r3, r3, #20
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a18      	ldr	r2, [pc, #96]	@ (8008818 <TIM_OC6_SetConfig+0xb8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00f      	beq.n	80087dc <TIM_OC6_SetConfig+0x7c>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a17      	ldr	r2, [pc, #92]	@ (800881c <TIM_OC6_SetConfig+0xbc>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d00b      	beq.n	80087dc <TIM_OC6_SetConfig+0x7c>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a16      	ldr	r2, [pc, #88]	@ (8008820 <TIM_OC6_SetConfig+0xc0>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d007      	beq.n	80087dc <TIM_OC6_SetConfig+0x7c>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a15      	ldr	r2, [pc, #84]	@ (8008824 <TIM_OC6_SetConfig+0xc4>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d003      	beq.n	80087dc <TIM_OC6_SetConfig+0x7c>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a14      	ldr	r2, [pc, #80]	@ (8008828 <TIM_OC6_SetConfig+0xc8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d109      	bne.n	80087f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	029b      	lsls	r3, r3, #10
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40012c00 	.word	0x40012c00
 800881c:	40013400 	.word	0x40013400
 8008820:	40014000 	.word	0x40014000
 8008824:	40014400 	.word	0x40014400
 8008828:	40014800 	.word	0x40014800

0800882c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	f023 0201 	bic.w	r2, r3, #1
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a26      	ldr	r2, [pc, #152]	@ (80088f0 <TIM_TI1_SetConfig+0xc4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d017      	beq.n	800888a <TIM_TI1_SetConfig+0x5e>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008860:	d013      	beq.n	800888a <TIM_TI1_SetConfig+0x5e>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4a23      	ldr	r2, [pc, #140]	@ (80088f4 <TIM_TI1_SetConfig+0xc8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00f      	beq.n	800888a <TIM_TI1_SetConfig+0x5e>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4a22      	ldr	r2, [pc, #136]	@ (80088f8 <TIM_TI1_SetConfig+0xcc>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00b      	beq.n	800888a <TIM_TI1_SetConfig+0x5e>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4a21      	ldr	r2, [pc, #132]	@ (80088fc <TIM_TI1_SetConfig+0xd0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d007      	beq.n	800888a <TIM_TI1_SetConfig+0x5e>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4a20      	ldr	r2, [pc, #128]	@ (8008900 <TIM_TI1_SetConfig+0xd4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_TI1_SetConfig+0x5e>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4a1f      	ldr	r2, [pc, #124]	@ (8008904 <TIM_TI1_SetConfig+0xd8>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d101      	bne.n	800888e <TIM_TI1_SetConfig+0x62>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <TIM_TI1_SetConfig+0x64>
 800888e:	2300      	movs	r3, #0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e003      	b.n	80088ae <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f043 0301 	orr.w	r3, r3, #1
 80088ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f023 030a 	bic.w	r3, r3, #10
 80088c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f003 030a 	and.w	r3, r3, #10
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	621a      	str	r2, [r3, #32]
}
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	40012c00 	.word	0x40012c00
 80088f4:	40000400 	.word	0x40000400
 80088f8:	40000800 	.word	0x40000800
 80088fc:	40000c00 	.word	0x40000c00
 8008900:	40013400 	.word	0x40013400
 8008904:	40014000 	.word	0x40014000

08008908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f023 0201 	bic.w	r2, r3, #1
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4313      	orrs	r3, r2
 800893c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f023 030a 	bic.w	r3, r3, #10
 8008944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	621a      	str	r2, [r3, #32]
}
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008966:	b480      	push	{r7}
 8008968:	b087      	sub	sp, #28
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f023 0210 	bic.w	r2, r3, #16
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	031b      	lsls	r3, r3, #12
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	621a      	str	r2, [r3, #32]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0210 	bic.w	r2, r3, #16
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	031b      	lsls	r3, r3, #12
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	621a      	str	r2, [r3, #32]
}
 8008a34:	bf00      	nop
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f023 0303 	bic.w	r3, r3, #3
 8008a6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008a90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	621a      	str	r2, [r3, #32]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ae4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008af6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	031b      	lsls	r3, r3, #12
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008b0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	031b      	lsls	r3, r3, #12
 8008b10:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	621a      	str	r2, [r3, #32]
}
 8008b26:	bf00      	nop
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	f043 0307 	orr.w	r3, r3, #7
 8008b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	609a      	str	r2, [r3, #8]
}
 8008b5c:	bf00      	nop
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	021a      	lsls	r2, r3, #8
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	609a      	str	r2, [r3, #8]
}
 8008b9c:	bf00      	nop
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f003 031f 	and.w	r3, r3, #31
 8008bba:	2201      	movs	r2, #1
 8008bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6a1a      	ldr	r2, [r3, #32]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	43db      	mvns	r3, r3
 8008bca:	401a      	ands	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a1a      	ldr	r2, [r3, #32]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 031f 	and.w	r3, r3, #31
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008be0:	431a      	orrs	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	621a      	str	r2, [r3, #32]
}
 8008be6:	bf00      	nop
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
	...

08008bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e068      	b.n	8008cde <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a2e      	ldr	r2, [pc, #184]	@ (8008cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d108      	bne.n	8008c52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a1e      	ldr	r2, [pc, #120]	@ (8008cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d01d      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c7e:	d018      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1b      	ldr	r2, [pc, #108]	@ (8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d013      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00e      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a18      	ldr	r2, [pc, #96]	@ (8008cfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d009      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a13      	ldr	r2, [pc, #76]	@ (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d004      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a14      	ldr	r2, [pc, #80]	@ (8008d00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d10c      	bne.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40012c00 	.word	0x40012c00
 8008cf0:	40013400 	.word	0x40013400
 8008cf4:	40000400 	.word	0x40000400
 8008cf8:	40000800 	.word	0x40000800
 8008cfc:	40000c00 	.word	0x40000c00
 8008d00:	40014000 	.word	0x40014000

08008d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e040      	b.n	8008dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7f9 fee8 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2224      	movs	r2, #36	@ 0x24
 8008d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0201 	bic.w	r2, r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d002      	beq.n	8008d8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fee6 	bl	8009b58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fc2b 	bl	80095e8 <UART_SetConfig>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e01b      	b.n	8008dd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0201 	orr.w	r2, r2, #1
 8008dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 ff65 	bl	8009c9c <UART_CheckIdleState>
 8008dd2:	4603      	mov	r3, r0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	@ 0x28
 8008de0:	af02      	add	r7, sp, #8
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	4613      	mov	r3, r2
 8008dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	d177      	bne.n	8008ee4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <HAL_UART_Transmit+0x24>
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e070      	b.n	8008ee6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2221      	movs	r2, #33	@ 0x21
 8008e10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e12:	f7f9 ffa1 	bl	8002d58 <HAL_GetTick>
 8008e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	88fa      	ldrh	r2, [r7, #6]
 8008e1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	88fa      	ldrh	r2, [r7, #6]
 8008e24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e30:	d108      	bne.n	8008e44 <HAL_UART_Transmit+0x68>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d104      	bne.n	8008e44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	61bb      	str	r3, [r7, #24]
 8008e42:	e003      	b.n	8008e4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e4c:	e02f      	b.n	8008eae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2200      	movs	r2, #0
 8008e56:	2180      	movs	r1, #128	@ 0x80
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 ffc7 	bl	8009dec <UART_WaitOnFlagUntilTimeout>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2220      	movs	r2, #32
 8008e68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e03b      	b.n	8008ee6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	881a      	ldrh	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e80:	b292      	uxth	r2, r2
 8008e82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	3302      	adds	r3, #2
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	e007      	b.n	8008e9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	781a      	ldrb	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1c9      	bne.n	8008e4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2140      	movs	r1, #64	@ 0x40
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 ff91 	bl	8009dec <UART_WaitOnFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e005      	b.n	8008ee6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e000      	b.n	8008ee6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008ee4:	2302      	movs	r3, #2
  }
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3720      	adds	r7, #32
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	@ 0x28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d137      	bne.n	8008f78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <HAL_UART_Receive_IT+0x24>
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e030      	b.n	8008f7a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a18      	ldr	r2, [pc, #96]	@ (8008f84 <HAL_UART_Receive_IT+0x94>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d01f      	beq.n	8008f68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d018      	beq.n	8008f68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	613b      	str	r3, [r7, #16]
   return(result);
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	623b      	str	r3, [r7, #32]
 8008f56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	69f9      	ldr	r1, [r7, #28]
 8008f5a:	6a3a      	ldr	r2, [r7, #32]
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e6      	bne.n	8008f36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f68:	88fb      	ldrh	r3, [r7, #6]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	68b9      	ldr	r1, [r7, #8]
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 ffaa 	bl	8009ec8 <UART_Start_Receive_IT>
 8008f74:	4603      	mov	r3, r0
 8008f76:	e000      	b.n	8008f7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f78:	2302      	movs	r3, #2
  }
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3728      	adds	r7, #40	@ 0x28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	40008000 	.word	0x40008000

08008f88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b0ba      	sub	sp, #232	@ 0xe8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008fb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d115      	bne.n	8008ff0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00f      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d009      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 82ca 	beq.w	800957a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4798      	blx	r3
      }
      return;
 8008fee:	e2c4      	b.n	800957a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8117 	beq.w	8009228 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009006:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800900a:	4b85      	ldr	r3, [pc, #532]	@ (8009220 <HAL_UART_IRQHandler+0x298>)
 800900c:	4013      	ands	r3, r2
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 810a 	beq.w	8009228 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d011      	beq.n	8009044 <HAL_UART_IRQHandler+0xbc>
 8009020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2201      	movs	r2, #1
 8009032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800903a:	f043 0201 	orr.w	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d011      	beq.n	8009074 <HAL_UART_IRQHandler+0xec>
 8009050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2202      	movs	r2, #2
 8009062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800906a:	f043 0204 	orr.w	r2, r3, #4
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d011      	beq.n	80090a4 <HAL_UART_IRQHandler+0x11c>
 8009080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2204      	movs	r2, #4
 8009092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800909a:	f043 0202 	orr.w	r2, r3, #2
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a8:	f003 0308 	and.w	r3, r3, #8
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d017      	beq.n	80090e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d105      	bne.n	80090c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80090bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2208      	movs	r2, #8
 80090ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090d6:	f043 0208 	orr.w	r2, r3, #8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d012      	beq.n	8009112 <HAL_UART_IRQHandler+0x18a>
 80090ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00c      	beq.n	8009112 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009108:	f043 0220 	orr.w	r2, r3, #32
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 8230 	beq.w	800957e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00d      	beq.n	8009146 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800912a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800912e:	f003 0320 	and.w	r3, r3, #32
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800914c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915a:	2b40      	cmp	r3, #64	@ 0x40
 800915c:	d005      	beq.n	800916a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800915e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009162:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009166:	2b00      	cmp	r3, #0
 8009168:	d04f      	beq.n	800920a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 ff72 	bl	800a054 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917a:	2b40      	cmp	r3, #64	@ 0x40
 800917c:	d141      	bne.n	8009202 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800919c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3308      	adds	r3, #8
 80091a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80091aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80091ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80091b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80091c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1d9      	bne.n	800917e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d013      	beq.n	80091fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091d6:	4a13      	ldr	r2, [pc, #76]	@ (8009224 <HAL_UART_IRQHandler+0x29c>)
 80091d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fa fe8a 	bl	8003ef8 <HAL_DMA_Abort_IT>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d017      	beq.n	800921a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f8:	e00f      	b.n	800921a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9de 	bl	80095bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009200:	e00b      	b.n	800921a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f9da 	bl	80095bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009208:	e007      	b.n	800921a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f9d6 	bl	80095bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009218:	e1b1      	b.n	800957e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800921a:	bf00      	nop
    return;
 800921c:	e1af      	b.n	800957e <HAL_UART_IRQHandler+0x5f6>
 800921e:	bf00      	nop
 8009220:	04000120 	.word	0x04000120
 8009224:	0800a11d 	.word	0x0800a11d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800922c:	2b01      	cmp	r3, #1
 800922e:	f040 816a 	bne.w	8009506 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009236:	f003 0310 	and.w	r3, r3, #16
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 8163 	beq.w	8009506 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 815c 	beq.w	8009506 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2210      	movs	r2, #16
 8009254:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009260:	2b40      	cmp	r3, #64	@ 0x40
 8009262:	f040 80d4 	bne.w	800940e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009272:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 80ad 	beq.w	80093d6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009286:	429a      	cmp	r2, r3
 8009288:	f080 80a5 	bcs.w	80093d6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009292:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f040 8086 	bne.w	80093b4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092b4:	e853 3f00 	ldrex	r3, [r3]
 80092b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80092bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1da      	bne.n	80092a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3308      	adds	r3, #8
 80092f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009304:	f023 0301 	bic.w	r3, r3, #1
 8009308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3308      	adds	r3, #8
 8009312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009316:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800931a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800931e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009322:	e841 2300 	strex	r3, r2, [r1]
 8009326:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1e1      	bne.n	80092f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800933e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3308      	adds	r3, #8
 800934e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009352:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009354:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009358:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e3      	bne.n	800932e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009384:	f023 0310 	bic.w	r3, r3, #16
 8009388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	461a      	mov	r2, r3
 8009392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009396:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009398:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800939c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e4      	bne.n	8009374 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fa fd64 	bl	8003e7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8fe 	bl	80095d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80093d4:	e0d5      	b.n	8009582 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80093dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093e0:	429a      	cmp	r2, r3
 80093e2:	f040 80ce 	bne.w	8009582 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b20      	cmp	r3, #32
 80093f4:	f040 80c5 	bne.w	8009582 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2202      	movs	r2, #2
 80093fc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f8e2 	bl	80095d0 <HAL_UARTEx_RxEventCallback>
      return;
 800940c:	e0b9      	b.n	8009582 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800941a:	b29b      	uxth	r3, r3
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 80ab 	beq.w	8009586 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 80a6 	beq.w	8009586 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800944a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800944e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800945c:	647b      	str	r3, [r7, #68]	@ 0x44
 800945e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800946a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e4      	bne.n	800943a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3308      	adds	r3, #8
 8009476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	623b      	str	r3, [r7, #32]
   return(result);
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	f023 0301 	bic.w	r3, r3, #1
 8009486:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3308      	adds	r3, #8
 8009490:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009494:	633a      	str	r2, [r7, #48]	@ 0x30
 8009496:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800949a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800949c:	e841 2300 	strex	r3, r2, [r1]
 80094a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e3      	bne.n	8009470 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2220      	movs	r2, #32
 80094ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f023 0310 	bic.w	r3, r3, #16
 80094d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	461a      	mov	r2, r3
 80094da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	69b9      	ldr	r1, [r7, #24]
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	617b      	str	r3, [r7, #20]
   return(result);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e4      	bne.n	80094bc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2202      	movs	r2, #2
 80094f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f866 	bl	80095d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009504:	e03f      	b.n	8009586 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800950a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00e      	beq.n	8009530 <HAL_UART_IRQHandler+0x5a8>
 8009512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d008      	beq.n	8009530 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fff3 	bl	800a514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800952e:	e02d      	b.n	800958c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00e      	beq.n	800955a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800953c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009544:	2b00      	cmp	r3, #0
 8009546:	d008      	beq.n	800955a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800954c:	2b00      	cmp	r3, #0
 800954e:	d01c      	beq.n	800958a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	4798      	blx	r3
    }
    return;
 8009558:	e017      	b.n	800958a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800955a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800955e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	d012      	beq.n	800958c <HAL_UART_IRQHandler+0x604>
 8009566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800956a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00c      	beq.n	800958c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fde8 	bl	800a148 <UART_EndTransmit_IT>
    return;
 8009578:	e008      	b.n	800958c <HAL_UART_IRQHandler+0x604>
      return;
 800957a:	bf00      	nop
 800957c:	e006      	b.n	800958c <HAL_UART_IRQHandler+0x604>
    return;
 800957e:	bf00      	nop
 8009580:	e004      	b.n	800958c <HAL_UART_IRQHandler+0x604>
      return;
 8009582:	bf00      	nop
 8009584:	e002      	b.n	800958c <HAL_UART_IRQHandler+0x604>
      return;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <HAL_UART_IRQHandler+0x604>
    return;
 800958a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800958c:	37e8      	adds	r7, #232	@ 0xe8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop

08009594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095ec:	b08a      	sub	sp, #40	@ 0x28
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	431a      	orrs	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	431a      	orrs	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	4313      	orrs	r3, r2
 800960e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	4ba4      	ldr	r3, [pc, #656]	@ (80098a8 <UART_SetConfig+0x2c0>)
 8009618:	4013      	ands	r3, r2
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009620:	430b      	orrs	r3, r1
 8009622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a99      	ldr	r2, [pc, #612]	@ (80098ac <UART_SetConfig+0x2c4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d004      	beq.n	8009654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009650:	4313      	orrs	r3, r2
 8009652:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009664:	430a      	orrs	r2, r1
 8009666:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a90      	ldr	r2, [pc, #576]	@ (80098b0 <UART_SetConfig+0x2c8>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d126      	bne.n	80096c0 <UART_SetConfig+0xd8>
 8009672:	4b90      	ldr	r3, [pc, #576]	@ (80098b4 <UART_SetConfig+0x2cc>)
 8009674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009678:	f003 0303 	and.w	r3, r3, #3
 800967c:	2b03      	cmp	r3, #3
 800967e:	d81b      	bhi.n	80096b8 <UART_SetConfig+0xd0>
 8009680:	a201      	add	r2, pc, #4	@ (adr r2, 8009688 <UART_SetConfig+0xa0>)
 8009682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009686:	bf00      	nop
 8009688:	08009699 	.word	0x08009699
 800968c:	080096a9 	.word	0x080096a9
 8009690:	080096a1 	.word	0x080096a1
 8009694:	080096b1 	.word	0x080096b1
 8009698:	2301      	movs	r3, #1
 800969a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800969e:	e116      	b.n	80098ce <UART_SetConfig+0x2e6>
 80096a0:	2302      	movs	r3, #2
 80096a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80096a6:	e112      	b.n	80098ce <UART_SetConfig+0x2e6>
 80096a8:	2304      	movs	r3, #4
 80096aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80096ae:	e10e      	b.n	80098ce <UART_SetConfig+0x2e6>
 80096b0:	2308      	movs	r3, #8
 80096b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80096b6:	e10a      	b.n	80098ce <UART_SetConfig+0x2e6>
 80096b8:	2310      	movs	r3, #16
 80096ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80096be:	e106      	b.n	80098ce <UART_SetConfig+0x2e6>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a7c      	ldr	r2, [pc, #496]	@ (80098b8 <UART_SetConfig+0x2d0>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d138      	bne.n	800973c <UART_SetConfig+0x154>
 80096ca:	4b7a      	ldr	r3, [pc, #488]	@ (80098b4 <UART_SetConfig+0x2cc>)
 80096cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d0:	f003 030c 	and.w	r3, r3, #12
 80096d4:	2b0c      	cmp	r3, #12
 80096d6:	d82d      	bhi.n	8009734 <UART_SetConfig+0x14c>
 80096d8:	a201      	add	r2, pc, #4	@ (adr r2, 80096e0 <UART_SetConfig+0xf8>)
 80096da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096de:	bf00      	nop
 80096e0:	08009715 	.word	0x08009715
 80096e4:	08009735 	.word	0x08009735
 80096e8:	08009735 	.word	0x08009735
 80096ec:	08009735 	.word	0x08009735
 80096f0:	08009725 	.word	0x08009725
 80096f4:	08009735 	.word	0x08009735
 80096f8:	08009735 	.word	0x08009735
 80096fc:	08009735 	.word	0x08009735
 8009700:	0800971d 	.word	0x0800971d
 8009704:	08009735 	.word	0x08009735
 8009708:	08009735 	.word	0x08009735
 800970c:	08009735 	.word	0x08009735
 8009710:	0800972d 	.word	0x0800972d
 8009714:	2300      	movs	r3, #0
 8009716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800971a:	e0d8      	b.n	80098ce <UART_SetConfig+0x2e6>
 800971c:	2302      	movs	r3, #2
 800971e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009722:	e0d4      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009724:	2304      	movs	r3, #4
 8009726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800972a:	e0d0      	b.n	80098ce <UART_SetConfig+0x2e6>
 800972c:	2308      	movs	r3, #8
 800972e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009732:	e0cc      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009734:	2310      	movs	r3, #16
 8009736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800973a:	e0c8      	b.n	80098ce <UART_SetConfig+0x2e6>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a5e      	ldr	r2, [pc, #376]	@ (80098bc <UART_SetConfig+0x2d4>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d125      	bne.n	8009792 <UART_SetConfig+0x1aa>
 8009746:	4b5b      	ldr	r3, [pc, #364]	@ (80098b4 <UART_SetConfig+0x2cc>)
 8009748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800974c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009750:	2b30      	cmp	r3, #48	@ 0x30
 8009752:	d016      	beq.n	8009782 <UART_SetConfig+0x19a>
 8009754:	2b30      	cmp	r3, #48	@ 0x30
 8009756:	d818      	bhi.n	800978a <UART_SetConfig+0x1a2>
 8009758:	2b20      	cmp	r3, #32
 800975a:	d00a      	beq.n	8009772 <UART_SetConfig+0x18a>
 800975c:	2b20      	cmp	r3, #32
 800975e:	d814      	bhi.n	800978a <UART_SetConfig+0x1a2>
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <UART_SetConfig+0x182>
 8009764:	2b10      	cmp	r3, #16
 8009766:	d008      	beq.n	800977a <UART_SetConfig+0x192>
 8009768:	e00f      	b.n	800978a <UART_SetConfig+0x1a2>
 800976a:	2300      	movs	r3, #0
 800976c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009770:	e0ad      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009772:	2302      	movs	r3, #2
 8009774:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009778:	e0a9      	b.n	80098ce <UART_SetConfig+0x2e6>
 800977a:	2304      	movs	r3, #4
 800977c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009780:	e0a5      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009782:	2308      	movs	r3, #8
 8009784:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009788:	e0a1      	b.n	80098ce <UART_SetConfig+0x2e6>
 800978a:	2310      	movs	r3, #16
 800978c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009790:	e09d      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a4a      	ldr	r2, [pc, #296]	@ (80098c0 <UART_SetConfig+0x2d8>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d125      	bne.n	80097e8 <UART_SetConfig+0x200>
 800979c:	4b45      	ldr	r3, [pc, #276]	@ (80098b4 <UART_SetConfig+0x2cc>)
 800979e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80097a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80097a8:	d016      	beq.n	80097d8 <UART_SetConfig+0x1f0>
 80097aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80097ac:	d818      	bhi.n	80097e0 <UART_SetConfig+0x1f8>
 80097ae:	2b80      	cmp	r3, #128	@ 0x80
 80097b0:	d00a      	beq.n	80097c8 <UART_SetConfig+0x1e0>
 80097b2:	2b80      	cmp	r3, #128	@ 0x80
 80097b4:	d814      	bhi.n	80097e0 <UART_SetConfig+0x1f8>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <UART_SetConfig+0x1d8>
 80097ba:	2b40      	cmp	r3, #64	@ 0x40
 80097bc:	d008      	beq.n	80097d0 <UART_SetConfig+0x1e8>
 80097be:	e00f      	b.n	80097e0 <UART_SetConfig+0x1f8>
 80097c0:	2300      	movs	r3, #0
 80097c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097c6:	e082      	b.n	80098ce <UART_SetConfig+0x2e6>
 80097c8:	2302      	movs	r3, #2
 80097ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097ce:	e07e      	b.n	80098ce <UART_SetConfig+0x2e6>
 80097d0:	2304      	movs	r3, #4
 80097d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097d6:	e07a      	b.n	80098ce <UART_SetConfig+0x2e6>
 80097d8:	2308      	movs	r3, #8
 80097da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097de:	e076      	b.n	80098ce <UART_SetConfig+0x2e6>
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80097e6:	e072      	b.n	80098ce <UART_SetConfig+0x2e6>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a35      	ldr	r2, [pc, #212]	@ (80098c4 <UART_SetConfig+0x2dc>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d12a      	bne.n	8009848 <UART_SetConfig+0x260>
 80097f2:	4b30      	ldr	r3, [pc, #192]	@ (80098b4 <UART_SetConfig+0x2cc>)
 80097f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009800:	d01a      	beq.n	8009838 <UART_SetConfig+0x250>
 8009802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009806:	d81b      	bhi.n	8009840 <UART_SetConfig+0x258>
 8009808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800980c:	d00c      	beq.n	8009828 <UART_SetConfig+0x240>
 800980e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009812:	d815      	bhi.n	8009840 <UART_SetConfig+0x258>
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <UART_SetConfig+0x238>
 8009818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800981c:	d008      	beq.n	8009830 <UART_SetConfig+0x248>
 800981e:	e00f      	b.n	8009840 <UART_SetConfig+0x258>
 8009820:	2300      	movs	r3, #0
 8009822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009826:	e052      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009828:	2302      	movs	r3, #2
 800982a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800982e:	e04e      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009830:	2304      	movs	r3, #4
 8009832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009836:	e04a      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009838:	2308      	movs	r3, #8
 800983a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800983e:	e046      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009840:	2310      	movs	r3, #16
 8009842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009846:	e042      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a17      	ldr	r2, [pc, #92]	@ (80098ac <UART_SetConfig+0x2c4>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d13a      	bne.n	80098c8 <UART_SetConfig+0x2e0>
 8009852:	4b18      	ldr	r3, [pc, #96]	@ (80098b4 <UART_SetConfig+0x2cc>)
 8009854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009858:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800985c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009860:	d01a      	beq.n	8009898 <UART_SetConfig+0x2b0>
 8009862:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009866:	d81b      	bhi.n	80098a0 <UART_SetConfig+0x2b8>
 8009868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800986c:	d00c      	beq.n	8009888 <UART_SetConfig+0x2a0>
 800986e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009872:	d815      	bhi.n	80098a0 <UART_SetConfig+0x2b8>
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <UART_SetConfig+0x298>
 8009878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800987c:	d008      	beq.n	8009890 <UART_SetConfig+0x2a8>
 800987e:	e00f      	b.n	80098a0 <UART_SetConfig+0x2b8>
 8009880:	2300      	movs	r3, #0
 8009882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009886:	e022      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009888:	2302      	movs	r3, #2
 800988a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800988e:	e01e      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009890:	2304      	movs	r3, #4
 8009892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009896:	e01a      	b.n	80098ce <UART_SetConfig+0x2e6>
 8009898:	2308      	movs	r3, #8
 800989a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800989e:	e016      	b.n	80098ce <UART_SetConfig+0x2e6>
 80098a0:	2310      	movs	r3, #16
 80098a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098a6:	e012      	b.n	80098ce <UART_SetConfig+0x2e6>
 80098a8:	efff69f3 	.word	0xefff69f3
 80098ac:	40008000 	.word	0x40008000
 80098b0:	40013800 	.word	0x40013800
 80098b4:	40021000 	.word	0x40021000
 80098b8:	40004400 	.word	0x40004400
 80098bc:	40004800 	.word	0x40004800
 80098c0:	40004c00 	.word	0x40004c00
 80098c4:	40005000 	.word	0x40005000
 80098c8:	2310      	movs	r3, #16
 80098ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a9f      	ldr	r2, [pc, #636]	@ (8009b50 <UART_SetConfig+0x568>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d17a      	bne.n	80099ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d824      	bhi.n	800992a <UART_SetConfig+0x342>
 80098e0:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <UART_SetConfig+0x300>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	0800990d 	.word	0x0800990d
 80098ec:	0800992b 	.word	0x0800992b
 80098f0:	08009915 	.word	0x08009915
 80098f4:	0800992b 	.word	0x0800992b
 80098f8:	0800991b 	.word	0x0800991b
 80098fc:	0800992b 	.word	0x0800992b
 8009900:	0800992b 	.word	0x0800992b
 8009904:	0800992b 	.word	0x0800992b
 8009908:	08009923 	.word	0x08009923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800990c:	f7fc fa58 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8009910:	61f8      	str	r0, [r7, #28]
        break;
 8009912:	e010      	b.n	8009936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009914:	4b8f      	ldr	r3, [pc, #572]	@ (8009b54 <UART_SetConfig+0x56c>)
 8009916:	61fb      	str	r3, [r7, #28]
        break;
 8009918:	e00d      	b.n	8009936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800991a:	f7fc f9b9 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 800991e:	61f8      	str	r0, [r7, #28]
        break;
 8009920:	e009      	b.n	8009936 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009926:	61fb      	str	r3, [r7, #28]
        break;
 8009928:	e005      	b.n	8009936 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800992a:	2300      	movs	r3, #0
 800992c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009934:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80fb 	beq.w	8009b34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	4613      	mov	r3, r2
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	4413      	add	r3, r2
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	429a      	cmp	r2, r3
 800994c:	d305      	bcc.n	800995a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	429a      	cmp	r2, r3
 8009958:	d903      	bls.n	8009962 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009960:	e0e8      	b.n	8009b34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	2200      	movs	r2, #0
 8009966:	461c      	mov	r4, r3
 8009968:	4615      	mov	r5, r2
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	f04f 0300 	mov.w	r3, #0
 8009972:	022b      	lsls	r3, r5, #8
 8009974:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009978:	0222      	lsls	r2, r4, #8
 800997a:	68f9      	ldr	r1, [r7, #12]
 800997c:	6849      	ldr	r1, [r1, #4]
 800997e:	0849      	lsrs	r1, r1, #1
 8009980:	2000      	movs	r0, #0
 8009982:	4688      	mov	r8, r1
 8009984:	4681      	mov	r9, r0
 8009986:	eb12 0a08 	adds.w	sl, r2, r8
 800998a:	eb43 0b09 	adc.w	fp, r3, r9
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	603b      	str	r3, [r7, #0]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800999c:	4650      	mov	r0, sl
 800999e:	4659      	mov	r1, fp
 80099a0:	f7f7 f972 	bl	8000c88 <__aeabi_uldivmod>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4613      	mov	r3, r2
 80099aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099b2:	d308      	bcc.n	80099c6 <UART_SetConfig+0x3de>
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099ba:	d204      	bcs.n	80099c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	69ba      	ldr	r2, [r7, #24]
 80099c2:	60da      	str	r2, [r3, #12]
 80099c4:	e0b6      	b.n	8009b34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80099cc:	e0b2      	b.n	8009b34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d6:	d15e      	bne.n	8009a96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80099d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d828      	bhi.n	8009a32 <UART_SetConfig+0x44a>
 80099e0:	a201      	add	r2, pc, #4	@ (adr r2, 80099e8 <UART_SetConfig+0x400>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a0d 	.word	0x08009a0d
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a1d 	.word	0x08009a1d
 80099f4:	08009a33 	.word	0x08009a33
 80099f8:	08009a23 	.word	0x08009a23
 80099fc:	08009a33 	.word	0x08009a33
 8009a00:	08009a33 	.word	0x08009a33
 8009a04:	08009a33 	.word	0x08009a33
 8009a08:	08009a2b 	.word	0x08009a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a0c:	f7fc f9d8 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8009a10:	61f8      	str	r0, [r7, #28]
        break;
 8009a12:	e014      	b.n	8009a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a14:	f7fc f9ea 	bl	8005dec <HAL_RCC_GetPCLK2Freq>
 8009a18:	61f8      	str	r0, [r7, #28]
        break;
 8009a1a:	e010      	b.n	8009a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8009b54 <UART_SetConfig+0x56c>)
 8009a1e:	61fb      	str	r3, [r7, #28]
        break;
 8009a20:	e00d      	b.n	8009a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a22:	f7fc f935 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8009a26:	61f8      	str	r0, [r7, #28]
        break;
 8009a28:	e009      	b.n	8009a3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a2e:	61fb      	str	r3, [r7, #28]
        break;
 8009a30:	e005      	b.n	8009a3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d077      	beq.n	8009b34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	005a      	lsls	r2, r3, #1
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	085b      	lsrs	r3, r3, #1
 8009a4e:	441a      	add	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	2b0f      	cmp	r3, #15
 8009a5e:	d916      	bls.n	8009a8e <UART_SetConfig+0x4a6>
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a66:	d212      	bcs.n	8009a8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	f023 030f 	bic.w	r3, r3, #15
 8009a70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	8afb      	ldrh	r3, [r7, #22]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	8afa      	ldrh	r2, [r7, #22]
 8009a8a:	60da      	str	r2, [r3, #12]
 8009a8c:	e052      	b.n	8009b34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009a94:	e04e      	b.n	8009b34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009a9a:	2b08      	cmp	r3, #8
 8009a9c:	d827      	bhi.n	8009aee <UART_SetConfig+0x506>
 8009a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa4 <UART_SetConfig+0x4bc>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009ac9 	.word	0x08009ac9
 8009aa8:	08009ad1 	.word	0x08009ad1
 8009aac:	08009ad9 	.word	0x08009ad9
 8009ab0:	08009aef 	.word	0x08009aef
 8009ab4:	08009adf 	.word	0x08009adf
 8009ab8:	08009aef 	.word	0x08009aef
 8009abc:	08009aef 	.word	0x08009aef
 8009ac0:	08009aef 	.word	0x08009aef
 8009ac4:	08009ae7 	.word	0x08009ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ac8:	f7fc f97a 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8009acc:	61f8      	str	r0, [r7, #28]
        break;
 8009ace:	e014      	b.n	8009afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ad0:	f7fc f98c 	bl	8005dec <HAL_RCC_GetPCLK2Freq>
 8009ad4:	61f8      	str	r0, [r7, #28]
        break;
 8009ad6:	e010      	b.n	8009afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8009b54 <UART_SetConfig+0x56c>)
 8009ada:	61fb      	str	r3, [r7, #28]
        break;
 8009adc:	e00d      	b.n	8009afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ade:	f7fc f8d7 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8009ae2:	61f8      	str	r0, [r7, #28]
        break;
 8009ae4:	e009      	b.n	8009afa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aea:	61fb      	str	r3, [r7, #28]
        break;
 8009aec:	e005      	b.n	8009afa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009af8:	bf00      	nop
    }

    if (pclk != 0U)
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d019      	beq.n	8009b34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	085a      	lsrs	r2, r3, #1
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	441a      	add	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	2b0f      	cmp	r3, #15
 8009b18:	d909      	bls.n	8009b2e <UART_SetConfig+0x546>
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b20:	d205      	bcs.n	8009b2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60da      	str	r2, [r3, #12]
 8009b2c:	e002      	b.n	8009b34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009b40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3728      	adds	r7, #40	@ 0x28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b4e:	bf00      	nop
 8009b50:	40008000 	.word	0x40008000
 8009b54:	00f42400 	.word	0x00f42400

08009b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00a      	beq.n	8009b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00a      	beq.n	8009bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bca:	f003 0304 	and.w	r3, r3, #4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bec:	f003 0310 	and.w	r3, r3, #16
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01a      	beq.n	8009c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c56:	d10a      	bne.n	8009c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	605a      	str	r2, [r3, #4]
  }
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b098      	sub	sp, #96	@ 0x60
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cac:	f7f9 f854 	bl	8002d58 <HAL_GetTick>
 8009cb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0308 	and.w	r3, r3, #8
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d12e      	bne.n	8009d1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f88c 	bl	8009dec <UART_WaitOnFlagUntilTimeout>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d021      	beq.n	8009d1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e6      	bne.n	8009cda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e062      	b.n	8009de4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d149      	bne.n	8009dc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d34:	2200      	movs	r2, #0
 8009d36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f856 	bl	8009dec <UART_WaitOnFlagUntilTimeout>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d03c      	beq.n	8009dc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	623b      	str	r3, [r7, #32]
   return(result);
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e6      	bne.n	8009d46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0301 	bic.w	r3, r3, #1
 8009d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3308      	adds	r3, #8
 8009d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d98:	61fa      	str	r2, [r7, #28]
 8009d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	69b9      	ldr	r1, [r7, #24]
 8009d9e:	69fa      	ldr	r2, [r7, #28]
 8009da0:	e841 2300 	strex	r3, r2, [r1]
 8009da4:	617b      	str	r3, [r7, #20]
   return(result);
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e5      	bne.n	8009d78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e011      	b.n	8009de4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3758      	adds	r7, #88	@ 0x58
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	603b      	str	r3, [r7, #0]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dfc:	e04f      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e04:	d04b      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e06:	f7f8 ffa7 	bl	8002d58 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d302      	bcc.n	8009e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e04e      	b.n	8009ebe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 0304 	and.w	r3, r3, #4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d037      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b80      	cmp	r3, #128	@ 0x80
 8009e32:	d034      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b40      	cmp	r3, #64	@ 0x40
 8009e38:	d031      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d110      	bne.n	8009e6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2208      	movs	r2, #8
 8009e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f8ff 	bl	800a054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2208      	movs	r2, #8
 8009e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e029      	b.n	8009ebe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e78:	d111      	bne.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f8e5 	bl	800a054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e00f      	b.n	8009ebe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69da      	ldr	r2, [r3, #28]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	bf0c      	ite	eq
 8009eae:	2301      	moveq	r3, #1
 8009eb0:	2300      	movne	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d0a0      	beq.n	8009dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b097      	sub	sp, #92	@ 0x5c
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	88fa      	ldrh	r2, [r7, #6]
 8009ee0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	88fa      	ldrh	r2, [r7, #6]
 8009ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009efa:	d10e      	bne.n	8009f1a <UART_Start_Receive_IT+0x52>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d105      	bne.n	8009f10 <UART_Start_Receive_IT+0x48>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009f0e:	e02d      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	22ff      	movs	r2, #255	@ 0xff
 8009f14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009f18:	e028      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10d      	bne.n	8009f3e <UART_Start_Receive_IT+0x76>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d104      	bne.n	8009f34 <UART_Start_Receive_IT+0x6c>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	22ff      	movs	r2, #255	@ 0xff
 8009f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009f32:	e01b      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	227f      	movs	r2, #127	@ 0x7f
 8009f38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009f3c:	e016      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f46:	d10d      	bne.n	8009f64 <UART_Start_Receive_IT+0x9c>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d104      	bne.n	8009f5a <UART_Start_Receive_IT+0x92>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	227f      	movs	r2, #127	@ 0x7f
 8009f54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009f58:	e008      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	223f      	movs	r2, #63	@ 0x3f
 8009f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009f62:	e003      	b.n	8009f6c <UART_Start_Receive_IT+0xa4>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2222      	movs	r2, #34	@ 0x22
 8009f78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3308      	adds	r3, #8
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8e:	f043 0301 	orr.w	r3, r3, #1
 8009f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009f9c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009f9e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fa4:	e841 2300 	strex	r3, r2, [r1]
 8009fa8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e5      	bne.n	8009f7c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fb8:	d107      	bne.n	8009fca <UART_Start_Receive_IT+0x102>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d103      	bne.n	8009fca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4a21      	ldr	r2, [pc, #132]	@ (800a04c <UART_Start_Receive_IT+0x184>)
 8009fc6:	669a      	str	r2, [r3, #104]	@ 0x68
 8009fc8:	e002      	b.n	8009fd0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4a20      	ldr	r2, [pc, #128]	@ (800a050 <UART_Start_Receive_IT+0x188>)
 8009fce:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d019      	beq.n	800a00c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e6      	bne.n	8009fd8 <UART_Start_Receive_IT+0x110>
 800a00a:	e018      	b.n	800a03e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	613b      	str	r3, [r7, #16]
   return(result);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f043 0320 	orr.w	r3, r3, #32
 800a020:	653b      	str	r3, [r7, #80]	@ 0x50
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a02a:	623b      	str	r3, [r7, #32]
 800a02c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	69f9      	ldr	r1, [r7, #28]
 800a030:	6a3a      	ldr	r2, [r7, #32]
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	61bb      	str	r3, [r7, #24]
   return(result);
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e6      	bne.n	800a00c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	375c      	adds	r7, #92	@ 0x5c
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	0800a359 	.word	0x0800a359
 800a050:	0800a19d 	.word	0x0800a19d

0800a054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a054:	b480      	push	{r7}
 800a056:	b095      	sub	sp, #84	@ 0x54
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a07a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a07c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a082:	e841 2300 	strex	r3, r2, [r1]
 800a086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1e6      	bne.n	800a05c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3308      	adds	r3, #8
 800a094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	e853 3f00 	ldrex	r3, [r3]
 800a09c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	f023 0301 	bic.w	r3, r3, #1
 800a0a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3308      	adds	r3, #8
 800a0ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e5      	bne.n	800a08e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d118      	bne.n	800a0fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	f023 0310 	bic.w	r3, r3, #16
 800a0de:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0e8:	61bb      	str	r3, [r7, #24]
 800a0ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	6979      	ldr	r1, [r7, #20]
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e6      	bne.n	800a0ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a110:	bf00      	nop
 800a112:	3754      	adds	r7, #84	@ 0x54
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f7ff fa3e 	bl	80095bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	61bb      	str	r3, [r7, #24]
 800a170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6979      	ldr	r1, [r7, #20]
 800a174:	69ba      	ldr	r2, [r7, #24]
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	613b      	str	r3, [r7, #16]
   return(result);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e6      	bne.n	800a150 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff fa00 	bl	8009594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a194:	bf00      	nop
 800a196:	3720      	adds	r7, #32
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b09c      	sub	sp, #112	@ 0x70
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1b4:	2b22      	cmp	r3, #34	@ 0x22
 800a1b6:	f040 80be 	bne.w	800a336 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a1c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a1c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a1c8:	b2d9      	uxtb	r1, r3
 800a1ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1d4:	400a      	ands	r2, r1
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f040 80a3 	bne.w	800a34a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a222:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a224:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a228:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e6      	bne.n	800a204 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3308      	adds	r3, #8
 800a23c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3308      	adds	r3, #8
 800a254:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a256:	647a      	str	r2, [r7, #68]	@ 0x44
 800a258:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a25c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e5      	bne.n	800a236 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a34      	ldr	r2, [pc, #208]	@ (800a354 <UART_RxISR_8BIT+0x1b8>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d01f      	beq.n	800a2c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d018      	beq.n	800a2c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	623b      	str	r3, [r7, #32]
   return(result);
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e6      	bne.n	800a296 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d12e      	bne.n	800a32e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 0310 	bic.w	r3, r3, #16
 800a2ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2f4:	61fb      	str	r3, [r7, #28]
 800a2f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	69b9      	ldr	r1, [r7, #24]
 800a2fa:	69fa      	ldr	r2, [r7, #28]
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	617b      	str	r3, [r7, #20]
   return(result);
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e6      	bne.n	800a2d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	f003 0310 	and.w	r3, r3, #16
 800a312:	2b10      	cmp	r3, #16
 800a314:	d103      	bne.n	800a31e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2210      	movs	r2, #16
 800a31c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff f952 	bl	80095d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a32c:	e00d      	b.n	800a34a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff f93a 	bl	80095a8 <HAL_UART_RxCpltCallback>
}
 800a334:	e009      	b.n	800a34a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	8b1b      	ldrh	r3, [r3, #24]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f042 0208 	orr.w	r2, r2, #8
 800a346:	b292      	uxth	r2, r2
 800a348:	831a      	strh	r2, [r3, #24]
}
 800a34a:	bf00      	nop
 800a34c:	3770      	adds	r7, #112	@ 0x70
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	40008000 	.word	0x40008000

0800a358 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b09c      	sub	sp, #112	@ 0x70
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a366:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a370:	2b22      	cmp	r3, #34	@ 0x22
 800a372:	f040 80be 	bne.w	800a4f2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a37c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a384:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a386:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a38a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a38e:	4013      	ands	r3, r2
 800a390:	b29a      	uxth	r2, r3
 800a392:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a394:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a39a:	1c9a      	adds	r2, r3, #2
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f040 80a3 	bne.w	800a506 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3c8:	e853 3f00 	ldrex	r3, [r3]
 800a3cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a3ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3de:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e6      	bne.n	800a3c0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	f023 0301 	bic.w	r3, r3, #1
 800a408:	663b      	str	r3, [r7, #96]	@ 0x60
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3308      	adds	r3, #8
 800a410:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a412:	643a      	str	r2, [r7, #64]	@ 0x40
 800a414:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e5      	bne.n	800a3f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2220      	movs	r2, #32
 800a42a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a34      	ldr	r2, [pc, #208]	@ (800a510 <UART_RxISR_16BIT+0x1b8>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d01f      	beq.n	800a484 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d018      	beq.n	800a484 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	e853 3f00 	ldrex	r3, [r3]
 800a45e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	461a      	mov	r2, r3
 800a46e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a472:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a478:	e841 2300 	strex	r3, r2, [r1]
 800a47c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1e6      	bne.n	800a452 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d12e      	bne.n	800a4ea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	e853 3f00 	ldrex	r3, [r3]
 800a49e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f023 0310 	bic.w	r3, r3, #16
 800a4a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4b0:	61bb      	str	r3, [r7, #24]
 800a4b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	6979      	ldr	r1, [r7, #20]
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e6      	bne.n	800a492 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	f003 0310 	and.w	r3, r3, #16
 800a4ce:	2b10      	cmp	r3, #16
 800a4d0:	d103      	bne.n	800a4da <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2210      	movs	r2, #16
 800a4d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff f874 	bl	80095d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4e8:	e00d      	b.n	800a506 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff f85c 	bl	80095a8 <HAL_UART_RxCpltCallback>
}
 800a4f0:	e009      	b.n	800a506 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	8b1b      	ldrh	r3, [r3, #24]
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0208 	orr.w	r2, r2, #8
 800a502:	b292      	uxth	r2, r2
 800a504:	831a      	strh	r2, [r3, #24]
}
 800a506:	bf00      	nop
 800a508:	3770      	adds	r7, #112	@ 0x70
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	40008000 	.word	0x40008000

0800a514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a53a:	2b84      	cmp	r3, #132	@ 0x84
 800a53c:	d005      	beq.n	800a54a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a53e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	4413      	add	r3, r2
 800a546:	3303      	adds	r3, #3
 800a548:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a54a:	68fb      	ldr	r3, [r7, #12]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a55e:	f3ef 8305 	mrs	r3, IPSR
 800a562:	607b      	str	r3, [r7, #4]
  return(result);
 800a564:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a566:	2b00      	cmp	r3, #0
 800a568:	bf14      	ite	ne
 800a56a:	2301      	movne	r3, #1
 800a56c:	2300      	moveq	r3, #0
 800a56e:	b2db      	uxtb	r3, r3
}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a580:	f001 faa0 	bl	800bac4 <vTaskStartScheduler>
  
  return osOK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	bd80      	pop	{r7, pc}

0800a58a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a58a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a58c:	b089      	sub	sp, #36	@ 0x24
 800a58e:	af04      	add	r7, sp, #16
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d020      	beq.n	800a5de <osThreadCreate+0x54>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d01c      	beq.n	800a5de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685c      	ldr	r4, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	691e      	ldr	r6, [r3, #16]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff ffb6 	bl	800a528 <makeFreeRtosPriority>
 800a5bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5c6:	9202      	str	r2, [sp, #8]
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	9100      	str	r1, [sp, #0]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	4632      	mov	r2, r6
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f001 f891 	bl	800b6fa <xTaskCreateStatic>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	e01c      	b.n	800a618 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685c      	ldr	r4, [r3, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff ff98 	bl	800a528 <makeFreeRtosPriority>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	f107 030c 	add.w	r3, r7, #12
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	9200      	str	r2, [sp, #0]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	4632      	mov	r2, r6
 800a606:	4629      	mov	r1, r5
 800a608:	4620      	mov	r0, r4
 800a60a:	f001 f8d6 	bl	800b7ba <xTaskCreate>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b01      	cmp	r3, #1
 800a612:	d001      	beq.n	800a618 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a614:	2300      	movs	r3, #0
 800a616:	e000      	b.n	800a61a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a618:	68fb      	ldr	r3, [r7, #12]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a622 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <osDelay+0x16>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	e000      	b.n	800a63a <osDelay+0x18>
 800a638:	2301      	movs	r3, #1
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 fa0c 	bl	800ba58 <vTaskDelay>
  
  return osOK;
 800a640:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af02      	add	r7, sp, #8
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	460b      	mov	r3, r1
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d013      	beq.n	800a68a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800a662:	7afb      	ldrb	r3, [r7, #11]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d101      	bne.n	800a66c <osTimerCreate+0x20>
 800a668:	2101      	movs	r1, #1
 800a66a:	e000      	b.n	800a66e <osTimerCreate+0x22>
 800a66c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800a676:	9201      	str	r2, [sp, #4]
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	460a      	mov	r2, r1
 800a67e:	2101      	movs	r1, #1
 800a680:	480b      	ldr	r0, [pc, #44]	@ (800a6b0 <osTimerCreate+0x64>)
 800a682:	f002 f950 	bl	800c926 <xTimerCreateStatic>
 800a686:	4603      	mov	r3, r0
 800a688:	e00e      	b.n	800a6a8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800a68a:	7afb      	ldrb	r3, [r7, #11]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d101      	bne.n	800a694 <osTimerCreate+0x48>
 800a690:	2201      	movs	r2, #1
 800a692:	e000      	b.n	800a696 <osTimerCreate+0x4a>
 800a694:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2101      	movs	r1, #1
 800a6a0:	4803      	ldr	r0, [pc, #12]	@ (800a6b0 <osTimerCreate+0x64>)
 800a6a2:	f002 f91f 	bl	800c8e4 <xTimerCreate>
 800a6a6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	08012ae8 	.word	0x08012ae8

0800a6b4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af02      	add	r7, sp, #8
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <osTimerStart+0x20>
    ticks = 1;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800a6d4:	f7ff ff40 	bl	800a558 <inHandlerMode>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01a      	beq.n	800a714 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800a6de:	f107 030c 	add.w	r3, r7, #12
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	9200      	str	r2, [sp, #0]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	2109      	movs	r1, #9
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f002 f998 	bl	800ca20 <xTimerGenericCommand>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d002      	beq.n	800a6fc <osTimerStart+0x48>
    {
      result = osErrorOS;
 800a6f6:	23ff      	movs	r3, #255	@ 0xff
 800a6f8:	617b      	str	r3, [r7, #20]
 800a6fa:	e018      	b.n	800a72e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d015      	beq.n	800a72e <osTimerStart+0x7a>
 800a702:	4b0d      	ldr	r3, [pc, #52]	@ (800a738 <osTimerStart+0x84>)
 800a704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	e00c      	b.n	800a72e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800a714:	2300      	movs	r3, #0
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	2300      	movs	r3, #0
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	2104      	movs	r1, #4
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f002 f97e 	bl	800ca20 <xTimerGenericCommand>
 800a724:	4603      	mov	r3, r0
 800a726:	2b01      	cmp	r3, #1
 800a728:	d001      	beq.n	800a72e <osTimerStart+0x7a>
      result = osErrorOS;
 800a72a:	23ff      	movs	r3, #255	@ 0xff
 800a72c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800a72e:	697b      	ldr	r3, [r7, #20]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	e000ed04 	.word	0xe000ed04

0800a73c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f103 0208 	add.w	r2, r3, #8
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f04f 32ff 	mov.w	r2, #4294967295
 800a754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f103 0208 	add.w	r2, r3, #8
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f103 0208 	add.w	r2, r3, #8
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a78a:	bf00      	nop
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a796:	b480      	push	{r7}
 800a798:	b085      	sub	sp, #20
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	689a      	ldr	r2, [r3, #8]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	601a      	str	r2, [r3, #0]
}
 800a7d2:	bf00      	nop
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b085      	sub	sp, #20
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f4:	d103      	bne.n	800a7fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	e00c      	b.n	800a818 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	3308      	adds	r3, #8
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e002      	b.n	800a80c <vListInsert+0x2e>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	429a      	cmp	r2, r3
 800a816:	d2f6      	bcs.n	800a806 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	601a      	str	r2, [r3, #0]
}
 800a844:	bf00      	nop
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6892      	ldr	r2, [r2, #8]
 800a866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	6852      	ldr	r2, [r2, #4]
 800a870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d103      	bne.n	800a884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	689a      	ldr	r2, [r3, #8]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10b      	bne.n	800a8d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	e7fd      	b.n	800a8cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a8d0:	f002 fcca 	bl	800d268 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8dc:	68f9      	ldr	r1, [r7, #12]
 800a8de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a900:	3b01      	subs	r3, #1
 800a902:	68f9      	ldr	r1, [r7, #12]
 800a904:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	441a      	add	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	22ff      	movs	r2, #255	@ 0xff
 800a914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	22ff      	movs	r2, #255	@ 0xff
 800a91c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d114      	bne.n	800a950 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d01a      	beq.n	800a964 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3310      	adds	r3, #16
 800a932:	4618      	mov	r0, r3
 800a934:	f001 fb62 	bl	800bffc <xTaskRemoveFromEventList>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d012      	beq.n	800a964 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a93e:	4b0d      	ldr	r3, [pc, #52]	@ (800a974 <xQueueGenericReset+0xd0>)
 800a940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	e009      	b.n	800a964 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3310      	adds	r3, #16
 800a954:	4618      	mov	r0, r3
 800a956:	f7ff fef1 	bl	800a73c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3324      	adds	r3, #36	@ 0x24
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff feec 	bl	800a73c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a964:	f002 fcb2 	bl	800d2cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a968:	2301      	movs	r3, #1
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08e      	sub	sp, #56	@ 0x38
 800a97c:	af02      	add	r7, sp, #8
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10b      	bne.n	800a9a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a99e:	bf00      	nop
 800a9a0:	bf00      	nop
 800a9a2:	e7fd      	b.n	800a9a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10b      	bne.n	800a9c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	e7fd      	b.n	800a9be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <xQueueGenericCreateStatic+0x56>
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <xQueueGenericCreateStatic+0x5a>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e000      	b.n	800a9d4 <xQueueGenericCreateStatic+0x5c>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10b      	bne.n	800a9f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	623b      	str	r3, [r7, #32]
}
 800a9ea:	bf00      	nop
 800a9ec:	bf00      	nop
 800a9ee:	e7fd      	b.n	800a9ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <xQueueGenericCreateStatic+0x84>
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d101      	bne.n	800aa00 <xQueueGenericCreateStatic+0x88>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e000      	b.n	800aa02 <xQueueGenericCreateStatic+0x8a>
 800aa00:	2300      	movs	r3, #0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10b      	bne.n	800aa1e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	61fb      	str	r3, [r7, #28]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa1e:	2348      	movs	r3, #72	@ 0x48
 800aa20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2b48      	cmp	r3, #72	@ 0x48
 800aa26:	d00b      	beq.n	800aa40 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	61bb      	str	r3, [r7, #24]
}
 800aa3a:	bf00      	nop
 800aa3c:	bf00      	nop
 800aa3e:	e7fd      	b.n	800aa3c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00d      	beq.n	800aa68 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aa58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	68b9      	ldr	r1, [r7, #8]
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f000 f840 	bl	800aae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3730      	adds	r7, #48	@ 0x30
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b08a      	sub	sp, #40	@ 0x28
 800aa76:	af02      	add	r7, sp, #8
 800aa78:	60f8      	str	r0, [r7, #12]
 800aa7a:	60b9      	str	r1, [r7, #8]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10b      	bne.n	800aa9e <xQueueGenericCreate+0x2c>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	613b      	str	r3, [r7, #16]
}
 800aa98:	bf00      	nop
 800aa9a:	bf00      	nop
 800aa9c:	e7fd      	b.n	800aa9a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	fb02 f303 	mul.w	r3, r2, r3
 800aaa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	3348      	adds	r3, #72	@ 0x48
 800aaac:	4618      	mov	r0, r3
 800aaae:	f002 fcfd 	bl	800d4ac <pvPortMalloc>
 800aab2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d011      	beq.n	800aade <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	3348      	adds	r3, #72	@ 0x48
 800aac2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aacc:	79fa      	ldrb	r2, [r7, #7]
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	4613      	mov	r3, r2
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	68b9      	ldr	r1, [r7, #8]
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 f805 	bl	800aae8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aade:	69bb      	ldr	r3, [r7, #24]
	}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3720      	adds	r7, #32
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d103      	bne.n	800ab04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	e002      	b.n	800ab0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab16:	2101      	movs	r1, #1
 800ab18:	69b8      	ldr	r0, [r7, #24]
 800ab1a:	f7ff fec3 	bl	800a8a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab1e:	bf00      	nop
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08e      	sub	sp, #56	@ 0x38
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab36:	2300      	movs	r3, #0
 800ab38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10b      	bne.n	800ab5c <xQueueGenericSend+0x34>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab56:	bf00      	nop
 800ab58:	bf00      	nop
 800ab5a:	e7fd      	b.n	800ab58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <xQueueGenericSend+0x42>
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <xQueueGenericSend+0x46>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e000      	b.n	800ab70 <xQueueGenericSend+0x48>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10b      	bne.n	800ab8c <xQueueGenericSend+0x64>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab86:	bf00      	nop
 800ab88:	bf00      	nop
 800ab8a:	e7fd      	b.n	800ab88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d103      	bne.n	800ab9a <xQueueGenericSend+0x72>
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d101      	bne.n	800ab9e <xQueueGenericSend+0x76>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <xQueueGenericSend+0x78>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10b      	bne.n	800abbc <xQueueGenericSend+0x94>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	623b      	str	r3, [r7, #32]
}
 800abb6:	bf00      	nop
 800abb8:	bf00      	nop
 800abba:	e7fd      	b.n	800abb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abbc:	f001 fbf4 	bl	800c3a8 <xTaskGetSchedulerState>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d102      	bne.n	800abcc <xQueueGenericSend+0xa4>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <xQueueGenericSend+0xa8>
 800abcc:	2301      	movs	r3, #1
 800abce:	e000      	b.n	800abd2 <xQueueGenericSend+0xaa>
 800abd0:	2300      	movs	r3, #0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10b      	bne.n	800abee <xQueueGenericSend+0xc6>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	61fb      	str	r3, [r7, #28]
}
 800abe8:	bf00      	nop
 800abea:	bf00      	nop
 800abec:	e7fd      	b.n	800abea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abee:	f002 fb3b 	bl	800d268 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d302      	bcc.n	800ac04 <xQueueGenericSend+0xdc>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d129      	bne.n	800ac58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	68b9      	ldr	r1, [r7, #8]
 800ac08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac0a:	f000 fa0f 	bl	800b02c <prvCopyDataToQueue>
 800ac0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d010      	beq.n	800ac3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1a:	3324      	adds	r3, #36	@ 0x24
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 f9ed 	bl	800bffc <xTaskRemoveFromEventList>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d013      	beq.n	800ac50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac28:	4b3f      	ldr	r3, [pc, #252]	@ (800ad28 <xQueueGenericSend+0x200>)
 800ac2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	e00a      	b.n	800ac50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d007      	beq.n	800ac50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac40:	4b39      	ldr	r3, [pc, #228]	@ (800ad28 <xQueueGenericSend+0x200>)
 800ac42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac50:	f002 fb3c 	bl	800d2cc <vPortExitCritical>
				return pdPASS;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e063      	b.n	800ad20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d103      	bne.n	800ac66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac5e:	f002 fb35 	bl	800d2cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e05c      	b.n	800ad20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d106      	bne.n	800ac7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac6c:	f107 0314 	add.w	r3, r7, #20
 800ac70:	4618      	mov	r0, r3
 800ac72:	f001 fa27 	bl	800c0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac76:	2301      	movs	r3, #1
 800ac78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac7a:	f002 fb27 	bl	800d2cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac7e:	f000 ff91 	bl	800bba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac82:	f002 faf1 	bl	800d268 <vPortEnterCritical>
 800ac86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac8c:	b25b      	sxtb	r3, r3
 800ac8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac92:	d103      	bne.n	800ac9c <xQueueGenericSend+0x174>
 800ac94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aca2:	b25b      	sxtb	r3, r3
 800aca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca8:	d103      	bne.n	800acb2 <xQueueGenericSend+0x18a>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acb2:	f002 fb0b 	bl	800d2cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acb6:	1d3a      	adds	r2, r7, #4
 800acb8:	f107 0314 	add.w	r3, r7, #20
 800acbc:	4611      	mov	r1, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 fa16 	bl	800c0f0 <xTaskCheckForTimeOut>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d124      	bne.n	800ad14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800accc:	f000 faa6 	bl	800b21c <prvIsQueueFull>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d018      	beq.n	800ad08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd8:	3310      	adds	r3, #16
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f001 f93a 	bl	800bf58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ace4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ace6:	f000 fa31 	bl	800b14c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800acea:	f000 ff69 	bl	800bbc0 <xTaskResumeAll>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f47f af7c 	bne.w	800abee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800acf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ad28 <xQueueGenericSend+0x200>)
 800acf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	e772      	b.n	800abee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad0a:	f000 fa1f 	bl	800b14c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad0e:	f000 ff57 	bl	800bbc0 <xTaskResumeAll>
 800ad12:	e76c      	b.n	800abee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad16:	f000 fa19 	bl	800b14c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad1a:	f000 ff51 	bl	800bbc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3738      	adds	r7, #56	@ 0x38
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b090      	sub	sp, #64	@ 0x40
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10b      	bne.n	800ad5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad56:	bf00      	nop
 800ad58:	bf00      	nop
 800ad5a:	e7fd      	b.n	800ad58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d103      	bne.n	800ad6a <xQueueGenericSendFromISR+0x3e>
 800ad62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <xQueueGenericSendFromISR+0x42>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <xQueueGenericSendFromISR+0x44>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10b      	bne.n	800ad8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	e7fd      	b.n	800ad88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d103      	bne.n	800ad9a <xQueueGenericSendFromISR+0x6e>
 800ad92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d101      	bne.n	800ad9e <xQueueGenericSendFromISR+0x72>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e000      	b.n	800ada0 <xQueueGenericSendFromISR+0x74>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10b      	bne.n	800adbc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	623b      	str	r3, [r7, #32]
}
 800adb6:	bf00      	nop
 800adb8:	bf00      	nop
 800adba:	e7fd      	b.n	800adb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adbc:	f002 fb34 	bl	800d428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800adc0:	f3ef 8211 	mrs	r2, BASEPRI
 800adc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	61fa      	str	r2, [r7, #28]
 800add6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800add8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800addc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ade0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d302      	bcc.n	800adee <xQueueGenericSendFromISR+0xc2>
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d12f      	bne.n	800ae4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800adee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	68b9      	ldr	r1, [r7, #8]
 800ae02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ae04:	f000 f912 	bl	800b02c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ae0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae10:	d112      	bne.n	800ae38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d016      	beq.n	800ae48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1c:	3324      	adds	r3, #36	@ 0x24
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f001 f8ec 	bl	800bffc <xTaskRemoveFromEventList>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00e      	beq.n	800ae48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	e007      	b.n	800ae48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	b25a      	sxtb	r2, r3
 800ae42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ae4c:	e001      	b.n	800ae52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3740      	adds	r7, #64	@ 0x40
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08c      	sub	sp, #48	@ 0x30
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae74:	2300      	movs	r3, #0
 800ae76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10b      	bne.n	800ae9a <xQueueReceive+0x32>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	623b      	str	r3, [r7, #32]
}
 800ae94:	bf00      	nop
 800ae96:	bf00      	nop
 800ae98:	e7fd      	b.n	800ae96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d103      	bne.n	800aea8 <xQueueReceive+0x40>
 800aea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <xQueueReceive+0x44>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e000      	b.n	800aeae <xQueueReceive+0x46>
 800aeac:	2300      	movs	r3, #0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10b      	bne.n	800aeca <xQueueReceive+0x62>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	61fb      	str	r3, [r7, #28]
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop
 800aec8:	e7fd      	b.n	800aec6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeca:	f001 fa6d 	bl	800c3a8 <xTaskGetSchedulerState>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d102      	bne.n	800aeda <xQueueReceive+0x72>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <xQueueReceive+0x76>
 800aeda:	2301      	movs	r3, #1
 800aedc:	e000      	b.n	800aee0 <xQueueReceive+0x78>
 800aede:	2300      	movs	r3, #0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10b      	bne.n	800aefc <xQueueReceive+0x94>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	61bb      	str	r3, [r7, #24]
}
 800aef6:	bf00      	nop
 800aef8:	bf00      	nop
 800aefa:	e7fd      	b.n	800aef8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aefc:	f002 f9b4 	bl	800d268 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01f      	beq.n	800af4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af0c:	68b9      	ldr	r1, [r7, #8]
 800af0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af10:	f000 f8f6 	bl	800b100 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	1e5a      	subs	r2, r3, #1
 800af18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00f      	beq.n	800af44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af26:	3310      	adds	r3, #16
 800af28:	4618      	mov	r0, r3
 800af2a:	f001 f867 	bl	800bffc <xTaskRemoveFromEventList>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af34:	4b3c      	ldr	r3, [pc, #240]	@ (800b028 <xQueueReceive+0x1c0>)
 800af36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af44:	f002 f9c2 	bl	800d2cc <vPortExitCritical>
				return pdPASS;
 800af48:	2301      	movs	r3, #1
 800af4a:	e069      	b.n	800b020 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d103      	bne.n	800af5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af52:	f002 f9bb 	bl	800d2cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af56:	2300      	movs	r3, #0
 800af58:	e062      	b.n	800b020 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d106      	bne.n	800af6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af60:	f107 0310 	add.w	r3, r7, #16
 800af64:	4618      	mov	r0, r3
 800af66:	f001 f8ad 	bl	800c0c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af6a:	2301      	movs	r3, #1
 800af6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af6e:	f002 f9ad 	bl	800d2cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af72:	f000 fe17 	bl	800bba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af76:	f002 f977 	bl	800d268 <vPortEnterCritical>
 800af7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af80:	b25b      	sxtb	r3, r3
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af86:	d103      	bne.n	800af90 <xQueueReceive+0x128>
 800af88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af96:	b25b      	sxtb	r3, r3
 800af98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9c:	d103      	bne.n	800afa6 <xQueueReceive+0x13e>
 800af9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afa6:	f002 f991 	bl	800d2cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afaa:	1d3a      	adds	r2, r7, #4
 800afac:	f107 0310 	add.w	r3, r7, #16
 800afb0:	4611      	mov	r1, r2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 f89c 	bl	800c0f0 <xTaskCheckForTimeOut>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d123      	bne.n	800b006 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afc0:	f000 f916 	bl	800b1f0 <prvIsQueueEmpty>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d017      	beq.n	800affa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afcc:	3324      	adds	r3, #36	@ 0x24
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 ffc0 	bl	800bf58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afda:	f000 f8b7 	bl	800b14c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afde:	f000 fdef 	bl	800bbc0 <xTaskResumeAll>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d189      	bne.n	800aefc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800afe8:	4b0f      	ldr	r3, [pc, #60]	@ (800b028 <xQueueReceive+0x1c0>)
 800afea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	e780      	b.n	800aefc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800affa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800affc:	f000 f8a6 	bl	800b14c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b000:	f000 fdde 	bl	800bbc0 <xTaskResumeAll>
 800b004:	e77a      	b.n	800aefc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b008:	f000 f8a0 	bl	800b14c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b00c:	f000 fdd8 	bl	800bbc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b012:	f000 f8ed 	bl	800b1f0 <prvIsQueueEmpty>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f43f af6f 	beq.w	800aefc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b01e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b020:	4618      	mov	r0, r3
 800b022:	3730      	adds	r7, #48	@ 0x30
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	e000ed04 	.word	0xe000ed04

0800b02c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b040:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10d      	bne.n	800b066 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d14d      	bne.n	800b0ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	4618      	mov	r0, r3
 800b058:	f001 f9c4 	bl	800c3e4 <xTaskPriorityDisinherit>
 800b05c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	609a      	str	r2, [r3, #8]
 800b064:	e043      	b.n	800b0ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d119      	bne.n	800b0a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6858      	ldr	r0, [r3, #4]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b074:	461a      	mov	r2, r3
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	f004 fc2f 	bl	800f8da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b084:	441a      	add	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	429a      	cmp	r2, r3
 800b094:	d32b      	bcc.n	800b0ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	605a      	str	r2, [r3, #4]
 800b09e:	e026      	b.n	800b0ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	68d8      	ldr	r0, [r3, #12]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	68b9      	ldr	r1, [r7, #8]
 800b0ac:	f004 fc15 	bl	800f8da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	68da      	ldr	r2, [r3, #12]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b8:	425b      	negs	r3, r3
 800b0ba:	441a      	add	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	68da      	ldr	r2, [r3, #12]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d207      	bcs.n	800b0dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d4:	425b      	negs	r3, r3
 800b0d6:	441a      	add	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d105      	bne.n	800b0ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b0f6:	697b      	ldr	r3, [r7, #20]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d018      	beq.n	800b144 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b11a:	441a      	add	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68da      	ldr	r2, [r3, #12]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d303      	bcc.n	800b134 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68d9      	ldr	r1, [r3, #12]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b13c:	461a      	mov	r2, r3
 800b13e:	6838      	ldr	r0, [r7, #0]
 800b140:	f004 fbcb 	bl	800f8da <memcpy>
	}
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b154:	f002 f888 	bl	800d268 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b15e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b160:	e011      	b.n	800b186 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b166:	2b00      	cmp	r3, #0
 800b168:	d012      	beq.n	800b190 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3324      	adds	r3, #36	@ 0x24
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 ff44 	bl	800bffc <xTaskRemoveFromEventList>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b17a:	f001 f81d 	bl	800c1b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
 800b180:	3b01      	subs	r3, #1
 800b182:	b2db      	uxtb	r3, r3
 800b184:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dce9      	bgt.n	800b162 <prvUnlockQueue+0x16>
 800b18e:	e000      	b.n	800b192 <prvUnlockQueue+0x46>
					break;
 800b190:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	22ff      	movs	r2, #255	@ 0xff
 800b196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b19a:	f002 f897 	bl	800d2cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b19e:	f002 f863 	bl	800d268 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1aa:	e011      	b.n	800b1d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d012      	beq.n	800b1da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3310      	adds	r3, #16
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 ff1f 	bl	800bffc <xTaskRemoveFromEventList>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1c4:	f000 fff8 	bl	800c1b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1c8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dce9      	bgt.n	800b1ac <prvUnlockQueue+0x60>
 800b1d8:	e000      	b.n	800b1dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	22ff      	movs	r2, #255	@ 0xff
 800b1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b1e4:	f002 f872 	bl	800d2cc <vPortExitCritical>
}
 800b1e8:	bf00      	nop
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1f8:	f002 f836 	bl	800d268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b204:	2301      	movs	r3, #1
 800b206:	60fb      	str	r3, [r7, #12]
 800b208:	e001      	b.n	800b20e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b20e:	f002 f85d 	bl	800d2cc <vPortExitCritical>

	return xReturn;
 800b212:	68fb      	ldr	r3, [r7, #12]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b224:	f002 f820 	bl	800d268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b230:	429a      	cmp	r2, r3
 800b232:	d102      	bne.n	800b23a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b234:	2301      	movs	r3, #1
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	e001      	b.n	800b23e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b23e:	f002 f845 	bl	800d2cc <vPortExitCritical>

	return xReturn;
 800b242:	68fb      	ldr	r3, [r7, #12]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	e014      	b.n	800b286 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b25c:	4a0f      	ldr	r2, [pc, #60]	@ (800b29c <vQueueAddToRegistry+0x50>)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10b      	bne.n	800b280 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b268:	490c      	ldr	r1, [pc, #48]	@ (800b29c <vQueueAddToRegistry+0x50>)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b272:	4a0a      	ldr	r2, [pc, #40]	@ (800b29c <vQueueAddToRegistry+0x50>)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	4413      	add	r3, r2
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b27e:	e006      	b.n	800b28e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3301      	adds	r3, #1
 800b284:	60fb      	str	r3, [r7, #12]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b07      	cmp	r3, #7
 800b28a:	d9e7      	bls.n	800b25c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b28c:	bf00      	nop
 800b28e:	bf00      	nop
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	20000fb0 	.word	0x20000fb0

0800b2a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2b0:	f001 ffda 	bl	800d268 <vPortEnterCritical>
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2ba:	b25b      	sxtb	r3, r3
 800b2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c0:	d103      	bne.n	800b2ca <vQueueWaitForMessageRestricted+0x2a>
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2d0:	b25b      	sxtb	r3, r3
 800b2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d6:	d103      	bne.n	800b2e0 <vQueueWaitForMessageRestricted+0x40>
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2e0:	f001 fff4 	bl	800d2cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d106      	bne.n	800b2fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	3324      	adds	r3, #36	@ 0x24
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 fe55 	bl	800bfa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2fa:	6978      	ldr	r0, [r7, #20]
 800b2fc:	f7ff ff26 	bl	800b14c <prvUnlockQueue>
	}
 800b300:	bf00      	nop
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08c      	sub	sp, #48	@ 0x30
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d111      	bne.n	800b33e <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800b31a:	2301      	movs	r3, #1
 800b31c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b04      	cmp	r3, #4
 800b324:	d81d      	bhi.n	800b362 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	61fb      	str	r3, [r7, #28]
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	e7fd      	b.n	800b33a <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10b      	bne.n	800b362 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	61bb      	str	r3, [r7, #24]
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	e7fd      	b.n	800b35e <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	429a      	cmp	r2, r3
 800b368:	d90b      	bls.n	800b382 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	617b      	str	r3, [r7, #20]
}
 800b37c:	bf00      	nop
 800b37e:	bf00      	nop
 800b380:	e7fd      	b.n	800b37e <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800b388:	2301      	movs	r3, #1
 800b38a:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3301      	adds	r3, #1
 800b390:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3320      	adds	r3, #32
 800b396:	4618      	mov	r0, r3
 800b398:	f002 f888 	bl	800d4ac <pvPortMalloc>
 800b39c:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00a      	beq.n	800b3ba <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	f103 0120 	add.w	r1, r3, #32
 800b3aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	6a38      	ldr	r0, [r7, #32]
 800b3b6:	f000 f96c 	bl	800b692 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
	}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3728      	adds	r7, #40	@ 0x28
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08e      	sub	sp, #56	@ 0x38
 800b3c8:	af02      	add	r7, sp, #8
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
 800b3d0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10b      	bne.n	800b3f8 <xStreamBufferReceive+0x34>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	61fb      	str	r3, [r7, #28]
}
 800b3f2:	bf00      	nop
 800b3f4:	bf00      	nop
 800b3f6:	e7fd      	b.n	800b3f4 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10b      	bne.n	800b416 <xStreamBufferReceive+0x52>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	61bb      	str	r3, [r7, #24]
}
 800b410:	bf00      	nop
 800b412:	bf00      	nop
 800b414:	e7fd      	b.n	800b412 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	7f1b      	ldrb	r3, [r3, #28]
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800b422:	2304      	movs	r3, #4
 800b424:	627b      	str	r3, [r7, #36]	@ 0x24
 800b426:	e001      	b.n	800b42c <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d035      	beq.n	800b49e <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800b432:	f001 ff19 	bl	800d268 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b436:	6a38      	ldr	r0, [r7, #32]
 800b438:	f000 f90b 	bl	800b652 <prvBytesInBuffer>
 800b43c:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800b43e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b442:	429a      	cmp	r2, r3
 800b444:	d817      	bhi.n	800b476 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800b446:	2000      	movs	r0, #0
 800b448:	f001 f976 	bl	800c738 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <xStreamBufferReceive+0xa8>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	617b      	str	r3, [r7, #20]
}
 800b466:	bf00      	nop
 800b468:	bf00      	nop
 800b46a:	e7fd      	b.n	800b468 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800b46c:	f000 ff8c 	bl	800c388 <xTaskGetCurrentTaskHandle>
 800b470:	4602      	mov	r2, r0
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b476:	f001 ff29 	bl	800d2cc <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800b47a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47e:	429a      	cmp	r2, r3
 800b480:	d811      	bhi.n	800b4a6 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2200      	movs	r2, #0
 800b486:	2100      	movs	r1, #0
 800b488:	2000      	movs	r0, #0
 800b48a:	f001 f833 	bl	800c4f4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	2200      	movs	r2, #0
 800b492:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b494:	6a38      	ldr	r0, [r7, #32]
 800b496:	f000 f8dc 	bl	800b652 <prvBytesInBuffer>
 800b49a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b49c:	e003      	b.n	800b4a6 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b49e:	6a38      	ldr	r0, [r7, #32]
 800b4a0:	f000 f8d7 	bl	800b652 <prvBytesInBuffer>
 800b4a4:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800b4a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d91d      	bls.n	800b4ea <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	6a38      	ldr	r0, [r7, #32]
 800b4ba:	f000 f81b 	bl	800b4f4 <prvReadMessageFromBuffer>
 800b4be:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800b4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d011      	beq.n	800b4ea <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800b4c6:	f000 fb6d 	bl	800bba4 <vTaskSuspendAll>
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	695b      	ldr	r3, [r3, #20]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d009      	beq.n	800b4e6 <xStreamBufferReceive+0x122>
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	6958      	ldr	r0, [r3, #20]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2100      	movs	r1, #0
 800b4dc:	f001 f86a 	bl	800c5b4 <xTaskGenericNotify>
 800b4e0:	6a3b      	ldr	r3, [r7, #32]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	615a      	str	r2, [r3, #20]
 800b4e6:	f000 fb6b 	bl	800bbc0 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800b4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3730      	adds	r7, #48	@ 0x30
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b088      	sub	sp, #32
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800b502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b504:	2b00      	cmp	r3, #0
 800b506:	d019      	beq.n	800b53c <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800b50e:	f107 0110 	add.w	r1, r7, #16
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f000 f81e 	bl	800b558 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800b528:	69fa      	ldr	r2, [r7, #28]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d907      	bls.n	800b540 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	69ba      	ldr	r2, [r7, #24]
 800b534:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	61fb      	str	r3, [r7, #28]
 800b53a:	e001      	b.n	800b540 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	69fa      	ldr	r2, [r7, #28]
 800b544:	68b9      	ldr	r1, [r7, #8]
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f000 f806 	bl	800b558 <prvReadBytesFromBuffer>
 800b54c:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800b54e:	697b      	ldr	r3, [r7, #20]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3720      	adds	r7, #32
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <prvReadBytesFromBuffer>:
	return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	@ 0x28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	4293      	cmp	r3, r2
 800b56c:	bf28      	it	cs
 800b56e:	4613      	movcs	r3, r2
 800b570:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800b572:	6a3b      	ldr	r3, [r7, #32]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d067      	beq.n	800b648 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	689a      	ldr	r2, [r3, #8]
 800b582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	6a3a      	ldr	r2, [r7, #32]
 800b588:	4293      	cmp	r3, r2
 800b58a:	bf28      	it	cs
 800b58c:	4613      	movcs	r3, r2
 800b58e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800b590:	69fa      	ldr	r2, [r7, #28]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	429a      	cmp	r2, r3
 800b596:	d90b      	bls.n	800b5b0 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	61bb      	str	r3, [r7, #24]
}
 800b5aa:	bf00      	nop
 800b5ac:	bf00      	nop
 800b5ae:	e7fd      	b.n	800b5ac <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800b5b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	441a      	add	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d90b      	bls.n	800b5d6 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	617b      	str	r3, [r7, #20]
}
 800b5d0:	bf00      	nop
 800b5d2:	bf00      	nop
 800b5d4:	e7fd      	b.n	800b5d2 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	699a      	ldr	r2, [r3, #24]
 800b5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5dc:	4413      	add	r3, r2
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	68b8      	ldr	r0, [r7, #8]
 800b5e4:	f004 f979 	bl	800f8da <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800b5e8:	6a3a      	ldr	r2, [r7, #32]
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d91a      	bls.n	800b626 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800b5f0:	6a3a      	ldr	r2, [r7, #32]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d90b      	bls.n	800b610 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	613b      	str	r3, [r7, #16]
}
 800b60a:	bf00      	nop
 800b60c:	bf00      	nop
 800b60e:	e7fd      	b.n	800b60c <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	18d0      	adds	r0, r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6999      	ldr	r1, [r3, #24]
 800b61a:	6a3a      	ldr	r2, [r7, #32]
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	461a      	mov	r2, r3
 800b622:	f004 f95a 	bl	800f8da <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800b626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	4413      	add	r3, r2
 800b62c:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b634:	429a      	cmp	r2, r3
 800b636:	d304      	bcc.n	800b642 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b646:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b648:	6a3b      	ldr	r3, [r7, #32]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3728      	adds	r7, #40	@ 0x28
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800b652:	b480      	push	{r7}
 800b654:	b085      	sub	sp, #20
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	689a      	ldr	r2, [r3, #8]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	4413      	add	r3, r2
 800b664:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	429a      	cmp	r2, r3
 800b678:	d304      	bcc.n	800b684 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b684:	68fb      	ldr	r3, [r7, #12]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b086      	sub	sp, #24
 800b696:	af00      	add	r7, sp, #0
 800b698:	60f8      	str	r0, [r7, #12]
 800b69a:	60b9      	str	r1, [r7, #8]
 800b69c:	607a      	str	r2, [r7, #4]
 800b69e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800b6a0:	2355      	movs	r3, #85	@ 0x55
 800b6a2:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	6979      	ldr	r1, [r7, #20]
 800b6a8:	68b8      	ldr	r0, [r7, #8]
 800b6aa:	f004 f816 	bl	800f6da <memset>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d00b      	beq.n	800b6ce <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	613b      	str	r3, [r7, #16]
}
 800b6c8:	bf00      	nop
 800b6ca:	bf00      	nop
 800b6cc:	e7fd      	b.n	800b6ca <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f004 f801 	bl	800f6da <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b6f0:	771a      	strb	r2, [r3, #28]
}
 800b6f2:	bf00      	nop
 800b6f4:	3718      	adds	r7, #24
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b08e      	sub	sp, #56	@ 0x38
 800b6fe:	af04      	add	r7, sp, #16
 800b700:	60f8      	str	r0, [r7, #12]
 800b702:	60b9      	str	r1, [r7, #8]
 800b704:	607a      	str	r2, [r7, #4]
 800b706:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10b      	bne.n	800b726 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	623b      	str	r3, [r7, #32]
}
 800b720:	bf00      	nop
 800b722:	bf00      	nop
 800b724:	e7fd      	b.n	800b722 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10b      	bne.n	800b744 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	61fb      	str	r3, [r7, #28]
}
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	e7fd      	b.n	800b740 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b744:	23a0      	movs	r3, #160	@ 0xa0
 800b746:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	2ba0      	cmp	r3, #160	@ 0xa0
 800b74c:	d00b      	beq.n	800b766 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	61bb      	str	r3, [r7, #24]
}
 800b760:	bf00      	nop
 800b762:	bf00      	nop
 800b764:	e7fd      	b.n	800b762 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b766:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d01e      	beq.n	800b7ac <xTaskCreateStatic+0xb2>
 800b76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b770:	2b00      	cmp	r3, #0
 800b772:	d01b      	beq.n	800b7ac <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b776:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b77c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	2202      	movs	r2, #2
 800b782:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b786:	2300      	movs	r3, #0
 800b788:	9303      	str	r3, [sp, #12]
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78c:	9302      	str	r3, [sp, #8]
 800b78e:	f107 0314 	add.w	r3, r7, #20
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	68b9      	ldr	r1, [r7, #8]
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 f850 	bl	800b844 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7a6:	f000 f8ed 	bl	800b984 <prvAddNewTaskToReadyList>
 800b7aa:	e001      	b.n	800b7b0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b7b0:	697b      	ldr	r3, [r7, #20]
	}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3728      	adds	r7, #40	@ 0x28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b08c      	sub	sp, #48	@ 0x30
 800b7be:	af04      	add	r7, sp, #16
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	603b      	str	r3, [r7, #0]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b7ca:	88fb      	ldrh	r3, [r7, #6]
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f001 fe6c 	bl	800d4ac <pvPortMalloc>
 800b7d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00e      	beq.n	800b7fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b7dc:	20a0      	movs	r0, #160	@ 0xa0
 800b7de:	f001 fe65 	bl	800d4ac <pvPortMalloc>
 800b7e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	631a      	str	r2, [r3, #48]	@ 0x30
 800b7f0:	e005      	b.n	800b7fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7f2:	6978      	ldr	r0, [r7, #20]
 800b7f4:	f001 ff28 	bl	800d648 <vPortFree>
 800b7f8:	e001      	b.n	800b7fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d017      	beq.n	800b834 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b80c:	88fa      	ldrh	r2, [r7, #6]
 800b80e:	2300      	movs	r3, #0
 800b810:	9303      	str	r3, [sp, #12]
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	9302      	str	r3, [sp, #8]
 800b816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	68b9      	ldr	r1, [r7, #8]
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 f80e 	bl	800b844 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b828:	69f8      	ldr	r0, [r7, #28]
 800b82a:	f000 f8ab 	bl	800b984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b82e:	2301      	movs	r3, #1
 800b830:	61bb      	str	r3, [r7, #24]
 800b832:	e002      	b.n	800b83a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b834:	f04f 33ff 	mov.w	r3, #4294967295
 800b838:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b83a:	69bb      	ldr	r3, [r7, #24]
	}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3720      	adds	r7, #32
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b85c:	3b01      	subs	r3, #1
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	4413      	add	r3, r2
 800b862:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	f023 0307 	bic.w	r3, r3, #7
 800b86a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	f003 0307 	and.w	r3, r3, #7
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	617b      	str	r3, [r7, #20]
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	e7fd      	b.n	800b88a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01f      	beq.n	800b8d4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b894:	2300      	movs	r3, #0
 800b896:	61fb      	str	r3, [r7, #28]
 800b898:	e012      	b.n	800b8c0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	4413      	add	r3, r2
 800b8a0:	7819      	ldrb	r1, [r3, #0]
 800b8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	3334      	adds	r3, #52	@ 0x34
 800b8aa:	460a      	mov	r2, r1
 800b8ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d006      	beq.n	800b8c8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	61fb      	str	r3, [r7, #28]
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	2b0f      	cmp	r3, #15
 800b8c4:	d9e9      	bls.n	800b89a <prvInitialiseNewTask+0x56>
 800b8c6:	e000      	b.n	800b8ca <prvInitialiseNewTask+0x86>
			{
				break;
 800b8c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b8d2:	e003      	b.n	800b8dc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	2b06      	cmp	r3, #6
 800b8e0:	d901      	bls.n	800b8e6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b8e2:	2306      	movs	r3, #6
 800b8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8f0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fe ff3d 	bl	800a77c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b904:	3318      	adds	r3, #24
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe ff38 	bl	800a77c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b910:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	f1c3 0207 	rsb	r2, r3, #7
 800b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b920:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b924:	2200      	movs	r2, #0
 800b926:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b934:	334c      	adds	r3, #76	@ 0x4c
 800b936:	224c      	movs	r2, #76	@ 0x4c
 800b938:	2100      	movs	r1, #0
 800b93a:	4618      	mov	r0, r3
 800b93c:	f003 fecd 	bl	800f6da <memset>
 800b940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b942:	4a0d      	ldr	r2, [pc, #52]	@ (800b978 <prvInitialiseNewTask+0x134>)
 800b944:	651a      	str	r2, [r3, #80]	@ 0x50
 800b946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b948:	4a0c      	ldr	r2, [pc, #48]	@ (800b97c <prvInitialiseNewTask+0x138>)
 800b94a:	655a      	str	r2, [r3, #84]	@ 0x54
 800b94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94e:	4a0c      	ldr	r2, [pc, #48]	@ (800b980 <prvInitialiseNewTask+0x13c>)
 800b950:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	68f9      	ldr	r1, [r7, #12]
 800b956:	69b8      	ldr	r0, [r7, #24]
 800b958:	f001 fb56 	bl	800d008 <pxPortInitialiseStack>
 800b95c:	4602      	mov	r2, r0
 800b95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b960:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b96c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b96e:	bf00      	nop
 800b970:	3720      	adds	r7, #32
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20006068 	.word	0x20006068
 800b97c:	200060d0 	.word	0x200060d0
 800b980:	20006138 	.word	0x20006138

0800b984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b98c:	f001 fc6c 	bl	800d268 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b990:	4b2a      	ldr	r3, [pc, #168]	@ (800ba3c <prvAddNewTaskToReadyList+0xb8>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	3301      	adds	r3, #1
 800b996:	4a29      	ldr	r2, [pc, #164]	@ (800ba3c <prvAddNewTaskToReadyList+0xb8>)
 800b998:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b99a:	4b29      	ldr	r3, [pc, #164]	@ (800ba40 <prvAddNewTaskToReadyList+0xbc>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d109      	bne.n	800b9b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9a2:	4a27      	ldr	r2, [pc, #156]	@ (800ba40 <prvAddNewTaskToReadyList+0xbc>)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9a8:	4b24      	ldr	r3, [pc, #144]	@ (800ba3c <prvAddNewTaskToReadyList+0xb8>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d110      	bne.n	800b9d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9b0:	f000 fc26 	bl	800c200 <prvInitialiseTaskLists>
 800b9b4:	e00d      	b.n	800b9d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9b6:	4b23      	ldr	r3, [pc, #140]	@ (800ba44 <prvAddNewTaskToReadyList+0xc0>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d109      	bne.n	800b9d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9be:	4b20      	ldr	r3, [pc, #128]	@ (800ba40 <prvAddNewTaskToReadyList+0xbc>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d802      	bhi.n	800b9d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9cc:	4a1c      	ldr	r2, [pc, #112]	@ (800ba40 <prvAddNewTaskToReadyList+0xbc>)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba48 <prvAddNewTaskToReadyList+0xc4>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	4a1b      	ldr	r2, [pc, #108]	@ (800ba48 <prvAddNewTaskToReadyList+0xc4>)
 800b9da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	409a      	lsls	r2, r3
 800b9e4:	4b19      	ldr	r3, [pc, #100]	@ (800ba4c <prvAddNewTaskToReadyList+0xc8>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	4a18      	ldr	r2, [pc, #96]	@ (800ba4c <prvAddNewTaskToReadyList+0xc8>)
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4a15      	ldr	r2, [pc, #84]	@ (800ba50 <prvAddNewTaskToReadyList+0xcc>)
 800b9fc:	441a      	add	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3304      	adds	r3, #4
 800ba02:	4619      	mov	r1, r3
 800ba04:	4610      	mov	r0, r2
 800ba06:	f7fe fec6 	bl	800a796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba0a:	f001 fc5f 	bl	800d2cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba44 <prvAddNewTaskToReadyList+0xc0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00e      	beq.n	800ba34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba16:	4b0a      	ldr	r3, [pc, #40]	@ (800ba40 <prvAddNewTaskToReadyList+0xbc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d207      	bcs.n	800ba34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba24:	4b0b      	ldr	r3, [pc, #44]	@ (800ba54 <prvAddNewTaskToReadyList+0xd0>)
 800ba26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	200010f0 	.word	0x200010f0
 800ba40:	20000ff0 	.word	0x20000ff0
 800ba44:	200010fc 	.word	0x200010fc
 800ba48:	2000110c 	.word	0x2000110c
 800ba4c:	200010f8 	.word	0x200010f8
 800ba50:	20000ff4 	.word	0x20000ff4
 800ba54:	e000ed04 	.word	0xe000ed04

0800ba58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d018      	beq.n	800ba9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba6a:	4b14      	ldr	r3, [pc, #80]	@ (800babc <vTaskDelay+0x64>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <vTaskDelay+0x32>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	60bb      	str	r3, [r7, #8]
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop
 800ba88:	e7fd      	b.n	800ba86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba8a:	f000 f88b 	bl	800bba4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba8e:	2100      	movs	r1, #0
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fe77 	bl	800c784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba96:	f000 f893 	bl	800bbc0 <xTaskResumeAll>
 800ba9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d107      	bne.n	800bab2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800baa2:	4b07      	ldr	r3, [pc, #28]	@ (800bac0 <vTaskDelay+0x68>)
 800baa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa8:	601a      	str	r2, [r3, #0]
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bab2:	bf00      	nop
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	20001118 	.word	0x20001118
 800bac0:	e000ed04 	.word	0xe000ed04

0800bac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b08a      	sub	sp, #40	@ 0x28
 800bac8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800baca:	2300      	movs	r3, #0
 800bacc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bace:	2300      	movs	r3, #0
 800bad0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bad2:	463a      	mov	r2, r7
 800bad4:	1d39      	adds	r1, r7, #4
 800bad6:	f107 0308 	add.w	r3, r7, #8
 800bada:	4618      	mov	r0, r3
 800badc:	f7f5 fbfa 	bl	80012d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bae0:	6839      	ldr	r1, [r7, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	9202      	str	r2, [sp, #8]
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	2300      	movs	r3, #0
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	2300      	movs	r3, #0
 800baf0:	460a      	mov	r2, r1
 800baf2:	4924      	ldr	r1, [pc, #144]	@ (800bb84 <vTaskStartScheduler+0xc0>)
 800baf4:	4824      	ldr	r0, [pc, #144]	@ (800bb88 <vTaskStartScheduler+0xc4>)
 800baf6:	f7ff fe00 	bl	800b6fa <xTaskCreateStatic>
 800bafa:	4603      	mov	r3, r0
 800bafc:	4a23      	ldr	r2, [pc, #140]	@ (800bb8c <vTaskStartScheduler+0xc8>)
 800bafe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb00:	4b22      	ldr	r3, [pc, #136]	@ (800bb8c <vTaskStartScheduler+0xc8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d002      	beq.n	800bb0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	617b      	str	r3, [r7, #20]
 800bb0c:	e001      	b.n	800bb12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d102      	bne.n	800bb1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb18:	f000 fe9a 	bl	800c850 <xTimerCreateTimerTask>
 800bb1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d11b      	bne.n	800bb5c <vTaskStartScheduler+0x98>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	613b      	str	r3, [r7, #16]
}
 800bb36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb38:	4b15      	ldr	r3, [pc, #84]	@ (800bb90 <vTaskStartScheduler+0xcc>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	334c      	adds	r3, #76	@ 0x4c
 800bb3e:	4a15      	ldr	r2, [pc, #84]	@ (800bb94 <vTaskStartScheduler+0xd0>)
 800bb40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb42:	4b15      	ldr	r3, [pc, #84]	@ (800bb98 <vTaskStartScheduler+0xd4>)
 800bb44:	f04f 32ff 	mov.w	r2, #4294967295
 800bb48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb4a:	4b14      	ldr	r3, [pc, #80]	@ (800bb9c <vTaskStartScheduler+0xd8>)
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb50:	4b13      	ldr	r3, [pc, #76]	@ (800bba0 <vTaskStartScheduler+0xdc>)
 800bb52:	2200      	movs	r2, #0
 800bb54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb56:	f001 fae3 	bl	800d120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb5a:	e00f      	b.n	800bb7c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb62:	d10b      	bne.n	800bb7c <vTaskStartScheduler+0xb8>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	60fb      	str	r3, [r7, #12]
}
 800bb76:	bf00      	nop
 800bb78:	bf00      	nop
 800bb7a:	e7fd      	b.n	800bb78 <vTaskStartScheduler+0xb4>
}
 800bb7c:	bf00      	nop
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	08012aec 	.word	0x08012aec
 800bb88:	0800c1d1 	.word	0x0800c1d1
 800bb8c:	20001114 	.word	0x20001114
 800bb90:	20000ff0 	.word	0x20000ff0
 800bb94:	200001b4 	.word	0x200001b4
 800bb98:	20001110 	.word	0x20001110
 800bb9c:	200010fc 	.word	0x200010fc
 800bba0:	200010f4 	.word	0x200010f4

0800bba4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bba4:	b480      	push	{r7}
 800bba6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bba8:	4b04      	ldr	r3, [pc, #16]	@ (800bbbc <vTaskSuspendAll+0x18>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3301      	adds	r3, #1
 800bbae:	4a03      	ldr	r2, [pc, #12]	@ (800bbbc <vTaskSuspendAll+0x18>)
 800bbb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bbb2:	bf00      	nop
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	20001118 	.word	0x20001118

0800bbc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbce:	4b42      	ldr	r3, [pc, #264]	@ (800bcd8 <xTaskResumeAll+0x118>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10b      	bne.n	800bbee <xTaskResumeAll+0x2e>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	603b      	str	r3, [r7, #0]
}
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
 800bbec:	e7fd      	b.n	800bbea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bbee:	f001 fb3b 	bl	800d268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bbf2:	4b39      	ldr	r3, [pc, #228]	@ (800bcd8 <xTaskResumeAll+0x118>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	4a37      	ldr	r2, [pc, #220]	@ (800bcd8 <xTaskResumeAll+0x118>)
 800bbfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbfc:	4b36      	ldr	r3, [pc, #216]	@ (800bcd8 <xTaskResumeAll+0x118>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d161      	bne.n	800bcc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc04:	4b35      	ldr	r3, [pc, #212]	@ (800bcdc <xTaskResumeAll+0x11c>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d05d      	beq.n	800bcc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc0c:	e02e      	b.n	800bc6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc0e:	4b34      	ldr	r3, [pc, #208]	@ (800bce0 <xTaskResumeAll+0x120>)
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3318      	adds	r3, #24
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe fe18 	bl	800a850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3304      	adds	r3, #4
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fe fe13 	bl	800a850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2e:	2201      	movs	r2, #1
 800bc30:	409a      	lsls	r2, r3
 800bc32:	4b2c      	ldr	r3, [pc, #176]	@ (800bce4 <xTaskResumeAll+0x124>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	4a2a      	ldr	r2, [pc, #168]	@ (800bce4 <xTaskResumeAll+0x124>)
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc40:	4613      	mov	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4a27      	ldr	r2, [pc, #156]	@ (800bce8 <xTaskResumeAll+0x128>)
 800bc4a:	441a      	add	r2, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4619      	mov	r1, r3
 800bc52:	4610      	mov	r0, r2
 800bc54:	f7fe fd9f 	bl	800a796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc5c:	4b23      	ldr	r3, [pc, #140]	@ (800bcec <xTaskResumeAll+0x12c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d302      	bcc.n	800bc6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bc66:	4b22      	ldr	r3, [pc, #136]	@ (800bcf0 <xTaskResumeAll+0x130>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc6c:	4b1c      	ldr	r3, [pc, #112]	@ (800bce0 <xTaskResumeAll+0x120>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1cc      	bne.n	800bc0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc7a:	f000 fb65 	bl	800c348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf4 <xTaskResumeAll+0x134>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d010      	beq.n	800bcac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc8a:	f000 f847 	bl	800bd1c <xTaskIncrementTick>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bc94:	4b16      	ldr	r3, [pc, #88]	@ (800bcf0 <xTaskResumeAll+0x130>)
 800bc96:	2201      	movs	r2, #1
 800bc98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1f1      	bne.n	800bc8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bca6:	4b13      	ldr	r3, [pc, #76]	@ (800bcf4 <xTaskResumeAll+0x134>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bcac:	4b10      	ldr	r3, [pc, #64]	@ (800bcf0 <xTaskResumeAll+0x130>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d009      	beq.n	800bcc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bcb8:	4b0f      	ldr	r3, [pc, #60]	@ (800bcf8 <xTaskResumeAll+0x138>)
 800bcba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcc8:	f001 fb00 	bl	800d2cc <vPortExitCritical>

	return xAlreadyYielded;
 800bccc:	68bb      	ldr	r3, [r7, #8]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20001118 	.word	0x20001118
 800bcdc:	200010f0 	.word	0x200010f0
 800bce0:	200010b0 	.word	0x200010b0
 800bce4:	200010f8 	.word	0x200010f8
 800bce8:	20000ff4 	.word	0x20000ff4
 800bcec:	20000ff0 	.word	0x20000ff0
 800bcf0:	20001104 	.word	0x20001104
 800bcf4:	20001100 	.word	0x20001100
 800bcf8:	e000ed04 	.word	0xe000ed04

0800bcfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd02:	4b05      	ldr	r3, [pc, #20]	@ (800bd18 <xTaskGetTickCount+0x1c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd08:	687b      	ldr	r3, [r7, #4]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	370c      	adds	r7, #12
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	200010f4 	.word	0x200010f4

0800bd1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd26:	4b4f      	ldr	r3, [pc, #316]	@ (800be64 <xTaskIncrementTick+0x148>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 808f 	bne.w	800be4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd30:	4b4d      	ldr	r3, [pc, #308]	@ (800be68 <xTaskIncrementTick+0x14c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3301      	adds	r3, #1
 800bd36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd38:	4a4b      	ldr	r2, [pc, #300]	@ (800be68 <xTaskIncrementTick+0x14c>)
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d121      	bne.n	800bd88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd44:	4b49      	ldr	r3, [pc, #292]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00b      	beq.n	800bd66 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	603b      	str	r3, [r7, #0]
}
 800bd60:	bf00      	nop
 800bd62:	bf00      	nop
 800bd64:	e7fd      	b.n	800bd62 <xTaskIncrementTick+0x46>
 800bd66:	4b41      	ldr	r3, [pc, #260]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	60fb      	str	r3, [r7, #12]
 800bd6c:	4b40      	ldr	r3, [pc, #256]	@ (800be70 <xTaskIncrementTick+0x154>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a3e      	ldr	r2, [pc, #248]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bd72:	6013      	str	r3, [r2, #0]
 800bd74:	4a3e      	ldr	r2, [pc, #248]	@ (800be70 <xTaskIncrementTick+0x154>)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	4b3e      	ldr	r3, [pc, #248]	@ (800be74 <xTaskIncrementTick+0x158>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	4a3c      	ldr	r2, [pc, #240]	@ (800be74 <xTaskIncrementTick+0x158>)
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	f000 fae0 	bl	800c348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd88:	4b3b      	ldr	r3, [pc, #236]	@ (800be78 <xTaskIncrementTick+0x15c>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d348      	bcc.n	800be24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd92:	4b36      	ldr	r3, [pc, #216]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd9c:	4b36      	ldr	r3, [pc, #216]	@ (800be78 <xTaskIncrementTick+0x15c>)
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bda2:	601a      	str	r2, [r3, #0]
					break;
 800bda4:	e03e      	b.n	800be24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda6:	4b31      	ldr	r3, [pc, #196]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d203      	bcs.n	800bdc6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bdbe:	4a2e      	ldr	r2, [pc, #184]	@ (800be78 <xTaskIncrementTick+0x15c>)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bdc4:	e02e      	b.n	800be24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fd40 	bl	800a850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	3318      	adds	r3, #24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fd37 	bl	800a850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde6:	2201      	movs	r2, #1
 800bde8:	409a      	lsls	r2, r3
 800bdea:	4b24      	ldr	r3, [pc, #144]	@ (800be7c <xTaskIncrementTick+0x160>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	4a22      	ldr	r2, [pc, #136]	@ (800be7c <xTaskIncrementTick+0x160>)
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4a1f      	ldr	r2, [pc, #124]	@ (800be80 <xTaskIncrementTick+0x164>)
 800be02:	441a      	add	r2, r3
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	3304      	adds	r3, #4
 800be08:	4619      	mov	r1, r3
 800be0a:	4610      	mov	r0, r2
 800be0c:	f7fe fcc3 	bl	800a796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be14:	4b1b      	ldr	r3, [pc, #108]	@ (800be84 <xTaskIncrementTick+0x168>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d3b9      	bcc.n	800bd92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800be1e:	2301      	movs	r3, #1
 800be20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be22:	e7b6      	b.n	800bd92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be24:	4b17      	ldr	r3, [pc, #92]	@ (800be84 <xTaskIncrementTick+0x168>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be2a:	4915      	ldr	r1, [pc, #84]	@ (800be80 <xTaskIncrementTick+0x164>)
 800be2c:	4613      	mov	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	440b      	add	r3, r1
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d901      	bls.n	800be40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800be3c:	2301      	movs	r3, #1
 800be3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be40:	4b11      	ldr	r3, [pc, #68]	@ (800be88 <xTaskIncrementTick+0x16c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d007      	beq.n	800be58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e004      	b.n	800be58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be4e:	4b0f      	ldr	r3, [pc, #60]	@ (800be8c <xTaskIncrementTick+0x170>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3301      	adds	r3, #1
 800be54:	4a0d      	ldr	r2, [pc, #52]	@ (800be8c <xTaskIncrementTick+0x170>)
 800be56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be58:	697b      	ldr	r3, [r7, #20]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	20001118 	.word	0x20001118
 800be68:	200010f4 	.word	0x200010f4
 800be6c:	200010a8 	.word	0x200010a8
 800be70:	200010ac 	.word	0x200010ac
 800be74:	20001108 	.word	0x20001108
 800be78:	20001110 	.word	0x20001110
 800be7c:	200010f8 	.word	0x200010f8
 800be80:	20000ff4 	.word	0x20000ff4
 800be84:	20000ff0 	.word	0x20000ff0
 800be88:	20001104 	.word	0x20001104
 800be8c:	20001100 	.word	0x20001100

0800be90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be96:	4b2a      	ldr	r3, [pc, #168]	@ (800bf40 <vTaskSwitchContext+0xb0>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d003      	beq.n	800bea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be9e:	4b29      	ldr	r3, [pc, #164]	@ (800bf44 <vTaskSwitchContext+0xb4>)
 800bea0:	2201      	movs	r2, #1
 800bea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bea4:	e045      	b.n	800bf32 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800bea6:	4b27      	ldr	r3, [pc, #156]	@ (800bf44 <vTaskSwitchContext+0xb4>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beac:	4b26      	ldr	r3, [pc, #152]	@ (800bf48 <vTaskSwitchContext+0xb8>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	fab3 f383 	clz	r3, r3
 800beb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800beba:	7afb      	ldrb	r3, [r7, #11]
 800bebc:	f1c3 031f 	rsb	r3, r3, #31
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	4922      	ldr	r1, [pc, #136]	@ (800bf4c <vTaskSwitchContext+0xbc>)
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	440b      	add	r3, r1
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10b      	bne.n	800beee <vTaskSwitchContext+0x5e>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	607b      	str	r3, [r7, #4]
}
 800bee8:	bf00      	nop
 800beea:	bf00      	nop
 800beec:	e7fd      	b.n	800beea <vTaskSwitchContext+0x5a>
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	4613      	mov	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4413      	add	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4a14      	ldr	r2, [pc, #80]	@ (800bf4c <vTaskSwitchContext+0xbc>)
 800befa:	4413      	add	r3, r2
 800befc:	613b      	str	r3, [r7, #16]
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	605a      	str	r2, [r3, #4]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d104      	bne.n	800bf1e <vTaskSwitchContext+0x8e>
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	685a      	ldr	r2, [r3, #4]
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	605a      	str	r2, [r3, #4]
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	4a0a      	ldr	r2, [pc, #40]	@ (800bf50 <vTaskSwitchContext+0xc0>)
 800bf26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf28:	4b09      	ldr	r3, [pc, #36]	@ (800bf50 <vTaskSwitchContext+0xc0>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	334c      	adds	r3, #76	@ 0x4c
 800bf2e:	4a09      	ldr	r2, [pc, #36]	@ (800bf54 <vTaskSwitchContext+0xc4>)
 800bf30:	6013      	str	r3, [r2, #0]
}
 800bf32:	bf00      	nop
 800bf34:	371c      	adds	r7, #28
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	20001118 	.word	0x20001118
 800bf44:	20001104 	.word	0x20001104
 800bf48:	200010f8 	.word	0x200010f8
 800bf4c:	20000ff4 	.word	0x20000ff4
 800bf50:	20000ff0 	.word	0x20000ff0
 800bf54:	200001b4 	.word	0x200001b4

0800bf58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10b      	bne.n	800bf80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bf68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	60fb      	str	r3, [r7, #12]
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	e7fd      	b.n	800bf7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf80:	4b07      	ldr	r3, [pc, #28]	@ (800bfa0 <vTaskPlaceOnEventList+0x48>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	3318      	adds	r3, #24
 800bf86:	4619      	mov	r1, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7fe fc28 	bl	800a7de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf8e:	2101      	movs	r1, #1
 800bf90:	6838      	ldr	r0, [r7, #0]
 800bf92:	f000 fbf7 	bl	800c784 <prvAddCurrentTaskToDelayedList>
}
 800bf96:	bf00      	nop
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20000ff0 	.word	0x20000ff0

0800bfa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	617b      	str	r3, [r7, #20]
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	e7fd      	b.n	800bfca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfce:	4b0a      	ldr	r3, [pc, #40]	@ (800bff8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3318      	adds	r3, #24
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7fe fbdd 	bl	800a796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d002      	beq.n	800bfe8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bfe2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	68b8      	ldr	r0, [r7, #8]
 800bfec:	f000 fbca 	bl	800c784 <prvAddCurrentTaskToDelayedList>
	}
 800bff0:	bf00      	nop
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20000ff0 	.word	0x20000ff0

0800bffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10b      	bne.n	800c02a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60fb      	str	r3, [r7, #12]
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	e7fd      	b.n	800c026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	3318      	adds	r3, #24
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fc0e 	bl	800a850 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c034:	4b1d      	ldr	r3, [pc, #116]	@ (800c0ac <xTaskRemoveFromEventList+0xb0>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d11c      	bne.n	800c076 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	3304      	adds	r3, #4
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fc05 	bl	800a850 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c04a:	2201      	movs	r2, #1
 800c04c:	409a      	lsls	r2, r3
 800c04e:	4b18      	ldr	r3, [pc, #96]	@ (800c0b0 <xTaskRemoveFromEventList+0xb4>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4313      	orrs	r3, r2
 800c054:	4a16      	ldr	r2, [pc, #88]	@ (800c0b0 <xTaskRemoveFromEventList+0xb4>)
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c05c:	4613      	mov	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4a13      	ldr	r2, [pc, #76]	@ (800c0b4 <xTaskRemoveFromEventList+0xb8>)
 800c066:	441a      	add	r2, r3
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	3304      	adds	r3, #4
 800c06c:	4619      	mov	r1, r3
 800c06e:	4610      	mov	r0, r2
 800c070:	f7fe fb91 	bl	800a796 <vListInsertEnd>
 800c074:	e005      	b.n	800c082 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	3318      	adds	r3, #24
 800c07a:	4619      	mov	r1, r3
 800c07c:	480e      	ldr	r0, [pc, #56]	@ (800c0b8 <xTaskRemoveFromEventList+0xbc>)
 800c07e:	f7fe fb8a 	bl	800a796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c086:	4b0d      	ldr	r3, [pc, #52]	@ (800c0bc <xTaskRemoveFromEventList+0xc0>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d905      	bls.n	800c09c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c090:	2301      	movs	r3, #1
 800c092:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c094:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c0 <xTaskRemoveFromEventList+0xc4>)
 800c096:	2201      	movs	r2, #1
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	e001      	b.n	800c0a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c09c:	2300      	movs	r3, #0
 800c09e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c0a0:	697b      	ldr	r3, [r7, #20]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20001118 	.word	0x20001118
 800c0b0:	200010f8 	.word	0x200010f8
 800c0b4:	20000ff4 	.word	0x20000ff4
 800c0b8:	200010b0 	.word	0x200010b0
 800c0bc:	20000ff0 	.word	0x20000ff0
 800c0c0:	20001104 	.word	0x20001104

0800c0c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0cc:	4b06      	ldr	r3, [pc, #24]	@ (800c0e8 <vTaskInternalSetTimeOutState+0x24>)
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0d4:	4b05      	ldr	r3, [pc, #20]	@ (800c0ec <vTaskInternalSetTimeOutState+0x28>)
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	605a      	str	r2, [r3, #4]
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	20001108 	.word	0x20001108
 800c0ec:	200010f4 	.word	0x200010f4

0800c0f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10b      	bne.n	800c118 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	613b      	str	r3, [r7, #16]
}
 800c112:	bf00      	nop
 800c114:	bf00      	nop
 800c116:	e7fd      	b.n	800c114 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10b      	bne.n	800c136 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	60fb      	str	r3, [r7, #12]
}
 800c130:	bf00      	nop
 800c132:	bf00      	nop
 800c134:	e7fd      	b.n	800c132 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c136:	f001 f897 	bl	800d268 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c13a:	4b1d      	ldr	r3, [pc, #116]	@ (800c1b0 <xTaskCheckForTimeOut+0xc0>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	69ba      	ldr	r2, [r7, #24]
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c152:	d102      	bne.n	800c15a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c154:	2300      	movs	r3, #0
 800c156:	61fb      	str	r3, [r7, #28]
 800c158:	e023      	b.n	800c1a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	4b15      	ldr	r3, [pc, #84]	@ (800c1b4 <xTaskCheckForTimeOut+0xc4>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d007      	beq.n	800c176 <xTaskCheckForTimeOut+0x86>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d302      	bcc.n	800c176 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c170:	2301      	movs	r3, #1
 800c172:	61fb      	str	r3, [r7, #28]
 800c174:	e015      	b.n	800c1a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d20b      	bcs.n	800c198 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff ff99 	bl	800c0c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c192:	2300      	movs	r3, #0
 800c194:	61fb      	str	r3, [r7, #28]
 800c196:	e004      	b.n	800c1a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1a2:	f001 f893 	bl	800d2cc <vPortExitCritical>

	return xReturn;
 800c1a6:	69fb      	ldr	r3, [r7, #28]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	200010f4 	.word	0x200010f4
 800c1b4:	20001108 	.word	0x20001108

0800c1b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1bc:	4b03      	ldr	r3, [pc, #12]	@ (800c1cc <vTaskMissedYield+0x14>)
 800c1be:	2201      	movs	r2, #1
 800c1c0:	601a      	str	r2, [r3, #0]
}
 800c1c2:	bf00      	nop
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	20001104 	.word	0x20001104

0800c1d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1d8:	f000 f852 	bl	800c280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1dc:	4b06      	ldr	r3, [pc, #24]	@ (800c1f8 <prvIdleTask+0x28>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d9f9      	bls.n	800c1d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c1e4:	4b05      	ldr	r3, [pc, #20]	@ (800c1fc <prvIdleTask+0x2c>)
 800c1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c1f4:	e7f0      	b.n	800c1d8 <prvIdleTask+0x8>
 800c1f6:	bf00      	nop
 800c1f8:	20000ff4 	.word	0x20000ff4
 800c1fc:	e000ed04 	.word	0xe000ed04

0800c200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c206:	2300      	movs	r3, #0
 800c208:	607b      	str	r3, [r7, #4]
 800c20a:	e00c      	b.n	800c226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	4613      	mov	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4a12      	ldr	r2, [pc, #72]	@ (800c260 <prvInitialiseTaskLists+0x60>)
 800c218:	4413      	add	r3, r2
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fe fa8e 	bl	800a73c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3301      	adds	r3, #1
 800c224:	607b      	str	r3, [r7, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b06      	cmp	r3, #6
 800c22a:	d9ef      	bls.n	800c20c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c22c:	480d      	ldr	r0, [pc, #52]	@ (800c264 <prvInitialiseTaskLists+0x64>)
 800c22e:	f7fe fa85 	bl	800a73c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c232:	480d      	ldr	r0, [pc, #52]	@ (800c268 <prvInitialiseTaskLists+0x68>)
 800c234:	f7fe fa82 	bl	800a73c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c238:	480c      	ldr	r0, [pc, #48]	@ (800c26c <prvInitialiseTaskLists+0x6c>)
 800c23a:	f7fe fa7f 	bl	800a73c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c23e:	480c      	ldr	r0, [pc, #48]	@ (800c270 <prvInitialiseTaskLists+0x70>)
 800c240:	f7fe fa7c 	bl	800a73c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c244:	480b      	ldr	r0, [pc, #44]	@ (800c274 <prvInitialiseTaskLists+0x74>)
 800c246:	f7fe fa79 	bl	800a73c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c24a:	4b0b      	ldr	r3, [pc, #44]	@ (800c278 <prvInitialiseTaskLists+0x78>)
 800c24c:	4a05      	ldr	r2, [pc, #20]	@ (800c264 <prvInitialiseTaskLists+0x64>)
 800c24e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c250:	4b0a      	ldr	r3, [pc, #40]	@ (800c27c <prvInitialiseTaskLists+0x7c>)
 800c252:	4a05      	ldr	r2, [pc, #20]	@ (800c268 <prvInitialiseTaskLists+0x68>)
 800c254:	601a      	str	r2, [r3, #0]
}
 800c256:	bf00      	nop
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000ff4 	.word	0x20000ff4
 800c264:	20001080 	.word	0x20001080
 800c268:	20001094 	.word	0x20001094
 800c26c:	200010b0 	.word	0x200010b0
 800c270:	200010c4 	.word	0x200010c4
 800c274:	200010dc 	.word	0x200010dc
 800c278:	200010a8 	.word	0x200010a8
 800c27c:	200010ac 	.word	0x200010ac

0800c280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c286:	e019      	b.n	800c2bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c288:	f000 ffee 	bl	800d268 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c28c:	4b10      	ldr	r3, [pc, #64]	@ (800c2d0 <prvCheckTasksWaitingTermination+0x50>)
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3304      	adds	r3, #4
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fe fad9 	bl	800a850 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c29e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d4 <prvCheckTasksWaitingTermination+0x54>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c2d4 <prvCheckTasksWaitingTermination+0x54>)
 800c2a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d8 <prvCheckTasksWaitingTermination+0x58>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c2d8 <prvCheckTasksWaitingTermination+0x58>)
 800c2b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2b2:	f001 f80b 	bl	800d2cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 f810 	bl	800c2dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2bc:	4b06      	ldr	r3, [pc, #24]	@ (800c2d8 <prvCheckTasksWaitingTermination+0x58>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e1      	bne.n	800c288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	200010c4 	.word	0x200010c4
 800c2d4:	200010f0 	.word	0x200010f0
 800c2d8:	200010d8 	.word	0x200010d8

0800c2dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	334c      	adds	r3, #76	@ 0x4c
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f003 fa25 	bl	800f738 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d108      	bne.n	800c30a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f001 f9a3 	bl	800d648 <vPortFree>
				vPortFree( pxTCB );
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f001 f9a0 	bl	800d648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c308:	e019      	b.n	800c33e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c310:	2b01      	cmp	r3, #1
 800c312:	d103      	bne.n	800c31c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f001 f997 	bl	800d648 <vPortFree>
	}
 800c31a:	e010      	b.n	800c33e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c322:	2b02      	cmp	r3, #2
 800c324:	d00b      	beq.n	800c33e <prvDeleteTCB+0x62>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	60fb      	str	r3, [r7, #12]
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	e7fd      	b.n	800c33a <prvDeleteTCB+0x5e>
	}
 800c33e:	bf00      	nop
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c34e:	4b0c      	ldr	r3, [pc, #48]	@ (800c380 <prvResetNextTaskUnblockTime+0x38>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d104      	bne.n	800c362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c358:	4b0a      	ldr	r3, [pc, #40]	@ (800c384 <prvResetNextTaskUnblockTime+0x3c>)
 800c35a:	f04f 32ff 	mov.w	r2, #4294967295
 800c35e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c360:	e008      	b.n	800c374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c362:	4b07      	ldr	r3, [pc, #28]	@ (800c380 <prvResetNextTaskUnblockTime+0x38>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	4a04      	ldr	r2, [pc, #16]	@ (800c384 <prvResetNextTaskUnblockTime+0x3c>)
 800c372:	6013      	str	r3, [r2, #0]
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	200010a8 	.word	0x200010a8
 800c384:	20001110 	.word	0x20001110

0800c388 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c38e:	4b05      	ldr	r3, [pc, #20]	@ (800c3a4 <xTaskGetCurrentTaskHandle+0x1c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c394:	687b      	ldr	r3, [r7, #4]
	}
 800c396:	4618      	mov	r0, r3
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	20000ff0 	.word	0x20000ff0

0800c3a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c3dc <xTaskGetSchedulerState+0x34>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d102      	bne.n	800c3bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	607b      	str	r3, [r7, #4]
 800c3ba:	e008      	b.n	800c3ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3bc:	4b08      	ldr	r3, [pc, #32]	@ (800c3e0 <xTaskGetSchedulerState+0x38>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	607b      	str	r3, [r7, #4]
 800c3c8:	e001      	b.n	800c3ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3ce:	687b      	ldr	r3, [r7, #4]
	}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	200010fc 	.word	0x200010fc
 800c3e0:	20001118 	.word	0x20001118

0800c3e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d070      	beq.n	800c4dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c3fa:	4b3b      	ldr	r3, [pc, #236]	@ (800c4e8 <xTaskPriorityDisinherit+0x104>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	429a      	cmp	r2, r3
 800c402:	d00b      	beq.n	800c41c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	60fb      	str	r3, [r7, #12]
}
 800c416:	bf00      	nop
 800c418:	bf00      	nop
 800c41a:	e7fd      	b.n	800c418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10b      	bne.n	800c43c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60bb      	str	r3, [r7, #8]
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	e7fd      	b.n	800c438 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c440:	1e5a      	subs	r2, r3, #1
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c44e:	429a      	cmp	r2, r3
 800c450:	d044      	beq.n	800c4dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c456:	2b00      	cmp	r3, #0
 800c458:	d140      	bne.n	800c4dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	3304      	adds	r3, #4
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe f9f6 	bl	800a850 <uxListRemove>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d115      	bne.n	800c496 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c46e:	491f      	ldr	r1, [pc, #124]	@ (800c4ec <xTaskPriorityDisinherit+0x108>)
 800c470:	4613      	mov	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	440b      	add	r3, r1
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <xTaskPriorityDisinherit+0xb2>
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c484:	2201      	movs	r2, #1
 800c486:	fa02 f303 	lsl.w	r3, r2, r3
 800c48a:	43da      	mvns	r2, r3
 800c48c:	4b18      	ldr	r3, [pc, #96]	@ (800c4f0 <xTaskPriorityDisinherit+0x10c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4013      	ands	r3, r2
 800c492:	4a17      	ldr	r2, [pc, #92]	@ (800c4f0 <xTaskPriorityDisinherit+0x10c>)
 800c494:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a2:	f1c3 0207 	rsb	r2, r3, #7
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	409a      	lsls	r2, r3
 800c4b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f0 <xTaskPriorityDisinherit+0x10c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	4a0d      	ldr	r2, [pc, #52]	@ (800c4f0 <xTaskPriorityDisinherit+0x10c>)
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	4a08      	ldr	r2, [pc, #32]	@ (800c4ec <xTaskPriorityDisinherit+0x108>)
 800c4ca:	441a      	add	r2, r3
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	f7fe f95f 	bl	800a796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4dc:	697b      	ldr	r3, [r7, #20]
	}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3718      	adds	r7, #24
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20000ff0 	.word	0x20000ff0
 800c4ec:	20000ff4 	.word	0x20000ff4
 800c4f0:	200010f8 	.word	0x200010f8

0800c4f4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c502:	f000 feb1 	bl	800d268 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c506:	4b29      	ldr	r3, [pc, #164]	@ (800c5ac <xTaskNotifyWait+0xb8>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b02      	cmp	r3, #2
 800c512:	d01c      	beq.n	800c54e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c514:	4b25      	ldr	r3, [pc, #148]	@ (800c5ac <xTaskNotifyWait+0xb8>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	43d2      	mvns	r2, r2
 800c520:	400a      	ands	r2, r1
 800c522:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c526:	4b21      	ldr	r3, [pc, #132]	@ (800c5ac <xTaskNotifyWait+0xb8>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00b      	beq.n	800c54e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c536:	2101      	movs	r1, #1
 800c538:	6838      	ldr	r0, [r7, #0]
 800c53a:	f000 f923 	bl	800c784 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c53e:	4b1c      	ldr	r3, [pc, #112]	@ (800c5b0 <xTaskNotifyWait+0xbc>)
 800c540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c54e:	f000 febd 	bl	800d2cc <vPortExitCritical>

		taskENTER_CRITICAL();
 800c552:	f000 fe89 	bl	800d268 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d005      	beq.n	800c568 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c55c:	4b13      	ldr	r3, [pc, #76]	@ (800c5ac <xTaskNotifyWait+0xb8>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c568:	4b10      	ldr	r3, [pc, #64]	@ (800c5ac <xTaskNotifyWait+0xb8>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b02      	cmp	r3, #2
 800c574:	d002      	beq.n	800c57c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c576:	2300      	movs	r3, #0
 800c578:	617b      	str	r3, [r7, #20]
 800c57a:	e00a      	b.n	800c592 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c57c:	4b0b      	ldr	r3, [pc, #44]	@ (800c5ac <xTaskNotifyWait+0xb8>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	43d2      	mvns	r2, r2
 800c588:	400a      	ands	r2, r1
 800c58a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 800c58e:	2301      	movs	r3, #1
 800c590:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c592:	4b06      	ldr	r3, [pc, #24]	@ (800c5ac <xTaskNotifyWait+0xb8>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800c59c:	f000 fe96 	bl	800d2cc <vPortExitCritical>

		return xReturn;
 800c5a0:	697b      	ldr	r3, [r7, #20]
	}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3718      	adds	r7, #24
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000ff0 	.word	0x20000ff0
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08a      	sub	sp, #40	@ 0x28
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10b      	bne.n	800c5e6 <xTaskGenericNotify+0x32>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	61bb      	str	r3, [r7, #24]
}
 800c5e0:	bf00      	nop
 800c5e2:	bf00      	nop
 800c5e4:	e7fd      	b.n	800c5e2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c5ea:	f000 fe3d 	bl	800d268 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d004      	beq.n	800c5fe <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c5fe:	6a3b      	ldr	r3, [r7, #32]
 800c600:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800c604:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	2202      	movs	r2, #2
 800c60a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	2b04      	cmp	r3, #4
 800c612:	d82e      	bhi.n	800c672 <xTaskGenericNotify+0xbe>
 800c614:	a201      	add	r2, pc, #4	@ (adr r2, 800c61c <xTaskGenericNotify+0x68>)
 800c616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61a:	bf00      	nop
 800c61c:	0800c697 	.word	0x0800c697
 800c620:	0800c631 	.word	0x0800c631
 800c624:	0800c643 	.word	0x0800c643
 800c628:	0800c653 	.word	0x0800c653
 800c62c:	0800c65d 	.word	0x0800c65d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	431a      	orrs	r2, r3
 800c63a:	6a3b      	ldr	r3, [r7, #32]
 800c63c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800c640:	e02c      	b.n	800c69c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c642:	6a3b      	ldr	r3, [r7, #32]
 800c644:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c648:	1c5a      	adds	r2, r3, #1
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800c650:	e024      	b.n	800c69c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800c65a:	e01f      	b.n	800c69c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c65c:	7ffb      	ldrb	r3, [r7, #31]
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d004      	beq.n	800c66c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c66a:	e017      	b.n	800c69c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800c66c:	2300      	movs	r3, #0
 800c66e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800c670:	e014      	b.n	800c69c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c672:	6a3b      	ldr	r3, [r7, #32]
 800c674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67c:	d00d      	beq.n	800c69a <xTaskGenericNotify+0xe6>
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	617b      	str	r3, [r7, #20]
}
 800c690:	bf00      	nop
 800c692:	bf00      	nop
 800c694:	e7fd      	b.n	800c692 <xTaskGenericNotify+0xde>
					break;
 800c696:	bf00      	nop
 800c698:	e000      	b.n	800c69c <xTaskGenericNotify+0xe8>

					break;
 800c69a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c69c:	7ffb      	ldrb	r3, [r7, #31]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d13a      	bne.n	800c718 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe f8d2 	bl	800a850 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	409a      	lsls	r2, r3
 800c6b4:	4b1c      	ldr	r3, [pc, #112]	@ (800c728 <xTaskGenericNotify+0x174>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c728 <xTaskGenericNotify+0x174>)
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	6a3b      	ldr	r3, [r7, #32]
 800c6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4a18      	ldr	r2, [pc, #96]	@ (800c72c <xTaskGenericNotify+0x178>)
 800c6cc:	441a      	add	r2, r3
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	f7fe f85e 	bl	800a796 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00b      	beq.n	800c6fa <xTaskGenericNotify+0x146>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	613b      	str	r3, [r7, #16]
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop
 800c6f8:	e7fd      	b.n	800c6f6 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c730 <xTaskGenericNotify+0x17c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c704:	429a      	cmp	r2, r3
 800c706:	d907      	bls.n	800c718 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c708:	4b0a      	ldr	r3, [pc, #40]	@ (800c734 <xTaskGenericNotify+0x180>)
 800c70a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c718:	f000 fdd8 	bl	800d2cc <vPortExitCritical>

		return xReturn;
 800c71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800c71e:	4618      	mov	r0, r3
 800c720:	3728      	adds	r7, #40	@ 0x28
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	200010f8 	.word	0x200010f8
 800c72c:	20000ff4 	.word	0x20000ff4
 800c730:	20000ff0 	.word	0x20000ff0
 800c734:	e000ed04 	.word	0xe000ed04

0800c738 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <xTaskNotifyStateClear+0x14>
 800c746:	4b0e      	ldr	r3, [pc, #56]	@ (800c780 <xTaskNotifyStateClear+0x48>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	e000      	b.n	800c74e <xTaskNotifyStateClear+0x16>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800c750:	f000 fd8a 	bl	800d268 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d106      	bne.n	800c76e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 800c768:	2301      	movs	r3, #1
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	e001      	b.n	800c772 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800c76e:	2300      	movs	r3, #0
 800c770:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800c772:	f000 fdab 	bl	800d2cc <vPortExitCritical>

		return xReturn;
 800c776:	68fb      	ldr	r3, [r7, #12]
	}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	20000ff0 	.word	0x20000ff0

0800c784 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c78e:	4b29      	ldr	r3, [pc, #164]	@ (800c834 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c794:	4b28      	ldr	r3, [pc, #160]	@ (800c838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3304      	adds	r3, #4
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe f858 	bl	800a850 <uxListRemove>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10b      	bne.n	800c7be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c7a6:	4b24      	ldr	r3, [pc, #144]	@ (800c838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b2:	43da      	mvns	r2, r3
 800c7b4:	4b21      	ldr	r3, [pc, #132]	@ (800c83c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4013      	ands	r3, r2
 800c7ba:	4a20      	ldr	r2, [pc, #128]	@ (800c83c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c4:	d10a      	bne.n	800c7dc <prvAddCurrentTaskToDelayedList+0x58>
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d007      	beq.n	800c7dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	481a      	ldr	r0, [pc, #104]	@ (800c840 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c7d6:	f7fd ffde 	bl	800a796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7da:	e026      	b.n	800c82a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7e4:	4b14      	ldr	r3, [pc, #80]	@ (800c838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d209      	bcs.n	800c808 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7f4:	4b13      	ldr	r3, [pc, #76]	@ (800c844 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	4619      	mov	r1, r3
 800c800:	4610      	mov	r0, r2
 800c802:	f7fd ffec 	bl	800a7de <vListInsert>
}
 800c806:	e010      	b.n	800c82a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c808:	4b0f      	ldr	r3, [pc, #60]	@ (800c848 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	4b0a      	ldr	r3, [pc, #40]	@ (800c838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3304      	adds	r3, #4
 800c812:	4619      	mov	r1, r3
 800c814:	4610      	mov	r0, r2
 800c816:	f7fd ffe2 	bl	800a7de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c81a:	4b0c      	ldr	r3, [pc, #48]	@ (800c84c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	429a      	cmp	r2, r3
 800c822:	d202      	bcs.n	800c82a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c824:	4a09      	ldr	r2, [pc, #36]	@ (800c84c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	6013      	str	r3, [r2, #0]
}
 800c82a:	bf00      	nop
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	200010f4 	.word	0x200010f4
 800c838:	20000ff0 	.word	0x20000ff0
 800c83c:	200010f8 	.word	0x200010f8
 800c840:	200010dc 	.word	0x200010dc
 800c844:	200010ac 	.word	0x200010ac
 800c848:	200010a8 	.word	0x200010a8
 800c84c:	20001110 	.word	0x20001110

0800c850 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b08a      	sub	sp, #40	@ 0x28
 800c854:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c856:	2300      	movs	r3, #0
 800c858:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c85a:	f000 fb95 	bl	800cf88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c85e:	4b1d      	ldr	r3, [pc, #116]	@ (800c8d4 <xTimerCreateTimerTask+0x84>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d021      	beq.n	800c8aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c866:	2300      	movs	r3, #0
 800c868:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c86a:	2300      	movs	r3, #0
 800c86c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c86e:	1d3a      	adds	r2, r7, #4
 800c870:	f107 0108 	add.w	r1, r7, #8
 800c874:	f107 030c 	add.w	r3, r7, #12
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f4 fd45 	bl	8001308 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	9202      	str	r2, [sp, #8]
 800c886:	9301      	str	r3, [sp, #4]
 800c888:	2302      	movs	r3, #2
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	2300      	movs	r3, #0
 800c88e:	460a      	mov	r2, r1
 800c890:	4911      	ldr	r1, [pc, #68]	@ (800c8d8 <xTimerCreateTimerTask+0x88>)
 800c892:	4812      	ldr	r0, [pc, #72]	@ (800c8dc <xTimerCreateTimerTask+0x8c>)
 800c894:	f7fe ff31 	bl	800b6fa <xTaskCreateStatic>
 800c898:	4603      	mov	r3, r0
 800c89a:	4a11      	ldr	r2, [pc, #68]	@ (800c8e0 <xTimerCreateTimerTask+0x90>)
 800c89c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c89e:	4b10      	ldr	r3, [pc, #64]	@ (800c8e0 <xTimerCreateTimerTask+0x90>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10b      	bne.n	800c8c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	613b      	str	r3, [r7, #16]
}
 800c8c2:	bf00      	nop
 800c8c4:	bf00      	nop
 800c8c6:	e7fd      	b.n	800c8c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c8c8:	697b      	ldr	r3, [r7, #20]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	2000114c 	.word	0x2000114c
 800c8d8:	08012af4 	.word	0x08012af4
 800c8dc:	0800cb59 	.word	0x0800cb59
 800c8e0:	20001150 	.word	0x20001150

0800c8e4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af02      	add	r7, sp, #8
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c8f2:	2028      	movs	r0, #40	@ 0x28
 800c8f4:	f000 fdda 	bl	800d4ac <pvPortMalloc>
 800c8f8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00d      	beq.n	800c91c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	68b9      	ldr	r1, [r7, #8]
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f000 f845 	bl	800c9a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c91c:	697b      	ldr	r3, [r7, #20]
	}
 800c91e:	4618      	mov	r0, r3
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c926:	b580      	push	{r7, lr}
 800c928:	b08a      	sub	sp, #40	@ 0x28
 800c92a:	af02      	add	r7, sp, #8
 800c92c:	60f8      	str	r0, [r7, #12]
 800c92e:	60b9      	str	r1, [r7, #8]
 800c930:	607a      	str	r2, [r7, #4]
 800c932:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c934:	2328      	movs	r3, #40	@ 0x28
 800c936:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	2b28      	cmp	r3, #40	@ 0x28
 800c93c:	d00b      	beq.n	800c956 <xTimerCreateStatic+0x30>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	61bb      	str	r3, [r7, #24]
}
 800c950:	bf00      	nop
 800c952:	bf00      	nop
 800c954:	e7fd      	b.n	800c952 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c956:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10b      	bne.n	800c976 <xTimerCreateStatic+0x50>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	617b      	str	r3, [r7, #20]
}
 800c970:	bf00      	nop
 800c972:	bf00      	nop
 800c974:	e7fd      	b.n	800c972 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c978:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00d      	beq.n	800c99c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	2202      	movs	r2, #2
 800c984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	68b9      	ldr	r1, [r7, #8]
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 f805 	bl	800c9a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c99c:	69fb      	ldr	r3, [r7, #28]
	}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3720      	adds	r7, #32
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b086      	sub	sp, #24
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	60f8      	str	r0, [r7, #12]
 800c9ae:	60b9      	str	r1, [r7, #8]
 800c9b0:	607a      	str	r2, [r7, #4]
 800c9b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10b      	bne.n	800c9d2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800c9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	617b      	str	r3, [r7, #20]
}
 800c9cc:	bf00      	nop
 800c9ce:	bf00      	nop
 800c9d0:	e7fd      	b.n	800c9ce <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d01e      	beq.n	800ca16 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c9d8:	f000 fad6 	bl	800cf88 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f0:	6a3a      	ldr	r2, [r7, #32]
 800c9f2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fd febf 	bl	800a77c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d008      	beq.n	800ca16 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ca04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ca0a:	f043 0304 	orr.w	r3, r3, #4
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ca16:	bf00      	nop
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08a      	sub	sp, #40	@ 0x28
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10b      	bne.n	800ca50 <xTimerGenericCommand+0x30>
	__asm volatile
 800ca38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	623b      	str	r3, [r7, #32]
}
 800ca4a:	bf00      	nop
 800ca4c:	bf00      	nop
 800ca4e:	e7fd      	b.n	800ca4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca50:	4b19      	ldr	r3, [pc, #100]	@ (800cab8 <xTimerGenericCommand+0x98>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d02a      	beq.n	800caae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b05      	cmp	r3, #5
 800ca68:	dc18      	bgt.n	800ca9c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca6a:	f7ff fc9d 	bl	800c3a8 <xTaskGetSchedulerState>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d109      	bne.n	800ca88 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca74:	4b10      	ldr	r3, [pc, #64]	@ (800cab8 <xTimerGenericCommand+0x98>)
 800ca76:	6818      	ldr	r0, [r3, #0]
 800ca78:	f107 0114 	add.w	r1, r7, #20
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca80:	f7fe f852 	bl	800ab28 <xQueueGenericSend>
 800ca84:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca86:	e012      	b.n	800caae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca88:	4b0b      	ldr	r3, [pc, #44]	@ (800cab8 <xTimerGenericCommand+0x98>)
 800ca8a:	6818      	ldr	r0, [r3, #0]
 800ca8c:	f107 0114 	add.w	r1, r7, #20
 800ca90:	2300      	movs	r3, #0
 800ca92:	2200      	movs	r2, #0
 800ca94:	f7fe f848 	bl	800ab28 <xQueueGenericSend>
 800ca98:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca9a:	e008      	b.n	800caae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca9c:	4b06      	ldr	r3, [pc, #24]	@ (800cab8 <xTimerGenericCommand+0x98>)
 800ca9e:	6818      	ldr	r0, [r3, #0]
 800caa0:	f107 0114 	add.w	r1, r7, #20
 800caa4:	2300      	movs	r3, #0
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	f7fe f940 	bl	800ad2c <xQueueGenericSendFromISR>
 800caac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800caae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3728      	adds	r7, #40	@ 0x28
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	2000114c 	.word	0x2000114c

0800cabc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cac6:	4b23      	ldr	r3, [pc, #140]	@ (800cb54 <prvProcessExpiredTimer+0x98>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	3304      	adds	r3, #4
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fd febb 	bl	800a850 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cae0:	f003 0304 	and.w	r3, r3, #4
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d023      	beq.n	800cb30 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	699a      	ldr	r2, [r3, #24]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	18d1      	adds	r1, r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	683a      	ldr	r2, [r7, #0]
 800caf4:	6978      	ldr	r0, [r7, #20]
 800caf6:	f000 f8d5 	bl	800cca4 <prvInsertTimerInActiveList>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d020      	beq.n	800cb42 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb00:	2300      	movs	r3, #0
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	2300      	movs	r3, #0
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	2100      	movs	r1, #0
 800cb0a:	6978      	ldr	r0, [r7, #20]
 800cb0c:	f7ff ff88 	bl	800ca20 <xTimerGenericCommand>
 800cb10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d114      	bne.n	800cb42 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	60fb      	str	r3, [r7, #12]
}
 800cb2a:	bf00      	nop
 800cb2c:	bf00      	nop
 800cb2e:	e7fd      	b.n	800cb2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cb36:	f023 0301 	bic.w	r3, r3, #1
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	6978      	ldr	r0, [r7, #20]
 800cb48:	4798      	blx	r3
}
 800cb4a:	bf00      	nop
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20001144 	.word	0x20001144

0800cb58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb60:	f107 0308 	add.w	r3, r7, #8
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 f859 	bl	800cc1c <prvGetNextExpireTime>
 800cb6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 f805 	bl	800cb80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb76:	f000 f8d7 	bl	800cd28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb7a:	bf00      	nop
 800cb7c:	e7f0      	b.n	800cb60 <prvTimerTask+0x8>
	...

0800cb80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb8a:	f7ff f80b 	bl	800bba4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb8e:	f107 0308 	add.w	r3, r7, #8
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 f866 	bl	800cc64 <prvSampleTimeNow>
 800cb98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d130      	bne.n	800cc02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10a      	bne.n	800cbbc <prvProcessTimerOrBlockTask+0x3c>
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d806      	bhi.n	800cbbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbae:	f7ff f807 	bl	800bbc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbb2:	68f9      	ldr	r1, [r7, #12]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f7ff ff81 	bl	800cabc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbba:	e024      	b.n	800cc06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d008      	beq.n	800cbd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbc2:	4b13      	ldr	r3, [pc, #76]	@ (800cc10 <prvProcessTimerOrBlockTask+0x90>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <prvProcessTimerOrBlockTask+0x50>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e000      	b.n	800cbd2 <prvProcessTimerOrBlockTask+0x52>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbd4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <prvProcessTimerOrBlockTask+0x94>)
 800cbd6:	6818      	ldr	r0, [r3, #0]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	f7fe fb5d 	bl	800b2a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbe6:	f7fe ffeb 	bl	800bbc0 <xTaskResumeAll>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10a      	bne.n	800cc06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbf0:	4b09      	ldr	r3, [pc, #36]	@ (800cc18 <prvProcessTimerOrBlockTask+0x98>)
 800cbf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	f3bf 8f6f 	isb	sy
}
 800cc00:	e001      	b.n	800cc06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc02:	f7fe ffdd 	bl	800bbc0 <xTaskResumeAll>
}
 800cc06:	bf00      	nop
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20001148 	.word	0x20001148
 800cc14:	2000114c 	.word	0x2000114c
 800cc18:	e000ed04 	.word	0xe000ed04

0800cc1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc24:	4b0e      	ldr	r3, [pc, #56]	@ (800cc60 <prvGetNextExpireTime+0x44>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d101      	bne.n	800cc32 <prvGetNextExpireTime+0x16>
 800cc2e:	2201      	movs	r2, #1
 800cc30:	e000      	b.n	800cc34 <prvGetNextExpireTime+0x18>
 800cc32:	2200      	movs	r2, #0
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d105      	bne.n	800cc4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc40:	4b07      	ldr	r3, [pc, #28]	@ (800cc60 <prvGetNextExpireTime+0x44>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	60fb      	str	r3, [r7, #12]
 800cc4a:	e001      	b.n	800cc50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc50:	68fb      	ldr	r3, [r7, #12]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3714      	adds	r7, #20
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	20001144 	.word	0x20001144

0800cc64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc6c:	f7ff f846 	bl	800bcfc <xTaskGetTickCount>
 800cc70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc72:	4b0b      	ldr	r3, [pc, #44]	@ (800cca0 <prvSampleTimeNow+0x3c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d205      	bcs.n	800cc88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc7c:	f000 f91e 	bl	800cebc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2201      	movs	r2, #1
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	e002      	b.n	800cc8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc8e:	4a04      	ldr	r2, [pc, #16]	@ (800cca0 <prvSampleTimeNow+0x3c>)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc94:	68fb      	ldr	r3, [r7, #12]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	20001154 	.word	0x20001154

0800cca4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d812      	bhi.n	800ccf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d302      	bcc.n	800ccde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	617b      	str	r3, [r7, #20]
 800ccdc:	e01b      	b.n	800cd16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ccde:	4b10      	ldr	r3, [pc, #64]	@ (800cd20 <prvInsertTimerInActiveList+0x7c>)
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3304      	adds	r3, #4
 800cce6:	4619      	mov	r1, r3
 800cce8:	4610      	mov	r0, r2
 800ccea:	f7fd fd78 	bl	800a7de <vListInsert>
 800ccee:	e012      	b.n	800cd16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d206      	bcs.n	800cd06 <prvInsertTimerInActiveList+0x62>
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d302      	bcc.n	800cd06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd00:	2301      	movs	r3, #1
 800cd02:	617b      	str	r3, [r7, #20]
 800cd04:	e007      	b.n	800cd16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd06:	4b07      	ldr	r3, [pc, #28]	@ (800cd24 <prvInsertTimerInActiveList+0x80>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	4619      	mov	r1, r3
 800cd10:	4610      	mov	r0, r2
 800cd12:	f7fd fd64 	bl	800a7de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd16:	697b      	ldr	r3, [r7, #20]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	20001148 	.word	0x20001148
 800cd24:	20001144 	.word	0x20001144

0800cd28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08c      	sub	sp, #48	@ 0x30
 800cd2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd2e:	e0b2      	b.n	800ce96 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f2c0 80af 	blt.w	800ce96 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3e:	695b      	ldr	r3, [r3, #20]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d004      	beq.n	800cd4e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd46:	3304      	adds	r3, #4
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7fd fd81 	bl	800a850 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd4e:	1d3b      	adds	r3, r7, #4
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff ff87 	bl	800cc64 <prvSampleTimeNow>
 800cd56:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2b09      	cmp	r3, #9
 800cd5c:	f200 8098 	bhi.w	800ce90 <prvProcessReceivedCommands+0x168>
 800cd60:	a201      	add	r2, pc, #4	@ (adr r2, 800cd68 <prvProcessReceivedCommands+0x40>)
 800cd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd66:	bf00      	nop
 800cd68:	0800cd91 	.word	0x0800cd91
 800cd6c:	0800cd91 	.word	0x0800cd91
 800cd70:	0800cd91 	.word	0x0800cd91
 800cd74:	0800ce07 	.word	0x0800ce07
 800cd78:	0800ce1b 	.word	0x0800ce1b
 800cd7c:	0800ce67 	.word	0x0800ce67
 800cd80:	0800cd91 	.word	0x0800cd91
 800cd84:	0800cd91 	.word	0x0800cd91
 800cd88:	0800ce07 	.word	0x0800ce07
 800cd8c:	0800ce1b 	.word	0x0800ce1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda6:	699b      	ldr	r3, [r3, #24]
 800cda8:	18d1      	adds	r1, r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6a3a      	ldr	r2, [r7, #32]
 800cdae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdb0:	f7ff ff78 	bl	800cca4 <prvInsertTimerInActiveList>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d06c      	beq.n	800ce94 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbc:	6a1b      	ldr	r3, [r3, #32]
 800cdbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cdc8:	f003 0304 	and.w	r3, r3, #4
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d061      	beq.n	800ce94 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	441a      	add	r2, r3
 800cdd8:	2300      	movs	r3, #0
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	2300      	movs	r3, #0
 800cdde:	2100      	movs	r1, #0
 800cde0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cde2:	f7ff fe1d 	bl	800ca20 <xTimerGenericCommand>
 800cde6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d152      	bne.n	800ce94 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	61bb      	str	r3, [r7, #24]
}
 800ce00:	bf00      	nop
 800ce02:	bf00      	nop
 800ce04:	e7fd      	b.n	800ce02 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ce0c:	f023 0301 	bic.w	r3, r3, #1
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800ce18:	e03d      	b.n	800ce96 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ce20:	f043 0301 	orr.w	r3, r3, #1
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10b      	bne.n	800ce52 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800ce3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	617b      	str	r3, [r7, #20]
}
 800ce4c:	bf00      	nop
 800ce4e:	bf00      	nop
 800ce50:	e7fd      	b.n	800ce4e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce54:	699a      	ldr	r2, [r3, #24]
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	18d1      	adds	r1, r2, r3
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	6a3a      	ldr	r2, [r7, #32]
 800ce5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce60:	f7ff ff20 	bl	800cca4 <prvInsertTimerInActiveList>
					break;
 800ce64:	e017      	b.n	800ce96 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ce6c:	f003 0302 	and.w	r3, r3, #2
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d103      	bne.n	800ce7c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800ce74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce76:	f000 fbe7 	bl	800d648 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce7a:	e00c      	b.n	800ce96 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ce82:	f023 0301 	bic.w	r3, r3, #1
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800ce8e:	e002      	b.n	800ce96 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800ce90:	bf00      	nop
 800ce92:	e000      	b.n	800ce96 <prvProcessReceivedCommands+0x16e>
					break;
 800ce94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce96:	4b08      	ldr	r3, [pc, #32]	@ (800ceb8 <prvProcessReceivedCommands+0x190>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f107 0108 	add.w	r1, r7, #8
 800ce9e:	2200      	movs	r2, #0
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fd ffe1 	bl	800ae68 <xQueueReceive>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f47f af41 	bne.w	800cd30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	3728      	adds	r7, #40	@ 0x28
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	2000114c 	.word	0x2000114c

0800cebc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b088      	sub	sp, #32
 800cec0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cec2:	e049      	b.n	800cf58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cec4:	4b2e      	ldr	r3, [pc, #184]	@ (800cf80 <prvSwitchTimerLists+0xc4>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cece:	4b2c      	ldr	r3, [pc, #176]	@ (800cf80 <prvSwitchTimerLists+0xc4>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	3304      	adds	r3, #4
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fd fcb7 	bl	800a850 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6a1b      	ldr	r3, [r3, #32]
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cef0:	f003 0304 	and.w	r3, r3, #4
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d02f      	beq.n	800cf58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	699b      	ldr	r3, [r3, #24]
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	4413      	add	r3, r2
 800cf00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d90e      	bls.n	800cf28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf16:	4b1a      	ldr	r3, [pc, #104]	@ (800cf80 <prvSwitchTimerLists+0xc4>)
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4610      	mov	r0, r2
 800cf22:	f7fd fc5c 	bl	800a7de <vListInsert>
 800cf26:	e017      	b.n	800cf58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf28:	2300      	movs	r3, #0
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	2100      	movs	r1, #0
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f7ff fd74 	bl	800ca20 <xTimerGenericCommand>
 800cf38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10b      	bne.n	800cf58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	603b      	str	r3, [r7, #0]
}
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	e7fd      	b.n	800cf54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf58:	4b09      	ldr	r3, [pc, #36]	@ (800cf80 <prvSwitchTimerLists+0xc4>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1b0      	bne.n	800cec4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf62:	4b07      	ldr	r3, [pc, #28]	@ (800cf80 <prvSwitchTimerLists+0xc4>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf68:	4b06      	ldr	r3, [pc, #24]	@ (800cf84 <prvSwitchTimerLists+0xc8>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a04      	ldr	r2, [pc, #16]	@ (800cf80 <prvSwitchTimerLists+0xc4>)
 800cf6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf70:	4a04      	ldr	r2, [pc, #16]	@ (800cf84 <prvSwitchTimerLists+0xc8>)
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	6013      	str	r3, [r2, #0]
}
 800cf76:	bf00      	nop
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	20001144 	.word	0x20001144
 800cf84:	20001148 	.word	0x20001148

0800cf88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf8e:	f000 f96b 	bl	800d268 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf92:	4b15      	ldr	r3, [pc, #84]	@ (800cfe8 <prvCheckForValidListAndQueue+0x60>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d120      	bne.n	800cfdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf9a:	4814      	ldr	r0, [pc, #80]	@ (800cfec <prvCheckForValidListAndQueue+0x64>)
 800cf9c:	f7fd fbce 	bl	800a73c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cfa0:	4813      	ldr	r0, [pc, #76]	@ (800cff0 <prvCheckForValidListAndQueue+0x68>)
 800cfa2:	f7fd fbcb 	bl	800a73c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfa6:	4b13      	ldr	r3, [pc, #76]	@ (800cff4 <prvCheckForValidListAndQueue+0x6c>)
 800cfa8:	4a10      	ldr	r2, [pc, #64]	@ (800cfec <prvCheckForValidListAndQueue+0x64>)
 800cfaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cfac:	4b12      	ldr	r3, [pc, #72]	@ (800cff8 <prvCheckForValidListAndQueue+0x70>)
 800cfae:	4a10      	ldr	r2, [pc, #64]	@ (800cff0 <prvCheckForValidListAndQueue+0x68>)
 800cfb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	4b11      	ldr	r3, [pc, #68]	@ (800cffc <prvCheckForValidListAndQueue+0x74>)
 800cfb8:	4a11      	ldr	r2, [pc, #68]	@ (800d000 <prvCheckForValidListAndQueue+0x78>)
 800cfba:	210c      	movs	r1, #12
 800cfbc:	200a      	movs	r0, #10
 800cfbe:	f7fd fcdb 	bl	800a978 <xQueueGenericCreateStatic>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	4a08      	ldr	r2, [pc, #32]	@ (800cfe8 <prvCheckForValidListAndQueue+0x60>)
 800cfc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cfc8:	4b07      	ldr	r3, [pc, #28]	@ (800cfe8 <prvCheckForValidListAndQueue+0x60>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d005      	beq.n	800cfdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cfd0:	4b05      	ldr	r3, [pc, #20]	@ (800cfe8 <prvCheckForValidListAndQueue+0x60>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	490b      	ldr	r1, [pc, #44]	@ (800d004 <prvCheckForValidListAndQueue+0x7c>)
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe f938 	bl	800b24c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfdc:	f000 f976 	bl	800d2cc <vPortExitCritical>
}
 800cfe0:	bf00      	nop
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	2000114c 	.word	0x2000114c
 800cfec:	2000111c 	.word	0x2000111c
 800cff0:	20001130 	.word	0x20001130
 800cff4:	20001144 	.word	0x20001144
 800cff8:	20001148 	.word	0x20001148
 800cffc:	200011d0 	.word	0x200011d0
 800d000:	20001158 	.word	0x20001158
 800d004:	08012afc 	.word	0x08012afc

0800d008 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	3b04      	subs	r3, #4
 800d018:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3b04      	subs	r3, #4
 800d026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	f023 0201 	bic.w	r2, r3, #1
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3b04      	subs	r3, #4
 800d036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d038:	4a0c      	ldr	r2, [pc, #48]	@ (800d06c <pxPortInitialiseStack+0x64>)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3b14      	subs	r3, #20
 800d042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	3b04      	subs	r3, #4
 800d04e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f06f 0202 	mvn.w	r2, #2
 800d056:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3b20      	subs	r3, #32
 800d05c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d05e:	68fb      	ldr	r3, [r7, #12]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	0800d071 	.word	0x0800d071

0800d070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d07a:	4b13      	ldr	r3, [pc, #76]	@ (800d0c8 <prvTaskExitError+0x58>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d082:	d00b      	beq.n	800d09c <prvTaskExitError+0x2c>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60fb      	str	r3, [r7, #12]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <prvTaskExitError+0x28>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60bb      	str	r3, [r7, #8]
}
 800d0ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0b0:	bf00      	nop
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d0fc      	beq.n	800d0b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0b8:	bf00      	nop
 800d0ba:	bf00      	nop
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	20000038 	.word	0x20000038
 800d0cc:	00000000 	.word	0x00000000

0800d0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d0d0:	4b07      	ldr	r3, [pc, #28]	@ (800d0f0 <pxCurrentTCBConst2>)
 800d0d2:	6819      	ldr	r1, [r3, #0]
 800d0d4:	6808      	ldr	r0, [r1, #0]
 800d0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0da:	f380 8809 	msr	PSP, r0
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f04f 0000 	mov.w	r0, #0
 800d0e6:	f380 8811 	msr	BASEPRI, r0
 800d0ea:	4770      	bx	lr
 800d0ec:	f3af 8000 	nop.w

0800d0f0 <pxCurrentTCBConst2>:
 800d0f0:	20000ff0 	.word	0x20000ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop

0800d0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d0f8:	4808      	ldr	r0, [pc, #32]	@ (800d11c <prvPortStartFirstTask+0x24>)
 800d0fa:	6800      	ldr	r0, [r0, #0]
 800d0fc:	6800      	ldr	r0, [r0, #0]
 800d0fe:	f380 8808 	msr	MSP, r0
 800d102:	f04f 0000 	mov.w	r0, #0
 800d106:	f380 8814 	msr	CONTROL, r0
 800d10a:	b662      	cpsie	i
 800d10c:	b661      	cpsie	f
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	df00      	svc	0
 800d118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d11a:	bf00      	nop
 800d11c:	e000ed08 	.word	0xe000ed08

0800d120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d126:	4b47      	ldr	r3, [pc, #284]	@ (800d244 <xPortStartScheduler+0x124>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a47      	ldr	r2, [pc, #284]	@ (800d248 <xPortStartScheduler+0x128>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d10b      	bne.n	800d148 <xPortStartScheduler+0x28>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	60fb      	str	r3, [r7, #12]
}
 800d142:	bf00      	nop
 800d144:	bf00      	nop
 800d146:	e7fd      	b.n	800d144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d148:	4b3e      	ldr	r3, [pc, #248]	@ (800d244 <xPortStartScheduler+0x124>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a3f      	ldr	r2, [pc, #252]	@ (800d24c <xPortStartScheduler+0x12c>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d10b      	bne.n	800d16a <xPortStartScheduler+0x4a>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	613b      	str	r3, [r7, #16]
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d16a:	4b39      	ldr	r3, [pc, #228]	@ (800d250 <xPortStartScheduler+0x130>)
 800d16c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	22ff      	movs	r2, #255	@ 0xff
 800d17a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	b2db      	uxtb	r3, r3
 800d182:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d184:	78fb      	ldrb	r3, [r7, #3]
 800d186:	b2db      	uxtb	r3, r3
 800d188:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	4b31      	ldr	r3, [pc, #196]	@ (800d254 <xPortStartScheduler+0x134>)
 800d190:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d192:	4b31      	ldr	r3, [pc, #196]	@ (800d258 <xPortStartScheduler+0x138>)
 800d194:	2207      	movs	r2, #7
 800d196:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d198:	e009      	b.n	800d1ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d19a:	4b2f      	ldr	r3, [pc, #188]	@ (800d258 <xPortStartScheduler+0x138>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	4a2d      	ldr	r2, [pc, #180]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1a4:	78fb      	ldrb	r3, [r7, #3]
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	005b      	lsls	r3, r3, #1
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ae:	78fb      	ldrb	r3, [r7, #3]
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1b6:	2b80      	cmp	r3, #128	@ 0x80
 800d1b8:	d0ef      	beq.n	800d19a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1ba:	4b27      	ldr	r3, [pc, #156]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f1c3 0307 	rsb	r3, r3, #7
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d00b      	beq.n	800d1de <xPortStartScheduler+0xbe>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	60bb      	str	r3, [r7, #8]
}
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	e7fd      	b.n	800d1da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1de:	4b1e      	ldr	r3, [pc, #120]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	021b      	lsls	r3, r3, #8
 800d1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1e8:	4b1b      	ldr	r3, [pc, #108]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d1f0:	4a19      	ldr	r2, [pc, #100]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1fc:	4b17      	ldr	r3, [pc, #92]	@ (800d25c <xPortStartScheduler+0x13c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a16      	ldr	r2, [pc, #88]	@ (800d25c <xPortStartScheduler+0x13c>)
 800d202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d208:	4b14      	ldr	r3, [pc, #80]	@ (800d25c <xPortStartScheduler+0x13c>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a13      	ldr	r2, [pc, #76]	@ (800d25c <xPortStartScheduler+0x13c>)
 800d20e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d214:	f000 f8da 	bl	800d3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d218:	4b11      	ldr	r3, [pc, #68]	@ (800d260 <xPortStartScheduler+0x140>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d21e:	f000 f8f9 	bl	800d414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d222:	4b10      	ldr	r3, [pc, #64]	@ (800d264 <xPortStartScheduler+0x144>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a0f      	ldr	r2, [pc, #60]	@ (800d264 <xPortStartScheduler+0x144>)
 800d228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d22c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d22e:	f7ff ff63 	bl	800d0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d232:	f7fe fe2d 	bl	800be90 <vTaskSwitchContext>
	prvTaskExitError();
 800d236:	f7ff ff1b 	bl	800d070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3718      	adds	r7, #24
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	e000ed00 	.word	0xe000ed00
 800d248:	410fc271 	.word	0x410fc271
 800d24c:	410fc270 	.word	0x410fc270
 800d250:	e000e400 	.word	0xe000e400
 800d254:	20001218 	.word	0x20001218
 800d258:	2000121c 	.word	0x2000121c
 800d25c:	e000ed20 	.word	0xe000ed20
 800d260:	20000038 	.word	0x20000038
 800d264:	e000ef34 	.word	0xe000ef34

0800d268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	607b      	str	r3, [r7, #4]
}
 800d280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d282:	4b10      	ldr	r3, [pc, #64]	@ (800d2c4 <vPortEnterCritical+0x5c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3301      	adds	r3, #1
 800d288:	4a0e      	ldr	r2, [pc, #56]	@ (800d2c4 <vPortEnterCritical+0x5c>)
 800d28a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d28c:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c4 <vPortEnterCritical+0x5c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d110      	bne.n	800d2b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d294:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <vPortEnterCritical+0x60>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00b      	beq.n	800d2b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	603b      	str	r3, [r7, #0]
}
 800d2b0:	bf00      	nop
 800d2b2:	bf00      	nop
 800d2b4:	e7fd      	b.n	800d2b2 <vPortEnterCritical+0x4a>
	}
}
 800d2b6:	bf00      	nop
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	20000038 	.word	0x20000038
 800d2c8:	e000ed04 	.word	0xe000ed04

0800d2cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2d2:	4b12      	ldr	r3, [pc, #72]	@ (800d31c <vPortExitCritical+0x50>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10b      	bne.n	800d2f2 <vPortExitCritical+0x26>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	607b      	str	r3, [r7, #4]
}
 800d2ec:	bf00      	nop
 800d2ee:	bf00      	nop
 800d2f0:	e7fd      	b.n	800d2ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d31c <vPortExitCritical+0x50>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	4a08      	ldr	r2, [pc, #32]	@ (800d31c <vPortExitCritical+0x50>)
 800d2fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2fc:	4b07      	ldr	r3, [pc, #28]	@ (800d31c <vPortExitCritical+0x50>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d105      	bne.n	800d310 <vPortExitCritical+0x44>
 800d304:	2300      	movs	r3, #0
 800d306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	f383 8811 	msr	BASEPRI, r3
}
 800d30e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d310:	bf00      	nop
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	20000038 	.word	0x20000038

0800d320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d320:	f3ef 8009 	mrs	r0, PSP
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	4b15      	ldr	r3, [pc, #84]	@ (800d380 <pxCurrentTCBConst>)
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	f01e 0f10 	tst.w	lr, #16
 800d330:	bf08      	it	eq
 800d332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33a:	6010      	str	r0, [r2, #0]
 800d33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d344:	f380 8811 	msr	BASEPRI, r0
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f7fe fd9e 	bl	800be90 <vTaskSwitchContext>
 800d354:	f04f 0000 	mov.w	r0, #0
 800d358:	f380 8811 	msr	BASEPRI, r0
 800d35c:	bc09      	pop	{r0, r3}
 800d35e:	6819      	ldr	r1, [r3, #0]
 800d360:	6808      	ldr	r0, [r1, #0]
 800d362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d366:	f01e 0f10 	tst.w	lr, #16
 800d36a:	bf08      	it	eq
 800d36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d370:	f380 8809 	msr	PSP, r0
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	f3af 8000 	nop.w

0800d380 <pxCurrentTCBConst>:
 800d380:	20000ff0 	.word	0x20000ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d384:	bf00      	nop
 800d386:	bf00      	nop

0800d388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	607b      	str	r3, [r7, #4]
}
 800d3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3a2:	f7fe fcbb 	bl	800bd1c <xTaskIncrementTick>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d003      	beq.n	800d3b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3ac:	4b06      	ldr	r3, [pc, #24]	@ (800d3c8 <SysTick_Handler+0x40>)
 800d3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	f383 8811 	msr	BASEPRI, r3
}
 800d3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	e000ed04 	.word	0xe000ed04

0800d3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d400 <vPortSetupTimerInterrupt+0x34>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d404 <vPortSetupTimerInterrupt+0x38>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d408 <vPortSetupTimerInterrupt+0x3c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a0a      	ldr	r2, [pc, #40]	@ (800d40c <vPortSetupTimerInterrupt+0x40>)
 800d3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e6:	099b      	lsrs	r3, r3, #6
 800d3e8:	4a09      	ldr	r2, [pc, #36]	@ (800d410 <vPortSetupTimerInterrupt+0x44>)
 800d3ea:	3b01      	subs	r3, #1
 800d3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3ee:	4b04      	ldr	r3, [pc, #16]	@ (800d400 <vPortSetupTimerInterrupt+0x34>)
 800d3f0:	2207      	movs	r2, #7
 800d3f2:	601a      	str	r2, [r3, #0]
}
 800d3f4:	bf00      	nop
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	e000e010 	.word	0xe000e010
 800d404:	e000e018 	.word	0xe000e018
 800d408:	2000002c 	.word	0x2000002c
 800d40c:	10624dd3 	.word	0x10624dd3
 800d410:	e000e014 	.word	0xe000e014

0800d414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d414:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d424 <vPortEnableVFP+0x10>
 800d418:	6801      	ldr	r1, [r0, #0]
 800d41a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d41e:	6001      	str	r1, [r0, #0]
 800d420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d422:	bf00      	nop
 800d424:	e000ed88 	.word	0xe000ed88

0800d428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d42e:	f3ef 8305 	mrs	r3, IPSR
 800d432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2b0f      	cmp	r3, #15
 800d438:	d915      	bls.n	800d466 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d43a:	4a18      	ldr	r2, [pc, #96]	@ (800d49c <vPortValidateInterruptPriority+0x74>)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4413      	add	r3, r2
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d444:	4b16      	ldr	r3, [pc, #88]	@ (800d4a0 <vPortValidateInterruptPriority+0x78>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	7afa      	ldrb	r2, [r7, #11]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d20b      	bcs.n	800d466 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	607b      	str	r3, [r7, #4]
}
 800d460:	bf00      	nop
 800d462:	bf00      	nop
 800d464:	e7fd      	b.n	800d462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d466:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a4 <vPortValidateInterruptPriority+0x7c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d46e:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a8 <vPortValidateInterruptPriority+0x80>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d90b      	bls.n	800d48e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	603b      	str	r3, [r7, #0]
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	e7fd      	b.n	800d48a <vPortValidateInterruptPriority+0x62>
	}
 800d48e:	bf00      	nop
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	e000e3f0 	.word	0xe000e3f0
 800d4a0:	20001218 	.word	0x20001218
 800d4a4:	e000ed0c 	.word	0xe000ed0c
 800d4a8:	2000121c 	.word	0x2000121c

0800d4ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	@ 0x28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4b8:	f7fe fb74 	bl	800bba4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4bc:	4b5c      	ldr	r3, [pc, #368]	@ (800d630 <pvPortMalloc+0x184>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d101      	bne.n	800d4c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4c4:	f000 f924 	bl	800d710 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4c8:	4b5a      	ldr	r3, [pc, #360]	@ (800d634 <pvPortMalloc+0x188>)
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f040 8095 	bne.w	800d600 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d01e      	beq.n	800d51a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d4dc:	2208      	movs	r2, #8
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f003 0307 	and.w	r3, r3, #7
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d015      	beq.n	800d51a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f023 0307 	bic.w	r3, r3, #7
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f003 0307 	and.w	r3, r3, #7
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00b      	beq.n	800d51a <pvPortMalloc+0x6e>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	617b      	str	r3, [r7, #20]
}
 800d514:	bf00      	nop
 800d516:	bf00      	nop
 800d518:	e7fd      	b.n	800d516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d06f      	beq.n	800d600 <pvPortMalloc+0x154>
 800d520:	4b45      	ldr	r3, [pc, #276]	@ (800d638 <pvPortMalloc+0x18c>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	429a      	cmp	r2, r3
 800d528:	d86a      	bhi.n	800d600 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d52a:	4b44      	ldr	r3, [pc, #272]	@ (800d63c <pvPortMalloc+0x190>)
 800d52c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d52e:	4b43      	ldr	r3, [pc, #268]	@ (800d63c <pvPortMalloc+0x190>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d534:	e004      	b.n	800d540 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	429a      	cmp	r2, r3
 800d548:	d903      	bls.n	800d552 <pvPortMalloc+0xa6>
 800d54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1f1      	bne.n	800d536 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d552:	4b37      	ldr	r3, [pc, #220]	@ (800d630 <pvPortMalloc+0x184>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d558:	429a      	cmp	r2, r3
 800d55a:	d051      	beq.n	800d600 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2208      	movs	r2, #8
 800d562:	4413      	add	r3, r2
 800d564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	685a      	ldr	r2, [r3, #4]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	1ad2      	subs	r2, r2, r3
 800d576:	2308      	movs	r3, #8
 800d578:	005b      	lsls	r3, r3, #1
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d920      	bls.n	800d5c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d57e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4413      	add	r3, r2
 800d584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	f003 0307 	and.w	r3, r3, #7
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00b      	beq.n	800d5a8 <pvPortMalloc+0xfc>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	613b      	str	r3, [r7, #16]
}
 800d5a2:	bf00      	nop
 800d5a4:	bf00      	nop
 800d5a6:	e7fd      	b.n	800d5a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5ba:	69b8      	ldr	r0, [r7, #24]
 800d5bc:	f000 f90a 	bl	800d7d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5c0:	4b1d      	ldr	r3, [pc, #116]	@ (800d638 <pvPortMalloc+0x18c>)
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d638 <pvPortMalloc+0x18c>)
 800d5cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d638 <pvPortMalloc+0x18c>)
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	4b1b      	ldr	r3, [pc, #108]	@ (800d640 <pvPortMalloc+0x194>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d203      	bcs.n	800d5e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5da:	4b17      	ldr	r3, [pc, #92]	@ (800d638 <pvPortMalloc+0x18c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a18      	ldr	r2, [pc, #96]	@ (800d640 <pvPortMalloc+0x194>)
 800d5e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	4b13      	ldr	r3, [pc, #76]	@ (800d634 <pvPortMalloc+0x188>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	431a      	orrs	r2, r3
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d5f6:	4b13      	ldr	r3, [pc, #76]	@ (800d644 <pvPortMalloc+0x198>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	4a11      	ldr	r2, [pc, #68]	@ (800d644 <pvPortMalloc+0x198>)
 800d5fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d600:	f7fe fade 	bl	800bbc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	f003 0307 	and.w	r3, r3, #7
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00b      	beq.n	800d626 <pvPortMalloc+0x17a>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	60fb      	str	r3, [r7, #12]
}
 800d620:	bf00      	nop
 800d622:	bf00      	nop
 800d624:	e7fd      	b.n	800d622 <pvPortMalloc+0x176>
	return pvReturn;
 800d626:	69fb      	ldr	r3, [r7, #28]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3728      	adds	r7, #40	@ 0x28
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	20006048 	.word	0x20006048
 800d634:	2000605c 	.word	0x2000605c
 800d638:	2000604c 	.word	0x2000604c
 800d63c:	20006040 	.word	0x20006040
 800d640:	20006050 	.word	0x20006050
 800d644:	20006054 	.word	0x20006054

0800d648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d04f      	beq.n	800d6fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d65a:	2308      	movs	r3, #8
 800d65c:	425b      	negs	r3, r3
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	4413      	add	r3, r2
 800d662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	4b25      	ldr	r3, [pc, #148]	@ (800d704 <vPortFree+0xbc>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4013      	ands	r3, r2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10b      	bne.n	800d68e <vPortFree+0x46>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	60fb      	str	r3, [r7, #12]
}
 800d688:	bf00      	nop
 800d68a:	bf00      	nop
 800d68c:	e7fd      	b.n	800d68a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00b      	beq.n	800d6ae <vPortFree+0x66>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	60bb      	str	r3, [r7, #8]
}
 800d6a8:	bf00      	nop
 800d6aa:	bf00      	nop
 800d6ac:	e7fd      	b.n	800d6aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	685a      	ldr	r2, [r3, #4]
 800d6b2:	4b14      	ldr	r3, [pc, #80]	@ (800d704 <vPortFree+0xbc>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4013      	ands	r3, r2
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d01e      	beq.n	800d6fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d11a      	bne.n	800d6fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d704 <vPortFree+0xbc>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	43db      	mvns	r3, r3
 800d6ce:	401a      	ands	r2, r3
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6d4:	f7fe fa66 	bl	800bba4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d708 <vPortFree+0xc0>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	4a09      	ldr	r2, [pc, #36]	@ (800d708 <vPortFree+0xc0>)
 800d6e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6e6:	6938      	ldr	r0, [r7, #16]
 800d6e8:	f000 f874 	bl	800d7d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d6ec:	4b07      	ldr	r3, [pc, #28]	@ (800d70c <vPortFree+0xc4>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	4a06      	ldr	r2, [pc, #24]	@ (800d70c <vPortFree+0xc4>)
 800d6f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d6f6:	f7fe fa63 	bl	800bbc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6fa:	bf00      	nop
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	2000605c 	.word	0x2000605c
 800d708:	2000604c 	.word	0x2000604c
 800d70c:	20006058 	.word	0x20006058

0800d710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d716:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800d71a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d71c:	4b27      	ldr	r3, [pc, #156]	@ (800d7bc <prvHeapInit+0xac>)
 800d71e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f003 0307 	and.w	r3, r3, #7
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00c      	beq.n	800d744 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	3307      	adds	r3, #7
 800d72e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f023 0307 	bic.w	r3, r3, #7
 800d736:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	4a1f      	ldr	r2, [pc, #124]	@ (800d7bc <prvHeapInit+0xac>)
 800d740:	4413      	add	r3, r2
 800d742:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d748:	4a1d      	ldr	r2, [pc, #116]	@ (800d7c0 <prvHeapInit+0xb0>)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d74e:	4b1c      	ldr	r3, [pc, #112]	@ (800d7c0 <prvHeapInit+0xb0>)
 800d750:	2200      	movs	r2, #0
 800d752:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	4413      	add	r3, r2
 800d75a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d75c:	2208      	movs	r2, #8
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	1a9b      	subs	r3, r3, r2
 800d762:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f023 0307 	bic.w	r3, r3, #7
 800d76a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	4a15      	ldr	r2, [pc, #84]	@ (800d7c4 <prvHeapInit+0xb4>)
 800d770:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d772:	4b14      	ldr	r3, [pc, #80]	@ (800d7c4 <prvHeapInit+0xb4>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2200      	movs	r2, #0
 800d778:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d77a:	4b12      	ldr	r3, [pc, #72]	@ (800d7c4 <prvHeapInit+0xb4>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2200      	movs	r2, #0
 800d780:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	1ad2      	subs	r2, r2, r3
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d790:	4b0c      	ldr	r3, [pc, #48]	@ (800d7c4 <prvHeapInit+0xb4>)
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	4a0a      	ldr	r2, [pc, #40]	@ (800d7c8 <prvHeapInit+0xb8>)
 800d79e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	4a09      	ldr	r2, [pc, #36]	@ (800d7cc <prvHeapInit+0xbc>)
 800d7a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7a8:	4b09      	ldr	r3, [pc, #36]	@ (800d7d0 <prvHeapInit+0xc0>)
 800d7aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d7ae:	601a      	str	r2, [r3, #0]
}
 800d7b0:	bf00      	nop
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	20001220 	.word	0x20001220
 800d7c0:	20006040 	.word	0x20006040
 800d7c4:	20006048 	.word	0x20006048
 800d7c8:	20006050 	.word	0x20006050
 800d7cc:	2000604c 	.word	0x2000604c
 800d7d0:	2000605c 	.word	0x2000605c

0800d7d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7dc:	4b28      	ldr	r3, [pc, #160]	@ (800d880 <prvInsertBlockIntoFreeList+0xac>)
 800d7de:	60fb      	str	r3, [r7, #12]
 800d7e0:	e002      	b.n	800d7e8 <prvInsertBlockIntoFreeList+0x14>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d8f7      	bhi.n	800d7e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	429a      	cmp	r2, r3
 800d802:	d108      	bne.n	800d816 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	441a      	add	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	441a      	add	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	429a      	cmp	r2, r3
 800d828:	d118      	bne.n	800d85c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	4b15      	ldr	r3, [pc, #84]	@ (800d884 <prvInsertBlockIntoFreeList+0xb0>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	429a      	cmp	r2, r3
 800d834:	d00d      	beq.n	800d852 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	441a      	add	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	e008      	b.n	800d864 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d852:	4b0c      	ldr	r3, [pc, #48]	@ (800d884 <prvInsertBlockIntoFreeList+0xb0>)
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	e003      	b.n	800d864 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d002      	beq.n	800d872 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d872:	bf00      	nop
 800d874:	3714      	adds	r7, #20
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	20006040 	.word	0x20006040
 800d884:	20006048 	.word	0x20006048

0800d888 <malloc>:
 800d888:	4b02      	ldr	r3, [pc, #8]	@ (800d894 <malloc+0xc>)
 800d88a:	4601      	mov	r1, r0
 800d88c:	6818      	ldr	r0, [r3, #0]
 800d88e:	f000 b825 	b.w	800d8dc <_malloc_r>
 800d892:	bf00      	nop
 800d894:	200001b4 	.word	0x200001b4

0800d898 <sbrk_aligned>:
 800d898:	b570      	push	{r4, r5, r6, lr}
 800d89a:	4e0f      	ldr	r6, [pc, #60]	@ (800d8d8 <sbrk_aligned+0x40>)
 800d89c:	460c      	mov	r4, r1
 800d89e:	6831      	ldr	r1, [r6, #0]
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	b911      	cbnz	r1, 800d8aa <sbrk_aligned+0x12>
 800d8a4:	f001 ffca 	bl	800f83c <_sbrk_r>
 800d8a8:	6030      	str	r0, [r6, #0]
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	f001 ffc5 	bl	800f83c <_sbrk_r>
 800d8b2:	1c43      	adds	r3, r0, #1
 800d8b4:	d103      	bne.n	800d8be <sbrk_aligned+0x26>
 800d8b6:	f04f 34ff 	mov.w	r4, #4294967295
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	bd70      	pop	{r4, r5, r6, pc}
 800d8be:	1cc4      	adds	r4, r0, #3
 800d8c0:	f024 0403 	bic.w	r4, r4, #3
 800d8c4:	42a0      	cmp	r0, r4
 800d8c6:	d0f8      	beq.n	800d8ba <sbrk_aligned+0x22>
 800d8c8:	1a21      	subs	r1, r4, r0
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	f001 ffb6 	bl	800f83c <_sbrk_r>
 800d8d0:	3001      	adds	r0, #1
 800d8d2:	d1f2      	bne.n	800d8ba <sbrk_aligned+0x22>
 800d8d4:	e7ef      	b.n	800d8b6 <sbrk_aligned+0x1e>
 800d8d6:	bf00      	nop
 800d8d8:	20006060 	.word	0x20006060

0800d8dc <_malloc_r>:
 800d8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8e0:	1ccd      	adds	r5, r1, #3
 800d8e2:	f025 0503 	bic.w	r5, r5, #3
 800d8e6:	3508      	adds	r5, #8
 800d8e8:	2d0c      	cmp	r5, #12
 800d8ea:	bf38      	it	cc
 800d8ec:	250c      	movcc	r5, #12
 800d8ee:	2d00      	cmp	r5, #0
 800d8f0:	4606      	mov	r6, r0
 800d8f2:	db01      	blt.n	800d8f8 <_malloc_r+0x1c>
 800d8f4:	42a9      	cmp	r1, r5
 800d8f6:	d904      	bls.n	800d902 <_malloc_r+0x26>
 800d8f8:	230c      	movs	r3, #12
 800d8fa:	6033      	str	r3, [r6, #0]
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9d8 <_malloc_r+0xfc>
 800d906:	f000 f869 	bl	800d9dc <__malloc_lock>
 800d90a:	f8d8 3000 	ldr.w	r3, [r8]
 800d90e:	461c      	mov	r4, r3
 800d910:	bb44      	cbnz	r4, 800d964 <_malloc_r+0x88>
 800d912:	4629      	mov	r1, r5
 800d914:	4630      	mov	r0, r6
 800d916:	f7ff ffbf 	bl	800d898 <sbrk_aligned>
 800d91a:	1c43      	adds	r3, r0, #1
 800d91c:	4604      	mov	r4, r0
 800d91e:	d158      	bne.n	800d9d2 <_malloc_r+0xf6>
 800d920:	f8d8 4000 	ldr.w	r4, [r8]
 800d924:	4627      	mov	r7, r4
 800d926:	2f00      	cmp	r7, #0
 800d928:	d143      	bne.n	800d9b2 <_malloc_r+0xd6>
 800d92a:	2c00      	cmp	r4, #0
 800d92c:	d04b      	beq.n	800d9c6 <_malloc_r+0xea>
 800d92e:	6823      	ldr	r3, [r4, #0]
 800d930:	4639      	mov	r1, r7
 800d932:	4630      	mov	r0, r6
 800d934:	eb04 0903 	add.w	r9, r4, r3
 800d938:	f001 ff80 	bl	800f83c <_sbrk_r>
 800d93c:	4581      	cmp	r9, r0
 800d93e:	d142      	bne.n	800d9c6 <_malloc_r+0xea>
 800d940:	6821      	ldr	r1, [r4, #0]
 800d942:	1a6d      	subs	r5, r5, r1
 800d944:	4629      	mov	r1, r5
 800d946:	4630      	mov	r0, r6
 800d948:	f7ff ffa6 	bl	800d898 <sbrk_aligned>
 800d94c:	3001      	adds	r0, #1
 800d94e:	d03a      	beq.n	800d9c6 <_malloc_r+0xea>
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	442b      	add	r3, r5
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	f8d8 3000 	ldr.w	r3, [r8]
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	bb62      	cbnz	r2, 800d9b8 <_malloc_r+0xdc>
 800d95e:	f8c8 7000 	str.w	r7, [r8]
 800d962:	e00f      	b.n	800d984 <_malloc_r+0xa8>
 800d964:	6822      	ldr	r2, [r4, #0]
 800d966:	1b52      	subs	r2, r2, r5
 800d968:	d420      	bmi.n	800d9ac <_malloc_r+0xd0>
 800d96a:	2a0b      	cmp	r2, #11
 800d96c:	d917      	bls.n	800d99e <_malloc_r+0xc2>
 800d96e:	1961      	adds	r1, r4, r5
 800d970:	42a3      	cmp	r3, r4
 800d972:	6025      	str	r5, [r4, #0]
 800d974:	bf18      	it	ne
 800d976:	6059      	strne	r1, [r3, #4]
 800d978:	6863      	ldr	r3, [r4, #4]
 800d97a:	bf08      	it	eq
 800d97c:	f8c8 1000 	streq.w	r1, [r8]
 800d980:	5162      	str	r2, [r4, r5]
 800d982:	604b      	str	r3, [r1, #4]
 800d984:	4630      	mov	r0, r6
 800d986:	f000 f82f 	bl	800d9e8 <__malloc_unlock>
 800d98a:	f104 000b 	add.w	r0, r4, #11
 800d98e:	1d23      	adds	r3, r4, #4
 800d990:	f020 0007 	bic.w	r0, r0, #7
 800d994:	1ac2      	subs	r2, r0, r3
 800d996:	bf1c      	itt	ne
 800d998:	1a1b      	subne	r3, r3, r0
 800d99a:	50a3      	strne	r3, [r4, r2]
 800d99c:	e7af      	b.n	800d8fe <_malloc_r+0x22>
 800d99e:	6862      	ldr	r2, [r4, #4]
 800d9a0:	42a3      	cmp	r3, r4
 800d9a2:	bf0c      	ite	eq
 800d9a4:	f8c8 2000 	streq.w	r2, [r8]
 800d9a8:	605a      	strne	r2, [r3, #4]
 800d9aa:	e7eb      	b.n	800d984 <_malloc_r+0xa8>
 800d9ac:	4623      	mov	r3, r4
 800d9ae:	6864      	ldr	r4, [r4, #4]
 800d9b0:	e7ae      	b.n	800d910 <_malloc_r+0x34>
 800d9b2:	463c      	mov	r4, r7
 800d9b4:	687f      	ldr	r7, [r7, #4]
 800d9b6:	e7b6      	b.n	800d926 <_malloc_r+0x4a>
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	42a3      	cmp	r3, r4
 800d9be:	d1fb      	bne.n	800d9b8 <_malloc_r+0xdc>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	6053      	str	r3, [r2, #4]
 800d9c4:	e7de      	b.n	800d984 <_malloc_r+0xa8>
 800d9c6:	230c      	movs	r3, #12
 800d9c8:	6033      	str	r3, [r6, #0]
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f000 f80c 	bl	800d9e8 <__malloc_unlock>
 800d9d0:	e794      	b.n	800d8fc <_malloc_r+0x20>
 800d9d2:	6005      	str	r5, [r0, #0]
 800d9d4:	e7d6      	b.n	800d984 <_malloc_r+0xa8>
 800d9d6:	bf00      	nop
 800d9d8:	20006064 	.word	0x20006064

0800d9dc <__malloc_lock>:
 800d9dc:	4801      	ldr	r0, [pc, #4]	@ (800d9e4 <__malloc_lock+0x8>)
 800d9de:	f001 bf7a 	b.w	800f8d6 <__retarget_lock_acquire_recursive>
 800d9e2:	bf00      	nop
 800d9e4:	200061a8 	.word	0x200061a8

0800d9e8 <__malloc_unlock>:
 800d9e8:	4801      	ldr	r0, [pc, #4]	@ (800d9f0 <__malloc_unlock+0x8>)
 800d9ea:	f001 bf75 	b.w	800f8d8 <__retarget_lock_release_recursive>
 800d9ee:	bf00      	nop
 800d9f0:	200061a8 	.word	0x200061a8

0800d9f4 <sulp>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	ec45 4b10 	vmov	d0, r4, r5
 800d9fe:	4616      	mov	r6, r2
 800da00:	f003 fce4 	bl	80113cc <__ulp>
 800da04:	ec51 0b10 	vmov	r0, r1, d0
 800da08:	b17e      	cbz	r6, 800da2a <sulp+0x36>
 800da0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da0e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da12:	2b00      	cmp	r3, #0
 800da14:	dd09      	ble.n	800da2a <sulp+0x36>
 800da16:	051b      	lsls	r3, r3, #20
 800da18:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800da1c:	2400      	movs	r4, #0
 800da1e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800da22:	4622      	mov	r2, r4
 800da24:	462b      	mov	r3, r5
 800da26:	f7f2 fde7 	bl	80005f8 <__aeabi_dmul>
 800da2a:	ec41 0b10 	vmov	d0, r0, r1
 800da2e:	bd70      	pop	{r4, r5, r6, pc}

0800da30 <_strtod_l>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	b09f      	sub	sp, #124	@ 0x7c
 800da36:	460c      	mov	r4, r1
 800da38:	9217      	str	r2, [sp, #92]	@ 0x5c
 800da3a:	2200      	movs	r2, #0
 800da3c:	921a      	str	r2, [sp, #104]	@ 0x68
 800da3e:	9005      	str	r0, [sp, #20]
 800da40:	f04f 0a00 	mov.w	sl, #0
 800da44:	f04f 0b00 	mov.w	fp, #0
 800da48:	460a      	mov	r2, r1
 800da4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800da4c:	7811      	ldrb	r1, [r2, #0]
 800da4e:	292b      	cmp	r1, #43	@ 0x2b
 800da50:	d04a      	beq.n	800dae8 <_strtod_l+0xb8>
 800da52:	d838      	bhi.n	800dac6 <_strtod_l+0x96>
 800da54:	290d      	cmp	r1, #13
 800da56:	d832      	bhi.n	800dabe <_strtod_l+0x8e>
 800da58:	2908      	cmp	r1, #8
 800da5a:	d832      	bhi.n	800dac2 <_strtod_l+0x92>
 800da5c:	2900      	cmp	r1, #0
 800da5e:	d03b      	beq.n	800dad8 <_strtod_l+0xa8>
 800da60:	2200      	movs	r2, #0
 800da62:	920e      	str	r2, [sp, #56]	@ 0x38
 800da64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800da66:	782a      	ldrb	r2, [r5, #0]
 800da68:	2a30      	cmp	r2, #48	@ 0x30
 800da6a:	f040 80b2 	bne.w	800dbd2 <_strtod_l+0x1a2>
 800da6e:	786a      	ldrb	r2, [r5, #1]
 800da70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800da74:	2a58      	cmp	r2, #88	@ 0x58
 800da76:	d16e      	bne.n	800db56 <_strtod_l+0x126>
 800da78:	9302      	str	r3, [sp, #8]
 800da7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	ab1a      	add	r3, sp, #104	@ 0x68
 800da80:	9300      	str	r3, [sp, #0]
 800da82:	4a8f      	ldr	r2, [pc, #572]	@ (800dcc0 <_strtod_l+0x290>)
 800da84:	9805      	ldr	r0, [sp, #20]
 800da86:	ab1b      	add	r3, sp, #108	@ 0x6c
 800da88:	a919      	add	r1, sp, #100	@ 0x64
 800da8a:	f002 fe4f 	bl	801072c <__gethex>
 800da8e:	f010 060f 	ands.w	r6, r0, #15
 800da92:	4604      	mov	r4, r0
 800da94:	d005      	beq.n	800daa2 <_strtod_l+0x72>
 800da96:	2e06      	cmp	r6, #6
 800da98:	d128      	bne.n	800daec <_strtod_l+0xbc>
 800da9a:	3501      	adds	r5, #1
 800da9c:	2300      	movs	r3, #0
 800da9e:	9519      	str	r5, [sp, #100]	@ 0x64
 800daa0:	930e      	str	r3, [sp, #56]	@ 0x38
 800daa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f040 858e 	bne.w	800e5c6 <_strtod_l+0xb96>
 800daaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800daac:	b1cb      	cbz	r3, 800dae2 <_strtod_l+0xb2>
 800daae:	4652      	mov	r2, sl
 800dab0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dab4:	ec43 2b10 	vmov	d0, r2, r3
 800dab8:	b01f      	add	sp, #124	@ 0x7c
 800daba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dabe:	2920      	cmp	r1, #32
 800dac0:	d1ce      	bne.n	800da60 <_strtod_l+0x30>
 800dac2:	3201      	adds	r2, #1
 800dac4:	e7c1      	b.n	800da4a <_strtod_l+0x1a>
 800dac6:	292d      	cmp	r1, #45	@ 0x2d
 800dac8:	d1ca      	bne.n	800da60 <_strtod_l+0x30>
 800daca:	2101      	movs	r1, #1
 800dacc:	910e      	str	r1, [sp, #56]	@ 0x38
 800dace:	1c51      	adds	r1, r2, #1
 800dad0:	9119      	str	r1, [sp, #100]	@ 0x64
 800dad2:	7852      	ldrb	r2, [r2, #1]
 800dad4:	2a00      	cmp	r2, #0
 800dad6:	d1c5      	bne.n	800da64 <_strtod_l+0x34>
 800dad8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dada:	9419      	str	r4, [sp, #100]	@ 0x64
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f040 8570 	bne.w	800e5c2 <_strtod_l+0xb92>
 800dae2:	4652      	mov	r2, sl
 800dae4:	465b      	mov	r3, fp
 800dae6:	e7e5      	b.n	800dab4 <_strtod_l+0x84>
 800dae8:	2100      	movs	r1, #0
 800daea:	e7ef      	b.n	800dacc <_strtod_l+0x9c>
 800daec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800daee:	b13a      	cbz	r2, 800db00 <_strtod_l+0xd0>
 800daf0:	2135      	movs	r1, #53	@ 0x35
 800daf2:	a81c      	add	r0, sp, #112	@ 0x70
 800daf4:	f003 fd64 	bl	80115c0 <__copybits>
 800daf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dafa:	9805      	ldr	r0, [sp, #20]
 800dafc:	f003 f93a 	bl	8010d74 <_Bfree>
 800db00:	3e01      	subs	r6, #1
 800db02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db04:	2e04      	cmp	r6, #4
 800db06:	d806      	bhi.n	800db16 <_strtod_l+0xe6>
 800db08:	e8df f006 	tbb	[pc, r6]
 800db0c:	201d0314 	.word	0x201d0314
 800db10:	14          	.byte	0x14
 800db11:	00          	.byte	0x00
 800db12:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800db16:	05e1      	lsls	r1, r4, #23
 800db18:	bf48      	it	mi
 800db1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800db1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db22:	0d1b      	lsrs	r3, r3, #20
 800db24:	051b      	lsls	r3, r3, #20
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1bb      	bne.n	800daa2 <_strtod_l+0x72>
 800db2a:	f001 fea9 	bl	800f880 <__errno>
 800db2e:	2322      	movs	r3, #34	@ 0x22
 800db30:	6003      	str	r3, [r0, #0]
 800db32:	e7b6      	b.n	800daa2 <_strtod_l+0x72>
 800db34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800db38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800db3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800db40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db44:	e7e7      	b.n	800db16 <_strtod_l+0xe6>
 800db46:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800dcc8 <_strtod_l+0x298>
 800db4a:	e7e4      	b.n	800db16 <_strtod_l+0xe6>
 800db4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800db50:	f04f 3aff 	mov.w	sl, #4294967295
 800db54:	e7df      	b.n	800db16 <_strtod_l+0xe6>
 800db56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db58:	1c5a      	adds	r2, r3, #1
 800db5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800db5c:	785b      	ldrb	r3, [r3, #1]
 800db5e:	2b30      	cmp	r3, #48	@ 0x30
 800db60:	d0f9      	beq.n	800db56 <_strtod_l+0x126>
 800db62:	2b00      	cmp	r3, #0
 800db64:	d09d      	beq.n	800daa2 <_strtod_l+0x72>
 800db66:	2301      	movs	r3, #1
 800db68:	2700      	movs	r7, #0
 800db6a:	9308      	str	r3, [sp, #32]
 800db6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db6e:	930c      	str	r3, [sp, #48]	@ 0x30
 800db70:	970b      	str	r7, [sp, #44]	@ 0x2c
 800db72:	46b9      	mov	r9, r7
 800db74:	220a      	movs	r2, #10
 800db76:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800db78:	7805      	ldrb	r5, [r0, #0]
 800db7a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800db7e:	b2d9      	uxtb	r1, r3
 800db80:	2909      	cmp	r1, #9
 800db82:	d928      	bls.n	800dbd6 <_strtod_l+0x1a6>
 800db84:	494f      	ldr	r1, [pc, #316]	@ (800dcc4 <_strtod_l+0x294>)
 800db86:	2201      	movs	r2, #1
 800db88:	f001 fdaf 	bl	800f6ea <strncmp>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d032      	beq.n	800dbf6 <_strtod_l+0x1c6>
 800db90:	2000      	movs	r0, #0
 800db92:	462a      	mov	r2, r5
 800db94:	900a      	str	r0, [sp, #40]	@ 0x28
 800db96:	464d      	mov	r5, r9
 800db98:	4603      	mov	r3, r0
 800db9a:	2a65      	cmp	r2, #101	@ 0x65
 800db9c:	d001      	beq.n	800dba2 <_strtod_l+0x172>
 800db9e:	2a45      	cmp	r2, #69	@ 0x45
 800dba0:	d114      	bne.n	800dbcc <_strtod_l+0x19c>
 800dba2:	b91d      	cbnz	r5, 800dbac <_strtod_l+0x17c>
 800dba4:	9a08      	ldr	r2, [sp, #32]
 800dba6:	4302      	orrs	r2, r0
 800dba8:	d096      	beq.n	800dad8 <_strtod_l+0xa8>
 800dbaa:	2500      	movs	r5, #0
 800dbac:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dbae:	1c62      	adds	r2, r4, #1
 800dbb0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbb2:	7862      	ldrb	r2, [r4, #1]
 800dbb4:	2a2b      	cmp	r2, #43	@ 0x2b
 800dbb6:	d07a      	beq.n	800dcae <_strtod_l+0x27e>
 800dbb8:	2a2d      	cmp	r2, #45	@ 0x2d
 800dbba:	d07e      	beq.n	800dcba <_strtod_l+0x28a>
 800dbbc:	f04f 0c00 	mov.w	ip, #0
 800dbc0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dbc4:	2909      	cmp	r1, #9
 800dbc6:	f240 8085 	bls.w	800dcd4 <_strtod_l+0x2a4>
 800dbca:	9419      	str	r4, [sp, #100]	@ 0x64
 800dbcc:	f04f 0800 	mov.w	r8, #0
 800dbd0:	e0a5      	b.n	800dd1e <_strtod_l+0x2ee>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	e7c8      	b.n	800db68 <_strtod_l+0x138>
 800dbd6:	f1b9 0f08 	cmp.w	r9, #8
 800dbda:	bfd8      	it	le
 800dbdc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800dbde:	f100 0001 	add.w	r0, r0, #1
 800dbe2:	bfda      	itte	le
 800dbe4:	fb02 3301 	mlale	r3, r2, r1, r3
 800dbe8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800dbea:	fb02 3707 	mlagt	r7, r2, r7, r3
 800dbee:	f109 0901 	add.w	r9, r9, #1
 800dbf2:	9019      	str	r0, [sp, #100]	@ 0x64
 800dbf4:	e7bf      	b.n	800db76 <_strtod_l+0x146>
 800dbf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbfc:	785a      	ldrb	r2, [r3, #1]
 800dbfe:	f1b9 0f00 	cmp.w	r9, #0
 800dc02:	d03b      	beq.n	800dc7c <_strtod_l+0x24c>
 800dc04:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc06:	464d      	mov	r5, r9
 800dc08:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	d912      	bls.n	800dc36 <_strtod_l+0x206>
 800dc10:	2301      	movs	r3, #1
 800dc12:	e7c2      	b.n	800db9a <_strtod_l+0x16a>
 800dc14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc16:	1c5a      	adds	r2, r3, #1
 800dc18:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc1a:	785a      	ldrb	r2, [r3, #1]
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	2a30      	cmp	r2, #48	@ 0x30
 800dc20:	d0f8      	beq.n	800dc14 <_strtod_l+0x1e4>
 800dc22:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dc26:	2b08      	cmp	r3, #8
 800dc28:	f200 84d2 	bhi.w	800e5d0 <_strtod_l+0xba0>
 800dc2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc2e:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc30:	2000      	movs	r0, #0
 800dc32:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc34:	4605      	mov	r5, r0
 800dc36:	3a30      	subs	r2, #48	@ 0x30
 800dc38:	f100 0301 	add.w	r3, r0, #1
 800dc3c:	d018      	beq.n	800dc70 <_strtod_l+0x240>
 800dc3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc40:	4419      	add	r1, r3
 800dc42:	910a      	str	r1, [sp, #40]	@ 0x28
 800dc44:	462e      	mov	r6, r5
 800dc46:	f04f 0e0a 	mov.w	lr, #10
 800dc4a:	1c71      	adds	r1, r6, #1
 800dc4c:	eba1 0c05 	sub.w	ip, r1, r5
 800dc50:	4563      	cmp	r3, ip
 800dc52:	dc15      	bgt.n	800dc80 <_strtod_l+0x250>
 800dc54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dc58:	182b      	adds	r3, r5, r0
 800dc5a:	2b08      	cmp	r3, #8
 800dc5c:	f105 0501 	add.w	r5, r5, #1
 800dc60:	4405      	add	r5, r0
 800dc62:	dc1a      	bgt.n	800dc9a <_strtod_l+0x26a>
 800dc64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc66:	230a      	movs	r3, #10
 800dc68:	fb03 2301 	mla	r3, r3, r1, r2
 800dc6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc6e:	2300      	movs	r3, #0
 800dc70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dc72:	1c51      	adds	r1, r2, #1
 800dc74:	9119      	str	r1, [sp, #100]	@ 0x64
 800dc76:	7852      	ldrb	r2, [r2, #1]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	e7c5      	b.n	800dc08 <_strtod_l+0x1d8>
 800dc7c:	4648      	mov	r0, r9
 800dc7e:	e7ce      	b.n	800dc1e <_strtod_l+0x1ee>
 800dc80:	2e08      	cmp	r6, #8
 800dc82:	dc05      	bgt.n	800dc90 <_strtod_l+0x260>
 800dc84:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dc86:	fb0e f606 	mul.w	r6, lr, r6
 800dc8a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800dc8c:	460e      	mov	r6, r1
 800dc8e:	e7dc      	b.n	800dc4a <_strtod_l+0x21a>
 800dc90:	2910      	cmp	r1, #16
 800dc92:	bfd8      	it	le
 800dc94:	fb0e f707 	mulle.w	r7, lr, r7
 800dc98:	e7f8      	b.n	800dc8c <_strtod_l+0x25c>
 800dc9a:	2b0f      	cmp	r3, #15
 800dc9c:	bfdc      	itt	le
 800dc9e:	230a      	movle	r3, #10
 800dca0:	fb03 2707 	mlale	r7, r3, r7, r2
 800dca4:	e7e3      	b.n	800dc6e <_strtod_l+0x23e>
 800dca6:	2300      	movs	r3, #0
 800dca8:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e77a      	b.n	800dba4 <_strtod_l+0x174>
 800dcae:	f04f 0c00 	mov.w	ip, #0
 800dcb2:	1ca2      	adds	r2, r4, #2
 800dcb4:	9219      	str	r2, [sp, #100]	@ 0x64
 800dcb6:	78a2      	ldrb	r2, [r4, #2]
 800dcb8:	e782      	b.n	800dbc0 <_strtod_l+0x190>
 800dcba:	f04f 0c01 	mov.w	ip, #1
 800dcbe:	e7f8      	b.n	800dcb2 <_strtod_l+0x282>
 800dcc0:	08012d64 	.word	0x08012d64
 800dcc4:	08012b60 	.word	0x08012b60
 800dcc8:	7ff00000 	.word	0x7ff00000
 800dccc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dcce:	1c51      	adds	r1, r2, #1
 800dcd0:	9119      	str	r1, [sp, #100]	@ 0x64
 800dcd2:	7852      	ldrb	r2, [r2, #1]
 800dcd4:	2a30      	cmp	r2, #48	@ 0x30
 800dcd6:	d0f9      	beq.n	800dccc <_strtod_l+0x29c>
 800dcd8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dcdc:	2908      	cmp	r1, #8
 800dcde:	f63f af75 	bhi.w	800dbcc <_strtod_l+0x19c>
 800dce2:	3a30      	subs	r2, #48	@ 0x30
 800dce4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dce6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dce8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dcea:	f04f 080a 	mov.w	r8, #10
 800dcee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dcf0:	1c56      	adds	r6, r2, #1
 800dcf2:	9619      	str	r6, [sp, #100]	@ 0x64
 800dcf4:	7852      	ldrb	r2, [r2, #1]
 800dcf6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dcfa:	f1be 0f09 	cmp.w	lr, #9
 800dcfe:	d939      	bls.n	800dd74 <_strtod_l+0x344>
 800dd00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd02:	1a76      	subs	r6, r6, r1
 800dd04:	2e08      	cmp	r6, #8
 800dd06:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dd0a:	dc03      	bgt.n	800dd14 <_strtod_l+0x2e4>
 800dd0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd0e:	4588      	cmp	r8, r1
 800dd10:	bfa8      	it	ge
 800dd12:	4688      	movge	r8, r1
 800dd14:	f1bc 0f00 	cmp.w	ip, #0
 800dd18:	d001      	beq.n	800dd1e <_strtod_l+0x2ee>
 800dd1a:	f1c8 0800 	rsb	r8, r8, #0
 800dd1e:	2d00      	cmp	r5, #0
 800dd20:	d14e      	bne.n	800ddc0 <_strtod_l+0x390>
 800dd22:	9908      	ldr	r1, [sp, #32]
 800dd24:	4308      	orrs	r0, r1
 800dd26:	f47f aebc 	bne.w	800daa2 <_strtod_l+0x72>
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f47f aed4 	bne.w	800dad8 <_strtod_l+0xa8>
 800dd30:	2a69      	cmp	r2, #105	@ 0x69
 800dd32:	d028      	beq.n	800dd86 <_strtod_l+0x356>
 800dd34:	dc25      	bgt.n	800dd82 <_strtod_l+0x352>
 800dd36:	2a49      	cmp	r2, #73	@ 0x49
 800dd38:	d025      	beq.n	800dd86 <_strtod_l+0x356>
 800dd3a:	2a4e      	cmp	r2, #78	@ 0x4e
 800dd3c:	f47f aecc 	bne.w	800dad8 <_strtod_l+0xa8>
 800dd40:	499a      	ldr	r1, [pc, #616]	@ (800dfac <_strtod_l+0x57c>)
 800dd42:	a819      	add	r0, sp, #100	@ 0x64
 800dd44:	f002 ff14 	bl	8010b70 <__match>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	f43f aec5 	beq.w	800dad8 <_strtod_l+0xa8>
 800dd4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	2b28      	cmp	r3, #40	@ 0x28
 800dd54:	d12e      	bne.n	800ddb4 <_strtod_l+0x384>
 800dd56:	4996      	ldr	r1, [pc, #600]	@ (800dfb0 <_strtod_l+0x580>)
 800dd58:	aa1c      	add	r2, sp, #112	@ 0x70
 800dd5a:	a819      	add	r0, sp, #100	@ 0x64
 800dd5c:	f002 ff1c 	bl	8010b98 <__hexnan>
 800dd60:	2805      	cmp	r0, #5
 800dd62:	d127      	bne.n	800ddb4 <_strtod_l+0x384>
 800dd64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd66:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dd6a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dd6e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dd72:	e696      	b.n	800daa2 <_strtod_l+0x72>
 800dd74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd76:	fb08 2101 	mla	r1, r8, r1, r2
 800dd7a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dd7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd80:	e7b5      	b.n	800dcee <_strtod_l+0x2be>
 800dd82:	2a6e      	cmp	r2, #110	@ 0x6e
 800dd84:	e7da      	b.n	800dd3c <_strtod_l+0x30c>
 800dd86:	498b      	ldr	r1, [pc, #556]	@ (800dfb4 <_strtod_l+0x584>)
 800dd88:	a819      	add	r0, sp, #100	@ 0x64
 800dd8a:	f002 fef1 	bl	8010b70 <__match>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	f43f aea2 	beq.w	800dad8 <_strtod_l+0xa8>
 800dd94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd96:	4988      	ldr	r1, [pc, #544]	@ (800dfb8 <_strtod_l+0x588>)
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	a819      	add	r0, sp, #100	@ 0x64
 800dd9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800dd9e:	f002 fee7 	bl	8010b70 <__match>
 800dda2:	b910      	cbnz	r0, 800ddaa <_strtod_l+0x37a>
 800dda4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dda6:	3301      	adds	r3, #1
 800dda8:	9319      	str	r3, [sp, #100]	@ 0x64
 800ddaa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800dfc8 <_strtod_l+0x598>
 800ddae:	f04f 0a00 	mov.w	sl, #0
 800ddb2:	e676      	b.n	800daa2 <_strtod_l+0x72>
 800ddb4:	4881      	ldr	r0, [pc, #516]	@ (800dfbc <_strtod_l+0x58c>)
 800ddb6:	f001 fd9f 	bl	800f8f8 <nan>
 800ddba:	ec5b ab10 	vmov	sl, fp, d0
 800ddbe:	e670      	b.n	800daa2 <_strtod_l+0x72>
 800ddc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddc2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ddc4:	eba8 0303 	sub.w	r3, r8, r3
 800ddc8:	f1b9 0f00 	cmp.w	r9, #0
 800ddcc:	bf08      	it	eq
 800ddce:	46a9      	moveq	r9, r5
 800ddd0:	2d10      	cmp	r5, #16
 800ddd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddd4:	462c      	mov	r4, r5
 800ddd6:	bfa8      	it	ge
 800ddd8:	2410      	movge	r4, #16
 800ddda:	f7f2 fb93 	bl	8000504 <__aeabi_ui2d>
 800ddde:	2d09      	cmp	r5, #9
 800dde0:	4682      	mov	sl, r0
 800dde2:	468b      	mov	fp, r1
 800dde4:	dc13      	bgt.n	800de0e <_strtod_l+0x3de>
 800dde6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f43f ae5a 	beq.w	800daa2 <_strtod_l+0x72>
 800ddee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddf0:	dd78      	ble.n	800dee4 <_strtod_l+0x4b4>
 800ddf2:	2b16      	cmp	r3, #22
 800ddf4:	dc5f      	bgt.n	800deb6 <_strtod_l+0x486>
 800ddf6:	4972      	ldr	r1, [pc, #456]	@ (800dfc0 <_strtod_l+0x590>)
 800ddf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ddfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de00:	4652      	mov	r2, sl
 800de02:	465b      	mov	r3, fp
 800de04:	f7f2 fbf8 	bl	80005f8 <__aeabi_dmul>
 800de08:	4682      	mov	sl, r0
 800de0a:	468b      	mov	fp, r1
 800de0c:	e649      	b.n	800daa2 <_strtod_l+0x72>
 800de0e:	4b6c      	ldr	r3, [pc, #432]	@ (800dfc0 <_strtod_l+0x590>)
 800de10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800de18:	f7f2 fbee 	bl	80005f8 <__aeabi_dmul>
 800de1c:	4682      	mov	sl, r0
 800de1e:	4638      	mov	r0, r7
 800de20:	468b      	mov	fp, r1
 800de22:	f7f2 fb6f 	bl	8000504 <__aeabi_ui2d>
 800de26:	4602      	mov	r2, r0
 800de28:	460b      	mov	r3, r1
 800de2a:	4650      	mov	r0, sl
 800de2c:	4659      	mov	r1, fp
 800de2e:	f7f2 fa2d 	bl	800028c <__adddf3>
 800de32:	2d0f      	cmp	r5, #15
 800de34:	4682      	mov	sl, r0
 800de36:	468b      	mov	fp, r1
 800de38:	ddd5      	ble.n	800dde6 <_strtod_l+0x3b6>
 800de3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de3c:	1b2c      	subs	r4, r5, r4
 800de3e:	441c      	add	r4, r3
 800de40:	2c00      	cmp	r4, #0
 800de42:	f340 8093 	ble.w	800df6c <_strtod_l+0x53c>
 800de46:	f014 030f 	ands.w	r3, r4, #15
 800de4a:	d00a      	beq.n	800de62 <_strtod_l+0x432>
 800de4c:	495c      	ldr	r1, [pc, #368]	@ (800dfc0 <_strtod_l+0x590>)
 800de4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de52:	4652      	mov	r2, sl
 800de54:	465b      	mov	r3, fp
 800de56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de5a:	f7f2 fbcd 	bl	80005f8 <__aeabi_dmul>
 800de5e:	4682      	mov	sl, r0
 800de60:	468b      	mov	fp, r1
 800de62:	f034 040f 	bics.w	r4, r4, #15
 800de66:	d073      	beq.n	800df50 <_strtod_l+0x520>
 800de68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800de6c:	dd49      	ble.n	800df02 <_strtod_l+0x4d2>
 800de6e:	2400      	movs	r4, #0
 800de70:	46a0      	mov	r8, r4
 800de72:	940b      	str	r4, [sp, #44]	@ 0x2c
 800de74:	46a1      	mov	r9, r4
 800de76:	9a05      	ldr	r2, [sp, #20]
 800de78:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800dfc8 <_strtod_l+0x598>
 800de7c:	2322      	movs	r3, #34	@ 0x22
 800de7e:	6013      	str	r3, [r2, #0]
 800de80:	f04f 0a00 	mov.w	sl, #0
 800de84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de86:	2b00      	cmp	r3, #0
 800de88:	f43f ae0b 	beq.w	800daa2 <_strtod_l+0x72>
 800de8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de8e:	9805      	ldr	r0, [sp, #20]
 800de90:	f002 ff70 	bl	8010d74 <_Bfree>
 800de94:	9805      	ldr	r0, [sp, #20]
 800de96:	4649      	mov	r1, r9
 800de98:	f002 ff6c 	bl	8010d74 <_Bfree>
 800de9c:	9805      	ldr	r0, [sp, #20]
 800de9e:	4641      	mov	r1, r8
 800dea0:	f002 ff68 	bl	8010d74 <_Bfree>
 800dea4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dea6:	9805      	ldr	r0, [sp, #20]
 800dea8:	f002 ff64 	bl	8010d74 <_Bfree>
 800deac:	9805      	ldr	r0, [sp, #20]
 800deae:	4621      	mov	r1, r4
 800deb0:	f002 ff60 	bl	8010d74 <_Bfree>
 800deb4:	e5f5      	b.n	800daa2 <_strtod_l+0x72>
 800deb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800deb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800debc:	4293      	cmp	r3, r2
 800debe:	dbbc      	blt.n	800de3a <_strtod_l+0x40a>
 800dec0:	4c3f      	ldr	r4, [pc, #252]	@ (800dfc0 <_strtod_l+0x590>)
 800dec2:	f1c5 050f 	rsb	r5, r5, #15
 800dec6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800deca:	4652      	mov	r2, sl
 800decc:	465b      	mov	r3, fp
 800dece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ded2:	f7f2 fb91 	bl	80005f8 <__aeabi_dmul>
 800ded6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ded8:	1b5d      	subs	r5, r3, r5
 800deda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dede:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dee2:	e78f      	b.n	800de04 <_strtod_l+0x3d4>
 800dee4:	3316      	adds	r3, #22
 800dee6:	dba8      	blt.n	800de3a <_strtod_l+0x40a>
 800dee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800deea:	eba3 0808 	sub.w	r8, r3, r8
 800deee:	4b34      	ldr	r3, [pc, #208]	@ (800dfc0 <_strtod_l+0x590>)
 800def0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800def4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800def8:	4650      	mov	r0, sl
 800defa:	4659      	mov	r1, fp
 800defc:	f7f2 fca6 	bl	800084c <__aeabi_ddiv>
 800df00:	e782      	b.n	800de08 <_strtod_l+0x3d8>
 800df02:	2300      	movs	r3, #0
 800df04:	4f2f      	ldr	r7, [pc, #188]	@ (800dfc4 <_strtod_l+0x594>)
 800df06:	1124      	asrs	r4, r4, #4
 800df08:	4650      	mov	r0, sl
 800df0a:	4659      	mov	r1, fp
 800df0c:	461e      	mov	r6, r3
 800df0e:	2c01      	cmp	r4, #1
 800df10:	dc21      	bgt.n	800df56 <_strtod_l+0x526>
 800df12:	b10b      	cbz	r3, 800df18 <_strtod_l+0x4e8>
 800df14:	4682      	mov	sl, r0
 800df16:	468b      	mov	fp, r1
 800df18:	492a      	ldr	r1, [pc, #168]	@ (800dfc4 <_strtod_l+0x594>)
 800df1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df22:	4652      	mov	r2, sl
 800df24:	465b      	mov	r3, fp
 800df26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df2a:	f7f2 fb65 	bl	80005f8 <__aeabi_dmul>
 800df2e:	4b26      	ldr	r3, [pc, #152]	@ (800dfc8 <_strtod_l+0x598>)
 800df30:	460a      	mov	r2, r1
 800df32:	400b      	ands	r3, r1
 800df34:	4925      	ldr	r1, [pc, #148]	@ (800dfcc <_strtod_l+0x59c>)
 800df36:	428b      	cmp	r3, r1
 800df38:	4682      	mov	sl, r0
 800df3a:	d898      	bhi.n	800de6e <_strtod_l+0x43e>
 800df3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800df40:	428b      	cmp	r3, r1
 800df42:	bf86      	itte	hi
 800df44:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800dfd0 <_strtod_l+0x5a0>
 800df48:	f04f 3aff 	movhi.w	sl, #4294967295
 800df4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800df50:	2300      	movs	r3, #0
 800df52:	9308      	str	r3, [sp, #32]
 800df54:	e076      	b.n	800e044 <_strtod_l+0x614>
 800df56:	07e2      	lsls	r2, r4, #31
 800df58:	d504      	bpl.n	800df64 <_strtod_l+0x534>
 800df5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df5e:	f7f2 fb4b 	bl	80005f8 <__aeabi_dmul>
 800df62:	2301      	movs	r3, #1
 800df64:	3601      	adds	r6, #1
 800df66:	1064      	asrs	r4, r4, #1
 800df68:	3708      	adds	r7, #8
 800df6a:	e7d0      	b.n	800df0e <_strtod_l+0x4de>
 800df6c:	d0f0      	beq.n	800df50 <_strtod_l+0x520>
 800df6e:	4264      	negs	r4, r4
 800df70:	f014 020f 	ands.w	r2, r4, #15
 800df74:	d00a      	beq.n	800df8c <_strtod_l+0x55c>
 800df76:	4b12      	ldr	r3, [pc, #72]	@ (800dfc0 <_strtod_l+0x590>)
 800df78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df7c:	4650      	mov	r0, sl
 800df7e:	4659      	mov	r1, fp
 800df80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df84:	f7f2 fc62 	bl	800084c <__aeabi_ddiv>
 800df88:	4682      	mov	sl, r0
 800df8a:	468b      	mov	fp, r1
 800df8c:	1124      	asrs	r4, r4, #4
 800df8e:	d0df      	beq.n	800df50 <_strtod_l+0x520>
 800df90:	2c1f      	cmp	r4, #31
 800df92:	dd1f      	ble.n	800dfd4 <_strtod_l+0x5a4>
 800df94:	2400      	movs	r4, #0
 800df96:	46a0      	mov	r8, r4
 800df98:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df9a:	46a1      	mov	r9, r4
 800df9c:	9a05      	ldr	r2, [sp, #20]
 800df9e:	2322      	movs	r3, #34	@ 0x22
 800dfa0:	f04f 0a00 	mov.w	sl, #0
 800dfa4:	f04f 0b00 	mov.w	fp, #0
 800dfa8:	6013      	str	r3, [r2, #0]
 800dfaa:	e76b      	b.n	800de84 <_strtod_l+0x454>
 800dfac:	08012b6f 	.word	0x08012b6f
 800dfb0:	08012d50 	.word	0x08012d50
 800dfb4:	08012b67 	.word	0x08012b67
 800dfb8:	08012ba4 	.word	0x08012ba4
 800dfbc:	08012d4e 	.word	0x08012d4e
 800dfc0:	08012ed8 	.word	0x08012ed8
 800dfc4:	08012eb0 	.word	0x08012eb0
 800dfc8:	7ff00000 	.word	0x7ff00000
 800dfcc:	7ca00000 	.word	0x7ca00000
 800dfd0:	7fefffff 	.word	0x7fefffff
 800dfd4:	f014 0310 	ands.w	r3, r4, #16
 800dfd8:	bf18      	it	ne
 800dfda:	236a      	movne	r3, #106	@ 0x6a
 800dfdc:	4ea9      	ldr	r6, [pc, #676]	@ (800e284 <_strtod_l+0x854>)
 800dfde:	9308      	str	r3, [sp, #32]
 800dfe0:	4650      	mov	r0, sl
 800dfe2:	4659      	mov	r1, fp
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	07e7      	lsls	r7, r4, #31
 800dfe8:	d504      	bpl.n	800dff4 <_strtod_l+0x5c4>
 800dfea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dfee:	f7f2 fb03 	bl	80005f8 <__aeabi_dmul>
 800dff2:	2301      	movs	r3, #1
 800dff4:	1064      	asrs	r4, r4, #1
 800dff6:	f106 0608 	add.w	r6, r6, #8
 800dffa:	d1f4      	bne.n	800dfe6 <_strtod_l+0x5b6>
 800dffc:	b10b      	cbz	r3, 800e002 <_strtod_l+0x5d2>
 800dffe:	4682      	mov	sl, r0
 800e000:	468b      	mov	fp, r1
 800e002:	9b08      	ldr	r3, [sp, #32]
 800e004:	b1b3      	cbz	r3, 800e034 <_strtod_l+0x604>
 800e006:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e00a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e00e:	2b00      	cmp	r3, #0
 800e010:	4659      	mov	r1, fp
 800e012:	dd0f      	ble.n	800e034 <_strtod_l+0x604>
 800e014:	2b1f      	cmp	r3, #31
 800e016:	dd56      	ble.n	800e0c6 <_strtod_l+0x696>
 800e018:	2b34      	cmp	r3, #52	@ 0x34
 800e01a:	bfde      	ittt	le
 800e01c:	f04f 33ff 	movle.w	r3, #4294967295
 800e020:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e024:	4093      	lslle	r3, r2
 800e026:	f04f 0a00 	mov.w	sl, #0
 800e02a:	bfcc      	ite	gt
 800e02c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e030:	ea03 0b01 	andle.w	fp, r3, r1
 800e034:	2200      	movs	r2, #0
 800e036:	2300      	movs	r3, #0
 800e038:	4650      	mov	r0, sl
 800e03a:	4659      	mov	r1, fp
 800e03c:	f7f2 fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 800e040:	2800      	cmp	r0, #0
 800e042:	d1a7      	bne.n	800df94 <_strtod_l+0x564>
 800e044:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e04a:	9805      	ldr	r0, [sp, #20]
 800e04c:	462b      	mov	r3, r5
 800e04e:	464a      	mov	r2, r9
 800e050:	f002 fef8 	bl	8010e44 <__s2b>
 800e054:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e056:	2800      	cmp	r0, #0
 800e058:	f43f af09 	beq.w	800de6e <_strtod_l+0x43e>
 800e05c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e05e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e060:	2a00      	cmp	r2, #0
 800e062:	eba3 0308 	sub.w	r3, r3, r8
 800e066:	bfa8      	it	ge
 800e068:	2300      	movge	r3, #0
 800e06a:	9312      	str	r3, [sp, #72]	@ 0x48
 800e06c:	2400      	movs	r4, #0
 800e06e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e072:	9316      	str	r3, [sp, #88]	@ 0x58
 800e074:	46a0      	mov	r8, r4
 800e076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e078:	9805      	ldr	r0, [sp, #20]
 800e07a:	6859      	ldr	r1, [r3, #4]
 800e07c:	f002 fe3a 	bl	8010cf4 <_Balloc>
 800e080:	4681      	mov	r9, r0
 800e082:	2800      	cmp	r0, #0
 800e084:	f43f aef7 	beq.w	800de76 <_strtod_l+0x446>
 800e088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e08a:	691a      	ldr	r2, [r3, #16]
 800e08c:	3202      	adds	r2, #2
 800e08e:	f103 010c 	add.w	r1, r3, #12
 800e092:	0092      	lsls	r2, r2, #2
 800e094:	300c      	adds	r0, #12
 800e096:	f001 fc20 	bl	800f8da <memcpy>
 800e09a:	ec4b ab10 	vmov	d0, sl, fp
 800e09e:	9805      	ldr	r0, [sp, #20]
 800e0a0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e0a2:	a91b      	add	r1, sp, #108	@ 0x6c
 800e0a4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e0a8:	f003 fa00 	bl	80114ac <__d2b>
 800e0ac:	901a      	str	r0, [sp, #104]	@ 0x68
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f aee1 	beq.w	800de76 <_strtod_l+0x446>
 800e0b4:	9805      	ldr	r0, [sp, #20]
 800e0b6:	2101      	movs	r1, #1
 800e0b8:	f002 ff5a 	bl	8010f70 <__i2b>
 800e0bc:	4680      	mov	r8, r0
 800e0be:	b948      	cbnz	r0, 800e0d4 <_strtod_l+0x6a4>
 800e0c0:	f04f 0800 	mov.w	r8, #0
 800e0c4:	e6d7      	b.n	800de76 <_strtod_l+0x446>
 800e0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ce:	ea03 0a0a 	and.w	sl, r3, sl
 800e0d2:	e7af      	b.n	800e034 <_strtod_l+0x604>
 800e0d4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e0d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e0d8:	2d00      	cmp	r5, #0
 800e0da:	bfab      	itete	ge
 800e0dc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e0de:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e0e0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e0e2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e0e4:	bfac      	ite	ge
 800e0e6:	18ef      	addge	r7, r5, r3
 800e0e8:	1b5e      	sublt	r6, r3, r5
 800e0ea:	9b08      	ldr	r3, [sp, #32]
 800e0ec:	1aed      	subs	r5, r5, r3
 800e0ee:	4415      	add	r5, r2
 800e0f0:	4b65      	ldr	r3, [pc, #404]	@ (800e288 <_strtod_l+0x858>)
 800e0f2:	3d01      	subs	r5, #1
 800e0f4:	429d      	cmp	r5, r3
 800e0f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e0fa:	da50      	bge.n	800e19e <_strtod_l+0x76e>
 800e0fc:	1b5b      	subs	r3, r3, r5
 800e0fe:	2b1f      	cmp	r3, #31
 800e100:	eba2 0203 	sub.w	r2, r2, r3
 800e104:	f04f 0101 	mov.w	r1, #1
 800e108:	dc3d      	bgt.n	800e186 <_strtod_l+0x756>
 800e10a:	fa01 f303 	lsl.w	r3, r1, r3
 800e10e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e110:	2300      	movs	r3, #0
 800e112:	9310      	str	r3, [sp, #64]	@ 0x40
 800e114:	18bd      	adds	r5, r7, r2
 800e116:	9b08      	ldr	r3, [sp, #32]
 800e118:	42af      	cmp	r7, r5
 800e11a:	4416      	add	r6, r2
 800e11c:	441e      	add	r6, r3
 800e11e:	463b      	mov	r3, r7
 800e120:	bfa8      	it	ge
 800e122:	462b      	movge	r3, r5
 800e124:	42b3      	cmp	r3, r6
 800e126:	bfa8      	it	ge
 800e128:	4633      	movge	r3, r6
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	bfc2      	ittt	gt
 800e12e:	1aed      	subgt	r5, r5, r3
 800e130:	1af6      	subgt	r6, r6, r3
 800e132:	1aff      	subgt	r7, r7, r3
 800e134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e136:	2b00      	cmp	r3, #0
 800e138:	dd16      	ble.n	800e168 <_strtod_l+0x738>
 800e13a:	4641      	mov	r1, r8
 800e13c:	9805      	ldr	r0, [sp, #20]
 800e13e:	461a      	mov	r2, r3
 800e140:	f002 ffce 	bl	80110e0 <__pow5mult>
 800e144:	4680      	mov	r8, r0
 800e146:	2800      	cmp	r0, #0
 800e148:	d0ba      	beq.n	800e0c0 <_strtod_l+0x690>
 800e14a:	4601      	mov	r1, r0
 800e14c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e14e:	9805      	ldr	r0, [sp, #20]
 800e150:	f002 ff24 	bl	8010f9c <__multiply>
 800e154:	900a      	str	r0, [sp, #40]	@ 0x28
 800e156:	2800      	cmp	r0, #0
 800e158:	f43f ae8d 	beq.w	800de76 <_strtod_l+0x446>
 800e15c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e15e:	9805      	ldr	r0, [sp, #20]
 800e160:	f002 fe08 	bl	8010d74 <_Bfree>
 800e164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e166:	931a      	str	r3, [sp, #104]	@ 0x68
 800e168:	2d00      	cmp	r5, #0
 800e16a:	dc1d      	bgt.n	800e1a8 <_strtod_l+0x778>
 800e16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e16e:	2b00      	cmp	r3, #0
 800e170:	dd23      	ble.n	800e1ba <_strtod_l+0x78a>
 800e172:	4649      	mov	r1, r9
 800e174:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e176:	9805      	ldr	r0, [sp, #20]
 800e178:	f002 ffb2 	bl	80110e0 <__pow5mult>
 800e17c:	4681      	mov	r9, r0
 800e17e:	b9e0      	cbnz	r0, 800e1ba <_strtod_l+0x78a>
 800e180:	f04f 0900 	mov.w	r9, #0
 800e184:	e677      	b.n	800de76 <_strtod_l+0x446>
 800e186:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e18a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e18e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e192:	35e2      	adds	r5, #226	@ 0xe2
 800e194:	fa01 f305 	lsl.w	r3, r1, r5
 800e198:	9310      	str	r3, [sp, #64]	@ 0x40
 800e19a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e19c:	e7ba      	b.n	800e114 <_strtod_l+0x6e4>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1a6:	e7b5      	b.n	800e114 <_strtod_l+0x6e4>
 800e1a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1aa:	9805      	ldr	r0, [sp, #20]
 800e1ac:	462a      	mov	r2, r5
 800e1ae:	f002 fff1 	bl	8011194 <__lshift>
 800e1b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d1d9      	bne.n	800e16c <_strtod_l+0x73c>
 800e1b8:	e65d      	b.n	800de76 <_strtod_l+0x446>
 800e1ba:	2e00      	cmp	r6, #0
 800e1bc:	dd07      	ble.n	800e1ce <_strtod_l+0x79e>
 800e1be:	4649      	mov	r1, r9
 800e1c0:	9805      	ldr	r0, [sp, #20]
 800e1c2:	4632      	mov	r2, r6
 800e1c4:	f002 ffe6 	bl	8011194 <__lshift>
 800e1c8:	4681      	mov	r9, r0
 800e1ca:	2800      	cmp	r0, #0
 800e1cc:	d0d8      	beq.n	800e180 <_strtod_l+0x750>
 800e1ce:	2f00      	cmp	r7, #0
 800e1d0:	dd08      	ble.n	800e1e4 <_strtod_l+0x7b4>
 800e1d2:	4641      	mov	r1, r8
 800e1d4:	9805      	ldr	r0, [sp, #20]
 800e1d6:	463a      	mov	r2, r7
 800e1d8:	f002 ffdc 	bl	8011194 <__lshift>
 800e1dc:	4680      	mov	r8, r0
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	f43f ae49 	beq.w	800de76 <_strtod_l+0x446>
 800e1e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1e6:	9805      	ldr	r0, [sp, #20]
 800e1e8:	464a      	mov	r2, r9
 800e1ea:	f003 f85b 	bl	80112a4 <__mdiff>
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	f43f ae40 	beq.w	800de76 <_strtod_l+0x446>
 800e1f6:	68c3      	ldr	r3, [r0, #12]
 800e1f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	60c3      	str	r3, [r0, #12]
 800e1fe:	4641      	mov	r1, r8
 800e200:	f003 f834 	bl	801126c <__mcmp>
 800e204:	2800      	cmp	r0, #0
 800e206:	da45      	bge.n	800e294 <_strtod_l+0x864>
 800e208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e20a:	ea53 030a 	orrs.w	r3, r3, sl
 800e20e:	d16b      	bne.n	800e2e8 <_strtod_l+0x8b8>
 800e210:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e214:	2b00      	cmp	r3, #0
 800e216:	d167      	bne.n	800e2e8 <_strtod_l+0x8b8>
 800e218:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e21c:	0d1b      	lsrs	r3, r3, #20
 800e21e:	051b      	lsls	r3, r3, #20
 800e220:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e224:	d960      	bls.n	800e2e8 <_strtod_l+0x8b8>
 800e226:	6963      	ldr	r3, [r4, #20]
 800e228:	b913      	cbnz	r3, 800e230 <_strtod_l+0x800>
 800e22a:	6923      	ldr	r3, [r4, #16]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	dd5b      	ble.n	800e2e8 <_strtod_l+0x8b8>
 800e230:	4621      	mov	r1, r4
 800e232:	2201      	movs	r2, #1
 800e234:	9805      	ldr	r0, [sp, #20]
 800e236:	f002 ffad 	bl	8011194 <__lshift>
 800e23a:	4641      	mov	r1, r8
 800e23c:	4604      	mov	r4, r0
 800e23e:	f003 f815 	bl	801126c <__mcmp>
 800e242:	2800      	cmp	r0, #0
 800e244:	dd50      	ble.n	800e2e8 <_strtod_l+0x8b8>
 800e246:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e24a:	9a08      	ldr	r2, [sp, #32]
 800e24c:	0d1b      	lsrs	r3, r3, #20
 800e24e:	051b      	lsls	r3, r3, #20
 800e250:	2a00      	cmp	r2, #0
 800e252:	d06a      	beq.n	800e32a <_strtod_l+0x8fa>
 800e254:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e258:	d867      	bhi.n	800e32a <_strtod_l+0x8fa>
 800e25a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e25e:	f67f ae9d 	bls.w	800df9c <_strtod_l+0x56c>
 800e262:	4b0a      	ldr	r3, [pc, #40]	@ (800e28c <_strtod_l+0x85c>)
 800e264:	4650      	mov	r0, sl
 800e266:	4659      	mov	r1, fp
 800e268:	2200      	movs	r2, #0
 800e26a:	f7f2 f9c5 	bl	80005f8 <__aeabi_dmul>
 800e26e:	4b08      	ldr	r3, [pc, #32]	@ (800e290 <_strtod_l+0x860>)
 800e270:	400b      	ands	r3, r1
 800e272:	4682      	mov	sl, r0
 800e274:	468b      	mov	fp, r1
 800e276:	2b00      	cmp	r3, #0
 800e278:	f47f ae08 	bne.w	800de8c <_strtod_l+0x45c>
 800e27c:	9a05      	ldr	r2, [sp, #20]
 800e27e:	2322      	movs	r3, #34	@ 0x22
 800e280:	6013      	str	r3, [r2, #0]
 800e282:	e603      	b.n	800de8c <_strtod_l+0x45c>
 800e284:	08012d78 	.word	0x08012d78
 800e288:	fffffc02 	.word	0xfffffc02
 800e28c:	39500000 	.word	0x39500000
 800e290:	7ff00000 	.word	0x7ff00000
 800e294:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e298:	d165      	bne.n	800e366 <_strtod_l+0x936>
 800e29a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e29c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2a0:	b35a      	cbz	r2, 800e2fa <_strtod_l+0x8ca>
 800e2a2:	4a9f      	ldr	r2, [pc, #636]	@ (800e520 <_strtod_l+0xaf0>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d12b      	bne.n	800e300 <_strtod_l+0x8d0>
 800e2a8:	9b08      	ldr	r3, [sp, #32]
 800e2aa:	4651      	mov	r1, sl
 800e2ac:	b303      	cbz	r3, 800e2f0 <_strtod_l+0x8c0>
 800e2ae:	4b9d      	ldr	r3, [pc, #628]	@ (800e524 <_strtod_l+0xaf4>)
 800e2b0:	465a      	mov	r2, fp
 800e2b2:	4013      	ands	r3, r2
 800e2b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2bc:	d81b      	bhi.n	800e2f6 <_strtod_l+0x8c6>
 800e2be:	0d1b      	lsrs	r3, r3, #20
 800e2c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e2c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2c8:	4299      	cmp	r1, r3
 800e2ca:	d119      	bne.n	800e300 <_strtod_l+0x8d0>
 800e2cc:	4b96      	ldr	r3, [pc, #600]	@ (800e528 <_strtod_l+0xaf8>)
 800e2ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d102      	bne.n	800e2da <_strtod_l+0x8aa>
 800e2d4:	3101      	adds	r1, #1
 800e2d6:	f43f adce 	beq.w	800de76 <_strtod_l+0x446>
 800e2da:	4b92      	ldr	r3, [pc, #584]	@ (800e524 <_strtod_l+0xaf4>)
 800e2dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2de:	401a      	ands	r2, r3
 800e2e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e2e4:	f04f 0a00 	mov.w	sl, #0
 800e2e8:	9b08      	ldr	r3, [sp, #32]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1b9      	bne.n	800e262 <_strtod_l+0x832>
 800e2ee:	e5cd      	b.n	800de8c <_strtod_l+0x45c>
 800e2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f4:	e7e8      	b.n	800e2c8 <_strtod_l+0x898>
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	e7e6      	b.n	800e2c8 <_strtod_l+0x898>
 800e2fa:	ea53 030a 	orrs.w	r3, r3, sl
 800e2fe:	d0a2      	beq.n	800e246 <_strtod_l+0x816>
 800e300:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e302:	b1db      	cbz	r3, 800e33c <_strtod_l+0x90c>
 800e304:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e306:	4213      	tst	r3, r2
 800e308:	d0ee      	beq.n	800e2e8 <_strtod_l+0x8b8>
 800e30a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e30c:	9a08      	ldr	r2, [sp, #32]
 800e30e:	4650      	mov	r0, sl
 800e310:	4659      	mov	r1, fp
 800e312:	b1bb      	cbz	r3, 800e344 <_strtod_l+0x914>
 800e314:	f7ff fb6e 	bl	800d9f4 <sulp>
 800e318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e31c:	ec53 2b10 	vmov	r2, r3, d0
 800e320:	f7f1 ffb4 	bl	800028c <__adddf3>
 800e324:	4682      	mov	sl, r0
 800e326:	468b      	mov	fp, r1
 800e328:	e7de      	b.n	800e2e8 <_strtod_l+0x8b8>
 800e32a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e32e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e332:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e336:	f04f 3aff 	mov.w	sl, #4294967295
 800e33a:	e7d5      	b.n	800e2e8 <_strtod_l+0x8b8>
 800e33c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e33e:	ea13 0f0a 	tst.w	r3, sl
 800e342:	e7e1      	b.n	800e308 <_strtod_l+0x8d8>
 800e344:	f7ff fb56 	bl	800d9f4 <sulp>
 800e348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e34c:	ec53 2b10 	vmov	r2, r3, d0
 800e350:	f7f1 ff9a 	bl	8000288 <__aeabi_dsub>
 800e354:	2200      	movs	r2, #0
 800e356:	2300      	movs	r3, #0
 800e358:	4682      	mov	sl, r0
 800e35a:	468b      	mov	fp, r1
 800e35c:	f7f2 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e360:	2800      	cmp	r0, #0
 800e362:	d0c1      	beq.n	800e2e8 <_strtod_l+0x8b8>
 800e364:	e61a      	b.n	800df9c <_strtod_l+0x56c>
 800e366:	4641      	mov	r1, r8
 800e368:	4620      	mov	r0, r4
 800e36a:	f003 f8f7 	bl	801155c <__ratio>
 800e36e:	ec57 6b10 	vmov	r6, r7, d0
 800e372:	2200      	movs	r2, #0
 800e374:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e378:	4630      	mov	r0, r6
 800e37a:	4639      	mov	r1, r7
 800e37c:	f7f2 fbb8 	bl	8000af0 <__aeabi_dcmple>
 800e380:	2800      	cmp	r0, #0
 800e382:	d06f      	beq.n	800e464 <_strtod_l+0xa34>
 800e384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e386:	2b00      	cmp	r3, #0
 800e388:	d17a      	bne.n	800e480 <_strtod_l+0xa50>
 800e38a:	f1ba 0f00 	cmp.w	sl, #0
 800e38e:	d158      	bne.n	800e442 <_strtod_l+0xa12>
 800e390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e396:	2b00      	cmp	r3, #0
 800e398:	d15a      	bne.n	800e450 <_strtod_l+0xa20>
 800e39a:	4b64      	ldr	r3, [pc, #400]	@ (800e52c <_strtod_l+0xafc>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	4630      	mov	r0, r6
 800e3a0:	4639      	mov	r1, r7
 800e3a2:	f7f2 fb9b 	bl	8000adc <__aeabi_dcmplt>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d159      	bne.n	800e45e <_strtod_l+0xa2e>
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	4b60      	ldr	r3, [pc, #384]	@ (800e530 <_strtod_l+0xb00>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f7f2 f921 	bl	80005f8 <__aeabi_dmul>
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460f      	mov	r7, r1
 800e3ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e3be:	9606      	str	r6, [sp, #24]
 800e3c0:	9307      	str	r3, [sp, #28]
 800e3c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3c6:	4d57      	ldr	r5, [pc, #348]	@ (800e524 <_strtod_l+0xaf4>)
 800e3c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3ce:	401d      	ands	r5, r3
 800e3d0:	4b58      	ldr	r3, [pc, #352]	@ (800e534 <_strtod_l+0xb04>)
 800e3d2:	429d      	cmp	r5, r3
 800e3d4:	f040 80b2 	bne.w	800e53c <_strtod_l+0xb0c>
 800e3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e3de:	ec4b ab10 	vmov	d0, sl, fp
 800e3e2:	f002 fff3 	bl	80113cc <__ulp>
 800e3e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3ea:	ec51 0b10 	vmov	r0, r1, d0
 800e3ee:	f7f2 f903 	bl	80005f8 <__aeabi_dmul>
 800e3f2:	4652      	mov	r2, sl
 800e3f4:	465b      	mov	r3, fp
 800e3f6:	f7f1 ff49 	bl	800028c <__adddf3>
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	4949      	ldr	r1, [pc, #292]	@ (800e524 <_strtod_l+0xaf4>)
 800e3fe:	4a4e      	ldr	r2, [pc, #312]	@ (800e538 <_strtod_l+0xb08>)
 800e400:	4019      	ands	r1, r3
 800e402:	4291      	cmp	r1, r2
 800e404:	4682      	mov	sl, r0
 800e406:	d942      	bls.n	800e48e <_strtod_l+0xa5e>
 800e408:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e40a:	4b47      	ldr	r3, [pc, #284]	@ (800e528 <_strtod_l+0xaf8>)
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d103      	bne.n	800e418 <_strtod_l+0x9e8>
 800e410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e412:	3301      	adds	r3, #1
 800e414:	f43f ad2f 	beq.w	800de76 <_strtod_l+0x446>
 800e418:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e528 <_strtod_l+0xaf8>
 800e41c:	f04f 3aff 	mov.w	sl, #4294967295
 800e420:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e422:	9805      	ldr	r0, [sp, #20]
 800e424:	f002 fca6 	bl	8010d74 <_Bfree>
 800e428:	9805      	ldr	r0, [sp, #20]
 800e42a:	4649      	mov	r1, r9
 800e42c:	f002 fca2 	bl	8010d74 <_Bfree>
 800e430:	9805      	ldr	r0, [sp, #20]
 800e432:	4641      	mov	r1, r8
 800e434:	f002 fc9e 	bl	8010d74 <_Bfree>
 800e438:	9805      	ldr	r0, [sp, #20]
 800e43a:	4621      	mov	r1, r4
 800e43c:	f002 fc9a 	bl	8010d74 <_Bfree>
 800e440:	e619      	b.n	800e076 <_strtod_l+0x646>
 800e442:	f1ba 0f01 	cmp.w	sl, #1
 800e446:	d103      	bne.n	800e450 <_strtod_l+0xa20>
 800e448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f43f ada6 	beq.w	800df9c <_strtod_l+0x56c>
 800e450:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e500 <_strtod_l+0xad0>
 800e454:	4f35      	ldr	r7, [pc, #212]	@ (800e52c <_strtod_l+0xafc>)
 800e456:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e45a:	2600      	movs	r6, #0
 800e45c:	e7b1      	b.n	800e3c2 <_strtod_l+0x992>
 800e45e:	4f34      	ldr	r7, [pc, #208]	@ (800e530 <_strtod_l+0xb00>)
 800e460:	2600      	movs	r6, #0
 800e462:	e7aa      	b.n	800e3ba <_strtod_l+0x98a>
 800e464:	4b32      	ldr	r3, [pc, #200]	@ (800e530 <_strtod_l+0xb00>)
 800e466:	4630      	mov	r0, r6
 800e468:	4639      	mov	r1, r7
 800e46a:	2200      	movs	r2, #0
 800e46c:	f7f2 f8c4 	bl	80005f8 <__aeabi_dmul>
 800e470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e472:	4606      	mov	r6, r0
 800e474:	460f      	mov	r7, r1
 800e476:	2b00      	cmp	r3, #0
 800e478:	d09f      	beq.n	800e3ba <_strtod_l+0x98a>
 800e47a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e47e:	e7a0      	b.n	800e3c2 <_strtod_l+0x992>
 800e480:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e508 <_strtod_l+0xad8>
 800e484:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e488:	ec57 6b17 	vmov	r6, r7, d7
 800e48c:	e799      	b.n	800e3c2 <_strtod_l+0x992>
 800e48e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e492:	9b08      	ldr	r3, [sp, #32]
 800e494:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1c1      	bne.n	800e420 <_strtod_l+0x9f0>
 800e49c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4a0:	0d1b      	lsrs	r3, r3, #20
 800e4a2:	051b      	lsls	r3, r3, #20
 800e4a4:	429d      	cmp	r5, r3
 800e4a6:	d1bb      	bne.n	800e420 <_strtod_l+0x9f0>
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f2 fc04 	bl	8000cb8 <__aeabi_d2lz>
 800e4b0:	f7f2 f874 	bl	800059c <__aeabi_l2d>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	f7f1 fee4 	bl	8000288 <__aeabi_dsub>
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e4c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e4cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ce:	ea46 060a 	orr.w	r6, r6, sl
 800e4d2:	431e      	orrs	r6, r3
 800e4d4:	d06f      	beq.n	800e5b6 <_strtod_l+0xb86>
 800e4d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e510 <_strtod_l+0xae0>)
 800e4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4dc:	f7f2 fafe 	bl	8000adc <__aeabi_dcmplt>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	f47f acd3 	bne.w	800de8c <_strtod_l+0x45c>
 800e4e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e518 <_strtod_l+0xae8>)
 800e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4f0:	f7f2 fb12 	bl	8000b18 <__aeabi_dcmpgt>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d093      	beq.n	800e420 <_strtod_l+0x9f0>
 800e4f8:	e4c8      	b.n	800de8c <_strtod_l+0x45c>
 800e4fa:	bf00      	nop
 800e4fc:	f3af 8000 	nop.w
 800e500:	00000000 	.word	0x00000000
 800e504:	bff00000 	.word	0xbff00000
 800e508:	00000000 	.word	0x00000000
 800e50c:	3ff00000 	.word	0x3ff00000
 800e510:	94a03595 	.word	0x94a03595
 800e514:	3fdfffff 	.word	0x3fdfffff
 800e518:	35afe535 	.word	0x35afe535
 800e51c:	3fe00000 	.word	0x3fe00000
 800e520:	000fffff 	.word	0x000fffff
 800e524:	7ff00000 	.word	0x7ff00000
 800e528:	7fefffff 	.word	0x7fefffff
 800e52c:	3ff00000 	.word	0x3ff00000
 800e530:	3fe00000 	.word	0x3fe00000
 800e534:	7fe00000 	.word	0x7fe00000
 800e538:	7c9fffff 	.word	0x7c9fffff
 800e53c:	9b08      	ldr	r3, [sp, #32]
 800e53e:	b323      	cbz	r3, 800e58a <_strtod_l+0xb5a>
 800e540:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e544:	d821      	bhi.n	800e58a <_strtod_l+0xb5a>
 800e546:	a328      	add	r3, pc, #160	@ (adr r3, 800e5e8 <_strtod_l+0xbb8>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	4630      	mov	r0, r6
 800e54e:	4639      	mov	r1, r7
 800e550:	f7f2 face 	bl	8000af0 <__aeabi_dcmple>
 800e554:	b1a0      	cbz	r0, 800e580 <_strtod_l+0xb50>
 800e556:	4639      	mov	r1, r7
 800e558:	4630      	mov	r0, r6
 800e55a:	f7f2 fb25 	bl	8000ba8 <__aeabi_d2uiz>
 800e55e:	2801      	cmp	r0, #1
 800e560:	bf38      	it	cc
 800e562:	2001      	movcc	r0, #1
 800e564:	f7f1 ffce 	bl	8000504 <__aeabi_ui2d>
 800e568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e56a:	4606      	mov	r6, r0
 800e56c:	460f      	mov	r7, r1
 800e56e:	b9fb      	cbnz	r3, 800e5b0 <_strtod_l+0xb80>
 800e570:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e574:	9014      	str	r0, [sp, #80]	@ 0x50
 800e576:	9315      	str	r3, [sp, #84]	@ 0x54
 800e578:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e57c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e580:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e582:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e586:	1b5b      	subs	r3, r3, r5
 800e588:	9311      	str	r3, [sp, #68]	@ 0x44
 800e58a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e58e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e592:	f002 ff1b 	bl	80113cc <__ulp>
 800e596:	4650      	mov	r0, sl
 800e598:	ec53 2b10 	vmov	r2, r3, d0
 800e59c:	4659      	mov	r1, fp
 800e59e:	f7f2 f82b 	bl	80005f8 <__aeabi_dmul>
 800e5a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e5a6:	f7f1 fe71 	bl	800028c <__adddf3>
 800e5aa:	4682      	mov	sl, r0
 800e5ac:	468b      	mov	fp, r1
 800e5ae:	e770      	b.n	800e492 <_strtod_l+0xa62>
 800e5b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e5b4:	e7e0      	b.n	800e578 <_strtod_l+0xb48>
 800e5b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e5f0 <_strtod_l+0xbc0>)
 800e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5bc:	f7f2 fa8e 	bl	8000adc <__aeabi_dcmplt>
 800e5c0:	e798      	b.n	800e4f4 <_strtod_l+0xac4>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e5c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e5c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5ca:	6013      	str	r3, [r2, #0]
 800e5cc:	f7ff ba6d 	b.w	800daaa <_strtod_l+0x7a>
 800e5d0:	2a65      	cmp	r2, #101	@ 0x65
 800e5d2:	f43f ab68 	beq.w	800dca6 <_strtod_l+0x276>
 800e5d6:	2a45      	cmp	r2, #69	@ 0x45
 800e5d8:	f43f ab65 	beq.w	800dca6 <_strtod_l+0x276>
 800e5dc:	2301      	movs	r3, #1
 800e5de:	f7ff bba0 	b.w	800dd22 <_strtod_l+0x2f2>
 800e5e2:	bf00      	nop
 800e5e4:	f3af 8000 	nop.w
 800e5e8:	ffc00000 	.word	0xffc00000
 800e5ec:	41dfffff 	.word	0x41dfffff
 800e5f0:	94a03595 	.word	0x94a03595
 800e5f4:	3fcfffff 	.word	0x3fcfffff

0800e5f8 <_strtod_r>:
 800e5f8:	4b01      	ldr	r3, [pc, #4]	@ (800e600 <_strtod_r+0x8>)
 800e5fa:	f7ff ba19 	b.w	800da30 <_strtod_l>
 800e5fe:	bf00      	nop
 800e600:	20000048 	.word	0x20000048

0800e604 <_strtol_l.isra.0>:
 800e604:	2b24      	cmp	r3, #36	@ 0x24
 800e606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e60a:	4686      	mov	lr, r0
 800e60c:	4690      	mov	r8, r2
 800e60e:	d801      	bhi.n	800e614 <_strtol_l.isra.0+0x10>
 800e610:	2b01      	cmp	r3, #1
 800e612:	d106      	bne.n	800e622 <_strtol_l.isra.0+0x1e>
 800e614:	f001 f934 	bl	800f880 <__errno>
 800e618:	2316      	movs	r3, #22
 800e61a:	6003      	str	r3, [r0, #0]
 800e61c:	2000      	movs	r0, #0
 800e61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e622:	4834      	ldr	r0, [pc, #208]	@ (800e6f4 <_strtol_l.isra.0+0xf0>)
 800e624:	460d      	mov	r5, r1
 800e626:	462a      	mov	r2, r5
 800e628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e62c:	5d06      	ldrb	r6, [r0, r4]
 800e62e:	f016 0608 	ands.w	r6, r6, #8
 800e632:	d1f8      	bne.n	800e626 <_strtol_l.isra.0+0x22>
 800e634:	2c2d      	cmp	r4, #45	@ 0x2d
 800e636:	d110      	bne.n	800e65a <_strtol_l.isra.0+0x56>
 800e638:	782c      	ldrb	r4, [r5, #0]
 800e63a:	2601      	movs	r6, #1
 800e63c:	1c95      	adds	r5, r2, #2
 800e63e:	f033 0210 	bics.w	r2, r3, #16
 800e642:	d115      	bne.n	800e670 <_strtol_l.isra.0+0x6c>
 800e644:	2c30      	cmp	r4, #48	@ 0x30
 800e646:	d10d      	bne.n	800e664 <_strtol_l.isra.0+0x60>
 800e648:	782a      	ldrb	r2, [r5, #0]
 800e64a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e64e:	2a58      	cmp	r2, #88	@ 0x58
 800e650:	d108      	bne.n	800e664 <_strtol_l.isra.0+0x60>
 800e652:	786c      	ldrb	r4, [r5, #1]
 800e654:	3502      	adds	r5, #2
 800e656:	2310      	movs	r3, #16
 800e658:	e00a      	b.n	800e670 <_strtol_l.isra.0+0x6c>
 800e65a:	2c2b      	cmp	r4, #43	@ 0x2b
 800e65c:	bf04      	itt	eq
 800e65e:	782c      	ldrbeq	r4, [r5, #0]
 800e660:	1c95      	addeq	r5, r2, #2
 800e662:	e7ec      	b.n	800e63e <_strtol_l.isra.0+0x3a>
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1f6      	bne.n	800e656 <_strtol_l.isra.0+0x52>
 800e668:	2c30      	cmp	r4, #48	@ 0x30
 800e66a:	bf14      	ite	ne
 800e66c:	230a      	movne	r3, #10
 800e66e:	2308      	moveq	r3, #8
 800e670:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e674:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e678:	2200      	movs	r2, #0
 800e67a:	fbbc f9f3 	udiv	r9, ip, r3
 800e67e:	4610      	mov	r0, r2
 800e680:	fb03 ca19 	mls	sl, r3, r9, ip
 800e684:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e688:	2f09      	cmp	r7, #9
 800e68a:	d80f      	bhi.n	800e6ac <_strtol_l.isra.0+0xa8>
 800e68c:	463c      	mov	r4, r7
 800e68e:	42a3      	cmp	r3, r4
 800e690:	dd1b      	ble.n	800e6ca <_strtol_l.isra.0+0xc6>
 800e692:	1c57      	adds	r7, r2, #1
 800e694:	d007      	beq.n	800e6a6 <_strtol_l.isra.0+0xa2>
 800e696:	4581      	cmp	r9, r0
 800e698:	d314      	bcc.n	800e6c4 <_strtol_l.isra.0+0xc0>
 800e69a:	d101      	bne.n	800e6a0 <_strtol_l.isra.0+0x9c>
 800e69c:	45a2      	cmp	sl, r4
 800e69e:	db11      	blt.n	800e6c4 <_strtol_l.isra.0+0xc0>
 800e6a0:	fb00 4003 	mla	r0, r0, r3, r4
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6aa:	e7eb      	b.n	800e684 <_strtol_l.isra.0+0x80>
 800e6ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e6b0:	2f19      	cmp	r7, #25
 800e6b2:	d801      	bhi.n	800e6b8 <_strtol_l.isra.0+0xb4>
 800e6b4:	3c37      	subs	r4, #55	@ 0x37
 800e6b6:	e7ea      	b.n	800e68e <_strtol_l.isra.0+0x8a>
 800e6b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e6bc:	2f19      	cmp	r7, #25
 800e6be:	d804      	bhi.n	800e6ca <_strtol_l.isra.0+0xc6>
 800e6c0:	3c57      	subs	r4, #87	@ 0x57
 800e6c2:	e7e4      	b.n	800e68e <_strtol_l.isra.0+0x8a>
 800e6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c8:	e7ed      	b.n	800e6a6 <_strtol_l.isra.0+0xa2>
 800e6ca:	1c53      	adds	r3, r2, #1
 800e6cc:	d108      	bne.n	800e6e0 <_strtol_l.isra.0+0xdc>
 800e6ce:	2322      	movs	r3, #34	@ 0x22
 800e6d0:	f8ce 3000 	str.w	r3, [lr]
 800e6d4:	4660      	mov	r0, ip
 800e6d6:	f1b8 0f00 	cmp.w	r8, #0
 800e6da:	d0a0      	beq.n	800e61e <_strtol_l.isra.0+0x1a>
 800e6dc:	1e69      	subs	r1, r5, #1
 800e6de:	e006      	b.n	800e6ee <_strtol_l.isra.0+0xea>
 800e6e0:	b106      	cbz	r6, 800e6e4 <_strtol_l.isra.0+0xe0>
 800e6e2:	4240      	negs	r0, r0
 800e6e4:	f1b8 0f00 	cmp.w	r8, #0
 800e6e8:	d099      	beq.n	800e61e <_strtol_l.isra.0+0x1a>
 800e6ea:	2a00      	cmp	r2, #0
 800e6ec:	d1f6      	bne.n	800e6dc <_strtol_l.isra.0+0xd8>
 800e6ee:	f8c8 1000 	str.w	r1, [r8]
 800e6f2:	e794      	b.n	800e61e <_strtol_l.isra.0+0x1a>
 800e6f4:	08012da1 	.word	0x08012da1

0800e6f8 <_strtol_r>:
 800e6f8:	f7ff bf84 	b.w	800e604 <_strtol_l.isra.0>

0800e6fc <__cvt>:
 800e6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e700:	ec57 6b10 	vmov	r6, r7, d0
 800e704:	2f00      	cmp	r7, #0
 800e706:	460c      	mov	r4, r1
 800e708:	4619      	mov	r1, r3
 800e70a:	463b      	mov	r3, r7
 800e70c:	bfbb      	ittet	lt
 800e70e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e712:	461f      	movlt	r7, r3
 800e714:	2300      	movge	r3, #0
 800e716:	232d      	movlt	r3, #45	@ 0x2d
 800e718:	700b      	strb	r3, [r1, #0]
 800e71a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e71c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e720:	4691      	mov	r9, r2
 800e722:	f023 0820 	bic.w	r8, r3, #32
 800e726:	bfbc      	itt	lt
 800e728:	4632      	movlt	r2, r6
 800e72a:	4616      	movlt	r6, r2
 800e72c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e730:	d005      	beq.n	800e73e <__cvt+0x42>
 800e732:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e736:	d100      	bne.n	800e73a <__cvt+0x3e>
 800e738:	3401      	adds	r4, #1
 800e73a:	2102      	movs	r1, #2
 800e73c:	e000      	b.n	800e740 <__cvt+0x44>
 800e73e:	2103      	movs	r1, #3
 800e740:	ab03      	add	r3, sp, #12
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	ab02      	add	r3, sp, #8
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	ec47 6b10 	vmov	d0, r6, r7
 800e74c:	4653      	mov	r3, sl
 800e74e:	4622      	mov	r2, r4
 800e750:	f001 f96a 	bl	800fa28 <_dtoa_r>
 800e754:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e758:	4605      	mov	r5, r0
 800e75a:	d119      	bne.n	800e790 <__cvt+0x94>
 800e75c:	f019 0f01 	tst.w	r9, #1
 800e760:	d00e      	beq.n	800e780 <__cvt+0x84>
 800e762:	eb00 0904 	add.w	r9, r0, r4
 800e766:	2200      	movs	r2, #0
 800e768:	2300      	movs	r3, #0
 800e76a:	4630      	mov	r0, r6
 800e76c:	4639      	mov	r1, r7
 800e76e:	f7f2 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800e772:	b108      	cbz	r0, 800e778 <__cvt+0x7c>
 800e774:	f8cd 900c 	str.w	r9, [sp, #12]
 800e778:	2230      	movs	r2, #48	@ 0x30
 800e77a:	9b03      	ldr	r3, [sp, #12]
 800e77c:	454b      	cmp	r3, r9
 800e77e:	d31e      	bcc.n	800e7be <__cvt+0xc2>
 800e780:	9b03      	ldr	r3, [sp, #12]
 800e782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e784:	1b5b      	subs	r3, r3, r5
 800e786:	4628      	mov	r0, r5
 800e788:	6013      	str	r3, [r2, #0]
 800e78a:	b004      	add	sp, #16
 800e78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e790:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e794:	eb00 0904 	add.w	r9, r0, r4
 800e798:	d1e5      	bne.n	800e766 <__cvt+0x6a>
 800e79a:	7803      	ldrb	r3, [r0, #0]
 800e79c:	2b30      	cmp	r3, #48	@ 0x30
 800e79e:	d10a      	bne.n	800e7b6 <__cvt+0xba>
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	f7f2 f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7ac:	b918      	cbnz	r0, 800e7b6 <__cvt+0xba>
 800e7ae:	f1c4 0401 	rsb	r4, r4, #1
 800e7b2:	f8ca 4000 	str.w	r4, [sl]
 800e7b6:	f8da 3000 	ldr.w	r3, [sl]
 800e7ba:	4499      	add	r9, r3
 800e7bc:	e7d3      	b.n	800e766 <__cvt+0x6a>
 800e7be:	1c59      	adds	r1, r3, #1
 800e7c0:	9103      	str	r1, [sp, #12]
 800e7c2:	701a      	strb	r2, [r3, #0]
 800e7c4:	e7d9      	b.n	800e77a <__cvt+0x7e>

0800e7c6 <__exponent>:
 800e7c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	bfba      	itte	lt
 800e7cc:	4249      	neglt	r1, r1
 800e7ce:	232d      	movlt	r3, #45	@ 0x2d
 800e7d0:	232b      	movge	r3, #43	@ 0x2b
 800e7d2:	2909      	cmp	r1, #9
 800e7d4:	7002      	strb	r2, [r0, #0]
 800e7d6:	7043      	strb	r3, [r0, #1]
 800e7d8:	dd29      	ble.n	800e82e <__exponent+0x68>
 800e7da:	f10d 0307 	add.w	r3, sp, #7
 800e7de:	461d      	mov	r5, r3
 800e7e0:	270a      	movs	r7, #10
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	fbb1 f6f7 	udiv	r6, r1, r7
 800e7e8:	fb07 1416 	mls	r4, r7, r6, r1
 800e7ec:	3430      	adds	r4, #48	@ 0x30
 800e7ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	2c63      	cmp	r4, #99	@ 0x63
 800e7f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	dcf1      	bgt.n	800e7e2 <__exponent+0x1c>
 800e7fe:	3130      	adds	r1, #48	@ 0x30
 800e800:	1e94      	subs	r4, r2, #2
 800e802:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e806:	1c41      	adds	r1, r0, #1
 800e808:	4623      	mov	r3, r4
 800e80a:	42ab      	cmp	r3, r5
 800e80c:	d30a      	bcc.n	800e824 <__exponent+0x5e>
 800e80e:	f10d 0309 	add.w	r3, sp, #9
 800e812:	1a9b      	subs	r3, r3, r2
 800e814:	42ac      	cmp	r4, r5
 800e816:	bf88      	it	hi
 800e818:	2300      	movhi	r3, #0
 800e81a:	3302      	adds	r3, #2
 800e81c:	4403      	add	r3, r0
 800e81e:	1a18      	subs	r0, r3, r0
 800e820:	b003      	add	sp, #12
 800e822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e824:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e828:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e82c:	e7ed      	b.n	800e80a <__exponent+0x44>
 800e82e:	2330      	movs	r3, #48	@ 0x30
 800e830:	3130      	adds	r1, #48	@ 0x30
 800e832:	7083      	strb	r3, [r0, #2]
 800e834:	70c1      	strb	r1, [r0, #3]
 800e836:	1d03      	adds	r3, r0, #4
 800e838:	e7f1      	b.n	800e81e <__exponent+0x58>
	...

0800e83c <_printf_float>:
 800e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	b08d      	sub	sp, #52	@ 0x34
 800e842:	460c      	mov	r4, r1
 800e844:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e848:	4616      	mov	r6, r2
 800e84a:	461f      	mov	r7, r3
 800e84c:	4605      	mov	r5, r0
 800e84e:	f000 ff5f 	bl	800f710 <_localeconv_r>
 800e852:	6803      	ldr	r3, [r0, #0]
 800e854:	9304      	str	r3, [sp, #16]
 800e856:	4618      	mov	r0, r3
 800e858:	f7f1 fd0a 	bl	8000270 <strlen>
 800e85c:	2300      	movs	r3, #0
 800e85e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e860:	f8d8 3000 	ldr.w	r3, [r8]
 800e864:	9005      	str	r0, [sp, #20]
 800e866:	3307      	adds	r3, #7
 800e868:	f023 0307 	bic.w	r3, r3, #7
 800e86c:	f103 0208 	add.w	r2, r3, #8
 800e870:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e874:	f8d4 b000 	ldr.w	fp, [r4]
 800e878:	f8c8 2000 	str.w	r2, [r8]
 800e87c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e880:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e884:	9307      	str	r3, [sp, #28]
 800e886:	f8cd 8018 	str.w	r8, [sp, #24]
 800e88a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e88e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e892:	4b9c      	ldr	r3, [pc, #624]	@ (800eb04 <_printf_float+0x2c8>)
 800e894:	f04f 32ff 	mov.w	r2, #4294967295
 800e898:	f7f2 f948 	bl	8000b2c <__aeabi_dcmpun>
 800e89c:	bb70      	cbnz	r0, 800e8fc <_printf_float+0xc0>
 800e89e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8a2:	4b98      	ldr	r3, [pc, #608]	@ (800eb04 <_printf_float+0x2c8>)
 800e8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a8:	f7f2 f922 	bl	8000af0 <__aeabi_dcmple>
 800e8ac:	bb30      	cbnz	r0, 800e8fc <_printf_float+0xc0>
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	4649      	mov	r1, r9
 800e8b6:	f7f2 f911 	bl	8000adc <__aeabi_dcmplt>
 800e8ba:	b110      	cbz	r0, 800e8c2 <_printf_float+0x86>
 800e8bc:	232d      	movs	r3, #45	@ 0x2d
 800e8be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8c2:	4a91      	ldr	r2, [pc, #580]	@ (800eb08 <_printf_float+0x2cc>)
 800e8c4:	4b91      	ldr	r3, [pc, #580]	@ (800eb0c <_printf_float+0x2d0>)
 800e8c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e8ca:	bf8c      	ite	hi
 800e8cc:	4690      	movhi	r8, r2
 800e8ce:	4698      	movls	r8, r3
 800e8d0:	2303      	movs	r3, #3
 800e8d2:	6123      	str	r3, [r4, #16]
 800e8d4:	f02b 0304 	bic.w	r3, fp, #4
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	f04f 0900 	mov.w	r9, #0
 800e8de:	9700      	str	r7, [sp, #0]
 800e8e0:	4633      	mov	r3, r6
 800e8e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	f000 f9d2 	bl	800ec90 <_printf_common>
 800e8ec:	3001      	adds	r0, #1
 800e8ee:	f040 808d 	bne.w	800ea0c <_printf_float+0x1d0>
 800e8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f6:	b00d      	add	sp, #52	@ 0x34
 800e8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8fc:	4642      	mov	r2, r8
 800e8fe:	464b      	mov	r3, r9
 800e900:	4640      	mov	r0, r8
 800e902:	4649      	mov	r1, r9
 800e904:	f7f2 f912 	bl	8000b2c <__aeabi_dcmpun>
 800e908:	b140      	cbz	r0, 800e91c <_printf_float+0xe0>
 800e90a:	464b      	mov	r3, r9
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	bfbc      	itt	lt
 800e910:	232d      	movlt	r3, #45	@ 0x2d
 800e912:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e916:	4a7e      	ldr	r2, [pc, #504]	@ (800eb10 <_printf_float+0x2d4>)
 800e918:	4b7e      	ldr	r3, [pc, #504]	@ (800eb14 <_printf_float+0x2d8>)
 800e91a:	e7d4      	b.n	800e8c6 <_printf_float+0x8a>
 800e91c:	6863      	ldr	r3, [r4, #4]
 800e91e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e922:	9206      	str	r2, [sp, #24]
 800e924:	1c5a      	adds	r2, r3, #1
 800e926:	d13b      	bne.n	800e9a0 <_printf_float+0x164>
 800e928:	2306      	movs	r3, #6
 800e92a:	6063      	str	r3, [r4, #4]
 800e92c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e930:	2300      	movs	r3, #0
 800e932:	6022      	str	r2, [r4, #0]
 800e934:	9303      	str	r3, [sp, #12]
 800e936:	ab0a      	add	r3, sp, #40	@ 0x28
 800e938:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e93c:	ab09      	add	r3, sp, #36	@ 0x24
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	6861      	ldr	r1, [r4, #4]
 800e942:	ec49 8b10 	vmov	d0, r8, r9
 800e946:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e94a:	4628      	mov	r0, r5
 800e94c:	f7ff fed6 	bl	800e6fc <__cvt>
 800e950:	9b06      	ldr	r3, [sp, #24]
 800e952:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e954:	2b47      	cmp	r3, #71	@ 0x47
 800e956:	4680      	mov	r8, r0
 800e958:	d129      	bne.n	800e9ae <_printf_float+0x172>
 800e95a:	1cc8      	adds	r0, r1, #3
 800e95c:	db02      	blt.n	800e964 <_printf_float+0x128>
 800e95e:	6863      	ldr	r3, [r4, #4]
 800e960:	4299      	cmp	r1, r3
 800e962:	dd41      	ble.n	800e9e8 <_printf_float+0x1ac>
 800e964:	f1aa 0a02 	sub.w	sl, sl, #2
 800e968:	fa5f fa8a 	uxtb.w	sl, sl
 800e96c:	3901      	subs	r1, #1
 800e96e:	4652      	mov	r2, sl
 800e970:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e974:	9109      	str	r1, [sp, #36]	@ 0x24
 800e976:	f7ff ff26 	bl	800e7c6 <__exponent>
 800e97a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e97c:	1813      	adds	r3, r2, r0
 800e97e:	2a01      	cmp	r2, #1
 800e980:	4681      	mov	r9, r0
 800e982:	6123      	str	r3, [r4, #16]
 800e984:	dc02      	bgt.n	800e98c <_printf_float+0x150>
 800e986:	6822      	ldr	r2, [r4, #0]
 800e988:	07d2      	lsls	r2, r2, #31
 800e98a:	d501      	bpl.n	800e990 <_printf_float+0x154>
 800e98c:	3301      	adds	r3, #1
 800e98e:	6123      	str	r3, [r4, #16]
 800e990:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e994:	2b00      	cmp	r3, #0
 800e996:	d0a2      	beq.n	800e8de <_printf_float+0xa2>
 800e998:	232d      	movs	r3, #45	@ 0x2d
 800e99a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e99e:	e79e      	b.n	800e8de <_printf_float+0xa2>
 800e9a0:	9a06      	ldr	r2, [sp, #24]
 800e9a2:	2a47      	cmp	r2, #71	@ 0x47
 800e9a4:	d1c2      	bne.n	800e92c <_printf_float+0xf0>
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1c0      	bne.n	800e92c <_printf_float+0xf0>
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e7bd      	b.n	800e92a <_printf_float+0xee>
 800e9ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e9b2:	d9db      	bls.n	800e96c <_printf_float+0x130>
 800e9b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e9b8:	d118      	bne.n	800e9ec <_printf_float+0x1b0>
 800e9ba:	2900      	cmp	r1, #0
 800e9bc:	6863      	ldr	r3, [r4, #4]
 800e9be:	dd0b      	ble.n	800e9d8 <_printf_float+0x19c>
 800e9c0:	6121      	str	r1, [r4, #16]
 800e9c2:	b913      	cbnz	r3, 800e9ca <_printf_float+0x18e>
 800e9c4:	6822      	ldr	r2, [r4, #0]
 800e9c6:	07d0      	lsls	r0, r2, #31
 800e9c8:	d502      	bpl.n	800e9d0 <_printf_float+0x194>
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	440b      	add	r3, r1
 800e9ce:	6123      	str	r3, [r4, #16]
 800e9d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e9d2:	f04f 0900 	mov.w	r9, #0
 800e9d6:	e7db      	b.n	800e990 <_printf_float+0x154>
 800e9d8:	b913      	cbnz	r3, 800e9e0 <_printf_float+0x1a4>
 800e9da:	6822      	ldr	r2, [r4, #0]
 800e9dc:	07d2      	lsls	r2, r2, #31
 800e9de:	d501      	bpl.n	800e9e4 <_printf_float+0x1a8>
 800e9e0:	3302      	adds	r3, #2
 800e9e2:	e7f4      	b.n	800e9ce <_printf_float+0x192>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e7f2      	b.n	800e9ce <_printf_float+0x192>
 800e9e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e9ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ee:	4299      	cmp	r1, r3
 800e9f0:	db05      	blt.n	800e9fe <_printf_float+0x1c2>
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	6121      	str	r1, [r4, #16]
 800e9f6:	07d8      	lsls	r0, r3, #31
 800e9f8:	d5ea      	bpl.n	800e9d0 <_printf_float+0x194>
 800e9fa:	1c4b      	adds	r3, r1, #1
 800e9fc:	e7e7      	b.n	800e9ce <_printf_float+0x192>
 800e9fe:	2900      	cmp	r1, #0
 800ea00:	bfd4      	ite	le
 800ea02:	f1c1 0202 	rsble	r2, r1, #2
 800ea06:	2201      	movgt	r2, #1
 800ea08:	4413      	add	r3, r2
 800ea0a:	e7e0      	b.n	800e9ce <_printf_float+0x192>
 800ea0c:	6823      	ldr	r3, [r4, #0]
 800ea0e:	055a      	lsls	r2, r3, #21
 800ea10:	d407      	bmi.n	800ea22 <_printf_float+0x1e6>
 800ea12:	6923      	ldr	r3, [r4, #16]
 800ea14:	4642      	mov	r2, r8
 800ea16:	4631      	mov	r1, r6
 800ea18:	4628      	mov	r0, r5
 800ea1a:	47b8      	blx	r7
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	d12b      	bne.n	800ea78 <_printf_float+0x23c>
 800ea20:	e767      	b.n	800e8f2 <_printf_float+0xb6>
 800ea22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea26:	f240 80dd 	bls.w	800ebe4 <_printf_float+0x3a8>
 800ea2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea2e:	2200      	movs	r2, #0
 800ea30:	2300      	movs	r3, #0
 800ea32:	f7f2 f849 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea36:	2800      	cmp	r0, #0
 800ea38:	d033      	beq.n	800eaa2 <_printf_float+0x266>
 800ea3a:	4a37      	ldr	r2, [pc, #220]	@ (800eb18 <_printf_float+0x2dc>)
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	4631      	mov	r1, r6
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b8      	blx	r7
 800ea44:	3001      	adds	r0, #1
 800ea46:	f43f af54 	beq.w	800e8f2 <_printf_float+0xb6>
 800ea4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ea4e:	4543      	cmp	r3, r8
 800ea50:	db02      	blt.n	800ea58 <_printf_float+0x21c>
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	07d8      	lsls	r0, r3, #31
 800ea56:	d50f      	bpl.n	800ea78 <_printf_float+0x23c>
 800ea58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea5c:	4631      	mov	r1, r6
 800ea5e:	4628      	mov	r0, r5
 800ea60:	47b8      	blx	r7
 800ea62:	3001      	adds	r0, #1
 800ea64:	f43f af45 	beq.w	800e8f2 <_printf_float+0xb6>
 800ea68:	f04f 0900 	mov.w	r9, #0
 800ea6c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea70:	f104 0a1a 	add.w	sl, r4, #26
 800ea74:	45c8      	cmp	r8, r9
 800ea76:	dc09      	bgt.n	800ea8c <_printf_float+0x250>
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	079b      	lsls	r3, r3, #30
 800ea7c:	f100 8103 	bmi.w	800ec86 <_printf_float+0x44a>
 800ea80:	68e0      	ldr	r0, [r4, #12]
 800ea82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea84:	4298      	cmp	r0, r3
 800ea86:	bfb8      	it	lt
 800ea88:	4618      	movlt	r0, r3
 800ea8a:	e734      	b.n	800e8f6 <_printf_float+0xba>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	4652      	mov	r2, sl
 800ea90:	4631      	mov	r1, r6
 800ea92:	4628      	mov	r0, r5
 800ea94:	47b8      	blx	r7
 800ea96:	3001      	adds	r0, #1
 800ea98:	f43f af2b 	beq.w	800e8f2 <_printf_float+0xb6>
 800ea9c:	f109 0901 	add.w	r9, r9, #1
 800eaa0:	e7e8      	b.n	800ea74 <_printf_float+0x238>
 800eaa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	dc39      	bgt.n	800eb1c <_printf_float+0x2e0>
 800eaa8:	4a1b      	ldr	r2, [pc, #108]	@ (800eb18 <_printf_float+0x2dc>)
 800eaaa:	2301      	movs	r3, #1
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b8      	blx	r7
 800eab2:	3001      	adds	r0, #1
 800eab4:	f43f af1d 	beq.w	800e8f2 <_printf_float+0xb6>
 800eab8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eabc:	ea59 0303 	orrs.w	r3, r9, r3
 800eac0:	d102      	bne.n	800eac8 <_printf_float+0x28c>
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	07d9      	lsls	r1, r3, #31
 800eac6:	d5d7      	bpl.n	800ea78 <_printf_float+0x23c>
 800eac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eacc:	4631      	mov	r1, r6
 800eace:	4628      	mov	r0, r5
 800ead0:	47b8      	blx	r7
 800ead2:	3001      	adds	r0, #1
 800ead4:	f43f af0d 	beq.w	800e8f2 <_printf_float+0xb6>
 800ead8:	f04f 0a00 	mov.w	sl, #0
 800eadc:	f104 0b1a 	add.w	fp, r4, #26
 800eae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae2:	425b      	negs	r3, r3
 800eae4:	4553      	cmp	r3, sl
 800eae6:	dc01      	bgt.n	800eaec <_printf_float+0x2b0>
 800eae8:	464b      	mov	r3, r9
 800eaea:	e793      	b.n	800ea14 <_printf_float+0x1d8>
 800eaec:	2301      	movs	r3, #1
 800eaee:	465a      	mov	r2, fp
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	47b8      	blx	r7
 800eaf6:	3001      	adds	r0, #1
 800eaf8:	f43f aefb 	beq.w	800e8f2 <_printf_float+0xb6>
 800eafc:	f10a 0a01 	add.w	sl, sl, #1
 800eb00:	e7ee      	b.n	800eae0 <_printf_float+0x2a4>
 800eb02:	bf00      	nop
 800eb04:	7fefffff 	.word	0x7fefffff
 800eb08:	08012b66 	.word	0x08012b66
 800eb0c:	08012b62 	.word	0x08012b62
 800eb10:	08012b6e 	.word	0x08012b6e
 800eb14:	08012b6a 	.word	0x08012b6a
 800eb18:	08012d0e 	.word	0x08012d0e
 800eb1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb22:	4553      	cmp	r3, sl
 800eb24:	bfa8      	it	ge
 800eb26:	4653      	movge	r3, sl
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	4699      	mov	r9, r3
 800eb2c:	dc36      	bgt.n	800eb9c <_printf_float+0x360>
 800eb2e:	f04f 0b00 	mov.w	fp, #0
 800eb32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb36:	f104 021a 	add.w	r2, r4, #26
 800eb3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb3c:	9306      	str	r3, [sp, #24]
 800eb3e:	eba3 0309 	sub.w	r3, r3, r9
 800eb42:	455b      	cmp	r3, fp
 800eb44:	dc31      	bgt.n	800ebaa <_printf_float+0x36e>
 800eb46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb48:	459a      	cmp	sl, r3
 800eb4a:	dc3a      	bgt.n	800ebc2 <_printf_float+0x386>
 800eb4c:	6823      	ldr	r3, [r4, #0]
 800eb4e:	07da      	lsls	r2, r3, #31
 800eb50:	d437      	bmi.n	800ebc2 <_printf_float+0x386>
 800eb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb54:	ebaa 0903 	sub.w	r9, sl, r3
 800eb58:	9b06      	ldr	r3, [sp, #24]
 800eb5a:	ebaa 0303 	sub.w	r3, sl, r3
 800eb5e:	4599      	cmp	r9, r3
 800eb60:	bfa8      	it	ge
 800eb62:	4699      	movge	r9, r3
 800eb64:	f1b9 0f00 	cmp.w	r9, #0
 800eb68:	dc33      	bgt.n	800ebd2 <_printf_float+0x396>
 800eb6a:	f04f 0800 	mov.w	r8, #0
 800eb6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb72:	f104 0b1a 	add.w	fp, r4, #26
 800eb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb78:	ebaa 0303 	sub.w	r3, sl, r3
 800eb7c:	eba3 0309 	sub.w	r3, r3, r9
 800eb80:	4543      	cmp	r3, r8
 800eb82:	f77f af79 	ble.w	800ea78 <_printf_float+0x23c>
 800eb86:	2301      	movs	r3, #1
 800eb88:	465a      	mov	r2, fp
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	47b8      	blx	r7
 800eb90:	3001      	adds	r0, #1
 800eb92:	f43f aeae 	beq.w	800e8f2 <_printf_float+0xb6>
 800eb96:	f108 0801 	add.w	r8, r8, #1
 800eb9a:	e7ec      	b.n	800eb76 <_printf_float+0x33a>
 800eb9c:	4642      	mov	r2, r8
 800eb9e:	4631      	mov	r1, r6
 800eba0:	4628      	mov	r0, r5
 800eba2:	47b8      	blx	r7
 800eba4:	3001      	adds	r0, #1
 800eba6:	d1c2      	bne.n	800eb2e <_printf_float+0x2f2>
 800eba8:	e6a3      	b.n	800e8f2 <_printf_float+0xb6>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	4631      	mov	r1, r6
 800ebae:	4628      	mov	r0, r5
 800ebb0:	9206      	str	r2, [sp, #24]
 800ebb2:	47b8      	blx	r7
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	f43f ae9c 	beq.w	800e8f2 <_printf_float+0xb6>
 800ebba:	9a06      	ldr	r2, [sp, #24]
 800ebbc:	f10b 0b01 	add.w	fp, fp, #1
 800ebc0:	e7bb      	b.n	800eb3a <_printf_float+0x2fe>
 800ebc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4628      	mov	r0, r5
 800ebca:	47b8      	blx	r7
 800ebcc:	3001      	adds	r0, #1
 800ebce:	d1c0      	bne.n	800eb52 <_printf_float+0x316>
 800ebd0:	e68f      	b.n	800e8f2 <_printf_float+0xb6>
 800ebd2:	9a06      	ldr	r2, [sp, #24]
 800ebd4:	464b      	mov	r3, r9
 800ebd6:	4442      	add	r2, r8
 800ebd8:	4631      	mov	r1, r6
 800ebda:	4628      	mov	r0, r5
 800ebdc:	47b8      	blx	r7
 800ebde:	3001      	adds	r0, #1
 800ebe0:	d1c3      	bne.n	800eb6a <_printf_float+0x32e>
 800ebe2:	e686      	b.n	800e8f2 <_printf_float+0xb6>
 800ebe4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ebe8:	f1ba 0f01 	cmp.w	sl, #1
 800ebec:	dc01      	bgt.n	800ebf2 <_printf_float+0x3b6>
 800ebee:	07db      	lsls	r3, r3, #31
 800ebf0:	d536      	bpl.n	800ec60 <_printf_float+0x424>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	4642      	mov	r2, r8
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b8      	blx	r7
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	f43f ae78 	beq.w	800e8f2 <_printf_float+0xb6>
 800ec02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec06:	4631      	mov	r1, r6
 800ec08:	4628      	mov	r0, r5
 800ec0a:	47b8      	blx	r7
 800ec0c:	3001      	adds	r0, #1
 800ec0e:	f43f ae70 	beq.w	800e8f2 <_printf_float+0xb6>
 800ec12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec16:	2200      	movs	r2, #0
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec1e:	f7f1 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec22:	b9c0      	cbnz	r0, 800ec56 <_printf_float+0x41a>
 800ec24:	4653      	mov	r3, sl
 800ec26:	f108 0201 	add.w	r2, r8, #1
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	47b8      	blx	r7
 800ec30:	3001      	adds	r0, #1
 800ec32:	d10c      	bne.n	800ec4e <_printf_float+0x412>
 800ec34:	e65d      	b.n	800e8f2 <_printf_float+0xb6>
 800ec36:	2301      	movs	r3, #1
 800ec38:	465a      	mov	r2, fp
 800ec3a:	4631      	mov	r1, r6
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	47b8      	blx	r7
 800ec40:	3001      	adds	r0, #1
 800ec42:	f43f ae56 	beq.w	800e8f2 <_printf_float+0xb6>
 800ec46:	f108 0801 	add.w	r8, r8, #1
 800ec4a:	45d0      	cmp	r8, sl
 800ec4c:	dbf3      	blt.n	800ec36 <_printf_float+0x3fa>
 800ec4e:	464b      	mov	r3, r9
 800ec50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ec54:	e6df      	b.n	800ea16 <_printf_float+0x1da>
 800ec56:	f04f 0800 	mov.w	r8, #0
 800ec5a:	f104 0b1a 	add.w	fp, r4, #26
 800ec5e:	e7f4      	b.n	800ec4a <_printf_float+0x40e>
 800ec60:	2301      	movs	r3, #1
 800ec62:	4642      	mov	r2, r8
 800ec64:	e7e1      	b.n	800ec2a <_printf_float+0x3ee>
 800ec66:	2301      	movs	r3, #1
 800ec68:	464a      	mov	r2, r9
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	47b8      	blx	r7
 800ec70:	3001      	adds	r0, #1
 800ec72:	f43f ae3e 	beq.w	800e8f2 <_printf_float+0xb6>
 800ec76:	f108 0801 	add.w	r8, r8, #1
 800ec7a:	68e3      	ldr	r3, [r4, #12]
 800ec7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec7e:	1a5b      	subs	r3, r3, r1
 800ec80:	4543      	cmp	r3, r8
 800ec82:	dcf0      	bgt.n	800ec66 <_printf_float+0x42a>
 800ec84:	e6fc      	b.n	800ea80 <_printf_float+0x244>
 800ec86:	f04f 0800 	mov.w	r8, #0
 800ec8a:	f104 0919 	add.w	r9, r4, #25
 800ec8e:	e7f4      	b.n	800ec7a <_printf_float+0x43e>

0800ec90 <_printf_common>:
 800ec90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec94:	4616      	mov	r6, r2
 800ec96:	4698      	mov	r8, r3
 800ec98:	688a      	ldr	r2, [r1, #8]
 800ec9a:	690b      	ldr	r3, [r1, #16]
 800ec9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eca0:	4293      	cmp	r3, r2
 800eca2:	bfb8      	it	lt
 800eca4:	4613      	movlt	r3, r2
 800eca6:	6033      	str	r3, [r6, #0]
 800eca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ecac:	4607      	mov	r7, r0
 800ecae:	460c      	mov	r4, r1
 800ecb0:	b10a      	cbz	r2, 800ecb6 <_printf_common+0x26>
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	6033      	str	r3, [r6, #0]
 800ecb6:	6823      	ldr	r3, [r4, #0]
 800ecb8:	0699      	lsls	r1, r3, #26
 800ecba:	bf42      	ittt	mi
 800ecbc:	6833      	ldrmi	r3, [r6, #0]
 800ecbe:	3302      	addmi	r3, #2
 800ecc0:	6033      	strmi	r3, [r6, #0]
 800ecc2:	6825      	ldr	r5, [r4, #0]
 800ecc4:	f015 0506 	ands.w	r5, r5, #6
 800ecc8:	d106      	bne.n	800ecd8 <_printf_common+0x48>
 800ecca:	f104 0a19 	add.w	sl, r4, #25
 800ecce:	68e3      	ldr	r3, [r4, #12]
 800ecd0:	6832      	ldr	r2, [r6, #0]
 800ecd2:	1a9b      	subs	r3, r3, r2
 800ecd4:	42ab      	cmp	r3, r5
 800ecd6:	dc26      	bgt.n	800ed26 <_printf_common+0x96>
 800ecd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ecdc:	6822      	ldr	r2, [r4, #0]
 800ecde:	3b00      	subs	r3, #0
 800ece0:	bf18      	it	ne
 800ece2:	2301      	movne	r3, #1
 800ece4:	0692      	lsls	r2, r2, #26
 800ece6:	d42b      	bmi.n	800ed40 <_printf_common+0xb0>
 800ece8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ecec:	4641      	mov	r1, r8
 800ecee:	4638      	mov	r0, r7
 800ecf0:	47c8      	blx	r9
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	d01e      	beq.n	800ed34 <_printf_common+0xa4>
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	6922      	ldr	r2, [r4, #16]
 800ecfa:	f003 0306 	and.w	r3, r3, #6
 800ecfe:	2b04      	cmp	r3, #4
 800ed00:	bf02      	ittt	eq
 800ed02:	68e5      	ldreq	r5, [r4, #12]
 800ed04:	6833      	ldreq	r3, [r6, #0]
 800ed06:	1aed      	subeq	r5, r5, r3
 800ed08:	68a3      	ldr	r3, [r4, #8]
 800ed0a:	bf0c      	ite	eq
 800ed0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed10:	2500      	movne	r5, #0
 800ed12:	4293      	cmp	r3, r2
 800ed14:	bfc4      	itt	gt
 800ed16:	1a9b      	subgt	r3, r3, r2
 800ed18:	18ed      	addgt	r5, r5, r3
 800ed1a:	2600      	movs	r6, #0
 800ed1c:	341a      	adds	r4, #26
 800ed1e:	42b5      	cmp	r5, r6
 800ed20:	d11a      	bne.n	800ed58 <_printf_common+0xc8>
 800ed22:	2000      	movs	r0, #0
 800ed24:	e008      	b.n	800ed38 <_printf_common+0xa8>
 800ed26:	2301      	movs	r3, #1
 800ed28:	4652      	mov	r2, sl
 800ed2a:	4641      	mov	r1, r8
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	47c8      	blx	r9
 800ed30:	3001      	adds	r0, #1
 800ed32:	d103      	bne.n	800ed3c <_printf_common+0xac>
 800ed34:	f04f 30ff 	mov.w	r0, #4294967295
 800ed38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3c:	3501      	adds	r5, #1
 800ed3e:	e7c6      	b.n	800ecce <_printf_common+0x3e>
 800ed40:	18e1      	adds	r1, r4, r3
 800ed42:	1c5a      	adds	r2, r3, #1
 800ed44:	2030      	movs	r0, #48	@ 0x30
 800ed46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed4a:	4422      	add	r2, r4
 800ed4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed54:	3302      	adds	r3, #2
 800ed56:	e7c7      	b.n	800ece8 <_printf_common+0x58>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	4622      	mov	r2, r4
 800ed5c:	4641      	mov	r1, r8
 800ed5e:	4638      	mov	r0, r7
 800ed60:	47c8      	blx	r9
 800ed62:	3001      	adds	r0, #1
 800ed64:	d0e6      	beq.n	800ed34 <_printf_common+0xa4>
 800ed66:	3601      	adds	r6, #1
 800ed68:	e7d9      	b.n	800ed1e <_printf_common+0x8e>
	...

0800ed6c <_printf_i>:
 800ed6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed70:	7e0f      	ldrb	r7, [r1, #24]
 800ed72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed74:	2f78      	cmp	r7, #120	@ 0x78
 800ed76:	4691      	mov	r9, r2
 800ed78:	4680      	mov	r8, r0
 800ed7a:	460c      	mov	r4, r1
 800ed7c:	469a      	mov	sl, r3
 800ed7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed82:	d807      	bhi.n	800ed94 <_printf_i+0x28>
 800ed84:	2f62      	cmp	r7, #98	@ 0x62
 800ed86:	d80a      	bhi.n	800ed9e <_printf_i+0x32>
 800ed88:	2f00      	cmp	r7, #0
 800ed8a:	f000 80d1 	beq.w	800ef30 <_printf_i+0x1c4>
 800ed8e:	2f58      	cmp	r7, #88	@ 0x58
 800ed90:	f000 80b8 	beq.w	800ef04 <_printf_i+0x198>
 800ed94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed9c:	e03a      	b.n	800ee14 <_printf_i+0xa8>
 800ed9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eda2:	2b15      	cmp	r3, #21
 800eda4:	d8f6      	bhi.n	800ed94 <_printf_i+0x28>
 800eda6:	a101      	add	r1, pc, #4	@ (adr r1, 800edac <_printf_i+0x40>)
 800eda8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edac:	0800ee05 	.word	0x0800ee05
 800edb0:	0800ee19 	.word	0x0800ee19
 800edb4:	0800ed95 	.word	0x0800ed95
 800edb8:	0800ed95 	.word	0x0800ed95
 800edbc:	0800ed95 	.word	0x0800ed95
 800edc0:	0800ed95 	.word	0x0800ed95
 800edc4:	0800ee19 	.word	0x0800ee19
 800edc8:	0800ed95 	.word	0x0800ed95
 800edcc:	0800ed95 	.word	0x0800ed95
 800edd0:	0800ed95 	.word	0x0800ed95
 800edd4:	0800ed95 	.word	0x0800ed95
 800edd8:	0800ef17 	.word	0x0800ef17
 800eddc:	0800ee43 	.word	0x0800ee43
 800ede0:	0800eed1 	.word	0x0800eed1
 800ede4:	0800ed95 	.word	0x0800ed95
 800ede8:	0800ed95 	.word	0x0800ed95
 800edec:	0800ef39 	.word	0x0800ef39
 800edf0:	0800ed95 	.word	0x0800ed95
 800edf4:	0800ee43 	.word	0x0800ee43
 800edf8:	0800ed95 	.word	0x0800ed95
 800edfc:	0800ed95 	.word	0x0800ed95
 800ee00:	0800eed9 	.word	0x0800eed9
 800ee04:	6833      	ldr	r3, [r6, #0]
 800ee06:	1d1a      	adds	r2, r3, #4
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	6032      	str	r2, [r6, #0]
 800ee0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee14:	2301      	movs	r3, #1
 800ee16:	e09c      	b.n	800ef52 <_printf_i+0x1e6>
 800ee18:	6833      	ldr	r3, [r6, #0]
 800ee1a:	6820      	ldr	r0, [r4, #0]
 800ee1c:	1d19      	adds	r1, r3, #4
 800ee1e:	6031      	str	r1, [r6, #0]
 800ee20:	0606      	lsls	r6, r0, #24
 800ee22:	d501      	bpl.n	800ee28 <_printf_i+0xbc>
 800ee24:	681d      	ldr	r5, [r3, #0]
 800ee26:	e003      	b.n	800ee30 <_printf_i+0xc4>
 800ee28:	0645      	lsls	r5, r0, #25
 800ee2a:	d5fb      	bpl.n	800ee24 <_printf_i+0xb8>
 800ee2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee30:	2d00      	cmp	r5, #0
 800ee32:	da03      	bge.n	800ee3c <_printf_i+0xd0>
 800ee34:	232d      	movs	r3, #45	@ 0x2d
 800ee36:	426d      	negs	r5, r5
 800ee38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee3c:	4858      	ldr	r0, [pc, #352]	@ (800efa0 <_printf_i+0x234>)
 800ee3e:	230a      	movs	r3, #10
 800ee40:	e011      	b.n	800ee66 <_printf_i+0xfa>
 800ee42:	6821      	ldr	r1, [r4, #0]
 800ee44:	6833      	ldr	r3, [r6, #0]
 800ee46:	0608      	lsls	r0, r1, #24
 800ee48:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee4c:	d402      	bmi.n	800ee54 <_printf_i+0xe8>
 800ee4e:	0649      	lsls	r1, r1, #25
 800ee50:	bf48      	it	mi
 800ee52:	b2ad      	uxthmi	r5, r5
 800ee54:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee56:	4852      	ldr	r0, [pc, #328]	@ (800efa0 <_printf_i+0x234>)
 800ee58:	6033      	str	r3, [r6, #0]
 800ee5a:	bf14      	ite	ne
 800ee5c:	230a      	movne	r3, #10
 800ee5e:	2308      	moveq	r3, #8
 800ee60:	2100      	movs	r1, #0
 800ee62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee66:	6866      	ldr	r6, [r4, #4]
 800ee68:	60a6      	str	r6, [r4, #8]
 800ee6a:	2e00      	cmp	r6, #0
 800ee6c:	db05      	blt.n	800ee7a <_printf_i+0x10e>
 800ee6e:	6821      	ldr	r1, [r4, #0]
 800ee70:	432e      	orrs	r6, r5
 800ee72:	f021 0104 	bic.w	r1, r1, #4
 800ee76:	6021      	str	r1, [r4, #0]
 800ee78:	d04b      	beq.n	800ef12 <_printf_i+0x1a6>
 800ee7a:	4616      	mov	r6, r2
 800ee7c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee80:	fb03 5711 	mls	r7, r3, r1, r5
 800ee84:	5dc7      	ldrb	r7, [r0, r7]
 800ee86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee8a:	462f      	mov	r7, r5
 800ee8c:	42bb      	cmp	r3, r7
 800ee8e:	460d      	mov	r5, r1
 800ee90:	d9f4      	bls.n	800ee7c <_printf_i+0x110>
 800ee92:	2b08      	cmp	r3, #8
 800ee94:	d10b      	bne.n	800eeae <_printf_i+0x142>
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	07df      	lsls	r7, r3, #31
 800ee9a:	d508      	bpl.n	800eeae <_printf_i+0x142>
 800ee9c:	6923      	ldr	r3, [r4, #16]
 800ee9e:	6861      	ldr	r1, [r4, #4]
 800eea0:	4299      	cmp	r1, r3
 800eea2:	bfde      	ittt	le
 800eea4:	2330      	movle	r3, #48	@ 0x30
 800eea6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eeaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eeae:	1b92      	subs	r2, r2, r6
 800eeb0:	6122      	str	r2, [r4, #16]
 800eeb2:	f8cd a000 	str.w	sl, [sp]
 800eeb6:	464b      	mov	r3, r9
 800eeb8:	aa03      	add	r2, sp, #12
 800eeba:	4621      	mov	r1, r4
 800eebc:	4640      	mov	r0, r8
 800eebe:	f7ff fee7 	bl	800ec90 <_printf_common>
 800eec2:	3001      	adds	r0, #1
 800eec4:	d14a      	bne.n	800ef5c <_printf_i+0x1f0>
 800eec6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeca:	b004      	add	sp, #16
 800eecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	f043 0320 	orr.w	r3, r3, #32
 800eed6:	6023      	str	r3, [r4, #0]
 800eed8:	4832      	ldr	r0, [pc, #200]	@ (800efa4 <_printf_i+0x238>)
 800eeda:	2778      	movs	r7, #120	@ 0x78
 800eedc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	6831      	ldr	r1, [r6, #0]
 800eee4:	061f      	lsls	r7, r3, #24
 800eee6:	f851 5b04 	ldr.w	r5, [r1], #4
 800eeea:	d402      	bmi.n	800eef2 <_printf_i+0x186>
 800eeec:	065f      	lsls	r7, r3, #25
 800eeee:	bf48      	it	mi
 800eef0:	b2ad      	uxthmi	r5, r5
 800eef2:	6031      	str	r1, [r6, #0]
 800eef4:	07d9      	lsls	r1, r3, #31
 800eef6:	bf44      	itt	mi
 800eef8:	f043 0320 	orrmi.w	r3, r3, #32
 800eefc:	6023      	strmi	r3, [r4, #0]
 800eefe:	b11d      	cbz	r5, 800ef08 <_printf_i+0x19c>
 800ef00:	2310      	movs	r3, #16
 800ef02:	e7ad      	b.n	800ee60 <_printf_i+0xf4>
 800ef04:	4826      	ldr	r0, [pc, #152]	@ (800efa0 <_printf_i+0x234>)
 800ef06:	e7e9      	b.n	800eedc <_printf_i+0x170>
 800ef08:	6823      	ldr	r3, [r4, #0]
 800ef0a:	f023 0320 	bic.w	r3, r3, #32
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	e7f6      	b.n	800ef00 <_printf_i+0x194>
 800ef12:	4616      	mov	r6, r2
 800ef14:	e7bd      	b.n	800ee92 <_printf_i+0x126>
 800ef16:	6833      	ldr	r3, [r6, #0]
 800ef18:	6825      	ldr	r5, [r4, #0]
 800ef1a:	6961      	ldr	r1, [r4, #20]
 800ef1c:	1d18      	adds	r0, r3, #4
 800ef1e:	6030      	str	r0, [r6, #0]
 800ef20:	062e      	lsls	r6, r5, #24
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	d501      	bpl.n	800ef2a <_printf_i+0x1be>
 800ef26:	6019      	str	r1, [r3, #0]
 800ef28:	e002      	b.n	800ef30 <_printf_i+0x1c4>
 800ef2a:	0668      	lsls	r0, r5, #25
 800ef2c:	d5fb      	bpl.n	800ef26 <_printf_i+0x1ba>
 800ef2e:	8019      	strh	r1, [r3, #0]
 800ef30:	2300      	movs	r3, #0
 800ef32:	6123      	str	r3, [r4, #16]
 800ef34:	4616      	mov	r6, r2
 800ef36:	e7bc      	b.n	800eeb2 <_printf_i+0x146>
 800ef38:	6833      	ldr	r3, [r6, #0]
 800ef3a:	1d1a      	adds	r2, r3, #4
 800ef3c:	6032      	str	r2, [r6, #0]
 800ef3e:	681e      	ldr	r6, [r3, #0]
 800ef40:	6862      	ldr	r2, [r4, #4]
 800ef42:	2100      	movs	r1, #0
 800ef44:	4630      	mov	r0, r6
 800ef46:	f7f1 f943 	bl	80001d0 <memchr>
 800ef4a:	b108      	cbz	r0, 800ef50 <_printf_i+0x1e4>
 800ef4c:	1b80      	subs	r0, r0, r6
 800ef4e:	6060      	str	r0, [r4, #4]
 800ef50:	6863      	ldr	r3, [r4, #4]
 800ef52:	6123      	str	r3, [r4, #16]
 800ef54:	2300      	movs	r3, #0
 800ef56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef5a:	e7aa      	b.n	800eeb2 <_printf_i+0x146>
 800ef5c:	6923      	ldr	r3, [r4, #16]
 800ef5e:	4632      	mov	r2, r6
 800ef60:	4649      	mov	r1, r9
 800ef62:	4640      	mov	r0, r8
 800ef64:	47d0      	blx	sl
 800ef66:	3001      	adds	r0, #1
 800ef68:	d0ad      	beq.n	800eec6 <_printf_i+0x15a>
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	079b      	lsls	r3, r3, #30
 800ef6e:	d413      	bmi.n	800ef98 <_printf_i+0x22c>
 800ef70:	68e0      	ldr	r0, [r4, #12]
 800ef72:	9b03      	ldr	r3, [sp, #12]
 800ef74:	4298      	cmp	r0, r3
 800ef76:	bfb8      	it	lt
 800ef78:	4618      	movlt	r0, r3
 800ef7a:	e7a6      	b.n	800eeca <_printf_i+0x15e>
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	4632      	mov	r2, r6
 800ef80:	4649      	mov	r1, r9
 800ef82:	4640      	mov	r0, r8
 800ef84:	47d0      	blx	sl
 800ef86:	3001      	adds	r0, #1
 800ef88:	d09d      	beq.n	800eec6 <_printf_i+0x15a>
 800ef8a:	3501      	adds	r5, #1
 800ef8c:	68e3      	ldr	r3, [r4, #12]
 800ef8e:	9903      	ldr	r1, [sp, #12]
 800ef90:	1a5b      	subs	r3, r3, r1
 800ef92:	42ab      	cmp	r3, r5
 800ef94:	dcf2      	bgt.n	800ef7c <_printf_i+0x210>
 800ef96:	e7eb      	b.n	800ef70 <_printf_i+0x204>
 800ef98:	2500      	movs	r5, #0
 800ef9a:	f104 0619 	add.w	r6, r4, #25
 800ef9e:	e7f5      	b.n	800ef8c <_printf_i+0x220>
 800efa0:	08012b72 	.word	0x08012b72
 800efa4:	08012b83 	.word	0x08012b83

0800efa8 <_scanf_float>:
 800efa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efac:	b087      	sub	sp, #28
 800efae:	4691      	mov	r9, r2
 800efb0:	9303      	str	r3, [sp, #12]
 800efb2:	688b      	ldr	r3, [r1, #8]
 800efb4:	1e5a      	subs	r2, r3, #1
 800efb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800efba:	bf81      	itttt	hi
 800efbc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800efc0:	eb03 0b05 	addhi.w	fp, r3, r5
 800efc4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800efc8:	608b      	strhi	r3, [r1, #8]
 800efca:	680b      	ldr	r3, [r1, #0]
 800efcc:	460a      	mov	r2, r1
 800efce:	f04f 0500 	mov.w	r5, #0
 800efd2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800efd6:	f842 3b1c 	str.w	r3, [r2], #28
 800efda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800efde:	4680      	mov	r8, r0
 800efe0:	460c      	mov	r4, r1
 800efe2:	bf98      	it	ls
 800efe4:	f04f 0b00 	movls.w	fp, #0
 800efe8:	9201      	str	r2, [sp, #4]
 800efea:	4616      	mov	r6, r2
 800efec:	46aa      	mov	sl, r5
 800efee:	462f      	mov	r7, r5
 800eff0:	9502      	str	r5, [sp, #8]
 800eff2:	68a2      	ldr	r2, [r4, #8]
 800eff4:	b15a      	cbz	r2, 800f00e <_scanf_float+0x66>
 800eff6:	f8d9 3000 	ldr.w	r3, [r9]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	2b4e      	cmp	r3, #78	@ 0x4e
 800effe:	d863      	bhi.n	800f0c8 <_scanf_float+0x120>
 800f000:	2b40      	cmp	r3, #64	@ 0x40
 800f002:	d83b      	bhi.n	800f07c <_scanf_float+0xd4>
 800f004:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f008:	b2c8      	uxtb	r0, r1
 800f00a:	280e      	cmp	r0, #14
 800f00c:	d939      	bls.n	800f082 <_scanf_float+0xda>
 800f00e:	b11f      	cbz	r7, 800f018 <_scanf_float+0x70>
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f016:	6023      	str	r3, [r4, #0]
 800f018:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f01c:	f1ba 0f01 	cmp.w	sl, #1
 800f020:	f200 8114 	bhi.w	800f24c <_scanf_float+0x2a4>
 800f024:	9b01      	ldr	r3, [sp, #4]
 800f026:	429e      	cmp	r6, r3
 800f028:	f200 8105 	bhi.w	800f236 <_scanf_float+0x28e>
 800f02c:	2001      	movs	r0, #1
 800f02e:	b007      	add	sp, #28
 800f030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f034:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f038:	2a0d      	cmp	r2, #13
 800f03a:	d8e8      	bhi.n	800f00e <_scanf_float+0x66>
 800f03c:	a101      	add	r1, pc, #4	@ (adr r1, 800f044 <_scanf_float+0x9c>)
 800f03e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f042:	bf00      	nop
 800f044:	0800f18d 	.word	0x0800f18d
 800f048:	0800f00f 	.word	0x0800f00f
 800f04c:	0800f00f 	.word	0x0800f00f
 800f050:	0800f00f 	.word	0x0800f00f
 800f054:	0800f1e9 	.word	0x0800f1e9
 800f058:	0800f1c3 	.word	0x0800f1c3
 800f05c:	0800f00f 	.word	0x0800f00f
 800f060:	0800f00f 	.word	0x0800f00f
 800f064:	0800f19b 	.word	0x0800f19b
 800f068:	0800f00f 	.word	0x0800f00f
 800f06c:	0800f00f 	.word	0x0800f00f
 800f070:	0800f00f 	.word	0x0800f00f
 800f074:	0800f00f 	.word	0x0800f00f
 800f078:	0800f157 	.word	0x0800f157
 800f07c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f080:	e7da      	b.n	800f038 <_scanf_float+0x90>
 800f082:	290e      	cmp	r1, #14
 800f084:	d8c3      	bhi.n	800f00e <_scanf_float+0x66>
 800f086:	a001      	add	r0, pc, #4	@ (adr r0, 800f08c <_scanf_float+0xe4>)
 800f088:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f08c:	0800f147 	.word	0x0800f147
 800f090:	0800f00f 	.word	0x0800f00f
 800f094:	0800f147 	.word	0x0800f147
 800f098:	0800f1d7 	.word	0x0800f1d7
 800f09c:	0800f00f 	.word	0x0800f00f
 800f0a0:	0800f0e9 	.word	0x0800f0e9
 800f0a4:	0800f12d 	.word	0x0800f12d
 800f0a8:	0800f12d 	.word	0x0800f12d
 800f0ac:	0800f12d 	.word	0x0800f12d
 800f0b0:	0800f12d 	.word	0x0800f12d
 800f0b4:	0800f12d 	.word	0x0800f12d
 800f0b8:	0800f12d 	.word	0x0800f12d
 800f0bc:	0800f12d 	.word	0x0800f12d
 800f0c0:	0800f12d 	.word	0x0800f12d
 800f0c4:	0800f12d 	.word	0x0800f12d
 800f0c8:	2b6e      	cmp	r3, #110	@ 0x6e
 800f0ca:	d809      	bhi.n	800f0e0 <_scanf_float+0x138>
 800f0cc:	2b60      	cmp	r3, #96	@ 0x60
 800f0ce:	d8b1      	bhi.n	800f034 <_scanf_float+0x8c>
 800f0d0:	2b54      	cmp	r3, #84	@ 0x54
 800f0d2:	d07b      	beq.n	800f1cc <_scanf_float+0x224>
 800f0d4:	2b59      	cmp	r3, #89	@ 0x59
 800f0d6:	d19a      	bne.n	800f00e <_scanf_float+0x66>
 800f0d8:	2d07      	cmp	r5, #7
 800f0da:	d198      	bne.n	800f00e <_scanf_float+0x66>
 800f0dc:	2508      	movs	r5, #8
 800f0de:	e02f      	b.n	800f140 <_scanf_float+0x198>
 800f0e0:	2b74      	cmp	r3, #116	@ 0x74
 800f0e2:	d073      	beq.n	800f1cc <_scanf_float+0x224>
 800f0e4:	2b79      	cmp	r3, #121	@ 0x79
 800f0e6:	e7f6      	b.n	800f0d6 <_scanf_float+0x12e>
 800f0e8:	6821      	ldr	r1, [r4, #0]
 800f0ea:	05c8      	lsls	r0, r1, #23
 800f0ec:	d51e      	bpl.n	800f12c <_scanf_float+0x184>
 800f0ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f0f2:	6021      	str	r1, [r4, #0]
 800f0f4:	3701      	adds	r7, #1
 800f0f6:	f1bb 0f00 	cmp.w	fp, #0
 800f0fa:	d003      	beq.n	800f104 <_scanf_float+0x15c>
 800f0fc:	3201      	adds	r2, #1
 800f0fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f102:	60a2      	str	r2, [r4, #8]
 800f104:	68a3      	ldr	r3, [r4, #8]
 800f106:	3b01      	subs	r3, #1
 800f108:	60a3      	str	r3, [r4, #8]
 800f10a:	6923      	ldr	r3, [r4, #16]
 800f10c:	3301      	adds	r3, #1
 800f10e:	6123      	str	r3, [r4, #16]
 800f110:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f114:	3b01      	subs	r3, #1
 800f116:	2b00      	cmp	r3, #0
 800f118:	f8c9 3004 	str.w	r3, [r9, #4]
 800f11c:	f340 8082 	ble.w	800f224 <_scanf_float+0x27c>
 800f120:	f8d9 3000 	ldr.w	r3, [r9]
 800f124:	3301      	adds	r3, #1
 800f126:	f8c9 3000 	str.w	r3, [r9]
 800f12a:	e762      	b.n	800eff2 <_scanf_float+0x4a>
 800f12c:	eb1a 0105 	adds.w	r1, sl, r5
 800f130:	f47f af6d 	bne.w	800f00e <_scanf_float+0x66>
 800f134:	6822      	ldr	r2, [r4, #0]
 800f136:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f13a:	6022      	str	r2, [r4, #0]
 800f13c:	460d      	mov	r5, r1
 800f13e:	468a      	mov	sl, r1
 800f140:	f806 3b01 	strb.w	r3, [r6], #1
 800f144:	e7de      	b.n	800f104 <_scanf_float+0x15c>
 800f146:	6822      	ldr	r2, [r4, #0]
 800f148:	0610      	lsls	r0, r2, #24
 800f14a:	f57f af60 	bpl.w	800f00e <_scanf_float+0x66>
 800f14e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f152:	6022      	str	r2, [r4, #0]
 800f154:	e7f4      	b.n	800f140 <_scanf_float+0x198>
 800f156:	f1ba 0f00 	cmp.w	sl, #0
 800f15a:	d10c      	bne.n	800f176 <_scanf_float+0x1ce>
 800f15c:	b977      	cbnz	r7, 800f17c <_scanf_float+0x1d4>
 800f15e:	6822      	ldr	r2, [r4, #0]
 800f160:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f164:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f168:	d108      	bne.n	800f17c <_scanf_float+0x1d4>
 800f16a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f16e:	6022      	str	r2, [r4, #0]
 800f170:	f04f 0a01 	mov.w	sl, #1
 800f174:	e7e4      	b.n	800f140 <_scanf_float+0x198>
 800f176:	f1ba 0f02 	cmp.w	sl, #2
 800f17a:	d050      	beq.n	800f21e <_scanf_float+0x276>
 800f17c:	2d01      	cmp	r5, #1
 800f17e:	d002      	beq.n	800f186 <_scanf_float+0x1de>
 800f180:	2d04      	cmp	r5, #4
 800f182:	f47f af44 	bne.w	800f00e <_scanf_float+0x66>
 800f186:	3501      	adds	r5, #1
 800f188:	b2ed      	uxtb	r5, r5
 800f18a:	e7d9      	b.n	800f140 <_scanf_float+0x198>
 800f18c:	f1ba 0f01 	cmp.w	sl, #1
 800f190:	f47f af3d 	bne.w	800f00e <_scanf_float+0x66>
 800f194:	f04f 0a02 	mov.w	sl, #2
 800f198:	e7d2      	b.n	800f140 <_scanf_float+0x198>
 800f19a:	b975      	cbnz	r5, 800f1ba <_scanf_float+0x212>
 800f19c:	2f00      	cmp	r7, #0
 800f19e:	f47f af37 	bne.w	800f010 <_scanf_float+0x68>
 800f1a2:	6822      	ldr	r2, [r4, #0]
 800f1a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f1a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f1ac:	f040 8103 	bne.w	800f3b6 <_scanf_float+0x40e>
 800f1b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1b4:	6022      	str	r2, [r4, #0]
 800f1b6:	2501      	movs	r5, #1
 800f1b8:	e7c2      	b.n	800f140 <_scanf_float+0x198>
 800f1ba:	2d03      	cmp	r5, #3
 800f1bc:	d0e3      	beq.n	800f186 <_scanf_float+0x1de>
 800f1be:	2d05      	cmp	r5, #5
 800f1c0:	e7df      	b.n	800f182 <_scanf_float+0x1da>
 800f1c2:	2d02      	cmp	r5, #2
 800f1c4:	f47f af23 	bne.w	800f00e <_scanf_float+0x66>
 800f1c8:	2503      	movs	r5, #3
 800f1ca:	e7b9      	b.n	800f140 <_scanf_float+0x198>
 800f1cc:	2d06      	cmp	r5, #6
 800f1ce:	f47f af1e 	bne.w	800f00e <_scanf_float+0x66>
 800f1d2:	2507      	movs	r5, #7
 800f1d4:	e7b4      	b.n	800f140 <_scanf_float+0x198>
 800f1d6:	6822      	ldr	r2, [r4, #0]
 800f1d8:	0591      	lsls	r1, r2, #22
 800f1da:	f57f af18 	bpl.w	800f00e <_scanf_float+0x66>
 800f1de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f1e2:	6022      	str	r2, [r4, #0]
 800f1e4:	9702      	str	r7, [sp, #8]
 800f1e6:	e7ab      	b.n	800f140 <_scanf_float+0x198>
 800f1e8:	6822      	ldr	r2, [r4, #0]
 800f1ea:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f1ee:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f1f2:	d005      	beq.n	800f200 <_scanf_float+0x258>
 800f1f4:	0550      	lsls	r0, r2, #21
 800f1f6:	f57f af0a 	bpl.w	800f00e <_scanf_float+0x66>
 800f1fa:	2f00      	cmp	r7, #0
 800f1fc:	f000 80db 	beq.w	800f3b6 <_scanf_float+0x40e>
 800f200:	0591      	lsls	r1, r2, #22
 800f202:	bf58      	it	pl
 800f204:	9902      	ldrpl	r1, [sp, #8]
 800f206:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f20a:	bf58      	it	pl
 800f20c:	1a79      	subpl	r1, r7, r1
 800f20e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f212:	bf58      	it	pl
 800f214:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f218:	6022      	str	r2, [r4, #0]
 800f21a:	2700      	movs	r7, #0
 800f21c:	e790      	b.n	800f140 <_scanf_float+0x198>
 800f21e:	f04f 0a03 	mov.w	sl, #3
 800f222:	e78d      	b.n	800f140 <_scanf_float+0x198>
 800f224:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f228:	4649      	mov	r1, r9
 800f22a:	4640      	mov	r0, r8
 800f22c:	4798      	blx	r3
 800f22e:	2800      	cmp	r0, #0
 800f230:	f43f aedf 	beq.w	800eff2 <_scanf_float+0x4a>
 800f234:	e6eb      	b.n	800f00e <_scanf_float+0x66>
 800f236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f23a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f23e:	464a      	mov	r2, r9
 800f240:	4640      	mov	r0, r8
 800f242:	4798      	blx	r3
 800f244:	6923      	ldr	r3, [r4, #16]
 800f246:	3b01      	subs	r3, #1
 800f248:	6123      	str	r3, [r4, #16]
 800f24a:	e6eb      	b.n	800f024 <_scanf_float+0x7c>
 800f24c:	1e6b      	subs	r3, r5, #1
 800f24e:	2b06      	cmp	r3, #6
 800f250:	d824      	bhi.n	800f29c <_scanf_float+0x2f4>
 800f252:	2d02      	cmp	r5, #2
 800f254:	d836      	bhi.n	800f2c4 <_scanf_float+0x31c>
 800f256:	9b01      	ldr	r3, [sp, #4]
 800f258:	429e      	cmp	r6, r3
 800f25a:	f67f aee7 	bls.w	800f02c <_scanf_float+0x84>
 800f25e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f262:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f266:	464a      	mov	r2, r9
 800f268:	4640      	mov	r0, r8
 800f26a:	4798      	blx	r3
 800f26c:	6923      	ldr	r3, [r4, #16]
 800f26e:	3b01      	subs	r3, #1
 800f270:	6123      	str	r3, [r4, #16]
 800f272:	e7f0      	b.n	800f256 <_scanf_float+0x2ae>
 800f274:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f278:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f27c:	464a      	mov	r2, r9
 800f27e:	4640      	mov	r0, r8
 800f280:	4798      	blx	r3
 800f282:	6923      	ldr	r3, [r4, #16]
 800f284:	3b01      	subs	r3, #1
 800f286:	6123      	str	r3, [r4, #16]
 800f288:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f28c:	fa5f fa8a 	uxtb.w	sl, sl
 800f290:	f1ba 0f02 	cmp.w	sl, #2
 800f294:	d1ee      	bne.n	800f274 <_scanf_float+0x2cc>
 800f296:	3d03      	subs	r5, #3
 800f298:	b2ed      	uxtb	r5, r5
 800f29a:	1b76      	subs	r6, r6, r5
 800f29c:	6823      	ldr	r3, [r4, #0]
 800f29e:	05da      	lsls	r2, r3, #23
 800f2a0:	d530      	bpl.n	800f304 <_scanf_float+0x35c>
 800f2a2:	055b      	lsls	r3, r3, #21
 800f2a4:	d511      	bpl.n	800f2ca <_scanf_float+0x322>
 800f2a6:	9b01      	ldr	r3, [sp, #4]
 800f2a8:	429e      	cmp	r6, r3
 800f2aa:	f67f aebf 	bls.w	800f02c <_scanf_float+0x84>
 800f2ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2b6:	464a      	mov	r2, r9
 800f2b8:	4640      	mov	r0, r8
 800f2ba:	4798      	blx	r3
 800f2bc:	6923      	ldr	r3, [r4, #16]
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	6123      	str	r3, [r4, #16]
 800f2c2:	e7f0      	b.n	800f2a6 <_scanf_float+0x2fe>
 800f2c4:	46aa      	mov	sl, r5
 800f2c6:	46b3      	mov	fp, r6
 800f2c8:	e7de      	b.n	800f288 <_scanf_float+0x2e0>
 800f2ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f2ce:	6923      	ldr	r3, [r4, #16]
 800f2d0:	2965      	cmp	r1, #101	@ 0x65
 800f2d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f2d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800f2da:	6123      	str	r3, [r4, #16]
 800f2dc:	d00c      	beq.n	800f2f8 <_scanf_float+0x350>
 800f2de:	2945      	cmp	r1, #69	@ 0x45
 800f2e0:	d00a      	beq.n	800f2f8 <_scanf_float+0x350>
 800f2e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2e6:	464a      	mov	r2, r9
 800f2e8:	4640      	mov	r0, r8
 800f2ea:	4798      	blx	r3
 800f2ec:	6923      	ldr	r3, [r4, #16]
 800f2ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	1eb5      	subs	r5, r6, #2
 800f2f6:	6123      	str	r3, [r4, #16]
 800f2f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2fc:	464a      	mov	r2, r9
 800f2fe:	4640      	mov	r0, r8
 800f300:	4798      	blx	r3
 800f302:	462e      	mov	r6, r5
 800f304:	6822      	ldr	r2, [r4, #0]
 800f306:	f012 0210 	ands.w	r2, r2, #16
 800f30a:	d001      	beq.n	800f310 <_scanf_float+0x368>
 800f30c:	2000      	movs	r0, #0
 800f30e:	e68e      	b.n	800f02e <_scanf_float+0x86>
 800f310:	7032      	strb	r2, [r6, #0]
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f31c:	d125      	bne.n	800f36a <_scanf_float+0x3c2>
 800f31e:	9b02      	ldr	r3, [sp, #8]
 800f320:	429f      	cmp	r7, r3
 800f322:	d00a      	beq.n	800f33a <_scanf_float+0x392>
 800f324:	1bda      	subs	r2, r3, r7
 800f326:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f32a:	429e      	cmp	r6, r3
 800f32c:	bf28      	it	cs
 800f32e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f332:	4922      	ldr	r1, [pc, #136]	@ (800f3bc <_scanf_float+0x414>)
 800f334:	4630      	mov	r0, r6
 800f336:	f000 f93d 	bl	800f5b4 <siprintf>
 800f33a:	9901      	ldr	r1, [sp, #4]
 800f33c:	2200      	movs	r2, #0
 800f33e:	4640      	mov	r0, r8
 800f340:	f7ff f95a 	bl	800e5f8 <_strtod_r>
 800f344:	9b03      	ldr	r3, [sp, #12]
 800f346:	6821      	ldr	r1, [r4, #0]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f011 0f02 	tst.w	r1, #2
 800f34e:	ec57 6b10 	vmov	r6, r7, d0
 800f352:	f103 0204 	add.w	r2, r3, #4
 800f356:	d015      	beq.n	800f384 <_scanf_float+0x3dc>
 800f358:	9903      	ldr	r1, [sp, #12]
 800f35a:	600a      	str	r2, [r1, #0]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	e9c3 6700 	strd	r6, r7, [r3]
 800f362:	68e3      	ldr	r3, [r4, #12]
 800f364:	3301      	adds	r3, #1
 800f366:	60e3      	str	r3, [r4, #12]
 800f368:	e7d0      	b.n	800f30c <_scanf_float+0x364>
 800f36a:	9b04      	ldr	r3, [sp, #16]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d0e4      	beq.n	800f33a <_scanf_float+0x392>
 800f370:	9905      	ldr	r1, [sp, #20]
 800f372:	230a      	movs	r3, #10
 800f374:	3101      	adds	r1, #1
 800f376:	4640      	mov	r0, r8
 800f378:	f7ff f9be 	bl	800e6f8 <_strtol_r>
 800f37c:	9b04      	ldr	r3, [sp, #16]
 800f37e:	9e05      	ldr	r6, [sp, #20]
 800f380:	1ac2      	subs	r2, r0, r3
 800f382:	e7d0      	b.n	800f326 <_scanf_float+0x37e>
 800f384:	f011 0f04 	tst.w	r1, #4
 800f388:	9903      	ldr	r1, [sp, #12]
 800f38a:	600a      	str	r2, [r1, #0]
 800f38c:	d1e6      	bne.n	800f35c <_scanf_float+0x3b4>
 800f38e:	681d      	ldr	r5, [r3, #0]
 800f390:	4632      	mov	r2, r6
 800f392:	463b      	mov	r3, r7
 800f394:	4630      	mov	r0, r6
 800f396:	4639      	mov	r1, r7
 800f398:	f7f1 fbc8 	bl	8000b2c <__aeabi_dcmpun>
 800f39c:	b128      	cbz	r0, 800f3aa <_scanf_float+0x402>
 800f39e:	4808      	ldr	r0, [pc, #32]	@ (800f3c0 <_scanf_float+0x418>)
 800f3a0:	f000 fab2 	bl	800f908 <nanf>
 800f3a4:	ed85 0a00 	vstr	s0, [r5]
 800f3a8:	e7db      	b.n	800f362 <_scanf_float+0x3ba>
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	f7f1 fc1b 	bl	8000be8 <__aeabi_d2f>
 800f3b2:	6028      	str	r0, [r5, #0]
 800f3b4:	e7d5      	b.n	800f362 <_scanf_float+0x3ba>
 800f3b6:	2700      	movs	r7, #0
 800f3b8:	e62e      	b.n	800f018 <_scanf_float+0x70>
 800f3ba:	bf00      	nop
 800f3bc:	08012b94 	.word	0x08012b94
 800f3c0:	08012d4e 	.word	0x08012d4e

0800f3c4 <std>:
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	b510      	push	{r4, lr}
 800f3c8:	4604      	mov	r4, r0
 800f3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800f3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3d2:	6083      	str	r3, [r0, #8]
 800f3d4:	8181      	strh	r1, [r0, #12]
 800f3d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f3d8:	81c2      	strh	r2, [r0, #14]
 800f3da:	6183      	str	r3, [r0, #24]
 800f3dc:	4619      	mov	r1, r3
 800f3de:	2208      	movs	r2, #8
 800f3e0:	305c      	adds	r0, #92	@ 0x5c
 800f3e2:	f000 f97a 	bl	800f6da <memset>
 800f3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f41c <std+0x58>)
 800f3e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800f3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f420 <std+0x5c>)
 800f3ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f3ee:	4b0d      	ldr	r3, [pc, #52]	@ (800f424 <std+0x60>)
 800f3f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f428 <std+0x64>)
 800f3f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f42c <std+0x68>)
 800f3f8:	6224      	str	r4, [r4, #32]
 800f3fa:	429c      	cmp	r4, r3
 800f3fc:	d006      	beq.n	800f40c <std+0x48>
 800f3fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f402:	4294      	cmp	r4, r2
 800f404:	d002      	beq.n	800f40c <std+0x48>
 800f406:	33d0      	adds	r3, #208	@ 0xd0
 800f408:	429c      	cmp	r4, r3
 800f40a:	d105      	bne.n	800f418 <std+0x54>
 800f40c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f414:	f000 ba5e 	b.w	800f8d4 <__retarget_lock_init_recursive>
 800f418:	bd10      	pop	{r4, pc}
 800f41a:	bf00      	nop
 800f41c:	0800f651 	.word	0x0800f651
 800f420:	0800f677 	.word	0x0800f677
 800f424:	0800f6af 	.word	0x0800f6af
 800f428:	0800f6d3 	.word	0x0800f6d3
 800f42c:	20006068 	.word	0x20006068

0800f430 <stdio_exit_handler>:
 800f430:	4a02      	ldr	r2, [pc, #8]	@ (800f43c <stdio_exit_handler+0xc>)
 800f432:	4903      	ldr	r1, [pc, #12]	@ (800f440 <stdio_exit_handler+0x10>)
 800f434:	4803      	ldr	r0, [pc, #12]	@ (800f444 <stdio_exit_handler+0x14>)
 800f436:	f000 b869 	b.w	800f50c <_fwalk_sglue>
 800f43a:	bf00      	nop
 800f43c:	2000003c 	.word	0x2000003c
 800f440:	08012135 	.word	0x08012135
 800f444:	200001b8 	.word	0x200001b8

0800f448 <cleanup_stdio>:
 800f448:	6841      	ldr	r1, [r0, #4]
 800f44a:	4b0c      	ldr	r3, [pc, #48]	@ (800f47c <cleanup_stdio+0x34>)
 800f44c:	4299      	cmp	r1, r3
 800f44e:	b510      	push	{r4, lr}
 800f450:	4604      	mov	r4, r0
 800f452:	d001      	beq.n	800f458 <cleanup_stdio+0x10>
 800f454:	f002 fe6e 	bl	8012134 <_fflush_r>
 800f458:	68a1      	ldr	r1, [r4, #8]
 800f45a:	4b09      	ldr	r3, [pc, #36]	@ (800f480 <cleanup_stdio+0x38>)
 800f45c:	4299      	cmp	r1, r3
 800f45e:	d002      	beq.n	800f466 <cleanup_stdio+0x1e>
 800f460:	4620      	mov	r0, r4
 800f462:	f002 fe67 	bl	8012134 <_fflush_r>
 800f466:	68e1      	ldr	r1, [r4, #12]
 800f468:	4b06      	ldr	r3, [pc, #24]	@ (800f484 <cleanup_stdio+0x3c>)
 800f46a:	4299      	cmp	r1, r3
 800f46c:	d004      	beq.n	800f478 <cleanup_stdio+0x30>
 800f46e:	4620      	mov	r0, r4
 800f470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f474:	f002 be5e 	b.w	8012134 <_fflush_r>
 800f478:	bd10      	pop	{r4, pc}
 800f47a:	bf00      	nop
 800f47c:	20006068 	.word	0x20006068
 800f480:	200060d0 	.word	0x200060d0
 800f484:	20006138 	.word	0x20006138

0800f488 <global_stdio_init.part.0>:
 800f488:	b510      	push	{r4, lr}
 800f48a:	4b0b      	ldr	r3, [pc, #44]	@ (800f4b8 <global_stdio_init.part.0+0x30>)
 800f48c:	4c0b      	ldr	r4, [pc, #44]	@ (800f4bc <global_stdio_init.part.0+0x34>)
 800f48e:	4a0c      	ldr	r2, [pc, #48]	@ (800f4c0 <global_stdio_init.part.0+0x38>)
 800f490:	601a      	str	r2, [r3, #0]
 800f492:	4620      	mov	r0, r4
 800f494:	2200      	movs	r2, #0
 800f496:	2104      	movs	r1, #4
 800f498:	f7ff ff94 	bl	800f3c4 <std>
 800f49c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	2109      	movs	r1, #9
 800f4a4:	f7ff ff8e 	bl	800f3c4 <std>
 800f4a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f4ac:	2202      	movs	r2, #2
 800f4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4b2:	2112      	movs	r1, #18
 800f4b4:	f7ff bf86 	b.w	800f3c4 <std>
 800f4b8:	200061a0 	.word	0x200061a0
 800f4bc:	20006068 	.word	0x20006068
 800f4c0:	0800f431 	.word	0x0800f431

0800f4c4 <__sfp_lock_acquire>:
 800f4c4:	4801      	ldr	r0, [pc, #4]	@ (800f4cc <__sfp_lock_acquire+0x8>)
 800f4c6:	f000 ba06 	b.w	800f8d6 <__retarget_lock_acquire_recursive>
 800f4ca:	bf00      	nop
 800f4cc:	200061a9 	.word	0x200061a9

0800f4d0 <__sfp_lock_release>:
 800f4d0:	4801      	ldr	r0, [pc, #4]	@ (800f4d8 <__sfp_lock_release+0x8>)
 800f4d2:	f000 ba01 	b.w	800f8d8 <__retarget_lock_release_recursive>
 800f4d6:	bf00      	nop
 800f4d8:	200061a9 	.word	0x200061a9

0800f4dc <__sinit>:
 800f4dc:	b510      	push	{r4, lr}
 800f4de:	4604      	mov	r4, r0
 800f4e0:	f7ff fff0 	bl	800f4c4 <__sfp_lock_acquire>
 800f4e4:	6a23      	ldr	r3, [r4, #32]
 800f4e6:	b11b      	cbz	r3, 800f4f0 <__sinit+0x14>
 800f4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4ec:	f7ff bff0 	b.w	800f4d0 <__sfp_lock_release>
 800f4f0:	4b04      	ldr	r3, [pc, #16]	@ (800f504 <__sinit+0x28>)
 800f4f2:	6223      	str	r3, [r4, #32]
 800f4f4:	4b04      	ldr	r3, [pc, #16]	@ (800f508 <__sinit+0x2c>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1f5      	bne.n	800f4e8 <__sinit+0xc>
 800f4fc:	f7ff ffc4 	bl	800f488 <global_stdio_init.part.0>
 800f500:	e7f2      	b.n	800f4e8 <__sinit+0xc>
 800f502:	bf00      	nop
 800f504:	0800f449 	.word	0x0800f449
 800f508:	200061a0 	.word	0x200061a0

0800f50c <_fwalk_sglue>:
 800f50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f510:	4607      	mov	r7, r0
 800f512:	4688      	mov	r8, r1
 800f514:	4614      	mov	r4, r2
 800f516:	2600      	movs	r6, #0
 800f518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f51c:	f1b9 0901 	subs.w	r9, r9, #1
 800f520:	d505      	bpl.n	800f52e <_fwalk_sglue+0x22>
 800f522:	6824      	ldr	r4, [r4, #0]
 800f524:	2c00      	cmp	r4, #0
 800f526:	d1f7      	bne.n	800f518 <_fwalk_sglue+0xc>
 800f528:	4630      	mov	r0, r6
 800f52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f52e:	89ab      	ldrh	r3, [r5, #12]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d907      	bls.n	800f544 <_fwalk_sglue+0x38>
 800f534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f538:	3301      	adds	r3, #1
 800f53a:	d003      	beq.n	800f544 <_fwalk_sglue+0x38>
 800f53c:	4629      	mov	r1, r5
 800f53e:	4638      	mov	r0, r7
 800f540:	47c0      	blx	r8
 800f542:	4306      	orrs	r6, r0
 800f544:	3568      	adds	r5, #104	@ 0x68
 800f546:	e7e9      	b.n	800f51c <_fwalk_sglue+0x10>

0800f548 <sniprintf>:
 800f548:	b40c      	push	{r2, r3}
 800f54a:	b530      	push	{r4, r5, lr}
 800f54c:	4b18      	ldr	r3, [pc, #96]	@ (800f5b0 <sniprintf+0x68>)
 800f54e:	1e0c      	subs	r4, r1, #0
 800f550:	681d      	ldr	r5, [r3, #0]
 800f552:	b09d      	sub	sp, #116	@ 0x74
 800f554:	da08      	bge.n	800f568 <sniprintf+0x20>
 800f556:	238b      	movs	r3, #139	@ 0x8b
 800f558:	602b      	str	r3, [r5, #0]
 800f55a:	f04f 30ff 	mov.w	r0, #4294967295
 800f55e:	b01d      	add	sp, #116	@ 0x74
 800f560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f564:	b002      	add	sp, #8
 800f566:	4770      	bx	lr
 800f568:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f56c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f570:	f04f 0300 	mov.w	r3, #0
 800f574:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f576:	bf14      	ite	ne
 800f578:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f57c:	4623      	moveq	r3, r4
 800f57e:	9304      	str	r3, [sp, #16]
 800f580:	9307      	str	r3, [sp, #28]
 800f582:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f586:	9002      	str	r0, [sp, #8]
 800f588:	9006      	str	r0, [sp, #24]
 800f58a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f58e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f590:	ab21      	add	r3, sp, #132	@ 0x84
 800f592:	a902      	add	r1, sp, #8
 800f594:	4628      	mov	r0, r5
 800f596:	9301      	str	r3, [sp, #4]
 800f598:	f002 f92e 	bl	80117f8 <_svfiprintf_r>
 800f59c:	1c43      	adds	r3, r0, #1
 800f59e:	bfbc      	itt	lt
 800f5a0:	238b      	movlt	r3, #139	@ 0x8b
 800f5a2:	602b      	strlt	r3, [r5, #0]
 800f5a4:	2c00      	cmp	r4, #0
 800f5a6:	d0da      	beq.n	800f55e <sniprintf+0x16>
 800f5a8:	9b02      	ldr	r3, [sp, #8]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	701a      	strb	r2, [r3, #0]
 800f5ae:	e7d6      	b.n	800f55e <sniprintf+0x16>
 800f5b0:	200001b4 	.word	0x200001b4

0800f5b4 <siprintf>:
 800f5b4:	b40e      	push	{r1, r2, r3}
 800f5b6:	b510      	push	{r4, lr}
 800f5b8:	b09d      	sub	sp, #116	@ 0x74
 800f5ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f5bc:	9002      	str	r0, [sp, #8]
 800f5be:	9006      	str	r0, [sp, #24]
 800f5c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f5c4:	480a      	ldr	r0, [pc, #40]	@ (800f5f0 <siprintf+0x3c>)
 800f5c6:	9107      	str	r1, [sp, #28]
 800f5c8:	9104      	str	r1, [sp, #16]
 800f5ca:	490a      	ldr	r1, [pc, #40]	@ (800f5f4 <siprintf+0x40>)
 800f5cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5d0:	9105      	str	r1, [sp, #20]
 800f5d2:	2400      	movs	r4, #0
 800f5d4:	a902      	add	r1, sp, #8
 800f5d6:	6800      	ldr	r0, [r0, #0]
 800f5d8:	9301      	str	r3, [sp, #4]
 800f5da:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f5dc:	f002 f90c 	bl	80117f8 <_svfiprintf_r>
 800f5e0:	9b02      	ldr	r3, [sp, #8]
 800f5e2:	701c      	strb	r4, [r3, #0]
 800f5e4:	b01d      	add	sp, #116	@ 0x74
 800f5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5ea:	b003      	add	sp, #12
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop
 800f5f0:	200001b4 	.word	0x200001b4
 800f5f4:	ffff0208 	.word	0xffff0208

0800f5f8 <siscanf>:
 800f5f8:	b40e      	push	{r1, r2, r3}
 800f5fa:	b570      	push	{r4, r5, r6, lr}
 800f5fc:	b09d      	sub	sp, #116	@ 0x74
 800f5fe:	ac21      	add	r4, sp, #132	@ 0x84
 800f600:	2500      	movs	r5, #0
 800f602:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f606:	f854 6b04 	ldr.w	r6, [r4], #4
 800f60a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f60e:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f610:	9002      	str	r0, [sp, #8]
 800f612:	9006      	str	r0, [sp, #24]
 800f614:	f7f0 fe2c 	bl	8000270 <strlen>
 800f618:	4b0b      	ldr	r3, [pc, #44]	@ (800f648 <siscanf+0x50>)
 800f61a:	9003      	str	r0, [sp, #12]
 800f61c:	9007      	str	r0, [sp, #28]
 800f61e:	480b      	ldr	r0, [pc, #44]	@ (800f64c <siscanf+0x54>)
 800f620:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f622:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f626:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f62a:	4632      	mov	r2, r6
 800f62c:	4623      	mov	r3, r4
 800f62e:	a902      	add	r1, sp, #8
 800f630:	6800      	ldr	r0, [r0, #0]
 800f632:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f634:	9514      	str	r5, [sp, #80]	@ 0x50
 800f636:	9401      	str	r4, [sp, #4]
 800f638:	f002 fa34 	bl	8011aa4 <__ssvfiscanf_r>
 800f63c:	b01d      	add	sp, #116	@ 0x74
 800f63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f642:	b003      	add	sp, #12
 800f644:	4770      	bx	lr
 800f646:	bf00      	nop
 800f648:	0800f673 	.word	0x0800f673
 800f64c:	200001b4 	.word	0x200001b4

0800f650 <__sread>:
 800f650:	b510      	push	{r4, lr}
 800f652:	460c      	mov	r4, r1
 800f654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f658:	f000 f8de 	bl	800f818 <_read_r>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	bfab      	itete	ge
 800f660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f662:	89a3      	ldrhlt	r3, [r4, #12]
 800f664:	181b      	addge	r3, r3, r0
 800f666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f66a:	bfac      	ite	ge
 800f66c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f66e:	81a3      	strhlt	r3, [r4, #12]
 800f670:	bd10      	pop	{r4, pc}

0800f672 <__seofread>:
 800f672:	2000      	movs	r0, #0
 800f674:	4770      	bx	lr

0800f676 <__swrite>:
 800f676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f67a:	461f      	mov	r7, r3
 800f67c:	898b      	ldrh	r3, [r1, #12]
 800f67e:	05db      	lsls	r3, r3, #23
 800f680:	4605      	mov	r5, r0
 800f682:	460c      	mov	r4, r1
 800f684:	4616      	mov	r6, r2
 800f686:	d505      	bpl.n	800f694 <__swrite+0x1e>
 800f688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f68c:	2302      	movs	r3, #2
 800f68e:	2200      	movs	r2, #0
 800f690:	f000 f8b0 	bl	800f7f4 <_lseek_r>
 800f694:	89a3      	ldrh	r3, [r4, #12]
 800f696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f69a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f69e:	81a3      	strh	r3, [r4, #12]
 800f6a0:	4632      	mov	r2, r6
 800f6a2:	463b      	mov	r3, r7
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6aa:	f000 b8d7 	b.w	800f85c <_write_r>

0800f6ae <__sseek>:
 800f6ae:	b510      	push	{r4, lr}
 800f6b0:	460c      	mov	r4, r1
 800f6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b6:	f000 f89d 	bl	800f7f4 <_lseek_r>
 800f6ba:	1c43      	adds	r3, r0, #1
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	bf15      	itete	ne
 800f6c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f6c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f6c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f6ca:	81a3      	strheq	r3, [r4, #12]
 800f6cc:	bf18      	it	ne
 800f6ce:	81a3      	strhne	r3, [r4, #12]
 800f6d0:	bd10      	pop	{r4, pc}

0800f6d2 <__sclose>:
 800f6d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d6:	f000 b81f 	b.w	800f718 <_close_r>

0800f6da <memset>:
 800f6da:	4402      	add	r2, r0
 800f6dc:	4603      	mov	r3, r0
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d100      	bne.n	800f6e4 <memset+0xa>
 800f6e2:	4770      	bx	lr
 800f6e4:	f803 1b01 	strb.w	r1, [r3], #1
 800f6e8:	e7f9      	b.n	800f6de <memset+0x4>

0800f6ea <strncmp>:
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	b16a      	cbz	r2, 800f70a <strncmp+0x20>
 800f6ee:	3901      	subs	r1, #1
 800f6f0:	1884      	adds	r4, r0, r2
 800f6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d103      	bne.n	800f706 <strncmp+0x1c>
 800f6fe:	42a0      	cmp	r0, r4
 800f700:	d001      	beq.n	800f706 <strncmp+0x1c>
 800f702:	2a00      	cmp	r2, #0
 800f704:	d1f5      	bne.n	800f6f2 <strncmp+0x8>
 800f706:	1ad0      	subs	r0, r2, r3
 800f708:	bd10      	pop	{r4, pc}
 800f70a:	4610      	mov	r0, r2
 800f70c:	e7fc      	b.n	800f708 <strncmp+0x1e>
	...

0800f710 <_localeconv_r>:
 800f710:	4800      	ldr	r0, [pc, #0]	@ (800f714 <_localeconv_r+0x4>)
 800f712:	4770      	bx	lr
 800f714:	20000138 	.word	0x20000138

0800f718 <_close_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4d06      	ldr	r5, [pc, #24]	@ (800f734 <_close_r+0x1c>)
 800f71c:	2300      	movs	r3, #0
 800f71e:	4604      	mov	r4, r0
 800f720:	4608      	mov	r0, r1
 800f722:	602b      	str	r3, [r5, #0]
 800f724:	f7f2 ff44 	bl	80025b0 <_close>
 800f728:	1c43      	adds	r3, r0, #1
 800f72a:	d102      	bne.n	800f732 <_close_r+0x1a>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	b103      	cbz	r3, 800f732 <_close_r+0x1a>
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	bd38      	pop	{r3, r4, r5, pc}
 800f734:	200061a4 	.word	0x200061a4

0800f738 <_reclaim_reent>:
 800f738:	4b2d      	ldr	r3, [pc, #180]	@ (800f7f0 <_reclaim_reent+0xb8>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4283      	cmp	r3, r0
 800f73e:	b570      	push	{r4, r5, r6, lr}
 800f740:	4604      	mov	r4, r0
 800f742:	d053      	beq.n	800f7ec <_reclaim_reent+0xb4>
 800f744:	69c3      	ldr	r3, [r0, #28]
 800f746:	b31b      	cbz	r3, 800f790 <_reclaim_reent+0x58>
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	b163      	cbz	r3, 800f766 <_reclaim_reent+0x2e>
 800f74c:	2500      	movs	r5, #0
 800f74e:	69e3      	ldr	r3, [r4, #28]
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	5959      	ldr	r1, [r3, r5]
 800f754:	b9b1      	cbnz	r1, 800f784 <_reclaim_reent+0x4c>
 800f756:	3504      	adds	r5, #4
 800f758:	2d80      	cmp	r5, #128	@ 0x80
 800f75a:	d1f8      	bne.n	800f74e <_reclaim_reent+0x16>
 800f75c:	69e3      	ldr	r3, [r4, #28]
 800f75e:	4620      	mov	r0, r4
 800f760:	68d9      	ldr	r1, [r3, #12]
 800f762:	f000 ff31 	bl	80105c8 <_free_r>
 800f766:	69e3      	ldr	r3, [r4, #28]
 800f768:	6819      	ldr	r1, [r3, #0]
 800f76a:	b111      	cbz	r1, 800f772 <_reclaim_reent+0x3a>
 800f76c:	4620      	mov	r0, r4
 800f76e:	f000 ff2b 	bl	80105c8 <_free_r>
 800f772:	69e3      	ldr	r3, [r4, #28]
 800f774:	689d      	ldr	r5, [r3, #8]
 800f776:	b15d      	cbz	r5, 800f790 <_reclaim_reent+0x58>
 800f778:	4629      	mov	r1, r5
 800f77a:	4620      	mov	r0, r4
 800f77c:	682d      	ldr	r5, [r5, #0]
 800f77e:	f000 ff23 	bl	80105c8 <_free_r>
 800f782:	e7f8      	b.n	800f776 <_reclaim_reent+0x3e>
 800f784:	680e      	ldr	r6, [r1, #0]
 800f786:	4620      	mov	r0, r4
 800f788:	f000 ff1e 	bl	80105c8 <_free_r>
 800f78c:	4631      	mov	r1, r6
 800f78e:	e7e1      	b.n	800f754 <_reclaim_reent+0x1c>
 800f790:	6961      	ldr	r1, [r4, #20]
 800f792:	b111      	cbz	r1, 800f79a <_reclaim_reent+0x62>
 800f794:	4620      	mov	r0, r4
 800f796:	f000 ff17 	bl	80105c8 <_free_r>
 800f79a:	69e1      	ldr	r1, [r4, #28]
 800f79c:	b111      	cbz	r1, 800f7a4 <_reclaim_reent+0x6c>
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f000 ff12 	bl	80105c8 <_free_r>
 800f7a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f7a6:	b111      	cbz	r1, 800f7ae <_reclaim_reent+0x76>
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f000 ff0d 	bl	80105c8 <_free_r>
 800f7ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7b0:	b111      	cbz	r1, 800f7b8 <_reclaim_reent+0x80>
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f000 ff08 	bl	80105c8 <_free_r>
 800f7b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f7ba:	b111      	cbz	r1, 800f7c2 <_reclaim_reent+0x8a>
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f000 ff03 	bl	80105c8 <_free_r>
 800f7c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f7c4:	b111      	cbz	r1, 800f7cc <_reclaim_reent+0x94>
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f000 fefe 	bl	80105c8 <_free_r>
 800f7cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f7ce:	b111      	cbz	r1, 800f7d6 <_reclaim_reent+0x9e>
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	f000 fef9 	bl	80105c8 <_free_r>
 800f7d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f7d8:	b111      	cbz	r1, 800f7e0 <_reclaim_reent+0xa8>
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f000 fef4 	bl	80105c8 <_free_r>
 800f7e0:	6a23      	ldr	r3, [r4, #32]
 800f7e2:	b11b      	cbz	r3, 800f7ec <_reclaim_reent+0xb4>
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7ea:	4718      	bx	r3
 800f7ec:	bd70      	pop	{r4, r5, r6, pc}
 800f7ee:	bf00      	nop
 800f7f0:	200001b4 	.word	0x200001b4

0800f7f4 <_lseek_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4d07      	ldr	r5, [pc, #28]	@ (800f814 <_lseek_r+0x20>)
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	4608      	mov	r0, r1
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	2200      	movs	r2, #0
 800f800:	602a      	str	r2, [r5, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	f7f2 fefb 	bl	80025fe <_lseek>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	d102      	bne.n	800f812 <_lseek_r+0x1e>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	b103      	cbz	r3, 800f812 <_lseek_r+0x1e>
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	200061a4 	.word	0x200061a4

0800f818 <_read_r>:
 800f818:	b538      	push	{r3, r4, r5, lr}
 800f81a:	4d07      	ldr	r5, [pc, #28]	@ (800f838 <_read_r+0x20>)
 800f81c:	4604      	mov	r4, r0
 800f81e:	4608      	mov	r0, r1
 800f820:	4611      	mov	r1, r2
 800f822:	2200      	movs	r2, #0
 800f824:	602a      	str	r2, [r5, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	f7f2 fe89 	bl	800253e <_read>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	d102      	bne.n	800f836 <_read_r+0x1e>
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	b103      	cbz	r3, 800f836 <_read_r+0x1e>
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	200061a4 	.word	0x200061a4

0800f83c <_sbrk_r>:
 800f83c:	b538      	push	{r3, r4, r5, lr}
 800f83e:	4d06      	ldr	r5, [pc, #24]	@ (800f858 <_sbrk_r+0x1c>)
 800f840:	2300      	movs	r3, #0
 800f842:	4604      	mov	r4, r0
 800f844:	4608      	mov	r0, r1
 800f846:	602b      	str	r3, [r5, #0]
 800f848:	f7f2 fee6 	bl	8002618 <_sbrk>
 800f84c:	1c43      	adds	r3, r0, #1
 800f84e:	d102      	bne.n	800f856 <_sbrk_r+0x1a>
 800f850:	682b      	ldr	r3, [r5, #0]
 800f852:	b103      	cbz	r3, 800f856 <_sbrk_r+0x1a>
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	bd38      	pop	{r3, r4, r5, pc}
 800f858:	200061a4 	.word	0x200061a4

0800f85c <_write_r>:
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	4d07      	ldr	r5, [pc, #28]	@ (800f87c <_write_r+0x20>)
 800f860:	4604      	mov	r4, r0
 800f862:	4608      	mov	r0, r1
 800f864:	4611      	mov	r1, r2
 800f866:	2200      	movs	r2, #0
 800f868:	602a      	str	r2, [r5, #0]
 800f86a:	461a      	mov	r2, r3
 800f86c:	f7f2 fe84 	bl	8002578 <_write>
 800f870:	1c43      	adds	r3, r0, #1
 800f872:	d102      	bne.n	800f87a <_write_r+0x1e>
 800f874:	682b      	ldr	r3, [r5, #0]
 800f876:	b103      	cbz	r3, 800f87a <_write_r+0x1e>
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	bd38      	pop	{r3, r4, r5, pc}
 800f87c:	200061a4 	.word	0x200061a4

0800f880 <__errno>:
 800f880:	4b01      	ldr	r3, [pc, #4]	@ (800f888 <__errno+0x8>)
 800f882:	6818      	ldr	r0, [r3, #0]
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop
 800f888:	200001b4 	.word	0x200001b4

0800f88c <__libc_init_array>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	4d0d      	ldr	r5, [pc, #52]	@ (800f8c4 <__libc_init_array+0x38>)
 800f890:	4c0d      	ldr	r4, [pc, #52]	@ (800f8c8 <__libc_init_array+0x3c>)
 800f892:	1b64      	subs	r4, r4, r5
 800f894:	10a4      	asrs	r4, r4, #2
 800f896:	2600      	movs	r6, #0
 800f898:	42a6      	cmp	r6, r4
 800f89a:	d109      	bne.n	800f8b0 <__libc_init_array+0x24>
 800f89c:	4d0b      	ldr	r5, [pc, #44]	@ (800f8cc <__libc_init_array+0x40>)
 800f89e:	4c0c      	ldr	r4, [pc, #48]	@ (800f8d0 <__libc_init_array+0x44>)
 800f8a0:	f003 f81c 	bl	80128dc <_init>
 800f8a4:	1b64      	subs	r4, r4, r5
 800f8a6:	10a4      	asrs	r4, r4, #2
 800f8a8:	2600      	movs	r6, #0
 800f8aa:	42a6      	cmp	r6, r4
 800f8ac:	d105      	bne.n	800f8ba <__libc_init_array+0x2e>
 800f8ae:	bd70      	pop	{r4, r5, r6, pc}
 800f8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8b4:	4798      	blx	r3
 800f8b6:	3601      	adds	r6, #1
 800f8b8:	e7ee      	b.n	800f898 <__libc_init_array+0xc>
 800f8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8be:	4798      	blx	r3
 800f8c0:	3601      	adds	r6, #1
 800f8c2:	e7f2      	b.n	800f8aa <__libc_init_array+0x1e>
 800f8c4:	08012fa8 	.word	0x08012fa8
 800f8c8:	08012fa8 	.word	0x08012fa8
 800f8cc:	08012fa8 	.word	0x08012fa8
 800f8d0:	08012fac 	.word	0x08012fac

0800f8d4 <__retarget_lock_init_recursive>:
 800f8d4:	4770      	bx	lr

0800f8d6 <__retarget_lock_acquire_recursive>:
 800f8d6:	4770      	bx	lr

0800f8d8 <__retarget_lock_release_recursive>:
 800f8d8:	4770      	bx	lr

0800f8da <memcpy>:
 800f8da:	440a      	add	r2, r1
 800f8dc:	4291      	cmp	r1, r2
 800f8de:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8e2:	d100      	bne.n	800f8e6 <memcpy+0xc>
 800f8e4:	4770      	bx	lr
 800f8e6:	b510      	push	{r4, lr}
 800f8e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8f0:	4291      	cmp	r1, r2
 800f8f2:	d1f9      	bne.n	800f8e8 <memcpy+0xe>
 800f8f4:	bd10      	pop	{r4, pc}
	...

0800f8f8 <nan>:
 800f8f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f900 <nan+0x8>
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	00000000 	.word	0x00000000
 800f904:	7ff80000 	.word	0x7ff80000

0800f908 <nanf>:
 800f908:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f910 <nanf+0x8>
 800f90c:	4770      	bx	lr
 800f90e:	bf00      	nop
 800f910:	7fc00000 	.word	0x7fc00000

0800f914 <quorem>:
 800f914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f918:	6903      	ldr	r3, [r0, #16]
 800f91a:	690c      	ldr	r4, [r1, #16]
 800f91c:	42a3      	cmp	r3, r4
 800f91e:	4607      	mov	r7, r0
 800f920:	db7e      	blt.n	800fa20 <quorem+0x10c>
 800f922:	3c01      	subs	r4, #1
 800f924:	f101 0814 	add.w	r8, r1, #20
 800f928:	00a3      	lsls	r3, r4, #2
 800f92a:	f100 0514 	add.w	r5, r0, #20
 800f92e:	9300      	str	r3, [sp, #0]
 800f930:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f93a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f93e:	3301      	adds	r3, #1
 800f940:	429a      	cmp	r2, r3
 800f942:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f946:	fbb2 f6f3 	udiv	r6, r2, r3
 800f94a:	d32e      	bcc.n	800f9aa <quorem+0x96>
 800f94c:	f04f 0a00 	mov.w	sl, #0
 800f950:	46c4      	mov	ip, r8
 800f952:	46ae      	mov	lr, r5
 800f954:	46d3      	mov	fp, sl
 800f956:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f95a:	b298      	uxth	r0, r3
 800f95c:	fb06 a000 	mla	r0, r6, r0, sl
 800f960:	0c02      	lsrs	r2, r0, #16
 800f962:	0c1b      	lsrs	r3, r3, #16
 800f964:	fb06 2303 	mla	r3, r6, r3, r2
 800f968:	f8de 2000 	ldr.w	r2, [lr]
 800f96c:	b280      	uxth	r0, r0
 800f96e:	b292      	uxth	r2, r2
 800f970:	1a12      	subs	r2, r2, r0
 800f972:	445a      	add	r2, fp
 800f974:	f8de 0000 	ldr.w	r0, [lr]
 800f978:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f982:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f986:	b292      	uxth	r2, r2
 800f988:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f98c:	45e1      	cmp	r9, ip
 800f98e:	f84e 2b04 	str.w	r2, [lr], #4
 800f992:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f996:	d2de      	bcs.n	800f956 <quorem+0x42>
 800f998:	9b00      	ldr	r3, [sp, #0]
 800f99a:	58eb      	ldr	r3, [r5, r3]
 800f99c:	b92b      	cbnz	r3, 800f9aa <quorem+0x96>
 800f99e:	9b01      	ldr	r3, [sp, #4]
 800f9a0:	3b04      	subs	r3, #4
 800f9a2:	429d      	cmp	r5, r3
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	d32f      	bcc.n	800fa08 <quorem+0xf4>
 800f9a8:	613c      	str	r4, [r7, #16]
 800f9aa:	4638      	mov	r0, r7
 800f9ac:	f001 fc5e 	bl	801126c <__mcmp>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	db25      	blt.n	800fa00 <quorem+0xec>
 800f9b4:	4629      	mov	r1, r5
 800f9b6:	2000      	movs	r0, #0
 800f9b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9bc:	f8d1 c000 	ldr.w	ip, [r1]
 800f9c0:	fa1f fe82 	uxth.w	lr, r2
 800f9c4:	fa1f f38c 	uxth.w	r3, ip
 800f9c8:	eba3 030e 	sub.w	r3, r3, lr
 800f9cc:	4403      	add	r3, r0
 800f9ce:	0c12      	lsrs	r2, r2, #16
 800f9d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f9d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9de:	45c1      	cmp	r9, r8
 800f9e0:	f841 3b04 	str.w	r3, [r1], #4
 800f9e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f9e8:	d2e6      	bcs.n	800f9b8 <quorem+0xa4>
 800f9ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9f2:	b922      	cbnz	r2, 800f9fe <quorem+0xea>
 800f9f4:	3b04      	subs	r3, #4
 800f9f6:	429d      	cmp	r5, r3
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	d30b      	bcc.n	800fa14 <quorem+0x100>
 800f9fc:	613c      	str	r4, [r7, #16]
 800f9fe:	3601      	adds	r6, #1
 800fa00:	4630      	mov	r0, r6
 800fa02:	b003      	add	sp, #12
 800fa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa08:	6812      	ldr	r2, [r2, #0]
 800fa0a:	3b04      	subs	r3, #4
 800fa0c:	2a00      	cmp	r2, #0
 800fa0e:	d1cb      	bne.n	800f9a8 <quorem+0x94>
 800fa10:	3c01      	subs	r4, #1
 800fa12:	e7c6      	b.n	800f9a2 <quorem+0x8e>
 800fa14:	6812      	ldr	r2, [r2, #0]
 800fa16:	3b04      	subs	r3, #4
 800fa18:	2a00      	cmp	r2, #0
 800fa1a:	d1ef      	bne.n	800f9fc <quorem+0xe8>
 800fa1c:	3c01      	subs	r4, #1
 800fa1e:	e7ea      	b.n	800f9f6 <quorem+0xe2>
 800fa20:	2000      	movs	r0, #0
 800fa22:	e7ee      	b.n	800fa02 <quorem+0xee>
 800fa24:	0000      	movs	r0, r0
	...

0800fa28 <_dtoa_r>:
 800fa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2c:	69c7      	ldr	r7, [r0, #28]
 800fa2e:	b097      	sub	sp, #92	@ 0x5c
 800fa30:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fa34:	ec55 4b10 	vmov	r4, r5, d0
 800fa38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fa3a:	9107      	str	r1, [sp, #28]
 800fa3c:	4681      	mov	r9, r0
 800fa3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fa40:	9311      	str	r3, [sp, #68]	@ 0x44
 800fa42:	b97f      	cbnz	r7, 800fa64 <_dtoa_r+0x3c>
 800fa44:	2010      	movs	r0, #16
 800fa46:	f7fd ff1f 	bl	800d888 <malloc>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	f8c9 001c 	str.w	r0, [r9, #28]
 800fa50:	b920      	cbnz	r0, 800fa5c <_dtoa_r+0x34>
 800fa52:	4ba9      	ldr	r3, [pc, #676]	@ (800fcf8 <_dtoa_r+0x2d0>)
 800fa54:	21ef      	movs	r1, #239	@ 0xef
 800fa56:	48a9      	ldr	r0, [pc, #676]	@ (800fcfc <_dtoa_r+0x2d4>)
 800fa58:	f002 fc22 	bl	80122a0 <__assert_func>
 800fa5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fa60:	6007      	str	r7, [r0, #0]
 800fa62:	60c7      	str	r7, [r0, #12]
 800fa64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fa68:	6819      	ldr	r1, [r3, #0]
 800fa6a:	b159      	cbz	r1, 800fa84 <_dtoa_r+0x5c>
 800fa6c:	685a      	ldr	r2, [r3, #4]
 800fa6e:	604a      	str	r2, [r1, #4]
 800fa70:	2301      	movs	r3, #1
 800fa72:	4093      	lsls	r3, r2
 800fa74:	608b      	str	r3, [r1, #8]
 800fa76:	4648      	mov	r0, r9
 800fa78:	f001 f97c 	bl	8010d74 <_Bfree>
 800fa7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fa80:	2200      	movs	r2, #0
 800fa82:	601a      	str	r2, [r3, #0]
 800fa84:	1e2b      	subs	r3, r5, #0
 800fa86:	bfb9      	ittee	lt
 800fa88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa8c:	9305      	strlt	r3, [sp, #20]
 800fa8e:	2300      	movge	r3, #0
 800fa90:	6033      	strge	r3, [r6, #0]
 800fa92:	9f05      	ldr	r7, [sp, #20]
 800fa94:	4b9a      	ldr	r3, [pc, #616]	@ (800fd00 <_dtoa_r+0x2d8>)
 800fa96:	bfbc      	itt	lt
 800fa98:	2201      	movlt	r2, #1
 800fa9a:	6032      	strlt	r2, [r6, #0]
 800fa9c:	43bb      	bics	r3, r7
 800fa9e:	d112      	bne.n	800fac6 <_dtoa_r+0x9e>
 800faa0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800faa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800faac:	4323      	orrs	r3, r4
 800faae:	f000 855a 	beq.w	8010566 <_dtoa_r+0xb3e>
 800fab2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fab4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fd14 <_dtoa_r+0x2ec>
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f000 855c 	beq.w	8010576 <_dtoa_r+0xb4e>
 800fabe:	f10a 0303 	add.w	r3, sl, #3
 800fac2:	f000 bd56 	b.w	8010572 <_dtoa_r+0xb4a>
 800fac6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800faca:	2200      	movs	r2, #0
 800facc:	ec51 0b17 	vmov	r0, r1, d7
 800fad0:	2300      	movs	r3, #0
 800fad2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fad6:	f7f0 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 800fada:	4680      	mov	r8, r0
 800fadc:	b158      	cbz	r0, 800faf6 <_dtoa_r+0xce>
 800fade:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fae0:	2301      	movs	r3, #1
 800fae2:	6013      	str	r3, [r2, #0]
 800fae4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fae6:	b113      	cbz	r3, 800faee <_dtoa_r+0xc6>
 800fae8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800faea:	4b86      	ldr	r3, [pc, #536]	@ (800fd04 <_dtoa_r+0x2dc>)
 800faec:	6013      	str	r3, [r2, #0]
 800faee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fd18 <_dtoa_r+0x2f0>
 800faf2:	f000 bd40 	b.w	8010576 <_dtoa_r+0xb4e>
 800faf6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fafa:	aa14      	add	r2, sp, #80	@ 0x50
 800fafc:	a915      	add	r1, sp, #84	@ 0x54
 800fafe:	4648      	mov	r0, r9
 800fb00:	f001 fcd4 	bl	80114ac <__d2b>
 800fb04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fb08:	9002      	str	r0, [sp, #8]
 800fb0a:	2e00      	cmp	r6, #0
 800fb0c:	d078      	beq.n	800fc00 <_dtoa_r+0x1d8>
 800fb0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fb14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fb1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fb24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fb28:	4619      	mov	r1, r3
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4b76      	ldr	r3, [pc, #472]	@ (800fd08 <_dtoa_r+0x2e0>)
 800fb2e:	f7f0 fbab 	bl	8000288 <__aeabi_dsub>
 800fb32:	a36b      	add	r3, pc, #428	@ (adr r3, 800fce0 <_dtoa_r+0x2b8>)
 800fb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb38:	f7f0 fd5e 	bl	80005f8 <__aeabi_dmul>
 800fb3c:	a36a      	add	r3, pc, #424	@ (adr r3, 800fce8 <_dtoa_r+0x2c0>)
 800fb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb42:	f7f0 fba3 	bl	800028c <__adddf3>
 800fb46:	4604      	mov	r4, r0
 800fb48:	4630      	mov	r0, r6
 800fb4a:	460d      	mov	r5, r1
 800fb4c:	f7f0 fcea 	bl	8000524 <__aeabi_i2d>
 800fb50:	a367      	add	r3, pc, #412	@ (adr r3, 800fcf0 <_dtoa_r+0x2c8>)
 800fb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb56:	f7f0 fd4f 	bl	80005f8 <__aeabi_dmul>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	4620      	mov	r0, r4
 800fb60:	4629      	mov	r1, r5
 800fb62:	f7f0 fb93 	bl	800028c <__adddf3>
 800fb66:	4604      	mov	r4, r0
 800fb68:	460d      	mov	r5, r1
 800fb6a:	f7f0 fff5 	bl	8000b58 <__aeabi_d2iz>
 800fb6e:	2200      	movs	r2, #0
 800fb70:	4607      	mov	r7, r0
 800fb72:	2300      	movs	r3, #0
 800fb74:	4620      	mov	r0, r4
 800fb76:	4629      	mov	r1, r5
 800fb78:	f7f0 ffb0 	bl	8000adc <__aeabi_dcmplt>
 800fb7c:	b140      	cbz	r0, 800fb90 <_dtoa_r+0x168>
 800fb7e:	4638      	mov	r0, r7
 800fb80:	f7f0 fcd0 	bl	8000524 <__aeabi_i2d>
 800fb84:	4622      	mov	r2, r4
 800fb86:	462b      	mov	r3, r5
 800fb88:	f7f0 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb8c:	b900      	cbnz	r0, 800fb90 <_dtoa_r+0x168>
 800fb8e:	3f01      	subs	r7, #1
 800fb90:	2f16      	cmp	r7, #22
 800fb92:	d852      	bhi.n	800fc3a <_dtoa_r+0x212>
 800fb94:	4b5d      	ldr	r3, [pc, #372]	@ (800fd0c <_dtoa_r+0x2e4>)
 800fb96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fba2:	f7f0 ff9b 	bl	8000adc <__aeabi_dcmplt>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d049      	beq.n	800fc3e <_dtoa_r+0x216>
 800fbaa:	3f01      	subs	r7, #1
 800fbac:	2300      	movs	r3, #0
 800fbae:	9310      	str	r3, [sp, #64]	@ 0x40
 800fbb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fbb2:	1b9b      	subs	r3, r3, r6
 800fbb4:	1e5a      	subs	r2, r3, #1
 800fbb6:	bf45      	ittet	mi
 800fbb8:	f1c3 0301 	rsbmi	r3, r3, #1
 800fbbc:	9300      	strmi	r3, [sp, #0]
 800fbbe:	2300      	movpl	r3, #0
 800fbc0:	2300      	movmi	r3, #0
 800fbc2:	9206      	str	r2, [sp, #24]
 800fbc4:	bf54      	ite	pl
 800fbc6:	9300      	strpl	r3, [sp, #0]
 800fbc8:	9306      	strmi	r3, [sp, #24]
 800fbca:	2f00      	cmp	r7, #0
 800fbcc:	db39      	blt.n	800fc42 <_dtoa_r+0x21a>
 800fbce:	9b06      	ldr	r3, [sp, #24]
 800fbd0:	970d      	str	r7, [sp, #52]	@ 0x34
 800fbd2:	443b      	add	r3, r7
 800fbd4:	9306      	str	r3, [sp, #24]
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	9308      	str	r3, [sp, #32]
 800fbda:	9b07      	ldr	r3, [sp, #28]
 800fbdc:	2b09      	cmp	r3, #9
 800fbde:	d863      	bhi.n	800fca8 <_dtoa_r+0x280>
 800fbe0:	2b05      	cmp	r3, #5
 800fbe2:	bfc4      	itt	gt
 800fbe4:	3b04      	subgt	r3, #4
 800fbe6:	9307      	strgt	r3, [sp, #28]
 800fbe8:	9b07      	ldr	r3, [sp, #28]
 800fbea:	f1a3 0302 	sub.w	r3, r3, #2
 800fbee:	bfcc      	ite	gt
 800fbf0:	2400      	movgt	r4, #0
 800fbf2:	2401      	movle	r4, #1
 800fbf4:	2b03      	cmp	r3, #3
 800fbf6:	d863      	bhi.n	800fcc0 <_dtoa_r+0x298>
 800fbf8:	e8df f003 	tbb	[pc, r3]
 800fbfc:	2b375452 	.word	0x2b375452
 800fc00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fc04:	441e      	add	r6, r3
 800fc06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fc0a:	2b20      	cmp	r3, #32
 800fc0c:	bfc1      	itttt	gt
 800fc0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fc12:	409f      	lslgt	r7, r3
 800fc14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fc18:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fc1c:	bfd6      	itet	le
 800fc1e:	f1c3 0320 	rsble	r3, r3, #32
 800fc22:	ea47 0003 	orrgt.w	r0, r7, r3
 800fc26:	fa04 f003 	lslle.w	r0, r4, r3
 800fc2a:	f7f0 fc6b 	bl	8000504 <__aeabi_ui2d>
 800fc2e:	2201      	movs	r2, #1
 800fc30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fc34:	3e01      	subs	r6, #1
 800fc36:	9212      	str	r2, [sp, #72]	@ 0x48
 800fc38:	e776      	b.n	800fb28 <_dtoa_r+0x100>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e7b7      	b.n	800fbae <_dtoa_r+0x186>
 800fc3e:	9010      	str	r0, [sp, #64]	@ 0x40
 800fc40:	e7b6      	b.n	800fbb0 <_dtoa_r+0x188>
 800fc42:	9b00      	ldr	r3, [sp, #0]
 800fc44:	1bdb      	subs	r3, r3, r7
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	427b      	negs	r3, r7
 800fc4a:	9308      	str	r3, [sp, #32]
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc50:	e7c3      	b.n	800fbda <_dtoa_r+0x1b2>
 800fc52:	2301      	movs	r3, #1
 800fc54:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc58:	eb07 0b03 	add.w	fp, r7, r3
 800fc5c:	f10b 0301 	add.w	r3, fp, #1
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	9303      	str	r3, [sp, #12]
 800fc64:	bfb8      	it	lt
 800fc66:	2301      	movlt	r3, #1
 800fc68:	e006      	b.n	800fc78 <_dtoa_r+0x250>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	dd28      	ble.n	800fcc6 <_dtoa_r+0x29e>
 800fc74:	469b      	mov	fp, r3
 800fc76:	9303      	str	r3, [sp, #12]
 800fc78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	2204      	movs	r2, #4
 800fc80:	f102 0514 	add.w	r5, r2, #20
 800fc84:	429d      	cmp	r5, r3
 800fc86:	d926      	bls.n	800fcd6 <_dtoa_r+0x2ae>
 800fc88:	6041      	str	r1, [r0, #4]
 800fc8a:	4648      	mov	r0, r9
 800fc8c:	f001 f832 	bl	8010cf4 <_Balloc>
 800fc90:	4682      	mov	sl, r0
 800fc92:	2800      	cmp	r0, #0
 800fc94:	d142      	bne.n	800fd1c <_dtoa_r+0x2f4>
 800fc96:	4b1e      	ldr	r3, [pc, #120]	@ (800fd10 <_dtoa_r+0x2e8>)
 800fc98:	4602      	mov	r2, r0
 800fc9a:	f240 11af 	movw	r1, #431	@ 0x1af
 800fc9e:	e6da      	b.n	800fa56 <_dtoa_r+0x2e>
 800fca0:	2300      	movs	r3, #0
 800fca2:	e7e3      	b.n	800fc6c <_dtoa_r+0x244>
 800fca4:	2300      	movs	r3, #0
 800fca6:	e7d5      	b.n	800fc54 <_dtoa_r+0x22c>
 800fca8:	2401      	movs	r4, #1
 800fcaa:	2300      	movs	r3, #0
 800fcac:	9307      	str	r3, [sp, #28]
 800fcae:	9409      	str	r4, [sp, #36]	@ 0x24
 800fcb0:	f04f 3bff 	mov.w	fp, #4294967295
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f8cd b00c 	str.w	fp, [sp, #12]
 800fcba:	2312      	movs	r3, #18
 800fcbc:	920c      	str	r2, [sp, #48]	@ 0x30
 800fcbe:	e7db      	b.n	800fc78 <_dtoa_r+0x250>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcc4:	e7f4      	b.n	800fcb0 <_dtoa_r+0x288>
 800fcc6:	f04f 0b01 	mov.w	fp, #1
 800fcca:	f8cd b00c 	str.w	fp, [sp, #12]
 800fcce:	465b      	mov	r3, fp
 800fcd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fcd4:	e7d0      	b.n	800fc78 <_dtoa_r+0x250>
 800fcd6:	3101      	adds	r1, #1
 800fcd8:	0052      	lsls	r2, r2, #1
 800fcda:	e7d1      	b.n	800fc80 <_dtoa_r+0x258>
 800fcdc:	f3af 8000 	nop.w
 800fce0:	636f4361 	.word	0x636f4361
 800fce4:	3fd287a7 	.word	0x3fd287a7
 800fce8:	8b60c8b3 	.word	0x8b60c8b3
 800fcec:	3fc68a28 	.word	0x3fc68a28
 800fcf0:	509f79fb 	.word	0x509f79fb
 800fcf4:	3fd34413 	.word	0x3fd34413
 800fcf8:	08012bae 	.word	0x08012bae
 800fcfc:	08012bc5 	.word	0x08012bc5
 800fd00:	7ff00000 	.word	0x7ff00000
 800fd04:	08012d0f 	.word	0x08012d0f
 800fd08:	3ff80000 	.word	0x3ff80000
 800fd0c:	08012ed8 	.word	0x08012ed8
 800fd10:	08012c1d 	.word	0x08012c1d
 800fd14:	08012baa 	.word	0x08012baa
 800fd18:	08012d0e 	.word	0x08012d0e
 800fd1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fd20:	6018      	str	r0, [r3, #0]
 800fd22:	9b03      	ldr	r3, [sp, #12]
 800fd24:	2b0e      	cmp	r3, #14
 800fd26:	f200 80a1 	bhi.w	800fe6c <_dtoa_r+0x444>
 800fd2a:	2c00      	cmp	r4, #0
 800fd2c:	f000 809e 	beq.w	800fe6c <_dtoa_r+0x444>
 800fd30:	2f00      	cmp	r7, #0
 800fd32:	dd33      	ble.n	800fd9c <_dtoa_r+0x374>
 800fd34:	4b9c      	ldr	r3, [pc, #624]	@ (800ffa8 <_dtoa_r+0x580>)
 800fd36:	f007 020f 	and.w	r2, r7, #15
 800fd3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd3e:	ed93 7b00 	vldr	d7, [r3]
 800fd42:	05f8      	lsls	r0, r7, #23
 800fd44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fd48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fd4c:	d516      	bpl.n	800fd7c <_dtoa_r+0x354>
 800fd4e:	4b97      	ldr	r3, [pc, #604]	@ (800ffac <_dtoa_r+0x584>)
 800fd50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fd54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd58:	f7f0 fd78 	bl	800084c <__aeabi_ddiv>
 800fd5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd60:	f004 040f 	and.w	r4, r4, #15
 800fd64:	2603      	movs	r6, #3
 800fd66:	4d91      	ldr	r5, [pc, #580]	@ (800ffac <_dtoa_r+0x584>)
 800fd68:	b954      	cbnz	r4, 800fd80 <_dtoa_r+0x358>
 800fd6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fd6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd72:	f7f0 fd6b 	bl	800084c <__aeabi_ddiv>
 800fd76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd7a:	e028      	b.n	800fdce <_dtoa_r+0x3a6>
 800fd7c:	2602      	movs	r6, #2
 800fd7e:	e7f2      	b.n	800fd66 <_dtoa_r+0x33e>
 800fd80:	07e1      	lsls	r1, r4, #31
 800fd82:	d508      	bpl.n	800fd96 <_dtoa_r+0x36e>
 800fd84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fd88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd8c:	f7f0 fc34 	bl	80005f8 <__aeabi_dmul>
 800fd90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fd94:	3601      	adds	r6, #1
 800fd96:	1064      	asrs	r4, r4, #1
 800fd98:	3508      	adds	r5, #8
 800fd9a:	e7e5      	b.n	800fd68 <_dtoa_r+0x340>
 800fd9c:	f000 80af 	beq.w	800fefe <_dtoa_r+0x4d6>
 800fda0:	427c      	negs	r4, r7
 800fda2:	4b81      	ldr	r3, [pc, #516]	@ (800ffa8 <_dtoa_r+0x580>)
 800fda4:	4d81      	ldr	r5, [pc, #516]	@ (800ffac <_dtoa_r+0x584>)
 800fda6:	f004 020f 	and.w	r2, r4, #15
 800fdaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fdb6:	f7f0 fc1f 	bl	80005f8 <__aeabi_dmul>
 800fdba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fdbe:	1124      	asrs	r4, r4, #4
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	2602      	movs	r6, #2
 800fdc4:	2c00      	cmp	r4, #0
 800fdc6:	f040 808f 	bne.w	800fee8 <_dtoa_r+0x4c0>
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1d3      	bne.n	800fd76 <_dtoa_r+0x34e>
 800fdce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fdd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f000 8094 	beq.w	800ff02 <_dtoa_r+0x4da>
 800fdda:	4b75      	ldr	r3, [pc, #468]	@ (800ffb0 <_dtoa_r+0x588>)
 800fddc:	2200      	movs	r2, #0
 800fdde:	4620      	mov	r0, r4
 800fde0:	4629      	mov	r1, r5
 800fde2:	f7f0 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800fde6:	2800      	cmp	r0, #0
 800fde8:	f000 808b 	beq.w	800ff02 <_dtoa_r+0x4da>
 800fdec:	9b03      	ldr	r3, [sp, #12]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 8087 	beq.w	800ff02 <_dtoa_r+0x4da>
 800fdf4:	f1bb 0f00 	cmp.w	fp, #0
 800fdf8:	dd34      	ble.n	800fe64 <_dtoa_r+0x43c>
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	4b6d      	ldr	r3, [pc, #436]	@ (800ffb4 <_dtoa_r+0x58c>)
 800fdfe:	2200      	movs	r2, #0
 800fe00:	4629      	mov	r1, r5
 800fe02:	f7f0 fbf9 	bl	80005f8 <__aeabi_dmul>
 800fe06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe0a:	f107 38ff 	add.w	r8, r7, #4294967295
 800fe0e:	3601      	adds	r6, #1
 800fe10:	465c      	mov	r4, fp
 800fe12:	4630      	mov	r0, r6
 800fe14:	f7f0 fb86 	bl	8000524 <__aeabi_i2d>
 800fe18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe1c:	f7f0 fbec 	bl	80005f8 <__aeabi_dmul>
 800fe20:	4b65      	ldr	r3, [pc, #404]	@ (800ffb8 <_dtoa_r+0x590>)
 800fe22:	2200      	movs	r2, #0
 800fe24:	f7f0 fa32 	bl	800028c <__adddf3>
 800fe28:	4605      	mov	r5, r0
 800fe2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fe2e:	2c00      	cmp	r4, #0
 800fe30:	d16a      	bne.n	800ff08 <_dtoa_r+0x4e0>
 800fe32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe36:	4b61      	ldr	r3, [pc, #388]	@ (800ffbc <_dtoa_r+0x594>)
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f7f0 fa25 	bl	8000288 <__aeabi_dsub>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	460b      	mov	r3, r1
 800fe42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fe46:	462a      	mov	r2, r5
 800fe48:	4633      	mov	r3, r6
 800fe4a:	f7f0 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	f040 8298 	bne.w	8010384 <_dtoa_r+0x95c>
 800fe54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe58:	462a      	mov	r2, r5
 800fe5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fe5e:	f7f0 fe3d 	bl	8000adc <__aeabi_dcmplt>
 800fe62:	bb38      	cbnz	r0, 800feb4 <_dtoa_r+0x48c>
 800fe64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fe68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fe6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f2c0 8157 	blt.w	8010122 <_dtoa_r+0x6fa>
 800fe74:	2f0e      	cmp	r7, #14
 800fe76:	f300 8154 	bgt.w	8010122 <_dtoa_r+0x6fa>
 800fe7a:	4b4b      	ldr	r3, [pc, #300]	@ (800ffa8 <_dtoa_r+0x580>)
 800fe7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe80:	ed93 7b00 	vldr	d7, [r3]
 800fe84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	ed8d 7b00 	vstr	d7, [sp]
 800fe8c:	f280 80e5 	bge.w	801005a <_dtoa_r+0x632>
 800fe90:	9b03      	ldr	r3, [sp, #12]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	f300 80e1 	bgt.w	801005a <_dtoa_r+0x632>
 800fe98:	d10c      	bne.n	800feb4 <_dtoa_r+0x48c>
 800fe9a:	4b48      	ldr	r3, [pc, #288]	@ (800ffbc <_dtoa_r+0x594>)
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	ec51 0b17 	vmov	r0, r1, d7
 800fea2:	f7f0 fba9 	bl	80005f8 <__aeabi_dmul>
 800fea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800feaa:	f7f0 fe2b 	bl	8000b04 <__aeabi_dcmpge>
 800feae:	2800      	cmp	r0, #0
 800feb0:	f000 8266 	beq.w	8010380 <_dtoa_r+0x958>
 800feb4:	2400      	movs	r4, #0
 800feb6:	4625      	mov	r5, r4
 800feb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800feba:	4656      	mov	r6, sl
 800febc:	ea6f 0803 	mvn.w	r8, r3
 800fec0:	2700      	movs	r7, #0
 800fec2:	4621      	mov	r1, r4
 800fec4:	4648      	mov	r0, r9
 800fec6:	f000 ff55 	bl	8010d74 <_Bfree>
 800feca:	2d00      	cmp	r5, #0
 800fecc:	f000 80bd 	beq.w	801004a <_dtoa_r+0x622>
 800fed0:	b12f      	cbz	r7, 800fede <_dtoa_r+0x4b6>
 800fed2:	42af      	cmp	r7, r5
 800fed4:	d003      	beq.n	800fede <_dtoa_r+0x4b6>
 800fed6:	4639      	mov	r1, r7
 800fed8:	4648      	mov	r0, r9
 800feda:	f000 ff4b 	bl	8010d74 <_Bfree>
 800fede:	4629      	mov	r1, r5
 800fee0:	4648      	mov	r0, r9
 800fee2:	f000 ff47 	bl	8010d74 <_Bfree>
 800fee6:	e0b0      	b.n	801004a <_dtoa_r+0x622>
 800fee8:	07e2      	lsls	r2, r4, #31
 800feea:	d505      	bpl.n	800fef8 <_dtoa_r+0x4d0>
 800feec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fef0:	f7f0 fb82 	bl	80005f8 <__aeabi_dmul>
 800fef4:	3601      	adds	r6, #1
 800fef6:	2301      	movs	r3, #1
 800fef8:	1064      	asrs	r4, r4, #1
 800fefa:	3508      	adds	r5, #8
 800fefc:	e762      	b.n	800fdc4 <_dtoa_r+0x39c>
 800fefe:	2602      	movs	r6, #2
 800ff00:	e765      	b.n	800fdce <_dtoa_r+0x3a6>
 800ff02:	9c03      	ldr	r4, [sp, #12]
 800ff04:	46b8      	mov	r8, r7
 800ff06:	e784      	b.n	800fe12 <_dtoa_r+0x3ea>
 800ff08:	4b27      	ldr	r3, [pc, #156]	@ (800ffa8 <_dtoa_r+0x580>)
 800ff0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff14:	4454      	add	r4, sl
 800ff16:	2900      	cmp	r1, #0
 800ff18:	d054      	beq.n	800ffc4 <_dtoa_r+0x59c>
 800ff1a:	4929      	ldr	r1, [pc, #164]	@ (800ffc0 <_dtoa_r+0x598>)
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	f7f0 fc95 	bl	800084c <__aeabi_ddiv>
 800ff22:	4633      	mov	r3, r6
 800ff24:	462a      	mov	r2, r5
 800ff26:	f7f0 f9af 	bl	8000288 <__aeabi_dsub>
 800ff2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ff2e:	4656      	mov	r6, sl
 800ff30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff34:	f7f0 fe10 	bl	8000b58 <__aeabi_d2iz>
 800ff38:	4605      	mov	r5, r0
 800ff3a:	f7f0 faf3 	bl	8000524 <__aeabi_i2d>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff46:	f7f0 f99f 	bl	8000288 <__aeabi_dsub>
 800ff4a:	3530      	adds	r5, #48	@ 0x30
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	460b      	mov	r3, r1
 800ff50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff54:	f806 5b01 	strb.w	r5, [r6], #1
 800ff58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ff5c:	f7f0 fdbe 	bl	8000adc <__aeabi_dcmplt>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d172      	bne.n	801004a <_dtoa_r+0x622>
 800ff64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff68:	4911      	ldr	r1, [pc, #68]	@ (800ffb0 <_dtoa_r+0x588>)
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	f7f0 f98c 	bl	8000288 <__aeabi_dsub>
 800ff70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ff74:	f7f0 fdb2 	bl	8000adc <__aeabi_dcmplt>
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	f040 80b4 	bne.w	80100e6 <_dtoa_r+0x6be>
 800ff7e:	42a6      	cmp	r6, r4
 800ff80:	f43f af70 	beq.w	800fe64 <_dtoa_r+0x43c>
 800ff84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ff88:	4b0a      	ldr	r3, [pc, #40]	@ (800ffb4 <_dtoa_r+0x58c>)
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f7f0 fb34 	bl	80005f8 <__aeabi_dmul>
 800ff90:	4b08      	ldr	r3, [pc, #32]	@ (800ffb4 <_dtoa_r+0x58c>)
 800ff92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ff96:	2200      	movs	r2, #0
 800ff98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff9c:	f7f0 fb2c 	bl	80005f8 <__aeabi_dmul>
 800ffa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffa4:	e7c4      	b.n	800ff30 <_dtoa_r+0x508>
 800ffa6:	bf00      	nop
 800ffa8:	08012ed8 	.word	0x08012ed8
 800ffac:	08012eb0 	.word	0x08012eb0
 800ffb0:	3ff00000 	.word	0x3ff00000
 800ffb4:	40240000 	.word	0x40240000
 800ffb8:	401c0000 	.word	0x401c0000
 800ffbc:	40140000 	.word	0x40140000
 800ffc0:	3fe00000 	.word	0x3fe00000
 800ffc4:	4631      	mov	r1, r6
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	f7f0 fb16 	bl	80005f8 <__aeabi_dmul>
 800ffcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ffd0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ffd2:	4656      	mov	r6, sl
 800ffd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffd8:	f7f0 fdbe 	bl	8000b58 <__aeabi_d2iz>
 800ffdc:	4605      	mov	r5, r0
 800ffde:	f7f0 faa1 	bl	8000524 <__aeabi_i2d>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffea:	f7f0 f94d 	bl	8000288 <__aeabi_dsub>
 800ffee:	3530      	adds	r5, #48	@ 0x30
 800fff0:	f806 5b01 	strb.w	r5, [r6], #1
 800fff4:	4602      	mov	r2, r0
 800fff6:	460b      	mov	r3, r1
 800fff8:	42a6      	cmp	r6, r4
 800fffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fffe:	f04f 0200 	mov.w	r2, #0
 8010002:	d124      	bne.n	801004e <_dtoa_r+0x626>
 8010004:	4baf      	ldr	r3, [pc, #700]	@ (80102c4 <_dtoa_r+0x89c>)
 8010006:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801000a:	f7f0 f93f 	bl	800028c <__adddf3>
 801000e:	4602      	mov	r2, r0
 8010010:	460b      	mov	r3, r1
 8010012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010016:	f7f0 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 801001a:	2800      	cmp	r0, #0
 801001c:	d163      	bne.n	80100e6 <_dtoa_r+0x6be>
 801001e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010022:	49a8      	ldr	r1, [pc, #672]	@ (80102c4 <_dtoa_r+0x89c>)
 8010024:	2000      	movs	r0, #0
 8010026:	f7f0 f92f 	bl	8000288 <__aeabi_dsub>
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010032:	f7f0 fd53 	bl	8000adc <__aeabi_dcmplt>
 8010036:	2800      	cmp	r0, #0
 8010038:	f43f af14 	beq.w	800fe64 <_dtoa_r+0x43c>
 801003c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801003e:	1e73      	subs	r3, r6, #1
 8010040:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010042:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010046:	2b30      	cmp	r3, #48	@ 0x30
 8010048:	d0f8      	beq.n	801003c <_dtoa_r+0x614>
 801004a:	4647      	mov	r7, r8
 801004c:	e03b      	b.n	80100c6 <_dtoa_r+0x69e>
 801004e:	4b9e      	ldr	r3, [pc, #632]	@ (80102c8 <_dtoa_r+0x8a0>)
 8010050:	f7f0 fad2 	bl	80005f8 <__aeabi_dmul>
 8010054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010058:	e7bc      	b.n	800ffd4 <_dtoa_r+0x5ac>
 801005a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801005e:	4656      	mov	r6, sl
 8010060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010064:	4620      	mov	r0, r4
 8010066:	4629      	mov	r1, r5
 8010068:	f7f0 fbf0 	bl	800084c <__aeabi_ddiv>
 801006c:	f7f0 fd74 	bl	8000b58 <__aeabi_d2iz>
 8010070:	4680      	mov	r8, r0
 8010072:	f7f0 fa57 	bl	8000524 <__aeabi_i2d>
 8010076:	e9dd 2300 	ldrd	r2, r3, [sp]
 801007a:	f7f0 fabd 	bl	80005f8 <__aeabi_dmul>
 801007e:	4602      	mov	r2, r0
 8010080:	460b      	mov	r3, r1
 8010082:	4620      	mov	r0, r4
 8010084:	4629      	mov	r1, r5
 8010086:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801008a:	f7f0 f8fd 	bl	8000288 <__aeabi_dsub>
 801008e:	f806 4b01 	strb.w	r4, [r6], #1
 8010092:	9d03      	ldr	r5, [sp, #12]
 8010094:	eba6 040a 	sub.w	r4, r6, sl
 8010098:	42a5      	cmp	r5, r4
 801009a:	4602      	mov	r2, r0
 801009c:	460b      	mov	r3, r1
 801009e:	d133      	bne.n	8010108 <_dtoa_r+0x6e0>
 80100a0:	f7f0 f8f4 	bl	800028c <__adddf3>
 80100a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100a8:	4604      	mov	r4, r0
 80100aa:	460d      	mov	r5, r1
 80100ac:	f7f0 fd34 	bl	8000b18 <__aeabi_dcmpgt>
 80100b0:	b9c0      	cbnz	r0, 80100e4 <_dtoa_r+0x6bc>
 80100b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100b6:	4620      	mov	r0, r4
 80100b8:	4629      	mov	r1, r5
 80100ba:	f7f0 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 80100be:	b110      	cbz	r0, 80100c6 <_dtoa_r+0x69e>
 80100c0:	f018 0f01 	tst.w	r8, #1
 80100c4:	d10e      	bne.n	80100e4 <_dtoa_r+0x6bc>
 80100c6:	9902      	ldr	r1, [sp, #8]
 80100c8:	4648      	mov	r0, r9
 80100ca:	f000 fe53 	bl	8010d74 <_Bfree>
 80100ce:	2300      	movs	r3, #0
 80100d0:	7033      	strb	r3, [r6, #0]
 80100d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80100d4:	3701      	adds	r7, #1
 80100d6:	601f      	str	r7, [r3, #0]
 80100d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f000 824b 	beq.w	8010576 <_dtoa_r+0xb4e>
 80100e0:	601e      	str	r6, [r3, #0]
 80100e2:	e248      	b.n	8010576 <_dtoa_r+0xb4e>
 80100e4:	46b8      	mov	r8, r7
 80100e6:	4633      	mov	r3, r6
 80100e8:	461e      	mov	r6, r3
 80100ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100ee:	2a39      	cmp	r2, #57	@ 0x39
 80100f0:	d106      	bne.n	8010100 <_dtoa_r+0x6d8>
 80100f2:	459a      	cmp	sl, r3
 80100f4:	d1f8      	bne.n	80100e8 <_dtoa_r+0x6c0>
 80100f6:	2230      	movs	r2, #48	@ 0x30
 80100f8:	f108 0801 	add.w	r8, r8, #1
 80100fc:	f88a 2000 	strb.w	r2, [sl]
 8010100:	781a      	ldrb	r2, [r3, #0]
 8010102:	3201      	adds	r2, #1
 8010104:	701a      	strb	r2, [r3, #0]
 8010106:	e7a0      	b.n	801004a <_dtoa_r+0x622>
 8010108:	4b6f      	ldr	r3, [pc, #444]	@ (80102c8 <_dtoa_r+0x8a0>)
 801010a:	2200      	movs	r2, #0
 801010c:	f7f0 fa74 	bl	80005f8 <__aeabi_dmul>
 8010110:	2200      	movs	r2, #0
 8010112:	2300      	movs	r3, #0
 8010114:	4604      	mov	r4, r0
 8010116:	460d      	mov	r5, r1
 8010118:	f7f0 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 801011c:	2800      	cmp	r0, #0
 801011e:	d09f      	beq.n	8010060 <_dtoa_r+0x638>
 8010120:	e7d1      	b.n	80100c6 <_dtoa_r+0x69e>
 8010122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010124:	2a00      	cmp	r2, #0
 8010126:	f000 80ea 	beq.w	80102fe <_dtoa_r+0x8d6>
 801012a:	9a07      	ldr	r2, [sp, #28]
 801012c:	2a01      	cmp	r2, #1
 801012e:	f300 80cd 	bgt.w	80102cc <_dtoa_r+0x8a4>
 8010132:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010134:	2a00      	cmp	r2, #0
 8010136:	f000 80c1 	beq.w	80102bc <_dtoa_r+0x894>
 801013a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801013e:	9c08      	ldr	r4, [sp, #32]
 8010140:	9e00      	ldr	r6, [sp, #0]
 8010142:	9a00      	ldr	r2, [sp, #0]
 8010144:	441a      	add	r2, r3
 8010146:	9200      	str	r2, [sp, #0]
 8010148:	9a06      	ldr	r2, [sp, #24]
 801014a:	2101      	movs	r1, #1
 801014c:	441a      	add	r2, r3
 801014e:	4648      	mov	r0, r9
 8010150:	9206      	str	r2, [sp, #24]
 8010152:	f000 ff0d 	bl	8010f70 <__i2b>
 8010156:	4605      	mov	r5, r0
 8010158:	b166      	cbz	r6, 8010174 <_dtoa_r+0x74c>
 801015a:	9b06      	ldr	r3, [sp, #24]
 801015c:	2b00      	cmp	r3, #0
 801015e:	dd09      	ble.n	8010174 <_dtoa_r+0x74c>
 8010160:	42b3      	cmp	r3, r6
 8010162:	9a00      	ldr	r2, [sp, #0]
 8010164:	bfa8      	it	ge
 8010166:	4633      	movge	r3, r6
 8010168:	1ad2      	subs	r2, r2, r3
 801016a:	9200      	str	r2, [sp, #0]
 801016c:	9a06      	ldr	r2, [sp, #24]
 801016e:	1af6      	subs	r6, r6, r3
 8010170:	1ad3      	subs	r3, r2, r3
 8010172:	9306      	str	r3, [sp, #24]
 8010174:	9b08      	ldr	r3, [sp, #32]
 8010176:	b30b      	cbz	r3, 80101bc <_dtoa_r+0x794>
 8010178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801017a:	2b00      	cmp	r3, #0
 801017c:	f000 80c6 	beq.w	801030c <_dtoa_r+0x8e4>
 8010180:	2c00      	cmp	r4, #0
 8010182:	f000 80c0 	beq.w	8010306 <_dtoa_r+0x8de>
 8010186:	4629      	mov	r1, r5
 8010188:	4622      	mov	r2, r4
 801018a:	4648      	mov	r0, r9
 801018c:	f000 ffa8 	bl	80110e0 <__pow5mult>
 8010190:	9a02      	ldr	r2, [sp, #8]
 8010192:	4601      	mov	r1, r0
 8010194:	4605      	mov	r5, r0
 8010196:	4648      	mov	r0, r9
 8010198:	f000 ff00 	bl	8010f9c <__multiply>
 801019c:	9902      	ldr	r1, [sp, #8]
 801019e:	4680      	mov	r8, r0
 80101a0:	4648      	mov	r0, r9
 80101a2:	f000 fde7 	bl	8010d74 <_Bfree>
 80101a6:	9b08      	ldr	r3, [sp, #32]
 80101a8:	1b1b      	subs	r3, r3, r4
 80101aa:	9308      	str	r3, [sp, #32]
 80101ac:	f000 80b1 	beq.w	8010312 <_dtoa_r+0x8ea>
 80101b0:	9a08      	ldr	r2, [sp, #32]
 80101b2:	4641      	mov	r1, r8
 80101b4:	4648      	mov	r0, r9
 80101b6:	f000 ff93 	bl	80110e0 <__pow5mult>
 80101ba:	9002      	str	r0, [sp, #8]
 80101bc:	2101      	movs	r1, #1
 80101be:	4648      	mov	r0, r9
 80101c0:	f000 fed6 	bl	8010f70 <__i2b>
 80101c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80101c6:	4604      	mov	r4, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 81d8 	beq.w	801057e <_dtoa_r+0xb56>
 80101ce:	461a      	mov	r2, r3
 80101d0:	4601      	mov	r1, r0
 80101d2:	4648      	mov	r0, r9
 80101d4:	f000 ff84 	bl	80110e0 <__pow5mult>
 80101d8:	9b07      	ldr	r3, [sp, #28]
 80101da:	2b01      	cmp	r3, #1
 80101dc:	4604      	mov	r4, r0
 80101de:	f300 809f 	bgt.w	8010320 <_dtoa_r+0x8f8>
 80101e2:	9b04      	ldr	r3, [sp, #16]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	f040 8097 	bne.w	8010318 <_dtoa_r+0x8f0>
 80101ea:	9b05      	ldr	r3, [sp, #20]
 80101ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f040 8093 	bne.w	801031c <_dtoa_r+0x8f4>
 80101f6:	9b05      	ldr	r3, [sp, #20]
 80101f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80101fc:	0d1b      	lsrs	r3, r3, #20
 80101fe:	051b      	lsls	r3, r3, #20
 8010200:	b133      	cbz	r3, 8010210 <_dtoa_r+0x7e8>
 8010202:	9b00      	ldr	r3, [sp, #0]
 8010204:	3301      	adds	r3, #1
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	9b06      	ldr	r3, [sp, #24]
 801020a:	3301      	adds	r3, #1
 801020c:	9306      	str	r3, [sp, #24]
 801020e:	2301      	movs	r3, #1
 8010210:	9308      	str	r3, [sp, #32]
 8010212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010214:	2b00      	cmp	r3, #0
 8010216:	f000 81b8 	beq.w	801058a <_dtoa_r+0xb62>
 801021a:	6923      	ldr	r3, [r4, #16]
 801021c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010220:	6918      	ldr	r0, [r3, #16]
 8010222:	f000 fe59 	bl	8010ed8 <__hi0bits>
 8010226:	f1c0 0020 	rsb	r0, r0, #32
 801022a:	9b06      	ldr	r3, [sp, #24]
 801022c:	4418      	add	r0, r3
 801022e:	f010 001f 	ands.w	r0, r0, #31
 8010232:	f000 8082 	beq.w	801033a <_dtoa_r+0x912>
 8010236:	f1c0 0320 	rsb	r3, r0, #32
 801023a:	2b04      	cmp	r3, #4
 801023c:	dd73      	ble.n	8010326 <_dtoa_r+0x8fe>
 801023e:	9b00      	ldr	r3, [sp, #0]
 8010240:	f1c0 001c 	rsb	r0, r0, #28
 8010244:	4403      	add	r3, r0
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	9b06      	ldr	r3, [sp, #24]
 801024a:	4403      	add	r3, r0
 801024c:	4406      	add	r6, r0
 801024e:	9306      	str	r3, [sp, #24]
 8010250:	9b00      	ldr	r3, [sp, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	dd05      	ble.n	8010262 <_dtoa_r+0x83a>
 8010256:	9902      	ldr	r1, [sp, #8]
 8010258:	461a      	mov	r2, r3
 801025a:	4648      	mov	r0, r9
 801025c:	f000 ff9a 	bl	8011194 <__lshift>
 8010260:	9002      	str	r0, [sp, #8]
 8010262:	9b06      	ldr	r3, [sp, #24]
 8010264:	2b00      	cmp	r3, #0
 8010266:	dd05      	ble.n	8010274 <_dtoa_r+0x84c>
 8010268:	4621      	mov	r1, r4
 801026a:	461a      	mov	r2, r3
 801026c:	4648      	mov	r0, r9
 801026e:	f000 ff91 	bl	8011194 <__lshift>
 8010272:	4604      	mov	r4, r0
 8010274:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010276:	2b00      	cmp	r3, #0
 8010278:	d061      	beq.n	801033e <_dtoa_r+0x916>
 801027a:	9802      	ldr	r0, [sp, #8]
 801027c:	4621      	mov	r1, r4
 801027e:	f000 fff5 	bl	801126c <__mcmp>
 8010282:	2800      	cmp	r0, #0
 8010284:	da5b      	bge.n	801033e <_dtoa_r+0x916>
 8010286:	2300      	movs	r3, #0
 8010288:	9902      	ldr	r1, [sp, #8]
 801028a:	220a      	movs	r2, #10
 801028c:	4648      	mov	r0, r9
 801028e:	f000 fd93 	bl	8010db8 <__multadd>
 8010292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010294:	9002      	str	r0, [sp, #8]
 8010296:	f107 38ff 	add.w	r8, r7, #4294967295
 801029a:	2b00      	cmp	r3, #0
 801029c:	f000 8177 	beq.w	801058e <_dtoa_r+0xb66>
 80102a0:	4629      	mov	r1, r5
 80102a2:	2300      	movs	r3, #0
 80102a4:	220a      	movs	r2, #10
 80102a6:	4648      	mov	r0, r9
 80102a8:	f000 fd86 	bl	8010db8 <__multadd>
 80102ac:	f1bb 0f00 	cmp.w	fp, #0
 80102b0:	4605      	mov	r5, r0
 80102b2:	dc6f      	bgt.n	8010394 <_dtoa_r+0x96c>
 80102b4:	9b07      	ldr	r3, [sp, #28]
 80102b6:	2b02      	cmp	r3, #2
 80102b8:	dc49      	bgt.n	801034e <_dtoa_r+0x926>
 80102ba:	e06b      	b.n	8010394 <_dtoa_r+0x96c>
 80102bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80102be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80102c2:	e73c      	b.n	801013e <_dtoa_r+0x716>
 80102c4:	3fe00000 	.word	0x3fe00000
 80102c8:	40240000 	.word	0x40240000
 80102cc:	9b03      	ldr	r3, [sp, #12]
 80102ce:	1e5c      	subs	r4, r3, #1
 80102d0:	9b08      	ldr	r3, [sp, #32]
 80102d2:	42a3      	cmp	r3, r4
 80102d4:	db09      	blt.n	80102ea <_dtoa_r+0x8c2>
 80102d6:	1b1c      	subs	r4, r3, r4
 80102d8:	9b03      	ldr	r3, [sp, #12]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f6bf af30 	bge.w	8010140 <_dtoa_r+0x718>
 80102e0:	9b00      	ldr	r3, [sp, #0]
 80102e2:	9a03      	ldr	r2, [sp, #12]
 80102e4:	1a9e      	subs	r6, r3, r2
 80102e6:	2300      	movs	r3, #0
 80102e8:	e72b      	b.n	8010142 <_dtoa_r+0x71a>
 80102ea:	9b08      	ldr	r3, [sp, #32]
 80102ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80102ee:	9408      	str	r4, [sp, #32]
 80102f0:	1ae3      	subs	r3, r4, r3
 80102f2:	441a      	add	r2, r3
 80102f4:	9e00      	ldr	r6, [sp, #0]
 80102f6:	9b03      	ldr	r3, [sp, #12]
 80102f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80102fa:	2400      	movs	r4, #0
 80102fc:	e721      	b.n	8010142 <_dtoa_r+0x71a>
 80102fe:	9c08      	ldr	r4, [sp, #32]
 8010300:	9e00      	ldr	r6, [sp, #0]
 8010302:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010304:	e728      	b.n	8010158 <_dtoa_r+0x730>
 8010306:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801030a:	e751      	b.n	80101b0 <_dtoa_r+0x788>
 801030c:	9a08      	ldr	r2, [sp, #32]
 801030e:	9902      	ldr	r1, [sp, #8]
 8010310:	e750      	b.n	80101b4 <_dtoa_r+0x78c>
 8010312:	f8cd 8008 	str.w	r8, [sp, #8]
 8010316:	e751      	b.n	80101bc <_dtoa_r+0x794>
 8010318:	2300      	movs	r3, #0
 801031a:	e779      	b.n	8010210 <_dtoa_r+0x7e8>
 801031c:	9b04      	ldr	r3, [sp, #16]
 801031e:	e777      	b.n	8010210 <_dtoa_r+0x7e8>
 8010320:	2300      	movs	r3, #0
 8010322:	9308      	str	r3, [sp, #32]
 8010324:	e779      	b.n	801021a <_dtoa_r+0x7f2>
 8010326:	d093      	beq.n	8010250 <_dtoa_r+0x828>
 8010328:	9a00      	ldr	r2, [sp, #0]
 801032a:	331c      	adds	r3, #28
 801032c:	441a      	add	r2, r3
 801032e:	9200      	str	r2, [sp, #0]
 8010330:	9a06      	ldr	r2, [sp, #24]
 8010332:	441a      	add	r2, r3
 8010334:	441e      	add	r6, r3
 8010336:	9206      	str	r2, [sp, #24]
 8010338:	e78a      	b.n	8010250 <_dtoa_r+0x828>
 801033a:	4603      	mov	r3, r0
 801033c:	e7f4      	b.n	8010328 <_dtoa_r+0x900>
 801033e:	9b03      	ldr	r3, [sp, #12]
 8010340:	2b00      	cmp	r3, #0
 8010342:	46b8      	mov	r8, r7
 8010344:	dc20      	bgt.n	8010388 <_dtoa_r+0x960>
 8010346:	469b      	mov	fp, r3
 8010348:	9b07      	ldr	r3, [sp, #28]
 801034a:	2b02      	cmp	r3, #2
 801034c:	dd1e      	ble.n	801038c <_dtoa_r+0x964>
 801034e:	f1bb 0f00 	cmp.w	fp, #0
 8010352:	f47f adb1 	bne.w	800feb8 <_dtoa_r+0x490>
 8010356:	4621      	mov	r1, r4
 8010358:	465b      	mov	r3, fp
 801035a:	2205      	movs	r2, #5
 801035c:	4648      	mov	r0, r9
 801035e:	f000 fd2b 	bl	8010db8 <__multadd>
 8010362:	4601      	mov	r1, r0
 8010364:	4604      	mov	r4, r0
 8010366:	9802      	ldr	r0, [sp, #8]
 8010368:	f000 ff80 	bl	801126c <__mcmp>
 801036c:	2800      	cmp	r0, #0
 801036e:	f77f ada3 	ble.w	800feb8 <_dtoa_r+0x490>
 8010372:	4656      	mov	r6, sl
 8010374:	2331      	movs	r3, #49	@ 0x31
 8010376:	f806 3b01 	strb.w	r3, [r6], #1
 801037a:	f108 0801 	add.w	r8, r8, #1
 801037e:	e59f      	b.n	800fec0 <_dtoa_r+0x498>
 8010380:	9c03      	ldr	r4, [sp, #12]
 8010382:	46b8      	mov	r8, r7
 8010384:	4625      	mov	r5, r4
 8010386:	e7f4      	b.n	8010372 <_dtoa_r+0x94a>
 8010388:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801038c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801038e:	2b00      	cmp	r3, #0
 8010390:	f000 8101 	beq.w	8010596 <_dtoa_r+0xb6e>
 8010394:	2e00      	cmp	r6, #0
 8010396:	dd05      	ble.n	80103a4 <_dtoa_r+0x97c>
 8010398:	4629      	mov	r1, r5
 801039a:	4632      	mov	r2, r6
 801039c:	4648      	mov	r0, r9
 801039e:	f000 fef9 	bl	8011194 <__lshift>
 80103a2:	4605      	mov	r5, r0
 80103a4:	9b08      	ldr	r3, [sp, #32]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d05c      	beq.n	8010464 <_dtoa_r+0xa3c>
 80103aa:	6869      	ldr	r1, [r5, #4]
 80103ac:	4648      	mov	r0, r9
 80103ae:	f000 fca1 	bl	8010cf4 <_Balloc>
 80103b2:	4606      	mov	r6, r0
 80103b4:	b928      	cbnz	r0, 80103c2 <_dtoa_r+0x99a>
 80103b6:	4b82      	ldr	r3, [pc, #520]	@ (80105c0 <_dtoa_r+0xb98>)
 80103b8:	4602      	mov	r2, r0
 80103ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80103be:	f7ff bb4a 	b.w	800fa56 <_dtoa_r+0x2e>
 80103c2:	692a      	ldr	r2, [r5, #16]
 80103c4:	3202      	adds	r2, #2
 80103c6:	0092      	lsls	r2, r2, #2
 80103c8:	f105 010c 	add.w	r1, r5, #12
 80103cc:	300c      	adds	r0, #12
 80103ce:	f7ff fa84 	bl	800f8da <memcpy>
 80103d2:	2201      	movs	r2, #1
 80103d4:	4631      	mov	r1, r6
 80103d6:	4648      	mov	r0, r9
 80103d8:	f000 fedc 	bl	8011194 <__lshift>
 80103dc:	f10a 0301 	add.w	r3, sl, #1
 80103e0:	9300      	str	r3, [sp, #0]
 80103e2:	eb0a 030b 	add.w	r3, sl, fp
 80103e6:	9308      	str	r3, [sp, #32]
 80103e8:	9b04      	ldr	r3, [sp, #16]
 80103ea:	f003 0301 	and.w	r3, r3, #1
 80103ee:	462f      	mov	r7, r5
 80103f0:	9306      	str	r3, [sp, #24]
 80103f2:	4605      	mov	r5, r0
 80103f4:	9b00      	ldr	r3, [sp, #0]
 80103f6:	9802      	ldr	r0, [sp, #8]
 80103f8:	4621      	mov	r1, r4
 80103fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80103fe:	f7ff fa89 	bl	800f914 <quorem>
 8010402:	4603      	mov	r3, r0
 8010404:	3330      	adds	r3, #48	@ 0x30
 8010406:	9003      	str	r0, [sp, #12]
 8010408:	4639      	mov	r1, r7
 801040a:	9802      	ldr	r0, [sp, #8]
 801040c:	9309      	str	r3, [sp, #36]	@ 0x24
 801040e:	f000 ff2d 	bl	801126c <__mcmp>
 8010412:	462a      	mov	r2, r5
 8010414:	9004      	str	r0, [sp, #16]
 8010416:	4621      	mov	r1, r4
 8010418:	4648      	mov	r0, r9
 801041a:	f000 ff43 	bl	80112a4 <__mdiff>
 801041e:	68c2      	ldr	r2, [r0, #12]
 8010420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010422:	4606      	mov	r6, r0
 8010424:	bb02      	cbnz	r2, 8010468 <_dtoa_r+0xa40>
 8010426:	4601      	mov	r1, r0
 8010428:	9802      	ldr	r0, [sp, #8]
 801042a:	f000 ff1f 	bl	801126c <__mcmp>
 801042e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010430:	4602      	mov	r2, r0
 8010432:	4631      	mov	r1, r6
 8010434:	4648      	mov	r0, r9
 8010436:	920c      	str	r2, [sp, #48]	@ 0x30
 8010438:	9309      	str	r3, [sp, #36]	@ 0x24
 801043a:	f000 fc9b 	bl	8010d74 <_Bfree>
 801043e:	9b07      	ldr	r3, [sp, #28]
 8010440:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010442:	9e00      	ldr	r6, [sp, #0]
 8010444:	ea42 0103 	orr.w	r1, r2, r3
 8010448:	9b06      	ldr	r3, [sp, #24]
 801044a:	4319      	orrs	r1, r3
 801044c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801044e:	d10d      	bne.n	801046c <_dtoa_r+0xa44>
 8010450:	2b39      	cmp	r3, #57	@ 0x39
 8010452:	d027      	beq.n	80104a4 <_dtoa_r+0xa7c>
 8010454:	9a04      	ldr	r2, [sp, #16]
 8010456:	2a00      	cmp	r2, #0
 8010458:	dd01      	ble.n	801045e <_dtoa_r+0xa36>
 801045a:	9b03      	ldr	r3, [sp, #12]
 801045c:	3331      	adds	r3, #49	@ 0x31
 801045e:	f88b 3000 	strb.w	r3, [fp]
 8010462:	e52e      	b.n	800fec2 <_dtoa_r+0x49a>
 8010464:	4628      	mov	r0, r5
 8010466:	e7b9      	b.n	80103dc <_dtoa_r+0x9b4>
 8010468:	2201      	movs	r2, #1
 801046a:	e7e2      	b.n	8010432 <_dtoa_r+0xa0a>
 801046c:	9904      	ldr	r1, [sp, #16]
 801046e:	2900      	cmp	r1, #0
 8010470:	db04      	blt.n	801047c <_dtoa_r+0xa54>
 8010472:	9807      	ldr	r0, [sp, #28]
 8010474:	4301      	orrs	r1, r0
 8010476:	9806      	ldr	r0, [sp, #24]
 8010478:	4301      	orrs	r1, r0
 801047a:	d120      	bne.n	80104be <_dtoa_r+0xa96>
 801047c:	2a00      	cmp	r2, #0
 801047e:	ddee      	ble.n	801045e <_dtoa_r+0xa36>
 8010480:	9902      	ldr	r1, [sp, #8]
 8010482:	9300      	str	r3, [sp, #0]
 8010484:	2201      	movs	r2, #1
 8010486:	4648      	mov	r0, r9
 8010488:	f000 fe84 	bl	8011194 <__lshift>
 801048c:	4621      	mov	r1, r4
 801048e:	9002      	str	r0, [sp, #8]
 8010490:	f000 feec 	bl	801126c <__mcmp>
 8010494:	2800      	cmp	r0, #0
 8010496:	9b00      	ldr	r3, [sp, #0]
 8010498:	dc02      	bgt.n	80104a0 <_dtoa_r+0xa78>
 801049a:	d1e0      	bne.n	801045e <_dtoa_r+0xa36>
 801049c:	07da      	lsls	r2, r3, #31
 801049e:	d5de      	bpl.n	801045e <_dtoa_r+0xa36>
 80104a0:	2b39      	cmp	r3, #57	@ 0x39
 80104a2:	d1da      	bne.n	801045a <_dtoa_r+0xa32>
 80104a4:	2339      	movs	r3, #57	@ 0x39
 80104a6:	f88b 3000 	strb.w	r3, [fp]
 80104aa:	4633      	mov	r3, r6
 80104ac:	461e      	mov	r6, r3
 80104ae:	3b01      	subs	r3, #1
 80104b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80104b4:	2a39      	cmp	r2, #57	@ 0x39
 80104b6:	d04e      	beq.n	8010556 <_dtoa_r+0xb2e>
 80104b8:	3201      	adds	r2, #1
 80104ba:	701a      	strb	r2, [r3, #0]
 80104bc:	e501      	b.n	800fec2 <_dtoa_r+0x49a>
 80104be:	2a00      	cmp	r2, #0
 80104c0:	dd03      	ble.n	80104ca <_dtoa_r+0xaa2>
 80104c2:	2b39      	cmp	r3, #57	@ 0x39
 80104c4:	d0ee      	beq.n	80104a4 <_dtoa_r+0xa7c>
 80104c6:	3301      	adds	r3, #1
 80104c8:	e7c9      	b.n	801045e <_dtoa_r+0xa36>
 80104ca:	9a00      	ldr	r2, [sp, #0]
 80104cc:	9908      	ldr	r1, [sp, #32]
 80104ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80104d2:	428a      	cmp	r2, r1
 80104d4:	d028      	beq.n	8010528 <_dtoa_r+0xb00>
 80104d6:	9902      	ldr	r1, [sp, #8]
 80104d8:	2300      	movs	r3, #0
 80104da:	220a      	movs	r2, #10
 80104dc:	4648      	mov	r0, r9
 80104de:	f000 fc6b 	bl	8010db8 <__multadd>
 80104e2:	42af      	cmp	r7, r5
 80104e4:	9002      	str	r0, [sp, #8]
 80104e6:	f04f 0300 	mov.w	r3, #0
 80104ea:	f04f 020a 	mov.w	r2, #10
 80104ee:	4639      	mov	r1, r7
 80104f0:	4648      	mov	r0, r9
 80104f2:	d107      	bne.n	8010504 <_dtoa_r+0xadc>
 80104f4:	f000 fc60 	bl	8010db8 <__multadd>
 80104f8:	4607      	mov	r7, r0
 80104fa:	4605      	mov	r5, r0
 80104fc:	9b00      	ldr	r3, [sp, #0]
 80104fe:	3301      	adds	r3, #1
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	e777      	b.n	80103f4 <_dtoa_r+0x9cc>
 8010504:	f000 fc58 	bl	8010db8 <__multadd>
 8010508:	4629      	mov	r1, r5
 801050a:	4607      	mov	r7, r0
 801050c:	2300      	movs	r3, #0
 801050e:	220a      	movs	r2, #10
 8010510:	4648      	mov	r0, r9
 8010512:	f000 fc51 	bl	8010db8 <__multadd>
 8010516:	4605      	mov	r5, r0
 8010518:	e7f0      	b.n	80104fc <_dtoa_r+0xad4>
 801051a:	f1bb 0f00 	cmp.w	fp, #0
 801051e:	bfcc      	ite	gt
 8010520:	465e      	movgt	r6, fp
 8010522:	2601      	movle	r6, #1
 8010524:	4456      	add	r6, sl
 8010526:	2700      	movs	r7, #0
 8010528:	9902      	ldr	r1, [sp, #8]
 801052a:	9300      	str	r3, [sp, #0]
 801052c:	2201      	movs	r2, #1
 801052e:	4648      	mov	r0, r9
 8010530:	f000 fe30 	bl	8011194 <__lshift>
 8010534:	4621      	mov	r1, r4
 8010536:	9002      	str	r0, [sp, #8]
 8010538:	f000 fe98 	bl	801126c <__mcmp>
 801053c:	2800      	cmp	r0, #0
 801053e:	dcb4      	bgt.n	80104aa <_dtoa_r+0xa82>
 8010540:	d102      	bne.n	8010548 <_dtoa_r+0xb20>
 8010542:	9b00      	ldr	r3, [sp, #0]
 8010544:	07db      	lsls	r3, r3, #31
 8010546:	d4b0      	bmi.n	80104aa <_dtoa_r+0xa82>
 8010548:	4633      	mov	r3, r6
 801054a:	461e      	mov	r6, r3
 801054c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010550:	2a30      	cmp	r2, #48	@ 0x30
 8010552:	d0fa      	beq.n	801054a <_dtoa_r+0xb22>
 8010554:	e4b5      	b.n	800fec2 <_dtoa_r+0x49a>
 8010556:	459a      	cmp	sl, r3
 8010558:	d1a8      	bne.n	80104ac <_dtoa_r+0xa84>
 801055a:	2331      	movs	r3, #49	@ 0x31
 801055c:	f108 0801 	add.w	r8, r8, #1
 8010560:	f88a 3000 	strb.w	r3, [sl]
 8010564:	e4ad      	b.n	800fec2 <_dtoa_r+0x49a>
 8010566:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010568:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80105c4 <_dtoa_r+0xb9c>
 801056c:	b11b      	cbz	r3, 8010576 <_dtoa_r+0xb4e>
 801056e:	f10a 0308 	add.w	r3, sl, #8
 8010572:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010574:	6013      	str	r3, [r2, #0]
 8010576:	4650      	mov	r0, sl
 8010578:	b017      	add	sp, #92	@ 0x5c
 801057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057e:	9b07      	ldr	r3, [sp, #28]
 8010580:	2b01      	cmp	r3, #1
 8010582:	f77f ae2e 	ble.w	80101e2 <_dtoa_r+0x7ba>
 8010586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010588:	9308      	str	r3, [sp, #32]
 801058a:	2001      	movs	r0, #1
 801058c:	e64d      	b.n	801022a <_dtoa_r+0x802>
 801058e:	f1bb 0f00 	cmp.w	fp, #0
 8010592:	f77f aed9 	ble.w	8010348 <_dtoa_r+0x920>
 8010596:	4656      	mov	r6, sl
 8010598:	9802      	ldr	r0, [sp, #8]
 801059a:	4621      	mov	r1, r4
 801059c:	f7ff f9ba 	bl	800f914 <quorem>
 80105a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80105a4:	f806 3b01 	strb.w	r3, [r6], #1
 80105a8:	eba6 020a 	sub.w	r2, r6, sl
 80105ac:	4593      	cmp	fp, r2
 80105ae:	ddb4      	ble.n	801051a <_dtoa_r+0xaf2>
 80105b0:	9902      	ldr	r1, [sp, #8]
 80105b2:	2300      	movs	r3, #0
 80105b4:	220a      	movs	r2, #10
 80105b6:	4648      	mov	r0, r9
 80105b8:	f000 fbfe 	bl	8010db8 <__multadd>
 80105bc:	9002      	str	r0, [sp, #8]
 80105be:	e7eb      	b.n	8010598 <_dtoa_r+0xb70>
 80105c0:	08012c1d 	.word	0x08012c1d
 80105c4:	08012ba1 	.word	0x08012ba1

080105c8 <_free_r>:
 80105c8:	b538      	push	{r3, r4, r5, lr}
 80105ca:	4605      	mov	r5, r0
 80105cc:	2900      	cmp	r1, #0
 80105ce:	d041      	beq.n	8010654 <_free_r+0x8c>
 80105d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105d4:	1f0c      	subs	r4, r1, #4
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	bfb8      	it	lt
 80105da:	18e4      	addlt	r4, r4, r3
 80105dc:	f7fd f9fe 	bl	800d9dc <__malloc_lock>
 80105e0:	4a1d      	ldr	r2, [pc, #116]	@ (8010658 <_free_r+0x90>)
 80105e2:	6813      	ldr	r3, [r2, #0]
 80105e4:	b933      	cbnz	r3, 80105f4 <_free_r+0x2c>
 80105e6:	6063      	str	r3, [r4, #4]
 80105e8:	6014      	str	r4, [r2, #0]
 80105ea:	4628      	mov	r0, r5
 80105ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105f0:	f7fd b9fa 	b.w	800d9e8 <__malloc_unlock>
 80105f4:	42a3      	cmp	r3, r4
 80105f6:	d908      	bls.n	801060a <_free_r+0x42>
 80105f8:	6820      	ldr	r0, [r4, #0]
 80105fa:	1821      	adds	r1, r4, r0
 80105fc:	428b      	cmp	r3, r1
 80105fe:	bf01      	itttt	eq
 8010600:	6819      	ldreq	r1, [r3, #0]
 8010602:	685b      	ldreq	r3, [r3, #4]
 8010604:	1809      	addeq	r1, r1, r0
 8010606:	6021      	streq	r1, [r4, #0]
 8010608:	e7ed      	b.n	80105e6 <_free_r+0x1e>
 801060a:	461a      	mov	r2, r3
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	b10b      	cbz	r3, 8010614 <_free_r+0x4c>
 8010610:	42a3      	cmp	r3, r4
 8010612:	d9fa      	bls.n	801060a <_free_r+0x42>
 8010614:	6811      	ldr	r1, [r2, #0]
 8010616:	1850      	adds	r0, r2, r1
 8010618:	42a0      	cmp	r0, r4
 801061a:	d10b      	bne.n	8010634 <_free_r+0x6c>
 801061c:	6820      	ldr	r0, [r4, #0]
 801061e:	4401      	add	r1, r0
 8010620:	1850      	adds	r0, r2, r1
 8010622:	4283      	cmp	r3, r0
 8010624:	6011      	str	r1, [r2, #0]
 8010626:	d1e0      	bne.n	80105ea <_free_r+0x22>
 8010628:	6818      	ldr	r0, [r3, #0]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	6053      	str	r3, [r2, #4]
 801062e:	4408      	add	r0, r1
 8010630:	6010      	str	r0, [r2, #0]
 8010632:	e7da      	b.n	80105ea <_free_r+0x22>
 8010634:	d902      	bls.n	801063c <_free_r+0x74>
 8010636:	230c      	movs	r3, #12
 8010638:	602b      	str	r3, [r5, #0]
 801063a:	e7d6      	b.n	80105ea <_free_r+0x22>
 801063c:	6820      	ldr	r0, [r4, #0]
 801063e:	1821      	adds	r1, r4, r0
 8010640:	428b      	cmp	r3, r1
 8010642:	bf04      	itt	eq
 8010644:	6819      	ldreq	r1, [r3, #0]
 8010646:	685b      	ldreq	r3, [r3, #4]
 8010648:	6063      	str	r3, [r4, #4]
 801064a:	bf04      	itt	eq
 801064c:	1809      	addeq	r1, r1, r0
 801064e:	6021      	streq	r1, [r4, #0]
 8010650:	6054      	str	r4, [r2, #4]
 8010652:	e7ca      	b.n	80105ea <_free_r+0x22>
 8010654:	bd38      	pop	{r3, r4, r5, pc}
 8010656:	bf00      	nop
 8010658:	20006064 	.word	0x20006064

0801065c <rshift>:
 801065c:	6903      	ldr	r3, [r0, #16]
 801065e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010666:	ea4f 1261 	mov.w	r2, r1, asr #5
 801066a:	f100 0414 	add.w	r4, r0, #20
 801066e:	dd45      	ble.n	80106fc <rshift+0xa0>
 8010670:	f011 011f 	ands.w	r1, r1, #31
 8010674:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010678:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801067c:	d10c      	bne.n	8010698 <rshift+0x3c>
 801067e:	f100 0710 	add.w	r7, r0, #16
 8010682:	4629      	mov	r1, r5
 8010684:	42b1      	cmp	r1, r6
 8010686:	d334      	bcc.n	80106f2 <rshift+0x96>
 8010688:	1a9b      	subs	r3, r3, r2
 801068a:	009b      	lsls	r3, r3, #2
 801068c:	1eea      	subs	r2, r5, #3
 801068e:	4296      	cmp	r6, r2
 8010690:	bf38      	it	cc
 8010692:	2300      	movcc	r3, #0
 8010694:	4423      	add	r3, r4
 8010696:	e015      	b.n	80106c4 <rshift+0x68>
 8010698:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801069c:	f1c1 0820 	rsb	r8, r1, #32
 80106a0:	40cf      	lsrs	r7, r1
 80106a2:	f105 0e04 	add.w	lr, r5, #4
 80106a6:	46a1      	mov	r9, r4
 80106a8:	4576      	cmp	r6, lr
 80106aa:	46f4      	mov	ip, lr
 80106ac:	d815      	bhi.n	80106da <rshift+0x7e>
 80106ae:	1a9a      	subs	r2, r3, r2
 80106b0:	0092      	lsls	r2, r2, #2
 80106b2:	3a04      	subs	r2, #4
 80106b4:	3501      	adds	r5, #1
 80106b6:	42ae      	cmp	r6, r5
 80106b8:	bf38      	it	cc
 80106ba:	2200      	movcc	r2, #0
 80106bc:	18a3      	adds	r3, r4, r2
 80106be:	50a7      	str	r7, [r4, r2]
 80106c0:	b107      	cbz	r7, 80106c4 <rshift+0x68>
 80106c2:	3304      	adds	r3, #4
 80106c4:	1b1a      	subs	r2, r3, r4
 80106c6:	42a3      	cmp	r3, r4
 80106c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80106cc:	bf08      	it	eq
 80106ce:	2300      	moveq	r3, #0
 80106d0:	6102      	str	r2, [r0, #16]
 80106d2:	bf08      	it	eq
 80106d4:	6143      	streq	r3, [r0, #20]
 80106d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106da:	f8dc c000 	ldr.w	ip, [ip]
 80106de:	fa0c fc08 	lsl.w	ip, ip, r8
 80106e2:	ea4c 0707 	orr.w	r7, ip, r7
 80106e6:	f849 7b04 	str.w	r7, [r9], #4
 80106ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80106ee:	40cf      	lsrs	r7, r1
 80106f0:	e7da      	b.n	80106a8 <rshift+0x4c>
 80106f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80106f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80106fa:	e7c3      	b.n	8010684 <rshift+0x28>
 80106fc:	4623      	mov	r3, r4
 80106fe:	e7e1      	b.n	80106c4 <rshift+0x68>

08010700 <__hexdig_fun>:
 8010700:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010704:	2b09      	cmp	r3, #9
 8010706:	d802      	bhi.n	801070e <__hexdig_fun+0xe>
 8010708:	3820      	subs	r0, #32
 801070a:	b2c0      	uxtb	r0, r0
 801070c:	4770      	bx	lr
 801070e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010712:	2b05      	cmp	r3, #5
 8010714:	d801      	bhi.n	801071a <__hexdig_fun+0x1a>
 8010716:	3847      	subs	r0, #71	@ 0x47
 8010718:	e7f7      	b.n	801070a <__hexdig_fun+0xa>
 801071a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801071e:	2b05      	cmp	r3, #5
 8010720:	d801      	bhi.n	8010726 <__hexdig_fun+0x26>
 8010722:	3827      	subs	r0, #39	@ 0x27
 8010724:	e7f1      	b.n	801070a <__hexdig_fun+0xa>
 8010726:	2000      	movs	r0, #0
 8010728:	4770      	bx	lr
	...

0801072c <__gethex>:
 801072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010730:	b085      	sub	sp, #20
 8010732:	468a      	mov	sl, r1
 8010734:	9302      	str	r3, [sp, #8]
 8010736:	680b      	ldr	r3, [r1, #0]
 8010738:	9001      	str	r0, [sp, #4]
 801073a:	4690      	mov	r8, r2
 801073c:	1c9c      	adds	r4, r3, #2
 801073e:	46a1      	mov	r9, r4
 8010740:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010744:	2830      	cmp	r0, #48	@ 0x30
 8010746:	d0fa      	beq.n	801073e <__gethex+0x12>
 8010748:	eba9 0303 	sub.w	r3, r9, r3
 801074c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010750:	f7ff ffd6 	bl	8010700 <__hexdig_fun>
 8010754:	4605      	mov	r5, r0
 8010756:	2800      	cmp	r0, #0
 8010758:	d168      	bne.n	801082c <__gethex+0x100>
 801075a:	49a0      	ldr	r1, [pc, #640]	@ (80109dc <__gethex+0x2b0>)
 801075c:	2201      	movs	r2, #1
 801075e:	4648      	mov	r0, r9
 8010760:	f7fe ffc3 	bl	800f6ea <strncmp>
 8010764:	4607      	mov	r7, r0
 8010766:	2800      	cmp	r0, #0
 8010768:	d167      	bne.n	801083a <__gethex+0x10e>
 801076a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801076e:	4626      	mov	r6, r4
 8010770:	f7ff ffc6 	bl	8010700 <__hexdig_fun>
 8010774:	2800      	cmp	r0, #0
 8010776:	d062      	beq.n	801083e <__gethex+0x112>
 8010778:	4623      	mov	r3, r4
 801077a:	7818      	ldrb	r0, [r3, #0]
 801077c:	2830      	cmp	r0, #48	@ 0x30
 801077e:	4699      	mov	r9, r3
 8010780:	f103 0301 	add.w	r3, r3, #1
 8010784:	d0f9      	beq.n	801077a <__gethex+0x4e>
 8010786:	f7ff ffbb 	bl	8010700 <__hexdig_fun>
 801078a:	fab0 f580 	clz	r5, r0
 801078e:	096d      	lsrs	r5, r5, #5
 8010790:	f04f 0b01 	mov.w	fp, #1
 8010794:	464a      	mov	r2, r9
 8010796:	4616      	mov	r6, r2
 8010798:	3201      	adds	r2, #1
 801079a:	7830      	ldrb	r0, [r6, #0]
 801079c:	f7ff ffb0 	bl	8010700 <__hexdig_fun>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d1f8      	bne.n	8010796 <__gethex+0x6a>
 80107a4:	498d      	ldr	r1, [pc, #564]	@ (80109dc <__gethex+0x2b0>)
 80107a6:	2201      	movs	r2, #1
 80107a8:	4630      	mov	r0, r6
 80107aa:	f7fe ff9e 	bl	800f6ea <strncmp>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d13f      	bne.n	8010832 <__gethex+0x106>
 80107b2:	b944      	cbnz	r4, 80107c6 <__gethex+0x9a>
 80107b4:	1c74      	adds	r4, r6, #1
 80107b6:	4622      	mov	r2, r4
 80107b8:	4616      	mov	r6, r2
 80107ba:	3201      	adds	r2, #1
 80107bc:	7830      	ldrb	r0, [r6, #0]
 80107be:	f7ff ff9f 	bl	8010700 <__hexdig_fun>
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d1f8      	bne.n	80107b8 <__gethex+0x8c>
 80107c6:	1ba4      	subs	r4, r4, r6
 80107c8:	00a7      	lsls	r7, r4, #2
 80107ca:	7833      	ldrb	r3, [r6, #0]
 80107cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80107d0:	2b50      	cmp	r3, #80	@ 0x50
 80107d2:	d13e      	bne.n	8010852 <__gethex+0x126>
 80107d4:	7873      	ldrb	r3, [r6, #1]
 80107d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80107d8:	d033      	beq.n	8010842 <__gethex+0x116>
 80107da:	2b2d      	cmp	r3, #45	@ 0x2d
 80107dc:	d034      	beq.n	8010848 <__gethex+0x11c>
 80107de:	1c71      	adds	r1, r6, #1
 80107e0:	2400      	movs	r4, #0
 80107e2:	7808      	ldrb	r0, [r1, #0]
 80107e4:	f7ff ff8c 	bl	8010700 <__hexdig_fun>
 80107e8:	1e43      	subs	r3, r0, #1
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	2b18      	cmp	r3, #24
 80107ee:	d830      	bhi.n	8010852 <__gethex+0x126>
 80107f0:	f1a0 0210 	sub.w	r2, r0, #16
 80107f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80107f8:	f7ff ff82 	bl	8010700 <__hexdig_fun>
 80107fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8010800:	fa5f fc8c 	uxtb.w	ip, ip
 8010804:	f1bc 0f18 	cmp.w	ip, #24
 8010808:	f04f 030a 	mov.w	r3, #10
 801080c:	d91e      	bls.n	801084c <__gethex+0x120>
 801080e:	b104      	cbz	r4, 8010812 <__gethex+0xe6>
 8010810:	4252      	negs	r2, r2
 8010812:	4417      	add	r7, r2
 8010814:	f8ca 1000 	str.w	r1, [sl]
 8010818:	b1ed      	cbz	r5, 8010856 <__gethex+0x12a>
 801081a:	f1bb 0f00 	cmp.w	fp, #0
 801081e:	bf0c      	ite	eq
 8010820:	2506      	moveq	r5, #6
 8010822:	2500      	movne	r5, #0
 8010824:	4628      	mov	r0, r5
 8010826:	b005      	add	sp, #20
 8010828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082c:	2500      	movs	r5, #0
 801082e:	462c      	mov	r4, r5
 8010830:	e7b0      	b.n	8010794 <__gethex+0x68>
 8010832:	2c00      	cmp	r4, #0
 8010834:	d1c7      	bne.n	80107c6 <__gethex+0x9a>
 8010836:	4627      	mov	r7, r4
 8010838:	e7c7      	b.n	80107ca <__gethex+0x9e>
 801083a:	464e      	mov	r6, r9
 801083c:	462f      	mov	r7, r5
 801083e:	2501      	movs	r5, #1
 8010840:	e7c3      	b.n	80107ca <__gethex+0x9e>
 8010842:	2400      	movs	r4, #0
 8010844:	1cb1      	adds	r1, r6, #2
 8010846:	e7cc      	b.n	80107e2 <__gethex+0xb6>
 8010848:	2401      	movs	r4, #1
 801084a:	e7fb      	b.n	8010844 <__gethex+0x118>
 801084c:	fb03 0002 	mla	r0, r3, r2, r0
 8010850:	e7ce      	b.n	80107f0 <__gethex+0xc4>
 8010852:	4631      	mov	r1, r6
 8010854:	e7de      	b.n	8010814 <__gethex+0xe8>
 8010856:	eba6 0309 	sub.w	r3, r6, r9
 801085a:	3b01      	subs	r3, #1
 801085c:	4629      	mov	r1, r5
 801085e:	2b07      	cmp	r3, #7
 8010860:	dc0a      	bgt.n	8010878 <__gethex+0x14c>
 8010862:	9801      	ldr	r0, [sp, #4]
 8010864:	f000 fa46 	bl	8010cf4 <_Balloc>
 8010868:	4604      	mov	r4, r0
 801086a:	b940      	cbnz	r0, 801087e <__gethex+0x152>
 801086c:	4b5c      	ldr	r3, [pc, #368]	@ (80109e0 <__gethex+0x2b4>)
 801086e:	4602      	mov	r2, r0
 8010870:	21e4      	movs	r1, #228	@ 0xe4
 8010872:	485c      	ldr	r0, [pc, #368]	@ (80109e4 <__gethex+0x2b8>)
 8010874:	f001 fd14 	bl	80122a0 <__assert_func>
 8010878:	3101      	adds	r1, #1
 801087a:	105b      	asrs	r3, r3, #1
 801087c:	e7ef      	b.n	801085e <__gethex+0x132>
 801087e:	f100 0a14 	add.w	sl, r0, #20
 8010882:	2300      	movs	r3, #0
 8010884:	4655      	mov	r5, sl
 8010886:	469b      	mov	fp, r3
 8010888:	45b1      	cmp	r9, r6
 801088a:	d337      	bcc.n	80108fc <__gethex+0x1d0>
 801088c:	f845 bb04 	str.w	fp, [r5], #4
 8010890:	eba5 050a 	sub.w	r5, r5, sl
 8010894:	10ad      	asrs	r5, r5, #2
 8010896:	6125      	str	r5, [r4, #16]
 8010898:	4658      	mov	r0, fp
 801089a:	f000 fb1d 	bl	8010ed8 <__hi0bits>
 801089e:	016d      	lsls	r5, r5, #5
 80108a0:	f8d8 6000 	ldr.w	r6, [r8]
 80108a4:	1a2d      	subs	r5, r5, r0
 80108a6:	42b5      	cmp	r5, r6
 80108a8:	dd54      	ble.n	8010954 <__gethex+0x228>
 80108aa:	1bad      	subs	r5, r5, r6
 80108ac:	4629      	mov	r1, r5
 80108ae:	4620      	mov	r0, r4
 80108b0:	f000 fea9 	bl	8011606 <__any_on>
 80108b4:	4681      	mov	r9, r0
 80108b6:	b178      	cbz	r0, 80108d8 <__gethex+0x1ac>
 80108b8:	1e6b      	subs	r3, r5, #1
 80108ba:	1159      	asrs	r1, r3, #5
 80108bc:	f003 021f 	and.w	r2, r3, #31
 80108c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80108c4:	f04f 0901 	mov.w	r9, #1
 80108c8:	fa09 f202 	lsl.w	r2, r9, r2
 80108cc:	420a      	tst	r2, r1
 80108ce:	d003      	beq.n	80108d8 <__gethex+0x1ac>
 80108d0:	454b      	cmp	r3, r9
 80108d2:	dc36      	bgt.n	8010942 <__gethex+0x216>
 80108d4:	f04f 0902 	mov.w	r9, #2
 80108d8:	4629      	mov	r1, r5
 80108da:	4620      	mov	r0, r4
 80108dc:	f7ff febe 	bl	801065c <rshift>
 80108e0:	442f      	add	r7, r5
 80108e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108e6:	42bb      	cmp	r3, r7
 80108e8:	da42      	bge.n	8010970 <__gethex+0x244>
 80108ea:	9801      	ldr	r0, [sp, #4]
 80108ec:	4621      	mov	r1, r4
 80108ee:	f000 fa41 	bl	8010d74 <_Bfree>
 80108f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108f4:	2300      	movs	r3, #0
 80108f6:	6013      	str	r3, [r2, #0]
 80108f8:	25a3      	movs	r5, #163	@ 0xa3
 80108fa:	e793      	b.n	8010824 <__gethex+0xf8>
 80108fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010900:	2a2e      	cmp	r2, #46	@ 0x2e
 8010902:	d012      	beq.n	801092a <__gethex+0x1fe>
 8010904:	2b20      	cmp	r3, #32
 8010906:	d104      	bne.n	8010912 <__gethex+0x1e6>
 8010908:	f845 bb04 	str.w	fp, [r5], #4
 801090c:	f04f 0b00 	mov.w	fp, #0
 8010910:	465b      	mov	r3, fp
 8010912:	7830      	ldrb	r0, [r6, #0]
 8010914:	9303      	str	r3, [sp, #12]
 8010916:	f7ff fef3 	bl	8010700 <__hexdig_fun>
 801091a:	9b03      	ldr	r3, [sp, #12]
 801091c:	f000 000f 	and.w	r0, r0, #15
 8010920:	4098      	lsls	r0, r3
 8010922:	ea4b 0b00 	orr.w	fp, fp, r0
 8010926:	3304      	adds	r3, #4
 8010928:	e7ae      	b.n	8010888 <__gethex+0x15c>
 801092a:	45b1      	cmp	r9, r6
 801092c:	d8ea      	bhi.n	8010904 <__gethex+0x1d8>
 801092e:	492b      	ldr	r1, [pc, #172]	@ (80109dc <__gethex+0x2b0>)
 8010930:	9303      	str	r3, [sp, #12]
 8010932:	2201      	movs	r2, #1
 8010934:	4630      	mov	r0, r6
 8010936:	f7fe fed8 	bl	800f6ea <strncmp>
 801093a:	9b03      	ldr	r3, [sp, #12]
 801093c:	2800      	cmp	r0, #0
 801093e:	d1e1      	bne.n	8010904 <__gethex+0x1d8>
 8010940:	e7a2      	b.n	8010888 <__gethex+0x15c>
 8010942:	1ea9      	subs	r1, r5, #2
 8010944:	4620      	mov	r0, r4
 8010946:	f000 fe5e 	bl	8011606 <__any_on>
 801094a:	2800      	cmp	r0, #0
 801094c:	d0c2      	beq.n	80108d4 <__gethex+0x1a8>
 801094e:	f04f 0903 	mov.w	r9, #3
 8010952:	e7c1      	b.n	80108d8 <__gethex+0x1ac>
 8010954:	da09      	bge.n	801096a <__gethex+0x23e>
 8010956:	1b75      	subs	r5, r6, r5
 8010958:	4621      	mov	r1, r4
 801095a:	9801      	ldr	r0, [sp, #4]
 801095c:	462a      	mov	r2, r5
 801095e:	f000 fc19 	bl	8011194 <__lshift>
 8010962:	1b7f      	subs	r7, r7, r5
 8010964:	4604      	mov	r4, r0
 8010966:	f100 0a14 	add.w	sl, r0, #20
 801096a:	f04f 0900 	mov.w	r9, #0
 801096e:	e7b8      	b.n	80108e2 <__gethex+0x1b6>
 8010970:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010974:	42bd      	cmp	r5, r7
 8010976:	dd6f      	ble.n	8010a58 <__gethex+0x32c>
 8010978:	1bed      	subs	r5, r5, r7
 801097a:	42ae      	cmp	r6, r5
 801097c:	dc34      	bgt.n	80109e8 <__gethex+0x2bc>
 801097e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010982:	2b02      	cmp	r3, #2
 8010984:	d022      	beq.n	80109cc <__gethex+0x2a0>
 8010986:	2b03      	cmp	r3, #3
 8010988:	d024      	beq.n	80109d4 <__gethex+0x2a8>
 801098a:	2b01      	cmp	r3, #1
 801098c:	d115      	bne.n	80109ba <__gethex+0x28e>
 801098e:	42ae      	cmp	r6, r5
 8010990:	d113      	bne.n	80109ba <__gethex+0x28e>
 8010992:	2e01      	cmp	r6, #1
 8010994:	d10b      	bne.n	80109ae <__gethex+0x282>
 8010996:	9a02      	ldr	r2, [sp, #8]
 8010998:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801099c:	6013      	str	r3, [r2, #0]
 801099e:	2301      	movs	r3, #1
 80109a0:	6123      	str	r3, [r4, #16]
 80109a2:	f8ca 3000 	str.w	r3, [sl]
 80109a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109a8:	2562      	movs	r5, #98	@ 0x62
 80109aa:	601c      	str	r4, [r3, #0]
 80109ac:	e73a      	b.n	8010824 <__gethex+0xf8>
 80109ae:	1e71      	subs	r1, r6, #1
 80109b0:	4620      	mov	r0, r4
 80109b2:	f000 fe28 	bl	8011606 <__any_on>
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d1ed      	bne.n	8010996 <__gethex+0x26a>
 80109ba:	9801      	ldr	r0, [sp, #4]
 80109bc:	4621      	mov	r1, r4
 80109be:	f000 f9d9 	bl	8010d74 <_Bfree>
 80109c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109c4:	2300      	movs	r3, #0
 80109c6:	6013      	str	r3, [r2, #0]
 80109c8:	2550      	movs	r5, #80	@ 0x50
 80109ca:	e72b      	b.n	8010824 <__gethex+0xf8>
 80109cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d1f3      	bne.n	80109ba <__gethex+0x28e>
 80109d2:	e7e0      	b.n	8010996 <__gethex+0x26a>
 80109d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1dd      	bne.n	8010996 <__gethex+0x26a>
 80109da:	e7ee      	b.n	80109ba <__gethex+0x28e>
 80109dc:	08012b60 	.word	0x08012b60
 80109e0:	08012c1d 	.word	0x08012c1d
 80109e4:	08012c2e 	.word	0x08012c2e
 80109e8:	1e6f      	subs	r7, r5, #1
 80109ea:	f1b9 0f00 	cmp.w	r9, #0
 80109ee:	d130      	bne.n	8010a52 <__gethex+0x326>
 80109f0:	b127      	cbz	r7, 80109fc <__gethex+0x2d0>
 80109f2:	4639      	mov	r1, r7
 80109f4:	4620      	mov	r0, r4
 80109f6:	f000 fe06 	bl	8011606 <__any_on>
 80109fa:	4681      	mov	r9, r0
 80109fc:	117a      	asrs	r2, r7, #5
 80109fe:	2301      	movs	r3, #1
 8010a00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010a04:	f007 071f 	and.w	r7, r7, #31
 8010a08:	40bb      	lsls	r3, r7
 8010a0a:	4213      	tst	r3, r2
 8010a0c:	4629      	mov	r1, r5
 8010a0e:	4620      	mov	r0, r4
 8010a10:	bf18      	it	ne
 8010a12:	f049 0902 	orrne.w	r9, r9, #2
 8010a16:	f7ff fe21 	bl	801065c <rshift>
 8010a1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010a1e:	1b76      	subs	r6, r6, r5
 8010a20:	2502      	movs	r5, #2
 8010a22:	f1b9 0f00 	cmp.w	r9, #0
 8010a26:	d047      	beq.n	8010ab8 <__gethex+0x38c>
 8010a28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a2c:	2b02      	cmp	r3, #2
 8010a2e:	d015      	beq.n	8010a5c <__gethex+0x330>
 8010a30:	2b03      	cmp	r3, #3
 8010a32:	d017      	beq.n	8010a64 <__gethex+0x338>
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d109      	bne.n	8010a4c <__gethex+0x320>
 8010a38:	f019 0f02 	tst.w	r9, #2
 8010a3c:	d006      	beq.n	8010a4c <__gethex+0x320>
 8010a3e:	f8da 3000 	ldr.w	r3, [sl]
 8010a42:	ea49 0903 	orr.w	r9, r9, r3
 8010a46:	f019 0f01 	tst.w	r9, #1
 8010a4a:	d10e      	bne.n	8010a6a <__gethex+0x33e>
 8010a4c:	f045 0510 	orr.w	r5, r5, #16
 8010a50:	e032      	b.n	8010ab8 <__gethex+0x38c>
 8010a52:	f04f 0901 	mov.w	r9, #1
 8010a56:	e7d1      	b.n	80109fc <__gethex+0x2d0>
 8010a58:	2501      	movs	r5, #1
 8010a5a:	e7e2      	b.n	8010a22 <__gethex+0x2f6>
 8010a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a5e:	f1c3 0301 	rsb	r3, r3, #1
 8010a62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d0f0      	beq.n	8010a4c <__gethex+0x320>
 8010a6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010a6e:	f104 0314 	add.w	r3, r4, #20
 8010a72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010a76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010a7a:	f04f 0c00 	mov.w	ip, #0
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a88:	d01b      	beq.n	8010ac2 <__gethex+0x396>
 8010a8a:	3201      	adds	r2, #1
 8010a8c:	6002      	str	r2, [r0, #0]
 8010a8e:	2d02      	cmp	r5, #2
 8010a90:	f104 0314 	add.w	r3, r4, #20
 8010a94:	d13c      	bne.n	8010b10 <__gethex+0x3e4>
 8010a96:	f8d8 2000 	ldr.w	r2, [r8]
 8010a9a:	3a01      	subs	r2, #1
 8010a9c:	42b2      	cmp	r2, r6
 8010a9e:	d109      	bne.n	8010ab4 <__gethex+0x388>
 8010aa0:	1171      	asrs	r1, r6, #5
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010aa8:	f006 061f 	and.w	r6, r6, #31
 8010aac:	fa02 f606 	lsl.w	r6, r2, r6
 8010ab0:	421e      	tst	r6, r3
 8010ab2:	d13a      	bne.n	8010b2a <__gethex+0x3fe>
 8010ab4:	f045 0520 	orr.w	r5, r5, #32
 8010ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010aba:	601c      	str	r4, [r3, #0]
 8010abc:	9b02      	ldr	r3, [sp, #8]
 8010abe:	601f      	str	r7, [r3, #0]
 8010ac0:	e6b0      	b.n	8010824 <__gethex+0xf8>
 8010ac2:	4299      	cmp	r1, r3
 8010ac4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ac8:	d8d9      	bhi.n	8010a7e <__gethex+0x352>
 8010aca:	68a3      	ldr	r3, [r4, #8]
 8010acc:	459b      	cmp	fp, r3
 8010ace:	db17      	blt.n	8010b00 <__gethex+0x3d4>
 8010ad0:	6861      	ldr	r1, [r4, #4]
 8010ad2:	9801      	ldr	r0, [sp, #4]
 8010ad4:	3101      	adds	r1, #1
 8010ad6:	f000 f90d 	bl	8010cf4 <_Balloc>
 8010ada:	4681      	mov	r9, r0
 8010adc:	b918      	cbnz	r0, 8010ae6 <__gethex+0x3ba>
 8010ade:	4b1a      	ldr	r3, [pc, #104]	@ (8010b48 <__gethex+0x41c>)
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	2184      	movs	r1, #132	@ 0x84
 8010ae4:	e6c5      	b.n	8010872 <__gethex+0x146>
 8010ae6:	6922      	ldr	r2, [r4, #16]
 8010ae8:	3202      	adds	r2, #2
 8010aea:	f104 010c 	add.w	r1, r4, #12
 8010aee:	0092      	lsls	r2, r2, #2
 8010af0:	300c      	adds	r0, #12
 8010af2:	f7fe fef2 	bl	800f8da <memcpy>
 8010af6:	4621      	mov	r1, r4
 8010af8:	9801      	ldr	r0, [sp, #4]
 8010afa:	f000 f93b 	bl	8010d74 <_Bfree>
 8010afe:	464c      	mov	r4, r9
 8010b00:	6923      	ldr	r3, [r4, #16]
 8010b02:	1c5a      	adds	r2, r3, #1
 8010b04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010b08:	6122      	str	r2, [r4, #16]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	615a      	str	r2, [r3, #20]
 8010b0e:	e7be      	b.n	8010a8e <__gethex+0x362>
 8010b10:	6922      	ldr	r2, [r4, #16]
 8010b12:	455a      	cmp	r2, fp
 8010b14:	dd0b      	ble.n	8010b2e <__gethex+0x402>
 8010b16:	2101      	movs	r1, #1
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f7ff fd9f 	bl	801065c <rshift>
 8010b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b22:	3701      	adds	r7, #1
 8010b24:	42bb      	cmp	r3, r7
 8010b26:	f6ff aee0 	blt.w	80108ea <__gethex+0x1be>
 8010b2a:	2501      	movs	r5, #1
 8010b2c:	e7c2      	b.n	8010ab4 <__gethex+0x388>
 8010b2e:	f016 061f 	ands.w	r6, r6, #31
 8010b32:	d0fa      	beq.n	8010b2a <__gethex+0x3fe>
 8010b34:	4453      	add	r3, sl
 8010b36:	f1c6 0620 	rsb	r6, r6, #32
 8010b3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010b3e:	f000 f9cb 	bl	8010ed8 <__hi0bits>
 8010b42:	42b0      	cmp	r0, r6
 8010b44:	dbe7      	blt.n	8010b16 <__gethex+0x3ea>
 8010b46:	e7f0      	b.n	8010b2a <__gethex+0x3fe>
 8010b48:	08012c1d 	.word	0x08012c1d

08010b4c <L_shift>:
 8010b4c:	f1c2 0208 	rsb	r2, r2, #8
 8010b50:	0092      	lsls	r2, r2, #2
 8010b52:	b570      	push	{r4, r5, r6, lr}
 8010b54:	f1c2 0620 	rsb	r6, r2, #32
 8010b58:	6843      	ldr	r3, [r0, #4]
 8010b5a:	6804      	ldr	r4, [r0, #0]
 8010b5c:	fa03 f506 	lsl.w	r5, r3, r6
 8010b60:	432c      	orrs	r4, r5
 8010b62:	40d3      	lsrs	r3, r2
 8010b64:	6004      	str	r4, [r0, #0]
 8010b66:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b6a:	4288      	cmp	r0, r1
 8010b6c:	d3f4      	bcc.n	8010b58 <L_shift+0xc>
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}

08010b70 <__match>:
 8010b70:	b530      	push	{r4, r5, lr}
 8010b72:	6803      	ldr	r3, [r0, #0]
 8010b74:	3301      	adds	r3, #1
 8010b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b7a:	b914      	cbnz	r4, 8010b82 <__match+0x12>
 8010b7c:	6003      	str	r3, [r0, #0]
 8010b7e:	2001      	movs	r0, #1
 8010b80:	bd30      	pop	{r4, r5, pc}
 8010b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010b8a:	2d19      	cmp	r5, #25
 8010b8c:	bf98      	it	ls
 8010b8e:	3220      	addls	r2, #32
 8010b90:	42a2      	cmp	r2, r4
 8010b92:	d0f0      	beq.n	8010b76 <__match+0x6>
 8010b94:	2000      	movs	r0, #0
 8010b96:	e7f3      	b.n	8010b80 <__match+0x10>

08010b98 <__hexnan>:
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	680b      	ldr	r3, [r1, #0]
 8010b9e:	6801      	ldr	r1, [r0, #0]
 8010ba0:	115e      	asrs	r6, r3, #5
 8010ba2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ba6:	f013 031f 	ands.w	r3, r3, #31
 8010baa:	b087      	sub	sp, #28
 8010bac:	bf18      	it	ne
 8010bae:	3604      	addne	r6, #4
 8010bb0:	2500      	movs	r5, #0
 8010bb2:	1f37      	subs	r7, r6, #4
 8010bb4:	4682      	mov	sl, r0
 8010bb6:	4690      	mov	r8, r2
 8010bb8:	9301      	str	r3, [sp, #4]
 8010bba:	f846 5c04 	str.w	r5, [r6, #-4]
 8010bbe:	46b9      	mov	r9, r7
 8010bc0:	463c      	mov	r4, r7
 8010bc2:	9502      	str	r5, [sp, #8]
 8010bc4:	46ab      	mov	fp, r5
 8010bc6:	784a      	ldrb	r2, [r1, #1]
 8010bc8:	1c4b      	adds	r3, r1, #1
 8010bca:	9303      	str	r3, [sp, #12]
 8010bcc:	b342      	cbz	r2, 8010c20 <__hexnan+0x88>
 8010bce:	4610      	mov	r0, r2
 8010bd0:	9105      	str	r1, [sp, #20]
 8010bd2:	9204      	str	r2, [sp, #16]
 8010bd4:	f7ff fd94 	bl	8010700 <__hexdig_fun>
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d151      	bne.n	8010c80 <__hexnan+0xe8>
 8010bdc:	9a04      	ldr	r2, [sp, #16]
 8010bde:	9905      	ldr	r1, [sp, #20]
 8010be0:	2a20      	cmp	r2, #32
 8010be2:	d818      	bhi.n	8010c16 <__hexnan+0x7e>
 8010be4:	9b02      	ldr	r3, [sp, #8]
 8010be6:	459b      	cmp	fp, r3
 8010be8:	dd13      	ble.n	8010c12 <__hexnan+0x7a>
 8010bea:	454c      	cmp	r4, r9
 8010bec:	d206      	bcs.n	8010bfc <__hexnan+0x64>
 8010bee:	2d07      	cmp	r5, #7
 8010bf0:	dc04      	bgt.n	8010bfc <__hexnan+0x64>
 8010bf2:	462a      	mov	r2, r5
 8010bf4:	4649      	mov	r1, r9
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f7ff ffa8 	bl	8010b4c <L_shift>
 8010bfc:	4544      	cmp	r4, r8
 8010bfe:	d952      	bls.n	8010ca6 <__hexnan+0x10e>
 8010c00:	2300      	movs	r3, #0
 8010c02:	f1a4 0904 	sub.w	r9, r4, #4
 8010c06:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c0a:	f8cd b008 	str.w	fp, [sp, #8]
 8010c0e:	464c      	mov	r4, r9
 8010c10:	461d      	mov	r5, r3
 8010c12:	9903      	ldr	r1, [sp, #12]
 8010c14:	e7d7      	b.n	8010bc6 <__hexnan+0x2e>
 8010c16:	2a29      	cmp	r2, #41	@ 0x29
 8010c18:	d157      	bne.n	8010cca <__hexnan+0x132>
 8010c1a:	3102      	adds	r1, #2
 8010c1c:	f8ca 1000 	str.w	r1, [sl]
 8010c20:	f1bb 0f00 	cmp.w	fp, #0
 8010c24:	d051      	beq.n	8010cca <__hexnan+0x132>
 8010c26:	454c      	cmp	r4, r9
 8010c28:	d206      	bcs.n	8010c38 <__hexnan+0xa0>
 8010c2a:	2d07      	cmp	r5, #7
 8010c2c:	dc04      	bgt.n	8010c38 <__hexnan+0xa0>
 8010c2e:	462a      	mov	r2, r5
 8010c30:	4649      	mov	r1, r9
 8010c32:	4620      	mov	r0, r4
 8010c34:	f7ff ff8a 	bl	8010b4c <L_shift>
 8010c38:	4544      	cmp	r4, r8
 8010c3a:	d936      	bls.n	8010caa <__hexnan+0x112>
 8010c3c:	f1a8 0204 	sub.w	r2, r8, #4
 8010c40:	4623      	mov	r3, r4
 8010c42:	f853 1b04 	ldr.w	r1, [r3], #4
 8010c46:	f842 1f04 	str.w	r1, [r2, #4]!
 8010c4a:	429f      	cmp	r7, r3
 8010c4c:	d2f9      	bcs.n	8010c42 <__hexnan+0xaa>
 8010c4e:	1b3b      	subs	r3, r7, r4
 8010c50:	f023 0303 	bic.w	r3, r3, #3
 8010c54:	3304      	adds	r3, #4
 8010c56:	3401      	adds	r4, #1
 8010c58:	3e03      	subs	r6, #3
 8010c5a:	42b4      	cmp	r4, r6
 8010c5c:	bf88      	it	hi
 8010c5e:	2304      	movhi	r3, #4
 8010c60:	4443      	add	r3, r8
 8010c62:	2200      	movs	r2, #0
 8010c64:	f843 2b04 	str.w	r2, [r3], #4
 8010c68:	429f      	cmp	r7, r3
 8010c6a:	d2fb      	bcs.n	8010c64 <__hexnan+0xcc>
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	b91b      	cbnz	r3, 8010c78 <__hexnan+0xe0>
 8010c70:	4547      	cmp	r7, r8
 8010c72:	d128      	bne.n	8010cc6 <__hexnan+0x12e>
 8010c74:	2301      	movs	r3, #1
 8010c76:	603b      	str	r3, [r7, #0]
 8010c78:	2005      	movs	r0, #5
 8010c7a:	b007      	add	sp, #28
 8010c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c80:	3501      	adds	r5, #1
 8010c82:	2d08      	cmp	r5, #8
 8010c84:	f10b 0b01 	add.w	fp, fp, #1
 8010c88:	dd06      	ble.n	8010c98 <__hexnan+0x100>
 8010c8a:	4544      	cmp	r4, r8
 8010c8c:	d9c1      	bls.n	8010c12 <__hexnan+0x7a>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c94:	2501      	movs	r5, #1
 8010c96:	3c04      	subs	r4, #4
 8010c98:	6822      	ldr	r2, [r4, #0]
 8010c9a:	f000 000f 	and.w	r0, r0, #15
 8010c9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010ca2:	6020      	str	r0, [r4, #0]
 8010ca4:	e7b5      	b.n	8010c12 <__hexnan+0x7a>
 8010ca6:	2508      	movs	r5, #8
 8010ca8:	e7b3      	b.n	8010c12 <__hexnan+0x7a>
 8010caa:	9b01      	ldr	r3, [sp, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d0dd      	beq.n	8010c6c <__hexnan+0xd4>
 8010cb0:	f1c3 0320 	rsb	r3, r3, #32
 8010cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8010cb8:	40da      	lsrs	r2, r3
 8010cba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010cbe:	4013      	ands	r3, r2
 8010cc0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010cc4:	e7d2      	b.n	8010c6c <__hexnan+0xd4>
 8010cc6:	3f04      	subs	r7, #4
 8010cc8:	e7d0      	b.n	8010c6c <__hexnan+0xd4>
 8010cca:	2004      	movs	r0, #4
 8010ccc:	e7d5      	b.n	8010c7a <__hexnan+0xe2>

08010cce <__ascii_mbtowc>:
 8010cce:	b082      	sub	sp, #8
 8010cd0:	b901      	cbnz	r1, 8010cd4 <__ascii_mbtowc+0x6>
 8010cd2:	a901      	add	r1, sp, #4
 8010cd4:	b142      	cbz	r2, 8010ce8 <__ascii_mbtowc+0x1a>
 8010cd6:	b14b      	cbz	r3, 8010cec <__ascii_mbtowc+0x1e>
 8010cd8:	7813      	ldrb	r3, [r2, #0]
 8010cda:	600b      	str	r3, [r1, #0]
 8010cdc:	7812      	ldrb	r2, [r2, #0]
 8010cde:	1e10      	subs	r0, r2, #0
 8010ce0:	bf18      	it	ne
 8010ce2:	2001      	movne	r0, #1
 8010ce4:	b002      	add	sp, #8
 8010ce6:	4770      	bx	lr
 8010ce8:	4610      	mov	r0, r2
 8010cea:	e7fb      	b.n	8010ce4 <__ascii_mbtowc+0x16>
 8010cec:	f06f 0001 	mvn.w	r0, #1
 8010cf0:	e7f8      	b.n	8010ce4 <__ascii_mbtowc+0x16>
	...

08010cf4 <_Balloc>:
 8010cf4:	b570      	push	{r4, r5, r6, lr}
 8010cf6:	69c6      	ldr	r6, [r0, #28]
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	b976      	cbnz	r6, 8010d1c <_Balloc+0x28>
 8010cfe:	2010      	movs	r0, #16
 8010d00:	f7fc fdc2 	bl	800d888 <malloc>
 8010d04:	4602      	mov	r2, r0
 8010d06:	61e0      	str	r0, [r4, #28]
 8010d08:	b920      	cbnz	r0, 8010d14 <_Balloc+0x20>
 8010d0a:	4b18      	ldr	r3, [pc, #96]	@ (8010d6c <_Balloc+0x78>)
 8010d0c:	4818      	ldr	r0, [pc, #96]	@ (8010d70 <_Balloc+0x7c>)
 8010d0e:	216b      	movs	r1, #107	@ 0x6b
 8010d10:	f001 fac6 	bl	80122a0 <__assert_func>
 8010d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d18:	6006      	str	r6, [r0, #0]
 8010d1a:	60c6      	str	r6, [r0, #12]
 8010d1c:	69e6      	ldr	r6, [r4, #28]
 8010d1e:	68f3      	ldr	r3, [r6, #12]
 8010d20:	b183      	cbz	r3, 8010d44 <_Balloc+0x50>
 8010d22:	69e3      	ldr	r3, [r4, #28]
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d2a:	b9b8      	cbnz	r0, 8010d5c <_Balloc+0x68>
 8010d2c:	2101      	movs	r1, #1
 8010d2e:	fa01 f605 	lsl.w	r6, r1, r5
 8010d32:	1d72      	adds	r2, r6, #5
 8010d34:	0092      	lsls	r2, r2, #2
 8010d36:	4620      	mov	r0, r4
 8010d38:	f001 fad0 	bl	80122dc <_calloc_r>
 8010d3c:	b160      	cbz	r0, 8010d58 <_Balloc+0x64>
 8010d3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d42:	e00e      	b.n	8010d62 <_Balloc+0x6e>
 8010d44:	2221      	movs	r2, #33	@ 0x21
 8010d46:	2104      	movs	r1, #4
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f001 fac7 	bl	80122dc <_calloc_r>
 8010d4e:	69e3      	ldr	r3, [r4, #28]
 8010d50:	60f0      	str	r0, [r6, #12]
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1e4      	bne.n	8010d22 <_Balloc+0x2e>
 8010d58:	2000      	movs	r0, #0
 8010d5a:	bd70      	pop	{r4, r5, r6, pc}
 8010d5c:	6802      	ldr	r2, [r0, #0]
 8010d5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d62:	2300      	movs	r3, #0
 8010d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d68:	e7f7      	b.n	8010d5a <_Balloc+0x66>
 8010d6a:	bf00      	nop
 8010d6c:	08012bae 	.word	0x08012bae
 8010d70:	08012c8e 	.word	0x08012c8e

08010d74 <_Bfree>:
 8010d74:	b570      	push	{r4, r5, r6, lr}
 8010d76:	69c6      	ldr	r6, [r0, #28]
 8010d78:	4605      	mov	r5, r0
 8010d7a:	460c      	mov	r4, r1
 8010d7c:	b976      	cbnz	r6, 8010d9c <_Bfree+0x28>
 8010d7e:	2010      	movs	r0, #16
 8010d80:	f7fc fd82 	bl	800d888 <malloc>
 8010d84:	4602      	mov	r2, r0
 8010d86:	61e8      	str	r0, [r5, #28]
 8010d88:	b920      	cbnz	r0, 8010d94 <_Bfree+0x20>
 8010d8a:	4b09      	ldr	r3, [pc, #36]	@ (8010db0 <_Bfree+0x3c>)
 8010d8c:	4809      	ldr	r0, [pc, #36]	@ (8010db4 <_Bfree+0x40>)
 8010d8e:	218f      	movs	r1, #143	@ 0x8f
 8010d90:	f001 fa86 	bl	80122a0 <__assert_func>
 8010d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d98:	6006      	str	r6, [r0, #0]
 8010d9a:	60c6      	str	r6, [r0, #12]
 8010d9c:	b13c      	cbz	r4, 8010dae <_Bfree+0x3a>
 8010d9e:	69eb      	ldr	r3, [r5, #28]
 8010da0:	6862      	ldr	r2, [r4, #4]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010da8:	6021      	str	r1, [r4, #0]
 8010daa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
 8010db0:	08012bae 	.word	0x08012bae
 8010db4:	08012c8e 	.word	0x08012c8e

08010db8 <__multadd>:
 8010db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbc:	690d      	ldr	r5, [r1, #16]
 8010dbe:	4607      	mov	r7, r0
 8010dc0:	460c      	mov	r4, r1
 8010dc2:	461e      	mov	r6, r3
 8010dc4:	f101 0c14 	add.w	ip, r1, #20
 8010dc8:	2000      	movs	r0, #0
 8010dca:	f8dc 3000 	ldr.w	r3, [ip]
 8010dce:	b299      	uxth	r1, r3
 8010dd0:	fb02 6101 	mla	r1, r2, r1, r6
 8010dd4:	0c1e      	lsrs	r6, r3, #16
 8010dd6:	0c0b      	lsrs	r3, r1, #16
 8010dd8:	fb02 3306 	mla	r3, r2, r6, r3
 8010ddc:	b289      	uxth	r1, r1
 8010dde:	3001      	adds	r0, #1
 8010de0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010de4:	4285      	cmp	r5, r0
 8010de6:	f84c 1b04 	str.w	r1, [ip], #4
 8010dea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010dee:	dcec      	bgt.n	8010dca <__multadd+0x12>
 8010df0:	b30e      	cbz	r6, 8010e36 <__multadd+0x7e>
 8010df2:	68a3      	ldr	r3, [r4, #8]
 8010df4:	42ab      	cmp	r3, r5
 8010df6:	dc19      	bgt.n	8010e2c <__multadd+0x74>
 8010df8:	6861      	ldr	r1, [r4, #4]
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	3101      	adds	r1, #1
 8010dfe:	f7ff ff79 	bl	8010cf4 <_Balloc>
 8010e02:	4680      	mov	r8, r0
 8010e04:	b928      	cbnz	r0, 8010e12 <__multadd+0x5a>
 8010e06:	4602      	mov	r2, r0
 8010e08:	4b0c      	ldr	r3, [pc, #48]	@ (8010e3c <__multadd+0x84>)
 8010e0a:	480d      	ldr	r0, [pc, #52]	@ (8010e40 <__multadd+0x88>)
 8010e0c:	21ba      	movs	r1, #186	@ 0xba
 8010e0e:	f001 fa47 	bl	80122a0 <__assert_func>
 8010e12:	6922      	ldr	r2, [r4, #16]
 8010e14:	3202      	adds	r2, #2
 8010e16:	f104 010c 	add.w	r1, r4, #12
 8010e1a:	0092      	lsls	r2, r2, #2
 8010e1c:	300c      	adds	r0, #12
 8010e1e:	f7fe fd5c 	bl	800f8da <memcpy>
 8010e22:	4621      	mov	r1, r4
 8010e24:	4638      	mov	r0, r7
 8010e26:	f7ff ffa5 	bl	8010d74 <_Bfree>
 8010e2a:	4644      	mov	r4, r8
 8010e2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e30:	3501      	adds	r5, #1
 8010e32:	615e      	str	r6, [r3, #20]
 8010e34:	6125      	str	r5, [r4, #16]
 8010e36:	4620      	mov	r0, r4
 8010e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e3c:	08012c1d 	.word	0x08012c1d
 8010e40:	08012c8e 	.word	0x08012c8e

08010e44 <__s2b>:
 8010e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e48:	460c      	mov	r4, r1
 8010e4a:	4615      	mov	r5, r2
 8010e4c:	461f      	mov	r7, r3
 8010e4e:	2209      	movs	r2, #9
 8010e50:	3308      	adds	r3, #8
 8010e52:	4606      	mov	r6, r0
 8010e54:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e58:	2100      	movs	r1, #0
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	db09      	blt.n	8010e74 <__s2b+0x30>
 8010e60:	4630      	mov	r0, r6
 8010e62:	f7ff ff47 	bl	8010cf4 <_Balloc>
 8010e66:	b940      	cbnz	r0, 8010e7a <__s2b+0x36>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	4b19      	ldr	r3, [pc, #100]	@ (8010ed0 <__s2b+0x8c>)
 8010e6c:	4819      	ldr	r0, [pc, #100]	@ (8010ed4 <__s2b+0x90>)
 8010e6e:	21d3      	movs	r1, #211	@ 0xd3
 8010e70:	f001 fa16 	bl	80122a0 <__assert_func>
 8010e74:	0052      	lsls	r2, r2, #1
 8010e76:	3101      	adds	r1, #1
 8010e78:	e7f0      	b.n	8010e5c <__s2b+0x18>
 8010e7a:	9b08      	ldr	r3, [sp, #32]
 8010e7c:	6143      	str	r3, [r0, #20]
 8010e7e:	2d09      	cmp	r5, #9
 8010e80:	f04f 0301 	mov.w	r3, #1
 8010e84:	6103      	str	r3, [r0, #16]
 8010e86:	dd16      	ble.n	8010eb6 <__s2b+0x72>
 8010e88:	f104 0909 	add.w	r9, r4, #9
 8010e8c:	46c8      	mov	r8, r9
 8010e8e:	442c      	add	r4, r5
 8010e90:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010e94:	4601      	mov	r1, r0
 8010e96:	3b30      	subs	r3, #48	@ 0x30
 8010e98:	220a      	movs	r2, #10
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7ff ff8c 	bl	8010db8 <__multadd>
 8010ea0:	45a0      	cmp	r8, r4
 8010ea2:	d1f5      	bne.n	8010e90 <__s2b+0x4c>
 8010ea4:	f1a5 0408 	sub.w	r4, r5, #8
 8010ea8:	444c      	add	r4, r9
 8010eaa:	1b2d      	subs	r5, r5, r4
 8010eac:	1963      	adds	r3, r4, r5
 8010eae:	42bb      	cmp	r3, r7
 8010eb0:	db04      	blt.n	8010ebc <__s2b+0x78>
 8010eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eb6:	340a      	adds	r4, #10
 8010eb8:	2509      	movs	r5, #9
 8010eba:	e7f6      	b.n	8010eaa <__s2b+0x66>
 8010ebc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010ec0:	4601      	mov	r1, r0
 8010ec2:	3b30      	subs	r3, #48	@ 0x30
 8010ec4:	220a      	movs	r2, #10
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	f7ff ff76 	bl	8010db8 <__multadd>
 8010ecc:	e7ee      	b.n	8010eac <__s2b+0x68>
 8010ece:	bf00      	nop
 8010ed0:	08012c1d 	.word	0x08012c1d
 8010ed4:	08012c8e 	.word	0x08012c8e

08010ed8 <__hi0bits>:
 8010ed8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010edc:	4603      	mov	r3, r0
 8010ede:	bf36      	itet	cc
 8010ee0:	0403      	lslcc	r3, r0, #16
 8010ee2:	2000      	movcs	r0, #0
 8010ee4:	2010      	movcc	r0, #16
 8010ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010eea:	bf3c      	itt	cc
 8010eec:	021b      	lslcc	r3, r3, #8
 8010eee:	3008      	addcc	r0, #8
 8010ef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ef4:	bf3c      	itt	cc
 8010ef6:	011b      	lslcc	r3, r3, #4
 8010ef8:	3004      	addcc	r0, #4
 8010efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010efe:	bf3c      	itt	cc
 8010f00:	009b      	lslcc	r3, r3, #2
 8010f02:	3002      	addcc	r0, #2
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	db05      	blt.n	8010f14 <__hi0bits+0x3c>
 8010f08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f0c:	f100 0001 	add.w	r0, r0, #1
 8010f10:	bf08      	it	eq
 8010f12:	2020      	moveq	r0, #32
 8010f14:	4770      	bx	lr

08010f16 <__lo0bits>:
 8010f16:	6803      	ldr	r3, [r0, #0]
 8010f18:	4602      	mov	r2, r0
 8010f1a:	f013 0007 	ands.w	r0, r3, #7
 8010f1e:	d00b      	beq.n	8010f38 <__lo0bits+0x22>
 8010f20:	07d9      	lsls	r1, r3, #31
 8010f22:	d421      	bmi.n	8010f68 <__lo0bits+0x52>
 8010f24:	0798      	lsls	r0, r3, #30
 8010f26:	bf49      	itett	mi
 8010f28:	085b      	lsrmi	r3, r3, #1
 8010f2a:	089b      	lsrpl	r3, r3, #2
 8010f2c:	2001      	movmi	r0, #1
 8010f2e:	6013      	strmi	r3, [r2, #0]
 8010f30:	bf5c      	itt	pl
 8010f32:	6013      	strpl	r3, [r2, #0]
 8010f34:	2002      	movpl	r0, #2
 8010f36:	4770      	bx	lr
 8010f38:	b299      	uxth	r1, r3
 8010f3a:	b909      	cbnz	r1, 8010f40 <__lo0bits+0x2a>
 8010f3c:	0c1b      	lsrs	r3, r3, #16
 8010f3e:	2010      	movs	r0, #16
 8010f40:	b2d9      	uxtb	r1, r3
 8010f42:	b909      	cbnz	r1, 8010f48 <__lo0bits+0x32>
 8010f44:	3008      	adds	r0, #8
 8010f46:	0a1b      	lsrs	r3, r3, #8
 8010f48:	0719      	lsls	r1, r3, #28
 8010f4a:	bf04      	itt	eq
 8010f4c:	091b      	lsreq	r3, r3, #4
 8010f4e:	3004      	addeq	r0, #4
 8010f50:	0799      	lsls	r1, r3, #30
 8010f52:	bf04      	itt	eq
 8010f54:	089b      	lsreq	r3, r3, #2
 8010f56:	3002      	addeq	r0, #2
 8010f58:	07d9      	lsls	r1, r3, #31
 8010f5a:	d403      	bmi.n	8010f64 <__lo0bits+0x4e>
 8010f5c:	085b      	lsrs	r3, r3, #1
 8010f5e:	f100 0001 	add.w	r0, r0, #1
 8010f62:	d003      	beq.n	8010f6c <__lo0bits+0x56>
 8010f64:	6013      	str	r3, [r2, #0]
 8010f66:	4770      	bx	lr
 8010f68:	2000      	movs	r0, #0
 8010f6a:	4770      	bx	lr
 8010f6c:	2020      	movs	r0, #32
 8010f6e:	4770      	bx	lr

08010f70 <__i2b>:
 8010f70:	b510      	push	{r4, lr}
 8010f72:	460c      	mov	r4, r1
 8010f74:	2101      	movs	r1, #1
 8010f76:	f7ff febd 	bl	8010cf4 <_Balloc>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	b928      	cbnz	r0, 8010f8a <__i2b+0x1a>
 8010f7e:	4b05      	ldr	r3, [pc, #20]	@ (8010f94 <__i2b+0x24>)
 8010f80:	4805      	ldr	r0, [pc, #20]	@ (8010f98 <__i2b+0x28>)
 8010f82:	f240 1145 	movw	r1, #325	@ 0x145
 8010f86:	f001 f98b 	bl	80122a0 <__assert_func>
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	6144      	str	r4, [r0, #20]
 8010f8e:	6103      	str	r3, [r0, #16]
 8010f90:	bd10      	pop	{r4, pc}
 8010f92:	bf00      	nop
 8010f94:	08012c1d 	.word	0x08012c1d
 8010f98:	08012c8e 	.word	0x08012c8e

08010f9c <__multiply>:
 8010f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	4617      	mov	r7, r2
 8010fa2:	690a      	ldr	r2, [r1, #16]
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	bfa8      	it	ge
 8010faa:	463b      	movge	r3, r7
 8010fac:	4689      	mov	r9, r1
 8010fae:	bfa4      	itt	ge
 8010fb0:	460f      	movge	r7, r1
 8010fb2:	4699      	movge	r9, r3
 8010fb4:	693d      	ldr	r5, [r7, #16]
 8010fb6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	eb05 060a 	add.w	r6, r5, sl
 8010fc2:	42b3      	cmp	r3, r6
 8010fc4:	b085      	sub	sp, #20
 8010fc6:	bfb8      	it	lt
 8010fc8:	3101      	addlt	r1, #1
 8010fca:	f7ff fe93 	bl	8010cf4 <_Balloc>
 8010fce:	b930      	cbnz	r0, 8010fde <__multiply+0x42>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	4b41      	ldr	r3, [pc, #260]	@ (80110d8 <__multiply+0x13c>)
 8010fd4:	4841      	ldr	r0, [pc, #260]	@ (80110dc <__multiply+0x140>)
 8010fd6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010fda:	f001 f961 	bl	80122a0 <__assert_func>
 8010fde:	f100 0414 	add.w	r4, r0, #20
 8010fe2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010fe6:	4623      	mov	r3, r4
 8010fe8:	2200      	movs	r2, #0
 8010fea:	4573      	cmp	r3, lr
 8010fec:	d320      	bcc.n	8011030 <__multiply+0x94>
 8010fee:	f107 0814 	add.w	r8, r7, #20
 8010ff2:	f109 0114 	add.w	r1, r9, #20
 8010ff6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010ffa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010ffe:	9302      	str	r3, [sp, #8]
 8011000:	1beb      	subs	r3, r5, r7
 8011002:	3b15      	subs	r3, #21
 8011004:	f023 0303 	bic.w	r3, r3, #3
 8011008:	3304      	adds	r3, #4
 801100a:	3715      	adds	r7, #21
 801100c:	42bd      	cmp	r5, r7
 801100e:	bf38      	it	cc
 8011010:	2304      	movcc	r3, #4
 8011012:	9301      	str	r3, [sp, #4]
 8011014:	9b02      	ldr	r3, [sp, #8]
 8011016:	9103      	str	r1, [sp, #12]
 8011018:	428b      	cmp	r3, r1
 801101a:	d80c      	bhi.n	8011036 <__multiply+0x9a>
 801101c:	2e00      	cmp	r6, #0
 801101e:	dd03      	ble.n	8011028 <__multiply+0x8c>
 8011020:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011024:	2b00      	cmp	r3, #0
 8011026:	d055      	beq.n	80110d4 <__multiply+0x138>
 8011028:	6106      	str	r6, [r0, #16]
 801102a:	b005      	add	sp, #20
 801102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011030:	f843 2b04 	str.w	r2, [r3], #4
 8011034:	e7d9      	b.n	8010fea <__multiply+0x4e>
 8011036:	f8b1 a000 	ldrh.w	sl, [r1]
 801103a:	f1ba 0f00 	cmp.w	sl, #0
 801103e:	d01f      	beq.n	8011080 <__multiply+0xe4>
 8011040:	46c4      	mov	ip, r8
 8011042:	46a1      	mov	r9, r4
 8011044:	2700      	movs	r7, #0
 8011046:	f85c 2b04 	ldr.w	r2, [ip], #4
 801104a:	f8d9 3000 	ldr.w	r3, [r9]
 801104e:	fa1f fb82 	uxth.w	fp, r2
 8011052:	b29b      	uxth	r3, r3
 8011054:	fb0a 330b 	mla	r3, sl, fp, r3
 8011058:	443b      	add	r3, r7
 801105a:	f8d9 7000 	ldr.w	r7, [r9]
 801105e:	0c12      	lsrs	r2, r2, #16
 8011060:	0c3f      	lsrs	r7, r7, #16
 8011062:	fb0a 7202 	mla	r2, sl, r2, r7
 8011066:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801106a:	b29b      	uxth	r3, r3
 801106c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011070:	4565      	cmp	r5, ip
 8011072:	f849 3b04 	str.w	r3, [r9], #4
 8011076:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801107a:	d8e4      	bhi.n	8011046 <__multiply+0xaa>
 801107c:	9b01      	ldr	r3, [sp, #4]
 801107e:	50e7      	str	r7, [r4, r3]
 8011080:	9b03      	ldr	r3, [sp, #12]
 8011082:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011086:	3104      	adds	r1, #4
 8011088:	f1b9 0f00 	cmp.w	r9, #0
 801108c:	d020      	beq.n	80110d0 <__multiply+0x134>
 801108e:	6823      	ldr	r3, [r4, #0]
 8011090:	4647      	mov	r7, r8
 8011092:	46a4      	mov	ip, r4
 8011094:	f04f 0a00 	mov.w	sl, #0
 8011098:	f8b7 b000 	ldrh.w	fp, [r7]
 801109c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80110a0:	fb09 220b 	mla	r2, r9, fp, r2
 80110a4:	4452      	add	r2, sl
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110ac:	f84c 3b04 	str.w	r3, [ip], #4
 80110b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80110b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80110bc:	fb09 330a 	mla	r3, r9, sl, r3
 80110c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80110c4:	42bd      	cmp	r5, r7
 80110c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110ca:	d8e5      	bhi.n	8011098 <__multiply+0xfc>
 80110cc:	9a01      	ldr	r2, [sp, #4]
 80110ce:	50a3      	str	r3, [r4, r2]
 80110d0:	3404      	adds	r4, #4
 80110d2:	e79f      	b.n	8011014 <__multiply+0x78>
 80110d4:	3e01      	subs	r6, #1
 80110d6:	e7a1      	b.n	801101c <__multiply+0x80>
 80110d8:	08012c1d 	.word	0x08012c1d
 80110dc:	08012c8e 	.word	0x08012c8e

080110e0 <__pow5mult>:
 80110e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110e4:	4615      	mov	r5, r2
 80110e6:	f012 0203 	ands.w	r2, r2, #3
 80110ea:	4607      	mov	r7, r0
 80110ec:	460e      	mov	r6, r1
 80110ee:	d007      	beq.n	8011100 <__pow5mult+0x20>
 80110f0:	4c25      	ldr	r4, [pc, #148]	@ (8011188 <__pow5mult+0xa8>)
 80110f2:	3a01      	subs	r2, #1
 80110f4:	2300      	movs	r3, #0
 80110f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110fa:	f7ff fe5d 	bl	8010db8 <__multadd>
 80110fe:	4606      	mov	r6, r0
 8011100:	10ad      	asrs	r5, r5, #2
 8011102:	d03d      	beq.n	8011180 <__pow5mult+0xa0>
 8011104:	69fc      	ldr	r4, [r7, #28]
 8011106:	b97c      	cbnz	r4, 8011128 <__pow5mult+0x48>
 8011108:	2010      	movs	r0, #16
 801110a:	f7fc fbbd 	bl	800d888 <malloc>
 801110e:	4602      	mov	r2, r0
 8011110:	61f8      	str	r0, [r7, #28]
 8011112:	b928      	cbnz	r0, 8011120 <__pow5mult+0x40>
 8011114:	4b1d      	ldr	r3, [pc, #116]	@ (801118c <__pow5mult+0xac>)
 8011116:	481e      	ldr	r0, [pc, #120]	@ (8011190 <__pow5mult+0xb0>)
 8011118:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801111c:	f001 f8c0 	bl	80122a0 <__assert_func>
 8011120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011124:	6004      	str	r4, [r0, #0]
 8011126:	60c4      	str	r4, [r0, #12]
 8011128:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801112c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011130:	b94c      	cbnz	r4, 8011146 <__pow5mult+0x66>
 8011132:	f240 2171 	movw	r1, #625	@ 0x271
 8011136:	4638      	mov	r0, r7
 8011138:	f7ff ff1a 	bl	8010f70 <__i2b>
 801113c:	2300      	movs	r3, #0
 801113e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011142:	4604      	mov	r4, r0
 8011144:	6003      	str	r3, [r0, #0]
 8011146:	f04f 0900 	mov.w	r9, #0
 801114a:	07eb      	lsls	r3, r5, #31
 801114c:	d50a      	bpl.n	8011164 <__pow5mult+0x84>
 801114e:	4631      	mov	r1, r6
 8011150:	4622      	mov	r2, r4
 8011152:	4638      	mov	r0, r7
 8011154:	f7ff ff22 	bl	8010f9c <__multiply>
 8011158:	4631      	mov	r1, r6
 801115a:	4680      	mov	r8, r0
 801115c:	4638      	mov	r0, r7
 801115e:	f7ff fe09 	bl	8010d74 <_Bfree>
 8011162:	4646      	mov	r6, r8
 8011164:	106d      	asrs	r5, r5, #1
 8011166:	d00b      	beq.n	8011180 <__pow5mult+0xa0>
 8011168:	6820      	ldr	r0, [r4, #0]
 801116a:	b938      	cbnz	r0, 801117c <__pow5mult+0x9c>
 801116c:	4622      	mov	r2, r4
 801116e:	4621      	mov	r1, r4
 8011170:	4638      	mov	r0, r7
 8011172:	f7ff ff13 	bl	8010f9c <__multiply>
 8011176:	6020      	str	r0, [r4, #0]
 8011178:	f8c0 9000 	str.w	r9, [r0]
 801117c:	4604      	mov	r4, r0
 801117e:	e7e4      	b.n	801114a <__pow5mult+0x6a>
 8011180:	4630      	mov	r0, r6
 8011182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011186:	bf00      	nop
 8011188:	08012ea4 	.word	0x08012ea4
 801118c:	08012bae 	.word	0x08012bae
 8011190:	08012c8e 	.word	0x08012c8e

08011194 <__lshift>:
 8011194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011198:	460c      	mov	r4, r1
 801119a:	6849      	ldr	r1, [r1, #4]
 801119c:	6923      	ldr	r3, [r4, #16]
 801119e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111a2:	68a3      	ldr	r3, [r4, #8]
 80111a4:	4607      	mov	r7, r0
 80111a6:	4691      	mov	r9, r2
 80111a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111ac:	f108 0601 	add.w	r6, r8, #1
 80111b0:	42b3      	cmp	r3, r6
 80111b2:	db0b      	blt.n	80111cc <__lshift+0x38>
 80111b4:	4638      	mov	r0, r7
 80111b6:	f7ff fd9d 	bl	8010cf4 <_Balloc>
 80111ba:	4605      	mov	r5, r0
 80111bc:	b948      	cbnz	r0, 80111d2 <__lshift+0x3e>
 80111be:	4602      	mov	r2, r0
 80111c0:	4b28      	ldr	r3, [pc, #160]	@ (8011264 <__lshift+0xd0>)
 80111c2:	4829      	ldr	r0, [pc, #164]	@ (8011268 <__lshift+0xd4>)
 80111c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80111c8:	f001 f86a 	bl	80122a0 <__assert_func>
 80111cc:	3101      	adds	r1, #1
 80111ce:	005b      	lsls	r3, r3, #1
 80111d0:	e7ee      	b.n	80111b0 <__lshift+0x1c>
 80111d2:	2300      	movs	r3, #0
 80111d4:	f100 0114 	add.w	r1, r0, #20
 80111d8:	f100 0210 	add.w	r2, r0, #16
 80111dc:	4618      	mov	r0, r3
 80111de:	4553      	cmp	r3, sl
 80111e0:	db33      	blt.n	801124a <__lshift+0xb6>
 80111e2:	6920      	ldr	r0, [r4, #16]
 80111e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111e8:	f104 0314 	add.w	r3, r4, #20
 80111ec:	f019 091f 	ands.w	r9, r9, #31
 80111f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111f8:	d02b      	beq.n	8011252 <__lshift+0xbe>
 80111fa:	f1c9 0e20 	rsb	lr, r9, #32
 80111fe:	468a      	mov	sl, r1
 8011200:	2200      	movs	r2, #0
 8011202:	6818      	ldr	r0, [r3, #0]
 8011204:	fa00 f009 	lsl.w	r0, r0, r9
 8011208:	4310      	orrs	r0, r2
 801120a:	f84a 0b04 	str.w	r0, [sl], #4
 801120e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011212:	459c      	cmp	ip, r3
 8011214:	fa22 f20e 	lsr.w	r2, r2, lr
 8011218:	d8f3      	bhi.n	8011202 <__lshift+0x6e>
 801121a:	ebac 0304 	sub.w	r3, ip, r4
 801121e:	3b15      	subs	r3, #21
 8011220:	f023 0303 	bic.w	r3, r3, #3
 8011224:	3304      	adds	r3, #4
 8011226:	f104 0015 	add.w	r0, r4, #21
 801122a:	4560      	cmp	r0, ip
 801122c:	bf88      	it	hi
 801122e:	2304      	movhi	r3, #4
 8011230:	50ca      	str	r2, [r1, r3]
 8011232:	b10a      	cbz	r2, 8011238 <__lshift+0xa4>
 8011234:	f108 0602 	add.w	r6, r8, #2
 8011238:	3e01      	subs	r6, #1
 801123a:	4638      	mov	r0, r7
 801123c:	612e      	str	r6, [r5, #16]
 801123e:	4621      	mov	r1, r4
 8011240:	f7ff fd98 	bl	8010d74 <_Bfree>
 8011244:	4628      	mov	r0, r5
 8011246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801124a:	f842 0f04 	str.w	r0, [r2, #4]!
 801124e:	3301      	adds	r3, #1
 8011250:	e7c5      	b.n	80111de <__lshift+0x4a>
 8011252:	3904      	subs	r1, #4
 8011254:	f853 2b04 	ldr.w	r2, [r3], #4
 8011258:	f841 2f04 	str.w	r2, [r1, #4]!
 801125c:	459c      	cmp	ip, r3
 801125e:	d8f9      	bhi.n	8011254 <__lshift+0xc0>
 8011260:	e7ea      	b.n	8011238 <__lshift+0xa4>
 8011262:	bf00      	nop
 8011264:	08012c1d 	.word	0x08012c1d
 8011268:	08012c8e 	.word	0x08012c8e

0801126c <__mcmp>:
 801126c:	690a      	ldr	r2, [r1, #16]
 801126e:	4603      	mov	r3, r0
 8011270:	6900      	ldr	r0, [r0, #16]
 8011272:	1a80      	subs	r0, r0, r2
 8011274:	b530      	push	{r4, r5, lr}
 8011276:	d10e      	bne.n	8011296 <__mcmp+0x2a>
 8011278:	3314      	adds	r3, #20
 801127a:	3114      	adds	r1, #20
 801127c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011280:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011284:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011288:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801128c:	4295      	cmp	r5, r2
 801128e:	d003      	beq.n	8011298 <__mcmp+0x2c>
 8011290:	d205      	bcs.n	801129e <__mcmp+0x32>
 8011292:	f04f 30ff 	mov.w	r0, #4294967295
 8011296:	bd30      	pop	{r4, r5, pc}
 8011298:	42a3      	cmp	r3, r4
 801129a:	d3f3      	bcc.n	8011284 <__mcmp+0x18>
 801129c:	e7fb      	b.n	8011296 <__mcmp+0x2a>
 801129e:	2001      	movs	r0, #1
 80112a0:	e7f9      	b.n	8011296 <__mcmp+0x2a>
	...

080112a4 <__mdiff>:
 80112a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a8:	4689      	mov	r9, r1
 80112aa:	4606      	mov	r6, r0
 80112ac:	4611      	mov	r1, r2
 80112ae:	4648      	mov	r0, r9
 80112b0:	4614      	mov	r4, r2
 80112b2:	f7ff ffdb 	bl	801126c <__mcmp>
 80112b6:	1e05      	subs	r5, r0, #0
 80112b8:	d112      	bne.n	80112e0 <__mdiff+0x3c>
 80112ba:	4629      	mov	r1, r5
 80112bc:	4630      	mov	r0, r6
 80112be:	f7ff fd19 	bl	8010cf4 <_Balloc>
 80112c2:	4602      	mov	r2, r0
 80112c4:	b928      	cbnz	r0, 80112d2 <__mdiff+0x2e>
 80112c6:	4b3f      	ldr	r3, [pc, #252]	@ (80113c4 <__mdiff+0x120>)
 80112c8:	f240 2137 	movw	r1, #567	@ 0x237
 80112cc:	483e      	ldr	r0, [pc, #248]	@ (80113c8 <__mdiff+0x124>)
 80112ce:	f000 ffe7 	bl	80122a0 <__assert_func>
 80112d2:	2301      	movs	r3, #1
 80112d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112d8:	4610      	mov	r0, r2
 80112da:	b003      	add	sp, #12
 80112dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e0:	bfbc      	itt	lt
 80112e2:	464b      	movlt	r3, r9
 80112e4:	46a1      	movlt	r9, r4
 80112e6:	4630      	mov	r0, r6
 80112e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80112ec:	bfba      	itte	lt
 80112ee:	461c      	movlt	r4, r3
 80112f0:	2501      	movlt	r5, #1
 80112f2:	2500      	movge	r5, #0
 80112f4:	f7ff fcfe 	bl	8010cf4 <_Balloc>
 80112f8:	4602      	mov	r2, r0
 80112fa:	b918      	cbnz	r0, 8011304 <__mdiff+0x60>
 80112fc:	4b31      	ldr	r3, [pc, #196]	@ (80113c4 <__mdiff+0x120>)
 80112fe:	f240 2145 	movw	r1, #581	@ 0x245
 8011302:	e7e3      	b.n	80112cc <__mdiff+0x28>
 8011304:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011308:	6926      	ldr	r6, [r4, #16]
 801130a:	60c5      	str	r5, [r0, #12]
 801130c:	f109 0310 	add.w	r3, r9, #16
 8011310:	f109 0514 	add.w	r5, r9, #20
 8011314:	f104 0e14 	add.w	lr, r4, #20
 8011318:	f100 0b14 	add.w	fp, r0, #20
 801131c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011320:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011324:	9301      	str	r3, [sp, #4]
 8011326:	46d9      	mov	r9, fp
 8011328:	f04f 0c00 	mov.w	ip, #0
 801132c:	9b01      	ldr	r3, [sp, #4]
 801132e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011332:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011336:	9301      	str	r3, [sp, #4]
 8011338:	fa1f f38a 	uxth.w	r3, sl
 801133c:	4619      	mov	r1, r3
 801133e:	b283      	uxth	r3, r0
 8011340:	1acb      	subs	r3, r1, r3
 8011342:	0c00      	lsrs	r0, r0, #16
 8011344:	4463      	add	r3, ip
 8011346:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801134a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801134e:	b29b      	uxth	r3, r3
 8011350:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011354:	4576      	cmp	r6, lr
 8011356:	f849 3b04 	str.w	r3, [r9], #4
 801135a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801135e:	d8e5      	bhi.n	801132c <__mdiff+0x88>
 8011360:	1b33      	subs	r3, r6, r4
 8011362:	3b15      	subs	r3, #21
 8011364:	f023 0303 	bic.w	r3, r3, #3
 8011368:	3415      	adds	r4, #21
 801136a:	3304      	adds	r3, #4
 801136c:	42a6      	cmp	r6, r4
 801136e:	bf38      	it	cc
 8011370:	2304      	movcc	r3, #4
 8011372:	441d      	add	r5, r3
 8011374:	445b      	add	r3, fp
 8011376:	461e      	mov	r6, r3
 8011378:	462c      	mov	r4, r5
 801137a:	4544      	cmp	r4, r8
 801137c:	d30e      	bcc.n	801139c <__mdiff+0xf8>
 801137e:	f108 0103 	add.w	r1, r8, #3
 8011382:	1b49      	subs	r1, r1, r5
 8011384:	f021 0103 	bic.w	r1, r1, #3
 8011388:	3d03      	subs	r5, #3
 801138a:	45a8      	cmp	r8, r5
 801138c:	bf38      	it	cc
 801138e:	2100      	movcc	r1, #0
 8011390:	440b      	add	r3, r1
 8011392:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011396:	b191      	cbz	r1, 80113be <__mdiff+0x11a>
 8011398:	6117      	str	r7, [r2, #16]
 801139a:	e79d      	b.n	80112d8 <__mdiff+0x34>
 801139c:	f854 1b04 	ldr.w	r1, [r4], #4
 80113a0:	46e6      	mov	lr, ip
 80113a2:	0c08      	lsrs	r0, r1, #16
 80113a4:	fa1c fc81 	uxtah	ip, ip, r1
 80113a8:	4471      	add	r1, lr
 80113aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80113ae:	b289      	uxth	r1, r1
 80113b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80113b4:	f846 1b04 	str.w	r1, [r6], #4
 80113b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113bc:	e7dd      	b.n	801137a <__mdiff+0xd6>
 80113be:	3f01      	subs	r7, #1
 80113c0:	e7e7      	b.n	8011392 <__mdiff+0xee>
 80113c2:	bf00      	nop
 80113c4:	08012c1d 	.word	0x08012c1d
 80113c8:	08012c8e 	.word	0x08012c8e

080113cc <__ulp>:
 80113cc:	b082      	sub	sp, #8
 80113ce:	ed8d 0b00 	vstr	d0, [sp]
 80113d2:	9a01      	ldr	r2, [sp, #4]
 80113d4:	4b0f      	ldr	r3, [pc, #60]	@ (8011414 <__ulp+0x48>)
 80113d6:	4013      	ands	r3, r2
 80113d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80113dc:	2b00      	cmp	r3, #0
 80113de:	dc08      	bgt.n	80113f2 <__ulp+0x26>
 80113e0:	425b      	negs	r3, r3
 80113e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80113e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80113ea:	da04      	bge.n	80113f6 <__ulp+0x2a>
 80113ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80113f0:	4113      	asrs	r3, r2
 80113f2:	2200      	movs	r2, #0
 80113f4:	e008      	b.n	8011408 <__ulp+0x3c>
 80113f6:	f1a2 0314 	sub.w	r3, r2, #20
 80113fa:	2b1e      	cmp	r3, #30
 80113fc:	bfda      	itte	le
 80113fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011402:	40da      	lsrle	r2, r3
 8011404:	2201      	movgt	r2, #1
 8011406:	2300      	movs	r3, #0
 8011408:	4619      	mov	r1, r3
 801140a:	4610      	mov	r0, r2
 801140c:	ec41 0b10 	vmov	d0, r0, r1
 8011410:	b002      	add	sp, #8
 8011412:	4770      	bx	lr
 8011414:	7ff00000 	.word	0x7ff00000

08011418 <__b2d>:
 8011418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801141c:	6906      	ldr	r6, [r0, #16]
 801141e:	f100 0814 	add.w	r8, r0, #20
 8011422:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011426:	1f37      	subs	r7, r6, #4
 8011428:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801142c:	4610      	mov	r0, r2
 801142e:	f7ff fd53 	bl	8010ed8 <__hi0bits>
 8011432:	f1c0 0320 	rsb	r3, r0, #32
 8011436:	280a      	cmp	r0, #10
 8011438:	600b      	str	r3, [r1, #0]
 801143a:	491b      	ldr	r1, [pc, #108]	@ (80114a8 <__b2d+0x90>)
 801143c:	dc15      	bgt.n	801146a <__b2d+0x52>
 801143e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011442:	fa22 f30c 	lsr.w	r3, r2, ip
 8011446:	45b8      	cmp	r8, r7
 8011448:	ea43 0501 	orr.w	r5, r3, r1
 801144c:	bf34      	ite	cc
 801144e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011452:	2300      	movcs	r3, #0
 8011454:	3015      	adds	r0, #21
 8011456:	fa02 f000 	lsl.w	r0, r2, r0
 801145a:	fa23 f30c 	lsr.w	r3, r3, ip
 801145e:	4303      	orrs	r3, r0
 8011460:	461c      	mov	r4, r3
 8011462:	ec45 4b10 	vmov	d0, r4, r5
 8011466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801146a:	45b8      	cmp	r8, r7
 801146c:	bf3a      	itte	cc
 801146e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011472:	f1a6 0708 	subcc.w	r7, r6, #8
 8011476:	2300      	movcs	r3, #0
 8011478:	380b      	subs	r0, #11
 801147a:	d012      	beq.n	80114a2 <__b2d+0x8a>
 801147c:	f1c0 0120 	rsb	r1, r0, #32
 8011480:	fa23 f401 	lsr.w	r4, r3, r1
 8011484:	4082      	lsls	r2, r0
 8011486:	4322      	orrs	r2, r4
 8011488:	4547      	cmp	r7, r8
 801148a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801148e:	bf8c      	ite	hi
 8011490:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011494:	2200      	movls	r2, #0
 8011496:	4083      	lsls	r3, r0
 8011498:	40ca      	lsrs	r2, r1
 801149a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801149e:	4313      	orrs	r3, r2
 80114a0:	e7de      	b.n	8011460 <__b2d+0x48>
 80114a2:	ea42 0501 	orr.w	r5, r2, r1
 80114a6:	e7db      	b.n	8011460 <__b2d+0x48>
 80114a8:	3ff00000 	.word	0x3ff00000

080114ac <__d2b>:
 80114ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114b0:	460f      	mov	r7, r1
 80114b2:	2101      	movs	r1, #1
 80114b4:	ec59 8b10 	vmov	r8, r9, d0
 80114b8:	4616      	mov	r6, r2
 80114ba:	f7ff fc1b 	bl	8010cf4 <_Balloc>
 80114be:	4604      	mov	r4, r0
 80114c0:	b930      	cbnz	r0, 80114d0 <__d2b+0x24>
 80114c2:	4602      	mov	r2, r0
 80114c4:	4b23      	ldr	r3, [pc, #140]	@ (8011554 <__d2b+0xa8>)
 80114c6:	4824      	ldr	r0, [pc, #144]	@ (8011558 <__d2b+0xac>)
 80114c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80114cc:	f000 fee8 	bl	80122a0 <__assert_func>
 80114d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114d8:	b10d      	cbz	r5, 80114de <__d2b+0x32>
 80114da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80114de:	9301      	str	r3, [sp, #4]
 80114e0:	f1b8 0300 	subs.w	r3, r8, #0
 80114e4:	d023      	beq.n	801152e <__d2b+0x82>
 80114e6:	4668      	mov	r0, sp
 80114e8:	9300      	str	r3, [sp, #0]
 80114ea:	f7ff fd14 	bl	8010f16 <__lo0bits>
 80114ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80114f2:	b1d0      	cbz	r0, 801152a <__d2b+0x7e>
 80114f4:	f1c0 0320 	rsb	r3, r0, #32
 80114f8:	fa02 f303 	lsl.w	r3, r2, r3
 80114fc:	430b      	orrs	r3, r1
 80114fe:	40c2      	lsrs	r2, r0
 8011500:	6163      	str	r3, [r4, #20]
 8011502:	9201      	str	r2, [sp, #4]
 8011504:	9b01      	ldr	r3, [sp, #4]
 8011506:	61a3      	str	r3, [r4, #24]
 8011508:	2b00      	cmp	r3, #0
 801150a:	bf0c      	ite	eq
 801150c:	2201      	moveq	r2, #1
 801150e:	2202      	movne	r2, #2
 8011510:	6122      	str	r2, [r4, #16]
 8011512:	b1a5      	cbz	r5, 801153e <__d2b+0x92>
 8011514:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011518:	4405      	add	r5, r0
 801151a:	603d      	str	r5, [r7, #0]
 801151c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011520:	6030      	str	r0, [r6, #0]
 8011522:	4620      	mov	r0, r4
 8011524:	b003      	add	sp, #12
 8011526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801152a:	6161      	str	r1, [r4, #20]
 801152c:	e7ea      	b.n	8011504 <__d2b+0x58>
 801152e:	a801      	add	r0, sp, #4
 8011530:	f7ff fcf1 	bl	8010f16 <__lo0bits>
 8011534:	9b01      	ldr	r3, [sp, #4]
 8011536:	6163      	str	r3, [r4, #20]
 8011538:	3020      	adds	r0, #32
 801153a:	2201      	movs	r2, #1
 801153c:	e7e8      	b.n	8011510 <__d2b+0x64>
 801153e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011542:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011546:	6038      	str	r0, [r7, #0]
 8011548:	6918      	ldr	r0, [r3, #16]
 801154a:	f7ff fcc5 	bl	8010ed8 <__hi0bits>
 801154e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011552:	e7e5      	b.n	8011520 <__d2b+0x74>
 8011554:	08012c1d 	.word	0x08012c1d
 8011558:	08012c8e 	.word	0x08012c8e

0801155c <__ratio>:
 801155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011560:	b085      	sub	sp, #20
 8011562:	e9cd 1000 	strd	r1, r0, [sp]
 8011566:	a902      	add	r1, sp, #8
 8011568:	f7ff ff56 	bl	8011418 <__b2d>
 801156c:	9800      	ldr	r0, [sp, #0]
 801156e:	a903      	add	r1, sp, #12
 8011570:	ec55 4b10 	vmov	r4, r5, d0
 8011574:	f7ff ff50 	bl	8011418 <__b2d>
 8011578:	9b01      	ldr	r3, [sp, #4]
 801157a:	6919      	ldr	r1, [r3, #16]
 801157c:	9b00      	ldr	r3, [sp, #0]
 801157e:	691b      	ldr	r3, [r3, #16]
 8011580:	1ac9      	subs	r1, r1, r3
 8011582:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011586:	1a9b      	subs	r3, r3, r2
 8011588:	ec5b ab10 	vmov	sl, fp, d0
 801158c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011590:	2b00      	cmp	r3, #0
 8011592:	bfce      	itee	gt
 8011594:	462a      	movgt	r2, r5
 8011596:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801159a:	465a      	movle	r2, fp
 801159c:	462f      	mov	r7, r5
 801159e:	46d9      	mov	r9, fp
 80115a0:	bfcc      	ite	gt
 80115a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80115a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80115aa:	464b      	mov	r3, r9
 80115ac:	4652      	mov	r2, sl
 80115ae:	4620      	mov	r0, r4
 80115b0:	4639      	mov	r1, r7
 80115b2:	f7ef f94b 	bl	800084c <__aeabi_ddiv>
 80115b6:	ec41 0b10 	vmov	d0, r0, r1
 80115ba:	b005      	add	sp, #20
 80115bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115c0 <__copybits>:
 80115c0:	3901      	subs	r1, #1
 80115c2:	b570      	push	{r4, r5, r6, lr}
 80115c4:	1149      	asrs	r1, r1, #5
 80115c6:	6914      	ldr	r4, [r2, #16]
 80115c8:	3101      	adds	r1, #1
 80115ca:	f102 0314 	add.w	r3, r2, #20
 80115ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80115d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115d6:	1f05      	subs	r5, r0, #4
 80115d8:	42a3      	cmp	r3, r4
 80115da:	d30c      	bcc.n	80115f6 <__copybits+0x36>
 80115dc:	1aa3      	subs	r3, r4, r2
 80115de:	3b11      	subs	r3, #17
 80115e0:	f023 0303 	bic.w	r3, r3, #3
 80115e4:	3211      	adds	r2, #17
 80115e6:	42a2      	cmp	r2, r4
 80115e8:	bf88      	it	hi
 80115ea:	2300      	movhi	r3, #0
 80115ec:	4418      	add	r0, r3
 80115ee:	2300      	movs	r3, #0
 80115f0:	4288      	cmp	r0, r1
 80115f2:	d305      	bcc.n	8011600 <__copybits+0x40>
 80115f4:	bd70      	pop	{r4, r5, r6, pc}
 80115f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80115fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80115fe:	e7eb      	b.n	80115d8 <__copybits+0x18>
 8011600:	f840 3b04 	str.w	r3, [r0], #4
 8011604:	e7f4      	b.n	80115f0 <__copybits+0x30>

08011606 <__any_on>:
 8011606:	f100 0214 	add.w	r2, r0, #20
 801160a:	6900      	ldr	r0, [r0, #16]
 801160c:	114b      	asrs	r3, r1, #5
 801160e:	4298      	cmp	r0, r3
 8011610:	b510      	push	{r4, lr}
 8011612:	db11      	blt.n	8011638 <__any_on+0x32>
 8011614:	dd0a      	ble.n	801162c <__any_on+0x26>
 8011616:	f011 011f 	ands.w	r1, r1, #31
 801161a:	d007      	beq.n	801162c <__any_on+0x26>
 801161c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011620:	fa24 f001 	lsr.w	r0, r4, r1
 8011624:	fa00 f101 	lsl.w	r1, r0, r1
 8011628:	428c      	cmp	r4, r1
 801162a:	d10b      	bne.n	8011644 <__any_on+0x3e>
 801162c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011630:	4293      	cmp	r3, r2
 8011632:	d803      	bhi.n	801163c <__any_on+0x36>
 8011634:	2000      	movs	r0, #0
 8011636:	bd10      	pop	{r4, pc}
 8011638:	4603      	mov	r3, r0
 801163a:	e7f7      	b.n	801162c <__any_on+0x26>
 801163c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011640:	2900      	cmp	r1, #0
 8011642:	d0f5      	beq.n	8011630 <__any_on+0x2a>
 8011644:	2001      	movs	r0, #1
 8011646:	e7f6      	b.n	8011636 <__any_on+0x30>

08011648 <_strtoul_l.isra.0>:
 8011648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801164c:	4e34      	ldr	r6, [pc, #208]	@ (8011720 <_strtoul_l.isra.0+0xd8>)
 801164e:	4686      	mov	lr, r0
 8011650:	460d      	mov	r5, r1
 8011652:	4628      	mov	r0, r5
 8011654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011658:	5d37      	ldrb	r7, [r6, r4]
 801165a:	f017 0708 	ands.w	r7, r7, #8
 801165e:	d1f8      	bne.n	8011652 <_strtoul_l.isra.0+0xa>
 8011660:	2c2d      	cmp	r4, #45	@ 0x2d
 8011662:	d110      	bne.n	8011686 <_strtoul_l.isra.0+0x3e>
 8011664:	782c      	ldrb	r4, [r5, #0]
 8011666:	2701      	movs	r7, #1
 8011668:	1c85      	adds	r5, r0, #2
 801166a:	f033 0010 	bics.w	r0, r3, #16
 801166e:	d115      	bne.n	801169c <_strtoul_l.isra.0+0x54>
 8011670:	2c30      	cmp	r4, #48	@ 0x30
 8011672:	d10d      	bne.n	8011690 <_strtoul_l.isra.0+0x48>
 8011674:	7828      	ldrb	r0, [r5, #0]
 8011676:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801167a:	2858      	cmp	r0, #88	@ 0x58
 801167c:	d108      	bne.n	8011690 <_strtoul_l.isra.0+0x48>
 801167e:	786c      	ldrb	r4, [r5, #1]
 8011680:	3502      	adds	r5, #2
 8011682:	2310      	movs	r3, #16
 8011684:	e00a      	b.n	801169c <_strtoul_l.isra.0+0x54>
 8011686:	2c2b      	cmp	r4, #43	@ 0x2b
 8011688:	bf04      	itt	eq
 801168a:	782c      	ldrbeq	r4, [r5, #0]
 801168c:	1c85      	addeq	r5, r0, #2
 801168e:	e7ec      	b.n	801166a <_strtoul_l.isra.0+0x22>
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1f6      	bne.n	8011682 <_strtoul_l.isra.0+0x3a>
 8011694:	2c30      	cmp	r4, #48	@ 0x30
 8011696:	bf14      	ite	ne
 8011698:	230a      	movne	r3, #10
 801169a:	2308      	moveq	r3, #8
 801169c:	f04f 38ff 	mov.w	r8, #4294967295
 80116a0:	2600      	movs	r6, #0
 80116a2:	fbb8 f8f3 	udiv	r8, r8, r3
 80116a6:	fb03 f908 	mul.w	r9, r3, r8
 80116aa:	ea6f 0909 	mvn.w	r9, r9
 80116ae:	4630      	mov	r0, r6
 80116b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80116b4:	f1bc 0f09 	cmp.w	ip, #9
 80116b8:	d810      	bhi.n	80116dc <_strtoul_l.isra.0+0x94>
 80116ba:	4664      	mov	r4, ip
 80116bc:	42a3      	cmp	r3, r4
 80116be:	dd1e      	ble.n	80116fe <_strtoul_l.isra.0+0xb6>
 80116c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80116c4:	d007      	beq.n	80116d6 <_strtoul_l.isra.0+0x8e>
 80116c6:	4580      	cmp	r8, r0
 80116c8:	d316      	bcc.n	80116f8 <_strtoul_l.isra.0+0xb0>
 80116ca:	d101      	bne.n	80116d0 <_strtoul_l.isra.0+0x88>
 80116cc:	45a1      	cmp	r9, r4
 80116ce:	db13      	blt.n	80116f8 <_strtoul_l.isra.0+0xb0>
 80116d0:	fb00 4003 	mla	r0, r0, r3, r4
 80116d4:	2601      	movs	r6, #1
 80116d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116da:	e7e9      	b.n	80116b0 <_strtoul_l.isra.0+0x68>
 80116dc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80116e0:	f1bc 0f19 	cmp.w	ip, #25
 80116e4:	d801      	bhi.n	80116ea <_strtoul_l.isra.0+0xa2>
 80116e6:	3c37      	subs	r4, #55	@ 0x37
 80116e8:	e7e8      	b.n	80116bc <_strtoul_l.isra.0+0x74>
 80116ea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80116ee:	f1bc 0f19 	cmp.w	ip, #25
 80116f2:	d804      	bhi.n	80116fe <_strtoul_l.isra.0+0xb6>
 80116f4:	3c57      	subs	r4, #87	@ 0x57
 80116f6:	e7e1      	b.n	80116bc <_strtoul_l.isra.0+0x74>
 80116f8:	f04f 36ff 	mov.w	r6, #4294967295
 80116fc:	e7eb      	b.n	80116d6 <_strtoul_l.isra.0+0x8e>
 80116fe:	1c73      	adds	r3, r6, #1
 8011700:	d106      	bne.n	8011710 <_strtoul_l.isra.0+0xc8>
 8011702:	2322      	movs	r3, #34	@ 0x22
 8011704:	f8ce 3000 	str.w	r3, [lr]
 8011708:	4630      	mov	r0, r6
 801170a:	b932      	cbnz	r2, 801171a <_strtoul_l.isra.0+0xd2>
 801170c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011710:	b107      	cbz	r7, 8011714 <_strtoul_l.isra.0+0xcc>
 8011712:	4240      	negs	r0, r0
 8011714:	2a00      	cmp	r2, #0
 8011716:	d0f9      	beq.n	801170c <_strtoul_l.isra.0+0xc4>
 8011718:	b106      	cbz	r6, 801171c <_strtoul_l.isra.0+0xd4>
 801171a:	1e69      	subs	r1, r5, #1
 801171c:	6011      	str	r1, [r2, #0]
 801171e:	e7f5      	b.n	801170c <_strtoul_l.isra.0+0xc4>
 8011720:	08012da1 	.word	0x08012da1

08011724 <_strtoul_r>:
 8011724:	f7ff bf90 	b.w	8011648 <_strtoul_l.isra.0>

08011728 <__ascii_wctomb>:
 8011728:	4603      	mov	r3, r0
 801172a:	4608      	mov	r0, r1
 801172c:	b141      	cbz	r1, 8011740 <__ascii_wctomb+0x18>
 801172e:	2aff      	cmp	r2, #255	@ 0xff
 8011730:	d904      	bls.n	801173c <__ascii_wctomb+0x14>
 8011732:	228a      	movs	r2, #138	@ 0x8a
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	f04f 30ff 	mov.w	r0, #4294967295
 801173a:	4770      	bx	lr
 801173c:	700a      	strb	r2, [r1, #0]
 801173e:	2001      	movs	r0, #1
 8011740:	4770      	bx	lr

08011742 <__ssputs_r>:
 8011742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011746:	688e      	ldr	r6, [r1, #8]
 8011748:	461f      	mov	r7, r3
 801174a:	42be      	cmp	r6, r7
 801174c:	680b      	ldr	r3, [r1, #0]
 801174e:	4682      	mov	sl, r0
 8011750:	460c      	mov	r4, r1
 8011752:	4690      	mov	r8, r2
 8011754:	d82d      	bhi.n	80117b2 <__ssputs_r+0x70>
 8011756:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801175a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801175e:	d026      	beq.n	80117ae <__ssputs_r+0x6c>
 8011760:	6965      	ldr	r5, [r4, #20]
 8011762:	6909      	ldr	r1, [r1, #16]
 8011764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011768:	eba3 0901 	sub.w	r9, r3, r1
 801176c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011770:	1c7b      	adds	r3, r7, #1
 8011772:	444b      	add	r3, r9
 8011774:	106d      	asrs	r5, r5, #1
 8011776:	429d      	cmp	r5, r3
 8011778:	bf38      	it	cc
 801177a:	461d      	movcc	r5, r3
 801177c:	0553      	lsls	r3, r2, #21
 801177e:	d527      	bpl.n	80117d0 <__ssputs_r+0x8e>
 8011780:	4629      	mov	r1, r5
 8011782:	f7fc f8ab 	bl	800d8dc <_malloc_r>
 8011786:	4606      	mov	r6, r0
 8011788:	b360      	cbz	r0, 80117e4 <__ssputs_r+0xa2>
 801178a:	6921      	ldr	r1, [r4, #16]
 801178c:	464a      	mov	r2, r9
 801178e:	f7fe f8a4 	bl	800f8da <memcpy>
 8011792:	89a3      	ldrh	r3, [r4, #12]
 8011794:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801179c:	81a3      	strh	r3, [r4, #12]
 801179e:	6126      	str	r6, [r4, #16]
 80117a0:	6165      	str	r5, [r4, #20]
 80117a2:	444e      	add	r6, r9
 80117a4:	eba5 0509 	sub.w	r5, r5, r9
 80117a8:	6026      	str	r6, [r4, #0]
 80117aa:	60a5      	str	r5, [r4, #8]
 80117ac:	463e      	mov	r6, r7
 80117ae:	42be      	cmp	r6, r7
 80117b0:	d900      	bls.n	80117b4 <__ssputs_r+0x72>
 80117b2:	463e      	mov	r6, r7
 80117b4:	6820      	ldr	r0, [r4, #0]
 80117b6:	4632      	mov	r2, r6
 80117b8:	4641      	mov	r1, r8
 80117ba:	f000 fd56 	bl	801226a <memmove>
 80117be:	68a3      	ldr	r3, [r4, #8]
 80117c0:	1b9b      	subs	r3, r3, r6
 80117c2:	60a3      	str	r3, [r4, #8]
 80117c4:	6823      	ldr	r3, [r4, #0]
 80117c6:	4433      	add	r3, r6
 80117c8:	6023      	str	r3, [r4, #0]
 80117ca:	2000      	movs	r0, #0
 80117cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117d0:	462a      	mov	r2, r5
 80117d2:	f000 fd97 	bl	8012304 <_realloc_r>
 80117d6:	4606      	mov	r6, r0
 80117d8:	2800      	cmp	r0, #0
 80117da:	d1e0      	bne.n	801179e <__ssputs_r+0x5c>
 80117dc:	6921      	ldr	r1, [r4, #16]
 80117de:	4650      	mov	r0, sl
 80117e0:	f7fe fef2 	bl	80105c8 <_free_r>
 80117e4:	230c      	movs	r3, #12
 80117e6:	f8ca 3000 	str.w	r3, [sl]
 80117ea:	89a3      	ldrh	r3, [r4, #12]
 80117ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117f0:	81a3      	strh	r3, [r4, #12]
 80117f2:	f04f 30ff 	mov.w	r0, #4294967295
 80117f6:	e7e9      	b.n	80117cc <__ssputs_r+0x8a>

080117f8 <_svfiprintf_r>:
 80117f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fc:	4698      	mov	r8, r3
 80117fe:	898b      	ldrh	r3, [r1, #12]
 8011800:	061b      	lsls	r3, r3, #24
 8011802:	b09d      	sub	sp, #116	@ 0x74
 8011804:	4607      	mov	r7, r0
 8011806:	460d      	mov	r5, r1
 8011808:	4614      	mov	r4, r2
 801180a:	d510      	bpl.n	801182e <_svfiprintf_r+0x36>
 801180c:	690b      	ldr	r3, [r1, #16]
 801180e:	b973      	cbnz	r3, 801182e <_svfiprintf_r+0x36>
 8011810:	2140      	movs	r1, #64	@ 0x40
 8011812:	f7fc f863 	bl	800d8dc <_malloc_r>
 8011816:	6028      	str	r0, [r5, #0]
 8011818:	6128      	str	r0, [r5, #16]
 801181a:	b930      	cbnz	r0, 801182a <_svfiprintf_r+0x32>
 801181c:	230c      	movs	r3, #12
 801181e:	603b      	str	r3, [r7, #0]
 8011820:	f04f 30ff 	mov.w	r0, #4294967295
 8011824:	b01d      	add	sp, #116	@ 0x74
 8011826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801182a:	2340      	movs	r3, #64	@ 0x40
 801182c:	616b      	str	r3, [r5, #20]
 801182e:	2300      	movs	r3, #0
 8011830:	9309      	str	r3, [sp, #36]	@ 0x24
 8011832:	2320      	movs	r3, #32
 8011834:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011838:	f8cd 800c 	str.w	r8, [sp, #12]
 801183c:	2330      	movs	r3, #48	@ 0x30
 801183e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80119dc <_svfiprintf_r+0x1e4>
 8011842:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011846:	f04f 0901 	mov.w	r9, #1
 801184a:	4623      	mov	r3, r4
 801184c:	469a      	mov	sl, r3
 801184e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011852:	b10a      	cbz	r2, 8011858 <_svfiprintf_r+0x60>
 8011854:	2a25      	cmp	r2, #37	@ 0x25
 8011856:	d1f9      	bne.n	801184c <_svfiprintf_r+0x54>
 8011858:	ebba 0b04 	subs.w	fp, sl, r4
 801185c:	d00b      	beq.n	8011876 <_svfiprintf_r+0x7e>
 801185e:	465b      	mov	r3, fp
 8011860:	4622      	mov	r2, r4
 8011862:	4629      	mov	r1, r5
 8011864:	4638      	mov	r0, r7
 8011866:	f7ff ff6c 	bl	8011742 <__ssputs_r>
 801186a:	3001      	adds	r0, #1
 801186c:	f000 80a7 	beq.w	80119be <_svfiprintf_r+0x1c6>
 8011870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011872:	445a      	add	r2, fp
 8011874:	9209      	str	r2, [sp, #36]	@ 0x24
 8011876:	f89a 3000 	ldrb.w	r3, [sl]
 801187a:	2b00      	cmp	r3, #0
 801187c:	f000 809f 	beq.w	80119be <_svfiprintf_r+0x1c6>
 8011880:	2300      	movs	r3, #0
 8011882:	f04f 32ff 	mov.w	r2, #4294967295
 8011886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801188a:	f10a 0a01 	add.w	sl, sl, #1
 801188e:	9304      	str	r3, [sp, #16]
 8011890:	9307      	str	r3, [sp, #28]
 8011892:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011896:	931a      	str	r3, [sp, #104]	@ 0x68
 8011898:	4654      	mov	r4, sl
 801189a:	2205      	movs	r2, #5
 801189c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118a0:	484e      	ldr	r0, [pc, #312]	@ (80119dc <_svfiprintf_r+0x1e4>)
 80118a2:	f7ee fc95 	bl	80001d0 <memchr>
 80118a6:	9a04      	ldr	r2, [sp, #16]
 80118a8:	b9d8      	cbnz	r0, 80118e2 <_svfiprintf_r+0xea>
 80118aa:	06d0      	lsls	r0, r2, #27
 80118ac:	bf44      	itt	mi
 80118ae:	2320      	movmi	r3, #32
 80118b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118b4:	0711      	lsls	r1, r2, #28
 80118b6:	bf44      	itt	mi
 80118b8:	232b      	movmi	r3, #43	@ 0x2b
 80118ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118be:	f89a 3000 	ldrb.w	r3, [sl]
 80118c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80118c4:	d015      	beq.n	80118f2 <_svfiprintf_r+0xfa>
 80118c6:	9a07      	ldr	r2, [sp, #28]
 80118c8:	4654      	mov	r4, sl
 80118ca:	2000      	movs	r0, #0
 80118cc:	f04f 0c0a 	mov.w	ip, #10
 80118d0:	4621      	mov	r1, r4
 80118d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118d6:	3b30      	subs	r3, #48	@ 0x30
 80118d8:	2b09      	cmp	r3, #9
 80118da:	d94b      	bls.n	8011974 <_svfiprintf_r+0x17c>
 80118dc:	b1b0      	cbz	r0, 801190c <_svfiprintf_r+0x114>
 80118de:	9207      	str	r2, [sp, #28]
 80118e0:	e014      	b.n	801190c <_svfiprintf_r+0x114>
 80118e2:	eba0 0308 	sub.w	r3, r0, r8
 80118e6:	fa09 f303 	lsl.w	r3, r9, r3
 80118ea:	4313      	orrs	r3, r2
 80118ec:	9304      	str	r3, [sp, #16]
 80118ee:	46a2      	mov	sl, r4
 80118f0:	e7d2      	b.n	8011898 <_svfiprintf_r+0xa0>
 80118f2:	9b03      	ldr	r3, [sp, #12]
 80118f4:	1d19      	adds	r1, r3, #4
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	9103      	str	r1, [sp, #12]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	bfbb      	ittet	lt
 80118fe:	425b      	neglt	r3, r3
 8011900:	f042 0202 	orrlt.w	r2, r2, #2
 8011904:	9307      	strge	r3, [sp, #28]
 8011906:	9307      	strlt	r3, [sp, #28]
 8011908:	bfb8      	it	lt
 801190a:	9204      	strlt	r2, [sp, #16]
 801190c:	7823      	ldrb	r3, [r4, #0]
 801190e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011910:	d10a      	bne.n	8011928 <_svfiprintf_r+0x130>
 8011912:	7863      	ldrb	r3, [r4, #1]
 8011914:	2b2a      	cmp	r3, #42	@ 0x2a
 8011916:	d132      	bne.n	801197e <_svfiprintf_r+0x186>
 8011918:	9b03      	ldr	r3, [sp, #12]
 801191a:	1d1a      	adds	r2, r3, #4
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	9203      	str	r2, [sp, #12]
 8011920:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011924:	3402      	adds	r4, #2
 8011926:	9305      	str	r3, [sp, #20]
 8011928:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80119ec <_svfiprintf_r+0x1f4>
 801192c:	7821      	ldrb	r1, [r4, #0]
 801192e:	2203      	movs	r2, #3
 8011930:	4650      	mov	r0, sl
 8011932:	f7ee fc4d 	bl	80001d0 <memchr>
 8011936:	b138      	cbz	r0, 8011948 <_svfiprintf_r+0x150>
 8011938:	9b04      	ldr	r3, [sp, #16]
 801193a:	eba0 000a 	sub.w	r0, r0, sl
 801193e:	2240      	movs	r2, #64	@ 0x40
 8011940:	4082      	lsls	r2, r0
 8011942:	4313      	orrs	r3, r2
 8011944:	3401      	adds	r4, #1
 8011946:	9304      	str	r3, [sp, #16]
 8011948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801194c:	4824      	ldr	r0, [pc, #144]	@ (80119e0 <_svfiprintf_r+0x1e8>)
 801194e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011952:	2206      	movs	r2, #6
 8011954:	f7ee fc3c 	bl	80001d0 <memchr>
 8011958:	2800      	cmp	r0, #0
 801195a:	d036      	beq.n	80119ca <_svfiprintf_r+0x1d2>
 801195c:	4b21      	ldr	r3, [pc, #132]	@ (80119e4 <_svfiprintf_r+0x1ec>)
 801195e:	bb1b      	cbnz	r3, 80119a8 <_svfiprintf_r+0x1b0>
 8011960:	9b03      	ldr	r3, [sp, #12]
 8011962:	3307      	adds	r3, #7
 8011964:	f023 0307 	bic.w	r3, r3, #7
 8011968:	3308      	adds	r3, #8
 801196a:	9303      	str	r3, [sp, #12]
 801196c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801196e:	4433      	add	r3, r6
 8011970:	9309      	str	r3, [sp, #36]	@ 0x24
 8011972:	e76a      	b.n	801184a <_svfiprintf_r+0x52>
 8011974:	fb0c 3202 	mla	r2, ip, r2, r3
 8011978:	460c      	mov	r4, r1
 801197a:	2001      	movs	r0, #1
 801197c:	e7a8      	b.n	80118d0 <_svfiprintf_r+0xd8>
 801197e:	2300      	movs	r3, #0
 8011980:	3401      	adds	r4, #1
 8011982:	9305      	str	r3, [sp, #20]
 8011984:	4619      	mov	r1, r3
 8011986:	f04f 0c0a 	mov.w	ip, #10
 801198a:	4620      	mov	r0, r4
 801198c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011990:	3a30      	subs	r2, #48	@ 0x30
 8011992:	2a09      	cmp	r2, #9
 8011994:	d903      	bls.n	801199e <_svfiprintf_r+0x1a6>
 8011996:	2b00      	cmp	r3, #0
 8011998:	d0c6      	beq.n	8011928 <_svfiprintf_r+0x130>
 801199a:	9105      	str	r1, [sp, #20]
 801199c:	e7c4      	b.n	8011928 <_svfiprintf_r+0x130>
 801199e:	fb0c 2101 	mla	r1, ip, r1, r2
 80119a2:	4604      	mov	r4, r0
 80119a4:	2301      	movs	r3, #1
 80119a6:	e7f0      	b.n	801198a <_svfiprintf_r+0x192>
 80119a8:	ab03      	add	r3, sp, #12
 80119aa:	9300      	str	r3, [sp, #0]
 80119ac:	462a      	mov	r2, r5
 80119ae:	4b0e      	ldr	r3, [pc, #56]	@ (80119e8 <_svfiprintf_r+0x1f0>)
 80119b0:	a904      	add	r1, sp, #16
 80119b2:	4638      	mov	r0, r7
 80119b4:	f7fc ff42 	bl	800e83c <_printf_float>
 80119b8:	1c42      	adds	r2, r0, #1
 80119ba:	4606      	mov	r6, r0
 80119bc:	d1d6      	bne.n	801196c <_svfiprintf_r+0x174>
 80119be:	89ab      	ldrh	r3, [r5, #12]
 80119c0:	065b      	lsls	r3, r3, #25
 80119c2:	f53f af2d 	bmi.w	8011820 <_svfiprintf_r+0x28>
 80119c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119c8:	e72c      	b.n	8011824 <_svfiprintf_r+0x2c>
 80119ca:	ab03      	add	r3, sp, #12
 80119cc:	9300      	str	r3, [sp, #0]
 80119ce:	462a      	mov	r2, r5
 80119d0:	4b05      	ldr	r3, [pc, #20]	@ (80119e8 <_svfiprintf_r+0x1f0>)
 80119d2:	a904      	add	r1, sp, #16
 80119d4:	4638      	mov	r0, r7
 80119d6:	f7fd f9c9 	bl	800ed6c <_printf_i>
 80119da:	e7ed      	b.n	80119b8 <_svfiprintf_r+0x1c0>
 80119dc:	08012ce7 	.word	0x08012ce7
 80119e0:	08012cf1 	.word	0x08012cf1
 80119e4:	0800e83d 	.word	0x0800e83d
 80119e8:	08011743 	.word	0x08011743
 80119ec:	08012ced 	.word	0x08012ced

080119f0 <_sungetc_r>:
 80119f0:	b538      	push	{r3, r4, r5, lr}
 80119f2:	1c4b      	adds	r3, r1, #1
 80119f4:	4614      	mov	r4, r2
 80119f6:	d103      	bne.n	8011a00 <_sungetc_r+0x10>
 80119f8:	f04f 35ff 	mov.w	r5, #4294967295
 80119fc:	4628      	mov	r0, r5
 80119fe:	bd38      	pop	{r3, r4, r5, pc}
 8011a00:	8993      	ldrh	r3, [r2, #12]
 8011a02:	f023 0320 	bic.w	r3, r3, #32
 8011a06:	8193      	strh	r3, [r2, #12]
 8011a08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a0a:	6852      	ldr	r2, [r2, #4]
 8011a0c:	b2cd      	uxtb	r5, r1
 8011a0e:	b18b      	cbz	r3, 8011a34 <_sungetc_r+0x44>
 8011a10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011a12:	4293      	cmp	r3, r2
 8011a14:	dd08      	ble.n	8011a28 <_sungetc_r+0x38>
 8011a16:	6823      	ldr	r3, [r4, #0]
 8011a18:	1e5a      	subs	r2, r3, #1
 8011a1a:	6022      	str	r2, [r4, #0]
 8011a1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011a20:	6863      	ldr	r3, [r4, #4]
 8011a22:	3301      	adds	r3, #1
 8011a24:	6063      	str	r3, [r4, #4]
 8011a26:	e7e9      	b.n	80119fc <_sungetc_r+0xc>
 8011a28:	4621      	mov	r1, r4
 8011a2a:	f000 fbe4 	bl	80121f6 <__submore>
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d0f1      	beq.n	8011a16 <_sungetc_r+0x26>
 8011a32:	e7e1      	b.n	80119f8 <_sungetc_r+0x8>
 8011a34:	6921      	ldr	r1, [r4, #16]
 8011a36:	6823      	ldr	r3, [r4, #0]
 8011a38:	b151      	cbz	r1, 8011a50 <_sungetc_r+0x60>
 8011a3a:	4299      	cmp	r1, r3
 8011a3c:	d208      	bcs.n	8011a50 <_sungetc_r+0x60>
 8011a3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011a42:	42a9      	cmp	r1, r5
 8011a44:	d104      	bne.n	8011a50 <_sungetc_r+0x60>
 8011a46:	3b01      	subs	r3, #1
 8011a48:	3201      	adds	r2, #1
 8011a4a:	6023      	str	r3, [r4, #0]
 8011a4c:	6062      	str	r2, [r4, #4]
 8011a4e:	e7d5      	b.n	80119fc <_sungetc_r+0xc>
 8011a50:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011a54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a5a:	2303      	movs	r3, #3
 8011a5c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011a5e:	4623      	mov	r3, r4
 8011a60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011a64:	6023      	str	r3, [r4, #0]
 8011a66:	2301      	movs	r3, #1
 8011a68:	e7dc      	b.n	8011a24 <_sungetc_r+0x34>

08011a6a <__ssrefill_r>:
 8011a6a:	b510      	push	{r4, lr}
 8011a6c:	460c      	mov	r4, r1
 8011a6e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011a70:	b169      	cbz	r1, 8011a8e <__ssrefill_r+0x24>
 8011a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a76:	4299      	cmp	r1, r3
 8011a78:	d001      	beq.n	8011a7e <__ssrefill_r+0x14>
 8011a7a:	f7fe fda5 	bl	80105c8 <_free_r>
 8011a7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a80:	6063      	str	r3, [r4, #4]
 8011a82:	2000      	movs	r0, #0
 8011a84:	6360      	str	r0, [r4, #52]	@ 0x34
 8011a86:	b113      	cbz	r3, 8011a8e <__ssrefill_r+0x24>
 8011a88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011a8a:	6023      	str	r3, [r4, #0]
 8011a8c:	bd10      	pop	{r4, pc}
 8011a8e:	6923      	ldr	r3, [r4, #16]
 8011a90:	6023      	str	r3, [r4, #0]
 8011a92:	2300      	movs	r3, #0
 8011a94:	6063      	str	r3, [r4, #4]
 8011a96:	89a3      	ldrh	r3, [r4, #12]
 8011a98:	f043 0320 	orr.w	r3, r3, #32
 8011a9c:	81a3      	strh	r3, [r4, #12]
 8011a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa2:	e7f3      	b.n	8011a8c <__ssrefill_r+0x22>

08011aa4 <__ssvfiscanf_r>:
 8011aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa8:	460c      	mov	r4, r1
 8011aaa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011aae:	2100      	movs	r1, #0
 8011ab0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011ab4:	49a6      	ldr	r1, [pc, #664]	@ (8011d50 <__ssvfiscanf_r+0x2ac>)
 8011ab6:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011ab8:	f10d 0804 	add.w	r8, sp, #4
 8011abc:	49a5      	ldr	r1, [pc, #660]	@ (8011d54 <__ssvfiscanf_r+0x2b0>)
 8011abe:	4fa6      	ldr	r7, [pc, #664]	@ (8011d58 <__ssvfiscanf_r+0x2b4>)
 8011ac0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011ac4:	4606      	mov	r6, r0
 8011ac6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	f892 9000 	ldrb.w	r9, [r2]
 8011ace:	f1b9 0f00 	cmp.w	r9, #0
 8011ad2:	f000 8158 	beq.w	8011d86 <__ssvfiscanf_r+0x2e2>
 8011ad6:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011ada:	f013 0308 	ands.w	r3, r3, #8
 8011ade:	f102 0501 	add.w	r5, r2, #1
 8011ae2:	d019      	beq.n	8011b18 <__ssvfiscanf_r+0x74>
 8011ae4:	6863      	ldr	r3, [r4, #4]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	dd0f      	ble.n	8011b0a <__ssvfiscanf_r+0x66>
 8011aea:	6823      	ldr	r3, [r4, #0]
 8011aec:	781a      	ldrb	r2, [r3, #0]
 8011aee:	5cba      	ldrb	r2, [r7, r2]
 8011af0:	0712      	lsls	r2, r2, #28
 8011af2:	d401      	bmi.n	8011af8 <__ssvfiscanf_r+0x54>
 8011af4:	462a      	mov	r2, r5
 8011af6:	e7e8      	b.n	8011aca <__ssvfiscanf_r+0x26>
 8011af8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011afa:	3201      	adds	r2, #1
 8011afc:	9245      	str	r2, [sp, #276]	@ 0x114
 8011afe:	6862      	ldr	r2, [r4, #4]
 8011b00:	3301      	adds	r3, #1
 8011b02:	3a01      	subs	r2, #1
 8011b04:	6062      	str	r2, [r4, #4]
 8011b06:	6023      	str	r3, [r4, #0]
 8011b08:	e7ec      	b.n	8011ae4 <__ssvfiscanf_r+0x40>
 8011b0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011b0c:	4621      	mov	r1, r4
 8011b0e:	4630      	mov	r0, r6
 8011b10:	4798      	blx	r3
 8011b12:	2800      	cmp	r0, #0
 8011b14:	d0e9      	beq.n	8011aea <__ssvfiscanf_r+0x46>
 8011b16:	e7ed      	b.n	8011af4 <__ssvfiscanf_r+0x50>
 8011b18:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011b1c:	f040 8085 	bne.w	8011c2a <__ssvfiscanf_r+0x186>
 8011b20:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b22:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011b24:	7853      	ldrb	r3, [r2, #1]
 8011b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b28:	bf02      	ittt	eq
 8011b2a:	2310      	moveq	r3, #16
 8011b2c:	1c95      	addeq	r5, r2, #2
 8011b2e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011b30:	220a      	movs	r2, #10
 8011b32:	46aa      	mov	sl, r5
 8011b34:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011b38:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011b3c:	2b09      	cmp	r3, #9
 8011b3e:	d91e      	bls.n	8011b7e <__ssvfiscanf_r+0xda>
 8011b40:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011d5c <__ssvfiscanf_r+0x2b8>
 8011b44:	2203      	movs	r2, #3
 8011b46:	4658      	mov	r0, fp
 8011b48:	f7ee fb42 	bl	80001d0 <memchr>
 8011b4c:	b138      	cbz	r0, 8011b5e <__ssvfiscanf_r+0xba>
 8011b4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011b50:	eba0 000b 	sub.w	r0, r0, fp
 8011b54:	2301      	movs	r3, #1
 8011b56:	4083      	lsls	r3, r0
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b5c:	4655      	mov	r5, sl
 8011b5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b62:	2b78      	cmp	r3, #120	@ 0x78
 8011b64:	d806      	bhi.n	8011b74 <__ssvfiscanf_r+0xd0>
 8011b66:	2b57      	cmp	r3, #87	@ 0x57
 8011b68:	d810      	bhi.n	8011b8c <__ssvfiscanf_r+0xe8>
 8011b6a:	2b25      	cmp	r3, #37	@ 0x25
 8011b6c:	d05d      	beq.n	8011c2a <__ssvfiscanf_r+0x186>
 8011b6e:	d857      	bhi.n	8011c20 <__ssvfiscanf_r+0x17c>
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d075      	beq.n	8011c60 <__ssvfiscanf_r+0x1bc>
 8011b74:	2303      	movs	r3, #3
 8011b76:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011b78:	230a      	movs	r3, #10
 8011b7a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011b7c:	e088      	b.n	8011c90 <__ssvfiscanf_r+0x1ec>
 8011b7e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011b80:	fb02 1103 	mla	r1, r2, r3, r1
 8011b84:	3930      	subs	r1, #48	@ 0x30
 8011b86:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011b88:	4655      	mov	r5, sl
 8011b8a:	e7d2      	b.n	8011b32 <__ssvfiscanf_r+0x8e>
 8011b8c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011b90:	2a20      	cmp	r2, #32
 8011b92:	d8ef      	bhi.n	8011b74 <__ssvfiscanf_r+0xd0>
 8011b94:	a101      	add	r1, pc, #4	@ (adr r1, 8011b9c <__ssvfiscanf_r+0xf8>)
 8011b96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011b9a:	bf00      	nop
 8011b9c:	08011c6f 	.word	0x08011c6f
 8011ba0:	08011b75 	.word	0x08011b75
 8011ba4:	08011b75 	.word	0x08011b75
 8011ba8:	08011cc9 	.word	0x08011cc9
 8011bac:	08011b75 	.word	0x08011b75
 8011bb0:	08011b75 	.word	0x08011b75
 8011bb4:	08011b75 	.word	0x08011b75
 8011bb8:	08011b75 	.word	0x08011b75
 8011bbc:	08011b75 	.word	0x08011b75
 8011bc0:	08011b75 	.word	0x08011b75
 8011bc4:	08011b75 	.word	0x08011b75
 8011bc8:	08011cdf 	.word	0x08011cdf
 8011bcc:	08011cc5 	.word	0x08011cc5
 8011bd0:	08011c27 	.word	0x08011c27
 8011bd4:	08011c27 	.word	0x08011c27
 8011bd8:	08011c27 	.word	0x08011c27
 8011bdc:	08011b75 	.word	0x08011b75
 8011be0:	08011c81 	.word	0x08011c81
 8011be4:	08011b75 	.word	0x08011b75
 8011be8:	08011b75 	.word	0x08011b75
 8011bec:	08011b75 	.word	0x08011b75
 8011bf0:	08011b75 	.word	0x08011b75
 8011bf4:	08011cef 	.word	0x08011cef
 8011bf8:	08011c89 	.word	0x08011c89
 8011bfc:	08011c67 	.word	0x08011c67
 8011c00:	08011b75 	.word	0x08011b75
 8011c04:	08011b75 	.word	0x08011b75
 8011c08:	08011ceb 	.word	0x08011ceb
 8011c0c:	08011b75 	.word	0x08011b75
 8011c10:	08011cc5 	.word	0x08011cc5
 8011c14:	08011b75 	.word	0x08011b75
 8011c18:	08011b75 	.word	0x08011b75
 8011c1c:	08011c6f 	.word	0x08011c6f
 8011c20:	3b45      	subs	r3, #69	@ 0x45
 8011c22:	2b02      	cmp	r3, #2
 8011c24:	d8a6      	bhi.n	8011b74 <__ssvfiscanf_r+0xd0>
 8011c26:	2305      	movs	r3, #5
 8011c28:	e031      	b.n	8011c8e <__ssvfiscanf_r+0x1ea>
 8011c2a:	6863      	ldr	r3, [r4, #4]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	dd0d      	ble.n	8011c4c <__ssvfiscanf_r+0x1a8>
 8011c30:	6823      	ldr	r3, [r4, #0]
 8011c32:	781a      	ldrb	r2, [r3, #0]
 8011c34:	454a      	cmp	r2, r9
 8011c36:	f040 80a6 	bne.w	8011d86 <__ssvfiscanf_r+0x2e2>
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	6862      	ldr	r2, [r4, #4]
 8011c3e:	6023      	str	r3, [r4, #0]
 8011c40:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011c42:	3a01      	subs	r2, #1
 8011c44:	3301      	adds	r3, #1
 8011c46:	6062      	str	r2, [r4, #4]
 8011c48:	9345      	str	r3, [sp, #276]	@ 0x114
 8011c4a:	e753      	b.n	8011af4 <__ssvfiscanf_r+0x50>
 8011c4c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c4e:	4621      	mov	r1, r4
 8011c50:	4630      	mov	r0, r6
 8011c52:	4798      	blx	r3
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d0eb      	beq.n	8011c30 <__ssvfiscanf_r+0x18c>
 8011c58:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	f040 808b 	bne.w	8011d76 <__ssvfiscanf_r+0x2d2>
 8011c60:	f04f 30ff 	mov.w	r0, #4294967295
 8011c64:	e08b      	b.n	8011d7e <__ssvfiscanf_r+0x2da>
 8011c66:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011c68:	f042 0220 	orr.w	r2, r2, #32
 8011c6c:	9241      	str	r2, [sp, #260]	@ 0x104
 8011c6e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c74:	9241      	str	r2, [sp, #260]	@ 0x104
 8011c76:	2210      	movs	r2, #16
 8011c78:	2b6e      	cmp	r3, #110	@ 0x6e
 8011c7a:	9242      	str	r2, [sp, #264]	@ 0x108
 8011c7c:	d902      	bls.n	8011c84 <__ssvfiscanf_r+0x1e0>
 8011c7e:	e005      	b.n	8011c8c <__ssvfiscanf_r+0x1e8>
 8011c80:	2300      	movs	r3, #0
 8011c82:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c84:	2303      	movs	r3, #3
 8011c86:	e002      	b.n	8011c8e <__ssvfiscanf_r+0x1ea>
 8011c88:	2308      	movs	r3, #8
 8011c8a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c8c:	2304      	movs	r3, #4
 8011c8e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011c90:	6863      	ldr	r3, [r4, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	dd39      	ble.n	8011d0a <__ssvfiscanf_r+0x266>
 8011c96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011c98:	0659      	lsls	r1, r3, #25
 8011c9a:	d404      	bmi.n	8011ca6 <__ssvfiscanf_r+0x202>
 8011c9c:	6823      	ldr	r3, [r4, #0]
 8011c9e:	781a      	ldrb	r2, [r3, #0]
 8011ca0:	5cba      	ldrb	r2, [r7, r2]
 8011ca2:	0712      	lsls	r2, r2, #28
 8011ca4:	d438      	bmi.n	8011d18 <__ssvfiscanf_r+0x274>
 8011ca6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011ca8:	2b02      	cmp	r3, #2
 8011caa:	dc47      	bgt.n	8011d3c <__ssvfiscanf_r+0x298>
 8011cac:	466b      	mov	r3, sp
 8011cae:	4622      	mov	r2, r4
 8011cb0:	a941      	add	r1, sp, #260	@ 0x104
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f000 f86c 	bl	8011d90 <_scanf_chars>
 8011cb8:	2801      	cmp	r0, #1
 8011cba:	d064      	beq.n	8011d86 <__ssvfiscanf_r+0x2e2>
 8011cbc:	2802      	cmp	r0, #2
 8011cbe:	f47f af19 	bne.w	8011af4 <__ssvfiscanf_r+0x50>
 8011cc2:	e7c9      	b.n	8011c58 <__ssvfiscanf_r+0x1b4>
 8011cc4:	220a      	movs	r2, #10
 8011cc6:	e7d7      	b.n	8011c78 <__ssvfiscanf_r+0x1d4>
 8011cc8:	4629      	mov	r1, r5
 8011cca:	4640      	mov	r0, r8
 8011ccc:	f000 fa5a 	bl	8012184 <__sccl>
 8011cd0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cd6:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cd8:	4605      	mov	r5, r0
 8011cda:	2301      	movs	r3, #1
 8011cdc:	e7d7      	b.n	8011c8e <__ssvfiscanf_r+0x1ea>
 8011cde:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ce4:	9341      	str	r3, [sp, #260]	@ 0x104
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	e7d1      	b.n	8011c8e <__ssvfiscanf_r+0x1ea>
 8011cea:	2302      	movs	r3, #2
 8011cec:	e7cf      	b.n	8011c8e <__ssvfiscanf_r+0x1ea>
 8011cee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011cf0:	06c3      	lsls	r3, r0, #27
 8011cf2:	f53f aeff 	bmi.w	8011af4 <__ssvfiscanf_r+0x50>
 8011cf6:	9b00      	ldr	r3, [sp, #0]
 8011cf8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011cfa:	1d19      	adds	r1, r3, #4
 8011cfc:	9100      	str	r1, [sp, #0]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	07c0      	lsls	r0, r0, #31
 8011d02:	bf4c      	ite	mi
 8011d04:	801a      	strhmi	r2, [r3, #0]
 8011d06:	601a      	strpl	r2, [r3, #0]
 8011d08:	e6f4      	b.n	8011af4 <__ssvfiscanf_r+0x50>
 8011d0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	4630      	mov	r0, r6
 8011d10:	4798      	blx	r3
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d0bf      	beq.n	8011c96 <__ssvfiscanf_r+0x1f2>
 8011d16:	e79f      	b.n	8011c58 <__ssvfiscanf_r+0x1b4>
 8011d18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011d1a:	3201      	adds	r2, #1
 8011d1c:	9245      	str	r2, [sp, #276]	@ 0x114
 8011d1e:	6862      	ldr	r2, [r4, #4]
 8011d20:	3a01      	subs	r2, #1
 8011d22:	2a00      	cmp	r2, #0
 8011d24:	6062      	str	r2, [r4, #4]
 8011d26:	dd02      	ble.n	8011d2e <__ssvfiscanf_r+0x28a>
 8011d28:	3301      	adds	r3, #1
 8011d2a:	6023      	str	r3, [r4, #0]
 8011d2c:	e7b6      	b.n	8011c9c <__ssvfiscanf_r+0x1f8>
 8011d2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d30:	4621      	mov	r1, r4
 8011d32:	4630      	mov	r0, r6
 8011d34:	4798      	blx	r3
 8011d36:	2800      	cmp	r0, #0
 8011d38:	d0b0      	beq.n	8011c9c <__ssvfiscanf_r+0x1f8>
 8011d3a:	e78d      	b.n	8011c58 <__ssvfiscanf_r+0x1b4>
 8011d3c:	2b04      	cmp	r3, #4
 8011d3e:	dc0f      	bgt.n	8011d60 <__ssvfiscanf_r+0x2bc>
 8011d40:	466b      	mov	r3, sp
 8011d42:	4622      	mov	r2, r4
 8011d44:	a941      	add	r1, sp, #260	@ 0x104
 8011d46:	4630      	mov	r0, r6
 8011d48:	f000 f87c 	bl	8011e44 <_scanf_i>
 8011d4c:	e7b4      	b.n	8011cb8 <__ssvfiscanf_r+0x214>
 8011d4e:	bf00      	nop
 8011d50:	080119f1 	.word	0x080119f1
 8011d54:	08011a6b 	.word	0x08011a6b
 8011d58:	08012da1 	.word	0x08012da1
 8011d5c:	08012ced 	.word	0x08012ced
 8011d60:	4b0a      	ldr	r3, [pc, #40]	@ (8011d8c <__ssvfiscanf_r+0x2e8>)
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	f43f aec6 	beq.w	8011af4 <__ssvfiscanf_r+0x50>
 8011d68:	466b      	mov	r3, sp
 8011d6a:	4622      	mov	r2, r4
 8011d6c:	a941      	add	r1, sp, #260	@ 0x104
 8011d6e:	4630      	mov	r0, r6
 8011d70:	f7fd f91a 	bl	800efa8 <_scanf_float>
 8011d74:	e7a0      	b.n	8011cb8 <__ssvfiscanf_r+0x214>
 8011d76:	89a3      	ldrh	r3, [r4, #12]
 8011d78:	065b      	lsls	r3, r3, #25
 8011d7a:	f53f af71 	bmi.w	8011c60 <__ssvfiscanf_r+0x1bc>
 8011d7e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d86:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011d88:	e7f9      	b.n	8011d7e <__ssvfiscanf_r+0x2da>
 8011d8a:	bf00      	nop
 8011d8c:	0800efa9 	.word	0x0800efa9

08011d90 <_scanf_chars>:
 8011d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d94:	4615      	mov	r5, r2
 8011d96:	688a      	ldr	r2, [r1, #8]
 8011d98:	4680      	mov	r8, r0
 8011d9a:	460c      	mov	r4, r1
 8011d9c:	b932      	cbnz	r2, 8011dac <_scanf_chars+0x1c>
 8011d9e:	698a      	ldr	r2, [r1, #24]
 8011da0:	2a00      	cmp	r2, #0
 8011da2:	bf14      	ite	ne
 8011da4:	f04f 32ff 	movne.w	r2, #4294967295
 8011da8:	2201      	moveq	r2, #1
 8011daa:	608a      	str	r2, [r1, #8]
 8011dac:	6822      	ldr	r2, [r4, #0]
 8011dae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011e40 <_scanf_chars+0xb0>
 8011db2:	06d1      	lsls	r1, r2, #27
 8011db4:	bf5f      	itttt	pl
 8011db6:	681a      	ldrpl	r2, [r3, #0]
 8011db8:	1d11      	addpl	r1, r2, #4
 8011dba:	6019      	strpl	r1, [r3, #0]
 8011dbc:	6816      	ldrpl	r6, [r2, #0]
 8011dbe:	2700      	movs	r7, #0
 8011dc0:	69a0      	ldr	r0, [r4, #24]
 8011dc2:	b188      	cbz	r0, 8011de8 <_scanf_chars+0x58>
 8011dc4:	2801      	cmp	r0, #1
 8011dc6:	d107      	bne.n	8011dd8 <_scanf_chars+0x48>
 8011dc8:	682b      	ldr	r3, [r5, #0]
 8011dca:	781a      	ldrb	r2, [r3, #0]
 8011dcc:	6963      	ldr	r3, [r4, #20]
 8011dce:	5c9b      	ldrb	r3, [r3, r2]
 8011dd0:	b953      	cbnz	r3, 8011de8 <_scanf_chars+0x58>
 8011dd2:	2f00      	cmp	r7, #0
 8011dd4:	d031      	beq.n	8011e3a <_scanf_chars+0xaa>
 8011dd6:	e022      	b.n	8011e1e <_scanf_chars+0x8e>
 8011dd8:	2802      	cmp	r0, #2
 8011dda:	d120      	bne.n	8011e1e <_scanf_chars+0x8e>
 8011ddc:	682b      	ldr	r3, [r5, #0]
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011de4:	071b      	lsls	r3, r3, #28
 8011de6:	d41a      	bmi.n	8011e1e <_scanf_chars+0x8e>
 8011de8:	6823      	ldr	r3, [r4, #0]
 8011dea:	06da      	lsls	r2, r3, #27
 8011dec:	bf5e      	ittt	pl
 8011dee:	682b      	ldrpl	r3, [r5, #0]
 8011df0:	781b      	ldrbpl	r3, [r3, #0]
 8011df2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011df6:	682a      	ldr	r2, [r5, #0]
 8011df8:	686b      	ldr	r3, [r5, #4]
 8011dfa:	3201      	adds	r2, #1
 8011dfc:	602a      	str	r2, [r5, #0]
 8011dfe:	68a2      	ldr	r2, [r4, #8]
 8011e00:	3b01      	subs	r3, #1
 8011e02:	3a01      	subs	r2, #1
 8011e04:	606b      	str	r3, [r5, #4]
 8011e06:	3701      	adds	r7, #1
 8011e08:	60a2      	str	r2, [r4, #8]
 8011e0a:	b142      	cbz	r2, 8011e1e <_scanf_chars+0x8e>
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	dcd7      	bgt.n	8011dc0 <_scanf_chars+0x30>
 8011e10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011e14:	4629      	mov	r1, r5
 8011e16:	4640      	mov	r0, r8
 8011e18:	4798      	blx	r3
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	d0d0      	beq.n	8011dc0 <_scanf_chars+0x30>
 8011e1e:	6823      	ldr	r3, [r4, #0]
 8011e20:	f013 0310 	ands.w	r3, r3, #16
 8011e24:	d105      	bne.n	8011e32 <_scanf_chars+0xa2>
 8011e26:	68e2      	ldr	r2, [r4, #12]
 8011e28:	3201      	adds	r2, #1
 8011e2a:	60e2      	str	r2, [r4, #12]
 8011e2c:	69a2      	ldr	r2, [r4, #24]
 8011e2e:	b102      	cbz	r2, 8011e32 <_scanf_chars+0xa2>
 8011e30:	7033      	strb	r3, [r6, #0]
 8011e32:	6923      	ldr	r3, [r4, #16]
 8011e34:	443b      	add	r3, r7
 8011e36:	6123      	str	r3, [r4, #16]
 8011e38:	2000      	movs	r0, #0
 8011e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e3e:	bf00      	nop
 8011e40:	08012da1 	.word	0x08012da1

08011e44 <_scanf_i>:
 8011e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e48:	4698      	mov	r8, r3
 8011e4a:	4b74      	ldr	r3, [pc, #464]	@ (801201c <_scanf_i+0x1d8>)
 8011e4c:	460c      	mov	r4, r1
 8011e4e:	4682      	mov	sl, r0
 8011e50:	4616      	mov	r6, r2
 8011e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e56:	b087      	sub	sp, #28
 8011e58:	ab03      	add	r3, sp, #12
 8011e5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e5e:	4b70      	ldr	r3, [pc, #448]	@ (8012020 <_scanf_i+0x1dc>)
 8011e60:	69a1      	ldr	r1, [r4, #24]
 8011e62:	4a70      	ldr	r2, [pc, #448]	@ (8012024 <_scanf_i+0x1e0>)
 8011e64:	2903      	cmp	r1, #3
 8011e66:	bf08      	it	eq
 8011e68:	461a      	moveq	r2, r3
 8011e6a:	68a3      	ldr	r3, [r4, #8]
 8011e6c:	9201      	str	r2, [sp, #4]
 8011e6e:	1e5a      	subs	r2, r3, #1
 8011e70:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011e74:	bf88      	it	hi
 8011e76:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011e7a:	4627      	mov	r7, r4
 8011e7c:	bf82      	ittt	hi
 8011e7e:	eb03 0905 	addhi.w	r9, r3, r5
 8011e82:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011e86:	60a3      	strhi	r3, [r4, #8]
 8011e88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011e8c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011e90:	bf98      	it	ls
 8011e92:	f04f 0900 	movls.w	r9, #0
 8011e96:	6023      	str	r3, [r4, #0]
 8011e98:	463d      	mov	r5, r7
 8011e9a:	f04f 0b00 	mov.w	fp, #0
 8011e9e:	6831      	ldr	r1, [r6, #0]
 8011ea0:	ab03      	add	r3, sp, #12
 8011ea2:	7809      	ldrb	r1, [r1, #0]
 8011ea4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011ea8:	2202      	movs	r2, #2
 8011eaa:	f7ee f991 	bl	80001d0 <memchr>
 8011eae:	b328      	cbz	r0, 8011efc <_scanf_i+0xb8>
 8011eb0:	f1bb 0f01 	cmp.w	fp, #1
 8011eb4:	d159      	bne.n	8011f6a <_scanf_i+0x126>
 8011eb6:	6862      	ldr	r2, [r4, #4]
 8011eb8:	b92a      	cbnz	r2, 8011ec6 <_scanf_i+0x82>
 8011eba:	6822      	ldr	r2, [r4, #0]
 8011ebc:	2108      	movs	r1, #8
 8011ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ec2:	6061      	str	r1, [r4, #4]
 8011ec4:	6022      	str	r2, [r4, #0]
 8011ec6:	6822      	ldr	r2, [r4, #0]
 8011ec8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011ecc:	6022      	str	r2, [r4, #0]
 8011ece:	68a2      	ldr	r2, [r4, #8]
 8011ed0:	1e51      	subs	r1, r2, #1
 8011ed2:	60a1      	str	r1, [r4, #8]
 8011ed4:	b192      	cbz	r2, 8011efc <_scanf_i+0xb8>
 8011ed6:	6832      	ldr	r2, [r6, #0]
 8011ed8:	1c51      	adds	r1, r2, #1
 8011eda:	6031      	str	r1, [r6, #0]
 8011edc:	7812      	ldrb	r2, [r2, #0]
 8011ede:	f805 2b01 	strb.w	r2, [r5], #1
 8011ee2:	6872      	ldr	r2, [r6, #4]
 8011ee4:	3a01      	subs	r2, #1
 8011ee6:	2a00      	cmp	r2, #0
 8011ee8:	6072      	str	r2, [r6, #4]
 8011eea:	dc07      	bgt.n	8011efc <_scanf_i+0xb8>
 8011eec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011ef0:	4631      	mov	r1, r6
 8011ef2:	4650      	mov	r0, sl
 8011ef4:	4790      	blx	r2
 8011ef6:	2800      	cmp	r0, #0
 8011ef8:	f040 8085 	bne.w	8012006 <_scanf_i+0x1c2>
 8011efc:	f10b 0b01 	add.w	fp, fp, #1
 8011f00:	f1bb 0f03 	cmp.w	fp, #3
 8011f04:	d1cb      	bne.n	8011e9e <_scanf_i+0x5a>
 8011f06:	6863      	ldr	r3, [r4, #4]
 8011f08:	b90b      	cbnz	r3, 8011f0e <_scanf_i+0xca>
 8011f0a:	230a      	movs	r3, #10
 8011f0c:	6063      	str	r3, [r4, #4]
 8011f0e:	6863      	ldr	r3, [r4, #4]
 8011f10:	4945      	ldr	r1, [pc, #276]	@ (8012028 <_scanf_i+0x1e4>)
 8011f12:	6960      	ldr	r0, [r4, #20]
 8011f14:	1ac9      	subs	r1, r1, r3
 8011f16:	f000 f935 	bl	8012184 <__sccl>
 8011f1a:	f04f 0b00 	mov.w	fp, #0
 8011f1e:	68a3      	ldr	r3, [r4, #8]
 8011f20:	6822      	ldr	r2, [r4, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d03d      	beq.n	8011fa2 <_scanf_i+0x15e>
 8011f26:	6831      	ldr	r1, [r6, #0]
 8011f28:	6960      	ldr	r0, [r4, #20]
 8011f2a:	f891 c000 	ldrb.w	ip, [r1]
 8011f2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d035      	beq.n	8011fa2 <_scanf_i+0x15e>
 8011f36:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011f3a:	d124      	bne.n	8011f86 <_scanf_i+0x142>
 8011f3c:	0510      	lsls	r0, r2, #20
 8011f3e:	d522      	bpl.n	8011f86 <_scanf_i+0x142>
 8011f40:	f10b 0b01 	add.w	fp, fp, #1
 8011f44:	f1b9 0f00 	cmp.w	r9, #0
 8011f48:	d003      	beq.n	8011f52 <_scanf_i+0x10e>
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f50:	60a3      	str	r3, [r4, #8]
 8011f52:	6873      	ldr	r3, [r6, #4]
 8011f54:	3b01      	subs	r3, #1
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	6073      	str	r3, [r6, #4]
 8011f5a:	dd1b      	ble.n	8011f94 <_scanf_i+0x150>
 8011f5c:	6833      	ldr	r3, [r6, #0]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	6033      	str	r3, [r6, #0]
 8011f62:	68a3      	ldr	r3, [r4, #8]
 8011f64:	3b01      	subs	r3, #1
 8011f66:	60a3      	str	r3, [r4, #8]
 8011f68:	e7d9      	b.n	8011f1e <_scanf_i+0xda>
 8011f6a:	f1bb 0f02 	cmp.w	fp, #2
 8011f6e:	d1ae      	bne.n	8011ece <_scanf_i+0x8a>
 8011f70:	6822      	ldr	r2, [r4, #0]
 8011f72:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011f76:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011f7a:	d1c4      	bne.n	8011f06 <_scanf_i+0xc2>
 8011f7c:	2110      	movs	r1, #16
 8011f7e:	6061      	str	r1, [r4, #4]
 8011f80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011f84:	e7a2      	b.n	8011ecc <_scanf_i+0x88>
 8011f86:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011f8a:	6022      	str	r2, [r4, #0]
 8011f8c:	780b      	ldrb	r3, [r1, #0]
 8011f8e:	f805 3b01 	strb.w	r3, [r5], #1
 8011f92:	e7de      	b.n	8011f52 <_scanf_i+0x10e>
 8011f94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011f98:	4631      	mov	r1, r6
 8011f9a:	4650      	mov	r0, sl
 8011f9c:	4798      	blx	r3
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d0df      	beq.n	8011f62 <_scanf_i+0x11e>
 8011fa2:	6823      	ldr	r3, [r4, #0]
 8011fa4:	05d9      	lsls	r1, r3, #23
 8011fa6:	d50d      	bpl.n	8011fc4 <_scanf_i+0x180>
 8011fa8:	42bd      	cmp	r5, r7
 8011faa:	d909      	bls.n	8011fc0 <_scanf_i+0x17c>
 8011fac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011fb4:	4632      	mov	r2, r6
 8011fb6:	4650      	mov	r0, sl
 8011fb8:	4798      	blx	r3
 8011fba:	f105 39ff 	add.w	r9, r5, #4294967295
 8011fbe:	464d      	mov	r5, r9
 8011fc0:	42bd      	cmp	r5, r7
 8011fc2:	d028      	beq.n	8012016 <_scanf_i+0x1d2>
 8011fc4:	6822      	ldr	r2, [r4, #0]
 8011fc6:	f012 0210 	ands.w	r2, r2, #16
 8011fca:	d113      	bne.n	8011ff4 <_scanf_i+0x1b0>
 8011fcc:	702a      	strb	r2, [r5, #0]
 8011fce:	6863      	ldr	r3, [r4, #4]
 8011fd0:	9e01      	ldr	r6, [sp, #4]
 8011fd2:	4639      	mov	r1, r7
 8011fd4:	4650      	mov	r0, sl
 8011fd6:	47b0      	blx	r6
 8011fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8011fdc:	6821      	ldr	r1, [r4, #0]
 8011fde:	1d1a      	adds	r2, r3, #4
 8011fe0:	f8c8 2000 	str.w	r2, [r8]
 8011fe4:	f011 0f20 	tst.w	r1, #32
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	d00f      	beq.n	801200c <_scanf_i+0x1c8>
 8011fec:	6018      	str	r0, [r3, #0]
 8011fee:	68e3      	ldr	r3, [r4, #12]
 8011ff0:	3301      	adds	r3, #1
 8011ff2:	60e3      	str	r3, [r4, #12]
 8011ff4:	6923      	ldr	r3, [r4, #16]
 8011ff6:	1bed      	subs	r5, r5, r7
 8011ff8:	445d      	add	r5, fp
 8011ffa:	442b      	add	r3, r5
 8011ffc:	6123      	str	r3, [r4, #16]
 8011ffe:	2000      	movs	r0, #0
 8012000:	b007      	add	sp, #28
 8012002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012006:	f04f 0b00 	mov.w	fp, #0
 801200a:	e7ca      	b.n	8011fa2 <_scanf_i+0x15e>
 801200c:	07ca      	lsls	r2, r1, #31
 801200e:	bf4c      	ite	mi
 8012010:	8018      	strhmi	r0, [r3, #0]
 8012012:	6018      	strpl	r0, [r3, #0]
 8012014:	e7eb      	b.n	8011fee <_scanf_i+0x1aa>
 8012016:	2001      	movs	r0, #1
 8012018:	e7f2      	b.n	8012000 <_scanf_i+0x1bc>
 801201a:	bf00      	nop
 801201c:	08012b04 	.word	0x08012b04
 8012020:	0800e6f9 	.word	0x0800e6f9
 8012024:	08011725 	.word	0x08011725
 8012028:	08012d08 	.word	0x08012d08

0801202c <__sflush_r>:
 801202c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012034:	0716      	lsls	r6, r2, #28
 8012036:	4605      	mov	r5, r0
 8012038:	460c      	mov	r4, r1
 801203a:	d454      	bmi.n	80120e6 <__sflush_r+0xba>
 801203c:	684b      	ldr	r3, [r1, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	dc02      	bgt.n	8012048 <__sflush_r+0x1c>
 8012042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012044:	2b00      	cmp	r3, #0
 8012046:	dd48      	ble.n	80120da <__sflush_r+0xae>
 8012048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801204a:	2e00      	cmp	r6, #0
 801204c:	d045      	beq.n	80120da <__sflush_r+0xae>
 801204e:	2300      	movs	r3, #0
 8012050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012054:	682f      	ldr	r7, [r5, #0]
 8012056:	6a21      	ldr	r1, [r4, #32]
 8012058:	602b      	str	r3, [r5, #0]
 801205a:	d030      	beq.n	80120be <__sflush_r+0x92>
 801205c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801205e:	89a3      	ldrh	r3, [r4, #12]
 8012060:	0759      	lsls	r1, r3, #29
 8012062:	d505      	bpl.n	8012070 <__sflush_r+0x44>
 8012064:	6863      	ldr	r3, [r4, #4]
 8012066:	1ad2      	subs	r2, r2, r3
 8012068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801206a:	b10b      	cbz	r3, 8012070 <__sflush_r+0x44>
 801206c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801206e:	1ad2      	subs	r2, r2, r3
 8012070:	2300      	movs	r3, #0
 8012072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012074:	6a21      	ldr	r1, [r4, #32]
 8012076:	4628      	mov	r0, r5
 8012078:	47b0      	blx	r6
 801207a:	1c43      	adds	r3, r0, #1
 801207c:	89a3      	ldrh	r3, [r4, #12]
 801207e:	d106      	bne.n	801208e <__sflush_r+0x62>
 8012080:	6829      	ldr	r1, [r5, #0]
 8012082:	291d      	cmp	r1, #29
 8012084:	d82b      	bhi.n	80120de <__sflush_r+0xb2>
 8012086:	4a2a      	ldr	r2, [pc, #168]	@ (8012130 <__sflush_r+0x104>)
 8012088:	40ca      	lsrs	r2, r1
 801208a:	07d6      	lsls	r6, r2, #31
 801208c:	d527      	bpl.n	80120de <__sflush_r+0xb2>
 801208e:	2200      	movs	r2, #0
 8012090:	6062      	str	r2, [r4, #4]
 8012092:	04d9      	lsls	r1, r3, #19
 8012094:	6922      	ldr	r2, [r4, #16]
 8012096:	6022      	str	r2, [r4, #0]
 8012098:	d504      	bpl.n	80120a4 <__sflush_r+0x78>
 801209a:	1c42      	adds	r2, r0, #1
 801209c:	d101      	bne.n	80120a2 <__sflush_r+0x76>
 801209e:	682b      	ldr	r3, [r5, #0]
 80120a0:	b903      	cbnz	r3, 80120a4 <__sflush_r+0x78>
 80120a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80120a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120a6:	602f      	str	r7, [r5, #0]
 80120a8:	b1b9      	cbz	r1, 80120da <__sflush_r+0xae>
 80120aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120ae:	4299      	cmp	r1, r3
 80120b0:	d002      	beq.n	80120b8 <__sflush_r+0x8c>
 80120b2:	4628      	mov	r0, r5
 80120b4:	f7fe fa88 	bl	80105c8 <_free_r>
 80120b8:	2300      	movs	r3, #0
 80120ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80120bc:	e00d      	b.n	80120da <__sflush_r+0xae>
 80120be:	2301      	movs	r3, #1
 80120c0:	4628      	mov	r0, r5
 80120c2:	47b0      	blx	r6
 80120c4:	4602      	mov	r2, r0
 80120c6:	1c50      	adds	r0, r2, #1
 80120c8:	d1c9      	bne.n	801205e <__sflush_r+0x32>
 80120ca:	682b      	ldr	r3, [r5, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d0c6      	beq.n	801205e <__sflush_r+0x32>
 80120d0:	2b1d      	cmp	r3, #29
 80120d2:	d001      	beq.n	80120d8 <__sflush_r+0xac>
 80120d4:	2b16      	cmp	r3, #22
 80120d6:	d11e      	bne.n	8012116 <__sflush_r+0xea>
 80120d8:	602f      	str	r7, [r5, #0]
 80120da:	2000      	movs	r0, #0
 80120dc:	e022      	b.n	8012124 <__sflush_r+0xf8>
 80120de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120e2:	b21b      	sxth	r3, r3
 80120e4:	e01b      	b.n	801211e <__sflush_r+0xf2>
 80120e6:	690f      	ldr	r7, [r1, #16]
 80120e8:	2f00      	cmp	r7, #0
 80120ea:	d0f6      	beq.n	80120da <__sflush_r+0xae>
 80120ec:	0793      	lsls	r3, r2, #30
 80120ee:	680e      	ldr	r6, [r1, #0]
 80120f0:	bf08      	it	eq
 80120f2:	694b      	ldreq	r3, [r1, #20]
 80120f4:	600f      	str	r7, [r1, #0]
 80120f6:	bf18      	it	ne
 80120f8:	2300      	movne	r3, #0
 80120fa:	eba6 0807 	sub.w	r8, r6, r7
 80120fe:	608b      	str	r3, [r1, #8]
 8012100:	f1b8 0f00 	cmp.w	r8, #0
 8012104:	dde9      	ble.n	80120da <__sflush_r+0xae>
 8012106:	6a21      	ldr	r1, [r4, #32]
 8012108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801210a:	4643      	mov	r3, r8
 801210c:	463a      	mov	r2, r7
 801210e:	4628      	mov	r0, r5
 8012110:	47b0      	blx	r6
 8012112:	2800      	cmp	r0, #0
 8012114:	dc08      	bgt.n	8012128 <__sflush_r+0xfc>
 8012116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801211a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801211e:	81a3      	strh	r3, [r4, #12]
 8012120:	f04f 30ff 	mov.w	r0, #4294967295
 8012124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012128:	4407      	add	r7, r0
 801212a:	eba8 0800 	sub.w	r8, r8, r0
 801212e:	e7e7      	b.n	8012100 <__sflush_r+0xd4>
 8012130:	20400001 	.word	0x20400001

08012134 <_fflush_r>:
 8012134:	b538      	push	{r3, r4, r5, lr}
 8012136:	690b      	ldr	r3, [r1, #16]
 8012138:	4605      	mov	r5, r0
 801213a:	460c      	mov	r4, r1
 801213c:	b913      	cbnz	r3, 8012144 <_fflush_r+0x10>
 801213e:	2500      	movs	r5, #0
 8012140:	4628      	mov	r0, r5
 8012142:	bd38      	pop	{r3, r4, r5, pc}
 8012144:	b118      	cbz	r0, 801214e <_fflush_r+0x1a>
 8012146:	6a03      	ldr	r3, [r0, #32]
 8012148:	b90b      	cbnz	r3, 801214e <_fflush_r+0x1a>
 801214a:	f7fd f9c7 	bl	800f4dc <__sinit>
 801214e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d0f3      	beq.n	801213e <_fflush_r+0xa>
 8012156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012158:	07d0      	lsls	r0, r2, #31
 801215a:	d404      	bmi.n	8012166 <_fflush_r+0x32>
 801215c:	0599      	lsls	r1, r3, #22
 801215e:	d402      	bmi.n	8012166 <_fflush_r+0x32>
 8012160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012162:	f7fd fbb8 	bl	800f8d6 <__retarget_lock_acquire_recursive>
 8012166:	4628      	mov	r0, r5
 8012168:	4621      	mov	r1, r4
 801216a:	f7ff ff5f 	bl	801202c <__sflush_r>
 801216e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012170:	07da      	lsls	r2, r3, #31
 8012172:	4605      	mov	r5, r0
 8012174:	d4e4      	bmi.n	8012140 <_fflush_r+0xc>
 8012176:	89a3      	ldrh	r3, [r4, #12]
 8012178:	059b      	lsls	r3, r3, #22
 801217a:	d4e1      	bmi.n	8012140 <_fflush_r+0xc>
 801217c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801217e:	f7fd fbab 	bl	800f8d8 <__retarget_lock_release_recursive>
 8012182:	e7dd      	b.n	8012140 <_fflush_r+0xc>

08012184 <__sccl>:
 8012184:	b570      	push	{r4, r5, r6, lr}
 8012186:	780b      	ldrb	r3, [r1, #0]
 8012188:	4604      	mov	r4, r0
 801218a:	2b5e      	cmp	r3, #94	@ 0x5e
 801218c:	bf0b      	itete	eq
 801218e:	784b      	ldrbeq	r3, [r1, #1]
 8012190:	1c4a      	addne	r2, r1, #1
 8012192:	1c8a      	addeq	r2, r1, #2
 8012194:	2100      	movne	r1, #0
 8012196:	bf08      	it	eq
 8012198:	2101      	moveq	r1, #1
 801219a:	3801      	subs	r0, #1
 801219c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80121a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80121a4:	42a8      	cmp	r0, r5
 80121a6:	d1fb      	bne.n	80121a0 <__sccl+0x1c>
 80121a8:	b90b      	cbnz	r3, 80121ae <__sccl+0x2a>
 80121aa:	1e50      	subs	r0, r2, #1
 80121ac:	bd70      	pop	{r4, r5, r6, pc}
 80121ae:	f081 0101 	eor.w	r1, r1, #1
 80121b2:	54e1      	strb	r1, [r4, r3]
 80121b4:	4610      	mov	r0, r2
 80121b6:	4602      	mov	r2, r0
 80121b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80121bc:	2d2d      	cmp	r5, #45	@ 0x2d
 80121be:	d005      	beq.n	80121cc <__sccl+0x48>
 80121c0:	2d5d      	cmp	r5, #93	@ 0x5d
 80121c2:	d016      	beq.n	80121f2 <__sccl+0x6e>
 80121c4:	2d00      	cmp	r5, #0
 80121c6:	d0f1      	beq.n	80121ac <__sccl+0x28>
 80121c8:	462b      	mov	r3, r5
 80121ca:	e7f2      	b.n	80121b2 <__sccl+0x2e>
 80121cc:	7846      	ldrb	r6, [r0, #1]
 80121ce:	2e5d      	cmp	r6, #93	@ 0x5d
 80121d0:	d0fa      	beq.n	80121c8 <__sccl+0x44>
 80121d2:	42b3      	cmp	r3, r6
 80121d4:	dcf8      	bgt.n	80121c8 <__sccl+0x44>
 80121d6:	3002      	adds	r0, #2
 80121d8:	461a      	mov	r2, r3
 80121da:	3201      	adds	r2, #1
 80121dc:	4296      	cmp	r6, r2
 80121de:	54a1      	strb	r1, [r4, r2]
 80121e0:	dcfb      	bgt.n	80121da <__sccl+0x56>
 80121e2:	1af2      	subs	r2, r6, r3
 80121e4:	3a01      	subs	r2, #1
 80121e6:	1c5d      	adds	r5, r3, #1
 80121e8:	42b3      	cmp	r3, r6
 80121ea:	bfa8      	it	ge
 80121ec:	2200      	movge	r2, #0
 80121ee:	18ab      	adds	r3, r5, r2
 80121f0:	e7e1      	b.n	80121b6 <__sccl+0x32>
 80121f2:	4610      	mov	r0, r2
 80121f4:	e7da      	b.n	80121ac <__sccl+0x28>

080121f6 <__submore>:
 80121f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fa:	460c      	mov	r4, r1
 80121fc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80121fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012202:	4299      	cmp	r1, r3
 8012204:	d11d      	bne.n	8012242 <__submore+0x4c>
 8012206:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801220a:	f7fb fb67 	bl	800d8dc <_malloc_r>
 801220e:	b918      	cbnz	r0, 8012218 <__submore+0x22>
 8012210:	f04f 30ff 	mov.w	r0, #4294967295
 8012214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801221c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801221e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012222:	6360      	str	r0, [r4, #52]	@ 0x34
 8012224:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012228:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801222c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012230:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012234:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012238:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801223c:	6020      	str	r0, [r4, #0]
 801223e:	2000      	movs	r0, #0
 8012240:	e7e8      	b.n	8012214 <__submore+0x1e>
 8012242:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012244:	0077      	lsls	r7, r6, #1
 8012246:	463a      	mov	r2, r7
 8012248:	f000 f85c 	bl	8012304 <_realloc_r>
 801224c:	4605      	mov	r5, r0
 801224e:	2800      	cmp	r0, #0
 8012250:	d0de      	beq.n	8012210 <__submore+0x1a>
 8012252:	eb00 0806 	add.w	r8, r0, r6
 8012256:	4601      	mov	r1, r0
 8012258:	4632      	mov	r2, r6
 801225a:	4640      	mov	r0, r8
 801225c:	f7fd fb3d 	bl	800f8da <memcpy>
 8012260:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012264:	f8c4 8000 	str.w	r8, [r4]
 8012268:	e7e9      	b.n	801223e <__submore+0x48>

0801226a <memmove>:
 801226a:	4288      	cmp	r0, r1
 801226c:	b510      	push	{r4, lr}
 801226e:	eb01 0402 	add.w	r4, r1, r2
 8012272:	d902      	bls.n	801227a <memmove+0x10>
 8012274:	4284      	cmp	r4, r0
 8012276:	4623      	mov	r3, r4
 8012278:	d807      	bhi.n	801228a <memmove+0x20>
 801227a:	1e43      	subs	r3, r0, #1
 801227c:	42a1      	cmp	r1, r4
 801227e:	d008      	beq.n	8012292 <memmove+0x28>
 8012280:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012284:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012288:	e7f8      	b.n	801227c <memmove+0x12>
 801228a:	4402      	add	r2, r0
 801228c:	4601      	mov	r1, r0
 801228e:	428a      	cmp	r2, r1
 8012290:	d100      	bne.n	8012294 <memmove+0x2a>
 8012292:	bd10      	pop	{r4, pc}
 8012294:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012298:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801229c:	e7f7      	b.n	801228e <memmove+0x24>
	...

080122a0 <__assert_func>:
 80122a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122a2:	4614      	mov	r4, r2
 80122a4:	461a      	mov	r2, r3
 80122a6:	4b09      	ldr	r3, [pc, #36]	@ (80122cc <__assert_func+0x2c>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	4605      	mov	r5, r0
 80122ac:	68d8      	ldr	r0, [r3, #12]
 80122ae:	b14c      	cbz	r4, 80122c4 <__assert_func+0x24>
 80122b0:	4b07      	ldr	r3, [pc, #28]	@ (80122d0 <__assert_func+0x30>)
 80122b2:	9100      	str	r1, [sp, #0]
 80122b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80122b8:	4906      	ldr	r1, [pc, #24]	@ (80122d4 <__assert_func+0x34>)
 80122ba:	462b      	mov	r3, r5
 80122bc:	f000 f850 	bl	8012360 <fiprintf>
 80122c0:	f000 f860 	bl	8012384 <abort>
 80122c4:	4b04      	ldr	r3, [pc, #16]	@ (80122d8 <__assert_func+0x38>)
 80122c6:	461c      	mov	r4, r3
 80122c8:	e7f3      	b.n	80122b2 <__assert_func+0x12>
 80122ca:	bf00      	nop
 80122cc:	200001b4 	.word	0x200001b4
 80122d0:	08012d13 	.word	0x08012d13
 80122d4:	08012d20 	.word	0x08012d20
 80122d8:	08012d4e 	.word	0x08012d4e

080122dc <_calloc_r>:
 80122dc:	b570      	push	{r4, r5, r6, lr}
 80122de:	fba1 5402 	umull	r5, r4, r1, r2
 80122e2:	b934      	cbnz	r4, 80122f2 <_calloc_r+0x16>
 80122e4:	4629      	mov	r1, r5
 80122e6:	f7fb faf9 	bl	800d8dc <_malloc_r>
 80122ea:	4606      	mov	r6, r0
 80122ec:	b928      	cbnz	r0, 80122fa <_calloc_r+0x1e>
 80122ee:	4630      	mov	r0, r6
 80122f0:	bd70      	pop	{r4, r5, r6, pc}
 80122f2:	220c      	movs	r2, #12
 80122f4:	6002      	str	r2, [r0, #0]
 80122f6:	2600      	movs	r6, #0
 80122f8:	e7f9      	b.n	80122ee <_calloc_r+0x12>
 80122fa:	462a      	mov	r2, r5
 80122fc:	4621      	mov	r1, r4
 80122fe:	f7fd f9ec 	bl	800f6da <memset>
 8012302:	e7f4      	b.n	80122ee <_calloc_r+0x12>

08012304 <_realloc_r>:
 8012304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012308:	4607      	mov	r7, r0
 801230a:	4614      	mov	r4, r2
 801230c:	460d      	mov	r5, r1
 801230e:	b921      	cbnz	r1, 801231a <_realloc_r+0x16>
 8012310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012314:	4611      	mov	r1, r2
 8012316:	f7fb bae1 	b.w	800d8dc <_malloc_r>
 801231a:	b92a      	cbnz	r2, 8012328 <_realloc_r+0x24>
 801231c:	f7fe f954 	bl	80105c8 <_free_r>
 8012320:	4625      	mov	r5, r4
 8012322:	4628      	mov	r0, r5
 8012324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012328:	f000 f833 	bl	8012392 <_malloc_usable_size_r>
 801232c:	4284      	cmp	r4, r0
 801232e:	4606      	mov	r6, r0
 8012330:	d802      	bhi.n	8012338 <_realloc_r+0x34>
 8012332:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012336:	d8f4      	bhi.n	8012322 <_realloc_r+0x1e>
 8012338:	4621      	mov	r1, r4
 801233a:	4638      	mov	r0, r7
 801233c:	f7fb face 	bl	800d8dc <_malloc_r>
 8012340:	4680      	mov	r8, r0
 8012342:	b908      	cbnz	r0, 8012348 <_realloc_r+0x44>
 8012344:	4645      	mov	r5, r8
 8012346:	e7ec      	b.n	8012322 <_realloc_r+0x1e>
 8012348:	42b4      	cmp	r4, r6
 801234a:	4622      	mov	r2, r4
 801234c:	4629      	mov	r1, r5
 801234e:	bf28      	it	cs
 8012350:	4632      	movcs	r2, r6
 8012352:	f7fd fac2 	bl	800f8da <memcpy>
 8012356:	4629      	mov	r1, r5
 8012358:	4638      	mov	r0, r7
 801235a:	f7fe f935 	bl	80105c8 <_free_r>
 801235e:	e7f1      	b.n	8012344 <_realloc_r+0x40>

08012360 <fiprintf>:
 8012360:	b40e      	push	{r1, r2, r3}
 8012362:	b503      	push	{r0, r1, lr}
 8012364:	4601      	mov	r1, r0
 8012366:	ab03      	add	r3, sp, #12
 8012368:	4805      	ldr	r0, [pc, #20]	@ (8012380 <fiprintf+0x20>)
 801236a:	f853 2b04 	ldr.w	r2, [r3], #4
 801236e:	6800      	ldr	r0, [r0, #0]
 8012370:	9301      	str	r3, [sp, #4]
 8012372:	f000 f83f 	bl	80123f4 <_vfiprintf_r>
 8012376:	b002      	add	sp, #8
 8012378:	f85d eb04 	ldr.w	lr, [sp], #4
 801237c:	b003      	add	sp, #12
 801237e:	4770      	bx	lr
 8012380:	200001b4 	.word	0x200001b4

08012384 <abort>:
 8012384:	b508      	push	{r3, lr}
 8012386:	2006      	movs	r0, #6
 8012388:	f000 fa08 	bl	801279c <raise>
 801238c:	2001      	movs	r0, #1
 801238e:	f7f0 f8cb 	bl	8002528 <_exit>

08012392 <_malloc_usable_size_r>:
 8012392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012396:	1f18      	subs	r0, r3, #4
 8012398:	2b00      	cmp	r3, #0
 801239a:	bfbc      	itt	lt
 801239c:	580b      	ldrlt	r3, [r1, r0]
 801239e:	18c0      	addlt	r0, r0, r3
 80123a0:	4770      	bx	lr

080123a2 <__sfputc_r>:
 80123a2:	6893      	ldr	r3, [r2, #8]
 80123a4:	3b01      	subs	r3, #1
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	b410      	push	{r4}
 80123aa:	6093      	str	r3, [r2, #8]
 80123ac:	da08      	bge.n	80123c0 <__sfputc_r+0x1e>
 80123ae:	6994      	ldr	r4, [r2, #24]
 80123b0:	42a3      	cmp	r3, r4
 80123b2:	db01      	blt.n	80123b8 <__sfputc_r+0x16>
 80123b4:	290a      	cmp	r1, #10
 80123b6:	d103      	bne.n	80123c0 <__sfputc_r+0x1e>
 80123b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123bc:	f000 b932 	b.w	8012624 <__swbuf_r>
 80123c0:	6813      	ldr	r3, [r2, #0]
 80123c2:	1c58      	adds	r0, r3, #1
 80123c4:	6010      	str	r0, [r2, #0]
 80123c6:	7019      	strb	r1, [r3, #0]
 80123c8:	4608      	mov	r0, r1
 80123ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <__sfputs_r>:
 80123d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d2:	4606      	mov	r6, r0
 80123d4:	460f      	mov	r7, r1
 80123d6:	4614      	mov	r4, r2
 80123d8:	18d5      	adds	r5, r2, r3
 80123da:	42ac      	cmp	r4, r5
 80123dc:	d101      	bne.n	80123e2 <__sfputs_r+0x12>
 80123de:	2000      	movs	r0, #0
 80123e0:	e007      	b.n	80123f2 <__sfputs_r+0x22>
 80123e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123e6:	463a      	mov	r2, r7
 80123e8:	4630      	mov	r0, r6
 80123ea:	f7ff ffda 	bl	80123a2 <__sfputc_r>
 80123ee:	1c43      	adds	r3, r0, #1
 80123f0:	d1f3      	bne.n	80123da <__sfputs_r+0xa>
 80123f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080123f4 <_vfiprintf_r>:
 80123f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f8:	460d      	mov	r5, r1
 80123fa:	b09d      	sub	sp, #116	@ 0x74
 80123fc:	4614      	mov	r4, r2
 80123fe:	4698      	mov	r8, r3
 8012400:	4606      	mov	r6, r0
 8012402:	b118      	cbz	r0, 801240c <_vfiprintf_r+0x18>
 8012404:	6a03      	ldr	r3, [r0, #32]
 8012406:	b90b      	cbnz	r3, 801240c <_vfiprintf_r+0x18>
 8012408:	f7fd f868 	bl	800f4dc <__sinit>
 801240c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801240e:	07d9      	lsls	r1, r3, #31
 8012410:	d405      	bmi.n	801241e <_vfiprintf_r+0x2a>
 8012412:	89ab      	ldrh	r3, [r5, #12]
 8012414:	059a      	lsls	r2, r3, #22
 8012416:	d402      	bmi.n	801241e <_vfiprintf_r+0x2a>
 8012418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801241a:	f7fd fa5c 	bl	800f8d6 <__retarget_lock_acquire_recursive>
 801241e:	89ab      	ldrh	r3, [r5, #12]
 8012420:	071b      	lsls	r3, r3, #28
 8012422:	d501      	bpl.n	8012428 <_vfiprintf_r+0x34>
 8012424:	692b      	ldr	r3, [r5, #16]
 8012426:	b99b      	cbnz	r3, 8012450 <_vfiprintf_r+0x5c>
 8012428:	4629      	mov	r1, r5
 801242a:	4630      	mov	r0, r6
 801242c:	f000 f938 	bl	80126a0 <__swsetup_r>
 8012430:	b170      	cbz	r0, 8012450 <_vfiprintf_r+0x5c>
 8012432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012434:	07dc      	lsls	r4, r3, #31
 8012436:	d504      	bpl.n	8012442 <_vfiprintf_r+0x4e>
 8012438:	f04f 30ff 	mov.w	r0, #4294967295
 801243c:	b01d      	add	sp, #116	@ 0x74
 801243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012442:	89ab      	ldrh	r3, [r5, #12]
 8012444:	0598      	lsls	r0, r3, #22
 8012446:	d4f7      	bmi.n	8012438 <_vfiprintf_r+0x44>
 8012448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801244a:	f7fd fa45 	bl	800f8d8 <__retarget_lock_release_recursive>
 801244e:	e7f3      	b.n	8012438 <_vfiprintf_r+0x44>
 8012450:	2300      	movs	r3, #0
 8012452:	9309      	str	r3, [sp, #36]	@ 0x24
 8012454:	2320      	movs	r3, #32
 8012456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801245a:	f8cd 800c 	str.w	r8, [sp, #12]
 801245e:	2330      	movs	r3, #48	@ 0x30
 8012460:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012610 <_vfiprintf_r+0x21c>
 8012464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012468:	f04f 0901 	mov.w	r9, #1
 801246c:	4623      	mov	r3, r4
 801246e:	469a      	mov	sl, r3
 8012470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012474:	b10a      	cbz	r2, 801247a <_vfiprintf_r+0x86>
 8012476:	2a25      	cmp	r2, #37	@ 0x25
 8012478:	d1f9      	bne.n	801246e <_vfiprintf_r+0x7a>
 801247a:	ebba 0b04 	subs.w	fp, sl, r4
 801247e:	d00b      	beq.n	8012498 <_vfiprintf_r+0xa4>
 8012480:	465b      	mov	r3, fp
 8012482:	4622      	mov	r2, r4
 8012484:	4629      	mov	r1, r5
 8012486:	4630      	mov	r0, r6
 8012488:	f7ff ffa2 	bl	80123d0 <__sfputs_r>
 801248c:	3001      	adds	r0, #1
 801248e:	f000 80a7 	beq.w	80125e0 <_vfiprintf_r+0x1ec>
 8012492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012494:	445a      	add	r2, fp
 8012496:	9209      	str	r2, [sp, #36]	@ 0x24
 8012498:	f89a 3000 	ldrb.w	r3, [sl]
 801249c:	2b00      	cmp	r3, #0
 801249e:	f000 809f 	beq.w	80125e0 <_vfiprintf_r+0x1ec>
 80124a2:	2300      	movs	r3, #0
 80124a4:	f04f 32ff 	mov.w	r2, #4294967295
 80124a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124ac:	f10a 0a01 	add.w	sl, sl, #1
 80124b0:	9304      	str	r3, [sp, #16]
 80124b2:	9307      	str	r3, [sp, #28]
 80124b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80124b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80124ba:	4654      	mov	r4, sl
 80124bc:	2205      	movs	r2, #5
 80124be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c2:	4853      	ldr	r0, [pc, #332]	@ (8012610 <_vfiprintf_r+0x21c>)
 80124c4:	f7ed fe84 	bl	80001d0 <memchr>
 80124c8:	9a04      	ldr	r2, [sp, #16]
 80124ca:	b9d8      	cbnz	r0, 8012504 <_vfiprintf_r+0x110>
 80124cc:	06d1      	lsls	r1, r2, #27
 80124ce:	bf44      	itt	mi
 80124d0:	2320      	movmi	r3, #32
 80124d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124d6:	0713      	lsls	r3, r2, #28
 80124d8:	bf44      	itt	mi
 80124da:	232b      	movmi	r3, #43	@ 0x2b
 80124dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124e0:	f89a 3000 	ldrb.w	r3, [sl]
 80124e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80124e6:	d015      	beq.n	8012514 <_vfiprintf_r+0x120>
 80124e8:	9a07      	ldr	r2, [sp, #28]
 80124ea:	4654      	mov	r4, sl
 80124ec:	2000      	movs	r0, #0
 80124ee:	f04f 0c0a 	mov.w	ip, #10
 80124f2:	4621      	mov	r1, r4
 80124f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124f8:	3b30      	subs	r3, #48	@ 0x30
 80124fa:	2b09      	cmp	r3, #9
 80124fc:	d94b      	bls.n	8012596 <_vfiprintf_r+0x1a2>
 80124fe:	b1b0      	cbz	r0, 801252e <_vfiprintf_r+0x13a>
 8012500:	9207      	str	r2, [sp, #28]
 8012502:	e014      	b.n	801252e <_vfiprintf_r+0x13a>
 8012504:	eba0 0308 	sub.w	r3, r0, r8
 8012508:	fa09 f303 	lsl.w	r3, r9, r3
 801250c:	4313      	orrs	r3, r2
 801250e:	9304      	str	r3, [sp, #16]
 8012510:	46a2      	mov	sl, r4
 8012512:	e7d2      	b.n	80124ba <_vfiprintf_r+0xc6>
 8012514:	9b03      	ldr	r3, [sp, #12]
 8012516:	1d19      	adds	r1, r3, #4
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	9103      	str	r1, [sp, #12]
 801251c:	2b00      	cmp	r3, #0
 801251e:	bfbb      	ittet	lt
 8012520:	425b      	neglt	r3, r3
 8012522:	f042 0202 	orrlt.w	r2, r2, #2
 8012526:	9307      	strge	r3, [sp, #28]
 8012528:	9307      	strlt	r3, [sp, #28]
 801252a:	bfb8      	it	lt
 801252c:	9204      	strlt	r2, [sp, #16]
 801252e:	7823      	ldrb	r3, [r4, #0]
 8012530:	2b2e      	cmp	r3, #46	@ 0x2e
 8012532:	d10a      	bne.n	801254a <_vfiprintf_r+0x156>
 8012534:	7863      	ldrb	r3, [r4, #1]
 8012536:	2b2a      	cmp	r3, #42	@ 0x2a
 8012538:	d132      	bne.n	80125a0 <_vfiprintf_r+0x1ac>
 801253a:	9b03      	ldr	r3, [sp, #12]
 801253c:	1d1a      	adds	r2, r3, #4
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	9203      	str	r2, [sp, #12]
 8012542:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012546:	3402      	adds	r4, #2
 8012548:	9305      	str	r3, [sp, #20]
 801254a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012620 <_vfiprintf_r+0x22c>
 801254e:	7821      	ldrb	r1, [r4, #0]
 8012550:	2203      	movs	r2, #3
 8012552:	4650      	mov	r0, sl
 8012554:	f7ed fe3c 	bl	80001d0 <memchr>
 8012558:	b138      	cbz	r0, 801256a <_vfiprintf_r+0x176>
 801255a:	9b04      	ldr	r3, [sp, #16]
 801255c:	eba0 000a 	sub.w	r0, r0, sl
 8012560:	2240      	movs	r2, #64	@ 0x40
 8012562:	4082      	lsls	r2, r0
 8012564:	4313      	orrs	r3, r2
 8012566:	3401      	adds	r4, #1
 8012568:	9304      	str	r3, [sp, #16]
 801256a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801256e:	4829      	ldr	r0, [pc, #164]	@ (8012614 <_vfiprintf_r+0x220>)
 8012570:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012574:	2206      	movs	r2, #6
 8012576:	f7ed fe2b 	bl	80001d0 <memchr>
 801257a:	2800      	cmp	r0, #0
 801257c:	d03f      	beq.n	80125fe <_vfiprintf_r+0x20a>
 801257e:	4b26      	ldr	r3, [pc, #152]	@ (8012618 <_vfiprintf_r+0x224>)
 8012580:	bb1b      	cbnz	r3, 80125ca <_vfiprintf_r+0x1d6>
 8012582:	9b03      	ldr	r3, [sp, #12]
 8012584:	3307      	adds	r3, #7
 8012586:	f023 0307 	bic.w	r3, r3, #7
 801258a:	3308      	adds	r3, #8
 801258c:	9303      	str	r3, [sp, #12]
 801258e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012590:	443b      	add	r3, r7
 8012592:	9309      	str	r3, [sp, #36]	@ 0x24
 8012594:	e76a      	b.n	801246c <_vfiprintf_r+0x78>
 8012596:	fb0c 3202 	mla	r2, ip, r2, r3
 801259a:	460c      	mov	r4, r1
 801259c:	2001      	movs	r0, #1
 801259e:	e7a8      	b.n	80124f2 <_vfiprintf_r+0xfe>
 80125a0:	2300      	movs	r3, #0
 80125a2:	3401      	adds	r4, #1
 80125a4:	9305      	str	r3, [sp, #20]
 80125a6:	4619      	mov	r1, r3
 80125a8:	f04f 0c0a 	mov.w	ip, #10
 80125ac:	4620      	mov	r0, r4
 80125ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125b2:	3a30      	subs	r2, #48	@ 0x30
 80125b4:	2a09      	cmp	r2, #9
 80125b6:	d903      	bls.n	80125c0 <_vfiprintf_r+0x1cc>
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d0c6      	beq.n	801254a <_vfiprintf_r+0x156>
 80125bc:	9105      	str	r1, [sp, #20]
 80125be:	e7c4      	b.n	801254a <_vfiprintf_r+0x156>
 80125c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80125c4:	4604      	mov	r4, r0
 80125c6:	2301      	movs	r3, #1
 80125c8:	e7f0      	b.n	80125ac <_vfiprintf_r+0x1b8>
 80125ca:	ab03      	add	r3, sp, #12
 80125cc:	9300      	str	r3, [sp, #0]
 80125ce:	462a      	mov	r2, r5
 80125d0:	4b12      	ldr	r3, [pc, #72]	@ (801261c <_vfiprintf_r+0x228>)
 80125d2:	a904      	add	r1, sp, #16
 80125d4:	4630      	mov	r0, r6
 80125d6:	f7fc f931 	bl	800e83c <_printf_float>
 80125da:	4607      	mov	r7, r0
 80125dc:	1c78      	adds	r0, r7, #1
 80125de:	d1d6      	bne.n	801258e <_vfiprintf_r+0x19a>
 80125e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125e2:	07d9      	lsls	r1, r3, #31
 80125e4:	d405      	bmi.n	80125f2 <_vfiprintf_r+0x1fe>
 80125e6:	89ab      	ldrh	r3, [r5, #12]
 80125e8:	059a      	lsls	r2, r3, #22
 80125ea:	d402      	bmi.n	80125f2 <_vfiprintf_r+0x1fe>
 80125ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125ee:	f7fd f973 	bl	800f8d8 <__retarget_lock_release_recursive>
 80125f2:	89ab      	ldrh	r3, [r5, #12]
 80125f4:	065b      	lsls	r3, r3, #25
 80125f6:	f53f af1f 	bmi.w	8012438 <_vfiprintf_r+0x44>
 80125fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125fc:	e71e      	b.n	801243c <_vfiprintf_r+0x48>
 80125fe:	ab03      	add	r3, sp, #12
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	462a      	mov	r2, r5
 8012604:	4b05      	ldr	r3, [pc, #20]	@ (801261c <_vfiprintf_r+0x228>)
 8012606:	a904      	add	r1, sp, #16
 8012608:	4630      	mov	r0, r6
 801260a:	f7fc fbaf 	bl	800ed6c <_printf_i>
 801260e:	e7e4      	b.n	80125da <_vfiprintf_r+0x1e6>
 8012610:	08012ce7 	.word	0x08012ce7
 8012614:	08012cf1 	.word	0x08012cf1
 8012618:	0800e83d 	.word	0x0800e83d
 801261c:	080123d1 	.word	0x080123d1
 8012620:	08012ced 	.word	0x08012ced

08012624 <__swbuf_r>:
 8012624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012626:	460e      	mov	r6, r1
 8012628:	4614      	mov	r4, r2
 801262a:	4605      	mov	r5, r0
 801262c:	b118      	cbz	r0, 8012636 <__swbuf_r+0x12>
 801262e:	6a03      	ldr	r3, [r0, #32]
 8012630:	b90b      	cbnz	r3, 8012636 <__swbuf_r+0x12>
 8012632:	f7fc ff53 	bl	800f4dc <__sinit>
 8012636:	69a3      	ldr	r3, [r4, #24]
 8012638:	60a3      	str	r3, [r4, #8]
 801263a:	89a3      	ldrh	r3, [r4, #12]
 801263c:	071a      	lsls	r2, r3, #28
 801263e:	d501      	bpl.n	8012644 <__swbuf_r+0x20>
 8012640:	6923      	ldr	r3, [r4, #16]
 8012642:	b943      	cbnz	r3, 8012656 <__swbuf_r+0x32>
 8012644:	4621      	mov	r1, r4
 8012646:	4628      	mov	r0, r5
 8012648:	f000 f82a 	bl	80126a0 <__swsetup_r>
 801264c:	b118      	cbz	r0, 8012656 <__swbuf_r+0x32>
 801264e:	f04f 37ff 	mov.w	r7, #4294967295
 8012652:	4638      	mov	r0, r7
 8012654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012656:	6823      	ldr	r3, [r4, #0]
 8012658:	6922      	ldr	r2, [r4, #16]
 801265a:	1a98      	subs	r0, r3, r2
 801265c:	6963      	ldr	r3, [r4, #20]
 801265e:	b2f6      	uxtb	r6, r6
 8012660:	4283      	cmp	r3, r0
 8012662:	4637      	mov	r7, r6
 8012664:	dc05      	bgt.n	8012672 <__swbuf_r+0x4e>
 8012666:	4621      	mov	r1, r4
 8012668:	4628      	mov	r0, r5
 801266a:	f7ff fd63 	bl	8012134 <_fflush_r>
 801266e:	2800      	cmp	r0, #0
 8012670:	d1ed      	bne.n	801264e <__swbuf_r+0x2a>
 8012672:	68a3      	ldr	r3, [r4, #8]
 8012674:	3b01      	subs	r3, #1
 8012676:	60a3      	str	r3, [r4, #8]
 8012678:	6823      	ldr	r3, [r4, #0]
 801267a:	1c5a      	adds	r2, r3, #1
 801267c:	6022      	str	r2, [r4, #0]
 801267e:	701e      	strb	r6, [r3, #0]
 8012680:	6962      	ldr	r2, [r4, #20]
 8012682:	1c43      	adds	r3, r0, #1
 8012684:	429a      	cmp	r2, r3
 8012686:	d004      	beq.n	8012692 <__swbuf_r+0x6e>
 8012688:	89a3      	ldrh	r3, [r4, #12]
 801268a:	07db      	lsls	r3, r3, #31
 801268c:	d5e1      	bpl.n	8012652 <__swbuf_r+0x2e>
 801268e:	2e0a      	cmp	r6, #10
 8012690:	d1df      	bne.n	8012652 <__swbuf_r+0x2e>
 8012692:	4621      	mov	r1, r4
 8012694:	4628      	mov	r0, r5
 8012696:	f7ff fd4d 	bl	8012134 <_fflush_r>
 801269a:	2800      	cmp	r0, #0
 801269c:	d0d9      	beq.n	8012652 <__swbuf_r+0x2e>
 801269e:	e7d6      	b.n	801264e <__swbuf_r+0x2a>

080126a0 <__swsetup_r>:
 80126a0:	b538      	push	{r3, r4, r5, lr}
 80126a2:	4b29      	ldr	r3, [pc, #164]	@ (8012748 <__swsetup_r+0xa8>)
 80126a4:	4605      	mov	r5, r0
 80126a6:	6818      	ldr	r0, [r3, #0]
 80126a8:	460c      	mov	r4, r1
 80126aa:	b118      	cbz	r0, 80126b4 <__swsetup_r+0x14>
 80126ac:	6a03      	ldr	r3, [r0, #32]
 80126ae:	b90b      	cbnz	r3, 80126b4 <__swsetup_r+0x14>
 80126b0:	f7fc ff14 	bl	800f4dc <__sinit>
 80126b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126b8:	0719      	lsls	r1, r3, #28
 80126ba:	d422      	bmi.n	8012702 <__swsetup_r+0x62>
 80126bc:	06da      	lsls	r2, r3, #27
 80126be:	d407      	bmi.n	80126d0 <__swsetup_r+0x30>
 80126c0:	2209      	movs	r2, #9
 80126c2:	602a      	str	r2, [r5, #0]
 80126c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126c8:	81a3      	strh	r3, [r4, #12]
 80126ca:	f04f 30ff 	mov.w	r0, #4294967295
 80126ce:	e033      	b.n	8012738 <__swsetup_r+0x98>
 80126d0:	0758      	lsls	r0, r3, #29
 80126d2:	d512      	bpl.n	80126fa <__swsetup_r+0x5a>
 80126d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80126d6:	b141      	cbz	r1, 80126ea <__swsetup_r+0x4a>
 80126d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126dc:	4299      	cmp	r1, r3
 80126de:	d002      	beq.n	80126e6 <__swsetup_r+0x46>
 80126e0:	4628      	mov	r0, r5
 80126e2:	f7fd ff71 	bl	80105c8 <_free_r>
 80126e6:	2300      	movs	r3, #0
 80126e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80126ea:	89a3      	ldrh	r3, [r4, #12]
 80126ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80126f0:	81a3      	strh	r3, [r4, #12]
 80126f2:	2300      	movs	r3, #0
 80126f4:	6063      	str	r3, [r4, #4]
 80126f6:	6923      	ldr	r3, [r4, #16]
 80126f8:	6023      	str	r3, [r4, #0]
 80126fa:	89a3      	ldrh	r3, [r4, #12]
 80126fc:	f043 0308 	orr.w	r3, r3, #8
 8012700:	81a3      	strh	r3, [r4, #12]
 8012702:	6923      	ldr	r3, [r4, #16]
 8012704:	b94b      	cbnz	r3, 801271a <__swsetup_r+0x7a>
 8012706:	89a3      	ldrh	r3, [r4, #12]
 8012708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801270c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012710:	d003      	beq.n	801271a <__swsetup_r+0x7a>
 8012712:	4621      	mov	r1, r4
 8012714:	4628      	mov	r0, r5
 8012716:	f000 f883 	bl	8012820 <__smakebuf_r>
 801271a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801271e:	f013 0201 	ands.w	r2, r3, #1
 8012722:	d00a      	beq.n	801273a <__swsetup_r+0x9a>
 8012724:	2200      	movs	r2, #0
 8012726:	60a2      	str	r2, [r4, #8]
 8012728:	6962      	ldr	r2, [r4, #20]
 801272a:	4252      	negs	r2, r2
 801272c:	61a2      	str	r2, [r4, #24]
 801272e:	6922      	ldr	r2, [r4, #16]
 8012730:	b942      	cbnz	r2, 8012744 <__swsetup_r+0xa4>
 8012732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012736:	d1c5      	bne.n	80126c4 <__swsetup_r+0x24>
 8012738:	bd38      	pop	{r3, r4, r5, pc}
 801273a:	0799      	lsls	r1, r3, #30
 801273c:	bf58      	it	pl
 801273e:	6962      	ldrpl	r2, [r4, #20]
 8012740:	60a2      	str	r2, [r4, #8]
 8012742:	e7f4      	b.n	801272e <__swsetup_r+0x8e>
 8012744:	2000      	movs	r0, #0
 8012746:	e7f7      	b.n	8012738 <__swsetup_r+0x98>
 8012748:	200001b4 	.word	0x200001b4

0801274c <_raise_r>:
 801274c:	291f      	cmp	r1, #31
 801274e:	b538      	push	{r3, r4, r5, lr}
 8012750:	4605      	mov	r5, r0
 8012752:	460c      	mov	r4, r1
 8012754:	d904      	bls.n	8012760 <_raise_r+0x14>
 8012756:	2316      	movs	r3, #22
 8012758:	6003      	str	r3, [r0, #0]
 801275a:	f04f 30ff 	mov.w	r0, #4294967295
 801275e:	bd38      	pop	{r3, r4, r5, pc}
 8012760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012762:	b112      	cbz	r2, 801276a <_raise_r+0x1e>
 8012764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012768:	b94b      	cbnz	r3, 801277e <_raise_r+0x32>
 801276a:	4628      	mov	r0, r5
 801276c:	f000 f830 	bl	80127d0 <_getpid_r>
 8012770:	4622      	mov	r2, r4
 8012772:	4601      	mov	r1, r0
 8012774:	4628      	mov	r0, r5
 8012776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801277a:	f000 b817 	b.w	80127ac <_kill_r>
 801277e:	2b01      	cmp	r3, #1
 8012780:	d00a      	beq.n	8012798 <_raise_r+0x4c>
 8012782:	1c59      	adds	r1, r3, #1
 8012784:	d103      	bne.n	801278e <_raise_r+0x42>
 8012786:	2316      	movs	r3, #22
 8012788:	6003      	str	r3, [r0, #0]
 801278a:	2001      	movs	r0, #1
 801278c:	e7e7      	b.n	801275e <_raise_r+0x12>
 801278e:	2100      	movs	r1, #0
 8012790:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012794:	4620      	mov	r0, r4
 8012796:	4798      	blx	r3
 8012798:	2000      	movs	r0, #0
 801279a:	e7e0      	b.n	801275e <_raise_r+0x12>

0801279c <raise>:
 801279c:	4b02      	ldr	r3, [pc, #8]	@ (80127a8 <raise+0xc>)
 801279e:	4601      	mov	r1, r0
 80127a0:	6818      	ldr	r0, [r3, #0]
 80127a2:	f7ff bfd3 	b.w	801274c <_raise_r>
 80127a6:	bf00      	nop
 80127a8:	200001b4 	.word	0x200001b4

080127ac <_kill_r>:
 80127ac:	b538      	push	{r3, r4, r5, lr}
 80127ae:	4d07      	ldr	r5, [pc, #28]	@ (80127cc <_kill_r+0x20>)
 80127b0:	2300      	movs	r3, #0
 80127b2:	4604      	mov	r4, r0
 80127b4:	4608      	mov	r0, r1
 80127b6:	4611      	mov	r1, r2
 80127b8:	602b      	str	r3, [r5, #0]
 80127ba:	f7ef fea5 	bl	8002508 <_kill>
 80127be:	1c43      	adds	r3, r0, #1
 80127c0:	d102      	bne.n	80127c8 <_kill_r+0x1c>
 80127c2:	682b      	ldr	r3, [r5, #0]
 80127c4:	b103      	cbz	r3, 80127c8 <_kill_r+0x1c>
 80127c6:	6023      	str	r3, [r4, #0]
 80127c8:	bd38      	pop	{r3, r4, r5, pc}
 80127ca:	bf00      	nop
 80127cc:	200061a4 	.word	0x200061a4

080127d0 <_getpid_r>:
 80127d0:	f7ef be92 	b.w	80024f8 <_getpid>

080127d4 <__swhatbuf_r>:
 80127d4:	b570      	push	{r4, r5, r6, lr}
 80127d6:	460c      	mov	r4, r1
 80127d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127dc:	2900      	cmp	r1, #0
 80127de:	b096      	sub	sp, #88	@ 0x58
 80127e0:	4615      	mov	r5, r2
 80127e2:	461e      	mov	r6, r3
 80127e4:	da0d      	bge.n	8012802 <__swhatbuf_r+0x2e>
 80127e6:	89a3      	ldrh	r3, [r4, #12]
 80127e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80127ec:	f04f 0100 	mov.w	r1, #0
 80127f0:	bf14      	ite	ne
 80127f2:	2340      	movne	r3, #64	@ 0x40
 80127f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80127f8:	2000      	movs	r0, #0
 80127fa:	6031      	str	r1, [r6, #0]
 80127fc:	602b      	str	r3, [r5, #0]
 80127fe:	b016      	add	sp, #88	@ 0x58
 8012800:	bd70      	pop	{r4, r5, r6, pc}
 8012802:	466a      	mov	r2, sp
 8012804:	f000 f848 	bl	8012898 <_fstat_r>
 8012808:	2800      	cmp	r0, #0
 801280a:	dbec      	blt.n	80127e6 <__swhatbuf_r+0x12>
 801280c:	9901      	ldr	r1, [sp, #4]
 801280e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012812:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012816:	4259      	negs	r1, r3
 8012818:	4159      	adcs	r1, r3
 801281a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801281e:	e7eb      	b.n	80127f8 <__swhatbuf_r+0x24>

08012820 <__smakebuf_r>:
 8012820:	898b      	ldrh	r3, [r1, #12]
 8012822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012824:	079d      	lsls	r5, r3, #30
 8012826:	4606      	mov	r6, r0
 8012828:	460c      	mov	r4, r1
 801282a:	d507      	bpl.n	801283c <__smakebuf_r+0x1c>
 801282c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012830:	6023      	str	r3, [r4, #0]
 8012832:	6123      	str	r3, [r4, #16]
 8012834:	2301      	movs	r3, #1
 8012836:	6163      	str	r3, [r4, #20]
 8012838:	b003      	add	sp, #12
 801283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801283c:	ab01      	add	r3, sp, #4
 801283e:	466a      	mov	r2, sp
 8012840:	f7ff ffc8 	bl	80127d4 <__swhatbuf_r>
 8012844:	9f00      	ldr	r7, [sp, #0]
 8012846:	4605      	mov	r5, r0
 8012848:	4639      	mov	r1, r7
 801284a:	4630      	mov	r0, r6
 801284c:	f7fb f846 	bl	800d8dc <_malloc_r>
 8012850:	b948      	cbnz	r0, 8012866 <__smakebuf_r+0x46>
 8012852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012856:	059a      	lsls	r2, r3, #22
 8012858:	d4ee      	bmi.n	8012838 <__smakebuf_r+0x18>
 801285a:	f023 0303 	bic.w	r3, r3, #3
 801285e:	f043 0302 	orr.w	r3, r3, #2
 8012862:	81a3      	strh	r3, [r4, #12]
 8012864:	e7e2      	b.n	801282c <__smakebuf_r+0xc>
 8012866:	89a3      	ldrh	r3, [r4, #12]
 8012868:	6020      	str	r0, [r4, #0]
 801286a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801286e:	81a3      	strh	r3, [r4, #12]
 8012870:	9b01      	ldr	r3, [sp, #4]
 8012872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012876:	b15b      	cbz	r3, 8012890 <__smakebuf_r+0x70>
 8012878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801287c:	4630      	mov	r0, r6
 801287e:	f000 f81d 	bl	80128bc <_isatty_r>
 8012882:	b128      	cbz	r0, 8012890 <__smakebuf_r+0x70>
 8012884:	89a3      	ldrh	r3, [r4, #12]
 8012886:	f023 0303 	bic.w	r3, r3, #3
 801288a:	f043 0301 	orr.w	r3, r3, #1
 801288e:	81a3      	strh	r3, [r4, #12]
 8012890:	89a3      	ldrh	r3, [r4, #12]
 8012892:	431d      	orrs	r5, r3
 8012894:	81a5      	strh	r5, [r4, #12]
 8012896:	e7cf      	b.n	8012838 <__smakebuf_r+0x18>

08012898 <_fstat_r>:
 8012898:	b538      	push	{r3, r4, r5, lr}
 801289a:	4d07      	ldr	r5, [pc, #28]	@ (80128b8 <_fstat_r+0x20>)
 801289c:	2300      	movs	r3, #0
 801289e:	4604      	mov	r4, r0
 80128a0:	4608      	mov	r0, r1
 80128a2:	4611      	mov	r1, r2
 80128a4:	602b      	str	r3, [r5, #0]
 80128a6:	f7ef fe8f 	bl	80025c8 <_fstat>
 80128aa:	1c43      	adds	r3, r0, #1
 80128ac:	d102      	bne.n	80128b4 <_fstat_r+0x1c>
 80128ae:	682b      	ldr	r3, [r5, #0]
 80128b0:	b103      	cbz	r3, 80128b4 <_fstat_r+0x1c>
 80128b2:	6023      	str	r3, [r4, #0]
 80128b4:	bd38      	pop	{r3, r4, r5, pc}
 80128b6:	bf00      	nop
 80128b8:	200061a4 	.word	0x200061a4

080128bc <_isatty_r>:
 80128bc:	b538      	push	{r3, r4, r5, lr}
 80128be:	4d06      	ldr	r5, [pc, #24]	@ (80128d8 <_isatty_r+0x1c>)
 80128c0:	2300      	movs	r3, #0
 80128c2:	4604      	mov	r4, r0
 80128c4:	4608      	mov	r0, r1
 80128c6:	602b      	str	r3, [r5, #0]
 80128c8:	f7ef fe8e 	bl	80025e8 <_isatty>
 80128cc:	1c43      	adds	r3, r0, #1
 80128ce:	d102      	bne.n	80128d6 <_isatty_r+0x1a>
 80128d0:	682b      	ldr	r3, [r5, #0]
 80128d2:	b103      	cbz	r3, 80128d6 <_isatty_r+0x1a>
 80128d4:	6023      	str	r3, [r4, #0]
 80128d6:	bd38      	pop	{r3, r4, r5, pc}
 80128d8:	200061a4 	.word	0x200061a4

080128dc <_init>:
 80128dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128de:	bf00      	nop
 80128e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128e2:	bc08      	pop	{r3}
 80128e4:	469e      	mov	lr, r3
 80128e6:	4770      	bx	lr

080128e8 <_fini>:
 80128e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ea:	bf00      	nop
 80128ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ee:	bc08      	pop	{r3}
 80128f0:	469e      	mov	lr, r3
 80128f2:	4770      	bx	lr
