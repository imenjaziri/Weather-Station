
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fad8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  0800fc68  0800fc68  00010c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119b0  080119b0  00013480  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080119b0  080119b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119b8  080119b8  00013480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119b8  080119b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080119bc  080119bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000480  20000000  080119c0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059ec  20000480  08011e40  00013480  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e6c  08011e40  00013e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013480  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9c4  00000000  00000000  000134b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004674  00000000  00000000  00030e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  000354e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001361  00000000  00000000  00036df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c129  00000000  00000000  00038159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f562  00000000  00000000  00064282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106051  00000000  00000000  000837e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f48  00000000  00000000  00189878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001917c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000480 	.word	0x20000480
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fc50 	.word	0x0800fc50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000484 	.word	0x20000484
 80001cc:	0800fc50 	.word	0x0800fc50

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_DMA_Init+0x38>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <MX_DMA_Init+0x38>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_DMA_Init+0x38>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2105      	movs	r1, #5
 8001062:	200f      	movs	r0, #15
 8001064:	f003 f862 	bl	800412c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001068:	200f      	movs	r0, #15
 800106a:	f003 f87b 	bl	8004164 <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800108c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <vApplicationGetIdleTaskMemory+0x30>)
 8001092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200004a8 	.word	0x200004a8
 80010ac:	20000548 	.word	0x20000548

080010b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b096      	sub	sp, #88	@ 0x58
 80010b4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_FREERTOS_Init+0x7c>)
 80010b8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80010bc:	461d      	mov	r5, r3
 80010be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f007 fd0c 	bl	8008aee <osThreadCreate>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a15      	ldr	r2, [pc, #84]	@ (8001130 <MX_FREERTOS_Init+0x80>)
 80010da:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_FREERTOS_Init+0x84>)
 80010de:	f107 0420 	add.w	r4, r7, #32
 80010e2:	461d      	mov	r5, r3
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 fcf9 	bl	8008aee <osThreadCreate>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <MX_FREERTOS_Init+0x88>)
 8001100:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS_Task */
  osThreadDef(GPS_Task, Start_GPS_Task, osPriorityIdle, 0, 1024);
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_FREERTOS_Init+0x8c>)
 8001104:	1d3c      	adds	r4, r7, #4
 8001106:	461d      	mov	r5, r3
 8001108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPS_TaskHandle = osThreadCreate(osThread(GPS_Task), NULL);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f007 fce8 	bl	8008aee <osThreadCreate>
 800111e:	4603      	mov	r3, r0
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <MX_FREERTOS_Init+0x90>)
 8001122:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001124:	bf00      	nop
 8001126:	3758      	adds	r7, #88	@ 0x58
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	0800fc74 	.word	0x0800fc74
 8001130:	2000049c 	.word	0x2000049c
 8001134:	0800fc9c 	.word	0x0800fc9c
 8001138:	200004a0 	.word	0x200004a0
 800113c:	0800fcc4 	.word	0x0800fcc4
 8001140:	200004a4 	.word	0x200004a4

08001144 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f007 fd1a 	bl	8008b86 <osDelay>
 8001152:	e7fb      	b.n	800114c <StartDefaultTask+0x8>

08001154 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <MX_GPIO_Init+0xc4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	4a2a      	ldr	r2, [pc, #168]	@ (8001218 <MX_GPIO_Init+0xc4>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001176:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <MX_GPIO_Init+0xc4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <MX_GPIO_Init+0xc4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	4a24      	ldr	r2, [pc, #144]	@ (8001218 <MX_GPIO_Init+0xc4>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800118c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <MX_GPIO_Init+0xc4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <MX_GPIO_Init+0xc4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <MX_GPIO_Init+0xc4>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <MX_GPIO_Init+0xc4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <MX_GPIO_Init+0xc4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <MX_GPIO_Init+0xc4>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <MX_GPIO_Init+0xc4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2120      	movs	r1, #32
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d2:	f003 fbf5 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	480b      	ldr	r0, [pc, #44]	@ (800121c <MX_GPIO_Init+0xc8>)
 80011ee:	f003 fa3d 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f2:	2320      	movs	r3, #32
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f003 fa2e 	bl	800466c <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	@ 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	48000800 	.word	0x48000800

08001220 <GPS_validate>:
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
}*/



int GPS_validate(char *nmeastr){
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b24      	cmp	r3, #36	@ 0x24
 800123a:	d103      	bne.n	8001244 <GPS_validate+0x24>
        i++;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001242:	e00c      	b.n	800125e <GPS_validate+0x3e>
        return 0;
 8001244:	2300      	movs	r3, #0
 8001246:	e047      	b.n	80012d8 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4053      	eors	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        i++;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d008      	beq.n	800127c <GPS_validate+0x5c>
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2a      	cmp	r3, #42	@ 0x2a
 8001274:	d002      	beq.n	800127c <GPS_validate+0x5c>
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2b4a      	cmp	r3, #74	@ 0x4a
 800127a:	dde5      	ble.n	8001248 <GPS_validate+0x28>
    }

    if(i >= 75){
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b4a      	cmp	r3, #74	@ 0x4a
 8001280:	dd01      	ble.n	8001286 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001282:	2300      	movs	r3, #0
 8001284:	e028      	b.n	80012d8 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001290:	d119      	bne.n	80012c6 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3302      	adds	r3, #2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	490a      	ldr	r1, [pc, #40]	@ (80012e0 <GPS_validate+0xc0>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00b fa24 	bl	800c704 <siprintf>
    return((checkcalcstr[0] == check[0])
 80012bc:	7a3a      	ldrb	r2, [r7, #8]
 80012be:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d108      	bne.n	80012d6 <GPS_validate+0xb6>
 80012c4:	e001      	b.n	80012ca <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80012c6:	2300      	movs	r3, #0
 80012c8:	e006      	b.n	80012d8 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80012ca:	7a7a      	ldrb	r2, [r7, #9]
 80012cc:	7b7b      	ldrb	r3, [r7, #13]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d101      	bne.n	80012d6 <GPS_validate+0xb6>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <GPS_validate+0xb8>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	0800fce0 	.word	0x0800fce0

080012e4 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af08      	add	r7, sp, #32
 80012ea:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80012ec:	2206      	movs	r2, #6
 80012ee:	494a      	ldr	r1, [pc, #296]	@ (8001418 <GPS_parse+0x134>)
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f00b faa2 	bl	800c83a <strncmp>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d137      	bne.n	800136c <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80012fc:	4b47      	ldr	r3, [pc, #284]	@ (800141c <GPS_parse+0x138>)
 80012fe:	9307      	str	r3, [sp, #28]
 8001300:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <GPS_parse+0x13c>)
 8001302:	9306      	str	r3, [sp, #24]
 8001304:	4b47      	ldr	r3, [pc, #284]	@ (8001424 <GPS_parse+0x140>)
 8001306:	9305      	str	r3, [sp, #20]
 8001308:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <GPS_parse+0x144>)
 800130a:	9304      	str	r3, [sp, #16]
 800130c:	4b47      	ldr	r3, [pc, #284]	@ (800142c <GPS_parse+0x148>)
 800130e:	9303      	str	r3, [sp, #12]
 8001310:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <GPS_parse+0x14c>)
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	4b47      	ldr	r3, [pc, #284]	@ (8001434 <GPS_parse+0x150>)
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	4b47      	ldr	r3, [pc, #284]	@ (8001438 <GPS_parse+0x154>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4b47      	ldr	r3, [pc, #284]	@ (800143c <GPS_parse+0x158>)
 800131e:	4a48      	ldr	r2, [pc, #288]	@ (8001440 <GPS_parse+0x15c>)
 8001320:	4948      	ldr	r1, [pc, #288]	@ (8001444 <GPS_parse+0x160>)
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f00b fa10 	bl	800c748 <siscanf>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	dd70      	ble.n	8001410 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800132e:	4b46      	ldr	r3, [pc, #280]	@ (8001448 <GPS_parse+0x164>)
 8001330:	edd3 7a04 	vldr	s15, [r3, #16]
 8001334:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <GPS_parse+0x164>)
 8001336:	7e1b      	ldrb	r3, [r3, #24]
 8001338:	4618      	mov	r0, r3
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	f000 f8a7 	bl	8001490 <GPS_nmea_to_dec>
 8001342:	eef0 7a40 	vmov.f32	s15, s0
 8001346:	4b40      	ldr	r3, [pc, #256]	@ (8001448 <GPS_parse+0x164>)
 8001348:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800134c:	4b3e      	ldr	r3, [pc, #248]	@ (8001448 <GPS_parse+0x164>)
 800134e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001352:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <GPS_parse+0x164>)
 8001354:	7e5b      	ldrb	r3, [r3, #25]
 8001356:	4618      	mov	r0, r3
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f000 f898 	bl	8001490 <GPS_nmea_to_dec>
 8001360:	eef0 7a40 	vmov.f32	s15, s0
 8001364:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <GPS_parse+0x164>)
 8001366:	edc3 7a00 	vstr	s15, [r3]
    		return;
 800136a:	e051      	b.n	8001410 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 800136c:	2206      	movs	r2, #6
 800136e:	4937      	ldr	r1, [pc, #220]	@ (800144c <GPS_parse+0x168>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f00b fa62 	bl	800c83a <strncmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d114      	bne.n	80013a6 <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 800137c:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <GPS_parse+0x16c>)
 800137e:	9305      	str	r3, [sp, #20]
 8001380:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <GPS_parse+0x170>)
 8001382:	9304      	str	r3, [sp, #16]
 8001384:	4b34      	ldr	r3, [pc, #208]	@ (8001458 <GPS_parse+0x174>)
 8001386:	9303      	str	r3, [sp, #12]
 8001388:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <GPS_parse+0x14c>)
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <GPS_parse+0x150>)
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <GPS_parse+0x154>)
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <GPS_parse+0x158>)
 8001396:	4a2a      	ldr	r2, [pc, #168]	@ (8001440 <GPS_parse+0x15c>)
 8001398:	4930      	ldr	r1, [pc, #192]	@ (800145c <GPS_parse+0x178>)
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f00b f9d4 	bl	800c748 <siscanf>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	e034      	b.n	8001410 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80013a6:	2206      	movs	r2, #6
 80013a8:	492d      	ldr	r1, [pc, #180]	@ (8001460 <GPS_parse+0x17c>)
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f00b fa45 	bl	800c83a <strncmp>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d110      	bne.n	80013d8 <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80013b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <GPS_parse+0x180>)
 80013b8:	9303      	str	r3, [sp, #12]
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <GPS_parse+0x15c>)
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <GPS_parse+0x14c>)
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <GPS_parse+0x150>)
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <GPS_parse+0x154>)
 80013c8:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <GPS_parse+0x158>)
 80013ca:	4927      	ldr	r1, [pc, #156]	@ (8001468 <GPS_parse+0x184>)
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f00b f9bb 	bl	800c748 <siscanf>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	e01b      	b.n	8001410 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 80013d8:	2206      	movs	r2, #6
 80013da:	4924      	ldr	r1, [pc, #144]	@ (800146c <GPS_parse+0x188>)
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f00b fa2c 	bl	800c83a <strncmp>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d113      	bne.n	8001410 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80013e8:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <GPS_parse+0x18c>)
 80013ea:	9305      	str	r3, [sp, #20]
 80013ec:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <GPS_parse+0x190>)
 80013ee:	9304      	str	r3, [sp, #16]
 80013f0:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <GPS_parse+0x194>)
 80013f2:	9303      	str	r3, [sp, #12]
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <GPS_parse+0x174>)
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	4b20      	ldr	r3, [pc, #128]	@ (800147c <GPS_parse+0x198>)
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <GPS_parse+0x19c>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <GPS_parse+0x1a0>)
 8001402:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <GPS_parse+0x1a4>)
 8001404:	4921      	ldr	r1, [pc, #132]	@ (800148c <GPS_parse+0x1a8>)
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f00b f99e 	bl	800c748 <siscanf>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
            return;
    }
}
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	0800fce8 	.word	0x0800fce8
 800141c:	20000774 	.word	0x20000774
 8001420:	20000770 	.word	0x20000770
 8001424:	2000076c 	.word	0x2000076c
 8001428:	20000768 	.word	0x20000768
 800142c:	20000764 	.word	0x20000764
 8001430:	20000761 	.word	0x20000761
 8001434:	20000754 	.word	0x20000754
 8001438:	20000760 	.word	0x20000760
 800143c:	20000758 	.word	0x20000758
 8001440:	2000075c 	.word	0x2000075c
 8001444:	0800fcf0 	.word	0x0800fcf0
 8001448:	20000748 	.word	0x20000748
 800144c:	0800fd18 	.word	0x0800fd18
 8001450:	20000780 	.word	0x20000780
 8001454:	2000077c 	.word	0x2000077c
 8001458:	20000778 	.word	0x20000778
 800145c:	0800fd20 	.word	0x0800fd20
 8001460:	0800fd40 	.word	0x0800fd40
 8001464:	20000784 	.word	0x20000784
 8001468:	0800fd48 	.word	0x0800fd48
 800146c:	0800fd64 	.word	0x0800fd64
 8001470:	2000079c 	.word	0x2000079c
 8001474:	20000798 	.word	0x20000798
 8001478:	20000795 	.word	0x20000795
 800147c:	20000794 	.word	0x20000794
 8001480:	20000790 	.word	0x20000790
 8001484:	2000078c 	.word	0x2000078c
 8001488:	20000788 	.word	0x20000788
 800148c:	0800fd6c 	.word	0x0800fd6c

08001490 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	ed87 0a01 	vstr	s0, [r7, #4]
 800149a:	4603      	mov	r3, r0
 800149c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800149e:	ed97 7a01 	vldr	s14, [r7, #4]
 80014a2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001524 <GPS_nmea_to_dec+0x94>
 80014a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2264      	movs	r2, #100	@ 0x64
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80014d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001528 <GPS_nmea_to_dec+0x98>
 80014d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014dc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	2b53      	cmp	r3, #83	@ 0x53
 80014fa:	d002      	beq.n	8001502 <GPS_nmea_to_dec+0x72>
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	2b57      	cmp	r3, #87	@ 0x57
 8001500:	d105      	bne.n	800150e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001502:	edd7 7a05 	vldr	s15, [r7, #20]
 8001506:	eef1 7a67 	vneg.f32	s15, s15
 800150a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	ee07 3a90 	vmov	s15, r3
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	42c80000 	.word	0x42c80000
 8001528:	42700000 	.word	0x42700000

0800152c <UpperCase>:
float Old_Default_TimeGPS;
float Old_Default_AltGPS;
float Old_Default_LatGPS;

//Useful functions for the code
void UpperCase(char *str){
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	while (*str)
 8001534:	e015      	b.n	8001562 <UpperCase+0x36>
	{
		*str=toupper(*str);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	3301      	adds	r3, #1
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <UpperCase+0x4c>)
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d102      	bne.n	8001554 <UpperCase+0x28>
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	3b20      	subs	r3, #32
 8001552:	e000      	b.n	8001556 <UpperCase+0x2a>
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	701a      	strb	r2, [r3, #0]
		str++;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
	while (*str)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1e5      	bne.n	8001536 <UpperCase+0xa>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	080117b0 	.word	0x080117b0

0800157c <Start_IHM_Task>:

void Start_IHM_Task(void const * argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_IHM_Task */
	MainMenu();
 8001584:	f000 f8e6 	bl	8001754 <MainMenu>
	IhmMessageBufferHandle = xMessageBufferCreate(xIhmMessageBufferSizeBytes);
 8001588:	2364      	movs	r3, #100	@ 0x64
 800158a:	2201      	movs	r2, #1
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f007 fbc1 	bl	8008d16 <xStreamBufferGenericCreate>
 8001594:	4603      	mov	r3, r0
 8001596:	4a15      	ldr	r2, [pc, #84]	@ (80015ec <Start_IHM_Task+0x70>)
 8001598:	6013      	str	r3, [r2, #0]
	if( IhmMessageBufferHandle != NULL )
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <Start_IHM_Task+0x70>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <Start_IHM_Task+0x32>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 80015a2:	2364      	movs	r3, #100	@ 0x64
 80015a4:	2222      	movs	r2, #34	@ 0x22
 80015a6:	4912      	ldr	r1, [pc, #72]	@ (80015f0 <Start_IHM_Task+0x74>)
 80015a8:	4812      	ldr	r0, [pc, #72]	@ (80015f4 <Start_IHM_Task+0x78>)
 80015aa:	f005 fcd9 	bl	8006f60 <HAL_UART_Transmit>
	}

	/* Infinite loop */
	for(;;)
	{
		xMessageBufferReceive( IhmMessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <Start_IHM_Task+0x70>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	2240      	movs	r2, #64	@ 0x40
 80015b8:	490f      	ldr	r1, [pc, #60]	@ (80015f8 <Start_IHM_Task+0x7c>)
 80015ba:	f007 fcee 	bl	8008f9a <xStreamBufferReceive>
		memset(new_buff,0,sizeof(new_buff));
 80015be:	2240      	movs	r2, #64	@ 0x40
 80015c0:	2100      	movs	r1, #0
 80015c2:	480e      	ldr	r0, [pc, #56]	@ (80015fc <Start_IHM_Task+0x80>)
 80015c4:	f00b f931 	bl	800c82a <memset>
		UpperCase((char*)received_data);
 80015c8:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <Start_IHM_Task+0x7c>)
 80015ca:	f7ff ffaf 	bl	800152c <UpperCase>
		tokenization((char*)received_data);
 80015ce:	480a      	ldr	r0, [pc, #40]	@ (80015f8 <Start_IHM_Task+0x7c>)
 80015d0:	f000 f98a 	bl	80018e8 <tokenization>
		ParseCommand();
 80015d4:	f000 f9b6 	bl	8001944 <ParseCommand>
		memset(received_data,0,sizeof(received_data));
 80015d8:	2240      	movs	r2, #64	@ 0x40
 80015da:	2100      	movs	r1, #0
 80015dc:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <Start_IHM_Task+0x7c>)
 80015de:	f00b f924 	bl	800c82a <memset>
		osDelay(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f007 facf 	bl	8008b86 <osDelay>
		xMessageBufferReceive( IhmMessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 80015e8:	bf00      	nop
 80015ea:	e7e0      	b.n	80015ae <Start_IHM_Task+0x32>
 80015ec:	20000938 	.word	0x20000938
 80015f0:	0800fd8c 	.word	0x0800fd8c
 80015f4:	20000cd8 	.word	0x20000cd8
 80015f8:	200008f8 	.word	0x200008f8
 80015fc:	200007e8 	.word	0x200007e8

08001600 <HAL_UART_RxCpltCallback>:
}

// Fonction pour afficher le menu principal complet


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	  if (huart==&huart2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a46      	ldr	r2, [pc, #280]	@ (8001724 <HAL_UART_RxCpltCallback+0x124>)
 800160c:	4293      	cmp	r3, r2
 800160e:	f040 8085 	bne.w	800171c <HAL_UART_RxCpltCallback+0x11c>
	{if (!processing)
 8001612:	4b45      	ldr	r3, [pc, #276]	@ (8001728 <HAL_UART_RxCpltCallback+0x128>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d17b      	bne.n	8001712 <HAL_UART_RxCpltCallback+0x112>
	{ if ((rxByte == '\r')||(rxByte=='\n'))
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <HAL_UART_RxCpltCallback+0x12c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b0d      	cmp	r3, #13
 8001620:	d003      	beq.n	800162a <HAL_UART_RxCpltCallback+0x2a>
 8001622:	4b42      	ldr	r3, [pc, #264]	@ (800172c <HAL_UART_RxCpltCallback+0x12c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b0a      	cmp	r3, #10
 8001628:	d13a      	bne.n	80016a0 <HAL_UART_RxCpltCallback+0xa0>
	{   if (rxIndex!=0)
 800162a:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06f      	beq.n	8001712 <HAL_UART_RxCpltCallback+0x112>
	{
		processing=1;
 8001632:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <HAL_UART_RxCpltCallback+0x128>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxIndex] = '\0';
 8001638:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b3d      	ldr	r3, [pc, #244]	@ (8001734 <HAL_UART_RxCpltCallback+0x134>)
 8001640:	2100      	movs	r1, #0
 8001642:	5499      	strb	r1, [r3, r2]
		memcpy(new_buff,rxBuffer,rxIndex);
 8001644:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	493a      	ldr	r1, [pc, #232]	@ (8001734 <HAL_UART_RxCpltCallback+0x134>)
 800164c:	483a      	ldr	r0, [pc, #232]	@ (8001738 <HAL_UART_RxCpltCallback+0x138>)
 800164e:	f00b fa38 	bl	800cac2 <memcpy>
		xBytesSent=xMessageBufferSendFromISR(IhmMessageBufferHandle,new_buff,strlen((char*)new_buff),&xHigherPriorityTaskWoken);
 8001652:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <HAL_UART_RxCpltCallback+0x13c>)
 8001654:	681c      	ldr	r4, [r3, #0]
 8001656:	4838      	ldr	r0, [pc, #224]	@ (8001738 <HAL_UART_RxCpltCallback+0x138>)
 8001658:	f7fe fe1a 	bl	8000290 <strlen>
 800165c:	4602      	mov	r2, r0
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <HAL_UART_RxCpltCallback+0x140>)
 8001660:	4935      	ldr	r1, [pc, #212]	@ (8001738 <HAL_UART_RxCpltCallback+0x138>)
 8001662:	4620      	mov	r0, r4
 8001664:	f007 fbe9 	bl	8008e3a <xStreamBufferSendFromISR>
 8001668:	4603      	mov	r3, r0
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <HAL_UART_RxCpltCallback+0x144>)
 800166e:	701a      	strb	r2, [r3, #0]
		//The number of bytes actually written to the message buffer.  If the
		// * message buffer didn't have enough free space for the message to be stored
		// * then 0 is returned, otherwise xDataLengthBytes is returned.
		if( xBytesSent != strlen((char*)new_buff))
 8001670:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_UART_RxCpltCallback+0x144>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461c      	mov	r4, r3
 8001676:	4830      	ldr	r0, [pc, #192]	@ (8001738 <HAL_UART_RxCpltCallback+0x138>)
 8001678:	f7fe fe0a 	bl	8000290 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	429c      	cmp	r4, r3
 8001680:	d005      	beq.n	800168e <HAL_UART_RxCpltCallback+0x8e>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"Message sent !=buffer data\r\n",26,100);
 8001682:	2364      	movs	r3, #100	@ 0x64
 8001684:	221a      	movs	r2, #26
 8001686:	4930      	ldr	r1, [pc, #192]	@ (8001748 <HAL_UART_RxCpltCallback+0x148>)
 8001688:	4826      	ldr	r0, [pc, #152]	@ (8001724 <HAL_UART_RxCpltCallback+0x124>)
 800168a:	f005 fc69 	bl	8006f60 <HAL_UART_Transmit>
		}
		memset(rxBuffer,0,sizeof(rxBuffer));
 800168e:	2240      	movs	r2, #64	@ 0x40
 8001690:	2100      	movs	r1, #0
 8001692:	4828      	ldr	r0, [pc, #160]	@ (8001734 <HAL_UART_RxCpltCallback+0x134>)
 8001694:	f00b f8c9 	bl	800c82a <memset>
		rxIndex = 0;}
 8001698:	4b25      	ldr	r3, [pc, #148]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	{   if (rxIndex!=0)
 800169e:	e038      	b.n	8001712 <HAL_UART_RxCpltCallback+0x112>
	}

	else { if (rxIndex > 0){
 80016a0:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <HAL_UART_RxCpltCallback+0xec>

		if (rxByte == '\b') {
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_UART_RxCpltCallback+0x12c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d11d      	bne.n	80016ec <HAL_UART_RxCpltCallback+0xec>
			rxBuffer[rxIndex]=' ';
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <HAL_UART_RxCpltCallback+0x134>)
 80016b8:	2120      	movs	r1, #32
 80016ba:	5499      	strb	r1, [r3, r2]
			rxIndex=rxIndex-1;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016c6:	701a      	strb	r2, [r3, #0]
			rxBuffer[rxIndex]=' ';
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_UART_RxCpltCallback+0x134>)
 80016d0:	2120      	movs	r1, #32
 80016d2:	5499      	strb	r1, [r3, r2]
			retour=rxIndex-1;
 80016d4:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3b01      	subs	r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_UART_RxCpltCallback+0x14c>)
 80016de:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, (uint8_t *)" \b", 2, 100);
 80016e0:	2364      	movs	r3, #100	@ 0x64
 80016e2:	2202      	movs	r2, #2
 80016e4:	491a      	ldr	r1, [pc, #104]	@ (8001750 <HAL_UART_RxCpltCallback+0x150>)
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f005 fc3a 	bl	8006f60 <HAL_UART_Transmit>
			//{rxBuffer[i]=rxBuffer[retour++];
			//if (i==retour)
			//rxBuffer[i]='\0';}
		}
	}
	if (rxIndex < RX_BUFFER_SIZE-1) {
 80016ec:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80016f2:	d80b      	bhi.n	800170c <HAL_UART_RxCpltCallback+0x10c>

		rxBuffer[rxIndex++] = rxByte;
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	b2d1      	uxtb	r1, r2
 80016fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 80016fe:	7011      	strb	r1, [r2, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_UART_RxCpltCallback+0x12c>)
 8001704:	7819      	ldrb	r1, [r3, #0]
 8001706:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_UART_RxCpltCallback+0x134>)
 8001708:	5499      	strb	r1, [r3, r2]
 800170a:	e002      	b.n	8001712 <HAL_UART_RxCpltCallback+0x112>
	}
	else {
		rxIndex=0;
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_UART_RxCpltCallback+0x130>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
	}
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	4905      	ldr	r1, [pc, #20]	@ (800172c <HAL_UART_RxCpltCallback+0x12c>)
 8001716:	4803      	ldr	r0, [pc, #12]	@ (8001724 <HAL_UART_RxCpltCallback+0x124>)
 8001718:	f005 fcac 	bl	8007074 <HAL_UART_Receive_IT>
}
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	20000cd8 	.word	0x20000cd8
 8001728:	20000940 	.word	0x20000940
 800172c:	20000828 	.word	0x20000828
 8001730:	20000829 	.word	0x20000829
 8001734:	200007a8 	.word	0x200007a8
 8001738:	200007e8 	.word	0x200007e8
 800173c:	20000938 	.word	0x20000938
 8001740:	2000093c 	.word	0x2000093c
 8001744:	200008f4 	.word	0x200008f4
 8001748:	0800fdb0 	.word	0x0800fdb0
 800174c:	20000941 	.word	0x20000941
 8001750:	0800fdd0 	.word	0x0800fdd0

08001754 <MainMenu>:
		//SystemConfig Menu
		{"SAVE",(char*)":TO SAVE MODIFIED PARAMETERS PERMANENTLY WRITE SAVE",Save_f,SysConfig_Menu},
		{"RESTORE",(char*)":TO RESTORE OLD PARAMETERS WRITE RESTORE",Restore_f,SysConfig_Menu},

};
void MainMenu(void) {
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b091      	sub	sp, #68	@ 0x44
 8001758:	af06      	add	r7, sp, #24
	// Afficher tout le menu une seule fois
	currentMenu=Main_Menu;
 800175a:	4b50      	ldr	r3, [pc, #320]	@ (800189c <MainMenu+0x148>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
	char* weekday_str[] = {
 8001760:	4b4f      	ldr	r3, [pc, #316]	@ (80018a0 <MainMenu+0x14c>)
 8001762:	1d3c      	adds	r4, r7, #4
 8001764:	461d      	mov	r5, r3
 8001766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800176e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"Thursday",     // 4
			"Friday",       // 5
			"Saturday",     // 6
			"Sunday"        // 7
	};
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001772:	2200      	movs	r2, #0
 8001774:	494b      	ldr	r1, [pc, #300]	@ (80018a4 <MainMenu+0x150>)
 8001776:	484c      	ldr	r0, [pc, #304]	@ (80018a8 <MainMenu+0x154>)
 8001778:	f004 fdb1 	bl	80062de <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800177c:	2200      	movs	r2, #0
 800177e:	494b      	ldr	r1, [pc, #300]	@ (80018ac <MainMenu+0x158>)
 8001780:	4849      	ldr	r0, [pc, #292]	@ (80018a8 <MainMenu+0x154>)
 8001782:	f004 fe8f 	bl	80064a4 <HAL_RTC_GetDate>
	if (Reset_Flag==1)
 8001786:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <MainMenu+0x15c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11e      	bne.n	80017cc <MainMenu+0x78>
	{

		day=sDate.WeekDay;
 800178e:	4b47      	ldr	r3, [pc, #284]	@ (80018ac <MainMenu+0x158>)
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	4b48      	ldr	r3, [pc, #288]	@ (80018b4 <MainMenu+0x160>)
 8001794:	701a      	strb	r2, [r3, #0]
		date=sDate.Date;
 8001796:	4b45      	ldr	r3, [pc, #276]	@ (80018ac <MainMenu+0x158>)
 8001798:	789a      	ldrb	r2, [r3, #2]
 800179a:	4b47      	ldr	r3, [pc, #284]	@ (80018b8 <MainMenu+0x164>)
 800179c:	701a      	strb	r2, [r3, #0]
		month=sDate.Month;
 800179e:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <MainMenu+0x158>)
 80017a0:	785a      	ldrb	r2, [r3, #1]
 80017a2:	4b46      	ldr	r3, [pc, #280]	@ (80018bc <MainMenu+0x168>)
 80017a4:	701a      	strb	r2, [r3, #0]
		year=sDate.Year;
 80017a6:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <MainMenu+0x158>)
 80017a8:	78da      	ldrb	r2, [r3, #3]
 80017aa:	4b45      	ldr	r3, [pc, #276]	@ (80018c0 <MainMenu+0x16c>)
 80017ac:	701a      	strb	r2, [r3, #0]
		hour=sTime.Hours;
 80017ae:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <MainMenu+0x150>)
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <MainMenu+0x170>)
 80017b4:	701a      	strb	r2, [r3, #0]
		minutes=sTime.Minutes;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <MainMenu+0x150>)
 80017b8:	785a      	ldrb	r2, [r3, #1]
 80017ba:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <MainMenu+0x174>)
 80017bc:	701a      	strb	r2, [r3, #0]
		seconds=sTime.Seconds;
 80017be:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <MainMenu+0x150>)
 80017c0:	789a      	ldrb	r2, [r3, #2]
 80017c2:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <MainMenu+0x178>)
 80017c4:	701a      	strb	r2, [r3, #0]
		Reset_Flag=0;
 80017c6:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <MainMenu+0x15c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
	}

	sprintf((char*)txBuffer,"\033[1;30;107m----------------Main Menu---------------\033[0m\n \r\nDate : %s , %02d/%02d/%02d        Session opened at: %02d:%02d:%02d\r\n",
 80017cc:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <MainMenu+0x160>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	3328      	adds	r3, #40	@ 0x28
 80017d4:	443b      	add	r3, r7
 80017d6:	f853 2c24 	ldr.w	r2, [r3, #-36]
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <MainMenu+0x164>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461e      	mov	r6, r3
 80017e0:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <MainMenu+0x168>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	4b36      	ldr	r3, [pc, #216]	@ (80018c0 <MainMenu+0x16c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80017ee:	4935      	ldr	r1, [pc, #212]	@ (80018c4 <MainMenu+0x170>)
 80017f0:	7809      	ldrb	r1, [r1, #0]
 80017f2:	460c      	mov	r4, r1
 80017f4:	4934      	ldr	r1, [pc, #208]	@ (80018c8 <MainMenu+0x174>)
 80017f6:	7809      	ldrb	r1, [r1, #0]
 80017f8:	460d      	mov	r5, r1
 80017fa:	4934      	ldr	r1, [pc, #208]	@ (80018cc <MainMenu+0x178>)
 80017fc:	7809      	ldrb	r1, [r1, #0]
 80017fe:	9104      	str	r1, [sp, #16]
 8001800:	9503      	str	r5, [sp, #12]
 8001802:	9402      	str	r4, [sp, #8]
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	9000      	str	r0, [sp, #0]
 8001808:	4633      	mov	r3, r6
 800180a:	4931      	ldr	r1, [pc, #196]	@ (80018d0 <MainMenu+0x17c>)
 800180c:	4831      	ldr	r0, [pc, #196]	@ (80018d4 <MainMenu+0x180>)
 800180e:	f00a ff79 	bl	800c704 <siprintf>
			weekday_str[day],date,month, 2000+year,hour,minutes, seconds);
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001812:	4830      	ldr	r0, [pc, #192]	@ (80018d4 <MainMenu+0x180>)
 8001814:	f7fe fd3c 	bl	8000290 <strlen>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	2364      	movs	r3, #100	@ 0x64
 800181e:	492d      	ldr	r1, [pc, #180]	@ (80018d4 <MainMenu+0x180>)
 8001820:	482d      	ldr	r0, [pc, #180]	@ (80018d8 <MainMenu+0x184>)
 8001822:	f005 fb9d 	bl	8006f60 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800182c:	e028      	b.n	8001880 <MainMenu+0x12c>
	{if (cmd_list[l].MenuIndex==Main_Menu)
 800182e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001832:	4a2a      	ldr	r2, [pc, #168]	@ (80018dc <MainMenu+0x188>)
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	330c      	adds	r3, #12
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d11a      	bne.n	8001876 <MainMenu+0x122>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001844:	4a25      	ldr	r2, [pc, #148]	@ (80018dc <MainMenu+0x188>)
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	4413      	add	r3, r2
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001850:	4922      	ldr	r1, [pc, #136]	@ (80018dc <MainMenu+0x188>)
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	440b      	add	r3, r1
 8001856:	3304      	adds	r3, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4921      	ldr	r1, [pc, #132]	@ (80018e0 <MainMenu+0x18c>)
 800185c:	481d      	ldr	r0, [pc, #116]	@ (80018d4 <MainMenu+0x180>)
 800185e:	f00a ff51 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001862:	481c      	ldr	r0, [pc, #112]	@ (80018d4 <MainMenu+0x180>)
 8001864:	f7fe fd14 	bl	8000290 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	b29a      	uxth	r2, r3
 800186c:	2364      	movs	r3, #100	@ 0x64
 800186e:	4919      	ldr	r1, [pc, #100]	@ (80018d4 <MainMenu+0x180>)
 8001870:	4819      	ldr	r0, [pc, #100]	@ (80018d8 <MainMenu+0x184>)
 8001872:	f005 fb75 	bl	8006f60 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800187a:	3301      	adds	r3, #1
 800187c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001884:	2b25      	cmp	r3, #37	@ 0x25
 8001886:	d9d2      	bls.n	800182e <MainMenu+0xda>
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	4916      	ldr	r1, [pc, #88]	@ (80018e4 <MainMenu+0x190>)
 800188c:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <MainMenu+0x184>)
 800188e:	f005 fbf1 	bl	8007074 <HAL_UART_Receive_IT>

}
 8001892:	bf00      	nop
 8001894:	372c      	adds	r7, #44	@ 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189a:	bf00      	nop
 800189c:	2000096c 	.word	0x2000096c
 80018a0:	08010744 	.word	0x08010744
 80018a4:	20000bc4 	.word	0x20000bc4
 80018a8:	20000bdc 	.word	0x20000bdc
 80018ac:	20000bd8 	.word	0x20000bd8
 80018b0:	20000a80 	.word	0x20000a80
 80018b4:	200007a6 	.word	0x200007a6
 80018b8:	200007a0 	.word	0x200007a0
 80018bc:	200007a1 	.word	0x200007a1
 80018c0:	200007a2 	.word	0x200007a2
 80018c4:	200007a3 	.word	0x200007a3
 80018c8:	200007a4 	.word	0x200007a4
 80018cc:	200007a5 	.word	0x200007a5
 80018d0:	08010668 	.word	0x08010668
 80018d4:	2000082c 	.word	0x2000082c
 80018d8:	20000cd8 	.word	0x20000cd8
 80018dc:	20000044 	.word	0x20000044
 80018e0:	080106ec 	.word	0x080106ec
 80018e4:	20000828 	.word	0x20000828

080018e8 <tokenization>:
void tokenization(char *str) //function to tokenize input string
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	tokens[0]=strtok(str," ");
 80018f0:	4912      	ldr	r1, [pc, #72]	@ (800193c <tokenization+0x54>)
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f00a ffb4 	bl	800c860 <strtok>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a11      	ldr	r2, [pc, #68]	@ (8001940 <tokenization+0x58>)
 80018fc:	6013      	str	r3, [r2, #0]
	for (uint8_t i=1; i<10;i++)
 80018fe:	2301      	movs	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	e011      	b.n	8001928 <tokenization+0x40>
	{   tokens[i]=strtok(NULL," ");
 8001904:	7bfc      	ldrb	r4, [r7, #15]
 8001906:	490d      	ldr	r1, [pc, #52]	@ (800193c <tokenization+0x54>)
 8001908:	2000      	movs	r0, #0
 800190a:	f00a ffa9 	bl	800c860 <strtok>
 800190e:	4603      	mov	r3, r0
 8001910:	4a0b      	ldr	r2, [pc, #44]	@ (8001940 <tokenization+0x58>)
 8001912:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (tokens[i]==NULL)
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <tokenization+0x58>)
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <tokenization+0x48>
	for (uint8_t i=1; i<10;i++)
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	3301      	adds	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b09      	cmp	r3, #9
 800192c:	d9ea      	bls.n	8001904 <tokenization+0x1c>
		break;
	}
}
 800192e:	e000      	b.n	8001932 <tokenization+0x4a>
		break;
 8001930:	bf00      	nop
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	08010764 	.word	0x08010764
 8001940:	20000944 	.word	0x20000944

08001944 <ParseCommand>:
uint8_t cl_elements=sizeof(cmd_list)/sizeof(cmd_list[0]);
void ParseCommand() {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	uint8_t c=0;
 800194a:	2300      	movs	r3, #0
 800194c:	71fb      	strb	r3, [r7, #7]
	uint8_t correspond=0;
 800194e:	2300      	movs	r3, #0
 8001950:	71bb      	strb	r3, [r7, #6]
	uint8_t true=0;
 8001952:	2300      	movs	r3, #0
 8001954:	717b      	strb	r3, [r7, #5]
	uint8_t goback=0;
 8001956:	2300      	movs	r3, #0
 8001958:	713b      	strb	r3, [r7, #4]
	if (strcmp(tokens[0],"..")==0)
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <ParseCommand+0xcc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	492d      	ldr	r1, [pc, #180]	@ (8001a14 <ParseCommand+0xd0>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fc35 	bl	80001d0 <strcmp>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d135      	bne.n	80019d8 <ParseCommand+0x94>
	{MainMenu();
 800196c:	f7ff fef2 	bl	8001754 <MainMenu>
	goback=1;}
 8001970:	2301      	movs	r3, #1
 8001972:	713b      	strb	r3, [r7, #4]
	while (c<cl_elements)
 8001974:	e030      	b.n	80019d8 <ParseCommand+0x94>
	{if (strcmp(tokens[0], cmd_list[c].Name)== 0)
 8001976:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <ParseCommand+0xcc>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4926      	ldr	r1, [pc, #152]	@ (8001a18 <ParseCommand+0xd4>)
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	440b      	add	r3, r1
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f7fe fc22 	bl	80001d0 <strcmp>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d11f      	bne.n	80019d2 <ParseCommand+0x8e>
	{ true=1;
 8001992:	2301      	movs	r3, #1
 8001994:	717b      	strb	r3, [r7, #5]
	if (currentMenu==cmd_list[c].MenuIndex)
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4a1f      	ldr	r2, [pc, #124]	@ (8001a18 <ParseCommand+0xd4>)
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	330c      	adds	r3, #12
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <ParseCommand+0xd8>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d10c      	bne.n	80019c4 <ParseCommand+0x80>
	{cmd_list[c].handler(tokens[1]);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001a18 <ParseCommand+0xd4>)
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	3308      	adds	r3, #8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a16      	ldr	r2, [pc, #88]	@ (8001a10 <ParseCommand+0xcc>)
 80019b8:	6852      	ldr	r2, [r2, #4]
 80019ba:	4610      	mov	r0, r2
 80019bc:	4798      	blx	r3
	correspond=1;}
 80019be:	2301      	movs	r3, #1
 80019c0:	71bb      	strb	r3, [r7, #6]
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
	break;
 80019c2:	e00e      	b.n	80019e2 <ParseCommand+0x9e>
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
 80019c4:	2364      	movs	r3, #100	@ 0x64
 80019c6:	220c      	movs	r2, #12
 80019c8:	4915      	ldr	r1, [pc, #84]	@ (8001a20 <ParseCommand+0xdc>)
 80019ca:	4816      	ldr	r0, [pc, #88]	@ (8001a24 <ParseCommand+0xe0>)
 80019cc:	f005 fac8 	bl	8006f60 <HAL_UART_Transmit>
	break;
 80019d0:	e007      	b.n	80019e2 <ParseCommand+0x9e>
	}
	c++;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	3301      	adds	r3, #1
 80019d6:	71fb      	strb	r3, [r7, #7]
	while (c<cl_elements)
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <ParseCommand+0xe4>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	79fa      	ldrb	r2, [r7, #7]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3c9      	bcc.n	8001976 <ParseCommand+0x32>
	}
	if (true==0 && correspond==0 && goback==0)
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <ParseCommand+0xbc>
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <ParseCommand+0xbc>
 80019ee:	793b      	ldrb	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <ParseCommand+0xbc>
		HAL_UART_Transmit(&huart2, (uint8_t*)"COMMAND ERROR\r\n",16,100);
 80019f4:	2364      	movs	r3, #100	@ 0x64
 80019f6:	2210      	movs	r2, #16
 80019f8:	490c      	ldr	r1, [pc, #48]	@ (8001a2c <ParseCommand+0xe8>)
 80019fa:	480a      	ldr	r0, [pc, #40]	@ (8001a24 <ParseCommand+0xe0>)
 80019fc:	f005 fab0 	bl	8006f60 <HAL_UART_Transmit>

	processing=0;
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <ParseCommand+0xec>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000944 	.word	0x20000944
 8001a14:	08010768 	.word	0x08010768
 8001a18:	20000044 	.word	0x20000044
 8001a1c:	2000096c 	.word	0x2000096c
 8001a20:	0801076c 	.word	0x0801076c
 8001a24:	20000cd8 	.word	0x20000cd8
 8001a28:	200002a4 	.word	0x200002a4
 8001a2c:	0801077c 	.word	0x0801077c
 8001a30:	20000940 	.word	0x20000940

08001a34 <LoraMenu>:

/*//////////////////////////////////////////////LORA MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
void LoraMenu(char* arg){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

	currentMenu=Lora_Menu;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <LoraMenu+0x88>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;38;2;25;25;112;107m--------------- LORA Menu ---------------\033[0m\n \r\n");
 8001a42:	491f      	ldr	r1, [pc, #124]	@ (8001ac0 <LoraMenu+0x8c>)
 8001a44:	481f      	ldr	r0, [pc, #124]	@ (8001ac4 <LoraMenu+0x90>)
 8001a46:	f00a fe5d 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001a4a:	481e      	ldr	r0, [pc, #120]	@ (8001ac4 <LoraMenu+0x90>)
 8001a4c:	f7fe fc20 	bl	8000290 <strlen>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2364      	movs	r3, #100	@ 0x64
 8001a56:	491b      	ldr	r1, [pc, #108]	@ (8001ac4 <LoraMenu+0x90>)
 8001a58:	481b      	ldr	r0, [pc, #108]	@ (8001ac8 <LoraMenu+0x94>)
 8001a5a:	f005 fa81 	bl	8006f60 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e023      	b.n	8001aac <LoraMenu+0x78>
	{if (cmd_list[l].MenuIndex==Lora_Menu)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4a19      	ldr	r2, [pc, #100]	@ (8001acc <LoraMenu+0x98>)
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d118      	bne.n	8001aa6 <LoraMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	4a15      	ldr	r2, [pc, #84]	@ (8001acc <LoraMenu+0x98>)
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	4912      	ldr	r1, [pc, #72]	@ (8001acc <LoraMenu+0x98>)
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	440b      	add	r3, r1
 8001a86:	3304      	adds	r3, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4911      	ldr	r1, [pc, #68]	@ (8001ad0 <LoraMenu+0x9c>)
 8001a8c:	480d      	ldr	r0, [pc, #52]	@ (8001ac4 <LoraMenu+0x90>)
 8001a8e:	f00a fe39 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001a92:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <LoraMenu+0x90>)
 8001a94:	f7fe fbfc 	bl	8000290 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2364      	movs	r3, #100	@ 0x64
 8001a9e:	4909      	ldr	r1, [pc, #36]	@ (8001ac4 <LoraMenu+0x90>)
 8001aa0:	4809      	ldr	r0, [pc, #36]	@ (8001ac8 <LoraMenu+0x94>)
 8001aa2:	f005 fa5d 	bl	8006f60 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b25      	cmp	r3, #37	@ 0x25
 8001ab0:	d9d8      	bls.n	8001a64 <LoraMenu+0x30>
	}
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000096c 	.word	0x2000096c
 8001ac0:	0801078c 	.word	0x0801078c
 8001ac4:	2000082c 	.word	0x2000082c
 8001ac8:	20000cd8 	.word	0x20000cd8
 8001acc:	20000044 	.word	0x20000044
 8001ad0:	080106ec 	.word	0x080106ec

08001ad4 <SetSF_f>:
void SetSF_f(char* arg){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	uint8_t success = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]

	if (tokens[1] != NULL && strlen(tokens[1]) < 3) {
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <SetSF_f+0x84>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d024      	beq.n	8001b32 <SetSF_f+0x5e>
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <SetSF_f+0x84>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fbcf 	bl	8000290 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d81c      	bhi.n	8001b32 <SetSF_f+0x5e>
		int sf_new_value = atoi(tokens[1]);
 8001af8:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <SetSF_f+0x84>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f009 f836 	bl	800ab6e <atoi>
 8001b02:	60b8      	str	r0, [r7, #8]

		if (sf_new_value >= MIN_SF && sf_new_value <= MAX_SF) {
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	dd13      	ble.n	8001b32 <SetSF_f+0x5e>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b0c      	cmp	r3, #12
 8001b0e:	dc10      	bgt.n	8001b32 <SetSF_f+0x5e>
			sprintf((char*)cmd_buff, "SF VALUE SET TO %d SUCCESSFULLY\r\n", sf_new_value);
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	4912      	ldr	r1, [pc, #72]	@ (8001b5c <SetSF_f+0x88>)
 8001b14:	4812      	ldr	r0, [pc, #72]	@ (8001b60 <SetSF_f+0x8c>)
 8001b16:	f00a fdf5 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001b1a:	4811      	ldr	r0, [pc, #68]	@ (8001b60 <SetSF_f+0x8c>)
 8001b1c:	f7fe fbb8 	bl	8000290 <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	2364      	movs	r3, #100	@ 0x64
 8001b26:	490e      	ldr	r1, [pc, #56]	@ (8001b60 <SetSF_f+0x8c>)
 8001b28:	480e      	ldr	r0, [pc, #56]	@ (8001b64 <SetSF_f+0x90>)
 8001b2a:	f005 fa19 	bl	8006f60 <HAL_UART_Transmit>
			success = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (success==0) {
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <SetSF_f+0x70>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001b38:	2364      	movs	r3, #100	@ 0x64
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	490a      	ldr	r1, [pc, #40]	@ (8001b68 <SetSF_f+0x94>)
 8001b3e:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <SetSF_f+0x90>)
 8001b40:	f005 fa0e 	bl	8006f60 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));  // always clear at the end
 8001b44:	22b4      	movs	r2, #180	@ 0xb4
 8001b46:	2100      	movs	r1, #0
 8001b48:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <SetSF_f+0x8c>)
 8001b4a:	f00a fe6e 	bl	800c82a <memset>
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000944 	.word	0x20000944
 8001b5c:	080107d8 	.word	0x080107d8
 8001b60:	20000970 	.word	0x20000970
 8001b64:	20000cd8 	.word	0x20000cd8
 8001b68:	080107fc 	.word	0x080107fc

08001b6c <GetSF_f>:
	LoraValues.sf_l=0x0C;
}

}*/
void GetSF_f(char* arg)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SF VALUE IS %d \r\nNote: DEFAULT VALUE IS %d",Sf_New_Value,LoraValues.sf_l);
 8001b74:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <GetSF_f+0x40>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <GetSF_f+0x44>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <GetSF_f+0x48>)
 8001b80:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <GetSF_f+0x4c>)
 8001b82:	f00a fdbf 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001b86:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <GetSF_f+0x4c>)
 8001b88:	f7fe fb82 	bl	8000290 <strlen>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	2364      	movs	r3, #100	@ 0x64
 8001b92:	4909      	ldr	r1, [pc, #36]	@ (8001bb8 <GetSF_f+0x4c>)
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <GetSF_f+0x50>)
 8001b96:	f005 f9e3 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001b9a:	22b4      	movs	r2, #180	@ 0xb4
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4806      	ldr	r0, [pc, #24]	@ (8001bb8 <GetSF_f+0x4c>)
 8001ba0:	f00a fe43 	bl	800c82a <memset>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000096d 	.word	0x2000096d
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	0801080c 	.word	0x0801080c
 8001bb8:	20000970 	.word	0x20000970
 8001bbc:	20000cd8 	.word	0x20000cd8

08001bc0 <SetCR_f>:
void SetCR_f(char* arg)
{   uint8_t cr_flag=0;
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	77fb      	strb	r3, [r7, #31]
char* CR_Values[]={"1","2","3","4"};
 8001bcc:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <SetCR_f+0xb0>)
 8001bce:	f107 040c 	add.w	r4, r7, #12
 8001bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	77bb      	strb	r3, [r7, #30]
 8001bdc:	e037      	b.n	8001c4e <SetCR_f+0x8e>
{if (tokens[1]!=NULL &&
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <SetCR_f+0xb4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d030      	beq.n	8001c48 <SetCR_f+0x88>
		strcmp(tokens[1],CR_Values[cr])==0)
 8001be6:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <SetCR_f+0xb4>)
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	7fbb      	ldrb	r3, [r7, #30]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	3320      	adds	r3, #32
 8001bf0:	443b      	add	r3, r7
 8001bf2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f7fe fae9 	bl	80001d0 <strcmp>
 8001bfe:	4603      	mov	r3, r0
{if (tokens[1]!=NULL &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d121      	bne.n	8001c48 <SetCR_f+0x88>
{Cr_New_Value=atoi(tokens[1]);
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <SetCR_f+0xb4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f008 ffb0 	bl	800ab6e <atoi>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <SetCR_f+0xb8>)
 8001c14:	701a      	strb	r2, [r3, #0]
cr_flag=1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	77fb      	strb	r3, [r7, #31]
sprintf((char*)cmd_buff, "CR VALUE SET TO %d SUCCESSFULLY\r\n", Cr_New_Value);
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <SetCR_f+0xb8>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4916      	ldr	r1, [pc, #88]	@ (8001c7c <SetCR_f+0xbc>)
 8001c22:	4817      	ldr	r0, [pc, #92]	@ (8001c80 <SetCR_f+0xc0>)
 8001c24:	f00a fd6e 	bl	800c704 <siprintf>
HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001c28:	4815      	ldr	r0, [pc, #84]	@ (8001c80 <SetCR_f+0xc0>)
 8001c2a:	f7fe fb31 	bl	8000290 <strlen>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	2364      	movs	r3, #100	@ 0x64
 8001c34:	4912      	ldr	r1, [pc, #72]	@ (8001c80 <SetCR_f+0xc0>)
 8001c36:	4813      	ldr	r0, [pc, #76]	@ (8001c84 <SetCR_f+0xc4>)
 8001c38:	f005 f992 	bl	8006f60 <HAL_UART_Transmit>
memset(cmd_buff,0,sizeof(cmd_buff));
 8001c3c:	22b4      	movs	r2, #180	@ 0xb4
 8001c3e:	2100      	movs	r1, #0
 8001c40:	480f      	ldr	r0, [pc, #60]	@ (8001c80 <SetCR_f+0xc0>)
 8001c42:	f00a fdf2 	bl	800c82a <memset>
break;
 8001c46:	e005      	b.n	8001c54 <SetCR_f+0x94>
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 8001c48:	7fbb      	ldrb	r3, [r7, #30]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	77bb      	strb	r3, [r7, #30]
 8001c4e:	7fbb      	ldrb	r3, [r7, #30]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d9c4      	bls.n	8001bde <SetCR_f+0x1e>
}
}

if (cr_flag==0)
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <SetCR_f+0xa6>
	HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG CR VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 8001c5a:	2364      	movs	r3, #100	@ 0x64
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	490a      	ldr	r1, [pc, #40]	@ (8001c88 <SetCR_f+0xc8>)
 8001c60:	4808      	ldr	r0, [pc, #32]	@ (8001c84 <SetCR_f+0xc4>)
 8001c62:	f005 f97d 	bl	8006f60 <HAL_UART_Transmit>
}
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	@ 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	08010880 	.word	0x08010880
 8001c74:	20000944 	.word	0x20000944
 8001c78:	20000a24 	.word	0x20000a24
 8001c7c:	08010838 	.word	0x08010838
 8001c80:	20000970 	.word	0x20000970
 8001c84:	20000cd8 	.word	0x20000cd8
 8001c88:	0801085c 	.word	0x0801085c

08001c8c <GetCR_f>:

void GetCR_f(char* arg)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"CR VALUE IS %d \r\nNote:DEFAULTVALUE IS : %d\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Cr_New_Value,LoraValues.cr_l);
 8001c94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <GetCR_f+0x40>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <GetCR_f+0x44>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	490d      	ldr	r1, [pc, #52]	@ (8001cd4 <GetCR_f+0x48>)
 8001ca0:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <GetCR_f+0x4c>)
 8001ca2:	f00a fd2f 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001ca6:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <GetCR_f+0x4c>)
 8001ca8:	f7fe faf2 	bl	8000290 <strlen>
 8001cac:	4603      	mov	r3, r0
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2364      	movs	r3, #100	@ 0x64
 8001cb2:	4909      	ldr	r1, [pc, #36]	@ (8001cd8 <GetCR_f+0x4c>)
 8001cb4:	4809      	ldr	r0, [pc, #36]	@ (8001cdc <GetCR_f+0x50>)
 8001cb6:	f005 f953 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001cba:	22b4      	movs	r2, #180	@ 0xb4
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <GetCR_f+0x4c>)
 8001cc0:	f00a fdb3 	bl	800c82a <memset>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000a24 	.word	0x20000a24
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	08010890 	.word	0x08010890
 8001cd8:	20000970 	.word	0x20000970
 8001cdc:	20000cd8 	.word	0x20000cd8

08001ce0 <SetBW_f>:
void SetBW_f(char* arg)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	uint8_t bw_flag=0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	75fb      	strb	r3, [r7, #23]
	char* BW_Values[]={"4","5","6"};
 8001cec:	4a28      	ldr	r2, [pc, #160]	@ (8001d90 <SetBW_f+0xb0>)
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75bb      	strb	r3, [r7, #22]
 8001cfc:	e037      	b.n	8001d6e <SetBW_f+0x8e>
	{if (tokens[1]!=NULL &&
 8001cfe:	4b25      	ldr	r3, [pc, #148]	@ (8001d94 <SetBW_f+0xb4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d030      	beq.n	8001d68 <SetBW_f+0x88>
			strcmp(tokens[1],BW_Values[bw])==0)
 8001d06:	4b23      	ldr	r3, [pc, #140]	@ (8001d94 <SetBW_f+0xb4>)
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	7dbb      	ldrb	r3, [r7, #22]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	3318      	adds	r3, #24
 8001d10:	443b      	add	r3, r7
 8001d12:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001d16:	4619      	mov	r1, r3
 8001d18:	4610      	mov	r0, r2
 8001d1a:	f7fe fa59 	bl	80001d0 <strcmp>
 8001d1e:	4603      	mov	r3, r0
	{if (tokens[1]!=NULL &&
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d121      	bne.n	8001d68 <SetBW_f+0x88>
	{Bw_New_Value=atoi(tokens[1]);
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <SetBW_f+0xb4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f008 ff20 	bl	800ab6e <atoi>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <SetBW_f+0xb8>)
 8001d34:	701a      	strb	r2, [r3, #0]
	bw_flag=1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
	sprintf((char*)cmd_buff, "BW VALUE SET TO %d SUCCESSFULLY\r\n", Bw_New_Value);
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <SetBW_f+0xb8>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4916      	ldr	r1, [pc, #88]	@ (8001d9c <SetBW_f+0xbc>)
 8001d42:	4817      	ldr	r0, [pc, #92]	@ (8001da0 <SetBW_f+0xc0>)
 8001d44:	f00a fcde 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001d48:	4815      	ldr	r0, [pc, #84]	@ (8001da0 <SetBW_f+0xc0>)
 8001d4a:	f7fe faa1 	bl	8000290 <strlen>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	2364      	movs	r3, #100	@ 0x64
 8001d54:	4912      	ldr	r1, [pc, #72]	@ (8001da0 <SetBW_f+0xc0>)
 8001d56:	4813      	ldr	r0, [pc, #76]	@ (8001da4 <SetBW_f+0xc4>)
 8001d58:	f005 f902 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001d5c:	22b4      	movs	r2, #180	@ 0xb4
 8001d5e:	2100      	movs	r1, #0
 8001d60:	480f      	ldr	r0, [pc, #60]	@ (8001da0 <SetBW_f+0xc0>)
 8001d62:	f00a fd62 	bl	800c82a <memset>
	break;
 8001d66:	e005      	b.n	8001d74 <SetBW_f+0x94>
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 8001d68:	7dbb      	ldrb	r3, [r7, #22]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	75bb      	strb	r3, [r7, #22]
 8001d6e:	7dbb      	ldrb	r3, [r7, #22]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d9c4      	bls.n	8001cfe <SetBW_f+0x1e>
	}
	}

	if (bw_flag==0)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d105      	bne.n	8001d86 <SetBW_f+0xa6>
		HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG BW VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 8001d7a:	2364      	movs	r3, #100	@ 0x64
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	490a      	ldr	r1, [pc, #40]	@ (8001da8 <SetBW_f+0xc8>)
 8001d80:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <SetBW_f+0xc4>)
 8001d82:	f005 f8ed 	bl	8006f60 <HAL_UART_Transmit>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08010924 	.word	0x08010924
 8001d94:	20000944 	.word	0x20000944
 8001d98:	20000a25 	.word	0x20000a25
 8001d9c:	080108e4 	.word	0x080108e4
 8001da0:	20000970 	.word	0x20000970
 8001da4:	20000cd8 	.word	0x20000cd8
 8001da8:	08010908 	.word	0x08010908

08001dac <GetBW_f>:
void GetBW_f(char* arg)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"BW VALUE IS : %d \r\nNote:DEFAULT VALUE IS : %d\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Bw_New_Value,LoraValues.bw_l);
 8001db4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dec <GetBW_f+0x40>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <GetBW_f+0x44>)
 8001dbc:	789b      	ldrb	r3, [r3, #2]
 8001dbe:	490d      	ldr	r1, [pc, #52]	@ (8001df4 <GetBW_f+0x48>)
 8001dc0:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <GetBW_f+0x4c>)
 8001dc2:	f00a fc9f 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001dc6:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <GetBW_f+0x4c>)
 8001dc8:	f7fe fa62 	bl	8000290 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2364      	movs	r3, #100	@ 0x64
 8001dd2:	4909      	ldr	r1, [pc, #36]	@ (8001df8 <GetBW_f+0x4c>)
 8001dd4:	4809      	ldr	r0, [pc, #36]	@ (8001dfc <GetBW_f+0x50>)
 8001dd6:	f005 f8c3 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001dda:	22b4      	movs	r2, #180	@ 0xb4
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4806      	ldr	r0, [pc, #24]	@ (8001df8 <GetBW_f+0x4c>)
 8001de0:	f00a fd23 	bl	800c82a <memset>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000a25 	.word	0x20000a25
 8001df0:	20000000 	.word	0x20000000
 8001df4:	08010930 	.word	0x08010930
 8001df8:	20000970 	.word	0x20000970
 8001dfc:	20000cd8 	.word	0x20000cd8

08001e00 <GPSMenu>:


/*//////////////////////////////////////////////GPS MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

void GPSMenu(char* arg){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	currentMenu=GPS_Menu;
 8001e08:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <GPSMenu+0x88>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;34;107m-----------------GPS Menu---------------\033[0m\n \r\n");
 8001e0e:	491f      	ldr	r1, [pc, #124]	@ (8001e8c <GPSMenu+0x8c>)
 8001e10:	481f      	ldr	r0, [pc, #124]	@ (8001e90 <GPSMenu+0x90>)
 8001e12:	f00a fc77 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001e16:	481e      	ldr	r0, [pc, #120]	@ (8001e90 <GPSMenu+0x90>)
 8001e18:	f7fe fa3a 	bl	8000290 <strlen>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	2364      	movs	r3, #100	@ 0x64
 8001e22:	491b      	ldr	r1, [pc, #108]	@ (8001e90 <GPSMenu+0x90>)
 8001e24:	481b      	ldr	r0, [pc, #108]	@ (8001e94 <GPSMenu+0x94>)
 8001e26:	f005 f89b 	bl	8006f60 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	e023      	b.n	8001e78 <GPSMenu+0x78>
	{if (cmd_list[l].MenuIndex==GPS_Menu)
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	4a19      	ldr	r2, [pc, #100]	@ (8001e98 <GPSMenu+0x98>)
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	330c      	adds	r3, #12
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d118      	bne.n	8001e72 <GPSMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	4a15      	ldr	r2, [pc, #84]	@ (8001e98 <GPSMenu+0x98>)
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	4912      	ldr	r1, [pc, #72]	@ (8001e98 <GPSMenu+0x98>)
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	440b      	add	r3, r1
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4911      	ldr	r1, [pc, #68]	@ (8001e9c <GPSMenu+0x9c>)
 8001e58:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <GPSMenu+0x90>)
 8001e5a:	f00a fc53 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001e5e:	480c      	ldr	r0, [pc, #48]	@ (8001e90 <GPSMenu+0x90>)
 8001e60:	f7fe fa16 	bl	8000290 <strlen>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	2364      	movs	r3, #100	@ 0x64
 8001e6a:	4909      	ldr	r1, [pc, #36]	@ (8001e90 <GPSMenu+0x90>)
 8001e6c:	4809      	ldr	r0, [pc, #36]	@ (8001e94 <GPSMenu+0x94>)
 8001e6e:	f005 f877 	bl	8006f60 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	3301      	adds	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	2b25      	cmp	r3, #37	@ 0x25
 8001e7c:	d9d8      	bls.n	8001e30 <GPSMenu+0x30>
	}
	}
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000096c 	.word	0x2000096c
 8001e8c:	08010988 	.word	0x08010988
 8001e90:	2000082c 	.word	0x2000082c
 8001e94:	20000cd8 	.word	0x20000cd8
 8001e98:	20000044 	.word	0x20000044
 8001e9c:	080106ec 	.word	0x080106ec

08001ea0 <SetAltGPS_f>:

void SetAltGPS_f(char* arg){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	uint8_t gpsalt_flag = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 12) {
 8001eac:	4b2d      	ldr	r3, [pc, #180]	@ (8001f64 <SetAltGPS_f+0xc4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d052      	beq.n	8001f5a <SetAltGPS_f+0xba>
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f64 <SetAltGPS_f+0xc4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe f9e9 	bl	8000290 <strlen>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b0b      	cmp	r3, #11
 8001ec2:	d84a      	bhi.n	8001f5a <SetAltGPS_f+0xba>
		AltGps_New_Value = atoi(tokens[1]);
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <SetAltGPS_f+0xc4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f008 fe50 	bl	800ab6e <atoi>
 8001ece:	ee07 0a90 	vmov	s15, r0
 8001ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <SetAltGPS_f+0xc8>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
		if (TimeGps_New_Value >MIN_GPS_ALT && TimeGps_New_Value <MAX_GPS_ALT){
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <SetAltGPS_f+0xcc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001f70 <SetAltGPS_f+0xd0>
 8001eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd23      	ble.n	8001f3e <SetAltGPS_f+0x9e>
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <SetAltGPS_f+0xcc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001f74 <SetAltGPS_f+0xd4>
 8001f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0e:	d516      	bpl.n	8001f3e <SetAltGPS_f+0x9e>
			sprintf((char*)cmd_buff, "GPS ALTITUDE VALUE SET TO %.2f SUCCESSFULLY\r\n", AltGps_New_Value);
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <SetAltGPS_f+0xc8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fb27 	bl	8000568 <__aeabi_f2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4916      	ldr	r1, [pc, #88]	@ (8001f78 <SetAltGPS_f+0xd8>)
 8001f20:	4816      	ldr	r0, [pc, #88]	@ (8001f7c <SetAltGPS_f+0xdc>)
 8001f22:	f00a fbef 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001f26:	4815      	ldr	r0, [pc, #84]	@ (8001f7c <SetAltGPS_f+0xdc>)
 8001f28:	f7fe f9b2 	bl	8000290 <strlen>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	2364      	movs	r3, #100	@ 0x64
 8001f32:	4912      	ldr	r1, [pc, #72]	@ (8001f7c <SetAltGPS_f+0xdc>)
 8001f34:	4812      	ldr	r0, [pc, #72]	@ (8001f80 <SetAltGPS_f+0xe0>)
 8001f36:	f005 f813 	bl	8006f60 <HAL_UART_Transmit>
			gpsalt_flag = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	73fb      	strb	r3, [r7, #15]
		}


		if (gpsalt_flag==0) {
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d105      	bne.n	8001f50 <SetAltGPS_f+0xb0>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001f44:	2364      	movs	r3, #100	@ 0x64
 8001f46:	2210      	movs	r2, #16
 8001f48:	490e      	ldr	r1, [pc, #56]	@ (8001f84 <SetAltGPS_f+0xe4>)
 8001f4a:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <SetAltGPS_f+0xe0>)
 8001f4c:	f005 f808 	bl	8006f60 <HAL_UART_Transmit>
		}

		memset(cmd_buff, 0, sizeof(cmd_buff));
 8001f50:	22b4      	movs	r2, #180	@ 0xb4
 8001f52:	2100      	movs	r1, #0
 8001f54:	4809      	ldr	r0, [pc, #36]	@ (8001f7c <SetAltGPS_f+0xdc>)
 8001f56:	f00a fc68 	bl	800c82a <memset>

	}
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000944 	.word	0x20000944
 8001f68:	20000a2c 	.word	0x20000a2c
 8001f6c:	20000a28 	.word	0x20000a28
 8001f70:	c3d70000 	.word	0xc3d70000
 8001f74:	463b8000 	.word	0x463b8000
 8001f78:	080109c4 	.word	0x080109c4
 8001f7c:	20000970 	.word	0x20000970
 8001f80:	20000cd8 	.word	0x20000cd8
 8001f84:	080107fc 	.word	0x080107fc

08001f88 <GetAltGPS_f>:
void GetAltGPS_f(char* arg){
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS ALTITUDE VALUE IS : %.2f \r\nGPS ALTITUDE  DEFAULT VALUE IS : %.2f\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",AltGps_New_Value,MyGps.alt_gps);
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <GetAltGPS_f+0x5c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fae7 	bl	8000568 <__aeabi_f2d>
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	460d      	mov	r5, r1
 8001f9e:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <GetAltGPS_f+0x60>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fae0 	bl	8000568 <__aeabi_f2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	e9cd 2300 	strd	r2, r3, [sp]
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	462b      	mov	r3, r5
 8001fb4:	490d      	ldr	r1, [pc, #52]	@ (8001fec <GetAltGPS_f+0x64>)
 8001fb6:	480e      	ldr	r0, [pc, #56]	@ (8001ff0 <GetAltGPS_f+0x68>)
 8001fb8:	f00a fba4 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001fbc:	480c      	ldr	r0, [pc, #48]	@ (8001ff0 <GetAltGPS_f+0x68>)
 8001fbe:	f7fe f967 	bl	8000290 <strlen>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	2364      	movs	r3, #100	@ 0x64
 8001fc8:	4909      	ldr	r1, [pc, #36]	@ (8001ff0 <GetAltGPS_f+0x68>)
 8001fca:	480a      	ldr	r0, [pc, #40]	@ (8001ff4 <GetAltGPS_f+0x6c>)
 8001fcc:	f004 ffc8 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001fd0:	22b4      	movs	r2, #180	@ 0xb4
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4806      	ldr	r0, [pc, #24]	@ (8001ff0 <GetAltGPS_f+0x68>)
 8001fd6:	f00a fc28 	bl	800c82a <memset>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000a2c 	.word	0x20000a2c
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	080109f4 	.word	0x080109f4
 8001ff0:	20000970 	.word	0x20000970
 8001ff4:	20000cd8 	.word	0x20000cd8

08001ff8 <SetLatGPS_f>:
void SetLatGPS_f(char* arg){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	uint8_t gpslat_flag = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 12) {
 8002004:	4b2b      	ldr	r3, [pc, #172]	@ (80020b4 <SetLatGPS_f+0xbc>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d04f      	beq.n	80020ac <SetLatGPS_f+0xb4>
 800200c:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <SetLatGPS_f+0xbc>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe f93d 	bl	8000290 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	2b0b      	cmp	r3, #11
 800201a:	d847      	bhi.n	80020ac <SetLatGPS_f+0xb4>
		LatGps_New_Value = atoi(tokens[1]);
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <SetLatGPS_f+0xbc>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	f008 fda4 	bl	800ab6e <atoi>
 8002026:	ee07 0a90 	vmov	s15, r0
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202e:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <SetLatGPS_f+0xc0>)
 8002030:	edc3 7a00 	vstr	s15, [r3]
		if (LatGps_New_Value >MIN_GPS_LAT && TimeGps_New_Value <MAX_GPS_LAT){
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <SetLatGPS_f+0xc0>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80020bc <SetLatGPS_f+0xc4>
 800203e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	dd23      	ble.n	8002090 <SetLatGPS_f+0x98>
 8002048:	4b1d      	ldr	r3, [pc, #116]	@ (80020c0 <SetLatGPS_f+0xc8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002054:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80020c4 <SetLatGPS_f+0xcc>
 8002058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	d516      	bpl.n	8002090 <SetLatGPS_f+0x98>
			sprintf((char*)cmd_buff, "GPS LATITUDE VALUE SET TO %.2f SUCCESSFULLY\r\n", LatGps_New_Value);
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <SetLatGPS_f+0xc0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa7e 	bl	8000568 <__aeabi_f2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4915      	ldr	r1, [pc, #84]	@ (80020c8 <SetLatGPS_f+0xd0>)
 8002072:	4816      	ldr	r0, [pc, #88]	@ (80020cc <SetLatGPS_f+0xd4>)
 8002074:	f00a fb46 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002078:	4814      	ldr	r0, [pc, #80]	@ (80020cc <SetLatGPS_f+0xd4>)
 800207a:	f7fe f909 	bl	8000290 <strlen>
 800207e:	4603      	mov	r3, r0
 8002080:	b29a      	uxth	r2, r3
 8002082:	2364      	movs	r3, #100	@ 0x64
 8002084:	4911      	ldr	r1, [pc, #68]	@ (80020cc <SetLatGPS_f+0xd4>)
 8002086:	4812      	ldr	r0, [pc, #72]	@ (80020d0 <SetLatGPS_f+0xd8>)
 8002088:	f004 ff6a 	bl	8006f60 <HAL_UART_Transmit>
			gpslat_flag = 1;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
		}


		if (gpslat_flag==0) {
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <SetLatGPS_f+0xaa>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002096:	2364      	movs	r3, #100	@ 0x64
 8002098:	2210      	movs	r2, #16
 800209a:	490e      	ldr	r1, [pc, #56]	@ (80020d4 <SetLatGPS_f+0xdc>)
 800209c:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <SetLatGPS_f+0xd8>)
 800209e:	f004 ff5f 	bl	8006f60 <HAL_UART_Transmit>
		}

		memset(cmd_buff, 0, sizeof(cmd_buff));
 80020a2:	22b4      	movs	r2, #180	@ 0xb4
 80020a4:	2100      	movs	r1, #0
 80020a6:	4809      	ldr	r0, [pc, #36]	@ (80020cc <SetLatGPS_f+0xd4>)
 80020a8:	f00a fbbf 	bl	800c82a <memset>

	}
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000944 	.word	0x20000944
 80020b8:	20000a30 	.word	0x20000a30
 80020bc:	c2b40000 	.word	0xc2b40000
 80020c0:	20000a28 	.word	0x20000a28
 80020c4:	42b40000 	.word	0x42b40000
 80020c8:	08010a64 	.word	0x08010a64
 80020cc:	20000970 	.word	0x20000970
 80020d0:	20000cd8 	.word	0x20000cd8
 80020d4:	080107fc 	.word	0x080107fc

080020d8 <GetLatGPS_f>:
void GetLatGPS_f(char* arg){
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af02      	add	r7, sp, #8
 80020de:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS LATITUDE VALUE IS : %.2f \r\nGPS LATITUDE  DEFAULT VALUE IS : %.2f\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",LatGps_New_Value,MyGps.lat_gps);
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <GetLatGPS_f+0x5c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fa3f 	bl	8000568 <__aeabi_f2d>
 80020ea:	4604      	mov	r4, r0
 80020ec:	460d      	mov	r5, r1
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <GetLatGPS_f+0x60>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa38 	bl	8000568 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002100:	4622      	mov	r2, r4
 8002102:	462b      	mov	r3, r5
 8002104:	490d      	ldr	r1, [pc, #52]	@ (800213c <GetLatGPS_f+0x64>)
 8002106:	480e      	ldr	r0, [pc, #56]	@ (8002140 <GetLatGPS_f+0x68>)
 8002108:	f00a fafc 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800210c:	480c      	ldr	r0, [pc, #48]	@ (8002140 <GetLatGPS_f+0x68>)
 800210e:	f7fe f8bf 	bl	8000290 <strlen>
 8002112:	4603      	mov	r3, r0
 8002114:	b29a      	uxth	r2, r3
 8002116:	2364      	movs	r3, #100	@ 0x64
 8002118:	4909      	ldr	r1, [pc, #36]	@ (8002140 <GetLatGPS_f+0x68>)
 800211a:	480a      	ldr	r0, [pc, #40]	@ (8002144 <GetLatGPS_f+0x6c>)
 800211c:	f004 ff20 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002120:	22b4      	movs	r2, #180	@ 0xb4
 8002122:	2100      	movs	r1, #0
 8002124:	4806      	ldr	r0, [pc, #24]	@ (8002140 <GetLatGPS_f+0x68>)
 8002126:	f00a fb80 	bl	800c82a <memset>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bdb0      	pop	{r4, r5, r7, pc}
 8002132:	bf00      	nop
 8002134:	20000a30 	.word	0x20000a30
 8002138:	20000004 	.word	0x20000004
 800213c:	08010a94 	.word	0x08010a94
 8002140:	20000970 	.word	0x20000970
 8002144:	20000cd8 	.word	0x20000cd8

08002148 <SetTimeGPS_f>:
void SetTimeGPS_f(char* arg){
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	uint8_t gpstime_flag = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 12) {
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <SetTimeGPS_f+0x94>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d03a      	beq.n	80021d2 <SetTimeGPS_f+0x8a>
 800215c:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <SetTimeGPS_f+0x94>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f895 	bl	8000290 <strlen>
 8002166:	4603      	mov	r3, r0
 8002168:	2b0b      	cmp	r3, #11
 800216a:	d832      	bhi.n	80021d2 <SetTimeGPS_f+0x8a>
		TimeGps_New_Value = atol(tokens[1]);
 800216c:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <SetTimeGPS_f+0x94>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	f008 fd00 	bl	800ab76 <atol>
 8002176:	4603      	mov	r3, r0
 8002178:	461a      	mov	r2, r3
 800217a:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <SetTimeGPS_f+0x98>)
 800217c:	601a      	str	r2, [r3, #0]
		if (TimeGps_New_Value >MIN_GPS_TIME && TimeGps_New_Value <MAX_GPS_TIME){
 800217e:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <SetTimeGPS_f+0x98>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d017      	beq.n	80021b6 <SetTimeGPS_f+0x6e>
 8002186:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <SetTimeGPS_f+0x98>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a16      	ldr	r2, [pc, #88]	@ (80021e4 <SetTimeGPS_f+0x9c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d812      	bhi.n	80021b6 <SetTimeGPS_f+0x6e>
			sprintf((char*)cmd_buff, "GPS TIME VALUE SET TO %lu SUCCESSFULLY\r\n", TimeGps_New_Value);
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <SetTimeGPS_f+0x98>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4914      	ldr	r1, [pc, #80]	@ (80021e8 <SetTimeGPS_f+0xa0>)
 8002198:	4814      	ldr	r0, [pc, #80]	@ (80021ec <SetTimeGPS_f+0xa4>)
 800219a:	f00a fab3 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 800219e:	4813      	ldr	r0, [pc, #76]	@ (80021ec <SetTimeGPS_f+0xa4>)
 80021a0:	f7fe f876 	bl	8000290 <strlen>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	2364      	movs	r3, #100	@ 0x64
 80021aa:	4910      	ldr	r1, [pc, #64]	@ (80021ec <SetTimeGPS_f+0xa4>)
 80021ac:	4810      	ldr	r0, [pc, #64]	@ (80021f0 <SetTimeGPS_f+0xa8>)
 80021ae:	f004 fed7 	bl	8006f60 <HAL_UART_Transmit>
			gpstime_flag = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
		}


		if (gpstime_flag==0) {
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <SetTimeGPS_f+0x80>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80021bc:	2364      	movs	r3, #100	@ 0x64
 80021be:	2210      	movs	r2, #16
 80021c0:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <SetTimeGPS_f+0xac>)
 80021c2:	480b      	ldr	r0, [pc, #44]	@ (80021f0 <SetTimeGPS_f+0xa8>)
 80021c4:	f004 fecc 	bl	8006f60 <HAL_UART_Transmit>
		}

		memset(cmd_buff, 0, sizeof(cmd_buff));
 80021c8:	22b4      	movs	r2, #180	@ 0xb4
 80021ca:	2100      	movs	r1, #0
 80021cc:	4807      	ldr	r0, [pc, #28]	@ (80021ec <SetTimeGPS_f+0xa4>)
 80021ce:	f00a fb2c 	bl	800c82a <memset>

	}
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000944 	.word	0x20000944
 80021e0:	20000a28 	.word	0x20000a28
 80021e4:	01680bb6 	.word	0x01680bb6
 80021e8:	08010b04 	.word	0x08010b04
 80021ec:	20000970 	.word	0x20000970
 80021f0:	20000cd8 	.word	0x20000cd8
 80021f4:	080107fc 	.word	0x080107fc

080021f8 <GetTimeGPS_f>:
void GetTimeGPS_f(char* arg){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS TIME VALUE IS : %lu \r\nGPS TIME  DEFAULT VALUE IS : %lu\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",TimeGps_New_Value,MyGps.time_gps);
 8002200:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <GetTimeGPS_f+0x40>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <GetTimeGPS_f+0x44>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	490d      	ldr	r1, [pc, #52]	@ (8002240 <GetTimeGPS_f+0x48>)
 800220a:	480e      	ldr	r0, [pc, #56]	@ (8002244 <GetTimeGPS_f+0x4c>)
 800220c:	f00a fa7a 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <GetTimeGPS_f+0x4c>)
 8002212:	f7fe f83d 	bl	8000290 <strlen>
 8002216:	4603      	mov	r3, r0
 8002218:	b29a      	uxth	r2, r3
 800221a:	2364      	movs	r3, #100	@ 0x64
 800221c:	4909      	ldr	r1, [pc, #36]	@ (8002244 <GetTimeGPS_f+0x4c>)
 800221e:	480a      	ldr	r0, [pc, #40]	@ (8002248 <GetTimeGPS_f+0x50>)
 8002220:	f004 fe9e 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002224:	22b4      	movs	r2, #180	@ 0xb4
 8002226:	2100      	movs	r1, #0
 8002228:	4806      	ldr	r0, [pc, #24]	@ (8002244 <GetTimeGPS_f+0x4c>)
 800222a:	f00a fafe 	bl	800c82a <memset>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000a28 	.word	0x20000a28
 800223c:	20000004 	.word	0x20000004
 8002240:	08010b30 	.word	0x08010b30
 8002244:	20000970 	.word	0x20000970
 8002248:	20000cd8 	.word	0x20000cd8

0800224c <SensorsMenu>:

/*////////////////////////////////////////////// SENSORS MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

void SensorsMenu(char* arg){
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	currentMenu=Sensors_Menu;
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <SensorsMenu+0x88>)
 8002256:	2203      	movs	r2, #3
 8002258:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;32;107m--------------Sensors Menu---------------\033[0m\n \r\n");
 800225a:	491f      	ldr	r1, [pc, #124]	@ (80022d8 <SensorsMenu+0x8c>)
 800225c:	481f      	ldr	r0, [pc, #124]	@ (80022dc <SensorsMenu+0x90>)
 800225e:	f00a fa51 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002262:	481e      	ldr	r0, [pc, #120]	@ (80022dc <SensorsMenu+0x90>)
 8002264:	f7fe f814 	bl	8000290 <strlen>
 8002268:	4603      	mov	r3, r0
 800226a:	b29a      	uxth	r2, r3
 800226c:	2364      	movs	r3, #100	@ 0x64
 800226e:	491b      	ldr	r1, [pc, #108]	@ (80022dc <SensorsMenu+0x90>)
 8002270:	481b      	ldr	r0, [pc, #108]	@ (80022e0 <SensorsMenu+0x94>)
 8002272:	f004 fe75 	bl	8006f60 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e023      	b.n	80022c4 <SensorsMenu+0x78>
	{if (cmd_list[l].MenuIndex==Sensors_Menu)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <SensorsMenu+0x98>)
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4413      	add	r3, r2
 8002284:	330c      	adds	r3, #12
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d118      	bne.n	80022be <SensorsMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	4a15      	ldr	r2, [pc, #84]	@ (80022e4 <SensorsMenu+0x98>)
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	4413      	add	r3, r2
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	4912      	ldr	r1, [pc, #72]	@ (80022e4 <SensorsMenu+0x98>)
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	440b      	add	r3, r1
 800229e:	3304      	adds	r3, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4911      	ldr	r1, [pc, #68]	@ (80022e8 <SensorsMenu+0x9c>)
 80022a4:	480d      	ldr	r0, [pc, #52]	@ (80022dc <SensorsMenu+0x90>)
 80022a6:	f00a fa2d 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80022aa:	480c      	ldr	r0, [pc, #48]	@ (80022dc <SensorsMenu+0x90>)
 80022ac:	f7fd fff0 	bl	8000290 <strlen>
 80022b0:	4603      	mov	r3, r0
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	2364      	movs	r3, #100	@ 0x64
 80022b6:	4909      	ldr	r1, [pc, #36]	@ (80022dc <SensorsMenu+0x90>)
 80022b8:	4809      	ldr	r0, [pc, #36]	@ (80022e0 <SensorsMenu+0x94>)
 80022ba:	f004 fe51 	bl	8006f60 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	3301      	adds	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b25      	cmp	r3, #37	@ 0x25
 80022c8:	d9d8      	bls.n	800227c <SensorsMenu+0x30>
	}
	}
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	2000096c 	.word	0x2000096c
 80022d8:	08010b94 	.word	0x08010b94
 80022dc:	2000082c 	.word	0x2000082c
 80022e0:	20000cd8 	.word	0x20000cd8
 80022e4:	20000044 	.word	0x20000044
 80022e8:	080106ec 	.word	0x080106ec

080022ec <GetSoilTemp_f>:

void GetSoilTemp_f(char* arg){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SOIL TEMPERATURE VALUE IS : %.2f \r\n",SensorsValues.SoilTemp_s);
 80022f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <GetSoilTemp_f+0x44>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe f935 	bl	8000568 <__aeabi_f2d>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	490c      	ldr	r1, [pc, #48]	@ (8002334 <GetSoilTemp_f+0x48>)
 8002304:	480c      	ldr	r0, [pc, #48]	@ (8002338 <GetSoilTemp_f+0x4c>)
 8002306:	f00a f9fd 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800230a:	480b      	ldr	r0, [pc, #44]	@ (8002338 <GetSoilTemp_f+0x4c>)
 800230c:	f7fd ffc0 	bl	8000290 <strlen>
 8002310:	4603      	mov	r3, r0
 8002312:	b29a      	uxth	r2, r3
 8002314:	2364      	movs	r3, #100	@ 0x64
 8002316:	4908      	ldr	r1, [pc, #32]	@ (8002338 <GetSoilTemp_f+0x4c>)
 8002318:	4808      	ldr	r0, [pc, #32]	@ (800233c <GetSoilTemp_f+0x50>)
 800231a:	f004 fe21 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 800231e:	22b4      	movs	r2, #180	@ 0xb4
 8002320:	2100      	movs	r1, #0
 8002322:	4805      	ldr	r0, [pc, #20]	@ (8002338 <GetSoilTemp_f+0x4c>)
 8002324:	f00a fa81 	bl	800c82a <memset>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000010 	.word	0x20000010
 8002334:	08010bd4 	.word	0x08010bd4
 8002338:	20000970 	.word	0x20000970
 800233c:	20000cd8 	.word	0x20000cd8

08002340 <GetAirTemp_f>:

void GetAirTemp_f(char* arg){
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"AIR TEMPERATURE VALUE IS : %.2f°C",SensorsValues.AirTemp_s);
 8002348:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <GetAirTemp_f+0x44>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f90b 	bl	8000568 <__aeabi_f2d>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	490c      	ldr	r1, [pc, #48]	@ (8002388 <GetAirTemp_f+0x48>)
 8002358:	480c      	ldr	r0, [pc, #48]	@ (800238c <GetAirTemp_f+0x4c>)
 800235a:	f00a f9d3 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800235e:	480b      	ldr	r0, [pc, #44]	@ (800238c <GetAirTemp_f+0x4c>)
 8002360:	f7fd ff96 	bl	8000290 <strlen>
 8002364:	4603      	mov	r3, r0
 8002366:	b29a      	uxth	r2, r3
 8002368:	2364      	movs	r3, #100	@ 0x64
 800236a:	4908      	ldr	r1, [pc, #32]	@ (800238c <GetAirTemp_f+0x4c>)
 800236c:	4808      	ldr	r0, [pc, #32]	@ (8002390 <GetAirTemp_f+0x50>)
 800236e:	f004 fdf7 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002372:	22b4      	movs	r2, #180	@ 0xb4
 8002374:	2100      	movs	r1, #0
 8002376:	4805      	ldr	r0, [pc, #20]	@ (800238c <GetAirTemp_f+0x4c>)
 8002378:	f00a fa57 	bl	800c82a <memset>
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000010 	.word	0x20000010
 8002388:	08010bf8 	.word	0x08010bf8
 800238c:	20000970 	.word	0x20000970
 8002390:	20000cd8 	.word	0x20000cd8

08002394 <GetRelativeHumidity_f>:

void GetRelativeHumidity_f(char* arg){
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"RELATIVE HUMIDITY VALUE IS : %.2f \r\n",SensorsValues.RelativeHumidity_s);
 800239c:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <GetRelativeHumidity_f+0x44>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e1 	bl	8000568 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	490c      	ldr	r1, [pc, #48]	@ (80023dc <GetRelativeHumidity_f+0x48>)
 80023ac:	480c      	ldr	r0, [pc, #48]	@ (80023e0 <GetRelativeHumidity_f+0x4c>)
 80023ae:	f00a f9a9 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80023b2:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <GetRelativeHumidity_f+0x4c>)
 80023b4:	f7fd ff6c 	bl	8000290 <strlen>
 80023b8:	4603      	mov	r3, r0
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	2364      	movs	r3, #100	@ 0x64
 80023be:	4908      	ldr	r1, [pc, #32]	@ (80023e0 <GetRelativeHumidity_f+0x4c>)
 80023c0:	4808      	ldr	r0, [pc, #32]	@ (80023e4 <GetRelativeHumidity_f+0x50>)
 80023c2:	f004 fdcd 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80023c6:	22b4      	movs	r2, #180	@ 0xb4
 80023c8:	2100      	movs	r1, #0
 80023ca:	4805      	ldr	r0, [pc, #20]	@ (80023e0 <GetRelativeHumidity_f+0x4c>)
 80023cc:	f00a fa2d 	bl	800c82a <memset>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000010 	.word	0x20000010
 80023dc:	08010c1c 	.word	0x08010c1c
 80023e0:	20000970 	.word	0x20000970
 80023e4:	20000cd8 	.word	0x20000cd8

080023e8 <GetSoilHumidity_f>:

void GetSoilHumidity_f(char* arg){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SOIL HUMIDITY VALUE IS : %.2f",SensorsValues.SoilHumidity_s);
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <GetSoilHumidity_f+0x44>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f8b7 	bl	8000568 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	490c      	ldr	r1, [pc, #48]	@ (8002430 <GetSoilHumidity_f+0x48>)
 8002400:	480c      	ldr	r0, [pc, #48]	@ (8002434 <GetSoilHumidity_f+0x4c>)
 8002402:	f00a f97f 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002406:	480b      	ldr	r0, [pc, #44]	@ (8002434 <GetSoilHumidity_f+0x4c>)
 8002408:	f7fd ff42 	bl	8000290 <strlen>
 800240c:	4603      	mov	r3, r0
 800240e:	b29a      	uxth	r2, r3
 8002410:	2364      	movs	r3, #100	@ 0x64
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <GetSoilHumidity_f+0x4c>)
 8002414:	4808      	ldr	r0, [pc, #32]	@ (8002438 <GetSoilHumidity_f+0x50>)
 8002416:	f004 fda3 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 800241a:	22b4      	movs	r2, #180	@ 0xb4
 800241c:	2100      	movs	r1, #0
 800241e:	4805      	ldr	r0, [pc, #20]	@ (8002434 <GetSoilHumidity_f+0x4c>)
 8002420:	f00a fa03 	bl	800c82a <memset>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000010 	.word	0x20000010
 8002430:	08010c44 	.word	0x08010c44
 8002434:	20000970 	.word	0x20000970
 8002438:	20000cd8 	.word	0x20000cd8

0800243c <GetWindSpeed_f>:

void GetWindSpeed_f(char* arg){
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"WIND SPEED VALUE IS : %.2f IN Km/h\r",SensorsValues.WindSpeed_s);
 8002444:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <GetWindSpeed_f+0x44>)
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f88d 	bl	8000568 <__aeabi_f2d>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	490c      	ldr	r1, [pc, #48]	@ (8002484 <GetWindSpeed_f+0x48>)
 8002454:	480c      	ldr	r0, [pc, #48]	@ (8002488 <GetWindSpeed_f+0x4c>)
 8002456:	f00a f955 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800245a:	480b      	ldr	r0, [pc, #44]	@ (8002488 <GetWindSpeed_f+0x4c>)
 800245c:	f7fd ff18 	bl	8000290 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	b29a      	uxth	r2, r3
 8002464:	2364      	movs	r3, #100	@ 0x64
 8002466:	4908      	ldr	r1, [pc, #32]	@ (8002488 <GetWindSpeed_f+0x4c>)
 8002468:	4808      	ldr	r0, [pc, #32]	@ (800248c <GetWindSpeed_f+0x50>)
 800246a:	f004 fd79 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 800246e:	22b4      	movs	r2, #180	@ 0xb4
 8002470:	2100      	movs	r1, #0
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <GetWindSpeed_f+0x4c>)
 8002474:	f00a f9d9 	bl	800c82a <memset>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000010 	.word	0x20000010
 8002484:	08010c64 	.word	0x08010c64
 8002488:	20000970 	.word	0x20000970
 800248c:	20000cd8 	.word	0x20000cd8

08002490 <SetRadiation_f>:
void SetRadiation_f(char* arg){
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	uint8_t radiation_flag = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 800249c:	4b2b      	ldr	r3, [pc, #172]	@ (800254c <SetRadiation_f+0xbc>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d040      	beq.n	8002526 <SetRadiation_f+0x96>
 80024a4:	4b29      	ldr	r3, [pc, #164]	@ (800254c <SetRadiation_f+0xbc>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fd fef1 	bl	8000290 <strlen>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d838      	bhi.n	8002526 <SetRadiation_f+0x96>
		Radiation_New_Value = atof(tokens[1]);
 80024b4:	4b25      	ldr	r3, [pc, #148]	@ (800254c <SetRadiation_f+0xbc>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f008 fb55 	bl	800ab68 <atof>
 80024be:	ec53 2b10 	vmov	r2, r3, d0
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fb9f 	bl	8000c08 <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <SetRadiation_f+0xc0>)
 80024ce:	6013      	str	r3, [r2, #0]

		if (Radiation_New_Value >= MIN_RADIATION && Radiation_New_Value <= MAX_RADIATION) {
 80024d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002550 <SetRadiation_f+0xc0>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80024da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e2:	db20      	blt.n	8002526 <SetRadiation_f+0x96>
 80024e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <SetRadiation_f+0xc0>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002554 <SetRadiation_f+0xc4>
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	d816      	bhi.n	8002526 <SetRadiation_f+0x96>
			sprintf((char*)cmd_buff, "RADIATION VALUE SET TO %.2f SUCCESSFULLY\r\n", Radiation_New_Value);
 80024f8:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <SetRadiation_f+0xc0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f833 	bl	8000568 <__aeabi_f2d>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4914      	ldr	r1, [pc, #80]	@ (8002558 <SetRadiation_f+0xc8>)
 8002508:	4814      	ldr	r0, [pc, #80]	@ (800255c <SetRadiation_f+0xcc>)
 800250a:	f00a f8fb 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 800250e:	4813      	ldr	r0, [pc, #76]	@ (800255c <SetRadiation_f+0xcc>)
 8002510:	f7fd febe 	bl	8000290 <strlen>
 8002514:	4603      	mov	r3, r0
 8002516:	b29a      	uxth	r2, r3
 8002518:	2364      	movs	r3, #100	@ 0x64
 800251a:	4910      	ldr	r1, [pc, #64]	@ (800255c <SetRadiation_f+0xcc>)
 800251c:	4810      	ldr	r0, [pc, #64]	@ (8002560 <SetRadiation_f+0xd0>)
 800251e:	f004 fd1f 	bl	8006f60 <HAL_UART_Transmit>
			radiation_flag = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (radiation_flag==0) {
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <SetRadiation_f+0xa8>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 800252c:	2364      	movs	r3, #100	@ 0x64
 800252e:	2210      	movs	r2, #16
 8002530:	490c      	ldr	r1, [pc, #48]	@ (8002564 <SetRadiation_f+0xd4>)
 8002532:	480b      	ldr	r0, [pc, #44]	@ (8002560 <SetRadiation_f+0xd0>)
 8002534:	f004 fd14 	bl	8006f60 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 8002538:	22b4      	movs	r2, #180	@ 0xb4
 800253a:	2100      	movs	r1, #0
 800253c:	4807      	ldr	r0, [pc, #28]	@ (800255c <SetRadiation_f+0xcc>)
 800253e:	f00a f974 	bl	800c82a <memset>
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000944 	.word	0x20000944
 8002550:	20000a38 	.word	0x20000a38
 8002554:	42200000 	.word	0x42200000
 8002558:	08010c88 	.word	0x08010c88
 800255c:	20000970 	.word	0x20000970
 8002560:	20000cd8 	.word	0x20000cd8
 8002564:	080107fc 	.word	0x080107fc

08002568 <GetRadiation_f>:
void GetRadiation_f(char* arg){
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af02      	add	r7, sp, #8
 800256e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"RADIATION VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Radiation_New_Value,SensorsValues.Radiation_s);
 8002570:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <GetRadiation_f+0x5c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd fff7 	bl	8000568 <__aeabi_f2d>
 800257a:	4604      	mov	r4, r0
 800257c:	460d      	mov	r5, r1
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <GetRadiation_f+0x60>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd fff0 	bl	8000568 <__aeabi_f2d>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	e9cd 2300 	strd	r2, r3, [sp]
 8002590:	4622      	mov	r2, r4
 8002592:	462b      	mov	r3, r5
 8002594:	490d      	ldr	r1, [pc, #52]	@ (80025cc <GetRadiation_f+0x64>)
 8002596:	480e      	ldr	r0, [pc, #56]	@ (80025d0 <GetRadiation_f+0x68>)
 8002598:	f00a f8b4 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800259c:	480c      	ldr	r0, [pc, #48]	@ (80025d0 <GetRadiation_f+0x68>)
 800259e:	f7fd fe77 	bl	8000290 <strlen>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	2364      	movs	r3, #100	@ 0x64
 80025a8:	4909      	ldr	r1, [pc, #36]	@ (80025d0 <GetRadiation_f+0x68>)
 80025aa:	480a      	ldr	r0, [pc, #40]	@ (80025d4 <GetRadiation_f+0x6c>)
 80025ac:	f004 fcd8 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80025b0:	22b4      	movs	r2, #180	@ 0xb4
 80025b2:	2100      	movs	r1, #0
 80025b4:	4806      	ldr	r0, [pc, #24]	@ (80025d0 <GetRadiation_f+0x68>)
 80025b6:	f00a f938 	bl	800c82a <memset>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bdb0      	pop	{r4, r5, r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000a38 	.word	0x20000a38
 80025c8:	20000010 	.word	0x20000010
 80025cc:	08010cb4 	.word	0x08010cb4
 80025d0:	20000970 	.word	0x20000970
 80025d4:	20000cd8 	.word	0x20000cd8

080025d8 <SetKc_f>:
void SetKc_f(char* arg){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	uint8_t kc_flag = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <SetKc_f+0xac>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d038      	beq.n	800265e <SetKc_f+0x86>
 80025ec:	4b25      	ldr	r3, [pc, #148]	@ (8002684 <SetKc_f+0xac>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd fe4d 	bl	8000290 <strlen>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d830      	bhi.n	800265e <SetKc_f+0x86>
		Kc_New_Value = atof(tokens[1]);
 80025fc:	4b21      	ldr	r3, [pc, #132]	@ (8002684 <SetKc_f+0xac>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	f008 fab1 	bl	800ab68 <atof>
 8002606:	ec53 2b10 	vmov	r2, r3, d0
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fafb 	bl	8000c08 <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
 8002614:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <SetKc_f+0xb0>)
 8002616:	6013      	str	r3, [r2, #0]

		if (RelativeHumidity_New_Value >= MIN_KC && Sf_New_Value <= MAX_KP) {
 8002618:	4b1c      	ldr	r3, [pc, #112]	@ (800268c <SetKc_f+0xb4>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	db1a      	blt.n	800265e <SetKc_f+0x86>
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <SetKc_f+0xb8>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d816      	bhi.n	800265e <SetKc_f+0x86>
			sprintf((char*)cmd_buff, "Kc VALUE SET TO %.2f SUCCESSFULLY\r\n", Kc_New_Value);
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <SetKc_f+0xb0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd ff97 	bl	8000568 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4915      	ldr	r1, [pc, #84]	@ (8002694 <SetKc_f+0xbc>)
 8002640:	4815      	ldr	r0, [pc, #84]	@ (8002698 <SetKc_f+0xc0>)
 8002642:	f00a f85f 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002646:	4814      	ldr	r0, [pc, #80]	@ (8002698 <SetKc_f+0xc0>)
 8002648:	f7fd fe22 	bl	8000290 <strlen>
 800264c:	4603      	mov	r3, r0
 800264e:	b29a      	uxth	r2, r3
 8002650:	2364      	movs	r3, #100	@ 0x64
 8002652:	4911      	ldr	r1, [pc, #68]	@ (8002698 <SetKc_f+0xc0>)
 8002654:	4811      	ldr	r0, [pc, #68]	@ (800269c <SetKc_f+0xc4>)
 8002656:	f004 fc83 	bl	8006f60 <HAL_UART_Transmit>
			kc_flag = 1;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (kc_flag==0) {
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <SetKc_f+0x98>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002664:	2364      	movs	r3, #100	@ 0x64
 8002666:	2210      	movs	r2, #16
 8002668:	490d      	ldr	r1, [pc, #52]	@ (80026a0 <SetKc_f+0xc8>)
 800266a:	480c      	ldr	r0, [pc, #48]	@ (800269c <SetKc_f+0xc4>)
 800266c:	f004 fc78 	bl	8006f60 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 8002670:	22b4      	movs	r2, #180	@ 0xb4
 8002672:	2100      	movs	r1, #0
 8002674:	4808      	ldr	r0, [pc, #32]	@ (8002698 <SetKc_f+0xc0>)
 8002676:	f00a f8d8 	bl	800c82a <memset>
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000944 	.word	0x20000944
 8002688:	20000a3c 	.word	0x20000a3c
 800268c:	20000a34 	.word	0x20000a34
 8002690:	2000096d 	.word	0x2000096d
 8002694:	08010d18 	.word	0x08010d18
 8002698:	20000970 	.word	0x20000970
 800269c:	20000cd8 	.word	0x20000cd8
 80026a0:	080107fc 	.word	0x080107fc

080026a4 <GetKc_f>:
void GetKc_f(char* arg){
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"KC VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Kc_New_Value,SensorsValues.Kc);
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <GetKc_f+0x5c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff59 	bl	8000568 <__aeabi_f2d>
 80026b6:	4604      	mov	r4, r0
 80026b8:	460d      	mov	r5, r1
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <GetKc_f+0x60>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd ff52 	bl	8000568 <__aeabi_f2d>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	e9cd 2300 	strd	r2, r3, [sp]
 80026cc:	4622      	mov	r2, r4
 80026ce:	462b      	mov	r3, r5
 80026d0:	490d      	ldr	r1, [pc, #52]	@ (8002708 <GetKc_f+0x64>)
 80026d2:	480e      	ldr	r0, [pc, #56]	@ (800270c <GetKc_f+0x68>)
 80026d4:	f00a f816 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80026d8:	480c      	ldr	r0, [pc, #48]	@ (800270c <GetKc_f+0x68>)
 80026da:	f7fd fdd9 	bl	8000290 <strlen>
 80026de:	4603      	mov	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	2364      	movs	r3, #100	@ 0x64
 80026e4:	4909      	ldr	r1, [pc, #36]	@ (800270c <GetKc_f+0x68>)
 80026e6:	480a      	ldr	r0, [pc, #40]	@ (8002710 <GetKc_f+0x6c>)
 80026e8:	f004 fc3a 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80026ec:	22b4      	movs	r2, #180	@ 0xb4
 80026ee:	2100      	movs	r1, #0
 80026f0:	4806      	ldr	r0, [pc, #24]	@ (800270c <GetKc_f+0x68>)
 80026f2:	f00a f89a 	bl	800c82a <memset>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bdb0      	pop	{r4, r5, r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000a3c 	.word	0x20000a3c
 8002704:	20000010 	.word	0x20000010
 8002708:	08010d3c 	.word	0x08010d3c
 800270c:	20000970 	.word	0x20000970
 8002710:	20000cd8 	.word	0x20000cd8

08002714 <SetKp_f>:
void SetKp_f(char* arg){
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	uint8_t kp_flag = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002720:	4b27      	ldr	r3, [pc, #156]	@ (80027c0 <SetKp_f+0xac>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d038      	beq.n	800279a <SetKp_f+0x86>
 8002728:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <SetKp_f+0xac>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fdaf 	bl	8000290 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	2b04      	cmp	r3, #4
 8002736:	d830      	bhi.n	800279a <SetKp_f+0x86>
		Kp_New_Value = atof(tokens[1]);
 8002738:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <SetKp_f+0xac>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4618      	mov	r0, r3
 800273e:	f008 fa13 	bl	800ab68 <atof>
 8002742:	ec53 2b10 	vmov	r2, r3, d0
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fa5d 	bl	8000c08 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	4a1c      	ldr	r2, [pc, #112]	@ (80027c4 <SetKp_f+0xb0>)
 8002752:	6013      	str	r3, [r2, #0]

		if (Kp_New_Value >= MIN_KP && Sf_New_Value <= MAX_KP) {
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <SetKp_f+0xb0>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	db1a      	blt.n	800279a <SetKp_f+0x86>
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <SetKp_f+0xb4>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d816      	bhi.n	800279a <SetKp_f+0x86>
			sprintf((char*)cmd_buff, "Kp VALUE SET TO %.2f SUCCESSFULLY\r\n", Kp_New_Value);
 800276c:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <SetKp_f+0xb0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fef9 	bl	8000568 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4914      	ldr	r1, [pc, #80]	@ (80027cc <SetKp_f+0xb8>)
 800277c:	4814      	ldr	r0, [pc, #80]	@ (80027d0 <SetKp_f+0xbc>)
 800277e:	f009 ffc1 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002782:	4813      	ldr	r0, [pc, #76]	@ (80027d0 <SetKp_f+0xbc>)
 8002784:	f7fd fd84 	bl	8000290 <strlen>
 8002788:	4603      	mov	r3, r0
 800278a:	b29a      	uxth	r2, r3
 800278c:	2364      	movs	r3, #100	@ 0x64
 800278e:	4910      	ldr	r1, [pc, #64]	@ (80027d0 <SetKp_f+0xbc>)
 8002790:	4810      	ldr	r0, [pc, #64]	@ (80027d4 <SetKp_f+0xc0>)
 8002792:	f004 fbe5 	bl	8006f60 <HAL_UART_Transmit>
			kp_flag = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (kp_flag==0) {
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <SetKp_f+0x98>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80027a0:	2364      	movs	r3, #100	@ 0x64
 80027a2:	2210      	movs	r2, #16
 80027a4:	490c      	ldr	r1, [pc, #48]	@ (80027d8 <SetKp_f+0xc4>)
 80027a6:	480b      	ldr	r0, [pc, #44]	@ (80027d4 <SetKp_f+0xc0>)
 80027a8:	f004 fbda 	bl	8006f60 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 80027ac:	22b4      	movs	r2, #180	@ 0xb4
 80027ae:	2100      	movs	r1, #0
 80027b0:	4807      	ldr	r0, [pc, #28]	@ (80027d0 <SetKp_f+0xbc>)
 80027b2:	f00a f83a 	bl	800c82a <memset>
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000944 	.word	0x20000944
 80027c4:	20000a40 	.word	0x20000a40
 80027c8:	2000096d 	.word	0x2000096d
 80027cc:	08010d98 	.word	0x08010d98
 80027d0:	20000970 	.word	0x20000970
 80027d4:	20000cd8 	.word	0x20000cd8
 80027d8:	080107fc 	.word	0x080107fc

080027dc <GetKp_f>:
void GetKp_f(char* arg){
 80027dc:	b5b0      	push	{r4, r5, r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"KP VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Kp_New_Value,SensorsValues.Kp);
 80027e4:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <GetKp_f+0x5c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd febd 	bl	8000568 <__aeabi_f2d>
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
 80027f2:	4b12      	ldr	r3, [pc, #72]	@ (800283c <GetKp_f+0x60>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd feb6 	bl	8000568 <__aeabi_f2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	e9cd 2300 	strd	r2, r3, [sp]
 8002804:	4622      	mov	r2, r4
 8002806:	462b      	mov	r3, r5
 8002808:	490d      	ldr	r1, [pc, #52]	@ (8002840 <GetKp_f+0x64>)
 800280a:	480e      	ldr	r0, [pc, #56]	@ (8002844 <GetKp_f+0x68>)
 800280c:	f009 ff7a 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002810:	480c      	ldr	r0, [pc, #48]	@ (8002844 <GetKp_f+0x68>)
 8002812:	f7fd fd3d 	bl	8000290 <strlen>
 8002816:	4603      	mov	r3, r0
 8002818:	b29a      	uxth	r2, r3
 800281a:	2364      	movs	r3, #100	@ 0x64
 800281c:	4909      	ldr	r1, [pc, #36]	@ (8002844 <GetKp_f+0x68>)
 800281e:	480a      	ldr	r0, [pc, #40]	@ (8002848 <GetKp_f+0x6c>)
 8002820:	f004 fb9e 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002824:	22b4      	movs	r2, #180	@ 0xb4
 8002826:	2100      	movs	r1, #0
 8002828:	4806      	ldr	r0, [pc, #24]	@ (8002844 <GetKp_f+0x68>)
 800282a:	f009 fffe 	bl	800c82a <memset>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bdb0      	pop	{r4, r5, r7, pc}
 8002836:	bf00      	nop
 8002838:	20000a40 	.word	0x20000a40
 800283c:	20000010 	.word	0x20000010
 8002840:	08010dbc 	.word	0x08010dbc
 8002844:	20000970 	.word	0x20000970
 8002848:	20000cd8 	.word	0x20000cd8

0800284c <SetET0_f>:
void SetET0_f(char* arg){
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	uint8_t et0_flag = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002858:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <SetET0_f+0xb8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d03e      	beq.n	80028de <SetET0_f+0x92>
 8002860:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <SetET0_f+0xb8>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fd13 	bl	8000290 <strlen>
 800286a:	4603      	mov	r3, r0
 800286c:	2b04      	cmp	r3, #4
 800286e:	d836      	bhi.n	80028de <SetET0_f+0x92>
		Et0_New_Value = atof(tokens[1]);
 8002870:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <SetET0_f+0xb8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4618      	mov	r0, r3
 8002876:	f008 f977 	bl	800ab68 <atof>
 800287a:	ec53 2b10 	vmov	r2, r3, d0
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe f9c1 	bl	8000c08 <__aeabi_d2f>
 8002886:	4603      	mov	r3, r0
 8002888:	4a1f      	ldr	r2, [pc, #124]	@ (8002908 <SetET0_f+0xbc>)
 800288a:	6013      	str	r3, [r2, #0]

		if (Et0_New_Value >= MIN_ET0 && Et0_New_Value <= MAX_ET0) {
 800288c:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <SetET0_f+0xbc>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	db20      	blt.n	80028de <SetET0_f+0x92>
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <SetET0_f+0xbc>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80028a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d816      	bhi.n	80028de <SetET0_f+0x92>
			sprintf((char*)cmd_buff, "ET0 VALUE SET TO %.2f SUCCESSFULLY\r\n", Et0_New_Value);
 80028b0:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <SetET0_f+0xbc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fe57 	bl	8000568 <__aeabi_f2d>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4913      	ldr	r1, [pc, #76]	@ (800290c <SetET0_f+0xc0>)
 80028c0:	4813      	ldr	r0, [pc, #76]	@ (8002910 <SetET0_f+0xc4>)
 80028c2:	f009 ff1f 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80028c6:	4812      	ldr	r0, [pc, #72]	@ (8002910 <SetET0_f+0xc4>)
 80028c8:	f7fd fce2 	bl	8000290 <strlen>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	2364      	movs	r3, #100	@ 0x64
 80028d2:	490f      	ldr	r1, [pc, #60]	@ (8002910 <SetET0_f+0xc4>)
 80028d4:	480f      	ldr	r0, [pc, #60]	@ (8002914 <SetET0_f+0xc8>)
 80028d6:	f004 fb43 	bl	8006f60 <HAL_UART_Transmit>
			et0_flag = 1;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (et0_flag==0) {
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <SetET0_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80028e4:	2364      	movs	r3, #100	@ 0x64
 80028e6:	2210      	movs	r2, #16
 80028e8:	490b      	ldr	r1, [pc, #44]	@ (8002918 <SetET0_f+0xcc>)
 80028ea:	480a      	ldr	r0, [pc, #40]	@ (8002914 <SetET0_f+0xc8>)
 80028ec:	f004 fb38 	bl	8006f60 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 80028f0:	22b4      	movs	r2, #180	@ 0xb4
 80028f2:	2100      	movs	r1, #0
 80028f4:	4806      	ldr	r0, [pc, #24]	@ (8002910 <SetET0_f+0xc4>)
 80028f6:	f009 ff98 	bl	800c82a <memset>
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000944 	.word	0x20000944
 8002908:	20000a44 	.word	0x20000a44
 800290c:	08010e18 	.word	0x08010e18
 8002910:	20000970 	.word	0x20000970
 8002914:	20000cd8 	.word	0x20000cd8
 8002918:	080107fc 	.word	0x080107fc

0800291c <GetET0_f>:
void GetET0_f(char* arg){
 800291c:	b5b0      	push	{r4, r5, r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af02      	add	r7, sp, #8
 8002922:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ET0 VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Et0_New_Value,SensorsValues.ET0);
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <GetET0_f+0x5c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe1d 	bl	8000568 <__aeabi_f2d>
 800292e:	4604      	mov	r4, r0
 8002930:	460d      	mov	r5, r1
 8002932:	4b12      	ldr	r3, [pc, #72]	@ (800297c <GetET0_f+0x60>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe16 	bl	8000568 <__aeabi_f2d>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	e9cd 2300 	strd	r2, r3, [sp]
 8002944:	4622      	mov	r2, r4
 8002946:	462b      	mov	r3, r5
 8002948:	490d      	ldr	r1, [pc, #52]	@ (8002980 <GetET0_f+0x64>)
 800294a:	480e      	ldr	r0, [pc, #56]	@ (8002984 <GetET0_f+0x68>)
 800294c:	f009 feda 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002950:	480c      	ldr	r0, [pc, #48]	@ (8002984 <GetET0_f+0x68>)
 8002952:	f7fd fc9d 	bl	8000290 <strlen>
 8002956:	4603      	mov	r3, r0
 8002958:	b29a      	uxth	r2, r3
 800295a:	2364      	movs	r3, #100	@ 0x64
 800295c:	4909      	ldr	r1, [pc, #36]	@ (8002984 <GetET0_f+0x68>)
 800295e:	480a      	ldr	r0, [pc, #40]	@ (8002988 <GetET0_f+0x6c>)
 8002960:	f004 fafe 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002964:	22b4      	movs	r2, #180	@ 0xb4
 8002966:	2100      	movs	r1, #0
 8002968:	4806      	ldr	r0, [pc, #24]	@ (8002984 <GetET0_f+0x68>)
 800296a:	f009 ff5e 	bl	800c82a <memset>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	bf00      	nop
 8002978:	20000a44 	.word	0x20000a44
 800297c:	20000010 	.word	0x20000010
 8002980:	08010e40 	.word	0x08010e40
 8002984:	20000970 	.word	0x20000970
 8002988:	20000cd8 	.word	0x20000cd8

0800298c <SetETC_f>:

void SetETC_f(char* arg){
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	uint8_t etc_flag = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002998:	4b2a      	ldr	r3, [pc, #168]	@ (8002a44 <SetETC_f+0xb8>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d03e      	beq.n	8002a1e <SetETC_f+0x92>
 80029a0:	4b28      	ldr	r3, [pc, #160]	@ (8002a44 <SetETC_f+0xb8>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fc73 	bl	8000290 <strlen>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d836      	bhi.n	8002a1e <SetETC_f+0x92>
		Etc_New_Value = atof(tokens[1]);
 80029b0:	4b24      	ldr	r3, [pc, #144]	@ (8002a44 <SetETC_f+0xb8>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f008 f8d7 	bl	800ab68 <atof>
 80029ba:	ec53 2b10 	vmov	r2, r3, d0
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7fe f921 	bl	8000c08 <__aeabi_d2f>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a48 <SetETC_f+0xbc>)
 80029ca:	6013      	str	r3, [r2, #0]
		if (Etc_New_Value >= MIN_ETC && Etc_New_Value <= MAX_ETC) {
 80029cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <SetETC_f+0xbc>)
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	db20      	blt.n	8002a1e <SetETC_f+0x92>
 80029dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <SetETC_f+0xbc>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80029e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	d816      	bhi.n	8002a1e <SetETC_f+0x92>
			sprintf((char*)cmd_buff, "ETC VALUE SET TO %.2f SUCCESSFULLY\r\n", Etc_New_Value);
 80029f0:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <SetETC_f+0xbc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdb7 	bl	8000568 <__aeabi_f2d>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4913      	ldr	r1, [pc, #76]	@ (8002a4c <SetETC_f+0xc0>)
 8002a00:	4813      	ldr	r0, [pc, #76]	@ (8002a50 <SetETC_f+0xc4>)
 8002a02:	f009 fe7f 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002a06:	4812      	ldr	r0, [pc, #72]	@ (8002a50 <SetETC_f+0xc4>)
 8002a08:	f7fd fc42 	bl	8000290 <strlen>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	2364      	movs	r3, #100	@ 0x64
 8002a12:	490f      	ldr	r1, [pc, #60]	@ (8002a50 <SetETC_f+0xc4>)
 8002a14:	480f      	ldr	r0, [pc, #60]	@ (8002a54 <SetETC_f+0xc8>)
 8002a16:	f004 faa3 	bl	8006f60 <HAL_UART_Transmit>
			etc_flag = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (etc_flag==0) {
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <SetETC_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002a24:	2364      	movs	r3, #100	@ 0x64
 8002a26:	2210      	movs	r2, #16
 8002a28:	490b      	ldr	r1, [pc, #44]	@ (8002a58 <SetETC_f+0xcc>)
 8002a2a:	480a      	ldr	r0, [pc, #40]	@ (8002a54 <SetETC_f+0xc8>)
 8002a2c:	f004 fa98 	bl	8006f60 <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 8002a30:	22b4      	movs	r2, #180	@ 0xb4
 8002a32:	2100      	movs	r1, #0
 8002a34:	4806      	ldr	r0, [pc, #24]	@ (8002a50 <SetETC_f+0xc4>)
 8002a36:	f009 fef8 	bl	800c82a <memset>
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000944 	.word	0x20000944
 8002a48:	20000a48 	.word	0x20000a48
 8002a4c:	08010e9c 	.word	0x08010e9c
 8002a50:	20000970 	.word	0x20000970
 8002a54:	20000cd8 	.word	0x20000cd8
 8002a58:	080107fc 	.word	0x080107fc

08002a5c <GetETC_f>:

void GetETC_f(char* arg){
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ETC VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Etc_New_Value,SensorsValues.ETc);
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <GetETC_f+0x5c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd7d 	bl	8000568 <__aeabi_f2d>
 8002a6e:	4604      	mov	r4, r0
 8002a70:	460d      	mov	r5, r1
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <GetETC_f+0x60>)
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fd76 	bl	8000568 <__aeabi_f2d>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	e9cd 2300 	strd	r2, r3, [sp]
 8002a84:	4622      	mov	r2, r4
 8002a86:	462b      	mov	r3, r5
 8002a88:	490d      	ldr	r1, [pc, #52]	@ (8002ac0 <GetETC_f+0x64>)
 8002a8a:	480e      	ldr	r0, [pc, #56]	@ (8002ac4 <GetETC_f+0x68>)
 8002a8c:	f009 fe3a 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002a90:	480c      	ldr	r0, [pc, #48]	@ (8002ac4 <GetETC_f+0x68>)
 8002a92:	f7fd fbfd 	bl	8000290 <strlen>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	2364      	movs	r3, #100	@ 0x64
 8002a9c:	4909      	ldr	r1, [pc, #36]	@ (8002ac4 <GetETC_f+0x68>)
 8002a9e:	480a      	ldr	r0, [pc, #40]	@ (8002ac8 <GetETC_f+0x6c>)
 8002aa0:	f004 fa5e 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002aa4:	22b4      	movs	r2, #180	@ 0xb4
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4806      	ldr	r0, [pc, #24]	@ (8002ac4 <GetETC_f+0x68>)
 8002aaa:	f009 febe 	bl	800c82a <memset>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000a48 	.word	0x20000a48
 8002abc:	20000010 	.word	0x20000010
 8002ac0:	08010ec4 	.word	0x08010ec4
 8002ac4:	20000970 	.word	0x20000970
 8002ac8:	20000cd8 	.word	0x20000cd8

08002acc <SetETCadj_f>:

void SetETCadj_f(char* arg){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	uint8_t etcadj_flag = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <SetETCadj_f+0xb8>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d03f      	beq.n	8002b60 <SetETCadj_f+0x94>
 8002ae0:	4b28      	ldr	r3, [pc, #160]	@ (8002b84 <SetETCadj_f+0xb8>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fbd3 	bl	8000290 <strlen>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d837      	bhi.n	8002b60 <SetETCadj_f+0x94>
		EtcAdj_New_Value = atof(tokens[1]);
 8002af0:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <SetETCadj_f+0xb8>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f008 f837 	bl	800ab68 <atof>
 8002afa:	ec53 2b10 	vmov	r2, r3, d0
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7fe f881 	bl	8000c08 <__aeabi_d2f>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <SetETCadj_f+0xbc>)
 8002b0a:	6013      	str	r3, [r2, #0]
		if (EtcAdj_New_Value >= 0 && EtcAdj_New_Value <= Old_Default_ETC) {
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <SetETCadj_f+0xbc>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	db21      	blt.n	8002b60 <SetETCadj_f+0x94>
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <SetETCadj_f+0xbc>)
 8002b1e:	ed93 7a00 	vldr	s14, [r3]
 8002b22:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <SetETCadj_f+0xc0>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	d816      	bhi.n	8002b60 <SetETCadj_f+0x94>
			sprintf((char*)cmd_buff, "ETC ADJ VALUE SET TO %.2f SUCCESSFULLY\r\n", EtcAdj_New_Value);
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <SetETCadj_f+0xbc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd16 	bl	8000568 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4913      	ldr	r1, [pc, #76]	@ (8002b90 <SetETCadj_f+0xc4>)
 8002b42:	4814      	ldr	r0, [pc, #80]	@ (8002b94 <SetETCadj_f+0xc8>)
 8002b44:	f009 fdde 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002b48:	4812      	ldr	r0, [pc, #72]	@ (8002b94 <SetETCadj_f+0xc8>)
 8002b4a:	f7fd fba1 	bl	8000290 <strlen>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	2364      	movs	r3, #100	@ 0x64
 8002b54:	490f      	ldr	r1, [pc, #60]	@ (8002b94 <SetETCadj_f+0xc8>)
 8002b56:	4810      	ldr	r0, [pc, #64]	@ (8002b98 <SetETCadj_f+0xcc>)
 8002b58:	f004 fa02 	bl	8006f60 <HAL_UART_Transmit>
			etcadj_flag = 1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (etcadj_flag==0) {
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <SetETCadj_f+0xa6>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002b66:	2364      	movs	r3, #100	@ 0x64
 8002b68:	2210      	movs	r2, #16
 8002b6a:	490c      	ldr	r1, [pc, #48]	@ (8002b9c <SetETCadj_f+0xd0>)
 8002b6c:	480a      	ldr	r0, [pc, #40]	@ (8002b98 <SetETCadj_f+0xcc>)
 8002b6e:	f004 f9f7 	bl	8006f60 <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 8002b72:	22b4      	movs	r2, #180	@ 0xb4
 8002b74:	2100      	movs	r1, #0
 8002b76:	4807      	ldr	r0, [pc, #28]	@ (8002b94 <SetETCadj_f+0xc8>)
 8002b78:	f009 fe57 	bl	800c82a <memset>
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000944 	.word	0x20000944
 8002b88:	20000a4c 	.word	0x20000a4c
 8002b8c:	20000a68 	.word	0x20000a68
 8002b90:	08010f20 	.word	0x08010f20
 8002b94:	20000970 	.word	0x20000970
 8002b98:	20000cd8 	.word	0x20000cd8
 8002b9c:	080107fc 	.word	0x080107fc

08002ba0 <GetETCadj_f>:

void GetETCadj_f(char* arg){
 8002ba0:	b5b0      	push	{r4, r5, r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ETC ADJ VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",EtcAdj_New_Value,SensorsValues.ETcAdj);
 8002ba8:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <GetETCadj_f+0x5c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd fcdb 	bl	8000568 <__aeabi_f2d>
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	460d      	mov	r5, r1
 8002bb6:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <GetETCadj_f+0x60>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fcd4 	bl	8000568 <__aeabi_f2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	e9cd 2300 	strd	r2, r3, [sp]
 8002bc8:	4622      	mov	r2, r4
 8002bca:	462b      	mov	r3, r5
 8002bcc:	490d      	ldr	r1, [pc, #52]	@ (8002c04 <GetETCadj_f+0x64>)
 8002bce:	480e      	ldr	r0, [pc, #56]	@ (8002c08 <GetETCadj_f+0x68>)
 8002bd0:	f009 fd98 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002bd4:	480c      	ldr	r0, [pc, #48]	@ (8002c08 <GetETCadj_f+0x68>)
 8002bd6:	f7fd fb5b 	bl	8000290 <strlen>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	2364      	movs	r3, #100	@ 0x64
 8002be0:	4909      	ldr	r1, [pc, #36]	@ (8002c08 <GetETCadj_f+0x68>)
 8002be2:	480a      	ldr	r0, [pc, #40]	@ (8002c0c <GetETCadj_f+0x6c>)
 8002be4:	f004 f9bc 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002be8:	22b4      	movs	r2, #180	@ 0xb4
 8002bea:	2100      	movs	r1, #0
 8002bec:	4806      	ldr	r0, [pc, #24]	@ (8002c08 <GetETCadj_f+0x68>)
 8002bee:	f009 fe1c 	bl	800c82a <memset>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000a4c 	.word	0x20000a4c
 8002c00:	20000010 	.word	0x20000010
 8002c04:	08010f4c 	.word	0x08010f4c
 8002c08:	20000970 	.word	0x20000970
 8002c0c:	20000cd8 	.word	0x20000cd8

08002c10 <GetAirPressure_f>:
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
}

void GetAirPressure_f(char* arg){
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"AIR PRESSURE VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",AirPressure_New_Value,SensorsValues.AirPressure_s);
 8002c18:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <GetAirPressure_f+0x5c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fca3 	bl	8000568 <__aeabi_f2d>
 8002c22:	4604      	mov	r4, r0
 8002c24:	460d      	mov	r5, r1
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <GetAirPressure_f+0x60>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fc9c 	bl	8000568 <__aeabi_f2d>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	e9cd 2300 	strd	r2, r3, [sp]
 8002c38:	4622      	mov	r2, r4
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	490d      	ldr	r1, [pc, #52]	@ (8002c74 <GetAirPressure_f+0x64>)
 8002c3e:	480e      	ldr	r0, [pc, #56]	@ (8002c78 <GetAirPressure_f+0x68>)
 8002c40:	f009 fd60 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002c44:	480c      	ldr	r0, [pc, #48]	@ (8002c78 <GetAirPressure_f+0x68>)
 8002c46:	f7fd fb23 	bl	8000290 <strlen>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	2364      	movs	r3, #100	@ 0x64
 8002c50:	4909      	ldr	r1, [pc, #36]	@ (8002c78 <GetAirPressure_f+0x68>)
 8002c52:	480a      	ldr	r0, [pc, #40]	@ (8002c7c <GetAirPressure_f+0x6c>)
 8002c54:	f004 f984 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002c58:	22b4      	movs	r2, #180	@ 0xb4
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4806      	ldr	r0, [pc, #24]	@ (8002c78 <GetAirPressure_f+0x68>)
 8002c5e:	f009 fde4 	bl	800c82a <memset>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdb0      	pop	{r4, r5, r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000a50 	.word	0x20000a50
 8002c70:	20000010 	.word	0x20000010
 8002c74:	08010fdc 	.word	0x08010fdc
 8002c78:	20000970 	.word	0x20000970
 8002c7c:	20000cd8 	.word	0x20000cd8

08002c80 <SetHeigh_f>:

void SetHeigh_f(char* arg){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	uint8_t height_flag = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d38 <SetHeigh_f+0xb8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d03e      	beq.n	8002d12 <SetHeigh_f+0x92>
 8002c94:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <SetHeigh_f+0xb8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd faf9 	bl	8000290 <strlen>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d836      	bhi.n	8002d12 <SetHeigh_f+0x92>
		Height_New_Value = atof(tokens[1]);
 8002ca4:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <SetHeigh_f+0xb8>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f007 ff5d 	bl	800ab68 <atof>
 8002cae:	ec53 2b10 	vmov	r2, r3, d0
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f7fd ffa7 	bl	8000c08 <__aeabi_d2f>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002d3c <SetHeigh_f+0xbc>)
 8002cbe:	6013      	str	r3, [r2, #0]
		if (Height_New_Value >= 0.0f && Height_New_Value <= 5000.0f) {
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <SetHeigh_f+0xbc>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cce:	db20      	blt.n	8002d12 <SetHeigh_f+0x92>
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <SetHeigh_f+0xbc>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002d40 <SetHeigh_f+0xc0>
 8002cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	d816      	bhi.n	8002d12 <SetHeigh_f+0x92>
			sprintf((char*)cmd_buff, "HEIGHT VALUE SET TO %.2f SUCCESSFULLY\r\n", Height_New_Value);
 8002ce4:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <SetHeigh_f+0xbc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc3d 	bl	8000568 <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4914      	ldr	r1, [pc, #80]	@ (8002d44 <SetHeigh_f+0xc4>)
 8002cf4:	4814      	ldr	r0, [pc, #80]	@ (8002d48 <SetHeigh_f+0xc8>)
 8002cf6:	f009 fd05 	bl	800c704 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002cfa:	4813      	ldr	r0, [pc, #76]	@ (8002d48 <SetHeigh_f+0xc8>)
 8002cfc:	f7fd fac8 	bl	8000290 <strlen>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	2364      	movs	r3, #100	@ 0x64
 8002d06:	4910      	ldr	r1, [pc, #64]	@ (8002d48 <SetHeigh_f+0xc8>)
 8002d08:	4810      	ldr	r0, [pc, #64]	@ (8002d4c <SetHeigh_f+0xcc>)
 8002d0a:	f004 f929 	bl	8006f60 <HAL_UART_Transmit>
			height_flag = 1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (height_flag==0) {
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <SetHeigh_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002d18:	2364      	movs	r3, #100	@ 0x64
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	490c      	ldr	r1, [pc, #48]	@ (8002d50 <SetHeigh_f+0xd0>)
 8002d1e:	480b      	ldr	r0, [pc, #44]	@ (8002d4c <SetHeigh_f+0xcc>)
 8002d20:	f004 f91e 	bl	8006f60 <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 8002d24:	22b4      	movs	r2, #180	@ 0xb4
 8002d26:	2100      	movs	r1, #0
 8002d28:	4807      	ldr	r0, [pc, #28]	@ (8002d48 <SetHeigh_f+0xc8>)
 8002d2a:	f009 fd7e 	bl	800c82a <memset>
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000944 	.word	0x20000944
 8002d3c:	20000a54 	.word	0x20000a54
 8002d40:	459c4000 	.word	0x459c4000
 8002d44:	08011040 	.word	0x08011040
 8002d48:	20000970 	.word	0x20000970
 8002d4c:	20000cd8 	.word	0x20000cd8
 8002d50:	080107fc 	.word	0x080107fc

08002d54 <GetHeigh_f>:

void GetHeigh_f(char* arg){
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"HEIGHT VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Height_New_Value,SensorsValues.AirPressure_s);
 8002d5c:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <GetHeigh_f+0x5c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fc01 	bl	8000568 <__aeabi_f2d>
 8002d66:	4604      	mov	r4, r0
 8002d68:	460d      	mov	r5, r1
 8002d6a:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <GetHeigh_f+0x60>)
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fbfa 	bl	8000568 <__aeabi_f2d>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	e9cd 2300 	strd	r2, r3, [sp]
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	462b      	mov	r3, r5
 8002d80:	490d      	ldr	r1, [pc, #52]	@ (8002db8 <GetHeigh_f+0x64>)
 8002d82:	480e      	ldr	r0, [pc, #56]	@ (8002dbc <GetHeigh_f+0x68>)
 8002d84:	f009 fcbe 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002d88:	480c      	ldr	r0, [pc, #48]	@ (8002dbc <GetHeigh_f+0x68>)
 8002d8a:	f7fd fa81 	bl	8000290 <strlen>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	2364      	movs	r3, #100	@ 0x64
 8002d94:	4909      	ldr	r1, [pc, #36]	@ (8002dbc <GetHeigh_f+0x68>)
 8002d96:	480a      	ldr	r0, [pc, #40]	@ (8002dc0 <GetHeigh_f+0x6c>)
 8002d98:	f004 f8e2 	bl	8006f60 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002d9c:	22b4      	movs	r2, #180	@ 0xb4
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4806      	ldr	r0, [pc, #24]	@ (8002dbc <GetHeigh_f+0x68>)
 8002da2:	f009 fd42 	bl	800c82a <memset>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bdb0      	pop	{r4, r5, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000a54 	.word	0x20000a54
 8002db4:	20000010 	.word	0x20000010
 8002db8:	08011068 	.word	0x08011068
 8002dbc:	20000970 	.word	0x20000970
 8002dc0:	20000cd8 	.word	0x20000cd8

08002dc4 <SysConfigMenu>:

void SysConfigMenu(char* arg){
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	currentMenu=SysConfig_Menu;
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <SysConfigMenu+0x88>)
 8002dce:	2204      	movs	r2, #4
 8002dd0:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"------------------ SYSTEM CONFIGURATION MENU -----------------\r\n");
 8002dd2:	491f      	ldr	r1, [pc, #124]	@ (8002e50 <SysConfigMenu+0x8c>)
 8002dd4:	481f      	ldr	r0, [pc, #124]	@ (8002e54 <SysConfigMenu+0x90>)
 8002dd6:	f009 fc95 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002dda:	481e      	ldr	r0, [pc, #120]	@ (8002e54 <SysConfigMenu+0x90>)
 8002ddc:	f7fd fa58 	bl	8000290 <strlen>
 8002de0:	4603      	mov	r3, r0
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	2364      	movs	r3, #100	@ 0x64
 8002de6:	491b      	ldr	r1, [pc, #108]	@ (8002e54 <SysConfigMenu+0x90>)
 8002de8:	481b      	ldr	r0, [pc, #108]	@ (8002e58 <SysConfigMenu+0x94>)
 8002dea:	f004 f8b9 	bl	8006f60 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e023      	b.n	8002e3c <SysConfigMenu+0x78>
	{if (cmd_list[l].MenuIndex==SysConfig_Menu)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <SysConfigMenu+0x98>)
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	4413      	add	r3, r2
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d118      	bne.n	8002e36 <SysConfigMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	4a15      	ldr	r2, [pc, #84]	@ (8002e5c <SysConfigMenu+0x98>)
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	4413      	add	r3, r2
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	4912      	ldr	r1, [pc, #72]	@ (8002e5c <SysConfigMenu+0x98>)
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	440b      	add	r3, r1
 8002e16:	3304      	adds	r3, #4
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4911      	ldr	r1, [pc, #68]	@ (8002e60 <SysConfigMenu+0x9c>)
 8002e1c:	480d      	ldr	r0, [pc, #52]	@ (8002e54 <SysConfigMenu+0x90>)
 8002e1e:	f009 fc71 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002e22:	480c      	ldr	r0, [pc, #48]	@ (8002e54 <SysConfigMenu+0x90>)
 8002e24:	f7fd fa34 	bl	8000290 <strlen>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	2364      	movs	r3, #100	@ 0x64
 8002e2e:	4909      	ldr	r1, [pc, #36]	@ (8002e54 <SysConfigMenu+0x90>)
 8002e30:	4809      	ldr	r0, [pc, #36]	@ (8002e58 <SysConfigMenu+0x94>)
 8002e32:	f004 f895 	bl	8006f60 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b25      	cmp	r3, #37	@ 0x25
 8002e40:	d9d8      	bls.n	8002df4 <SysConfigMenu+0x30>
	}
	}

}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	2000096c 	.word	0x2000096c
 8002e50:	080110c8 	.word	0x080110c8
 8002e54:	2000082c 	.word	0x2000082c
 8002e58:	20000cd8 	.word	0x20000cd8
 8002e5c:	20000044 	.word	0x20000044
 8002e60:	080106ec 	.word	0x080106ec

08002e64 <Save_f>:
void Save_f(char* arg){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	//Saving Lora Values
	Old_Default_Sf=LoraValues.sf_l;
 8002e6c:	4ba2      	ldr	r3, [pc, #648]	@ (80030f8 <Save_f+0x294>)
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	4ba2      	ldr	r3, [pc, #648]	@ (80030fc <Save_f+0x298>)
 8002e72:	701a      	strb	r2, [r3, #0]
	LoraValues.sf_l=Sf_New_Value;
 8002e74:	4ba2      	ldr	r3, [pc, #648]	@ (8003100 <Save_f+0x29c>)
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	4b9f      	ldr	r3, [pc, #636]	@ (80030f8 <Save_f+0x294>)
 8002e7a:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"The default SF Value is now %d\r\n",LoraValues.sf_l);
 8002e7c:	4b9e      	ldr	r3, [pc, #632]	@ (80030f8 <Save_f+0x294>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	49a0      	ldr	r1, [pc, #640]	@ (8003104 <Save_f+0x2a0>)
 8002e84:	48a0      	ldr	r0, [pc, #640]	@ (8003108 <Save_f+0x2a4>)
 8002e86:	f009 fc3d 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002e8a:	489f      	ldr	r0, [pc, #636]	@ (8003108 <Save_f+0x2a4>)
 8002e8c:	f7fd fa00 	bl	8000290 <strlen>
 8002e90:	4603      	mov	r3, r0
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	2364      	movs	r3, #100	@ 0x64
 8002e96:	499c      	ldr	r1, [pc, #624]	@ (8003108 <Save_f+0x2a4>)
 8002e98:	489c      	ldr	r0, [pc, #624]	@ (800310c <Save_f+0x2a8>)
 8002e9a:	f004 f861 	bl	8006f60 <HAL_UART_Transmit>
	Old_Default_Bw=LoraValues.bw_l;
 8002e9e:	4b96      	ldr	r3, [pc, #600]	@ (80030f8 <Save_f+0x294>)
 8002ea0:	789a      	ldrb	r2, [r3, #2]
 8002ea2:	4b9b      	ldr	r3, [pc, #620]	@ (8003110 <Save_f+0x2ac>)
 8002ea4:	701a      	strb	r2, [r3, #0]
	LoraValues.bw_l=Bw_New_Value;
 8002ea6:	4b9b      	ldr	r3, [pc, #620]	@ (8003114 <Save_f+0x2b0>)
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	4b93      	ldr	r3, [pc, #588]	@ (80030f8 <Save_f+0x294>)
 8002eac:	709a      	strb	r2, [r3, #2]
	sprintf((char*)txBuffer,"The default Bandwidth Value is now %d\r\n",LoraValues.bw_l);
 8002eae:	4b92      	ldr	r3, [pc, #584]	@ (80030f8 <Save_f+0x294>)
 8002eb0:	789b      	ldrb	r3, [r3, #2]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4998      	ldr	r1, [pc, #608]	@ (8003118 <Save_f+0x2b4>)
 8002eb6:	4894      	ldr	r0, [pc, #592]	@ (8003108 <Save_f+0x2a4>)
 8002eb8:	f009 fc24 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002ebc:	4892      	ldr	r0, [pc, #584]	@ (8003108 <Save_f+0x2a4>)
 8002ebe:	f7fd f9e7 	bl	8000290 <strlen>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	2364      	movs	r3, #100	@ 0x64
 8002ec8:	498f      	ldr	r1, [pc, #572]	@ (8003108 <Save_f+0x2a4>)
 8002eca:	4890      	ldr	r0, [pc, #576]	@ (800310c <Save_f+0x2a8>)
 8002ecc:	f004 f848 	bl	8006f60 <HAL_UART_Transmit>
	Old_Default_Cr=LoraValues.cr_l;
 8002ed0:	4b89      	ldr	r3, [pc, #548]	@ (80030f8 <Save_f+0x294>)
 8002ed2:	785a      	ldrb	r2, [r3, #1]
 8002ed4:	4b91      	ldr	r3, [pc, #580]	@ (800311c <Save_f+0x2b8>)
 8002ed6:	701a      	strb	r2, [r3, #0]
	LoraValues.cr_l=Cr_New_Value;
 8002ed8:	4b91      	ldr	r3, [pc, #580]	@ (8003120 <Save_f+0x2bc>)
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	4b86      	ldr	r3, [pc, #536]	@ (80030f8 <Save_f+0x294>)
 8002ede:	705a      	strb	r2, [r3, #1]
	sprintf((char*)txBuffer,"The default CR buffer is now %d\r\n",LoraValues.cr_l);
 8002ee0:	4b85      	ldr	r3, [pc, #532]	@ (80030f8 <Save_f+0x294>)
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	498f      	ldr	r1, [pc, #572]	@ (8003124 <Save_f+0x2c0>)
 8002ee8:	4887      	ldr	r0, [pc, #540]	@ (8003108 <Save_f+0x2a4>)
 8002eea:	f009 fc0b 	bl	800c704 <siprintf>

	//Saving GPS Values
	Old_Default_AltGPS=MyGps.alt_gps ;
 8002eee:	4b8e      	ldr	r3, [pc, #568]	@ (8003128 <Save_f+0x2c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a8e      	ldr	r2, [pc, #568]	@ (800312c <Save_f+0x2c8>)
 8002ef4:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "The default GPS ALTITUDE is now %.2f\r\n",MyGps.alt_gps);
 8002ef6:	4b8c      	ldr	r3, [pc, #560]	@ (8003128 <Save_f+0x2c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fb34 	bl	8000568 <__aeabi_f2d>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	498a      	ldr	r1, [pc, #552]	@ (8003130 <Save_f+0x2cc>)
 8002f06:	488b      	ldr	r0, [pc, #556]	@ (8003134 <Save_f+0x2d0>)
 8002f08:	f009 fbfc 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002f0c:	4889      	ldr	r0, [pc, #548]	@ (8003134 <Save_f+0x2d0>)
 8002f0e:	f7fd f9bf 	bl	8000290 <strlen>
 8002f12:	4603      	mov	r3, r0
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	2364      	movs	r3, #100	@ 0x64
 8002f18:	4986      	ldr	r1, [pc, #536]	@ (8003134 <Save_f+0x2d0>)
 8002f1a:	487c      	ldr	r0, [pc, #496]	@ (800310c <Save_f+0x2a8>)
 8002f1c:	f004 f820 	bl	8006f60 <HAL_UART_Transmit>

	Old_Default_LatGPS=MyGps.lat_gps ;
 8002f20:	4b81      	ldr	r3, [pc, #516]	@ (8003128 <Save_f+0x2c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a84      	ldr	r2, [pc, #528]	@ (8003138 <Save_f+0x2d4>)
 8002f26:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "The default GPS LATITUDE is now %.2f\r\n",MyGps.lat_gps);
 8002f28:	4b7f      	ldr	r3, [pc, #508]	@ (8003128 <Save_f+0x2c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fb1b 	bl	8000568 <__aeabi_f2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4981      	ldr	r1, [pc, #516]	@ (800313c <Save_f+0x2d8>)
 8002f38:	487e      	ldr	r0, [pc, #504]	@ (8003134 <Save_f+0x2d0>)
 8002f3a:	f009 fbe3 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002f3e:	487d      	ldr	r0, [pc, #500]	@ (8003134 <Save_f+0x2d0>)
 8002f40:	f7fd f9a6 	bl	8000290 <strlen>
 8002f44:	4603      	mov	r3, r0
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	2364      	movs	r3, #100	@ 0x64
 8002f4a:	497a      	ldr	r1, [pc, #488]	@ (8003134 <Save_f+0x2d0>)
 8002f4c:	486f      	ldr	r0, [pc, #444]	@ (800310c <Save_f+0x2a8>)
 8002f4e:	f004 f807 	bl	8006f60 <HAL_UART_Transmit>

	Old_Default_TimeGPS=MyGps.time_gps ;
 8002f52:	4b75      	ldr	r3, [pc, #468]	@ (8003128 <Save_f+0x2c4>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	4b78      	ldr	r3, [pc, #480]	@ (8003140 <Save_f+0x2dc>)
 8002f60:	edc3 7a00 	vstr	s15, [r3]
	sprintf((char*)cmd_buff, "The default GPS TIME is now %lu\r\n",MyGps.time_gps);
 8002f64:	4b70      	ldr	r3, [pc, #448]	@ (8003128 <Save_f+0x2c4>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4976      	ldr	r1, [pc, #472]	@ (8003144 <Save_f+0x2e0>)
 8002f6c:	4871      	ldr	r0, [pc, #452]	@ (8003134 <Save_f+0x2d0>)
 8002f6e:	f009 fbc9 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002f72:	4870      	ldr	r0, [pc, #448]	@ (8003134 <Save_f+0x2d0>)
 8002f74:	f7fd f98c 	bl	8000290 <strlen>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	2364      	movs	r3, #100	@ 0x64
 8002f7e:	496d      	ldr	r1, [pc, #436]	@ (8003134 <Save_f+0x2d0>)
 8002f80:	4862      	ldr	r0, [pc, #392]	@ (800310c <Save_f+0x2a8>)
 8002f82:	f003 ffed 	bl	8006f60 <HAL_UART_Transmit>

	//Saving Sensors Values

	Old_Default_Radiation = SensorsValues.Radiation_s;
 8002f86:	4b70      	ldr	r3, [pc, #448]	@ (8003148 <Save_f+0x2e4>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	4a70      	ldr	r2, [pc, #448]	@ (800314c <Save_f+0x2e8>)
 8002f8c:	6013      	str	r3, [r2, #0]
	SensorsValues.Radiation_s = Radiation_New_Value;
 8002f8e:	4b70      	ldr	r3, [pc, #448]	@ (8003150 <Save_f+0x2ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6d      	ldr	r2, [pc, #436]	@ (8003148 <Save_f+0x2e4>)
 8002f94:	6253      	str	r3, [r2, #36]	@ 0x24
	sprintf((char*)txBuffer, "The default Radiation is now %.2f\r\n", SensorsValues.Radiation_s);
 8002f96:	4b6c      	ldr	r3, [pc, #432]	@ (8003148 <Save_f+0x2e4>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fae4 	bl	8000568 <__aeabi_f2d>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	496b      	ldr	r1, [pc, #428]	@ (8003154 <Save_f+0x2f0>)
 8002fa6:	4858      	ldr	r0, [pc, #352]	@ (8003108 <Save_f+0x2a4>)
 8002fa8:	f009 fbac 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002fac:	4856      	ldr	r0, [pc, #344]	@ (8003108 <Save_f+0x2a4>)
 8002fae:	f7fd f96f 	bl	8000290 <strlen>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	2364      	movs	r3, #100	@ 0x64
 8002fb8:	4953      	ldr	r1, [pc, #332]	@ (8003108 <Save_f+0x2a4>)
 8002fba:	4854      	ldr	r0, [pc, #336]	@ (800310c <Save_f+0x2a8>)
 8002fbc:	f003 ffd0 	bl	8006f60 <HAL_UART_Transmit>

	Old_Default_KC = SensorsValues.Kc;
 8002fc0:	4b61      	ldr	r3, [pc, #388]	@ (8003148 <Save_f+0x2e4>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	4a64      	ldr	r2, [pc, #400]	@ (8003158 <Save_f+0x2f4>)
 8002fc6:	6013      	str	r3, [r2, #0]
	SensorsValues.Kc = Kc_New_Value;
 8002fc8:	4b64      	ldr	r3, [pc, #400]	@ (800315c <Save_f+0x2f8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a5e      	ldr	r2, [pc, #376]	@ (8003148 <Save_f+0x2e4>)
 8002fce:	6193      	str	r3, [r2, #24]
	sprintf((char*)txBuffer, "The default Kc value is now %.2f\r\n", SensorsValues.Kc);
 8002fd0:	4b5d      	ldr	r3, [pc, #372]	@ (8003148 <Save_f+0x2e4>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fac7 	bl	8000568 <__aeabi_f2d>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4960      	ldr	r1, [pc, #384]	@ (8003160 <Save_f+0x2fc>)
 8002fe0:	4849      	ldr	r0, [pc, #292]	@ (8003108 <Save_f+0x2a4>)
 8002fe2:	f009 fb8f 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002fe6:	4848      	ldr	r0, [pc, #288]	@ (8003108 <Save_f+0x2a4>)
 8002fe8:	f7fd f952 	bl	8000290 <strlen>
 8002fec:	4603      	mov	r3, r0
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	2364      	movs	r3, #100	@ 0x64
 8002ff2:	4945      	ldr	r1, [pc, #276]	@ (8003108 <Save_f+0x2a4>)
 8002ff4:	4845      	ldr	r0, [pc, #276]	@ (800310c <Save_f+0x2a8>)
 8002ff6:	f003 ffb3 	bl	8006f60 <HAL_UART_Transmit>

	Old_Default_KP = SensorsValues.Kp;
 8002ffa:	4b53      	ldr	r3, [pc, #332]	@ (8003148 <Save_f+0x2e4>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4a59      	ldr	r2, [pc, #356]	@ (8003164 <Save_f+0x300>)
 8003000:	6013      	str	r3, [r2, #0]
	SensorsValues.Kp = Kp_New_Value;
 8003002:	4b59      	ldr	r3, [pc, #356]	@ (8003168 <Save_f+0x304>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a50      	ldr	r2, [pc, #320]	@ (8003148 <Save_f+0x2e4>)
 8003008:	61d3      	str	r3, [r2, #28]
	sprintf((char*)txBuffer, "The default Kp value is now %.2f\r\n", SensorsValues.Kp);
 800300a:	4b4f      	ldr	r3, [pc, #316]	@ (8003148 <Save_f+0x2e4>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd faaa 	bl	8000568 <__aeabi_f2d>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4954      	ldr	r1, [pc, #336]	@ (800316c <Save_f+0x308>)
 800301a:	483b      	ldr	r0, [pc, #236]	@ (8003108 <Save_f+0x2a4>)
 800301c:	f009 fb72 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003020:	4839      	ldr	r0, [pc, #228]	@ (8003108 <Save_f+0x2a4>)
 8003022:	f7fd f935 	bl	8000290 <strlen>
 8003026:	4603      	mov	r3, r0
 8003028:	b29a      	uxth	r2, r3
 800302a:	2364      	movs	r3, #100	@ 0x64
 800302c:	4936      	ldr	r1, [pc, #216]	@ (8003108 <Save_f+0x2a4>)
 800302e:	4837      	ldr	r0, [pc, #220]	@ (800310c <Save_f+0x2a8>)
 8003030:	f003 ff96 	bl	8006f60 <HAL_UART_Transmit>

	Old_Default_ET0 = SensorsValues.ET0;
 8003034:	4b44      	ldr	r3, [pc, #272]	@ (8003148 <Save_f+0x2e4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a4d      	ldr	r2, [pc, #308]	@ (8003170 <Save_f+0x30c>)
 800303a:	6013      	str	r3, [r2, #0]
	SensorsValues.ET0 = Et0_New_Value;
 800303c:	4b4d      	ldr	r3, [pc, #308]	@ (8003174 <Save_f+0x310>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a41      	ldr	r2, [pc, #260]	@ (8003148 <Save_f+0x2e4>)
 8003042:	6213      	str	r3, [r2, #32]
	sprintf((char*)txBuffer, "The default ET0 value is now %.2f\r\n", SensorsValues.ET0);
 8003044:	4b40      	ldr	r3, [pc, #256]	@ (8003148 <Save_f+0x2e4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa8d 	bl	8000568 <__aeabi_f2d>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4949      	ldr	r1, [pc, #292]	@ (8003178 <Save_f+0x314>)
 8003054:	482c      	ldr	r0, [pc, #176]	@ (8003108 <Save_f+0x2a4>)
 8003056:	f009 fb55 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800305a:	482b      	ldr	r0, [pc, #172]	@ (8003108 <Save_f+0x2a4>)
 800305c:	f7fd f918 	bl	8000290 <strlen>
 8003060:	4603      	mov	r3, r0
 8003062:	b29a      	uxth	r2, r3
 8003064:	2364      	movs	r3, #100	@ 0x64
 8003066:	4928      	ldr	r1, [pc, #160]	@ (8003108 <Save_f+0x2a4>)
 8003068:	4828      	ldr	r0, [pc, #160]	@ (800310c <Save_f+0x2a8>)
 800306a:	f003 ff79 	bl	8006f60 <HAL_UART_Transmit>

	Old_Default_ETC = SensorsValues.ETc;
 800306e:	4b36      	ldr	r3, [pc, #216]	@ (8003148 <Save_f+0x2e4>)
 8003070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003072:	4a42      	ldr	r2, [pc, #264]	@ (800317c <Save_f+0x318>)
 8003074:	6013      	str	r3, [r2, #0]
	SensorsValues.ETc = Etc_New_Value;
 8003076:	4b42      	ldr	r3, [pc, #264]	@ (8003180 <Save_f+0x31c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a33      	ldr	r2, [pc, #204]	@ (8003148 <Save_f+0x2e4>)
 800307c:	6293      	str	r3, [r2, #40]	@ 0x28
	sprintf((char*)txBuffer, "The default ETc value is now %.2f\r\n", SensorsValues.ETc);
 800307e:	4b32      	ldr	r3, [pc, #200]	@ (8003148 <Save_f+0x2e4>)
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fa70 	bl	8000568 <__aeabi_f2d>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	493d      	ldr	r1, [pc, #244]	@ (8003184 <Save_f+0x320>)
 800308e:	481e      	ldr	r0, [pc, #120]	@ (8003108 <Save_f+0x2a4>)
 8003090:	f009 fb38 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003094:	481c      	ldr	r0, [pc, #112]	@ (8003108 <Save_f+0x2a4>)
 8003096:	f7fd f8fb 	bl	8000290 <strlen>
 800309a:	4603      	mov	r3, r0
 800309c:	b29a      	uxth	r2, r3
 800309e:	2364      	movs	r3, #100	@ 0x64
 80030a0:	4919      	ldr	r1, [pc, #100]	@ (8003108 <Save_f+0x2a4>)
 80030a2:	481a      	ldr	r0, [pc, #104]	@ (800310c <Save_f+0x2a8>)
 80030a4:	f003 ff5c 	bl	8006f60 <HAL_UART_Transmit>

	Old_Default_ETCadj = SensorsValues.ETcAdj;
 80030a8:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <Save_f+0x2e4>)
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	4a36      	ldr	r2, [pc, #216]	@ (8003188 <Save_f+0x324>)
 80030ae:	6013      	str	r3, [r2, #0]
	SensorsValues.ETcAdj = EtcAdj_New_Value;
 80030b0:	4b36      	ldr	r3, [pc, #216]	@ (800318c <Save_f+0x328>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a24      	ldr	r2, [pc, #144]	@ (8003148 <Save_f+0x2e4>)
 80030b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	sprintf((char*)txBuffer, "The default ETcAdj value is now %.2f\r\n", SensorsValues.ETcAdj);
 80030b8:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <Save_f+0x2e4>)
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fa53 	bl	8000568 <__aeabi_f2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4932      	ldr	r1, [pc, #200]	@ (8003190 <Save_f+0x32c>)
 80030c8:	480f      	ldr	r0, [pc, #60]	@ (8003108 <Save_f+0x2a4>)
 80030ca:	f009 fb1b 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80030ce:	480e      	ldr	r0, [pc, #56]	@ (8003108 <Save_f+0x2a4>)
 80030d0:	f7fd f8de 	bl	8000290 <strlen>
 80030d4:	4603      	mov	r3, r0
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	2364      	movs	r3, #100	@ 0x64
 80030da:	490b      	ldr	r1, [pc, #44]	@ (8003108 <Save_f+0x2a4>)
 80030dc:	480b      	ldr	r0, [pc, #44]	@ (800310c <Save_f+0x2a8>)
 80030de:	f003 ff3f 	bl	8006f60 <HAL_UART_Transmit>

	Old_Default_Heigh = Height_New_Value;
 80030e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003194 <Save_f+0x330>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003198 <Save_f+0x334>)
 80030e8:	6013      	str	r3, [r2, #0]
	sprintf((char*)txBuffer, "The default Height is now %.2f\r\n", Old_Default_Heigh);
 80030ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003198 <Save_f+0x334>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fa3a 	bl	8000568 <__aeabi_f2d>
 80030f4:	e052      	b.n	800319c <Save_f+0x338>
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000040 	.word	0x20000040
 8003100:	2000096d 	.word	0x2000096d
 8003104:	0801110c 	.word	0x0801110c
 8003108:	2000082c 	.word	0x2000082c
 800310c:	20000cd8 	.word	0x20000cd8
 8003110:	20000041 	.word	0x20000041
 8003114:	20000a25 	.word	0x20000a25
 8003118:	08011130 	.word	0x08011130
 800311c:	20000042 	.word	0x20000042
 8003120:	20000a24 	.word	0x20000a24
 8003124:	08011158 	.word	0x08011158
 8003128:	20000004 	.word	0x20000004
 800312c:	20000a78 	.word	0x20000a78
 8003130:	0801117c 	.word	0x0801117c
 8003134:	20000970 	.word	0x20000970
 8003138:	20000a7c 	.word	0x20000a7c
 800313c:	080111a4 	.word	0x080111a4
 8003140:	20000a74 	.word	0x20000a74
 8003144:	080111cc 	.word	0x080111cc
 8003148:	20000010 	.word	0x20000010
 800314c:	20000a58 	.word	0x20000a58
 8003150:	20000a38 	.word	0x20000a38
 8003154:	080111f0 	.word	0x080111f0
 8003158:	20000a5c 	.word	0x20000a5c
 800315c:	20000a3c 	.word	0x20000a3c
 8003160:	08011214 	.word	0x08011214
 8003164:	20000a60 	.word	0x20000a60
 8003168:	20000a40 	.word	0x20000a40
 800316c:	08011238 	.word	0x08011238
 8003170:	20000a64 	.word	0x20000a64
 8003174:	20000a44 	.word	0x20000a44
 8003178:	0801125c 	.word	0x0801125c
 800317c:	20000a68 	.word	0x20000a68
 8003180:	20000a48 	.word	0x20000a48
 8003184:	08011280 	.word	0x08011280
 8003188:	20000a6c 	.word	0x20000a6c
 800318c:	20000a4c 	.word	0x20000a4c
 8003190:	080112a4 	.word	0x080112a4
 8003194:	20000a54 	.word	0x20000a54
 8003198:	20000a70 	.word	0x20000a70
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4908      	ldr	r1, [pc, #32]	@ (80031c4 <Save_f+0x360>)
 80031a2:	4809      	ldr	r0, [pc, #36]	@ (80031c8 <Save_f+0x364>)
 80031a4:	f009 faae 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80031a8:	4807      	ldr	r0, [pc, #28]	@ (80031c8 <Save_f+0x364>)
 80031aa:	f7fd f871 	bl	8000290 <strlen>
 80031ae:	4603      	mov	r3, r0
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	2364      	movs	r3, #100	@ 0x64
 80031b4:	4904      	ldr	r1, [pc, #16]	@ (80031c8 <Save_f+0x364>)
 80031b6:	4805      	ldr	r0, [pc, #20]	@ (80031cc <Save_f+0x368>)
 80031b8:	f003 fed2 	bl	8006f60 <HAL_UART_Transmit>

}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	080112cc 	.word	0x080112cc
 80031c8:	2000082c 	.word	0x2000082c
 80031cc:	20000cd8 	.word	0x20000cd8

080031d0 <Restore_f>:
void Restore_f(char* arg){
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	//Restoring Lora Values
	LoraValues.sf_l=Old_Default_Sf;
 80031d8:	4b9e      	ldr	r3, [pc, #632]	@ (8003454 <Restore_f+0x284>)
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	4b9e      	ldr	r3, [pc, #632]	@ (8003458 <Restore_f+0x288>)
 80031de:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"SF value restored to %d\r\n",LoraValues.sf_l);
 80031e0:	4b9d      	ldr	r3, [pc, #628]	@ (8003458 <Restore_f+0x288>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	499d      	ldr	r1, [pc, #628]	@ (800345c <Restore_f+0x28c>)
 80031e8:	489d      	ldr	r0, [pc, #628]	@ (8003460 <Restore_f+0x290>)
 80031ea:	f009 fa8b 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80031ee:	489c      	ldr	r0, [pc, #624]	@ (8003460 <Restore_f+0x290>)
 80031f0:	f7fd f84e 	bl	8000290 <strlen>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	2364      	movs	r3, #100	@ 0x64
 80031fa:	4999      	ldr	r1, [pc, #612]	@ (8003460 <Restore_f+0x290>)
 80031fc:	4899      	ldr	r0, [pc, #612]	@ (8003464 <Restore_f+0x294>)
 80031fe:	f003 feaf 	bl	8006f60 <HAL_UART_Transmit>
	LoraValues.bw_l=Old_Default_Bw;
 8003202:	4b99      	ldr	r3, [pc, #612]	@ (8003468 <Restore_f+0x298>)
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	4b94      	ldr	r3, [pc, #592]	@ (8003458 <Restore_f+0x288>)
 8003208:	709a      	strb	r2, [r3, #2]
	sprintf((char*)txBuffer,"BW value restored to %d\r\n",LoraValues.bw_l);
 800320a:	4b93      	ldr	r3, [pc, #588]	@ (8003458 <Restore_f+0x288>)
 800320c:	789b      	ldrb	r3, [r3, #2]
 800320e:	461a      	mov	r2, r3
 8003210:	4996      	ldr	r1, [pc, #600]	@ (800346c <Restore_f+0x29c>)
 8003212:	4893      	ldr	r0, [pc, #588]	@ (8003460 <Restore_f+0x290>)
 8003214:	f009 fa76 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003218:	4891      	ldr	r0, [pc, #580]	@ (8003460 <Restore_f+0x290>)
 800321a:	f7fd f839 	bl	8000290 <strlen>
 800321e:	4603      	mov	r3, r0
 8003220:	b29a      	uxth	r2, r3
 8003222:	2364      	movs	r3, #100	@ 0x64
 8003224:	498e      	ldr	r1, [pc, #568]	@ (8003460 <Restore_f+0x290>)
 8003226:	488f      	ldr	r0, [pc, #572]	@ (8003464 <Restore_f+0x294>)
 8003228:	f003 fe9a 	bl	8006f60 <HAL_UART_Transmit>
	LoraValues.cr_l=Old_Default_Cr;
 800322c:	4b90      	ldr	r3, [pc, #576]	@ (8003470 <Restore_f+0x2a0>)
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	4b89      	ldr	r3, [pc, #548]	@ (8003458 <Restore_f+0x288>)
 8003232:	705a      	strb	r2, [r3, #1]
	sprintf((char*)txBuffer,"CR value restored to %d\r\n",LoraValues.cr_l);
 8003234:	4b88      	ldr	r3, [pc, #544]	@ (8003458 <Restore_f+0x288>)
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	461a      	mov	r2, r3
 800323a:	498e      	ldr	r1, [pc, #568]	@ (8003474 <Restore_f+0x2a4>)
 800323c:	4888      	ldr	r0, [pc, #544]	@ (8003460 <Restore_f+0x290>)
 800323e:	f009 fa61 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8003242:	4887      	ldr	r0, [pc, #540]	@ (8003460 <Restore_f+0x290>)
 8003244:	f7fd f824 	bl	8000290 <strlen>
 8003248:	4603      	mov	r3, r0
 800324a:	b29a      	uxth	r2, r3
 800324c:	2364      	movs	r3, #100	@ 0x64
 800324e:	4984      	ldr	r1, [pc, #528]	@ (8003460 <Restore_f+0x290>)
 8003250:	4884      	ldr	r0, [pc, #528]	@ (8003464 <Restore_f+0x294>)
 8003252:	f003 fe85 	bl	8006f60 <HAL_UART_Transmit>

	//Restoring GPS Values
	MyGps.alt_gps = Old_Default_AltGPS;
 8003256:	4b88      	ldr	r3, [pc, #544]	@ (8003478 <Restore_f+0x2a8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a88      	ldr	r2, [pc, #544]	@ (800347c <Restore_f+0x2ac>)
 800325c:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "GPS ALTITUDE restored to %.2f\r\n",MyGps.alt_gps);
 800325e:	4b87      	ldr	r3, [pc, #540]	@ (800347c <Restore_f+0x2ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f980 	bl	8000568 <__aeabi_f2d>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4984      	ldr	r1, [pc, #528]	@ (8003480 <Restore_f+0x2b0>)
 800326e:	4885      	ldr	r0, [pc, #532]	@ (8003484 <Restore_f+0x2b4>)
 8003270:	f009 fa48 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003274:	4883      	ldr	r0, [pc, #524]	@ (8003484 <Restore_f+0x2b4>)
 8003276:	f7fd f80b 	bl	8000290 <strlen>
 800327a:	4603      	mov	r3, r0
 800327c:	b29a      	uxth	r2, r3
 800327e:	2364      	movs	r3, #100	@ 0x64
 8003280:	4980      	ldr	r1, [pc, #512]	@ (8003484 <Restore_f+0x2b4>)
 8003282:	4878      	ldr	r0, [pc, #480]	@ (8003464 <Restore_f+0x294>)
 8003284:	f003 fe6c 	bl	8006f60 <HAL_UART_Transmit>

	MyGps.lat_gps = Old_Default_LatGPS;
 8003288:	4b7f      	ldr	r3, [pc, #508]	@ (8003488 <Restore_f+0x2b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7b      	ldr	r2, [pc, #492]	@ (800347c <Restore_f+0x2ac>)
 800328e:	6053      	str	r3, [r2, #4]
	sprintf((char*)cmd_buff, "GPS LATITUDE restored to %.2f\r\n",MyGps.lat_gps);
 8003290:	4b7a      	ldr	r3, [pc, #488]	@ (800347c <Restore_f+0x2ac>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f967 	bl	8000568 <__aeabi_f2d>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	497b      	ldr	r1, [pc, #492]	@ (800348c <Restore_f+0x2bc>)
 80032a0:	4878      	ldr	r0, [pc, #480]	@ (8003484 <Restore_f+0x2b4>)
 80032a2:	f009 fa2f 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80032a6:	4877      	ldr	r0, [pc, #476]	@ (8003484 <Restore_f+0x2b4>)
 80032a8:	f7fc fff2 	bl	8000290 <strlen>
 80032ac:	4603      	mov	r3, r0
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	2364      	movs	r3, #100	@ 0x64
 80032b2:	4974      	ldr	r1, [pc, #464]	@ (8003484 <Restore_f+0x2b4>)
 80032b4:	486b      	ldr	r0, [pc, #428]	@ (8003464 <Restore_f+0x294>)
 80032b6:	f003 fe53 	bl	8006f60 <HAL_UART_Transmit>

	MyGps.time_gps = Old_Default_TimeGPS;
 80032ba:	4b75      	ldr	r3, [pc, #468]	@ (8003490 <Restore_f+0x2c0>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c4:	ee17 2a90 	vmov	r2, s15
 80032c8:	4b6c      	ldr	r3, [pc, #432]	@ (800347c <Restore_f+0x2ac>)
 80032ca:	609a      	str	r2, [r3, #8]
	sprintf((char*)cmd_buff, "GPS TIME restored to %lu\r\n",MyGps.time_gps);
 80032cc:	4b6b      	ldr	r3, [pc, #428]	@ (800347c <Restore_f+0x2ac>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4970      	ldr	r1, [pc, #448]	@ (8003494 <Restore_f+0x2c4>)
 80032d4:	486b      	ldr	r0, [pc, #428]	@ (8003484 <Restore_f+0x2b4>)
 80032d6:	f009 fa15 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80032da:	486a      	ldr	r0, [pc, #424]	@ (8003484 <Restore_f+0x2b4>)
 80032dc:	f7fc ffd8 	bl	8000290 <strlen>
 80032e0:	4603      	mov	r3, r0
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	2364      	movs	r3, #100	@ 0x64
 80032e6:	4967      	ldr	r1, [pc, #412]	@ (8003484 <Restore_f+0x2b4>)
 80032e8:	485e      	ldr	r0, [pc, #376]	@ (8003464 <Restore_f+0x294>)
 80032ea:	f003 fe39 	bl	8006f60 <HAL_UART_Transmit>
	//Restoring Sensors Values

	SensorsValues.Radiation_s = Old_Default_Radiation;
 80032ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003498 <Restore_f+0x2c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a6a      	ldr	r2, [pc, #424]	@ (800349c <Restore_f+0x2cc>)
 80032f4:	6253      	str	r3, [r2, #36]	@ 0x24
	sprintf((char*)cmd_buff, "Radiation restored to %.2f\r\n", SensorsValues.Radiation_s);
 80032f6:	4b69      	ldr	r3, [pc, #420]	@ (800349c <Restore_f+0x2cc>)
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd f934 	bl	8000568 <__aeabi_f2d>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4966      	ldr	r1, [pc, #408]	@ (80034a0 <Restore_f+0x2d0>)
 8003306:	485f      	ldr	r0, [pc, #380]	@ (8003484 <Restore_f+0x2b4>)
 8003308:	f009 f9fc 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 800330c:	485d      	ldr	r0, [pc, #372]	@ (8003484 <Restore_f+0x2b4>)
 800330e:	f7fc ffbf 	bl	8000290 <strlen>
 8003312:	4603      	mov	r3, r0
 8003314:	b29a      	uxth	r2, r3
 8003316:	2364      	movs	r3, #100	@ 0x64
 8003318:	495a      	ldr	r1, [pc, #360]	@ (8003484 <Restore_f+0x2b4>)
 800331a:	4852      	ldr	r0, [pc, #328]	@ (8003464 <Restore_f+0x294>)
 800331c:	f003 fe20 	bl	8006f60 <HAL_UART_Transmit>

	SensorsValues.Kc = Old_Default_KC;
 8003320:	4b60      	ldr	r3, [pc, #384]	@ (80034a4 <Restore_f+0x2d4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5d      	ldr	r2, [pc, #372]	@ (800349c <Restore_f+0x2cc>)
 8003326:	6193      	str	r3, [r2, #24]
	sprintf((char*)cmd_buff, "Kc restored to %.2f\r\n", SensorsValues.Kc);
 8003328:	4b5c      	ldr	r3, [pc, #368]	@ (800349c <Restore_f+0x2cc>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd f91b 	bl	8000568 <__aeabi_f2d>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	495c      	ldr	r1, [pc, #368]	@ (80034a8 <Restore_f+0x2d8>)
 8003338:	4852      	ldr	r0, [pc, #328]	@ (8003484 <Restore_f+0x2b4>)
 800333a:	f009 f9e3 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 800333e:	4851      	ldr	r0, [pc, #324]	@ (8003484 <Restore_f+0x2b4>)
 8003340:	f7fc ffa6 	bl	8000290 <strlen>
 8003344:	4603      	mov	r3, r0
 8003346:	b29a      	uxth	r2, r3
 8003348:	2364      	movs	r3, #100	@ 0x64
 800334a:	494e      	ldr	r1, [pc, #312]	@ (8003484 <Restore_f+0x2b4>)
 800334c:	4845      	ldr	r0, [pc, #276]	@ (8003464 <Restore_f+0x294>)
 800334e:	f003 fe07 	bl	8006f60 <HAL_UART_Transmit>

	SensorsValues.Kp = Old_Default_KP;
 8003352:	4b56      	ldr	r3, [pc, #344]	@ (80034ac <Restore_f+0x2dc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a51      	ldr	r2, [pc, #324]	@ (800349c <Restore_f+0x2cc>)
 8003358:	61d3      	str	r3, [r2, #28]
	sprintf((char*)cmd_buff, "Kp restored to %.2f\r\n", SensorsValues.Kp);
 800335a:	4b50      	ldr	r3, [pc, #320]	@ (800349c <Restore_f+0x2cc>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f902 	bl	8000568 <__aeabi_f2d>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4951      	ldr	r1, [pc, #324]	@ (80034b0 <Restore_f+0x2e0>)
 800336a:	4846      	ldr	r0, [pc, #280]	@ (8003484 <Restore_f+0x2b4>)
 800336c:	f009 f9ca 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003370:	4844      	ldr	r0, [pc, #272]	@ (8003484 <Restore_f+0x2b4>)
 8003372:	f7fc ff8d 	bl	8000290 <strlen>
 8003376:	4603      	mov	r3, r0
 8003378:	b29a      	uxth	r2, r3
 800337a:	2364      	movs	r3, #100	@ 0x64
 800337c:	4941      	ldr	r1, [pc, #260]	@ (8003484 <Restore_f+0x2b4>)
 800337e:	4839      	ldr	r0, [pc, #228]	@ (8003464 <Restore_f+0x294>)
 8003380:	f003 fdee 	bl	8006f60 <HAL_UART_Transmit>

	SensorsValues.ET0 = Old_Default_ET0;
 8003384:	4b4b      	ldr	r3, [pc, #300]	@ (80034b4 <Restore_f+0x2e4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a44      	ldr	r2, [pc, #272]	@ (800349c <Restore_f+0x2cc>)
 800338a:	6213      	str	r3, [r2, #32]
	sprintf((char*)cmd_buff, "ET0 restored to %.2f\r\n", SensorsValues.ET0);
 800338c:	4b43      	ldr	r3, [pc, #268]	@ (800349c <Restore_f+0x2cc>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f8e9 	bl	8000568 <__aeabi_f2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4947      	ldr	r1, [pc, #284]	@ (80034b8 <Restore_f+0x2e8>)
 800339c:	4839      	ldr	r0, [pc, #228]	@ (8003484 <Restore_f+0x2b4>)
 800339e:	f009 f9b1 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80033a2:	4838      	ldr	r0, [pc, #224]	@ (8003484 <Restore_f+0x2b4>)
 80033a4:	f7fc ff74 	bl	8000290 <strlen>
 80033a8:	4603      	mov	r3, r0
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	2364      	movs	r3, #100	@ 0x64
 80033ae:	4935      	ldr	r1, [pc, #212]	@ (8003484 <Restore_f+0x2b4>)
 80033b0:	482c      	ldr	r0, [pc, #176]	@ (8003464 <Restore_f+0x294>)
 80033b2:	f003 fdd5 	bl	8006f60 <HAL_UART_Transmit>

	SensorsValues.ETc = Old_Default_ETC;
 80033b6:	4b41      	ldr	r3, [pc, #260]	@ (80034bc <Restore_f+0x2ec>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a38      	ldr	r2, [pc, #224]	@ (800349c <Restore_f+0x2cc>)
 80033bc:	6293      	str	r3, [r2, #40]	@ 0x28
	sprintf((char*)cmd_buff, "ETC restored to %.2f\r\n", SensorsValues.ETc);
 80033be:	4b37      	ldr	r3, [pc, #220]	@ (800349c <Restore_f+0x2cc>)
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f8d0 	bl	8000568 <__aeabi_f2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	493c      	ldr	r1, [pc, #240]	@ (80034c0 <Restore_f+0x2f0>)
 80033ce:	482d      	ldr	r0, [pc, #180]	@ (8003484 <Restore_f+0x2b4>)
 80033d0:	f009 f998 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80033d4:	482b      	ldr	r0, [pc, #172]	@ (8003484 <Restore_f+0x2b4>)
 80033d6:	f7fc ff5b 	bl	8000290 <strlen>
 80033da:	4603      	mov	r3, r0
 80033dc:	b29a      	uxth	r2, r3
 80033de:	2364      	movs	r3, #100	@ 0x64
 80033e0:	4928      	ldr	r1, [pc, #160]	@ (8003484 <Restore_f+0x2b4>)
 80033e2:	4820      	ldr	r0, [pc, #128]	@ (8003464 <Restore_f+0x294>)
 80033e4:	f003 fdbc 	bl	8006f60 <HAL_UART_Transmit>

	SensorsValues.ETcAdj = Old_Default_ETCadj;
 80033e8:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <Restore_f+0x2f4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <Restore_f+0x2cc>)
 80033ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
	sprintf((char*)cmd_buff, "ETC Adjusted restored to %.2f\r\n", SensorsValues.ETcAdj);
 80033f0:	4b2a      	ldr	r3, [pc, #168]	@ (800349c <Restore_f+0x2cc>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd f8b7 	bl	8000568 <__aeabi_f2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4932      	ldr	r1, [pc, #200]	@ (80034c8 <Restore_f+0x2f8>)
 8003400:	4820      	ldr	r0, [pc, #128]	@ (8003484 <Restore_f+0x2b4>)
 8003402:	f009 f97f 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003406:	481f      	ldr	r0, [pc, #124]	@ (8003484 <Restore_f+0x2b4>)
 8003408:	f7fc ff42 	bl	8000290 <strlen>
 800340c:	4603      	mov	r3, r0
 800340e:	b29a      	uxth	r2, r3
 8003410:	2364      	movs	r3, #100	@ 0x64
 8003412:	491c      	ldr	r1, [pc, #112]	@ (8003484 <Restore_f+0x2b4>)
 8003414:	4813      	ldr	r0, [pc, #76]	@ (8003464 <Restore_f+0x294>)
 8003416:	f003 fda3 	bl	8006f60 <HAL_UART_Transmit>

	Height_New_Value = Old_Default_Heigh;
 800341a:	4b2c      	ldr	r3, [pc, #176]	@ (80034cc <Restore_f+0x2fc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <Restore_f+0x300>)
 8003420:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "Height restored to %.2f\r\n", Height_New_Value);
 8003422:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <Restore_f+0x300>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd f89e 	bl	8000568 <__aeabi_f2d>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4928      	ldr	r1, [pc, #160]	@ (80034d4 <Restore_f+0x304>)
 8003432:	4814      	ldr	r0, [pc, #80]	@ (8003484 <Restore_f+0x2b4>)
 8003434:	f009 f966 	bl	800c704 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8003438:	4812      	ldr	r0, [pc, #72]	@ (8003484 <Restore_f+0x2b4>)
 800343a:	f7fc ff29 	bl	8000290 <strlen>
 800343e:	4603      	mov	r3, r0
 8003440:	b29a      	uxth	r2, r3
 8003442:	2364      	movs	r3, #100	@ 0x64
 8003444:	490f      	ldr	r1, [pc, #60]	@ (8003484 <Restore_f+0x2b4>)
 8003446:	4807      	ldr	r0, [pc, #28]	@ (8003464 <Restore_f+0x294>)
 8003448:	f003 fd8a 	bl	8006f60 <HAL_UART_Transmit>

}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000040 	.word	0x20000040
 8003458:	20000000 	.word	0x20000000
 800345c:	080112f0 	.word	0x080112f0
 8003460:	2000082c 	.word	0x2000082c
 8003464:	20000cd8 	.word	0x20000cd8
 8003468:	20000041 	.word	0x20000041
 800346c:	0801130c 	.word	0x0801130c
 8003470:	20000042 	.word	0x20000042
 8003474:	08011328 	.word	0x08011328
 8003478:	20000a78 	.word	0x20000a78
 800347c:	20000004 	.word	0x20000004
 8003480:	08011344 	.word	0x08011344
 8003484:	20000970 	.word	0x20000970
 8003488:	20000a7c 	.word	0x20000a7c
 800348c:	08011364 	.word	0x08011364
 8003490:	20000a74 	.word	0x20000a74
 8003494:	08011384 	.word	0x08011384
 8003498:	20000a58 	.word	0x20000a58
 800349c:	20000010 	.word	0x20000010
 80034a0:	080113a0 	.word	0x080113a0
 80034a4:	20000a5c 	.word	0x20000a5c
 80034a8:	080113c0 	.word	0x080113c0
 80034ac:	20000a60 	.word	0x20000a60
 80034b0:	080113d8 	.word	0x080113d8
 80034b4:	20000a64 	.word	0x20000a64
 80034b8:	080113f0 	.word	0x080113f0
 80034bc:	20000a68 	.word	0x20000a68
 80034c0:	08011408 	.word	0x08011408
 80034c4:	20000a6c 	.word	0x20000a6c
 80034c8:	08011420 	.word	0x08011420
 80034cc:	20000a70 	.word	0x20000a70
 80034d0:	20000a54 	.word	0x20000a54
 80034d4:	08011440 	.word	0x08011440

080034d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034dc:	f000 fd2e 	bl	8003f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034e0:	f000 f816 	bl	8003510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034e4:	f7fd fe36 	bl	8001154 <MX_GPIO_Init>
  MX_DMA_Init();
 80034e8:	f7fd fdaa 	bl	8001040 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80034ec:	f000 fbee 	bl	8003ccc <MX_USART2_UART_Init>
  MX_RTC_Init();
 80034f0:	f000 f93c 	bl	800376c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80034f4:	f000 fbba 	bl	8003c6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Reset_Flag=1;
 80034f8:	4b04      	ldr	r3, [pc, #16]	@ (800350c <main+0x34>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80034fe:	f7fd fdd7 	bl	80010b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003502:	f005 faed 	bl	8008ae0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <main+0x2e>
 800350a:	bf00      	nop
 800350c:	20000a80 	.word	0x20000a80

08003510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b096      	sub	sp, #88	@ 0x58
 8003514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	2244      	movs	r2, #68	@ 0x44
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f009 f983 	bl	800c82a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003524:	463b      	mov	r3, r7
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003532:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003536:	f001 fa69 	bl	8004a0c <HAL_PWREx_ControlVoltageScaling>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003540:	f000 f84c 	bl	80035dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003544:	230a      	movs	r3, #10
 8003546:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800354c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800354e:	2310      	movs	r3, #16
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003552:	2301      	movs	r3, #1
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003556:	2302      	movs	r3, #2
 8003558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800355a:	2302      	movs	r3, #2
 800355c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003562:	230a      	movs	r3, #10
 8003564:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003566:	2307      	movs	r3, #7
 8003568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800356a:	2302      	movs	r3, #2
 800356c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800356e:	2302      	movs	r3, #2
 8003570:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fa9e 	bl	8004ab8 <HAL_RCC_OscConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003582:	f000 f82b 	bl	80035dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003586:	230f      	movs	r3, #15
 8003588:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800358a:	2303      	movs	r3, #3
 800358c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800359a:	463b      	mov	r3, r7
 800359c:	2104      	movs	r1, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fe66 	bl	8005270 <HAL_RCC_ClockConfig>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80035aa:	f000 f817 	bl	80035dc <Error_Handler>
  }
}
 80035ae:	bf00      	nop
 80035b0:	3758      	adds	r7, #88	@ 0x58
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a04      	ldr	r2, [pc, #16]	@ (80035d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80035ca:	f000 fcd7 	bl	8003f7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40001000 	.word	0x40001000

080035dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e0:	b672      	cpsid	i
}
 80035e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <Error_Handler+0x8>

080035e8 <Start_GPS_Task>:
BaseType_t xHigherPriorityTaskWokenGps = pdFALSE;
uint8_t xGpsBytesSent;


void Start_GPS_Task(void const * argument)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	GpsMessageBufferHandle = xMessageBufferCreate(xGpsMessageBufferSizeBytes);
 80035f0:	2364      	movs	r3, #100	@ 0x64
 80035f2:	2201      	movs	r2, #1
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f005 fb8d 	bl	8008d16 <xStreamBufferGenericCreate>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4a11      	ldr	r2, [pc, #68]	@ (8003644 <Start_GPS_Task+0x5c>)
 8003600:	6013      	str	r3, [r2, #0]
	if( GpsMessageBufferHandle != NULL )
 8003602:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <Start_GPS_Task+0x5c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <Start_GPS_Task+0x2e>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 800360a:	2364      	movs	r3, #100	@ 0x64
 800360c:	2222      	movs	r2, #34	@ 0x22
 800360e:	490e      	ldr	r1, [pc, #56]	@ (8003648 <Start_GPS_Task+0x60>)
 8003610:	480e      	ldr	r0, [pc, #56]	@ (800364c <Start_GPS_Task+0x64>)
 8003612:	f003 fca5 	bl	8006f60 <HAL_UART_Transmit>
	}

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8003616:	2264      	movs	r2, #100	@ 0x64
 8003618:	490d      	ldr	r1, [pc, #52]	@ (8003650 <Start_GPS_Task+0x68>)
 800361a:	480e      	ldr	r0, [pc, #56]	@ (8003654 <Start_GPS_Task+0x6c>)
 800361c:	f005 f9f4 	bl	8008a08 <HAL_UARTEx_ReceiveToIdle_DMA>

	for(;;)
	{
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8003620:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <Start_GPS_Task+0x5c>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	2264      	movs	r2, #100	@ 0x64
 800362a:	490b      	ldr	r1, [pc, #44]	@ (8003658 <Start_GPS_Task+0x70>)
 800362c:	f005 fcb5 	bl	8008f9a <xStreamBufferReceive>
		Sentence_parse((char*)received_nmea);
 8003630:	4809      	ldr	r0, [pc, #36]	@ (8003658 <Start_GPS_Task+0x70>)
 8003632:	f000 f877 	bl	8003724 <Sentence_parse>
		memset(received_nmea,0,sizeof(received_nmea));
 8003636:	2264      	movs	r2, #100	@ 0x64
 8003638:	2100      	movs	r1, #0
 800363a:	4807      	ldr	r0, [pc, #28]	@ (8003658 <Start_GPS_Task+0x70>)
 800363c:	f009 f8f5 	bl	800c82a <memset>
		xMessageBufferReceive( GpsMessageBufferHandle, received_nmea, sizeof(received_nmea), portMAX_DELAY);
 8003640:	bf00      	nop
 8003642:	e7ed      	b.n	8003620 <Start_GPS_Task+0x38>
 8003644:	20000aec 	.word	0x20000aec
 8003648:	0801145c 	.word	0x0801145c
 800364c:	20000cd8 	.word	0x20000cd8
 8003650:	20000a84 	.word	0x20000a84
 8003654:	20000c50 	.word	0x20000c50
 8003658:	20000b58 	.word	0x20000b58

0800365c <HAL_UARTEx_RxEventCallback>:

	}
}
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_UARTEx_RxEventCallback+0x9c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d13d      	bne.n	80036ee <HAL_UARTEx_RxEventCallback+0x92>
		RxDataLen = Size;
 8003672:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_UARTEx_RxEventCallback+0xa0>)
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	8013      	strh	r3, [r2, #0]
		RxIdx=RxDataLen;
 8003678:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_UARTEx_RxEventCallback+0xa0>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <HAL_UARTEx_RxEventCallback+0xa4>)
 8003680:	701a      	strb	r2, [r3, #0]
		UART1_RxBuffer[Size] = '\0';
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	4a1f      	ldr	r2, [pc, #124]	@ (8003704 <HAL_UARTEx_RxEventCallback+0xa8>)
 8003686:	2100      	movs	r1, #0
 8003688:	54d1      	strb	r1, [r2, r3]
		memcpy(NMEA_ToParse,UART1_RxBuffer,RxIdx);
 800368a:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <HAL_UARTEx_RxEventCallback+0xa4>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	491c      	ldr	r1, [pc, #112]	@ (8003704 <HAL_UARTEx_RxEventCallback+0xa8>)
 8003692:	481d      	ldr	r0, [pc, #116]	@ (8003708 <HAL_UARTEx_RxEventCallback+0xac>)
 8003694:	f009 fa15 	bl	800cac2 <memcpy>
		xGpsBytesSent=xMessageBufferSendFromISR(GpsMessageBufferHandle,NMEA_ToParse,strlen((char*)NMEA_ToParse),&xHigherPriorityTaskWokenGps);
 8003698:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <HAL_UARTEx_RxEventCallback+0xb0>)
 800369a:	681c      	ldr	r4, [r3, #0]
 800369c:	481a      	ldr	r0, [pc, #104]	@ (8003708 <HAL_UARTEx_RxEventCallback+0xac>)
 800369e:	f7fc fdf7 	bl	8000290 <strlen>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003710 <HAL_UARTEx_RxEventCallback+0xb4>)
 80036a6:	4918      	ldr	r1, [pc, #96]	@ (8003708 <HAL_UARTEx_RxEventCallback+0xac>)
 80036a8:	4620      	mov	r0, r4
 80036aa:	f005 fbc6 	bl	8008e3a <xStreamBufferSendFromISR>
 80036ae:	4603      	mov	r3, r0
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <HAL_UARTEx_RxEventCallback+0xb8>)
 80036b4:	701a      	strb	r2, [r3, #0]
		if( xGpsBytesSent != strlen((char*)NMEA_ToParse))
 80036b6:	4b17      	ldr	r3, [pc, #92]	@ (8003714 <HAL_UARTEx_RxEventCallback+0xb8>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	461c      	mov	r4, r3
 80036bc:	4812      	ldr	r0, [pc, #72]	@ (8003708 <HAL_UARTEx_RxEventCallback+0xac>)
 80036be:	f7fc fde7 	bl	8000290 <strlen>
 80036c2:	4603      	mov	r3, r0
 80036c4:	429c      	cmp	r4, r3
 80036c6:	d005      	beq.n	80036d4 <HAL_UARTEx_RxEventCallback+0x78>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"GPS Message sent different from buffer data\r\n",strlen("GPS Message sent different from buffer data\r\n"),100);
 80036c8:	2364      	movs	r3, #100	@ 0x64
 80036ca:	222d      	movs	r2, #45	@ 0x2d
 80036cc:	4912      	ldr	r1, [pc, #72]	@ (8003718 <HAL_UARTEx_RxEventCallback+0xbc>)
 80036ce:	4813      	ldr	r0, [pc, #76]	@ (800371c <HAL_UARTEx_RxEventCallback+0xc0>)
 80036d0:	f003 fc46 	bl	8006f60 <HAL_UART_Transmit>
		}
		memset(UART1_RxBuffer,0,UART_RX_BUFFER_SIZE);
 80036d4:	2264      	movs	r2, #100	@ 0x64
 80036d6:	2100      	movs	r1, #0
 80036d8:	480a      	ldr	r0, [pc, #40]	@ (8003704 <HAL_UARTEx_RxEventCallback+0xa8>)
 80036da:	f009 f8a6 	bl	800c82a <memset>
		RxIdx = 0;
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <HAL_UARTEx_RxEventCallback+0xa4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 80036e4:	2264      	movs	r2, #100	@ 0x64
 80036e6:	4907      	ldr	r1, [pc, #28]	@ (8003704 <HAL_UARTEx_RxEventCallback+0xa8>)
 80036e8:	480d      	ldr	r0, [pc, #52]	@ (8003720 <HAL_UARTEx_RxEventCallback+0xc4>)
 80036ea:	f005 f98d 	bl	8008a08 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd90      	pop	{r4, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40013800 	.word	0x40013800
 80036fc:	20000ae8 	.word	0x20000ae8
 8003700:	20000af0 	.word	0x20000af0
 8003704:	20000a84 	.word	0x20000a84
 8003708:	20000af4 	.word	0x20000af4
 800370c:	20000aec 	.word	0x20000aec
 8003710:	20000bbc 	.word	0x20000bbc
 8003714:	20000bc0 	.word	0x20000bc0
 8003718:	08011480 	.word	0x08011480
 800371c:	20000cd8 	.word	0x20000cd8
 8003720:	20000c50 	.word	0x20000c50

08003724 <Sentence_parse>:
void Sentence_parse(char *sentence)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	sentence= strtok((char*)received_nmea, "\r\n");
 800372c:	490d      	ldr	r1, [pc, #52]	@ (8003764 <Sentence_parse+0x40>)
 800372e:	480e      	ldr	r0, [pc, #56]	@ (8003768 <Sentence_parse+0x44>)
 8003730:	f009 f896 	bl	800c860 <strtok>
 8003734:	6078      	str	r0, [r7, #4]
	while (sentence != NULL) {
 8003736:	e00d      	b.n	8003754 <Sentence_parse+0x30>
	        if (GPS_validate(sentence)) {
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fd fd71 	bl	8001220 <GPS_validate>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <Sentence_parse+0x26>
	            GPS_parse(sentence);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fd fdcd 	bl	80012e4 <GPS_parse>
	        }
	        sentence = strtok(NULL, "\r\n");
 800374a:	4906      	ldr	r1, [pc, #24]	@ (8003764 <Sentence_parse+0x40>)
 800374c:	2000      	movs	r0, #0
 800374e:	f009 f887 	bl	800c860 <strtok>
 8003752:	6078      	str	r0, [r7, #4]
	while (sentence != NULL) {
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ee      	bne.n	8003738 <Sentence_parse+0x14>
	    }

}
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	080114b0 	.word	0x080114b0
 8003768:	20000b58 	.word	0x20000b58

0800376c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b092      	sub	sp, #72	@ 0x48
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003772:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	60da      	str	r2, [r3, #12]
 8003780:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003782:	2300      	movs	r3, #0
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	222c      	movs	r2, #44	@ 0x2c
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f009 f84c 	bl	800c82a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003792:	4b3c      	ldr	r3, [pc, #240]	@ (8003884 <MX_RTC_Init+0x118>)
 8003794:	4a3c      	ldr	r2, [pc, #240]	@ (8003888 <MX_RTC_Init+0x11c>)
 8003796:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003798:	4b3a      	ldr	r3, [pc, #232]	@ (8003884 <MX_RTC_Init+0x118>)
 800379a:	2200      	movs	r2, #0
 800379c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800379e:	4b39      	ldr	r3, [pc, #228]	@ (8003884 <MX_RTC_Init+0x118>)
 80037a0:	227f      	movs	r2, #127	@ 0x7f
 80037a2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80037a4:	4b37      	ldr	r3, [pc, #220]	@ (8003884 <MX_RTC_Init+0x118>)
 80037a6:	22ff      	movs	r2, #255	@ 0xff
 80037a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037aa:	4b36      	ldr	r3, [pc, #216]	@ (8003884 <MX_RTC_Init+0x118>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037b0:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <MX_RTC_Init+0x118>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037b6:	4b33      	ldr	r3, [pc, #204]	@ (8003884 <MX_RTC_Init+0x118>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037bc:	4b31      	ldr	r3, [pc, #196]	@ (8003884 <MX_RTC_Init+0x118>)
 80037be:	2200      	movs	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037c2:	4830      	ldr	r0, [pc, #192]	@ (8003884 <MX_RTC_Init+0x118>)
 80037c4:	f002 fc66 	bl	8006094 <HAL_RTC_Init>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80037ce:	f7ff ff05 	bl	80035dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 80037d2:	2310      	movs	r3, #16
 80037d4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 27;
 80037d8:	231b      	movs	r3, #27
 80037da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 30;
 80037de:	231e      	movs	r3, #30
 80037e0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80037ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037f0:	2200      	movs	r2, #0
 80037f2:	4619      	mov	r1, r3
 80037f4:	4823      	ldr	r0, [pc, #140]	@ (8003884 <MX_RTC_Init+0x118>)
 80037f6:	f002 fcd5 	bl	80061a4 <HAL_RTC_SetTime>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8003800:	f7ff feec 	bl	80035dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003804:	2302      	movs	r3, #2
 8003806:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JUNE;
 800380a:	2306      	movs	r3, #6
 800380c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 3;
 8003810:	2303      	movs	r3, #3
 8003812:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 25;
 8003816:	2319      	movs	r3, #25
 8003818:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800381c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003820:	2200      	movs	r2, #0
 8003822:	4619      	mov	r1, r3
 8003824:	4817      	ldr	r0, [pc, #92]	@ (8003884 <MX_RTC_Init+0x118>)
 8003826:	f002 fdb6 	bl	8006396 <HAL_RTC_SetDate>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8003830:	f7ff fed4 	bl	80035dc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800385e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	2200      	movs	r2, #0
 8003868:	4619      	mov	r1, r3
 800386a:	4806      	ldr	r0, [pc, #24]	@ (8003884 <MX_RTC_Init+0x118>)
 800386c:	f002 fe67 	bl	800653e <HAL_RTC_SetAlarm>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8003876:	f7ff feb1 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800387a:	bf00      	nop
 800387c:	3748      	adds	r7, #72	@ 0x48
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000bdc 	.word	0x20000bdc
 8003888:	40002800 	.word	0x40002800

0800388c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b0a4      	sub	sp, #144	@ 0x90
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003894:	f107 0308 	add.w	r3, r7, #8
 8003898:	2288      	movs	r2, #136	@ 0x88
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f008 ffc4 	bl	800c82a <memset>
  if(rtcHandle->Instance==RTC)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <HAL_RTC_MspInit+0x5c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d118      	bne.n	80038de <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038b0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 ff2c 	bl	800571c <HAL_RCCEx_PeriphCLKConfig>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80038ca:	f7ff fe87 	bl	80035dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038ce:	4b07      	ldr	r3, [pc, #28]	@ (80038ec <HAL_RTC_MspInit+0x60>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d4:	4a05      	ldr	r2, [pc, #20]	@ (80038ec <HAL_RTC_MspInit+0x60>)
 80038d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80038de:	bf00      	nop
 80038e0:	3790      	adds	r7, #144	@ 0x90
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40002800 	.word	0x40002800
 80038ec:	40021000 	.word	0x40021000

080038f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_MspInit+0x4c>)
 80038f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fa:	4a10      	ldr	r2, [pc, #64]	@ (800393c <HAL_MspInit+0x4c>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6613      	str	r3, [r2, #96]	@ 0x60
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <HAL_MspInit+0x4c>)
 8003904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_MspInit+0x4c>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <HAL_MspInit+0x4c>)
 8003914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003918:	6593      	str	r3, [r2, #88]	@ 0x58
 800391a:	4b08      	ldr	r3, [pc, #32]	@ (800393c <HAL_MspInit+0x4c>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	210f      	movs	r1, #15
 800392a:	f06f 0001 	mvn.w	r0, #1
 800392e:	f000 fbfd 	bl	800412c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000

08003940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08e      	sub	sp, #56	@ 0x38
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800394e:	4b34      	ldr	r3, [pc, #208]	@ (8003a20 <HAL_InitTick+0xe0>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	4a33      	ldr	r2, [pc, #204]	@ (8003a20 <HAL_InitTick+0xe0>)
 8003954:	f043 0310 	orr.w	r3, r3, #16
 8003958:	6593      	str	r3, [r2, #88]	@ 0x58
 800395a:	4b31      	ldr	r3, [pc, #196]	@ (8003a20 <HAL_InitTick+0xe0>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003966:	f107 0210 	add.w	r2, r7, #16
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f001 fe41 	bl	80055f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800397a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003980:	f001 fe0e 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8003984:	6378      	str	r0, [r7, #52]	@ 0x34
 8003986:	e004      	b.n	8003992 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003988:	f001 fe0a 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 800398c:	4603      	mov	r3, r0
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003994:	4a23      	ldr	r2, [pc, #140]	@ (8003a24 <HAL_InitTick+0xe4>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	3b01      	subs	r3, #1
 800399e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80039a0:	4b21      	ldr	r3, [pc, #132]	@ (8003a28 <HAL_InitTick+0xe8>)
 80039a2:	4a22      	ldr	r2, [pc, #136]	@ (8003a2c <HAL_InitTick+0xec>)
 80039a4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80039a6:	4b20      	ldr	r3, [pc, #128]	@ (8003a28 <HAL_InitTick+0xe8>)
 80039a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80039ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003a28 <HAL_InitTick+0xe8>)
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80039b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a28 <HAL_InitTick+0xe8>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003a28 <HAL_InitTick+0xe8>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c0:	4b19      	ldr	r3, [pc, #100]	@ (8003a28 <HAL_InitTick+0xe8>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80039c6:	4818      	ldr	r0, [pc, #96]	@ (8003a28 <HAL_InitTick+0xe8>)
 80039c8:	f002 ffb6 	bl	8006938 <HAL_TIM_Base_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80039d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11b      	bne.n	8003a12 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80039da:	4813      	ldr	r0, [pc, #76]	@ (8003a28 <HAL_InitTick+0xe8>)
 80039dc:	f003 f80e 	bl	80069fc <HAL_TIM_Base_Start_IT>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80039e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d111      	bne.n	8003a12 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039ee:	2036      	movs	r0, #54	@ 0x36
 80039f0:	f000 fbb8 	bl	8004164 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	d808      	bhi.n	8003a0c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80039fa:	2200      	movs	r2, #0
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	2036      	movs	r0, #54	@ 0x36
 8003a00:	f000 fb94 	bl	800412c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a04:	4a0a      	ldr	r2, [pc, #40]	@ (8003a30 <HAL_InitTick+0xf0>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e002      	b.n	8003a12 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3738      	adds	r7, #56	@ 0x38
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	431bde83 	.word	0x431bde83
 8003a28:	20000c00 	.word	0x20000c00
 8003a2c:	40001000 	.word	0x40001000
 8003a30:	200002ac 	.word	0x200002ac

08003a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a38:	bf00      	nop
 8003a3a:	e7fd      	b.n	8003a38 <NMI_Handler+0x4>

08003a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <HardFault_Handler+0x4>

08003a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <MemManage_Handler+0x4>

08003a4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <BusFault_Handler+0x4>

08003a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <UsageFault_Handler+0x4>

08003a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003a70:	4802      	ldr	r0, [pc, #8]	@ (8003a7c <DMA1_Channel5_IRQHandler+0x10>)
 8003a72:	f000 fd1c 	bl	80044ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000d60 	.word	0x20000d60

08003a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a84:	4802      	ldr	r0, [pc, #8]	@ (8003a90 <USART1_IRQHandler+0x10>)
 8003a86:	f003 fb41 	bl	800710c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000c50 	.word	0x20000c50

08003a94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a98:	4802      	ldr	r0, [pc, #8]	@ (8003aa4 <USART2_IRQHandler+0x10>)
 8003a9a:	f003 fb37 	bl	800710c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



  /* USER CODE END USART2_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000cd8 	.word	0x20000cd8

08003aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003aac:	4802      	ldr	r0, [pc, #8]	@ (8003ab8 <TIM6_DAC_IRQHandler+0x10>)
 8003aae:	f003 f815 	bl	8006adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000c00 	.word	0x20000c00

08003abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return 1;
 8003ac0:	2301      	movs	r3, #1
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <_kill>:

int _kill(int pid, int sig)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ad6:	f008 ffc7 	bl	800ca68 <__errno>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2216      	movs	r2, #22
 8003ade:	601a      	str	r2, [r3, #0]
  return -1;
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <_exit>:

void _exit (int status)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003af4:	f04f 31ff 	mov.w	r1, #4294967295
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ffe7 	bl	8003acc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <_exit+0x12>

08003b02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e00a      	b.n	8003b2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b14:	f3af 8000 	nop.w
 8003b18:	4601      	mov	r1, r0
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	60ba      	str	r2, [r7, #8]
 8003b20:	b2ca      	uxtb	r2, r1
 8003b22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3301      	adds	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	dbf0      	blt.n	8003b14 <_read+0x12>
  }

  return len;
 8003b32:	687b      	ldr	r3, [r7, #4]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e009      	b.n	8003b62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	60ba      	str	r2, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	dbf1      	blt.n	8003b4e <_write+0x12>
  }
  return len;
 8003b6a:	687b      	ldr	r3, [r7, #4]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_close>:

int _close(int file)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b9c:	605a      	str	r2, [r3, #4]
  return 0;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <_isatty>:

int _isatty(int file)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bb4:	2301      	movs	r3, #1
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003be4:	4a14      	ldr	r2, [pc, #80]	@ (8003c38 <_sbrk+0x5c>)
 8003be6:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <_sbrk+0x60>)
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bf0:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <_sbrk+0x64>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bf8:	4b11      	ldr	r3, [pc, #68]	@ (8003c40 <_sbrk+0x64>)
 8003bfa:	4a12      	ldr	r2, [pc, #72]	@ (8003c44 <_sbrk+0x68>)
 8003bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <_sbrk+0x64>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d207      	bcs.n	8003c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c0c:	f008 ff2c 	bl	800ca68 <__errno>
 8003c10:	4603      	mov	r3, r0
 8003c12:	220c      	movs	r2, #12
 8003c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	e009      	b.n	8003c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c1c:	4b08      	ldr	r3, [pc, #32]	@ (8003c40 <_sbrk+0x64>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c22:	4b07      	ldr	r3, [pc, #28]	@ (8003c40 <_sbrk+0x64>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	4a05      	ldr	r2, [pc, #20]	@ (8003c40 <_sbrk+0x64>)
 8003c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20018000 	.word	0x20018000
 8003c3c:	00000400 	.word	0x00000400
 8003c40:	20000c4c 	.word	0x20000c4c
 8003c44:	20005e70 	.word	0x20005e70

08003c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <SystemInit+0x20>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	4a05      	ldr	r2, [pc, #20]	@ (8003c68 <SystemInit+0x20>)
 8003c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c70:	4b14      	ldr	r3, [pc, #80]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003c72:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <MX_USART1_UART_Init+0x5c>)
 8003c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003c76:	4b13      	ldr	r3, [pc, #76]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003c78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c7e:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c84:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8003c90:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003c92:	2204      	movs	r2, #4
 8003c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c96:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ca2:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cae:	4805      	ldr	r0, [pc, #20]	@ (8003cc4 <MX_USART1_UART_Init+0x58>)
 8003cb0:	f003 f908 	bl	8006ec4 <HAL_UART_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003cba:	f7ff fc8f 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000c50 	.word	0x20000c50
 8003cc8:	40013800 	.word	0x40013800

08003ccc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cd0:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003cd2:	4a15      	ldr	r2, [pc, #84]	@ (8003d28 <MX_USART2_UART_Init+0x5c>)
 8003cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003cd6:	4b13      	ldr	r3, [pc, #76]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003cd8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cde:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cea:	4b0e      	ldr	r3, [pc, #56]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003cf2:	220c      	movs	r2, #12
 8003cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cfc:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d02:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d0e:	4805      	ldr	r0, [pc, #20]	@ (8003d24 <MX_USART2_UART_Init+0x58>)
 8003d10:	f003 f8d8 	bl	8006ec4 <HAL_UART_Init>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003d1a:	f7ff fc5f 	bl	80035dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000cd8 	.word	0x20000cd8
 8003d28:	40004400 	.word	0x40004400

08003d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b0ae      	sub	sp, #184	@ 0xb8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d44:	f107 031c 	add.w	r3, r7, #28
 8003d48:	2288      	movs	r2, #136	@ 0x88
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f008 fd6c 	bl	800c82a <memset>
  if(uartHandle->Instance==USART1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5f      	ldr	r2, [pc, #380]	@ (8003ed4 <HAL_UART_MspInit+0x1a8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d16e      	bne.n	8003e3a <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d60:	2300      	movs	r3, #0
 8003d62:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d64:	f107 031c 	add.w	r3, r7, #28
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fcd7 	bl	800571c <HAL_RCCEx_PeriphCLKConfig>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d74:	f7ff fc32 	bl	80035dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d78:	4b57      	ldr	r3, [pc, #348]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	4a56      	ldr	r2, [pc, #344]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d82:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d84:	4b54      	ldr	r3, [pc, #336]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d90:	4b51      	ldr	r3, [pc, #324]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d94:	4a50      	ldr	r2, [pc, #320]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003da8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db0:	2302      	movs	r3, #2
 8003db2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dc2:	2307      	movs	r3, #7
 8003dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dd2:	f000 fc4b 	bl	800466c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003dd6:	4b41      	ldr	r3, [pc, #260]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003dd8:	4a41      	ldr	r2, [pc, #260]	@ (8003ee0 <HAL_UART_MspInit+0x1b4>)
 8003dda:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8003ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003dde:	2202      	movs	r2, #2
 8003de0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003de2:	4b3e      	ldr	r3, [pc, #248]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003de8:	4b3c      	ldr	r3, [pc, #240]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dee:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003df0:	2280      	movs	r2, #128	@ 0x80
 8003df2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003df4:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dfa:	4b38      	ldr	r3, [pc, #224]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003e00:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003e02:	2220      	movs	r2, #32
 8003e04:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e06:	4b35      	ldr	r3, [pc, #212]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003e0c:	4833      	ldr	r0, [pc, #204]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003e0e:	f000 f9b7 	bl	8004180 <HAL_DMA_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003e18:	f7ff fbe0 	bl	80035dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003e20:	675a      	str	r2, [r3, #116]	@ 0x74
 8003e22:	4a2e      	ldr	r2, [pc, #184]	@ (8003edc <HAL_UART_MspInit+0x1b0>)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2105      	movs	r1, #5
 8003e2c:	2025      	movs	r0, #37	@ 0x25
 8003e2e:	f000 f97d 	bl	800412c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e32:	2025      	movs	r0, #37	@ 0x25
 8003e34:	f000 f996 	bl	8004164 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e38:	e048      	b.n	8003ecc <HAL_UART_MspInit+0x1a0>
  else if(uartHandle->Instance==USART2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ee4 <HAL_UART_MspInit+0x1b8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d143      	bne.n	8003ecc <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e44:	2302      	movs	r3, #2
 8003e46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e4c:	f107 031c 	add.w	r3, r7, #28
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 fc63 	bl	800571c <HAL_RCCEx_PeriphCLKConfig>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8003e5c:	f7ff fbbe 	bl	80035dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e60:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e78:	4b17      	ldr	r3, [pc, #92]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7c:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e84:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <HAL_UART_MspInit+0x1ac>)
 8003e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e90:	230c      	movs	r3, #12
 8003e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e96:	2302      	movs	r3, #2
 8003e98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003eb8:	f000 fbd8 	bl	800466c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2105      	movs	r1, #5
 8003ec0:	2026      	movs	r0, #38	@ 0x26
 8003ec2:	f000 f933 	bl	800412c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ec6:	2026      	movs	r0, #38	@ 0x26
 8003ec8:	f000 f94c 	bl	8004164 <HAL_NVIC_EnableIRQ>
}
 8003ecc:	bf00      	nop
 8003ece:	37b8      	adds	r7, #184	@ 0xb8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40013800 	.word	0x40013800
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	20000d60 	.word	0x20000d60
 8003ee0:	40020058 	.word	0x40020058
 8003ee4:	40004400 	.word	0x40004400

08003ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003eec:	f7ff feac 	bl	8003c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef0:	480c      	ldr	r0, [pc, #48]	@ (8003f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ef2:	490d      	ldr	r1, [pc, #52]	@ (8003f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8003f2c <LoopForever+0xe>)
  movs r3, #0
 8003ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ef8:	e002      	b.n	8003f00 <LoopCopyDataInit>

08003efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003efe:	3304      	adds	r3, #4

08003f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f04:	d3f9      	bcc.n	8003efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f06:	4a0a      	ldr	r2, [pc, #40]	@ (8003f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f08:	4c0a      	ldr	r4, [pc, #40]	@ (8003f34 <LoopForever+0x16>)
  movs r3, #0
 8003f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f0c:	e001      	b.n	8003f12 <LoopFillZerobss>

08003f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f10:	3204      	adds	r2, #4

08003f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f14:	d3fb      	bcc.n	8003f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f16:	f008 fdad 	bl	800ca74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f1a:	f7ff fadd 	bl	80034d8 <main>

08003f1e <LoopForever>:

LoopForever:
    b LoopForever
 8003f1e:	e7fe      	b.n	8003f1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f28:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 8003f2c:	080119c0 	.word	0x080119c0
  ldr r2, =_sbss
 8003f30:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 8003f34:	20005e6c 	.word	0x20005e6c

08003f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f38:	e7fe      	b.n	8003f38 <ADC1_2_IRQHandler>
	...

08003f3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f46:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <HAL_Init+0x3c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003f78 <HAL_Init+0x3c>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f52:	2003      	movs	r0, #3
 8003f54:	f000 f8df 	bl	8004116 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f58:	200f      	movs	r0, #15
 8003f5a:	f7ff fcf1 	bl	8003940 <HAL_InitTick>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	71fb      	strb	r3, [r7, #7]
 8003f68:	e001      	b.n	8003f6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f6a:	f7ff fcc1 	bl	80038f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40022000 	.word	0x40022000

08003f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <HAL_IncTick+0x20>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <HAL_IncTick+0x24>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4a04      	ldr	r2, [pc, #16]	@ (8003fa0 <HAL_IncTick+0x24>)
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	200002b0 	.word	0x200002b0
 8003fa0:	20000da8 	.word	0x20000da8

08003fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	@ (8003fb8 <HAL_GetTick+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000da8 	.word	0x20000da8

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fee:	4a04      	ldr	r2, [pc, #16]	@ (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	60d3      	str	r3, [r2, #12]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	@ (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	@ (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	@ (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	@ (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	@ 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	@ 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff4c 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800413e:	f7ff ff61 	bl	8004004 <__NVIC_GetPriorityGrouping>
 8004142:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f7ff ffb1 	bl	80040b0 <NVIC_EncodePriority>
 800414e:	4602      	mov	r2, r0
 8004150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff80 	bl	800405c <__NVIC_SetPriority>
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff54 	bl	8004020 <__NVIC_EnableIRQ>
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e098      	b.n	80042c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b4d      	ldr	r3, [pc, #308]	@ (80042d0 <HAL_DMA_Init+0x150>)
 800419a:	429a      	cmp	r2, r3
 800419c:	d80f      	bhi.n	80041be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_DMA_Init+0x154>)
 80041a6:	4413      	add	r3, r2
 80041a8:	4a4b      	ldr	r2, [pc, #300]	@ (80042d8 <HAL_DMA_Init+0x158>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	009a      	lsls	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a48      	ldr	r2, [pc, #288]	@ (80042dc <HAL_DMA_Init+0x15c>)
 80041ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80041bc:	e00e      	b.n	80041dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b46      	ldr	r3, [pc, #280]	@ (80042e0 <HAL_DMA_Init+0x160>)
 80041c6:	4413      	add	r3, r2
 80041c8:	4a43      	ldr	r2, [pc, #268]	@ (80042d8 <HAL_DMA_Init+0x158>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a42      	ldr	r2, [pc, #264]	@ (80042e4 <HAL_DMA_Init+0x164>)
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800420c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004236:	d039      	beq.n	80042ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <HAL_DMA_Init+0x15c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d11a      	bne.n	8004278 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004242:	4b29      	ldr	r3, [pc, #164]	@ (80042e8 <HAL_DMA_Init+0x168>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f003 031c 	and.w	r3, r3, #28
 800424e:	210f      	movs	r1, #15
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	4924      	ldr	r1, [pc, #144]	@ (80042e8 <HAL_DMA_Init+0x168>)
 8004258:	4013      	ands	r3, r2
 800425a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800425c:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <HAL_DMA_Init+0x168>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f003 031c 	and.w	r3, r3, #28
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	491d      	ldr	r1, [pc, #116]	@ (80042e8 <HAL_DMA_Init+0x168>)
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
 8004276:	e019      	b.n	80042ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004278:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <HAL_DMA_Init+0x16c>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004280:	f003 031c 	and.w	r3, r3, #28
 8004284:	210f      	movs	r1, #15
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	4917      	ldr	r1, [pc, #92]	@ (80042ec <HAL_DMA_Init+0x16c>)
 800428e:	4013      	ands	r3, r2
 8004290:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004292:	4b16      	ldr	r3, [pc, #88]	@ (80042ec <HAL_DMA_Init+0x16c>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6859      	ldr	r1, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f003 031c 	and.w	r3, r3, #28
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	4911      	ldr	r1, [pc, #68]	@ (80042ec <HAL_DMA_Init+0x16c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40020407 	.word	0x40020407
 80042d4:	bffdfff8 	.word	0xbffdfff8
 80042d8:	cccccccd 	.word	0xcccccccd
 80042dc:	40020000 	.word	0x40020000
 80042e0:	bffdfbf8 	.word	0xbffdfbf8
 80042e4:	40020400 	.word	0x40020400
 80042e8:	400200a8 	.word	0x400200a8
 80042ec:	400204a8 	.word	0x400204a8

080042f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_DMA_Start_IT+0x20>
 800430c:	2302      	movs	r3, #2
 800430e:	e04b      	b.n	80043a8 <HAL_DMA_Start_IT+0xb8>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d13a      	bne.n	800439a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f95f 	bl	800460c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 020e 	orr.w	r2, r2, #14
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e00f      	b.n	8004388 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0204 	bic.w	r2, r2, #4
 8004376:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 020a 	orr.w	r2, r2, #10
 8004386:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e005      	b.n	80043a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
 80043a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d008      	beq.n	80043da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2204      	movs	r2, #4
 80043cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e022      	b.n	8004420 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 020e 	bic.w	r2, r2, #14
 80043e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f003 021c 	and.w	r2, r3, #28
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	2101      	movs	r1, #1
 8004408:	fa01 f202 	lsl.w	r2, r1, r2
 800440c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d005      	beq.n	8004450 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2204      	movs	r2, #4
 8004448:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e029      	b.n	80044a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 020e 	bic.w	r2, r2, #14
 800445e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004474:	f003 021c 	and.w	r2, r3, #28
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	2101      	movs	r1, #1
 800447e:	fa01 f202 	lsl.w	r2, r1, r2
 8004482:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
    }
  }
  return status;
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	f003 031c 	and.w	r3, r3, #28
 80044ce:	2204      	movs	r2, #4
 80044d0:	409a      	lsls	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d026      	beq.n	8004528 <HAL_DMA_IRQHandler+0x7a>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d021      	beq.n	8004528 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0204 	bic.w	r2, r2, #4
 8004500:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004506:	f003 021c 	and.w	r2, r3, #28
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	2104      	movs	r1, #4
 8004510:	fa01 f202 	lsl.w	r2, r1, r2
 8004514:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	2b00      	cmp	r3, #0
 800451c:	d071      	beq.n	8004602 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004526:	e06c      	b.n	8004602 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	f003 031c 	and.w	r3, r3, #28
 8004530:	2202      	movs	r2, #2
 8004532:	409a      	lsls	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02e      	beq.n	800459a <HAL_DMA_IRQHandler+0xec>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d029      	beq.n	800459a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 020a 	bic.w	r2, r2, #10
 8004562:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004570:	f003 021c 	and.w	r2, r3, #28
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	2102      	movs	r1, #2
 800457a:	fa01 f202 	lsl.w	r2, r1, r2
 800457e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d038      	beq.n	8004602 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004598:	e033      	b.n	8004602 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	f003 031c 	and.w	r3, r3, #28
 80045a2:	2208      	movs	r2, #8
 80045a4:	409a      	lsls	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d02a      	beq.n	8004604 <HAL_DMA_IRQHandler+0x156>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d025      	beq.n	8004604 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 020e 	bic.w	r2, r2, #14
 80045c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	f003 021c 	and.w	r2, r3, #28
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	2101      	movs	r1, #1
 80045d6:	fa01 f202 	lsl.w	r2, r1, r2
 80045da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004602:	bf00      	nop
 8004604:	bf00      	nop
}
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	f003 021c 	and.w	r2, r3, #28
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	2101      	movs	r1, #1
 8004628:	fa01 f202 	lsl.w	r2, r1, r2
 800462c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b10      	cmp	r3, #16
 800463c:	d108      	bne.n	8004650 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800464e:	e007      	b.n	8004660 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467a:	e17f      	b.n	800497c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	2101      	movs	r1, #1
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8171 	beq.w	8004976 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d005      	beq.n	80046ac <HAL_GPIO_Init+0x40>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d130      	bne.n	800470e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046e2:	2201      	movs	r2, #1
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0201 	and.w	r2, r3, #1
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b03      	cmp	r3, #3
 8004718:	d118      	bne.n	800474c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004720:	2201      	movs	r2, #1
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	08db      	lsrs	r3, r3, #3
 8004736:	f003 0201 	and.w	r2, r3, #1
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b03      	cmp	r3, #3
 8004756:	d017      	beq.n	8004788 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	2203      	movs	r2, #3
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d123      	bne.n	80047dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	08da      	lsrs	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3208      	adds	r2, #8
 800479c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	220f      	movs	r2, #15
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	08da      	lsrs	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3208      	adds	r2, #8
 80047d6:	6939      	ldr	r1, [r7, #16]
 80047d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	2203      	movs	r2, #3
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0203 	and.w	r2, r3, #3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80ac 	beq.w	8004976 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481e:	4b5f      	ldr	r3, [pc, #380]	@ (800499c <HAL_GPIO_Init+0x330>)
 8004820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004822:	4a5e      	ldr	r2, [pc, #376]	@ (800499c <HAL_GPIO_Init+0x330>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6613      	str	r3, [r2, #96]	@ 0x60
 800482a:	4b5c      	ldr	r3, [pc, #368]	@ (800499c <HAL_GPIO_Init+0x330>)
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004836:	4a5a      	ldr	r2, [pc, #360]	@ (80049a0 <HAL_GPIO_Init+0x334>)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	3302      	adds	r3, #2
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4013      	ands	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004860:	d025      	beq.n	80048ae <HAL_GPIO_Init+0x242>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4f      	ldr	r2, [pc, #316]	@ (80049a4 <HAL_GPIO_Init+0x338>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01f      	beq.n	80048aa <HAL_GPIO_Init+0x23e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4e      	ldr	r2, [pc, #312]	@ (80049a8 <HAL_GPIO_Init+0x33c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d019      	beq.n	80048a6 <HAL_GPIO_Init+0x23a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4d      	ldr	r2, [pc, #308]	@ (80049ac <HAL_GPIO_Init+0x340>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_GPIO_Init+0x236>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4c      	ldr	r2, [pc, #304]	@ (80049b0 <HAL_GPIO_Init+0x344>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00d      	beq.n	800489e <HAL_GPIO_Init+0x232>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4b      	ldr	r2, [pc, #300]	@ (80049b4 <HAL_GPIO_Init+0x348>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <HAL_GPIO_Init+0x22e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4a      	ldr	r2, [pc, #296]	@ (80049b8 <HAL_GPIO_Init+0x34c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d101      	bne.n	8004896 <HAL_GPIO_Init+0x22a>
 8004892:	2306      	movs	r3, #6
 8004894:	e00c      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 8004896:	2307      	movs	r3, #7
 8004898:	e00a      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 800489a:	2305      	movs	r3, #5
 800489c:	e008      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 800489e:	2304      	movs	r3, #4
 80048a0:	e006      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 80048a2:	2303      	movs	r3, #3
 80048a4:	e004      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e002      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <HAL_GPIO_Init+0x244>
 80048ae:	2300      	movs	r3, #0
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	f002 0203 	and.w	r2, r2, #3
 80048b6:	0092      	lsls	r2, r2, #2
 80048b8:	4093      	lsls	r3, r2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048c0:	4937      	ldr	r1, [pc, #220]	@ (80049a0 <HAL_GPIO_Init+0x334>)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	3302      	adds	r3, #2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048ce:	4b3b      	ldr	r3, [pc, #236]	@ (80049bc <HAL_GPIO_Init+0x350>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	43db      	mvns	r3, r3
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4013      	ands	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048f2:	4a32      	ldr	r2, [pc, #200]	@ (80049bc <HAL_GPIO_Init+0x350>)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048f8:	4b30      	ldr	r3, [pc, #192]	@ (80049bc <HAL_GPIO_Init+0x350>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43db      	mvns	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800491c:	4a27      	ldr	r2, [pc, #156]	@ (80049bc <HAL_GPIO_Init+0x350>)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004922:	4b26      	ldr	r3, [pc, #152]	@ (80049bc <HAL_GPIO_Init+0x350>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004946:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <HAL_GPIO_Init+0x350>)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800494c:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_GPIO_Init+0x350>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	43db      	mvns	r3, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004970:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <HAL_GPIO_Init+0x350>)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa22 f303 	lsr.w	r3, r2, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f47f ae78 	bne.w	800467c <HAL_GPIO_Init+0x10>
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	40010000 	.word	0x40010000
 80049a4:	48000400 	.word	0x48000400
 80049a8:	48000800 	.word	0x48000800
 80049ac:	48000c00 	.word	0x48000c00
 80049b0:	48001000 	.word	0x48001000
 80049b4:	48001400 	.word	0x48001400
 80049b8:	48001800 	.word	0x48001800
 80049bc:	40010400 	.word	0x40010400

080049c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
 80049cc:	4613      	mov	r3, r2
 80049ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d0:	787b      	ldrb	r3, [r7, #1]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049dc:	e002      	b.n	80049e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049f4:	4b04      	ldr	r3, [pc, #16]	@ (8004a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40007000 	.word	0x40007000

08004a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a1a:	d130      	bne.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a1c:	4b23      	ldr	r3, [pc, #140]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a28:	d038      	beq.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a2a:	4b20      	ldr	r3, [pc, #128]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a32:	4a1e      	ldr	r2, [pc, #120]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2232      	movs	r2, #50	@ 0x32
 8004a40:	fb02 f303 	mul.w	r3, r2, r3
 8004a44:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	0c9b      	lsrs	r3, r3, #18
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a50:	e002      	b.n	8004a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a58:	4b14      	ldr	r3, [pc, #80]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a64:	d102      	bne.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f2      	bne.n	8004a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d110      	bne.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e00f      	b.n	8004a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8a:	d007      	beq.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a8c:	4b07      	ldr	r3, [pc, #28]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a94:	4a05      	ldr	r2, [pc, #20]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40007000 	.word	0x40007000
 8004ab0:	200002a8 	.word	0x200002a8
 8004ab4:	431bde83 	.word	0x431bde83

08004ab8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e3ca      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aca:	4b97      	ldr	r3, [pc, #604]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad4:	4b94      	ldr	r3, [pc, #592]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80e4 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4a>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	f040 808b 	bne.w	8004c10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	f040 8087 	bne.w	8004c10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b02:	4b89      	ldr	r3, [pc, #548]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_RCC_OscConfig+0x62>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e3a2      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1a      	ldr	r2, [r3, #32]
 8004b1e:	4b82      	ldr	r3, [pc, #520]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d004      	beq.n	8004b34 <HAL_RCC_OscConfig+0x7c>
 8004b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b32:	e005      	b.n	8004b40 <HAL_RCC_OscConfig+0x88>
 8004b34:	4b7c      	ldr	r3, [pc, #496]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d223      	bcs.n	8004b8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fd87 	bl	800565c <RCC_SetFlashLatencyFromMSIRange>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e383      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b58:	4b73      	ldr	r3, [pc, #460]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a72      	ldr	r2, [pc, #456]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	f043 0308 	orr.w	r3, r3, #8
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	4b70      	ldr	r3, [pc, #448]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	496d      	ldr	r1, [pc, #436]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b76:	4b6c      	ldr	r3, [pc, #432]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	4968      	ldr	r1, [pc, #416]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
 8004b8a:	e025      	b.n	8004bd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b8c:	4b66      	ldr	r3, [pc, #408]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a65      	ldr	r2, [pc, #404]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b92:	f043 0308 	orr.w	r3, r3, #8
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b63      	ldr	r3, [pc, #396]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	4960      	ldr	r1, [pc, #384]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004baa:	4b5f      	ldr	r3, [pc, #380]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	495b      	ldr	r1, [pc, #364]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fd47 	bl	800565c <RCC_SetFlashLatencyFromMSIRange>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e343      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bd8:	f000 fc4a 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b52      	ldr	r3, [pc, #328]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	4950      	ldr	r1, [pc, #320]	@ (8004d2c <HAL_RCC_OscConfig+0x274>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8004d30 <HAL_RCC_OscConfig+0x278>)
 8004bf6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8004d34 <HAL_RCC_OscConfig+0x27c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fe9f 	bl	8003940 <HAL_InitTick>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d052      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	e327      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d032      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c18:	4b43      	ldr	r3, [pc, #268]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a42      	ldr	r2, [pc, #264]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c24:	f7ff f9be 	bl	8003fa4 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c2c:	f7ff f9ba 	bl	8003fa4 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e310      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c4a:	4b37      	ldr	r3, [pc, #220]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a36      	ldr	r2, [pc, #216]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c50:	f043 0308 	orr.w	r3, r3, #8
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b34      	ldr	r3, [pc, #208]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4931      	ldr	r1, [pc, #196]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c68:	4b2f      	ldr	r3, [pc, #188]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	492c      	ldr	r1, [pc, #176]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]
 8004c7c:	e01a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a29      	ldr	r2, [pc, #164]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c8a:	f7ff f98b 	bl	8003fa4 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c92:	f7ff f987 	bl	8003fa4 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e2dd      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ca4:	4b20      	ldr	r3, [pc, #128]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCC_OscConfig+0x1da>
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d074      	beq.n	8004daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d005      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x21a>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	d10e      	bne.n	8004cea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d10b      	bne.n	8004cea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd2:	4b15      	ldr	r3, [pc, #84]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d064      	beq.n	8004da8 <HAL_RCC_OscConfig+0x2f0>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d160      	bne.n	8004da8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e2ba      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf2:	d106      	bne.n	8004d02 <HAL_RCC_OscConfig+0x24a>
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e026      	b.n	8004d50 <HAL_RCC_OscConfig+0x298>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d0a:	d115      	bne.n	8004d38 <HAL_RCC_OscConfig+0x280>
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a05      	ldr	r2, [pc, #20]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004d12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	4b03      	ldr	r3, [pc, #12]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a02      	ldr	r2, [pc, #8]	@ (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e014      	b.n	8004d50 <HAL_RCC_OscConfig+0x298>
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	080114c8 	.word	0x080114c8
 8004d30:	200002a8 	.word	0x200002a8
 8004d34:	200002ac 	.word	0x200002ac
 8004d38:	4ba0      	ldr	r3, [pc, #640]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a9f      	ldr	r2, [pc, #636]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b9d      	ldr	r3, [pc, #628]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a9c      	ldr	r2, [pc, #624]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d013      	beq.n	8004d80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7ff f924 	bl	8003fa4 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d60:	f7ff f920 	bl	8003fa4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b64      	cmp	r3, #100	@ 0x64
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e276      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d72:	4b92      	ldr	r3, [pc, #584]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x2a8>
 8004d7e:	e014      	b.n	8004daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7ff f910 	bl	8003fa4 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d88:	f7ff f90c 	bl	8003fa4 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	@ 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e262      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d9a:	4b88      	ldr	r3, [pc, #544]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x2d0>
 8004da6:	e000      	b.n	8004daa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d060      	beq.n	8004e78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d005      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x310>
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b0c      	cmp	r3, #12
 8004dc0:	d119      	bne.n	8004df6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d116      	bne.n	8004df6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc8:	4b7c      	ldr	r3, [pc, #496]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_OscConfig+0x328>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e23f      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de0:	4b76      	ldr	r3, [pc, #472]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	4973      	ldr	r1, [pc, #460]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df4:	e040      	b.n	8004e78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d023      	beq.n	8004e46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a6e      	ldr	r2, [pc, #440]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7ff f8cb 	bl	8003fa4 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e12:	f7ff f8c7 	bl	8003fa4 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e21d      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e24:	4b65      	ldr	r3, [pc, #404]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e30:	4b62      	ldr	r3, [pc, #392]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	061b      	lsls	r3, r3, #24
 8004e3e:	495f      	ldr	r1, [pc, #380]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	604b      	str	r3, [r1, #4]
 8004e44:	e018      	b.n	8004e78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e46:	4b5d      	ldr	r3, [pc, #372]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7ff f8a7 	bl	8003fa4 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5a:	f7ff f8a3 	bl	8003fa4 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e1f9      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e6c:	4b53      	ldr	r3, [pc, #332]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f0      	bne.n	8004e5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d03c      	beq.n	8004efe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01c      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e92:	4a4a      	ldr	r2, [pc, #296]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7ff f882 	bl	8003fa4 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7ff f87e 	bl	8003fa4 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1d4      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eb6:	4b41      	ldr	r3, [pc, #260]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0ef      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x3ec>
 8004ec4:	e01b      	b.n	8004efe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ecc:	4a3b      	ldr	r2, [pc, #236]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed6:	f7ff f865 	bl	8003fa4 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ede:	f7ff f861 	bl	8003fa4 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e1b7      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ef0:	4b32      	ldr	r3, [pc, #200]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1ef      	bne.n	8004ede <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 80a6 	beq.w	8005058 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f10:	4b2a      	ldr	r3, [pc, #168]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10d      	bne.n	8004f38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	4b27      	ldr	r3, [pc, #156]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f20:	4a26      	ldr	r2, [pc, #152]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f28:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f34:	2301      	movs	r3, #1
 8004f36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f38:	4b21      	ldr	r3, [pc, #132]	@ (8004fc0 <HAL_RCC_OscConfig+0x508>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d118      	bne.n	8004f76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f44:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc0 <HAL_RCC_OscConfig+0x508>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc0 <HAL_RCC_OscConfig+0x508>)
 8004f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f50:	f7ff f828 	bl	8003fa4 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f58:	f7ff f824 	bl	8003fa4 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e17a      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6a:	4b15      	ldr	r3, [pc, #84]	@ (8004fc0 <HAL_RCC_OscConfig+0x508>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d108      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4d8>
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f84:	4a0d      	ldr	r2, [pc, #52]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f8e:	e029      	b.n	8004fe4 <HAL_RCC_OscConfig+0x52c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b05      	cmp	r3, #5
 8004f96:	d115      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x50c>
 8004f98:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9e:	4a07      	ldr	r2, [pc, #28]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fa8:	4b04      	ldr	r3, [pc, #16]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fae:	4a03      	ldr	r2, [pc, #12]	@ (8004fbc <HAL_RCC_OscConfig+0x504>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fb8:	e014      	b.n	8004fe4 <HAL_RCC_OscConfig+0x52c>
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40007000 	.word	0x40007000
 8004fc4:	4b9c      	ldr	r3, [pc, #624]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fca:	4a9b      	ldr	r2, [pc, #620]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fd4:	4b98      	ldr	r3, [pc, #608]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	4a97      	ldr	r2, [pc, #604]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8004fdc:	f023 0304 	bic.w	r3, r3, #4
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d016      	beq.n	800501a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fe ffda 	bl	8003fa4 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff4:	f7fe ffd6 	bl	8003fa4 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e12a      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500a:	4b8b      	ldr	r3, [pc, #556]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0ed      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x53c>
 8005018:	e015      	b.n	8005046 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501a:	f7fe ffc3 	bl	8003fa4 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005020:	e00a      	b.n	8005038 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005022:	f7fe ffbf 	bl	8003fa4 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e113      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005038:	4b7f      	ldr	r3, [pc, #508]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1ed      	bne.n	8005022 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005046:	7ffb      	ldrb	r3, [r7, #31]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d105      	bne.n	8005058 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800504c:	4b7a      	ldr	r3, [pc, #488]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800504e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005050:	4a79      	ldr	r2, [pc, #484]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8005052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005056:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80fe 	beq.w	800525e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005066:	2b02      	cmp	r3, #2
 8005068:	f040 80d0 	bne.w	800520c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800506c:	4b72      	ldr	r3, [pc, #456]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0203 	and.w	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	429a      	cmp	r2, r3
 800507e:	d130      	bne.n	80050e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	3b01      	subs	r3, #1
 800508c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d127      	bne.n	80050e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d11f      	bne.n	80050e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050ac:	2a07      	cmp	r2, #7
 80050ae:	bf14      	ite	ne
 80050b0:	2201      	movne	r2, #1
 80050b2:	2200      	moveq	r2, #0
 80050b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d113      	bne.n	80050e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	3b01      	subs	r3, #1
 80050c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d109      	bne.n	80050e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	3b01      	subs	r3, #1
 80050dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d06e      	beq.n	80051c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d069      	beq.n	80051bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050e8:	4b53      	ldr	r3, [pc, #332]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050f4:	4b50      	ldr	r3, [pc, #320]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e0ad      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005104:	4b4c      	ldr	r3, [pc, #304]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a4b      	ldr	r2, [pc, #300]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800510a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800510e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005110:	f7fe ff48 	bl	8003fa4 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005118:	f7fe ff44 	bl	8003fa4 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e09a      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512a:	4b43      	ldr	r3, [pc, #268]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005136:	4b40      	ldr	r3, [pc, #256]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	4b40      	ldr	r3, [pc, #256]	@ (800523c <HAL_RCC_OscConfig+0x784>)
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005146:	3a01      	subs	r2, #1
 8005148:	0112      	lsls	r2, r2, #4
 800514a:	4311      	orrs	r1, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005150:	0212      	lsls	r2, r2, #8
 8005152:	4311      	orrs	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005158:	0852      	lsrs	r2, r2, #1
 800515a:	3a01      	subs	r2, #1
 800515c:	0552      	lsls	r2, r2, #21
 800515e:	4311      	orrs	r1, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005164:	0852      	lsrs	r2, r2, #1
 8005166:	3a01      	subs	r2, #1
 8005168:	0652      	lsls	r2, r2, #25
 800516a:	4311      	orrs	r1, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005170:	0912      	lsrs	r2, r2, #4
 8005172:	0452      	lsls	r2, r2, #17
 8005174:	430a      	orrs	r2, r1
 8005176:	4930      	ldr	r1, [pc, #192]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8005178:	4313      	orrs	r3, r2
 800517a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800517c:	4b2e      	ldr	r3, [pc, #184]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a2d      	ldr	r2, [pc, #180]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8005182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005186:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005188:	4b2b      	ldr	r3, [pc, #172]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a2a      	ldr	r2, [pc, #168]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 800518e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005192:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005194:	f7fe ff06 	bl	8003fa4 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519c:	f7fe ff02 	bl	8003fa4 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e058      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ae:	4b22      	ldr	r3, [pc, #136]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ba:	e050      	b.n	800525e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e04f      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d148      	bne.n	800525e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a19      	ldr	r2, [pc, #100]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 80051d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051d8:	4b17      	ldr	r3, [pc, #92]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4a16      	ldr	r2, [pc, #88]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 80051de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051e4:	f7fe fede 	bl	8003fa4 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ec:	f7fe feda 	bl	8003fa4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e030      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0x734>
 800520a:	e028      	b.n	800525e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b0c      	cmp	r3, #12
 8005210:	d023      	beq.n	800525a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005212:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a08      	ldr	r2, [pc, #32]	@ (8005238 <HAL_RCC_OscConfig+0x780>)
 8005218:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800521c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521e:	f7fe fec1 	bl	8003fa4 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005224:	e00c      	b.n	8005240 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005226:	f7fe febd 	bl	8003fa4 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d905      	bls.n	8005240 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e013      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
 8005238:	40021000 	.word	0x40021000
 800523c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005240:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <HAL_RCC_OscConfig+0x7b0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1ec      	bne.n	8005226 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_OscConfig+0x7b0>)
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	4905      	ldr	r1, [pc, #20]	@ (8005268 <HAL_RCC_OscConfig+0x7b0>)
 8005252:	4b06      	ldr	r3, [pc, #24]	@ (800526c <HAL_RCC_OscConfig+0x7b4>)
 8005254:	4013      	ands	r3, r2
 8005256:	60cb      	str	r3, [r1, #12]
 8005258:	e001      	b.n	800525e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	feeefffc 	.word	0xfeeefffc

08005270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0e7      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005284:	4b75      	ldr	r3, [pc, #468]	@ (800545c <HAL_RCC_ClockConfig+0x1ec>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d910      	bls.n	80052b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005292:	4b72      	ldr	r3, [pc, #456]	@ (800545c <HAL_RCC_ClockConfig+0x1ec>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f023 0207 	bic.w	r2, r3, #7
 800529a:	4970      	ldr	r1, [pc, #448]	@ (800545c <HAL_RCC_ClockConfig+0x1ec>)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	4313      	orrs	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a2:	4b6e      	ldr	r3, [pc, #440]	@ (800545c <HAL_RCC_ClockConfig+0x1ec>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0cf      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d010      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	4b66      	ldr	r3, [pc, #408]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d908      	bls.n	80052e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d0:	4b63      	ldr	r3, [pc, #396]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4960      	ldr	r1, [pc, #384]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d04c      	beq.n	8005388 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f6:	4b5a      	ldr	r3, [pc, #360]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d121      	bne.n	8005346 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0a6      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d107      	bne.n	800531e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800530e:	4b54      	ldr	r3, [pc, #336]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d115      	bne.n	8005346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e09a      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005326:	4b4e      	ldr	r3, [pc, #312]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e08e      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005336:	4b4a      	ldr	r3, [pc, #296]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e086      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005346:	4b46      	ldr	r3, [pc, #280]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 0203 	bic.w	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4943      	ldr	r1, [pc, #268]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005354:	4313      	orrs	r3, r2
 8005356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005358:	f7fe fe24 	bl	8003fa4 <HAL_GetTick>
 800535c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	e00a      	b.n	8005376 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005360:	f7fe fe20 	bl	8003fa4 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e06e      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005376:	4b3a      	ldr	r3, [pc, #232]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 020c 	and.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	429a      	cmp	r2, r3
 8005386:	d1eb      	bne.n	8005360 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	4b31      	ldr	r3, [pc, #196]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d208      	bcs.n	80053b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	492b      	ldr	r1, [pc, #172]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053b6:	4b29      	ldr	r3, [pc, #164]	@ (800545c <HAL_RCC_ClockConfig+0x1ec>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d210      	bcs.n	80053e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c4:	4b25      	ldr	r3, [pc, #148]	@ (800545c <HAL_RCC_ClockConfig+0x1ec>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f023 0207 	bic.w	r2, r3, #7
 80053cc:	4923      	ldr	r1, [pc, #140]	@ (800545c <HAL_RCC_ClockConfig+0x1ec>)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d4:	4b21      	ldr	r3, [pc, #132]	@ (800545c <HAL_RCC_ClockConfig+0x1ec>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d001      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e036      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	4918      	ldr	r1, [pc, #96]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005410:	4b13      	ldr	r3, [pc, #76]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4910      	ldr	r1, [pc, #64]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 8005420:	4313      	orrs	r3, r2
 8005422:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005424:	f000 f824 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b0d      	ldr	r3, [pc, #52]	@ (8005460 <HAL_RCC_ClockConfig+0x1f0>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	091b      	lsrs	r3, r3, #4
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	490b      	ldr	r1, [pc, #44]	@ (8005464 <HAL_RCC_ClockConfig+0x1f4>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
 8005440:	4a09      	ldr	r2, [pc, #36]	@ (8005468 <HAL_RCC_ClockConfig+0x1f8>)
 8005442:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005444:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_RCC_ClockConfig+0x1fc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe fa79 	bl	8003940 <HAL_InitTick>
 800544e:	4603      	mov	r3, r0
 8005450:	72fb      	strb	r3, [r7, #11]

  return status;
 8005452:	7afb      	ldrb	r3, [r7, #11]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40022000 	.word	0x40022000
 8005460:	40021000 	.word	0x40021000
 8005464:	080114c8 	.word	0x080114c8
 8005468:	200002a8 	.word	0x200002a8
 800546c:	200002ac 	.word	0x200002ac

08005470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	@ 0x24
 8005474:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	2300      	movs	r3, #0
 800547c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800547e:	4b3e      	ldr	r3, [pc, #248]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005488:	4b3b      	ldr	r3, [pc, #236]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b0c      	cmp	r3, #12
 800549c:	d121      	bne.n	80054e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d11e      	bne.n	80054e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054a4:	4b34      	ldr	r3, [pc, #208]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054b0:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	e005      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054cc:	4a2b      	ldr	r2, [pc, #172]	@ (800557c <HAL_RCC_GetSysClockFreq+0x10c>)
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10d      	bne.n	80054f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054e0:	e00a      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d102      	bne.n	80054ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054e8:	4b25      	ldr	r3, [pc, #148]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x110>)
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e004      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d101      	bne.n	80054f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054f4:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x114>)
 80054f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	d134      	bne.n	8005568 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d003      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0xa6>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d003      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0xac>
 8005514:	e005      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005516:	4b1a      	ldr	r3, [pc, #104]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x110>)
 8005518:	617b      	str	r3, [r7, #20]
      break;
 800551a:	e005      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800551c:	4b19      	ldr	r3, [pc, #100]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x114>)
 800551e:	617b      	str	r3, [r7, #20]
      break;
 8005520:	e002      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	617b      	str	r3, [r7, #20]
      break;
 8005526:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005528:	4b13      	ldr	r3, [pc, #76]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	3301      	adds	r3, #1
 8005534:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005536:	4b10      	ldr	r3, [pc, #64]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	fb03 f202 	mul.w	r2, r3, r2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800554e:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x108>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	0e5b      	lsrs	r3, r3, #25
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	3301      	adds	r3, #1
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005568:	69bb      	ldr	r3, [r7, #24]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3724      	adds	r7, #36	@ 0x24
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000
 800557c:	080114e0 	.word	0x080114e0
 8005580:	00f42400 	.word	0x00f42400
 8005584:	007a1200 	.word	0x007a1200

08005588 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800558c:	4b03      	ldr	r3, [pc, #12]	@ (800559c <HAL_RCC_GetHCLKFreq+0x14>)
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	200002a8 	.word	0x200002a8

080055a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055a4:	f7ff fff0 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4904      	ldr	r1, [pc, #16]	@ (80055c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	080114d8 	.word	0x080114d8

080055cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055d0:	f7ff ffda 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	0adb      	lsrs	r3, r3, #11
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	4904      	ldr	r1, [pc, #16]	@ (80055f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000
 80055f4:	080114d8 	.word	0x080114d8

080055f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	220f      	movs	r2, #15
 8005606:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005608:	4b12      	ldr	r3, [pc, #72]	@ (8005654 <HAL_RCC_GetClockConfig+0x5c>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0203 	and.w	r2, r3, #3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005614:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <HAL_RCC_GetClockConfig+0x5c>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <HAL_RCC_GetClockConfig+0x5c>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800562c:	4b09      	ldr	r3, [pc, #36]	@ (8005654 <HAL_RCC_GetClockConfig+0x5c>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	08db      	lsrs	r3, r3, #3
 8005632:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800563a:	4b07      	ldr	r3, [pc, #28]	@ (8005658 <HAL_RCC_GetClockConfig+0x60>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0207 	and.w	r2, r3, #7
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	601a      	str	r2, [r3, #0]
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	40022000 	.word	0x40022000

0800565c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005668:	4b2a      	ldr	r3, [pc, #168]	@ (8005714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005674:	f7ff f9bc 	bl	80049f0 <HAL_PWREx_GetVoltageRange>
 8005678:	6178      	str	r0, [r7, #20]
 800567a:	e014      	b.n	80056a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800567c:	4b25      	ldr	r3, [pc, #148]	@ (8005714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005680:	4a24      	ldr	r2, [pc, #144]	@ (8005714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005686:	6593      	str	r3, [r2, #88]	@ 0x58
 8005688:	4b22      	ldr	r3, [pc, #136]	@ (8005714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005694:	f7ff f9ac 	bl	80049f0 <HAL_PWREx_GetVoltageRange>
 8005698:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800569a:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800569c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569e:	4a1d      	ldr	r2, [pc, #116]	@ (8005714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ac:	d10b      	bne.n	80056c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b80      	cmp	r3, #128	@ 0x80
 80056b2:	d919      	bls.n	80056e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80056b8:	d902      	bls.n	80056c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056ba:	2302      	movs	r3, #2
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	e013      	b.n	80056e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056c0:	2301      	movs	r3, #1
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	e010      	b.n	80056e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b80      	cmp	r3, #128	@ 0x80
 80056ca:	d902      	bls.n	80056d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056cc:	2303      	movs	r3, #3
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	e00a      	b.n	80056e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b80      	cmp	r3, #128	@ 0x80
 80056d6:	d102      	bne.n	80056de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056d8:	2302      	movs	r3, #2
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	e004      	b.n	80056e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b70      	cmp	r3, #112	@ 0x70
 80056e2:	d101      	bne.n	80056e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056e4:	2301      	movs	r3, #1
 80056e6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f023 0207 	bic.w	r2, r3, #7
 80056f0:	4909      	ldr	r1, [pc, #36]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056f8:	4b07      	ldr	r3, [pc, #28]	@ (8005718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	429a      	cmp	r2, r3
 8005704:	d001      	beq.n	800570a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40021000 	.word	0x40021000
 8005718:	40022000 	.word	0x40022000

0800571c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005724:	2300      	movs	r3, #0
 8005726:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005728:	2300      	movs	r3, #0
 800572a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005734:	2b00      	cmp	r3, #0
 8005736:	d041      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800573c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005740:	d02a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005742:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005746:	d824      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005748:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800574c:	d008      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800574e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005752:	d81e      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005758:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800575c:	d010      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800575e:	e018      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005760:	4b86      	ldr	r3, [pc, #536]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a85      	ldr	r2, [pc, #532]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800576c:	e015      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3304      	adds	r3, #4
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fabb 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800577e:	e00c      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3320      	adds	r3, #32
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fba6 	bl	8005ed8 <RCCEx_PLLSAI2_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	74fb      	strb	r3, [r7, #19]
      break;
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10b      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a0:	4b76      	ldr	r3, [pc, #472]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ae:	4973      	ldr	r1, [pc, #460]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057b6:	e001      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d041      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057d0:	d02a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057d6:	d824      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057dc:	d008      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057e2:	d81e      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80057e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ec:	d010      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057ee:	e018      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057f0:	4b62      	ldr	r3, [pc, #392]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a61      	ldr	r2, [pc, #388]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057fc:	e015      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fa73 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800580e:	e00c      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3320      	adds	r3, #32
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fb5e 	bl	8005ed8 <RCCEx_PLLSAI2_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005820:	e003      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	74fb      	strb	r3, [r7, #19]
      break;
 8005826:	e000      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005830:	4b52      	ldr	r3, [pc, #328]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005836:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800583e:	494f      	ldr	r1, [pc, #316]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005846:	e001      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80a0 	beq.w	800599a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585a:	2300      	movs	r3, #0
 800585c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800585e:	4b47      	ldr	r3, [pc, #284]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005874:	4b41      	ldr	r3, [pc, #260]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005878:	4a40      	ldr	r2, [pc, #256]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800587e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005880:	4b3e      	ldr	r3, [pc, #248]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588c:	2301      	movs	r3, #1
 800588e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005890:	4b3b      	ldr	r3, [pc, #236]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a3a      	ldr	r2, [pc, #232]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800589a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800589c:	f7fe fb82 	bl	8003fa4 <HAL_GetTick>
 80058a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058a2:	e009      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a4:	f7fe fb7e 	bl	8003fa4 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d902      	bls.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	74fb      	strb	r3, [r7, #19]
        break;
 80058b6:	e005      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058b8:	4b31      	ldr	r3, [pc, #196]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ef      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d15c      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058ca:	4b2c      	ldr	r3, [pc, #176]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01f      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d019      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058e8:	4b24      	ldr	r3, [pc, #144]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058f4:	4b21      	ldr	r3, [pc, #132]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fa:	4a20      	ldr	r2, [pc, #128]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005904:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590a:	4a1c      	ldr	r2, [pc, #112]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005914:	4a19      	ldr	r2, [pc, #100]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005926:	f7fe fb3d 	bl	8003fa4 <HAL_GetTick>
 800592a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592c:	e00b      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fe fb39 	bl	8003fa4 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d902      	bls.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	74fb      	strb	r3, [r7, #19]
            break;
 8005944:	e006      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ec      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10c      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595a:	4b08      	ldr	r3, [pc, #32]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005960:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800596a:	4904      	ldr	r1, [pc, #16]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005972:	e009      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	74bb      	strb	r3, [r7, #18]
 8005978:	e006      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	7cfb      	ldrb	r3, [r7, #19]
 8005986:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005988:	7c7b      	ldrb	r3, [r7, #17]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d105      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598e:	4b9e      	ldr	r3, [pc, #632]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	4a9d      	ldr	r2, [pc, #628]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005998:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059a6:	4b98      	ldr	r3, [pc, #608]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ac:	f023 0203 	bic.w	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	4994      	ldr	r1, [pc, #592]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ce:	f023 020c 	bic.w	r2, r3, #12
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d6:	498c      	ldr	r1, [pc, #560]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ea:	4b87      	ldr	r3, [pc, #540]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f8:	4983      	ldr	r1, [pc, #524]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1a:	497b      	ldr	r1, [pc, #492]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a2e:	4b76      	ldr	r3, [pc, #472]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a3c:	4972      	ldr	r1, [pc, #456]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a50:	4b6d      	ldr	r3, [pc, #436]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5e:	496a      	ldr	r1, [pc, #424]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a72:	4b65      	ldr	r3, [pc, #404]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a80:	4961      	ldr	r1, [pc, #388]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a94:	4b5c      	ldr	r3, [pc, #368]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa2:	4959      	ldr	r1, [pc, #356]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ab6:	4b54      	ldr	r3, [pc, #336]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac4:	4950      	ldr	r1, [pc, #320]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ade:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae6:	4948      	ldr	r1, [pc, #288]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005afa:	4b43      	ldr	r3, [pc, #268]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b08:	493f      	ldr	r1, [pc, #252]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d028      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b2a:	4937      	ldr	r1, [pc, #220]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b3a:	d106      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3c:	4b32      	ldr	r3, [pc, #200]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4a31      	ldr	r2, [pc, #196]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b46:	60d3      	str	r3, [r2, #12]
 8005b48:	e011      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b52:	d10c      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f8c8 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b64:	7cfb      	ldrb	r3, [r7, #19]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b6a:	7cfb      	ldrb	r3, [r7, #19]
 8005b6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d028      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b7a:	4b23      	ldr	r3, [pc, #140]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b88:	491f      	ldr	r1, [pc, #124]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b98:	d106      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ba4:	60d3      	str	r3, [r2, #12]
 8005ba6:	e011      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f899 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bc2:	7cfb      	ldrb	r3, [r7, #19]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005bc8:	7cfb      	ldrb	r3, [r7, #19]
 8005bca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02b      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be6:	4908      	ldr	r1, [pc, #32]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bf6:	d109      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf8:	4b03      	ldr	r3, [pc, #12]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4a02      	ldr	r2, [pc, #8]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c02:	60d3      	str	r3, [r2, #12]
 8005c04:	e014      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c06:	bf00      	nop
 8005c08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c14:	d10c      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 f867 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005c22:	4603      	mov	r3, r0
 8005c24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c26:	7cfb      	ldrb	r3, [r7, #19]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c2c:	7cfb      	ldrb	r3, [r7, #19]
 8005c2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d02f      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c4a:	4928      	ldr	r1, [pc, #160]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c5a:	d10d      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	2102      	movs	r1, #2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f844 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c6c:	7cfb      	ldrb	r3, [r7, #19]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d014      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c72:	7cfb      	ldrb	r3, [r7, #19]
 8005c74:	74bb      	strb	r3, [r7, #18]
 8005c76:	e011      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c80:	d10c      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3320      	adds	r3, #32
 8005c86:	2102      	movs	r1, #2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 f925 	bl	8005ed8 <RCCEx_PLLSAI2_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ca8:	4b10      	ldr	r3, [pc, #64]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cb6:	490d      	ldr	r1, [pc, #52]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cca:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cda:	4904      	ldr	r1, [pc, #16]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ce2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40021000 	.word	0x40021000

08005cf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cfe:	4b75      	ldr	r3, [pc, #468]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d0a:	4b72      	ldr	r3, [pc, #456]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0203 	and.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d10d      	bne.n	8005d36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d22:	4b6c      	ldr	r3, [pc, #432]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
       ||
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d047      	beq.n	8005dc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e044      	b.n	8005dc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d018      	beq.n	8005d76 <RCCEx_PLLSAI1_Config+0x86>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d825      	bhi.n	8005d94 <RCCEx_PLLSAI1_Config+0xa4>
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d002      	beq.n	8005d52 <RCCEx_PLLSAI1_Config+0x62>
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d009      	beq.n	8005d64 <RCCEx_PLLSAI1_Config+0x74>
 8005d50:	e020      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d52:	4b60      	ldr	r3, [pc, #384]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11d      	bne.n	8005d9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d62:	e01a      	b.n	8005d9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d64:	4b5b      	ldr	r3, [pc, #364]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d74:	e013      	b.n	8005d9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d76:	4b57      	ldr	r3, [pc, #348]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10f      	bne.n	8005da2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d82:	4b54      	ldr	r3, [pc, #336]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d92:	e006      	b.n	8005da2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e004      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005daa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6819      	ldr	r1, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	4944      	ldr	r1, [pc, #272]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d17d      	bne.n	8005ec8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005dcc:	4b41      	ldr	r3, [pc, #260]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a40      	ldr	r2, [pc, #256]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd8:	f7fe f8e4 	bl	8003fa4 <HAL_GetTick>
 8005ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dde:	e009      	b.n	8005df4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005de0:	f7fe f8e0 	bl	8003fa4 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d902      	bls.n	8005df4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	73fb      	strb	r3, [r7, #15]
        break;
 8005df2:	e005      	b.n	8005e00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005df4:	4b37      	ldr	r3, [pc, #220]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ef      	bne.n	8005de0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d160      	bne.n	8005ec8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d111      	bne.n	8005e30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e0c:	4b31      	ldr	r3, [pc, #196]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6892      	ldr	r2, [r2, #8]
 8005e1c:	0211      	lsls	r1, r2, #8
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68d2      	ldr	r2, [r2, #12]
 8005e22:	0912      	lsrs	r2, r2, #4
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	430a      	orrs	r2, r1
 8005e28:	492a      	ldr	r1, [pc, #168]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	610b      	str	r3, [r1, #16]
 8005e2e:	e027      	b.n	8005e80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d112      	bne.n	8005e5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e36:	4b27      	ldr	r3, [pc, #156]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005e3e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6892      	ldr	r2, [r2, #8]
 8005e46:	0211      	lsls	r1, r2, #8
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6912      	ldr	r2, [r2, #16]
 8005e4c:	0852      	lsrs	r2, r2, #1
 8005e4e:	3a01      	subs	r2, #1
 8005e50:	0552      	lsls	r2, r2, #21
 8005e52:	430a      	orrs	r2, r1
 8005e54:	491f      	ldr	r1, [pc, #124]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	610b      	str	r3, [r1, #16]
 8005e5a:	e011      	b.n	8005e80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6892      	ldr	r2, [r2, #8]
 8005e6c:	0211      	lsls	r1, r2, #8
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6952      	ldr	r2, [r2, #20]
 8005e72:	0852      	lsrs	r2, r2, #1
 8005e74:	3a01      	subs	r2, #1
 8005e76:	0652      	lsls	r2, r2, #25
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	4916      	ldr	r1, [pc, #88]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e80:	4b14      	ldr	r3, [pc, #80]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a13      	ldr	r2, [pc, #76]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fe f88a 	bl	8003fa4 <HAL_GetTick>
 8005e90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e92:	e009      	b.n	8005ea8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e94:	f7fe f886 	bl	8003fa4 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d902      	bls.n	8005ea8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ea6:	e005      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0ef      	beq.n	8005e94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005eba:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	4904      	ldr	r1, [pc, #16]	@ (8005ed4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40021000 	.word	0x40021000

08005ed8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d018      	beq.n	8005f24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ef2:	4b67      	ldr	r3, [pc, #412]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0203 	and.w	r2, r3, #3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d10d      	bne.n	8005f1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
       ||
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f0a:	4b61      	ldr	r3, [pc, #388]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
       ||
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d047      	beq.n	8005fae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	73fb      	strb	r3, [r7, #15]
 8005f22:	e044      	b.n	8005fae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d018      	beq.n	8005f5e <RCCEx_PLLSAI2_Config+0x86>
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d825      	bhi.n	8005f7c <RCCEx_PLLSAI2_Config+0xa4>
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d002      	beq.n	8005f3a <RCCEx_PLLSAI2_Config+0x62>
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d009      	beq.n	8005f4c <RCCEx_PLLSAI2_Config+0x74>
 8005f38:	e020      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f3a:	4b55      	ldr	r3, [pc, #340]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11d      	bne.n	8005f82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f4a:	e01a      	b.n	8005f82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f4c:	4b50      	ldr	r3, [pc, #320]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d116      	bne.n	8005f86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f5c:	e013      	b.n	8005f86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10f      	bne.n	8005f8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f6a:	4b49      	ldr	r3, [pc, #292]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f7a:	e006      	b.n	8005f8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f80:	e004      	b.n	8005f8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f82:	bf00      	nop
 8005f84:	e002      	b.n	8005f8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f86:	bf00      	nop
 8005f88:	e000      	b.n	8005f8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f92:	4b3f      	ldr	r3, [pc, #252]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6819      	ldr	r1, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	4939      	ldr	r1, [pc, #228]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d167      	bne.n	8006084 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fb4:	4b36      	ldr	r3, [pc, #216]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a35      	ldr	r2, [pc, #212]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc0:	f7fd fff0 	bl	8003fa4 <HAL_GetTick>
 8005fc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fc6:	e009      	b.n	8005fdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fc8:	f7fd ffec 	bl	8003fa4 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d902      	bls.n	8005fdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	73fb      	strb	r3, [r7, #15]
        break;
 8005fda:	e005      	b.n	8005fe8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ef      	bne.n	8005fc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d14a      	bne.n	8006084 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d111      	bne.n	8006018 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ff4:	4b26      	ldr	r3, [pc, #152]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6892      	ldr	r2, [r2, #8]
 8006004:	0211      	lsls	r1, r2, #8
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68d2      	ldr	r2, [r2, #12]
 800600a:	0912      	lsrs	r2, r2, #4
 800600c:	0452      	lsls	r2, r2, #17
 800600e:	430a      	orrs	r2, r1
 8006010:	491f      	ldr	r1, [pc, #124]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006012:	4313      	orrs	r3, r2
 8006014:	614b      	str	r3, [r1, #20]
 8006016:	e011      	b.n	800603c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006018:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006020:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6892      	ldr	r2, [r2, #8]
 8006028:	0211      	lsls	r1, r2, #8
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6912      	ldr	r2, [r2, #16]
 800602e:	0852      	lsrs	r2, r2, #1
 8006030:	3a01      	subs	r2, #1
 8006032:	0652      	lsls	r2, r2, #25
 8006034:	430a      	orrs	r2, r1
 8006036:	4916      	ldr	r1, [pc, #88]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006038:	4313      	orrs	r3, r2
 800603a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800603c:	4b14      	ldr	r3, [pc, #80]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a13      	ldr	r2, [pc, #76]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006046:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006048:	f7fd ffac 	bl	8003fa4 <HAL_GetTick>
 800604c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800604e:	e009      	b.n	8006064 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006050:	f7fd ffa8 	bl	8003fa4 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d902      	bls.n	8006064 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	73fb      	strb	r3, [r7, #15]
          break;
 8006062:	e005      	b.n	8006070 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006064:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0ef      	beq.n	8006050 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006076:	4b06      	ldr	r3, [pc, #24]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	4904      	ldr	r1, [pc, #16]	@ (8006090 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006080:	4313      	orrs	r3, r2
 8006082:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40021000 	.word	0x40021000

08006094 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d079      	beq.n	800619a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fd fbe6 	bl	800388c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	2b10      	cmp	r3, #16
 80060d4:	d058      	beq.n	8006188 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	22ca      	movs	r2, #202	@ 0xca
 80060dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2253      	movs	r2, #83	@ 0x53
 80060e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fb7a 	bl	80067e0 <RTC_EnterInitMode>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d127      	bne.n	8006146 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006108:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6899      	ldr	r1, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	68d2      	ldr	r2, [r2, #12]
 8006130:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6919      	ldr	r1, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	041a      	lsls	r2, r3, #16
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fb7e 	bl	8006848 <RTC_ExitInitMode>
 800614c:	4603      	mov	r3, r0
 800614e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d113      	bne.n	800617e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0203 	bic.w	r2, r2, #3
 8006164:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	22ff      	movs	r2, #255	@ 0xff
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24
 8006186:	e001      	b.n	800618c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800619a:	7bfb      	ldrb	r3, [r7, #15]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_RTC_SetTime+0x1a>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e08b      	b.n	80062d6 <HAL_RTC_SetTime+0x132>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	22ca      	movs	r2, #202	@ 0xca
 80061d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2253      	movs	r2, #83	@ 0x53
 80061dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fafe 	bl	80067e0 <RTC_EnterInitMode>
 80061e4:	4603      	mov	r3, r0
 80061e6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d163      	bne.n	80062b6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d126      	bne.n	8006242 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2200      	movs	r2, #0
 8006206:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fb59 	bl	80068c4 <RTC_ByteToBcd2>
 8006212:	4603      	mov	r3, r0
 8006214:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fb52 	bl	80068c4 <RTC_ByteToBcd2>
 8006220:	4603      	mov	r3, r0
 8006222:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006224:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	789b      	ldrb	r3, [r3, #2]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fb4a 	bl	80068c4 <RTC_ByteToBcd2>
 8006230:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006232:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	78db      	ldrb	r3, [r3, #3]
 800623a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e018      	b.n	8006274 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2200      	movs	r2, #0
 8006254:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006262:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006268:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	78db      	ldrb	r3, [r3, #3]
 800626e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800627e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006282:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006292:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6899      	ldr	r1, [r3, #8]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 facb 	bl	8006848 <RTC_ExitInitMode>
 80062b2:	4603      	mov	r3, r0
 80062b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	22ff      	movs	r2, #255	@ 0xff
 80062bc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80062be:	7cfb      	ldrb	r3, [r7, #19]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d103      	bne.n	80062cc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80062d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd90      	pop	{r4, r7, pc}

080062de <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b086      	sub	sp, #24
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800630c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006310:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800631c:	b2da      	uxtb	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800633a:	b2da      	uxtb	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	0d9b      	lsrs	r3, r3, #22
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d11a      	bne.n	800638c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fad2 	bl	8006904 <RTC_Bcd2ToByte>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fac9 	bl	8006904 <RTC_Bcd2ToByte>
 8006372:	4603      	mov	r3, r0
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	789b      	ldrb	r3, [r3, #2]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fac0 	bl	8006904 <RTC_Bcd2ToByte>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006396:	b590      	push	{r4, r7, lr}
 8006398:	b087      	sub	sp, #28
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_RTC_SetDate+0x1a>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e075      	b.n	800649c <HAL_RTC_SetDate+0x106>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10e      	bne.n	80063e4 <HAL_RTC_SetDate+0x4e>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	f023 0310 	bic.w	r3, r3, #16
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	330a      	adds	r3, #10
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d11c      	bne.n	8006424 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	78db      	ldrb	r3, [r3, #3]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fa68 	bl	80068c4 <RTC_ByteToBcd2>
 80063f4:	4603      	mov	r3, r0
 80063f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	785b      	ldrb	r3, [r3, #1]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fa61 	bl	80068c4 <RTC_ByteToBcd2>
 8006402:	4603      	mov	r3, r0
 8006404:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006406:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	789b      	ldrb	r3, [r3, #2]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fa59 	bl	80068c4 <RTC_ByteToBcd2>
 8006412:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006414:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	e00e      	b.n	8006442 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	78db      	ldrb	r3, [r3, #3]
 8006428:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006430:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006436:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	22ca      	movs	r2, #202	@ 0xca
 8006448:	625a      	str	r2, [r3, #36]	@ 0x24
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2253      	movs	r2, #83	@ 0x53
 8006450:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f9c4 	bl	80067e0 <RTC_EnterInitMode>
 8006458:	4603      	mov	r3, r0
 800645a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10c      	bne.n	800647c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800646c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006470:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f9e8 	bl	8006848 <RTC_ExitInitMode>
 8006478:	4603      	mov	r3, r0
 800647a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	22ff      	movs	r2, #255	@ 0xff
 8006482:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006484:	7cfb      	ldrb	r3, [r7, #19]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800649a:	7cfb      	ldrb	r3, [r7, #19]
}
 800649c:	4618      	mov	r0, r3
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd90      	pop	{r4, r7, pc}

080064a4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80064ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80064be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	0c1b      	lsrs	r3, r3, #16
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	0a1b      	lsrs	r3, r3, #8
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	0b5b      	lsrs	r3, r3, #13
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11a      	bne.n	8006534 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	78db      	ldrb	r3, [r3, #3]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f9fe 	bl	8006904 <RTC_Bcd2ToByte>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	4618      	mov	r0, r3
 8006516:	f000 f9f5 	bl	8006904 <RTC_Bcd2ToByte>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	789b      	ldrb	r3, [r3, #2]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f9ec 	bl	8006904 <RTC_Bcd2ToByte>
 800652c:	4603      	mov	r3, r0
 800652e:	461a      	mov	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800653e:	b590      	push	{r4, r7, lr}
 8006540:	b089      	sub	sp, #36	@ 0x24
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_RTC_SetAlarm+0x1a>
 8006554:	2302      	movs	r3, #2
 8006556:	e11b      	b.n	8006790 <HAL_RTC_SetAlarm+0x252>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d137      	bne.n	80065de <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f99c 	bl	80068c4 <RTC_ByteToBcd2>
 800658c:	4603      	mov	r3, r0
 800658e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f995 	bl	80068c4 <RTC_ByteToBcd2>
 800659a:	4603      	mov	r3, r0
 800659c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800659e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	789b      	ldrb	r3, [r3, #2]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 f98d 	bl	80068c4 <RTC_ByteToBcd2>
 80065aa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80065ac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	78db      	ldrb	r3, [r3, #3]
 80065b4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80065b6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 f97f 	bl	80068c4 <RTC_ByteToBcd2>
 80065c6:	4603      	mov	r3, r0
 80065c8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80065ca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80065d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80065d8:	4313      	orrs	r3, r2
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e023      	b.n	8006626 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80065fe:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006604:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800660c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006614:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006616:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800661c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006622:	4313      	orrs	r3, r2
 8006624:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	4313      	orrs	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	22ca      	movs	r2, #202	@ 0xca
 8006638:	625a      	str	r2, [r3, #36]	@ 0x24
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2253      	movs	r2, #83	@ 0x53
 8006640:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800664a:	d14a      	bne.n	80066e2 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800665a:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800666c:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800667c:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800667e:	f7fd fc91 	bl	8003fa4 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006684:	e015      	b.n	80066b2 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006686:	f7fd fc8d 	bl	8003fa4 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006694:	d90d      	bls.n	80066b2 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	22ff      	movs	r2, #255	@ 0xff
 800669c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2203      	movs	r2, #3
 80066a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e06e      	b.n	8006790 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0e2      	beq.n	8006686 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	e049      	b.n	8006776 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80066f0:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006702:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006712:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006714:	f7fd fc46 	bl	8003fa4 <HAL_GetTick>
 8006718:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800671a:	e015      	b.n	8006748 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800671c:	f7fd fc42 	bl	8003fa4 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800672a:	d90d      	bls.n	8006748 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	22ff      	movs	r2, #255	@ 0xff
 8006732:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2203      	movs	r2, #3
 8006738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e023      	b.n	8006790 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0e2      	beq.n	800671c <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006774:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	22ff      	movs	r2, #255	@ 0xff
 800677c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3724      	adds	r7, #36	@ 0x24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd90      	pop	{r4, r7, pc}

08006798 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0d      	ldr	r2, [pc, #52]	@ (80067dc <HAL_RTC_WaitForSynchro+0x44>)
 80067a6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80067a8:	f7fd fbfc 	bl	8003fa4 <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067ae:	e009      	b.n	80067c4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067b0:	f7fd fbf8 	bl	8003fa4 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067be:	d901      	bls.n	80067c4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e007      	b.n	80067d4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0ee      	beq.n	80067b0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	0003ff5f 	.word	0x0003ff5f

080067e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d120      	bne.n	800683c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006802:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006804:	f7fd fbce 	bl	8003fa4 <HAL_GetTick>
 8006808:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800680a:	e00d      	b.n	8006828 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800680c:	f7fd fbca 	bl	8003fa4 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800681a:	d905      	bls.n	8006828 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2203      	movs	r2, #3
 8006824:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <RTC_EnterInitMode+0x5c>
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d1e7      	bne.n	800680c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006854:	4b1a      	ldr	r3, [pc, #104]	@ (80068c0 <RTC_ExitInitMode+0x78>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4a19      	ldr	r2, [pc, #100]	@ (80068c0 <RTC_ExitInitMode+0x78>)
 800685a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800685e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006860:	4b17      	ldr	r3, [pc, #92]	@ (80068c0 <RTC_ExitInitMode+0x78>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10c      	bne.n	8006886 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ff93 	bl	8006798 <HAL_RTC_WaitForSynchro>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01e      	beq.n	80068b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2203      	movs	r2, #3
 800687c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	73fb      	strb	r3, [r7, #15]
 8006884:	e017      	b.n	80068b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006886:	4b0e      	ldr	r3, [pc, #56]	@ (80068c0 <RTC_ExitInitMode+0x78>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4a0d      	ldr	r2, [pc, #52]	@ (80068c0 <RTC_ExitInitMode+0x78>)
 800688c:	f023 0320 	bic.w	r3, r3, #32
 8006890:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff ff80 	bl	8006798 <HAL_RTC_WaitForSynchro>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2203      	movs	r2, #3
 80068a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80068aa:	4b05      	ldr	r3, [pc, #20]	@ (80068c0 <RTC_ExitInitMode+0x78>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	4a04      	ldr	r2, [pc, #16]	@ (80068c0 <RTC_ExitInitMode+0x78>)
 80068b0:	f043 0320 	orr.w	r3, r3, #32
 80068b4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40002800 	.word	0x40002800

080068c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80068d6:	e005      	b.n	80068e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3301      	adds	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	3b0a      	subs	r3, #10
 80068e2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	2b09      	cmp	r3, #9
 80068e8:	d8f6      	bhi.n	80068d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	b2db      	uxtb	r3, r3
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	4603      	mov	r3, r0
 800690c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	b2db      	uxtb	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	0092      	lsls	r2, r2, #2
 8006918:	4413      	add	r3, r2
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	b2da      	uxtb	r2, r3
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	4413      	add	r3, r2
 800692a:	b2db      	uxtb	r3, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e049      	b.n	80069de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f841 	bl	80069e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f000 f9e0 	bl	8006d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d001      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e04f      	b.n	8006ab4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a23      	ldr	r2, [pc, #140]	@ (8006ac0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01d      	beq.n	8006a72 <HAL_TIM_Base_Start_IT+0x76>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a3e:	d018      	beq.n	8006a72 <HAL_TIM_Base_Start_IT+0x76>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d013      	beq.n	8006a72 <HAL_TIM_Base_Start_IT+0x76>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00e      	beq.n	8006a72 <HAL_TIM_Base_Start_IT+0x76>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1c      	ldr	r2, [pc, #112]	@ (8006acc <HAL_TIM_Base_Start_IT+0xd0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d009      	beq.n	8006a72 <HAL_TIM_Base_Start_IT+0x76>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a1b      	ldr	r2, [pc, #108]	@ (8006ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d004      	beq.n	8006a72 <HAL_TIM_Base_Start_IT+0x76>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a19      	ldr	r2, [pc, #100]	@ (8006ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d115      	bne.n	8006a9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	4b17      	ldr	r3, [pc, #92]	@ (8006ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b06      	cmp	r3, #6
 8006a82:	d015      	beq.n	8006ab0 <HAL_TIM_Base_Start_IT+0xb4>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a8a:	d011      	beq.n	8006ab0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9c:	e008      	b.n	8006ab0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0201 	orr.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e000      	b.n	8006ab2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40000c00 	.word	0x40000c00
 8006ad0:	40013400 	.word	0x40013400
 8006ad4:	40014000 	.word	0x40014000
 8006ad8:	00010007 	.word	0x00010007

08006adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d020      	beq.n	8006b40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01b      	beq.n	8006b40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f06f 0202 	mvn.w	r2, #2
 8006b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f8e9 	bl	8006cfe <HAL_TIM_IC_CaptureCallback>
 8006b2c:	e005      	b.n	8006b3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f8db 	bl	8006cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f8ec 	bl	8006d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 0304 	and.w	r3, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d020      	beq.n	8006b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01b      	beq.n	8006b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f06f 0204 	mvn.w	r2, #4
 8006b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2202      	movs	r2, #2
 8006b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f8c3 	bl	8006cfe <HAL_TIM_IC_CaptureCallback>
 8006b78:	e005      	b.n	8006b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8b5 	bl	8006cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f8c6 	bl	8006d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d020      	beq.n	8006bd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01b      	beq.n	8006bd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0208 	mvn.w	r2, #8
 8006ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2204      	movs	r2, #4
 8006bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f89d 	bl	8006cfe <HAL_TIM_IC_CaptureCallback>
 8006bc4:	e005      	b.n	8006bd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f88f 	bl	8006cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8a0 	bl	8006d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f003 0310 	and.w	r3, r3, #16
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d020      	beq.n	8006c24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01b      	beq.n	8006c24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0210 	mvn.w	r2, #16
 8006bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f877 	bl	8006cfe <HAL_TIM_IC_CaptureCallback>
 8006c10:	e005      	b.n	8006c1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f869 	bl	8006cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f87a 	bl	8006d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0201 	mvn.w	r2, #1
 8006c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fc fcb8 	bl	80035b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00c      	beq.n	8006c76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f913 	bl	8006e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00c      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d007      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f90b 	bl	8006eb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00c      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f834 	bl	8006d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00c      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f06f 0220 	mvn.w	r2, #32
 8006cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8d3 	bl	8006e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a46      	ldr	r2, [pc, #280]	@ (8006e68 <TIM_Base_SetConfig+0x12c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5a:	d00f      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a43      	ldr	r2, [pc, #268]	@ (8006e6c <TIM_Base_SetConfig+0x130>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00b      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a42      	ldr	r2, [pc, #264]	@ (8006e70 <TIM_Base_SetConfig+0x134>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d007      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a41      	ldr	r2, [pc, #260]	@ (8006e74 <TIM_Base_SetConfig+0x138>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a40      	ldr	r2, [pc, #256]	@ (8006e78 <TIM_Base_SetConfig+0x13c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a35      	ldr	r2, [pc, #212]	@ (8006e68 <TIM_Base_SetConfig+0x12c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d01f      	beq.n	8006dd6 <TIM_Base_SetConfig+0x9a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9c:	d01b      	beq.n	8006dd6 <TIM_Base_SetConfig+0x9a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a32      	ldr	r2, [pc, #200]	@ (8006e6c <TIM_Base_SetConfig+0x130>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d017      	beq.n	8006dd6 <TIM_Base_SetConfig+0x9a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a31      	ldr	r2, [pc, #196]	@ (8006e70 <TIM_Base_SetConfig+0x134>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d013      	beq.n	8006dd6 <TIM_Base_SetConfig+0x9a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a30      	ldr	r2, [pc, #192]	@ (8006e74 <TIM_Base_SetConfig+0x138>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00f      	beq.n	8006dd6 <TIM_Base_SetConfig+0x9a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2f      	ldr	r2, [pc, #188]	@ (8006e78 <TIM_Base_SetConfig+0x13c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00b      	beq.n	8006dd6 <TIM_Base_SetConfig+0x9a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8006e7c <TIM_Base_SetConfig+0x140>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d007      	beq.n	8006dd6 <TIM_Base_SetConfig+0x9a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8006e80 <TIM_Base_SetConfig+0x144>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d003      	beq.n	8006dd6 <TIM_Base_SetConfig+0x9a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e84 <TIM_Base_SetConfig+0x148>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d108      	bne.n	8006de8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a16      	ldr	r2, [pc, #88]	@ (8006e68 <TIM_Base_SetConfig+0x12c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00f      	beq.n	8006e34 <TIM_Base_SetConfig+0xf8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a18      	ldr	r2, [pc, #96]	@ (8006e78 <TIM_Base_SetConfig+0x13c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00b      	beq.n	8006e34 <TIM_Base_SetConfig+0xf8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a17      	ldr	r2, [pc, #92]	@ (8006e7c <TIM_Base_SetConfig+0x140>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d007      	beq.n	8006e34 <TIM_Base_SetConfig+0xf8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a16      	ldr	r2, [pc, #88]	@ (8006e80 <TIM_Base_SetConfig+0x144>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_Base_SetConfig+0xf8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a15      	ldr	r2, [pc, #84]	@ (8006e84 <TIM_Base_SetConfig+0x148>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d103      	bne.n	8006e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d105      	bne.n	8006e5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	611a      	str	r2, [r3, #16]
  }
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40013400 	.word	0x40013400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800

08006e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e040      	b.n	8006f58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fc ff20 	bl	8003d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2224      	movs	r2, #36	@ 0x24
 8006ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 feda 	bl	8007cc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc1f 	bl	8007754 <UART_SetConfig>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e01b      	b.n	8006f58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 ff59 	bl	8007e08 <UART_CheckIdleState>
 8006f56:	4603      	mov	r3, r0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	@ 0x28
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d177      	bne.n	8007068 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_UART_Transmit+0x24>
 8006f7e:	88fb      	ldrh	r3, [r7, #6]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e070      	b.n	800706a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2221      	movs	r2, #33	@ 0x21
 8006f94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f96:	f7fd f805 	bl	8003fa4 <HAL_GetTick>
 8006f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb4:	d108      	bne.n	8006fc8 <HAL_UART_Transmit+0x68>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d104      	bne.n	8006fc8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	e003      	b.n	8006fd0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fd0:	e02f      	b.n	8007032 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2180      	movs	r1, #128	@ 0x80
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 ffbb 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e03b      	b.n	800706a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	881a      	ldrh	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007004:	b292      	uxth	r2, r2
 8007006:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	3302      	adds	r3, #2
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	e007      	b.n	8007020 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	3301      	adds	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1c9      	bne.n	8006fd2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2200      	movs	r2, #0
 8007046:	2140      	movs	r1, #64	@ 0x40
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 ff85 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d004      	beq.n	800705e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2220      	movs	r2, #32
 8007058:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e005      	b.n	800706a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2220      	movs	r2, #32
 8007062:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	e000      	b.n	800706a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007068:	2302      	movs	r3, #2
  }
}
 800706a:	4618      	mov	r0, r3
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08a      	sub	sp, #40	@ 0x28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007088:	2b20      	cmp	r3, #32
 800708a:	d137      	bne.n	80070fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_UART_Receive_IT+0x24>
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e030      	b.n	80070fe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a18      	ldr	r2, [pc, #96]	@ (8007108 <HAL_UART_Receive_IT+0x94>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d01f      	beq.n	80070ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d018      	beq.n	80070ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	613b      	str	r3, [r7, #16]
   return(result);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	623b      	str	r3, [r7, #32]
 80070da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e6      	bne.n	80070ba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	461a      	mov	r2, r3
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 ff9e 	bl	8008034 <UART_Start_Receive_IT>
 80070f8:	4603      	mov	r3, r0
 80070fa:	e000      	b.n	80070fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070fc:	2302      	movs	r3, #2
  }
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3728      	adds	r7, #40	@ 0x28
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40008000 	.word	0x40008000

0800710c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b0ba      	sub	sp, #232	@ 0xe8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007132:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007136:	f640 030f 	movw	r3, #2063	@ 0x80f
 800713a:	4013      	ands	r3, r2
 800713c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d115      	bne.n	8007174 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00f      	beq.n	8007174 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d009      	beq.n	8007174 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 82ca 	beq.w	80076fe <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
      }
      return;
 8007172:	e2c4      	b.n	80076fe <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8117 	beq.w	80073ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800717e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800718a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800718e:	4b85      	ldr	r3, [pc, #532]	@ (80073a4 <HAL_UART_IRQHandler+0x298>)
 8007190:	4013      	ands	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 810a 	beq.w	80073ac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d011      	beq.n	80071c8 <HAL_UART_IRQHandler+0xbc>
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2201      	movs	r2, #1
 80071b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071be:	f043 0201 	orr.w	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d011      	beq.n	80071f8 <HAL_UART_IRQHandler+0xec>
 80071d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2202      	movs	r2, #2
 80071e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ee:	f043 0204 	orr.w	r2, r3, #4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d011      	beq.n	8007228 <HAL_UART_IRQHandler+0x11c>
 8007204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2204      	movs	r2, #4
 8007216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800721e:	f043 0202 	orr.w	r2, r3, #2
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800722c:	f003 0308 	and.w	r3, r3, #8
 8007230:	2b00      	cmp	r3, #0
 8007232:	d017      	beq.n	8007264 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d105      	bne.n	800724c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007244:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2208      	movs	r2, #8
 8007252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800725a:	f043 0208 	orr.w	r2, r3, #8
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800726c:	2b00      	cmp	r3, #0
 800726e:	d012      	beq.n	8007296 <HAL_UART_IRQHandler+0x18a>
 8007270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007274:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00c      	beq.n	8007296 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800728c:	f043 0220 	orr.w	r2, r3, #32
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8230 	beq.w	8007702 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072de:	2b40      	cmp	r3, #64	@ 0x40
 80072e0:	d005      	beq.n	80072ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d04f      	beq.n	800738e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 f82c 	bl	800834c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fe:	2b40      	cmp	r3, #64	@ 0x40
 8007300:	d141      	bne.n	8007386 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800731c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800732e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007332:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800733a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1d9      	bne.n	8007302 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007352:	2b00      	cmp	r3, #0
 8007354:	d013      	beq.n	800737e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800735a:	4a13      	ldr	r2, [pc, #76]	@ (80073a8 <HAL_UART_IRQHandler+0x29c>)
 800735c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007362:	4618      	mov	r0, r3
 8007364:	f7fd f862 	bl	800442c <HAL_DMA_Abort_IT>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d017      	beq.n	800739e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800737c:	e00f      	b.n	800739e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f9de 	bl	8007740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007384:	e00b      	b.n	800739e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9da 	bl	8007740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	e007      	b.n	800739e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9d6 	bl	8007740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800739c:	e1b1      	b.n	8007702 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739e:	bf00      	nop
    return;
 80073a0:	e1af      	b.n	8007702 <HAL_UART_IRQHandler+0x5f6>
 80073a2:	bf00      	nop
 80073a4:	04000120 	.word	0x04000120
 80073a8:	080085fd 	.word	0x080085fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 816a 	bne.w	800768a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 8163 	beq.w	800768a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 815c 	beq.w	800768a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2210      	movs	r2, #16
 80073d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e4:	2b40      	cmp	r3, #64	@ 0x40
 80073e6:	f040 80d4 	bne.w	8007592 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80ad 	beq.w	800755a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800740a:	429a      	cmp	r2, r3
 800740c:	f080 80a5 	bcs.w	800755a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007416:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	f040 8086 	bne.w	8007538 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800745a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007462:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800746e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1da      	bne.n	800742c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800749a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800749e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e1      	bne.n	8007476 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3308      	adds	r3, #8
 80074b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e3      	bne.n	80074b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007508:	f023 0310 	bic.w	r3, r3, #16
 800750c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800751a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800751c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e4      	bne.n	80074f8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007532:	4618      	mov	r0, r3
 8007534:	f7fc ff3c 	bl	80043b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800754a:	b29b      	uxth	r3, r3
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	b29b      	uxth	r3, r3
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fc f882 	bl	800365c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007558:	e0d5      	b.n	8007706 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007564:	429a      	cmp	r2, r3
 8007566:	f040 80ce 	bne.w	8007706 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b20      	cmp	r3, #32
 8007578:	f040 80c5 	bne.w	8007706 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fc f866 	bl	800365c <HAL_UARTEx_RxEventCallback>
      return;
 8007590:	e0b9      	b.n	8007706 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 80ab 	beq.w	800770a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80075b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80a6 	beq.w	800770a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e4      	bne.n	80075be <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	623b      	str	r3, [r7, #32]
   return(result);
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007618:	633a      	str	r2, [r7, #48]	@ 0x30
 800761a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800761e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e3      	bne.n	80075f4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	60fb      	str	r3, [r7, #12]
   return(result);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 0310 	bic.w	r3, r3, #16
 8007654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	617b      	str	r3, [r7, #20]
   return(result);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e4      	bne.n	8007640 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800767c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fb ffea 	bl	800365c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007688:	e03f      	b.n	800770a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800768e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00e      	beq.n	80076b4 <HAL_UART_IRQHandler+0x5a8>
 8007696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800769a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d008      	beq.n	80076b4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80076aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f9a1 	bl	80089f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076b2:	e02d      	b.n	8007710 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00e      	beq.n	80076de <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01c      	beq.n	800770e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
    }
    return;
 80076dc:	e017      	b.n	800770e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d012      	beq.n	8007710 <HAL_UART_IRQHandler+0x604>
 80076ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00c      	beq.n	8007710 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 ff96 	bl	8008628 <UART_EndTransmit_IT>
    return;
 80076fc:	e008      	b.n	8007710 <HAL_UART_IRQHandler+0x604>
      return;
 80076fe:	bf00      	nop
 8007700:	e006      	b.n	8007710 <HAL_UART_IRQHandler+0x604>
    return;
 8007702:	bf00      	nop
 8007704:	e004      	b.n	8007710 <HAL_UART_IRQHandler+0x604>
      return;
 8007706:	bf00      	nop
 8007708:	e002      	b.n	8007710 <HAL_UART_IRQHandler+0x604>
      return;
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <HAL_UART_IRQHandler+0x604>
    return;
 800770e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007710:	37e8      	adds	r7, #232	@ 0xe8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop

08007718 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007758:	b08a      	sub	sp, #40	@ 0x28
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	431a      	orrs	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	431a      	orrs	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	4313      	orrs	r3, r2
 800777a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4ba4      	ldr	r3, [pc, #656]	@ (8007a14 <UART_SetConfig+0x2c0>)
 8007784:	4013      	ands	r3, r2
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	6812      	ldr	r2, [r2, #0]
 800778a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800778c:	430b      	orrs	r3, r1
 800778e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a99      	ldr	r2, [pc, #612]	@ (8007a18 <UART_SetConfig+0x2c4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d004      	beq.n	80077c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077bc:	4313      	orrs	r3, r2
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d0:	430a      	orrs	r2, r1
 80077d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a90      	ldr	r2, [pc, #576]	@ (8007a1c <UART_SetConfig+0x2c8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d126      	bne.n	800782c <UART_SetConfig+0xd8>
 80077de:	4b90      	ldr	r3, [pc, #576]	@ (8007a20 <UART_SetConfig+0x2cc>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d81b      	bhi.n	8007824 <UART_SetConfig+0xd0>
 80077ec:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <UART_SetConfig+0xa0>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007805 	.word	0x08007805
 80077f8:	08007815 	.word	0x08007815
 80077fc:	0800780d 	.word	0x0800780d
 8007800:	0800781d 	.word	0x0800781d
 8007804:	2301      	movs	r3, #1
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e116      	b.n	8007a3a <UART_SetConfig+0x2e6>
 800780c:	2302      	movs	r3, #2
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e112      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781a:	e10e      	b.n	8007a3a <UART_SetConfig+0x2e6>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007822:	e10a      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800782a:	e106      	b.n	8007a3a <UART_SetConfig+0x2e6>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a7c      	ldr	r2, [pc, #496]	@ (8007a24 <UART_SetConfig+0x2d0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d138      	bne.n	80078a8 <UART_SetConfig+0x154>
 8007836:	4b7a      	ldr	r3, [pc, #488]	@ (8007a20 <UART_SetConfig+0x2cc>)
 8007838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783c:	f003 030c 	and.w	r3, r3, #12
 8007840:	2b0c      	cmp	r3, #12
 8007842:	d82d      	bhi.n	80078a0 <UART_SetConfig+0x14c>
 8007844:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <UART_SetConfig+0xf8>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007881 	.word	0x08007881
 8007850:	080078a1 	.word	0x080078a1
 8007854:	080078a1 	.word	0x080078a1
 8007858:	080078a1 	.word	0x080078a1
 800785c:	08007891 	.word	0x08007891
 8007860:	080078a1 	.word	0x080078a1
 8007864:	080078a1 	.word	0x080078a1
 8007868:	080078a1 	.word	0x080078a1
 800786c:	08007889 	.word	0x08007889
 8007870:	080078a1 	.word	0x080078a1
 8007874:	080078a1 	.word	0x080078a1
 8007878:	080078a1 	.word	0x080078a1
 800787c:	08007899 	.word	0x08007899
 8007880:	2300      	movs	r3, #0
 8007882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007886:	e0d8      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007888:	2302      	movs	r3, #2
 800788a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800788e:	e0d4      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007890:	2304      	movs	r3, #4
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007896:	e0d0      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007898:	2308      	movs	r3, #8
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800789e:	e0cc      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80078a0:	2310      	movs	r3, #16
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078a6:	e0c8      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a5e      	ldr	r2, [pc, #376]	@ (8007a28 <UART_SetConfig+0x2d4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d125      	bne.n	80078fe <UART_SetConfig+0x1aa>
 80078b2:	4b5b      	ldr	r3, [pc, #364]	@ (8007a20 <UART_SetConfig+0x2cc>)
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078bc:	2b30      	cmp	r3, #48	@ 0x30
 80078be:	d016      	beq.n	80078ee <UART_SetConfig+0x19a>
 80078c0:	2b30      	cmp	r3, #48	@ 0x30
 80078c2:	d818      	bhi.n	80078f6 <UART_SetConfig+0x1a2>
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d00a      	beq.n	80078de <UART_SetConfig+0x18a>
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d814      	bhi.n	80078f6 <UART_SetConfig+0x1a2>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <UART_SetConfig+0x182>
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d008      	beq.n	80078e6 <UART_SetConfig+0x192>
 80078d4:	e00f      	b.n	80078f6 <UART_SetConfig+0x1a2>
 80078d6:	2300      	movs	r3, #0
 80078d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078dc:	e0ad      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80078de:	2302      	movs	r3, #2
 80078e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078e4:	e0a9      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80078e6:	2304      	movs	r3, #4
 80078e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ec:	e0a5      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80078ee:	2308      	movs	r3, #8
 80078f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078f4:	e0a1      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80078f6:	2310      	movs	r3, #16
 80078f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078fc:	e09d      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a4a      	ldr	r2, [pc, #296]	@ (8007a2c <UART_SetConfig+0x2d8>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d125      	bne.n	8007954 <UART_SetConfig+0x200>
 8007908:	4b45      	ldr	r3, [pc, #276]	@ (8007a20 <UART_SetConfig+0x2cc>)
 800790a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800790e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007912:	2bc0      	cmp	r3, #192	@ 0xc0
 8007914:	d016      	beq.n	8007944 <UART_SetConfig+0x1f0>
 8007916:	2bc0      	cmp	r3, #192	@ 0xc0
 8007918:	d818      	bhi.n	800794c <UART_SetConfig+0x1f8>
 800791a:	2b80      	cmp	r3, #128	@ 0x80
 800791c:	d00a      	beq.n	8007934 <UART_SetConfig+0x1e0>
 800791e:	2b80      	cmp	r3, #128	@ 0x80
 8007920:	d814      	bhi.n	800794c <UART_SetConfig+0x1f8>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <UART_SetConfig+0x1d8>
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d008      	beq.n	800793c <UART_SetConfig+0x1e8>
 800792a:	e00f      	b.n	800794c <UART_SetConfig+0x1f8>
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007932:	e082      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007934:	2302      	movs	r3, #2
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793a:	e07e      	b.n	8007a3a <UART_SetConfig+0x2e6>
 800793c:	2304      	movs	r3, #4
 800793e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007942:	e07a      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007944:	2308      	movs	r3, #8
 8007946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800794a:	e076      	b.n	8007a3a <UART_SetConfig+0x2e6>
 800794c:	2310      	movs	r3, #16
 800794e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007952:	e072      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a35      	ldr	r2, [pc, #212]	@ (8007a30 <UART_SetConfig+0x2dc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d12a      	bne.n	80079b4 <UART_SetConfig+0x260>
 800795e:	4b30      	ldr	r3, [pc, #192]	@ (8007a20 <UART_SetConfig+0x2cc>)
 8007960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800796c:	d01a      	beq.n	80079a4 <UART_SetConfig+0x250>
 800796e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007972:	d81b      	bhi.n	80079ac <UART_SetConfig+0x258>
 8007974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007978:	d00c      	beq.n	8007994 <UART_SetConfig+0x240>
 800797a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800797e:	d815      	bhi.n	80079ac <UART_SetConfig+0x258>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <UART_SetConfig+0x238>
 8007984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007988:	d008      	beq.n	800799c <UART_SetConfig+0x248>
 800798a:	e00f      	b.n	80079ac <UART_SetConfig+0x258>
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007992:	e052      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007994:	2302      	movs	r3, #2
 8007996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800799a:	e04e      	b.n	8007a3a <UART_SetConfig+0x2e6>
 800799c:	2304      	movs	r3, #4
 800799e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a2:	e04a      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80079a4:	2308      	movs	r3, #8
 80079a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079aa:	e046      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80079ac:	2310      	movs	r3, #16
 80079ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079b2:	e042      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a17      	ldr	r2, [pc, #92]	@ (8007a18 <UART_SetConfig+0x2c4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d13a      	bne.n	8007a34 <UART_SetConfig+0x2e0>
 80079be:	4b18      	ldr	r3, [pc, #96]	@ (8007a20 <UART_SetConfig+0x2cc>)
 80079c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079cc:	d01a      	beq.n	8007a04 <UART_SetConfig+0x2b0>
 80079ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079d2:	d81b      	bhi.n	8007a0c <UART_SetConfig+0x2b8>
 80079d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d8:	d00c      	beq.n	80079f4 <UART_SetConfig+0x2a0>
 80079da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079de:	d815      	bhi.n	8007a0c <UART_SetConfig+0x2b8>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <UART_SetConfig+0x298>
 80079e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e8:	d008      	beq.n	80079fc <UART_SetConfig+0x2a8>
 80079ea:	e00f      	b.n	8007a0c <UART_SetConfig+0x2b8>
 80079ec:	2300      	movs	r3, #0
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f2:	e022      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80079f4:	2302      	movs	r3, #2
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079fa:	e01e      	b.n	8007a3a <UART_SetConfig+0x2e6>
 80079fc:	2304      	movs	r3, #4
 80079fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a02:	e01a      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007a04:	2308      	movs	r3, #8
 8007a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a0a:	e016      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a12:	e012      	b.n	8007a3a <UART_SetConfig+0x2e6>
 8007a14:	efff69f3 	.word	0xefff69f3
 8007a18:	40008000 	.word	0x40008000
 8007a1c:	40013800 	.word	0x40013800
 8007a20:	40021000 	.word	0x40021000
 8007a24:	40004400 	.word	0x40004400
 8007a28:	40004800 	.word	0x40004800
 8007a2c:	40004c00 	.word	0x40004c00
 8007a30:	40005000 	.word	0x40005000
 8007a34:	2310      	movs	r3, #16
 8007a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a9f      	ldr	r2, [pc, #636]	@ (8007cbc <UART_SetConfig+0x568>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d17a      	bne.n	8007b3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d824      	bhi.n	8007a96 <UART_SetConfig+0x342>
 8007a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a54 <UART_SetConfig+0x300>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007a97 	.word	0x08007a97
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a97 	.word	0x08007a97
 8007a64:	08007a87 	.word	0x08007a87
 8007a68:	08007a97 	.word	0x08007a97
 8007a6c:	08007a97 	.word	0x08007a97
 8007a70:	08007a97 	.word	0x08007a97
 8007a74:	08007a8f 	.word	0x08007a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a78:	f7fd fd92 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8007a7c:	61f8      	str	r0, [r7, #28]
        break;
 8007a7e:	e010      	b.n	8007aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a80:	4b8f      	ldr	r3, [pc, #572]	@ (8007cc0 <UART_SetConfig+0x56c>)
 8007a82:	61fb      	str	r3, [r7, #28]
        break;
 8007a84:	e00d      	b.n	8007aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a86:	f7fd fcf3 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 8007a8a:	61f8      	str	r0, [r7, #28]
        break;
 8007a8c:	e009      	b.n	8007aa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a92:	61fb      	str	r3, [r7, #28]
        break;
 8007a94:	e005      	b.n	8007aa2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 80fb 	beq.w	8007ca0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d305      	bcc.n	8007ac6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d903      	bls.n	8007ace <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007acc:	e0e8      	b.n	8007ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	461c      	mov	r4, r3
 8007ad4:	4615      	mov	r5, r2
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	022b      	lsls	r3, r5, #8
 8007ae0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ae4:	0222      	lsls	r2, r4, #8
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	6849      	ldr	r1, [r1, #4]
 8007aea:	0849      	lsrs	r1, r1, #1
 8007aec:	2000      	movs	r0, #0
 8007aee:	4688      	mov	r8, r1
 8007af0:	4681      	mov	r9, r0
 8007af2:	eb12 0a08 	adds.w	sl, r2, r8
 8007af6:	eb43 0b09 	adc.w	fp, r3, r9
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	603b      	str	r3, [r7, #0]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b08:	4650      	mov	r0, sl
 8007b0a:	4659      	mov	r1, fp
 8007b0c:	f7f9 f8cc 	bl	8000ca8 <__aeabi_uldivmod>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4613      	mov	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b1e:	d308      	bcc.n	8007b32 <UART_SetConfig+0x3de>
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b26:	d204      	bcs.n	8007b32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	60da      	str	r2, [r3, #12]
 8007b30:	e0b6      	b.n	8007ca0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b38:	e0b2      	b.n	8007ca0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b42:	d15e      	bne.n	8007c02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007b44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d828      	bhi.n	8007b9e <UART_SetConfig+0x44a>
 8007b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <UART_SetConfig+0x400>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007b79 	.word	0x08007b79
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b89 	.word	0x08007b89
 8007b60:	08007b9f 	.word	0x08007b9f
 8007b64:	08007b8f 	.word	0x08007b8f
 8007b68:	08007b9f 	.word	0x08007b9f
 8007b6c:	08007b9f 	.word	0x08007b9f
 8007b70:	08007b9f 	.word	0x08007b9f
 8007b74:	08007b97 	.word	0x08007b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b78:	f7fd fd12 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8007b7c:	61f8      	str	r0, [r7, #28]
        break;
 8007b7e:	e014      	b.n	8007baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b80:	f7fd fd24 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 8007b84:	61f8      	str	r0, [r7, #28]
        break;
 8007b86:	e010      	b.n	8007baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b88:	4b4d      	ldr	r3, [pc, #308]	@ (8007cc0 <UART_SetConfig+0x56c>)
 8007b8a:	61fb      	str	r3, [r7, #28]
        break;
 8007b8c:	e00d      	b.n	8007baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b8e:	f7fd fc6f 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 8007b92:	61f8      	str	r0, [r7, #28]
        break;
 8007b94:	e009      	b.n	8007baa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b9a:	61fb      	str	r3, [r7, #28]
        break;
 8007b9c:	e005      	b.n	8007baa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d077      	beq.n	8007ca0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	005a      	lsls	r2, r3, #1
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	441a      	add	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b0f      	cmp	r3, #15
 8007bca:	d916      	bls.n	8007bfa <UART_SetConfig+0x4a6>
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bd2:	d212      	bcs.n	8007bfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f023 030f 	bic.w	r3, r3, #15
 8007bdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	8afb      	ldrh	r3, [r7, #22]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	8afa      	ldrh	r2, [r7, #22]
 8007bf6:	60da      	str	r2, [r3, #12]
 8007bf8:	e052      	b.n	8007ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c00:	e04e      	b.n	8007ca0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c06:	2b08      	cmp	r3, #8
 8007c08:	d827      	bhi.n	8007c5a <UART_SetConfig+0x506>
 8007c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c10 <UART_SetConfig+0x4bc>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c35 	.word	0x08007c35
 8007c14:	08007c3d 	.word	0x08007c3d
 8007c18:	08007c45 	.word	0x08007c45
 8007c1c:	08007c5b 	.word	0x08007c5b
 8007c20:	08007c4b 	.word	0x08007c4b
 8007c24:	08007c5b 	.word	0x08007c5b
 8007c28:	08007c5b 	.word	0x08007c5b
 8007c2c:	08007c5b 	.word	0x08007c5b
 8007c30:	08007c53 	.word	0x08007c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c34:	f7fd fcb4 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8007c38:	61f8      	str	r0, [r7, #28]
        break;
 8007c3a:	e014      	b.n	8007c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c3c:	f7fd fcc6 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 8007c40:	61f8      	str	r0, [r7, #28]
        break;
 8007c42:	e010      	b.n	8007c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c44:	4b1e      	ldr	r3, [pc, #120]	@ (8007cc0 <UART_SetConfig+0x56c>)
 8007c46:	61fb      	str	r3, [r7, #28]
        break;
 8007c48:	e00d      	b.n	8007c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4a:	f7fd fc11 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 8007c4e:	61f8      	str	r0, [r7, #28]
        break;
 8007c50:	e009      	b.n	8007c66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c56:	61fb      	str	r3, [r7, #28]
        break;
 8007c58:	e005      	b.n	8007c66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c64:	bf00      	nop
    }

    if (pclk != 0U)
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d019      	beq.n	8007ca0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	085a      	lsrs	r2, r3, #1
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	441a      	add	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	d909      	bls.n	8007c9a <UART_SetConfig+0x546>
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c8c:	d205      	bcs.n	8007c9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60da      	str	r2, [r3, #12]
 8007c98:	e002      	b.n	8007ca0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007cac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3728      	adds	r7, #40	@ 0x28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cba:	bf00      	nop
 8007cbc:	40008000 	.word	0x40008000
 8007cc0:	00f42400 	.word	0x00f42400

08007cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01a      	beq.n	8007dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dc2:	d10a      	bne.n	8007dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b098      	sub	sp, #96	@ 0x60
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e18:	f7fc f8c4 	bl	8003fa4 <HAL_GetTick>
 8007e1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d12e      	bne.n	8007e8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e34:	2200      	movs	r2, #0
 8007e36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f88c 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d021      	beq.n	8007e8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4e:	e853 3f00 	ldrex	r3, [r3]
 8007e52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e6      	bne.n	8007e46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e062      	b.n	8007f50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d149      	bne.n	8007f2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f856 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d03c      	beq.n	8007f2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e6      	bne.n	8007eb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0301 	bic.w	r3, r3, #1
 8007efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f04:	61fa      	str	r2, [r7, #28]
 8007f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	69b9      	ldr	r1, [r7, #24]
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	617b      	str	r3, [r7, #20]
   return(result);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e5      	bne.n	8007ee4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e011      	b.n	8007f50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3758      	adds	r7, #88	@ 0x58
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	4613      	mov	r3, r2
 8007f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f68:	e04f      	b.n	800800a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d04b      	beq.n	800800a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f72:	f7fc f817 	bl	8003fa4 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d302      	bcc.n	8007f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e04e      	b.n	800802a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d037      	beq.n	800800a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b80      	cmp	r3, #128	@ 0x80
 8007f9e:	d034      	beq.n	800800a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b40      	cmp	r3, #64	@ 0x40
 8007fa4:	d031      	beq.n	800800a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b08      	cmp	r3, #8
 8007fb2:	d110      	bne.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2208      	movs	r2, #8
 8007fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f9c5 	bl	800834c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e029      	b.n	800802a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fe4:	d111      	bne.n	800800a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 f9ab 	bl	800834c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e00f      	b.n	800802a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4013      	ands	r3, r2
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	bf0c      	ite	eq
 800801a:	2301      	moveq	r3, #1
 800801c:	2300      	movne	r3, #0
 800801e:	b2db      	uxtb	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	429a      	cmp	r2, r3
 8008026:	d0a0      	beq.n	8007f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008034:	b480      	push	{r7}
 8008036:	b097      	sub	sp, #92	@ 0x5c
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008066:	d10e      	bne.n	8008086 <UART_Start_Receive_IT+0x52>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d105      	bne.n	800807c <UART_Start_Receive_IT+0x48>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008076:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800807a:	e02d      	b.n	80080d8 <UART_Start_Receive_IT+0xa4>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	22ff      	movs	r2, #255	@ 0xff
 8008080:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008084:	e028      	b.n	80080d8 <UART_Start_Receive_IT+0xa4>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10d      	bne.n	80080aa <UART_Start_Receive_IT+0x76>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <UART_Start_Receive_IT+0x6c>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	22ff      	movs	r2, #255	@ 0xff
 800809a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800809e:	e01b      	b.n	80080d8 <UART_Start_Receive_IT+0xa4>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	227f      	movs	r2, #127	@ 0x7f
 80080a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80080a8:	e016      	b.n	80080d8 <UART_Start_Receive_IT+0xa4>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080b2:	d10d      	bne.n	80080d0 <UART_Start_Receive_IT+0x9c>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d104      	bne.n	80080c6 <UART_Start_Receive_IT+0x92>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	227f      	movs	r2, #127	@ 0x7f
 80080c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80080c4:	e008      	b.n	80080d8 <UART_Start_Receive_IT+0xa4>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	223f      	movs	r2, #63	@ 0x3f
 80080ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80080ce:	e003      	b.n	80080d8 <UART_Start_Receive_IT+0xa4>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2222      	movs	r2, #34	@ 0x22
 80080e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3308      	adds	r3, #8
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fa:	f043 0301 	orr.w	r3, r3, #1
 80080fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3308      	adds	r3, #8
 8008106:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008108:	64ba      	str	r2, [r7, #72]	@ 0x48
 800810a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800810e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e5      	bne.n	80080e8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008124:	d107      	bne.n	8008136 <UART_Start_Receive_IT+0x102>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d103      	bne.n	8008136 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4a21      	ldr	r2, [pc, #132]	@ (80081b8 <UART_Start_Receive_IT+0x184>)
 8008132:	669a      	str	r2, [r3, #104]	@ 0x68
 8008134:	e002      	b.n	800813c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4a20      	ldr	r2, [pc, #128]	@ (80081bc <UART_Start_Receive_IT+0x188>)
 800813a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d019      	beq.n	8008178 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
 8008164:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008168:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e6      	bne.n	8008144 <UART_Start_Receive_IT+0x110>
 8008176:	e018      	b.n	80081aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	613b      	str	r3, [r7, #16]
   return(result);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f043 0320 	orr.w	r3, r3, #32
 800818c:	653b      	str	r3, [r7, #80]	@ 0x50
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008196:	623b      	str	r3, [r7, #32]
 8008198:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	69f9      	ldr	r1, [r7, #28]
 800819c:	6a3a      	ldr	r2, [r7, #32]
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e6      	bne.n	8008178 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	375c      	adds	r7, #92	@ 0x5c
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	08008839 	.word	0x08008839
 80081bc:	0800867d 	.word	0x0800867d

080081c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b096      	sub	sp, #88	@ 0x58
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	88fa      	ldrh	r2, [r7, #6]
 80081d8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2222      	movs	r2, #34	@ 0x22
 80081e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d028      	beq.n	8008246 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f8:	4a3e      	ldr	r2, [pc, #248]	@ (80082f4 <UART_Start_Receive_DMA+0x134>)
 80081fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008200:	4a3d      	ldr	r2, [pc, #244]	@ (80082f8 <UART_Start_Receive_DMA+0x138>)
 8008202:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008208:	4a3c      	ldr	r2, [pc, #240]	@ (80082fc <UART_Start_Receive_DMA+0x13c>)
 800820a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008210:	2200      	movs	r2, #0
 8008212:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3324      	adds	r3, #36	@ 0x24
 800821e:	4619      	mov	r1, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008224:	461a      	mov	r2, r3
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	f7fc f862 	bl	80042f0 <HAL_DMA_Start_IT>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2210      	movs	r2, #16
 8008236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e051      	b.n	80082ea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d018      	beq.n	8008280 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008262:	657b      	str	r3, [r7, #84]	@ 0x54
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800826e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800827a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e6      	bne.n	800824e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	653b      	str	r3, [r7, #80]	@ 0x50
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3308      	adds	r3, #8
 800829e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082a0:	637a      	str	r2, [r7, #52]	@ 0x34
 80082a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80082ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e5      	bne.n	8008280 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	613b      	str	r3, [r7, #16]
   return(result);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3308      	adds	r3, #8
 80082d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082d4:	623a      	str	r2, [r7, #32]
 80082d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	69f9      	ldr	r1, [r7, #28]
 80082da:	6a3a      	ldr	r2, [r7, #32]
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e5      	bne.n	80082b4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3758      	adds	r7, #88	@ 0x58
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	08008415 	.word	0x08008415
 80082f8:	08008541 	.word	0x08008541
 80082fc:	0800857f 	.word	0x0800857f

08008300 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b089      	sub	sp, #36	@ 0x24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	60bb      	str	r3, [r7, #8]
   return(result);
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	61bb      	str	r3, [r7, #24]
 8008328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6979      	ldr	r1, [r7, #20]
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	613b      	str	r3, [r7, #16]
   return(result);
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e6      	bne.n	8008308 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008340:	bf00      	nop
 8008342:	3724      	adds	r7, #36	@ 0x24
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b095      	sub	sp, #84	@ 0x54
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008368:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008372:	643b      	str	r3, [r7, #64]	@ 0x40
 8008374:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e6      	bne.n	8008354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3308      	adds	r3, #8
 800838c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	61fb      	str	r3, [r7, #28]
   return(result);
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f023 0301 	bic.w	r3, r3, #1
 800839c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3308      	adds	r3, #8
 80083a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e5      	bne.n	8008386 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d118      	bne.n	80083f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f023 0310 	bic.w	r3, r3, #16
 80083d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083e0:	61bb      	str	r3, [r7, #24]
 80083e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	6979      	ldr	r1, [r7, #20]
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	613b      	str	r3, [r7, #16]
   return(result);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e6      	bne.n	80083c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008408:	bf00      	nop
 800840a:	3754      	adds	r7, #84	@ 0x54
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b09c      	sub	sp, #112	@ 0x70
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008420:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d171      	bne.n	8008514 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008432:	2200      	movs	r2, #0
 8008434:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800844c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800844e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008456:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008458:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800845c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e6      	bne.n	8008438 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800847a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847c:	f023 0301 	bic.w	r3, r3, #1
 8008480:	667b      	str	r3, [r7, #100]	@ 0x64
 8008482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3308      	adds	r3, #8
 8008488:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800848a:	647a      	str	r2, [r7, #68]	@ 0x44
 800848c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e5      	bne.n	800846a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3308      	adds	r3, #8
 80084a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	623b      	str	r3, [r7, #32]
   return(result);
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80084b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3308      	adds	r3, #8
 80084bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80084be:	633a      	str	r2, [r7, #48]	@ 0x30
 80084c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e5      	bne.n	800849e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084d4:	2220      	movs	r2, #32
 80084d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d118      	bne.n	8008514 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0310 	bic.w	r3, r3, #16
 80084f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	69b9      	ldr	r1, [r7, #24]
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	617b      	str	r3, [r7, #20]
   return(result);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e6      	bne.n	80084e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008516:	2200      	movs	r2, #0
 8008518:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800851a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800851c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800851e:	2b01      	cmp	r3, #1
 8008520:	d107      	bne.n	8008532 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008528:	4619      	mov	r1, r3
 800852a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800852c:	f7fb f896 	bl	800365c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008530:	e002      	b.n	8008538 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008532:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008534:	f7f9 f864 	bl	8001600 <HAL_UART_RxCpltCallback>
}
 8008538:	bf00      	nop
 800853a:	3770      	adds	r7, #112	@ 0x70
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008558:	2b01      	cmp	r3, #1
 800855a:	d109      	bne.n	8008570 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	b29b      	uxth	r3, r3
 8008566:	4619      	mov	r1, r3
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7fb f877 	bl	800365c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800856e:	e002      	b.n	8008576 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7ff f8db 	bl	800772c <HAL_UART_RxHalfCpltCallback>
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b086      	sub	sp, #24
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008590:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008598:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a4:	2b80      	cmp	r3, #128	@ 0x80
 80085a6:	d109      	bne.n	80085bc <UART_DMAError+0x3e>
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b21      	cmp	r3, #33	@ 0x21
 80085ac:	d106      	bne.n	80085bc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80085b6:	6978      	ldr	r0, [r7, #20]
 80085b8:	f7ff fea2 	bl	8008300 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c6:	2b40      	cmp	r3, #64	@ 0x40
 80085c8:	d109      	bne.n	80085de <UART_DMAError+0x60>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b22      	cmp	r3, #34	@ 0x22
 80085ce:	d106      	bne.n	80085de <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80085d8:	6978      	ldr	r0, [r7, #20]
 80085da:	f7ff feb7 	bl	800834c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085e4:	f043 0210 	orr.w	r2, r3, #16
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085ee:	6978      	ldr	r0, [r7, #20]
 80085f0:	f7ff f8a6 	bl	8007740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085f4:	bf00      	nop
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7ff f890 	bl	8007740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	60bb      	str	r3, [r7, #8]
   return(result);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	61bb      	str	r3, [r7, #24]
 8008650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6979      	ldr	r1, [r7, #20]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	613b      	str	r3, [r7, #16]
   return(result);
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e6      	bne.n	8008630 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2220      	movs	r2, #32
 8008666:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff f852 	bl	8007718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008674:	bf00      	nop
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b09c      	sub	sp, #112	@ 0x70
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800868a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008694:	2b22      	cmp	r3, #34	@ 0x22
 8008696:	f040 80be 	bne.w	8008816 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80086a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086a8:	b2d9      	uxtb	r1, r3
 80086aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b4:	400a      	ands	r2, r1
 80086b6:	b2d2      	uxtb	r2, r2
 80086b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f040 80a3 	bne.w	800882a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008702:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008704:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008708:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e6      	bne.n	80086e4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008728:	f023 0301 	bic.w	r3, r3, #1
 800872c:	667b      	str	r3, [r7, #100]	@ 0x64
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008736:	647a      	str	r2, [r7, #68]	@ 0x44
 8008738:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800873c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e5      	bne.n	8008716 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2220      	movs	r2, #32
 800874e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a34      	ldr	r2, [pc, #208]	@ (8008834 <UART_RxISR_8BIT+0x1b8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d01f      	beq.n	80087a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d018      	beq.n	80087a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	623b      	str	r3, [r7, #32]
   return(result);
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800878a:	663b      	str	r3, [r7, #96]	@ 0x60
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008794:	633b      	str	r3, [r7, #48]	@ 0x30
 8008796:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800879a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d12e      	bne.n	800880e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0310 	bic.w	r3, r3, #16
 80087ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087d4:	61fb      	str	r3, [r7, #28]
 80087d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	69b9      	ldr	r1, [r7, #24]
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	617b      	str	r3, [r7, #20]
   return(result);
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e6      	bne.n	80087b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d103      	bne.n	80087fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2210      	movs	r2, #16
 80087fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fa ff28 	bl	800365c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800880c:	e00d      	b.n	800882a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7f8 fef6 	bl	8001600 <HAL_UART_RxCpltCallback>
}
 8008814:	e009      	b.n	800882a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	8b1b      	ldrh	r3, [r3, #24]
 800881c:	b29a      	uxth	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0208 	orr.w	r2, r2, #8
 8008826:	b292      	uxth	r2, r2
 8008828:	831a      	strh	r2, [r3, #24]
}
 800882a:	bf00      	nop
 800882c:	3770      	adds	r7, #112	@ 0x70
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40008000 	.word	0x40008000

08008838 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b09c      	sub	sp, #112	@ 0x70
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008846:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008850:	2b22      	cmp	r3, #34	@ 0x22
 8008852:	f040 80be 	bne.w	80089d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800885c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008864:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008866:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800886a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800886e:	4013      	ands	r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008874:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887a:	1c9a      	adds	r2, r3, #2
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	f040 80a3 	bne.w	80089e6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80088ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088be:	657b      	str	r3, [r7, #84]	@ 0x54
 80088c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e6      	bne.n	80088a0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3308      	adds	r3, #8
 80088d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80088f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80088f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e5      	bne.n	80088d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a34      	ldr	r2, [pc, #208]	@ (80089f0 <UART_RxISR_16BIT+0x1b8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d01f      	beq.n	8008964 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d018      	beq.n	8008964 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008952:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800895e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e6      	bne.n	8008932 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008968:	2b01      	cmp	r3, #1
 800896a:	d12e      	bne.n	80089ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f023 0310 	bic.w	r3, r3, #16
 8008986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6979      	ldr	r1, [r7, #20]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	613b      	str	r3, [r7, #16]
   return(result);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e6      	bne.n	8008972 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	f003 0310 	and.w	r3, r3, #16
 80089ae:	2b10      	cmp	r3, #16
 80089b0:	d103      	bne.n	80089ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2210      	movs	r2, #16
 80089b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fa fe4a 	bl	800365c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089c8:	e00d      	b.n	80089e6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7f8 fe18 	bl	8001600 <HAL_UART_RxCpltCallback>
}
 80089d0:	e009      	b.n	80089e6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	8b1b      	ldrh	r3, [r3, #24]
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0208 	orr.w	r2, r2, #8
 80089e2:	b292      	uxth	r2, r2
 80089e4:	831a      	strh	r2, [r3, #24]
}
 80089e6:	bf00      	nop
 80089e8:	3770      	adds	r7, #112	@ 0x70
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	40008000 	.word	0x40008000

080089f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08c      	sub	sp, #48	@ 0x30
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d142      	bne.n	8008aa6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e03b      	b.n	8008aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008a3c:	88fb      	ldrh	r3, [r7, #6]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f7ff fbbc 	bl	80081c0 <UART_Start_Receive_DMA>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d124      	bne.n	8008aa0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d11d      	bne.n	8008a9a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2210      	movs	r2, #16
 8008a64:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	617b      	str	r3, [r7, #20]
   return(result);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f043 0310 	orr.w	r3, r3, #16
 8008a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a86:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6a39      	ldr	r1, [r7, #32]
 8008a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e6      	bne.n	8008a66 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008a98:	e002      	b.n	8008aa0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aa4:	e000      	b.n	8008aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008aa6:	2302      	movs	r3, #2
  }
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3730      	adds	r7, #48	@ 0x30
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ac2:	2b84      	cmp	r3, #132	@ 0x84
 8008ac4:	d005      	beq.n	8008ad2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008ac6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4413      	add	r3, r2
 8008ace:	3303      	adds	r3, #3
 8008ad0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008ae4:	f000 fe4e 	bl	8009784 <vTaskStartScheduler>
  
  return osOK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	bd80      	pop	{r7, pc}

08008aee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af0:	b089      	sub	sp, #36	@ 0x24
 8008af2:	af04      	add	r7, sp, #16
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d020      	beq.n	8008b42 <osThreadCreate+0x54>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01c      	beq.n	8008b42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685c      	ldr	r4, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691e      	ldr	r6, [r3, #16]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff ffc8 	bl	8008ab0 <makeFreeRtosPriority>
 8008b20:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b2a:	9202      	str	r2, [sp, #8]
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	9100      	str	r1, [sp, #0]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	4632      	mov	r2, r6
 8008b34:	4629      	mov	r1, r5
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fc3f 	bl	80093ba <xTaskCreateStatic>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e01c      	b.n	8008b7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685c      	ldr	r4, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b4e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff ffaa 	bl	8008ab0 <makeFreeRtosPriority>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	f107 030c 	add.w	r3, r7, #12
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	9200      	str	r2, [sp, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	4632      	mov	r2, r6
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 fc84 	bl	800947a <xTaskCreate>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d001      	beq.n	8008b7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e000      	b.n	8008b7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <osDelay+0x16>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	e000      	b.n	8008b9e <osDelay+0x18>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fdba 	bl	8009718 <vTaskDelay>
  
  return osOK;
 8008ba4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f103 0208 	add.w	r2, r3, #8
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f103 0208 	add.w	r2, r3, #8
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f103 0208 	add.w	r2, r3, #8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	689a      	ldr	r2, [r3, #8]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
}
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c66:	d103      	bne.n	8008c70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	e00c      	b.n	8008c8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3308      	adds	r3, #8
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e002      	b.n	8008c7e <vListInsert+0x2e>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d2f6      	bcs.n	8008c78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	6892      	ldr	r2, [r2, #8]
 8008cd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6852      	ldr	r2, [r2, #4]
 8008ce2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d103      	bne.n	8008cf6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689a      	ldr	r2, [r3, #8]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	1e5a      	subs	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b08c      	sub	sp, #48	@ 0x30
 8008d1a:	af02      	add	r7, sp, #8
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d111      	bne.n	8008d4c <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d81d      	bhi.n	8008d70 <xStreamBufferGenericCreate+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d46:	bf00      	nop
 8008d48:	bf00      	nop
 8008d4a:	e7fd      	b.n	8008d48 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10b      	bne.n	8008d70 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	61bb      	str	r3, [r7, #24]
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	e7fd      	b.n	8008d6c <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d90b      	bls.n	8008d90 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	617b      	str	r3, [r7, #20]
}
 8008d8a:	bf00      	nop
 8008d8c:	bf00      	nop
 8008d8e:	e7fd      	b.n	8008d8c <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8008d96:	2301      	movs	r3, #1
 8008d98:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3320      	adds	r3, #32
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 fcf1 	bl	800a78c <pvPortMalloc>
 8008daa:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	f103 0120 	add.w	r1, r3, #32
 8008db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	6a38      	ldr	r0, [r7, #32]
 8008dc4:	f000 fac5 	bl	8009352 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
	}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3728      	adds	r7, #40	@ 0x28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10b      	bne.n	8008dfc <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	60fb      	str	r3, [r7, #12]
}
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	e7fd      	b.n	8008df8 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4413      	add	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d304      	bcc.n	8008e2c <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8008e2c:	697b      	ldr	r3, [r7, #20]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b090      	sub	sp, #64	@ 0x40
 8008e3e:	af02      	add	r7, sp, #8
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	607a      	str	r2, [r7, #4]
 8008e46:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10b      	bne.n	8008e6e <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	623b      	str	r3, [r7, #32]
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	e7fd      	b.n	8008e6a <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	61fb      	str	r3, [r7, #28]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8e:	7f1b      	ldrb	r3, [r3, #28]
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008e9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ea0:	f7ff ff97 	bl	8008dd2 <xStreamBufferSpacesAvailable>
 8008ea4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008eb2:	f000 f835 	bl	8008f20 <prvWriteMessageToBuffer>
 8008eb6:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d02b      	beq.n	8008f16 <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008ebe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ec0:	f000 fa27 	bl	8009312 <prvBytesInBuffer>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d323      	bcc.n	8008f16 <xStreamBufferSendFromISR+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ece:	f3ef 8211 	mrs	r2, BASEPRI
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	61ba      	str	r2, [r7, #24]
 8008ee4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8008ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <xStreamBufferSendFromISR+0xd0>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	6918      	ldr	r0, [r3, #16]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	2200      	movs	r2, #0
 8008efe:	2100      	movs	r1, #0
 8008f00:	f001 f882 	bl	800a008 <xTaskGenericNotifyFromISR>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	2200      	movs	r2, #0
 8008f08:	611a      	str	r2, [r3, #16]
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f14:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8008f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3738      	adds	r7, #56	@ 0x38
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	e01d      	b.n	8008f76 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	7f1b      	ldrb	r3, [r3, #28]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d108      	bne.n	8008f58 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8008f46:	2301      	movs	r3, #1
 8008f48:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	bf28      	it	cs
 8008f52:	4613      	movcs	r3, r2
 8008f54:	607b      	str	r3, [r7, #4]
 8008f56:	e00e      	b.n	8008f76 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d308      	bcc.n	8008f72 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008f64:	1d3b      	adds	r3, r7, #4
 8008f66:	2204      	movs	r2, #4
 8008f68:	4619      	mov	r1, r3
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 f8df 	bl	800912e <prvWriteBytesToBuffer>
 8008f70:	e001      	b.n	8008f76 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8008f72:	2300      	movs	r3, #0
 8008f74:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f8d3 	bl	800912e <prvWriteBytesToBuffer>
 8008f88:	6138      	str	r0, [r7, #16]
 8008f8a:	e001      	b.n	8008f90 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8008f90:	693b      	ldr	r3, [r7, #16]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08e      	sub	sp, #56	@ 0x38
 8008f9e:	af02      	add	r7, sp, #8
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008fac:	2300      	movs	r3, #0
 8008fae:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10b      	bne.n	8008fce <xStreamBufferReceive+0x34>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	61fb      	str	r3, [r7, #28]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10b      	bne.n	8008fec <xStreamBufferReceive+0x52>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	61bb      	str	r3, [r7, #24]
}
 8008fe6:	bf00      	nop
 8008fe8:	bf00      	nop
 8008fea:	e7fd      	b.n	8008fe8 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	7f1b      	ldrb	r3, [r3, #28]
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008ff8:	2304      	movs	r3, #4
 8008ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ffc:	e001      	b.n	8009002 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d035      	beq.n	8009074 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8009008:	f001 fa9e 	bl	800a548 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800900c:	6a38      	ldr	r0, [r7, #32]
 800900e:	f000 f980 	bl	8009312 <prvBytesInBuffer>
 8009012:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009014:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	429a      	cmp	r2, r3
 800901a:	d817      	bhi.n	800904c <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800901c:	2000      	movs	r0, #0
 800901e:	f001 f8d9 	bl	800a1d4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00b      	beq.n	8009042 <xStreamBufferReceive+0xa8>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	617b      	str	r3, [r7, #20]
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	e7fd      	b.n	800903e <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8009042:	f000 feaf 	bl	8009da4 <xTaskGetCurrentTaskHandle>
 8009046:	4602      	mov	r2, r0
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800904c:	f001 faae 	bl	800a5ac <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	429a      	cmp	r2, r3
 8009056:	d811      	bhi.n	800907c <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	2000      	movs	r0, #0
 8009060:	f000 feb0 	bl	8009dc4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	2200      	movs	r2, #0
 8009068:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800906a:	6a38      	ldr	r0, [r7, #32]
 800906c:	f000 f951 	bl	8009312 <prvBytesInBuffer>
 8009070:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009072:	e003      	b.n	800907c <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009074:	6a38      	ldr	r0, [r7, #32]
 8009076:	f000 f94c 	bl	8009312 <prvBytesInBuffer>
 800907a:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800907c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800907e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009080:	429a      	cmp	r2, r3
 8009082:	d91d      	bls.n	80090c0 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	6a38      	ldr	r0, [r7, #32]
 8009090:	f000 f81b 	bl	80090ca <prvReadMessageFromBuffer>
 8009094:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8009096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d011      	beq.n	80090c0 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800909c:	f000 fbdc 	bl	8009858 <vTaskSuspendAll>
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d009      	beq.n	80090bc <xStreamBufferReceive+0x122>
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	6958      	ldr	r0, [r3, #20]
 80090ac:	2300      	movs	r3, #0
 80090ae:	2200      	movs	r2, #0
 80090b0:	2100      	movs	r1, #0
 80090b2:	f000 fee7 	bl	8009e84 <xTaskGenericNotify>
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	2200      	movs	r2, #0
 80090ba:	615a      	str	r2, [r3, #20]
 80090bc:	f000 fbda 	bl	8009874 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80090c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3730      	adds	r7, #48	@ 0x30
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b088      	sub	sp, #32
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	607a      	str	r2, [r7, #4]
 80090d6:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80090d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d019      	beq.n	8009112 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80090e4:	f107 0110 	add.w	r1, r7, #16
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 f893 	bl	8009218 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80090fe:	69fa      	ldr	r2, [r7, #28]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	429a      	cmp	r2, r3
 8009104:	d907      	bls.n	8009116 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	e001      	b.n	8009116 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f87b 	bl	8009218 <prvReadBytesFromBuffer>
 8009122:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8009124:	697b      	ldr	r3, [r7, #20]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3720      	adds	r7, #32
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b08a      	sub	sp, #40	@ 0x28
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10b      	bne.n	8009158 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	61fb      	str	r3, [r7, #28]
}
 8009152:	bf00      	nop
 8009154:	bf00      	nop
 8009156:	e7fd      	b.n	8009154 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	4293      	cmp	r3, r2
 800916a:	bf28      	it	cs
 800916c:	4613      	movcs	r3, r2
 800916e:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8009170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	429a      	cmp	r2, r3
 800917c:	d90b      	bls.n	8009196 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	61bb      	str	r3, [r7, #24]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	4413      	add	r3, r2
 800919e:	6a3a      	ldr	r2, [r7, #32]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f003 fc8d 	bl	800cac2 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d91d      	bls.n	80091ec <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	1ad2      	subs	r2, r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d90b      	bls.n	80091d6 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	617b      	str	r3, [r7, #20]
}
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	e7fd      	b.n	80091d2 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6998      	ldr	r0, [r3, #24]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	18d1      	adds	r1, r2, r3
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	f003 fc6b 	bl	800cac2 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80091ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4413      	add	r3, r2
 80091f2:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d304      	bcc.n	8009208 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800920c:	605a      	str	r2, [r3, #4]

	return xCount;
 800920e:	687b      	ldr	r3, [r7, #4]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3728      	adds	r7, #40	@ 0x28
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	@ 0x28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	4293      	cmp	r3, r2
 800922c:	bf28      	it	cs
 800922e:	4613      	movcs	r3, r2
 8009230:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d067      	beq.n	8009308 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	6a3a      	ldr	r2, [r7, #32]
 8009248:	4293      	cmp	r3, r2
 800924a:	bf28      	it	cs
 800924c:	4613      	movcs	r3, r2
 800924e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8009250:	69fa      	ldr	r2, [r7, #28]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	429a      	cmp	r2, r3
 8009256:	d90b      	bls.n	8009270 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	61bb      	str	r3, [r7, #24]
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	e7fd      	b.n	800926c <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8009270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	441a      	add	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	429a      	cmp	r2, r3
 800927c:	d90b      	bls.n	8009296 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	617b      	str	r3, [r7, #20]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	4413      	add	r3, r2
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	4619      	mov	r1, r3
 80092a2:	68b8      	ldr	r0, [r7, #8]
 80092a4:	f003 fc0d 	bl	800cac2 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d91a      	bls.n	80092e6 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80092b0:	6a3a      	ldr	r2, [r7, #32]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d90b      	bls.n	80092d0 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	613b      	str	r3, [r7, #16]
}
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	e7fd      	b.n	80092cc <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	18d0      	adds	r0, r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6999      	ldr	r1, [r3, #24]
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	f003 fbee 	bl	800cac2 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80092e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	4413      	add	r3, r2
 80092ec:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d304      	bcc.n	8009302 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009306:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009308:	6a3b      	ldr	r3, [r7, #32]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3728      	adds	r7, #40	@ 0x28
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	4413      	add	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	429a      	cmp	r2, r3
 8009338:	d304      	bcc.n	8009344 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8009344:	68fb      	ldr	r3, [r7, #12]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
 800935e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8009360:	2355      	movs	r3, #85	@ 0x55
 8009362:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6979      	ldr	r1, [r7, #20]
 8009368:	68b8      	ldr	r0, [r7, #8]
 800936a:	f003 fa5e 	bl	800c82a <memset>
 800936e:	4602      	mov	r2, r0
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4293      	cmp	r3, r2
 8009374:	d00b      	beq.n	800938e <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	613b      	str	r3, [r7, #16]
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	e7fd      	b.n	800938a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800938e:	2220      	movs	r2, #32
 8009390:	2100      	movs	r1, #0
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f003 fa49 	bl	800c82a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80093b0:	771a      	strb	r2, [r3, #28]
}
 80093b2:	bf00      	nop
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b08e      	sub	sp, #56	@ 0x38
 80093be:	af04      	add	r7, sp, #16
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10b      	bne.n	80093e6 <xTaskCreateStatic+0x2c>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	623b      	str	r3, [r7, #32]
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	e7fd      	b.n	80093e2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80093e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10b      	bne.n	8009404 <xTaskCreateStatic+0x4a>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	61fb      	str	r3, [r7, #28]
}
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	e7fd      	b.n	8009400 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009404:	23a0      	movs	r3, #160	@ 0xa0
 8009406:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	2ba0      	cmp	r3, #160	@ 0xa0
 800940c:	d00b      	beq.n	8009426 <xTaskCreateStatic+0x6c>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	61bb      	str	r3, [r7, #24]
}
 8009420:	bf00      	nop
 8009422:	bf00      	nop
 8009424:	e7fd      	b.n	8009422 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009426:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01e      	beq.n	800946c <xTaskCreateStatic+0xb2>
 800942e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009430:	2b00      	cmp	r3, #0
 8009432:	d01b      	beq.n	800946c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800943c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	2202      	movs	r2, #2
 8009442:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009446:	2300      	movs	r3, #0
 8009448:	9303      	str	r3, [sp, #12]
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	9302      	str	r3, [sp, #8]
 800944e:	f107 0314 	add.w	r3, r7, #20
 8009452:	9301      	str	r3, [sp, #4]
 8009454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f850 	bl	8009504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009464:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009466:	f000 f8ed 	bl	8009644 <prvAddNewTaskToReadyList>
 800946a:	e001      	b.n	8009470 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800946c:	2300      	movs	r3, #0
 800946e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009470:	697b      	ldr	r3, [r7, #20]
	}
 8009472:	4618      	mov	r0, r3
 8009474:	3728      	adds	r7, #40	@ 0x28
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800947a:	b580      	push	{r7, lr}
 800947c:	b08c      	sub	sp, #48	@ 0x30
 800947e:	af04      	add	r7, sp, #16
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4618      	mov	r0, r3
 8009490:	f001 f97c 	bl	800a78c <pvPortMalloc>
 8009494:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00e      	beq.n	80094ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800949c:	20a0      	movs	r0, #160	@ 0xa0
 800949e:	f001 f975 	bl	800a78c <pvPortMalloc>
 80094a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80094b0:	e005      	b.n	80094be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094b2:	6978      	ldr	r0, [r7, #20]
 80094b4:	f001 fa38 	bl	800a928 <vPortFree>
 80094b8:	e001      	b.n	80094be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d017      	beq.n	80094f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094cc:	88fa      	ldrh	r2, [r7, #6]
 80094ce:	2300      	movs	r3, #0
 80094d0:	9303      	str	r3, [sp, #12]
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	9302      	str	r3, [sp, #8]
 80094d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68b9      	ldr	r1, [r7, #8]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 f80e 	bl	8009504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094e8:	69f8      	ldr	r0, [r7, #28]
 80094ea:	f000 f8ab 	bl	8009644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094ee:	2301      	movs	r3, #1
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	e002      	b.n	80094fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094f4:	f04f 33ff 	mov.w	r3, #4294967295
 80094f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094fa:	69bb      	ldr	r3, [r7, #24]
	}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3720      	adds	r7, #32
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800951c:	3b01      	subs	r3, #1
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	f023 0307 	bic.w	r3, r3, #7
 800952a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	617b      	str	r3, [r7, #20]
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01f      	beq.n	8009594 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009554:	2300      	movs	r3, #0
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	e012      	b.n	8009580 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	7819      	ldrb	r1, [r3, #0]
 8009562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	4413      	add	r3, r2
 8009568:	3334      	adds	r3, #52	@ 0x34
 800956a:	460a      	mov	r2, r1
 800956c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	4413      	add	r3, r2
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d006      	beq.n	8009588 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	3301      	adds	r3, #1
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	2b0f      	cmp	r3, #15
 8009584:	d9e9      	bls.n	800955a <prvInitialiseNewTask+0x56>
 8009586:	e000      	b.n	800958a <prvInitialiseNewTask+0x86>
			{
				break;
 8009588:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009592:	e003      	b.n	800959c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800959c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959e:	2b06      	cmp	r3, #6
 80095a0:	d901      	bls.n	80095a6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095a2:	2306      	movs	r3, #6
 80095a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095b0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80095b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b4:	2200      	movs	r2, #0
 80095b6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ba:	3304      	adds	r3, #4
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fb16 	bl	8008bee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c4:	3318      	adds	r3, #24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fb11 	bl	8008bee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d4:	f1c3 0207 	rsb	r2, r3, #7
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f4:	334c      	adds	r3, #76	@ 0x4c
 80095f6:	224c      	movs	r2, #76	@ 0x4c
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f003 f915 	bl	800c82a <memset>
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	4a0d      	ldr	r2, [pc, #52]	@ (8009638 <prvInitialiseNewTask+0x134>)
 8009604:	651a      	str	r2, [r3, #80]	@ 0x50
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	4a0c      	ldr	r2, [pc, #48]	@ (800963c <prvInitialiseNewTask+0x138>)
 800960a:	655a      	str	r2, [r3, #84]	@ 0x54
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	4a0c      	ldr	r2, [pc, #48]	@ (8009640 <prvInitialiseNewTask+0x13c>)
 8009610:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	68f9      	ldr	r1, [r7, #12]
 8009616:	69b8      	ldr	r0, [r7, #24]
 8009618:	f000 fe68 	bl	800a2ec <pxPortInitialiseStack>
 800961c:	4602      	mov	r2, r0
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800962c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800962e:	bf00      	nop
 8009630:	3720      	adds	r7, #32
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20005d20 	.word	0x20005d20
 800963c:	20005d88 	.word	0x20005d88
 8009640:	20005df0 	.word	0x20005df0

08009644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800964c:	f000 ff7c 	bl	800a548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009650:	4b2a      	ldr	r3, [pc, #168]	@ (80096fc <prvAddNewTaskToReadyList+0xb8>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3301      	adds	r3, #1
 8009656:	4a29      	ldr	r2, [pc, #164]	@ (80096fc <prvAddNewTaskToReadyList+0xb8>)
 8009658:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800965a:	4b29      	ldr	r3, [pc, #164]	@ (8009700 <prvAddNewTaskToReadyList+0xbc>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d109      	bne.n	8009676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009662:	4a27      	ldr	r2, [pc, #156]	@ (8009700 <prvAddNewTaskToReadyList+0xbc>)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009668:	4b24      	ldr	r3, [pc, #144]	@ (80096fc <prvAddNewTaskToReadyList+0xb8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d110      	bne.n	8009692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009670:	f000 fad4 	bl	8009c1c <prvInitialiseTaskLists>
 8009674:	e00d      	b.n	8009692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009676:	4b23      	ldr	r3, [pc, #140]	@ (8009704 <prvAddNewTaskToReadyList+0xc0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800967e:	4b20      	ldr	r3, [pc, #128]	@ (8009700 <prvAddNewTaskToReadyList+0xbc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009688:	429a      	cmp	r2, r3
 800968a:	d802      	bhi.n	8009692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800968c:	4a1c      	ldr	r2, [pc, #112]	@ (8009700 <prvAddNewTaskToReadyList+0xbc>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009692:	4b1d      	ldr	r3, [pc, #116]	@ (8009708 <prvAddNewTaskToReadyList+0xc4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3301      	adds	r3, #1
 8009698:	4a1b      	ldr	r2, [pc, #108]	@ (8009708 <prvAddNewTaskToReadyList+0xc4>)
 800969a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a0:	2201      	movs	r2, #1
 80096a2:	409a      	lsls	r2, r3
 80096a4:	4b19      	ldr	r3, [pc, #100]	@ (800970c <prvAddNewTaskToReadyList+0xc8>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	4a18      	ldr	r2, [pc, #96]	@ (800970c <prvAddNewTaskToReadyList+0xc8>)
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4a15      	ldr	r2, [pc, #84]	@ (8009710 <prvAddNewTaskToReadyList+0xcc>)
 80096bc:	441a      	add	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3304      	adds	r3, #4
 80096c2:	4619      	mov	r1, r3
 80096c4:	4610      	mov	r0, r2
 80096c6:	f7ff fa9f 	bl	8008c08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096ca:	f000 ff6f 	bl	800a5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009704 <prvAddNewTaskToReadyList+0xc0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00e      	beq.n	80096f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009700 <prvAddNewTaskToReadyList+0xbc>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d207      	bcs.n	80096f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009714 <prvAddNewTaskToReadyList+0xd0>)
 80096e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20000eac 	.word	0x20000eac
 8009700:	20000dac 	.word	0x20000dac
 8009704:	20000eb8 	.word	0x20000eb8
 8009708:	20000ec8 	.word	0x20000ec8
 800970c:	20000eb4 	.word	0x20000eb4
 8009710:	20000db0 	.word	0x20000db0
 8009714:	e000ed04 	.word	0xe000ed04

08009718 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d018      	beq.n	800975c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800972a:	4b14      	ldr	r3, [pc, #80]	@ (800977c <vTaskDelay+0x64>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00b      	beq.n	800974a <vTaskDelay+0x32>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	60bb      	str	r3, [r7, #8]
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	e7fd      	b.n	8009746 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800974a:	f000 f885 	bl	8009858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800974e:	2100      	movs	r1, #0
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fd65 	bl	800a220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009756:	f000 f88d 	bl	8009874 <xTaskResumeAll>
 800975a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d107      	bne.n	8009772 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009762:	4b07      	ldr	r3, [pc, #28]	@ (8009780 <vTaskDelay+0x68>)
 8009764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000ed4 	.word	0x20000ed4
 8009780:	e000ed04 	.word	0xe000ed04

08009784 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	@ 0x28
 8009788:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800978e:	2300      	movs	r3, #0
 8009790:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009792:	463a      	mov	r2, r7
 8009794:	1d39      	adds	r1, r7, #4
 8009796:	f107 0308 	add.w	r3, r7, #8
 800979a:	4618      	mov	r0, r3
 800979c:	f7f7 fc6e 	bl	800107c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	9202      	str	r2, [sp, #8]
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	2300      	movs	r3, #0
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	2300      	movs	r3, #0
 80097b0:	460a      	mov	r2, r1
 80097b2:	4921      	ldr	r1, [pc, #132]	@ (8009838 <vTaskStartScheduler+0xb4>)
 80097b4:	4821      	ldr	r0, [pc, #132]	@ (800983c <vTaskStartScheduler+0xb8>)
 80097b6:	f7ff fe00 	bl	80093ba <xTaskCreateStatic>
 80097ba:	4603      	mov	r3, r0
 80097bc:	4a20      	ldr	r2, [pc, #128]	@ (8009840 <vTaskStartScheduler+0xbc>)
 80097be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80097c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009840 <vTaskStartScheduler+0xbc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80097c8:	2301      	movs	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	e001      	b.n	80097d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d11b      	bne.n	8009810 <vTaskStartScheduler+0x8c>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	613b      	str	r3, [r7, #16]
}
 80097ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097ec:	4b15      	ldr	r3, [pc, #84]	@ (8009844 <vTaskStartScheduler+0xc0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	334c      	adds	r3, #76	@ 0x4c
 80097f2:	4a15      	ldr	r2, [pc, #84]	@ (8009848 <vTaskStartScheduler+0xc4>)
 80097f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097f6:	4b15      	ldr	r3, [pc, #84]	@ (800984c <vTaskStartScheduler+0xc8>)
 80097f8:	f04f 32ff 	mov.w	r2, #4294967295
 80097fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097fe:	4b14      	ldr	r3, [pc, #80]	@ (8009850 <vTaskStartScheduler+0xcc>)
 8009800:	2201      	movs	r2, #1
 8009802:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009804:	4b13      	ldr	r3, [pc, #76]	@ (8009854 <vTaskStartScheduler+0xd0>)
 8009806:	2200      	movs	r2, #0
 8009808:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800980a:	f000 fdf9 	bl	800a400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800980e:	e00f      	b.n	8009830 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009816:	d10b      	bne.n	8009830 <vTaskStartScheduler+0xac>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60fb      	str	r3, [r7, #12]
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	e7fd      	b.n	800982c <vTaskStartScheduler+0xa8>
}
 8009830:	bf00      	nop
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	080114b4 	.word	0x080114b4
 800983c:	08009bed 	.word	0x08009bed
 8009840:	20000ed0 	.word	0x20000ed0
 8009844:	20000dac 	.word	0x20000dac
 8009848:	20000430 	.word	0x20000430
 800984c:	20000ecc 	.word	0x20000ecc
 8009850:	20000eb8 	.word	0x20000eb8
 8009854:	20000eb0 	.word	0x20000eb0

08009858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009858:	b480      	push	{r7}
 800985a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800985c:	4b04      	ldr	r3, [pc, #16]	@ (8009870 <vTaskSuspendAll+0x18>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	4a03      	ldr	r2, [pc, #12]	@ (8009870 <vTaskSuspendAll+0x18>)
 8009864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009866:	bf00      	nop
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	20000ed4 	.word	0x20000ed4

08009874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009882:	4b42      	ldr	r3, [pc, #264]	@ (800998c <xTaskResumeAll+0x118>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10b      	bne.n	80098a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	603b      	str	r3, [r7, #0]
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	e7fd      	b.n	800989e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098a2:	f000 fe51 	bl	800a548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80098a6:	4b39      	ldr	r3, [pc, #228]	@ (800998c <xTaskResumeAll+0x118>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4a37      	ldr	r2, [pc, #220]	@ (800998c <xTaskResumeAll+0x118>)
 80098ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b0:	4b36      	ldr	r3, [pc, #216]	@ (800998c <xTaskResumeAll+0x118>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d161      	bne.n	800997c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098b8:	4b35      	ldr	r3, [pc, #212]	@ (8009990 <xTaskResumeAll+0x11c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d05d      	beq.n	800997c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098c0:	e02e      	b.n	8009920 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c2:	4b34      	ldr	r3, [pc, #208]	@ (8009994 <xTaskResumeAll+0x120>)
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3318      	adds	r3, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff f9f7 	bl	8008cc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff f9f2 	bl	8008cc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e2:	2201      	movs	r2, #1
 80098e4:	409a      	lsls	r2, r3
 80098e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009998 <xTaskResumeAll+0x124>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009998 <xTaskResumeAll+0x124>)
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4a27      	ldr	r2, [pc, #156]	@ (800999c <xTaskResumeAll+0x128>)
 80098fe:	441a      	add	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7ff f97e 	bl	8008c08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009910:	4b23      	ldr	r3, [pc, #140]	@ (80099a0 <xTaskResumeAll+0x12c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009916:	429a      	cmp	r2, r3
 8009918:	d302      	bcc.n	8009920 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800991a:	4b22      	ldr	r3, [pc, #136]	@ (80099a4 <xTaskResumeAll+0x130>)
 800991c:	2201      	movs	r2, #1
 800991e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009920:	4b1c      	ldr	r3, [pc, #112]	@ (8009994 <xTaskResumeAll+0x120>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1cc      	bne.n	80098c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800992e:	f000 fa19 	bl	8009d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009932:	4b1d      	ldr	r3, [pc, #116]	@ (80099a8 <xTaskResumeAll+0x134>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d010      	beq.n	8009960 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800993e:	f000 f837 	bl	80099b0 <xTaskIncrementTick>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009948:	4b16      	ldr	r3, [pc, #88]	@ (80099a4 <xTaskResumeAll+0x130>)
 800994a:	2201      	movs	r2, #1
 800994c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f1      	bne.n	800993e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800995a:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <xTaskResumeAll+0x134>)
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009960:	4b10      	ldr	r3, [pc, #64]	@ (80099a4 <xTaskResumeAll+0x130>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009968:	2301      	movs	r3, #1
 800996a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800996c:	4b0f      	ldr	r3, [pc, #60]	@ (80099ac <xTaskResumeAll+0x138>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800997c:	f000 fe16 	bl	800a5ac <vPortExitCritical>

	return xAlreadyYielded;
 8009980:	68bb      	ldr	r3, [r7, #8]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000ed4 	.word	0x20000ed4
 8009990:	20000eac 	.word	0x20000eac
 8009994:	20000e6c 	.word	0x20000e6c
 8009998:	20000eb4 	.word	0x20000eb4
 800999c:	20000db0 	.word	0x20000db0
 80099a0:	20000dac 	.word	0x20000dac
 80099a4:	20000ec0 	.word	0x20000ec0
 80099a8:	20000ebc 	.word	0x20000ebc
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ba:	4b4f      	ldr	r3, [pc, #316]	@ (8009af8 <xTaskIncrementTick+0x148>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f040 808f 	bne.w	8009ae2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099c4:	4b4d      	ldr	r3, [pc, #308]	@ (8009afc <xTaskIncrementTick+0x14c>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099cc:	4a4b      	ldr	r2, [pc, #300]	@ (8009afc <xTaskIncrementTick+0x14c>)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d121      	bne.n	8009a1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80099d8:	4b49      	ldr	r3, [pc, #292]	@ (8009b00 <xTaskIncrementTick+0x150>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00b      	beq.n	80099fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	603b      	str	r3, [r7, #0]
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop
 80099f8:	e7fd      	b.n	80099f6 <xTaskIncrementTick+0x46>
 80099fa:	4b41      	ldr	r3, [pc, #260]	@ (8009b00 <xTaskIncrementTick+0x150>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60fb      	str	r3, [r7, #12]
 8009a00:	4b40      	ldr	r3, [pc, #256]	@ (8009b04 <xTaskIncrementTick+0x154>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a3e      	ldr	r2, [pc, #248]	@ (8009b00 <xTaskIncrementTick+0x150>)
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	4a3e      	ldr	r2, [pc, #248]	@ (8009b04 <xTaskIncrementTick+0x154>)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009b08 <xTaskIncrementTick+0x158>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3301      	adds	r3, #1
 8009a14:	4a3c      	ldr	r2, [pc, #240]	@ (8009b08 <xTaskIncrementTick+0x158>)
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	f000 f9a4 	bl	8009d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8009b0c <xTaskIncrementTick+0x15c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d348      	bcc.n	8009ab8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a26:	4b36      	ldr	r3, [pc, #216]	@ (8009b00 <xTaskIncrementTick+0x150>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d104      	bne.n	8009a3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a30:	4b36      	ldr	r3, [pc, #216]	@ (8009b0c <xTaskIncrementTick+0x15c>)
 8009a32:	f04f 32ff 	mov.w	r2, #4294967295
 8009a36:	601a      	str	r2, [r3, #0]
					break;
 8009a38:	e03e      	b.n	8009ab8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a3a:	4b31      	ldr	r3, [pc, #196]	@ (8009b00 <xTaskIncrementTick+0x150>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d203      	bcs.n	8009a5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a52:	4a2e      	ldr	r2, [pc, #184]	@ (8009b0c <xTaskIncrementTick+0x15c>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a58:	e02e      	b.n	8009ab8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff f92f 	bl	8008cc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d004      	beq.n	8009a76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	3318      	adds	r3, #24
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff f926 	bl	8008cc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	409a      	lsls	r2, r3
 8009a7e:	4b24      	ldr	r3, [pc, #144]	@ (8009b10 <xTaskIncrementTick+0x160>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	4a22      	ldr	r2, [pc, #136]	@ (8009b10 <xTaskIncrementTick+0x160>)
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4a1f      	ldr	r2, [pc, #124]	@ (8009b14 <xTaskIncrementTick+0x164>)
 8009a96:	441a      	add	r2, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	f7ff f8b2 	bl	8008c08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b18 <xTaskIncrementTick+0x168>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d3b9      	bcc.n	8009a26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ab6:	e7b6      	b.n	8009a26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ab8:	4b17      	ldr	r3, [pc, #92]	@ (8009b18 <xTaskIncrementTick+0x168>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abe:	4915      	ldr	r1, [pc, #84]	@ (8009b14 <xTaskIncrementTick+0x164>)
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	440b      	add	r3, r1
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d901      	bls.n	8009ad4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ad4:	4b11      	ldr	r3, [pc, #68]	@ (8009b1c <xTaskIncrementTick+0x16c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009adc:	2301      	movs	r3, #1
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	e004      	b.n	8009aec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b20 <xTaskIncrementTick+0x170>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8009b20 <xTaskIncrementTick+0x170>)
 8009aea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009aec:	697b      	ldr	r3, [r7, #20]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000ed4 	.word	0x20000ed4
 8009afc:	20000eb0 	.word	0x20000eb0
 8009b00:	20000e64 	.word	0x20000e64
 8009b04:	20000e68 	.word	0x20000e68
 8009b08:	20000ec4 	.word	0x20000ec4
 8009b0c:	20000ecc 	.word	0x20000ecc
 8009b10:	20000eb4 	.word	0x20000eb4
 8009b14:	20000db0 	.word	0x20000db0
 8009b18:	20000dac 	.word	0x20000dac
 8009b1c:	20000ec0 	.word	0x20000ec0
 8009b20:	20000ebc 	.word	0x20000ebc

08009b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009bd4 <vTaskSwitchContext+0xb0>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b32:	4b29      	ldr	r3, [pc, #164]	@ (8009bd8 <vTaskSwitchContext+0xb4>)
 8009b34:	2201      	movs	r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b38:	e045      	b.n	8009bc6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009b3a:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <vTaskSwitchContext+0xb4>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b40:	4b26      	ldr	r3, [pc, #152]	@ (8009bdc <vTaskSwitchContext+0xb8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	fab3 f383 	clz	r3, r3
 8009b4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b4e:	7afb      	ldrb	r3, [r7, #11]
 8009b50:	f1c3 031f 	rsb	r3, r3, #31
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	4922      	ldr	r1, [pc, #136]	@ (8009be0 <vTaskSwitchContext+0xbc>)
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10b      	bne.n	8009b82 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	607b      	str	r3, [r7, #4]
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	e7fd      	b.n	8009b7e <vTaskSwitchContext+0x5a>
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4a14      	ldr	r2, [pc, #80]	@ (8009be0 <vTaskSwitchContext+0xbc>)
 8009b8e:	4413      	add	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	605a      	str	r2, [r3, #4]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d104      	bne.n	8009bb2 <vTaskSwitchContext+0x8e>
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	605a      	str	r2, [r3, #4]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8009be4 <vTaskSwitchContext+0xc0>)
 8009bba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bbc:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <vTaskSwitchContext+0xc0>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	334c      	adds	r3, #76	@ 0x4c
 8009bc2:	4a09      	ldr	r2, [pc, #36]	@ (8009be8 <vTaskSwitchContext+0xc4>)
 8009bc4:	6013      	str	r3, [r2, #0]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20000ed4 	.word	0x20000ed4
 8009bd8:	20000ec0 	.word	0x20000ec0
 8009bdc:	20000eb4 	.word	0x20000eb4
 8009be0:	20000db0 	.word	0x20000db0
 8009be4:	20000dac 	.word	0x20000dac
 8009be8:	20000430 	.word	0x20000430

08009bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bf4:	f000 f852 	bl	8009c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bf8:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <prvIdleTask+0x28>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d9f9      	bls.n	8009bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c00:	4b05      	ldr	r3, [pc, #20]	@ (8009c18 <prvIdleTask+0x2c>)
 8009c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c10:	e7f0      	b.n	8009bf4 <prvIdleTask+0x8>
 8009c12:	bf00      	nop
 8009c14:	20000db0 	.word	0x20000db0
 8009c18:	e000ed04 	.word	0xe000ed04

08009c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c22:	2300      	movs	r3, #0
 8009c24:	607b      	str	r3, [r7, #4]
 8009c26:	e00c      	b.n	8009c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4a12      	ldr	r2, [pc, #72]	@ (8009c7c <prvInitialiseTaskLists+0x60>)
 8009c34:	4413      	add	r3, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe ffb9 	bl	8008bae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	607b      	str	r3, [r7, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b06      	cmp	r3, #6
 8009c46:	d9ef      	bls.n	8009c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c48:	480d      	ldr	r0, [pc, #52]	@ (8009c80 <prvInitialiseTaskLists+0x64>)
 8009c4a:	f7fe ffb0 	bl	8008bae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c4e:	480d      	ldr	r0, [pc, #52]	@ (8009c84 <prvInitialiseTaskLists+0x68>)
 8009c50:	f7fe ffad 	bl	8008bae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c54:	480c      	ldr	r0, [pc, #48]	@ (8009c88 <prvInitialiseTaskLists+0x6c>)
 8009c56:	f7fe ffaa 	bl	8008bae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c5a:	480c      	ldr	r0, [pc, #48]	@ (8009c8c <prvInitialiseTaskLists+0x70>)
 8009c5c:	f7fe ffa7 	bl	8008bae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c60:	480b      	ldr	r0, [pc, #44]	@ (8009c90 <prvInitialiseTaskLists+0x74>)
 8009c62:	f7fe ffa4 	bl	8008bae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <prvInitialiseTaskLists+0x78>)
 8009c68:	4a05      	ldr	r2, [pc, #20]	@ (8009c80 <prvInitialiseTaskLists+0x64>)
 8009c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c98 <prvInitialiseTaskLists+0x7c>)
 8009c6e:	4a05      	ldr	r2, [pc, #20]	@ (8009c84 <prvInitialiseTaskLists+0x68>)
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000db0 	.word	0x20000db0
 8009c80:	20000e3c 	.word	0x20000e3c
 8009c84:	20000e50 	.word	0x20000e50
 8009c88:	20000e6c 	.word	0x20000e6c
 8009c8c:	20000e80 	.word	0x20000e80
 8009c90:	20000e98 	.word	0x20000e98
 8009c94:	20000e64 	.word	0x20000e64
 8009c98:	20000e68 	.word	0x20000e68

08009c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ca2:	e019      	b.n	8009cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ca4:	f000 fc50 	bl	800a548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca8:	4b10      	ldr	r3, [pc, #64]	@ (8009cec <prvCheckTasksWaitingTermination+0x50>)
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff f804 	bl	8008cc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cba:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf0 <prvCheckTasksWaitingTermination+0x54>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8009cf0 <prvCheckTasksWaitingTermination+0x54>)
 8009cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	4a0a      	ldr	r2, [pc, #40]	@ (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cce:	f000 fc6d 	bl	800a5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f810 	bl	8009cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cd8:	4b06      	ldr	r3, [pc, #24]	@ (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e1      	bne.n	8009ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ce0:	bf00      	nop
 8009ce2:	bf00      	nop
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000e80 	.word	0x20000e80
 8009cf0:	20000eac 	.word	0x20000eac
 8009cf4:	20000e94 	.word	0x20000e94

08009cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	334c      	adds	r3, #76	@ 0x4c
 8009d04:	4618      	mov	r0, r3
 8009d06:	f002 fe1b 	bl	800c940 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d108      	bne.n	8009d26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 fe05 	bl	800a928 <vPortFree>
				vPortFree( pxTCB );
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fe02 	bl	800a928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d24:	e019      	b.n	8009d5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d103      	bne.n	8009d38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fdf9 	bl	800a928 <vPortFree>
	}
 8009d36:	e010      	b.n	8009d5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d00b      	beq.n	8009d5a <prvDeleteTCB+0x62>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	60fb      	str	r3, [r7, #12]
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop
 8009d58:	e7fd      	b.n	8009d56 <prvDeleteTCB+0x5e>
	}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d9c <prvResetNextTaskUnblockTime+0x38>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d104      	bne.n	8009d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d74:	4b0a      	ldr	r3, [pc, #40]	@ (8009da0 <prvResetNextTaskUnblockTime+0x3c>)
 8009d76:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d7c:	e008      	b.n	8009d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d7e:	4b07      	ldr	r3, [pc, #28]	@ (8009d9c <prvResetNextTaskUnblockTime+0x38>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4a04      	ldr	r2, [pc, #16]	@ (8009da0 <prvResetNextTaskUnblockTime+0x3c>)
 8009d8e:	6013      	str	r3, [r2, #0]
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	20000e64 	.word	0x20000e64
 8009da0:	20000ecc 	.word	0x20000ecc

08009da4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009daa:	4b05      	ldr	r3, [pc, #20]	@ (8009dc0 <xTaskGetCurrentTaskHandle+0x1c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009db0:	687b      	ldr	r3, [r7, #4]
	}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20000dac 	.word	0x20000dac

08009dc4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009dd2:	f000 fbb9 	bl	800a548 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009dd6:	4b29      	ldr	r3, [pc, #164]	@ (8009e7c <xTaskNotifyWait+0xb8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d01c      	beq.n	8009e1e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009de4:	4b25      	ldr	r3, [pc, #148]	@ (8009e7c <xTaskNotifyWait+0xb8>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	43d2      	mvns	r2, r2
 8009df0:	400a      	ands	r2, r1
 8009df2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009df6:	4b21      	ldr	r3, [pc, #132]	@ (8009e7c <xTaskNotifyWait+0xb8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00b      	beq.n	8009e1e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e06:	2101      	movs	r1, #1
 8009e08:	6838      	ldr	r0, [r7, #0]
 8009e0a:	f000 fa09 	bl	800a220 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8009e80 <xTaskNotifyWait+0xbc>)
 8009e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009e1e:	f000 fbc5 	bl	800a5ac <vPortExitCritical>

		taskENTER_CRITICAL();
 8009e22:	f000 fb91 	bl	800a548 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d005      	beq.n	8009e38 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009e2c:	4b13      	ldr	r3, [pc, #76]	@ (8009e7c <xTaskNotifyWait+0xb8>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009e38:	4b10      	ldr	r3, [pc, #64]	@ (8009e7c <xTaskNotifyWait+0xb8>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d002      	beq.n	8009e4c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	e00a      	b.n	8009e62 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009e7c <xTaskNotifyWait+0xb8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	43d2      	mvns	r2, r2
 8009e58:	400a      	ands	r2, r1
 8009e5a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e62:	4b06      	ldr	r3, [pc, #24]	@ (8009e7c <xTaskNotifyWait+0xb8>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8009e6c:	f000 fb9e 	bl	800a5ac <vPortExitCritical>

		return xReturn;
 8009e70:	697b      	ldr	r3, [r7, #20]
	}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000dac 	.word	0x20000dac
 8009e80:	e000ed04 	.word	0xe000ed04

08009e84 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08a      	sub	sp, #40	@ 0x28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	4613      	mov	r3, r2
 8009e92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009e94:	2301      	movs	r3, #1
 8009e96:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <xTaskGenericNotify+0x32>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	61bb      	str	r3, [r7, #24]
}
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	e7fd      	b.n	8009eb2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009eba:	f000 fb45 	bl	800a548 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009ed4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	d82e      	bhi.n	8009f42 <xTaskGenericNotify+0xbe>
 8009ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8009eec <xTaskGenericNotify+0x68>)
 8009ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eea:	bf00      	nop
 8009eec:	08009f67 	.word	0x08009f67
 8009ef0:	08009f01 	.word	0x08009f01
 8009ef4:	08009f13 	.word	0x08009f13
 8009ef8:	08009f23 	.word	0x08009f23
 8009efc:	08009f2d 	.word	0x08009f2d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009f10:	e02c      	b.n	8009f6c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009f20:	e024      	b.n	8009f6c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009f2a:	e01f      	b.n	8009f6c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009f2c:	7ffb      	ldrb	r3, [r7, #31]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d004      	beq.n	8009f3c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009f3a:	e017      	b.n	8009f6c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009f40:	e014      	b.n	8009f6c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4c:	d00d      	beq.n	8009f6a <xTaskGenericNotify+0xe6>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	617b      	str	r3, [r7, #20]
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	e7fd      	b.n	8009f62 <xTaskGenericNotify+0xde>
					break;
 8009f66:	bf00      	nop
 8009f68:	e000      	b.n	8009f6c <xTaskGenericNotify+0xe8>

					break;
 8009f6a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009f6c:	7ffb      	ldrb	r3, [r7, #31]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d13a      	bne.n	8009fe8 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fea3 	bl	8008cc2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f80:	2201      	movs	r2, #1
 8009f82:	409a      	lsls	r2, r3
 8009f84:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff8 <xTaskGenericNotify+0x174>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ff8 <xTaskGenericNotify+0x174>)
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4a18      	ldr	r2, [pc, #96]	@ (8009ffc <xTaskGenericNotify+0x178>)
 8009f9c:	441a      	add	r2, r3
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f7fe fe2f 	bl	8008c08 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00b      	beq.n	8009fca <xTaskGenericNotify+0x146>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	613b      	str	r3, [r7, #16]
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop
 8009fc8:	e7fd      	b.n	8009fc6 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fce:	4b0c      	ldr	r3, [pc, #48]	@ (800a000 <xTaskGenericNotify+0x17c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d907      	bls.n	8009fe8 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	@ (800a004 <xTaskGenericNotify+0x180>)
 8009fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009fe8:	f000 fae0 	bl	800a5ac <vPortExitCritical>

		return xReturn;
 8009fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3728      	adds	r7, #40	@ 0x28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000eb4 	.word	0x20000eb4
 8009ffc:	20000db0 	.word	0x20000db0
 800a000:	20000dac 	.word	0x20000dac
 800a004:	e000ed04 	.word	0xe000ed04

0800a008 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08e      	sub	sp, #56	@ 0x38
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	4613      	mov	r3, r2
 800a016:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a018:	2301      	movs	r3, #1
 800a01a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10b      	bne.n	800a03a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	e7fd      	b.n	800a036 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a03a:	f000 fb65 	bl	800a708 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800a042:	f3ef 8211 	mrs	r2, BASEPRI
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	623a      	str	r2, [r7, #32]
 800a058:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a05a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a066:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	2b04      	cmp	r3, #4
 800a084:	d82e      	bhi.n	800a0e4 <xTaskGenericNotifyFromISR+0xdc>
 800a086:	a201      	add	r2, pc, #4	@ (adr r2, 800a08c <xTaskGenericNotifyFromISR+0x84>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a109 	.word	0x0800a109
 800a090:	0800a0a1 	.word	0x0800a0a1
 800a094:	0800a0b3 	.word	0x0800a0b3
 800a098:	0800a0c3 	.word	0x0800a0c3
 800a09c:	0800a0cd 	.word	0x0800a0cd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a0b0:	e02d      	b.n	800a10e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a0c0:	e025      	b.n	800a10e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a0ca:	e020      	b.n	800a10e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a0cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d004      	beq.n	800a0de <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a0dc:	e017      	b.n	800a10e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800a0e2:	e014      	b.n	800a10e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ee:	d00d      	beq.n	800a10c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	61bb      	str	r3, [r7, #24]
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a108:	bf00      	nop
 800a10a:	e000      	b.n	800a10e <xTaskGenericNotifyFromISR+0x106>
					break;
 800a10c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a10e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a112:	2b01      	cmp	r3, #1
 800a114:	d146      	bne.n	800a1a4 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	617b      	str	r3, [r7, #20]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a136:	4b21      	ldr	r3, [pc, #132]	@ (800a1bc <xTaskGenericNotifyFromISR+0x1b4>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d11c      	bne.n	800a178 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	3304      	adds	r3, #4
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe fdbd 	bl	8008cc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14c:	2201      	movs	r2, #1
 800a14e:	409a      	lsls	r2, r3
 800a150:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c0 <xTaskGenericNotifyFromISR+0x1b8>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4313      	orrs	r3, r2
 800a156:	4a1a      	ldr	r2, [pc, #104]	@ (800a1c0 <xTaskGenericNotifyFromISR+0x1b8>)
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4a17      	ldr	r2, [pc, #92]	@ (800a1c4 <xTaskGenericNotifyFromISR+0x1bc>)
 800a168:	441a      	add	r2, r3
 800a16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16c:	3304      	adds	r3, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7fe fd49 	bl	8008c08 <vListInsertEnd>
 800a176:	e005      	b.n	800a184 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17a:	3318      	adds	r3, #24
 800a17c:	4619      	mov	r1, r3
 800a17e:	4812      	ldr	r0, [pc, #72]	@ (800a1c8 <xTaskGenericNotifyFromISR+0x1c0>)
 800a180:	f7fe fd42 	bl	8008c08 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a188:	4b10      	ldr	r3, [pc, #64]	@ (800a1cc <xTaskGenericNotifyFromISR+0x1c4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18e:	429a      	cmp	r2, r3
 800a190:	d908      	bls.n	800a1a4 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a19a:	2201      	movs	r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a19e:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d0 <xTaskGenericNotifyFromISR+0x1c8>)
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f383 8811 	msr	BASEPRI, r3
}
 800a1ae:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3738      	adds	r7, #56	@ 0x38
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000ed4 	.word	0x20000ed4
 800a1c0:	20000eb4 	.word	0x20000eb4
 800a1c4:	20000db0 	.word	0x20000db0
 800a1c8:	20000e6c 	.word	0x20000e6c
 800a1cc:	20000dac 	.word	0x20000dac
 800a1d0:	20000ec0 	.word	0x20000ec0

0800a1d4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d102      	bne.n	800a1e8 <xTaskNotifyStateClear+0x14>
 800a1e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a21c <xTaskNotifyStateClear+0x48>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	e000      	b.n	800a1ea <xTaskNotifyStateClear+0x16>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a1ec:	f000 f9ac 	bl	800a548 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d106      	bne.n	800a20a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 800a204:	2301      	movs	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	e001      	b.n	800a20e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a20e:	f000 f9cd 	bl	800a5ac <vPortExitCritical>

		return xReturn;
 800a212:	68fb      	ldr	r3, [r7, #12]
	}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000dac 	.word	0x20000dac

0800a220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a22a:	4b29      	ldr	r3, [pc, #164]	@ (800a2d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a230:	4b28      	ldr	r3, [pc, #160]	@ (800a2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3304      	adds	r3, #4
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fd43 	bl	8008cc2 <uxListRemove>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10b      	bne.n	800a25a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a242:	4b24      	ldr	r3, [pc, #144]	@ (800a2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a248:	2201      	movs	r2, #1
 800a24a:	fa02 f303 	lsl.w	r3, r2, r3
 800a24e:	43da      	mvns	r2, r3
 800a250:	4b21      	ldr	r3, [pc, #132]	@ (800a2d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4013      	ands	r3, r2
 800a256:	4a20      	ldr	r2, [pc, #128]	@ (800a2d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a258:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a260:	d10a      	bne.n	800a278 <prvAddCurrentTaskToDelayedList+0x58>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a268:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4619      	mov	r1, r3
 800a270:	481a      	ldr	r0, [pc, #104]	@ (800a2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a272:	f7fe fcc9 	bl	8008c08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a276:	e026      	b.n	800a2c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4413      	add	r3, r2
 800a27e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a280:	4b14      	ldr	r3, [pc, #80]	@ (800a2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d209      	bcs.n	800a2a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a290:	4b13      	ldr	r3, [pc, #76]	@ (800a2e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3304      	adds	r3, #4
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7fe fcd7 	bl	8008c50 <vListInsert>
}
 800a2a2:	e010      	b.n	800a2c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a2e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	f7fe fccd 	bl	8008c50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d202      	bcs.n	800a2c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a2c0:	4a09      	ldr	r2, [pc, #36]	@ (800a2e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	6013      	str	r3, [r2, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000eb0 	.word	0x20000eb0
 800a2d4:	20000dac 	.word	0x20000dac
 800a2d8:	20000eb4 	.word	0x20000eb4
 800a2dc:	20000e98 	.word	0x20000e98
 800a2e0:	20000e68 	.word	0x20000e68
 800a2e4:	20000e64 	.word	0x20000e64
 800a2e8:	20000ecc 	.word	0x20000ecc

0800a2ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3b04      	subs	r3, #4
 800a2fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b04      	subs	r3, #4
 800a30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f023 0201 	bic.w	r2, r3, #1
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3b04      	subs	r3, #4
 800a31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a31c:	4a0c      	ldr	r2, [pc, #48]	@ (800a350 <pxPortInitialiseStack+0x64>)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3b14      	subs	r3, #20
 800a326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3b04      	subs	r3, #4
 800a332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f06f 0202 	mvn.w	r2, #2
 800a33a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3b20      	subs	r3, #32
 800a340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	0800a355 	.word	0x0800a355

0800a354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a35e:	4b13      	ldr	r3, [pc, #76]	@ (800a3ac <prvTaskExitError+0x58>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a366:	d00b      	beq.n	800a380 <prvTaskExitError+0x2c>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	60fb      	str	r3, [r7, #12]
}
 800a37a:	bf00      	nop
 800a37c:	bf00      	nop
 800a37e:	e7fd      	b.n	800a37c <prvTaskExitError+0x28>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	60bb      	str	r3, [r7, #8]
}
 800a392:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a394:	bf00      	nop
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d0fc      	beq.n	800a396 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	200002b4 	.word	0x200002b4

0800a3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3b0:	4b07      	ldr	r3, [pc, #28]	@ (800a3d0 <pxCurrentTCBConst2>)
 800a3b2:	6819      	ldr	r1, [r3, #0]
 800a3b4:	6808      	ldr	r0, [r1, #0]
 800a3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ba:	f380 8809 	msr	PSP, r0
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f380 8811 	msr	BASEPRI, r0
 800a3ca:	4770      	bx	lr
 800a3cc:	f3af 8000 	nop.w

0800a3d0 <pxCurrentTCBConst2>:
 800a3d0:	20000dac 	.word	0x20000dac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop

0800a3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3d8:	4808      	ldr	r0, [pc, #32]	@ (800a3fc <prvPortStartFirstTask+0x24>)
 800a3da:	6800      	ldr	r0, [r0, #0]
 800a3dc:	6800      	ldr	r0, [r0, #0]
 800a3de:	f380 8808 	msr	MSP, r0
 800a3e2:	f04f 0000 	mov.w	r0, #0
 800a3e6:	f380 8814 	msr	CONTROL, r0
 800a3ea:	b662      	cpsie	i
 800a3ec:	b661      	cpsie	f
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	df00      	svc	0
 800a3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3fa:	bf00      	nop
 800a3fc:	e000ed08 	.word	0xe000ed08

0800a400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a406:	4b47      	ldr	r3, [pc, #284]	@ (800a524 <xPortStartScheduler+0x124>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a47      	ldr	r2, [pc, #284]	@ (800a528 <xPortStartScheduler+0x128>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d10b      	bne.n	800a428 <xPortStartScheduler+0x28>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60fb      	str	r3, [r7, #12]
}
 800a422:	bf00      	nop
 800a424:	bf00      	nop
 800a426:	e7fd      	b.n	800a424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a428:	4b3e      	ldr	r3, [pc, #248]	@ (800a524 <xPortStartScheduler+0x124>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a3f      	ldr	r2, [pc, #252]	@ (800a52c <xPortStartScheduler+0x12c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d10b      	bne.n	800a44a <xPortStartScheduler+0x4a>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	613b      	str	r3, [r7, #16]
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop
 800a448:	e7fd      	b.n	800a446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a44a:	4b39      	ldr	r3, [pc, #228]	@ (800a530 <xPortStartScheduler+0x130>)
 800a44c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	22ff      	movs	r2, #255	@ 0xff
 800a45a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	b2db      	uxtb	r3, r3
 800a462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	b2db      	uxtb	r3, r3
 800a468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	4b31      	ldr	r3, [pc, #196]	@ (800a534 <xPortStartScheduler+0x134>)
 800a470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a472:	4b31      	ldr	r3, [pc, #196]	@ (800a538 <xPortStartScheduler+0x138>)
 800a474:	2207      	movs	r2, #7
 800a476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a478:	e009      	b.n	800a48e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a47a:	4b2f      	ldr	r3, [pc, #188]	@ (800a538 <xPortStartScheduler+0x138>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3b01      	subs	r3, #1
 800a480:	4a2d      	ldr	r2, [pc, #180]	@ (800a538 <xPortStartScheduler+0x138>)
 800a482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	b2db      	uxtb	r3, r3
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a48e:	78fb      	ldrb	r3, [r7, #3]
 800a490:	b2db      	uxtb	r3, r3
 800a492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a496:	2b80      	cmp	r3, #128	@ 0x80
 800a498:	d0ef      	beq.n	800a47a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a49a:	4b27      	ldr	r3, [pc, #156]	@ (800a538 <xPortStartScheduler+0x138>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f1c3 0307 	rsb	r3, r3, #7
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d00b      	beq.n	800a4be <xPortStartScheduler+0xbe>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60bb      	str	r3, [r7, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4be:	4b1e      	ldr	r3, [pc, #120]	@ (800a538 <xPortStartScheduler+0x138>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a538 <xPortStartScheduler+0x138>)
 800a4c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a538 <xPortStartScheduler+0x138>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a4d0:	4a19      	ldr	r2, [pc, #100]	@ (800a538 <xPortStartScheduler+0x138>)
 800a4d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4dc:	4b17      	ldr	r3, [pc, #92]	@ (800a53c <xPortStartScheduler+0x13c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a16      	ldr	r2, [pc, #88]	@ (800a53c <xPortStartScheduler+0x13c>)
 800a4e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a4e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4e8:	4b14      	ldr	r3, [pc, #80]	@ (800a53c <xPortStartScheduler+0x13c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a13      	ldr	r2, [pc, #76]	@ (800a53c <xPortStartScheduler+0x13c>)
 800a4ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4f4:	f000 f8da 	bl	800a6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4f8:	4b11      	ldr	r3, [pc, #68]	@ (800a540 <xPortStartScheduler+0x140>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4fe:	f000 f8f9 	bl	800a6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a502:	4b10      	ldr	r3, [pc, #64]	@ (800a544 <xPortStartScheduler+0x144>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a0f      	ldr	r2, [pc, #60]	@ (800a544 <xPortStartScheduler+0x144>)
 800a508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a50c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a50e:	f7ff ff63 	bl	800a3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a512:	f7ff fb07 	bl	8009b24 <vTaskSwitchContext>
	prvTaskExitError();
 800a516:	f7ff ff1d 	bl	800a354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	e000ed00 	.word	0xe000ed00
 800a528:	410fc271 	.word	0x410fc271
 800a52c:	410fc270 	.word	0x410fc270
 800a530:	e000e400 	.word	0xe000e400
 800a534:	20000ed8 	.word	0x20000ed8
 800a538:	20000edc 	.word	0x20000edc
 800a53c:	e000ed20 	.word	0xe000ed20
 800a540:	200002b4 	.word	0x200002b4
 800a544:	e000ef34 	.word	0xe000ef34

0800a548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	607b      	str	r3, [r7, #4]
}
 800a560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a562:	4b10      	ldr	r3, [pc, #64]	@ (800a5a4 <vPortEnterCritical+0x5c>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3301      	adds	r3, #1
 800a568:	4a0e      	ldr	r2, [pc, #56]	@ (800a5a4 <vPortEnterCritical+0x5c>)
 800a56a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a56c:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a4 <vPortEnterCritical+0x5c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d110      	bne.n	800a596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a574:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a8 <vPortEnterCritical+0x60>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00b      	beq.n	800a596 <vPortEnterCritical+0x4e>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	603b      	str	r3, [r7, #0]
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	e7fd      	b.n	800a592 <vPortEnterCritical+0x4a>
	}
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	200002b4 	.word	0x200002b4
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5b2:	4b12      	ldr	r3, [pc, #72]	@ (800a5fc <vPortExitCritical+0x50>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10b      	bne.n	800a5d2 <vPortExitCritical+0x26>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	607b      	str	r3, [r7, #4]
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	e7fd      	b.n	800a5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5fc <vPortExitCritical+0x50>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	4a08      	ldr	r2, [pc, #32]	@ (800a5fc <vPortExitCritical+0x50>)
 800a5da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5dc:	4b07      	ldr	r3, [pc, #28]	@ (800a5fc <vPortExitCritical+0x50>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d105      	bne.n	800a5f0 <vPortExitCritical+0x44>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f383 8811 	msr	BASEPRI, r3
}
 800a5ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	200002b4 	.word	0x200002b4

0800a600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a600:	f3ef 8009 	mrs	r0, PSP
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	4b15      	ldr	r3, [pc, #84]	@ (800a660 <pxCurrentTCBConst>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	f01e 0f10 	tst.w	lr, #16
 800a610:	bf08      	it	eq
 800a612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61a:	6010      	str	r0, [r2, #0]
 800a61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a624:	f380 8811 	msr	BASEPRI, r0
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f7ff fa78 	bl	8009b24 <vTaskSwitchContext>
 800a634:	f04f 0000 	mov.w	r0, #0
 800a638:	f380 8811 	msr	BASEPRI, r0
 800a63c:	bc09      	pop	{r0, r3}
 800a63e:	6819      	ldr	r1, [r3, #0]
 800a640:	6808      	ldr	r0, [r1, #0]
 800a642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a646:	f01e 0f10 	tst.w	lr, #16
 800a64a:	bf08      	it	eq
 800a64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a650:	f380 8809 	msr	PSP, r0
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	f3af 8000 	nop.w

0800a660 <pxCurrentTCBConst>:
 800a660:	20000dac 	.word	0x20000dac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop

0800a668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	607b      	str	r3, [r7, #4]
}
 800a680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a682:	f7ff f995 	bl	80099b0 <xTaskIncrementTick>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a68c:	4b06      	ldr	r3, [pc, #24]	@ (800a6a8 <SysTick_Handler+0x40>)
 800a68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	2300      	movs	r3, #0
 800a696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	f383 8811 	msr	BASEPRI, r3
}
 800a69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6a0:	bf00      	nop
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	e000ed04 	.word	0xe000ed04

0800a6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e0 <vPortSetupTimerInterrupt+0x34>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e4 <vPortSetupTimerInterrupt+0x38>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e8 <vPortSetupTimerInterrupt+0x3c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a6ec <vPortSetupTimerInterrupt+0x40>)
 800a6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c6:	099b      	lsrs	r3, r3, #6
 800a6c8:	4a09      	ldr	r2, [pc, #36]	@ (800a6f0 <vPortSetupTimerInterrupt+0x44>)
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6ce:	4b04      	ldr	r3, [pc, #16]	@ (800a6e0 <vPortSetupTimerInterrupt+0x34>)
 800a6d0:	2207      	movs	r2, #7
 800a6d2:	601a      	str	r2, [r3, #0]
}
 800a6d4:	bf00      	nop
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	e000e010 	.word	0xe000e010
 800a6e4:	e000e018 	.word	0xe000e018
 800a6e8:	200002a8 	.word	0x200002a8
 800a6ec:	10624dd3 	.word	0x10624dd3
 800a6f0:	e000e014 	.word	0xe000e014

0800a6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a704 <vPortEnableVFP+0x10>
 800a6f8:	6801      	ldr	r1, [r0, #0]
 800a6fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a6fe:	6001      	str	r1, [r0, #0]
 800a700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a702:	bf00      	nop
 800a704:	e000ed88 	.word	0xe000ed88

0800a708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a70e:	f3ef 8305 	mrs	r3, IPSR
 800a712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b0f      	cmp	r3, #15
 800a718:	d915      	bls.n	800a746 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a71a:	4a18      	ldr	r2, [pc, #96]	@ (800a77c <vPortValidateInterruptPriority+0x74>)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a724:	4b16      	ldr	r3, [pc, #88]	@ (800a780 <vPortValidateInterruptPriority+0x78>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	7afa      	ldrb	r2, [r7, #11]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d20b      	bcs.n	800a746 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	607b      	str	r3, [r7, #4]
}
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a746:	4b0f      	ldr	r3, [pc, #60]	@ (800a784 <vPortValidateInterruptPriority+0x7c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a74e:	4b0e      	ldr	r3, [pc, #56]	@ (800a788 <vPortValidateInterruptPriority+0x80>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d90b      	bls.n	800a76e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	603b      	str	r3, [r7, #0]
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	e7fd      	b.n	800a76a <vPortValidateInterruptPriority+0x62>
	}
 800a76e:	bf00      	nop
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	e000e3f0 	.word	0xe000e3f0
 800a780:	20000ed8 	.word	0x20000ed8
 800a784:	e000ed0c 	.word	0xe000ed0c
 800a788:	20000edc 	.word	0x20000edc

0800a78c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08a      	sub	sp, #40	@ 0x28
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a794:	2300      	movs	r3, #0
 800a796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a798:	f7ff f85e 	bl	8009858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a79c:	4b5c      	ldr	r3, [pc, #368]	@ (800a910 <pvPortMalloc+0x184>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7a4:	f000 f924 	bl	800a9f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a914 <pvPortMalloc+0x188>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f040 8095 	bne.w	800a8e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d01e      	beq.n	800a7fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a7bc:	2208      	movs	r2, #8
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d015      	beq.n	800a7fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f023 0307 	bic.w	r3, r3, #7
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00b      	beq.n	800a7fa <pvPortMalloc+0x6e>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	617b      	str	r3, [r7, #20]
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop
 800a7f8:	e7fd      	b.n	800a7f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d06f      	beq.n	800a8e0 <pvPortMalloc+0x154>
 800a800:	4b45      	ldr	r3, [pc, #276]	@ (800a918 <pvPortMalloc+0x18c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	429a      	cmp	r2, r3
 800a808:	d86a      	bhi.n	800a8e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a80a:	4b44      	ldr	r3, [pc, #272]	@ (800a91c <pvPortMalloc+0x190>)
 800a80c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a80e:	4b43      	ldr	r3, [pc, #268]	@ (800a91c <pvPortMalloc+0x190>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a814:	e004      	b.n	800a820 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	429a      	cmp	r2, r3
 800a828:	d903      	bls.n	800a832 <pvPortMalloc+0xa6>
 800a82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1f1      	bne.n	800a816 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a832:	4b37      	ldr	r3, [pc, #220]	@ (800a910 <pvPortMalloc+0x184>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a838:	429a      	cmp	r2, r3
 800a83a:	d051      	beq.n	800a8e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2208      	movs	r2, #8
 800a842:	4413      	add	r3, r2
 800a844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a850:	685a      	ldr	r2, [r3, #4]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	1ad2      	subs	r2, r2, r3
 800a856:	2308      	movs	r3, #8
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d920      	bls.n	800a8a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4413      	add	r3, r2
 800a864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	f003 0307 	and.w	r3, r3, #7
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00b      	beq.n	800a888 <pvPortMalloc+0xfc>
	__asm volatile
 800a870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	613b      	str	r3, [r7, #16]
}
 800a882:	bf00      	nop
 800a884:	bf00      	nop
 800a886:	e7fd      	b.n	800a884 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a89a:	69b8      	ldr	r0, [r7, #24]
 800a89c:	f000 f90a 	bl	800aab4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a918 <pvPortMalloc+0x18c>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a918 <pvPortMalloc+0x18c>)
 800a8ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a918 <pvPortMalloc+0x18c>)
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a920 <pvPortMalloc+0x194>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d203      	bcs.n	800a8c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8ba:	4b17      	ldr	r3, [pc, #92]	@ (800a918 <pvPortMalloc+0x18c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a18      	ldr	r2, [pc, #96]	@ (800a920 <pvPortMalloc+0x194>)
 800a8c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	4b13      	ldr	r3, [pc, #76]	@ (800a914 <pvPortMalloc+0x188>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	431a      	orrs	r2, r3
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a8d6:	4b13      	ldr	r3, [pc, #76]	@ (800a924 <pvPortMalloc+0x198>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	4a11      	ldr	r2, [pc, #68]	@ (800a924 <pvPortMalloc+0x198>)
 800a8de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8e0:	f7fe ffc8 	bl	8009874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00b      	beq.n	800a906 <pvPortMalloc+0x17a>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	60fb      	str	r3, [r7, #12]
}
 800a900:	bf00      	nop
 800a902:	bf00      	nop
 800a904:	e7fd      	b.n	800a902 <pvPortMalloc+0x176>
	return pvReturn;
 800a906:	69fb      	ldr	r3, [r7, #28]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3728      	adds	r7, #40	@ 0x28
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	20005d08 	.word	0x20005d08
 800a914:	20005d1c 	.word	0x20005d1c
 800a918:	20005d0c 	.word	0x20005d0c
 800a91c:	20005d00 	.word	0x20005d00
 800a920:	20005d10 	.word	0x20005d10
 800a924:	20005d14 	.word	0x20005d14

0800a928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d04f      	beq.n	800a9da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a93a:	2308      	movs	r3, #8
 800a93c:	425b      	negs	r3, r3
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	4413      	add	r3, r2
 800a942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	4b25      	ldr	r3, [pc, #148]	@ (800a9e4 <vPortFree+0xbc>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4013      	ands	r3, r2
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10b      	bne.n	800a96e <vPortFree+0x46>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	60fb      	str	r3, [r7, #12]
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	e7fd      	b.n	800a96a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00b      	beq.n	800a98e <vPortFree+0x66>
	__asm volatile
 800a976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	60bb      	str	r3, [r7, #8]
}
 800a988:	bf00      	nop
 800a98a:	bf00      	nop
 800a98c:	e7fd      	b.n	800a98a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	4b14      	ldr	r3, [pc, #80]	@ (800a9e4 <vPortFree+0xbc>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4013      	ands	r3, r2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d01e      	beq.n	800a9da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d11a      	bne.n	800a9da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a9e4 <vPortFree+0xbc>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	43db      	mvns	r3, r3
 800a9ae:	401a      	ands	r2, r3
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9b4:	f7fe ff50 	bl	8009858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a9e8 <vPortFree+0xc0>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	4a09      	ldr	r2, [pc, #36]	@ (800a9e8 <vPortFree+0xc0>)
 800a9c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9c6:	6938      	ldr	r0, [r7, #16]
 800a9c8:	f000 f874 	bl	800aab4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a9cc:	4b07      	ldr	r3, [pc, #28]	@ (800a9ec <vPortFree+0xc4>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	4a06      	ldr	r2, [pc, #24]	@ (800a9ec <vPortFree+0xc4>)
 800a9d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a9d6:	f7fe ff4d 	bl	8009874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9da:	bf00      	nop
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20005d1c 	.word	0x20005d1c
 800a9e8:	20005d0c 	.word	0x20005d0c
 800a9ec:	20005d18 	.word	0x20005d18

0800a9f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9f6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a9fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9fc:	4b27      	ldr	r3, [pc, #156]	@ (800aa9c <prvHeapInit+0xac>)
 800a9fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00c      	beq.n	800aa24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3307      	adds	r3, #7
 800aa0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0307 	bic.w	r3, r3, #7
 800aa16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	4a1f      	ldr	r2, [pc, #124]	@ (800aa9c <prvHeapInit+0xac>)
 800aa20:	4413      	add	r3, r2
 800aa22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa28:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa0 <prvHeapInit+0xb0>)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa2e:	4b1c      	ldr	r3, [pc, #112]	@ (800aaa0 <prvHeapInit+0xb0>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	4413      	add	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa3c:	2208      	movs	r2, #8
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	1a9b      	subs	r3, r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 0307 	bic.w	r3, r3, #7
 800aa4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4a15      	ldr	r2, [pc, #84]	@ (800aaa4 <prvHeapInit+0xb4>)
 800aa50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa52:	4b14      	ldr	r3, [pc, #80]	@ (800aaa4 <prvHeapInit+0xb4>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2200      	movs	r2, #0
 800aa58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa5a:	4b12      	ldr	r3, [pc, #72]	@ (800aaa4 <prvHeapInit+0xb4>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	1ad2      	subs	r2, r2, r3
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa70:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa4 <prvHeapInit+0xb4>)
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	4a0a      	ldr	r2, [pc, #40]	@ (800aaa8 <prvHeapInit+0xb8>)
 800aa7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4a09      	ldr	r2, [pc, #36]	@ (800aaac <prvHeapInit+0xbc>)
 800aa86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa88:	4b09      	ldr	r3, [pc, #36]	@ (800aab0 <prvHeapInit+0xc0>)
 800aa8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa8e:	601a      	str	r2, [r3, #0]
}
 800aa90:	bf00      	nop
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	20000ee0 	.word	0x20000ee0
 800aaa0:	20005d00 	.word	0x20005d00
 800aaa4:	20005d08 	.word	0x20005d08
 800aaa8:	20005d10 	.word	0x20005d10
 800aaac:	20005d0c 	.word	0x20005d0c
 800aab0:	20005d1c 	.word	0x20005d1c

0800aab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aabc:	4b28      	ldr	r3, [pc, #160]	@ (800ab60 <prvInsertBlockIntoFreeList+0xac>)
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	e002      	b.n	800aac8 <prvInsertBlockIntoFreeList+0x14>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d8f7      	bhi.n	800aac2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	4413      	add	r3, r2
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d108      	bne.n	800aaf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	441a      	add	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	441a      	add	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d118      	bne.n	800ab3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	4b15      	ldr	r3, [pc, #84]	@ (800ab64 <prvInsertBlockIntoFreeList+0xb0>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d00d      	beq.n	800ab32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	441a      	add	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	e008      	b.n	800ab44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab32:	4b0c      	ldr	r3, [pc, #48]	@ (800ab64 <prvInsertBlockIntoFreeList+0xb0>)
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	e003      	b.n	800ab44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d002      	beq.n	800ab52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab52:	bf00      	nop
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	20005d00 	.word	0x20005d00
 800ab64:	20005d08 	.word	0x20005d08

0800ab68 <atof>:
 800ab68:	2100      	movs	r1, #0
 800ab6a:	f000 be13 	b.w	800b794 <strtod>

0800ab6e <atoi>:
 800ab6e:	220a      	movs	r2, #10
 800ab70:	2100      	movs	r1, #0
 800ab72:	f000 be97 	b.w	800b8a4 <strtol>

0800ab76 <atol>:
 800ab76:	220a      	movs	r2, #10
 800ab78:	2100      	movs	r1, #0
 800ab7a:	f000 be93 	b.w	800b8a4 <strtol>

0800ab7e <sulp>:
 800ab7e:	b570      	push	{r4, r5, r6, lr}
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	ec45 4b10 	vmov	d0, r4, r5
 800ab88:	4616      	mov	r6, r2
 800ab8a:	f003 fde5 	bl	800e758 <__ulp>
 800ab8e:	ec51 0b10 	vmov	r0, r1, d0
 800ab92:	b17e      	cbz	r6, 800abb4 <sulp+0x36>
 800ab94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dd09      	ble.n	800abb4 <sulp+0x36>
 800aba0:	051b      	lsls	r3, r3, #20
 800aba2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aba6:	2400      	movs	r4, #0
 800aba8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800abac:	4622      	mov	r2, r4
 800abae:	462b      	mov	r3, r5
 800abb0:	f7f5 fd32 	bl	8000618 <__aeabi_dmul>
 800abb4:	ec41 0b10 	vmov	d0, r0, r1
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	0000      	movs	r0, r0
 800abbc:	0000      	movs	r0, r0
	...

0800abc0 <_strtod_l>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	b09f      	sub	sp, #124	@ 0x7c
 800abc6:	460c      	mov	r4, r1
 800abc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800abca:	2200      	movs	r2, #0
 800abcc:	921a      	str	r2, [sp, #104]	@ 0x68
 800abce:	9005      	str	r0, [sp, #20]
 800abd0:	f04f 0a00 	mov.w	sl, #0
 800abd4:	f04f 0b00 	mov.w	fp, #0
 800abd8:	460a      	mov	r2, r1
 800abda:	9219      	str	r2, [sp, #100]	@ 0x64
 800abdc:	7811      	ldrb	r1, [r2, #0]
 800abde:	292b      	cmp	r1, #43	@ 0x2b
 800abe0:	d04a      	beq.n	800ac78 <_strtod_l+0xb8>
 800abe2:	d838      	bhi.n	800ac56 <_strtod_l+0x96>
 800abe4:	290d      	cmp	r1, #13
 800abe6:	d832      	bhi.n	800ac4e <_strtod_l+0x8e>
 800abe8:	2908      	cmp	r1, #8
 800abea:	d832      	bhi.n	800ac52 <_strtod_l+0x92>
 800abec:	2900      	cmp	r1, #0
 800abee:	d03b      	beq.n	800ac68 <_strtod_l+0xa8>
 800abf0:	2200      	movs	r2, #0
 800abf2:	920e      	str	r2, [sp, #56]	@ 0x38
 800abf4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abf6:	782a      	ldrb	r2, [r5, #0]
 800abf8:	2a30      	cmp	r2, #48	@ 0x30
 800abfa:	f040 80b2 	bne.w	800ad62 <_strtod_l+0x1a2>
 800abfe:	786a      	ldrb	r2, [r5, #1]
 800ac00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac04:	2a58      	cmp	r2, #88	@ 0x58
 800ac06:	d16e      	bne.n	800ace6 <_strtod_l+0x126>
 800ac08:	9302      	str	r3, [sp, #8]
 800ac0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4a8f      	ldr	r2, [pc, #572]	@ (800ae50 <_strtod_l+0x290>)
 800ac14:	9805      	ldr	r0, [sp, #20]
 800ac16:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ac18:	a919      	add	r1, sp, #100	@ 0x64
 800ac1a:	f002 fe97 	bl	800d94c <__gethex>
 800ac1e:	f010 060f 	ands.w	r6, r0, #15
 800ac22:	4604      	mov	r4, r0
 800ac24:	d005      	beq.n	800ac32 <_strtod_l+0x72>
 800ac26:	2e06      	cmp	r6, #6
 800ac28:	d128      	bne.n	800ac7c <_strtod_l+0xbc>
 800ac2a:	3501      	adds	r5, #1
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac30:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f040 858e 	bne.w	800b756 <_strtod_l+0xb96>
 800ac3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac3c:	b1cb      	cbz	r3, 800ac72 <_strtod_l+0xb2>
 800ac3e:	4652      	mov	r2, sl
 800ac40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ac44:	ec43 2b10 	vmov	d0, r2, r3
 800ac48:	b01f      	add	sp, #124	@ 0x7c
 800ac4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4e:	2920      	cmp	r1, #32
 800ac50:	d1ce      	bne.n	800abf0 <_strtod_l+0x30>
 800ac52:	3201      	adds	r2, #1
 800ac54:	e7c1      	b.n	800abda <_strtod_l+0x1a>
 800ac56:	292d      	cmp	r1, #45	@ 0x2d
 800ac58:	d1ca      	bne.n	800abf0 <_strtod_l+0x30>
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ac5e:	1c51      	adds	r1, r2, #1
 800ac60:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac62:	7852      	ldrb	r2, [r2, #1]
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	d1c5      	bne.n	800abf4 <_strtod_l+0x34>
 800ac68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac6a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f040 8570 	bne.w	800b752 <_strtod_l+0xb92>
 800ac72:	4652      	mov	r2, sl
 800ac74:	465b      	mov	r3, fp
 800ac76:	e7e5      	b.n	800ac44 <_strtod_l+0x84>
 800ac78:	2100      	movs	r1, #0
 800ac7a:	e7ef      	b.n	800ac5c <_strtod_l+0x9c>
 800ac7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac7e:	b13a      	cbz	r2, 800ac90 <_strtod_l+0xd0>
 800ac80:	2135      	movs	r1, #53	@ 0x35
 800ac82:	a81c      	add	r0, sp, #112	@ 0x70
 800ac84:	f003 fe62 	bl	800e94c <__copybits>
 800ac88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac8a:	9805      	ldr	r0, [sp, #20]
 800ac8c:	f003 fa38 	bl	800e100 <_Bfree>
 800ac90:	3e01      	subs	r6, #1
 800ac92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac94:	2e04      	cmp	r6, #4
 800ac96:	d806      	bhi.n	800aca6 <_strtod_l+0xe6>
 800ac98:	e8df f006 	tbb	[pc, r6]
 800ac9c:	201d0314 	.word	0x201d0314
 800aca0:	14          	.byte	0x14
 800aca1:	00          	.byte	0x00
 800aca2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aca6:	05e1      	lsls	r1, r4, #23
 800aca8:	bf48      	it	mi
 800acaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800acae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acb2:	0d1b      	lsrs	r3, r3, #20
 800acb4:	051b      	lsls	r3, r3, #20
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1bb      	bne.n	800ac32 <_strtod_l+0x72>
 800acba:	f001 fed5 	bl	800ca68 <__errno>
 800acbe:	2322      	movs	r3, #34	@ 0x22
 800acc0:	6003      	str	r3, [r0, #0]
 800acc2:	e7b6      	b.n	800ac32 <_strtod_l+0x72>
 800acc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800acc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800accc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800acd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800acd4:	e7e7      	b.n	800aca6 <_strtod_l+0xe6>
 800acd6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ae58 <_strtod_l+0x298>
 800acda:	e7e4      	b.n	800aca6 <_strtod_l+0xe6>
 800acdc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ace0:	f04f 3aff 	mov.w	sl, #4294967295
 800ace4:	e7df      	b.n	800aca6 <_strtod_l+0xe6>
 800ace6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	9219      	str	r2, [sp, #100]	@ 0x64
 800acec:	785b      	ldrb	r3, [r3, #1]
 800acee:	2b30      	cmp	r3, #48	@ 0x30
 800acf0:	d0f9      	beq.n	800ace6 <_strtod_l+0x126>
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d09d      	beq.n	800ac32 <_strtod_l+0x72>
 800acf6:	2301      	movs	r3, #1
 800acf8:	2700      	movs	r7, #0
 800acfa:	9308      	str	r3, [sp, #32]
 800acfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acfe:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad00:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ad02:	46b9      	mov	r9, r7
 800ad04:	220a      	movs	r2, #10
 800ad06:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ad08:	7805      	ldrb	r5, [r0, #0]
 800ad0a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ad0e:	b2d9      	uxtb	r1, r3
 800ad10:	2909      	cmp	r1, #9
 800ad12:	d928      	bls.n	800ad66 <_strtod_l+0x1a6>
 800ad14:	494f      	ldr	r1, [pc, #316]	@ (800ae54 <_strtod_l+0x294>)
 800ad16:	2201      	movs	r2, #1
 800ad18:	f001 fd8f 	bl	800c83a <strncmp>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d032      	beq.n	800ad86 <_strtod_l+0x1c6>
 800ad20:	2000      	movs	r0, #0
 800ad22:	462a      	mov	r2, r5
 800ad24:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad26:	464d      	mov	r5, r9
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2a65      	cmp	r2, #101	@ 0x65
 800ad2c:	d001      	beq.n	800ad32 <_strtod_l+0x172>
 800ad2e:	2a45      	cmp	r2, #69	@ 0x45
 800ad30:	d114      	bne.n	800ad5c <_strtod_l+0x19c>
 800ad32:	b91d      	cbnz	r5, 800ad3c <_strtod_l+0x17c>
 800ad34:	9a08      	ldr	r2, [sp, #32]
 800ad36:	4302      	orrs	r2, r0
 800ad38:	d096      	beq.n	800ac68 <_strtod_l+0xa8>
 800ad3a:	2500      	movs	r5, #0
 800ad3c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ad3e:	1c62      	adds	r2, r4, #1
 800ad40:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad42:	7862      	ldrb	r2, [r4, #1]
 800ad44:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad46:	d07a      	beq.n	800ae3e <_strtod_l+0x27e>
 800ad48:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad4a:	d07e      	beq.n	800ae4a <_strtod_l+0x28a>
 800ad4c:	f04f 0c00 	mov.w	ip, #0
 800ad50:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad54:	2909      	cmp	r1, #9
 800ad56:	f240 8085 	bls.w	800ae64 <_strtod_l+0x2a4>
 800ad5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad5c:	f04f 0800 	mov.w	r8, #0
 800ad60:	e0a5      	b.n	800aeae <_strtod_l+0x2ee>
 800ad62:	2300      	movs	r3, #0
 800ad64:	e7c8      	b.n	800acf8 <_strtod_l+0x138>
 800ad66:	f1b9 0f08 	cmp.w	r9, #8
 800ad6a:	bfd8      	it	le
 800ad6c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ad6e:	f100 0001 	add.w	r0, r0, #1
 800ad72:	bfda      	itte	le
 800ad74:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad78:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ad7a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ad7e:	f109 0901 	add.w	r9, r9, #1
 800ad82:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad84:	e7bf      	b.n	800ad06 <_strtod_l+0x146>
 800ad86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad8c:	785a      	ldrb	r2, [r3, #1]
 800ad8e:	f1b9 0f00 	cmp.w	r9, #0
 800ad92:	d03b      	beq.n	800ae0c <_strtod_l+0x24c>
 800ad94:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad96:	464d      	mov	r5, r9
 800ad98:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad9c:	2b09      	cmp	r3, #9
 800ad9e:	d912      	bls.n	800adc6 <_strtod_l+0x206>
 800ada0:	2301      	movs	r3, #1
 800ada2:	e7c2      	b.n	800ad2a <_strtod_l+0x16a>
 800ada4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	9219      	str	r2, [sp, #100]	@ 0x64
 800adaa:	785a      	ldrb	r2, [r3, #1]
 800adac:	3001      	adds	r0, #1
 800adae:	2a30      	cmp	r2, #48	@ 0x30
 800adb0:	d0f8      	beq.n	800ada4 <_strtod_l+0x1e4>
 800adb2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800adb6:	2b08      	cmp	r3, #8
 800adb8:	f200 84d2 	bhi.w	800b760 <_strtod_l+0xba0>
 800adbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adbe:	900a      	str	r0, [sp, #40]	@ 0x28
 800adc0:	2000      	movs	r0, #0
 800adc2:	930c      	str	r3, [sp, #48]	@ 0x30
 800adc4:	4605      	mov	r5, r0
 800adc6:	3a30      	subs	r2, #48	@ 0x30
 800adc8:	f100 0301 	add.w	r3, r0, #1
 800adcc:	d018      	beq.n	800ae00 <_strtod_l+0x240>
 800adce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800add0:	4419      	add	r1, r3
 800add2:	910a      	str	r1, [sp, #40]	@ 0x28
 800add4:	462e      	mov	r6, r5
 800add6:	f04f 0e0a 	mov.w	lr, #10
 800adda:	1c71      	adds	r1, r6, #1
 800addc:	eba1 0c05 	sub.w	ip, r1, r5
 800ade0:	4563      	cmp	r3, ip
 800ade2:	dc15      	bgt.n	800ae10 <_strtod_l+0x250>
 800ade4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ade8:	182b      	adds	r3, r5, r0
 800adea:	2b08      	cmp	r3, #8
 800adec:	f105 0501 	add.w	r5, r5, #1
 800adf0:	4405      	add	r5, r0
 800adf2:	dc1a      	bgt.n	800ae2a <_strtod_l+0x26a>
 800adf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adf6:	230a      	movs	r3, #10
 800adf8:	fb03 2301 	mla	r3, r3, r1, r2
 800adfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adfe:	2300      	movs	r3, #0
 800ae00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae02:	1c51      	adds	r1, r2, #1
 800ae04:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae06:	7852      	ldrb	r2, [r2, #1]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	e7c5      	b.n	800ad98 <_strtod_l+0x1d8>
 800ae0c:	4648      	mov	r0, r9
 800ae0e:	e7ce      	b.n	800adae <_strtod_l+0x1ee>
 800ae10:	2e08      	cmp	r6, #8
 800ae12:	dc05      	bgt.n	800ae20 <_strtod_l+0x260>
 800ae14:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ae16:	fb0e f606 	mul.w	r6, lr, r6
 800ae1a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ae1c:	460e      	mov	r6, r1
 800ae1e:	e7dc      	b.n	800adda <_strtod_l+0x21a>
 800ae20:	2910      	cmp	r1, #16
 800ae22:	bfd8      	it	le
 800ae24:	fb0e f707 	mulle.w	r7, lr, r7
 800ae28:	e7f8      	b.n	800ae1c <_strtod_l+0x25c>
 800ae2a:	2b0f      	cmp	r3, #15
 800ae2c:	bfdc      	itt	le
 800ae2e:	230a      	movle	r3, #10
 800ae30:	fb03 2707 	mlale	r7, r3, r7, r2
 800ae34:	e7e3      	b.n	800adfe <_strtod_l+0x23e>
 800ae36:	2300      	movs	r3, #0
 800ae38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e77a      	b.n	800ad34 <_strtod_l+0x174>
 800ae3e:	f04f 0c00 	mov.w	ip, #0
 800ae42:	1ca2      	adds	r2, r4, #2
 800ae44:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae46:	78a2      	ldrb	r2, [r4, #2]
 800ae48:	e782      	b.n	800ad50 <_strtod_l+0x190>
 800ae4a:	f04f 0c01 	mov.w	ip, #1
 800ae4e:	e7f8      	b.n	800ae42 <_strtod_l+0x282>
 800ae50:	08011770 	.word	0x08011770
 800ae54:	08011510 	.word	0x08011510
 800ae58:	7ff00000 	.word	0x7ff00000
 800ae5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae5e:	1c51      	adds	r1, r2, #1
 800ae60:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae62:	7852      	ldrb	r2, [r2, #1]
 800ae64:	2a30      	cmp	r2, #48	@ 0x30
 800ae66:	d0f9      	beq.n	800ae5c <_strtod_l+0x29c>
 800ae68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae6c:	2908      	cmp	r1, #8
 800ae6e:	f63f af75 	bhi.w	800ad5c <_strtod_l+0x19c>
 800ae72:	3a30      	subs	r2, #48	@ 0x30
 800ae74:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae78:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae7a:	f04f 080a 	mov.w	r8, #10
 800ae7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae80:	1c56      	adds	r6, r2, #1
 800ae82:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae84:	7852      	ldrb	r2, [r2, #1]
 800ae86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae8a:	f1be 0f09 	cmp.w	lr, #9
 800ae8e:	d939      	bls.n	800af04 <_strtod_l+0x344>
 800ae90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae92:	1a76      	subs	r6, r6, r1
 800ae94:	2e08      	cmp	r6, #8
 800ae96:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae9a:	dc03      	bgt.n	800aea4 <_strtod_l+0x2e4>
 800ae9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae9e:	4588      	cmp	r8, r1
 800aea0:	bfa8      	it	ge
 800aea2:	4688      	movge	r8, r1
 800aea4:	f1bc 0f00 	cmp.w	ip, #0
 800aea8:	d001      	beq.n	800aeae <_strtod_l+0x2ee>
 800aeaa:	f1c8 0800 	rsb	r8, r8, #0
 800aeae:	2d00      	cmp	r5, #0
 800aeb0:	d14e      	bne.n	800af50 <_strtod_l+0x390>
 800aeb2:	9908      	ldr	r1, [sp, #32]
 800aeb4:	4308      	orrs	r0, r1
 800aeb6:	f47f aebc 	bne.w	800ac32 <_strtod_l+0x72>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f47f aed4 	bne.w	800ac68 <_strtod_l+0xa8>
 800aec0:	2a69      	cmp	r2, #105	@ 0x69
 800aec2:	d028      	beq.n	800af16 <_strtod_l+0x356>
 800aec4:	dc25      	bgt.n	800af12 <_strtod_l+0x352>
 800aec6:	2a49      	cmp	r2, #73	@ 0x49
 800aec8:	d025      	beq.n	800af16 <_strtod_l+0x356>
 800aeca:	2a4e      	cmp	r2, #78	@ 0x4e
 800aecc:	f47f aecc 	bne.w	800ac68 <_strtod_l+0xa8>
 800aed0:	499a      	ldr	r1, [pc, #616]	@ (800b13c <_strtod_l+0x57c>)
 800aed2:	a819      	add	r0, sp, #100	@ 0x64
 800aed4:	f002 ff5c 	bl	800dd90 <__match>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	f43f aec5 	beq.w	800ac68 <_strtod_l+0xa8>
 800aede:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	2b28      	cmp	r3, #40	@ 0x28
 800aee4:	d12e      	bne.n	800af44 <_strtod_l+0x384>
 800aee6:	4996      	ldr	r1, [pc, #600]	@ (800b140 <_strtod_l+0x580>)
 800aee8:	aa1c      	add	r2, sp, #112	@ 0x70
 800aeea:	a819      	add	r0, sp, #100	@ 0x64
 800aeec:	f002 ff64 	bl	800ddb8 <__hexnan>
 800aef0:	2805      	cmp	r0, #5
 800aef2:	d127      	bne.n	800af44 <_strtod_l+0x384>
 800aef4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aef6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aefa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aefe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800af02:	e696      	b.n	800ac32 <_strtod_l+0x72>
 800af04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af06:	fb08 2101 	mla	r1, r8, r1, r2
 800af0a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800af0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800af10:	e7b5      	b.n	800ae7e <_strtod_l+0x2be>
 800af12:	2a6e      	cmp	r2, #110	@ 0x6e
 800af14:	e7da      	b.n	800aecc <_strtod_l+0x30c>
 800af16:	498b      	ldr	r1, [pc, #556]	@ (800b144 <_strtod_l+0x584>)
 800af18:	a819      	add	r0, sp, #100	@ 0x64
 800af1a:	f002 ff39 	bl	800dd90 <__match>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f43f aea2 	beq.w	800ac68 <_strtod_l+0xa8>
 800af24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af26:	4988      	ldr	r1, [pc, #544]	@ (800b148 <_strtod_l+0x588>)
 800af28:	3b01      	subs	r3, #1
 800af2a:	a819      	add	r0, sp, #100	@ 0x64
 800af2c:	9319      	str	r3, [sp, #100]	@ 0x64
 800af2e:	f002 ff2f 	bl	800dd90 <__match>
 800af32:	b910      	cbnz	r0, 800af3a <_strtod_l+0x37a>
 800af34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af36:	3301      	adds	r3, #1
 800af38:	9319      	str	r3, [sp, #100]	@ 0x64
 800af3a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b158 <_strtod_l+0x598>
 800af3e:	f04f 0a00 	mov.w	sl, #0
 800af42:	e676      	b.n	800ac32 <_strtod_l+0x72>
 800af44:	4881      	ldr	r0, [pc, #516]	@ (800b14c <_strtod_l+0x58c>)
 800af46:	f001 fdcb 	bl	800cae0 <nan>
 800af4a:	ec5b ab10 	vmov	sl, fp, d0
 800af4e:	e670      	b.n	800ac32 <_strtod_l+0x72>
 800af50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800af54:	eba8 0303 	sub.w	r3, r8, r3
 800af58:	f1b9 0f00 	cmp.w	r9, #0
 800af5c:	bf08      	it	eq
 800af5e:	46a9      	moveq	r9, r5
 800af60:	2d10      	cmp	r5, #16
 800af62:	9309      	str	r3, [sp, #36]	@ 0x24
 800af64:	462c      	mov	r4, r5
 800af66:	bfa8      	it	ge
 800af68:	2410      	movge	r4, #16
 800af6a:	f7f5 fadb 	bl	8000524 <__aeabi_ui2d>
 800af6e:	2d09      	cmp	r5, #9
 800af70:	4682      	mov	sl, r0
 800af72:	468b      	mov	fp, r1
 800af74:	dc13      	bgt.n	800af9e <_strtod_l+0x3de>
 800af76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f43f ae5a 	beq.w	800ac32 <_strtod_l+0x72>
 800af7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af80:	dd78      	ble.n	800b074 <_strtod_l+0x4b4>
 800af82:	2b16      	cmp	r3, #22
 800af84:	dc5f      	bgt.n	800b046 <_strtod_l+0x486>
 800af86:	4972      	ldr	r1, [pc, #456]	@ (800b150 <_strtod_l+0x590>)
 800af88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af90:	4652      	mov	r2, sl
 800af92:	465b      	mov	r3, fp
 800af94:	f7f5 fb40 	bl	8000618 <__aeabi_dmul>
 800af98:	4682      	mov	sl, r0
 800af9a:	468b      	mov	fp, r1
 800af9c:	e649      	b.n	800ac32 <_strtod_l+0x72>
 800af9e:	4b6c      	ldr	r3, [pc, #432]	@ (800b150 <_strtod_l+0x590>)
 800afa0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afa4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800afa8:	f7f5 fb36 	bl	8000618 <__aeabi_dmul>
 800afac:	4682      	mov	sl, r0
 800afae:	4638      	mov	r0, r7
 800afb0:	468b      	mov	fp, r1
 800afb2:	f7f5 fab7 	bl	8000524 <__aeabi_ui2d>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4650      	mov	r0, sl
 800afbc:	4659      	mov	r1, fp
 800afbe:	f7f5 f975 	bl	80002ac <__adddf3>
 800afc2:	2d0f      	cmp	r5, #15
 800afc4:	4682      	mov	sl, r0
 800afc6:	468b      	mov	fp, r1
 800afc8:	ddd5      	ble.n	800af76 <_strtod_l+0x3b6>
 800afca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afcc:	1b2c      	subs	r4, r5, r4
 800afce:	441c      	add	r4, r3
 800afd0:	2c00      	cmp	r4, #0
 800afd2:	f340 8093 	ble.w	800b0fc <_strtod_l+0x53c>
 800afd6:	f014 030f 	ands.w	r3, r4, #15
 800afda:	d00a      	beq.n	800aff2 <_strtod_l+0x432>
 800afdc:	495c      	ldr	r1, [pc, #368]	@ (800b150 <_strtod_l+0x590>)
 800afde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afe2:	4652      	mov	r2, sl
 800afe4:	465b      	mov	r3, fp
 800afe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afea:	f7f5 fb15 	bl	8000618 <__aeabi_dmul>
 800afee:	4682      	mov	sl, r0
 800aff0:	468b      	mov	fp, r1
 800aff2:	f034 040f 	bics.w	r4, r4, #15
 800aff6:	d073      	beq.n	800b0e0 <_strtod_l+0x520>
 800aff8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800affc:	dd49      	ble.n	800b092 <_strtod_l+0x4d2>
 800affe:	2400      	movs	r4, #0
 800b000:	46a0      	mov	r8, r4
 800b002:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b004:	46a1      	mov	r9, r4
 800b006:	9a05      	ldr	r2, [sp, #20]
 800b008:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b158 <_strtod_l+0x598>
 800b00c:	2322      	movs	r3, #34	@ 0x22
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	f04f 0a00 	mov.w	sl, #0
 800b014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b016:	2b00      	cmp	r3, #0
 800b018:	f43f ae0b 	beq.w	800ac32 <_strtod_l+0x72>
 800b01c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b01e:	9805      	ldr	r0, [sp, #20]
 800b020:	f003 f86e 	bl	800e100 <_Bfree>
 800b024:	9805      	ldr	r0, [sp, #20]
 800b026:	4649      	mov	r1, r9
 800b028:	f003 f86a 	bl	800e100 <_Bfree>
 800b02c:	9805      	ldr	r0, [sp, #20]
 800b02e:	4641      	mov	r1, r8
 800b030:	f003 f866 	bl	800e100 <_Bfree>
 800b034:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b036:	9805      	ldr	r0, [sp, #20]
 800b038:	f003 f862 	bl	800e100 <_Bfree>
 800b03c:	9805      	ldr	r0, [sp, #20]
 800b03e:	4621      	mov	r1, r4
 800b040:	f003 f85e 	bl	800e100 <_Bfree>
 800b044:	e5f5      	b.n	800ac32 <_strtod_l+0x72>
 800b046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b048:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b04c:	4293      	cmp	r3, r2
 800b04e:	dbbc      	blt.n	800afca <_strtod_l+0x40a>
 800b050:	4c3f      	ldr	r4, [pc, #252]	@ (800b150 <_strtod_l+0x590>)
 800b052:	f1c5 050f 	rsb	r5, r5, #15
 800b056:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b05a:	4652      	mov	r2, sl
 800b05c:	465b      	mov	r3, fp
 800b05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b062:	f7f5 fad9 	bl	8000618 <__aeabi_dmul>
 800b066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b068:	1b5d      	subs	r5, r3, r5
 800b06a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b06e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b072:	e78f      	b.n	800af94 <_strtod_l+0x3d4>
 800b074:	3316      	adds	r3, #22
 800b076:	dba8      	blt.n	800afca <_strtod_l+0x40a>
 800b078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b07a:	eba3 0808 	sub.w	r8, r3, r8
 800b07e:	4b34      	ldr	r3, [pc, #208]	@ (800b150 <_strtod_l+0x590>)
 800b080:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b084:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b088:	4650      	mov	r0, sl
 800b08a:	4659      	mov	r1, fp
 800b08c:	f7f5 fbee 	bl	800086c <__aeabi_ddiv>
 800b090:	e782      	b.n	800af98 <_strtod_l+0x3d8>
 800b092:	2300      	movs	r3, #0
 800b094:	4f2f      	ldr	r7, [pc, #188]	@ (800b154 <_strtod_l+0x594>)
 800b096:	1124      	asrs	r4, r4, #4
 800b098:	4650      	mov	r0, sl
 800b09a:	4659      	mov	r1, fp
 800b09c:	461e      	mov	r6, r3
 800b09e:	2c01      	cmp	r4, #1
 800b0a0:	dc21      	bgt.n	800b0e6 <_strtod_l+0x526>
 800b0a2:	b10b      	cbz	r3, 800b0a8 <_strtod_l+0x4e8>
 800b0a4:	4682      	mov	sl, r0
 800b0a6:	468b      	mov	fp, r1
 800b0a8:	492a      	ldr	r1, [pc, #168]	@ (800b154 <_strtod_l+0x594>)
 800b0aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b0ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b0b2:	4652      	mov	r2, sl
 800b0b4:	465b      	mov	r3, fp
 800b0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ba:	f7f5 faad 	bl	8000618 <__aeabi_dmul>
 800b0be:	4b26      	ldr	r3, [pc, #152]	@ (800b158 <_strtod_l+0x598>)
 800b0c0:	460a      	mov	r2, r1
 800b0c2:	400b      	ands	r3, r1
 800b0c4:	4925      	ldr	r1, [pc, #148]	@ (800b15c <_strtod_l+0x59c>)
 800b0c6:	428b      	cmp	r3, r1
 800b0c8:	4682      	mov	sl, r0
 800b0ca:	d898      	bhi.n	800affe <_strtod_l+0x43e>
 800b0cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b0d0:	428b      	cmp	r3, r1
 800b0d2:	bf86      	itte	hi
 800b0d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b160 <_strtod_l+0x5a0>
 800b0d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b0dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9308      	str	r3, [sp, #32]
 800b0e4:	e076      	b.n	800b1d4 <_strtod_l+0x614>
 800b0e6:	07e2      	lsls	r2, r4, #31
 800b0e8:	d504      	bpl.n	800b0f4 <_strtod_l+0x534>
 800b0ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ee:	f7f5 fa93 	bl	8000618 <__aeabi_dmul>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	3601      	adds	r6, #1
 800b0f6:	1064      	asrs	r4, r4, #1
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	e7d0      	b.n	800b09e <_strtod_l+0x4de>
 800b0fc:	d0f0      	beq.n	800b0e0 <_strtod_l+0x520>
 800b0fe:	4264      	negs	r4, r4
 800b100:	f014 020f 	ands.w	r2, r4, #15
 800b104:	d00a      	beq.n	800b11c <_strtod_l+0x55c>
 800b106:	4b12      	ldr	r3, [pc, #72]	@ (800b150 <_strtod_l+0x590>)
 800b108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b10c:	4650      	mov	r0, sl
 800b10e:	4659      	mov	r1, fp
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	f7f5 fbaa 	bl	800086c <__aeabi_ddiv>
 800b118:	4682      	mov	sl, r0
 800b11a:	468b      	mov	fp, r1
 800b11c:	1124      	asrs	r4, r4, #4
 800b11e:	d0df      	beq.n	800b0e0 <_strtod_l+0x520>
 800b120:	2c1f      	cmp	r4, #31
 800b122:	dd1f      	ble.n	800b164 <_strtod_l+0x5a4>
 800b124:	2400      	movs	r4, #0
 800b126:	46a0      	mov	r8, r4
 800b128:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b12a:	46a1      	mov	r9, r4
 800b12c:	9a05      	ldr	r2, [sp, #20]
 800b12e:	2322      	movs	r3, #34	@ 0x22
 800b130:	f04f 0a00 	mov.w	sl, #0
 800b134:	f04f 0b00 	mov.w	fp, #0
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	e76b      	b.n	800b014 <_strtod_l+0x454>
 800b13c:	0801151f 	.word	0x0801151f
 800b140:	0801175c 	.word	0x0801175c
 800b144:	08011517 	.word	0x08011517
 800b148:	08011601 	.word	0x08011601
 800b14c:	080115fd 	.word	0x080115fd
 800b150:	080118e8 	.word	0x080118e8
 800b154:	080118c0 	.word	0x080118c0
 800b158:	7ff00000 	.word	0x7ff00000
 800b15c:	7ca00000 	.word	0x7ca00000
 800b160:	7fefffff 	.word	0x7fefffff
 800b164:	f014 0310 	ands.w	r3, r4, #16
 800b168:	bf18      	it	ne
 800b16a:	236a      	movne	r3, #106	@ 0x6a
 800b16c:	4ea9      	ldr	r6, [pc, #676]	@ (800b414 <_strtod_l+0x854>)
 800b16e:	9308      	str	r3, [sp, #32]
 800b170:	4650      	mov	r0, sl
 800b172:	4659      	mov	r1, fp
 800b174:	2300      	movs	r3, #0
 800b176:	07e7      	lsls	r7, r4, #31
 800b178:	d504      	bpl.n	800b184 <_strtod_l+0x5c4>
 800b17a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b17e:	f7f5 fa4b 	bl	8000618 <__aeabi_dmul>
 800b182:	2301      	movs	r3, #1
 800b184:	1064      	asrs	r4, r4, #1
 800b186:	f106 0608 	add.w	r6, r6, #8
 800b18a:	d1f4      	bne.n	800b176 <_strtod_l+0x5b6>
 800b18c:	b10b      	cbz	r3, 800b192 <_strtod_l+0x5d2>
 800b18e:	4682      	mov	sl, r0
 800b190:	468b      	mov	fp, r1
 800b192:	9b08      	ldr	r3, [sp, #32]
 800b194:	b1b3      	cbz	r3, 800b1c4 <_strtod_l+0x604>
 800b196:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b19a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	4659      	mov	r1, fp
 800b1a2:	dd0f      	ble.n	800b1c4 <_strtod_l+0x604>
 800b1a4:	2b1f      	cmp	r3, #31
 800b1a6:	dd56      	ble.n	800b256 <_strtod_l+0x696>
 800b1a8:	2b34      	cmp	r3, #52	@ 0x34
 800b1aa:	bfde      	ittt	le
 800b1ac:	f04f 33ff 	movle.w	r3, #4294967295
 800b1b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b1b4:	4093      	lslle	r3, r2
 800b1b6:	f04f 0a00 	mov.w	sl, #0
 800b1ba:	bfcc      	ite	gt
 800b1bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b1c0:	ea03 0b01 	andle.w	fp, r3, r1
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	4659      	mov	r1, fp
 800b1cc:	f7f5 fc8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d1a7      	bne.n	800b124 <_strtod_l+0x564>
 800b1d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b1da:	9805      	ldr	r0, [sp, #20]
 800b1dc:	462b      	mov	r3, r5
 800b1de:	464a      	mov	r2, r9
 800b1e0:	f002 fff6 	bl	800e1d0 <__s2b>
 800b1e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f43f af09 	beq.w	800affe <_strtod_l+0x43e>
 800b1ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1f0:	2a00      	cmp	r2, #0
 800b1f2:	eba3 0308 	sub.w	r3, r3, r8
 800b1f6:	bfa8      	it	ge
 800b1f8:	2300      	movge	r3, #0
 800b1fa:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b202:	9316      	str	r3, [sp, #88]	@ 0x58
 800b204:	46a0      	mov	r8, r4
 800b206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b208:	9805      	ldr	r0, [sp, #20]
 800b20a:	6859      	ldr	r1, [r3, #4]
 800b20c:	f002 ff38 	bl	800e080 <_Balloc>
 800b210:	4681      	mov	r9, r0
 800b212:	2800      	cmp	r0, #0
 800b214:	f43f aef7 	beq.w	800b006 <_strtod_l+0x446>
 800b218:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b21a:	691a      	ldr	r2, [r3, #16]
 800b21c:	3202      	adds	r2, #2
 800b21e:	f103 010c 	add.w	r1, r3, #12
 800b222:	0092      	lsls	r2, r2, #2
 800b224:	300c      	adds	r0, #12
 800b226:	f001 fc4c 	bl	800cac2 <memcpy>
 800b22a:	ec4b ab10 	vmov	d0, sl, fp
 800b22e:	9805      	ldr	r0, [sp, #20]
 800b230:	aa1c      	add	r2, sp, #112	@ 0x70
 800b232:	a91b      	add	r1, sp, #108	@ 0x6c
 800b234:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b238:	f003 fafe 	bl	800e838 <__d2b>
 800b23c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b23e:	2800      	cmp	r0, #0
 800b240:	f43f aee1 	beq.w	800b006 <_strtod_l+0x446>
 800b244:	9805      	ldr	r0, [sp, #20]
 800b246:	2101      	movs	r1, #1
 800b248:	f003 f858 	bl	800e2fc <__i2b>
 800b24c:	4680      	mov	r8, r0
 800b24e:	b948      	cbnz	r0, 800b264 <_strtod_l+0x6a4>
 800b250:	f04f 0800 	mov.w	r8, #0
 800b254:	e6d7      	b.n	800b006 <_strtod_l+0x446>
 800b256:	f04f 32ff 	mov.w	r2, #4294967295
 800b25a:	fa02 f303 	lsl.w	r3, r2, r3
 800b25e:	ea03 0a0a 	and.w	sl, r3, sl
 800b262:	e7af      	b.n	800b1c4 <_strtod_l+0x604>
 800b264:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b266:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b268:	2d00      	cmp	r5, #0
 800b26a:	bfab      	itete	ge
 800b26c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b26e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b270:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b272:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b274:	bfac      	ite	ge
 800b276:	18ef      	addge	r7, r5, r3
 800b278:	1b5e      	sublt	r6, r3, r5
 800b27a:	9b08      	ldr	r3, [sp, #32]
 800b27c:	1aed      	subs	r5, r5, r3
 800b27e:	4415      	add	r5, r2
 800b280:	4b65      	ldr	r3, [pc, #404]	@ (800b418 <_strtod_l+0x858>)
 800b282:	3d01      	subs	r5, #1
 800b284:	429d      	cmp	r5, r3
 800b286:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b28a:	da50      	bge.n	800b32e <_strtod_l+0x76e>
 800b28c:	1b5b      	subs	r3, r3, r5
 800b28e:	2b1f      	cmp	r3, #31
 800b290:	eba2 0203 	sub.w	r2, r2, r3
 800b294:	f04f 0101 	mov.w	r1, #1
 800b298:	dc3d      	bgt.n	800b316 <_strtod_l+0x756>
 800b29a:	fa01 f303 	lsl.w	r3, r1, r3
 800b29e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2a4:	18bd      	adds	r5, r7, r2
 800b2a6:	9b08      	ldr	r3, [sp, #32]
 800b2a8:	42af      	cmp	r7, r5
 800b2aa:	4416      	add	r6, r2
 800b2ac:	441e      	add	r6, r3
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	bfa8      	it	ge
 800b2b2:	462b      	movge	r3, r5
 800b2b4:	42b3      	cmp	r3, r6
 800b2b6:	bfa8      	it	ge
 800b2b8:	4633      	movge	r3, r6
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	bfc2      	ittt	gt
 800b2be:	1aed      	subgt	r5, r5, r3
 800b2c0:	1af6      	subgt	r6, r6, r3
 800b2c2:	1aff      	subgt	r7, r7, r3
 800b2c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	dd16      	ble.n	800b2f8 <_strtod_l+0x738>
 800b2ca:	4641      	mov	r1, r8
 800b2cc:	9805      	ldr	r0, [sp, #20]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	f003 f8cc 	bl	800e46c <__pow5mult>
 800b2d4:	4680      	mov	r8, r0
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d0ba      	beq.n	800b250 <_strtod_l+0x690>
 800b2da:	4601      	mov	r1, r0
 800b2dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b2de:	9805      	ldr	r0, [sp, #20]
 800b2e0:	f003 f822 	bl	800e328 <__multiply>
 800b2e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f43f ae8d 	beq.w	800b006 <_strtod_l+0x446>
 800b2ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2ee:	9805      	ldr	r0, [sp, #20]
 800b2f0:	f002 ff06 	bl	800e100 <_Bfree>
 800b2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2f8:	2d00      	cmp	r5, #0
 800b2fa:	dc1d      	bgt.n	800b338 <_strtod_l+0x778>
 800b2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dd23      	ble.n	800b34a <_strtod_l+0x78a>
 800b302:	4649      	mov	r1, r9
 800b304:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b306:	9805      	ldr	r0, [sp, #20]
 800b308:	f003 f8b0 	bl	800e46c <__pow5mult>
 800b30c:	4681      	mov	r9, r0
 800b30e:	b9e0      	cbnz	r0, 800b34a <_strtod_l+0x78a>
 800b310:	f04f 0900 	mov.w	r9, #0
 800b314:	e677      	b.n	800b006 <_strtod_l+0x446>
 800b316:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b31a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b31e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b322:	35e2      	adds	r5, #226	@ 0xe2
 800b324:	fa01 f305 	lsl.w	r3, r1, r5
 800b328:	9310      	str	r3, [sp, #64]	@ 0x40
 800b32a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b32c:	e7ba      	b.n	800b2a4 <_strtod_l+0x6e4>
 800b32e:	2300      	movs	r3, #0
 800b330:	9310      	str	r3, [sp, #64]	@ 0x40
 800b332:	2301      	movs	r3, #1
 800b334:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b336:	e7b5      	b.n	800b2a4 <_strtod_l+0x6e4>
 800b338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b33a:	9805      	ldr	r0, [sp, #20]
 800b33c:	462a      	mov	r2, r5
 800b33e:	f003 f8ef 	bl	800e520 <__lshift>
 800b342:	901a      	str	r0, [sp, #104]	@ 0x68
 800b344:	2800      	cmp	r0, #0
 800b346:	d1d9      	bne.n	800b2fc <_strtod_l+0x73c>
 800b348:	e65d      	b.n	800b006 <_strtod_l+0x446>
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	dd07      	ble.n	800b35e <_strtod_l+0x79e>
 800b34e:	4649      	mov	r1, r9
 800b350:	9805      	ldr	r0, [sp, #20]
 800b352:	4632      	mov	r2, r6
 800b354:	f003 f8e4 	bl	800e520 <__lshift>
 800b358:	4681      	mov	r9, r0
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d0d8      	beq.n	800b310 <_strtod_l+0x750>
 800b35e:	2f00      	cmp	r7, #0
 800b360:	dd08      	ble.n	800b374 <_strtod_l+0x7b4>
 800b362:	4641      	mov	r1, r8
 800b364:	9805      	ldr	r0, [sp, #20]
 800b366:	463a      	mov	r2, r7
 800b368:	f003 f8da 	bl	800e520 <__lshift>
 800b36c:	4680      	mov	r8, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	f43f ae49 	beq.w	800b006 <_strtod_l+0x446>
 800b374:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b376:	9805      	ldr	r0, [sp, #20]
 800b378:	464a      	mov	r2, r9
 800b37a:	f003 f959 	bl	800e630 <__mdiff>
 800b37e:	4604      	mov	r4, r0
 800b380:	2800      	cmp	r0, #0
 800b382:	f43f ae40 	beq.w	800b006 <_strtod_l+0x446>
 800b386:	68c3      	ldr	r3, [r0, #12]
 800b388:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b38a:	2300      	movs	r3, #0
 800b38c:	60c3      	str	r3, [r0, #12]
 800b38e:	4641      	mov	r1, r8
 800b390:	f003 f932 	bl	800e5f8 <__mcmp>
 800b394:	2800      	cmp	r0, #0
 800b396:	da45      	bge.n	800b424 <_strtod_l+0x864>
 800b398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b39a:	ea53 030a 	orrs.w	r3, r3, sl
 800b39e:	d16b      	bne.n	800b478 <_strtod_l+0x8b8>
 800b3a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d167      	bne.n	800b478 <_strtod_l+0x8b8>
 800b3a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3ac:	0d1b      	lsrs	r3, r3, #20
 800b3ae:	051b      	lsls	r3, r3, #20
 800b3b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3b4:	d960      	bls.n	800b478 <_strtod_l+0x8b8>
 800b3b6:	6963      	ldr	r3, [r4, #20]
 800b3b8:	b913      	cbnz	r3, 800b3c0 <_strtod_l+0x800>
 800b3ba:	6923      	ldr	r3, [r4, #16]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	dd5b      	ble.n	800b478 <_strtod_l+0x8b8>
 800b3c0:	4621      	mov	r1, r4
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	9805      	ldr	r0, [sp, #20]
 800b3c6:	f003 f8ab 	bl	800e520 <__lshift>
 800b3ca:	4641      	mov	r1, r8
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	f003 f913 	bl	800e5f8 <__mcmp>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	dd50      	ble.n	800b478 <_strtod_l+0x8b8>
 800b3d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3da:	9a08      	ldr	r2, [sp, #32]
 800b3dc:	0d1b      	lsrs	r3, r3, #20
 800b3de:	051b      	lsls	r3, r3, #20
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	d06a      	beq.n	800b4ba <_strtod_l+0x8fa>
 800b3e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3e8:	d867      	bhi.n	800b4ba <_strtod_l+0x8fa>
 800b3ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3ee:	f67f ae9d 	bls.w	800b12c <_strtod_l+0x56c>
 800b3f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b41c <_strtod_l+0x85c>)
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	4659      	mov	r1, fp
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f7f5 f90d 	bl	8000618 <__aeabi_dmul>
 800b3fe:	4b08      	ldr	r3, [pc, #32]	@ (800b420 <_strtod_l+0x860>)
 800b400:	400b      	ands	r3, r1
 800b402:	4682      	mov	sl, r0
 800b404:	468b      	mov	fp, r1
 800b406:	2b00      	cmp	r3, #0
 800b408:	f47f ae08 	bne.w	800b01c <_strtod_l+0x45c>
 800b40c:	9a05      	ldr	r2, [sp, #20]
 800b40e:	2322      	movs	r3, #34	@ 0x22
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	e603      	b.n	800b01c <_strtod_l+0x45c>
 800b414:	08011788 	.word	0x08011788
 800b418:	fffffc02 	.word	0xfffffc02
 800b41c:	39500000 	.word	0x39500000
 800b420:	7ff00000 	.word	0x7ff00000
 800b424:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b428:	d165      	bne.n	800b4f6 <_strtod_l+0x936>
 800b42a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b42c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b430:	b35a      	cbz	r2, 800b48a <_strtod_l+0x8ca>
 800b432:	4a9f      	ldr	r2, [pc, #636]	@ (800b6b0 <_strtod_l+0xaf0>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d12b      	bne.n	800b490 <_strtod_l+0x8d0>
 800b438:	9b08      	ldr	r3, [sp, #32]
 800b43a:	4651      	mov	r1, sl
 800b43c:	b303      	cbz	r3, 800b480 <_strtod_l+0x8c0>
 800b43e:	4b9d      	ldr	r3, [pc, #628]	@ (800b6b4 <_strtod_l+0xaf4>)
 800b440:	465a      	mov	r2, fp
 800b442:	4013      	ands	r3, r2
 800b444:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b448:	f04f 32ff 	mov.w	r2, #4294967295
 800b44c:	d81b      	bhi.n	800b486 <_strtod_l+0x8c6>
 800b44e:	0d1b      	lsrs	r3, r3, #20
 800b450:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b454:	fa02 f303 	lsl.w	r3, r2, r3
 800b458:	4299      	cmp	r1, r3
 800b45a:	d119      	bne.n	800b490 <_strtod_l+0x8d0>
 800b45c:	4b96      	ldr	r3, [pc, #600]	@ (800b6b8 <_strtod_l+0xaf8>)
 800b45e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b460:	429a      	cmp	r2, r3
 800b462:	d102      	bne.n	800b46a <_strtod_l+0x8aa>
 800b464:	3101      	adds	r1, #1
 800b466:	f43f adce 	beq.w	800b006 <_strtod_l+0x446>
 800b46a:	4b92      	ldr	r3, [pc, #584]	@ (800b6b4 <_strtod_l+0xaf4>)
 800b46c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b46e:	401a      	ands	r2, r3
 800b470:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b474:	f04f 0a00 	mov.w	sl, #0
 800b478:	9b08      	ldr	r3, [sp, #32]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1b9      	bne.n	800b3f2 <_strtod_l+0x832>
 800b47e:	e5cd      	b.n	800b01c <_strtod_l+0x45c>
 800b480:	f04f 33ff 	mov.w	r3, #4294967295
 800b484:	e7e8      	b.n	800b458 <_strtod_l+0x898>
 800b486:	4613      	mov	r3, r2
 800b488:	e7e6      	b.n	800b458 <_strtod_l+0x898>
 800b48a:	ea53 030a 	orrs.w	r3, r3, sl
 800b48e:	d0a2      	beq.n	800b3d6 <_strtod_l+0x816>
 800b490:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b492:	b1db      	cbz	r3, 800b4cc <_strtod_l+0x90c>
 800b494:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b496:	4213      	tst	r3, r2
 800b498:	d0ee      	beq.n	800b478 <_strtod_l+0x8b8>
 800b49a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b49c:	9a08      	ldr	r2, [sp, #32]
 800b49e:	4650      	mov	r0, sl
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	b1bb      	cbz	r3, 800b4d4 <_strtod_l+0x914>
 800b4a4:	f7ff fb6b 	bl	800ab7e <sulp>
 800b4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4ac:	ec53 2b10 	vmov	r2, r3, d0
 800b4b0:	f7f4 fefc 	bl	80002ac <__adddf3>
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	468b      	mov	fp, r1
 800b4b8:	e7de      	b.n	800b478 <_strtod_l+0x8b8>
 800b4ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b4be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b4c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b4c6:	f04f 3aff 	mov.w	sl, #4294967295
 800b4ca:	e7d5      	b.n	800b478 <_strtod_l+0x8b8>
 800b4cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4ce:	ea13 0f0a 	tst.w	r3, sl
 800b4d2:	e7e1      	b.n	800b498 <_strtod_l+0x8d8>
 800b4d4:	f7ff fb53 	bl	800ab7e <sulp>
 800b4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4dc:	ec53 2b10 	vmov	r2, r3, d0
 800b4e0:	f7f4 fee2 	bl	80002a8 <__aeabi_dsub>
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	4682      	mov	sl, r0
 800b4ea:	468b      	mov	fp, r1
 800b4ec:	f7f5 fafc 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d0c1      	beq.n	800b478 <_strtod_l+0x8b8>
 800b4f4:	e61a      	b.n	800b12c <_strtod_l+0x56c>
 800b4f6:	4641      	mov	r1, r8
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f003 f9f5 	bl	800e8e8 <__ratio>
 800b4fe:	ec57 6b10 	vmov	r6, r7, d0
 800b502:	2200      	movs	r2, #0
 800b504:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f5 fb00 	bl	8000b10 <__aeabi_dcmple>
 800b510:	2800      	cmp	r0, #0
 800b512:	d06f      	beq.n	800b5f4 <_strtod_l+0xa34>
 800b514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b516:	2b00      	cmp	r3, #0
 800b518:	d17a      	bne.n	800b610 <_strtod_l+0xa50>
 800b51a:	f1ba 0f00 	cmp.w	sl, #0
 800b51e:	d158      	bne.n	800b5d2 <_strtod_l+0xa12>
 800b520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b526:	2b00      	cmp	r3, #0
 800b528:	d15a      	bne.n	800b5e0 <_strtod_l+0xa20>
 800b52a:	4b64      	ldr	r3, [pc, #400]	@ (800b6bc <_strtod_l+0xafc>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	4630      	mov	r0, r6
 800b530:	4639      	mov	r1, r7
 800b532:	f7f5 fae3 	bl	8000afc <__aeabi_dcmplt>
 800b536:	2800      	cmp	r0, #0
 800b538:	d159      	bne.n	800b5ee <_strtod_l+0xa2e>
 800b53a:	4630      	mov	r0, r6
 800b53c:	4639      	mov	r1, r7
 800b53e:	4b60      	ldr	r3, [pc, #384]	@ (800b6c0 <_strtod_l+0xb00>)
 800b540:	2200      	movs	r2, #0
 800b542:	f7f5 f869 	bl	8000618 <__aeabi_dmul>
 800b546:	4606      	mov	r6, r0
 800b548:	460f      	mov	r7, r1
 800b54a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b54e:	9606      	str	r6, [sp, #24]
 800b550:	9307      	str	r3, [sp, #28]
 800b552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b556:	4d57      	ldr	r5, [pc, #348]	@ (800b6b4 <_strtod_l+0xaf4>)
 800b558:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b55c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b55e:	401d      	ands	r5, r3
 800b560:	4b58      	ldr	r3, [pc, #352]	@ (800b6c4 <_strtod_l+0xb04>)
 800b562:	429d      	cmp	r5, r3
 800b564:	f040 80b2 	bne.w	800b6cc <_strtod_l+0xb0c>
 800b568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b56a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b56e:	ec4b ab10 	vmov	d0, sl, fp
 800b572:	f003 f8f1 	bl	800e758 <__ulp>
 800b576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b57a:	ec51 0b10 	vmov	r0, r1, d0
 800b57e:	f7f5 f84b 	bl	8000618 <__aeabi_dmul>
 800b582:	4652      	mov	r2, sl
 800b584:	465b      	mov	r3, fp
 800b586:	f7f4 fe91 	bl	80002ac <__adddf3>
 800b58a:	460b      	mov	r3, r1
 800b58c:	4949      	ldr	r1, [pc, #292]	@ (800b6b4 <_strtod_l+0xaf4>)
 800b58e:	4a4e      	ldr	r2, [pc, #312]	@ (800b6c8 <_strtod_l+0xb08>)
 800b590:	4019      	ands	r1, r3
 800b592:	4291      	cmp	r1, r2
 800b594:	4682      	mov	sl, r0
 800b596:	d942      	bls.n	800b61e <_strtod_l+0xa5e>
 800b598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b59a:	4b47      	ldr	r3, [pc, #284]	@ (800b6b8 <_strtod_l+0xaf8>)
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d103      	bne.n	800b5a8 <_strtod_l+0x9e8>
 800b5a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	f43f ad2f 	beq.w	800b006 <_strtod_l+0x446>
 800b5a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b6b8 <_strtod_l+0xaf8>
 800b5ac:	f04f 3aff 	mov.w	sl, #4294967295
 800b5b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5b2:	9805      	ldr	r0, [sp, #20]
 800b5b4:	f002 fda4 	bl	800e100 <_Bfree>
 800b5b8:	9805      	ldr	r0, [sp, #20]
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	f002 fda0 	bl	800e100 <_Bfree>
 800b5c0:	9805      	ldr	r0, [sp, #20]
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	f002 fd9c 	bl	800e100 <_Bfree>
 800b5c8:	9805      	ldr	r0, [sp, #20]
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	f002 fd98 	bl	800e100 <_Bfree>
 800b5d0:	e619      	b.n	800b206 <_strtod_l+0x646>
 800b5d2:	f1ba 0f01 	cmp.w	sl, #1
 800b5d6:	d103      	bne.n	800b5e0 <_strtod_l+0xa20>
 800b5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f43f ada6 	beq.w	800b12c <_strtod_l+0x56c>
 800b5e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b690 <_strtod_l+0xad0>
 800b5e4:	4f35      	ldr	r7, [pc, #212]	@ (800b6bc <_strtod_l+0xafc>)
 800b5e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5ea:	2600      	movs	r6, #0
 800b5ec:	e7b1      	b.n	800b552 <_strtod_l+0x992>
 800b5ee:	4f34      	ldr	r7, [pc, #208]	@ (800b6c0 <_strtod_l+0xb00>)
 800b5f0:	2600      	movs	r6, #0
 800b5f2:	e7aa      	b.n	800b54a <_strtod_l+0x98a>
 800b5f4:	4b32      	ldr	r3, [pc, #200]	@ (800b6c0 <_strtod_l+0xb00>)
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f7f5 f80c 	bl	8000618 <__aeabi_dmul>
 800b600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b602:	4606      	mov	r6, r0
 800b604:	460f      	mov	r7, r1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d09f      	beq.n	800b54a <_strtod_l+0x98a>
 800b60a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b60e:	e7a0      	b.n	800b552 <_strtod_l+0x992>
 800b610:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b698 <_strtod_l+0xad8>
 800b614:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b618:	ec57 6b17 	vmov	r6, r7, d7
 800b61c:	e799      	b.n	800b552 <_strtod_l+0x992>
 800b61e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b622:	9b08      	ldr	r3, [sp, #32]
 800b624:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1c1      	bne.n	800b5b0 <_strtod_l+0x9f0>
 800b62c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b630:	0d1b      	lsrs	r3, r3, #20
 800b632:	051b      	lsls	r3, r3, #20
 800b634:	429d      	cmp	r5, r3
 800b636:	d1bb      	bne.n	800b5b0 <_strtod_l+0x9f0>
 800b638:	4630      	mov	r0, r6
 800b63a:	4639      	mov	r1, r7
 800b63c:	f7f5 fb4c 	bl	8000cd8 <__aeabi_d2lz>
 800b640:	f7f4 ffbc 	bl	80005bc <__aeabi_l2d>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f4 fe2c 	bl	80002a8 <__aeabi_dsub>
 800b650:	460b      	mov	r3, r1
 800b652:	4602      	mov	r2, r0
 800b654:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b658:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b65e:	ea46 060a 	orr.w	r6, r6, sl
 800b662:	431e      	orrs	r6, r3
 800b664:	d06f      	beq.n	800b746 <_strtod_l+0xb86>
 800b666:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6a0 <_strtod_l+0xae0>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f7f5 fa46 	bl	8000afc <__aeabi_dcmplt>
 800b670:	2800      	cmp	r0, #0
 800b672:	f47f acd3 	bne.w	800b01c <_strtod_l+0x45c>
 800b676:	a30c      	add	r3, pc, #48	@ (adr r3, 800b6a8 <_strtod_l+0xae8>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b680:	f7f5 fa5a 	bl	8000b38 <__aeabi_dcmpgt>
 800b684:	2800      	cmp	r0, #0
 800b686:	d093      	beq.n	800b5b0 <_strtod_l+0x9f0>
 800b688:	e4c8      	b.n	800b01c <_strtod_l+0x45c>
 800b68a:	bf00      	nop
 800b68c:	f3af 8000 	nop.w
 800b690:	00000000 	.word	0x00000000
 800b694:	bff00000 	.word	0xbff00000
 800b698:	00000000 	.word	0x00000000
 800b69c:	3ff00000 	.word	0x3ff00000
 800b6a0:	94a03595 	.word	0x94a03595
 800b6a4:	3fdfffff 	.word	0x3fdfffff
 800b6a8:	35afe535 	.word	0x35afe535
 800b6ac:	3fe00000 	.word	0x3fe00000
 800b6b0:	000fffff 	.word	0x000fffff
 800b6b4:	7ff00000 	.word	0x7ff00000
 800b6b8:	7fefffff 	.word	0x7fefffff
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	3fe00000 	.word	0x3fe00000
 800b6c4:	7fe00000 	.word	0x7fe00000
 800b6c8:	7c9fffff 	.word	0x7c9fffff
 800b6cc:	9b08      	ldr	r3, [sp, #32]
 800b6ce:	b323      	cbz	r3, 800b71a <_strtod_l+0xb5a>
 800b6d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b6d4:	d821      	bhi.n	800b71a <_strtod_l+0xb5a>
 800b6d6:	a328      	add	r3, pc, #160	@ (adr r3, 800b778 <_strtod_l+0xbb8>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	4630      	mov	r0, r6
 800b6de:	4639      	mov	r1, r7
 800b6e0:	f7f5 fa16 	bl	8000b10 <__aeabi_dcmple>
 800b6e4:	b1a0      	cbz	r0, 800b710 <_strtod_l+0xb50>
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7f5 fa6d 	bl	8000bc8 <__aeabi_d2uiz>
 800b6ee:	2801      	cmp	r0, #1
 800b6f0:	bf38      	it	cc
 800b6f2:	2001      	movcc	r0, #1
 800b6f4:	f7f4 ff16 	bl	8000524 <__aeabi_ui2d>
 800b6f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460f      	mov	r7, r1
 800b6fe:	b9fb      	cbnz	r3, 800b740 <_strtod_l+0xb80>
 800b700:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b704:	9014      	str	r0, [sp, #80]	@ 0x50
 800b706:	9315      	str	r3, [sp, #84]	@ 0x54
 800b708:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b70c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b710:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b712:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b716:	1b5b      	subs	r3, r3, r5
 800b718:	9311      	str	r3, [sp, #68]	@ 0x44
 800b71a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b71e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b722:	f003 f819 	bl	800e758 <__ulp>
 800b726:	4650      	mov	r0, sl
 800b728:	ec53 2b10 	vmov	r2, r3, d0
 800b72c:	4659      	mov	r1, fp
 800b72e:	f7f4 ff73 	bl	8000618 <__aeabi_dmul>
 800b732:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b736:	f7f4 fdb9 	bl	80002ac <__adddf3>
 800b73a:	4682      	mov	sl, r0
 800b73c:	468b      	mov	fp, r1
 800b73e:	e770      	b.n	800b622 <_strtod_l+0xa62>
 800b740:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b744:	e7e0      	b.n	800b708 <_strtod_l+0xb48>
 800b746:	a30e      	add	r3, pc, #56	@ (adr r3, 800b780 <_strtod_l+0xbc0>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f7f5 f9d6 	bl	8000afc <__aeabi_dcmplt>
 800b750:	e798      	b.n	800b684 <_strtod_l+0xac4>
 800b752:	2300      	movs	r3, #0
 800b754:	930e      	str	r3, [sp, #56]	@ 0x38
 800b756:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	f7ff ba6d 	b.w	800ac3a <_strtod_l+0x7a>
 800b760:	2a65      	cmp	r2, #101	@ 0x65
 800b762:	f43f ab68 	beq.w	800ae36 <_strtod_l+0x276>
 800b766:	2a45      	cmp	r2, #69	@ 0x45
 800b768:	f43f ab65 	beq.w	800ae36 <_strtod_l+0x276>
 800b76c:	2301      	movs	r3, #1
 800b76e:	f7ff bba0 	b.w	800aeb2 <_strtod_l+0x2f2>
 800b772:	bf00      	nop
 800b774:	f3af 8000 	nop.w
 800b778:	ffc00000 	.word	0xffc00000
 800b77c:	41dfffff 	.word	0x41dfffff
 800b780:	94a03595 	.word	0x94a03595
 800b784:	3fcfffff 	.word	0x3fcfffff

0800b788 <_strtod_r>:
 800b788:	4b01      	ldr	r3, [pc, #4]	@ (800b790 <_strtod_r+0x8>)
 800b78a:	f7ff ba19 	b.w	800abc0 <_strtod_l>
 800b78e:	bf00      	nop
 800b790:	200002c4 	.word	0x200002c4

0800b794 <strtod>:
 800b794:	460a      	mov	r2, r1
 800b796:	4601      	mov	r1, r0
 800b798:	4802      	ldr	r0, [pc, #8]	@ (800b7a4 <strtod+0x10>)
 800b79a:	4b03      	ldr	r3, [pc, #12]	@ (800b7a8 <strtod+0x14>)
 800b79c:	6800      	ldr	r0, [r0, #0]
 800b79e:	f7ff ba0f 	b.w	800abc0 <_strtod_l>
 800b7a2:	bf00      	nop
 800b7a4:	20000430 	.word	0x20000430
 800b7a8:	200002c4 	.word	0x200002c4

0800b7ac <_strtol_l.isra.0>:
 800b7ac:	2b24      	cmp	r3, #36	@ 0x24
 800b7ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b2:	4686      	mov	lr, r0
 800b7b4:	4690      	mov	r8, r2
 800b7b6:	d801      	bhi.n	800b7bc <_strtol_l.isra.0+0x10>
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d106      	bne.n	800b7ca <_strtol_l.isra.0+0x1e>
 800b7bc:	f001 f954 	bl	800ca68 <__errno>
 800b7c0:	2316      	movs	r3, #22
 800b7c2:	6003      	str	r3, [r0, #0]
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ca:	4834      	ldr	r0, [pc, #208]	@ (800b89c <_strtol_l.isra.0+0xf0>)
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	462a      	mov	r2, r5
 800b7d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7d4:	5d06      	ldrb	r6, [r0, r4]
 800b7d6:	f016 0608 	ands.w	r6, r6, #8
 800b7da:	d1f8      	bne.n	800b7ce <_strtol_l.isra.0+0x22>
 800b7dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800b7de:	d110      	bne.n	800b802 <_strtol_l.isra.0+0x56>
 800b7e0:	782c      	ldrb	r4, [r5, #0]
 800b7e2:	2601      	movs	r6, #1
 800b7e4:	1c95      	adds	r5, r2, #2
 800b7e6:	f033 0210 	bics.w	r2, r3, #16
 800b7ea:	d115      	bne.n	800b818 <_strtol_l.isra.0+0x6c>
 800b7ec:	2c30      	cmp	r4, #48	@ 0x30
 800b7ee:	d10d      	bne.n	800b80c <_strtol_l.isra.0+0x60>
 800b7f0:	782a      	ldrb	r2, [r5, #0]
 800b7f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7f6:	2a58      	cmp	r2, #88	@ 0x58
 800b7f8:	d108      	bne.n	800b80c <_strtol_l.isra.0+0x60>
 800b7fa:	786c      	ldrb	r4, [r5, #1]
 800b7fc:	3502      	adds	r5, #2
 800b7fe:	2310      	movs	r3, #16
 800b800:	e00a      	b.n	800b818 <_strtol_l.isra.0+0x6c>
 800b802:	2c2b      	cmp	r4, #43	@ 0x2b
 800b804:	bf04      	itt	eq
 800b806:	782c      	ldrbeq	r4, [r5, #0]
 800b808:	1c95      	addeq	r5, r2, #2
 800b80a:	e7ec      	b.n	800b7e6 <_strtol_l.isra.0+0x3a>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1f6      	bne.n	800b7fe <_strtol_l.isra.0+0x52>
 800b810:	2c30      	cmp	r4, #48	@ 0x30
 800b812:	bf14      	ite	ne
 800b814:	230a      	movne	r3, #10
 800b816:	2308      	moveq	r3, #8
 800b818:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b81c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b820:	2200      	movs	r2, #0
 800b822:	fbbc f9f3 	udiv	r9, ip, r3
 800b826:	4610      	mov	r0, r2
 800b828:	fb03 ca19 	mls	sl, r3, r9, ip
 800b82c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b830:	2f09      	cmp	r7, #9
 800b832:	d80f      	bhi.n	800b854 <_strtol_l.isra.0+0xa8>
 800b834:	463c      	mov	r4, r7
 800b836:	42a3      	cmp	r3, r4
 800b838:	dd1b      	ble.n	800b872 <_strtol_l.isra.0+0xc6>
 800b83a:	1c57      	adds	r7, r2, #1
 800b83c:	d007      	beq.n	800b84e <_strtol_l.isra.0+0xa2>
 800b83e:	4581      	cmp	r9, r0
 800b840:	d314      	bcc.n	800b86c <_strtol_l.isra.0+0xc0>
 800b842:	d101      	bne.n	800b848 <_strtol_l.isra.0+0x9c>
 800b844:	45a2      	cmp	sl, r4
 800b846:	db11      	blt.n	800b86c <_strtol_l.isra.0+0xc0>
 800b848:	fb00 4003 	mla	r0, r0, r3, r4
 800b84c:	2201      	movs	r2, #1
 800b84e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b852:	e7eb      	b.n	800b82c <_strtol_l.isra.0+0x80>
 800b854:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b858:	2f19      	cmp	r7, #25
 800b85a:	d801      	bhi.n	800b860 <_strtol_l.isra.0+0xb4>
 800b85c:	3c37      	subs	r4, #55	@ 0x37
 800b85e:	e7ea      	b.n	800b836 <_strtol_l.isra.0+0x8a>
 800b860:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b864:	2f19      	cmp	r7, #25
 800b866:	d804      	bhi.n	800b872 <_strtol_l.isra.0+0xc6>
 800b868:	3c57      	subs	r4, #87	@ 0x57
 800b86a:	e7e4      	b.n	800b836 <_strtol_l.isra.0+0x8a>
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	e7ed      	b.n	800b84e <_strtol_l.isra.0+0xa2>
 800b872:	1c53      	adds	r3, r2, #1
 800b874:	d108      	bne.n	800b888 <_strtol_l.isra.0+0xdc>
 800b876:	2322      	movs	r3, #34	@ 0x22
 800b878:	f8ce 3000 	str.w	r3, [lr]
 800b87c:	4660      	mov	r0, ip
 800b87e:	f1b8 0f00 	cmp.w	r8, #0
 800b882:	d0a0      	beq.n	800b7c6 <_strtol_l.isra.0+0x1a>
 800b884:	1e69      	subs	r1, r5, #1
 800b886:	e006      	b.n	800b896 <_strtol_l.isra.0+0xea>
 800b888:	b106      	cbz	r6, 800b88c <_strtol_l.isra.0+0xe0>
 800b88a:	4240      	negs	r0, r0
 800b88c:	f1b8 0f00 	cmp.w	r8, #0
 800b890:	d099      	beq.n	800b7c6 <_strtol_l.isra.0+0x1a>
 800b892:	2a00      	cmp	r2, #0
 800b894:	d1f6      	bne.n	800b884 <_strtol_l.isra.0+0xd8>
 800b896:	f8c8 1000 	str.w	r1, [r8]
 800b89a:	e794      	b.n	800b7c6 <_strtol_l.isra.0+0x1a>
 800b89c:	080117b1 	.word	0x080117b1

0800b8a0 <_strtol_r>:
 800b8a0:	f7ff bf84 	b.w	800b7ac <_strtol_l.isra.0>

0800b8a4 <strtol>:
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	460a      	mov	r2, r1
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	4802      	ldr	r0, [pc, #8]	@ (800b8b4 <strtol+0x10>)
 800b8ac:	6800      	ldr	r0, [r0, #0]
 800b8ae:	f7ff bf7d 	b.w	800b7ac <_strtol_l.isra.0>
 800b8b2:	bf00      	nop
 800b8b4:	20000430 	.word	0x20000430

0800b8b8 <__cvt>:
 800b8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8bc:	ec57 6b10 	vmov	r6, r7, d0
 800b8c0:	2f00      	cmp	r7, #0
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	463b      	mov	r3, r7
 800b8c8:	bfbb      	ittet	lt
 800b8ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b8ce:	461f      	movlt	r7, r3
 800b8d0:	2300      	movge	r3, #0
 800b8d2:	232d      	movlt	r3, #45	@ 0x2d
 800b8d4:	700b      	strb	r3, [r1, #0]
 800b8d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b8dc:	4691      	mov	r9, r2
 800b8de:	f023 0820 	bic.w	r8, r3, #32
 800b8e2:	bfbc      	itt	lt
 800b8e4:	4632      	movlt	r2, r6
 800b8e6:	4616      	movlt	r6, r2
 800b8e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8ec:	d005      	beq.n	800b8fa <__cvt+0x42>
 800b8ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b8f2:	d100      	bne.n	800b8f6 <__cvt+0x3e>
 800b8f4:	3401      	adds	r4, #1
 800b8f6:	2102      	movs	r1, #2
 800b8f8:	e000      	b.n	800b8fc <__cvt+0x44>
 800b8fa:	2103      	movs	r1, #3
 800b8fc:	ab03      	add	r3, sp, #12
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	ab02      	add	r3, sp, #8
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	ec47 6b10 	vmov	d0, r6, r7
 800b908:	4653      	mov	r3, sl
 800b90a:	4622      	mov	r2, r4
 800b90c:	f001 f99c 	bl	800cc48 <_dtoa_r>
 800b910:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b914:	4605      	mov	r5, r0
 800b916:	d119      	bne.n	800b94c <__cvt+0x94>
 800b918:	f019 0f01 	tst.w	r9, #1
 800b91c:	d00e      	beq.n	800b93c <__cvt+0x84>
 800b91e:	eb00 0904 	add.w	r9, r0, r4
 800b922:	2200      	movs	r2, #0
 800b924:	2300      	movs	r3, #0
 800b926:	4630      	mov	r0, r6
 800b928:	4639      	mov	r1, r7
 800b92a:	f7f5 f8dd 	bl	8000ae8 <__aeabi_dcmpeq>
 800b92e:	b108      	cbz	r0, 800b934 <__cvt+0x7c>
 800b930:	f8cd 900c 	str.w	r9, [sp, #12]
 800b934:	2230      	movs	r2, #48	@ 0x30
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	454b      	cmp	r3, r9
 800b93a:	d31e      	bcc.n	800b97a <__cvt+0xc2>
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b940:	1b5b      	subs	r3, r3, r5
 800b942:	4628      	mov	r0, r5
 800b944:	6013      	str	r3, [r2, #0]
 800b946:	b004      	add	sp, #16
 800b948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b950:	eb00 0904 	add.w	r9, r0, r4
 800b954:	d1e5      	bne.n	800b922 <__cvt+0x6a>
 800b956:	7803      	ldrb	r3, [r0, #0]
 800b958:	2b30      	cmp	r3, #48	@ 0x30
 800b95a:	d10a      	bne.n	800b972 <__cvt+0xba>
 800b95c:	2200      	movs	r2, #0
 800b95e:	2300      	movs	r3, #0
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	f7f5 f8c0 	bl	8000ae8 <__aeabi_dcmpeq>
 800b968:	b918      	cbnz	r0, 800b972 <__cvt+0xba>
 800b96a:	f1c4 0401 	rsb	r4, r4, #1
 800b96e:	f8ca 4000 	str.w	r4, [sl]
 800b972:	f8da 3000 	ldr.w	r3, [sl]
 800b976:	4499      	add	r9, r3
 800b978:	e7d3      	b.n	800b922 <__cvt+0x6a>
 800b97a:	1c59      	adds	r1, r3, #1
 800b97c:	9103      	str	r1, [sp, #12]
 800b97e:	701a      	strb	r2, [r3, #0]
 800b980:	e7d9      	b.n	800b936 <__cvt+0x7e>

0800b982 <__exponent>:
 800b982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b984:	2900      	cmp	r1, #0
 800b986:	bfba      	itte	lt
 800b988:	4249      	neglt	r1, r1
 800b98a:	232d      	movlt	r3, #45	@ 0x2d
 800b98c:	232b      	movge	r3, #43	@ 0x2b
 800b98e:	2909      	cmp	r1, #9
 800b990:	7002      	strb	r2, [r0, #0]
 800b992:	7043      	strb	r3, [r0, #1]
 800b994:	dd29      	ble.n	800b9ea <__exponent+0x68>
 800b996:	f10d 0307 	add.w	r3, sp, #7
 800b99a:	461d      	mov	r5, r3
 800b99c:	270a      	movs	r7, #10
 800b99e:	461a      	mov	r2, r3
 800b9a0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b9a4:	fb07 1416 	mls	r4, r7, r6, r1
 800b9a8:	3430      	adds	r4, #48	@ 0x30
 800b9aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	2c63      	cmp	r4, #99	@ 0x63
 800b9b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	dcf1      	bgt.n	800b99e <__exponent+0x1c>
 800b9ba:	3130      	adds	r1, #48	@ 0x30
 800b9bc:	1e94      	subs	r4, r2, #2
 800b9be:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9c2:	1c41      	adds	r1, r0, #1
 800b9c4:	4623      	mov	r3, r4
 800b9c6:	42ab      	cmp	r3, r5
 800b9c8:	d30a      	bcc.n	800b9e0 <__exponent+0x5e>
 800b9ca:	f10d 0309 	add.w	r3, sp, #9
 800b9ce:	1a9b      	subs	r3, r3, r2
 800b9d0:	42ac      	cmp	r4, r5
 800b9d2:	bf88      	it	hi
 800b9d4:	2300      	movhi	r3, #0
 800b9d6:	3302      	adds	r3, #2
 800b9d8:	4403      	add	r3, r0
 800b9da:	1a18      	subs	r0, r3, r0
 800b9dc:	b003      	add	sp, #12
 800b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b9e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b9e8:	e7ed      	b.n	800b9c6 <__exponent+0x44>
 800b9ea:	2330      	movs	r3, #48	@ 0x30
 800b9ec:	3130      	adds	r1, #48	@ 0x30
 800b9ee:	7083      	strb	r3, [r0, #2]
 800b9f0:	70c1      	strb	r1, [r0, #3]
 800b9f2:	1d03      	adds	r3, r0, #4
 800b9f4:	e7f1      	b.n	800b9da <__exponent+0x58>
	...

0800b9f8 <_printf_float>:
 800b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	b08d      	sub	sp, #52	@ 0x34
 800b9fe:	460c      	mov	r4, r1
 800ba00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ba04:	4616      	mov	r6, r2
 800ba06:	461f      	mov	r7, r3
 800ba08:	4605      	mov	r5, r0
 800ba0a:	f000 ff85 	bl	800c918 <_localeconv_r>
 800ba0e:	6803      	ldr	r3, [r0, #0]
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7f4 fc3c 	bl	8000290 <strlen>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba20:	9005      	str	r0, [sp, #20]
 800ba22:	3307      	adds	r3, #7
 800ba24:	f023 0307 	bic.w	r3, r3, #7
 800ba28:	f103 0208 	add.w	r2, r3, #8
 800ba2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba30:	f8d4 b000 	ldr.w	fp, [r4]
 800ba34:	f8c8 2000 	str.w	r2, [r8]
 800ba38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba40:	9307      	str	r3, [sp, #28]
 800ba42:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba4e:	4b9c      	ldr	r3, [pc, #624]	@ (800bcc0 <_printf_float+0x2c8>)
 800ba50:	f04f 32ff 	mov.w	r2, #4294967295
 800ba54:	f7f5 f87a 	bl	8000b4c <__aeabi_dcmpun>
 800ba58:	bb70      	cbnz	r0, 800bab8 <_printf_float+0xc0>
 800ba5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba5e:	4b98      	ldr	r3, [pc, #608]	@ (800bcc0 <_printf_float+0x2c8>)
 800ba60:	f04f 32ff 	mov.w	r2, #4294967295
 800ba64:	f7f5 f854 	bl	8000b10 <__aeabi_dcmple>
 800ba68:	bb30      	cbnz	r0, 800bab8 <_printf_float+0xc0>
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4640      	mov	r0, r8
 800ba70:	4649      	mov	r1, r9
 800ba72:	f7f5 f843 	bl	8000afc <__aeabi_dcmplt>
 800ba76:	b110      	cbz	r0, 800ba7e <_printf_float+0x86>
 800ba78:	232d      	movs	r3, #45	@ 0x2d
 800ba7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba7e:	4a91      	ldr	r2, [pc, #580]	@ (800bcc4 <_printf_float+0x2cc>)
 800ba80:	4b91      	ldr	r3, [pc, #580]	@ (800bcc8 <_printf_float+0x2d0>)
 800ba82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba86:	bf8c      	ite	hi
 800ba88:	4690      	movhi	r8, r2
 800ba8a:	4698      	movls	r8, r3
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	6123      	str	r3, [r4, #16]
 800ba90:	f02b 0304 	bic.w	r3, fp, #4
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	f04f 0900 	mov.w	r9, #0
 800ba9a:	9700      	str	r7, [sp, #0]
 800ba9c:	4633      	mov	r3, r6
 800ba9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800baa0:	4621      	mov	r1, r4
 800baa2:	4628      	mov	r0, r5
 800baa4:	f000 f9d2 	bl	800be4c <_printf_common>
 800baa8:	3001      	adds	r0, #1
 800baaa:	f040 808d 	bne.w	800bbc8 <_printf_float+0x1d0>
 800baae:	f04f 30ff 	mov.w	r0, #4294967295
 800bab2:	b00d      	add	sp, #52	@ 0x34
 800bab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab8:	4642      	mov	r2, r8
 800baba:	464b      	mov	r3, r9
 800babc:	4640      	mov	r0, r8
 800babe:	4649      	mov	r1, r9
 800bac0:	f7f5 f844 	bl	8000b4c <__aeabi_dcmpun>
 800bac4:	b140      	cbz	r0, 800bad8 <_printf_float+0xe0>
 800bac6:	464b      	mov	r3, r9
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfbc      	itt	lt
 800bacc:	232d      	movlt	r3, #45	@ 0x2d
 800bace:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bad2:	4a7e      	ldr	r2, [pc, #504]	@ (800bccc <_printf_float+0x2d4>)
 800bad4:	4b7e      	ldr	r3, [pc, #504]	@ (800bcd0 <_printf_float+0x2d8>)
 800bad6:	e7d4      	b.n	800ba82 <_printf_float+0x8a>
 800bad8:	6863      	ldr	r3, [r4, #4]
 800bada:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bade:	9206      	str	r2, [sp, #24]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	d13b      	bne.n	800bb5c <_printf_float+0x164>
 800bae4:	2306      	movs	r3, #6
 800bae6:	6063      	str	r3, [r4, #4]
 800bae8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800baec:	2300      	movs	r3, #0
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	9303      	str	r3, [sp, #12]
 800baf2:	ab0a      	add	r3, sp, #40	@ 0x28
 800baf4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800baf8:	ab09      	add	r3, sp, #36	@ 0x24
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	6861      	ldr	r1, [r4, #4]
 800bafe:	ec49 8b10 	vmov	d0, r8, r9
 800bb02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bb06:	4628      	mov	r0, r5
 800bb08:	f7ff fed6 	bl	800b8b8 <__cvt>
 800bb0c:	9b06      	ldr	r3, [sp, #24]
 800bb0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb10:	2b47      	cmp	r3, #71	@ 0x47
 800bb12:	4680      	mov	r8, r0
 800bb14:	d129      	bne.n	800bb6a <_printf_float+0x172>
 800bb16:	1cc8      	adds	r0, r1, #3
 800bb18:	db02      	blt.n	800bb20 <_printf_float+0x128>
 800bb1a:	6863      	ldr	r3, [r4, #4]
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	dd41      	ble.n	800bba4 <_printf_float+0x1ac>
 800bb20:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb24:	fa5f fa8a 	uxtb.w	sl, sl
 800bb28:	3901      	subs	r1, #1
 800bb2a:	4652      	mov	r2, sl
 800bb2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb30:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb32:	f7ff ff26 	bl	800b982 <__exponent>
 800bb36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb38:	1813      	adds	r3, r2, r0
 800bb3a:	2a01      	cmp	r2, #1
 800bb3c:	4681      	mov	r9, r0
 800bb3e:	6123      	str	r3, [r4, #16]
 800bb40:	dc02      	bgt.n	800bb48 <_printf_float+0x150>
 800bb42:	6822      	ldr	r2, [r4, #0]
 800bb44:	07d2      	lsls	r2, r2, #31
 800bb46:	d501      	bpl.n	800bb4c <_printf_float+0x154>
 800bb48:	3301      	adds	r3, #1
 800bb4a:	6123      	str	r3, [r4, #16]
 800bb4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0a2      	beq.n	800ba9a <_printf_float+0xa2>
 800bb54:	232d      	movs	r3, #45	@ 0x2d
 800bb56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb5a:	e79e      	b.n	800ba9a <_printf_float+0xa2>
 800bb5c:	9a06      	ldr	r2, [sp, #24]
 800bb5e:	2a47      	cmp	r2, #71	@ 0x47
 800bb60:	d1c2      	bne.n	800bae8 <_printf_float+0xf0>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1c0      	bne.n	800bae8 <_printf_float+0xf0>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e7bd      	b.n	800bae6 <_printf_float+0xee>
 800bb6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb6e:	d9db      	bls.n	800bb28 <_printf_float+0x130>
 800bb70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb74:	d118      	bne.n	800bba8 <_printf_float+0x1b0>
 800bb76:	2900      	cmp	r1, #0
 800bb78:	6863      	ldr	r3, [r4, #4]
 800bb7a:	dd0b      	ble.n	800bb94 <_printf_float+0x19c>
 800bb7c:	6121      	str	r1, [r4, #16]
 800bb7e:	b913      	cbnz	r3, 800bb86 <_printf_float+0x18e>
 800bb80:	6822      	ldr	r2, [r4, #0]
 800bb82:	07d0      	lsls	r0, r2, #31
 800bb84:	d502      	bpl.n	800bb8c <_printf_float+0x194>
 800bb86:	3301      	adds	r3, #1
 800bb88:	440b      	add	r3, r1
 800bb8a:	6123      	str	r3, [r4, #16]
 800bb8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb8e:	f04f 0900 	mov.w	r9, #0
 800bb92:	e7db      	b.n	800bb4c <_printf_float+0x154>
 800bb94:	b913      	cbnz	r3, 800bb9c <_printf_float+0x1a4>
 800bb96:	6822      	ldr	r2, [r4, #0]
 800bb98:	07d2      	lsls	r2, r2, #31
 800bb9a:	d501      	bpl.n	800bba0 <_printf_float+0x1a8>
 800bb9c:	3302      	adds	r3, #2
 800bb9e:	e7f4      	b.n	800bb8a <_printf_float+0x192>
 800bba0:	2301      	movs	r3, #1
 800bba2:	e7f2      	b.n	800bb8a <_printf_float+0x192>
 800bba4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	db05      	blt.n	800bbba <_printf_float+0x1c2>
 800bbae:	6823      	ldr	r3, [r4, #0]
 800bbb0:	6121      	str	r1, [r4, #16]
 800bbb2:	07d8      	lsls	r0, r3, #31
 800bbb4:	d5ea      	bpl.n	800bb8c <_printf_float+0x194>
 800bbb6:	1c4b      	adds	r3, r1, #1
 800bbb8:	e7e7      	b.n	800bb8a <_printf_float+0x192>
 800bbba:	2900      	cmp	r1, #0
 800bbbc:	bfd4      	ite	le
 800bbbe:	f1c1 0202 	rsble	r2, r1, #2
 800bbc2:	2201      	movgt	r2, #1
 800bbc4:	4413      	add	r3, r2
 800bbc6:	e7e0      	b.n	800bb8a <_printf_float+0x192>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	055a      	lsls	r2, r3, #21
 800bbcc:	d407      	bmi.n	800bbde <_printf_float+0x1e6>
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	4642      	mov	r2, r8
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b8      	blx	r7
 800bbd8:	3001      	adds	r0, #1
 800bbda:	d12b      	bne.n	800bc34 <_printf_float+0x23c>
 800bbdc:	e767      	b.n	800baae <_printf_float+0xb6>
 800bbde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbe2:	f240 80dd 	bls.w	800bda0 <_printf_float+0x3a8>
 800bbe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbea:	2200      	movs	r2, #0
 800bbec:	2300      	movs	r3, #0
 800bbee:	f7f4 ff7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d033      	beq.n	800bc5e <_printf_float+0x266>
 800bbf6:	4a37      	ldr	r2, [pc, #220]	@ (800bcd4 <_printf_float+0x2dc>)
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	4631      	mov	r1, r6
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	47b8      	blx	r7
 800bc00:	3001      	adds	r0, #1
 800bc02:	f43f af54 	beq.w	800baae <_printf_float+0xb6>
 800bc06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc0a:	4543      	cmp	r3, r8
 800bc0c:	db02      	blt.n	800bc14 <_printf_float+0x21c>
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	07d8      	lsls	r0, r3, #31
 800bc12:	d50f      	bpl.n	800bc34 <_printf_float+0x23c>
 800bc14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc18:	4631      	mov	r1, r6
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	47b8      	blx	r7
 800bc1e:	3001      	adds	r0, #1
 800bc20:	f43f af45 	beq.w	800baae <_printf_float+0xb6>
 800bc24:	f04f 0900 	mov.w	r9, #0
 800bc28:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc2c:	f104 0a1a 	add.w	sl, r4, #26
 800bc30:	45c8      	cmp	r8, r9
 800bc32:	dc09      	bgt.n	800bc48 <_printf_float+0x250>
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	079b      	lsls	r3, r3, #30
 800bc38:	f100 8103 	bmi.w	800be42 <_printf_float+0x44a>
 800bc3c:	68e0      	ldr	r0, [r4, #12]
 800bc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc40:	4298      	cmp	r0, r3
 800bc42:	bfb8      	it	lt
 800bc44:	4618      	movlt	r0, r3
 800bc46:	e734      	b.n	800bab2 <_printf_float+0xba>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4652      	mov	r2, sl
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	f43f af2b 	beq.w	800baae <_printf_float+0xb6>
 800bc58:	f109 0901 	add.w	r9, r9, #1
 800bc5c:	e7e8      	b.n	800bc30 <_printf_float+0x238>
 800bc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	dc39      	bgt.n	800bcd8 <_printf_float+0x2e0>
 800bc64:	4a1b      	ldr	r2, [pc, #108]	@ (800bcd4 <_printf_float+0x2dc>)
 800bc66:	2301      	movs	r3, #1
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	47b8      	blx	r7
 800bc6e:	3001      	adds	r0, #1
 800bc70:	f43f af1d 	beq.w	800baae <_printf_float+0xb6>
 800bc74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc78:	ea59 0303 	orrs.w	r3, r9, r3
 800bc7c:	d102      	bne.n	800bc84 <_printf_float+0x28c>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	07d9      	lsls	r1, r3, #31
 800bc82:	d5d7      	bpl.n	800bc34 <_printf_float+0x23c>
 800bc84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b8      	blx	r7
 800bc8e:	3001      	adds	r0, #1
 800bc90:	f43f af0d 	beq.w	800baae <_printf_float+0xb6>
 800bc94:	f04f 0a00 	mov.w	sl, #0
 800bc98:	f104 0b1a 	add.w	fp, r4, #26
 800bc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc9e:	425b      	negs	r3, r3
 800bca0:	4553      	cmp	r3, sl
 800bca2:	dc01      	bgt.n	800bca8 <_printf_float+0x2b0>
 800bca4:	464b      	mov	r3, r9
 800bca6:	e793      	b.n	800bbd0 <_printf_float+0x1d8>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	465a      	mov	r2, fp
 800bcac:	4631      	mov	r1, r6
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b8      	blx	r7
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f43f aefb 	beq.w	800baae <_printf_float+0xb6>
 800bcb8:	f10a 0a01 	add.w	sl, sl, #1
 800bcbc:	e7ee      	b.n	800bc9c <_printf_float+0x2a4>
 800bcbe:	bf00      	nop
 800bcc0:	7fefffff 	.word	0x7fefffff
 800bcc4:	08011516 	.word	0x08011516
 800bcc8:	08011512 	.word	0x08011512
 800bccc:	0801151e 	.word	0x0801151e
 800bcd0:	0801151a 	.word	0x0801151a
 800bcd4:	08011754 	.word	0x08011754
 800bcd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcde:	4553      	cmp	r3, sl
 800bce0:	bfa8      	it	ge
 800bce2:	4653      	movge	r3, sl
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	4699      	mov	r9, r3
 800bce8:	dc36      	bgt.n	800bd58 <_printf_float+0x360>
 800bcea:	f04f 0b00 	mov.w	fp, #0
 800bcee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcf2:	f104 021a 	add.w	r2, r4, #26
 800bcf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcf8:	9306      	str	r3, [sp, #24]
 800bcfa:	eba3 0309 	sub.w	r3, r3, r9
 800bcfe:	455b      	cmp	r3, fp
 800bd00:	dc31      	bgt.n	800bd66 <_printf_float+0x36e>
 800bd02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd04:	459a      	cmp	sl, r3
 800bd06:	dc3a      	bgt.n	800bd7e <_printf_float+0x386>
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	07da      	lsls	r2, r3, #31
 800bd0c:	d437      	bmi.n	800bd7e <_printf_float+0x386>
 800bd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd10:	ebaa 0903 	sub.w	r9, sl, r3
 800bd14:	9b06      	ldr	r3, [sp, #24]
 800bd16:	ebaa 0303 	sub.w	r3, sl, r3
 800bd1a:	4599      	cmp	r9, r3
 800bd1c:	bfa8      	it	ge
 800bd1e:	4699      	movge	r9, r3
 800bd20:	f1b9 0f00 	cmp.w	r9, #0
 800bd24:	dc33      	bgt.n	800bd8e <_printf_float+0x396>
 800bd26:	f04f 0800 	mov.w	r8, #0
 800bd2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd2e:	f104 0b1a 	add.w	fp, r4, #26
 800bd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd34:	ebaa 0303 	sub.w	r3, sl, r3
 800bd38:	eba3 0309 	sub.w	r3, r3, r9
 800bd3c:	4543      	cmp	r3, r8
 800bd3e:	f77f af79 	ble.w	800bc34 <_printf_float+0x23c>
 800bd42:	2301      	movs	r3, #1
 800bd44:	465a      	mov	r2, fp
 800bd46:	4631      	mov	r1, r6
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b8      	blx	r7
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	f43f aeae 	beq.w	800baae <_printf_float+0xb6>
 800bd52:	f108 0801 	add.w	r8, r8, #1
 800bd56:	e7ec      	b.n	800bd32 <_printf_float+0x33a>
 800bd58:	4642      	mov	r2, r8
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	47b8      	blx	r7
 800bd60:	3001      	adds	r0, #1
 800bd62:	d1c2      	bne.n	800bcea <_printf_float+0x2f2>
 800bd64:	e6a3      	b.n	800baae <_printf_float+0xb6>
 800bd66:	2301      	movs	r3, #1
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	9206      	str	r2, [sp, #24]
 800bd6e:	47b8      	blx	r7
 800bd70:	3001      	adds	r0, #1
 800bd72:	f43f ae9c 	beq.w	800baae <_printf_float+0xb6>
 800bd76:	9a06      	ldr	r2, [sp, #24]
 800bd78:	f10b 0b01 	add.w	fp, fp, #1
 800bd7c:	e7bb      	b.n	800bcf6 <_printf_float+0x2fe>
 800bd7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd82:	4631      	mov	r1, r6
 800bd84:	4628      	mov	r0, r5
 800bd86:	47b8      	blx	r7
 800bd88:	3001      	adds	r0, #1
 800bd8a:	d1c0      	bne.n	800bd0e <_printf_float+0x316>
 800bd8c:	e68f      	b.n	800baae <_printf_float+0xb6>
 800bd8e:	9a06      	ldr	r2, [sp, #24]
 800bd90:	464b      	mov	r3, r9
 800bd92:	4442      	add	r2, r8
 800bd94:	4631      	mov	r1, r6
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b8      	blx	r7
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	d1c3      	bne.n	800bd26 <_printf_float+0x32e>
 800bd9e:	e686      	b.n	800baae <_printf_float+0xb6>
 800bda0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bda4:	f1ba 0f01 	cmp.w	sl, #1
 800bda8:	dc01      	bgt.n	800bdae <_printf_float+0x3b6>
 800bdaa:	07db      	lsls	r3, r3, #31
 800bdac:	d536      	bpl.n	800be1c <_printf_float+0x424>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	4642      	mov	r2, r8
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	47b8      	blx	r7
 800bdb8:	3001      	adds	r0, #1
 800bdba:	f43f ae78 	beq.w	800baae <_printf_float+0xb6>
 800bdbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	47b8      	blx	r7
 800bdc8:	3001      	adds	r0, #1
 800bdca:	f43f ae70 	beq.w	800baae <_printf_float+0xb6>
 800bdce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdda:	f7f4 fe85 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdde:	b9c0      	cbnz	r0, 800be12 <_printf_float+0x41a>
 800bde0:	4653      	mov	r3, sl
 800bde2:	f108 0201 	add.w	r2, r8, #1
 800bde6:	4631      	mov	r1, r6
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b8      	blx	r7
 800bdec:	3001      	adds	r0, #1
 800bdee:	d10c      	bne.n	800be0a <_printf_float+0x412>
 800bdf0:	e65d      	b.n	800baae <_printf_float+0xb6>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	465a      	mov	r2, fp
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	47b8      	blx	r7
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	f43f ae56 	beq.w	800baae <_printf_float+0xb6>
 800be02:	f108 0801 	add.w	r8, r8, #1
 800be06:	45d0      	cmp	r8, sl
 800be08:	dbf3      	blt.n	800bdf2 <_printf_float+0x3fa>
 800be0a:	464b      	mov	r3, r9
 800be0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be10:	e6df      	b.n	800bbd2 <_printf_float+0x1da>
 800be12:	f04f 0800 	mov.w	r8, #0
 800be16:	f104 0b1a 	add.w	fp, r4, #26
 800be1a:	e7f4      	b.n	800be06 <_printf_float+0x40e>
 800be1c:	2301      	movs	r3, #1
 800be1e:	4642      	mov	r2, r8
 800be20:	e7e1      	b.n	800bde6 <_printf_float+0x3ee>
 800be22:	2301      	movs	r3, #1
 800be24:	464a      	mov	r2, r9
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f ae3e 	beq.w	800baae <_printf_float+0xb6>
 800be32:	f108 0801 	add.w	r8, r8, #1
 800be36:	68e3      	ldr	r3, [r4, #12]
 800be38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be3a:	1a5b      	subs	r3, r3, r1
 800be3c:	4543      	cmp	r3, r8
 800be3e:	dcf0      	bgt.n	800be22 <_printf_float+0x42a>
 800be40:	e6fc      	b.n	800bc3c <_printf_float+0x244>
 800be42:	f04f 0800 	mov.w	r8, #0
 800be46:	f104 0919 	add.w	r9, r4, #25
 800be4a:	e7f4      	b.n	800be36 <_printf_float+0x43e>

0800be4c <_printf_common>:
 800be4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be50:	4616      	mov	r6, r2
 800be52:	4698      	mov	r8, r3
 800be54:	688a      	ldr	r2, [r1, #8]
 800be56:	690b      	ldr	r3, [r1, #16]
 800be58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be5c:	4293      	cmp	r3, r2
 800be5e:	bfb8      	it	lt
 800be60:	4613      	movlt	r3, r2
 800be62:	6033      	str	r3, [r6, #0]
 800be64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be68:	4607      	mov	r7, r0
 800be6a:	460c      	mov	r4, r1
 800be6c:	b10a      	cbz	r2, 800be72 <_printf_common+0x26>
 800be6e:	3301      	adds	r3, #1
 800be70:	6033      	str	r3, [r6, #0]
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	0699      	lsls	r1, r3, #26
 800be76:	bf42      	ittt	mi
 800be78:	6833      	ldrmi	r3, [r6, #0]
 800be7a:	3302      	addmi	r3, #2
 800be7c:	6033      	strmi	r3, [r6, #0]
 800be7e:	6825      	ldr	r5, [r4, #0]
 800be80:	f015 0506 	ands.w	r5, r5, #6
 800be84:	d106      	bne.n	800be94 <_printf_common+0x48>
 800be86:	f104 0a19 	add.w	sl, r4, #25
 800be8a:	68e3      	ldr	r3, [r4, #12]
 800be8c:	6832      	ldr	r2, [r6, #0]
 800be8e:	1a9b      	subs	r3, r3, r2
 800be90:	42ab      	cmp	r3, r5
 800be92:	dc26      	bgt.n	800bee2 <_printf_common+0x96>
 800be94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be98:	6822      	ldr	r2, [r4, #0]
 800be9a:	3b00      	subs	r3, #0
 800be9c:	bf18      	it	ne
 800be9e:	2301      	movne	r3, #1
 800bea0:	0692      	lsls	r2, r2, #26
 800bea2:	d42b      	bmi.n	800befc <_printf_common+0xb0>
 800bea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bea8:	4641      	mov	r1, r8
 800beaa:	4638      	mov	r0, r7
 800beac:	47c8      	blx	r9
 800beae:	3001      	adds	r0, #1
 800beb0:	d01e      	beq.n	800bef0 <_printf_common+0xa4>
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	6922      	ldr	r2, [r4, #16]
 800beb6:	f003 0306 	and.w	r3, r3, #6
 800beba:	2b04      	cmp	r3, #4
 800bebc:	bf02      	ittt	eq
 800bebe:	68e5      	ldreq	r5, [r4, #12]
 800bec0:	6833      	ldreq	r3, [r6, #0]
 800bec2:	1aed      	subeq	r5, r5, r3
 800bec4:	68a3      	ldr	r3, [r4, #8]
 800bec6:	bf0c      	ite	eq
 800bec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800becc:	2500      	movne	r5, #0
 800bece:	4293      	cmp	r3, r2
 800bed0:	bfc4      	itt	gt
 800bed2:	1a9b      	subgt	r3, r3, r2
 800bed4:	18ed      	addgt	r5, r5, r3
 800bed6:	2600      	movs	r6, #0
 800bed8:	341a      	adds	r4, #26
 800beda:	42b5      	cmp	r5, r6
 800bedc:	d11a      	bne.n	800bf14 <_printf_common+0xc8>
 800bede:	2000      	movs	r0, #0
 800bee0:	e008      	b.n	800bef4 <_printf_common+0xa8>
 800bee2:	2301      	movs	r3, #1
 800bee4:	4652      	mov	r2, sl
 800bee6:	4641      	mov	r1, r8
 800bee8:	4638      	mov	r0, r7
 800beea:	47c8      	blx	r9
 800beec:	3001      	adds	r0, #1
 800beee:	d103      	bne.n	800bef8 <_printf_common+0xac>
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef8:	3501      	adds	r5, #1
 800befa:	e7c6      	b.n	800be8a <_printf_common+0x3e>
 800befc:	18e1      	adds	r1, r4, r3
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	2030      	movs	r0, #48	@ 0x30
 800bf02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf06:	4422      	add	r2, r4
 800bf08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf10:	3302      	adds	r3, #2
 800bf12:	e7c7      	b.n	800bea4 <_printf_common+0x58>
 800bf14:	2301      	movs	r3, #1
 800bf16:	4622      	mov	r2, r4
 800bf18:	4641      	mov	r1, r8
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	47c8      	blx	r9
 800bf1e:	3001      	adds	r0, #1
 800bf20:	d0e6      	beq.n	800bef0 <_printf_common+0xa4>
 800bf22:	3601      	adds	r6, #1
 800bf24:	e7d9      	b.n	800beda <_printf_common+0x8e>
	...

0800bf28 <_printf_i>:
 800bf28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2c:	7e0f      	ldrb	r7, [r1, #24]
 800bf2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf30:	2f78      	cmp	r7, #120	@ 0x78
 800bf32:	4691      	mov	r9, r2
 800bf34:	4680      	mov	r8, r0
 800bf36:	460c      	mov	r4, r1
 800bf38:	469a      	mov	sl, r3
 800bf3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf3e:	d807      	bhi.n	800bf50 <_printf_i+0x28>
 800bf40:	2f62      	cmp	r7, #98	@ 0x62
 800bf42:	d80a      	bhi.n	800bf5a <_printf_i+0x32>
 800bf44:	2f00      	cmp	r7, #0
 800bf46:	f000 80d1 	beq.w	800c0ec <_printf_i+0x1c4>
 800bf4a:	2f58      	cmp	r7, #88	@ 0x58
 800bf4c:	f000 80b8 	beq.w	800c0c0 <_printf_i+0x198>
 800bf50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf58:	e03a      	b.n	800bfd0 <_printf_i+0xa8>
 800bf5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf5e:	2b15      	cmp	r3, #21
 800bf60:	d8f6      	bhi.n	800bf50 <_printf_i+0x28>
 800bf62:	a101      	add	r1, pc, #4	@ (adr r1, 800bf68 <_printf_i+0x40>)
 800bf64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf68:	0800bfc1 	.word	0x0800bfc1
 800bf6c:	0800bfd5 	.word	0x0800bfd5
 800bf70:	0800bf51 	.word	0x0800bf51
 800bf74:	0800bf51 	.word	0x0800bf51
 800bf78:	0800bf51 	.word	0x0800bf51
 800bf7c:	0800bf51 	.word	0x0800bf51
 800bf80:	0800bfd5 	.word	0x0800bfd5
 800bf84:	0800bf51 	.word	0x0800bf51
 800bf88:	0800bf51 	.word	0x0800bf51
 800bf8c:	0800bf51 	.word	0x0800bf51
 800bf90:	0800bf51 	.word	0x0800bf51
 800bf94:	0800c0d3 	.word	0x0800c0d3
 800bf98:	0800bfff 	.word	0x0800bfff
 800bf9c:	0800c08d 	.word	0x0800c08d
 800bfa0:	0800bf51 	.word	0x0800bf51
 800bfa4:	0800bf51 	.word	0x0800bf51
 800bfa8:	0800c0f5 	.word	0x0800c0f5
 800bfac:	0800bf51 	.word	0x0800bf51
 800bfb0:	0800bfff 	.word	0x0800bfff
 800bfb4:	0800bf51 	.word	0x0800bf51
 800bfb8:	0800bf51 	.word	0x0800bf51
 800bfbc:	0800c095 	.word	0x0800c095
 800bfc0:	6833      	ldr	r3, [r6, #0]
 800bfc2:	1d1a      	adds	r2, r3, #4
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6032      	str	r2, [r6, #0]
 800bfc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e09c      	b.n	800c10e <_printf_i+0x1e6>
 800bfd4:	6833      	ldr	r3, [r6, #0]
 800bfd6:	6820      	ldr	r0, [r4, #0]
 800bfd8:	1d19      	adds	r1, r3, #4
 800bfda:	6031      	str	r1, [r6, #0]
 800bfdc:	0606      	lsls	r6, r0, #24
 800bfde:	d501      	bpl.n	800bfe4 <_printf_i+0xbc>
 800bfe0:	681d      	ldr	r5, [r3, #0]
 800bfe2:	e003      	b.n	800bfec <_printf_i+0xc4>
 800bfe4:	0645      	lsls	r5, r0, #25
 800bfe6:	d5fb      	bpl.n	800bfe0 <_printf_i+0xb8>
 800bfe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfec:	2d00      	cmp	r5, #0
 800bfee:	da03      	bge.n	800bff8 <_printf_i+0xd0>
 800bff0:	232d      	movs	r3, #45	@ 0x2d
 800bff2:	426d      	negs	r5, r5
 800bff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bff8:	4858      	ldr	r0, [pc, #352]	@ (800c15c <_printf_i+0x234>)
 800bffa:	230a      	movs	r3, #10
 800bffc:	e011      	b.n	800c022 <_printf_i+0xfa>
 800bffe:	6821      	ldr	r1, [r4, #0]
 800c000:	6833      	ldr	r3, [r6, #0]
 800c002:	0608      	lsls	r0, r1, #24
 800c004:	f853 5b04 	ldr.w	r5, [r3], #4
 800c008:	d402      	bmi.n	800c010 <_printf_i+0xe8>
 800c00a:	0649      	lsls	r1, r1, #25
 800c00c:	bf48      	it	mi
 800c00e:	b2ad      	uxthmi	r5, r5
 800c010:	2f6f      	cmp	r7, #111	@ 0x6f
 800c012:	4852      	ldr	r0, [pc, #328]	@ (800c15c <_printf_i+0x234>)
 800c014:	6033      	str	r3, [r6, #0]
 800c016:	bf14      	ite	ne
 800c018:	230a      	movne	r3, #10
 800c01a:	2308      	moveq	r3, #8
 800c01c:	2100      	movs	r1, #0
 800c01e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c022:	6866      	ldr	r6, [r4, #4]
 800c024:	60a6      	str	r6, [r4, #8]
 800c026:	2e00      	cmp	r6, #0
 800c028:	db05      	blt.n	800c036 <_printf_i+0x10e>
 800c02a:	6821      	ldr	r1, [r4, #0]
 800c02c:	432e      	orrs	r6, r5
 800c02e:	f021 0104 	bic.w	r1, r1, #4
 800c032:	6021      	str	r1, [r4, #0]
 800c034:	d04b      	beq.n	800c0ce <_printf_i+0x1a6>
 800c036:	4616      	mov	r6, r2
 800c038:	fbb5 f1f3 	udiv	r1, r5, r3
 800c03c:	fb03 5711 	mls	r7, r3, r1, r5
 800c040:	5dc7      	ldrb	r7, [r0, r7]
 800c042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c046:	462f      	mov	r7, r5
 800c048:	42bb      	cmp	r3, r7
 800c04a:	460d      	mov	r5, r1
 800c04c:	d9f4      	bls.n	800c038 <_printf_i+0x110>
 800c04e:	2b08      	cmp	r3, #8
 800c050:	d10b      	bne.n	800c06a <_printf_i+0x142>
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	07df      	lsls	r7, r3, #31
 800c056:	d508      	bpl.n	800c06a <_printf_i+0x142>
 800c058:	6923      	ldr	r3, [r4, #16]
 800c05a:	6861      	ldr	r1, [r4, #4]
 800c05c:	4299      	cmp	r1, r3
 800c05e:	bfde      	ittt	le
 800c060:	2330      	movle	r3, #48	@ 0x30
 800c062:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c06a:	1b92      	subs	r2, r2, r6
 800c06c:	6122      	str	r2, [r4, #16]
 800c06e:	f8cd a000 	str.w	sl, [sp]
 800c072:	464b      	mov	r3, r9
 800c074:	aa03      	add	r2, sp, #12
 800c076:	4621      	mov	r1, r4
 800c078:	4640      	mov	r0, r8
 800c07a:	f7ff fee7 	bl	800be4c <_printf_common>
 800c07e:	3001      	adds	r0, #1
 800c080:	d14a      	bne.n	800c118 <_printf_i+0x1f0>
 800c082:	f04f 30ff 	mov.w	r0, #4294967295
 800c086:	b004      	add	sp, #16
 800c088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	f043 0320 	orr.w	r3, r3, #32
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	4832      	ldr	r0, [pc, #200]	@ (800c160 <_printf_i+0x238>)
 800c096:	2778      	movs	r7, #120	@ 0x78
 800c098:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	6831      	ldr	r1, [r6, #0]
 800c0a0:	061f      	lsls	r7, r3, #24
 800c0a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0a6:	d402      	bmi.n	800c0ae <_printf_i+0x186>
 800c0a8:	065f      	lsls	r7, r3, #25
 800c0aa:	bf48      	it	mi
 800c0ac:	b2ad      	uxthmi	r5, r5
 800c0ae:	6031      	str	r1, [r6, #0]
 800c0b0:	07d9      	lsls	r1, r3, #31
 800c0b2:	bf44      	itt	mi
 800c0b4:	f043 0320 	orrmi.w	r3, r3, #32
 800c0b8:	6023      	strmi	r3, [r4, #0]
 800c0ba:	b11d      	cbz	r5, 800c0c4 <_printf_i+0x19c>
 800c0bc:	2310      	movs	r3, #16
 800c0be:	e7ad      	b.n	800c01c <_printf_i+0xf4>
 800c0c0:	4826      	ldr	r0, [pc, #152]	@ (800c15c <_printf_i+0x234>)
 800c0c2:	e7e9      	b.n	800c098 <_printf_i+0x170>
 800c0c4:	6823      	ldr	r3, [r4, #0]
 800c0c6:	f023 0320 	bic.w	r3, r3, #32
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	e7f6      	b.n	800c0bc <_printf_i+0x194>
 800c0ce:	4616      	mov	r6, r2
 800c0d0:	e7bd      	b.n	800c04e <_printf_i+0x126>
 800c0d2:	6833      	ldr	r3, [r6, #0]
 800c0d4:	6825      	ldr	r5, [r4, #0]
 800c0d6:	6961      	ldr	r1, [r4, #20]
 800c0d8:	1d18      	adds	r0, r3, #4
 800c0da:	6030      	str	r0, [r6, #0]
 800c0dc:	062e      	lsls	r6, r5, #24
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	d501      	bpl.n	800c0e6 <_printf_i+0x1be>
 800c0e2:	6019      	str	r1, [r3, #0]
 800c0e4:	e002      	b.n	800c0ec <_printf_i+0x1c4>
 800c0e6:	0668      	lsls	r0, r5, #25
 800c0e8:	d5fb      	bpl.n	800c0e2 <_printf_i+0x1ba>
 800c0ea:	8019      	strh	r1, [r3, #0]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	6123      	str	r3, [r4, #16]
 800c0f0:	4616      	mov	r6, r2
 800c0f2:	e7bc      	b.n	800c06e <_printf_i+0x146>
 800c0f4:	6833      	ldr	r3, [r6, #0]
 800c0f6:	1d1a      	adds	r2, r3, #4
 800c0f8:	6032      	str	r2, [r6, #0]
 800c0fa:	681e      	ldr	r6, [r3, #0]
 800c0fc:	6862      	ldr	r2, [r4, #4]
 800c0fe:	2100      	movs	r1, #0
 800c100:	4630      	mov	r0, r6
 800c102:	f7f4 f875 	bl	80001f0 <memchr>
 800c106:	b108      	cbz	r0, 800c10c <_printf_i+0x1e4>
 800c108:	1b80      	subs	r0, r0, r6
 800c10a:	6060      	str	r0, [r4, #4]
 800c10c:	6863      	ldr	r3, [r4, #4]
 800c10e:	6123      	str	r3, [r4, #16]
 800c110:	2300      	movs	r3, #0
 800c112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c116:	e7aa      	b.n	800c06e <_printf_i+0x146>
 800c118:	6923      	ldr	r3, [r4, #16]
 800c11a:	4632      	mov	r2, r6
 800c11c:	4649      	mov	r1, r9
 800c11e:	4640      	mov	r0, r8
 800c120:	47d0      	blx	sl
 800c122:	3001      	adds	r0, #1
 800c124:	d0ad      	beq.n	800c082 <_printf_i+0x15a>
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	079b      	lsls	r3, r3, #30
 800c12a:	d413      	bmi.n	800c154 <_printf_i+0x22c>
 800c12c:	68e0      	ldr	r0, [r4, #12]
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	4298      	cmp	r0, r3
 800c132:	bfb8      	it	lt
 800c134:	4618      	movlt	r0, r3
 800c136:	e7a6      	b.n	800c086 <_printf_i+0x15e>
 800c138:	2301      	movs	r3, #1
 800c13a:	4632      	mov	r2, r6
 800c13c:	4649      	mov	r1, r9
 800c13e:	4640      	mov	r0, r8
 800c140:	47d0      	blx	sl
 800c142:	3001      	adds	r0, #1
 800c144:	d09d      	beq.n	800c082 <_printf_i+0x15a>
 800c146:	3501      	adds	r5, #1
 800c148:	68e3      	ldr	r3, [r4, #12]
 800c14a:	9903      	ldr	r1, [sp, #12]
 800c14c:	1a5b      	subs	r3, r3, r1
 800c14e:	42ab      	cmp	r3, r5
 800c150:	dcf2      	bgt.n	800c138 <_printf_i+0x210>
 800c152:	e7eb      	b.n	800c12c <_printf_i+0x204>
 800c154:	2500      	movs	r5, #0
 800c156:	f104 0619 	add.w	r6, r4, #25
 800c15a:	e7f5      	b.n	800c148 <_printf_i+0x220>
 800c15c:	08011522 	.word	0x08011522
 800c160:	08011533 	.word	0x08011533

0800c164 <_scanf_float>:
 800c164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c168:	b087      	sub	sp, #28
 800c16a:	4691      	mov	r9, r2
 800c16c:	9303      	str	r3, [sp, #12]
 800c16e:	688b      	ldr	r3, [r1, #8]
 800c170:	1e5a      	subs	r2, r3, #1
 800c172:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c176:	bf81      	itttt	hi
 800c178:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c17c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c180:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c184:	608b      	strhi	r3, [r1, #8]
 800c186:	680b      	ldr	r3, [r1, #0]
 800c188:	460a      	mov	r2, r1
 800c18a:	f04f 0500 	mov.w	r5, #0
 800c18e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c192:	f842 3b1c 	str.w	r3, [r2], #28
 800c196:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c19a:	4680      	mov	r8, r0
 800c19c:	460c      	mov	r4, r1
 800c19e:	bf98      	it	ls
 800c1a0:	f04f 0b00 	movls.w	fp, #0
 800c1a4:	9201      	str	r2, [sp, #4]
 800c1a6:	4616      	mov	r6, r2
 800c1a8:	46aa      	mov	sl, r5
 800c1aa:	462f      	mov	r7, r5
 800c1ac:	9502      	str	r5, [sp, #8]
 800c1ae:	68a2      	ldr	r2, [r4, #8]
 800c1b0:	b15a      	cbz	r2, 800c1ca <_scanf_float+0x66>
 800c1b2:	f8d9 3000 	ldr.w	r3, [r9]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2b4e      	cmp	r3, #78	@ 0x4e
 800c1ba:	d863      	bhi.n	800c284 <_scanf_float+0x120>
 800c1bc:	2b40      	cmp	r3, #64	@ 0x40
 800c1be:	d83b      	bhi.n	800c238 <_scanf_float+0xd4>
 800c1c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c1c4:	b2c8      	uxtb	r0, r1
 800c1c6:	280e      	cmp	r0, #14
 800c1c8:	d939      	bls.n	800c23e <_scanf_float+0xda>
 800c1ca:	b11f      	cbz	r7, 800c1d4 <_scanf_float+0x70>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1d2:	6023      	str	r3, [r4, #0]
 800c1d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1d8:	f1ba 0f01 	cmp.w	sl, #1
 800c1dc:	f200 8114 	bhi.w	800c408 <_scanf_float+0x2a4>
 800c1e0:	9b01      	ldr	r3, [sp, #4]
 800c1e2:	429e      	cmp	r6, r3
 800c1e4:	f200 8105 	bhi.w	800c3f2 <_scanf_float+0x28e>
 800c1e8:	2001      	movs	r0, #1
 800c1ea:	b007      	add	sp, #28
 800c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c1f4:	2a0d      	cmp	r2, #13
 800c1f6:	d8e8      	bhi.n	800c1ca <_scanf_float+0x66>
 800c1f8:	a101      	add	r1, pc, #4	@ (adr r1, 800c200 <_scanf_float+0x9c>)
 800c1fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1fe:	bf00      	nop
 800c200:	0800c349 	.word	0x0800c349
 800c204:	0800c1cb 	.word	0x0800c1cb
 800c208:	0800c1cb 	.word	0x0800c1cb
 800c20c:	0800c1cb 	.word	0x0800c1cb
 800c210:	0800c3a5 	.word	0x0800c3a5
 800c214:	0800c37f 	.word	0x0800c37f
 800c218:	0800c1cb 	.word	0x0800c1cb
 800c21c:	0800c1cb 	.word	0x0800c1cb
 800c220:	0800c357 	.word	0x0800c357
 800c224:	0800c1cb 	.word	0x0800c1cb
 800c228:	0800c1cb 	.word	0x0800c1cb
 800c22c:	0800c1cb 	.word	0x0800c1cb
 800c230:	0800c1cb 	.word	0x0800c1cb
 800c234:	0800c313 	.word	0x0800c313
 800c238:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c23c:	e7da      	b.n	800c1f4 <_scanf_float+0x90>
 800c23e:	290e      	cmp	r1, #14
 800c240:	d8c3      	bhi.n	800c1ca <_scanf_float+0x66>
 800c242:	a001      	add	r0, pc, #4	@ (adr r0, 800c248 <_scanf_float+0xe4>)
 800c244:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c248:	0800c303 	.word	0x0800c303
 800c24c:	0800c1cb 	.word	0x0800c1cb
 800c250:	0800c303 	.word	0x0800c303
 800c254:	0800c393 	.word	0x0800c393
 800c258:	0800c1cb 	.word	0x0800c1cb
 800c25c:	0800c2a5 	.word	0x0800c2a5
 800c260:	0800c2e9 	.word	0x0800c2e9
 800c264:	0800c2e9 	.word	0x0800c2e9
 800c268:	0800c2e9 	.word	0x0800c2e9
 800c26c:	0800c2e9 	.word	0x0800c2e9
 800c270:	0800c2e9 	.word	0x0800c2e9
 800c274:	0800c2e9 	.word	0x0800c2e9
 800c278:	0800c2e9 	.word	0x0800c2e9
 800c27c:	0800c2e9 	.word	0x0800c2e9
 800c280:	0800c2e9 	.word	0x0800c2e9
 800c284:	2b6e      	cmp	r3, #110	@ 0x6e
 800c286:	d809      	bhi.n	800c29c <_scanf_float+0x138>
 800c288:	2b60      	cmp	r3, #96	@ 0x60
 800c28a:	d8b1      	bhi.n	800c1f0 <_scanf_float+0x8c>
 800c28c:	2b54      	cmp	r3, #84	@ 0x54
 800c28e:	d07b      	beq.n	800c388 <_scanf_float+0x224>
 800c290:	2b59      	cmp	r3, #89	@ 0x59
 800c292:	d19a      	bne.n	800c1ca <_scanf_float+0x66>
 800c294:	2d07      	cmp	r5, #7
 800c296:	d198      	bne.n	800c1ca <_scanf_float+0x66>
 800c298:	2508      	movs	r5, #8
 800c29a:	e02f      	b.n	800c2fc <_scanf_float+0x198>
 800c29c:	2b74      	cmp	r3, #116	@ 0x74
 800c29e:	d073      	beq.n	800c388 <_scanf_float+0x224>
 800c2a0:	2b79      	cmp	r3, #121	@ 0x79
 800c2a2:	e7f6      	b.n	800c292 <_scanf_float+0x12e>
 800c2a4:	6821      	ldr	r1, [r4, #0]
 800c2a6:	05c8      	lsls	r0, r1, #23
 800c2a8:	d51e      	bpl.n	800c2e8 <_scanf_float+0x184>
 800c2aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c2ae:	6021      	str	r1, [r4, #0]
 800c2b0:	3701      	adds	r7, #1
 800c2b2:	f1bb 0f00 	cmp.w	fp, #0
 800c2b6:	d003      	beq.n	800c2c0 <_scanf_float+0x15c>
 800c2b8:	3201      	adds	r2, #1
 800c2ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2be:	60a2      	str	r2, [r4, #8]
 800c2c0:	68a3      	ldr	r3, [r4, #8]
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	60a3      	str	r3, [r4, #8]
 800c2c6:	6923      	ldr	r3, [r4, #16]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	6123      	str	r3, [r4, #16]
 800c2cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f8c9 3004 	str.w	r3, [r9, #4]
 800c2d8:	f340 8082 	ble.w	800c3e0 <_scanf_float+0x27c>
 800c2dc:	f8d9 3000 	ldr.w	r3, [r9]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	f8c9 3000 	str.w	r3, [r9]
 800c2e6:	e762      	b.n	800c1ae <_scanf_float+0x4a>
 800c2e8:	eb1a 0105 	adds.w	r1, sl, r5
 800c2ec:	f47f af6d 	bne.w	800c1ca <_scanf_float+0x66>
 800c2f0:	6822      	ldr	r2, [r4, #0]
 800c2f2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c2f6:	6022      	str	r2, [r4, #0]
 800c2f8:	460d      	mov	r5, r1
 800c2fa:	468a      	mov	sl, r1
 800c2fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c300:	e7de      	b.n	800c2c0 <_scanf_float+0x15c>
 800c302:	6822      	ldr	r2, [r4, #0]
 800c304:	0610      	lsls	r0, r2, #24
 800c306:	f57f af60 	bpl.w	800c1ca <_scanf_float+0x66>
 800c30a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c30e:	6022      	str	r2, [r4, #0]
 800c310:	e7f4      	b.n	800c2fc <_scanf_float+0x198>
 800c312:	f1ba 0f00 	cmp.w	sl, #0
 800c316:	d10c      	bne.n	800c332 <_scanf_float+0x1ce>
 800c318:	b977      	cbnz	r7, 800c338 <_scanf_float+0x1d4>
 800c31a:	6822      	ldr	r2, [r4, #0]
 800c31c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c320:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c324:	d108      	bne.n	800c338 <_scanf_float+0x1d4>
 800c326:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c32a:	6022      	str	r2, [r4, #0]
 800c32c:	f04f 0a01 	mov.w	sl, #1
 800c330:	e7e4      	b.n	800c2fc <_scanf_float+0x198>
 800c332:	f1ba 0f02 	cmp.w	sl, #2
 800c336:	d050      	beq.n	800c3da <_scanf_float+0x276>
 800c338:	2d01      	cmp	r5, #1
 800c33a:	d002      	beq.n	800c342 <_scanf_float+0x1de>
 800c33c:	2d04      	cmp	r5, #4
 800c33e:	f47f af44 	bne.w	800c1ca <_scanf_float+0x66>
 800c342:	3501      	adds	r5, #1
 800c344:	b2ed      	uxtb	r5, r5
 800c346:	e7d9      	b.n	800c2fc <_scanf_float+0x198>
 800c348:	f1ba 0f01 	cmp.w	sl, #1
 800c34c:	f47f af3d 	bne.w	800c1ca <_scanf_float+0x66>
 800c350:	f04f 0a02 	mov.w	sl, #2
 800c354:	e7d2      	b.n	800c2fc <_scanf_float+0x198>
 800c356:	b975      	cbnz	r5, 800c376 <_scanf_float+0x212>
 800c358:	2f00      	cmp	r7, #0
 800c35a:	f47f af37 	bne.w	800c1cc <_scanf_float+0x68>
 800c35e:	6822      	ldr	r2, [r4, #0]
 800c360:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c364:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c368:	f040 8103 	bne.w	800c572 <_scanf_float+0x40e>
 800c36c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c370:	6022      	str	r2, [r4, #0]
 800c372:	2501      	movs	r5, #1
 800c374:	e7c2      	b.n	800c2fc <_scanf_float+0x198>
 800c376:	2d03      	cmp	r5, #3
 800c378:	d0e3      	beq.n	800c342 <_scanf_float+0x1de>
 800c37a:	2d05      	cmp	r5, #5
 800c37c:	e7df      	b.n	800c33e <_scanf_float+0x1da>
 800c37e:	2d02      	cmp	r5, #2
 800c380:	f47f af23 	bne.w	800c1ca <_scanf_float+0x66>
 800c384:	2503      	movs	r5, #3
 800c386:	e7b9      	b.n	800c2fc <_scanf_float+0x198>
 800c388:	2d06      	cmp	r5, #6
 800c38a:	f47f af1e 	bne.w	800c1ca <_scanf_float+0x66>
 800c38e:	2507      	movs	r5, #7
 800c390:	e7b4      	b.n	800c2fc <_scanf_float+0x198>
 800c392:	6822      	ldr	r2, [r4, #0]
 800c394:	0591      	lsls	r1, r2, #22
 800c396:	f57f af18 	bpl.w	800c1ca <_scanf_float+0x66>
 800c39a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c39e:	6022      	str	r2, [r4, #0]
 800c3a0:	9702      	str	r7, [sp, #8]
 800c3a2:	e7ab      	b.n	800c2fc <_scanf_float+0x198>
 800c3a4:	6822      	ldr	r2, [r4, #0]
 800c3a6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c3aa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c3ae:	d005      	beq.n	800c3bc <_scanf_float+0x258>
 800c3b0:	0550      	lsls	r0, r2, #21
 800c3b2:	f57f af0a 	bpl.w	800c1ca <_scanf_float+0x66>
 800c3b6:	2f00      	cmp	r7, #0
 800c3b8:	f000 80db 	beq.w	800c572 <_scanf_float+0x40e>
 800c3bc:	0591      	lsls	r1, r2, #22
 800c3be:	bf58      	it	pl
 800c3c0:	9902      	ldrpl	r1, [sp, #8]
 800c3c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c3c6:	bf58      	it	pl
 800c3c8:	1a79      	subpl	r1, r7, r1
 800c3ca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c3ce:	bf58      	it	pl
 800c3d0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c3d4:	6022      	str	r2, [r4, #0]
 800c3d6:	2700      	movs	r7, #0
 800c3d8:	e790      	b.n	800c2fc <_scanf_float+0x198>
 800c3da:	f04f 0a03 	mov.w	sl, #3
 800c3de:	e78d      	b.n	800c2fc <_scanf_float+0x198>
 800c3e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c3e4:	4649      	mov	r1, r9
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	4798      	blx	r3
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	f43f aedf 	beq.w	800c1ae <_scanf_float+0x4a>
 800c3f0:	e6eb      	b.n	800c1ca <_scanf_float+0x66>
 800c3f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3fa:	464a      	mov	r2, r9
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4798      	blx	r3
 800c400:	6923      	ldr	r3, [r4, #16]
 800c402:	3b01      	subs	r3, #1
 800c404:	6123      	str	r3, [r4, #16]
 800c406:	e6eb      	b.n	800c1e0 <_scanf_float+0x7c>
 800c408:	1e6b      	subs	r3, r5, #1
 800c40a:	2b06      	cmp	r3, #6
 800c40c:	d824      	bhi.n	800c458 <_scanf_float+0x2f4>
 800c40e:	2d02      	cmp	r5, #2
 800c410:	d836      	bhi.n	800c480 <_scanf_float+0x31c>
 800c412:	9b01      	ldr	r3, [sp, #4]
 800c414:	429e      	cmp	r6, r3
 800c416:	f67f aee7 	bls.w	800c1e8 <_scanf_float+0x84>
 800c41a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c41e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c422:	464a      	mov	r2, r9
 800c424:	4640      	mov	r0, r8
 800c426:	4798      	blx	r3
 800c428:	6923      	ldr	r3, [r4, #16]
 800c42a:	3b01      	subs	r3, #1
 800c42c:	6123      	str	r3, [r4, #16]
 800c42e:	e7f0      	b.n	800c412 <_scanf_float+0x2ae>
 800c430:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c434:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c438:	464a      	mov	r2, r9
 800c43a:	4640      	mov	r0, r8
 800c43c:	4798      	blx	r3
 800c43e:	6923      	ldr	r3, [r4, #16]
 800c440:	3b01      	subs	r3, #1
 800c442:	6123      	str	r3, [r4, #16]
 800c444:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c448:	fa5f fa8a 	uxtb.w	sl, sl
 800c44c:	f1ba 0f02 	cmp.w	sl, #2
 800c450:	d1ee      	bne.n	800c430 <_scanf_float+0x2cc>
 800c452:	3d03      	subs	r5, #3
 800c454:	b2ed      	uxtb	r5, r5
 800c456:	1b76      	subs	r6, r6, r5
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	05da      	lsls	r2, r3, #23
 800c45c:	d530      	bpl.n	800c4c0 <_scanf_float+0x35c>
 800c45e:	055b      	lsls	r3, r3, #21
 800c460:	d511      	bpl.n	800c486 <_scanf_float+0x322>
 800c462:	9b01      	ldr	r3, [sp, #4]
 800c464:	429e      	cmp	r6, r3
 800c466:	f67f aebf 	bls.w	800c1e8 <_scanf_float+0x84>
 800c46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c46e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c472:	464a      	mov	r2, r9
 800c474:	4640      	mov	r0, r8
 800c476:	4798      	blx	r3
 800c478:	6923      	ldr	r3, [r4, #16]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	6123      	str	r3, [r4, #16]
 800c47e:	e7f0      	b.n	800c462 <_scanf_float+0x2fe>
 800c480:	46aa      	mov	sl, r5
 800c482:	46b3      	mov	fp, r6
 800c484:	e7de      	b.n	800c444 <_scanf_float+0x2e0>
 800c486:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	2965      	cmp	r1, #101	@ 0x65
 800c48e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c492:	f106 35ff 	add.w	r5, r6, #4294967295
 800c496:	6123      	str	r3, [r4, #16]
 800c498:	d00c      	beq.n	800c4b4 <_scanf_float+0x350>
 800c49a:	2945      	cmp	r1, #69	@ 0x45
 800c49c:	d00a      	beq.n	800c4b4 <_scanf_float+0x350>
 800c49e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4a2:	464a      	mov	r2, r9
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	4798      	blx	r3
 800c4a8:	6923      	ldr	r3, [r4, #16]
 800c4aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	1eb5      	subs	r5, r6, #2
 800c4b2:	6123      	str	r3, [r4, #16]
 800c4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4b8:	464a      	mov	r2, r9
 800c4ba:	4640      	mov	r0, r8
 800c4bc:	4798      	blx	r3
 800c4be:	462e      	mov	r6, r5
 800c4c0:	6822      	ldr	r2, [r4, #0]
 800c4c2:	f012 0210 	ands.w	r2, r2, #16
 800c4c6:	d001      	beq.n	800c4cc <_scanf_float+0x368>
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	e68e      	b.n	800c1ea <_scanf_float+0x86>
 800c4cc:	7032      	strb	r2, [r6, #0]
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c4d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4d8:	d125      	bne.n	800c526 <_scanf_float+0x3c2>
 800c4da:	9b02      	ldr	r3, [sp, #8]
 800c4dc:	429f      	cmp	r7, r3
 800c4de:	d00a      	beq.n	800c4f6 <_scanf_float+0x392>
 800c4e0:	1bda      	subs	r2, r3, r7
 800c4e2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c4e6:	429e      	cmp	r6, r3
 800c4e8:	bf28      	it	cs
 800c4ea:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c4ee:	4922      	ldr	r1, [pc, #136]	@ (800c578 <_scanf_float+0x414>)
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f000 f907 	bl	800c704 <siprintf>
 800c4f6:	9901      	ldr	r1, [sp, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	f7ff f944 	bl	800b788 <_strtod_r>
 800c500:	9b03      	ldr	r3, [sp, #12]
 800c502:	6821      	ldr	r1, [r4, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f011 0f02 	tst.w	r1, #2
 800c50a:	ec57 6b10 	vmov	r6, r7, d0
 800c50e:	f103 0204 	add.w	r2, r3, #4
 800c512:	d015      	beq.n	800c540 <_scanf_float+0x3dc>
 800c514:	9903      	ldr	r1, [sp, #12]
 800c516:	600a      	str	r2, [r1, #0]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	e9c3 6700 	strd	r6, r7, [r3]
 800c51e:	68e3      	ldr	r3, [r4, #12]
 800c520:	3301      	adds	r3, #1
 800c522:	60e3      	str	r3, [r4, #12]
 800c524:	e7d0      	b.n	800c4c8 <_scanf_float+0x364>
 800c526:	9b04      	ldr	r3, [sp, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d0e4      	beq.n	800c4f6 <_scanf_float+0x392>
 800c52c:	9905      	ldr	r1, [sp, #20]
 800c52e:	230a      	movs	r3, #10
 800c530:	3101      	adds	r1, #1
 800c532:	4640      	mov	r0, r8
 800c534:	f7ff f9b4 	bl	800b8a0 <_strtol_r>
 800c538:	9b04      	ldr	r3, [sp, #16]
 800c53a:	9e05      	ldr	r6, [sp, #20]
 800c53c:	1ac2      	subs	r2, r0, r3
 800c53e:	e7d0      	b.n	800c4e2 <_scanf_float+0x37e>
 800c540:	f011 0f04 	tst.w	r1, #4
 800c544:	9903      	ldr	r1, [sp, #12]
 800c546:	600a      	str	r2, [r1, #0]
 800c548:	d1e6      	bne.n	800c518 <_scanf_float+0x3b4>
 800c54a:	681d      	ldr	r5, [r3, #0]
 800c54c:	4632      	mov	r2, r6
 800c54e:	463b      	mov	r3, r7
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	f7f4 fafa 	bl	8000b4c <__aeabi_dcmpun>
 800c558:	b128      	cbz	r0, 800c566 <_scanf_float+0x402>
 800c55a:	4808      	ldr	r0, [pc, #32]	@ (800c57c <_scanf_float+0x418>)
 800c55c:	f000 fac8 	bl	800caf0 <nanf>
 800c560:	ed85 0a00 	vstr	s0, [r5]
 800c564:	e7db      	b.n	800c51e <_scanf_float+0x3ba>
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f4 fb4d 	bl	8000c08 <__aeabi_d2f>
 800c56e:	6028      	str	r0, [r5, #0]
 800c570:	e7d5      	b.n	800c51e <_scanf_float+0x3ba>
 800c572:	2700      	movs	r7, #0
 800c574:	e62e      	b.n	800c1d4 <_scanf_float+0x70>
 800c576:	bf00      	nop
 800c578:	08011544 	.word	0x08011544
 800c57c:	080115fd 	.word	0x080115fd

0800c580 <std>:
 800c580:	2300      	movs	r3, #0
 800c582:	b510      	push	{r4, lr}
 800c584:	4604      	mov	r4, r0
 800c586:	e9c0 3300 	strd	r3, r3, [r0]
 800c58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c58e:	6083      	str	r3, [r0, #8]
 800c590:	8181      	strh	r1, [r0, #12]
 800c592:	6643      	str	r3, [r0, #100]	@ 0x64
 800c594:	81c2      	strh	r2, [r0, #14]
 800c596:	6183      	str	r3, [r0, #24]
 800c598:	4619      	mov	r1, r3
 800c59a:	2208      	movs	r2, #8
 800c59c:	305c      	adds	r0, #92	@ 0x5c
 800c59e:	f000 f944 	bl	800c82a <memset>
 800c5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d8 <std+0x58>)
 800c5a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5dc <std+0x5c>)
 800c5a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e0 <std+0x60>)
 800c5ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e4 <std+0x64>)
 800c5b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e8 <std+0x68>)
 800c5b4:	6224      	str	r4, [r4, #32]
 800c5b6:	429c      	cmp	r4, r3
 800c5b8:	d006      	beq.n	800c5c8 <std+0x48>
 800c5ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5be:	4294      	cmp	r4, r2
 800c5c0:	d002      	beq.n	800c5c8 <std+0x48>
 800c5c2:	33d0      	adds	r3, #208	@ 0xd0
 800c5c4:	429c      	cmp	r4, r3
 800c5c6:	d105      	bne.n	800c5d4 <std+0x54>
 800c5c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d0:	f000 ba74 	b.w	800cabc <__retarget_lock_init_recursive>
 800c5d4:	bd10      	pop	{r4, pc}
 800c5d6:	bf00      	nop
 800c5d8:	0800c7a1 	.word	0x0800c7a1
 800c5dc:	0800c7c7 	.word	0x0800c7c7
 800c5e0:	0800c7ff 	.word	0x0800c7ff
 800c5e4:	0800c823 	.word	0x0800c823
 800c5e8:	20005d20 	.word	0x20005d20

0800c5ec <stdio_exit_handler>:
 800c5ec:	4a02      	ldr	r2, [pc, #8]	@ (800c5f8 <stdio_exit_handler+0xc>)
 800c5ee:	4903      	ldr	r1, [pc, #12]	@ (800c5fc <stdio_exit_handler+0x10>)
 800c5f0:	4803      	ldr	r0, [pc, #12]	@ (800c600 <stdio_exit_handler+0x14>)
 800c5f2:	f000 b869 	b.w	800c6c8 <_fwalk_sglue>
 800c5f6:	bf00      	nop
 800c5f8:	200002b8 	.word	0x200002b8
 800c5fc:	0800f3e1 	.word	0x0800f3e1
 800c600:	20000434 	.word	0x20000434

0800c604 <cleanup_stdio>:
 800c604:	6841      	ldr	r1, [r0, #4]
 800c606:	4b0c      	ldr	r3, [pc, #48]	@ (800c638 <cleanup_stdio+0x34>)
 800c608:	4299      	cmp	r1, r3
 800c60a:	b510      	push	{r4, lr}
 800c60c:	4604      	mov	r4, r0
 800c60e:	d001      	beq.n	800c614 <cleanup_stdio+0x10>
 800c610:	f002 fee6 	bl	800f3e0 <_fflush_r>
 800c614:	68a1      	ldr	r1, [r4, #8]
 800c616:	4b09      	ldr	r3, [pc, #36]	@ (800c63c <cleanup_stdio+0x38>)
 800c618:	4299      	cmp	r1, r3
 800c61a:	d002      	beq.n	800c622 <cleanup_stdio+0x1e>
 800c61c:	4620      	mov	r0, r4
 800c61e:	f002 fedf 	bl	800f3e0 <_fflush_r>
 800c622:	68e1      	ldr	r1, [r4, #12]
 800c624:	4b06      	ldr	r3, [pc, #24]	@ (800c640 <cleanup_stdio+0x3c>)
 800c626:	4299      	cmp	r1, r3
 800c628:	d004      	beq.n	800c634 <cleanup_stdio+0x30>
 800c62a:	4620      	mov	r0, r4
 800c62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c630:	f002 bed6 	b.w	800f3e0 <_fflush_r>
 800c634:	bd10      	pop	{r4, pc}
 800c636:	bf00      	nop
 800c638:	20005d20 	.word	0x20005d20
 800c63c:	20005d88 	.word	0x20005d88
 800c640:	20005df0 	.word	0x20005df0

0800c644 <global_stdio_init.part.0>:
 800c644:	b510      	push	{r4, lr}
 800c646:	4b0b      	ldr	r3, [pc, #44]	@ (800c674 <global_stdio_init.part.0+0x30>)
 800c648:	4c0b      	ldr	r4, [pc, #44]	@ (800c678 <global_stdio_init.part.0+0x34>)
 800c64a:	4a0c      	ldr	r2, [pc, #48]	@ (800c67c <global_stdio_init.part.0+0x38>)
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	4620      	mov	r0, r4
 800c650:	2200      	movs	r2, #0
 800c652:	2104      	movs	r1, #4
 800c654:	f7ff ff94 	bl	800c580 <std>
 800c658:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c65c:	2201      	movs	r2, #1
 800c65e:	2109      	movs	r1, #9
 800c660:	f7ff ff8e 	bl	800c580 <std>
 800c664:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c668:	2202      	movs	r2, #2
 800c66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c66e:	2112      	movs	r1, #18
 800c670:	f7ff bf86 	b.w	800c580 <std>
 800c674:	20005e58 	.word	0x20005e58
 800c678:	20005d20 	.word	0x20005d20
 800c67c:	0800c5ed 	.word	0x0800c5ed

0800c680 <__sfp_lock_acquire>:
 800c680:	4801      	ldr	r0, [pc, #4]	@ (800c688 <__sfp_lock_acquire+0x8>)
 800c682:	f000 ba1c 	b.w	800cabe <__retarget_lock_acquire_recursive>
 800c686:	bf00      	nop
 800c688:	20005e61 	.word	0x20005e61

0800c68c <__sfp_lock_release>:
 800c68c:	4801      	ldr	r0, [pc, #4]	@ (800c694 <__sfp_lock_release+0x8>)
 800c68e:	f000 ba17 	b.w	800cac0 <__retarget_lock_release_recursive>
 800c692:	bf00      	nop
 800c694:	20005e61 	.word	0x20005e61

0800c698 <__sinit>:
 800c698:	b510      	push	{r4, lr}
 800c69a:	4604      	mov	r4, r0
 800c69c:	f7ff fff0 	bl	800c680 <__sfp_lock_acquire>
 800c6a0:	6a23      	ldr	r3, [r4, #32]
 800c6a2:	b11b      	cbz	r3, 800c6ac <__sinit+0x14>
 800c6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a8:	f7ff bff0 	b.w	800c68c <__sfp_lock_release>
 800c6ac:	4b04      	ldr	r3, [pc, #16]	@ (800c6c0 <__sinit+0x28>)
 800c6ae:	6223      	str	r3, [r4, #32]
 800c6b0:	4b04      	ldr	r3, [pc, #16]	@ (800c6c4 <__sinit+0x2c>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1f5      	bne.n	800c6a4 <__sinit+0xc>
 800c6b8:	f7ff ffc4 	bl	800c644 <global_stdio_init.part.0>
 800c6bc:	e7f2      	b.n	800c6a4 <__sinit+0xc>
 800c6be:	bf00      	nop
 800c6c0:	0800c605 	.word	0x0800c605
 800c6c4:	20005e58 	.word	0x20005e58

0800c6c8 <_fwalk_sglue>:
 800c6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6cc:	4607      	mov	r7, r0
 800c6ce:	4688      	mov	r8, r1
 800c6d0:	4614      	mov	r4, r2
 800c6d2:	2600      	movs	r6, #0
 800c6d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6d8:	f1b9 0901 	subs.w	r9, r9, #1
 800c6dc:	d505      	bpl.n	800c6ea <_fwalk_sglue+0x22>
 800c6de:	6824      	ldr	r4, [r4, #0]
 800c6e0:	2c00      	cmp	r4, #0
 800c6e2:	d1f7      	bne.n	800c6d4 <_fwalk_sglue+0xc>
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ea:	89ab      	ldrh	r3, [r5, #12]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d907      	bls.n	800c700 <_fwalk_sglue+0x38>
 800c6f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	d003      	beq.n	800c700 <_fwalk_sglue+0x38>
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4638      	mov	r0, r7
 800c6fc:	47c0      	blx	r8
 800c6fe:	4306      	orrs	r6, r0
 800c700:	3568      	adds	r5, #104	@ 0x68
 800c702:	e7e9      	b.n	800c6d8 <_fwalk_sglue+0x10>

0800c704 <siprintf>:
 800c704:	b40e      	push	{r1, r2, r3}
 800c706:	b510      	push	{r4, lr}
 800c708:	b09d      	sub	sp, #116	@ 0x74
 800c70a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c70c:	9002      	str	r0, [sp, #8]
 800c70e:	9006      	str	r0, [sp, #24]
 800c710:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c714:	480a      	ldr	r0, [pc, #40]	@ (800c740 <siprintf+0x3c>)
 800c716:	9107      	str	r1, [sp, #28]
 800c718:	9104      	str	r1, [sp, #16]
 800c71a:	490a      	ldr	r1, [pc, #40]	@ (800c744 <siprintf+0x40>)
 800c71c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c720:	9105      	str	r1, [sp, #20]
 800c722:	2400      	movs	r4, #0
 800c724:	a902      	add	r1, sp, #8
 800c726:	6800      	ldr	r0, [r0, #0]
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c72c:	f002 f9ba 	bl	800eaa4 <_svfiprintf_r>
 800c730:	9b02      	ldr	r3, [sp, #8]
 800c732:	701c      	strb	r4, [r3, #0]
 800c734:	b01d      	add	sp, #116	@ 0x74
 800c736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c73a:	b003      	add	sp, #12
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	20000430 	.word	0x20000430
 800c744:	ffff0208 	.word	0xffff0208

0800c748 <siscanf>:
 800c748:	b40e      	push	{r1, r2, r3}
 800c74a:	b570      	push	{r4, r5, r6, lr}
 800c74c:	b09d      	sub	sp, #116	@ 0x74
 800c74e:	ac21      	add	r4, sp, #132	@ 0x84
 800c750:	2500      	movs	r5, #0
 800c752:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c756:	f854 6b04 	ldr.w	r6, [r4], #4
 800c75a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c75e:	951b      	str	r5, [sp, #108]	@ 0x6c
 800c760:	9002      	str	r0, [sp, #8]
 800c762:	9006      	str	r0, [sp, #24]
 800c764:	f7f3 fd94 	bl	8000290 <strlen>
 800c768:	4b0b      	ldr	r3, [pc, #44]	@ (800c798 <siscanf+0x50>)
 800c76a:	9003      	str	r0, [sp, #12]
 800c76c:	9007      	str	r0, [sp, #28]
 800c76e:	480b      	ldr	r0, [pc, #44]	@ (800c79c <siscanf+0x54>)
 800c770:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c772:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c776:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c77a:	4632      	mov	r2, r6
 800c77c:	4623      	mov	r3, r4
 800c77e:	a902      	add	r1, sp, #8
 800c780:	6800      	ldr	r0, [r0, #0]
 800c782:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c784:	9514      	str	r5, [sp, #80]	@ 0x50
 800c786:	9401      	str	r4, [sp, #4]
 800c788:	f002 fae2 	bl	800ed50 <__ssvfiscanf_r>
 800c78c:	b01d      	add	sp, #116	@ 0x74
 800c78e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c792:	b003      	add	sp, #12
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	0800c7c3 	.word	0x0800c7c3
 800c79c:	20000430 	.word	0x20000430

0800c7a0 <__sread>:
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a8:	f000 f93a 	bl	800ca20 <_read_r>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	bfab      	itete	ge
 800c7b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c7b4:	181b      	addge	r3, r3, r0
 800c7b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7ba:	bfac      	ite	ge
 800c7bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7be:	81a3      	strhlt	r3, [r4, #12]
 800c7c0:	bd10      	pop	{r4, pc}

0800c7c2 <__seofread>:
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	4770      	bx	lr

0800c7c6 <__swrite>:
 800c7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ca:	461f      	mov	r7, r3
 800c7cc:	898b      	ldrh	r3, [r1, #12]
 800c7ce:	05db      	lsls	r3, r3, #23
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	4616      	mov	r6, r2
 800c7d6:	d505      	bpl.n	800c7e4 <__swrite+0x1e>
 800c7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7dc:	2302      	movs	r3, #2
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f000 f90c 	bl	800c9fc <_lseek_r>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7ee:	81a3      	strh	r3, [r4, #12]
 800c7f0:	4632      	mov	r2, r6
 800c7f2:	463b      	mov	r3, r7
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fa:	f000 b923 	b.w	800ca44 <_write_r>

0800c7fe <__sseek>:
 800c7fe:	b510      	push	{r4, lr}
 800c800:	460c      	mov	r4, r1
 800c802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c806:	f000 f8f9 	bl	800c9fc <_lseek_r>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	bf15      	itete	ne
 800c810:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c81a:	81a3      	strheq	r3, [r4, #12]
 800c81c:	bf18      	it	ne
 800c81e:	81a3      	strhne	r3, [r4, #12]
 800c820:	bd10      	pop	{r4, pc}

0800c822 <__sclose>:
 800c822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c826:	f000 b87b 	b.w	800c920 <_close_r>

0800c82a <memset>:
 800c82a:	4402      	add	r2, r0
 800c82c:	4603      	mov	r3, r0
 800c82e:	4293      	cmp	r3, r2
 800c830:	d100      	bne.n	800c834 <memset+0xa>
 800c832:	4770      	bx	lr
 800c834:	f803 1b01 	strb.w	r1, [r3], #1
 800c838:	e7f9      	b.n	800c82e <memset+0x4>

0800c83a <strncmp>:
 800c83a:	b510      	push	{r4, lr}
 800c83c:	b16a      	cbz	r2, 800c85a <strncmp+0x20>
 800c83e:	3901      	subs	r1, #1
 800c840:	1884      	adds	r4, r0, r2
 800c842:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c846:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d103      	bne.n	800c856 <strncmp+0x1c>
 800c84e:	42a0      	cmp	r0, r4
 800c850:	d001      	beq.n	800c856 <strncmp+0x1c>
 800c852:	2a00      	cmp	r2, #0
 800c854:	d1f5      	bne.n	800c842 <strncmp+0x8>
 800c856:	1ad0      	subs	r0, r2, r3
 800c858:	bd10      	pop	{r4, pc}
 800c85a:	4610      	mov	r0, r2
 800c85c:	e7fc      	b.n	800c858 <strncmp+0x1e>
	...

0800c860 <strtok>:
 800c860:	4b16      	ldr	r3, [pc, #88]	@ (800c8bc <strtok+0x5c>)
 800c862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c866:	681f      	ldr	r7, [r3, #0]
 800c868:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c86a:	4605      	mov	r5, r0
 800c86c:	460e      	mov	r6, r1
 800c86e:	b9ec      	cbnz	r4, 800c8ac <strtok+0x4c>
 800c870:	2050      	movs	r0, #80	@ 0x50
 800c872:	f001 fb3d 	bl	800def0 <malloc>
 800c876:	4602      	mov	r2, r0
 800c878:	6478      	str	r0, [r7, #68]	@ 0x44
 800c87a:	b920      	cbnz	r0, 800c886 <strtok+0x26>
 800c87c:	4b10      	ldr	r3, [pc, #64]	@ (800c8c0 <strtok+0x60>)
 800c87e:	4811      	ldr	r0, [pc, #68]	@ (800c8c4 <strtok+0x64>)
 800c880:	215b      	movs	r1, #91	@ 0x5b
 800c882:	f000 f93b 	bl	800cafc <__assert_func>
 800c886:	e9c0 4400 	strd	r4, r4, [r0]
 800c88a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c88e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c892:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c896:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c89a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c89e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c8a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c8a6:	6184      	str	r4, [r0, #24]
 800c8a8:	7704      	strb	r4, [r0, #28]
 800c8aa:	6244      	str	r4, [r0, #36]	@ 0x24
 800c8ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	f000 b806 	b.w	800c8c8 <__strtok_r>
 800c8bc:	20000430 	.word	0x20000430
 800c8c0:	08011549 	.word	0x08011549
 800c8c4:	08011560 	.word	0x08011560

0800c8c8 <__strtok_r>:
 800c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	b908      	cbnz	r0, 800c8d2 <__strtok_r+0xa>
 800c8ce:	6814      	ldr	r4, [r2, #0]
 800c8d0:	b144      	cbz	r4, 800c8e4 <__strtok_r+0x1c>
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c8d8:	460f      	mov	r7, r1
 800c8da:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c8de:	b91e      	cbnz	r6, 800c8e8 <__strtok_r+0x20>
 800c8e0:	b965      	cbnz	r5, 800c8fc <__strtok_r+0x34>
 800c8e2:	6015      	str	r5, [r2, #0]
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	e005      	b.n	800c8f4 <__strtok_r+0x2c>
 800c8e8:	42b5      	cmp	r5, r6
 800c8ea:	d1f6      	bne.n	800c8da <__strtok_r+0x12>
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1f0      	bne.n	800c8d2 <__strtok_r+0xa>
 800c8f0:	6014      	str	r4, [r2, #0]
 800c8f2:	7003      	strb	r3, [r0, #0]
 800c8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f6:	461c      	mov	r4, r3
 800c8f8:	e00c      	b.n	800c914 <__strtok_r+0x4c>
 800c8fa:	b91d      	cbnz	r5, 800c904 <__strtok_r+0x3c>
 800c8fc:	4627      	mov	r7, r4
 800c8fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c902:	460e      	mov	r6, r1
 800c904:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c908:	42ab      	cmp	r3, r5
 800c90a:	d1f6      	bne.n	800c8fa <__strtok_r+0x32>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d0f2      	beq.n	800c8f6 <__strtok_r+0x2e>
 800c910:	2300      	movs	r3, #0
 800c912:	703b      	strb	r3, [r7, #0]
 800c914:	6014      	str	r4, [r2, #0]
 800c916:	e7ed      	b.n	800c8f4 <__strtok_r+0x2c>

0800c918 <_localeconv_r>:
 800c918:	4800      	ldr	r0, [pc, #0]	@ (800c91c <_localeconv_r+0x4>)
 800c91a:	4770      	bx	lr
 800c91c:	200003b4 	.word	0x200003b4

0800c920 <_close_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4d06      	ldr	r5, [pc, #24]	@ (800c93c <_close_r+0x1c>)
 800c924:	2300      	movs	r3, #0
 800c926:	4604      	mov	r4, r0
 800c928:	4608      	mov	r0, r1
 800c92a:	602b      	str	r3, [r5, #0]
 800c92c:	f7f7 f922 	bl	8003b74 <_close>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d102      	bne.n	800c93a <_close_r+0x1a>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	b103      	cbz	r3, 800c93a <_close_r+0x1a>
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	20005e5c 	.word	0x20005e5c

0800c940 <_reclaim_reent>:
 800c940:	4b2d      	ldr	r3, [pc, #180]	@ (800c9f8 <_reclaim_reent+0xb8>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4283      	cmp	r3, r0
 800c946:	b570      	push	{r4, r5, r6, lr}
 800c948:	4604      	mov	r4, r0
 800c94a:	d053      	beq.n	800c9f4 <_reclaim_reent+0xb4>
 800c94c:	69c3      	ldr	r3, [r0, #28]
 800c94e:	b31b      	cbz	r3, 800c998 <_reclaim_reent+0x58>
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	b163      	cbz	r3, 800c96e <_reclaim_reent+0x2e>
 800c954:	2500      	movs	r5, #0
 800c956:	69e3      	ldr	r3, [r4, #28]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	5959      	ldr	r1, [r3, r5]
 800c95c:	b9b1      	cbnz	r1, 800c98c <_reclaim_reent+0x4c>
 800c95e:	3504      	adds	r5, #4
 800c960:	2d80      	cmp	r5, #128	@ 0x80
 800c962:	d1f8      	bne.n	800c956 <_reclaim_reent+0x16>
 800c964:	69e3      	ldr	r3, [r4, #28]
 800c966:	4620      	mov	r0, r4
 800c968:	68d9      	ldr	r1, [r3, #12]
 800c96a:	f000 ff3d 	bl	800d7e8 <_free_r>
 800c96e:	69e3      	ldr	r3, [r4, #28]
 800c970:	6819      	ldr	r1, [r3, #0]
 800c972:	b111      	cbz	r1, 800c97a <_reclaim_reent+0x3a>
 800c974:	4620      	mov	r0, r4
 800c976:	f000 ff37 	bl	800d7e8 <_free_r>
 800c97a:	69e3      	ldr	r3, [r4, #28]
 800c97c:	689d      	ldr	r5, [r3, #8]
 800c97e:	b15d      	cbz	r5, 800c998 <_reclaim_reent+0x58>
 800c980:	4629      	mov	r1, r5
 800c982:	4620      	mov	r0, r4
 800c984:	682d      	ldr	r5, [r5, #0]
 800c986:	f000 ff2f 	bl	800d7e8 <_free_r>
 800c98a:	e7f8      	b.n	800c97e <_reclaim_reent+0x3e>
 800c98c:	680e      	ldr	r6, [r1, #0]
 800c98e:	4620      	mov	r0, r4
 800c990:	f000 ff2a 	bl	800d7e8 <_free_r>
 800c994:	4631      	mov	r1, r6
 800c996:	e7e1      	b.n	800c95c <_reclaim_reent+0x1c>
 800c998:	6961      	ldr	r1, [r4, #20]
 800c99a:	b111      	cbz	r1, 800c9a2 <_reclaim_reent+0x62>
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 ff23 	bl	800d7e8 <_free_r>
 800c9a2:	69e1      	ldr	r1, [r4, #28]
 800c9a4:	b111      	cbz	r1, 800c9ac <_reclaim_reent+0x6c>
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f000 ff1e 	bl	800d7e8 <_free_r>
 800c9ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c9ae:	b111      	cbz	r1, 800c9b6 <_reclaim_reent+0x76>
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 ff19 	bl	800d7e8 <_free_r>
 800c9b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9b8:	b111      	cbz	r1, 800c9c0 <_reclaim_reent+0x80>
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 ff14 	bl	800d7e8 <_free_r>
 800c9c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c9c2:	b111      	cbz	r1, 800c9ca <_reclaim_reent+0x8a>
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f000 ff0f 	bl	800d7e8 <_free_r>
 800c9ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c9cc:	b111      	cbz	r1, 800c9d4 <_reclaim_reent+0x94>
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 ff0a 	bl	800d7e8 <_free_r>
 800c9d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c9d6:	b111      	cbz	r1, 800c9de <_reclaim_reent+0x9e>
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 ff05 	bl	800d7e8 <_free_r>
 800c9de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c9e0:	b111      	cbz	r1, 800c9e8 <_reclaim_reent+0xa8>
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f000 ff00 	bl	800d7e8 <_free_r>
 800c9e8:	6a23      	ldr	r3, [r4, #32]
 800c9ea:	b11b      	cbz	r3, 800c9f4 <_reclaim_reent+0xb4>
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9f2:	4718      	bx	r3
 800c9f4:	bd70      	pop	{r4, r5, r6, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20000430 	.word	0x20000430

0800c9fc <_lseek_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d07      	ldr	r5, [pc, #28]	@ (800ca1c <_lseek_r+0x20>)
 800ca00:	4604      	mov	r4, r0
 800ca02:	4608      	mov	r0, r1
 800ca04:	4611      	mov	r1, r2
 800ca06:	2200      	movs	r2, #0
 800ca08:	602a      	str	r2, [r5, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	f7f7 f8d9 	bl	8003bc2 <_lseek>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_lseek_r+0x1e>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_lseek_r+0x1e>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	20005e5c 	.word	0x20005e5c

0800ca20 <_read_r>:
 800ca20:	b538      	push	{r3, r4, r5, lr}
 800ca22:	4d07      	ldr	r5, [pc, #28]	@ (800ca40 <_read_r+0x20>)
 800ca24:	4604      	mov	r4, r0
 800ca26:	4608      	mov	r0, r1
 800ca28:	4611      	mov	r1, r2
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	602a      	str	r2, [r5, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	f7f7 f867 	bl	8003b02 <_read>
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	d102      	bne.n	800ca3e <_read_r+0x1e>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	b103      	cbz	r3, 800ca3e <_read_r+0x1e>
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	20005e5c 	.word	0x20005e5c

0800ca44 <_write_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	4d07      	ldr	r5, [pc, #28]	@ (800ca64 <_write_r+0x20>)
 800ca48:	4604      	mov	r4, r0
 800ca4a:	4608      	mov	r0, r1
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	2200      	movs	r2, #0
 800ca50:	602a      	str	r2, [r5, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	f7f7 f872 	bl	8003b3c <_write>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d102      	bne.n	800ca62 <_write_r+0x1e>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	b103      	cbz	r3, 800ca62 <_write_r+0x1e>
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	20005e5c 	.word	0x20005e5c

0800ca68 <__errno>:
 800ca68:	4b01      	ldr	r3, [pc, #4]	@ (800ca70 <__errno+0x8>)
 800ca6a:	6818      	ldr	r0, [r3, #0]
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	20000430 	.word	0x20000430

0800ca74 <__libc_init_array>:
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	4d0d      	ldr	r5, [pc, #52]	@ (800caac <__libc_init_array+0x38>)
 800ca78:	4c0d      	ldr	r4, [pc, #52]	@ (800cab0 <__libc_init_array+0x3c>)
 800ca7a:	1b64      	subs	r4, r4, r5
 800ca7c:	10a4      	asrs	r4, r4, #2
 800ca7e:	2600      	movs	r6, #0
 800ca80:	42a6      	cmp	r6, r4
 800ca82:	d109      	bne.n	800ca98 <__libc_init_array+0x24>
 800ca84:	4d0b      	ldr	r5, [pc, #44]	@ (800cab4 <__libc_init_array+0x40>)
 800ca86:	4c0c      	ldr	r4, [pc, #48]	@ (800cab8 <__libc_init_array+0x44>)
 800ca88:	f003 f8e2 	bl	800fc50 <_init>
 800ca8c:	1b64      	subs	r4, r4, r5
 800ca8e:	10a4      	asrs	r4, r4, #2
 800ca90:	2600      	movs	r6, #0
 800ca92:	42a6      	cmp	r6, r4
 800ca94:	d105      	bne.n	800caa2 <__libc_init_array+0x2e>
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
 800ca98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca9c:	4798      	blx	r3
 800ca9e:	3601      	adds	r6, #1
 800caa0:	e7ee      	b.n	800ca80 <__libc_init_array+0xc>
 800caa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800caa6:	4798      	blx	r3
 800caa8:	3601      	adds	r6, #1
 800caaa:	e7f2      	b.n	800ca92 <__libc_init_array+0x1e>
 800caac:	080119b8 	.word	0x080119b8
 800cab0:	080119b8 	.word	0x080119b8
 800cab4:	080119b8 	.word	0x080119b8
 800cab8:	080119bc 	.word	0x080119bc

0800cabc <__retarget_lock_init_recursive>:
 800cabc:	4770      	bx	lr

0800cabe <__retarget_lock_acquire_recursive>:
 800cabe:	4770      	bx	lr

0800cac0 <__retarget_lock_release_recursive>:
 800cac0:	4770      	bx	lr

0800cac2 <memcpy>:
 800cac2:	440a      	add	r2, r1
 800cac4:	4291      	cmp	r1, r2
 800cac6:	f100 33ff 	add.w	r3, r0, #4294967295
 800caca:	d100      	bne.n	800cace <memcpy+0xc>
 800cacc:	4770      	bx	lr
 800cace:	b510      	push	{r4, lr}
 800cad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cad8:	4291      	cmp	r1, r2
 800cada:	d1f9      	bne.n	800cad0 <memcpy+0xe>
 800cadc:	bd10      	pop	{r4, pc}
	...

0800cae0 <nan>:
 800cae0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cae8 <nan+0x8>
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	00000000 	.word	0x00000000
 800caec:	7ff80000 	.word	0x7ff80000

0800caf0 <nanf>:
 800caf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800caf8 <nanf+0x8>
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	7fc00000 	.word	0x7fc00000

0800cafc <__assert_func>:
 800cafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cafe:	4614      	mov	r4, r2
 800cb00:	461a      	mov	r2, r3
 800cb02:	4b09      	ldr	r3, [pc, #36]	@ (800cb28 <__assert_func+0x2c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4605      	mov	r5, r0
 800cb08:	68d8      	ldr	r0, [r3, #12]
 800cb0a:	b14c      	cbz	r4, 800cb20 <__assert_func+0x24>
 800cb0c:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <__assert_func+0x30>)
 800cb0e:	9100      	str	r1, [sp, #0]
 800cb10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb14:	4906      	ldr	r1, [pc, #24]	@ (800cb30 <__assert_func+0x34>)
 800cb16:	462b      	mov	r3, r5
 800cb18:	f002 fc8a 	bl	800f430 <fiprintf>
 800cb1c:	f002 fd38 	bl	800f590 <abort>
 800cb20:	4b04      	ldr	r3, [pc, #16]	@ (800cb34 <__assert_func+0x38>)
 800cb22:	461c      	mov	r4, r3
 800cb24:	e7f3      	b.n	800cb0e <__assert_func+0x12>
 800cb26:	bf00      	nop
 800cb28:	20000430 	.word	0x20000430
 800cb2c:	080115c2 	.word	0x080115c2
 800cb30:	080115cf 	.word	0x080115cf
 800cb34:	080115fd 	.word	0x080115fd

0800cb38 <quorem>:
 800cb38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	6903      	ldr	r3, [r0, #16]
 800cb3e:	690c      	ldr	r4, [r1, #16]
 800cb40:	42a3      	cmp	r3, r4
 800cb42:	4607      	mov	r7, r0
 800cb44:	db7e      	blt.n	800cc44 <quorem+0x10c>
 800cb46:	3c01      	subs	r4, #1
 800cb48:	f101 0814 	add.w	r8, r1, #20
 800cb4c:	00a3      	lsls	r3, r4, #2
 800cb4e:	f100 0514 	add.w	r5, r0, #20
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb58:	9301      	str	r3, [sp, #4]
 800cb5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb62:	3301      	adds	r3, #1
 800cb64:	429a      	cmp	r2, r3
 800cb66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb6a:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb6e:	d32e      	bcc.n	800cbce <quorem+0x96>
 800cb70:	f04f 0a00 	mov.w	sl, #0
 800cb74:	46c4      	mov	ip, r8
 800cb76:	46ae      	mov	lr, r5
 800cb78:	46d3      	mov	fp, sl
 800cb7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb7e:	b298      	uxth	r0, r3
 800cb80:	fb06 a000 	mla	r0, r6, r0, sl
 800cb84:	0c02      	lsrs	r2, r0, #16
 800cb86:	0c1b      	lsrs	r3, r3, #16
 800cb88:	fb06 2303 	mla	r3, r6, r3, r2
 800cb8c:	f8de 2000 	ldr.w	r2, [lr]
 800cb90:	b280      	uxth	r0, r0
 800cb92:	b292      	uxth	r2, r2
 800cb94:	1a12      	subs	r2, r2, r0
 800cb96:	445a      	add	r2, fp
 800cb98:	f8de 0000 	ldr.w	r0, [lr]
 800cb9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cba6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cbaa:	b292      	uxth	r2, r2
 800cbac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cbb0:	45e1      	cmp	r9, ip
 800cbb2:	f84e 2b04 	str.w	r2, [lr], #4
 800cbb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cbba:	d2de      	bcs.n	800cb7a <quorem+0x42>
 800cbbc:	9b00      	ldr	r3, [sp, #0]
 800cbbe:	58eb      	ldr	r3, [r5, r3]
 800cbc0:	b92b      	cbnz	r3, 800cbce <quorem+0x96>
 800cbc2:	9b01      	ldr	r3, [sp, #4]
 800cbc4:	3b04      	subs	r3, #4
 800cbc6:	429d      	cmp	r5, r3
 800cbc8:	461a      	mov	r2, r3
 800cbca:	d32f      	bcc.n	800cc2c <quorem+0xf4>
 800cbcc:	613c      	str	r4, [r7, #16]
 800cbce:	4638      	mov	r0, r7
 800cbd0:	f001 fd12 	bl	800e5f8 <__mcmp>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	db25      	blt.n	800cc24 <quorem+0xec>
 800cbd8:	4629      	mov	r1, r5
 800cbda:	2000      	movs	r0, #0
 800cbdc:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbe0:	f8d1 c000 	ldr.w	ip, [r1]
 800cbe4:	fa1f fe82 	uxth.w	lr, r2
 800cbe8:	fa1f f38c 	uxth.w	r3, ip
 800cbec:	eba3 030e 	sub.w	r3, r3, lr
 800cbf0:	4403      	add	r3, r0
 800cbf2:	0c12      	lsrs	r2, r2, #16
 800cbf4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cbf8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc02:	45c1      	cmp	r9, r8
 800cc04:	f841 3b04 	str.w	r3, [r1], #4
 800cc08:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc0c:	d2e6      	bcs.n	800cbdc <quorem+0xa4>
 800cc0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc16:	b922      	cbnz	r2, 800cc22 <quorem+0xea>
 800cc18:	3b04      	subs	r3, #4
 800cc1a:	429d      	cmp	r5, r3
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	d30b      	bcc.n	800cc38 <quorem+0x100>
 800cc20:	613c      	str	r4, [r7, #16]
 800cc22:	3601      	adds	r6, #1
 800cc24:	4630      	mov	r0, r6
 800cc26:	b003      	add	sp, #12
 800cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2c:	6812      	ldr	r2, [r2, #0]
 800cc2e:	3b04      	subs	r3, #4
 800cc30:	2a00      	cmp	r2, #0
 800cc32:	d1cb      	bne.n	800cbcc <quorem+0x94>
 800cc34:	3c01      	subs	r4, #1
 800cc36:	e7c6      	b.n	800cbc6 <quorem+0x8e>
 800cc38:	6812      	ldr	r2, [r2, #0]
 800cc3a:	3b04      	subs	r3, #4
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	d1ef      	bne.n	800cc20 <quorem+0xe8>
 800cc40:	3c01      	subs	r4, #1
 800cc42:	e7ea      	b.n	800cc1a <quorem+0xe2>
 800cc44:	2000      	movs	r0, #0
 800cc46:	e7ee      	b.n	800cc26 <quorem+0xee>

0800cc48 <_dtoa_r>:
 800cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4c:	69c7      	ldr	r7, [r0, #28]
 800cc4e:	b097      	sub	sp, #92	@ 0x5c
 800cc50:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cc54:	ec55 4b10 	vmov	r4, r5, d0
 800cc58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cc5a:	9107      	str	r1, [sp, #28]
 800cc5c:	4681      	mov	r9, r0
 800cc5e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cc60:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc62:	b97f      	cbnz	r7, 800cc84 <_dtoa_r+0x3c>
 800cc64:	2010      	movs	r0, #16
 800cc66:	f001 f943 	bl	800def0 <malloc>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	f8c9 001c 	str.w	r0, [r9, #28]
 800cc70:	b920      	cbnz	r0, 800cc7c <_dtoa_r+0x34>
 800cc72:	4ba9      	ldr	r3, [pc, #676]	@ (800cf18 <_dtoa_r+0x2d0>)
 800cc74:	21ef      	movs	r1, #239	@ 0xef
 800cc76:	48a9      	ldr	r0, [pc, #676]	@ (800cf1c <_dtoa_r+0x2d4>)
 800cc78:	f7ff ff40 	bl	800cafc <__assert_func>
 800cc7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cc80:	6007      	str	r7, [r0, #0]
 800cc82:	60c7      	str	r7, [r0, #12]
 800cc84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cc88:	6819      	ldr	r1, [r3, #0]
 800cc8a:	b159      	cbz	r1, 800cca4 <_dtoa_r+0x5c>
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	604a      	str	r2, [r1, #4]
 800cc90:	2301      	movs	r3, #1
 800cc92:	4093      	lsls	r3, r2
 800cc94:	608b      	str	r3, [r1, #8]
 800cc96:	4648      	mov	r0, r9
 800cc98:	f001 fa32 	bl	800e100 <_Bfree>
 800cc9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cca0:	2200      	movs	r2, #0
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	1e2b      	subs	r3, r5, #0
 800cca6:	bfb9      	ittee	lt
 800cca8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ccac:	9305      	strlt	r3, [sp, #20]
 800ccae:	2300      	movge	r3, #0
 800ccb0:	6033      	strge	r3, [r6, #0]
 800ccb2:	9f05      	ldr	r7, [sp, #20]
 800ccb4:	4b9a      	ldr	r3, [pc, #616]	@ (800cf20 <_dtoa_r+0x2d8>)
 800ccb6:	bfbc      	itt	lt
 800ccb8:	2201      	movlt	r2, #1
 800ccba:	6032      	strlt	r2, [r6, #0]
 800ccbc:	43bb      	bics	r3, r7
 800ccbe:	d112      	bne.n	800cce6 <_dtoa_r+0x9e>
 800ccc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ccc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cccc:	4323      	orrs	r3, r4
 800ccce:	f000 855a 	beq.w	800d786 <_dtoa_r+0xb3e>
 800ccd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ccd4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cf34 <_dtoa_r+0x2ec>
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 855c 	beq.w	800d796 <_dtoa_r+0xb4e>
 800ccde:	f10a 0303 	add.w	r3, sl, #3
 800cce2:	f000 bd56 	b.w	800d792 <_dtoa_r+0xb4a>
 800cce6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ccea:	2200      	movs	r2, #0
 800ccec:	ec51 0b17 	vmov	r0, r1, d7
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ccf6:	f7f3 fef7 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccfa:	4680      	mov	r8, r0
 800ccfc:	b158      	cbz	r0, 800cd16 <_dtoa_r+0xce>
 800ccfe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cd00:	2301      	movs	r3, #1
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd06:	b113      	cbz	r3, 800cd0e <_dtoa_r+0xc6>
 800cd08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cd0a:	4b86      	ldr	r3, [pc, #536]	@ (800cf24 <_dtoa_r+0x2dc>)
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cf38 <_dtoa_r+0x2f0>
 800cd12:	f000 bd40 	b.w	800d796 <_dtoa_r+0xb4e>
 800cd16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cd1a:	aa14      	add	r2, sp, #80	@ 0x50
 800cd1c:	a915      	add	r1, sp, #84	@ 0x54
 800cd1e:	4648      	mov	r0, r9
 800cd20:	f001 fd8a 	bl	800e838 <__d2b>
 800cd24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cd28:	9002      	str	r0, [sp, #8]
 800cd2a:	2e00      	cmp	r6, #0
 800cd2c:	d078      	beq.n	800ce20 <_dtoa_r+0x1d8>
 800cd2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cd34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cd3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd48:	4619      	mov	r1, r3
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	4b76      	ldr	r3, [pc, #472]	@ (800cf28 <_dtoa_r+0x2e0>)
 800cd4e:	f7f3 faab 	bl	80002a8 <__aeabi_dsub>
 800cd52:	a36b      	add	r3, pc, #428	@ (adr r3, 800cf00 <_dtoa_r+0x2b8>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	f7f3 fc5e 	bl	8000618 <__aeabi_dmul>
 800cd5c:	a36a      	add	r3, pc, #424	@ (adr r3, 800cf08 <_dtoa_r+0x2c0>)
 800cd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd62:	f7f3 faa3 	bl	80002ac <__adddf3>
 800cd66:	4604      	mov	r4, r0
 800cd68:	4630      	mov	r0, r6
 800cd6a:	460d      	mov	r5, r1
 800cd6c:	f7f3 fbea 	bl	8000544 <__aeabi_i2d>
 800cd70:	a367      	add	r3, pc, #412	@ (adr r3, 800cf10 <_dtoa_r+0x2c8>)
 800cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd76:	f7f3 fc4f 	bl	8000618 <__aeabi_dmul>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	4620      	mov	r0, r4
 800cd80:	4629      	mov	r1, r5
 800cd82:	f7f3 fa93 	bl	80002ac <__adddf3>
 800cd86:	4604      	mov	r4, r0
 800cd88:	460d      	mov	r5, r1
 800cd8a:	f7f3 fef5 	bl	8000b78 <__aeabi_d2iz>
 800cd8e:	2200      	movs	r2, #0
 800cd90:	4607      	mov	r7, r0
 800cd92:	2300      	movs	r3, #0
 800cd94:	4620      	mov	r0, r4
 800cd96:	4629      	mov	r1, r5
 800cd98:	f7f3 feb0 	bl	8000afc <__aeabi_dcmplt>
 800cd9c:	b140      	cbz	r0, 800cdb0 <_dtoa_r+0x168>
 800cd9e:	4638      	mov	r0, r7
 800cda0:	f7f3 fbd0 	bl	8000544 <__aeabi_i2d>
 800cda4:	4622      	mov	r2, r4
 800cda6:	462b      	mov	r3, r5
 800cda8:	f7f3 fe9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdac:	b900      	cbnz	r0, 800cdb0 <_dtoa_r+0x168>
 800cdae:	3f01      	subs	r7, #1
 800cdb0:	2f16      	cmp	r7, #22
 800cdb2:	d852      	bhi.n	800ce5a <_dtoa_r+0x212>
 800cdb4:	4b5d      	ldr	r3, [pc, #372]	@ (800cf2c <_dtoa_r+0x2e4>)
 800cdb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cdc2:	f7f3 fe9b 	bl	8000afc <__aeabi_dcmplt>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d049      	beq.n	800ce5e <_dtoa_r+0x216>
 800cdca:	3f01      	subs	r7, #1
 800cdcc:	2300      	movs	r3, #0
 800cdce:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cdd2:	1b9b      	subs	r3, r3, r6
 800cdd4:	1e5a      	subs	r2, r3, #1
 800cdd6:	bf45      	ittet	mi
 800cdd8:	f1c3 0301 	rsbmi	r3, r3, #1
 800cddc:	9300      	strmi	r3, [sp, #0]
 800cdde:	2300      	movpl	r3, #0
 800cde0:	2300      	movmi	r3, #0
 800cde2:	9206      	str	r2, [sp, #24]
 800cde4:	bf54      	ite	pl
 800cde6:	9300      	strpl	r3, [sp, #0]
 800cde8:	9306      	strmi	r3, [sp, #24]
 800cdea:	2f00      	cmp	r7, #0
 800cdec:	db39      	blt.n	800ce62 <_dtoa_r+0x21a>
 800cdee:	9b06      	ldr	r3, [sp, #24]
 800cdf0:	970d      	str	r7, [sp, #52]	@ 0x34
 800cdf2:	443b      	add	r3, r7
 800cdf4:	9306      	str	r3, [sp, #24]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9308      	str	r3, [sp, #32]
 800cdfa:	9b07      	ldr	r3, [sp, #28]
 800cdfc:	2b09      	cmp	r3, #9
 800cdfe:	d863      	bhi.n	800cec8 <_dtoa_r+0x280>
 800ce00:	2b05      	cmp	r3, #5
 800ce02:	bfc4      	itt	gt
 800ce04:	3b04      	subgt	r3, #4
 800ce06:	9307      	strgt	r3, [sp, #28]
 800ce08:	9b07      	ldr	r3, [sp, #28]
 800ce0a:	f1a3 0302 	sub.w	r3, r3, #2
 800ce0e:	bfcc      	ite	gt
 800ce10:	2400      	movgt	r4, #0
 800ce12:	2401      	movle	r4, #1
 800ce14:	2b03      	cmp	r3, #3
 800ce16:	d863      	bhi.n	800cee0 <_dtoa_r+0x298>
 800ce18:	e8df f003 	tbb	[pc, r3]
 800ce1c:	2b375452 	.word	0x2b375452
 800ce20:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ce24:	441e      	add	r6, r3
 800ce26:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce2a:	2b20      	cmp	r3, #32
 800ce2c:	bfc1      	itttt	gt
 800ce2e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce32:	409f      	lslgt	r7, r3
 800ce34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce38:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce3c:	bfd6      	itet	le
 800ce3e:	f1c3 0320 	rsble	r3, r3, #32
 800ce42:	ea47 0003 	orrgt.w	r0, r7, r3
 800ce46:	fa04 f003 	lslle.w	r0, r4, r3
 800ce4a:	f7f3 fb6b 	bl	8000524 <__aeabi_ui2d>
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce54:	3e01      	subs	r6, #1
 800ce56:	9212      	str	r2, [sp, #72]	@ 0x48
 800ce58:	e776      	b.n	800cd48 <_dtoa_r+0x100>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e7b7      	b.n	800cdce <_dtoa_r+0x186>
 800ce5e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ce60:	e7b6      	b.n	800cdd0 <_dtoa_r+0x188>
 800ce62:	9b00      	ldr	r3, [sp, #0]
 800ce64:	1bdb      	subs	r3, r3, r7
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	427b      	negs	r3, r7
 800ce6a:	9308      	str	r3, [sp, #32]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ce70:	e7c3      	b.n	800cdfa <_dtoa_r+0x1b2>
 800ce72:	2301      	movs	r3, #1
 800ce74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce78:	eb07 0b03 	add.w	fp, r7, r3
 800ce7c:	f10b 0301 	add.w	r3, fp, #1
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	9303      	str	r3, [sp, #12]
 800ce84:	bfb8      	it	lt
 800ce86:	2301      	movlt	r3, #1
 800ce88:	e006      	b.n	800ce98 <_dtoa_r+0x250>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	dd28      	ble.n	800cee6 <_dtoa_r+0x29e>
 800ce94:	469b      	mov	fp, r3
 800ce96:	9303      	str	r3, [sp, #12]
 800ce98:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	2204      	movs	r2, #4
 800cea0:	f102 0514 	add.w	r5, r2, #20
 800cea4:	429d      	cmp	r5, r3
 800cea6:	d926      	bls.n	800cef6 <_dtoa_r+0x2ae>
 800cea8:	6041      	str	r1, [r0, #4]
 800ceaa:	4648      	mov	r0, r9
 800ceac:	f001 f8e8 	bl	800e080 <_Balloc>
 800ceb0:	4682      	mov	sl, r0
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d142      	bne.n	800cf3c <_dtoa_r+0x2f4>
 800ceb6:	4b1e      	ldr	r3, [pc, #120]	@ (800cf30 <_dtoa_r+0x2e8>)
 800ceb8:	4602      	mov	r2, r0
 800ceba:	f240 11af 	movw	r1, #431	@ 0x1af
 800cebe:	e6da      	b.n	800cc76 <_dtoa_r+0x2e>
 800cec0:	2300      	movs	r3, #0
 800cec2:	e7e3      	b.n	800ce8c <_dtoa_r+0x244>
 800cec4:	2300      	movs	r3, #0
 800cec6:	e7d5      	b.n	800ce74 <_dtoa_r+0x22c>
 800cec8:	2401      	movs	r4, #1
 800ceca:	2300      	movs	r3, #0
 800cecc:	9307      	str	r3, [sp, #28]
 800cece:	9409      	str	r4, [sp, #36]	@ 0x24
 800ced0:	f04f 3bff 	mov.w	fp, #4294967295
 800ced4:	2200      	movs	r2, #0
 800ced6:	f8cd b00c 	str.w	fp, [sp, #12]
 800ceda:	2312      	movs	r3, #18
 800cedc:	920c      	str	r2, [sp, #48]	@ 0x30
 800cede:	e7db      	b.n	800ce98 <_dtoa_r+0x250>
 800cee0:	2301      	movs	r3, #1
 800cee2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cee4:	e7f4      	b.n	800ced0 <_dtoa_r+0x288>
 800cee6:	f04f 0b01 	mov.w	fp, #1
 800ceea:	f8cd b00c 	str.w	fp, [sp, #12]
 800ceee:	465b      	mov	r3, fp
 800cef0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cef4:	e7d0      	b.n	800ce98 <_dtoa_r+0x250>
 800cef6:	3101      	adds	r1, #1
 800cef8:	0052      	lsls	r2, r2, #1
 800cefa:	e7d1      	b.n	800cea0 <_dtoa_r+0x258>
 800cefc:	f3af 8000 	nop.w
 800cf00:	636f4361 	.word	0x636f4361
 800cf04:	3fd287a7 	.word	0x3fd287a7
 800cf08:	8b60c8b3 	.word	0x8b60c8b3
 800cf0c:	3fc68a28 	.word	0x3fc68a28
 800cf10:	509f79fb 	.word	0x509f79fb
 800cf14:	3fd34413 	.word	0x3fd34413
 800cf18:	08011549 	.word	0x08011549
 800cf1c:	0801160b 	.word	0x0801160b
 800cf20:	7ff00000 	.word	0x7ff00000
 800cf24:	08011755 	.word	0x08011755
 800cf28:	3ff80000 	.word	0x3ff80000
 800cf2c:	080118e8 	.word	0x080118e8
 800cf30:	08011663 	.word	0x08011663
 800cf34:	08011607 	.word	0x08011607
 800cf38:	08011754 	.word	0x08011754
 800cf3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf40:	6018      	str	r0, [r3, #0]
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	2b0e      	cmp	r3, #14
 800cf46:	f200 80a1 	bhi.w	800d08c <_dtoa_r+0x444>
 800cf4a:	2c00      	cmp	r4, #0
 800cf4c:	f000 809e 	beq.w	800d08c <_dtoa_r+0x444>
 800cf50:	2f00      	cmp	r7, #0
 800cf52:	dd33      	ble.n	800cfbc <_dtoa_r+0x374>
 800cf54:	4b9c      	ldr	r3, [pc, #624]	@ (800d1c8 <_dtoa_r+0x580>)
 800cf56:	f007 020f 	and.w	r2, r7, #15
 800cf5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf5e:	ed93 7b00 	vldr	d7, [r3]
 800cf62:	05f8      	lsls	r0, r7, #23
 800cf64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cf68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf6c:	d516      	bpl.n	800cf9c <_dtoa_r+0x354>
 800cf6e:	4b97      	ldr	r3, [pc, #604]	@ (800d1cc <_dtoa_r+0x584>)
 800cf70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cf74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf78:	f7f3 fc78 	bl	800086c <__aeabi_ddiv>
 800cf7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf80:	f004 040f 	and.w	r4, r4, #15
 800cf84:	2603      	movs	r6, #3
 800cf86:	4d91      	ldr	r5, [pc, #580]	@ (800d1cc <_dtoa_r+0x584>)
 800cf88:	b954      	cbnz	r4, 800cfa0 <_dtoa_r+0x358>
 800cf8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cf8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf92:	f7f3 fc6b 	bl	800086c <__aeabi_ddiv>
 800cf96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf9a:	e028      	b.n	800cfee <_dtoa_r+0x3a6>
 800cf9c:	2602      	movs	r6, #2
 800cf9e:	e7f2      	b.n	800cf86 <_dtoa_r+0x33e>
 800cfa0:	07e1      	lsls	r1, r4, #31
 800cfa2:	d508      	bpl.n	800cfb6 <_dtoa_r+0x36e>
 800cfa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cfa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfac:	f7f3 fb34 	bl	8000618 <__aeabi_dmul>
 800cfb0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cfb4:	3601      	adds	r6, #1
 800cfb6:	1064      	asrs	r4, r4, #1
 800cfb8:	3508      	adds	r5, #8
 800cfba:	e7e5      	b.n	800cf88 <_dtoa_r+0x340>
 800cfbc:	f000 80af 	beq.w	800d11e <_dtoa_r+0x4d6>
 800cfc0:	427c      	negs	r4, r7
 800cfc2:	4b81      	ldr	r3, [pc, #516]	@ (800d1c8 <_dtoa_r+0x580>)
 800cfc4:	4d81      	ldr	r5, [pc, #516]	@ (800d1cc <_dtoa_r+0x584>)
 800cfc6:	f004 020f 	and.w	r2, r4, #15
 800cfca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cfd6:	f7f3 fb1f 	bl	8000618 <__aeabi_dmul>
 800cfda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfde:	1124      	asrs	r4, r4, #4
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	2602      	movs	r6, #2
 800cfe4:	2c00      	cmp	r4, #0
 800cfe6:	f040 808f 	bne.w	800d108 <_dtoa_r+0x4c0>
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1d3      	bne.n	800cf96 <_dtoa_r+0x34e>
 800cfee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cff0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 8094 	beq.w	800d122 <_dtoa_r+0x4da>
 800cffa:	4b75      	ldr	r3, [pc, #468]	@ (800d1d0 <_dtoa_r+0x588>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	4620      	mov	r0, r4
 800d000:	4629      	mov	r1, r5
 800d002:	f7f3 fd7b 	bl	8000afc <__aeabi_dcmplt>
 800d006:	2800      	cmp	r0, #0
 800d008:	f000 808b 	beq.w	800d122 <_dtoa_r+0x4da>
 800d00c:	9b03      	ldr	r3, [sp, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 8087 	beq.w	800d122 <_dtoa_r+0x4da>
 800d014:	f1bb 0f00 	cmp.w	fp, #0
 800d018:	dd34      	ble.n	800d084 <_dtoa_r+0x43c>
 800d01a:	4620      	mov	r0, r4
 800d01c:	4b6d      	ldr	r3, [pc, #436]	@ (800d1d4 <_dtoa_r+0x58c>)
 800d01e:	2200      	movs	r2, #0
 800d020:	4629      	mov	r1, r5
 800d022:	f7f3 faf9 	bl	8000618 <__aeabi_dmul>
 800d026:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d02a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d02e:	3601      	adds	r6, #1
 800d030:	465c      	mov	r4, fp
 800d032:	4630      	mov	r0, r6
 800d034:	f7f3 fa86 	bl	8000544 <__aeabi_i2d>
 800d038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d03c:	f7f3 faec 	bl	8000618 <__aeabi_dmul>
 800d040:	4b65      	ldr	r3, [pc, #404]	@ (800d1d8 <_dtoa_r+0x590>)
 800d042:	2200      	movs	r2, #0
 800d044:	f7f3 f932 	bl	80002ac <__adddf3>
 800d048:	4605      	mov	r5, r0
 800d04a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d04e:	2c00      	cmp	r4, #0
 800d050:	d16a      	bne.n	800d128 <_dtoa_r+0x4e0>
 800d052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d056:	4b61      	ldr	r3, [pc, #388]	@ (800d1dc <_dtoa_r+0x594>)
 800d058:	2200      	movs	r2, #0
 800d05a:	f7f3 f925 	bl	80002a8 <__aeabi_dsub>
 800d05e:	4602      	mov	r2, r0
 800d060:	460b      	mov	r3, r1
 800d062:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d066:	462a      	mov	r2, r5
 800d068:	4633      	mov	r3, r6
 800d06a:	f7f3 fd65 	bl	8000b38 <__aeabi_dcmpgt>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f040 8298 	bne.w	800d5a4 <_dtoa_r+0x95c>
 800d074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d078:	462a      	mov	r2, r5
 800d07a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d07e:	f7f3 fd3d 	bl	8000afc <__aeabi_dcmplt>
 800d082:	bb38      	cbnz	r0, 800d0d4 <_dtoa_r+0x48c>
 800d084:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d088:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d08c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f2c0 8157 	blt.w	800d342 <_dtoa_r+0x6fa>
 800d094:	2f0e      	cmp	r7, #14
 800d096:	f300 8154 	bgt.w	800d342 <_dtoa_r+0x6fa>
 800d09a:	4b4b      	ldr	r3, [pc, #300]	@ (800d1c8 <_dtoa_r+0x580>)
 800d09c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0a0:	ed93 7b00 	vldr	d7, [r3]
 800d0a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	ed8d 7b00 	vstr	d7, [sp]
 800d0ac:	f280 80e5 	bge.w	800d27a <_dtoa_r+0x632>
 800d0b0:	9b03      	ldr	r3, [sp, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f300 80e1 	bgt.w	800d27a <_dtoa_r+0x632>
 800d0b8:	d10c      	bne.n	800d0d4 <_dtoa_r+0x48c>
 800d0ba:	4b48      	ldr	r3, [pc, #288]	@ (800d1dc <_dtoa_r+0x594>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	ec51 0b17 	vmov	r0, r1, d7
 800d0c2:	f7f3 faa9 	bl	8000618 <__aeabi_dmul>
 800d0c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0ca:	f7f3 fd2b 	bl	8000b24 <__aeabi_dcmpge>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f000 8266 	beq.w	800d5a0 <_dtoa_r+0x958>
 800d0d4:	2400      	movs	r4, #0
 800d0d6:	4625      	mov	r5, r4
 800d0d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0da:	4656      	mov	r6, sl
 800d0dc:	ea6f 0803 	mvn.w	r8, r3
 800d0e0:	2700      	movs	r7, #0
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4648      	mov	r0, r9
 800d0e6:	f001 f80b 	bl	800e100 <_Bfree>
 800d0ea:	2d00      	cmp	r5, #0
 800d0ec:	f000 80bd 	beq.w	800d26a <_dtoa_r+0x622>
 800d0f0:	b12f      	cbz	r7, 800d0fe <_dtoa_r+0x4b6>
 800d0f2:	42af      	cmp	r7, r5
 800d0f4:	d003      	beq.n	800d0fe <_dtoa_r+0x4b6>
 800d0f6:	4639      	mov	r1, r7
 800d0f8:	4648      	mov	r0, r9
 800d0fa:	f001 f801 	bl	800e100 <_Bfree>
 800d0fe:	4629      	mov	r1, r5
 800d100:	4648      	mov	r0, r9
 800d102:	f000 fffd 	bl	800e100 <_Bfree>
 800d106:	e0b0      	b.n	800d26a <_dtoa_r+0x622>
 800d108:	07e2      	lsls	r2, r4, #31
 800d10a:	d505      	bpl.n	800d118 <_dtoa_r+0x4d0>
 800d10c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d110:	f7f3 fa82 	bl	8000618 <__aeabi_dmul>
 800d114:	3601      	adds	r6, #1
 800d116:	2301      	movs	r3, #1
 800d118:	1064      	asrs	r4, r4, #1
 800d11a:	3508      	adds	r5, #8
 800d11c:	e762      	b.n	800cfe4 <_dtoa_r+0x39c>
 800d11e:	2602      	movs	r6, #2
 800d120:	e765      	b.n	800cfee <_dtoa_r+0x3a6>
 800d122:	9c03      	ldr	r4, [sp, #12]
 800d124:	46b8      	mov	r8, r7
 800d126:	e784      	b.n	800d032 <_dtoa_r+0x3ea>
 800d128:	4b27      	ldr	r3, [pc, #156]	@ (800d1c8 <_dtoa_r+0x580>)
 800d12a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d12c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d130:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d134:	4454      	add	r4, sl
 800d136:	2900      	cmp	r1, #0
 800d138:	d054      	beq.n	800d1e4 <_dtoa_r+0x59c>
 800d13a:	4929      	ldr	r1, [pc, #164]	@ (800d1e0 <_dtoa_r+0x598>)
 800d13c:	2000      	movs	r0, #0
 800d13e:	f7f3 fb95 	bl	800086c <__aeabi_ddiv>
 800d142:	4633      	mov	r3, r6
 800d144:	462a      	mov	r2, r5
 800d146:	f7f3 f8af 	bl	80002a8 <__aeabi_dsub>
 800d14a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d14e:	4656      	mov	r6, sl
 800d150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d154:	f7f3 fd10 	bl	8000b78 <__aeabi_d2iz>
 800d158:	4605      	mov	r5, r0
 800d15a:	f7f3 f9f3 	bl	8000544 <__aeabi_i2d>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d166:	f7f3 f89f 	bl	80002a8 <__aeabi_dsub>
 800d16a:	3530      	adds	r5, #48	@ 0x30
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d174:	f806 5b01 	strb.w	r5, [r6], #1
 800d178:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d17c:	f7f3 fcbe 	bl	8000afc <__aeabi_dcmplt>
 800d180:	2800      	cmp	r0, #0
 800d182:	d172      	bne.n	800d26a <_dtoa_r+0x622>
 800d184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d188:	4911      	ldr	r1, [pc, #68]	@ (800d1d0 <_dtoa_r+0x588>)
 800d18a:	2000      	movs	r0, #0
 800d18c:	f7f3 f88c 	bl	80002a8 <__aeabi_dsub>
 800d190:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d194:	f7f3 fcb2 	bl	8000afc <__aeabi_dcmplt>
 800d198:	2800      	cmp	r0, #0
 800d19a:	f040 80b4 	bne.w	800d306 <_dtoa_r+0x6be>
 800d19e:	42a6      	cmp	r6, r4
 800d1a0:	f43f af70 	beq.w	800d084 <_dtoa_r+0x43c>
 800d1a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d1d4 <_dtoa_r+0x58c>)
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f7f3 fa34 	bl	8000618 <__aeabi_dmul>
 800d1b0:	4b08      	ldr	r3, [pc, #32]	@ (800d1d4 <_dtoa_r+0x58c>)
 800d1b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1bc:	f7f3 fa2c 	bl	8000618 <__aeabi_dmul>
 800d1c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1c4:	e7c4      	b.n	800d150 <_dtoa_r+0x508>
 800d1c6:	bf00      	nop
 800d1c8:	080118e8 	.word	0x080118e8
 800d1cc:	080118c0 	.word	0x080118c0
 800d1d0:	3ff00000 	.word	0x3ff00000
 800d1d4:	40240000 	.word	0x40240000
 800d1d8:	401c0000 	.word	0x401c0000
 800d1dc:	40140000 	.word	0x40140000
 800d1e0:	3fe00000 	.word	0x3fe00000
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f7f3 fa16 	bl	8000618 <__aeabi_dmul>
 800d1ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d1f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d1f2:	4656      	mov	r6, sl
 800d1f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1f8:	f7f3 fcbe 	bl	8000b78 <__aeabi_d2iz>
 800d1fc:	4605      	mov	r5, r0
 800d1fe:	f7f3 f9a1 	bl	8000544 <__aeabi_i2d>
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d20a:	f7f3 f84d 	bl	80002a8 <__aeabi_dsub>
 800d20e:	3530      	adds	r5, #48	@ 0x30
 800d210:	f806 5b01 	strb.w	r5, [r6], #1
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	42a6      	cmp	r6, r4
 800d21a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d21e:	f04f 0200 	mov.w	r2, #0
 800d222:	d124      	bne.n	800d26e <_dtoa_r+0x626>
 800d224:	4baf      	ldr	r3, [pc, #700]	@ (800d4e4 <_dtoa_r+0x89c>)
 800d226:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d22a:	f7f3 f83f 	bl	80002ac <__adddf3>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d236:	f7f3 fc7f 	bl	8000b38 <__aeabi_dcmpgt>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d163      	bne.n	800d306 <_dtoa_r+0x6be>
 800d23e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d242:	49a8      	ldr	r1, [pc, #672]	@ (800d4e4 <_dtoa_r+0x89c>)
 800d244:	2000      	movs	r0, #0
 800d246:	f7f3 f82f 	bl	80002a8 <__aeabi_dsub>
 800d24a:	4602      	mov	r2, r0
 800d24c:	460b      	mov	r3, r1
 800d24e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d252:	f7f3 fc53 	bl	8000afc <__aeabi_dcmplt>
 800d256:	2800      	cmp	r0, #0
 800d258:	f43f af14 	beq.w	800d084 <_dtoa_r+0x43c>
 800d25c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d25e:	1e73      	subs	r3, r6, #1
 800d260:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d262:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d266:	2b30      	cmp	r3, #48	@ 0x30
 800d268:	d0f8      	beq.n	800d25c <_dtoa_r+0x614>
 800d26a:	4647      	mov	r7, r8
 800d26c:	e03b      	b.n	800d2e6 <_dtoa_r+0x69e>
 800d26e:	4b9e      	ldr	r3, [pc, #632]	@ (800d4e8 <_dtoa_r+0x8a0>)
 800d270:	f7f3 f9d2 	bl	8000618 <__aeabi_dmul>
 800d274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d278:	e7bc      	b.n	800d1f4 <_dtoa_r+0x5ac>
 800d27a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d27e:	4656      	mov	r6, sl
 800d280:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 faf0 	bl	800086c <__aeabi_ddiv>
 800d28c:	f7f3 fc74 	bl	8000b78 <__aeabi_d2iz>
 800d290:	4680      	mov	r8, r0
 800d292:	f7f3 f957 	bl	8000544 <__aeabi_i2d>
 800d296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d29a:	f7f3 f9bd 	bl	8000618 <__aeabi_dmul>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d2aa:	f7f2 fffd 	bl	80002a8 <__aeabi_dsub>
 800d2ae:	f806 4b01 	strb.w	r4, [r6], #1
 800d2b2:	9d03      	ldr	r5, [sp, #12]
 800d2b4:	eba6 040a 	sub.w	r4, r6, sl
 800d2b8:	42a5      	cmp	r5, r4
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	d133      	bne.n	800d328 <_dtoa_r+0x6e0>
 800d2c0:	f7f2 fff4 	bl	80002ac <__adddf3>
 800d2c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	f7f3 fc34 	bl	8000b38 <__aeabi_dcmpgt>
 800d2d0:	b9c0      	cbnz	r0, 800d304 <_dtoa_r+0x6bc>
 800d2d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7f3 fc05 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2de:	b110      	cbz	r0, 800d2e6 <_dtoa_r+0x69e>
 800d2e0:	f018 0f01 	tst.w	r8, #1
 800d2e4:	d10e      	bne.n	800d304 <_dtoa_r+0x6bc>
 800d2e6:	9902      	ldr	r1, [sp, #8]
 800d2e8:	4648      	mov	r0, r9
 800d2ea:	f000 ff09 	bl	800e100 <_Bfree>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	7033      	strb	r3, [r6, #0]
 800d2f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d2f4:	3701      	adds	r7, #1
 800d2f6:	601f      	str	r7, [r3, #0]
 800d2f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f000 824b 	beq.w	800d796 <_dtoa_r+0xb4e>
 800d300:	601e      	str	r6, [r3, #0]
 800d302:	e248      	b.n	800d796 <_dtoa_r+0xb4e>
 800d304:	46b8      	mov	r8, r7
 800d306:	4633      	mov	r3, r6
 800d308:	461e      	mov	r6, r3
 800d30a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d30e:	2a39      	cmp	r2, #57	@ 0x39
 800d310:	d106      	bne.n	800d320 <_dtoa_r+0x6d8>
 800d312:	459a      	cmp	sl, r3
 800d314:	d1f8      	bne.n	800d308 <_dtoa_r+0x6c0>
 800d316:	2230      	movs	r2, #48	@ 0x30
 800d318:	f108 0801 	add.w	r8, r8, #1
 800d31c:	f88a 2000 	strb.w	r2, [sl]
 800d320:	781a      	ldrb	r2, [r3, #0]
 800d322:	3201      	adds	r2, #1
 800d324:	701a      	strb	r2, [r3, #0]
 800d326:	e7a0      	b.n	800d26a <_dtoa_r+0x622>
 800d328:	4b6f      	ldr	r3, [pc, #444]	@ (800d4e8 <_dtoa_r+0x8a0>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	f7f3 f974 	bl	8000618 <__aeabi_dmul>
 800d330:	2200      	movs	r2, #0
 800d332:	2300      	movs	r3, #0
 800d334:	4604      	mov	r4, r0
 800d336:	460d      	mov	r5, r1
 800d338:	f7f3 fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d09f      	beq.n	800d280 <_dtoa_r+0x638>
 800d340:	e7d1      	b.n	800d2e6 <_dtoa_r+0x69e>
 800d342:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d344:	2a00      	cmp	r2, #0
 800d346:	f000 80ea 	beq.w	800d51e <_dtoa_r+0x8d6>
 800d34a:	9a07      	ldr	r2, [sp, #28]
 800d34c:	2a01      	cmp	r2, #1
 800d34e:	f300 80cd 	bgt.w	800d4ec <_dtoa_r+0x8a4>
 800d352:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d354:	2a00      	cmp	r2, #0
 800d356:	f000 80c1 	beq.w	800d4dc <_dtoa_r+0x894>
 800d35a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d35e:	9c08      	ldr	r4, [sp, #32]
 800d360:	9e00      	ldr	r6, [sp, #0]
 800d362:	9a00      	ldr	r2, [sp, #0]
 800d364:	441a      	add	r2, r3
 800d366:	9200      	str	r2, [sp, #0]
 800d368:	9a06      	ldr	r2, [sp, #24]
 800d36a:	2101      	movs	r1, #1
 800d36c:	441a      	add	r2, r3
 800d36e:	4648      	mov	r0, r9
 800d370:	9206      	str	r2, [sp, #24]
 800d372:	f000 ffc3 	bl	800e2fc <__i2b>
 800d376:	4605      	mov	r5, r0
 800d378:	b166      	cbz	r6, 800d394 <_dtoa_r+0x74c>
 800d37a:	9b06      	ldr	r3, [sp, #24]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	dd09      	ble.n	800d394 <_dtoa_r+0x74c>
 800d380:	42b3      	cmp	r3, r6
 800d382:	9a00      	ldr	r2, [sp, #0]
 800d384:	bfa8      	it	ge
 800d386:	4633      	movge	r3, r6
 800d388:	1ad2      	subs	r2, r2, r3
 800d38a:	9200      	str	r2, [sp, #0]
 800d38c:	9a06      	ldr	r2, [sp, #24]
 800d38e:	1af6      	subs	r6, r6, r3
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	9306      	str	r3, [sp, #24]
 800d394:	9b08      	ldr	r3, [sp, #32]
 800d396:	b30b      	cbz	r3, 800d3dc <_dtoa_r+0x794>
 800d398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 80c6 	beq.w	800d52c <_dtoa_r+0x8e4>
 800d3a0:	2c00      	cmp	r4, #0
 800d3a2:	f000 80c0 	beq.w	800d526 <_dtoa_r+0x8de>
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	4622      	mov	r2, r4
 800d3aa:	4648      	mov	r0, r9
 800d3ac:	f001 f85e 	bl	800e46c <__pow5mult>
 800d3b0:	9a02      	ldr	r2, [sp, #8]
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	4648      	mov	r0, r9
 800d3b8:	f000 ffb6 	bl	800e328 <__multiply>
 800d3bc:	9902      	ldr	r1, [sp, #8]
 800d3be:	4680      	mov	r8, r0
 800d3c0:	4648      	mov	r0, r9
 800d3c2:	f000 fe9d 	bl	800e100 <_Bfree>
 800d3c6:	9b08      	ldr	r3, [sp, #32]
 800d3c8:	1b1b      	subs	r3, r3, r4
 800d3ca:	9308      	str	r3, [sp, #32]
 800d3cc:	f000 80b1 	beq.w	800d532 <_dtoa_r+0x8ea>
 800d3d0:	9a08      	ldr	r2, [sp, #32]
 800d3d2:	4641      	mov	r1, r8
 800d3d4:	4648      	mov	r0, r9
 800d3d6:	f001 f849 	bl	800e46c <__pow5mult>
 800d3da:	9002      	str	r0, [sp, #8]
 800d3dc:	2101      	movs	r1, #1
 800d3de:	4648      	mov	r0, r9
 800d3e0:	f000 ff8c 	bl	800e2fc <__i2b>
 800d3e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f000 81d8 	beq.w	800d79e <_dtoa_r+0xb56>
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	4648      	mov	r0, r9
 800d3f4:	f001 f83a 	bl	800e46c <__pow5mult>
 800d3f8:	9b07      	ldr	r3, [sp, #28]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	f300 809f 	bgt.w	800d540 <_dtoa_r+0x8f8>
 800d402:	9b04      	ldr	r3, [sp, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	f040 8097 	bne.w	800d538 <_dtoa_r+0x8f0>
 800d40a:	9b05      	ldr	r3, [sp, #20]
 800d40c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d410:	2b00      	cmp	r3, #0
 800d412:	f040 8093 	bne.w	800d53c <_dtoa_r+0x8f4>
 800d416:	9b05      	ldr	r3, [sp, #20]
 800d418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d41c:	0d1b      	lsrs	r3, r3, #20
 800d41e:	051b      	lsls	r3, r3, #20
 800d420:	b133      	cbz	r3, 800d430 <_dtoa_r+0x7e8>
 800d422:	9b00      	ldr	r3, [sp, #0]
 800d424:	3301      	adds	r3, #1
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	9b06      	ldr	r3, [sp, #24]
 800d42a:	3301      	adds	r3, #1
 800d42c:	9306      	str	r3, [sp, #24]
 800d42e:	2301      	movs	r3, #1
 800d430:	9308      	str	r3, [sp, #32]
 800d432:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 81b8 	beq.w	800d7aa <_dtoa_r+0xb62>
 800d43a:	6923      	ldr	r3, [r4, #16]
 800d43c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d440:	6918      	ldr	r0, [r3, #16]
 800d442:	f000 ff0f 	bl	800e264 <__hi0bits>
 800d446:	f1c0 0020 	rsb	r0, r0, #32
 800d44a:	9b06      	ldr	r3, [sp, #24]
 800d44c:	4418      	add	r0, r3
 800d44e:	f010 001f 	ands.w	r0, r0, #31
 800d452:	f000 8082 	beq.w	800d55a <_dtoa_r+0x912>
 800d456:	f1c0 0320 	rsb	r3, r0, #32
 800d45a:	2b04      	cmp	r3, #4
 800d45c:	dd73      	ble.n	800d546 <_dtoa_r+0x8fe>
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	f1c0 001c 	rsb	r0, r0, #28
 800d464:	4403      	add	r3, r0
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	9b06      	ldr	r3, [sp, #24]
 800d46a:	4403      	add	r3, r0
 800d46c:	4406      	add	r6, r0
 800d46e:	9306      	str	r3, [sp, #24]
 800d470:	9b00      	ldr	r3, [sp, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	dd05      	ble.n	800d482 <_dtoa_r+0x83a>
 800d476:	9902      	ldr	r1, [sp, #8]
 800d478:	461a      	mov	r2, r3
 800d47a:	4648      	mov	r0, r9
 800d47c:	f001 f850 	bl	800e520 <__lshift>
 800d480:	9002      	str	r0, [sp, #8]
 800d482:	9b06      	ldr	r3, [sp, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	dd05      	ble.n	800d494 <_dtoa_r+0x84c>
 800d488:	4621      	mov	r1, r4
 800d48a:	461a      	mov	r2, r3
 800d48c:	4648      	mov	r0, r9
 800d48e:	f001 f847 	bl	800e520 <__lshift>
 800d492:	4604      	mov	r4, r0
 800d494:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d061      	beq.n	800d55e <_dtoa_r+0x916>
 800d49a:	9802      	ldr	r0, [sp, #8]
 800d49c:	4621      	mov	r1, r4
 800d49e:	f001 f8ab 	bl	800e5f8 <__mcmp>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	da5b      	bge.n	800d55e <_dtoa_r+0x916>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	9902      	ldr	r1, [sp, #8]
 800d4aa:	220a      	movs	r2, #10
 800d4ac:	4648      	mov	r0, r9
 800d4ae:	f000 fe49 	bl	800e144 <__multadd>
 800d4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b4:	9002      	str	r0, [sp, #8]
 800d4b6:	f107 38ff 	add.w	r8, r7, #4294967295
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f000 8177 	beq.w	800d7ae <_dtoa_r+0xb66>
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	220a      	movs	r2, #10
 800d4c6:	4648      	mov	r0, r9
 800d4c8:	f000 fe3c 	bl	800e144 <__multadd>
 800d4cc:	f1bb 0f00 	cmp.w	fp, #0
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	dc6f      	bgt.n	800d5b4 <_dtoa_r+0x96c>
 800d4d4:	9b07      	ldr	r3, [sp, #28]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	dc49      	bgt.n	800d56e <_dtoa_r+0x926>
 800d4da:	e06b      	b.n	800d5b4 <_dtoa_r+0x96c>
 800d4dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d4de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d4e2:	e73c      	b.n	800d35e <_dtoa_r+0x716>
 800d4e4:	3fe00000 	.word	0x3fe00000
 800d4e8:	40240000 	.word	0x40240000
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	1e5c      	subs	r4, r3, #1
 800d4f0:	9b08      	ldr	r3, [sp, #32]
 800d4f2:	42a3      	cmp	r3, r4
 800d4f4:	db09      	blt.n	800d50a <_dtoa_r+0x8c2>
 800d4f6:	1b1c      	subs	r4, r3, r4
 800d4f8:	9b03      	ldr	r3, [sp, #12]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f6bf af30 	bge.w	800d360 <_dtoa_r+0x718>
 800d500:	9b00      	ldr	r3, [sp, #0]
 800d502:	9a03      	ldr	r2, [sp, #12]
 800d504:	1a9e      	subs	r6, r3, r2
 800d506:	2300      	movs	r3, #0
 800d508:	e72b      	b.n	800d362 <_dtoa_r+0x71a>
 800d50a:	9b08      	ldr	r3, [sp, #32]
 800d50c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d50e:	9408      	str	r4, [sp, #32]
 800d510:	1ae3      	subs	r3, r4, r3
 800d512:	441a      	add	r2, r3
 800d514:	9e00      	ldr	r6, [sp, #0]
 800d516:	9b03      	ldr	r3, [sp, #12]
 800d518:	920d      	str	r2, [sp, #52]	@ 0x34
 800d51a:	2400      	movs	r4, #0
 800d51c:	e721      	b.n	800d362 <_dtoa_r+0x71a>
 800d51e:	9c08      	ldr	r4, [sp, #32]
 800d520:	9e00      	ldr	r6, [sp, #0]
 800d522:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d524:	e728      	b.n	800d378 <_dtoa_r+0x730>
 800d526:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d52a:	e751      	b.n	800d3d0 <_dtoa_r+0x788>
 800d52c:	9a08      	ldr	r2, [sp, #32]
 800d52e:	9902      	ldr	r1, [sp, #8]
 800d530:	e750      	b.n	800d3d4 <_dtoa_r+0x78c>
 800d532:	f8cd 8008 	str.w	r8, [sp, #8]
 800d536:	e751      	b.n	800d3dc <_dtoa_r+0x794>
 800d538:	2300      	movs	r3, #0
 800d53a:	e779      	b.n	800d430 <_dtoa_r+0x7e8>
 800d53c:	9b04      	ldr	r3, [sp, #16]
 800d53e:	e777      	b.n	800d430 <_dtoa_r+0x7e8>
 800d540:	2300      	movs	r3, #0
 800d542:	9308      	str	r3, [sp, #32]
 800d544:	e779      	b.n	800d43a <_dtoa_r+0x7f2>
 800d546:	d093      	beq.n	800d470 <_dtoa_r+0x828>
 800d548:	9a00      	ldr	r2, [sp, #0]
 800d54a:	331c      	adds	r3, #28
 800d54c:	441a      	add	r2, r3
 800d54e:	9200      	str	r2, [sp, #0]
 800d550:	9a06      	ldr	r2, [sp, #24]
 800d552:	441a      	add	r2, r3
 800d554:	441e      	add	r6, r3
 800d556:	9206      	str	r2, [sp, #24]
 800d558:	e78a      	b.n	800d470 <_dtoa_r+0x828>
 800d55a:	4603      	mov	r3, r0
 800d55c:	e7f4      	b.n	800d548 <_dtoa_r+0x900>
 800d55e:	9b03      	ldr	r3, [sp, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	46b8      	mov	r8, r7
 800d564:	dc20      	bgt.n	800d5a8 <_dtoa_r+0x960>
 800d566:	469b      	mov	fp, r3
 800d568:	9b07      	ldr	r3, [sp, #28]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	dd1e      	ble.n	800d5ac <_dtoa_r+0x964>
 800d56e:	f1bb 0f00 	cmp.w	fp, #0
 800d572:	f47f adb1 	bne.w	800d0d8 <_dtoa_r+0x490>
 800d576:	4621      	mov	r1, r4
 800d578:	465b      	mov	r3, fp
 800d57a:	2205      	movs	r2, #5
 800d57c:	4648      	mov	r0, r9
 800d57e:	f000 fde1 	bl	800e144 <__multadd>
 800d582:	4601      	mov	r1, r0
 800d584:	4604      	mov	r4, r0
 800d586:	9802      	ldr	r0, [sp, #8]
 800d588:	f001 f836 	bl	800e5f8 <__mcmp>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	f77f ada3 	ble.w	800d0d8 <_dtoa_r+0x490>
 800d592:	4656      	mov	r6, sl
 800d594:	2331      	movs	r3, #49	@ 0x31
 800d596:	f806 3b01 	strb.w	r3, [r6], #1
 800d59a:	f108 0801 	add.w	r8, r8, #1
 800d59e:	e59f      	b.n	800d0e0 <_dtoa_r+0x498>
 800d5a0:	9c03      	ldr	r4, [sp, #12]
 800d5a2:	46b8      	mov	r8, r7
 800d5a4:	4625      	mov	r5, r4
 800d5a6:	e7f4      	b.n	800d592 <_dtoa_r+0x94a>
 800d5a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d5ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 8101 	beq.w	800d7b6 <_dtoa_r+0xb6e>
 800d5b4:	2e00      	cmp	r6, #0
 800d5b6:	dd05      	ble.n	800d5c4 <_dtoa_r+0x97c>
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4632      	mov	r2, r6
 800d5bc:	4648      	mov	r0, r9
 800d5be:	f000 ffaf 	bl	800e520 <__lshift>
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	9b08      	ldr	r3, [sp, #32]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d05c      	beq.n	800d684 <_dtoa_r+0xa3c>
 800d5ca:	6869      	ldr	r1, [r5, #4]
 800d5cc:	4648      	mov	r0, r9
 800d5ce:	f000 fd57 	bl	800e080 <_Balloc>
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	b928      	cbnz	r0, 800d5e2 <_dtoa_r+0x99a>
 800d5d6:	4b82      	ldr	r3, [pc, #520]	@ (800d7e0 <_dtoa_r+0xb98>)
 800d5d8:	4602      	mov	r2, r0
 800d5da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5de:	f7ff bb4a 	b.w	800cc76 <_dtoa_r+0x2e>
 800d5e2:	692a      	ldr	r2, [r5, #16]
 800d5e4:	3202      	adds	r2, #2
 800d5e6:	0092      	lsls	r2, r2, #2
 800d5e8:	f105 010c 	add.w	r1, r5, #12
 800d5ec:	300c      	adds	r0, #12
 800d5ee:	f7ff fa68 	bl	800cac2 <memcpy>
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	4648      	mov	r0, r9
 800d5f8:	f000 ff92 	bl	800e520 <__lshift>
 800d5fc:	f10a 0301 	add.w	r3, sl, #1
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	eb0a 030b 	add.w	r3, sl, fp
 800d606:	9308      	str	r3, [sp, #32]
 800d608:	9b04      	ldr	r3, [sp, #16]
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	462f      	mov	r7, r5
 800d610:	9306      	str	r3, [sp, #24]
 800d612:	4605      	mov	r5, r0
 800d614:	9b00      	ldr	r3, [sp, #0]
 800d616:	9802      	ldr	r0, [sp, #8]
 800d618:	4621      	mov	r1, r4
 800d61a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d61e:	f7ff fa8b 	bl	800cb38 <quorem>
 800d622:	4603      	mov	r3, r0
 800d624:	3330      	adds	r3, #48	@ 0x30
 800d626:	9003      	str	r0, [sp, #12]
 800d628:	4639      	mov	r1, r7
 800d62a:	9802      	ldr	r0, [sp, #8]
 800d62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d62e:	f000 ffe3 	bl	800e5f8 <__mcmp>
 800d632:	462a      	mov	r2, r5
 800d634:	9004      	str	r0, [sp, #16]
 800d636:	4621      	mov	r1, r4
 800d638:	4648      	mov	r0, r9
 800d63a:	f000 fff9 	bl	800e630 <__mdiff>
 800d63e:	68c2      	ldr	r2, [r0, #12]
 800d640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d642:	4606      	mov	r6, r0
 800d644:	bb02      	cbnz	r2, 800d688 <_dtoa_r+0xa40>
 800d646:	4601      	mov	r1, r0
 800d648:	9802      	ldr	r0, [sp, #8]
 800d64a:	f000 ffd5 	bl	800e5f8 <__mcmp>
 800d64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d650:	4602      	mov	r2, r0
 800d652:	4631      	mov	r1, r6
 800d654:	4648      	mov	r0, r9
 800d656:	920c      	str	r2, [sp, #48]	@ 0x30
 800d658:	9309      	str	r3, [sp, #36]	@ 0x24
 800d65a:	f000 fd51 	bl	800e100 <_Bfree>
 800d65e:	9b07      	ldr	r3, [sp, #28]
 800d660:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d662:	9e00      	ldr	r6, [sp, #0]
 800d664:	ea42 0103 	orr.w	r1, r2, r3
 800d668:	9b06      	ldr	r3, [sp, #24]
 800d66a:	4319      	orrs	r1, r3
 800d66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d66e:	d10d      	bne.n	800d68c <_dtoa_r+0xa44>
 800d670:	2b39      	cmp	r3, #57	@ 0x39
 800d672:	d027      	beq.n	800d6c4 <_dtoa_r+0xa7c>
 800d674:	9a04      	ldr	r2, [sp, #16]
 800d676:	2a00      	cmp	r2, #0
 800d678:	dd01      	ble.n	800d67e <_dtoa_r+0xa36>
 800d67a:	9b03      	ldr	r3, [sp, #12]
 800d67c:	3331      	adds	r3, #49	@ 0x31
 800d67e:	f88b 3000 	strb.w	r3, [fp]
 800d682:	e52e      	b.n	800d0e2 <_dtoa_r+0x49a>
 800d684:	4628      	mov	r0, r5
 800d686:	e7b9      	b.n	800d5fc <_dtoa_r+0x9b4>
 800d688:	2201      	movs	r2, #1
 800d68a:	e7e2      	b.n	800d652 <_dtoa_r+0xa0a>
 800d68c:	9904      	ldr	r1, [sp, #16]
 800d68e:	2900      	cmp	r1, #0
 800d690:	db04      	blt.n	800d69c <_dtoa_r+0xa54>
 800d692:	9807      	ldr	r0, [sp, #28]
 800d694:	4301      	orrs	r1, r0
 800d696:	9806      	ldr	r0, [sp, #24]
 800d698:	4301      	orrs	r1, r0
 800d69a:	d120      	bne.n	800d6de <_dtoa_r+0xa96>
 800d69c:	2a00      	cmp	r2, #0
 800d69e:	ddee      	ble.n	800d67e <_dtoa_r+0xa36>
 800d6a0:	9902      	ldr	r1, [sp, #8]
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	4648      	mov	r0, r9
 800d6a8:	f000 ff3a 	bl	800e520 <__lshift>
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	9002      	str	r0, [sp, #8]
 800d6b0:	f000 ffa2 	bl	800e5f8 <__mcmp>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	9b00      	ldr	r3, [sp, #0]
 800d6b8:	dc02      	bgt.n	800d6c0 <_dtoa_r+0xa78>
 800d6ba:	d1e0      	bne.n	800d67e <_dtoa_r+0xa36>
 800d6bc:	07da      	lsls	r2, r3, #31
 800d6be:	d5de      	bpl.n	800d67e <_dtoa_r+0xa36>
 800d6c0:	2b39      	cmp	r3, #57	@ 0x39
 800d6c2:	d1da      	bne.n	800d67a <_dtoa_r+0xa32>
 800d6c4:	2339      	movs	r3, #57	@ 0x39
 800d6c6:	f88b 3000 	strb.w	r3, [fp]
 800d6ca:	4633      	mov	r3, r6
 800d6cc:	461e      	mov	r6, r3
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6d4:	2a39      	cmp	r2, #57	@ 0x39
 800d6d6:	d04e      	beq.n	800d776 <_dtoa_r+0xb2e>
 800d6d8:	3201      	adds	r2, #1
 800d6da:	701a      	strb	r2, [r3, #0]
 800d6dc:	e501      	b.n	800d0e2 <_dtoa_r+0x49a>
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	dd03      	ble.n	800d6ea <_dtoa_r+0xaa2>
 800d6e2:	2b39      	cmp	r3, #57	@ 0x39
 800d6e4:	d0ee      	beq.n	800d6c4 <_dtoa_r+0xa7c>
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	e7c9      	b.n	800d67e <_dtoa_r+0xa36>
 800d6ea:	9a00      	ldr	r2, [sp, #0]
 800d6ec:	9908      	ldr	r1, [sp, #32]
 800d6ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d6f2:	428a      	cmp	r2, r1
 800d6f4:	d028      	beq.n	800d748 <_dtoa_r+0xb00>
 800d6f6:	9902      	ldr	r1, [sp, #8]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	220a      	movs	r2, #10
 800d6fc:	4648      	mov	r0, r9
 800d6fe:	f000 fd21 	bl	800e144 <__multadd>
 800d702:	42af      	cmp	r7, r5
 800d704:	9002      	str	r0, [sp, #8]
 800d706:	f04f 0300 	mov.w	r3, #0
 800d70a:	f04f 020a 	mov.w	r2, #10
 800d70e:	4639      	mov	r1, r7
 800d710:	4648      	mov	r0, r9
 800d712:	d107      	bne.n	800d724 <_dtoa_r+0xadc>
 800d714:	f000 fd16 	bl	800e144 <__multadd>
 800d718:	4607      	mov	r7, r0
 800d71a:	4605      	mov	r5, r0
 800d71c:	9b00      	ldr	r3, [sp, #0]
 800d71e:	3301      	adds	r3, #1
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	e777      	b.n	800d614 <_dtoa_r+0x9cc>
 800d724:	f000 fd0e 	bl	800e144 <__multadd>
 800d728:	4629      	mov	r1, r5
 800d72a:	4607      	mov	r7, r0
 800d72c:	2300      	movs	r3, #0
 800d72e:	220a      	movs	r2, #10
 800d730:	4648      	mov	r0, r9
 800d732:	f000 fd07 	bl	800e144 <__multadd>
 800d736:	4605      	mov	r5, r0
 800d738:	e7f0      	b.n	800d71c <_dtoa_r+0xad4>
 800d73a:	f1bb 0f00 	cmp.w	fp, #0
 800d73e:	bfcc      	ite	gt
 800d740:	465e      	movgt	r6, fp
 800d742:	2601      	movle	r6, #1
 800d744:	4456      	add	r6, sl
 800d746:	2700      	movs	r7, #0
 800d748:	9902      	ldr	r1, [sp, #8]
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	2201      	movs	r2, #1
 800d74e:	4648      	mov	r0, r9
 800d750:	f000 fee6 	bl	800e520 <__lshift>
 800d754:	4621      	mov	r1, r4
 800d756:	9002      	str	r0, [sp, #8]
 800d758:	f000 ff4e 	bl	800e5f8 <__mcmp>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	dcb4      	bgt.n	800d6ca <_dtoa_r+0xa82>
 800d760:	d102      	bne.n	800d768 <_dtoa_r+0xb20>
 800d762:	9b00      	ldr	r3, [sp, #0]
 800d764:	07db      	lsls	r3, r3, #31
 800d766:	d4b0      	bmi.n	800d6ca <_dtoa_r+0xa82>
 800d768:	4633      	mov	r3, r6
 800d76a:	461e      	mov	r6, r3
 800d76c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d770:	2a30      	cmp	r2, #48	@ 0x30
 800d772:	d0fa      	beq.n	800d76a <_dtoa_r+0xb22>
 800d774:	e4b5      	b.n	800d0e2 <_dtoa_r+0x49a>
 800d776:	459a      	cmp	sl, r3
 800d778:	d1a8      	bne.n	800d6cc <_dtoa_r+0xa84>
 800d77a:	2331      	movs	r3, #49	@ 0x31
 800d77c:	f108 0801 	add.w	r8, r8, #1
 800d780:	f88a 3000 	strb.w	r3, [sl]
 800d784:	e4ad      	b.n	800d0e2 <_dtoa_r+0x49a>
 800d786:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d788:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d7e4 <_dtoa_r+0xb9c>
 800d78c:	b11b      	cbz	r3, 800d796 <_dtoa_r+0xb4e>
 800d78e:	f10a 0308 	add.w	r3, sl, #8
 800d792:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d794:	6013      	str	r3, [r2, #0]
 800d796:	4650      	mov	r0, sl
 800d798:	b017      	add	sp, #92	@ 0x5c
 800d79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79e:	9b07      	ldr	r3, [sp, #28]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	f77f ae2e 	ble.w	800d402 <_dtoa_r+0x7ba>
 800d7a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7a8:	9308      	str	r3, [sp, #32]
 800d7aa:	2001      	movs	r0, #1
 800d7ac:	e64d      	b.n	800d44a <_dtoa_r+0x802>
 800d7ae:	f1bb 0f00 	cmp.w	fp, #0
 800d7b2:	f77f aed9 	ble.w	800d568 <_dtoa_r+0x920>
 800d7b6:	4656      	mov	r6, sl
 800d7b8:	9802      	ldr	r0, [sp, #8]
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	f7ff f9bc 	bl	800cb38 <quorem>
 800d7c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d7c4:	f806 3b01 	strb.w	r3, [r6], #1
 800d7c8:	eba6 020a 	sub.w	r2, r6, sl
 800d7cc:	4593      	cmp	fp, r2
 800d7ce:	ddb4      	ble.n	800d73a <_dtoa_r+0xaf2>
 800d7d0:	9902      	ldr	r1, [sp, #8]
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	220a      	movs	r2, #10
 800d7d6:	4648      	mov	r0, r9
 800d7d8:	f000 fcb4 	bl	800e144 <__multadd>
 800d7dc:	9002      	str	r0, [sp, #8]
 800d7de:	e7eb      	b.n	800d7b8 <_dtoa_r+0xb70>
 800d7e0:	08011663 	.word	0x08011663
 800d7e4:	080115fe 	.word	0x080115fe

0800d7e8 <_free_r>:
 800d7e8:	b538      	push	{r3, r4, r5, lr}
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	d041      	beq.n	800d874 <_free_r+0x8c>
 800d7f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7f4:	1f0c      	subs	r4, r1, #4
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	bfb8      	it	lt
 800d7fa:	18e4      	addlt	r4, r4, r3
 800d7fc:	f000 fc34 	bl	800e068 <__malloc_lock>
 800d800:	4a1d      	ldr	r2, [pc, #116]	@ (800d878 <_free_r+0x90>)
 800d802:	6813      	ldr	r3, [r2, #0]
 800d804:	b933      	cbnz	r3, 800d814 <_free_r+0x2c>
 800d806:	6063      	str	r3, [r4, #4]
 800d808:	6014      	str	r4, [r2, #0]
 800d80a:	4628      	mov	r0, r5
 800d80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d810:	f000 bc30 	b.w	800e074 <__malloc_unlock>
 800d814:	42a3      	cmp	r3, r4
 800d816:	d908      	bls.n	800d82a <_free_r+0x42>
 800d818:	6820      	ldr	r0, [r4, #0]
 800d81a:	1821      	adds	r1, r4, r0
 800d81c:	428b      	cmp	r3, r1
 800d81e:	bf01      	itttt	eq
 800d820:	6819      	ldreq	r1, [r3, #0]
 800d822:	685b      	ldreq	r3, [r3, #4]
 800d824:	1809      	addeq	r1, r1, r0
 800d826:	6021      	streq	r1, [r4, #0]
 800d828:	e7ed      	b.n	800d806 <_free_r+0x1e>
 800d82a:	461a      	mov	r2, r3
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	b10b      	cbz	r3, 800d834 <_free_r+0x4c>
 800d830:	42a3      	cmp	r3, r4
 800d832:	d9fa      	bls.n	800d82a <_free_r+0x42>
 800d834:	6811      	ldr	r1, [r2, #0]
 800d836:	1850      	adds	r0, r2, r1
 800d838:	42a0      	cmp	r0, r4
 800d83a:	d10b      	bne.n	800d854 <_free_r+0x6c>
 800d83c:	6820      	ldr	r0, [r4, #0]
 800d83e:	4401      	add	r1, r0
 800d840:	1850      	adds	r0, r2, r1
 800d842:	4283      	cmp	r3, r0
 800d844:	6011      	str	r1, [r2, #0]
 800d846:	d1e0      	bne.n	800d80a <_free_r+0x22>
 800d848:	6818      	ldr	r0, [r3, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	6053      	str	r3, [r2, #4]
 800d84e:	4408      	add	r0, r1
 800d850:	6010      	str	r0, [r2, #0]
 800d852:	e7da      	b.n	800d80a <_free_r+0x22>
 800d854:	d902      	bls.n	800d85c <_free_r+0x74>
 800d856:	230c      	movs	r3, #12
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	e7d6      	b.n	800d80a <_free_r+0x22>
 800d85c:	6820      	ldr	r0, [r4, #0]
 800d85e:	1821      	adds	r1, r4, r0
 800d860:	428b      	cmp	r3, r1
 800d862:	bf04      	itt	eq
 800d864:	6819      	ldreq	r1, [r3, #0]
 800d866:	685b      	ldreq	r3, [r3, #4]
 800d868:	6063      	str	r3, [r4, #4]
 800d86a:	bf04      	itt	eq
 800d86c:	1809      	addeq	r1, r1, r0
 800d86e:	6021      	streq	r1, [r4, #0]
 800d870:	6054      	str	r4, [r2, #4]
 800d872:	e7ca      	b.n	800d80a <_free_r+0x22>
 800d874:	bd38      	pop	{r3, r4, r5, pc}
 800d876:	bf00      	nop
 800d878:	20005e68 	.word	0x20005e68

0800d87c <rshift>:
 800d87c:	6903      	ldr	r3, [r0, #16]
 800d87e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d886:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d88a:	f100 0414 	add.w	r4, r0, #20
 800d88e:	dd45      	ble.n	800d91c <rshift+0xa0>
 800d890:	f011 011f 	ands.w	r1, r1, #31
 800d894:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d898:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d89c:	d10c      	bne.n	800d8b8 <rshift+0x3c>
 800d89e:	f100 0710 	add.w	r7, r0, #16
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	42b1      	cmp	r1, r6
 800d8a6:	d334      	bcc.n	800d912 <rshift+0x96>
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	1eea      	subs	r2, r5, #3
 800d8ae:	4296      	cmp	r6, r2
 800d8b0:	bf38      	it	cc
 800d8b2:	2300      	movcc	r3, #0
 800d8b4:	4423      	add	r3, r4
 800d8b6:	e015      	b.n	800d8e4 <rshift+0x68>
 800d8b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d8bc:	f1c1 0820 	rsb	r8, r1, #32
 800d8c0:	40cf      	lsrs	r7, r1
 800d8c2:	f105 0e04 	add.w	lr, r5, #4
 800d8c6:	46a1      	mov	r9, r4
 800d8c8:	4576      	cmp	r6, lr
 800d8ca:	46f4      	mov	ip, lr
 800d8cc:	d815      	bhi.n	800d8fa <rshift+0x7e>
 800d8ce:	1a9a      	subs	r2, r3, r2
 800d8d0:	0092      	lsls	r2, r2, #2
 800d8d2:	3a04      	subs	r2, #4
 800d8d4:	3501      	adds	r5, #1
 800d8d6:	42ae      	cmp	r6, r5
 800d8d8:	bf38      	it	cc
 800d8da:	2200      	movcc	r2, #0
 800d8dc:	18a3      	adds	r3, r4, r2
 800d8de:	50a7      	str	r7, [r4, r2]
 800d8e0:	b107      	cbz	r7, 800d8e4 <rshift+0x68>
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	1b1a      	subs	r2, r3, r4
 800d8e6:	42a3      	cmp	r3, r4
 800d8e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d8ec:	bf08      	it	eq
 800d8ee:	2300      	moveq	r3, #0
 800d8f0:	6102      	str	r2, [r0, #16]
 800d8f2:	bf08      	it	eq
 800d8f4:	6143      	streq	r3, [r0, #20]
 800d8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8fa:	f8dc c000 	ldr.w	ip, [ip]
 800d8fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800d902:	ea4c 0707 	orr.w	r7, ip, r7
 800d906:	f849 7b04 	str.w	r7, [r9], #4
 800d90a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d90e:	40cf      	lsrs	r7, r1
 800d910:	e7da      	b.n	800d8c8 <rshift+0x4c>
 800d912:	f851 cb04 	ldr.w	ip, [r1], #4
 800d916:	f847 cf04 	str.w	ip, [r7, #4]!
 800d91a:	e7c3      	b.n	800d8a4 <rshift+0x28>
 800d91c:	4623      	mov	r3, r4
 800d91e:	e7e1      	b.n	800d8e4 <rshift+0x68>

0800d920 <__hexdig_fun>:
 800d920:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d924:	2b09      	cmp	r3, #9
 800d926:	d802      	bhi.n	800d92e <__hexdig_fun+0xe>
 800d928:	3820      	subs	r0, #32
 800d92a:	b2c0      	uxtb	r0, r0
 800d92c:	4770      	bx	lr
 800d92e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d932:	2b05      	cmp	r3, #5
 800d934:	d801      	bhi.n	800d93a <__hexdig_fun+0x1a>
 800d936:	3847      	subs	r0, #71	@ 0x47
 800d938:	e7f7      	b.n	800d92a <__hexdig_fun+0xa>
 800d93a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d93e:	2b05      	cmp	r3, #5
 800d940:	d801      	bhi.n	800d946 <__hexdig_fun+0x26>
 800d942:	3827      	subs	r0, #39	@ 0x27
 800d944:	e7f1      	b.n	800d92a <__hexdig_fun+0xa>
 800d946:	2000      	movs	r0, #0
 800d948:	4770      	bx	lr
	...

0800d94c <__gethex>:
 800d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	b085      	sub	sp, #20
 800d952:	468a      	mov	sl, r1
 800d954:	9302      	str	r3, [sp, #8]
 800d956:	680b      	ldr	r3, [r1, #0]
 800d958:	9001      	str	r0, [sp, #4]
 800d95a:	4690      	mov	r8, r2
 800d95c:	1c9c      	adds	r4, r3, #2
 800d95e:	46a1      	mov	r9, r4
 800d960:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d964:	2830      	cmp	r0, #48	@ 0x30
 800d966:	d0fa      	beq.n	800d95e <__gethex+0x12>
 800d968:	eba9 0303 	sub.w	r3, r9, r3
 800d96c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d970:	f7ff ffd6 	bl	800d920 <__hexdig_fun>
 800d974:	4605      	mov	r5, r0
 800d976:	2800      	cmp	r0, #0
 800d978:	d168      	bne.n	800da4c <__gethex+0x100>
 800d97a:	49a0      	ldr	r1, [pc, #640]	@ (800dbfc <__gethex+0x2b0>)
 800d97c:	2201      	movs	r2, #1
 800d97e:	4648      	mov	r0, r9
 800d980:	f7fe ff5b 	bl	800c83a <strncmp>
 800d984:	4607      	mov	r7, r0
 800d986:	2800      	cmp	r0, #0
 800d988:	d167      	bne.n	800da5a <__gethex+0x10e>
 800d98a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d98e:	4626      	mov	r6, r4
 800d990:	f7ff ffc6 	bl	800d920 <__hexdig_fun>
 800d994:	2800      	cmp	r0, #0
 800d996:	d062      	beq.n	800da5e <__gethex+0x112>
 800d998:	4623      	mov	r3, r4
 800d99a:	7818      	ldrb	r0, [r3, #0]
 800d99c:	2830      	cmp	r0, #48	@ 0x30
 800d99e:	4699      	mov	r9, r3
 800d9a0:	f103 0301 	add.w	r3, r3, #1
 800d9a4:	d0f9      	beq.n	800d99a <__gethex+0x4e>
 800d9a6:	f7ff ffbb 	bl	800d920 <__hexdig_fun>
 800d9aa:	fab0 f580 	clz	r5, r0
 800d9ae:	096d      	lsrs	r5, r5, #5
 800d9b0:	f04f 0b01 	mov.w	fp, #1
 800d9b4:	464a      	mov	r2, r9
 800d9b6:	4616      	mov	r6, r2
 800d9b8:	3201      	adds	r2, #1
 800d9ba:	7830      	ldrb	r0, [r6, #0]
 800d9bc:	f7ff ffb0 	bl	800d920 <__hexdig_fun>
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	d1f8      	bne.n	800d9b6 <__gethex+0x6a>
 800d9c4:	498d      	ldr	r1, [pc, #564]	@ (800dbfc <__gethex+0x2b0>)
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f7fe ff36 	bl	800c83a <strncmp>
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d13f      	bne.n	800da52 <__gethex+0x106>
 800d9d2:	b944      	cbnz	r4, 800d9e6 <__gethex+0x9a>
 800d9d4:	1c74      	adds	r4, r6, #1
 800d9d6:	4622      	mov	r2, r4
 800d9d8:	4616      	mov	r6, r2
 800d9da:	3201      	adds	r2, #1
 800d9dc:	7830      	ldrb	r0, [r6, #0]
 800d9de:	f7ff ff9f 	bl	800d920 <__hexdig_fun>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d1f8      	bne.n	800d9d8 <__gethex+0x8c>
 800d9e6:	1ba4      	subs	r4, r4, r6
 800d9e8:	00a7      	lsls	r7, r4, #2
 800d9ea:	7833      	ldrb	r3, [r6, #0]
 800d9ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d9f0:	2b50      	cmp	r3, #80	@ 0x50
 800d9f2:	d13e      	bne.n	800da72 <__gethex+0x126>
 800d9f4:	7873      	ldrb	r3, [r6, #1]
 800d9f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d9f8:	d033      	beq.n	800da62 <__gethex+0x116>
 800d9fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800d9fc:	d034      	beq.n	800da68 <__gethex+0x11c>
 800d9fe:	1c71      	adds	r1, r6, #1
 800da00:	2400      	movs	r4, #0
 800da02:	7808      	ldrb	r0, [r1, #0]
 800da04:	f7ff ff8c 	bl	800d920 <__hexdig_fun>
 800da08:	1e43      	subs	r3, r0, #1
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b18      	cmp	r3, #24
 800da0e:	d830      	bhi.n	800da72 <__gethex+0x126>
 800da10:	f1a0 0210 	sub.w	r2, r0, #16
 800da14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da18:	f7ff ff82 	bl	800d920 <__hexdig_fun>
 800da1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800da20:	fa5f fc8c 	uxtb.w	ip, ip
 800da24:	f1bc 0f18 	cmp.w	ip, #24
 800da28:	f04f 030a 	mov.w	r3, #10
 800da2c:	d91e      	bls.n	800da6c <__gethex+0x120>
 800da2e:	b104      	cbz	r4, 800da32 <__gethex+0xe6>
 800da30:	4252      	negs	r2, r2
 800da32:	4417      	add	r7, r2
 800da34:	f8ca 1000 	str.w	r1, [sl]
 800da38:	b1ed      	cbz	r5, 800da76 <__gethex+0x12a>
 800da3a:	f1bb 0f00 	cmp.w	fp, #0
 800da3e:	bf0c      	ite	eq
 800da40:	2506      	moveq	r5, #6
 800da42:	2500      	movne	r5, #0
 800da44:	4628      	mov	r0, r5
 800da46:	b005      	add	sp, #20
 800da48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4c:	2500      	movs	r5, #0
 800da4e:	462c      	mov	r4, r5
 800da50:	e7b0      	b.n	800d9b4 <__gethex+0x68>
 800da52:	2c00      	cmp	r4, #0
 800da54:	d1c7      	bne.n	800d9e6 <__gethex+0x9a>
 800da56:	4627      	mov	r7, r4
 800da58:	e7c7      	b.n	800d9ea <__gethex+0x9e>
 800da5a:	464e      	mov	r6, r9
 800da5c:	462f      	mov	r7, r5
 800da5e:	2501      	movs	r5, #1
 800da60:	e7c3      	b.n	800d9ea <__gethex+0x9e>
 800da62:	2400      	movs	r4, #0
 800da64:	1cb1      	adds	r1, r6, #2
 800da66:	e7cc      	b.n	800da02 <__gethex+0xb6>
 800da68:	2401      	movs	r4, #1
 800da6a:	e7fb      	b.n	800da64 <__gethex+0x118>
 800da6c:	fb03 0002 	mla	r0, r3, r2, r0
 800da70:	e7ce      	b.n	800da10 <__gethex+0xc4>
 800da72:	4631      	mov	r1, r6
 800da74:	e7de      	b.n	800da34 <__gethex+0xe8>
 800da76:	eba6 0309 	sub.w	r3, r6, r9
 800da7a:	3b01      	subs	r3, #1
 800da7c:	4629      	mov	r1, r5
 800da7e:	2b07      	cmp	r3, #7
 800da80:	dc0a      	bgt.n	800da98 <__gethex+0x14c>
 800da82:	9801      	ldr	r0, [sp, #4]
 800da84:	f000 fafc 	bl	800e080 <_Balloc>
 800da88:	4604      	mov	r4, r0
 800da8a:	b940      	cbnz	r0, 800da9e <__gethex+0x152>
 800da8c:	4b5c      	ldr	r3, [pc, #368]	@ (800dc00 <__gethex+0x2b4>)
 800da8e:	4602      	mov	r2, r0
 800da90:	21e4      	movs	r1, #228	@ 0xe4
 800da92:	485c      	ldr	r0, [pc, #368]	@ (800dc04 <__gethex+0x2b8>)
 800da94:	f7ff f832 	bl	800cafc <__assert_func>
 800da98:	3101      	adds	r1, #1
 800da9a:	105b      	asrs	r3, r3, #1
 800da9c:	e7ef      	b.n	800da7e <__gethex+0x132>
 800da9e:	f100 0a14 	add.w	sl, r0, #20
 800daa2:	2300      	movs	r3, #0
 800daa4:	4655      	mov	r5, sl
 800daa6:	469b      	mov	fp, r3
 800daa8:	45b1      	cmp	r9, r6
 800daaa:	d337      	bcc.n	800db1c <__gethex+0x1d0>
 800daac:	f845 bb04 	str.w	fp, [r5], #4
 800dab0:	eba5 050a 	sub.w	r5, r5, sl
 800dab4:	10ad      	asrs	r5, r5, #2
 800dab6:	6125      	str	r5, [r4, #16]
 800dab8:	4658      	mov	r0, fp
 800daba:	f000 fbd3 	bl	800e264 <__hi0bits>
 800dabe:	016d      	lsls	r5, r5, #5
 800dac0:	f8d8 6000 	ldr.w	r6, [r8]
 800dac4:	1a2d      	subs	r5, r5, r0
 800dac6:	42b5      	cmp	r5, r6
 800dac8:	dd54      	ble.n	800db74 <__gethex+0x228>
 800daca:	1bad      	subs	r5, r5, r6
 800dacc:	4629      	mov	r1, r5
 800dace:	4620      	mov	r0, r4
 800dad0:	f000 ff5f 	bl	800e992 <__any_on>
 800dad4:	4681      	mov	r9, r0
 800dad6:	b178      	cbz	r0, 800daf8 <__gethex+0x1ac>
 800dad8:	1e6b      	subs	r3, r5, #1
 800dada:	1159      	asrs	r1, r3, #5
 800dadc:	f003 021f 	and.w	r2, r3, #31
 800dae0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dae4:	f04f 0901 	mov.w	r9, #1
 800dae8:	fa09 f202 	lsl.w	r2, r9, r2
 800daec:	420a      	tst	r2, r1
 800daee:	d003      	beq.n	800daf8 <__gethex+0x1ac>
 800daf0:	454b      	cmp	r3, r9
 800daf2:	dc36      	bgt.n	800db62 <__gethex+0x216>
 800daf4:	f04f 0902 	mov.w	r9, #2
 800daf8:	4629      	mov	r1, r5
 800dafa:	4620      	mov	r0, r4
 800dafc:	f7ff febe 	bl	800d87c <rshift>
 800db00:	442f      	add	r7, r5
 800db02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db06:	42bb      	cmp	r3, r7
 800db08:	da42      	bge.n	800db90 <__gethex+0x244>
 800db0a:	9801      	ldr	r0, [sp, #4]
 800db0c:	4621      	mov	r1, r4
 800db0e:	f000 faf7 	bl	800e100 <_Bfree>
 800db12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db14:	2300      	movs	r3, #0
 800db16:	6013      	str	r3, [r2, #0]
 800db18:	25a3      	movs	r5, #163	@ 0xa3
 800db1a:	e793      	b.n	800da44 <__gethex+0xf8>
 800db1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800db20:	2a2e      	cmp	r2, #46	@ 0x2e
 800db22:	d012      	beq.n	800db4a <__gethex+0x1fe>
 800db24:	2b20      	cmp	r3, #32
 800db26:	d104      	bne.n	800db32 <__gethex+0x1e6>
 800db28:	f845 bb04 	str.w	fp, [r5], #4
 800db2c:	f04f 0b00 	mov.w	fp, #0
 800db30:	465b      	mov	r3, fp
 800db32:	7830      	ldrb	r0, [r6, #0]
 800db34:	9303      	str	r3, [sp, #12]
 800db36:	f7ff fef3 	bl	800d920 <__hexdig_fun>
 800db3a:	9b03      	ldr	r3, [sp, #12]
 800db3c:	f000 000f 	and.w	r0, r0, #15
 800db40:	4098      	lsls	r0, r3
 800db42:	ea4b 0b00 	orr.w	fp, fp, r0
 800db46:	3304      	adds	r3, #4
 800db48:	e7ae      	b.n	800daa8 <__gethex+0x15c>
 800db4a:	45b1      	cmp	r9, r6
 800db4c:	d8ea      	bhi.n	800db24 <__gethex+0x1d8>
 800db4e:	492b      	ldr	r1, [pc, #172]	@ (800dbfc <__gethex+0x2b0>)
 800db50:	9303      	str	r3, [sp, #12]
 800db52:	2201      	movs	r2, #1
 800db54:	4630      	mov	r0, r6
 800db56:	f7fe fe70 	bl	800c83a <strncmp>
 800db5a:	9b03      	ldr	r3, [sp, #12]
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d1e1      	bne.n	800db24 <__gethex+0x1d8>
 800db60:	e7a2      	b.n	800daa8 <__gethex+0x15c>
 800db62:	1ea9      	subs	r1, r5, #2
 800db64:	4620      	mov	r0, r4
 800db66:	f000 ff14 	bl	800e992 <__any_on>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d0c2      	beq.n	800daf4 <__gethex+0x1a8>
 800db6e:	f04f 0903 	mov.w	r9, #3
 800db72:	e7c1      	b.n	800daf8 <__gethex+0x1ac>
 800db74:	da09      	bge.n	800db8a <__gethex+0x23e>
 800db76:	1b75      	subs	r5, r6, r5
 800db78:	4621      	mov	r1, r4
 800db7a:	9801      	ldr	r0, [sp, #4]
 800db7c:	462a      	mov	r2, r5
 800db7e:	f000 fccf 	bl	800e520 <__lshift>
 800db82:	1b7f      	subs	r7, r7, r5
 800db84:	4604      	mov	r4, r0
 800db86:	f100 0a14 	add.w	sl, r0, #20
 800db8a:	f04f 0900 	mov.w	r9, #0
 800db8e:	e7b8      	b.n	800db02 <__gethex+0x1b6>
 800db90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db94:	42bd      	cmp	r5, r7
 800db96:	dd6f      	ble.n	800dc78 <__gethex+0x32c>
 800db98:	1bed      	subs	r5, r5, r7
 800db9a:	42ae      	cmp	r6, r5
 800db9c:	dc34      	bgt.n	800dc08 <__gethex+0x2bc>
 800db9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d022      	beq.n	800dbec <__gethex+0x2a0>
 800dba6:	2b03      	cmp	r3, #3
 800dba8:	d024      	beq.n	800dbf4 <__gethex+0x2a8>
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d115      	bne.n	800dbda <__gethex+0x28e>
 800dbae:	42ae      	cmp	r6, r5
 800dbb0:	d113      	bne.n	800dbda <__gethex+0x28e>
 800dbb2:	2e01      	cmp	r6, #1
 800dbb4:	d10b      	bne.n	800dbce <__gethex+0x282>
 800dbb6:	9a02      	ldr	r2, [sp, #8]
 800dbb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbbc:	6013      	str	r3, [r2, #0]
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	6123      	str	r3, [r4, #16]
 800dbc2:	f8ca 3000 	str.w	r3, [sl]
 800dbc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbc8:	2562      	movs	r5, #98	@ 0x62
 800dbca:	601c      	str	r4, [r3, #0]
 800dbcc:	e73a      	b.n	800da44 <__gethex+0xf8>
 800dbce:	1e71      	subs	r1, r6, #1
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f000 fede 	bl	800e992 <__any_on>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d1ed      	bne.n	800dbb6 <__gethex+0x26a>
 800dbda:	9801      	ldr	r0, [sp, #4]
 800dbdc:	4621      	mov	r1, r4
 800dbde:	f000 fa8f 	bl	800e100 <_Bfree>
 800dbe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	6013      	str	r3, [r2, #0]
 800dbe8:	2550      	movs	r5, #80	@ 0x50
 800dbea:	e72b      	b.n	800da44 <__gethex+0xf8>
 800dbec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1f3      	bne.n	800dbda <__gethex+0x28e>
 800dbf2:	e7e0      	b.n	800dbb6 <__gethex+0x26a>
 800dbf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1dd      	bne.n	800dbb6 <__gethex+0x26a>
 800dbfa:	e7ee      	b.n	800dbda <__gethex+0x28e>
 800dbfc:	08011510 	.word	0x08011510
 800dc00:	08011663 	.word	0x08011663
 800dc04:	08011674 	.word	0x08011674
 800dc08:	1e6f      	subs	r7, r5, #1
 800dc0a:	f1b9 0f00 	cmp.w	r9, #0
 800dc0e:	d130      	bne.n	800dc72 <__gethex+0x326>
 800dc10:	b127      	cbz	r7, 800dc1c <__gethex+0x2d0>
 800dc12:	4639      	mov	r1, r7
 800dc14:	4620      	mov	r0, r4
 800dc16:	f000 febc 	bl	800e992 <__any_on>
 800dc1a:	4681      	mov	r9, r0
 800dc1c:	117a      	asrs	r2, r7, #5
 800dc1e:	2301      	movs	r3, #1
 800dc20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dc24:	f007 071f 	and.w	r7, r7, #31
 800dc28:	40bb      	lsls	r3, r7
 800dc2a:	4213      	tst	r3, r2
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	4620      	mov	r0, r4
 800dc30:	bf18      	it	ne
 800dc32:	f049 0902 	orrne.w	r9, r9, #2
 800dc36:	f7ff fe21 	bl	800d87c <rshift>
 800dc3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dc3e:	1b76      	subs	r6, r6, r5
 800dc40:	2502      	movs	r5, #2
 800dc42:	f1b9 0f00 	cmp.w	r9, #0
 800dc46:	d047      	beq.n	800dcd8 <__gethex+0x38c>
 800dc48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d015      	beq.n	800dc7c <__gethex+0x330>
 800dc50:	2b03      	cmp	r3, #3
 800dc52:	d017      	beq.n	800dc84 <__gethex+0x338>
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d109      	bne.n	800dc6c <__gethex+0x320>
 800dc58:	f019 0f02 	tst.w	r9, #2
 800dc5c:	d006      	beq.n	800dc6c <__gethex+0x320>
 800dc5e:	f8da 3000 	ldr.w	r3, [sl]
 800dc62:	ea49 0903 	orr.w	r9, r9, r3
 800dc66:	f019 0f01 	tst.w	r9, #1
 800dc6a:	d10e      	bne.n	800dc8a <__gethex+0x33e>
 800dc6c:	f045 0510 	orr.w	r5, r5, #16
 800dc70:	e032      	b.n	800dcd8 <__gethex+0x38c>
 800dc72:	f04f 0901 	mov.w	r9, #1
 800dc76:	e7d1      	b.n	800dc1c <__gethex+0x2d0>
 800dc78:	2501      	movs	r5, #1
 800dc7a:	e7e2      	b.n	800dc42 <__gethex+0x2f6>
 800dc7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc7e:	f1c3 0301 	rsb	r3, r3, #1
 800dc82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0f0      	beq.n	800dc6c <__gethex+0x320>
 800dc8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc8e:	f104 0314 	add.w	r3, r4, #20
 800dc92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc9a:	f04f 0c00 	mov.w	ip, #0
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dca4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dca8:	d01b      	beq.n	800dce2 <__gethex+0x396>
 800dcaa:	3201      	adds	r2, #1
 800dcac:	6002      	str	r2, [r0, #0]
 800dcae:	2d02      	cmp	r5, #2
 800dcb0:	f104 0314 	add.w	r3, r4, #20
 800dcb4:	d13c      	bne.n	800dd30 <__gethex+0x3e4>
 800dcb6:	f8d8 2000 	ldr.w	r2, [r8]
 800dcba:	3a01      	subs	r2, #1
 800dcbc:	42b2      	cmp	r2, r6
 800dcbe:	d109      	bne.n	800dcd4 <__gethex+0x388>
 800dcc0:	1171      	asrs	r1, r6, #5
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcc8:	f006 061f 	and.w	r6, r6, #31
 800dccc:	fa02 f606 	lsl.w	r6, r2, r6
 800dcd0:	421e      	tst	r6, r3
 800dcd2:	d13a      	bne.n	800dd4a <__gethex+0x3fe>
 800dcd4:	f045 0520 	orr.w	r5, r5, #32
 800dcd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcda:	601c      	str	r4, [r3, #0]
 800dcdc:	9b02      	ldr	r3, [sp, #8]
 800dcde:	601f      	str	r7, [r3, #0]
 800dce0:	e6b0      	b.n	800da44 <__gethex+0xf8>
 800dce2:	4299      	cmp	r1, r3
 800dce4:	f843 cc04 	str.w	ip, [r3, #-4]
 800dce8:	d8d9      	bhi.n	800dc9e <__gethex+0x352>
 800dcea:	68a3      	ldr	r3, [r4, #8]
 800dcec:	459b      	cmp	fp, r3
 800dcee:	db17      	blt.n	800dd20 <__gethex+0x3d4>
 800dcf0:	6861      	ldr	r1, [r4, #4]
 800dcf2:	9801      	ldr	r0, [sp, #4]
 800dcf4:	3101      	adds	r1, #1
 800dcf6:	f000 f9c3 	bl	800e080 <_Balloc>
 800dcfa:	4681      	mov	r9, r0
 800dcfc:	b918      	cbnz	r0, 800dd06 <__gethex+0x3ba>
 800dcfe:	4b1a      	ldr	r3, [pc, #104]	@ (800dd68 <__gethex+0x41c>)
 800dd00:	4602      	mov	r2, r0
 800dd02:	2184      	movs	r1, #132	@ 0x84
 800dd04:	e6c5      	b.n	800da92 <__gethex+0x146>
 800dd06:	6922      	ldr	r2, [r4, #16]
 800dd08:	3202      	adds	r2, #2
 800dd0a:	f104 010c 	add.w	r1, r4, #12
 800dd0e:	0092      	lsls	r2, r2, #2
 800dd10:	300c      	adds	r0, #12
 800dd12:	f7fe fed6 	bl	800cac2 <memcpy>
 800dd16:	4621      	mov	r1, r4
 800dd18:	9801      	ldr	r0, [sp, #4]
 800dd1a:	f000 f9f1 	bl	800e100 <_Bfree>
 800dd1e:	464c      	mov	r4, r9
 800dd20:	6923      	ldr	r3, [r4, #16]
 800dd22:	1c5a      	adds	r2, r3, #1
 800dd24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd28:	6122      	str	r2, [r4, #16]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	615a      	str	r2, [r3, #20]
 800dd2e:	e7be      	b.n	800dcae <__gethex+0x362>
 800dd30:	6922      	ldr	r2, [r4, #16]
 800dd32:	455a      	cmp	r2, fp
 800dd34:	dd0b      	ble.n	800dd4e <__gethex+0x402>
 800dd36:	2101      	movs	r1, #1
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f7ff fd9f 	bl	800d87c <rshift>
 800dd3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd42:	3701      	adds	r7, #1
 800dd44:	42bb      	cmp	r3, r7
 800dd46:	f6ff aee0 	blt.w	800db0a <__gethex+0x1be>
 800dd4a:	2501      	movs	r5, #1
 800dd4c:	e7c2      	b.n	800dcd4 <__gethex+0x388>
 800dd4e:	f016 061f 	ands.w	r6, r6, #31
 800dd52:	d0fa      	beq.n	800dd4a <__gethex+0x3fe>
 800dd54:	4453      	add	r3, sl
 800dd56:	f1c6 0620 	rsb	r6, r6, #32
 800dd5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dd5e:	f000 fa81 	bl	800e264 <__hi0bits>
 800dd62:	42b0      	cmp	r0, r6
 800dd64:	dbe7      	blt.n	800dd36 <__gethex+0x3ea>
 800dd66:	e7f0      	b.n	800dd4a <__gethex+0x3fe>
 800dd68:	08011663 	.word	0x08011663

0800dd6c <L_shift>:
 800dd6c:	f1c2 0208 	rsb	r2, r2, #8
 800dd70:	0092      	lsls	r2, r2, #2
 800dd72:	b570      	push	{r4, r5, r6, lr}
 800dd74:	f1c2 0620 	rsb	r6, r2, #32
 800dd78:	6843      	ldr	r3, [r0, #4]
 800dd7a:	6804      	ldr	r4, [r0, #0]
 800dd7c:	fa03 f506 	lsl.w	r5, r3, r6
 800dd80:	432c      	orrs	r4, r5
 800dd82:	40d3      	lsrs	r3, r2
 800dd84:	6004      	str	r4, [r0, #0]
 800dd86:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd8a:	4288      	cmp	r0, r1
 800dd8c:	d3f4      	bcc.n	800dd78 <L_shift+0xc>
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}

0800dd90 <__match>:
 800dd90:	b530      	push	{r4, r5, lr}
 800dd92:	6803      	ldr	r3, [r0, #0]
 800dd94:	3301      	adds	r3, #1
 800dd96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd9a:	b914      	cbnz	r4, 800dda2 <__match+0x12>
 800dd9c:	6003      	str	r3, [r0, #0]
 800dd9e:	2001      	movs	r0, #1
 800dda0:	bd30      	pop	{r4, r5, pc}
 800dda2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dda6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ddaa:	2d19      	cmp	r5, #25
 800ddac:	bf98      	it	ls
 800ddae:	3220      	addls	r2, #32
 800ddb0:	42a2      	cmp	r2, r4
 800ddb2:	d0f0      	beq.n	800dd96 <__match+0x6>
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e7f3      	b.n	800dda0 <__match+0x10>

0800ddb8 <__hexnan>:
 800ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	680b      	ldr	r3, [r1, #0]
 800ddbe:	6801      	ldr	r1, [r0, #0]
 800ddc0:	115e      	asrs	r6, r3, #5
 800ddc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ddc6:	f013 031f 	ands.w	r3, r3, #31
 800ddca:	b087      	sub	sp, #28
 800ddcc:	bf18      	it	ne
 800ddce:	3604      	addne	r6, #4
 800ddd0:	2500      	movs	r5, #0
 800ddd2:	1f37      	subs	r7, r6, #4
 800ddd4:	4682      	mov	sl, r0
 800ddd6:	4690      	mov	r8, r2
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	f846 5c04 	str.w	r5, [r6, #-4]
 800ddde:	46b9      	mov	r9, r7
 800dde0:	463c      	mov	r4, r7
 800dde2:	9502      	str	r5, [sp, #8]
 800dde4:	46ab      	mov	fp, r5
 800dde6:	784a      	ldrb	r2, [r1, #1]
 800dde8:	1c4b      	adds	r3, r1, #1
 800ddea:	9303      	str	r3, [sp, #12]
 800ddec:	b342      	cbz	r2, 800de40 <__hexnan+0x88>
 800ddee:	4610      	mov	r0, r2
 800ddf0:	9105      	str	r1, [sp, #20]
 800ddf2:	9204      	str	r2, [sp, #16]
 800ddf4:	f7ff fd94 	bl	800d920 <__hexdig_fun>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	d151      	bne.n	800dea0 <__hexnan+0xe8>
 800ddfc:	9a04      	ldr	r2, [sp, #16]
 800ddfe:	9905      	ldr	r1, [sp, #20]
 800de00:	2a20      	cmp	r2, #32
 800de02:	d818      	bhi.n	800de36 <__hexnan+0x7e>
 800de04:	9b02      	ldr	r3, [sp, #8]
 800de06:	459b      	cmp	fp, r3
 800de08:	dd13      	ble.n	800de32 <__hexnan+0x7a>
 800de0a:	454c      	cmp	r4, r9
 800de0c:	d206      	bcs.n	800de1c <__hexnan+0x64>
 800de0e:	2d07      	cmp	r5, #7
 800de10:	dc04      	bgt.n	800de1c <__hexnan+0x64>
 800de12:	462a      	mov	r2, r5
 800de14:	4649      	mov	r1, r9
 800de16:	4620      	mov	r0, r4
 800de18:	f7ff ffa8 	bl	800dd6c <L_shift>
 800de1c:	4544      	cmp	r4, r8
 800de1e:	d952      	bls.n	800dec6 <__hexnan+0x10e>
 800de20:	2300      	movs	r3, #0
 800de22:	f1a4 0904 	sub.w	r9, r4, #4
 800de26:	f844 3c04 	str.w	r3, [r4, #-4]
 800de2a:	f8cd b008 	str.w	fp, [sp, #8]
 800de2e:	464c      	mov	r4, r9
 800de30:	461d      	mov	r5, r3
 800de32:	9903      	ldr	r1, [sp, #12]
 800de34:	e7d7      	b.n	800dde6 <__hexnan+0x2e>
 800de36:	2a29      	cmp	r2, #41	@ 0x29
 800de38:	d157      	bne.n	800deea <__hexnan+0x132>
 800de3a:	3102      	adds	r1, #2
 800de3c:	f8ca 1000 	str.w	r1, [sl]
 800de40:	f1bb 0f00 	cmp.w	fp, #0
 800de44:	d051      	beq.n	800deea <__hexnan+0x132>
 800de46:	454c      	cmp	r4, r9
 800de48:	d206      	bcs.n	800de58 <__hexnan+0xa0>
 800de4a:	2d07      	cmp	r5, #7
 800de4c:	dc04      	bgt.n	800de58 <__hexnan+0xa0>
 800de4e:	462a      	mov	r2, r5
 800de50:	4649      	mov	r1, r9
 800de52:	4620      	mov	r0, r4
 800de54:	f7ff ff8a 	bl	800dd6c <L_shift>
 800de58:	4544      	cmp	r4, r8
 800de5a:	d936      	bls.n	800deca <__hexnan+0x112>
 800de5c:	f1a8 0204 	sub.w	r2, r8, #4
 800de60:	4623      	mov	r3, r4
 800de62:	f853 1b04 	ldr.w	r1, [r3], #4
 800de66:	f842 1f04 	str.w	r1, [r2, #4]!
 800de6a:	429f      	cmp	r7, r3
 800de6c:	d2f9      	bcs.n	800de62 <__hexnan+0xaa>
 800de6e:	1b3b      	subs	r3, r7, r4
 800de70:	f023 0303 	bic.w	r3, r3, #3
 800de74:	3304      	adds	r3, #4
 800de76:	3401      	adds	r4, #1
 800de78:	3e03      	subs	r6, #3
 800de7a:	42b4      	cmp	r4, r6
 800de7c:	bf88      	it	hi
 800de7e:	2304      	movhi	r3, #4
 800de80:	4443      	add	r3, r8
 800de82:	2200      	movs	r2, #0
 800de84:	f843 2b04 	str.w	r2, [r3], #4
 800de88:	429f      	cmp	r7, r3
 800de8a:	d2fb      	bcs.n	800de84 <__hexnan+0xcc>
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	b91b      	cbnz	r3, 800de98 <__hexnan+0xe0>
 800de90:	4547      	cmp	r7, r8
 800de92:	d128      	bne.n	800dee6 <__hexnan+0x12e>
 800de94:	2301      	movs	r3, #1
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	2005      	movs	r0, #5
 800de9a:	b007      	add	sp, #28
 800de9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea0:	3501      	adds	r5, #1
 800dea2:	2d08      	cmp	r5, #8
 800dea4:	f10b 0b01 	add.w	fp, fp, #1
 800dea8:	dd06      	ble.n	800deb8 <__hexnan+0x100>
 800deaa:	4544      	cmp	r4, r8
 800deac:	d9c1      	bls.n	800de32 <__hexnan+0x7a>
 800deae:	2300      	movs	r3, #0
 800deb0:	f844 3c04 	str.w	r3, [r4, #-4]
 800deb4:	2501      	movs	r5, #1
 800deb6:	3c04      	subs	r4, #4
 800deb8:	6822      	ldr	r2, [r4, #0]
 800deba:	f000 000f 	and.w	r0, r0, #15
 800debe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dec2:	6020      	str	r0, [r4, #0]
 800dec4:	e7b5      	b.n	800de32 <__hexnan+0x7a>
 800dec6:	2508      	movs	r5, #8
 800dec8:	e7b3      	b.n	800de32 <__hexnan+0x7a>
 800deca:	9b01      	ldr	r3, [sp, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d0dd      	beq.n	800de8c <__hexnan+0xd4>
 800ded0:	f1c3 0320 	rsb	r3, r3, #32
 800ded4:	f04f 32ff 	mov.w	r2, #4294967295
 800ded8:	40da      	lsrs	r2, r3
 800deda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dede:	4013      	ands	r3, r2
 800dee0:	f846 3c04 	str.w	r3, [r6, #-4]
 800dee4:	e7d2      	b.n	800de8c <__hexnan+0xd4>
 800dee6:	3f04      	subs	r7, #4
 800dee8:	e7d0      	b.n	800de8c <__hexnan+0xd4>
 800deea:	2004      	movs	r0, #4
 800deec:	e7d5      	b.n	800de9a <__hexnan+0xe2>
	...

0800def0 <malloc>:
 800def0:	4b02      	ldr	r3, [pc, #8]	@ (800defc <malloc+0xc>)
 800def2:	4601      	mov	r1, r0
 800def4:	6818      	ldr	r0, [r3, #0]
 800def6:	f000 b825 	b.w	800df44 <_malloc_r>
 800defa:	bf00      	nop
 800defc:	20000430 	.word	0x20000430

0800df00 <sbrk_aligned>:
 800df00:	b570      	push	{r4, r5, r6, lr}
 800df02:	4e0f      	ldr	r6, [pc, #60]	@ (800df40 <sbrk_aligned+0x40>)
 800df04:	460c      	mov	r4, r1
 800df06:	6831      	ldr	r1, [r6, #0]
 800df08:	4605      	mov	r5, r0
 800df0a:	b911      	cbnz	r1, 800df12 <sbrk_aligned+0x12>
 800df0c:	f001 fb30 	bl	800f570 <_sbrk_r>
 800df10:	6030      	str	r0, [r6, #0]
 800df12:	4621      	mov	r1, r4
 800df14:	4628      	mov	r0, r5
 800df16:	f001 fb2b 	bl	800f570 <_sbrk_r>
 800df1a:	1c43      	adds	r3, r0, #1
 800df1c:	d103      	bne.n	800df26 <sbrk_aligned+0x26>
 800df1e:	f04f 34ff 	mov.w	r4, #4294967295
 800df22:	4620      	mov	r0, r4
 800df24:	bd70      	pop	{r4, r5, r6, pc}
 800df26:	1cc4      	adds	r4, r0, #3
 800df28:	f024 0403 	bic.w	r4, r4, #3
 800df2c:	42a0      	cmp	r0, r4
 800df2e:	d0f8      	beq.n	800df22 <sbrk_aligned+0x22>
 800df30:	1a21      	subs	r1, r4, r0
 800df32:	4628      	mov	r0, r5
 800df34:	f001 fb1c 	bl	800f570 <_sbrk_r>
 800df38:	3001      	adds	r0, #1
 800df3a:	d1f2      	bne.n	800df22 <sbrk_aligned+0x22>
 800df3c:	e7ef      	b.n	800df1e <sbrk_aligned+0x1e>
 800df3e:	bf00      	nop
 800df40:	20005e64 	.word	0x20005e64

0800df44 <_malloc_r>:
 800df44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df48:	1ccd      	adds	r5, r1, #3
 800df4a:	f025 0503 	bic.w	r5, r5, #3
 800df4e:	3508      	adds	r5, #8
 800df50:	2d0c      	cmp	r5, #12
 800df52:	bf38      	it	cc
 800df54:	250c      	movcc	r5, #12
 800df56:	2d00      	cmp	r5, #0
 800df58:	4606      	mov	r6, r0
 800df5a:	db01      	blt.n	800df60 <_malloc_r+0x1c>
 800df5c:	42a9      	cmp	r1, r5
 800df5e:	d904      	bls.n	800df6a <_malloc_r+0x26>
 800df60:	230c      	movs	r3, #12
 800df62:	6033      	str	r3, [r6, #0]
 800df64:	2000      	movs	r0, #0
 800df66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e040 <_malloc_r+0xfc>
 800df6e:	f000 f87b 	bl	800e068 <__malloc_lock>
 800df72:	f8d8 3000 	ldr.w	r3, [r8]
 800df76:	461c      	mov	r4, r3
 800df78:	bb44      	cbnz	r4, 800dfcc <_malloc_r+0x88>
 800df7a:	4629      	mov	r1, r5
 800df7c:	4630      	mov	r0, r6
 800df7e:	f7ff ffbf 	bl	800df00 <sbrk_aligned>
 800df82:	1c43      	adds	r3, r0, #1
 800df84:	4604      	mov	r4, r0
 800df86:	d158      	bne.n	800e03a <_malloc_r+0xf6>
 800df88:	f8d8 4000 	ldr.w	r4, [r8]
 800df8c:	4627      	mov	r7, r4
 800df8e:	2f00      	cmp	r7, #0
 800df90:	d143      	bne.n	800e01a <_malloc_r+0xd6>
 800df92:	2c00      	cmp	r4, #0
 800df94:	d04b      	beq.n	800e02e <_malloc_r+0xea>
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	4639      	mov	r1, r7
 800df9a:	4630      	mov	r0, r6
 800df9c:	eb04 0903 	add.w	r9, r4, r3
 800dfa0:	f001 fae6 	bl	800f570 <_sbrk_r>
 800dfa4:	4581      	cmp	r9, r0
 800dfa6:	d142      	bne.n	800e02e <_malloc_r+0xea>
 800dfa8:	6821      	ldr	r1, [r4, #0]
 800dfaa:	1a6d      	subs	r5, r5, r1
 800dfac:	4629      	mov	r1, r5
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f7ff ffa6 	bl	800df00 <sbrk_aligned>
 800dfb4:	3001      	adds	r0, #1
 800dfb6:	d03a      	beq.n	800e02e <_malloc_r+0xea>
 800dfb8:	6823      	ldr	r3, [r4, #0]
 800dfba:	442b      	add	r3, r5
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc2:	685a      	ldr	r2, [r3, #4]
 800dfc4:	bb62      	cbnz	r2, 800e020 <_malloc_r+0xdc>
 800dfc6:	f8c8 7000 	str.w	r7, [r8]
 800dfca:	e00f      	b.n	800dfec <_malloc_r+0xa8>
 800dfcc:	6822      	ldr	r2, [r4, #0]
 800dfce:	1b52      	subs	r2, r2, r5
 800dfd0:	d420      	bmi.n	800e014 <_malloc_r+0xd0>
 800dfd2:	2a0b      	cmp	r2, #11
 800dfd4:	d917      	bls.n	800e006 <_malloc_r+0xc2>
 800dfd6:	1961      	adds	r1, r4, r5
 800dfd8:	42a3      	cmp	r3, r4
 800dfda:	6025      	str	r5, [r4, #0]
 800dfdc:	bf18      	it	ne
 800dfde:	6059      	strne	r1, [r3, #4]
 800dfe0:	6863      	ldr	r3, [r4, #4]
 800dfe2:	bf08      	it	eq
 800dfe4:	f8c8 1000 	streq.w	r1, [r8]
 800dfe8:	5162      	str	r2, [r4, r5]
 800dfea:	604b      	str	r3, [r1, #4]
 800dfec:	4630      	mov	r0, r6
 800dfee:	f000 f841 	bl	800e074 <__malloc_unlock>
 800dff2:	f104 000b 	add.w	r0, r4, #11
 800dff6:	1d23      	adds	r3, r4, #4
 800dff8:	f020 0007 	bic.w	r0, r0, #7
 800dffc:	1ac2      	subs	r2, r0, r3
 800dffe:	bf1c      	itt	ne
 800e000:	1a1b      	subne	r3, r3, r0
 800e002:	50a3      	strne	r3, [r4, r2]
 800e004:	e7af      	b.n	800df66 <_malloc_r+0x22>
 800e006:	6862      	ldr	r2, [r4, #4]
 800e008:	42a3      	cmp	r3, r4
 800e00a:	bf0c      	ite	eq
 800e00c:	f8c8 2000 	streq.w	r2, [r8]
 800e010:	605a      	strne	r2, [r3, #4]
 800e012:	e7eb      	b.n	800dfec <_malloc_r+0xa8>
 800e014:	4623      	mov	r3, r4
 800e016:	6864      	ldr	r4, [r4, #4]
 800e018:	e7ae      	b.n	800df78 <_malloc_r+0x34>
 800e01a:	463c      	mov	r4, r7
 800e01c:	687f      	ldr	r7, [r7, #4]
 800e01e:	e7b6      	b.n	800df8e <_malloc_r+0x4a>
 800e020:	461a      	mov	r2, r3
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	42a3      	cmp	r3, r4
 800e026:	d1fb      	bne.n	800e020 <_malloc_r+0xdc>
 800e028:	2300      	movs	r3, #0
 800e02a:	6053      	str	r3, [r2, #4]
 800e02c:	e7de      	b.n	800dfec <_malloc_r+0xa8>
 800e02e:	230c      	movs	r3, #12
 800e030:	6033      	str	r3, [r6, #0]
 800e032:	4630      	mov	r0, r6
 800e034:	f000 f81e 	bl	800e074 <__malloc_unlock>
 800e038:	e794      	b.n	800df64 <_malloc_r+0x20>
 800e03a:	6005      	str	r5, [r0, #0]
 800e03c:	e7d6      	b.n	800dfec <_malloc_r+0xa8>
 800e03e:	bf00      	nop
 800e040:	20005e68 	.word	0x20005e68

0800e044 <__ascii_mbtowc>:
 800e044:	b082      	sub	sp, #8
 800e046:	b901      	cbnz	r1, 800e04a <__ascii_mbtowc+0x6>
 800e048:	a901      	add	r1, sp, #4
 800e04a:	b142      	cbz	r2, 800e05e <__ascii_mbtowc+0x1a>
 800e04c:	b14b      	cbz	r3, 800e062 <__ascii_mbtowc+0x1e>
 800e04e:	7813      	ldrb	r3, [r2, #0]
 800e050:	600b      	str	r3, [r1, #0]
 800e052:	7812      	ldrb	r2, [r2, #0]
 800e054:	1e10      	subs	r0, r2, #0
 800e056:	bf18      	it	ne
 800e058:	2001      	movne	r0, #1
 800e05a:	b002      	add	sp, #8
 800e05c:	4770      	bx	lr
 800e05e:	4610      	mov	r0, r2
 800e060:	e7fb      	b.n	800e05a <__ascii_mbtowc+0x16>
 800e062:	f06f 0001 	mvn.w	r0, #1
 800e066:	e7f8      	b.n	800e05a <__ascii_mbtowc+0x16>

0800e068 <__malloc_lock>:
 800e068:	4801      	ldr	r0, [pc, #4]	@ (800e070 <__malloc_lock+0x8>)
 800e06a:	f7fe bd28 	b.w	800cabe <__retarget_lock_acquire_recursive>
 800e06e:	bf00      	nop
 800e070:	20005e60 	.word	0x20005e60

0800e074 <__malloc_unlock>:
 800e074:	4801      	ldr	r0, [pc, #4]	@ (800e07c <__malloc_unlock+0x8>)
 800e076:	f7fe bd23 	b.w	800cac0 <__retarget_lock_release_recursive>
 800e07a:	bf00      	nop
 800e07c:	20005e60 	.word	0x20005e60

0800e080 <_Balloc>:
 800e080:	b570      	push	{r4, r5, r6, lr}
 800e082:	69c6      	ldr	r6, [r0, #28]
 800e084:	4604      	mov	r4, r0
 800e086:	460d      	mov	r5, r1
 800e088:	b976      	cbnz	r6, 800e0a8 <_Balloc+0x28>
 800e08a:	2010      	movs	r0, #16
 800e08c:	f7ff ff30 	bl	800def0 <malloc>
 800e090:	4602      	mov	r2, r0
 800e092:	61e0      	str	r0, [r4, #28]
 800e094:	b920      	cbnz	r0, 800e0a0 <_Balloc+0x20>
 800e096:	4b18      	ldr	r3, [pc, #96]	@ (800e0f8 <_Balloc+0x78>)
 800e098:	4818      	ldr	r0, [pc, #96]	@ (800e0fc <_Balloc+0x7c>)
 800e09a:	216b      	movs	r1, #107	@ 0x6b
 800e09c:	f7fe fd2e 	bl	800cafc <__assert_func>
 800e0a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0a4:	6006      	str	r6, [r0, #0]
 800e0a6:	60c6      	str	r6, [r0, #12]
 800e0a8:	69e6      	ldr	r6, [r4, #28]
 800e0aa:	68f3      	ldr	r3, [r6, #12]
 800e0ac:	b183      	cbz	r3, 800e0d0 <_Balloc+0x50>
 800e0ae:	69e3      	ldr	r3, [r4, #28]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0b6:	b9b8      	cbnz	r0, 800e0e8 <_Balloc+0x68>
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	fa01 f605 	lsl.w	r6, r1, r5
 800e0be:	1d72      	adds	r2, r6, #5
 800e0c0:	0092      	lsls	r2, r2, #2
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f001 fa6b 	bl	800f59e <_calloc_r>
 800e0c8:	b160      	cbz	r0, 800e0e4 <_Balloc+0x64>
 800e0ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0ce:	e00e      	b.n	800e0ee <_Balloc+0x6e>
 800e0d0:	2221      	movs	r2, #33	@ 0x21
 800e0d2:	2104      	movs	r1, #4
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f001 fa62 	bl	800f59e <_calloc_r>
 800e0da:	69e3      	ldr	r3, [r4, #28]
 800e0dc:	60f0      	str	r0, [r6, #12]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1e4      	bne.n	800e0ae <_Balloc+0x2e>
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	bd70      	pop	{r4, r5, r6, pc}
 800e0e8:	6802      	ldr	r2, [r0, #0]
 800e0ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0f4:	e7f7      	b.n	800e0e6 <_Balloc+0x66>
 800e0f6:	bf00      	nop
 800e0f8:	08011549 	.word	0x08011549
 800e0fc:	080116d4 	.word	0x080116d4

0800e100 <_Bfree>:
 800e100:	b570      	push	{r4, r5, r6, lr}
 800e102:	69c6      	ldr	r6, [r0, #28]
 800e104:	4605      	mov	r5, r0
 800e106:	460c      	mov	r4, r1
 800e108:	b976      	cbnz	r6, 800e128 <_Bfree+0x28>
 800e10a:	2010      	movs	r0, #16
 800e10c:	f7ff fef0 	bl	800def0 <malloc>
 800e110:	4602      	mov	r2, r0
 800e112:	61e8      	str	r0, [r5, #28]
 800e114:	b920      	cbnz	r0, 800e120 <_Bfree+0x20>
 800e116:	4b09      	ldr	r3, [pc, #36]	@ (800e13c <_Bfree+0x3c>)
 800e118:	4809      	ldr	r0, [pc, #36]	@ (800e140 <_Bfree+0x40>)
 800e11a:	218f      	movs	r1, #143	@ 0x8f
 800e11c:	f7fe fcee 	bl	800cafc <__assert_func>
 800e120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e124:	6006      	str	r6, [r0, #0]
 800e126:	60c6      	str	r6, [r0, #12]
 800e128:	b13c      	cbz	r4, 800e13a <_Bfree+0x3a>
 800e12a:	69eb      	ldr	r3, [r5, #28]
 800e12c:	6862      	ldr	r2, [r4, #4]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e134:	6021      	str	r1, [r4, #0]
 800e136:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e13a:	bd70      	pop	{r4, r5, r6, pc}
 800e13c:	08011549 	.word	0x08011549
 800e140:	080116d4 	.word	0x080116d4

0800e144 <__multadd>:
 800e144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e148:	690d      	ldr	r5, [r1, #16]
 800e14a:	4607      	mov	r7, r0
 800e14c:	460c      	mov	r4, r1
 800e14e:	461e      	mov	r6, r3
 800e150:	f101 0c14 	add.w	ip, r1, #20
 800e154:	2000      	movs	r0, #0
 800e156:	f8dc 3000 	ldr.w	r3, [ip]
 800e15a:	b299      	uxth	r1, r3
 800e15c:	fb02 6101 	mla	r1, r2, r1, r6
 800e160:	0c1e      	lsrs	r6, r3, #16
 800e162:	0c0b      	lsrs	r3, r1, #16
 800e164:	fb02 3306 	mla	r3, r2, r6, r3
 800e168:	b289      	uxth	r1, r1
 800e16a:	3001      	adds	r0, #1
 800e16c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e170:	4285      	cmp	r5, r0
 800e172:	f84c 1b04 	str.w	r1, [ip], #4
 800e176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e17a:	dcec      	bgt.n	800e156 <__multadd+0x12>
 800e17c:	b30e      	cbz	r6, 800e1c2 <__multadd+0x7e>
 800e17e:	68a3      	ldr	r3, [r4, #8]
 800e180:	42ab      	cmp	r3, r5
 800e182:	dc19      	bgt.n	800e1b8 <__multadd+0x74>
 800e184:	6861      	ldr	r1, [r4, #4]
 800e186:	4638      	mov	r0, r7
 800e188:	3101      	adds	r1, #1
 800e18a:	f7ff ff79 	bl	800e080 <_Balloc>
 800e18e:	4680      	mov	r8, r0
 800e190:	b928      	cbnz	r0, 800e19e <__multadd+0x5a>
 800e192:	4602      	mov	r2, r0
 800e194:	4b0c      	ldr	r3, [pc, #48]	@ (800e1c8 <__multadd+0x84>)
 800e196:	480d      	ldr	r0, [pc, #52]	@ (800e1cc <__multadd+0x88>)
 800e198:	21ba      	movs	r1, #186	@ 0xba
 800e19a:	f7fe fcaf 	bl	800cafc <__assert_func>
 800e19e:	6922      	ldr	r2, [r4, #16]
 800e1a0:	3202      	adds	r2, #2
 800e1a2:	f104 010c 	add.w	r1, r4, #12
 800e1a6:	0092      	lsls	r2, r2, #2
 800e1a8:	300c      	adds	r0, #12
 800e1aa:	f7fe fc8a 	bl	800cac2 <memcpy>
 800e1ae:	4621      	mov	r1, r4
 800e1b0:	4638      	mov	r0, r7
 800e1b2:	f7ff ffa5 	bl	800e100 <_Bfree>
 800e1b6:	4644      	mov	r4, r8
 800e1b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1bc:	3501      	adds	r5, #1
 800e1be:	615e      	str	r6, [r3, #20]
 800e1c0:	6125      	str	r5, [r4, #16]
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c8:	08011663 	.word	0x08011663
 800e1cc:	080116d4 	.word	0x080116d4

0800e1d0 <__s2b>:
 800e1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d4:	460c      	mov	r4, r1
 800e1d6:	4615      	mov	r5, r2
 800e1d8:	461f      	mov	r7, r3
 800e1da:	2209      	movs	r2, #9
 800e1dc:	3308      	adds	r3, #8
 800e1de:	4606      	mov	r6, r0
 800e1e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	db09      	blt.n	800e200 <__s2b+0x30>
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	f7ff ff47 	bl	800e080 <_Balloc>
 800e1f2:	b940      	cbnz	r0, 800e206 <__s2b+0x36>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	4b19      	ldr	r3, [pc, #100]	@ (800e25c <__s2b+0x8c>)
 800e1f8:	4819      	ldr	r0, [pc, #100]	@ (800e260 <__s2b+0x90>)
 800e1fa:	21d3      	movs	r1, #211	@ 0xd3
 800e1fc:	f7fe fc7e 	bl	800cafc <__assert_func>
 800e200:	0052      	lsls	r2, r2, #1
 800e202:	3101      	adds	r1, #1
 800e204:	e7f0      	b.n	800e1e8 <__s2b+0x18>
 800e206:	9b08      	ldr	r3, [sp, #32]
 800e208:	6143      	str	r3, [r0, #20]
 800e20a:	2d09      	cmp	r5, #9
 800e20c:	f04f 0301 	mov.w	r3, #1
 800e210:	6103      	str	r3, [r0, #16]
 800e212:	dd16      	ble.n	800e242 <__s2b+0x72>
 800e214:	f104 0909 	add.w	r9, r4, #9
 800e218:	46c8      	mov	r8, r9
 800e21a:	442c      	add	r4, r5
 800e21c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e220:	4601      	mov	r1, r0
 800e222:	3b30      	subs	r3, #48	@ 0x30
 800e224:	220a      	movs	r2, #10
 800e226:	4630      	mov	r0, r6
 800e228:	f7ff ff8c 	bl	800e144 <__multadd>
 800e22c:	45a0      	cmp	r8, r4
 800e22e:	d1f5      	bne.n	800e21c <__s2b+0x4c>
 800e230:	f1a5 0408 	sub.w	r4, r5, #8
 800e234:	444c      	add	r4, r9
 800e236:	1b2d      	subs	r5, r5, r4
 800e238:	1963      	adds	r3, r4, r5
 800e23a:	42bb      	cmp	r3, r7
 800e23c:	db04      	blt.n	800e248 <__s2b+0x78>
 800e23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e242:	340a      	adds	r4, #10
 800e244:	2509      	movs	r5, #9
 800e246:	e7f6      	b.n	800e236 <__s2b+0x66>
 800e248:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e24c:	4601      	mov	r1, r0
 800e24e:	3b30      	subs	r3, #48	@ 0x30
 800e250:	220a      	movs	r2, #10
 800e252:	4630      	mov	r0, r6
 800e254:	f7ff ff76 	bl	800e144 <__multadd>
 800e258:	e7ee      	b.n	800e238 <__s2b+0x68>
 800e25a:	bf00      	nop
 800e25c:	08011663 	.word	0x08011663
 800e260:	080116d4 	.word	0x080116d4

0800e264 <__hi0bits>:
 800e264:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e268:	4603      	mov	r3, r0
 800e26a:	bf36      	itet	cc
 800e26c:	0403      	lslcc	r3, r0, #16
 800e26e:	2000      	movcs	r0, #0
 800e270:	2010      	movcc	r0, #16
 800e272:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e276:	bf3c      	itt	cc
 800e278:	021b      	lslcc	r3, r3, #8
 800e27a:	3008      	addcc	r0, #8
 800e27c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e280:	bf3c      	itt	cc
 800e282:	011b      	lslcc	r3, r3, #4
 800e284:	3004      	addcc	r0, #4
 800e286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e28a:	bf3c      	itt	cc
 800e28c:	009b      	lslcc	r3, r3, #2
 800e28e:	3002      	addcc	r0, #2
 800e290:	2b00      	cmp	r3, #0
 800e292:	db05      	blt.n	800e2a0 <__hi0bits+0x3c>
 800e294:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e298:	f100 0001 	add.w	r0, r0, #1
 800e29c:	bf08      	it	eq
 800e29e:	2020      	moveq	r0, #32
 800e2a0:	4770      	bx	lr

0800e2a2 <__lo0bits>:
 800e2a2:	6803      	ldr	r3, [r0, #0]
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	f013 0007 	ands.w	r0, r3, #7
 800e2aa:	d00b      	beq.n	800e2c4 <__lo0bits+0x22>
 800e2ac:	07d9      	lsls	r1, r3, #31
 800e2ae:	d421      	bmi.n	800e2f4 <__lo0bits+0x52>
 800e2b0:	0798      	lsls	r0, r3, #30
 800e2b2:	bf49      	itett	mi
 800e2b4:	085b      	lsrmi	r3, r3, #1
 800e2b6:	089b      	lsrpl	r3, r3, #2
 800e2b8:	2001      	movmi	r0, #1
 800e2ba:	6013      	strmi	r3, [r2, #0]
 800e2bc:	bf5c      	itt	pl
 800e2be:	6013      	strpl	r3, [r2, #0]
 800e2c0:	2002      	movpl	r0, #2
 800e2c2:	4770      	bx	lr
 800e2c4:	b299      	uxth	r1, r3
 800e2c6:	b909      	cbnz	r1, 800e2cc <__lo0bits+0x2a>
 800e2c8:	0c1b      	lsrs	r3, r3, #16
 800e2ca:	2010      	movs	r0, #16
 800e2cc:	b2d9      	uxtb	r1, r3
 800e2ce:	b909      	cbnz	r1, 800e2d4 <__lo0bits+0x32>
 800e2d0:	3008      	adds	r0, #8
 800e2d2:	0a1b      	lsrs	r3, r3, #8
 800e2d4:	0719      	lsls	r1, r3, #28
 800e2d6:	bf04      	itt	eq
 800e2d8:	091b      	lsreq	r3, r3, #4
 800e2da:	3004      	addeq	r0, #4
 800e2dc:	0799      	lsls	r1, r3, #30
 800e2de:	bf04      	itt	eq
 800e2e0:	089b      	lsreq	r3, r3, #2
 800e2e2:	3002      	addeq	r0, #2
 800e2e4:	07d9      	lsls	r1, r3, #31
 800e2e6:	d403      	bmi.n	800e2f0 <__lo0bits+0x4e>
 800e2e8:	085b      	lsrs	r3, r3, #1
 800e2ea:	f100 0001 	add.w	r0, r0, #1
 800e2ee:	d003      	beq.n	800e2f8 <__lo0bits+0x56>
 800e2f0:	6013      	str	r3, [r2, #0]
 800e2f2:	4770      	bx	lr
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	4770      	bx	lr
 800e2f8:	2020      	movs	r0, #32
 800e2fa:	4770      	bx	lr

0800e2fc <__i2b>:
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	460c      	mov	r4, r1
 800e300:	2101      	movs	r1, #1
 800e302:	f7ff febd 	bl	800e080 <_Balloc>
 800e306:	4602      	mov	r2, r0
 800e308:	b928      	cbnz	r0, 800e316 <__i2b+0x1a>
 800e30a:	4b05      	ldr	r3, [pc, #20]	@ (800e320 <__i2b+0x24>)
 800e30c:	4805      	ldr	r0, [pc, #20]	@ (800e324 <__i2b+0x28>)
 800e30e:	f240 1145 	movw	r1, #325	@ 0x145
 800e312:	f7fe fbf3 	bl	800cafc <__assert_func>
 800e316:	2301      	movs	r3, #1
 800e318:	6144      	str	r4, [r0, #20]
 800e31a:	6103      	str	r3, [r0, #16]
 800e31c:	bd10      	pop	{r4, pc}
 800e31e:	bf00      	nop
 800e320:	08011663 	.word	0x08011663
 800e324:	080116d4 	.word	0x080116d4

0800e328 <__multiply>:
 800e328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e32c:	4617      	mov	r7, r2
 800e32e:	690a      	ldr	r2, [r1, #16]
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	429a      	cmp	r2, r3
 800e334:	bfa8      	it	ge
 800e336:	463b      	movge	r3, r7
 800e338:	4689      	mov	r9, r1
 800e33a:	bfa4      	itt	ge
 800e33c:	460f      	movge	r7, r1
 800e33e:	4699      	movge	r9, r3
 800e340:	693d      	ldr	r5, [r7, #16]
 800e342:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	6879      	ldr	r1, [r7, #4]
 800e34a:	eb05 060a 	add.w	r6, r5, sl
 800e34e:	42b3      	cmp	r3, r6
 800e350:	b085      	sub	sp, #20
 800e352:	bfb8      	it	lt
 800e354:	3101      	addlt	r1, #1
 800e356:	f7ff fe93 	bl	800e080 <_Balloc>
 800e35a:	b930      	cbnz	r0, 800e36a <__multiply+0x42>
 800e35c:	4602      	mov	r2, r0
 800e35e:	4b41      	ldr	r3, [pc, #260]	@ (800e464 <__multiply+0x13c>)
 800e360:	4841      	ldr	r0, [pc, #260]	@ (800e468 <__multiply+0x140>)
 800e362:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e366:	f7fe fbc9 	bl	800cafc <__assert_func>
 800e36a:	f100 0414 	add.w	r4, r0, #20
 800e36e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e372:	4623      	mov	r3, r4
 800e374:	2200      	movs	r2, #0
 800e376:	4573      	cmp	r3, lr
 800e378:	d320      	bcc.n	800e3bc <__multiply+0x94>
 800e37a:	f107 0814 	add.w	r8, r7, #20
 800e37e:	f109 0114 	add.w	r1, r9, #20
 800e382:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e386:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e38a:	9302      	str	r3, [sp, #8]
 800e38c:	1beb      	subs	r3, r5, r7
 800e38e:	3b15      	subs	r3, #21
 800e390:	f023 0303 	bic.w	r3, r3, #3
 800e394:	3304      	adds	r3, #4
 800e396:	3715      	adds	r7, #21
 800e398:	42bd      	cmp	r5, r7
 800e39a:	bf38      	it	cc
 800e39c:	2304      	movcc	r3, #4
 800e39e:	9301      	str	r3, [sp, #4]
 800e3a0:	9b02      	ldr	r3, [sp, #8]
 800e3a2:	9103      	str	r1, [sp, #12]
 800e3a4:	428b      	cmp	r3, r1
 800e3a6:	d80c      	bhi.n	800e3c2 <__multiply+0x9a>
 800e3a8:	2e00      	cmp	r6, #0
 800e3aa:	dd03      	ble.n	800e3b4 <__multiply+0x8c>
 800e3ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d055      	beq.n	800e460 <__multiply+0x138>
 800e3b4:	6106      	str	r6, [r0, #16]
 800e3b6:	b005      	add	sp, #20
 800e3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3bc:	f843 2b04 	str.w	r2, [r3], #4
 800e3c0:	e7d9      	b.n	800e376 <__multiply+0x4e>
 800e3c2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e3c6:	f1ba 0f00 	cmp.w	sl, #0
 800e3ca:	d01f      	beq.n	800e40c <__multiply+0xe4>
 800e3cc:	46c4      	mov	ip, r8
 800e3ce:	46a1      	mov	r9, r4
 800e3d0:	2700      	movs	r7, #0
 800e3d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e3d6:	f8d9 3000 	ldr.w	r3, [r9]
 800e3da:	fa1f fb82 	uxth.w	fp, r2
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800e3e4:	443b      	add	r3, r7
 800e3e6:	f8d9 7000 	ldr.w	r7, [r9]
 800e3ea:	0c12      	lsrs	r2, r2, #16
 800e3ec:	0c3f      	lsrs	r7, r7, #16
 800e3ee:	fb0a 7202 	mla	r2, sl, r2, r7
 800e3f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3fc:	4565      	cmp	r5, ip
 800e3fe:	f849 3b04 	str.w	r3, [r9], #4
 800e402:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e406:	d8e4      	bhi.n	800e3d2 <__multiply+0xaa>
 800e408:	9b01      	ldr	r3, [sp, #4]
 800e40a:	50e7      	str	r7, [r4, r3]
 800e40c:	9b03      	ldr	r3, [sp, #12]
 800e40e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e412:	3104      	adds	r1, #4
 800e414:	f1b9 0f00 	cmp.w	r9, #0
 800e418:	d020      	beq.n	800e45c <__multiply+0x134>
 800e41a:	6823      	ldr	r3, [r4, #0]
 800e41c:	4647      	mov	r7, r8
 800e41e:	46a4      	mov	ip, r4
 800e420:	f04f 0a00 	mov.w	sl, #0
 800e424:	f8b7 b000 	ldrh.w	fp, [r7]
 800e428:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e42c:	fb09 220b 	mla	r2, r9, fp, r2
 800e430:	4452      	add	r2, sl
 800e432:	b29b      	uxth	r3, r3
 800e434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e438:	f84c 3b04 	str.w	r3, [ip], #4
 800e43c:	f857 3b04 	ldr.w	r3, [r7], #4
 800e440:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e444:	f8bc 3000 	ldrh.w	r3, [ip]
 800e448:	fb09 330a 	mla	r3, r9, sl, r3
 800e44c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e450:	42bd      	cmp	r5, r7
 800e452:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e456:	d8e5      	bhi.n	800e424 <__multiply+0xfc>
 800e458:	9a01      	ldr	r2, [sp, #4]
 800e45a:	50a3      	str	r3, [r4, r2]
 800e45c:	3404      	adds	r4, #4
 800e45e:	e79f      	b.n	800e3a0 <__multiply+0x78>
 800e460:	3e01      	subs	r6, #1
 800e462:	e7a1      	b.n	800e3a8 <__multiply+0x80>
 800e464:	08011663 	.word	0x08011663
 800e468:	080116d4 	.word	0x080116d4

0800e46c <__pow5mult>:
 800e46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e470:	4615      	mov	r5, r2
 800e472:	f012 0203 	ands.w	r2, r2, #3
 800e476:	4607      	mov	r7, r0
 800e478:	460e      	mov	r6, r1
 800e47a:	d007      	beq.n	800e48c <__pow5mult+0x20>
 800e47c:	4c25      	ldr	r4, [pc, #148]	@ (800e514 <__pow5mult+0xa8>)
 800e47e:	3a01      	subs	r2, #1
 800e480:	2300      	movs	r3, #0
 800e482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e486:	f7ff fe5d 	bl	800e144 <__multadd>
 800e48a:	4606      	mov	r6, r0
 800e48c:	10ad      	asrs	r5, r5, #2
 800e48e:	d03d      	beq.n	800e50c <__pow5mult+0xa0>
 800e490:	69fc      	ldr	r4, [r7, #28]
 800e492:	b97c      	cbnz	r4, 800e4b4 <__pow5mult+0x48>
 800e494:	2010      	movs	r0, #16
 800e496:	f7ff fd2b 	bl	800def0 <malloc>
 800e49a:	4602      	mov	r2, r0
 800e49c:	61f8      	str	r0, [r7, #28]
 800e49e:	b928      	cbnz	r0, 800e4ac <__pow5mult+0x40>
 800e4a0:	4b1d      	ldr	r3, [pc, #116]	@ (800e518 <__pow5mult+0xac>)
 800e4a2:	481e      	ldr	r0, [pc, #120]	@ (800e51c <__pow5mult+0xb0>)
 800e4a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e4a8:	f7fe fb28 	bl	800cafc <__assert_func>
 800e4ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4b0:	6004      	str	r4, [r0, #0]
 800e4b2:	60c4      	str	r4, [r0, #12]
 800e4b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e4b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4bc:	b94c      	cbnz	r4, 800e4d2 <__pow5mult+0x66>
 800e4be:	f240 2171 	movw	r1, #625	@ 0x271
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	f7ff ff1a 	bl	800e2fc <__i2b>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	6003      	str	r3, [r0, #0]
 800e4d2:	f04f 0900 	mov.w	r9, #0
 800e4d6:	07eb      	lsls	r3, r5, #31
 800e4d8:	d50a      	bpl.n	800e4f0 <__pow5mult+0x84>
 800e4da:	4631      	mov	r1, r6
 800e4dc:	4622      	mov	r2, r4
 800e4de:	4638      	mov	r0, r7
 800e4e0:	f7ff ff22 	bl	800e328 <__multiply>
 800e4e4:	4631      	mov	r1, r6
 800e4e6:	4680      	mov	r8, r0
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f7ff fe09 	bl	800e100 <_Bfree>
 800e4ee:	4646      	mov	r6, r8
 800e4f0:	106d      	asrs	r5, r5, #1
 800e4f2:	d00b      	beq.n	800e50c <__pow5mult+0xa0>
 800e4f4:	6820      	ldr	r0, [r4, #0]
 800e4f6:	b938      	cbnz	r0, 800e508 <__pow5mult+0x9c>
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	4638      	mov	r0, r7
 800e4fe:	f7ff ff13 	bl	800e328 <__multiply>
 800e502:	6020      	str	r0, [r4, #0]
 800e504:	f8c0 9000 	str.w	r9, [r0]
 800e508:	4604      	mov	r4, r0
 800e50a:	e7e4      	b.n	800e4d6 <__pow5mult+0x6a>
 800e50c:	4630      	mov	r0, r6
 800e50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e512:	bf00      	nop
 800e514:	080118b4 	.word	0x080118b4
 800e518:	08011549 	.word	0x08011549
 800e51c:	080116d4 	.word	0x080116d4

0800e520 <__lshift>:
 800e520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e524:	460c      	mov	r4, r1
 800e526:	6849      	ldr	r1, [r1, #4]
 800e528:	6923      	ldr	r3, [r4, #16]
 800e52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e52e:	68a3      	ldr	r3, [r4, #8]
 800e530:	4607      	mov	r7, r0
 800e532:	4691      	mov	r9, r2
 800e534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e538:	f108 0601 	add.w	r6, r8, #1
 800e53c:	42b3      	cmp	r3, r6
 800e53e:	db0b      	blt.n	800e558 <__lshift+0x38>
 800e540:	4638      	mov	r0, r7
 800e542:	f7ff fd9d 	bl	800e080 <_Balloc>
 800e546:	4605      	mov	r5, r0
 800e548:	b948      	cbnz	r0, 800e55e <__lshift+0x3e>
 800e54a:	4602      	mov	r2, r0
 800e54c:	4b28      	ldr	r3, [pc, #160]	@ (800e5f0 <__lshift+0xd0>)
 800e54e:	4829      	ldr	r0, [pc, #164]	@ (800e5f4 <__lshift+0xd4>)
 800e550:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e554:	f7fe fad2 	bl	800cafc <__assert_func>
 800e558:	3101      	adds	r1, #1
 800e55a:	005b      	lsls	r3, r3, #1
 800e55c:	e7ee      	b.n	800e53c <__lshift+0x1c>
 800e55e:	2300      	movs	r3, #0
 800e560:	f100 0114 	add.w	r1, r0, #20
 800e564:	f100 0210 	add.w	r2, r0, #16
 800e568:	4618      	mov	r0, r3
 800e56a:	4553      	cmp	r3, sl
 800e56c:	db33      	blt.n	800e5d6 <__lshift+0xb6>
 800e56e:	6920      	ldr	r0, [r4, #16]
 800e570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e574:	f104 0314 	add.w	r3, r4, #20
 800e578:	f019 091f 	ands.w	r9, r9, #31
 800e57c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e584:	d02b      	beq.n	800e5de <__lshift+0xbe>
 800e586:	f1c9 0e20 	rsb	lr, r9, #32
 800e58a:	468a      	mov	sl, r1
 800e58c:	2200      	movs	r2, #0
 800e58e:	6818      	ldr	r0, [r3, #0]
 800e590:	fa00 f009 	lsl.w	r0, r0, r9
 800e594:	4310      	orrs	r0, r2
 800e596:	f84a 0b04 	str.w	r0, [sl], #4
 800e59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59e:	459c      	cmp	ip, r3
 800e5a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e5a4:	d8f3      	bhi.n	800e58e <__lshift+0x6e>
 800e5a6:	ebac 0304 	sub.w	r3, ip, r4
 800e5aa:	3b15      	subs	r3, #21
 800e5ac:	f023 0303 	bic.w	r3, r3, #3
 800e5b0:	3304      	adds	r3, #4
 800e5b2:	f104 0015 	add.w	r0, r4, #21
 800e5b6:	4560      	cmp	r0, ip
 800e5b8:	bf88      	it	hi
 800e5ba:	2304      	movhi	r3, #4
 800e5bc:	50ca      	str	r2, [r1, r3]
 800e5be:	b10a      	cbz	r2, 800e5c4 <__lshift+0xa4>
 800e5c0:	f108 0602 	add.w	r6, r8, #2
 800e5c4:	3e01      	subs	r6, #1
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	612e      	str	r6, [r5, #16]
 800e5ca:	4621      	mov	r1, r4
 800e5cc:	f7ff fd98 	bl	800e100 <_Bfree>
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5da:	3301      	adds	r3, #1
 800e5dc:	e7c5      	b.n	800e56a <__lshift+0x4a>
 800e5de:	3904      	subs	r1, #4
 800e5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5e8:	459c      	cmp	ip, r3
 800e5ea:	d8f9      	bhi.n	800e5e0 <__lshift+0xc0>
 800e5ec:	e7ea      	b.n	800e5c4 <__lshift+0xa4>
 800e5ee:	bf00      	nop
 800e5f0:	08011663 	.word	0x08011663
 800e5f4:	080116d4 	.word	0x080116d4

0800e5f8 <__mcmp>:
 800e5f8:	690a      	ldr	r2, [r1, #16]
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	6900      	ldr	r0, [r0, #16]
 800e5fe:	1a80      	subs	r0, r0, r2
 800e600:	b530      	push	{r4, r5, lr}
 800e602:	d10e      	bne.n	800e622 <__mcmp+0x2a>
 800e604:	3314      	adds	r3, #20
 800e606:	3114      	adds	r1, #20
 800e608:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e60c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e610:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e614:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e618:	4295      	cmp	r5, r2
 800e61a:	d003      	beq.n	800e624 <__mcmp+0x2c>
 800e61c:	d205      	bcs.n	800e62a <__mcmp+0x32>
 800e61e:	f04f 30ff 	mov.w	r0, #4294967295
 800e622:	bd30      	pop	{r4, r5, pc}
 800e624:	42a3      	cmp	r3, r4
 800e626:	d3f3      	bcc.n	800e610 <__mcmp+0x18>
 800e628:	e7fb      	b.n	800e622 <__mcmp+0x2a>
 800e62a:	2001      	movs	r0, #1
 800e62c:	e7f9      	b.n	800e622 <__mcmp+0x2a>
	...

0800e630 <__mdiff>:
 800e630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	4689      	mov	r9, r1
 800e636:	4606      	mov	r6, r0
 800e638:	4611      	mov	r1, r2
 800e63a:	4648      	mov	r0, r9
 800e63c:	4614      	mov	r4, r2
 800e63e:	f7ff ffdb 	bl	800e5f8 <__mcmp>
 800e642:	1e05      	subs	r5, r0, #0
 800e644:	d112      	bne.n	800e66c <__mdiff+0x3c>
 800e646:	4629      	mov	r1, r5
 800e648:	4630      	mov	r0, r6
 800e64a:	f7ff fd19 	bl	800e080 <_Balloc>
 800e64e:	4602      	mov	r2, r0
 800e650:	b928      	cbnz	r0, 800e65e <__mdiff+0x2e>
 800e652:	4b3f      	ldr	r3, [pc, #252]	@ (800e750 <__mdiff+0x120>)
 800e654:	f240 2137 	movw	r1, #567	@ 0x237
 800e658:	483e      	ldr	r0, [pc, #248]	@ (800e754 <__mdiff+0x124>)
 800e65a:	f7fe fa4f 	bl	800cafc <__assert_func>
 800e65e:	2301      	movs	r3, #1
 800e660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e664:	4610      	mov	r0, r2
 800e666:	b003      	add	sp, #12
 800e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66c:	bfbc      	itt	lt
 800e66e:	464b      	movlt	r3, r9
 800e670:	46a1      	movlt	r9, r4
 800e672:	4630      	mov	r0, r6
 800e674:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e678:	bfba      	itte	lt
 800e67a:	461c      	movlt	r4, r3
 800e67c:	2501      	movlt	r5, #1
 800e67e:	2500      	movge	r5, #0
 800e680:	f7ff fcfe 	bl	800e080 <_Balloc>
 800e684:	4602      	mov	r2, r0
 800e686:	b918      	cbnz	r0, 800e690 <__mdiff+0x60>
 800e688:	4b31      	ldr	r3, [pc, #196]	@ (800e750 <__mdiff+0x120>)
 800e68a:	f240 2145 	movw	r1, #581	@ 0x245
 800e68e:	e7e3      	b.n	800e658 <__mdiff+0x28>
 800e690:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e694:	6926      	ldr	r6, [r4, #16]
 800e696:	60c5      	str	r5, [r0, #12]
 800e698:	f109 0310 	add.w	r3, r9, #16
 800e69c:	f109 0514 	add.w	r5, r9, #20
 800e6a0:	f104 0e14 	add.w	lr, r4, #20
 800e6a4:	f100 0b14 	add.w	fp, r0, #20
 800e6a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e6ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e6b0:	9301      	str	r3, [sp, #4]
 800e6b2:	46d9      	mov	r9, fp
 800e6b4:	f04f 0c00 	mov.w	ip, #0
 800e6b8:	9b01      	ldr	r3, [sp, #4]
 800e6ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e6be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e6c2:	9301      	str	r3, [sp, #4]
 800e6c4:	fa1f f38a 	uxth.w	r3, sl
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	b283      	uxth	r3, r0
 800e6cc:	1acb      	subs	r3, r1, r3
 800e6ce:	0c00      	lsrs	r0, r0, #16
 800e6d0:	4463      	add	r3, ip
 800e6d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e6d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e6e0:	4576      	cmp	r6, lr
 800e6e2:	f849 3b04 	str.w	r3, [r9], #4
 800e6e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6ea:	d8e5      	bhi.n	800e6b8 <__mdiff+0x88>
 800e6ec:	1b33      	subs	r3, r6, r4
 800e6ee:	3b15      	subs	r3, #21
 800e6f0:	f023 0303 	bic.w	r3, r3, #3
 800e6f4:	3415      	adds	r4, #21
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	42a6      	cmp	r6, r4
 800e6fa:	bf38      	it	cc
 800e6fc:	2304      	movcc	r3, #4
 800e6fe:	441d      	add	r5, r3
 800e700:	445b      	add	r3, fp
 800e702:	461e      	mov	r6, r3
 800e704:	462c      	mov	r4, r5
 800e706:	4544      	cmp	r4, r8
 800e708:	d30e      	bcc.n	800e728 <__mdiff+0xf8>
 800e70a:	f108 0103 	add.w	r1, r8, #3
 800e70e:	1b49      	subs	r1, r1, r5
 800e710:	f021 0103 	bic.w	r1, r1, #3
 800e714:	3d03      	subs	r5, #3
 800e716:	45a8      	cmp	r8, r5
 800e718:	bf38      	it	cc
 800e71a:	2100      	movcc	r1, #0
 800e71c:	440b      	add	r3, r1
 800e71e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e722:	b191      	cbz	r1, 800e74a <__mdiff+0x11a>
 800e724:	6117      	str	r7, [r2, #16]
 800e726:	e79d      	b.n	800e664 <__mdiff+0x34>
 800e728:	f854 1b04 	ldr.w	r1, [r4], #4
 800e72c:	46e6      	mov	lr, ip
 800e72e:	0c08      	lsrs	r0, r1, #16
 800e730:	fa1c fc81 	uxtah	ip, ip, r1
 800e734:	4471      	add	r1, lr
 800e736:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e73a:	b289      	uxth	r1, r1
 800e73c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e740:	f846 1b04 	str.w	r1, [r6], #4
 800e744:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e748:	e7dd      	b.n	800e706 <__mdiff+0xd6>
 800e74a:	3f01      	subs	r7, #1
 800e74c:	e7e7      	b.n	800e71e <__mdiff+0xee>
 800e74e:	bf00      	nop
 800e750:	08011663 	.word	0x08011663
 800e754:	080116d4 	.word	0x080116d4

0800e758 <__ulp>:
 800e758:	b082      	sub	sp, #8
 800e75a:	ed8d 0b00 	vstr	d0, [sp]
 800e75e:	9a01      	ldr	r2, [sp, #4]
 800e760:	4b0f      	ldr	r3, [pc, #60]	@ (800e7a0 <__ulp+0x48>)
 800e762:	4013      	ands	r3, r2
 800e764:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e768:	2b00      	cmp	r3, #0
 800e76a:	dc08      	bgt.n	800e77e <__ulp+0x26>
 800e76c:	425b      	negs	r3, r3
 800e76e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e772:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e776:	da04      	bge.n	800e782 <__ulp+0x2a>
 800e778:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e77c:	4113      	asrs	r3, r2
 800e77e:	2200      	movs	r2, #0
 800e780:	e008      	b.n	800e794 <__ulp+0x3c>
 800e782:	f1a2 0314 	sub.w	r3, r2, #20
 800e786:	2b1e      	cmp	r3, #30
 800e788:	bfda      	itte	le
 800e78a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e78e:	40da      	lsrle	r2, r3
 800e790:	2201      	movgt	r2, #1
 800e792:	2300      	movs	r3, #0
 800e794:	4619      	mov	r1, r3
 800e796:	4610      	mov	r0, r2
 800e798:	ec41 0b10 	vmov	d0, r0, r1
 800e79c:	b002      	add	sp, #8
 800e79e:	4770      	bx	lr
 800e7a0:	7ff00000 	.word	0x7ff00000

0800e7a4 <__b2d>:
 800e7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a8:	6906      	ldr	r6, [r0, #16]
 800e7aa:	f100 0814 	add.w	r8, r0, #20
 800e7ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e7b2:	1f37      	subs	r7, r6, #4
 800e7b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	f7ff fd53 	bl	800e264 <__hi0bits>
 800e7be:	f1c0 0320 	rsb	r3, r0, #32
 800e7c2:	280a      	cmp	r0, #10
 800e7c4:	600b      	str	r3, [r1, #0]
 800e7c6:	491b      	ldr	r1, [pc, #108]	@ (800e834 <__b2d+0x90>)
 800e7c8:	dc15      	bgt.n	800e7f6 <__b2d+0x52>
 800e7ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800e7ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800e7d2:	45b8      	cmp	r8, r7
 800e7d4:	ea43 0501 	orr.w	r5, r3, r1
 800e7d8:	bf34      	ite	cc
 800e7da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e7de:	2300      	movcs	r3, #0
 800e7e0:	3015      	adds	r0, #21
 800e7e2:	fa02 f000 	lsl.w	r0, r2, r0
 800e7e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e7ea:	4303      	orrs	r3, r0
 800e7ec:	461c      	mov	r4, r3
 800e7ee:	ec45 4b10 	vmov	d0, r4, r5
 800e7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f6:	45b8      	cmp	r8, r7
 800e7f8:	bf3a      	itte	cc
 800e7fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e7fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800e802:	2300      	movcs	r3, #0
 800e804:	380b      	subs	r0, #11
 800e806:	d012      	beq.n	800e82e <__b2d+0x8a>
 800e808:	f1c0 0120 	rsb	r1, r0, #32
 800e80c:	fa23 f401 	lsr.w	r4, r3, r1
 800e810:	4082      	lsls	r2, r0
 800e812:	4322      	orrs	r2, r4
 800e814:	4547      	cmp	r7, r8
 800e816:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e81a:	bf8c      	ite	hi
 800e81c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e820:	2200      	movls	r2, #0
 800e822:	4083      	lsls	r3, r0
 800e824:	40ca      	lsrs	r2, r1
 800e826:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e82a:	4313      	orrs	r3, r2
 800e82c:	e7de      	b.n	800e7ec <__b2d+0x48>
 800e82e:	ea42 0501 	orr.w	r5, r2, r1
 800e832:	e7db      	b.n	800e7ec <__b2d+0x48>
 800e834:	3ff00000 	.word	0x3ff00000

0800e838 <__d2b>:
 800e838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e83c:	460f      	mov	r7, r1
 800e83e:	2101      	movs	r1, #1
 800e840:	ec59 8b10 	vmov	r8, r9, d0
 800e844:	4616      	mov	r6, r2
 800e846:	f7ff fc1b 	bl	800e080 <_Balloc>
 800e84a:	4604      	mov	r4, r0
 800e84c:	b930      	cbnz	r0, 800e85c <__d2b+0x24>
 800e84e:	4602      	mov	r2, r0
 800e850:	4b23      	ldr	r3, [pc, #140]	@ (800e8e0 <__d2b+0xa8>)
 800e852:	4824      	ldr	r0, [pc, #144]	@ (800e8e4 <__d2b+0xac>)
 800e854:	f240 310f 	movw	r1, #783	@ 0x30f
 800e858:	f7fe f950 	bl	800cafc <__assert_func>
 800e85c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e864:	b10d      	cbz	r5, 800e86a <__d2b+0x32>
 800e866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e86a:	9301      	str	r3, [sp, #4]
 800e86c:	f1b8 0300 	subs.w	r3, r8, #0
 800e870:	d023      	beq.n	800e8ba <__d2b+0x82>
 800e872:	4668      	mov	r0, sp
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	f7ff fd14 	bl	800e2a2 <__lo0bits>
 800e87a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e87e:	b1d0      	cbz	r0, 800e8b6 <__d2b+0x7e>
 800e880:	f1c0 0320 	rsb	r3, r0, #32
 800e884:	fa02 f303 	lsl.w	r3, r2, r3
 800e888:	430b      	orrs	r3, r1
 800e88a:	40c2      	lsrs	r2, r0
 800e88c:	6163      	str	r3, [r4, #20]
 800e88e:	9201      	str	r2, [sp, #4]
 800e890:	9b01      	ldr	r3, [sp, #4]
 800e892:	61a3      	str	r3, [r4, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	bf0c      	ite	eq
 800e898:	2201      	moveq	r2, #1
 800e89a:	2202      	movne	r2, #2
 800e89c:	6122      	str	r2, [r4, #16]
 800e89e:	b1a5      	cbz	r5, 800e8ca <__d2b+0x92>
 800e8a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e8a4:	4405      	add	r5, r0
 800e8a6:	603d      	str	r5, [r7, #0]
 800e8a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e8ac:	6030      	str	r0, [r6, #0]
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	b003      	add	sp, #12
 800e8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8b6:	6161      	str	r1, [r4, #20]
 800e8b8:	e7ea      	b.n	800e890 <__d2b+0x58>
 800e8ba:	a801      	add	r0, sp, #4
 800e8bc:	f7ff fcf1 	bl	800e2a2 <__lo0bits>
 800e8c0:	9b01      	ldr	r3, [sp, #4]
 800e8c2:	6163      	str	r3, [r4, #20]
 800e8c4:	3020      	adds	r0, #32
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	e7e8      	b.n	800e89c <__d2b+0x64>
 800e8ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e8d2:	6038      	str	r0, [r7, #0]
 800e8d4:	6918      	ldr	r0, [r3, #16]
 800e8d6:	f7ff fcc5 	bl	800e264 <__hi0bits>
 800e8da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8de:	e7e5      	b.n	800e8ac <__d2b+0x74>
 800e8e0:	08011663 	.word	0x08011663
 800e8e4:	080116d4 	.word	0x080116d4

0800e8e8 <__ratio>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	b085      	sub	sp, #20
 800e8ee:	e9cd 1000 	strd	r1, r0, [sp]
 800e8f2:	a902      	add	r1, sp, #8
 800e8f4:	f7ff ff56 	bl	800e7a4 <__b2d>
 800e8f8:	9800      	ldr	r0, [sp, #0]
 800e8fa:	a903      	add	r1, sp, #12
 800e8fc:	ec55 4b10 	vmov	r4, r5, d0
 800e900:	f7ff ff50 	bl	800e7a4 <__b2d>
 800e904:	9b01      	ldr	r3, [sp, #4]
 800e906:	6919      	ldr	r1, [r3, #16]
 800e908:	9b00      	ldr	r3, [sp, #0]
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	1ac9      	subs	r1, r1, r3
 800e90e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	ec5b ab10 	vmov	sl, fp, d0
 800e918:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	bfce      	itee	gt
 800e920:	462a      	movgt	r2, r5
 800e922:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e926:	465a      	movle	r2, fp
 800e928:	462f      	mov	r7, r5
 800e92a:	46d9      	mov	r9, fp
 800e92c:	bfcc      	ite	gt
 800e92e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e932:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e936:	464b      	mov	r3, r9
 800e938:	4652      	mov	r2, sl
 800e93a:	4620      	mov	r0, r4
 800e93c:	4639      	mov	r1, r7
 800e93e:	f7f1 ff95 	bl	800086c <__aeabi_ddiv>
 800e942:	ec41 0b10 	vmov	d0, r0, r1
 800e946:	b005      	add	sp, #20
 800e948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e94c <__copybits>:
 800e94c:	3901      	subs	r1, #1
 800e94e:	b570      	push	{r4, r5, r6, lr}
 800e950:	1149      	asrs	r1, r1, #5
 800e952:	6914      	ldr	r4, [r2, #16]
 800e954:	3101      	adds	r1, #1
 800e956:	f102 0314 	add.w	r3, r2, #20
 800e95a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e95e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e962:	1f05      	subs	r5, r0, #4
 800e964:	42a3      	cmp	r3, r4
 800e966:	d30c      	bcc.n	800e982 <__copybits+0x36>
 800e968:	1aa3      	subs	r3, r4, r2
 800e96a:	3b11      	subs	r3, #17
 800e96c:	f023 0303 	bic.w	r3, r3, #3
 800e970:	3211      	adds	r2, #17
 800e972:	42a2      	cmp	r2, r4
 800e974:	bf88      	it	hi
 800e976:	2300      	movhi	r3, #0
 800e978:	4418      	add	r0, r3
 800e97a:	2300      	movs	r3, #0
 800e97c:	4288      	cmp	r0, r1
 800e97e:	d305      	bcc.n	800e98c <__copybits+0x40>
 800e980:	bd70      	pop	{r4, r5, r6, pc}
 800e982:	f853 6b04 	ldr.w	r6, [r3], #4
 800e986:	f845 6f04 	str.w	r6, [r5, #4]!
 800e98a:	e7eb      	b.n	800e964 <__copybits+0x18>
 800e98c:	f840 3b04 	str.w	r3, [r0], #4
 800e990:	e7f4      	b.n	800e97c <__copybits+0x30>

0800e992 <__any_on>:
 800e992:	f100 0214 	add.w	r2, r0, #20
 800e996:	6900      	ldr	r0, [r0, #16]
 800e998:	114b      	asrs	r3, r1, #5
 800e99a:	4298      	cmp	r0, r3
 800e99c:	b510      	push	{r4, lr}
 800e99e:	db11      	blt.n	800e9c4 <__any_on+0x32>
 800e9a0:	dd0a      	ble.n	800e9b8 <__any_on+0x26>
 800e9a2:	f011 011f 	ands.w	r1, r1, #31
 800e9a6:	d007      	beq.n	800e9b8 <__any_on+0x26>
 800e9a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e9ac:	fa24 f001 	lsr.w	r0, r4, r1
 800e9b0:	fa00 f101 	lsl.w	r1, r0, r1
 800e9b4:	428c      	cmp	r4, r1
 800e9b6:	d10b      	bne.n	800e9d0 <__any_on+0x3e>
 800e9b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d803      	bhi.n	800e9c8 <__any_on+0x36>
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	bd10      	pop	{r4, pc}
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	e7f7      	b.n	800e9b8 <__any_on+0x26>
 800e9c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9cc:	2900      	cmp	r1, #0
 800e9ce:	d0f5      	beq.n	800e9bc <__any_on+0x2a>
 800e9d0:	2001      	movs	r0, #1
 800e9d2:	e7f6      	b.n	800e9c2 <__any_on+0x30>

0800e9d4 <__ascii_wctomb>:
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	4608      	mov	r0, r1
 800e9d8:	b141      	cbz	r1, 800e9ec <__ascii_wctomb+0x18>
 800e9da:	2aff      	cmp	r2, #255	@ 0xff
 800e9dc:	d904      	bls.n	800e9e8 <__ascii_wctomb+0x14>
 800e9de:	228a      	movs	r2, #138	@ 0x8a
 800e9e0:	601a      	str	r2, [r3, #0]
 800e9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e6:	4770      	bx	lr
 800e9e8:	700a      	strb	r2, [r1, #0]
 800e9ea:	2001      	movs	r0, #1
 800e9ec:	4770      	bx	lr

0800e9ee <__ssputs_r>:
 800e9ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9f2:	688e      	ldr	r6, [r1, #8]
 800e9f4:	461f      	mov	r7, r3
 800e9f6:	42be      	cmp	r6, r7
 800e9f8:	680b      	ldr	r3, [r1, #0]
 800e9fa:	4682      	mov	sl, r0
 800e9fc:	460c      	mov	r4, r1
 800e9fe:	4690      	mov	r8, r2
 800ea00:	d82d      	bhi.n	800ea5e <__ssputs_r+0x70>
 800ea02:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea06:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ea0a:	d026      	beq.n	800ea5a <__ssputs_r+0x6c>
 800ea0c:	6965      	ldr	r5, [r4, #20]
 800ea0e:	6909      	ldr	r1, [r1, #16]
 800ea10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea14:	eba3 0901 	sub.w	r9, r3, r1
 800ea18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea1c:	1c7b      	adds	r3, r7, #1
 800ea1e:	444b      	add	r3, r9
 800ea20:	106d      	asrs	r5, r5, #1
 800ea22:	429d      	cmp	r5, r3
 800ea24:	bf38      	it	cc
 800ea26:	461d      	movcc	r5, r3
 800ea28:	0553      	lsls	r3, r2, #21
 800ea2a:	d527      	bpl.n	800ea7c <__ssputs_r+0x8e>
 800ea2c:	4629      	mov	r1, r5
 800ea2e:	f7ff fa89 	bl	800df44 <_malloc_r>
 800ea32:	4606      	mov	r6, r0
 800ea34:	b360      	cbz	r0, 800ea90 <__ssputs_r+0xa2>
 800ea36:	6921      	ldr	r1, [r4, #16]
 800ea38:	464a      	mov	r2, r9
 800ea3a:	f7fe f842 	bl	800cac2 <memcpy>
 800ea3e:	89a3      	ldrh	r3, [r4, #12]
 800ea40:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea48:	81a3      	strh	r3, [r4, #12]
 800ea4a:	6126      	str	r6, [r4, #16]
 800ea4c:	6165      	str	r5, [r4, #20]
 800ea4e:	444e      	add	r6, r9
 800ea50:	eba5 0509 	sub.w	r5, r5, r9
 800ea54:	6026      	str	r6, [r4, #0]
 800ea56:	60a5      	str	r5, [r4, #8]
 800ea58:	463e      	mov	r6, r7
 800ea5a:	42be      	cmp	r6, r7
 800ea5c:	d900      	bls.n	800ea60 <__ssputs_r+0x72>
 800ea5e:	463e      	mov	r6, r7
 800ea60:	6820      	ldr	r0, [r4, #0]
 800ea62:	4632      	mov	r2, r6
 800ea64:	4641      	mov	r1, r8
 800ea66:	f000 fd68 	bl	800f53a <memmove>
 800ea6a:	68a3      	ldr	r3, [r4, #8]
 800ea6c:	1b9b      	subs	r3, r3, r6
 800ea6e:	60a3      	str	r3, [r4, #8]
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	4433      	add	r3, r6
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	2000      	movs	r0, #0
 800ea78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea7c:	462a      	mov	r2, r5
 800ea7e:	f000 fda2 	bl	800f5c6 <_realloc_r>
 800ea82:	4606      	mov	r6, r0
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d1e0      	bne.n	800ea4a <__ssputs_r+0x5c>
 800ea88:	6921      	ldr	r1, [r4, #16]
 800ea8a:	4650      	mov	r0, sl
 800ea8c:	f7fe feac 	bl	800d7e8 <_free_r>
 800ea90:	230c      	movs	r3, #12
 800ea92:	f8ca 3000 	str.w	r3, [sl]
 800ea96:	89a3      	ldrh	r3, [r4, #12]
 800ea98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea9c:	81a3      	strh	r3, [r4, #12]
 800ea9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa2:	e7e9      	b.n	800ea78 <__ssputs_r+0x8a>

0800eaa4 <_svfiprintf_r>:
 800eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa8:	4698      	mov	r8, r3
 800eaaa:	898b      	ldrh	r3, [r1, #12]
 800eaac:	061b      	lsls	r3, r3, #24
 800eaae:	b09d      	sub	sp, #116	@ 0x74
 800eab0:	4607      	mov	r7, r0
 800eab2:	460d      	mov	r5, r1
 800eab4:	4614      	mov	r4, r2
 800eab6:	d510      	bpl.n	800eada <_svfiprintf_r+0x36>
 800eab8:	690b      	ldr	r3, [r1, #16]
 800eaba:	b973      	cbnz	r3, 800eada <_svfiprintf_r+0x36>
 800eabc:	2140      	movs	r1, #64	@ 0x40
 800eabe:	f7ff fa41 	bl	800df44 <_malloc_r>
 800eac2:	6028      	str	r0, [r5, #0]
 800eac4:	6128      	str	r0, [r5, #16]
 800eac6:	b930      	cbnz	r0, 800ead6 <_svfiprintf_r+0x32>
 800eac8:	230c      	movs	r3, #12
 800eaca:	603b      	str	r3, [r7, #0]
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295
 800ead0:	b01d      	add	sp, #116	@ 0x74
 800ead2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead6:	2340      	movs	r3, #64	@ 0x40
 800ead8:	616b      	str	r3, [r5, #20]
 800eada:	2300      	movs	r3, #0
 800eadc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eade:	2320      	movs	r3, #32
 800eae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eae4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eae8:	2330      	movs	r3, #48	@ 0x30
 800eaea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ec88 <_svfiprintf_r+0x1e4>
 800eaee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eaf2:	f04f 0901 	mov.w	r9, #1
 800eaf6:	4623      	mov	r3, r4
 800eaf8:	469a      	mov	sl, r3
 800eafa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eafe:	b10a      	cbz	r2, 800eb04 <_svfiprintf_r+0x60>
 800eb00:	2a25      	cmp	r2, #37	@ 0x25
 800eb02:	d1f9      	bne.n	800eaf8 <_svfiprintf_r+0x54>
 800eb04:	ebba 0b04 	subs.w	fp, sl, r4
 800eb08:	d00b      	beq.n	800eb22 <_svfiprintf_r+0x7e>
 800eb0a:	465b      	mov	r3, fp
 800eb0c:	4622      	mov	r2, r4
 800eb0e:	4629      	mov	r1, r5
 800eb10:	4638      	mov	r0, r7
 800eb12:	f7ff ff6c 	bl	800e9ee <__ssputs_r>
 800eb16:	3001      	adds	r0, #1
 800eb18:	f000 80a7 	beq.w	800ec6a <_svfiprintf_r+0x1c6>
 800eb1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb1e:	445a      	add	r2, fp
 800eb20:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb22:	f89a 3000 	ldrb.w	r3, [sl]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f000 809f 	beq.w	800ec6a <_svfiprintf_r+0x1c6>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb36:	f10a 0a01 	add.w	sl, sl, #1
 800eb3a:	9304      	str	r3, [sp, #16]
 800eb3c:	9307      	str	r3, [sp, #28]
 800eb3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb42:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb44:	4654      	mov	r4, sl
 800eb46:	2205      	movs	r2, #5
 800eb48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4c:	484e      	ldr	r0, [pc, #312]	@ (800ec88 <_svfiprintf_r+0x1e4>)
 800eb4e:	f7f1 fb4f 	bl	80001f0 <memchr>
 800eb52:	9a04      	ldr	r2, [sp, #16]
 800eb54:	b9d8      	cbnz	r0, 800eb8e <_svfiprintf_r+0xea>
 800eb56:	06d0      	lsls	r0, r2, #27
 800eb58:	bf44      	itt	mi
 800eb5a:	2320      	movmi	r3, #32
 800eb5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb60:	0711      	lsls	r1, r2, #28
 800eb62:	bf44      	itt	mi
 800eb64:	232b      	movmi	r3, #43	@ 0x2b
 800eb66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb6a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb70:	d015      	beq.n	800eb9e <_svfiprintf_r+0xfa>
 800eb72:	9a07      	ldr	r2, [sp, #28]
 800eb74:	4654      	mov	r4, sl
 800eb76:	2000      	movs	r0, #0
 800eb78:	f04f 0c0a 	mov.w	ip, #10
 800eb7c:	4621      	mov	r1, r4
 800eb7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb82:	3b30      	subs	r3, #48	@ 0x30
 800eb84:	2b09      	cmp	r3, #9
 800eb86:	d94b      	bls.n	800ec20 <_svfiprintf_r+0x17c>
 800eb88:	b1b0      	cbz	r0, 800ebb8 <_svfiprintf_r+0x114>
 800eb8a:	9207      	str	r2, [sp, #28]
 800eb8c:	e014      	b.n	800ebb8 <_svfiprintf_r+0x114>
 800eb8e:	eba0 0308 	sub.w	r3, r0, r8
 800eb92:	fa09 f303 	lsl.w	r3, r9, r3
 800eb96:	4313      	orrs	r3, r2
 800eb98:	9304      	str	r3, [sp, #16]
 800eb9a:	46a2      	mov	sl, r4
 800eb9c:	e7d2      	b.n	800eb44 <_svfiprintf_r+0xa0>
 800eb9e:	9b03      	ldr	r3, [sp, #12]
 800eba0:	1d19      	adds	r1, r3, #4
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	9103      	str	r1, [sp, #12]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	bfbb      	ittet	lt
 800ebaa:	425b      	neglt	r3, r3
 800ebac:	f042 0202 	orrlt.w	r2, r2, #2
 800ebb0:	9307      	strge	r3, [sp, #28]
 800ebb2:	9307      	strlt	r3, [sp, #28]
 800ebb4:	bfb8      	it	lt
 800ebb6:	9204      	strlt	r2, [sp, #16]
 800ebb8:	7823      	ldrb	r3, [r4, #0]
 800ebba:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebbc:	d10a      	bne.n	800ebd4 <_svfiprintf_r+0x130>
 800ebbe:	7863      	ldrb	r3, [r4, #1]
 800ebc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebc2:	d132      	bne.n	800ec2a <_svfiprintf_r+0x186>
 800ebc4:	9b03      	ldr	r3, [sp, #12]
 800ebc6:	1d1a      	adds	r2, r3, #4
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	9203      	str	r2, [sp, #12]
 800ebcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebd0:	3402      	adds	r4, #2
 800ebd2:	9305      	str	r3, [sp, #20]
 800ebd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ec98 <_svfiprintf_r+0x1f4>
 800ebd8:	7821      	ldrb	r1, [r4, #0]
 800ebda:	2203      	movs	r2, #3
 800ebdc:	4650      	mov	r0, sl
 800ebde:	f7f1 fb07 	bl	80001f0 <memchr>
 800ebe2:	b138      	cbz	r0, 800ebf4 <_svfiprintf_r+0x150>
 800ebe4:	9b04      	ldr	r3, [sp, #16]
 800ebe6:	eba0 000a 	sub.w	r0, r0, sl
 800ebea:	2240      	movs	r2, #64	@ 0x40
 800ebec:	4082      	lsls	r2, r0
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	3401      	adds	r4, #1
 800ebf2:	9304      	str	r3, [sp, #16]
 800ebf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebf8:	4824      	ldr	r0, [pc, #144]	@ (800ec8c <_svfiprintf_r+0x1e8>)
 800ebfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebfe:	2206      	movs	r2, #6
 800ec00:	f7f1 faf6 	bl	80001f0 <memchr>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	d036      	beq.n	800ec76 <_svfiprintf_r+0x1d2>
 800ec08:	4b21      	ldr	r3, [pc, #132]	@ (800ec90 <_svfiprintf_r+0x1ec>)
 800ec0a:	bb1b      	cbnz	r3, 800ec54 <_svfiprintf_r+0x1b0>
 800ec0c:	9b03      	ldr	r3, [sp, #12]
 800ec0e:	3307      	adds	r3, #7
 800ec10:	f023 0307 	bic.w	r3, r3, #7
 800ec14:	3308      	adds	r3, #8
 800ec16:	9303      	str	r3, [sp, #12]
 800ec18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec1a:	4433      	add	r3, r6
 800ec1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec1e:	e76a      	b.n	800eaf6 <_svfiprintf_r+0x52>
 800ec20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec24:	460c      	mov	r4, r1
 800ec26:	2001      	movs	r0, #1
 800ec28:	e7a8      	b.n	800eb7c <_svfiprintf_r+0xd8>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	3401      	adds	r4, #1
 800ec2e:	9305      	str	r3, [sp, #20]
 800ec30:	4619      	mov	r1, r3
 800ec32:	f04f 0c0a 	mov.w	ip, #10
 800ec36:	4620      	mov	r0, r4
 800ec38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec3c:	3a30      	subs	r2, #48	@ 0x30
 800ec3e:	2a09      	cmp	r2, #9
 800ec40:	d903      	bls.n	800ec4a <_svfiprintf_r+0x1a6>
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d0c6      	beq.n	800ebd4 <_svfiprintf_r+0x130>
 800ec46:	9105      	str	r1, [sp, #20]
 800ec48:	e7c4      	b.n	800ebd4 <_svfiprintf_r+0x130>
 800ec4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec4e:	4604      	mov	r4, r0
 800ec50:	2301      	movs	r3, #1
 800ec52:	e7f0      	b.n	800ec36 <_svfiprintf_r+0x192>
 800ec54:	ab03      	add	r3, sp, #12
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	462a      	mov	r2, r5
 800ec5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ec94 <_svfiprintf_r+0x1f0>)
 800ec5c:	a904      	add	r1, sp, #16
 800ec5e:	4638      	mov	r0, r7
 800ec60:	f7fc feca 	bl	800b9f8 <_printf_float>
 800ec64:	1c42      	adds	r2, r0, #1
 800ec66:	4606      	mov	r6, r0
 800ec68:	d1d6      	bne.n	800ec18 <_svfiprintf_r+0x174>
 800ec6a:	89ab      	ldrh	r3, [r5, #12]
 800ec6c:	065b      	lsls	r3, r3, #25
 800ec6e:	f53f af2d 	bmi.w	800eacc <_svfiprintf_r+0x28>
 800ec72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec74:	e72c      	b.n	800ead0 <_svfiprintf_r+0x2c>
 800ec76:	ab03      	add	r3, sp, #12
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	462a      	mov	r2, r5
 800ec7c:	4b05      	ldr	r3, [pc, #20]	@ (800ec94 <_svfiprintf_r+0x1f0>)
 800ec7e:	a904      	add	r1, sp, #16
 800ec80:	4638      	mov	r0, r7
 800ec82:	f7fd f951 	bl	800bf28 <_printf_i>
 800ec86:	e7ed      	b.n	800ec64 <_svfiprintf_r+0x1c0>
 800ec88:	0801172d 	.word	0x0801172d
 800ec8c:	08011737 	.word	0x08011737
 800ec90:	0800b9f9 	.word	0x0800b9f9
 800ec94:	0800e9ef 	.word	0x0800e9ef
 800ec98:	08011733 	.word	0x08011733

0800ec9c <_sungetc_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	1c4b      	adds	r3, r1, #1
 800eca0:	4614      	mov	r4, r2
 800eca2:	d103      	bne.n	800ecac <_sungetc_r+0x10>
 800eca4:	f04f 35ff 	mov.w	r5, #4294967295
 800eca8:	4628      	mov	r0, r5
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	8993      	ldrh	r3, [r2, #12]
 800ecae:	f023 0320 	bic.w	r3, r3, #32
 800ecb2:	8193      	strh	r3, [r2, #12]
 800ecb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ecb6:	6852      	ldr	r2, [r2, #4]
 800ecb8:	b2cd      	uxtb	r5, r1
 800ecba:	b18b      	cbz	r3, 800ece0 <_sungetc_r+0x44>
 800ecbc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	dd08      	ble.n	800ecd4 <_sungetc_r+0x38>
 800ecc2:	6823      	ldr	r3, [r4, #0]
 800ecc4:	1e5a      	subs	r2, r3, #1
 800ecc6:	6022      	str	r2, [r4, #0]
 800ecc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800eccc:	6863      	ldr	r3, [r4, #4]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	6063      	str	r3, [r4, #4]
 800ecd2:	e7e9      	b.n	800eca8 <_sungetc_r+0xc>
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	f000 fbf6 	bl	800f4c6 <__submore>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d0f1      	beq.n	800ecc2 <_sungetc_r+0x26>
 800ecde:	e7e1      	b.n	800eca4 <_sungetc_r+0x8>
 800ece0:	6921      	ldr	r1, [r4, #16]
 800ece2:	6823      	ldr	r3, [r4, #0]
 800ece4:	b151      	cbz	r1, 800ecfc <_sungetc_r+0x60>
 800ece6:	4299      	cmp	r1, r3
 800ece8:	d208      	bcs.n	800ecfc <_sungetc_r+0x60>
 800ecea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ecee:	42a9      	cmp	r1, r5
 800ecf0:	d104      	bne.n	800ecfc <_sungetc_r+0x60>
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	3201      	adds	r2, #1
 800ecf6:	6023      	str	r3, [r4, #0]
 800ecf8:	6062      	str	r2, [r4, #4]
 800ecfa:	e7d5      	b.n	800eca8 <_sungetc_r+0xc>
 800ecfc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800ed00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed04:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed06:	2303      	movs	r3, #3
 800ed08:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ed0a:	4623      	mov	r3, r4
 800ed0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ed10:	6023      	str	r3, [r4, #0]
 800ed12:	2301      	movs	r3, #1
 800ed14:	e7dc      	b.n	800ecd0 <_sungetc_r+0x34>

0800ed16 <__ssrefill_r>:
 800ed16:	b510      	push	{r4, lr}
 800ed18:	460c      	mov	r4, r1
 800ed1a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ed1c:	b169      	cbz	r1, 800ed3a <__ssrefill_r+0x24>
 800ed1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed22:	4299      	cmp	r1, r3
 800ed24:	d001      	beq.n	800ed2a <__ssrefill_r+0x14>
 800ed26:	f7fe fd5f 	bl	800d7e8 <_free_r>
 800ed2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed2c:	6063      	str	r3, [r4, #4]
 800ed2e:	2000      	movs	r0, #0
 800ed30:	6360      	str	r0, [r4, #52]	@ 0x34
 800ed32:	b113      	cbz	r3, 800ed3a <__ssrefill_r+0x24>
 800ed34:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ed36:	6023      	str	r3, [r4, #0]
 800ed38:	bd10      	pop	{r4, pc}
 800ed3a:	6923      	ldr	r3, [r4, #16]
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6063      	str	r3, [r4, #4]
 800ed42:	89a3      	ldrh	r3, [r4, #12]
 800ed44:	f043 0320 	orr.w	r3, r3, #32
 800ed48:	81a3      	strh	r3, [r4, #12]
 800ed4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4e:	e7f3      	b.n	800ed38 <__ssrefill_r+0x22>

0800ed50 <__ssvfiscanf_r>:
 800ed50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed54:	460c      	mov	r4, r1
 800ed56:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ed60:	49a6      	ldr	r1, [pc, #664]	@ (800effc <__ssvfiscanf_r+0x2ac>)
 800ed62:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ed64:	f10d 0804 	add.w	r8, sp, #4
 800ed68:	49a5      	ldr	r1, [pc, #660]	@ (800f000 <__ssvfiscanf_r+0x2b0>)
 800ed6a:	4fa6      	ldr	r7, [pc, #664]	@ (800f004 <__ssvfiscanf_r+0x2b4>)
 800ed6c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ed70:	4606      	mov	r6, r0
 800ed72:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	f892 9000 	ldrb.w	r9, [r2]
 800ed7a:	f1b9 0f00 	cmp.w	r9, #0
 800ed7e:	f000 8158 	beq.w	800f032 <__ssvfiscanf_r+0x2e2>
 800ed82:	f817 3009 	ldrb.w	r3, [r7, r9]
 800ed86:	f013 0308 	ands.w	r3, r3, #8
 800ed8a:	f102 0501 	add.w	r5, r2, #1
 800ed8e:	d019      	beq.n	800edc4 <__ssvfiscanf_r+0x74>
 800ed90:	6863      	ldr	r3, [r4, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	dd0f      	ble.n	800edb6 <__ssvfiscanf_r+0x66>
 800ed96:	6823      	ldr	r3, [r4, #0]
 800ed98:	781a      	ldrb	r2, [r3, #0]
 800ed9a:	5cba      	ldrb	r2, [r7, r2]
 800ed9c:	0712      	lsls	r2, r2, #28
 800ed9e:	d401      	bmi.n	800eda4 <__ssvfiscanf_r+0x54>
 800eda0:	462a      	mov	r2, r5
 800eda2:	e7e8      	b.n	800ed76 <__ssvfiscanf_r+0x26>
 800eda4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800eda6:	3201      	adds	r2, #1
 800eda8:	9245      	str	r2, [sp, #276]	@ 0x114
 800edaa:	6862      	ldr	r2, [r4, #4]
 800edac:	3301      	adds	r3, #1
 800edae:	3a01      	subs	r2, #1
 800edb0:	6062      	str	r2, [r4, #4]
 800edb2:	6023      	str	r3, [r4, #0]
 800edb4:	e7ec      	b.n	800ed90 <__ssvfiscanf_r+0x40>
 800edb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800edb8:	4621      	mov	r1, r4
 800edba:	4630      	mov	r0, r6
 800edbc:	4798      	blx	r3
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d0e9      	beq.n	800ed96 <__ssvfiscanf_r+0x46>
 800edc2:	e7ed      	b.n	800eda0 <__ssvfiscanf_r+0x50>
 800edc4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800edc8:	f040 8085 	bne.w	800eed6 <__ssvfiscanf_r+0x186>
 800edcc:	9341      	str	r3, [sp, #260]	@ 0x104
 800edce:	9343      	str	r3, [sp, #268]	@ 0x10c
 800edd0:	7853      	ldrb	r3, [r2, #1]
 800edd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800edd4:	bf02      	ittt	eq
 800edd6:	2310      	moveq	r3, #16
 800edd8:	1c95      	addeq	r5, r2, #2
 800edda:	9341      	streq	r3, [sp, #260]	@ 0x104
 800eddc:	220a      	movs	r2, #10
 800edde:	46aa      	mov	sl, r5
 800ede0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ede4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ede8:	2b09      	cmp	r3, #9
 800edea:	d91e      	bls.n	800ee2a <__ssvfiscanf_r+0xda>
 800edec:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800f008 <__ssvfiscanf_r+0x2b8>
 800edf0:	2203      	movs	r2, #3
 800edf2:	4658      	mov	r0, fp
 800edf4:	f7f1 f9fc 	bl	80001f0 <memchr>
 800edf8:	b138      	cbz	r0, 800ee0a <__ssvfiscanf_r+0xba>
 800edfa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800edfc:	eba0 000b 	sub.w	r0, r0, fp
 800ee00:	2301      	movs	r3, #1
 800ee02:	4083      	lsls	r3, r0
 800ee04:	4313      	orrs	r3, r2
 800ee06:	9341      	str	r3, [sp, #260]	@ 0x104
 800ee08:	4655      	mov	r5, sl
 800ee0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee0e:	2b78      	cmp	r3, #120	@ 0x78
 800ee10:	d806      	bhi.n	800ee20 <__ssvfiscanf_r+0xd0>
 800ee12:	2b57      	cmp	r3, #87	@ 0x57
 800ee14:	d810      	bhi.n	800ee38 <__ssvfiscanf_r+0xe8>
 800ee16:	2b25      	cmp	r3, #37	@ 0x25
 800ee18:	d05d      	beq.n	800eed6 <__ssvfiscanf_r+0x186>
 800ee1a:	d857      	bhi.n	800eecc <__ssvfiscanf_r+0x17c>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d075      	beq.n	800ef0c <__ssvfiscanf_r+0x1bc>
 800ee20:	2303      	movs	r3, #3
 800ee22:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ee24:	230a      	movs	r3, #10
 800ee26:	9342      	str	r3, [sp, #264]	@ 0x108
 800ee28:	e088      	b.n	800ef3c <__ssvfiscanf_r+0x1ec>
 800ee2a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ee2c:	fb02 1103 	mla	r1, r2, r3, r1
 800ee30:	3930      	subs	r1, #48	@ 0x30
 800ee32:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ee34:	4655      	mov	r5, sl
 800ee36:	e7d2      	b.n	800edde <__ssvfiscanf_r+0x8e>
 800ee38:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ee3c:	2a20      	cmp	r2, #32
 800ee3e:	d8ef      	bhi.n	800ee20 <__ssvfiscanf_r+0xd0>
 800ee40:	a101      	add	r1, pc, #4	@ (adr r1, 800ee48 <__ssvfiscanf_r+0xf8>)
 800ee42:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ee46:	bf00      	nop
 800ee48:	0800ef1b 	.word	0x0800ef1b
 800ee4c:	0800ee21 	.word	0x0800ee21
 800ee50:	0800ee21 	.word	0x0800ee21
 800ee54:	0800ef75 	.word	0x0800ef75
 800ee58:	0800ee21 	.word	0x0800ee21
 800ee5c:	0800ee21 	.word	0x0800ee21
 800ee60:	0800ee21 	.word	0x0800ee21
 800ee64:	0800ee21 	.word	0x0800ee21
 800ee68:	0800ee21 	.word	0x0800ee21
 800ee6c:	0800ee21 	.word	0x0800ee21
 800ee70:	0800ee21 	.word	0x0800ee21
 800ee74:	0800ef8b 	.word	0x0800ef8b
 800ee78:	0800ef71 	.word	0x0800ef71
 800ee7c:	0800eed3 	.word	0x0800eed3
 800ee80:	0800eed3 	.word	0x0800eed3
 800ee84:	0800eed3 	.word	0x0800eed3
 800ee88:	0800ee21 	.word	0x0800ee21
 800ee8c:	0800ef2d 	.word	0x0800ef2d
 800ee90:	0800ee21 	.word	0x0800ee21
 800ee94:	0800ee21 	.word	0x0800ee21
 800ee98:	0800ee21 	.word	0x0800ee21
 800ee9c:	0800ee21 	.word	0x0800ee21
 800eea0:	0800ef9b 	.word	0x0800ef9b
 800eea4:	0800ef35 	.word	0x0800ef35
 800eea8:	0800ef13 	.word	0x0800ef13
 800eeac:	0800ee21 	.word	0x0800ee21
 800eeb0:	0800ee21 	.word	0x0800ee21
 800eeb4:	0800ef97 	.word	0x0800ef97
 800eeb8:	0800ee21 	.word	0x0800ee21
 800eebc:	0800ef71 	.word	0x0800ef71
 800eec0:	0800ee21 	.word	0x0800ee21
 800eec4:	0800ee21 	.word	0x0800ee21
 800eec8:	0800ef1b 	.word	0x0800ef1b
 800eecc:	3b45      	subs	r3, #69	@ 0x45
 800eece:	2b02      	cmp	r3, #2
 800eed0:	d8a6      	bhi.n	800ee20 <__ssvfiscanf_r+0xd0>
 800eed2:	2305      	movs	r3, #5
 800eed4:	e031      	b.n	800ef3a <__ssvfiscanf_r+0x1ea>
 800eed6:	6863      	ldr	r3, [r4, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	dd0d      	ble.n	800eef8 <__ssvfiscanf_r+0x1a8>
 800eedc:	6823      	ldr	r3, [r4, #0]
 800eede:	781a      	ldrb	r2, [r3, #0]
 800eee0:	454a      	cmp	r2, r9
 800eee2:	f040 80a6 	bne.w	800f032 <__ssvfiscanf_r+0x2e2>
 800eee6:	3301      	adds	r3, #1
 800eee8:	6862      	ldr	r2, [r4, #4]
 800eeea:	6023      	str	r3, [r4, #0]
 800eeec:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800eeee:	3a01      	subs	r2, #1
 800eef0:	3301      	adds	r3, #1
 800eef2:	6062      	str	r2, [r4, #4]
 800eef4:	9345      	str	r3, [sp, #276]	@ 0x114
 800eef6:	e753      	b.n	800eda0 <__ssvfiscanf_r+0x50>
 800eef8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eefa:	4621      	mov	r1, r4
 800eefc:	4630      	mov	r0, r6
 800eefe:	4798      	blx	r3
 800ef00:	2800      	cmp	r0, #0
 800ef02:	d0eb      	beq.n	800eedc <__ssvfiscanf_r+0x18c>
 800ef04:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ef06:	2800      	cmp	r0, #0
 800ef08:	f040 808b 	bne.w	800f022 <__ssvfiscanf_r+0x2d2>
 800ef0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef10:	e08b      	b.n	800f02a <__ssvfiscanf_r+0x2da>
 800ef12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ef14:	f042 0220 	orr.w	r2, r2, #32
 800ef18:	9241      	str	r2, [sp, #260]	@ 0x104
 800ef1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ef1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ef20:	9241      	str	r2, [sp, #260]	@ 0x104
 800ef22:	2210      	movs	r2, #16
 800ef24:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef26:	9242      	str	r2, [sp, #264]	@ 0x108
 800ef28:	d902      	bls.n	800ef30 <__ssvfiscanf_r+0x1e0>
 800ef2a:	e005      	b.n	800ef38 <__ssvfiscanf_r+0x1e8>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ef30:	2303      	movs	r3, #3
 800ef32:	e002      	b.n	800ef3a <__ssvfiscanf_r+0x1ea>
 800ef34:	2308      	movs	r3, #8
 800ef36:	9342      	str	r3, [sp, #264]	@ 0x108
 800ef38:	2304      	movs	r3, #4
 800ef3a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ef3c:	6863      	ldr	r3, [r4, #4]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	dd39      	ble.n	800efb6 <__ssvfiscanf_r+0x266>
 800ef42:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ef44:	0659      	lsls	r1, r3, #25
 800ef46:	d404      	bmi.n	800ef52 <__ssvfiscanf_r+0x202>
 800ef48:	6823      	ldr	r3, [r4, #0]
 800ef4a:	781a      	ldrb	r2, [r3, #0]
 800ef4c:	5cba      	ldrb	r2, [r7, r2]
 800ef4e:	0712      	lsls	r2, r2, #28
 800ef50:	d438      	bmi.n	800efc4 <__ssvfiscanf_r+0x274>
 800ef52:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	dc47      	bgt.n	800efe8 <__ssvfiscanf_r+0x298>
 800ef58:	466b      	mov	r3, sp
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	a941      	add	r1, sp, #260	@ 0x104
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f000 f86c 	bl	800f03c <_scanf_chars>
 800ef64:	2801      	cmp	r0, #1
 800ef66:	d064      	beq.n	800f032 <__ssvfiscanf_r+0x2e2>
 800ef68:	2802      	cmp	r0, #2
 800ef6a:	f47f af19 	bne.w	800eda0 <__ssvfiscanf_r+0x50>
 800ef6e:	e7c9      	b.n	800ef04 <__ssvfiscanf_r+0x1b4>
 800ef70:	220a      	movs	r2, #10
 800ef72:	e7d7      	b.n	800ef24 <__ssvfiscanf_r+0x1d4>
 800ef74:	4629      	mov	r1, r5
 800ef76:	4640      	mov	r0, r8
 800ef78:	f000 fa6c 	bl	800f454 <__sccl>
 800ef7c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ef7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef82:	9341      	str	r3, [sp, #260]	@ 0x104
 800ef84:	4605      	mov	r5, r0
 800ef86:	2301      	movs	r3, #1
 800ef88:	e7d7      	b.n	800ef3a <__ssvfiscanf_r+0x1ea>
 800ef8a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ef8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef90:	9341      	str	r3, [sp, #260]	@ 0x104
 800ef92:	2300      	movs	r3, #0
 800ef94:	e7d1      	b.n	800ef3a <__ssvfiscanf_r+0x1ea>
 800ef96:	2302      	movs	r3, #2
 800ef98:	e7cf      	b.n	800ef3a <__ssvfiscanf_r+0x1ea>
 800ef9a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ef9c:	06c3      	lsls	r3, r0, #27
 800ef9e:	f53f aeff 	bmi.w	800eda0 <__ssvfiscanf_r+0x50>
 800efa2:	9b00      	ldr	r3, [sp, #0]
 800efa4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800efa6:	1d19      	adds	r1, r3, #4
 800efa8:	9100      	str	r1, [sp, #0]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	07c0      	lsls	r0, r0, #31
 800efae:	bf4c      	ite	mi
 800efb0:	801a      	strhmi	r2, [r3, #0]
 800efb2:	601a      	strpl	r2, [r3, #0]
 800efb4:	e6f4      	b.n	800eda0 <__ssvfiscanf_r+0x50>
 800efb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800efb8:	4621      	mov	r1, r4
 800efba:	4630      	mov	r0, r6
 800efbc:	4798      	blx	r3
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d0bf      	beq.n	800ef42 <__ssvfiscanf_r+0x1f2>
 800efc2:	e79f      	b.n	800ef04 <__ssvfiscanf_r+0x1b4>
 800efc4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800efc6:	3201      	adds	r2, #1
 800efc8:	9245      	str	r2, [sp, #276]	@ 0x114
 800efca:	6862      	ldr	r2, [r4, #4]
 800efcc:	3a01      	subs	r2, #1
 800efce:	2a00      	cmp	r2, #0
 800efd0:	6062      	str	r2, [r4, #4]
 800efd2:	dd02      	ble.n	800efda <__ssvfiscanf_r+0x28a>
 800efd4:	3301      	adds	r3, #1
 800efd6:	6023      	str	r3, [r4, #0]
 800efd8:	e7b6      	b.n	800ef48 <__ssvfiscanf_r+0x1f8>
 800efda:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800efdc:	4621      	mov	r1, r4
 800efde:	4630      	mov	r0, r6
 800efe0:	4798      	blx	r3
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d0b0      	beq.n	800ef48 <__ssvfiscanf_r+0x1f8>
 800efe6:	e78d      	b.n	800ef04 <__ssvfiscanf_r+0x1b4>
 800efe8:	2b04      	cmp	r3, #4
 800efea:	dc0f      	bgt.n	800f00c <__ssvfiscanf_r+0x2bc>
 800efec:	466b      	mov	r3, sp
 800efee:	4622      	mov	r2, r4
 800eff0:	a941      	add	r1, sp, #260	@ 0x104
 800eff2:	4630      	mov	r0, r6
 800eff4:	f000 f87c 	bl	800f0f0 <_scanf_i>
 800eff8:	e7b4      	b.n	800ef64 <__ssvfiscanf_r+0x214>
 800effa:	bf00      	nop
 800effc:	0800ec9d 	.word	0x0800ec9d
 800f000:	0800ed17 	.word	0x0800ed17
 800f004:	080117b1 	.word	0x080117b1
 800f008:	08011733 	.word	0x08011733
 800f00c:	4b0a      	ldr	r3, [pc, #40]	@ (800f038 <__ssvfiscanf_r+0x2e8>)
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f43f aec6 	beq.w	800eda0 <__ssvfiscanf_r+0x50>
 800f014:	466b      	mov	r3, sp
 800f016:	4622      	mov	r2, r4
 800f018:	a941      	add	r1, sp, #260	@ 0x104
 800f01a:	4630      	mov	r0, r6
 800f01c:	f7fd f8a2 	bl	800c164 <_scanf_float>
 800f020:	e7a0      	b.n	800ef64 <__ssvfiscanf_r+0x214>
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	065b      	lsls	r3, r3, #25
 800f026:	f53f af71 	bmi.w	800ef0c <__ssvfiscanf_r+0x1bc>
 800f02a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f032:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f034:	e7f9      	b.n	800f02a <__ssvfiscanf_r+0x2da>
 800f036:	bf00      	nop
 800f038:	0800c165 	.word	0x0800c165

0800f03c <_scanf_chars>:
 800f03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f040:	4615      	mov	r5, r2
 800f042:	688a      	ldr	r2, [r1, #8]
 800f044:	4680      	mov	r8, r0
 800f046:	460c      	mov	r4, r1
 800f048:	b932      	cbnz	r2, 800f058 <_scanf_chars+0x1c>
 800f04a:	698a      	ldr	r2, [r1, #24]
 800f04c:	2a00      	cmp	r2, #0
 800f04e:	bf14      	ite	ne
 800f050:	f04f 32ff 	movne.w	r2, #4294967295
 800f054:	2201      	moveq	r2, #1
 800f056:	608a      	str	r2, [r1, #8]
 800f058:	6822      	ldr	r2, [r4, #0]
 800f05a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f0ec <_scanf_chars+0xb0>
 800f05e:	06d1      	lsls	r1, r2, #27
 800f060:	bf5f      	itttt	pl
 800f062:	681a      	ldrpl	r2, [r3, #0]
 800f064:	1d11      	addpl	r1, r2, #4
 800f066:	6019      	strpl	r1, [r3, #0]
 800f068:	6816      	ldrpl	r6, [r2, #0]
 800f06a:	2700      	movs	r7, #0
 800f06c:	69a0      	ldr	r0, [r4, #24]
 800f06e:	b188      	cbz	r0, 800f094 <_scanf_chars+0x58>
 800f070:	2801      	cmp	r0, #1
 800f072:	d107      	bne.n	800f084 <_scanf_chars+0x48>
 800f074:	682b      	ldr	r3, [r5, #0]
 800f076:	781a      	ldrb	r2, [r3, #0]
 800f078:	6963      	ldr	r3, [r4, #20]
 800f07a:	5c9b      	ldrb	r3, [r3, r2]
 800f07c:	b953      	cbnz	r3, 800f094 <_scanf_chars+0x58>
 800f07e:	2f00      	cmp	r7, #0
 800f080:	d031      	beq.n	800f0e6 <_scanf_chars+0xaa>
 800f082:	e022      	b.n	800f0ca <_scanf_chars+0x8e>
 800f084:	2802      	cmp	r0, #2
 800f086:	d120      	bne.n	800f0ca <_scanf_chars+0x8e>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f090:	071b      	lsls	r3, r3, #28
 800f092:	d41a      	bmi.n	800f0ca <_scanf_chars+0x8e>
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	06da      	lsls	r2, r3, #27
 800f098:	bf5e      	ittt	pl
 800f09a:	682b      	ldrpl	r3, [r5, #0]
 800f09c:	781b      	ldrbpl	r3, [r3, #0]
 800f09e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f0a2:	682a      	ldr	r2, [r5, #0]
 800f0a4:	686b      	ldr	r3, [r5, #4]
 800f0a6:	3201      	adds	r2, #1
 800f0a8:	602a      	str	r2, [r5, #0]
 800f0aa:	68a2      	ldr	r2, [r4, #8]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	3a01      	subs	r2, #1
 800f0b0:	606b      	str	r3, [r5, #4]
 800f0b2:	3701      	adds	r7, #1
 800f0b4:	60a2      	str	r2, [r4, #8]
 800f0b6:	b142      	cbz	r2, 800f0ca <_scanf_chars+0x8e>
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	dcd7      	bgt.n	800f06c <_scanf_chars+0x30>
 800f0bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	4640      	mov	r0, r8
 800f0c4:	4798      	blx	r3
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d0d0      	beq.n	800f06c <_scanf_chars+0x30>
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	f013 0310 	ands.w	r3, r3, #16
 800f0d0:	d105      	bne.n	800f0de <_scanf_chars+0xa2>
 800f0d2:	68e2      	ldr	r2, [r4, #12]
 800f0d4:	3201      	adds	r2, #1
 800f0d6:	60e2      	str	r2, [r4, #12]
 800f0d8:	69a2      	ldr	r2, [r4, #24]
 800f0da:	b102      	cbz	r2, 800f0de <_scanf_chars+0xa2>
 800f0dc:	7033      	strb	r3, [r6, #0]
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	443b      	add	r3, r7
 800f0e2:	6123      	str	r3, [r4, #16]
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ea:	bf00      	nop
 800f0ec:	080117b1 	.word	0x080117b1

0800f0f0 <_scanf_i>:
 800f0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f4:	4698      	mov	r8, r3
 800f0f6:	4b74      	ldr	r3, [pc, #464]	@ (800f2c8 <_scanf_i+0x1d8>)
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	4682      	mov	sl, r0
 800f0fc:	4616      	mov	r6, r2
 800f0fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f102:	b087      	sub	sp, #28
 800f104:	ab03      	add	r3, sp, #12
 800f106:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f10a:	4b70      	ldr	r3, [pc, #448]	@ (800f2cc <_scanf_i+0x1dc>)
 800f10c:	69a1      	ldr	r1, [r4, #24]
 800f10e:	4a70      	ldr	r2, [pc, #448]	@ (800f2d0 <_scanf_i+0x1e0>)
 800f110:	2903      	cmp	r1, #3
 800f112:	bf08      	it	eq
 800f114:	461a      	moveq	r2, r3
 800f116:	68a3      	ldr	r3, [r4, #8]
 800f118:	9201      	str	r2, [sp, #4]
 800f11a:	1e5a      	subs	r2, r3, #1
 800f11c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f120:	bf88      	it	hi
 800f122:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f126:	4627      	mov	r7, r4
 800f128:	bf82      	ittt	hi
 800f12a:	eb03 0905 	addhi.w	r9, r3, r5
 800f12e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f132:	60a3      	strhi	r3, [r4, #8]
 800f134:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f138:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f13c:	bf98      	it	ls
 800f13e:	f04f 0900 	movls.w	r9, #0
 800f142:	6023      	str	r3, [r4, #0]
 800f144:	463d      	mov	r5, r7
 800f146:	f04f 0b00 	mov.w	fp, #0
 800f14a:	6831      	ldr	r1, [r6, #0]
 800f14c:	ab03      	add	r3, sp, #12
 800f14e:	7809      	ldrb	r1, [r1, #0]
 800f150:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f154:	2202      	movs	r2, #2
 800f156:	f7f1 f84b 	bl	80001f0 <memchr>
 800f15a:	b328      	cbz	r0, 800f1a8 <_scanf_i+0xb8>
 800f15c:	f1bb 0f01 	cmp.w	fp, #1
 800f160:	d159      	bne.n	800f216 <_scanf_i+0x126>
 800f162:	6862      	ldr	r2, [r4, #4]
 800f164:	b92a      	cbnz	r2, 800f172 <_scanf_i+0x82>
 800f166:	6822      	ldr	r2, [r4, #0]
 800f168:	2108      	movs	r1, #8
 800f16a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f16e:	6061      	str	r1, [r4, #4]
 800f170:	6022      	str	r2, [r4, #0]
 800f172:	6822      	ldr	r2, [r4, #0]
 800f174:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f178:	6022      	str	r2, [r4, #0]
 800f17a:	68a2      	ldr	r2, [r4, #8]
 800f17c:	1e51      	subs	r1, r2, #1
 800f17e:	60a1      	str	r1, [r4, #8]
 800f180:	b192      	cbz	r2, 800f1a8 <_scanf_i+0xb8>
 800f182:	6832      	ldr	r2, [r6, #0]
 800f184:	1c51      	adds	r1, r2, #1
 800f186:	6031      	str	r1, [r6, #0]
 800f188:	7812      	ldrb	r2, [r2, #0]
 800f18a:	f805 2b01 	strb.w	r2, [r5], #1
 800f18e:	6872      	ldr	r2, [r6, #4]
 800f190:	3a01      	subs	r2, #1
 800f192:	2a00      	cmp	r2, #0
 800f194:	6072      	str	r2, [r6, #4]
 800f196:	dc07      	bgt.n	800f1a8 <_scanf_i+0xb8>
 800f198:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f19c:	4631      	mov	r1, r6
 800f19e:	4650      	mov	r0, sl
 800f1a0:	4790      	blx	r2
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	f040 8085 	bne.w	800f2b2 <_scanf_i+0x1c2>
 800f1a8:	f10b 0b01 	add.w	fp, fp, #1
 800f1ac:	f1bb 0f03 	cmp.w	fp, #3
 800f1b0:	d1cb      	bne.n	800f14a <_scanf_i+0x5a>
 800f1b2:	6863      	ldr	r3, [r4, #4]
 800f1b4:	b90b      	cbnz	r3, 800f1ba <_scanf_i+0xca>
 800f1b6:	230a      	movs	r3, #10
 800f1b8:	6063      	str	r3, [r4, #4]
 800f1ba:	6863      	ldr	r3, [r4, #4]
 800f1bc:	4945      	ldr	r1, [pc, #276]	@ (800f2d4 <_scanf_i+0x1e4>)
 800f1be:	6960      	ldr	r0, [r4, #20]
 800f1c0:	1ac9      	subs	r1, r1, r3
 800f1c2:	f000 f947 	bl	800f454 <__sccl>
 800f1c6:	f04f 0b00 	mov.w	fp, #0
 800f1ca:	68a3      	ldr	r3, [r4, #8]
 800f1cc:	6822      	ldr	r2, [r4, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d03d      	beq.n	800f24e <_scanf_i+0x15e>
 800f1d2:	6831      	ldr	r1, [r6, #0]
 800f1d4:	6960      	ldr	r0, [r4, #20]
 800f1d6:	f891 c000 	ldrb.w	ip, [r1]
 800f1da:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d035      	beq.n	800f24e <_scanf_i+0x15e>
 800f1e2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f1e6:	d124      	bne.n	800f232 <_scanf_i+0x142>
 800f1e8:	0510      	lsls	r0, r2, #20
 800f1ea:	d522      	bpl.n	800f232 <_scanf_i+0x142>
 800f1ec:	f10b 0b01 	add.w	fp, fp, #1
 800f1f0:	f1b9 0f00 	cmp.w	r9, #0
 800f1f4:	d003      	beq.n	800f1fe <_scanf_i+0x10e>
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1fc:	60a3      	str	r3, [r4, #8]
 800f1fe:	6873      	ldr	r3, [r6, #4]
 800f200:	3b01      	subs	r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	6073      	str	r3, [r6, #4]
 800f206:	dd1b      	ble.n	800f240 <_scanf_i+0x150>
 800f208:	6833      	ldr	r3, [r6, #0]
 800f20a:	3301      	adds	r3, #1
 800f20c:	6033      	str	r3, [r6, #0]
 800f20e:	68a3      	ldr	r3, [r4, #8]
 800f210:	3b01      	subs	r3, #1
 800f212:	60a3      	str	r3, [r4, #8]
 800f214:	e7d9      	b.n	800f1ca <_scanf_i+0xda>
 800f216:	f1bb 0f02 	cmp.w	fp, #2
 800f21a:	d1ae      	bne.n	800f17a <_scanf_i+0x8a>
 800f21c:	6822      	ldr	r2, [r4, #0]
 800f21e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f222:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f226:	d1c4      	bne.n	800f1b2 <_scanf_i+0xc2>
 800f228:	2110      	movs	r1, #16
 800f22a:	6061      	str	r1, [r4, #4]
 800f22c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f230:	e7a2      	b.n	800f178 <_scanf_i+0x88>
 800f232:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f236:	6022      	str	r2, [r4, #0]
 800f238:	780b      	ldrb	r3, [r1, #0]
 800f23a:	f805 3b01 	strb.w	r3, [r5], #1
 800f23e:	e7de      	b.n	800f1fe <_scanf_i+0x10e>
 800f240:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f244:	4631      	mov	r1, r6
 800f246:	4650      	mov	r0, sl
 800f248:	4798      	blx	r3
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d0df      	beq.n	800f20e <_scanf_i+0x11e>
 800f24e:	6823      	ldr	r3, [r4, #0]
 800f250:	05d9      	lsls	r1, r3, #23
 800f252:	d50d      	bpl.n	800f270 <_scanf_i+0x180>
 800f254:	42bd      	cmp	r5, r7
 800f256:	d909      	bls.n	800f26c <_scanf_i+0x17c>
 800f258:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f25c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f260:	4632      	mov	r2, r6
 800f262:	4650      	mov	r0, sl
 800f264:	4798      	blx	r3
 800f266:	f105 39ff 	add.w	r9, r5, #4294967295
 800f26a:	464d      	mov	r5, r9
 800f26c:	42bd      	cmp	r5, r7
 800f26e:	d028      	beq.n	800f2c2 <_scanf_i+0x1d2>
 800f270:	6822      	ldr	r2, [r4, #0]
 800f272:	f012 0210 	ands.w	r2, r2, #16
 800f276:	d113      	bne.n	800f2a0 <_scanf_i+0x1b0>
 800f278:	702a      	strb	r2, [r5, #0]
 800f27a:	6863      	ldr	r3, [r4, #4]
 800f27c:	9e01      	ldr	r6, [sp, #4]
 800f27e:	4639      	mov	r1, r7
 800f280:	4650      	mov	r0, sl
 800f282:	47b0      	blx	r6
 800f284:	f8d8 3000 	ldr.w	r3, [r8]
 800f288:	6821      	ldr	r1, [r4, #0]
 800f28a:	1d1a      	adds	r2, r3, #4
 800f28c:	f8c8 2000 	str.w	r2, [r8]
 800f290:	f011 0f20 	tst.w	r1, #32
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	d00f      	beq.n	800f2b8 <_scanf_i+0x1c8>
 800f298:	6018      	str	r0, [r3, #0]
 800f29a:	68e3      	ldr	r3, [r4, #12]
 800f29c:	3301      	adds	r3, #1
 800f29e:	60e3      	str	r3, [r4, #12]
 800f2a0:	6923      	ldr	r3, [r4, #16]
 800f2a2:	1bed      	subs	r5, r5, r7
 800f2a4:	445d      	add	r5, fp
 800f2a6:	442b      	add	r3, r5
 800f2a8:	6123      	str	r3, [r4, #16]
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	b007      	add	sp, #28
 800f2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b2:	f04f 0b00 	mov.w	fp, #0
 800f2b6:	e7ca      	b.n	800f24e <_scanf_i+0x15e>
 800f2b8:	07ca      	lsls	r2, r1, #31
 800f2ba:	bf4c      	ite	mi
 800f2bc:	8018      	strhmi	r0, [r3, #0]
 800f2be:	6018      	strpl	r0, [r3, #0]
 800f2c0:	e7eb      	b.n	800f29a <_scanf_i+0x1aa>
 800f2c2:	2001      	movs	r0, #1
 800f2c4:	e7f2      	b.n	800f2ac <_scanf_i+0x1bc>
 800f2c6:	bf00      	nop
 800f2c8:	080114bc 	.word	0x080114bc
 800f2cc:	0800b8a1 	.word	0x0800b8a1
 800f2d0:	0800f701 	.word	0x0800f701
 800f2d4:	0801174e 	.word	0x0801174e

0800f2d8 <__sflush_r>:
 800f2d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e0:	0716      	lsls	r6, r2, #28
 800f2e2:	4605      	mov	r5, r0
 800f2e4:	460c      	mov	r4, r1
 800f2e6:	d454      	bmi.n	800f392 <__sflush_r+0xba>
 800f2e8:	684b      	ldr	r3, [r1, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	dc02      	bgt.n	800f2f4 <__sflush_r+0x1c>
 800f2ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	dd48      	ble.n	800f386 <__sflush_r+0xae>
 800f2f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2f6:	2e00      	cmp	r6, #0
 800f2f8:	d045      	beq.n	800f386 <__sflush_r+0xae>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f300:	682f      	ldr	r7, [r5, #0]
 800f302:	6a21      	ldr	r1, [r4, #32]
 800f304:	602b      	str	r3, [r5, #0]
 800f306:	d030      	beq.n	800f36a <__sflush_r+0x92>
 800f308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	0759      	lsls	r1, r3, #29
 800f30e:	d505      	bpl.n	800f31c <__sflush_r+0x44>
 800f310:	6863      	ldr	r3, [r4, #4]
 800f312:	1ad2      	subs	r2, r2, r3
 800f314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f316:	b10b      	cbz	r3, 800f31c <__sflush_r+0x44>
 800f318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f31a:	1ad2      	subs	r2, r2, r3
 800f31c:	2300      	movs	r3, #0
 800f31e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f320:	6a21      	ldr	r1, [r4, #32]
 800f322:	4628      	mov	r0, r5
 800f324:	47b0      	blx	r6
 800f326:	1c43      	adds	r3, r0, #1
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	d106      	bne.n	800f33a <__sflush_r+0x62>
 800f32c:	6829      	ldr	r1, [r5, #0]
 800f32e:	291d      	cmp	r1, #29
 800f330:	d82b      	bhi.n	800f38a <__sflush_r+0xb2>
 800f332:	4a2a      	ldr	r2, [pc, #168]	@ (800f3dc <__sflush_r+0x104>)
 800f334:	40ca      	lsrs	r2, r1
 800f336:	07d6      	lsls	r6, r2, #31
 800f338:	d527      	bpl.n	800f38a <__sflush_r+0xb2>
 800f33a:	2200      	movs	r2, #0
 800f33c:	6062      	str	r2, [r4, #4]
 800f33e:	04d9      	lsls	r1, r3, #19
 800f340:	6922      	ldr	r2, [r4, #16]
 800f342:	6022      	str	r2, [r4, #0]
 800f344:	d504      	bpl.n	800f350 <__sflush_r+0x78>
 800f346:	1c42      	adds	r2, r0, #1
 800f348:	d101      	bne.n	800f34e <__sflush_r+0x76>
 800f34a:	682b      	ldr	r3, [r5, #0]
 800f34c:	b903      	cbnz	r3, 800f350 <__sflush_r+0x78>
 800f34e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f352:	602f      	str	r7, [r5, #0]
 800f354:	b1b9      	cbz	r1, 800f386 <__sflush_r+0xae>
 800f356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f35a:	4299      	cmp	r1, r3
 800f35c:	d002      	beq.n	800f364 <__sflush_r+0x8c>
 800f35e:	4628      	mov	r0, r5
 800f360:	f7fe fa42 	bl	800d7e8 <_free_r>
 800f364:	2300      	movs	r3, #0
 800f366:	6363      	str	r3, [r4, #52]	@ 0x34
 800f368:	e00d      	b.n	800f386 <__sflush_r+0xae>
 800f36a:	2301      	movs	r3, #1
 800f36c:	4628      	mov	r0, r5
 800f36e:	47b0      	blx	r6
 800f370:	4602      	mov	r2, r0
 800f372:	1c50      	adds	r0, r2, #1
 800f374:	d1c9      	bne.n	800f30a <__sflush_r+0x32>
 800f376:	682b      	ldr	r3, [r5, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d0c6      	beq.n	800f30a <__sflush_r+0x32>
 800f37c:	2b1d      	cmp	r3, #29
 800f37e:	d001      	beq.n	800f384 <__sflush_r+0xac>
 800f380:	2b16      	cmp	r3, #22
 800f382:	d11e      	bne.n	800f3c2 <__sflush_r+0xea>
 800f384:	602f      	str	r7, [r5, #0]
 800f386:	2000      	movs	r0, #0
 800f388:	e022      	b.n	800f3d0 <__sflush_r+0xf8>
 800f38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f38e:	b21b      	sxth	r3, r3
 800f390:	e01b      	b.n	800f3ca <__sflush_r+0xf2>
 800f392:	690f      	ldr	r7, [r1, #16]
 800f394:	2f00      	cmp	r7, #0
 800f396:	d0f6      	beq.n	800f386 <__sflush_r+0xae>
 800f398:	0793      	lsls	r3, r2, #30
 800f39a:	680e      	ldr	r6, [r1, #0]
 800f39c:	bf08      	it	eq
 800f39e:	694b      	ldreq	r3, [r1, #20]
 800f3a0:	600f      	str	r7, [r1, #0]
 800f3a2:	bf18      	it	ne
 800f3a4:	2300      	movne	r3, #0
 800f3a6:	eba6 0807 	sub.w	r8, r6, r7
 800f3aa:	608b      	str	r3, [r1, #8]
 800f3ac:	f1b8 0f00 	cmp.w	r8, #0
 800f3b0:	dde9      	ble.n	800f386 <__sflush_r+0xae>
 800f3b2:	6a21      	ldr	r1, [r4, #32]
 800f3b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f3b6:	4643      	mov	r3, r8
 800f3b8:	463a      	mov	r2, r7
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	47b0      	blx	r6
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	dc08      	bgt.n	800f3d4 <__sflush_r+0xfc>
 800f3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3ca:	81a3      	strh	r3, [r4, #12]
 800f3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3d4:	4407      	add	r7, r0
 800f3d6:	eba8 0800 	sub.w	r8, r8, r0
 800f3da:	e7e7      	b.n	800f3ac <__sflush_r+0xd4>
 800f3dc:	20400001 	.word	0x20400001

0800f3e0 <_fflush_r>:
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	690b      	ldr	r3, [r1, #16]
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	460c      	mov	r4, r1
 800f3e8:	b913      	cbnz	r3, 800f3f0 <_fflush_r+0x10>
 800f3ea:	2500      	movs	r5, #0
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	bd38      	pop	{r3, r4, r5, pc}
 800f3f0:	b118      	cbz	r0, 800f3fa <_fflush_r+0x1a>
 800f3f2:	6a03      	ldr	r3, [r0, #32]
 800f3f4:	b90b      	cbnz	r3, 800f3fa <_fflush_r+0x1a>
 800f3f6:	f7fd f94f 	bl	800c698 <__sinit>
 800f3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d0f3      	beq.n	800f3ea <_fflush_r+0xa>
 800f402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f404:	07d0      	lsls	r0, r2, #31
 800f406:	d404      	bmi.n	800f412 <_fflush_r+0x32>
 800f408:	0599      	lsls	r1, r3, #22
 800f40a:	d402      	bmi.n	800f412 <_fflush_r+0x32>
 800f40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f40e:	f7fd fb56 	bl	800cabe <__retarget_lock_acquire_recursive>
 800f412:	4628      	mov	r0, r5
 800f414:	4621      	mov	r1, r4
 800f416:	f7ff ff5f 	bl	800f2d8 <__sflush_r>
 800f41a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f41c:	07da      	lsls	r2, r3, #31
 800f41e:	4605      	mov	r5, r0
 800f420:	d4e4      	bmi.n	800f3ec <_fflush_r+0xc>
 800f422:	89a3      	ldrh	r3, [r4, #12]
 800f424:	059b      	lsls	r3, r3, #22
 800f426:	d4e1      	bmi.n	800f3ec <_fflush_r+0xc>
 800f428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f42a:	f7fd fb49 	bl	800cac0 <__retarget_lock_release_recursive>
 800f42e:	e7dd      	b.n	800f3ec <_fflush_r+0xc>

0800f430 <fiprintf>:
 800f430:	b40e      	push	{r1, r2, r3}
 800f432:	b503      	push	{r0, r1, lr}
 800f434:	4601      	mov	r1, r0
 800f436:	ab03      	add	r3, sp, #12
 800f438:	4805      	ldr	r0, [pc, #20]	@ (800f450 <fiprintf+0x20>)
 800f43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f43e:	6800      	ldr	r0, [r0, #0]
 800f440:	9301      	str	r3, [sp, #4]
 800f442:	f000 f989 	bl	800f758 <_vfiprintf_r>
 800f446:	b002      	add	sp, #8
 800f448:	f85d eb04 	ldr.w	lr, [sp], #4
 800f44c:	b003      	add	sp, #12
 800f44e:	4770      	bx	lr
 800f450:	20000430 	.word	0x20000430

0800f454 <__sccl>:
 800f454:	b570      	push	{r4, r5, r6, lr}
 800f456:	780b      	ldrb	r3, [r1, #0]
 800f458:	4604      	mov	r4, r0
 800f45a:	2b5e      	cmp	r3, #94	@ 0x5e
 800f45c:	bf0b      	itete	eq
 800f45e:	784b      	ldrbeq	r3, [r1, #1]
 800f460:	1c4a      	addne	r2, r1, #1
 800f462:	1c8a      	addeq	r2, r1, #2
 800f464:	2100      	movne	r1, #0
 800f466:	bf08      	it	eq
 800f468:	2101      	moveq	r1, #1
 800f46a:	3801      	subs	r0, #1
 800f46c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f470:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f474:	42a8      	cmp	r0, r5
 800f476:	d1fb      	bne.n	800f470 <__sccl+0x1c>
 800f478:	b90b      	cbnz	r3, 800f47e <__sccl+0x2a>
 800f47a:	1e50      	subs	r0, r2, #1
 800f47c:	bd70      	pop	{r4, r5, r6, pc}
 800f47e:	f081 0101 	eor.w	r1, r1, #1
 800f482:	54e1      	strb	r1, [r4, r3]
 800f484:	4610      	mov	r0, r2
 800f486:	4602      	mov	r2, r0
 800f488:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f48c:	2d2d      	cmp	r5, #45	@ 0x2d
 800f48e:	d005      	beq.n	800f49c <__sccl+0x48>
 800f490:	2d5d      	cmp	r5, #93	@ 0x5d
 800f492:	d016      	beq.n	800f4c2 <__sccl+0x6e>
 800f494:	2d00      	cmp	r5, #0
 800f496:	d0f1      	beq.n	800f47c <__sccl+0x28>
 800f498:	462b      	mov	r3, r5
 800f49a:	e7f2      	b.n	800f482 <__sccl+0x2e>
 800f49c:	7846      	ldrb	r6, [r0, #1]
 800f49e:	2e5d      	cmp	r6, #93	@ 0x5d
 800f4a0:	d0fa      	beq.n	800f498 <__sccl+0x44>
 800f4a2:	42b3      	cmp	r3, r6
 800f4a4:	dcf8      	bgt.n	800f498 <__sccl+0x44>
 800f4a6:	3002      	adds	r0, #2
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	3201      	adds	r2, #1
 800f4ac:	4296      	cmp	r6, r2
 800f4ae:	54a1      	strb	r1, [r4, r2]
 800f4b0:	dcfb      	bgt.n	800f4aa <__sccl+0x56>
 800f4b2:	1af2      	subs	r2, r6, r3
 800f4b4:	3a01      	subs	r2, #1
 800f4b6:	1c5d      	adds	r5, r3, #1
 800f4b8:	42b3      	cmp	r3, r6
 800f4ba:	bfa8      	it	ge
 800f4bc:	2200      	movge	r2, #0
 800f4be:	18ab      	adds	r3, r5, r2
 800f4c0:	e7e1      	b.n	800f486 <__sccl+0x32>
 800f4c2:	4610      	mov	r0, r2
 800f4c4:	e7da      	b.n	800f47c <__sccl+0x28>

0800f4c6 <__submore>:
 800f4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ca:	460c      	mov	r4, r1
 800f4cc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f4ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4d2:	4299      	cmp	r1, r3
 800f4d4:	d11d      	bne.n	800f512 <__submore+0x4c>
 800f4d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f4da:	f7fe fd33 	bl	800df44 <_malloc_r>
 800f4de:	b918      	cbnz	r0, 800f4e8 <__submore+0x22>
 800f4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f4ee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f4f2:	6360      	str	r0, [r4, #52]	@ 0x34
 800f4f4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f4f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f4fc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f500:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f504:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f508:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f50c:	6020      	str	r0, [r4, #0]
 800f50e:	2000      	movs	r0, #0
 800f510:	e7e8      	b.n	800f4e4 <__submore+0x1e>
 800f512:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f514:	0077      	lsls	r7, r6, #1
 800f516:	463a      	mov	r2, r7
 800f518:	f000 f855 	bl	800f5c6 <_realloc_r>
 800f51c:	4605      	mov	r5, r0
 800f51e:	2800      	cmp	r0, #0
 800f520:	d0de      	beq.n	800f4e0 <__submore+0x1a>
 800f522:	eb00 0806 	add.w	r8, r0, r6
 800f526:	4601      	mov	r1, r0
 800f528:	4632      	mov	r2, r6
 800f52a:	4640      	mov	r0, r8
 800f52c:	f7fd fac9 	bl	800cac2 <memcpy>
 800f530:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f534:	f8c4 8000 	str.w	r8, [r4]
 800f538:	e7e9      	b.n	800f50e <__submore+0x48>

0800f53a <memmove>:
 800f53a:	4288      	cmp	r0, r1
 800f53c:	b510      	push	{r4, lr}
 800f53e:	eb01 0402 	add.w	r4, r1, r2
 800f542:	d902      	bls.n	800f54a <memmove+0x10>
 800f544:	4284      	cmp	r4, r0
 800f546:	4623      	mov	r3, r4
 800f548:	d807      	bhi.n	800f55a <memmove+0x20>
 800f54a:	1e43      	subs	r3, r0, #1
 800f54c:	42a1      	cmp	r1, r4
 800f54e:	d008      	beq.n	800f562 <memmove+0x28>
 800f550:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f554:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f558:	e7f8      	b.n	800f54c <memmove+0x12>
 800f55a:	4402      	add	r2, r0
 800f55c:	4601      	mov	r1, r0
 800f55e:	428a      	cmp	r2, r1
 800f560:	d100      	bne.n	800f564 <memmove+0x2a>
 800f562:	bd10      	pop	{r4, pc}
 800f564:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f568:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f56c:	e7f7      	b.n	800f55e <memmove+0x24>
	...

0800f570 <_sbrk_r>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	4d06      	ldr	r5, [pc, #24]	@ (800f58c <_sbrk_r+0x1c>)
 800f574:	2300      	movs	r3, #0
 800f576:	4604      	mov	r4, r0
 800f578:	4608      	mov	r0, r1
 800f57a:	602b      	str	r3, [r5, #0]
 800f57c:	f7f4 fb2e 	bl	8003bdc <_sbrk>
 800f580:	1c43      	adds	r3, r0, #1
 800f582:	d102      	bne.n	800f58a <_sbrk_r+0x1a>
 800f584:	682b      	ldr	r3, [r5, #0]
 800f586:	b103      	cbz	r3, 800f58a <_sbrk_r+0x1a>
 800f588:	6023      	str	r3, [r4, #0]
 800f58a:	bd38      	pop	{r3, r4, r5, pc}
 800f58c:	20005e5c 	.word	0x20005e5c

0800f590 <abort>:
 800f590:	b508      	push	{r3, lr}
 800f592:	2006      	movs	r0, #6
 800f594:	f000 fab4 	bl	800fb00 <raise>
 800f598:	2001      	movs	r0, #1
 800f59a:	f7f4 faa7 	bl	8003aec <_exit>

0800f59e <_calloc_r>:
 800f59e:	b570      	push	{r4, r5, r6, lr}
 800f5a0:	fba1 5402 	umull	r5, r4, r1, r2
 800f5a4:	b934      	cbnz	r4, 800f5b4 <_calloc_r+0x16>
 800f5a6:	4629      	mov	r1, r5
 800f5a8:	f7fe fccc 	bl	800df44 <_malloc_r>
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	b928      	cbnz	r0, 800f5bc <_calloc_r+0x1e>
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	bd70      	pop	{r4, r5, r6, pc}
 800f5b4:	220c      	movs	r2, #12
 800f5b6:	6002      	str	r2, [r0, #0]
 800f5b8:	2600      	movs	r6, #0
 800f5ba:	e7f9      	b.n	800f5b0 <_calloc_r+0x12>
 800f5bc:	462a      	mov	r2, r5
 800f5be:	4621      	mov	r1, r4
 800f5c0:	f7fd f933 	bl	800c82a <memset>
 800f5c4:	e7f4      	b.n	800f5b0 <_calloc_r+0x12>

0800f5c6 <_realloc_r>:
 800f5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ca:	4607      	mov	r7, r0
 800f5cc:	4614      	mov	r4, r2
 800f5ce:	460d      	mov	r5, r1
 800f5d0:	b921      	cbnz	r1, 800f5dc <_realloc_r+0x16>
 800f5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d6:	4611      	mov	r1, r2
 800f5d8:	f7fe bcb4 	b.w	800df44 <_malloc_r>
 800f5dc:	b92a      	cbnz	r2, 800f5ea <_realloc_r+0x24>
 800f5de:	f7fe f903 	bl	800d7e8 <_free_r>
 800f5e2:	4625      	mov	r5, r4
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ea:	f000 faa5 	bl	800fb38 <_malloc_usable_size_r>
 800f5ee:	4284      	cmp	r4, r0
 800f5f0:	4606      	mov	r6, r0
 800f5f2:	d802      	bhi.n	800f5fa <_realloc_r+0x34>
 800f5f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5f8:	d8f4      	bhi.n	800f5e4 <_realloc_r+0x1e>
 800f5fa:	4621      	mov	r1, r4
 800f5fc:	4638      	mov	r0, r7
 800f5fe:	f7fe fca1 	bl	800df44 <_malloc_r>
 800f602:	4680      	mov	r8, r0
 800f604:	b908      	cbnz	r0, 800f60a <_realloc_r+0x44>
 800f606:	4645      	mov	r5, r8
 800f608:	e7ec      	b.n	800f5e4 <_realloc_r+0x1e>
 800f60a:	42b4      	cmp	r4, r6
 800f60c:	4622      	mov	r2, r4
 800f60e:	4629      	mov	r1, r5
 800f610:	bf28      	it	cs
 800f612:	4632      	movcs	r2, r6
 800f614:	f7fd fa55 	bl	800cac2 <memcpy>
 800f618:	4629      	mov	r1, r5
 800f61a:	4638      	mov	r0, r7
 800f61c:	f7fe f8e4 	bl	800d7e8 <_free_r>
 800f620:	e7f1      	b.n	800f606 <_realloc_r+0x40>
	...

0800f624 <_strtoul_l.isra.0>:
 800f624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f628:	4e34      	ldr	r6, [pc, #208]	@ (800f6fc <_strtoul_l.isra.0+0xd8>)
 800f62a:	4686      	mov	lr, r0
 800f62c:	460d      	mov	r5, r1
 800f62e:	4628      	mov	r0, r5
 800f630:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f634:	5d37      	ldrb	r7, [r6, r4]
 800f636:	f017 0708 	ands.w	r7, r7, #8
 800f63a:	d1f8      	bne.n	800f62e <_strtoul_l.isra.0+0xa>
 800f63c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f63e:	d110      	bne.n	800f662 <_strtoul_l.isra.0+0x3e>
 800f640:	782c      	ldrb	r4, [r5, #0]
 800f642:	2701      	movs	r7, #1
 800f644:	1c85      	adds	r5, r0, #2
 800f646:	f033 0010 	bics.w	r0, r3, #16
 800f64a:	d115      	bne.n	800f678 <_strtoul_l.isra.0+0x54>
 800f64c:	2c30      	cmp	r4, #48	@ 0x30
 800f64e:	d10d      	bne.n	800f66c <_strtoul_l.isra.0+0x48>
 800f650:	7828      	ldrb	r0, [r5, #0]
 800f652:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f656:	2858      	cmp	r0, #88	@ 0x58
 800f658:	d108      	bne.n	800f66c <_strtoul_l.isra.0+0x48>
 800f65a:	786c      	ldrb	r4, [r5, #1]
 800f65c:	3502      	adds	r5, #2
 800f65e:	2310      	movs	r3, #16
 800f660:	e00a      	b.n	800f678 <_strtoul_l.isra.0+0x54>
 800f662:	2c2b      	cmp	r4, #43	@ 0x2b
 800f664:	bf04      	itt	eq
 800f666:	782c      	ldrbeq	r4, [r5, #0]
 800f668:	1c85      	addeq	r5, r0, #2
 800f66a:	e7ec      	b.n	800f646 <_strtoul_l.isra.0+0x22>
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1f6      	bne.n	800f65e <_strtoul_l.isra.0+0x3a>
 800f670:	2c30      	cmp	r4, #48	@ 0x30
 800f672:	bf14      	ite	ne
 800f674:	230a      	movne	r3, #10
 800f676:	2308      	moveq	r3, #8
 800f678:	f04f 38ff 	mov.w	r8, #4294967295
 800f67c:	2600      	movs	r6, #0
 800f67e:	fbb8 f8f3 	udiv	r8, r8, r3
 800f682:	fb03 f908 	mul.w	r9, r3, r8
 800f686:	ea6f 0909 	mvn.w	r9, r9
 800f68a:	4630      	mov	r0, r6
 800f68c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f690:	f1bc 0f09 	cmp.w	ip, #9
 800f694:	d810      	bhi.n	800f6b8 <_strtoul_l.isra.0+0x94>
 800f696:	4664      	mov	r4, ip
 800f698:	42a3      	cmp	r3, r4
 800f69a:	dd1e      	ble.n	800f6da <_strtoul_l.isra.0+0xb6>
 800f69c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f6a0:	d007      	beq.n	800f6b2 <_strtoul_l.isra.0+0x8e>
 800f6a2:	4580      	cmp	r8, r0
 800f6a4:	d316      	bcc.n	800f6d4 <_strtoul_l.isra.0+0xb0>
 800f6a6:	d101      	bne.n	800f6ac <_strtoul_l.isra.0+0x88>
 800f6a8:	45a1      	cmp	r9, r4
 800f6aa:	db13      	blt.n	800f6d4 <_strtoul_l.isra.0+0xb0>
 800f6ac:	fb00 4003 	mla	r0, r0, r3, r4
 800f6b0:	2601      	movs	r6, #1
 800f6b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6b6:	e7e9      	b.n	800f68c <_strtoul_l.isra.0+0x68>
 800f6b8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f6bc:	f1bc 0f19 	cmp.w	ip, #25
 800f6c0:	d801      	bhi.n	800f6c6 <_strtoul_l.isra.0+0xa2>
 800f6c2:	3c37      	subs	r4, #55	@ 0x37
 800f6c4:	e7e8      	b.n	800f698 <_strtoul_l.isra.0+0x74>
 800f6c6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f6ca:	f1bc 0f19 	cmp.w	ip, #25
 800f6ce:	d804      	bhi.n	800f6da <_strtoul_l.isra.0+0xb6>
 800f6d0:	3c57      	subs	r4, #87	@ 0x57
 800f6d2:	e7e1      	b.n	800f698 <_strtoul_l.isra.0+0x74>
 800f6d4:	f04f 36ff 	mov.w	r6, #4294967295
 800f6d8:	e7eb      	b.n	800f6b2 <_strtoul_l.isra.0+0x8e>
 800f6da:	1c73      	adds	r3, r6, #1
 800f6dc:	d106      	bne.n	800f6ec <_strtoul_l.isra.0+0xc8>
 800f6de:	2322      	movs	r3, #34	@ 0x22
 800f6e0:	f8ce 3000 	str.w	r3, [lr]
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	b932      	cbnz	r2, 800f6f6 <_strtoul_l.isra.0+0xd2>
 800f6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ec:	b107      	cbz	r7, 800f6f0 <_strtoul_l.isra.0+0xcc>
 800f6ee:	4240      	negs	r0, r0
 800f6f0:	2a00      	cmp	r2, #0
 800f6f2:	d0f9      	beq.n	800f6e8 <_strtoul_l.isra.0+0xc4>
 800f6f4:	b106      	cbz	r6, 800f6f8 <_strtoul_l.isra.0+0xd4>
 800f6f6:	1e69      	subs	r1, r5, #1
 800f6f8:	6011      	str	r1, [r2, #0]
 800f6fa:	e7f5      	b.n	800f6e8 <_strtoul_l.isra.0+0xc4>
 800f6fc:	080117b1 	.word	0x080117b1

0800f700 <_strtoul_r>:
 800f700:	f7ff bf90 	b.w	800f624 <_strtoul_l.isra.0>

0800f704 <__sfputc_r>:
 800f704:	6893      	ldr	r3, [r2, #8]
 800f706:	3b01      	subs	r3, #1
 800f708:	2b00      	cmp	r3, #0
 800f70a:	b410      	push	{r4}
 800f70c:	6093      	str	r3, [r2, #8]
 800f70e:	da08      	bge.n	800f722 <__sfputc_r+0x1e>
 800f710:	6994      	ldr	r4, [r2, #24]
 800f712:	42a3      	cmp	r3, r4
 800f714:	db01      	blt.n	800f71a <__sfputc_r+0x16>
 800f716:	290a      	cmp	r1, #10
 800f718:	d103      	bne.n	800f722 <__sfputc_r+0x1e>
 800f71a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f71e:	f000 b933 	b.w	800f988 <__swbuf_r>
 800f722:	6813      	ldr	r3, [r2, #0]
 800f724:	1c58      	adds	r0, r3, #1
 800f726:	6010      	str	r0, [r2, #0]
 800f728:	7019      	strb	r1, [r3, #0]
 800f72a:	4608      	mov	r0, r1
 800f72c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <__sfputs_r>:
 800f732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f734:	4606      	mov	r6, r0
 800f736:	460f      	mov	r7, r1
 800f738:	4614      	mov	r4, r2
 800f73a:	18d5      	adds	r5, r2, r3
 800f73c:	42ac      	cmp	r4, r5
 800f73e:	d101      	bne.n	800f744 <__sfputs_r+0x12>
 800f740:	2000      	movs	r0, #0
 800f742:	e007      	b.n	800f754 <__sfputs_r+0x22>
 800f744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f748:	463a      	mov	r2, r7
 800f74a:	4630      	mov	r0, r6
 800f74c:	f7ff ffda 	bl	800f704 <__sfputc_r>
 800f750:	1c43      	adds	r3, r0, #1
 800f752:	d1f3      	bne.n	800f73c <__sfputs_r+0xa>
 800f754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f758 <_vfiprintf_r>:
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	460d      	mov	r5, r1
 800f75e:	b09d      	sub	sp, #116	@ 0x74
 800f760:	4614      	mov	r4, r2
 800f762:	4698      	mov	r8, r3
 800f764:	4606      	mov	r6, r0
 800f766:	b118      	cbz	r0, 800f770 <_vfiprintf_r+0x18>
 800f768:	6a03      	ldr	r3, [r0, #32]
 800f76a:	b90b      	cbnz	r3, 800f770 <_vfiprintf_r+0x18>
 800f76c:	f7fc ff94 	bl	800c698 <__sinit>
 800f770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f772:	07d9      	lsls	r1, r3, #31
 800f774:	d405      	bmi.n	800f782 <_vfiprintf_r+0x2a>
 800f776:	89ab      	ldrh	r3, [r5, #12]
 800f778:	059a      	lsls	r2, r3, #22
 800f77a:	d402      	bmi.n	800f782 <_vfiprintf_r+0x2a>
 800f77c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f77e:	f7fd f99e 	bl	800cabe <__retarget_lock_acquire_recursive>
 800f782:	89ab      	ldrh	r3, [r5, #12]
 800f784:	071b      	lsls	r3, r3, #28
 800f786:	d501      	bpl.n	800f78c <_vfiprintf_r+0x34>
 800f788:	692b      	ldr	r3, [r5, #16]
 800f78a:	b99b      	cbnz	r3, 800f7b4 <_vfiprintf_r+0x5c>
 800f78c:	4629      	mov	r1, r5
 800f78e:	4630      	mov	r0, r6
 800f790:	f000 f938 	bl	800fa04 <__swsetup_r>
 800f794:	b170      	cbz	r0, 800f7b4 <_vfiprintf_r+0x5c>
 800f796:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f798:	07dc      	lsls	r4, r3, #31
 800f79a:	d504      	bpl.n	800f7a6 <_vfiprintf_r+0x4e>
 800f79c:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a0:	b01d      	add	sp, #116	@ 0x74
 800f7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a6:	89ab      	ldrh	r3, [r5, #12]
 800f7a8:	0598      	lsls	r0, r3, #22
 800f7aa:	d4f7      	bmi.n	800f79c <_vfiprintf_r+0x44>
 800f7ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ae:	f7fd f987 	bl	800cac0 <__retarget_lock_release_recursive>
 800f7b2:	e7f3      	b.n	800f79c <_vfiprintf_r+0x44>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b8:	2320      	movs	r3, #32
 800f7ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7be:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7c2:	2330      	movs	r3, #48	@ 0x30
 800f7c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f974 <_vfiprintf_r+0x21c>
 800f7c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7cc:	f04f 0901 	mov.w	r9, #1
 800f7d0:	4623      	mov	r3, r4
 800f7d2:	469a      	mov	sl, r3
 800f7d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7d8:	b10a      	cbz	r2, 800f7de <_vfiprintf_r+0x86>
 800f7da:	2a25      	cmp	r2, #37	@ 0x25
 800f7dc:	d1f9      	bne.n	800f7d2 <_vfiprintf_r+0x7a>
 800f7de:	ebba 0b04 	subs.w	fp, sl, r4
 800f7e2:	d00b      	beq.n	800f7fc <_vfiprintf_r+0xa4>
 800f7e4:	465b      	mov	r3, fp
 800f7e6:	4622      	mov	r2, r4
 800f7e8:	4629      	mov	r1, r5
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f7ff ffa1 	bl	800f732 <__sfputs_r>
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	f000 80a7 	beq.w	800f944 <_vfiprintf_r+0x1ec>
 800f7f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7f8:	445a      	add	r2, fp
 800f7fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f800:	2b00      	cmp	r3, #0
 800f802:	f000 809f 	beq.w	800f944 <_vfiprintf_r+0x1ec>
 800f806:	2300      	movs	r3, #0
 800f808:	f04f 32ff 	mov.w	r2, #4294967295
 800f80c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f810:	f10a 0a01 	add.w	sl, sl, #1
 800f814:	9304      	str	r3, [sp, #16]
 800f816:	9307      	str	r3, [sp, #28]
 800f818:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f81c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f81e:	4654      	mov	r4, sl
 800f820:	2205      	movs	r2, #5
 800f822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f826:	4853      	ldr	r0, [pc, #332]	@ (800f974 <_vfiprintf_r+0x21c>)
 800f828:	f7f0 fce2 	bl	80001f0 <memchr>
 800f82c:	9a04      	ldr	r2, [sp, #16]
 800f82e:	b9d8      	cbnz	r0, 800f868 <_vfiprintf_r+0x110>
 800f830:	06d1      	lsls	r1, r2, #27
 800f832:	bf44      	itt	mi
 800f834:	2320      	movmi	r3, #32
 800f836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f83a:	0713      	lsls	r3, r2, #28
 800f83c:	bf44      	itt	mi
 800f83e:	232b      	movmi	r3, #43	@ 0x2b
 800f840:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f844:	f89a 3000 	ldrb.w	r3, [sl]
 800f848:	2b2a      	cmp	r3, #42	@ 0x2a
 800f84a:	d015      	beq.n	800f878 <_vfiprintf_r+0x120>
 800f84c:	9a07      	ldr	r2, [sp, #28]
 800f84e:	4654      	mov	r4, sl
 800f850:	2000      	movs	r0, #0
 800f852:	f04f 0c0a 	mov.w	ip, #10
 800f856:	4621      	mov	r1, r4
 800f858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f85c:	3b30      	subs	r3, #48	@ 0x30
 800f85e:	2b09      	cmp	r3, #9
 800f860:	d94b      	bls.n	800f8fa <_vfiprintf_r+0x1a2>
 800f862:	b1b0      	cbz	r0, 800f892 <_vfiprintf_r+0x13a>
 800f864:	9207      	str	r2, [sp, #28]
 800f866:	e014      	b.n	800f892 <_vfiprintf_r+0x13a>
 800f868:	eba0 0308 	sub.w	r3, r0, r8
 800f86c:	fa09 f303 	lsl.w	r3, r9, r3
 800f870:	4313      	orrs	r3, r2
 800f872:	9304      	str	r3, [sp, #16]
 800f874:	46a2      	mov	sl, r4
 800f876:	e7d2      	b.n	800f81e <_vfiprintf_r+0xc6>
 800f878:	9b03      	ldr	r3, [sp, #12]
 800f87a:	1d19      	adds	r1, r3, #4
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	9103      	str	r1, [sp, #12]
 800f880:	2b00      	cmp	r3, #0
 800f882:	bfbb      	ittet	lt
 800f884:	425b      	neglt	r3, r3
 800f886:	f042 0202 	orrlt.w	r2, r2, #2
 800f88a:	9307      	strge	r3, [sp, #28]
 800f88c:	9307      	strlt	r3, [sp, #28]
 800f88e:	bfb8      	it	lt
 800f890:	9204      	strlt	r2, [sp, #16]
 800f892:	7823      	ldrb	r3, [r4, #0]
 800f894:	2b2e      	cmp	r3, #46	@ 0x2e
 800f896:	d10a      	bne.n	800f8ae <_vfiprintf_r+0x156>
 800f898:	7863      	ldrb	r3, [r4, #1]
 800f89a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f89c:	d132      	bne.n	800f904 <_vfiprintf_r+0x1ac>
 800f89e:	9b03      	ldr	r3, [sp, #12]
 800f8a0:	1d1a      	adds	r2, r3, #4
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	9203      	str	r2, [sp, #12]
 800f8a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8aa:	3402      	adds	r4, #2
 800f8ac:	9305      	str	r3, [sp, #20]
 800f8ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f984 <_vfiprintf_r+0x22c>
 800f8b2:	7821      	ldrb	r1, [r4, #0]
 800f8b4:	2203      	movs	r2, #3
 800f8b6:	4650      	mov	r0, sl
 800f8b8:	f7f0 fc9a 	bl	80001f0 <memchr>
 800f8bc:	b138      	cbz	r0, 800f8ce <_vfiprintf_r+0x176>
 800f8be:	9b04      	ldr	r3, [sp, #16]
 800f8c0:	eba0 000a 	sub.w	r0, r0, sl
 800f8c4:	2240      	movs	r2, #64	@ 0x40
 800f8c6:	4082      	lsls	r2, r0
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	3401      	adds	r4, #1
 800f8cc:	9304      	str	r3, [sp, #16]
 800f8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8d2:	4829      	ldr	r0, [pc, #164]	@ (800f978 <_vfiprintf_r+0x220>)
 800f8d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8d8:	2206      	movs	r2, #6
 800f8da:	f7f0 fc89 	bl	80001f0 <memchr>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d03f      	beq.n	800f962 <_vfiprintf_r+0x20a>
 800f8e2:	4b26      	ldr	r3, [pc, #152]	@ (800f97c <_vfiprintf_r+0x224>)
 800f8e4:	bb1b      	cbnz	r3, 800f92e <_vfiprintf_r+0x1d6>
 800f8e6:	9b03      	ldr	r3, [sp, #12]
 800f8e8:	3307      	adds	r3, #7
 800f8ea:	f023 0307 	bic.w	r3, r3, #7
 800f8ee:	3308      	adds	r3, #8
 800f8f0:	9303      	str	r3, [sp, #12]
 800f8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8f4:	443b      	add	r3, r7
 800f8f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8f8:	e76a      	b.n	800f7d0 <_vfiprintf_r+0x78>
 800f8fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8fe:	460c      	mov	r4, r1
 800f900:	2001      	movs	r0, #1
 800f902:	e7a8      	b.n	800f856 <_vfiprintf_r+0xfe>
 800f904:	2300      	movs	r3, #0
 800f906:	3401      	adds	r4, #1
 800f908:	9305      	str	r3, [sp, #20]
 800f90a:	4619      	mov	r1, r3
 800f90c:	f04f 0c0a 	mov.w	ip, #10
 800f910:	4620      	mov	r0, r4
 800f912:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f916:	3a30      	subs	r2, #48	@ 0x30
 800f918:	2a09      	cmp	r2, #9
 800f91a:	d903      	bls.n	800f924 <_vfiprintf_r+0x1cc>
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d0c6      	beq.n	800f8ae <_vfiprintf_r+0x156>
 800f920:	9105      	str	r1, [sp, #20]
 800f922:	e7c4      	b.n	800f8ae <_vfiprintf_r+0x156>
 800f924:	fb0c 2101 	mla	r1, ip, r1, r2
 800f928:	4604      	mov	r4, r0
 800f92a:	2301      	movs	r3, #1
 800f92c:	e7f0      	b.n	800f910 <_vfiprintf_r+0x1b8>
 800f92e:	ab03      	add	r3, sp, #12
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	462a      	mov	r2, r5
 800f934:	4b12      	ldr	r3, [pc, #72]	@ (800f980 <_vfiprintf_r+0x228>)
 800f936:	a904      	add	r1, sp, #16
 800f938:	4630      	mov	r0, r6
 800f93a:	f7fc f85d 	bl	800b9f8 <_printf_float>
 800f93e:	4607      	mov	r7, r0
 800f940:	1c78      	adds	r0, r7, #1
 800f942:	d1d6      	bne.n	800f8f2 <_vfiprintf_r+0x19a>
 800f944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f946:	07d9      	lsls	r1, r3, #31
 800f948:	d405      	bmi.n	800f956 <_vfiprintf_r+0x1fe>
 800f94a:	89ab      	ldrh	r3, [r5, #12]
 800f94c:	059a      	lsls	r2, r3, #22
 800f94e:	d402      	bmi.n	800f956 <_vfiprintf_r+0x1fe>
 800f950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f952:	f7fd f8b5 	bl	800cac0 <__retarget_lock_release_recursive>
 800f956:	89ab      	ldrh	r3, [r5, #12]
 800f958:	065b      	lsls	r3, r3, #25
 800f95a:	f53f af1f 	bmi.w	800f79c <_vfiprintf_r+0x44>
 800f95e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f960:	e71e      	b.n	800f7a0 <_vfiprintf_r+0x48>
 800f962:	ab03      	add	r3, sp, #12
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	462a      	mov	r2, r5
 800f968:	4b05      	ldr	r3, [pc, #20]	@ (800f980 <_vfiprintf_r+0x228>)
 800f96a:	a904      	add	r1, sp, #16
 800f96c:	4630      	mov	r0, r6
 800f96e:	f7fc fadb 	bl	800bf28 <_printf_i>
 800f972:	e7e4      	b.n	800f93e <_vfiprintf_r+0x1e6>
 800f974:	0801172d 	.word	0x0801172d
 800f978:	08011737 	.word	0x08011737
 800f97c:	0800b9f9 	.word	0x0800b9f9
 800f980:	0800f733 	.word	0x0800f733
 800f984:	08011733 	.word	0x08011733

0800f988 <__swbuf_r>:
 800f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98a:	460e      	mov	r6, r1
 800f98c:	4614      	mov	r4, r2
 800f98e:	4605      	mov	r5, r0
 800f990:	b118      	cbz	r0, 800f99a <__swbuf_r+0x12>
 800f992:	6a03      	ldr	r3, [r0, #32]
 800f994:	b90b      	cbnz	r3, 800f99a <__swbuf_r+0x12>
 800f996:	f7fc fe7f 	bl	800c698 <__sinit>
 800f99a:	69a3      	ldr	r3, [r4, #24]
 800f99c:	60a3      	str	r3, [r4, #8]
 800f99e:	89a3      	ldrh	r3, [r4, #12]
 800f9a0:	071a      	lsls	r2, r3, #28
 800f9a2:	d501      	bpl.n	800f9a8 <__swbuf_r+0x20>
 800f9a4:	6923      	ldr	r3, [r4, #16]
 800f9a6:	b943      	cbnz	r3, 800f9ba <__swbuf_r+0x32>
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f000 f82a 	bl	800fa04 <__swsetup_r>
 800f9b0:	b118      	cbz	r0, 800f9ba <__swbuf_r+0x32>
 800f9b2:	f04f 37ff 	mov.w	r7, #4294967295
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	6922      	ldr	r2, [r4, #16]
 800f9be:	1a98      	subs	r0, r3, r2
 800f9c0:	6963      	ldr	r3, [r4, #20]
 800f9c2:	b2f6      	uxtb	r6, r6
 800f9c4:	4283      	cmp	r3, r0
 800f9c6:	4637      	mov	r7, r6
 800f9c8:	dc05      	bgt.n	800f9d6 <__swbuf_r+0x4e>
 800f9ca:	4621      	mov	r1, r4
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	f7ff fd07 	bl	800f3e0 <_fflush_r>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d1ed      	bne.n	800f9b2 <__swbuf_r+0x2a>
 800f9d6:	68a3      	ldr	r3, [r4, #8]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	60a3      	str	r3, [r4, #8]
 800f9dc:	6823      	ldr	r3, [r4, #0]
 800f9de:	1c5a      	adds	r2, r3, #1
 800f9e0:	6022      	str	r2, [r4, #0]
 800f9e2:	701e      	strb	r6, [r3, #0]
 800f9e4:	6962      	ldr	r2, [r4, #20]
 800f9e6:	1c43      	adds	r3, r0, #1
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d004      	beq.n	800f9f6 <__swbuf_r+0x6e>
 800f9ec:	89a3      	ldrh	r3, [r4, #12]
 800f9ee:	07db      	lsls	r3, r3, #31
 800f9f0:	d5e1      	bpl.n	800f9b6 <__swbuf_r+0x2e>
 800f9f2:	2e0a      	cmp	r6, #10
 800f9f4:	d1df      	bne.n	800f9b6 <__swbuf_r+0x2e>
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f7ff fcf1 	bl	800f3e0 <_fflush_r>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	d0d9      	beq.n	800f9b6 <__swbuf_r+0x2e>
 800fa02:	e7d6      	b.n	800f9b2 <__swbuf_r+0x2a>

0800fa04 <__swsetup_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4b29      	ldr	r3, [pc, #164]	@ (800faac <__swsetup_r+0xa8>)
 800fa08:	4605      	mov	r5, r0
 800fa0a:	6818      	ldr	r0, [r3, #0]
 800fa0c:	460c      	mov	r4, r1
 800fa0e:	b118      	cbz	r0, 800fa18 <__swsetup_r+0x14>
 800fa10:	6a03      	ldr	r3, [r0, #32]
 800fa12:	b90b      	cbnz	r3, 800fa18 <__swsetup_r+0x14>
 800fa14:	f7fc fe40 	bl	800c698 <__sinit>
 800fa18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa1c:	0719      	lsls	r1, r3, #28
 800fa1e:	d422      	bmi.n	800fa66 <__swsetup_r+0x62>
 800fa20:	06da      	lsls	r2, r3, #27
 800fa22:	d407      	bmi.n	800fa34 <__swsetup_r+0x30>
 800fa24:	2209      	movs	r2, #9
 800fa26:	602a      	str	r2, [r5, #0]
 800fa28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa2c:	81a3      	strh	r3, [r4, #12]
 800fa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa32:	e033      	b.n	800fa9c <__swsetup_r+0x98>
 800fa34:	0758      	lsls	r0, r3, #29
 800fa36:	d512      	bpl.n	800fa5e <__swsetup_r+0x5a>
 800fa38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa3a:	b141      	cbz	r1, 800fa4e <__swsetup_r+0x4a>
 800fa3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa40:	4299      	cmp	r1, r3
 800fa42:	d002      	beq.n	800fa4a <__swsetup_r+0x46>
 800fa44:	4628      	mov	r0, r5
 800fa46:	f7fd fecf 	bl	800d7e8 <_free_r>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa4e:	89a3      	ldrh	r3, [r4, #12]
 800fa50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa54:	81a3      	strh	r3, [r4, #12]
 800fa56:	2300      	movs	r3, #0
 800fa58:	6063      	str	r3, [r4, #4]
 800fa5a:	6923      	ldr	r3, [r4, #16]
 800fa5c:	6023      	str	r3, [r4, #0]
 800fa5e:	89a3      	ldrh	r3, [r4, #12]
 800fa60:	f043 0308 	orr.w	r3, r3, #8
 800fa64:	81a3      	strh	r3, [r4, #12]
 800fa66:	6923      	ldr	r3, [r4, #16]
 800fa68:	b94b      	cbnz	r3, 800fa7e <__swsetup_r+0x7a>
 800fa6a:	89a3      	ldrh	r3, [r4, #12]
 800fa6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa74:	d003      	beq.n	800fa7e <__swsetup_r+0x7a>
 800fa76:	4621      	mov	r1, r4
 800fa78:	4628      	mov	r0, r5
 800fa7a:	f000 f88b 	bl	800fb94 <__smakebuf_r>
 800fa7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa82:	f013 0201 	ands.w	r2, r3, #1
 800fa86:	d00a      	beq.n	800fa9e <__swsetup_r+0x9a>
 800fa88:	2200      	movs	r2, #0
 800fa8a:	60a2      	str	r2, [r4, #8]
 800fa8c:	6962      	ldr	r2, [r4, #20]
 800fa8e:	4252      	negs	r2, r2
 800fa90:	61a2      	str	r2, [r4, #24]
 800fa92:	6922      	ldr	r2, [r4, #16]
 800fa94:	b942      	cbnz	r2, 800faa8 <__swsetup_r+0xa4>
 800fa96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa9a:	d1c5      	bne.n	800fa28 <__swsetup_r+0x24>
 800fa9c:	bd38      	pop	{r3, r4, r5, pc}
 800fa9e:	0799      	lsls	r1, r3, #30
 800faa0:	bf58      	it	pl
 800faa2:	6962      	ldrpl	r2, [r4, #20]
 800faa4:	60a2      	str	r2, [r4, #8]
 800faa6:	e7f4      	b.n	800fa92 <__swsetup_r+0x8e>
 800faa8:	2000      	movs	r0, #0
 800faaa:	e7f7      	b.n	800fa9c <__swsetup_r+0x98>
 800faac:	20000430 	.word	0x20000430

0800fab0 <_raise_r>:
 800fab0:	291f      	cmp	r1, #31
 800fab2:	b538      	push	{r3, r4, r5, lr}
 800fab4:	4605      	mov	r5, r0
 800fab6:	460c      	mov	r4, r1
 800fab8:	d904      	bls.n	800fac4 <_raise_r+0x14>
 800faba:	2316      	movs	r3, #22
 800fabc:	6003      	str	r3, [r0, #0]
 800fabe:	f04f 30ff 	mov.w	r0, #4294967295
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fac6:	b112      	cbz	r2, 800face <_raise_r+0x1e>
 800fac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800facc:	b94b      	cbnz	r3, 800fae2 <_raise_r+0x32>
 800face:	4628      	mov	r0, r5
 800fad0:	f000 f830 	bl	800fb34 <_getpid_r>
 800fad4:	4622      	mov	r2, r4
 800fad6:	4601      	mov	r1, r0
 800fad8:	4628      	mov	r0, r5
 800fada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fade:	f000 b817 	b.w	800fb10 <_kill_r>
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d00a      	beq.n	800fafc <_raise_r+0x4c>
 800fae6:	1c59      	adds	r1, r3, #1
 800fae8:	d103      	bne.n	800faf2 <_raise_r+0x42>
 800faea:	2316      	movs	r3, #22
 800faec:	6003      	str	r3, [r0, #0]
 800faee:	2001      	movs	r0, #1
 800faf0:	e7e7      	b.n	800fac2 <_raise_r+0x12>
 800faf2:	2100      	movs	r1, #0
 800faf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800faf8:	4620      	mov	r0, r4
 800fafa:	4798      	blx	r3
 800fafc:	2000      	movs	r0, #0
 800fafe:	e7e0      	b.n	800fac2 <_raise_r+0x12>

0800fb00 <raise>:
 800fb00:	4b02      	ldr	r3, [pc, #8]	@ (800fb0c <raise+0xc>)
 800fb02:	4601      	mov	r1, r0
 800fb04:	6818      	ldr	r0, [r3, #0]
 800fb06:	f7ff bfd3 	b.w	800fab0 <_raise_r>
 800fb0a:	bf00      	nop
 800fb0c:	20000430 	.word	0x20000430

0800fb10 <_kill_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4d07      	ldr	r5, [pc, #28]	@ (800fb30 <_kill_r+0x20>)
 800fb14:	2300      	movs	r3, #0
 800fb16:	4604      	mov	r4, r0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	602b      	str	r3, [r5, #0]
 800fb1e:	f7f3 ffd5 	bl	8003acc <_kill>
 800fb22:	1c43      	adds	r3, r0, #1
 800fb24:	d102      	bne.n	800fb2c <_kill_r+0x1c>
 800fb26:	682b      	ldr	r3, [r5, #0]
 800fb28:	b103      	cbz	r3, 800fb2c <_kill_r+0x1c>
 800fb2a:	6023      	str	r3, [r4, #0]
 800fb2c:	bd38      	pop	{r3, r4, r5, pc}
 800fb2e:	bf00      	nop
 800fb30:	20005e5c 	.word	0x20005e5c

0800fb34 <_getpid_r>:
 800fb34:	f7f3 bfc2 	b.w	8003abc <_getpid>

0800fb38 <_malloc_usable_size_r>:
 800fb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb3c:	1f18      	subs	r0, r3, #4
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	bfbc      	itt	lt
 800fb42:	580b      	ldrlt	r3, [r1, r0]
 800fb44:	18c0      	addlt	r0, r0, r3
 800fb46:	4770      	bx	lr

0800fb48 <__swhatbuf_r>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb50:	2900      	cmp	r1, #0
 800fb52:	b096      	sub	sp, #88	@ 0x58
 800fb54:	4615      	mov	r5, r2
 800fb56:	461e      	mov	r6, r3
 800fb58:	da0d      	bge.n	800fb76 <__swhatbuf_r+0x2e>
 800fb5a:	89a3      	ldrh	r3, [r4, #12]
 800fb5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb60:	f04f 0100 	mov.w	r1, #0
 800fb64:	bf14      	ite	ne
 800fb66:	2340      	movne	r3, #64	@ 0x40
 800fb68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	6031      	str	r1, [r6, #0]
 800fb70:	602b      	str	r3, [r5, #0]
 800fb72:	b016      	add	sp, #88	@ 0x58
 800fb74:	bd70      	pop	{r4, r5, r6, pc}
 800fb76:	466a      	mov	r2, sp
 800fb78:	f000 f848 	bl	800fc0c <_fstat_r>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	dbec      	blt.n	800fb5a <__swhatbuf_r+0x12>
 800fb80:	9901      	ldr	r1, [sp, #4]
 800fb82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb8a:	4259      	negs	r1, r3
 800fb8c:	4159      	adcs	r1, r3
 800fb8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb92:	e7eb      	b.n	800fb6c <__swhatbuf_r+0x24>

0800fb94 <__smakebuf_r>:
 800fb94:	898b      	ldrh	r3, [r1, #12]
 800fb96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb98:	079d      	lsls	r5, r3, #30
 800fb9a:	4606      	mov	r6, r0
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	d507      	bpl.n	800fbb0 <__smakebuf_r+0x1c>
 800fba0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fba4:	6023      	str	r3, [r4, #0]
 800fba6:	6123      	str	r3, [r4, #16]
 800fba8:	2301      	movs	r3, #1
 800fbaa:	6163      	str	r3, [r4, #20]
 800fbac:	b003      	add	sp, #12
 800fbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbb0:	ab01      	add	r3, sp, #4
 800fbb2:	466a      	mov	r2, sp
 800fbb4:	f7ff ffc8 	bl	800fb48 <__swhatbuf_r>
 800fbb8:	9f00      	ldr	r7, [sp, #0]
 800fbba:	4605      	mov	r5, r0
 800fbbc:	4639      	mov	r1, r7
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	f7fe f9c0 	bl	800df44 <_malloc_r>
 800fbc4:	b948      	cbnz	r0, 800fbda <__smakebuf_r+0x46>
 800fbc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbca:	059a      	lsls	r2, r3, #22
 800fbcc:	d4ee      	bmi.n	800fbac <__smakebuf_r+0x18>
 800fbce:	f023 0303 	bic.w	r3, r3, #3
 800fbd2:	f043 0302 	orr.w	r3, r3, #2
 800fbd6:	81a3      	strh	r3, [r4, #12]
 800fbd8:	e7e2      	b.n	800fba0 <__smakebuf_r+0xc>
 800fbda:	89a3      	ldrh	r3, [r4, #12]
 800fbdc:	6020      	str	r0, [r4, #0]
 800fbde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbe2:	81a3      	strh	r3, [r4, #12]
 800fbe4:	9b01      	ldr	r3, [sp, #4]
 800fbe6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbea:	b15b      	cbz	r3, 800fc04 <__smakebuf_r+0x70>
 800fbec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	f000 f81d 	bl	800fc30 <_isatty_r>
 800fbf6:	b128      	cbz	r0, 800fc04 <__smakebuf_r+0x70>
 800fbf8:	89a3      	ldrh	r3, [r4, #12]
 800fbfa:	f023 0303 	bic.w	r3, r3, #3
 800fbfe:	f043 0301 	orr.w	r3, r3, #1
 800fc02:	81a3      	strh	r3, [r4, #12]
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	431d      	orrs	r5, r3
 800fc08:	81a5      	strh	r5, [r4, #12]
 800fc0a:	e7cf      	b.n	800fbac <__smakebuf_r+0x18>

0800fc0c <_fstat_r>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	4d07      	ldr	r5, [pc, #28]	@ (800fc2c <_fstat_r+0x20>)
 800fc10:	2300      	movs	r3, #0
 800fc12:	4604      	mov	r4, r0
 800fc14:	4608      	mov	r0, r1
 800fc16:	4611      	mov	r1, r2
 800fc18:	602b      	str	r3, [r5, #0]
 800fc1a:	f7f3 ffb7 	bl	8003b8c <_fstat>
 800fc1e:	1c43      	adds	r3, r0, #1
 800fc20:	d102      	bne.n	800fc28 <_fstat_r+0x1c>
 800fc22:	682b      	ldr	r3, [r5, #0]
 800fc24:	b103      	cbz	r3, 800fc28 <_fstat_r+0x1c>
 800fc26:	6023      	str	r3, [r4, #0]
 800fc28:	bd38      	pop	{r3, r4, r5, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20005e5c 	.word	0x20005e5c

0800fc30 <_isatty_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4d06      	ldr	r5, [pc, #24]	@ (800fc4c <_isatty_r+0x1c>)
 800fc34:	2300      	movs	r3, #0
 800fc36:	4604      	mov	r4, r0
 800fc38:	4608      	mov	r0, r1
 800fc3a:	602b      	str	r3, [r5, #0]
 800fc3c:	f7f3 ffb6 	bl	8003bac <_isatty>
 800fc40:	1c43      	adds	r3, r0, #1
 800fc42:	d102      	bne.n	800fc4a <_isatty_r+0x1a>
 800fc44:	682b      	ldr	r3, [r5, #0]
 800fc46:	b103      	cbz	r3, 800fc4a <_isatty_r+0x1a>
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	20005e5c 	.word	0x20005e5c

0800fc50 <_init>:
 800fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc52:	bf00      	nop
 800fc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc56:	bc08      	pop	{r3}
 800fc58:	469e      	mov	lr, r3
 800fc5a:	4770      	bx	lr

0800fc5c <_fini>:
 800fc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5e:	bf00      	nop
 800fc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc62:	bc08      	pop	{r3}
 800fc64:	469e      	mov	lr, r3
 800fc66:	4770      	bx	lr
